{"name": "1613_E. Crazy Robot", "description": "There is a grid, consisting of n rows and m columns. Each cell of the grid is either free or blocked. One of the free cells contains a lab. All the cells beyond the borders of the grid are also blocked.\n\nA crazy robot has escaped from this lab. It is currently in some free cell of the grid. You can send one of the following commands to the robot: \"move right\", \"move down\", \"move left\" or \"move up\". Each command means moving to a neighbouring cell in the corresponding direction.\n\nHowever, as the robot is crazy, it will do anything except following the command. Upon receiving a command, it will choose a direction such that it differs from the one in command and the cell in that direction is not blocked. If there is such a direction, then it will move to a neighbouring cell in that direction. Otherwise, it will do nothing.\n\nWe want to get the robot to the lab to get it fixed. For each free cell, determine if the robot can be forced to reach the lab starting in this cell. That is, after each step of the robot a command can be sent to a robot such that no matter what different directions the robot chooses, it will end up in a lab.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers n and m (1 \u2264 n, m \u2264 10^6; n \u22c5 m \u2264 10^6) \u2014 the number of rows and the number of columns in the grid.\n\nThe i-th of the next n lines provides a description of the i-th row of the grid. It consists of m elements of one of three types: \n\n  * '.' \u2014 the cell is free; \n  * '#' \u2014 the cell is blocked; \n  * 'L' \u2014 the cell contains a lab. \n\n\n\nThe grid contains exactly one lab. The sum of n \u22c5 m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase find the free cells that the robot can be forced to reach the lab from. Given the grid, replace the free cells (marked with a dot) with a plus sign ('+') for the cells that the robot can be forced to reach the lab from. Print the resulting grid.\n\nExample\n\nInput\n\n\n4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n\n\nOutput\n\n\n...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n++++L++#.\n\nNote\n\nIn the first testcase there is no free cell that the robot can be forced to reach the lab from. Consider a corner cell. Given any direction, it will move to a neighbouring border grid that's not a corner. Now consider a non-corner free cell. No matter what direction you send to the robot, it can choose a different direction such that it ends up in a corner.\n\nIn the last testcase, you can keep sending the command that is opposite to the direction to the lab and the robot will have no choice other than move towards the lab.", "tags": ["dfs and similar", "graphs"], "difficulty": 11, "id": 1613, "sample_io": [{"input": "4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n", "output": ["...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n++++L++#.\n"]}], "test_list": [{"input": "1\n3 31\n############################..#\n.............................L.\n############################..#\n", "output": ["############################++#\n+++++++++++++++++++++++++++++L+\n############################++#\n"]}, {"input": "1\n3 25\n######################..#\n.......................L.\n######################..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n######################++#\n"]}, {"input": "1\n3 31\n#############################..\n.............................L.\n############################..#\n", "output": ["#############################++\n+++++++++++++++++++++++++++++L+\n############################++#\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n######################..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n.#..L....\n", "output": ["...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n.#++L++++\n"]}, {"input": "1\n3 31\n############################..#\n.L.............................\n############################..#\n", "output": ["############################..#\n+L++++++++++++++++++++++++++...\n############################..#\n"]}, {"input": "1\n3 25\n#..######################\n.......................L.\n######################..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n######################++#\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..######################\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..######################\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..######################\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n3 25\n######################..#\n.......................L.\n#..######################\n", "output": ["######################++#\n...++++++++++++++++++++L+\n#..######################\n"]}, {"input": "1\n2 31\n############################..#\n.L.............................\n############################..#\n", "output": ["############################..#\n+L++++++++++++++++++++++++++...\n"]}, {"input": "1\n3 25\n######################..#\n.L.......................\n######################..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n######################..#\n"]}, {"input": "4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n.#...\n.....\n1 1\nL\n1 9\n.#..L....\n", "output": ["...\n.L.\n...\n#++++\n++##L\n+#...\n++...\nL\n.#++L++++\n"]}, {"input": "1\n3 31\n#..############################\n.L.............................\n############################..#\n", "output": ["#++############################\n+L++++++++++++++++++++++++++...\n############################..#\n"]}, {"input": "1\n3 25\n#####################..##\n.......................L.\n#..######################\n", "output": ["#####################..##\n.......................L+\n#..######################\n"]}, {"input": "4\n3 3\n...\n..L\n...\n4 5\n#....\n..##L\n.#...\n.....\n1 1\nL\n1 9\n.#..L....\n", "output": ["..+\n..L\n..+\n#++++\n++##L\n+#...\n++...\nL\n.#++L++++\n"]}, {"input": "1\n3 25\n#####################..##\n.L.......................\n#..######################\n", "output": ["#####################..##\n+L+++++++++++++++++++....\n#++######################\n"]}, {"input": "1\n2 31\n############################..#\n.............................L.\n#################\"##########..#\n", "output": ["############################++#\n+++++++++++++++++++++++++++++L+\n"]}, {"input": "1\n3 31\n..#############################\n.............................L.\n############################..#\n", "output": ["..#############################\n..+++++++++++++++++++++++++++L+\n############################++#\n"]}, {"input": "1\n3 25\n#..######################\n.L.......................\n######################..#\n", "output": ["#++######################\n+L++++++++++++++++++++...\n######################..#\n"]}, {"input": "1\n3 25\n##..#####################\n.......................L.\n#..######################\n", "output": ["##..#####################\n....+++++++++++++++++++L+\n#..######################\n"]}, {"input": "1\n3 31\n#############################..\n...........L...................\n############################..#\n", "output": ["#############################..\n+++++++++++L++++++++++++++++...\n############################..#\n"]}, {"input": "1\n3 25\n######################..#\n.L.......................\n#..######################\n", "output": ["######################..#\n+L++++++++++++++++++++...\n#++######################\n"]}, {"input": "1\n2 25\n##.#############.########\n.L.......................\n#..###$###########$######\n", "output": ["##.#############.########\n+L.......................\n"]}, {"input": "1\n3 31\n#..############################\n.L.............................\n#..############################\n", "output": ["#++############################\n+L+++++++++++++++++++++++++++++\n#++############################\n"]}, {"input": "1\n3 25\n##..#####################\n.L.......................\n#..######################\n", "output": ["##..#####################\n+L.......................\n#++######################\n"]}, {"input": "1\n3 31\n#..############################\n.............................L.\n############################..#\n", "output": ["#..############################\n...++++++++++++++++++++++++++L+\n############################++#\n"]}, {"input": "1\n3 25\n#..######################\n.......................L.\n#..######################\n", "output": ["#..######################\n...++++++++++++++++++++L+\n#..######################\n"]}, {"input": "1\n3 25\n#####################..##\n.L.......................\n######################..#\n", "output": ["#####################..##\n+L+++++++++++++++++++....\n######################..#\n"]}, {"input": "1\n2 25\n################.#####.##\n.L.......................\n#..######$####\"#$########\n", "output": ["################.#####.##\n+L++++++++++++++.........\n"]}, {"input": "1\n3 31\n..#############################\n.L.............................\n############################..#\n", "output": ["++#############################\n+L++++++++++++++++++++++++++...\n############################..#\n"]}, {"input": "1\n2 31\n#..############################\n.............................L.\n##########\"######\"##########./#\n", "output": ["#..############################\n...++++++++++++++++++++++++++L+\n"]}, {"input": "1\n3 31\n#############################..\n...................L...........\n############################..#\n", "output": ["#############################..\n+++++++++++++++++++L++++++++...\n############################..#\n"]}, {"input": "1\n3 31\n#..############################\n.L.............................\n#.##.##########################\n", "output": ["#++############################\n+L++...........................\n#+##.##########################\n"]}, {"input": "1\n2 25\n##.##########.###########\n.L.......................\n####\"#################..#\n", "output": ["##.##########.###########\n+L.......................\n"]}, {"input": "1\n2 25\n##.#####.################\n.......................L.\n#############\"########..#\n", "output": ["##.#####.################\n.........++++++++++++++L+\n"]}, {"input": "1\n2 25\n################.#####.##\n.......................L.\n######\"######\"##$#####..#\n", "output": ["################.#####.##\n.......................L+\n"]}, {"input": "1\n3 31\n#..############################\n.L.............................\n################.############.#\n", "output": ["#++############################\n+L++++++++++++++...............\n################.############.#\n"]}, {"input": "4\n3 3\n...\n..L\n...\n4 5\n#....\n..##L\n..#..\n.....\n1 1\nL\n1 9\n.#..L....\n", "output": ["..+\n..L\n..+\n#++++\n..##L\n..#..\n.....\nL\n.#++L++++\n"]}, {"input": "1\n3 25\n#..######################\n.L.......................\n#..######################\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n#++######################\n"]}, {"input": "1\n3 31\n#..############################\n.............................L.\n#..############################\n", "output": ["#..############################\n...++++++++++++++++++++++++++L+\n#..############################\n"]}, {"input": "1\n2 25\n##.#####.################\n.L.......................\n#..######$####\"#$########\n", "output": ["##.#####.################\n+L.......................\n"]}, {"input": "1\n3 31\n#..############################\n.............................L.\n#.##.##########################\n", "output": ["#..############################\n.....++++++++++++++++++++++++L+\n#.##.##########################\n"]}, {"input": "1\n2 25\n######################..#\n......................L..\n#..###$##################\n", "output": ["######################++#\n++++++++++++++++++++++L++\n"]}, {"input": "4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n.#...\n.....\n1 1\nL\n1 9\n....L..#.\n", "output": ["...\n.L.\n...\n#++++\n++##L\n+#...\n++...\nL\n++++L++#.\n"]}, {"input": "1\n2 25\n#####################..##\n.......................L.\n#..######################\n", "output": ["#####################..##\n.......................L+\n"]}, {"input": "1\n2 25\n########.#############.##\n.L.......................\n#..###$###########$######\n", "output": ["########.#############.##\n+L++++++.................\n"]}, {"input": "1\n2 25\n###########.##########.##\n.L.......................\n####\"#################..#\n", "output": ["###########.##########.##\n+L+++++++++..............\n"]}, {"input": "1\n3 31\n#..############################\n.............................L.\n################.############.#\n", "output": ["#..############################\n.................++++++++++++L+\n################.############+#\n"]}, {"input": "1\n2 25\n##########.############.#\n......................L..\n#..###$##################\n", "output": ["##########.############.#\n...........+++++++++++L..\n"]}, {"input": "1\n2 31\n#..############################\n...............L...............\n#/.##########\"######\"##########\n", "output": ["#..############################\n...++++++++++++L+++++++++++++++\n"]}, {"input": "4\n3 3\n...\n.L.\n...\n4 5\n#....\nL.##.\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n", "output": ["...\n.L.\n...\n#....\nL.##.\n...#.\n.....\nL\n++++L++#.\n"]}, {"input": "1\n2 31\n#############################..\n.............................L.\n############################..#\n", "output": ["#############################++\n+++++++++++++++++++++++++++++L+\n"]}, {"input": "4\n3 3\n...\n..L\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n.#..L....\n", "output": ["..+\n..L\n..+\n#++++\n..##L\n...#+\n...++\nL\n.#++L++++\n"]}, {"input": "1\n2 25\n#..######################\n....................L....\n#..######################\n", "output": ["#..######################\n...+++++++++++++++++L++++\n"]}, {"input": "1\n2 25\n##..#####################\n.L.......................\n#..######################\n", "output": ["##..#####################\n+L.......................\n"]}, {"input": "1\n2 31\n..#############################\n.............................L.\n############################..#\n", "output": ["..#############################\n..+++++++++++++++++++++++++++L+\n"]}, {"input": "1\n3 25\n##..#####################\n.L.......................\n######################..#\n", "output": ["##..#####################\n+L.......................\n######################..#\n"]}, {"input": "1\n3 31\n#############################..\n...................L...........\n#..############################\n", "output": ["#############################..\n...++++++++++++++++L+++++++++..\n#..############################\n"]}, {"input": "1\n2 25\n######.###############.##\n.......................L.\n#..###$##################\n", "output": ["######.###############.##\n.......................L+\n"]}, {"input": "1\n3 31\n############################..#\n.............................L.\n#..############################\n", "output": ["############################++#\n...++++++++++++++++++++++++++L+\n#..############################\n"]}, {"input": "1\n2 31\n#..############################\n.L.............................\n#################\"##########-.#\n", "output": ["#++############################\n+L+++++++++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..######################\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n######################..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..###########\"##########\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n######################..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n######################..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..###$##################\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n####\"#################..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..###$###########$######\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..###$###########$######\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..#################\"####\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n###########\"##########..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..###########\"#$########\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 31\n############################..#\n.L.............................\n#################\"##########..#\n", "output": ["############################..#\n+L++++++++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n####\"##############$##..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..#################\"####\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..##########\"###########\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..###########\"#$####$###\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n####\"###########$##$##..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#.#############.#########\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..###$##################\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..####$############\"####\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..######$####\"#$########\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..$#####$####\"#$########\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..###############\"######\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..###$########$##$######\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n####\"#######\"######$##..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n####\"###########$##$##..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n##################$###..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 31\n############################..#\n.............................L.\n##########\"######\"##########..#\n", "output": ["############################++#\n+++++++++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..$#####$#\"##\"#$########\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n####\"#######\"######$##..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n##################$###..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 31\n############################..#\n.............................L.\n##########\"######\"##########./#\n", "output": ["############################++#\n+++++++++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..$#####$#\"##\"#$########\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n##############\"#######..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n####\"#################..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..#####$#####\"#$########\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..##$##$###########\"####\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..####$############\"####\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..###############!######\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n##################$###..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n####\"#######\"######$$#..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..$#######\"##\"#$#####$##\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n####\"#################..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n########$#\"#####$#####..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n$#######$#\"#####$#####..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..###################$##\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#./######################\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#############\"########..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n########$#\"###########..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n\"##########\"##########..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 31\n############################..#\n.............................L.\n#################\"##########-.#\n", "output": ["############################++#\n+++++++++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..$#####$####\"#$########\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..###$########$##$######\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n####\"####\"#########$##..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n##$#\"###########$##$##..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 31\n############################..#\n.L.............................\n##########\"######\"##########..#\n", "output": ["############################..#\n+L++++++++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..$#####$#\"##\"#$########\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n\"###\"#################..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..####$############\"\"###\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n######!###############..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..###$##################\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n####\"#################..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..###########\"#######$##\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#############\"########..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 31\n############################..#\n.............................L.\n#.-##########\"#################\n", "output": ["############################++#\n+++++++++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n######$##$########$###..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n####\"####\"#########$##..\"\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..#################\"###\"\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..#\"#########\"#######$##\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n####\"####\"##$######$##..\"\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n\"###\"#########$#######..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..#\"#########\"###\"###$##\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n##.#####.################\n.......................L.\n#############\"##$#####..#\n", "output": ["##.#####.################\n.........++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..#######$#########\"###\"\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n##.#####.################\n.......................L.\n######\"######\"##$#####..#\n", "output": ["##.#####.################\n.........++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..#######$#####\"###\"###\"\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n\"###\"###\"#####$#######..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n################.#####.##\n.L.......................\n######\"######\"##$#####..#\n", "output": ["################.#####.##\n+L++++++++++++++.........\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..###########\"##########\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n####\"###########$#####..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..###$######\"####$######\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..#######\"#########\"####\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#.#############.#########\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..###$########%##$######\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n####\"###########$##$##..$\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 31\n############################..#\n.L.............................\n#..##########\"######\"##########\n", "output": ["############################..#\n+L++++++++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..$#####$$\"##\"#$########\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..$#####$#\"##\"#######$##\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n##############\"#######..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n##.#############.########\n.L.......................\n#/.###$###########$######\n", "output": ["##.#############.########\n+L.......................\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..$#######\"##\"#$####\"$##\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..###################$##\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#./######################\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n####$########\"########..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n###$####$#\"###########..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 31\n############################..#\n.L.............................\n#################\"##########-.#\n", "output": ["############################..#\n+L++++++++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..$##\"##$####\"#$########\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#./$#####$#\"##\"#$########\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..####$############\"\"###\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n\"..##$#########\"####\"####\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n##.##########.###########\n.L.......................\n####\"############\"####..#\n", "output": ["##.##########.###########\n+L.......................\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n\"###\"#########$#######..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n##.#####.################\n.......................L.\n#############\"##%#####..#\n", "output": ["##.#####.################\n.........++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n\"###\"###\"#####$#######..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..#######\"#########\"####\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n########$#\"##\"$$#####$..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n######\"#######\"#######..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..$###\"###\"##\"#$####\"$##\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#./$#####$#\"##\"#$#####$##\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n\"###\"#$#######$#######..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..$###\"###\"##\"#$####\"$##\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n###\"\"#################..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n########$#\"####$######..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n####\"#########\"####$##..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n##################$##\"..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n####\"#######\"######$#$..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n####\"#################..$\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..#####$$####\"#$########\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n.#################$####.#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n################.#####.##\n.L.......................\n########$#\"####$######..#\n", "output": ["################.#####.##\n+L++++++++++++++.........\n"]}, {"input": "1\n2 31\n#..############################\n.............................L.\n#/.##########\"######\"##########\n", "output": ["#..############################\n...++++++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n\"###\"#################..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..###$######$###########\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n####\"######\"##########..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#############\"$#######..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 31\n############################..#\n.............................L.\n#.-######\"#####################\n", "output": ["############################++#\n+++++++++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..#################\"###\"\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n\"#############$#######..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..#######$#########\"###\"\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..###########!##########\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#.############$.#########\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n######$##%########$###..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n####\"###########$#$###..$\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..$\"#\"##$####\"#$########\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..####$###$########\"\"###\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n\"#$#\"#########$#######..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n$..#######\"#########\"####\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n########$###\"\"$$#####$..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}], "task_id": "codecontest/117", "prompt": "There exists a grid made up of n rows and m columns. Each individual cell within the grid is either unoccupied or unavailable. One of the available cells holds a lab. The cells that lie beyond the borders of the grid are all blocked. These blocked cells prevent any movement beyond the grid.\n\nA crazy robot has escaped from this lab. It is currently in some free cell of the grid. You can send one of the following commands to the robot: \"move right\", \"move down\", \"move left\" or \"move up\". Each command means moving to a neighbouring cell in the corresponding direction.\n\nHowever, as the robot is crazy, it will do anything except following the command. Upon receiving a command, it will choose a direction such that it differs from the one in command and the cell in that direction is not blocked. If there is such a direction, then it will move to a neighbouring cell in that direction. Otherwise, it will do nothing.\n\nWe want to get the robot to the lab to get it fixed. For each free cell, determine if the robot can be forced to reach the lab starting in this cell. That is, after each step of the robot a command can be sent to a robot such that no matter what different directions the robot chooses, it will end up in a lab. Assume the robot will never return to the same cell within a single command sequence.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers n and m (1 \u2264 n, m \u2264 10^6; n \u22c5 m \u2264 10^6) \u2014 the number of rows and the number of columns in the grid.\n\nThe i-th of the next n lines provides a description of the i-th row of the grid. It consists of m elements of one of three types: \n\n  * '.' \u2014 the cell is free; \n  * '#' \u2014 the cell is blocked; \n  * 'L' \u2014 the cell contains a lab. \n\n\n\nThe grid contains exactly one lab. The sum of n \u22c5 m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase find the free cells that the robot can be forced to reach the lab from. Given the grid, replace the free cells (marked with a dot) with a plus sign ('+') for the cells that the robot can be forced to reach the lab from. Print the resulting grid.\n\nExample\n\nInput\n\n\n4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n\n\nOutput\n\n\n...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n++++L++#.\n\nNote\n\nIn the first testcase there is no free cell that the robot can be forced to reach the lab from. Consider a corner cell. Given any direction, it will move to a neighbouring border grid that's not a corner. Now consider a non-corner free cell. No matter what direction you send to the robot, it can choose a different direction such that it ends up in a corner.\n\nIn the last testcase, you can keep sending the command that is opposite to the direction to the lab and the robot will have no choice other than move towards the lab.", "repair_prompt": ["There exists a grid made up of n rows and m columns. Each individual cell within the grid is either unoccupied or unavailable. One of the available cells holds a lab. The cells that lie beyond the borders of the grid are all blocked. These blocked cells prevent any movement beyond the grid.\n\nA crazy robot has escaped from this lab. It is currently in some free cell of the grid. You can send one of the following commands to the robot: \"move right\", \"move down\", \"move left\" or \"move up\". Each command means moving to a neighbouring cell in the corresponding direction.\n\nHowever, as the robot is crazy, it will do anything except following the command. Upon receiving a command, it will choose a direction such that it differs from the one in command and the cell in that direction is not blocked. If there is such a direction, then it will move to a neighbouring cell in that direction. Otherwise, it will do nothing.\n\nWe want to get the robot to the lab to get it fixed. For each free cell, determine if the robot can be forced to reach the lab starting in this cell. That is, after each step of the robot a command can be sent to a robot such that no matter what different directions the robot chooses, it will end up in a lab. Assume the robot will never return to the same cell within a single command sequence.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers n and m (1 \u2264 n, m \u2264 10^6; n \u22c5 m \u2264 10^6) \u2014 the number of rows and the number of columns in the grid.\n\nThe i-th of the next n lines provides a description of the i-th row of the grid. It consists of m elements of one of three types: \n\n  * '.' \u2014 the cell is free; \n  * '#' \u2014 the cell is blocked; \n  * 'L' \u2014 the cell contains a lab. \n\n\n\nThe grid contains exactly one lab. The sum of n \u22c5 m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase find the free cells that the robot can be forced to reach the lab from. Given the grid, replace the free cells (marked with a dot) with a plus sign ('+') for the cells that the robot can be forced to reach the lab from. Print the resulting grid.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n\n\nOutput\n\n\n...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n++++L++#.\n\nNote\n\nIn the first testcase there is no free cell that the robot can be forced to reach the lab from. Consider a corner cell. Given any direction, it will move to a neighbouring border grid that's not a corner. Now consider a non-corner free cell. No matter what direction you send to the robot, it can choose a different direction such that it ends up in a corner.\n\nIn the last testcase, you can keep sending the command that is opposite to the direction to the lab and the robot will have no choice other than move towards the lab.", "There exists a grid made up of n rows and m columns. Each individual cell within the grid is either unoccupied or unavailable. One of the available cells holds a lab. The cells that lie beyond the borders of the grid are all blocked. This makes it impossible to move beyond the grid's boundaries. These blocked cells prevent any movement beyond the grid.\n\nA crazy robot has escaped from this lab. It is currently in some free cell of the grid. You can send one of the following commands to the robot: \"move right\", \"move down\", \"move left\" or \"move up\". Each command means moving to a neighbouring cell in the corresponding direction.\n\nHowever, as the robot is crazy, it will do anything except following the command. Upon receiving a command, it will choose a direction such that it differs from the one in command and the cell in that direction is not blocked. If there is such a direction, then it will move to a neighbouring cell in that direction. Otherwise, it will do nothing.\n\nWe want to get the robot to the lab to get it fixed. For each free cell, determine if the robot can be forced to reach the lab starting in this cell. That is, after each step of the robot a command can be sent to a robot such that no matter what different directions the robot chooses, it will end up in a lab. Assume the robot will never return to the same cell within a single command sequence.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers n and m (1 \u2264 n, m \u2264 10^6; n \u22c5 m \u2264 10^6) \u2014 the number of rows and the number of columns in the grid.\n\nThe i-th of the next n lines provides a description of the i-th row of the grid. It consists of m elements of one of three types: \n\n  * '.' \u2014 the cell is free; \n  * '#' \u2014 the cell is blocked; \n  * 'L' \u2014 the cell contains a lab. \n\n\n\nThe grid contains exactly one lab. The sum of n \u22c5 m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase find the free cells that the robot can be forced to reach the lab from. Given the grid, replace the free cells (marked with a dot) with a plus sign ('+') for the cells that the robot can be forced to reach the lab from. Print the resulting grid.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n\n\nOutput\n\n\n...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n++++L++#.\n\nNote\n\nIn the first testcase there is no free cell that the robot can be forced to reach the lab from. Consider a corner cell. Given any direction, it will move to a neighbouring border grid that's not a corner. Now consider a non-corner free cell. No matter what direction you send to the robot, it can choose a different direction such that it ends up in a corner.\n\nIn the last testcase, you can keep sending the command that is opposite to the direction to the lab and the robot will have no choice other than move towards the lab.", "There exists a grid made up of n rows and m columns, and each individual cell within the grid is either unoccupied or unavailable. One of the available cells holds a lab, while the cells that lie beyond the borders of the grid are all blocked and prevent any movement beyond the grid.\n\nA crazy robot has escaped from this lab and is currently in some free cell of the grid. You can send one of the following commands to the robot: \"move right\", \"move down\", \"move left\" or \"move up\", with each command meaning moving to a neighbouring cell in the corresponding direction.\n\nHowever, as the robot is crazy, it will do anything except following the command, so upon receiving a command, it will choose a direction such that it differs from the one in command and the cell in that direction is not blocked. If there is such a direction, then it will move to a neighbouring cell in that direction; otherwise, it will do nothing.\n\nWe want to get the robot to the lab to get it fixed. For each free cell, determine if the robot can be forced to reach the lab starting in this cell. That is, after each step of the robot a command can be sent to a robot such that no matter what different directions the robot chooses, it will end up in a lab. Assume the robot will never return to the same cell within a single command sequence.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers n and m (1 \u2264 n, m \u2264 10^6; n \u22c5 m \u2264 10^6) \u2014 the number of rows and the number of columns in the grid.\n\nThe i-th of the next n lines provides a description of the i-th row of the grid. It consists of m elements of one of three types: \n\n  * '.' \u2014 the cell is free; \n  * '#' \u2014 the cell is blocked; \n  * 'L' \u2014 the cell contains a lab. \n\n\n\nThe grid contains exactly one lab. The sum of n \u22c5 m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase find the free cells that the robot can be forced to reach the lab from. Given the grid, replace the free cells (marked with a dot) with a plus sign ('+') for the cells that the robot can be forced to reach the lab from. Print the resulting grid.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n\n\nOutput\n\n\n...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n++++L++#.\n\nNote\n\nIn the first testcase there is no free cell that the robot can be forced to reach the lab from. Consider a corner cell. Given any direction, it will move to a neighbouring border grid that's not a corner. Now consider a non-corner free cell. No matter what direction you send to the robot, it can choose a different direction such that it ends up in a corner.\n\nIn the last testcase, you can keep sending the command that is opposite to the direction to the lab and the robot will have no choice other than move towards the lab."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[List[str]]:\n    \"\"\"Finds all free cells from which the robot can be forced to reach the lab.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the number of rows, number of columns, and the grid itself.\n\n    Returns:\n        A list of grids with free cells marked as '+' if the robot can be forced to reach the lab from there.\n    \"\"\"\n    results = []\n\n    for n, m, grid in test_cases:\n        # Convert grid to a list of lists for mutability\n        grid = [list(row) for row in grid]\n        \n        # Find the position of the lab\n        lab_position = None\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n\n        # Initialize BFS from the lab position\n        queue = deque([lab_position])\n        visited = set([lab_position])\n\n        # Directions for BFS: right, down, left, up\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n        while queue:\n            x, y = queue.popleft()\n\n            # Check all four possible directions\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n\n                # Check if the new position is within bounds and is a free cell\n                if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == '.':\n                    # Count the number of free neighboring cells\n                    free_neighbors = 0\n                    for ddx, ddy in directions:\n                        nnx, nny = nx + ddx, ny + ddy\n                        if 0 <= nnx < n and 0 <= nny < m and grid[nnx][nny] == '.':\n                            free_neighbors += 1\n\n                    # If there is only one free neighbor, mark it as reachable\n                    if free_neighbors <= 1:\n                        grid[nx][ny] = '+'\n                        queue.append((nx, ny))\n                        visited.add((nx, ny))\n\n        # Convert grid back to list of strings\n        results.append([''.join(row) for row in grid])\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().strip().split())\n        grid = [input().strip() for _ in range(n)]\n        test_cases.append((n, m, grid))\n\n    result = find_reachable_cells(t, test_cases)\n\n    # Output interface\n    for grid in result:\n        for row in grid:\n            print(row)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[List[str]]:\n    \"\"\"Determine which free cells can guide the robot to the lab using BFS.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing grid dimensions and the grid.\n\n    Returns:\n        List[List[str]]: Modified grids with reachable free cells marked.\n    \"\"\"\n    results = []\n\n    for n, m, grid in test_cases:\n        # Find the position of the lab\n        lab_position = None\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n\n        # Initialize BFS structures\n        queue = deque([lab_position])\n        visited = set([lab_position])\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n        # Perform BFS from the lab\n        while queue:\n            x, y = queue.popleft()\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == '.':\n                    # Check if the cell can be forced to reach the lab\n                    free_neighbors = 0\n                    for ddx, ddy in directions:\n                        nnx, nny = nx + ddx, ny + ddy\n                        if 0 <= nnx < n and 0 <= nny < m and grid[nnx][nny] == '.':\n                            free_neighbors += 1\n                    if free_neighbors <= 1:\n                        queue.append((nx, ny))\n                        visited.add((nx, ny))\n\n        # Modify the grid based on reachable cells\n        modified_grid = []\n        for i in range(n):\n            row = []\n            for j in range(m):\n                if (i, j) in visited and grid[i][j] == '.':\n                    row.append('+')\n                else:\n                    row.append(grid[i][j])\n            modified_grid.append(''.join(row))\n        \n        results.append(modified_grid)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        grid = [input().strip() for _ in range(n)]\n        test_cases.append((n, m, grid))\n\n    # Call the function\n    results = find_reachable_cells(t, test_cases)\n\n    # Output interface\n    for result in results:\n        for line in result:\n            print(line)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[List[str]]:\n    \"\"\"Determine which free cells can lead the robot to the lab using BFS.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing grid dimensions and grid data.\n\n    Returns:\n        List[List[str]]: Modified grids with reachable cells marked.\n    \"\"\"\n    def bfs(n: int, m: int, grid: List[str]) -> List[str]:\n        \"\"\"Perform BFS to mark reachable cells from the lab.\n\n        Args:\n            n (int): Number of rows in the grid.\n            m (int): Number of columns in the grid.\n            grid (List[str]): Grid data.\n\n        Returns:\n            List[str]: Modified grid with reachable cells marked.\n        \"\"\"\n        # Find the lab position\n        lab_position = None\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n\n        # Directions for BFS traversal\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n        # Initialize BFS queue and visited set\n        queue = deque([lab_position])\n        visited = set([lab_position])\n\n        # Convert grid to a list of lists for mutability\n        grid = [list(row) for row in grid]\n\n        # Perform BFS\n        while queue:\n            x, y = queue.popleft()\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited:\n                    if grid[nx][ny] == '.':\n                        # Mark as reachable\n                        grid[nx][ny] = '+'\n                        queue.append((nx, ny))\n                    visited.add((nx, ny))\n\n        # Convert grid back to list of strings\n        return [''.join(row) for row in grid]\n\n    # Process each test case\n    result = []\n    for n, m, grid in test_cases:\n        modified_grid = bfs(n, m, grid)\n        result.append(modified_grid)\n\n    return result\n\n# Input interface\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().strip().split())\n        grid = [input().strip() for _ in range(n)]\n        test_cases.append((n, m, grid))\n\n    # Get the result from the function\n    result = find_reachable_cells(t, test_cases)\n\n    # Output the modified grids\n    for grid in result:\n        for row in grid:\n            print(row)\n\n# Program entry point\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[List[str]]:\n    \"\"\"Finds the free cells from which the robot can be forced to reach the lab.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing grid dimensions and the grid.\n\n    Returns:\n        List[List[str]]: Modified grids with reachable cells marked with '+'.\n    \"\"\"\n    results = []\n\n    for n, m, grid in test_cases:\n        # Convert grid to a list of lists for mutability\n        grid = [list(row) for row in grid]\n        \n        # Find the position of the lab\n        lab_position = None\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n\n        # Directions for BFS: right, down, left, up\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n        # BFS to find all reachable free cells\n        queue = deque([lab_position])\n        visited = set([lab_position])\n\n        while queue:\n            x, y = queue.popleft()\n\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n\n                if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited:\n                    if grid[nx][ny] == '.':\n                        # Check if this cell can be forced to reach the lab\n                        free_directions = 0\n                        for ddx, ddy in directions:\n                            nnx, nny = nx + ddx, ny + ddy\n                            if 0 <= nnx < n and 0 <= nny < m and grid[nnx][nny] != '#':\n                                free_directions += 1\n                        if free_directions <= 1:\n                            grid[nx][ny] = '+'\n                            queue.append((nx, ny))\n                    elif grid[nx][ny] == 'L':\n                        queue.append((nx, ny))\n                    visited.add((nx, ny))\n\n        # Convert grid back to list of strings\n        results.append([''.join(row) for row in grid])\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    grid = [input().strip() for _ in range(n)]\n    test_cases.append((n, m, grid))\n\n# Output interface\nresult = find_reachable_cells(t, test_cases)\nfor grid in result:\n    for row in grid:\n        print(row)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[List[str]]:\n    \"\"\"Determine which free cells can lead the robot to the lab using BFS.\"\"\"\n    \n    def bfs(n: int, m: int, grid: List[str]) -> List[str]:\n        \"\"\"Perform BFS from the lab to find all reachable free cells.\"\"\"\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        queue = deque()\n        visited = set()\n        \n        # Find the lab position\n        lab_position = None\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n        \n        # Initialize BFS from the lab\n        queue.append(lab_position)\n        visited.add(lab_position)\n        \n        # Perform BFS\n        while queue:\n            x, y = queue.popleft()\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == '.' and (nx, ny) not in visited:\n                    # Check if the cell can be forced to reach the lab\n                    free_directions = 0\n                    for ddx, ddy in directions:\n                        nnx, nny = nx + ddx, ny + ddy\n                        if 0 <= nnx < n and 0 <= nny < m and grid[nnx][nny] != '#':\n                            free_directions += 1\n                    if free_directions <= 1:\n                        queue.append((nx, ny))\n                        visited.add((nx, ny))\n        \n        # Modify the grid based on reachable cells\n        modified_grid = []\n        for i in range(n):\n            row = []\n            for j in range(m):\n                if (i, j) in visited and grid[i][j] == '.':\n                    row.append('+')\n                else:\n                    row.append(grid[i][j])\n            modified_grid.append(''.join(row))\n        \n        return modified_grid\n    \n    # Process each test case\n    results = []\n    for n, m, grid in test_cases:\n        results.append(bfs(n, m, grid))\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    grid = [input().strip() for _ in range(n)]\n    test_cases.append((n, m, grid))\n\n# Output interface\nresult = find_reachable_cells(t, test_cases)\nfor grid in result:\n    for row in grid:\n        print(row)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[List[str]]:\n    \"\"\"Find free cells that can be forced to reach the lab in each test case grid.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing grid dimensions and grid.\n\n    Returns:\n        List[List[str]]: List of modified grids for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, grid in test_cases:\n        # Convert grid to a list of lists for easier manipulation\n        grid = [list(row) for row in grid]\n        \n        # Find the position of the lab\n        lab_position = None\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n        \n        # Directions for moving in the grid: right, down, left, up\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        \n        # BFS to find all reachable free cells from the lab\n        queue = deque([lab_position])\n        visited = set([lab_position])\n        \n        while queue:\n            x, y = queue.popleft()\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                \n                if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited:\n                    if grid[nx][ny] == '.':\n                        # Check if the cell can be forced to reach the lab\n                        free_neighbors = 0\n                        for ddx, ddy in directions:\n                            nnx, nny = nx + ddx, ny + ddy\n                            if 0 <= nnx < n and 0 <= nny < m and grid[nnx][nny] == '.':\n                                free_neighbors += 1\n                        if free_neighbors <= 1:\n                            grid[nx][ny] = '+'\n                            queue.append((nx, ny))\n                    visited.add((nx, ny))\n        \n        # Convert grid back to list of strings for output\n        results.append([''.join(row) for row in grid])\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        grid = [input().strip() for _ in range(n)]\n        test_cases.append((n, m, grid))\n    \n    # Output interface\n    results = find_reachable_cells(t, test_cases)\n    for result in results:\n        for row in result:\n            print(row)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom collections import deque\nfrom typing import List\n\ndef process_grid(n: int, m: int, grid: List[str]) -> List[str]:\n    \"\"\"Process the grid to determine which free cells can be forced to reach the lab.\n\n    Args:\n        n (int): Number of rows in the grid.\n        m (int): Number of columns in the grid.\n        grid (List[str]): The grid representation as a list of strings.\n\n    Returns:\n        List[str]: The modified grid with '+' marking the free cells that can be forced to reach the lab.\n    \"\"\"\n    # Convert grid to a list of lists for easier manipulation\n    grid = [list(row) for row in grid]\n\n    # Find the position of the lab\n    lab_position = None\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'L':\n                lab_position = (i, j)\n                break\n        if lab_position:\n            break\n\n    # Directions for BFS traversal: up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # BFS to explore all reachable free cells from the lab\n    queue = deque([lab_position])\n    visited = set([lab_position])\n\n    while queue:\n        x, y = queue.popleft()\n\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n\n            if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited:\n                if grid[nx][ny] == '.':\n                    # Check if the cell can be forced to reach the lab\n                    free_neighbors = 0\n                    for ddx, ddy in directions:\n                        nnx, nny = nx + ddx, ny + ddy\n                        if 0 <= nnx < n and 0 <= nny < m and grid[nnx][nny] == '.':\n                            free_neighbors += 1\n\n                    # If the cell has at most one free neighbor, it can be forced to reach the lab\n                    if free_neighbors <= 1:\n                        grid[nx][ny] = '+'\n                        queue.append((nx, ny))\n                        visited.add((nx, ny))\n                elif grid[nx][ny] == 'L':\n                    queue.append((nx, ny))\n                    visited.add((nx, ny))\n\n    # Convert grid back to list of strings\n    return [''.join(row) for row in grid]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    results = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        grid = [input().strip() for _ in range(n)]\n        result = process_grid(n, m, grid)\n        results.append(result)\n\n    for result in results:\n        for line in result:\n            print(line)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[List[str]]:\n    \"\"\"Finds and marks the free cells from which the robot can be forced to reach the lab.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing grid dimensions and grid data.\n\n    Returns:\n        List[List[str]]: List of modified grids with reachable free cells marked with '+'.\n    \"\"\"\n    results = []\n\n    for n, m, grid in test_cases:\n        # Convert grid to a list of lists for mutability\n        grid = [list(row) for row in grid]\n        \n        # Find the position of the lab\n        lab_position = None\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n\n        # Directions for moving in the grid (up, down, left, right)\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n        # BFS to find all reachable free cells from the lab\n        queue = deque([lab_position])\n        visited = set([lab_position])\n\n        while queue:\n            x, y = queue.popleft()\n\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n\n                if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited:\n                    if grid[nx][ny] == '.':\n                        # Check if the cell can be forced to reach the lab\n                        free_directions = 0\n                        for ddx, ddy in directions:\n                            nnx, nny = nx + ddx, ny + ddy\n                            if 0 <= nnx < n and 0 <= nny < m and grid[nnx][nny] == '.':\n                                free_directions += 1\n                        if free_directions <= 1:\n                            grid[nx][ny] = '+'\n                            queue.append((nx, ny))\n                    visited.add((nx, ny))\n\n        # Convert grid back to list of strings\n        results.append([''.join(row) for row in grid])\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().strip().split())\n        grid = [input().strip() for _ in range(n)]\n        test_cases.append((n, m, grid))\n\n    # Call the function\n    result = find_reachable_cells(t, test_cases)\n\n    # Output interface\n    for grid in result:\n        for row in grid:\n            print(row)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[List[str]]:\n    \"\"\"Determine which free cells can lead the robot to the lab using BFS.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing grid dimensions and the grid itself.\n\n    Returns:\n        List[List[str]]: Modified grids with reachable free cells marked with '+'.\n    \"\"\"\n    def bfs(n: int, m: int, grid: List[str]) -> List[str]:\n        \"\"\"Perform BFS from the lab to mark reachable free cells.\n\n        Args:\n            n (int): Number of rows in the grid.\n            m (int): Number of columns in the grid.\n            grid (List[str]): The grid representation.\n\n        Returns:\n            List[str]: Modified grid with reachable free cells marked with '+'.\n        \"\"\"\n        # Find the lab position\n        lab_position = None\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n\n        # Directions for BFS: up, down, left, right\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        queue = deque([lab_position])\n        reachable = set()\n        reachable.add(lab_position)\n\n        while queue:\n            x, y = queue.popleft()\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == '.' and (nx, ny) not in reachable:\n                    # Check if the cell is surrounded by blocked cells\n                    blocked_count = 0\n                    for ddx, ddy in directions:\n                        nnx, nny = nx + ddx, ny + ddy\n                        if not (0 <= nnx < n and 0 <= nny < m) or grid[nnx][nny] == '#':\n                            blocked_count += 1\n                    if blocked_count < 3:\n                        reachable.add((nx, ny))\n                        queue.append((nx, ny))\n\n        # Modify the grid based on reachable cells\n        modified_grid = []\n        for i in range(n):\n            row = []\n            for j in range(m):\n                if (i, j) in reachable and grid[i][j] == '.':\n                    row.append('+')\n                else:\n                    row.append(grid[i][j])\n            modified_grid.append(''.join(row))\n\n        return modified_grid\n\n    # Process each test case\n    results = []\n    for n, m, grid in test_cases:\n        modified_grid = bfs(n, m, grid)\n        results.append(modified_grid)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    grid = [input().strip() for _ in range(n)]\n    test_cases.append((n, m, grid))\n\n# Output interface\nresult = find_reachable_cells(t, test_cases)\nfor grid in result:\n    for row in grid:\n        print(row)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[List[str]]:\n    \"\"\"Finds and marks the free cells from which the robot can be forced to reach the lab.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing grid dimensions and the grid itself.\n\n    Returns:\n        List[List[str]]: List of modified grids with reachable free cells marked.\n    \"\"\"\n    results = []\n\n    for n, m, grid in test_cases:\n        # Convert grid to a list of lists for mutability\n        grid = [list(row) for row in grid]\n        \n        # Find the position of the lab\n        lab_position = None\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n\n        # Directions for moving in the grid (up, down, left, right)\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n        # BFS to find all reachable free cells from the lab\n        queue = deque([lab_position])\n        visited = set([lab_position])\n\n        while queue:\n            x, y = queue.popleft()\n\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n\n                if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited:\n                    if grid[nx][ny] == '.':\n                        # Check if this free cell can be forced to reach the lab\n                        free_directions = 0\n                        for ddx, ddy in directions:\n                            nnx, nny = nx + ddx, ny + ddy\n                            if 0 <= nnx < n and 0 <= nny < m and grid[nnx][nny] != '#':\n                                free_directions += 1\n                        if free_directions <= 1:\n                            grid[nx][ny] = '+'\n                            queue.append((nx, ny))\n                    elif grid[nx][ny] == 'L':\n                        queue.append((nx, ny))\n                    visited.add((nx, ny))\n\n        # Convert grid back to list of strings\n        results.append([''.join(row) for row in grid])\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    grid = [input().strip() for _ in range(n)]\n    test_cases.append((n, m, grid))\n\n# Output interface\nresult = find_reachable_cells(t, test_cases)\nfor grid in result:\n    for row in grid:\n        print(row)\n"], "plans": ["requirement analysis:\nThe problem requires determining which free cells in a grid can lead a robot to a lab, given the robot's unpredictable movement. The solution must efficiently handle large grids and multiple test cases, ensuring the output format is strictly followed.\nrequirement pool:\n- Implement the main algorithm to determine reachable cells.\n- Ensure the solution handles large grid sizes efficiently.\n- Optimize the algorithm for computational efficiency.\n- Provide clear and correct output for each test case.\n- Test the solution against edge cases and large inputs.\nWe will use a breadth-first search (BFS) algorithm to determine which free cells can lead the robot to the lab. BFS is suitable for this problem as it efficiently explores all possible paths from the lab to free cells, ensuring we find all reachable cells. We will utilize a queue to manage the exploration of cells and a set to track visited cells. The grid will be processed for each test case, and the output will be formatted according to the requirements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid', 'lab', 'free cell', 'blocked cell', 'robot'\n    Explanation: The grid is a matrix of cells, where each cell can be free, blocked, or contain a lab. The robot starts in a free cell and must be guided to the lab. Blocked cells prevent movement, and the robot behaves unpredictably by moving in a direction different from the command given.\n\n# [phrase showing quantity relationship]\n    'exactly one lab': This indicates that there is only one lab in the grid, which is crucial for determining the target location for the robot.\n    'number of testcases': The requirement specifies multiple test cases, each with its own grid configuration.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Parse the input to extract the number of test cases and grid dimensions for each test case.\n    2. For each test case, identify the position of the lab and initialize a BFS from this position.\n    3. Use a queue to explore all free cells that can lead to the lab, marking them with '+' if reachable.\n    4. Ensure that the robot does not revisit any cell within a single command sequence by tracking visited cells.\n    5. Output the modified grid for each test case.\n\n# [edge case]\n    Test case with a single cell grid containing only the lab:\n    Input: 1 1 L\n    Output: L\n    Explanation: The grid contains only the lab, so no free cells exist to be marked.\n\n    Test case with all cells blocked except the lab:\n    Input: 3 3 ### #L# ###\n    Output: ### #L# ###\n    Explanation: No free cells are available for the robot to move, so no changes are made.\n\n    Test case with a grid where all free cells are isolated by blocked cells:\n    Input: 3 3 .#. #L# .#.\n    Output: .#. #L# .#.\n    Explanation: Free cells are isolated and cannot reach the lab, so no changes are made.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The BFS logic inherently handles these scenarios by not marking unreachable free cells.\n", "requirement analysis:\nThe main requirement is to determine which free cells can guide the robot to the lab, ensuring the robot never returns to the same cell within a command sequence. The solution must handle up to 1000 test cases efficiently, with grid sizes up to 10^6 cells. The output must replace free cells with '+' if they can guide the robot to the lab.\nrequirement pool:\n- Implement efficient pathfinding algorithm for large grids\n- Ensure clear and correct output format for each test case\n- Optimize performance for maximum constraints\n- Handle edge cases where no path to the lab exists\n- Provide user-friendly error messages for invalid inputs\nWe will use a breadth-first search (BFS) algorithm to efficiently determine which free cells can guide the robot to the lab. BFS is suitable for this problem as it explores all possible paths from the lab to the free cells, ensuring that we can identify all reachable cells. We will utilize a queue to manage the exploration of cells and a set to track visited cells to prevent revisiting. The grid will be processed for each test case independently, and the results will be stored and printed in the required format.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid', 'lab', 'free cell', 'blocked cell'\n    Explanation: The grid is a matrix of cells, where each cell can be free ('.'), blocked ('#'), or contain a lab ('L'). The robot starts in a free cell and must be guided to the lab. Blocked cells prevent movement.\n\n# [phrase showing quantity relationship]\n    No specific phrases showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n    1. Parse the input to get the number of test cases and the grid dimensions for each test case.\n    2. For each test case, identify the position of the lab ('L') in the grid.\n    3. Use BFS starting from the lab to explore all reachable free cells.\n    4. For each free cell, check if it can be forced to reach the lab by ensuring that all possible moves eventually lead to the lab.\n    5. Mark the free cells that can force the robot to reach the lab with '+'.\n    6. Print the modified grid for each test case.\n\n# [edge case] \n    Test case with a single cell grid containing only a lab:\n    Input: 1 1 L\n    Output: L\n    Explanation: The grid contains only the lab, so no free cells exist.\n\n    Test case with all cells blocked except for the lab:\n    Input: 3 3 ### #L# ###\n    Output: ### #L# ###\n    Explanation: No free cells exist that can reach the lab.\n\n    Test case with a grid where all free cells are isolated by blocked cells:\n    Input: 3 3 .#. #L# .#.\n    Output: .#. #L# .#.\n    Explanation: Free cells are isolated and cannot reach the lab.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The BFS logic inherently handles these scenarios by not marking isolated or blocked-off free cells.\n", "requirement analysis:\nThe problem requires determining which free cells in a grid can lead a robot to a lab cell, given the robot's erratic movement behavior. The solution must efficiently handle large grids and multiple test cases, ensuring the output format is strictly followed.\nrequirement pool:\n- Implement the main algorithm to determine reachable cells.\n- Ensure the solution handles edge cases and large inputs efficiently.\n- Optimize the algorithm for better performance.\n- Provide detailed comments and documentation for clarity.\n- Develop test cases to validate the solution.\nWe will use a breadth-first search (BFS) algorithm to determine which free cells can lead the robot to the lab. The BFS will start from the lab cell and explore all reachable free cells, marking them as reachable. This approach ensures that we efficiently handle large grids and multiple test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid', 'lab', 'free cell', 'blocked cell'\n    Explanation: The grid is a matrix of cells, where each cell can be free ('.'), blocked ('#'), or contain a lab ('L'). The lab is the target location for the robot. Free cells are potential starting points for the robot, while blocked cells prevent movement.\n\n# [phrase showing quantity relationship]\n    'exactly one lab': means there is only one 'L' in the grid\n    'number of testcases', 'number of rows', 'number of columns': these define the dimensions and count of test cases and grids\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Parse the input to get the number of test cases and grid dimensions for each test case.\n    2. For each test case, identify the position of the lab ('L') in the grid.\n    3. Use BFS starting from the lab to explore all reachable free cells ('.') and mark them as reachable ('+').\n    4. Ensure BFS does not revisit cells and respects blocked cells ('#').\n    5. Output the modified grid for each test case.\n\n# [edge case]\n    Test case with a single cell grid containing only the lab:\n    Input: 1 1 L\n    Output: L\n    Explanation: The grid contains only the lab, no free cells to mark.\n\n    Test case with all cells blocked except the lab:\n    Input: 3 3 ### #L# ###\n    Output: ### #L# ###\n    Explanation: No free cells are reachable from the lab due to surrounding blocks.\n\n    Test case with a free path directly to the lab:\n    Input: 3 3 ... .L. ...\n    Output: +++ .L. +++\n    Explanation: All free cells can be marked as reachable since they form a direct path to the lab.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The BFS logic inherently handles these scenarios by marking reachable free cells and respecting blocked cells.\n", "requirement analysis:\nThe requirements focus on determining which free cells can guide the robot to the lab. The solution must efficiently handle large grids and multiple test cases, ensuring the robot can be guided to the lab from specific cells.\nrequirement pool:\n- Implement the main algorithm to determine reachable cells\n- Optimize for large grid sizes\n- Ensure the solution handles multiple test cases efficiently\n- Provide clear and formatted output\n- Document the solution for user understanding\nWe will use a breadth-first search (BFS) algorithm to determine which free cells can guide the robot to the lab. BFS is suitable for this problem as it explores all possible paths from the lab to the free cells, ensuring that we can efficiently handle large grids. We will utilize a queue to manage the exploration of cells and a set to track visited cells. The algorithm will start from the lab and explore all reachable free cells, marking them as reachable if they can lead the robot to the lab.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid'\n    Explanation: A grid is a two-dimensional array of cells, where each cell can be in one of three states: free ('.'), blocked ('#'), or containing a lab ('L').\n\n    'lab'\n    Explanation: The lab is a specific cell in the grid marked with 'L'. The goal is to determine which free cells can force the robot to reach this lab.\n\n    'crazy robot'\n    Explanation: The robot does not follow direct commands but instead moves in any direction other than the one commanded, provided the cell in that direction is not blocked.\n\n# [phrase showing quantity relationship]\n    'one of the following commands': This indicates that there are four possible movement commands for the robot: \"move right\", \"move down\", \"move left\", or \"move up\".\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Parse the input to read the number of test cases.\n2. For each test case, read the grid dimensions and the grid itself.\n3. Identify the position of the lab ('L') in the grid.\n4. Use a breadth-first search (BFS) starting from the lab to explore all reachable free cells.\n5. For each free cell, determine if it can be forced to reach the lab by checking if all possible moves eventually lead to the lab.\n6. Mark such cells with a '+'.\n7. Output the modified grid for each test case.\n\n# [edge case]\n    Test case with a single cell grid containing only the lab:\n    Input: 1 1 L\n    Output: L\n    Explanation: The grid contains only the lab, so no free cells exist to mark.\n\n    Test case with all cells blocked except for the lab:\n    Input: 3 3 ### #L# ###\n    Output: ### #L# ###\n    Explanation: All cells are blocked except for the lab, so no free cells can be marked.\n\n    Test case with a free path directly leading to the lab:\n    Input: 3 3 ... .L. ...\n    Output: ... .L. ...\n    Explanation: No free cell can be forced to reach the lab due to multiple possible paths.\n\n# [extra code for edge case]\n    We do not need extra code to handle these edge cases. The BFS approach inherently handles grids with no free cells or fully blocked paths by not marking any cells as reachable if they cannot lead to the lab.\n", "requirement analysis:\nThe task requires determining which free cells can lead the robot to the lab, considering the robot's unpredictable movement. The solution must efficiently handle large grids and multiple test cases, ensuring the output format is consistent and easy to understand.\nrequirement pool:\n- Implement efficient pathfinding algorithm for large grids\n- Ensure output format matches specified requirements\n- Optimize algorithm for scalability\n- Provide detailed examples in documentation\n- Enhance user interface for better understanding\nWe will use a breadth-first search (BFS) algorithm to determine which free cells can lead the robot to the lab. BFS is suitable for this problem as it explores all possible paths from the lab to the free cells, ensuring that we can identify all cells from which the robot can be forced to reach the lab. We will utilize a queue to manage the exploration of cells and a set to track visited cells, ensuring efficiency and scalability for large grids.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid', 'free cell', 'blocked cell', 'lab'\n    Explanation: The grid is a matrix of cells, where each cell can be free ('.'), blocked ('#'), or contain a lab ('L'). The robot can move through free cells but cannot move into blocked cells. The goal is to determine which free cells can lead the robot to the lab.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship\n\n# [degree adverb] \n    No explicit degree adverb\n\n# [code logic]\n    1. Parse the input to get the number of test cases and the grid dimensions for each test case.\n    2. For each test case, identify the position of the lab ('L') in the grid.\n    3. Use BFS starting from the lab to explore all reachable free cells.\n    4. For each free cell, check if it can be forced to reach the lab by ensuring that all possible moves lead towards the lab.\n    5. Replace free cells that can reach the lab with '+' and print the modified grid.\n\n# [edge case] \n    Test case with a single cell grid containing only the lab:\n    Input: 1 1 L\n    Output: L\n    Explanation: The grid contains only the lab, so no free cells exist.\n\n    Test case with all cells blocked except the lab:\n    Input: 3 3 ### #L# ###\n    Output: ### #L# ###\n    Explanation: No free cells exist that can reach the lab.\n\n    Test case with a grid where all free cells are isolated by blocked cells:\n    Input: 3 3 .#. #L# .#.\n    Output: .#. #L# .#.\n    Explanation: Free cells are isolated and cannot reach the lab.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The BFS logic inherently handles these scenarios by not marking isolated or blocked paths as reachable.\n", "requirement analysis:\nThe problem requires determining which free cells can lead the robot to the lab regardless of its erratic movement. The solution must efficiently handle large grids and multiple test cases, ensuring that the robot can be guided to the lab from specific cells.\nrequirement pool:\n- Implement the main algorithm to determine reachable cells.\n- Optimize for large grid sizes and multiple test cases.\n- Ensure accurate output format as specified.\n- Handle edge cases where the lab is surrounded by blocked cells.\n- Provide documentation for the algorithm and its usage.\nWe will use a breadth-first search (BFS) algorithm to determine which free cells can lead the robot to the lab. BFS is suitable for this problem as it explores all possible paths from the lab to free cells, ensuring that we can find all reachable cells efficiently. We will utilize a queue to manage the exploration of cells and a set to track visited cells. The grid will be processed for each test case, and the output will be formatted as specified.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid', 'free cell', 'blocked cell', 'lab'\n    Explanation: The grid is a matrix of cells, where each cell can be free ('.'), blocked ('#'), or contain a lab ('L'). The robot can move between free cells but cannot move into blocked cells or beyond the grid's boundaries. The goal is to determine which free cells can lead the robot to the lab.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Parse the input to get the number of test cases and the grid dimensions for each test case.\n    2. For each test case, identify the position of the lab ('L') in the grid.\n    3. Use a breadth-first search (BFS) starting from the lab to explore all reachable free cells.\n    4. For each free cell, check if it can be forced to reach the lab by ensuring that all possible moves lead towards the lab.\n    5. Mark the free cells that can reach the lab with a '+'.\n    6. Output the modified grid for each test case.\n\n# [edge case] \n    Test case with a single cell grid containing only the lab:\n    1 1\n    L\n    Output: L\n    Explanation: The grid contains only the lab, so no free cells exist.\n\n    Test case with all cells blocked except for the lab:\n    3 3\n    ###\n    #L#\n    ###\n    Output: ###\n            #L#\n            ###\n    Explanation: No free cells exist, so no changes are made.\n\n    Test case with a grid where all free cells are isolated by blocked cells:\n    3 3\n    #.#\n    #L#\n    #.#\n    Output: #.#\n            #L#\n            #.#\n    Explanation: The free cells are isolated and cannot reach the lab.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The BFS logic inherently handles these scenarios by not marking isolated or non-reachable free cells.\n", "requirement analysis:\nThe problem requires determining which free cells can lead the robot to the lab, considering the robot's unpredictable movement. The solution must efficiently handle large grids and multiple test cases, ensuring the output format is consistent with the requirements.\nrequirement pool:\n- Implement efficient grid traversal algorithm\n- Ensure output format matches requirements\n- Handle edge cases where robot cannot move\n- Optimize for large grid sizes\n- Provide clear documentation for the solution\nWe will use a breadth-first search (BFS) algorithm to traverse the grid starting from the lab cell. The BFS will help us determine which free cells can lead the robot to the lab by marking them with a '+'. This approach efficiently handles large grids and ensures that all reachable cells are correctly identified.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid'\n    Explanation: A grid is a two-dimensional array of cells, where each cell can be free, blocked, or contain a lab.\n\n    'lab'\n    Explanation: The lab is a specific cell in the grid that the robot needs to reach.\n\n    'free cell'\n    Explanation: A cell that is not blocked and can be occupied by the robot.\n\n    'blocked cell'\n    Explanation: A cell that cannot be occupied or passed through by the robot.\n\n    'crazy robot'\n    Explanation: A robot that does not follow direct commands but moves in any direction other than the one commanded, provided it is not blocked.\n\n# [phrase showing quantity relationship]\n    'one of the available cells'\n    Explanation: There is exactly one lab cell in the grid.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the grid dimensions and the grid itself.\n3. Identify the position of the lab in the grid.\n4. Use a breadth-first search (BFS) starting from the lab to explore all reachable free cells.\n5. For each free cell, check if it can be forced to reach the lab by ensuring that all possible moves eventually lead to the lab.\n6. Mark such cells with a '+'.\n7. Output the modified grid for each test case.\n\n# [edge case]\n    Test case with a single cell grid containing only the lab:\n    Input: 1 1 L\n    Output: L\n    Explanation: The grid only contains the lab, so no free cells to mark.\n\n    Test case with all cells blocked except for the lab:\n    Input: 3 3 ### #L# ###\n    Output: ### #L# ###\n    Explanation: No free cells are available to reach the lab.\n\n    Test case with a free path directly leading to the lab:\n    Input: 3 3 ... .L. ...\n    Output: ... .L. ...\n    Explanation: No free cells can be forced to reach the lab due to potential alternate paths.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The BFS approach inherently handles these scenarios by only marking cells that can be forced to reach the lab.\n", "requirement analysis:\nThe problem requires determining if a robot can be forced to reach a lab from any free cell in a grid. The robot's movement is unpredictable, as it will move in any direction except the one commanded, provided the cell is not blocked. The solution must efficiently handle large grids and multiple test cases, ensuring the output format is correct.\nrequirement pool:\n- Implement efficient grid traversal algorithm\n- Ensure correct output format for each test case\n- Handle edge cases where movement is restricted\n- Optimize for large grid sizes\n- Provide clear documentation for the solution\nWe will use a breadth-first search (BFS) algorithm to traverse the grid starting from the lab cell. The BFS will help us determine which free cells can be forced to reach the lab by marking them with a '+'. This approach efficiently handles large grids and ensures that all reachable cells are correctly identified.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid', 'lab', 'free cell', 'blocked cell', 'robot'\n    Explanation: The grid is a matrix of cells where each cell can be free, blocked, or contain a lab. The lab is the target location for the robot. Free cells are potential starting points for the robot, while blocked cells prevent movement. The robot is the entity that needs to be guided to the lab.\n\n# [phrase showing quantity relationship]\n    'exactly one lab': There is only one lab in the grid, which is the target for the robot.\n    'number of testcases': The number of testcases indicates how many grids need to be processed.\n    'number of rows and columns': Defines the size of each grid.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Parse the input to get the number of testcases and details for each grid.\n    2. For each grid, identify the position of the lab.\n    3. Use BFS starting from the lab to explore all reachable free cells.\n    4. Mark free cells that can be forced to reach the lab with '+'.\n    5. Output the modified grid for each testcase.\n\n# [edge case]\n    Case 1: A grid with only one cell being a lab.\n    Input: 1 1 L\n    Output: L\n    Explanation: Since there are no free cells, no modification is needed.\n\n    Case 2: A grid where all cells are blocked except for the lab.\n    Input: 3 3 ### #L# ###\n    Output: ### #L# ###\n    Explanation: No free cells can reach the lab, so no modification is needed.\n\n    Case 3: A grid with multiple paths leading to the lab.\n    Input: 3 3 ... .L. ...\n    Output: ... .L. ...\n    Explanation: No free cells can be forced to reach the lab due to multiple paths.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The BFS logic inherently handles these scenarios by marking reachable free cells from the lab.\n", "requirement analysis:\nThe requirements focus on determining which free cells can lead the robot to the lab. The challenge lies in ensuring the robot can be guided despite its unpredictable behavior. The solution must efficiently handle large grids and multiple test cases.\nrequirement pool:\n- Implement the main algorithm to determine reachable cells\n- Optimize for large grid sizes\n- Ensure accurate output formatting\n- Handle edge cases and blocked cells\n- Test thoroughly with diverse test cases\nWe will use a Breadth-First Search (BFS) algorithm to determine which free cells can lead the robot to the lab. The BFS will start from the lab and explore all reachable free cells, marking them as reachable. This approach ensures that we efficiently handle large grids and multiple test cases by leveraging the grid's structure and the robot's movement constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid', 'lab', 'free cell', 'blocked cell', 'robot'\n    Explanation: \n    - 'grid': A matrix of cells with n rows and m columns.\n    - 'lab': A specific cell in the grid marked with 'L' where the robot needs to reach.\n    - 'free cell': Cells marked with '.' where the robot can move.\n    - 'blocked cell': Cells marked with '#' that the robot cannot enter.\n    - 'robot': A moving entity that starts from a free cell and needs to reach the lab.\n\n# [phrase showing quantity relationship]\n    No specific phrases showing quantity relationships are present in the requirement.\n\n# [degree adverb] \n    No degree adverbs are present in the requirement.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the grid dimensions and the grid itself.\n3. Identify the position of the lab ('L') in the grid.\n4. Use a Breadth-First Search (BFS) starting from the lab to explore all reachable free cells:\n   - Initialize a queue with the lab's position.\n   - While the queue is not empty, pop a cell and check its neighbors.\n   - For each free neighboring cell, mark it as reachable and add it to the queue.\n5. After BFS completes, replace all reachable free cells with '+'.\n6. Print the modified grid for each test case.\n\n# [edge case] \n    1. Grid with only one cell which is a lab:\n       Input: 1 1 L\n       Output: L\n       Explanation: The grid contains only the lab, so no free cells to mark.\n\n    2. Grid with all cells blocked except for the lab:\n       Input: 3 3\n              ###\n              #L#\n              ###\n       Output: ###\n               #L#\n               ###\n       Explanation: No free cells are available to reach the lab.\n\n    3. Grid with a single row or column:\n       Input: 1 5\n              .L...\n       Output: +L+++\n       Explanation: The robot can be forced to reach the lab from all free cells by sending commands opposite to the direction of the lab.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The BFS approach inherently handles these scenarios by marking only those free cells that can reach the lab.\n", "requirement analysis:\nThe task requires determining if a robot can be forced to reach a lab from any free cell in a grid. The robot's movement is unpredictable, as it will not follow the given command but will move in any other available direction. The solution must efficiently handle large grid sizes and multiple test cases, ensuring the robot can be guided to the lab from specific cells.\nrequirement pool:\n- Implement the main algorithm to determine reachable cells\n- Optimize for large grid sizes\n- Ensure accurate output formatting\n- Handle multiple test cases efficiently\n- Provide clear documentation for the solution\nWe will use a breadth-first search (BFS) algorithm to determine which free cells can force the robot to reach the lab. BFS is suitable for this problem as it efficiently explores all possible paths from the lab to free cells, marking those that can reach the lab. We will utilize a queue to manage the exploration of cells and a set to track visited cells to prevent revisiting.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid', 'lab', 'free cell', 'blocked cell', 'robot'\n    Explanation: The grid is a matrix of cells, where each cell can be free, blocked, or contain a lab. The lab is the target location for the robot. Free cells are those where the robot can move, while blocked cells prevent movement. The robot is the entity that needs to be guided to the lab.\n\n# [phrase showing quantity relationship]\n    'exactly one lab': There is only one lab in the grid, which is the destination for the robot.\n    'number of testcases': The number of test cases (t) indicates how many grids need to be processed.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Parse the input to get the number of test cases and the dimensions of each grid.\n    2. For each grid, identify the position of the lab.\n    3. Use BFS starting from the lab to explore all reachable free cells.\n    4. For each free cell, check if it can be forced to reach the lab by ensuring all alternative moves lead towards the lab.\n    5. Mark such free cells with a '+'.\n    6. Output the modified grid for each test case.\n\n# [edge case]\n    Test case with a single cell grid containing a lab:\n    Input: 1 1 L\n    Output: L\n    Explanation: The grid contains only the lab, so no free cells exist.\n\n    Test case with all cells blocked except the lab:\n    Input: 3 3 ### #L# ###\n    Output: ### #L# ###\n    Explanation: No free cells exist that can reach the lab.\n\n    Test case with a grid where all free cells are directly connected to the lab:\n    Input: 3 3 .L. ...\n    Output: +L+ +++\n    Explanation: All free cells can be forced to reach the lab.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The BFS approach inherently handles these scenarios by exploring all possible paths from the lab and marking reachable free cells.\n"], "scores": [], "pass_results": [false, false, false, true, false, false, false, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 2, "round": 259, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers n and m (1 \u2264 n, m \u2264 10^6; n \u22c5 m \u2264 10^6) \u2014 the number of rows and the number of columns in the grid.\n\nThe i-th of the next n lines provides a description of the i-th row of the grid. It consists of m elements of one of three types: \n\n  * '.' \u2014 the cell is free; \n  * '#' \u2014 the cell is blocked; \n  * 'L' \u2014 the cell contains a lab. \n\n\n\nThe grid contains exactly one lab. The sum of n \u22c5 m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase find the free cells that the robot can be forced to reach the lab from. Given the grid, replace the free cells (marked with a dot) with a plus sign ('+') for the cells that the robot can be forced to reach the lab from. Print the resulting grid.\n\nExample\n\nInput\n\n\n4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n\n\nOutput\n\n\n...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n++++L++#.\n\nNote\n\nIn the first testcase there is no free cell that the robot can be forced to reach the lab from. Consider a corner cell. Given any direction, it will move to a neighbouring border grid that's not a corner. Now consider a non-corner free cell. No matter what direction you send to the robot, it can choose a different direction such that it ends up in a corner.\n\nIn the last testcase, you can keep sending the command that is opposite to the direction to the lab and the robot will have no choice other than move towards the lab.", "mutate_method": "add_1_sentence_at_end", "parent_index": 90}
