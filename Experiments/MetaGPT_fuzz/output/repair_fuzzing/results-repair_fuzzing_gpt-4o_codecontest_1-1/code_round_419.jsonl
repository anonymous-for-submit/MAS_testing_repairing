{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp possessed an array a consisting of three positive integers. He listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b containing 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp possessed an array a consisting of three positive integers. He listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b containing 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed an array a consisting of three positive integers. He listed the sums of all non-empty subsequences of this array. He then arranged them in ascending order, and got an array b containing 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed an array a consisting of three positive integers and listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b containing 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array 'a' from the sorted array 'b' which contains\n    the sums of all non-empty subsequences of 'a'.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sums of all non-empty\n                       subsequences of the original array 'a'.\n\n    Returns:\n        Tuple[int, int, int]: A tuple containing the three integers of the original array 'a'.\n    \"\"\"\n    # The smallest element in b is one of the elements of a\n    a1 = b[0]\n    # The largest element in b is the sum of all three elements of a\n    sum_a = b[-1]\n    # Deduce the other two elements using arithmetic operations\n    a2 = b[1] - a1\n    a3 = sum_a - a1 - a2\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(*result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array of three integers from the sorted list of sums of its non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences of an array of three integers.\n\n    Returns:\n        Tuple[int, int, int]: The original array of three integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The largest element in b is the sum of all three integers\n    sum_all = b[6]\n    # The second smallest element in b is the sum of two of the original integers\n    sum_two = b[1]\n    # Deduce the second integer\n    a2 = sum_two - a1\n    # Deduce the third integer\n    a3 = sum_all - a1 - a2\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_array_from_sums(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array of three integers from the sorted list of sums of non-empty subsequences.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of non-empty subsequences.\n\n    Returns:\n        A tuple of three integers representing the original array.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of the array a.\n    # The largest number in b is the sum of all three elements of array a.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Handles input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_array_from_sums(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three positive integers from the sorted array of subsequence sums.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted subsequence sums.\n\n    Returns:\n        A list of tuples, each containing three integers representing the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original integers\n        a1 = b[0]\n        # The second smallest element in b is another original integer\n        a2 = b[1]\n        # The largest element in b is the sum of all three original integers\n        a3 = b[-1] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    # Call the function to restore original arrays\n    results = restore_original_array(test_cases)\n    \n    # Print results for each test case\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three positive integers from the sorted array of sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted array of sums.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in b is one of the original elements\n        a1 = case[0]\n        # The largest element in b is the sum of all three original elements\n        sum_all = case[6]\n        # The sum of the other two elements\n        sum_two = sum_all - a1\n        \n        # Find the other two elements\n        # We know that the other two elements must be among the remaining elements in b\n        # We can find them by checking which two elements sum to sum_two\n        a2, a3 = None, None\n        for i in range(1, 6):\n            for j in range(i + 1, 6):\n                if case[i] + case[j] == sum_two:\n                    a2, a3 = case[i], case[j]\n                    break\n            if a2 is not None and a3 is not None:\n                break\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresult = restore_array(n, test_cases)\nfor res in result:\n    print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of tuples, each containing three integers representing the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        a1, a2, a3 = b[0], b[1], b[2]\n        # The largest number in b is the sum of all three elements of a\n        sum_a = b[6]\n        # Reconstruct the original array a\n        # Since a1 + a2 + a3 = sum_a, we can directly use a1, a2, a3\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(t)]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the sorted sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest three numbers in the sorted array are the individual elements of the original array.\n        a1 = case[0]\n        a2 = case[1]\n        # The third element is deduced by subtracting the first two from the largest element\n        a3 = case[6] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three positive integers from the given subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing\n                                      the sums of all non-empty subsequences of the original array.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    restored_arrays = []\n    \n    for case in test_cases:\n        # Sort the array b to ensure it is in ascending order\n        case.sort()\n        \n        # The smallest element in b is the smallest element in a\n        a1 = case[0]\n        \n        # The second smallest element in b is the second smallest element in a\n        a2 = case[1]\n        \n        # The largest element in b is the sum of all elements in a\n        sum_a = case[-1]\n        \n        # Calculate the third element in a\n        a3 = sum_a - (a1 + a2)\n        \n        # Append the restored array to the result list\n        restored_arrays.append([a1, a2, a3])\n    \n    return restored_arrays\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresult = restore_array(n, test_cases)\nfor res in result:\n    print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three positive integers from the sorted sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest three numbers in the sorted array b are the individual elements of the original array a.\n        a1, a2, a3 = case[0], case[1], case[2]\n        # The largest number in b is the sum of all three elements of a.\n        sum_all = case[6]\n        \n        # Verify the sum of a1, a2, a3 matches the largest number in b\n        if a1 + a2 + a3 == sum_all:\n            results.append([a1, a2, a3])\n        else:\n            # If the sum does not match, adjust the elements\n            # This is a safeguard, but based on the problem statement, this should not happen\n            # because the input is guaranteed to be valid.\n            results.append([a1, a2, sum_all - a1 - a2])\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three positive integers from the given sums of its non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers which are the sums of non-empty subsequences.\n\n    Returns:\n        A list of tuples, each containing three integers representing the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original elements of a\n        a1 = b[0]\n        # The second smallest element in b is another original element of a\n        a2 = b[1]\n        # The largest element in b is the sum of all three elements of a\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    # Call the function to restore the original arrays\n    results = restore_array_from_sums(test_cases)\n    \n    # Print the results for each test case\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring an array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values. The output must be formatted correctly for each test case.\nrequirement pool:\n- Restore the original array from the given subsequence sums\n- Ensure the solution is efficient for up to 5000 test cases\n- Handle large integer values efficiently\n- Provide clear and accurate output formatting\n- Optimize memory usage for scalability\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements of array a. The largest element in b is the sum of all three elements of a. By using these two observations, we can deduce the three elements of a by simple arithmetic operations. This approach is efficient and works well within the constraints provided. We will use basic Python operations without any additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a consisting of three positive integers'\n    Explanation: The original array a contains exactly three positive integers, which are the basis for generating the array b.\n\n    'sums of all non-empty subsequences'\n    Explanation: A subsequence is any combination of elements from the array, including individual elements and combinations of two or more elements. The task involves calculating the sum of each possible non-empty subsequence of array a.\n\n# [phrase showing quantity relationship]\n    'three positive integers': indicates that the array a has exactly three elements, all of which are positive.\n\n    '7 integers': indicates that the array b contains exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in array b, which corresponds to one of the elements in array a.\n2. Identify the largest element in array b, which is the sum of all three elements in array a.\n3. Use the smallest and largest elements to deduce the other two elements of array a by subtracting the smallest element from other sums in b.\n4. Return the three deduced elements as array a.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements in b are sums of subsequences of a = {1, 1, 1}. The smallest element is 1, and the largest is 3, which is the sum of all three elements.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements in b are sums of subsequences of a = {1000000000, 1000000000, 1000000000}. The smallest element is 1000000000, and the largest is 3000000000, which is the sum of all three elements.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest element is 1, and the largest is 7. By deducing from other sums, we find that a = {1, 2, 4}.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will correctly deduce the elements of array a from array b by using arithmetic operations based on the smallest and largest elements.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values. The output should be clear and consistent with the input format.\nrequirement pool:\n- Develop a function to restore the original array from subsequence sums\n- Ensure the solution can handle up to 5000 test cases efficiently\n- Optimize the solution for large integer values\n- Provide clear and accurate output for each test case\n- Implement error handling for invalid inputs\nWe will implement a function to restore the original array of three integers from the given sorted list of sums of its non-empty subsequences. The key observation is that the smallest element in the list is one of the original integers, and the largest element is the sum of all three integers. By using these observations, we can deduce the original integers efficiently. We will use basic list operations to achieve this, ensuring the solution can handle up to 5000 test cases efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: This refers to all possible combinations of elements from the array a, excluding the empty set. For an array of three elements, there are 7 non-empty subsequences.\n\n    'sorted list of sums'\n    Explanation: The array b is the result of sorting the sums of all non-empty subsequences of array a.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': The smallest element in array b is one of the original integers in array a.\n    'largest': The largest element in array b is the sum of all three integers in array a.\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to one of the integers in array a.\n    2. Identify the largest element in array b, which is the sum of all three integers in array a.\n    3. Use the second smallest and second largest elements in array b to deduce the other two integers.\n    4. Return the three integers as the restored array a.\n\n# [edge case] \n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are equal, so the original array consists of three identical integers.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest element is 1, and the largest is 7. Using these, we deduce the original integers.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so the original array consists of three identical integers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these scenarios by using the properties of sorted sums and subsequences.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate and consistent output.\nrequirement pool:\n- Develop the main algorithm to restore the original array from subsequence sums\n- Ensure the solution can handle up to 5000 test cases efficiently\n- Optimize the algorithm for large integer values\n- Provide clear and consistent output formatting\n- Enhance user experience with intuitive input and output handling\nWe will implement a function that takes the sorted list of sums of non-empty subsequences and deduces the original array of three integers. The key observation is that the largest number in the list is the sum of all three numbers, and the smallest three numbers are the individual elements of the array. We can use these properties to efficiently reconstruct the original array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted list of sums'\n    Explanation: The list b is sorted in ascending order and contains the sums of all non-empty subsequences of the array a.\n\n# [phrase showing quantity relationship]\n    'three positive integers'\n    Explanation: The array a consists of exactly three integers, each greater than zero.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest number in the sorted list b is the sum of all three integers in array a.\n\n# [code logic]\n    1. Identify the smallest three numbers in the list b, which correspond to the individual elements of array a.\n    2. The largest number in list b is the sum of all three elements of array a.\n    3. Use these properties to reconstruct the original array a by selecting the smallest three numbers from b and verifying their sum matches the largest number in b.\n\n# [edge case]\n    Case 1: b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = 999999998 1 1\n    Explanation: The smallest three numbers are 1, 1, and 999999998. Their sum matches the largest number in b.\n\n    Case 2: b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are equal, and their sum matches the largest number in b.\n\n    Case 3: b = [1, 2, 2, 3, 3, 4, 5] = 1 2 2\n    Explanation: The smallest three numbers are 1, 2, and 2. Their sum matches the largest number in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of selecting the smallest three numbers and verifying their sum against the largest number in b will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and provide correct outputs for each. The constraints ensure that a valid solution exists for each test case.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is clear and correct\n- Optimize for large integer values\n- Provide multiple valid solutions if possible\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a1, a2, or a3. The largest element in b is the sum of all three original elements. By using these observations, we can deduce the original array a by selecting the smallest, second smallest, and the largest element minus the smallest two elements from b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of elements except the empty set.\n\n    'sorted array'\n    Explanation: The array b is sorted in ascending order, which helps in identifying the smallest and largest sums of subsequences.\n\n# [phrase showing quantity relationship]\n    'three positive integers': means that the original array a consists of three elements, each greater than zero.\n\n# [degree adverb]\n    'smallest': refers to the smallest element in the sorted array b, which is one of the original integers in array a.\n    'largest': refers to the largest element in the sorted array b, which is the sum of all three integers in array a.\n\n# [code logic]\n1. Identify the smallest element in array b, which corresponds to one of the original integers in array a.\n2. Identify the largest element in array b, which corresponds to the sum of all three integers in array a.\n3. Use the second smallest element in array b to identify another integer from array a.\n4. Deduce the third integer by subtracting the smallest and second smallest elements from the largest element.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are equal, so each integer in array a is 1.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest element is 1, the second smallest is 2, and the largest is 7. Deduce the third integer as 7 - (1 + 2) = 4.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: All elements are equal, so each integer in array a is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these scenarios by using the properties of sorted arrays and subsequence sums.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and prompt output.\nrequirement pool:\n- Efficiently compute the original array from the given subsequence sums.\n- Ensure the solution is optimized for large input values.\n- Provide a user-friendly output format.\n- Handle edge cases and ensure robustness.\n- Document the solution for better understanding and maintenance.\nWe will use a simple mathematical approach to restore the original array. Given the sorted array b, the smallest element b[0] is one of the original elements. The largest element b[6] is the sum of all three original elements. By subtracting b[0] from b[6], we get the sum of the other two elements. Using these insights, we can efficiently compute the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted array'\n    Explanation: The array b is sorted in ascending order, which means each element is less than or equal to the next.\n\n# [phrase showing quantity relationship]\n    'three positive integers': This indicates that the original array a consists of exactly three integers, all greater than zero.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Identify the smallest element in b, which is b[0]. This is one of the original elements of a.\n    2. Identify the largest element in b, which is b[6]. This is the sum of all three elements of a.\n    3. Subtract b[0] from b[6] to get the sum of the other two elements.\n    4. Use the remaining elements in b to deduce the other two elements of a by considering possible sums.\n    5. Return the three elements of a.\n\n# [edge case] \n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest element is 1, and the largest is 8. The sum of the other two elements is 8 - 1 = 7. The other two elements are 4 and 3, as they sum to 7.\n\n    1 2 3 4 5 6 7 = 4 1 2\n    Explanation: The smallest element is 1, and the largest is 7. The sum of the other two elements is 7 - 1 = 6. The other two elements are 4 and 2, as they sum to 6.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element of a is equal to b[0].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using the properties of sorted arrays and subsequences.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and fast computation.\nrequirement pool:\n- Restore the original array from the given subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure the solution works with large integer values\n- Provide a clear and concise output format\n- Optimize for speed and simplicity\nWe will leverage the fact that the smallest three numbers in the sorted array b are the individual elements of the original array a. The largest number in b is the sum of all three elements of a. Using these insights, we can efficiently reconstruct the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'array a consisting of three positive integers'\n    Explanation: The original array a has exactly three elements, all of which are positive integers.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    'smallest': Refers to the smallest three numbers in the sorted array b, which correspond to the individual elements of array a.\n    \n    'largest': Refers to the largest number in array b, which is the sum of all three elements of array a.\n\n# [code logic]\n1. For each test case, read the array b.\n2. Identify the smallest three numbers in b, which are the individual elements of array a.\n3. The largest number in b is the sum of all three elements of a.\n4. Use these insights to reconstruct and print the original array a.\n\n# [edge case] \n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are the same, so each element in a is 1.\n    \n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest three numbers are 1, 2, and 2, which are the elements of a.\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical, so each element in a is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of identifying the smallest three numbers and using the largest number as their sum inherently handles these cases.\n", "requirement analysis:\nThe task requires restoring the original array from the given sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure solution scalability for up to 5000 test cases\n- Handle large integer values efficiently\n- Provide output in the correct format\n- Optimize memory usage\nWe will use a simple mathematical approach to restore the original array from the given sorted sums of its non-empty subsequences. The key observation is that the smallest three numbers in the sorted array b are the individual elements of the original array a. This is because the smallest sums are the individual elements themselves, and the largest sum is the sum of all three elements. We will use this observation to efficiently compute the original array for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed, but the order of the remaining elements is preserved. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted sums'\n    Explanation: The sums of all non-empty subsequences are arranged in ascending order to form the array b.\n\n# [phrase showing quantity relationship]\n    'three positive integers': indicates that the original array a consists of exactly three integers, each greater than zero.\n\n# [degree adverb]\n    'smallest': refers to the smallest values in the sorted array b, which correspond to the individual elements of array a.\n\n# [code logic]\n    1. For each test case, read the array b consisting of 7 integers.\n    2. The smallest three numbers in b are the individual elements of array a.\n    3. The largest number in b is the sum of all three elements of array a.\n    4. Return the three smallest numbers as the original array a.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are equal, and their sums are repeated. The smallest three numbers are the individual elements.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest three numbers are 1, 2, and 3, which are the individual elements of array a.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, and their sums are repeated. The smallest three numbers are the individual elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of selecting the smallest three numbers from b will correctly restore array a for all test cases.\n", "requirement analysis:\nThe task requires restoring the original array from the given subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values. The output format must be consistent with the input format, ensuring clarity and accuracy.\nrequirement pool:\n- Efficiently restore the original array from subsequence sums\n- Ensure scalability for up to 5000 test cases\n- Handle large integer values efficiently\n- Provide clear and accurate output\n- Optimize memory usage\nWe will use a simple mathematical approach to restore the original array from the given subsequence sums. The smallest element in the sorted array b is the smallest element of the original array a. The second smallest element in b is the second smallest element of a. The largest element in b is the sum of all elements in a. This approach is efficient and scalable for up to 5000 test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a consisting of three positive integers'\n    Explanation: The original array a has exactly three positive integers, which means each element is greater than zero.\n\n    'sums of all non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For an array of three elements, there are 7 non-empty subsequences.\n\n# [phrase showing quantity relationship]\n    'three positive integers': means that the array a has exactly three elements, each greater than zero.\n    \n    '7 integers': means that the array b contains exactly 7 elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in array b, which corresponds to the smallest element in array a.\n2. Identify the second smallest element in array b, which corresponds to the second smallest element in array a.\n3. Identify the largest element in array b, which is the sum of all elements in array a.\n4. Use these identified elements to reconstruct array a by solving the equations:\n   - Let a1 be the smallest element in b.\n   - Let a2 be the second smallest element in b.\n   - Let a3 be calculated as (largest element in b) - (a1 + a2).\n\n# [edge case] \n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are equal, so each element in a is 1.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 1 2 4\n    Explanation: The smallest two elements are 1 and 2, and the largest is 7, so a3 = 7 - (1 + 2) = 4.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: All elements are equal, so each element in a is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest, second smallest, and largest elements in b and using them to reconstruct a will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the given sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure scalability for up to 5000 test cases\n- Handle large integer values efficiently\n- Provide output in the correct format\n- Optimize for performance and clarity\nWe will use a straightforward approach to restore the original array from the given sorted sums of its non-empty subsequences. The key observation is that the smallest three numbers in the sorted array b correspond to the individual elements of the original array a. The largest number in b is the sum of all three elements of a. This allows us to deduce the original array efficiently without complex computations. We will use Python's built-in capabilities to handle large integers and ensure the solution is scalable for up to 5000 test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted sums'\n    Explanation: The sums of all non-empty subsequences are arranged in ascending order.\n\n# [phrase showing quantity relationship]\n    'three positive integers': This indicates that the original array a consists of exactly three elements, each greater than zero.\n    \n    '7 integers': This indicates that the array b contains exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest three numbers in the sorted array b, which correspond to the individual elements of the original array a.\n2. The largest number in b is the sum of all three elements of a.\n3. Use these observations to deduce the original array a:\n   - Let a1, a2, a3 be the smallest three numbers in b.\n   - The largest number in b is a1 + a2 + a3.\n4. Return a1, a2, and a3 for each test case.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are the same, so the original array is simply three identical numbers.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7, which is the sum of these three numbers.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical, so the original array is three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of selecting the smallest three numbers and verifying with the largest sum inherently handles these cases.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements of array a. The largest element in b is the sum of all three elements of a. By using these two facts, we can deduce the three elements of a. Specifically, the three elements of a can be found as follows: a1 = b[0], a2 = b[1], and a3 = b[6] - a1 - a2. This approach is efficient and works within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of elements from the array except the empty set.\n\n# [phrase showing quantity relationship]\n    'three positive integers': indicates that the array a consists of exactly three elements, each greater than zero.\n    '7 integers': indicates that the array b consists of exactly seven elements, which are sums of non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': refers to the smallest element in the sorted array b, which corresponds to one of the original elements in array a.\n    'largest': refers to the largest element in the sorted array b, which is the sum of all three elements in array a.\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to one of the elements in array a.\n    2. Identify the largest element in array b, which is the sum of all three elements in array a.\n    3. Deduce the three elements of array a using:\n       - a1 = b[0] (smallest element)\n       - a2 = b[1] (second smallest element)\n       - a3 = b[6] - a1 - a2 (largest element minus the sum of a1 and a2)\n\n# [edge case]\n    b = [1, 1, 2, 3, 3, 4, 5] = 1 2 2\n    Explanation: The smallest element is 1, second smallest is 1, and largest is 5. Thus, a1 = 1, a2 = 2, and a3 = 5 - 1 - 2 = 2.\n    \n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element of a is equal to the smallest element.\n\n    b = [999999998, 1, 1, 999999998, 999999999, 999999999, 1000000000] = 999999998 1 1\n    Explanation: The smallest element is 1, second smallest is also 1, and largest is 1000000000. Thus, a1 = 999999998, a2 = 1, and a3 = 1000000000 - 999999998 - 1 = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic covers all possible scenarios by correctly identifying elements based on their positions in the sorted array b.\n"], "scores": [], "pass_results": [false, false, true, true, true, true, false, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 419, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "rephrase_one", "parent_index": 43}
