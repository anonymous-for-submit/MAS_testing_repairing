{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp was in possession of an array a consisting of 3 positive numbers, computed the sums of all non-empty subsequences of this array, arranged them in ascending order, and obtained an array b of 7 numbers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a. Ensure that the solution can handle any valid input case efficiently.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp was in possession of an array a consisting of 3 positive numbers, computed the sums of all non-empty subsequences of this array, arranged them in ascending order, and obtained an array b of 7 numbers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a. Ensure that the solution can handle any valid input case efficiently.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp was in possession of an array a consisting of 3 positive numbers. He computed the sums of all non-empty subsequences of this array, arranged them in ascending order, and obtained an array b of 7 numbers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Ensure that the solution can handle any valid input case efficiently.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp was in possession of an array a consisting of 3 positive numbers, computed the sums of all non-empty subsequences of this array, arranged them in ascending order to obtain an array b of 7 numbers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a. Ensure that the solution can handle any valid input case efficiently.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted sums of its non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing\n                    the sorted sums of non-empty subsequences of an array a of 3 positive numbers.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the elements of the original array a\n        a1, a2, a3 = b[0], b[1], b[2]\n        # The largest number in b is the sum of all three elements of a\n        sum_a = b[-1]\n        # Verify the sum to ensure correctness\n        if a1 + a2 + a3 == sum_a:\n            results.append((a1, a2, a3))\n        else:\n            # If the sum doesn't match, adjust the elements accordingly\n            # This handles cases where the smallest three numbers are not the correct elements\n            # due to identical elements in a\n            a1, a2, a3 = b[0], b[1], sum_a - (b[0] + b[1])\n            results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    results = restore_array_from_sums(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Deduce the original array a from the sorted array b\n        a1 = b[0]  # The smallest element in b\n        a2 = b[1] - a1  # The second smallest element minus the smallest element\n        a3 = b[-1] - a1  # The largest element minus the smallest element\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        a1, a2, a3 = b[0], b[1], b[2]\n        # The largest number in b is the sum of all three elements of a\n        sum_a = b[6]\n        # Verify the sum to ensure correctness\n        if a1 + a2 + a3 == sum_a:\n            results.append((a1, a2, a3))\n        else:\n            # If the sum doesn't match, adjust the elements\n            # This handles cases where the smallest three numbers are not the correct a1, a2, a3\n            # We know that a1 + a2 + a3 = sum_a, so we can deduce the correct a1, a2, a3\n            # by considering the next smallest numbers\n            a1, a2, a3 = b[0], b[1], sum_a - (b[0] + b[1])\n            results.append((a1, a2, a3))\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    # Process and output results\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 positive numbers from the sorted array of sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    restored_arrays = []\n    \n    for b in test_cases:\n        # The smallest element in b is one of the elements in a\n        a1 = b[0]\n        # The largest element in b is the sum of all three elements in a\n        total_sum = b[6]\n        # The sum of the other two elements in a\n        sum_of_two = total_sum - a1\n        \n        # Deduce the other two elements\n        # Since b is sorted, the second smallest element is a1 + a2\n        a2 = b[1] - a1\n        # The third smallest element is a1 + a3\n        a3 = sum_of_two - a2\n        \n        restored_arrays.append([a1, a2, a3])\n    \n    return restored_arrays\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresult = restore_array(n, test_cases)\nfor res in result:\n    print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array of three positive numbers from the given sorted array of subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[list[int]]): A list of test cases, each containing 7 integers representing the sorted sums of all non-empty subsequences of the original array.\n\n    Returns:\n        list[tuple[int, int, int]]: A list of tuples, each containing the three integers of the original array for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # According to the problem, the original numbers can be deduced as follows:\n        a1 = b[0]  # The smallest number in b is one of the original numbers\n        a2 = b[1]  # The second smallest number in b is another original number\n        a3 = b[6] - a1 - a2  # The largest number in b is the sum of all three original numbers\n        results.append((a1, a2, a3))\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    number_of_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(number_of_cases)]\n    \n    # Call the function and print results\n    results = restore_original_array(number_of_cases, test_cases)\n    for result in results:\n        print(*result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b'.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: List of restored arrays 'a' for each test case.\n    \"\"\"\n    result = []\n    for b in test_cases:\n        # The smallest element in 'b' is the smallest element in 'a'\n        a1 = b[0]\n        # The largest element in 'b' is the sum of all elements in 'a'\n        sum_a = b[-1]\n        # The second element in 'a' can be deduced from the second smallest element in 'b'\n        # and the smallest element in 'a'\n        a2 = b[1] - a1\n        # The third element in 'a' can be deduced from the sum of all elements in 'a'\n        # minus the sum of the first two elements\n        a3 = sum_a - a1 - a2\n        # Append the restored array to the result list\n        result.append([a1, a2, a3])\n    return result\n\n# Input interface\n# Read number of test cases\nt = int(input())\n# Read each test case\ntest_cases = [list(map(int, input().split())) for _ in range(t)]\n\n# Output interface\nresult = restore_array(t, test_cases)\nfor res in result:\n    print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the sorted array 'b' for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing the sorted array 'b'.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the restored array 'a'.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in 'b' is one of the elements of 'a'\n        a1 = b[0]\n        # The largest element in 'b' is the sum of all elements of 'a'\n        sum_a = b[-1]\n        # The sum of the other two elements\n        sum_a2_a3 = sum_a - a1\n        # The second smallest element in 'b' is the sum of a1 and another element of 'a'\n        a2 = b[1] - a1\n        # Deduce the third element of 'a'\n        a3 = sum_a2_a3 - a2\n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresult = restore_array(n, test_cases)\nfor res in result:\n    print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b'.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array 'b' of 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays 'a', each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three elements in 'b' are the individual elements of 'a'\n        a_1 = b[0]\n        a_2 = b[1]\n        # The largest element in 'b' is the sum of all elements in 'a'\n        a_3 = b[6] - a_1 - a_2\n        results.append([a_1, a_2, a_3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array of three positive integers from the given sorted array of subsequence sums.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences of the original array.\n\n    Returns:\n        Tuple[int, int, int]: The original array of three positive integers.\n    \"\"\"\n    # The smallest element in b is one of the elements in a\n    a1 = b[0]\n    # The second smallest element in b is another element of a\n    a2 = b[1]\n    # The largest element in b is the sum of all three elements in a\n    a3 = b[6] - a1 - a2\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(*result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restore the original array 'a' from the given sorted array 'b'.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array 'b' of 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays 'a', each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in 'b' are the individual elements of 'a'\n        a1 = b[0]\n        a2 = b[1]\n        # The largest number in 'b' is the sum of all three elements of 'a'\n        a3 = b[6] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Compute results\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring an original array of three positive integers from a sorted list of subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct output format and performance within constraints.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums.\n- Ensure solution handles maximum constraints of input size and value.\n- Provide clear and correctly formatted output for each test case.\n- Optimize for performance to handle large datasets quickly.\n- Include error handling for invalid inputs.\nWe will leverage the fact that the smallest three numbers in the sorted array b are the elements of the original array a. The largest number in b is the sum of all three elements of a. Using these observations, we can efficiently reconstruct the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'positive numbers'\n    Explanation: All numbers in the array are greater than zero.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of each possible combination of elements from the array, excluding the empty set. In code, this can be implemented by calculating the sum of all combinations of elements.\n\n# [degree adverb]\n    'ascending order'\n    Explanation: The array b is sorted from the smallest to the largest value. In code, this means ensuring that the array b is sorted before processing.\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Identify the smallest three numbers in b, which correspond to the individual elements of array a.\n    3. The largest number in b is the sum of all three elements of a.\n    4. Use these observations to reconstruct array a.\n    5. Print the reconstructed array a for each test case.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, and their sum is the largest number in b.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is the sum of these three numbers.\n    \n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are identical, and their sum is the largest number in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers and using the largest number as their sum will handle all valid input cases efficiently.\n", "requirement analysis:\nThe task requires developing an algorithm that can efficiently deduce the original array of three numbers from the given sorted array of subsequence sums. The solution must handle up to 5000 test cases and large integer values, ensuring both speed and accuracy.\nrequirement pool:\n- Develop an algorithm to restore the original array from subsequence sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the algorithm for large integer values.\n- Provide clear and correct output for each test case.\n- Consider edge cases and validate input constraints.\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of the original array a, and the largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a efficiently. Specifically, the three numbers a1, a2, and a3 can be found as follows: a1 is the smallest element in b, a3 is the largest element in b minus a1, and a2 is the second smallest element in b minus a1. This approach ensures that we can handle up to 5000 test cases efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted array'\n    Explanation: The array b is sorted in ascending order, which means each element is less than or equal to the next.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The original array a consists of exactly three numbers, all of which are greater than zero.\n\n    '7 numbers': The array b consists of exactly seven numbers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': Refers to the first element in the sorted array b, which is the smallest number in array a.\n\n    'largest': Refers to the last element in the sorted array b, which is the sum of all elements in array a.\n\n# [code logic]\n1. For each test case, read the array b.\n2. Identify a1 as the first element of b (smallest element).\n3. Identify a3 as the last element of b minus a1 (largest element minus smallest element).\n4. Identify a2 as the second element of b minus a1.\n5. Output the three integers a1, a2, and a3 for each test case.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements in b are sums of subsequences of [1, 1, 1]. The smallest element is 1, and the largest is 3 (sum of all elements).\n\n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest element is 1, and the largest is 5 (sum of all elements). The second smallest element minus the smallest gives us the second number in a.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements in b are sums of subsequences of [1000000000, 1000000000, 1000000000]. The smallest element is 1000000000, and the largest is 3000000000 (sum of all elements).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by leveraging the properties of sorted subsequence sums.\n", "requirement analysis:\nThe task requires restoring the original array from the given subsequence sums. The solution must efficiently handle up to 5000 test cases with large numbers, ensuring the output format is correct. The problem constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Ensure the solution handles all valid input cases\n- Provide clear and correct output format\n- Optimize for large input values\n- Consider multiple valid outputs for each test case\nWe will leverage the fact that the smallest three numbers in the sorted array b are the individual elements of the original array a. The largest number in b is the sum of all three elements of a. Using these insights, we can efficiently reconstruct the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed, but the order of the remaining elements is preserved. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'positive numbers'\n    Explanation: All numbers in the array are greater than zero.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of all possible combinations of elements from the array, excluding the empty set. In code, this means calculating sums for all combinations of 1, 2, and 3 elements.\n\n# [degree adverb]\n    'ascending order'\n    Explanation: The array b is sorted from the smallest to the largest value.\n\n# [code logic]\n    - For each test case, identify the smallest three numbers in array b; these are the individual elements of array a.\n    - The largest number in array b is the sum of all three elements of array a.\n    - Use these insights to reconstruct array a by selecting the smallest three numbers from b and verifying with the largest number.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are identical, and their sums are repeated. The smallest three numbers are the elements themselves.\n    \n    1 2 3 4 5 6 7 = 4 1 2\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is the sum of these three numbers.\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are identical, and their sums are repeated. The smallest three numbers are the elements themselves.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of selecting the smallest three numbers and verifying with the largest number will handle all valid input cases efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three numbers from a given sorted array of seven numbers, which are the sums of all non-empty subsequences of the original array. The solution must efficiently handle up to 5000 test cases with large numbers, ensuring correct and formatted output.\nrequirement pool:\n- Efficiently compute the original array from the given subsequence sums.\n- Ensure the solution handles the maximum constraints of input size and number values.\n- Provide clear and formatted output for each test case.\n- Optimize for both time and space complexity.\n- Consider edge cases and multiple valid outputs.\nWe will use a simple mathematical approach to restore the original array. Given the sorted array b of sums, the smallest element b[0] is the smallest number in the original array a. The largest element b[6] is the sum of all three numbers in a. By subtracting b[0] from b[6], we get the sum of the other two numbers. Using these insights, we can efficiently compute the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'array of 3 positive numbers'\n    Explanation: The original array a consists of exactly three positive integers.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': Indicates that the array a consists of exactly three elements, each greater than zero.\n    \n    '7 numbers': Refers to the number of elements in array b, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in b, which is b[0]. This is one of the elements in a.\n2. Identify the largest element in b, which is b[6]. This is the sum of all three elements in a.\n3. Subtract b[0] from b[6] to get the sum of the other two elements in a.\n4. Use the remaining elements in b to deduce the individual values of the other two elements in a.\n5. Return the three elements of a.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements in b are derived from an array a where all elements are equal to 1. The smallest element is 1, and the largest sum is 3, which confirms this.\n\n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest element is 1, and the largest sum is 5. The other two elements must be 2 and 2 to satisfy all sums.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements in b are derived from an array a where all elements are equal to 1000000000. The smallest element is 1000000000, and the largest sum is 3000000000, which confirms this.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will handle these cases correctly by identifying the smallest and largest sums and deducing the individual elements accordingly.\n", "requirement analysis:\nThe task requires restoring an original array of three numbers from a given sorted array of seven numbers, which are the sums of all non-empty subsequences of the original array. The solution must efficiently handle up to 5000 test cases with large numbers, ensuring the output is correct and in the specified format.\nrequirement pool:\n- Efficiently compute the original array from the given subsequence sums.\n- Ensure the solution handles the maximum constraints effectively.\n- Provide a clear and concise output format for the restored arrays.\n- Optimize the algorithm for large input values.\n- Consider edge cases and ensure robustness.\nWe will use a straightforward approach to solve the problem. Given the sorted array b of 7 numbers, we know that the smallest number is one of the original numbers, and the largest number is the sum of all three original numbers. The second smallest number is also one of the original numbers. By using these observations, we can deduce the original array a. Specifically, the three numbers a1, a2, and a3 can be found as follows: a1 = b[0], a2 = b[1], and a3 = b[6] - a1 - a2. This approach is efficient and works within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: In the context of this problem, a non-empty subsequence is any subset of the array that includes at least one element. For an array of three elements, there are exactly 7 non-empty subsequences.\n\n    'sorted array'\n    Explanation: The array b is sorted in ascending order, which helps in identifying the smallest and largest sums directly.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': indicates that the original array a consists of exactly three numbers, all greater than zero.\n    \n    '7 numbers': indicates that the array b consists of exactly seven numbers, which are the sums of all non-empty subsequences of a.\n\n# [degree adverb]\n    'smallest': refers to the first element in the sorted array b, which is one of the original numbers in a.\n    \n    'largest': refers to the last element in the sorted array b, which is the sum of all three original numbers in a.\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Identify a1 as the first element of b (b[0]).\n3. Identify a2 as the second element of b (b[1]).\n4. Calculate a3 as the difference between the largest element of b (b[6]) and the sum of a1 and a2.\n5. Output the values a1, a2, and a3 for each test case.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are equal, so each number in a is 1.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: All elements are equal and large, so each number in a is 1000000000.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 1 2 4\n    Explanation: The smallest two numbers are directly taken as a1 and a2, and a3 is calculated from the largest number minus these two.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all valid input cases efficiently by leveraging the properties of sorted subsequence sums.\n", "requirement analysis:\nThe task requires restoring the original array from the given subsequence sums. The solution must efficiently handle up to 5000 test cases with large numbers, ensuring the output format is consistent and correct.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Ensure solution handles large input sizes within constraints\n- Provide clear and accurate output for each test case\n- Optimize for speed and memory usage\n- Maintain simplicity in implementation\nWe will use a simple mathematical approach to restore the original array 'a' from the given sorted array 'b'. The smallest element in 'b' is the smallest element in 'a', and the largest element in 'b' is the sum of all elements in 'a'. By using these properties, we can efficiently deduce the original array 'a'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted array'\n    Explanation: The array 'b' is sorted in ascending order, which means each element is less than or equal to the next.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The array 'a' consists of exactly three numbers, all greater than zero.\n    \n    '7 numbers': The array 'b' consists of exactly seven numbers, which are the sums of all non-empty subsequences of 'a'.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in 'b', which corresponds to the smallest element in 'a'.\n2. Identify the largest element in 'b', which is the sum of all elements in 'a'.\n3. Use the properties of subsequences to deduce the other two elements of 'a':\n   - The second smallest element in 'b' is either the second smallest element of 'a' or a sum involving the smallest element.\n   - The third smallest element in 'b' can help identify the second and third elements of 'a'.\n4. Calculate the three elements of 'a' using these deductions.\n\n# [edge case]\n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest element is 1, and the largest is 8. The other elements can be deduced as 4 and 3.\n\n    1 2 3 4 5 6 7 = 4 1 2\n    Explanation: The smallest element is 1, and the largest is 7. The other elements can be deduced as 4 and 2.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element of 'a' is equal to the smallest element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will handle all valid input cases as described.\n", "requirement analysis:\nThe task requires restoring an original array of three numbers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values. The output should be correct and formatted as specified.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Handle up to 5000 test cases\n- Ensure the solution works with large integer values\n- Provide clear and formatted output\n- Optimize for readability and maintainability\nWe will use a simple mathematical approach to restore the original array 'a' from the sorted array 'b'. Since 'b' contains all possible sums of non-empty subsequences of 'a', we can deduce that the smallest element in 'b' is one of the elements of 'a'. The largest element in 'b' is the sum of all elements of 'a'. By subtracting the smallest element from the largest, we can find the sum of the other two elements. Using these insights, we can efficiently compute the original array 'a'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted array'\n    Explanation: The array 'b' is sorted in ascending order, which means the elements are arranged from the smallest to the largest.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The array 'a' consists of exactly three positive integers.\n    \n    '7 numbers': The array 'b' consists of exactly seven integers, which are the sums of all non-empty subsequences of 'a'.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in array 'b', which is one of the elements of array 'a'.\n2. Identify the largest element in array 'b', which is the sum of all elements in array 'a'.\n3. Subtract the smallest element from the largest to find the sum of the other two elements.\n4. Use the second smallest element in 'b' to find another element of 'a'.\n5. Deduce the third element of 'a' using the above information.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements in 'b' are sums of subsequences of [1, 1, 1], and they match perfectly.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest element is 1, and the largest is 7. The sum of other two elements is 6. Using other elements in 'b', we can deduce that a possible combination is [1, 2, 4].\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements in 'b' are sums of subsequences of [1000000000, 1000000000, 1000000000], and they match perfectly.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will handle these cases correctly by using the properties of subsequences and their sums.\n", "requirement analysis:\nThe problem requires restoring an original array of three positive integers from a sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring that the output format is strictly followed.\nrequirement pool:\n- Efficiently compute the original array from the given subsequence sums\n- Ensure the solution handles large inputs within constraints\n- Provide clear and concise output for each test case\n- Optimize the solution for performance\n- Include error handling for invalid inputs\nWe will use a simple mathematical approach to restore the original array 'a' from the given sorted array 'b'. The key observation is that the smallest three elements in 'b' are the individual elements of 'a', and the largest element in 'b' is the sum of all elements in 'a'. Therefore, we can deduce the elements of 'a' as follows: a_1 = b[0], a_2 = b[1], and a_3 = b[6] - a_1 - a_2. This approach is efficient and handles large inputs within constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: This refers to all possible combinations of elements from the array 'a' without excluding any elements, resulting in 7 different sums.\n\n    'sorted array'\n    Explanation: The array 'b' is sorted in ascending order, which helps in identifying the smallest and largest sums.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    'largest'\n    Explanation: The largest element in array 'b' represents the sum of all elements in array 'a'.\n\n# [code logic]\n    1. For each test case, read the sorted array 'b' of 7 integers.\n    2. Identify the smallest three elements in 'b' as the individual elements of 'a': a_1 = b[0], a_2 = b[1].\n    3. Calculate the third element of 'a' using the largest element in 'b': a_3 = b[6] - a_1 - a_2.\n    4. Output the three elements a_1, a_2, and a_3 for each test case.\n\n# [edge case] \n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so the original array 'a' consists of three identical elements.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest three elements are individual elements of 'a', and the largest element is the sum of all three.\n    \n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are large and identical, resulting in an original array 'a' with identical large values.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all valid input cases efficiently.\n", "requirement analysis:\nThe task requires restoring an original array of three numbers from a sorted list of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values. The output must be formatted correctly for each test case.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Handle large input sizes and values within constraints\n- Ensure output format is correct for each test case\n- Provide a clear and understandable solution\n- Optimize for speed and efficiency\nWe will solve the problem by leveraging the properties of the subsequence sums. Given the sorted array b of 7 elements, the smallest element is the smallest number in the original array a. The largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a efficiently. We will use simple arithmetic operations to derive the three numbers from the given sorted list of sums.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. In this context, it refers to all possible non-empty combinations of the elements in array a.\n\n    'sorted array'\n    Explanation: The array b is sorted in ascending order, which helps in identifying the smallest and largest sums directly.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The original array a consists of exactly three positive integers.\n    \n    '7 numbers': The array b consists of exactly seven numbers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in the sorted array b, which is one of the elements in array a.\n    \n    'largest': Refers to the largest element in the sorted array b, which is the sum of all elements in array a.\n\n# [code logic]\n1. For each test case, read the sorted array b of 7 integers.\n2. Identify the smallest element in b, which is one of the elements in a.\n3. Identify the largest element in b, which is the sum of all three elements in a.\n4. Use the properties of subsequence sums to deduce the other two elements:\n   - The second smallest element in b is another element of a.\n   - The third element can be deduced by subtracting the first two identified elements from the largest element.\n5. Output the three deduced integers for each test case.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are identical, so each element is 1.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest element is 1, and the largest sum is 7. The second element can be deduced as 2, and the third as 4.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are identical and large, so each element is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying elements based on sorted properties and subsequence sums will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring an original array of three numbers from a given sorted array of seven numbers, which are the sums of all non-empty subsequences of the original array. The solution must efficiently handle up to 5000 test cases with large numbers, ensuring correct and formatted output.\nrequirement pool:\n- Efficiently compute the original array from the given subsequence sums.\n- Ensure the solution handles the maximum constraints of input size and value.\n- Provide clear and formatted output for each test case.\n- Optimize for both time and space complexity.\n- Consider edge cases and multiple possible solutions.\nWe will use a simple mathematical approach to restore the original array 'a' from the given sorted array 'b'. The key observation is that the smallest three numbers in 'b' are the individual elements of 'a', and the largest number in 'b' is the sum of all three elements of 'a'. This allows us to efficiently compute the original array without complex operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed, but the order of the remaining elements is preserved. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted array'\n    Explanation: The array 'b' is sorted in ascending order, which means the elements are arranged from smallest to largest.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': indicates that the array 'a' consists of exactly three elements, all of which are positive integers.\n    \n    '7 numbers': indicates that the array 'b' consists of exactly seven elements.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the sorted array 'b' of 7 integers.\n    2. Identify the smallest three numbers in 'b', which correspond to the individual elements of 'a'.\n    3. Identify the largest number in 'b', which is the sum of all three elements of 'a'.\n    4. Use these observations to deduce the original array 'a':\n       - The smallest element in 'b' is one of the elements of 'a'.\n       - The second smallest element in 'b' is another element of 'a'.\n       - The third smallest element in 'b' is the third element of 'a'.\n       - The largest element in 'b' is the sum of all three elements of 'a'.\n    5. Print the three elements of array 'a'.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = a = [1, 1, 1]\n    Explanation: All elements are identical, and their sum is correctly represented as the largest number in 'b'.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = a = [1, 2, 4]\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7, which is the sum of 1 + 2 + 4.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = a = [1000000000, 1000000000, 1000000000]\n    Explanation: All elements are identical large numbers, and their sum is correctly represented as the largest number in 'b'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases efficiently by using the properties of sorted arrays and sums.\n"], "scores": [], "pass_results": [false, false, true, true, true, true, false, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 573, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "add_1_sentence_at_end", "parent_index": 245}
