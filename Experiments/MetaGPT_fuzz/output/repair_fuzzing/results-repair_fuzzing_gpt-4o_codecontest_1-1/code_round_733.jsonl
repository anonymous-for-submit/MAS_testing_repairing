{"name": "1622_B. Berland Music", "description": "Berland Music is a music streaming service built specifically to support Berland local artist. Its developers are currently working on a song recommendation module.\n\nSo imagine Monocarp got recommended n songs, numbered from 1 to n. The i-th song had its predicted rating equal to p_i, where 1 \u2264 p_i \u2264 n and every integer from 1 to n appears exactly once. In other words, p is a permutation.\n\nAfter listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s, such that s_i=0 means that he disliked the i-th song, and s_i=1 means that he liked it.\n\nNow the service has to re-evaluate the song ratings in such a way that:\n\n  * the new ratings q_1, q_2, ..., q_n still form a permutation (1 \u2264 q_i \u2264 n; each integer from 1 to n appears exactly once); \n  * every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all i, j such that s_i=1 and s_j=0, q_i>q_j should hold). \n\n\n\nAmong all valid permutations q find the one that has the smallest value of \u2211_{i=1}^n |p_i-q_i|, where |x| is an absolute value of x.\n\nPrint the permutation q_1, q_2, ..., q_n. If there are multiple answers, you can print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0.", "tags": ["data structures", "greedy", "math", "sortings"], "difficulty": 8, "id": 1622, "sample_io": [{"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n3 1 2\n1 6 5 8 3 2 4 7\n"]}], "test_list": [{"input": "1\n7\n1 2 3 4 5 6 7\n0101010\n", "output": ["1 5 2 6 3 7 4\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 5 2 6 3 7 4\n1 6 5 8 3 2 4 7\n"]}, {"input": "1\n50\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n10101010101010101010101010101010101010101010101010\n", "output": ["26 1 27 2 28 3 29 4 30 5 31 6 32 7 33 8 34 9 35 10 36 11 37 12 38 13 39 14 40 15 41 16 42 17 43 18 44 19 45 20 46 21 47 22 48 23 49 24 50 25\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 6 2 7 3 4 5\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101001\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 5 2 6 3 4 7\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n11110001\n", "output": ["2 1\n3 1 2\n5 6 4 8 2 1 3 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n11110101\n", "output": ["2 1\n3 1 2\n4 5 3 8 1 6 2 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110101\n", "output": ["2 1\n3 1 2\n1 5 4 8 2 6 3 7\n"]}, {"input": "1\n7\n1 2 3 4 5 6 7\n1101010\n", "output": ["4 5 1 6 2 7 3\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n00110001\n", "output": ["2 1\n1 5 2 6 3 7 4\n1 2 6 8 4 3 5 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110100\n", "output": ["2 1\n3 1 2\n1 6 5 8 2 7 4 3\n"]}, {"input": "1\n7\n1 2 3 4 5 6 7\n1101000\n", "output": ["5 6 1 7 2 3 4\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n00010001\n", "output": ["2 1\n1 5 2 6 3 7 4\n2 3 1 8 5 4 6 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n00010001\n", "output": ["2 1\n1 6 2 7 3 4 5\n2 3 1 8 5 4 6 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101011\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 4 2 5 3 6 7\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n11\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110101\n", "output": ["1 2\n3 1 2\n1 5 4 8 2 6 3 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0111010\n8\n2 3 1 8 5 4 7 6\n00110001\n", "output": ["2 1\n1 4 5 6 2 7 3\n1 2 6 8 4 3 5 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n11111001\n", "output": ["2 1\n3 1 2\n4 5 3 8 6 1 2 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n11110111\n", "output": ["2 1\n3 1 2\n3 4 2 8 1 5 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n11110001\n", "output": ["2 1\n1 6 2 7 3 4 5\n5 6 4 8 2 1 3 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n011\n8\n2 3 1 8 5 4 7 6\n11110101\n", "output": ["2 1\n1 2 3\n4 5 3 8 1 6 2 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n01110100\n", "output": ["2 1\n3 2 1\n1 6 5 8 2 7 4 3\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n001\n8\n2 3 1 8 5 4 7 6\n11110101\n", "output": ["2 1\n2 1 3\n4 5 3 8 1 6 2 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n11110011\n", "output": ["2 1\n1 6 2 7 3 4 5\n4 5 3 8 2 1 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0100010\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 6 2 3 4 7 5\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n1 6 2 7 3 4 5\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01100101\n", "output": ["2 1\n3 1 2\n1 6 5 4 2 7 3 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n00110011\n", "output": ["2 1\n1 5 2 6 3 7 4\n1 2 5 8 4 3 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n11100101\n", "output": ["2 1\n3 1 2\n5 6 4 3 1 7 2 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0111010\n8\n2 3 1 8 5 4 7 6\n00110011\n", "output": ["2 1\n1 4 5 6 2 7 3\n1 2 5 8 4 3 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n01100100\n", "output": ["2 1\n3 2 1\n1 7 6 5 2 8 4 3\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n011\n8\n2 3 1 8 5 4 7 6\n01100101\n", "output": ["2 1\n1 2 3\n1 6 5 4 2 7 3 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101001\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n1 5 2 6 3 4 7\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1101001\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n4 5 1 6 2 3 7\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111001\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n3 4 5 6 1 2 7\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n011\n8\n2 3 1 8 5 4 7 6\n01110100\n", "output": ["2 1\n1 2 3\n1 6 5 8 2 7 4 3\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101101\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n1 4 2 5 6 3 7\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n11010001\n", "output": ["2 1\n3 1 2\n5 6 1 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n00010000\n", "output": ["2 1\n1 5 2 6 3 7 4\n2 3 1 8 5 4 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0001000\n8\n2 3 1 8 5 4 7 6\n00010001\n", "output": ["2 1\n1 2 3 7 4 5 6\n2 3 1 8 5 4 6 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n11111011\n", "output": ["2 1\n1 6 2 7 3 4 5\n3 4 2 8 5 1 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n11111001\n", "output": ["2 1\n3 2 1\n4 5 3 8 6 1 2 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0111000\n8\n2 3 1 8 5 4 7 6\n11110011\n", "output": ["2 1\n1 5 6 7 2 3 4\n4 5 3 8 2 1 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111000\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n4 5 6 7 1 2 3\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n11111111\n", "output": ["2 1\n1 6 2 7 3 4 5\n2 3 1 8 5 4 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1101000\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n5 6 1 7 2 3 4\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101011\n8\n2 3 1 8 5 4 7 6\n01111001\n", "output": ["2 1\n1 4 2 5 3 6 7\n1 5 4 8 6 2 3 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n11110100\n", "output": ["2 1\n3 2 1\n5 6 4 8 1 7 3 2\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n010\n8\n2 3 1 8 5 4 7 6\n11111001\n", "output": ["2 1\n2 3 1\n4 5 3 8 6 1 2 7\n"]}, {"input": "1\n7\n1 2 3 4 5 6 7\n1001000\n", "output": ["6 1 2 7 3 4 5\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0111010\n8\n2 3 1 8 5 4 7 6\n00100001\n", "output": ["2 1\n1 4 5 6 2 7 3\n1 2 7 6 4 3 5 8\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n010\n8\n2 3 1 8 5 4 7 6\n01110100\n", "output": ["2 1\n2 3 1\n1 6 5 8 2 7 4 3\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n01111111\n", "output": ["2 1\n1 6 2 7 3 4 5\n1 3 2 8 5 4 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n01111001\n", "output": ["2 1\n1 5 2 6 3 7 4\n1 5 4 8 6 2 3 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n01111001\n", "output": ["2 1\n3 2 1\n1 5 4 8 6 2 3 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0111000\n8\n2 3 1 8 5 4 7 6\n11110111\n", "output": ["2 1\n1 5 6 7 2 3 4\n3 4 2 8 1 5 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1101000\n8\n2 3 1 8 5 4 7 6\n11010010\n", "output": ["2 1\n5 6 1 7 2 3 4\n5 6 1 8 3 2 7 4\n"]}, {"input": "3\n2\n2 1\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n3 1 2\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111010\n8\n2 3 1 8 5 4 7 6\n00110001\n", "output": ["2 1\n3 4 5 6 1 7 2\n1 2 6 8 4 3 5 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111100\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n3 4 5 6 7 1 2\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n01110111\n", "output": ["2 1\n1 6 2 7 3 4 5\n1 4 3 8 2 5 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n01111101\n", "output": ["2 1\n3 2 1\n1 4 3 8 6 5 2 7\n"]}, {"input": "3\n2\n1 2\n11\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01100101\n", "output": ["1 2\n3 1 2\n1 6 5 4 2 7 3 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111101\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n2 3 4 5 6 1 7\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n10010000\n", "output": ["2 1\n1 5 2 6 3 7 4\n7 2 1 8 4 3 6 5\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0110000\n8\n2 3 1 8 5 4 7 6\n11110011\n", "output": ["2 1\n1 6 7 2 3 4 5\n4 5 3 8 2 1 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n001\n8\n2 3 1 8 5 4 7 6\n01100101\n", "output": ["2 1\n2 1 3\n1 6 5 4 2 7 3 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101110\n8\n2 3 1 8 5 4 7 6\n01111001\n", "output": ["2 1\n1 4 2 5 6 7 3\n1 5 4 8 6 2 3 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101110\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 4 2 5 6 7 3\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0001010\n8\n2 3 1 8 5 4 7 6\n00010001\n", "output": ["2 1\n1 2 3 6 4 7 5\n2 3 1 8 5 4 6 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n010\n8\n2 3 1 8 5 4 7 6\n11110101\n", "output": ["2 1\n2 3 1\n4 5 3 8 1 6 2 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n01110110\n", "output": ["2 1\n3 2 1\n1 5 4 8 2 6 7 3\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1101000\n8\n2 3 1 8 5 4 7 6\n10010011\n", "output": ["2 1\n5 6 1 7 2 3 4\n5 2 1 8 4 3 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n3 2 1\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n3 1 2\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n00110001\n", "output": ["2 1\n3 2 1\n1 2 6 8 4 3 5 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n011\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 2 3\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0100001\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 6 2 3 4 5 7\n1 6 5 8 3 2 4 7\n"]}, {"input": "1\n7\n1 2 3 4 5 6 7\n1100010\n", "output": ["5 6 1 2 3 7 4\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0111010\n8\n2 3 1 8 5 4 7 6\n00110111\n", "output": ["2 1\n1 4 5 6 2 7 3\n1 2 4 8 3 5 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111000\n8\n2 3 1 8 5 4 7 6\n11000011\n", "output": ["2 1\n4 5 6 7 1 2 3\n5 6 1 4 3 2 8 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101011\n8\n2 3 1 8 5 4 7 6\n10010000\n", "output": ["2 1\n1 4 2 5 3 6 7\n7 2 1 8 4 3 6 5\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1101110\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n3 4 1 5 6 7 2\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n11110110\n", "output": ["2 1\n3 2 1\n4 5 3 8 1 6 7 2\n"]}, {"input": "3\n2\n1 2\n11\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n11100101\n", "output": ["1 2\n3 1 2\n5 6 4 3 1 7 2 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111100\n8\n2 3 1 8 5 4 7 6\n11000011\n", "output": ["2 1\n3 4 5 6 7 1 2\n5 6 1 4 3 2 8 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101011\n8\n2 3 1 8 5 4 7 6\n01100001\n", "output": ["2 1\n1 4 2 5 3 6 7\n1 7 6 5 3 2 4 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0100000\n8\n2 3 1 8 5 4 7 6\n11110011\n", "output": ["2 1\n1 7 2 3 4 5 6\n4 5 3 8 2 1 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101001\n8\n2 3 1 8 5 4 7 6\n11011011\n", "output": ["2 1\n1 5 2 6 3 4 7\n3 4 1 8 5 2 7 6\n"]}, {"input": "3\n2\n1 2\n11\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n01110101\n", "output": ["1 2\n3 1 2\n1 5 4 8 2 6 3 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n01100101\n", "output": ["2 1\n3 1 2\n1 6 5 4 2 7 3 8\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n000\n8\n2 3 1 8 5 4 7 6\n11111001\n", "output": ["2 1\n3 1 2\n4 5 3 8 6 1 2 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n3 1 2\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n11010001\n", "output": ["2 1\n3 1 2\n5 6 1 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n11\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n01100101\n", "output": ["1 2\n3 1 2\n1 6 5 4 2 7 3 8\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n000\n8\n2 3 1 8 5 4 7 6\n11110101\n", "output": ["2 1\n3 1 2\n4 5 3 8 1 6 2 7\n"]}], "task_id": "codecontest/155", "prompt": "Berland Music is a music streaming service built specifically to support Berland local artist. Its developers are currently working on a song recommendation module.\n\nSo imagine Monocarp got recommended n songs, numbered from 1 to n. The i-th song had its predicted rating equal to p_i, where 1 \u2264 p_i \u2264 n and every integer from 1 to n appears exactly once. In other words, p is a permutation.\n\nAfter listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s, such that s_i=0 means that he disliked the i-th song, and s_i=1 means that he liked it.\n\nNow the service has to re-evaluate the song ratings in such a way that:\n\n  * the new ratings q_1, q_2, ..., q_n still form a permutation (1 \u2264 q_i \u2264 n; each integer from 1 to n appears exactly once); \n  * every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all i, j such that s_i=1 and s_j=0, q_i>q_j should hold). \n\nAmong all valid permutations q find the one that has the smallest value of \u2211_{i=1}^n |p_i-q_i|, where |x| is an absolute value of x.\n\nPrint the permutation q_1, q_2, ..., q_n. If there are multiple answers, you can print any of them. Consider edge cases where all songs are liked or disliked. Ensure your solution runs efficiently with regards to constraints provided in the problem.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0.", "repair_prompt": ["Berland Music is a music streaming service built specifically to support Berland local artist. Its developers are currently working on a song recommendation module.\n\nSo imagine Monocarp got recommended n songs, numbered from 1 to n. The i-th song had its predicted rating equal to p_i, where 1 \u2264 p_i \u2264 n and every integer from 1 to n appears exactly once. In other words, p is a permutation.\n\nAfter listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s, such that s_i=0 means that he disliked the i-th song, and s_i=1 means that he liked it.\n\nNow the service has to re-evaluate the song ratings in such a way that:\n\n  * the new ratings q_1, q_2, ..., q_n still form a permutation (1 \u2264 q_i \u2264 n; each integer from 1 to n appears exactly once); \n  * every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all i, j such that s_i=1 and s_j=0, q_i>q_j should hold). \n\nAmong all valid permutations q find the one that has the smallest value of \u2211_{i=1}^n |p_i-q_i|, where |x| is an absolute value of x.\n\nPrint the permutation q_1, q_2, ..., q_n. If there are multiple answers, you can print any of them. Consider edge cases where all songs are liked or disliked. Ensure your solution runs efficiently with regards to constraints provided in the problem.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0.", "Berland Music is a music streaming service built specifically to support Berland local artist. Its developers are currently working on a song recommendation module.\n\nSo imagine Monocarp got recommended n songs, numbered from 1 to n. The i-th song had its predicted rating equal to p_i, where 1 \u2264 p_i \u2264 n. Each of these ratings is unique as every integer from 1 to n appears exactly once. In other words, p is a permutation.\n\nAfter listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s, such that s_i=0 means that he disliked the i-th song, and s_i=1 means that he liked it.\n\nNow the service has to re-evaluate the song ratings in such a way that:\n\n  * the new ratings q_1, q_2, ..., q_n still form a permutation (1 \u2264 q_i \u2264 n; each integer from 1 to n appears exactly once); \n  * every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all i, j such that s_i=1 and s_j=0, q_i>q_j should hold). \n\nAmong all valid permutations q find the one that has the smallest value of \u2211_{i=1}^n |p_i-q_i|, where |x| is an absolute value of x.\n\nPrint the permutation q_1, q_2, ..., q_n. If there are multiple answers, you can print any of them. Consider edge cases where all songs are liked or disliked. Ensure your solution runs efficiently with regards to constraints provided in the problem.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0.", "Berland Music is a music streaming service built specifically to support Berland local artist, and its developers are currently working on a song recommendation module. So imagine Monocarp got recommended n songs, numbered from 1 to n. The i-th song had its predicted rating equal to p_i, where 1 \u2264 p_i \u2264 n and every integer from 1 to n appears exactly once. In other words, p is a permutation. After listening to each of them, Monocarp pressed either a like or a dislike button, and let his vote sequence be represented with a string s, such that s_i=0 means that he disliked the i-th song, and s_i=1 means that he liked it. Now the service has to re-evaluate the song ratings in such a way that the new ratings q_1, q_2, ..., q_n still form a permutation (1 \u2264 q_i \u2264 n; each integer from 1 to n appears exactly once) and every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all i, j such that s_i=1 and s_j=0, q_i>q_j should hold). Among all valid permutations q find the one that has the smallest value of \u2211_{i=1}^n |p_i-q_i|, where |x| is an absolute value of x. Print the permutation q_1, q_2, ..., q_n. If there are multiple answers, you can print any of them. Consider edge cases where all songs are liked or disliked. Ensure your solution runs efficiently with regards to constraints provided in the problem.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef re_evaluate_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"Re-evaluate song ratings based on user likes and dislikes.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int], str]]): List of test cases, each containing:\n            - n (int): Number of songs.\n            - p (List[int]): Original permutation of ratings.\n            - s (str): String indicating likes ('1') and dislikes ('0').\n\n    Returns:\n        List[List[int]]: List of new permutations for each test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        liked_indices = [i for i in range(n) if s[i] == '1']\n        disliked_indices = [i for i in range(n) if s[i] == '0']\n\n        # Sort liked indices in descending order based on original ratings\n        liked_indices.sort(key=lambda x: p[x], reverse=True)\n        # Sort disliked indices in ascending order based on original ratings\n        disliked_indices.sort(key=lambda x: p[x])\n\n        # Create a new permutation list initialized with zeros\n        q = [0] * n\n\n        # Assign highest ratings to liked songs\n        current_rating = n\n        for i in liked_indices:\n            q[i] = current_rating\n            current_rating -= 1\n\n        # Assign lowest ratings to disliked songs\n        for i in disliked_indices:\n            q[i] = current_rating\n            current_rating -= 1\n\n        results.append(q)\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        s = input().strip()\n        test_cases.append((n, p, s))\n\n    results = re_evaluate_ratings(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef re_evaluate_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"Re-evaluate song ratings based on Monocarp's feedback.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int], str]]): List of test cases, each containing:\n            - n (int): Number of songs.\n            - p (List[int]): Original permutation of ratings.\n            - s (str): String indicating liked ('1') or disliked ('0') songs.\n\n    Returns:\n        List[List[int]]: List of re-evaluated ratings for each test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        liked_indices = [i for i in range(n) if s[i] == '1']\n        disliked_indices = [i for i in range(n) if s[i] == '0']\n\n        # Sort liked and disliked indices based on original ratings\n        liked_indices.sort(key=lambda x: p[x], reverse=True)\n        disliked_indices.sort(key=lambda x: p[x])\n\n        # Create a new permutation q\n        q = [0] * n\n        current_rating = n\n\n        # Assign highest ratings to liked songs\n        for index in liked_indices:\n            q[index] = current_rating\n            current_rating -= 1\n\n        # Assign lowest ratings to disliked songs\n        for index in disliked_indices:\n            q[index] = current_rating\n            current_rating -= 1\n\n        results.append(q)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        s = input().strip()\n        test_cases.append((n, p, s))\n\n    # Call the function and print the results\n    results = re_evaluate_ratings(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compute_song_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"Compute the permutation q for song ratings based on user feedback.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: Number of songs.\n            - p: List of integers representing the permutation of predicted ratings.\n            - s: String representing Monocarp's feedback (0 for dislike, 1 for like).\n\n    Returns:\n        A list of lists, where each list is the permutation q for the corresponding test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        # Separate indices of liked and disliked songs\n        liked_indices = [i for i in range(n) if s[i] == '1']\n        disliked_indices = [i for i in range(n) if s[i] == '0']\n\n        # Sort indices based on their values in p\n        liked_indices.sort(key=lambda x: p[x])\n        disliked_indices.sort(key=lambda x: p[x])\n\n        # Create a new permutation q\n        q = [0] * n\n        current_rating = 1\n\n        # Assign ratings to disliked songs first\n        for index in disliked_indices:\n            q[index] = current_rating\n            current_rating += 1\n\n        # Assign ratings to liked songs\n        for index in liked_indices:\n            q[index] = current_rating\n            current_rating += 1\n\n        results.append(q)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        s = input().strip()\n        test_cases.append((n, p, s))\n\n    # Output interface\n    results = compute_song_ratings(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reevaluate_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"Re-evaluate song ratings based on Monocarp's likes and dislikes.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int], str]]): Each test case contains:\n            - n (int): Number of songs.\n            - p (List[int]): Predicted ratings, a permutation of numbers from 1 to n.\n            - s (str): String of likes ('1') and dislikes ('0').\n\n    Returns:\n        List[List[int]]: List of permutations q for each test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        # Separate indices of liked and disliked songs\n        liked_indices = [i for i in range(n) if s[i] == '1']\n        disliked_indices = [i for i in range(n) if s[i] == '0']\n\n        # Sort indices of liked and disliked songs by their predicted ratings\n        liked_indices.sort(key=lambda i: p[i], reverse=True)\n        disliked_indices.sort(key=lambda i: p[i], reverse=True)\n\n        # Create a permutation q\n        q = [0] * n\n        current_rating = n\n\n        # Assign highest ratings to liked songs\n        for i in liked_indices:\n            q[i] = current_rating\n            current_rating -= 1\n\n        # Assign remaining ratings to disliked songs\n        for i in disliked_indices:\n            q[i] = current_rating\n            current_rating -= 1\n\n        results.append(q)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        s = input().strip()\n        test_cases.append((n, p, s))\n\n    # Output interface\n    results = reevaluate_ratings(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef re_evaluate_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"Re-evaluate song ratings based on Monocarp's feedback.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: Number of songs.\n            - p: List of predicted ratings (a permutation of numbers 1 to n).\n            - s: String of feedback ('0' for dislike, '1' for like).\n\n    Returns:\n        A list of lists, where each list is the re-evaluated ratings for a test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        # Separate indices of liked and disliked songs\n        liked_indices = [i for i in range(n) if s[i] == '1']\n        disliked_indices = [i for i in range(n) if s[i] == '0']\n\n        # Sort the original ratings for liked and disliked songs\n        liked_ratings = sorted((p[i] for i in liked_indices), reverse=True)\n        disliked_ratings = sorted((p[i] for i in disliked_indices), reverse=True)\n\n        # Assign new ratings\n        new_ratings = [0] * n\n        current_rating = n\n\n        # Assign highest ratings to liked songs\n        for i in liked_indices:\n            new_ratings[i] = current_rating\n            current_rating -= 1\n\n        # Assign remaining ratings to disliked songs\n        for i in disliked_indices:\n            new_ratings[i] = current_rating\n            current_rating -= 1\n\n        results.append(new_ratings)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        p = list(map(int, input().strip().split()))\n        s = input().strip()\n        test_cases.append((n, p, s))\n\n    # Output interface\n    results = re_evaluate_ratings(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reevaluate_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"Re-evaluate song ratings based on likes and dislikes.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int], str]]): List of test cases, each containing:\n            - n (int): Number of songs.\n            - p (List[int]): Original ratings, a permutation of numbers from 1 to n.\n            - s (str): String of likes ('1') and dislikes ('0').\n\n    Returns:\n        List[List[int]]: List of re-evaluated ratings for each test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        # Separate indices of liked and disliked songs\n        liked_indices = [i for i in range(n) if s[i] == '1']\n        disliked_indices = [i for i in range(n) if s[i] == '0']\n\n        # Sort the original ratings\n        sorted_p = sorted(p)\n\n        # Assign the highest ratings to liked songs and lowest to disliked songs\n        q = [0] * n\n        liked_count = len(liked_indices)\n        disliked_count = len(disliked_indices)\n\n        # Assign ratings to disliked songs\n        for i, index in enumerate(disliked_indices):\n            q[index] = sorted_p[i]\n\n        # Assign ratings to liked songs\n        for i, index in enumerate(liked_indices):\n            q[index] = sorted_p[disliked_count + i]\n\n        results.append(q)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        s = input().strip()\n        test_cases.append((n, p, s))\n\n    # Output interface\n    results = reevaluate_ratings(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reevaluate_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"Re-evaluate song ratings based on Monocarp's feedback.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int], str]]): List of test cases, each containing:\n            - n (int): Number of songs.\n            - p (List[int]): Predicted ratings, a permutation of numbers from 1 to n.\n            - s (str): Feedback string, where '1' means liked and '0' means disliked.\n\n    Returns:\n        List[List[int]]: List of re-evaluated ratings for each test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        liked_indices = [i for i in range(n) if s[i] == '1']\n        disliked_indices = [i for i in range(n) if s[i] == '0']\n\n        # Sort indices based on predicted ratings\n        liked_indices.sort(key=lambda x: p[x])\n        disliked_indices.sort(key=lambda x: p[x])\n\n        # Assign ratings\n        q = [0] * n\n        current_rating = n\n\n        # Assign highest ratings to liked songs\n        for i in liked_indices:\n            q[i] = current_rating\n            current_rating -= 1\n\n        # Assign remaining ratings to disliked songs\n        for i in disliked_indices:\n            q[i] = current_rating\n            current_rating -= 1\n\n        results.append(q)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        s = input().strip()\n        test_cases.append((n, p, s))\n\n    # Output interface\n    results = reevaluate_ratings(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef re_evaluate_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"Re-evaluate song ratings based on user feedback.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int], str]]): List of test cases, each containing:\n            - n (int): Number of songs.\n            - p (List[int]): Original permutation of ratings.\n            - s (str): String indicating liked (1) or disliked (0) songs.\n\n    Returns:\n        List[List[int]]: List of re-evaluated ratings for each test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        liked_indices = [i for i in range(n) if s[i] == '1']\n        disliked_indices = [i for i in range(n) if s[i] == '0']\n\n        # Sort indices based on original ratings\n        liked_indices.sort(key=lambda x: p[x])\n        disliked_indices.sort(key=lambda x: p[x])\n\n        # Create a new permutation q\n        q = [0] * n\n        current_rating = 1\n\n        # Assign ratings to disliked songs first\n        for index in disliked_indices:\n            q[index] = current_rating\n            current_rating += 1\n\n        # Assign ratings to liked songs\n        for index in liked_indices:\n            q[index] = current_rating\n            current_rating += 1\n\n        results.append(q)\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        s = input().strip()\n        test_cases.append((n, p, s))\n\n    results = re_evaluate_ratings(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef adjust_song_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"Adjusts song ratings based on Monocarp's feedback to ensure liked songs have higher ratings than disliked ones.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int], str]]): List of test cases, each containing:\n            - n (int): Number of songs.\n            - p (List[int]): Predicted ratings permutation.\n            - s (str): String representing likes ('1') and dislikes ('0').\n\n    Returns:\n        List[List[int]]: List of adjusted ratings for each test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        # Separate indices into liked and disliked based on s\n        liked_indices = [i for i in range(n) if s[i] == '1']\n        disliked_indices = [i for i in range(n) if s[i] == '0']\n\n        # Sort liked and disliked indices based on their predicted ratings\n        liked_indices.sort(key=lambda i: p[i], reverse=True)\n        disliked_indices.sort(key=lambda i: p[i])\n\n        # Create a new permutation q\n        q = [0] * n\n        current_rating = 1\n\n        # Assign ratings to disliked songs first\n        for i in disliked_indices:\n            q[i] = current_rating\n            current_rating += 1\n\n        # Assign ratings to liked songs\n        for i in liked_indices:\n            q[i] = current_rating\n            current_rating += 1\n\n        results.append(q)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        test_cases.append((n, p, s))\n\n    # Call the function and print the results\n    results = adjust_song_ratings(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reevaluate_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    results = []\n    \n    for n, p, s in test_cases:\n        liked_indices = []\n        disliked_indices = []\n        \n        # Separate indices based on likes and dislikes\n        for i in range(n):\n            if s[i] == '1':\n                liked_indices.append(i)\n            else:\n                disliked_indices.append(i)\n        \n        # Sort liked and disliked indices based on their current ratings\n        liked_indices.sort(key=lambda x: p[x], reverse=True)\n        disliked_indices.sort(key=lambda x: p[x])\n        \n        # Assign new ratings\n        q = [0] * n\n        current_rating = 1\n        \n        # Assign lowest ratings to disliked songs\n        for index in disliked_indices:\n            q[index] = current_rating\n            current_rating += 1\n        \n        # Assign highest ratings to liked songs\n        for index in liked_indices:\n            q[index] = current_rating\n            current_rating += 1\n        \n        results.append(q)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        s = input().strip()\n        test_cases.append((n, p, s))\n    \n    # Output interface\n    results = reevaluate_ratings(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirement focuses on re-evaluating song ratings based on user feedback while maintaining permutation constraints. The solution must efficiently handle up to 10,000 test cases with a total of 200,000 songs.\nrequirement pool:\n- Implement song recommendation algorithm based on user feedback.\n- Ensure permutation constraints are maintained in re-evaluated ratings.\n- Optimize algorithm for handling large datasets efficiently.\n- Develop a responsive UI for mobile and desktop platforms.\n- Enhance user engagement through personalized recommendations.\nWe will implement a function that processes each test case independently. The function will separate the songs into liked and disliked categories based on the input string. It will then assign the highest available ratings to liked songs and the lowest to disliked songs, ensuring the permutation constraint is maintained. The solution will efficiently handle large datasets by using sorting and indexing techniques.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this context, it means that the ratings must be rearranged such that each integer from 1 to n appears exactly once.\n\n    'absolute value'\n    Explanation: The absolute value of a number is its non-negative value without regard to its sign. Here, it is used to minimize the difference between the original and new ratings.\n\n# [phrase showing quantity relationship]\n    'greater than': This indicates that liked songs should have higher ratings than disliked songs.\n    'smallest value': This refers to minimizing the sum of absolute differences between original and new ratings.\n\n# [degree adverb]\n    'smallest': This means finding the permutation that results in the minimum possible sum of absolute differences.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n, the permutation p, and the string s.\n3. Separate indices into liked and disliked based on s.\n4. Sort the liked indices in descending order and disliked indices in ascending order.\n5. Assign the highest available ratings to liked songs and lowest to disliked songs.\n6. Ensure the permutation constraint is maintained by using sorted indices.\n7. Output the new permutation for each test case.\n\n# [edge case]\n    Case 1: All songs are liked (s = \"111...1\")\n    Expected output: The permutation should be sorted in descending order.\n    Explanation: Since all songs are liked, they should receive the highest ratings.\n\n    Case 2: All songs are disliked (s = \"000...0\")\n    Expected output: The permutation should be sorted in ascending order.\n    Explanation: Since all songs are disliked, they should receive the lowest ratings.\n\n    Case 3: Alternating likes and dislikes (s = \"101010...\")\n    Expected output: Liked songs should have higher ratings than disliked ones, maintaining permutation constraints.\n    Explanation: Ensure that liked songs have higher ratings than disliked ones while maintaining permutation constraints.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting liked and disliked indices and assigning ratings accordingly will handle these cases efficiently.\n", "requirement analysis:\nThe main requirement is to develop a song recommendation module that re-evaluates song ratings based on user feedback. The system must ensure that liked songs have higher ratings than disliked ones while minimizing the difference from the original predicted ratings. The solution should handle up to 10,000 test cases efficiently, with a total of up to 200,000 songs across all test cases.\nrequirement pool:\n- Develop the song recommendation module.\n- Ensure liked songs have higher ratings than disliked ones.\n- Optimize the algorithm for large input sizes.\n- Create a user-friendly interface for feedback.\n- Integrate with existing music libraries.\nWe will implement a function that processes multiple test cases efficiently. For each test case, we will separate the songs into liked and disliked categories based on the input string. We will then assign the highest available ratings to liked songs and the lowest to disliked songs, ensuring the permutation constraint is satisfied. This approach minimizes the sum of absolute differences between the original and new ratings. We will use Python's built-in sorting and list manipulation capabilities to achieve this efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this context, it means that the ratings q must be a rearrangement of numbers from 1 to n, where each number appears exactly once.\n\n    'liked' and 'disliked'\n    Explanation: These terms refer to Monocarp's feedback on the songs. A 'liked' song should have a higher rating than any 'disliked' song in the new permutation q.\n\n# [phrase showing quantity relationship]\n    'greater than': This indicates that the rating of liked songs should be numerically higher than the rating of disliked songs in the permutation q.\n\n# [degree adverb]\n    'smallest': This refers to finding the permutation q that minimizes the sum of absolute differences between the original and new ratings.\n\n# [code logic]\n1. For each test case, read n, p (the original permutation), and s (the like/dislike string).\n2. Separate the indices of liked and disliked songs based on s.\n3. Sort the indices of liked songs by their original ratings in descending order.\n4. Sort the indices of disliked songs by their original ratings in ascending order.\n5. Assign the highest available ratings to liked songs and the lowest to disliked songs to form the new permutation q.\n6. Ensure that q is a valid permutation by using numbers from 1 to n exactly once.\n7. Output the permutation q for each test case.\n\n# [edge case]\n    Case 1: All songs are liked.\n    Input: n = 3, p = [3, 1, 2], s = \"111\"\n    Expected Output: 3 1 2\n    Explanation: Since all songs are liked, any permutation is valid, but the one with minimum cost is the original permutation.\n\n    Case 2: All songs are disliked.\n    Input: n = 3, p = [3, 1, 2], s = \"000\"\n    Expected Output: 1 2 3\n    Explanation: Since all songs are disliked, any permutation is valid, but the one with minimum cost is the sorted order.\n\n    Case 3: Alternating likes and dislikes.\n    Input: n = 4, p = [4, 3, 2, 1], s = \"1010\"\n    Expected Output: 3 1 4 2\n    Explanation: Liked songs (indices 1 and 3) get higher ratings than disliked songs (indices 2 and 4).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting liked and disliked indices separately and assigning ratings accordingly will handle these cases naturally.\n", "requirement analysis:\nThe requirement focuses on re-evaluating song ratings based on user feedback while maintaining permutation constraints. The solution must efficiently handle up to 200,000 songs across multiple test cases, ensuring liked songs have higher ratings than disliked ones.\nrequirement pool:\n- Efficiently compute the permutation q for song ratings\n- Ensure liked songs have higher ratings than disliked songs\n- Handle edge cases where all songs are liked or disliked\n- Minimize the sum of absolute differences between p and q\n- Optimize for large input sizes and multiple test cases\nWe will implement a function that efficiently computes the permutation q for song ratings based on user feedback. The function will ensure that liked songs have higher ratings than disliked songs while minimizing the sum of absolute differences between the original and new ratings. We will use sorting and permutation techniques to achieve this efficiently, considering edge cases where all songs are liked or disliked.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this context, it means that the ratings q must be a rearrangement of numbers from 1 to n, where each number appears exactly once.\n\n    'liked' and 'disliked'\n    Explanation: These terms refer to Monocarp's feedback on the songs. A 'liked' song (s_i=1) should have a higher rating than a 'disliked' song (s_i=0) in the new permutation q.\n\n# [phrase showing quantity relationship]\n    'greater than'\n    Explanation: For every liked song, its new rating must be greater than the rating of any disliked song. This can be implemented by ensuring that all liked songs are assigned higher numbers in the permutation q than disliked songs.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The goal is to find the permutation q that minimizes the sum of absolute differences between the original ratings p and the new ratings q. This involves finding the permutation with the least deviation from p.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n, the permutation p, and the string s.\n3. Separate the indices of liked and disliked songs based on s.\n4. Sort the liked and disliked indices based on their values in p.\n5. Assign the highest available ratings to liked songs and the lowest to disliked songs to ensure q is a permutation.\n6. Output the permutation q for each test case.\n\n# [edge case]\n    Case 1: All songs liked\n    Input: n = 3, p = [3, 1, 2], s = \"111\"\n    Expected Output: 3 1 2\n    Explanation: Since all songs are liked, any permutation is valid, but the one with minimum cost is p itself.\n\n    Case 2: All songs disliked\n    Input: n = 3, p = [3, 1, 2], s = \"000\"\n    Expected Output: 1 2 3\n    Explanation: Since all songs are disliked, any permutation is valid, but the one with minimum cost is sorted p.\n\n    Case 3: Alternating likes and dislikes\n    Input: n = 4, p = [4, 1, 3, 2], s = \"1010\"\n    Expected Output: 4 1 3 2\n    Explanation: Liked songs (indices 1 and 3) should have higher ratings than disliked (indices 2 and 4).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting liked and disliked songs separately and assigning ratings accordingly will handle these cases efficiently.\n", "requirement analysis:\nThe requirement is to develop a song recommendation module that re-evaluates song ratings based on user feedback. The solution must ensure that liked songs have higher ratings than disliked ones while minimizing the difference from the original predicted ratings. The algorithm should handle up to 200,000 songs efficiently across multiple test cases.\nrequirement pool:\n- Implement the song recommendation algorithm\n- Ensure the algorithm respects user feedback\n- Optimize the algorithm for large datasets\n- Test the algorithm with edge cases\n- Provide multiple valid outputs if possible\nWe will implement a function that processes multiple test cases efficiently. The function will separate liked and disliked songs, assign the highest ratings to liked songs, and the lowest to disliked ones, ensuring the permutation condition is met. We will use sorting and list manipulation to achieve this efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this context, it means that the ratings q must be a rearrangement of numbers from 1 to n, where each number appears exactly once.\n\n    'liked' and 'disliked'\n    Explanation: These terms refer to Monocarp's feedback on the songs. A 'liked' song (s_i=1) should have a higher rating than any 'disliked' song (s_i=0).\n\n# [phrase showing quantity relationship]\n    'greater than': This indicates that the rating for liked songs must be higher than the rating for disliked songs. In code, this can be implemented by ensuring that all liked songs are assigned higher numbers from the permutation than disliked songs.\n\n# [degree adverb]\n    'smallest': This refers to finding the permutation q that minimizes the sum of absolute differences between p and q. In code, this can be achieved by sorting and assigning values in a way that minimizes these differences.\n\n# [code logic]\n1. For each test case, read n, p, and s.\n2. Separate the indices of liked and disliked songs based on s.\n3. Sort the indices of liked songs by their predicted ratings in descending order.\n4. Sort the indices of disliked songs by their predicted ratings in descending order.\n5. Assign the highest available ratings to liked songs and the lowest to disliked songs to form the permutation q.\n6. Output the permutation q for each test case.\n\n# [edge case]\n    Case 1: All songs are liked.\n    Input: n = 3, p = [3, 1, 2], s = \"111\"\n    Expected Output: 3 1 2\n    Explanation: Since all songs are liked, the permutation q can be the same as p to minimize the sum of absolute differences.\n\n    Case 2: All songs are disliked.\n    Input: n = 3, p = [3, 1, 2], s = \"000\"\n    Expected Output: 1 2 3\n    Explanation: Since all songs are disliked, any permutation is valid, but using the sorted order minimizes the sum of absolute differences.\n\n    Case 3: Alternating likes and dislikes.\n    Input: n = 4, p = [4, 3, 2, 1], s = \"1010\"\n    Expected Output: 4 1 3 2\n    Explanation: Assign highest ratings to liked songs (4 and 3) and lowest to disliked (1 and 2).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and assigning based on likes and dislikes inherently handles these scenarios.\n", "requirement analysis:\nThe requirement is to develop a song recommendation module that re-evaluates song ratings based on user feedback. The module must ensure that liked songs have higher ratings than disliked ones while minimizing the difference from the original predicted ratings. The solution should handle up to 200,000 songs efficiently across multiple test cases.\nrequirement pool:\n- Implement the song recommendation algorithm\n- Ensure the algorithm supports permutations of ratings\n- Optimize the algorithm for performance with large datasets\n- Integrate user feedback into the recommendation process\n- Support edge cases where all songs are liked or disliked\nWe will implement a function that processes multiple test cases efficiently. The function will separate liked and disliked songs, sort them, and then assign new ratings to ensure liked songs have higher ratings than disliked ones. We will use Python's built-in sorting capabilities to achieve this efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this context, it means that the ratings are a sequence of numbers from 1 to n, each appearing exactly once.\n\n    'liked' and 'disliked'\n    Explanation: These terms refer to Monocarp's feedback on the songs. A 'liked' song should have a higher rating than any 'disliked' song in the new permutation.\n\n# [phrase showing quantity relationship]\n    'greater than': This indicates that the new rating for liked songs must be higher than the ratings for disliked songs. In code, this can be implemented by ensuring that all liked songs are assigned higher numbers than disliked ones.\n\n# [degree adverb]\n    'smallest': This refers to finding the permutation that minimizes the sum of absolute differences between the original and new ratings. In code, this can be achieved by sorting and assigning ratings in a way that minimizes these differences.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case:\n   - Read n, the permutation p, and the string s.\n   - Separate the indices of liked and disliked songs.\n   - Sort the original ratings of liked and disliked songs.\n   - Assign new ratings such that all liked songs have higher ratings than disliked ones.\n   - Ensure the sum of absolute differences is minimized by assigning ratings close to their original values.\n3. Output the new permutation for each test case.\n\n# [edge case]\n    Case 1: All songs liked\n    Input: 3, 1 2 3, 111\n    Expected Output: 1 2 3\n    Explanation: Since all songs are liked, any permutation is valid, but the one with minimum cost is the original permutation.\n\n    Case 2: All songs disliked\n    Input: 3, 3 2 1, 000\n    Expected Output: 3 2 1\n    Explanation: Since all songs are disliked, any permutation is valid, but the one with minimum cost is the original permutation.\n\n    Case 3: Alternating likes and dislikes\n    Input: 4, 4 3 2 1, 1010\n    Expected Output: 4 2 3 1\n    Explanation: Liked songs (4, 2) should have higher ratings than disliked (3, 1). The permutation minimizes the cost.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of sorting and assigning ratings based on likes and dislikes inherently handles these scenarios.\n", "requirement analysis:\nThe requirement is to develop a song recommendation module that re-evaluates song ratings based on user feedback. The system must ensure that liked songs have higher ratings than disliked ones while minimizing the difference between predicted and re-evaluated ratings. The solution should handle up to 200,000 songs efficiently across multiple test cases.\nrequirement pool:\n- Develop the core algorithm for re-evaluating song ratings.\n- Ensure the algorithm handles large datasets efficiently.\n- Integrate the recommendation module with the existing system.\n- Test the module with real user data to ensure accuracy.\n- Gather user feedback to improve the recommendation system.\nWe will implement a function that processes multiple test cases efficiently. The function will separate liked and disliked songs, assign the highest ratings to liked songs, and the lowest to disliked ones, ensuring the permutation condition is met. We will use sorting and list manipulation to achieve this efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this requirement, it means that the ratings must be rearranged such that each integer from 1 to n appears exactly once.\n\n    'absolute value'\n    Explanation: The absolute value of a number is its distance from zero on the number line, without considering direction. Here, it is used to minimize the difference between the original and new ratings.\n\n# [phrase showing quantity relationship]\n    'greater than': This indicates that liked songs should have higher ratings than disliked songs. In code, this can be implemented by sorting liked songs to have higher values than disliked ones.\n\n# [degree adverb]\n    'smallest': This refers to finding the permutation with the minimum possible sum of absolute differences between original and new ratings. In code, this can be achieved by minimizing the rearrangement cost.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case:\n   - Read n, p (original ratings), and s (like/dislike string).\n   - Separate indices of liked and disliked songs based on s.\n   - Sort the original ratings p.\n   - Assign the highest available ratings to liked songs and lowest to disliked songs while maintaining permutation.\n   - Calculate the permutation q such that \u2211_{i=1}^n |p_i-q_i| is minimized.\n3. Output the permutation q for each test case.\n\n# [edge case]\n    Case 1: All songs are liked (e.g., s = \"111\")\n    Expected output: The permutation q should be equal to p since all permutations are valid and cost is minimized at 0.\n    Explanation: Since all songs are liked, any permutation works, but using p minimizes the cost.\n\n    Case 2: All songs are disliked (e.g., s = \"000\")\n    Expected output: The permutation q should be equal to p since all permutations are valid and cost is minimized at 0.\n    Explanation: Since all songs are disliked, any permutation works, but using p minimizes the cost.\n\n    Case 3: Alternating likes and dislikes (e.g., s = \"101010\")\n    Expected output: Assign higher ratings to indices with '1' and lower ratings to indices with '0'.\n    Explanation: Ensure liked songs have higher ratings than disliked ones while minimizing rearrangement cost.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and assigning ratings based on like/dislike status will naturally handle these scenarios efficiently.\n", "requirement analysis:\nThe requirement focuses on developing a song recommendation module that adjusts ratings based on user feedback. The solution must efficiently handle permutations and ensure liked songs have higher ratings than disliked ones, minimizing the sum of absolute differences between original and new ratings.\nrequirement pool:\n- Implement song recommendation algorithm based on user feedback.\n- Ensure permutation of song ratings is maintained.\n- Optimize algorithm for large datasets.\n- Handle edge cases where all songs are liked or disliked.\n- Provide multiple valid outputs if possible.\nWe will implement a function that processes multiple test cases efficiently. The function will sort the songs based on Monocarp's feedback and adjust the ratings to ensure liked songs have higher ratings than disliked ones. We will use Python's built-in sorting capabilities to achieve this efficiently. The solution will handle edge cases where all songs are liked or disliked by directly assigning the permutation as the result.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this context, it means that the predicted ratings and the re-evaluated ratings both need to be rearrangements of numbers from 1 to n, with each number appearing exactly once.\n\n    'liked' and 'disliked'\n    Explanation: These terms refer to Monocarp's feedback on the songs. A 'liked' song should have a higher rating than any 'disliked' song in the re-evaluated ratings.\n\n# [phrase showing quantity relationship]\n    'greater than': \n    Explanation: For every song that Monocarp liked, its new rating should be greater than the rating of any song he disliked. This can be implemented by ensuring that all liked songs are assigned higher numbers in the permutation than disliked songs.\n\n# [degree adverb] \n    'smallest': \n    Explanation: The goal is to find a permutation that minimizes the sum of absolute differences between the predicted and re-evaluated ratings. This means we need to find the permutation that is as close as possible to the original predicted ratings while satisfying the like/dislike condition.\n\n# [code logic]\n1. For each test case, separate the indices of liked and disliked songs based on the string s.\n2. Sort the indices of liked songs and disliked songs based on their predicted ratings.\n3. Assign the highest available ratings to liked songs and the lowest available ratings to disliked songs.\n4. Construct the new permutation q by placing these ratings in their respective positions.\n5. Output the permutation q for each test case.\n\n# [edge case] \n    Case 1: All songs are liked\n    Input: n = 3, p = [3, 1, 2], s = \"111\"\n    Expected Output: [3, 1, 2]\n    Explanation: Since all songs are liked, the permutation can remain as is, minimizing the sum of absolute differences.\n\n    Case 2: All songs are disliked\n    Input: n = 3, p = [3, 1, 2], s = \"000\"\n    Expected Output: [1, 2, 3]\n    Explanation: Since all songs are disliked, they can be assigned any permutation. The smallest sum of absolute differences is achieved by sorting them in ascending order.\n\n    Case 3: Alternating likes and dislikes\n    Input: n = 4, p = [4, 1, 3, 2], s = \"1010\"\n    Expected Output: [3, 1, 4, 2]\n    Explanation: Liked songs (indices 0 and 2) get higher ratings than disliked songs (indices 1 and 3).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting liked and disliked indices separately and assigning ratings accordingly will naturally handle these cases.\n", "requirement analysis:\nThe requirement focuses on developing a song recommendation module that adjusts ratings based on user feedback. The solution must efficiently handle permutations and ensure liked songs have higher ratings than disliked ones, while minimizing the sum of absolute differences between original and new ratings.\nrequirement pool:\n- Implement song recommendation algorithm based on user feedback.\n- Ensure the algorithm efficiently handles large datasets.\n- Develop an intuitive user interface for liking/disliking songs.\n- Integrate mobile responsiveness for accessibility.\n- Enhance recommendation accuracy through machine learning techniques.\nWe will implement a function that processes multiple test cases efficiently. The function will sort the songs based on user feedback and adjust their ratings to ensure liked songs have higher ratings than disliked ones. We will use Python's built-in sorting capabilities to achieve this efficiently. The solution will handle permutations and minimize the sum of absolute differences between original and new ratings.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this context, it means that the ratings are rearranged such that each integer from 1 to n appears exactly once.\n\n    'absolute value'\n    Explanation: The absolute value of a number is its non-negative value without regard to its sign. Here, it is used to calculate the difference between original and new ratings.\n\n# [phrase showing quantity relationship]\n    'greater than': This indicates that liked songs should have higher ratings than disliked songs. In code, this can be implemented by ensuring that indices corresponding to liked songs have higher values than those corresponding to disliked songs.\n\n# [degree adverb]\n    'smallest': This refers to finding the permutation with the minimum possible sum of absolute differences between original and new ratings. In code, this can be implemented by sorting and rearranging the ratings to minimize differences.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n, the permutation p, and the string s.\n3. Separate indices of liked and disliked songs based on s.\n4. Sort the liked and disliked indices separately.\n5. Assign the highest available ratings to liked songs and lowest to disliked songs while maintaining permutation constraints.\n6. Calculate the sum of absolute differences between p and q.\n7. Output the permutation q for each test case.\n\n# [edge case]\n    Case 1: All songs are liked (e.g., s = \"111\")\n    Expected output: The permutation q should be equal to p because all permutations are valid, and the minimum sum of differences is achieved when q = p.\n\n    Case 2: All songs are disliked (e.g., s = \"000\")\n    Expected output: Any permutation where all disliked songs have lower ratings than liked ones (though there are none) is valid. The minimum sum of differences is achieved when q = p.\n\n    Case 3: Alternating likes and dislikes (e.g., s = \"101010\")\n    Expected output: Ensure that liked songs have higher ratings than disliked ones while minimizing the sum of differences.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and assigning ratings based on likes and dislikes will naturally handle these scenarios efficiently.\n", "requirement analysis:\nThe requirement focuses on developing a song recommendation module that adjusts song ratings based on user feedback. The solution must efficiently handle permutations and ensure liked songs have higher ratings than disliked ones, while minimizing the sum of absolute differences between original and new ratings.\nrequirement pool:\n- Develop the song recommendation algorithm to adjust ratings based on user feedback.\n- Ensure the solution efficiently handles large datasets up to the constraint limits.\n- Create a responsive and intuitive user interface for the music streaming service.\n- Integrate local artist discovery features into the recommendation system.\n- Enhance accessibility features for users with disabilities.\nWe will implement a function that processes multiple test cases efficiently. The function will sort the songs based on Monocarp's feedback and adjust the ratings to ensure liked songs have higher ratings than disliked ones. We will use Python's built-in sorting capabilities to achieve this efficiently. The solution will handle edge cases where all songs are liked or disliked by directly assigning the permutation as the result.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this context, it means that the ratings are rearranged such that each integer from 1 to n appears exactly once.\n\n    'absolute value'\n    Explanation: The absolute value of a number is its distance from zero on the number line, without considering direction. Here, it is used to minimize the difference between predicted and re-evaluated ratings.\n\n# [phrase showing quantity relationship]\n    'greater than': This indicates that liked songs should have higher ratings than disliked songs. In code, this can be implemented by ensuring that for indices i and j, if s_i=1 and s_j=0, then q_i > q_j.\n\n# [degree adverb]\n    'smallest': This refers to finding the permutation q that minimizes the sum of absolute differences between p and q. In code, this involves sorting and rearranging elements to achieve the minimum possible sum.\n\n# [code logic]\n    1. Parse the input to get the number of test cases.\n    2. For each test case:\n       - Read n, the number of songs.\n       - Read the permutation p of predicted ratings.\n       - Read the string s representing likes and dislikes.\n       - Separate indices into liked and disliked based on s.\n       - Sort the liked indices in descending order and disliked indices in ascending order.\n       - Assign ratings such that liked songs have higher ratings than disliked ones.\n       - Ensure the permutation q minimizes the sum of absolute differences with p.\n    3. Output the permutation q for each test case.\n\n# [edge case]\n    Case 1: All songs are liked (s = \"111...111\")\n    Expected output: The permutation q can be equal to p since all songs are liked, minimizing the sum of absolute differences to zero.\n\n    Case 2: All songs are disliked (s = \"000...000\")\n    Expected output: Any permutation q will work since there are no liked songs to compare against disliked ones.\n\n    Case 3: Alternating likes and dislikes (s = \"101010...\")\n    Expected output: Ensure that liked songs have higher ratings than adjacent disliked songs, while minimizing the sum of absolute differences.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting liked and disliked songs separately and assigning ratings accordingly will handle these cases efficiently.\n", "requirement analysis:\nThe requirement is to develop a song recommendation module that re-evaluates song ratings based on user feedback. The solution must ensure that liked songs have higher ratings than disliked ones while minimizing the sum of absolute differences between predicted and re-evaluated ratings. The solution should handle up to 10,000 test cases efficiently, with a total of up to 200,000 songs across all test cases.\nrequirement pool:\n- Develop the song recommendation algorithm to re-evaluate ratings.\n- Ensure the algorithm handles edge cases where all songs are liked or disliked.\n- Optimize the algorithm for performance with large input sizes.\n- Integrate the recommendation module with the existing music streaming service.\n- Design a user-friendly interface for liking and disliking songs.\nWe will use a sorting-based approach to efficiently re-evaluate the song ratings. By separating liked and disliked songs, we can assign the highest available ratings to liked songs and the lowest to disliked ones, ensuring the permutation condition is met. This approach leverages Python's built-in sorting capabilities for optimal performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this context, it means that the ratings q must be a rearrangement of numbers from 1 to n, where each number appears exactly once.\n\n    'liked' and 'disliked'\n    Explanation: These terms refer to Monocarp's feedback on the songs. A 'liked' song (s_i=1) should have a higher rating than any 'disliked' song (s_i=0) in the new permutation q.\n\n# [phrase showing quantity relationship]\n    'greater than'\n    Explanation: For every liked song, its new rating must be greater than the rating of any disliked song. This can be implemented by sorting and assigning higher numbers to liked songs.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The goal is to find a permutation q that minimizes the sum of absolute differences between the original and new ratings. This involves minimizing \u2211_{i=1}^n |p_i-q_i|.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case:\n   - Read n, the permutation p, and the string s.\n   - Separate indices of liked and disliked songs based on s.\n   - Sort the indices of liked songs in descending order of their predicted ratings.\n   - Sort the indices of disliked songs in ascending order of their predicted ratings.\n   - Assign the highest available ratings to liked songs and the lowest to disliked ones.\n   - Construct the permutation q and print it.\n\n# [edge case]\n    Case 1: All songs are liked (e.g., s = \"111\")\n    Expected output: The permutation q should be the same as p because it already minimizes the sum of absolute differences.\n    Explanation: Since all songs are liked, any permutation is valid, but using p minimizes \u2211_{i=1}^n |p_i-q_i| to 0.\n\n    Case 2: All songs are disliked (e.g., s = \"000\")\n    Expected output: The permutation q can be any valid permutation since there are no liked songs to prioritize.\n    Explanation: With no liked songs, any permutation satisfies the condition, but using p minimizes \u2211_{i=1}^n |p_i-q_i| to 0.\n\n    Case 3: Alternating likes and dislikes (e.g., s = \"101010\")\n    Expected output: Liked songs should have higher ratings than disliked ones, maintaining a valid permutation.\n    Explanation: Ensure that every liked song has a higher rating than any disliked song by sorting and assigning appropriately.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and assigning ratings based on likes and dislikes inherently handles these scenarios.\n"], "scores": [], "pass_results": [true, false, false, true, false, false, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 733, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0.", "mutate_method": "add_1_sentence_at_end", "parent_index": 83}
