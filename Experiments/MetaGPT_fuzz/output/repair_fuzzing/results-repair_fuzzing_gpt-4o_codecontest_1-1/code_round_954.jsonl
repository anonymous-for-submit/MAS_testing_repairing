{"name": "1591_C. Minimize Distance", "description": "A total of n depots are located on a number line. Depot i lies at the point x_i for 1 \u2264 i \u2264 n.\n\nYou are a salesman with n bags of goods, attempting to deliver one bag to each of the n depots. You and the n bags are initially at the origin 0. You can carry up to k bags at a time. You must collect the required number of goods from the origin, deliver them to the respective depots, and then return to the origin to collect your next batch of goods.\n\nCalculate the minimum distance you need to cover to deliver all the bags of goods to the depots. You do not have to return to the origin after you have delivered all the bags.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line of each test case contains n integers x_1, x_2, \u2026, x_n (-10^9 \u2264 x_i \u2264 10^9). It is possible that some depots share the same position.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots. \n\nExample\n\nInput\n\n\n4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n\n25\n41\n7\n3000000000\n\nNote\n\nIn the first test case, you can carry only one bag at a time. Thus, the following is a solution sequence that gives a minimum travel distance: 0 \u2192 2 \u2192 0 \u2192 4 \u2192 0 \u2192 3 \u2192 0 \u2192 1 \u2192 0 \u2192 5, where each 0 means you go the origin and grab one bag, and each positive integer means you deliver the bag to a depot at this coordinate, giving a total distance of 25 units. It must be noted that there are other sequences that give the same distance.\n\nIn the second test case, you can follow the following sequence, among multiple such sequences, to travel minimum distance: 0 \u2192 6 \u2192 8 \u2192 7 \u2192 0 \u2192 5 \u2192 4 \u2192 3 \u2192 0 \u2192 (-5) \u2192 (-10) \u2192 (-15), with distance 41. It can be shown that 41 is the optimal distance for this test case.", "tags": ["greedy", "math"], "difficulty": 9, "id": 1591, "sample_io": [{"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["25\n41\n7\n3000000000\n"]}], "test_list": [{"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n41\n7\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["25\n41\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n41\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 1\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n41\n23\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 4 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n41\n10\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -18 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["25\n44\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 8 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 4 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["30\n41\n10\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n41\n25\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 7 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n43\n25\n3000010000\n"]}, {"input": "4\n5 1\n1 3 3 4 5\n9 3\n-9 -18 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["27\n44\n9\n3000000000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 7 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n43\n25\n3000010000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -12 6 7 8 3 7 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n40\n25\n3000010000\n"]}, {"input": "4\n5 1\n1 3 3 4 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["27\n46\n9\n3000000000\n"]}, {"input": "4\n5 1\n0 1 3 4 5\n9 3\n-5 -10 -12 6 7 8 3 7 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["21\n40\n25\n3000010000\n"]}, {"input": "4\n5 1\n1 1 3 4 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["23\n46\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 1 3 4 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 6 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["23\n46\n10\n3000000000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["16\n46\n10\n3000000000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -18 -6 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n46\n10\n3000000010\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -22 -6 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n50\n10\n3000000010\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -12 -6 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n40\n10\n3000000010\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -12 -6 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 1\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n40\n10\n7000000010\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 0\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["25\n41\n7\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000010100\n", "output": ["25\n41\n7\n3000010100\n"]}, {"input": "4\n5 2\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["13\n41\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 4 4\n5 3\n2 2 5 3 3\n4 2\n0000000000 1000000000 1000000000 1000000000\n", "output": ["25\n39\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 7 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000001 1000000000 1000010000\n", "output": ["29\n41\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 9\n9 3\n-5 -18 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["29\n44\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 2 5\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n41\n9\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 1\n2 2 3 3 3\n4 5\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n41\n23\n1000010000\n"]}, {"input": "4\n5 1\n1 2 3 8 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 4 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000110000\n", "output": ["30\n41\n10\n3000110000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n41\n25\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 7 4\n5 1\n2 3 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n43\n27\n3000010000\n"]}, {"input": "4\n5 1\n1 3 3 4 5\n9 3\n-9 -18 -15 6 5 8 3 7 4\n5 3\n1 2 5 0 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["27\n44\n7\n3000000000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -12 6 7 8 3 7 4\n5 1\n2 2 2 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n40\n23\n3000010000\n"]}, {"input": "4\n5 1\n1 3 3 4 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 5 3 2\n4 2\n1001000000 1000000000 1000000000 1000000000\n", "output": ["27\n46\n9\n3001000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["25\n46\n10\n3000000000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -18 -15 5 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["16\n44\n10\n3000000000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -18 -6 6 6 8 3 7 4\n5 3\n1 1 6 3 4\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["16\n46\n8\n3000000000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -22 -6 6 6 8 3 7 4\n5 3\n1 3 6 3 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n50\n12\n3000000010\n"]}, {"input": "4\n5 2\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 0\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["13\n41\n7\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -25 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000010100\n", "output": ["25\n51\n7\n3000010100\n"]}, {"input": "4\n5 1\n1 2 3 7 5\n9 3\n-5 -10 -15 6 2 8 3 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000001 1000000000 1000010000\n", "output": ["29\n39\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 9\n9 3\n-5 -18 -15 6 5 8 3 7 4\n5 3\n4 2 5 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["29\n44\n11\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 5 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 1\n2 2 3 3 3\n4 5\n1000000000 1000000000 1000000000 1000010000\n", "output": ["27\n41\n23\n1000010000\n"]}, {"input": "4\n5 1\n1 2 3 8 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 7 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000110000\n", "output": ["30\n41\n13\n3000110000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-9 -4 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 3\n4 2\n1000000000 1000100000 1000000000 1000000000\n", "output": ["25\n41\n9\n3000100000\n"]}, {"input": "4\n5 1\n1 2 3 4 2\n9 3\n-14 -18 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["20\n44\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 7 7\n5 1\n2 3 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n45\n27\n3000010000\n"]}, {"input": "4\n5 1\n0 3 3 4 5\n9 3\n-9 -18 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n44\n9\n3000010000\n"]}, {"input": "4\n5 1\n1 3 3 4 5\n9 3\n-9 -18 -15 6 5 8 3 7 8\n5 3\n1 2 5 0 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["27\n46\n7\n3000000000\n"]}, {"input": "4\n5 1\n1 3 3 6 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 5 3 2\n4 2\n1001000000 1000000000 1000000000 1000000000\n", "output": ["30\n46\n9\n3001000000\n"]}, {"input": "4\n5 1\n1 0 3 4 5\n9 3\n-9 -18 -1 6 6 8 3 7 4\n5 3\n1 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["21\n46\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000001 1000000000 1000000000 1000000000\n", "output": ["25\n46\n10\n3000000001\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -18 -6 6 5 8 3 7 4\n5 3\n1 1 6 3 4\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["16\n44\n8\n3000000000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -22 -6 6 6 8 3 7 4\n5 3\n1 3 6 0 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n50\n8\n3000000010\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -12 -6 6 6 8 3 9 3\n5 3\n1 2 6 3 4\n4 1\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n42\n10\n7000000010\n"]}, {"input": "4\n5 2\n1 2 3 4 5\n9 3\n-5 -10 -15 6 0 8 3 7 0\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["13\n37\n7\n3000000000\n"]}, {"input": "4\n5 2\n1 2 3 4 5\n9 3\n-5 -10 -15 6 0 8 3 7 4\n5 3\n2 2 3 4 3\n4 3\n1000001000 1000000000 1000000000 1000010000\n", "output": ["13\n39\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 7 5\n9 3\n-5 -10 -15 6 2 8 3 0 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000001 1000000000 1000010000\n", "output": ["29\n37\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 8 5\n9 3\n-5 -10 -15 10 5 8 3 7 4\n5 3\n2 7 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000110000\n", "output": ["30\n45\n13\n3000110000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -13 -15 6 5 8 3 12 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n49\n25\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n57\n27\n3000010000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 7 7\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000001000 1000000000 1000010000\n", "output": ["23\n45\n25\n3000010000\n"]}, {"input": "4\n5 1\n1 3 3 4 5\n9 3\n-9 -18 -15 6 5 8 3 7 8\n5 3\n1 2 5 0 2\n4 2\n1000000000 1000000000 1010000000 1000000000\n", "output": ["27\n46\n7\n3010000000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -12 6 7 8 3 7 0\n5 1\n2 4 2 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n40\n27\n3000010000\n"]}, {"input": "4\n5 1\n1 3 3 6 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 1 5 3 2\n4 2\n1001000000 1000000000 1000000000 1000000000\n", "output": ["30\n46\n7\n3001000000\n"]}, {"input": "4\n5 1\n2 2 3 4 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000001 1000000000 1000000000 1000000000\n", "output": ["27\n46\n10\n3000000001\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -18 -6 6 5 8 3 7 4\n5 3\n1 1 6 3 4\n4 2\n1000000000 1000000000 1000000000 1010000000\n", "output": ["16\n44\n8\n3010000000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -22 -6 6 6 0 3 7 4\n5 3\n1 3 6 0 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n44\n8\n3000000010\n"]}, {"input": "4\n5 2\n1 2 3 4 5\n9 3\n-5 -10 -15 6 -1 8 3 7 0\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["13\n39\n7\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -25 6 5 9 1 7 4\n5 3\n2 2 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000010100\n", "output": ["25\n53\n7\n3000010100\n"]}, {"input": "4\n5 1\n1 2 3 7 0\n9 3\n-5 -10 -15 6 2 8 3 0 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000001 1000000000 1000010000\n", "output": ["19\n37\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 9\n9 3\n-5 -18 -8 6 5 8 3 7 4\n5 3\n4 2 5 3 3\n4 2\n1000000000 1000000000 1000000010 1000000000\n", "output": ["29\n44\n11\n3000000010\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 5\n5 3\n2 2 3 2 5\n4 3\n1000000000 1000000000 1000010000 1001010000\n", "output": ["25\n41\n9\n3001010000\n"]}, {"input": "4\n5 1\n1 2 3 8 5\n9 4\n-5 -10 -15 10 5 8 3 7 4\n5 3\n2 7 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000110000\n", "output": ["30\n43\n13\n3000110000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-9 -4 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 2\n4 1\n1000000000 1000100000 1000000000 1000000000\n", "output": ["25\n41\n9\n7000100000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -13 -15 6 5 8 3 12 4\n5 1\n2 0 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n49\n21\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 5\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n57\n27\n1000010000\n"]}, {"input": "4\n5 1\n1 3 3 4 5\n9 3\n-9 -18 -15 6 5 8 3 7 8\n5 3\n1 2 5 0 2\n4 2\n1000000000 1000000000 1010010000 1000000000\n", "output": ["27\n46\n7\n3010010000\n"]}, {"input": "4\n5 1\n1 3 3 11 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 1 5 3 2\n4 2\n1001000000 1000000000 1000000000 1000000000\n", "output": ["35\n46\n7\n3001000000\n"]}, {"input": "4\n5 1\n2 2 3 4 5\n9 3\n-9 -25 -15 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000001 1000000000 1000000000 1000000000\n", "output": ["27\n53\n10\n3000000001\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -18 -6 6 5 8 3 7 4\n5 3\n1 1 6 3 4\n4 2\n1000000000 1000000000 1000000000 1010100000\n", "output": ["16\n44\n8\n3010100000\n"]}, {"input": "4\n5 1\n1 1 3 1 1\n9 3\n-9 -22 -6 6 6 0 3 7 4\n5 3\n1 3 6 0 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["11\n44\n8\n3000000010\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -25 6 5 9 1 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000000 1000000000 1000010100\n", "output": ["25\n53\n8\n3000010100\n"]}, {"input": "4\n5 1\n1 2 3 7 0\n9 3\n-5 -10 -15 6 2 8 3 0 4\n5 3\n2 4 3 4 3\n4 3\n1000000000 1000000001 1000000000 1000010000\n", "output": ["19\n37\n10\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 9\n9 3\n-5 -18 -8 6 5 8 3 7 4\n5 3\n4 2 5 3 3\n4 2\n1000000000 1010000000 1000000010 1000000000\n", "output": ["29\n44\n11\n3010000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-9 -4 -15 2 5 8 3 7 4\n5 3\n2 2 5 3 2\n4 1\n1000000000 1000100000 1000000000 1000000000\n", "output": ["25\n39\n9\n7000100000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -13 -15 6 5 1 3 12 4\n5 1\n2 0 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n47\n21\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 2\n9 3\n-14 -18 -13 6 2 8 3 7 4\n5 3\n4 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["20\n42\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 3 3 11 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 1 8 3 2\n4 2\n1001000000 1000000000 1000000000 1000000000\n", "output": ["35\n46\n10\n3001000000\n"]}, {"input": "4\n5 1\n2 2 3 4 5\n9 3\n-9 -25 -15 6 6 8 3 7 4\n5 3\n1 0 6 3 4\n4 2\n1000000001 1000000000 1000000000 1000000000\n", "output": ["27\n53\n8\n3000000001\n"]}, {"input": "4\n5 1\n1 1 3 1 1\n9 3\n-9 -22 -6 6 6 0 3 7 4\n5 3\n2 3 6 0 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["11\n44\n10\n3000000010\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -12 -6 6 6 7 3 9 3\n5 3\n1 2 7 5 4\n4 1\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n42\n11\n7000000010\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -20 6 5 9 1 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000000 1000000000 1000010100\n", "output": ["25\n48\n8\n3000010100\n"]}, {"input": "4\n5 1\n1 2 3 4 2\n9 3\n-14 -18 -13 6 2 8 6 7 4\n5 3\n4 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["20\n46\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 5\n1000000000 1000000000 1000000010 1010010000\n", "output": ["25\n57\n27\n1010010000\n"]}, {"input": "4\n5 1\n2 2 3 4 7\n9 3\n-9 -25 -15 6 6 8 3 7 4\n5 3\n1 0 6 3 4\n4 2\n1000000001 1000000000 1000000000 1000000000\n", "output": ["29\n53\n8\n3000000001\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -18 -6 6 5 8 3 0 4\n5 3\n1 1 6 3 4\n4 2\n1000000000 1001000000 1000000000 1010100000\n", "output": ["16\n42\n8\n3010100000\n"]}, {"input": "4\n5 1\n1 1 3 1 1\n9 3\n-9 -22 -6 6 6 0 3 7 4\n5 4\n2 3 6 0 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["11\n44\n6\n3000000010\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -12 -6 6 6 7 3 9 3\n5 2\n1 2 7 5 4\n4 1\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n42\n17\n7000000010\n"]}, {"input": "4\n5 1\n1 2 3 4 2\n9 6\n-14 -18 -13 6 2 8 6 7 4\n5 3\n4 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["20\n34\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 1\n-5 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 5\n1000000000 1000000000 1000000010 1010010000\n", "output": ["25\n135\n27\n1010010000\n"]}, {"input": "4\n5 1\n2 2 3 5 7\n9 3\n-9 -25 -15 6 6 8 3 7 4\n5 3\n1 0 6 3 4\n4 2\n1000000001 1000000000 1000000000 1000000000\n", "output": ["31\n53\n8\n3000000001\n"]}, {"input": "4\n5 1\n1 1 3 8 1\n9 3\n-9 -18 -6 6 5 8 3 0 4\n5 3\n1 1 6 3 4\n4 2\n1000000000 1001000000 1000000000 1010100000\n", "output": ["20\n42\n8\n3010100000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -10 -6 6 6 7 3 9 3\n5 2\n1 2 7 5 4\n4 1\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n40\n17\n7000000010\n"]}, {"input": "4\n5 1\n1 2 3 4 10\n9 3\n-5 -10 -20 6 5 9 1 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000001 1000000000 1000000000 1000010100\n", "output": ["30\n48\n8\n3000010100\n"]}, {"input": "4\n5 1\n1 2 3 4 2\n9 6\n-14 -18 -13 6 2 8 6 11 4\n5 3\n4 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["20\n40\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 10\n9 5\n-5 -10 -20 6 5 9 1 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000001 1000000000 1000000000 1000010100\n", "output": ["30\n40\n8\n3000010100\n"]}, {"input": "4\n5 1\n1 2 3 5 5\n9 4\n-5 -6 -15 10 5 8 4 0 4\n5 3\n2 7 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000110000\n", "output": ["27\n43\n13\n3000110000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 1\n-5 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 5\n1000000000 1000000001 1000000010 1010010000\n", "output": ["23\n135\n27\n1010010000\n"]}, {"input": "4\n5 1\n1 2 3 5 5\n9 4\n-5 -6 -15 10 5 8 4 0 4\n5 3\n2 7 3 3 3\n4 5\n1000000000 1000000000 1000000000 1000110000\n", "output": ["27\n43\n13\n1000110000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 1\n-5 -10 -15 6 7 8 3 14 7\n5 1\n4 3 3 5 3\n4 5\n1000000000 1000000001 1000000010 1010010000\n", "output": ["23\n135\n31\n1010010000\n"]}, {"input": "4\n5 1\n0 0 3 4 5\n9 1\n-5 -10 -15 6 7 8 3 14 7\n5 1\n4 3 3 5 3\n4 5\n1000000000 1000000001 1000000010 1010010000\n", "output": ["19\n135\n31\n1010010000\n"]}, {"input": "4\n5 1\n0 0 3 4 5\n9 1\n-5 -10 -15 6 7 8 3 4 7\n5 1\n4 3 3 5 3\n4 5\n1000000000 1000000001 1000000010 1010010000\n", "output": ["19\n115\n31\n1010010000\n"]}, {"input": "4\n5 1\n1 2 3 3 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n41\n7\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 7\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 3\n4 2\n0000000000 1000000000 1000000000 1000000000\n", "output": ["27\n41\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 1\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 4 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["18\n41\n10\n3000010000\n"]}, {"input": "4\n5 1\n1 2 4 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 2 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["27\n41\n7\n3000010000\n"]}, {"input": "4\n5 1\n1 0 3 4 5\n9 3\n-9 -18 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["21\n44\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 1\n2 4 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n41\n29\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 7 4\n5 1\n2 2 3 5 3\n4 1\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n43\n25\n7000010000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 7 4\n5 1\n1 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n43\n23\n3000010000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -12 6 7 8 3 12 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n48\n25\n3000010000\n"]}, {"input": "4\n5 1\n0 1 3 4 3\n9 3\n-5 -10 -12 6 7 8 3 7 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["18\n40\n25\n3000010000\n"]}, {"input": "4\n5 1\n1 1 3 4 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 0 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["23\n46\n7\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-9 -18 -15 6 6 8 3 9 4\n5 3\n1 2 6 3 4\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["25\n48\n10\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 1\n9 3\n-9 -22 -6 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["18\n50\n10\n3000000010\n"]}, {"input": "4\n5 1\n1 1 3 4 0\n9 3\n-9 -12 -6 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["14\n40\n10\n3000000010\n"]}, {"input": "4\n5 1\n1 2 6 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000010100\n", "output": ["30\n41\n7\n3000010100\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 4 4\n5 3\n2 2 5 6 3\n4 2\n0000000000 1000000000 1000000000 1000000000\n", "output": ["25\n39\n10\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 7 5\n9 3\n-5 -10 -23 6 5 8 3 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000001 1000000000 1000010000\n", "output": ["29\n49\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 9\n9 4\n-5 -18 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["29\n42\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 16 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 4 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000110000\n", "output": ["38\n41\n10\n3000110000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-14 -18 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 2\n4 2\n1000000000 1000000000 1000000001 1000000000\n", "output": ["25\n44\n9\n3000000001\n"]}, {"input": "4\n5 1\n0 3 3 4 5\n9 3\n-9 -18 -15 6 5 3 3 7 4\n5 3\n2 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["25\n40\n9\n3000000000\n"]}, {"input": "4\n5 1\n-1 2 3 4 5\n9 3\n-5 -10 -15 9 7 8 3 7 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n47\n25\n3000010000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -12 6 7 8 3 7 4\n5 1\n2 2 2 10 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n40\n28\n3000010000\n"]}, {"input": "4\n5 1\n1 3 3 4 0\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 5 3 2\n4 2\n1001000000 1000000000 1000000000 1000000000\n", "output": ["18\n46\n9\n3001000000\n"]}, {"input": "4\n5 1\n1 1 3 4 5\n9 3\n-9 -18 -1 6 6 8 3 7 4\n5 5\n1 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["23\n46\n5\n3000000000\n"]}, {"input": "4\n5 1\n1 2 1 4 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["21\n46\n10\n3000000000\n"]}, {"input": "4\n5 1\n1 0 3 4 1\n9 3\n-9 -18 -15 5 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["14\n44\n10\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -25 3 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000010100\n", "output": ["25\n49\n7\n3000010100\n"]}, {"input": "4\n5 2\n2 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 4 3\n4 3\n1000001000 1000000000 1000000000 1000010000\n", "output": ["15\n41\n8\n3000010000\n"]}, {"input": "4\n5 1\n2 2 3 7 5\n9 3\n-5 -10 -15 6 2 8 3 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000001 1000000000 1000010000\n", "output": ["31\n39\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 0 3 4 9\n9 3\n-5 -18 -15 6 5 8 3 7 4\n5 3\n4 2 5 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["25\n44\n11\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 8 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 7 3 3 3\n4 3\n1000000000 1000000000 0000000000 1000110000\n", "output": ["30\n41\n13\n1000110000\n"]}, {"input": "4\n5 1\n1 2 3 2 2\n9 3\n-14 -18 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["17\n44\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 7 7\n5 1\n2 3 3 0 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n45\n19\n3000010000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 7 4\n5 1\n4 2 3 5 3\n4 3\n1000000000 1000001000 1000000000 1000010000\n", "output": ["23\n43\n29\n3000010000\n"]}, {"input": "4\n5 1\n1 3 3 4 5\n9 3\n-9 -18 -15 6 5 8 3 7 8\n5 6\n1 2 5 0 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["27\n46\n5\n3000000000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -12 6 14 8 3 7 0\n5 1\n2 2 2 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n50\n23\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-9 -18 -15 6 0 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000001 1000000000 1000000000 1000000000\n", "output": ["25\n42\n10\n3000000001\n"]}, {"input": "4\n5 2\n1 2 3 4 5\n9 3\n-5 -10 -15 6 0 8 3 7 4\n5 3\n2 2 3 4 3\n4 3\n1000001000 1000000000 1001000000 1000010000\n", "output": ["13\n39\n8\n3001000000\n"]}, {"input": "4\n5 1\n1 2 3 7 5\n9 3\n-5 -10 -9 6 2 8 3 0 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000001 1000000000 1000010000\n", "output": ["29\n32\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 9\n9 3\n-5 -18 -8 6 5 8 3 7 4\n5 5\n4 2 5 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["29\n44\n5\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 2\n-5 -10 -15 6 5 8 3 7 5\n5 3\n2 2 3 2 5\n4 3\n1000000000 1000000000 1000010000 1000010000\n", "output": ["25\n63\n9\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 8 5\n9 3\n-5 -10 -15 10 5 8 3 7 4\n5 3\n2 7 3 3 3\n4 3\n1000000000 1001000000 1000000000 1000110000\n", "output": ["30\n45\n13\n3001000000\n"]}, {"input": "4\n5 1\n1 2 6 4 5\n9 3\n-9 -4 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 2\n4 2\n1000000000 1000100000 1000000000 1000000000\n", "output": ["30\n41\n9\n3000100000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -13 -15 6 4 8 3 12 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n47\n25\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 3\n1000000000 1000000000 1000000000 1010010000\n", "output": ["25\n57\n27\n3010010000\n"]}, {"input": "4\n5 1\n1 3 3 8 5\n9 3\n-9 -18 -15 6 5 8 3 7 8\n5 3\n1 2 5 0 2\n4 2\n1000000000 1000000000 1010000000 1000000000\n", "output": ["32\n46\n7\n3010000000\n"]}, {"input": "4\n5 1\n0 2 3 6 5\n9 3\n-5 -10 -12 6 7 8 3 7 0\n5 1\n2 4 2 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["26\n40\n27\n3000010000\n"]}, {"input": "4\n5 2\n1 2 4 4 5\n9 3\n-5 -10 -15 6 -1 8 3 7 0\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["15\n39\n7\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 7 0\n9 3\n-5 -10 -15 6 2 8 3 0 4\n5 3\n2 2 3 8 3\n4 3\n1000000000 1000000001 1000000000 1000010000\n", "output": ["19\n37\n12\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 9\n9 3\n-5 -18 -8 6 5 8 3 7 4\n5 2\n4 2 5 3 3\n4 2\n1000000000 1000000000 1000000010 1000000000\n", "output": ["29\n44\n15\n3000000010\n"]}, {"input": "4\n5 1\n1 2 3 4 6\n9 3\n-5 -10 -15 6 5 8 3 7 5\n5 3\n2 2 3 2 5\n4 3\n1000000000 1000000000 1000010000 1001010000\n", "output": ["26\n41\n9\n3001010000\n"]}, {"input": "4\n5 1\n1 2 3 8 5\n9 4\n-5 -10 -15 10 5 8 3 7 4\n5 3\n2 7 3 3 3\n4 3\n1000000000 1000000000 1000000000 1010110000\n", "output": ["30\n43\n13\n3010110000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-9 -4 -15 6 5 8 3 7 8\n5 3\n2 2 5 3 2\n4 1\n1000000000 1000100000 1000000000 1000000000\n", "output": ["25\n43\n9\n7000100000\n"]}, {"input": "4\n5 1\n1 2 3 7 2\n9 3\n-14 -18 -13 6 5 8 3 7 4\n5 3\n4 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["23\n44\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 5\n1000100000 1000000000 1000000000 1000010000\n", "output": ["25\n57\n27\n1000100000\n"]}, {"input": "4\n5 1\n1 3 3 4 5\n9 3\n-9 -18 -15 1 5 8 3 7 8\n5 3\n1 2 5 0 2\n4 2\n1000000000 1000000000 1010010000 1000000000\n", "output": ["27\n44\n7\n3010010000\n"]}, {"input": "4\n5 1\n1 3 3 11 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 1 5 3 2\n4 4\n1001000000 1000000000 1000000000 1000000000\n", "output": ["35\n46\n7\n1001000000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -6 -6 6 5 8 3 7 4\n5 3\n1 1 6 3 4\n4 2\n1000000000 1000000000 1000000000 1010100000\n", "output": ["16\n35\n8\n3010100000\n"]}, {"input": "4\n5 2\n1 1 3 1 1\n9 3\n-9 -22 -6 6 6 0 3 7 4\n5 3\n1 3 6 0 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["7\n44\n8\n3000000010\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 2\n-5 -10 -25 6 5 9 1 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000000 1000000000 1000010100\n", "output": ["25\n73\n8\n3000010100\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -18 -15 6 5 1 3 12 4\n5 1\n2 0 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n50\n21\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 6\n4 5\n1000000000 1000000000 1000000010 1000010000\n", "output": ["25\n57\n32\n1000010000\n"]}, {"input": "4\n5 1\n1 3 3 11 5\n9 3\n-9 -18 -26 6 6 8 3 7 4\n5 3\n1 1 8 3 2\n4 2\n1001000000 1000000000 1000000000 1000000000\n", "output": ["35\n54\n10\n3001000000\n"]}, {"input": "4\n5 1\n2 1 3 4 1\n9 3\n-9 -18 -6 6 5 8 3 7 4\n5 3\n1 1 6 3 4\n4 2\n1000000000 1001000000 1000000000 1010100000\n", "output": ["18\n44\n8\n3010100000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -14 -6 6 6 7 3 9 3\n5 3\n1 2 7 5 4\n4 1\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n44\n11\n7000000010\n"]}, {"input": "4\n5 2\n1 2 3 4 5\n9 3\n-5 -10 -20 6 5 9 1 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000000 1000000000 1000010100\n", "output": ["13\n48\n8\n3000010100\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-9 -4 -15 2 1 8 3 7 4\n5 4\n2 2 5 3 2\n4 1\n1000000000 1000100000 1000000000 1000000000\n", "output": ["25\n37\n9\n7000100000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -13 -15 6 5 1 3 12 4\n5 1\n1 0 3 5 3\n4 2\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n47\n19\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 6\n4 5\n1000000000 1000000000 1000000010 1010010000\n", "output": ["25\n57\n32\n1010010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -20 6 5 9 1 7 4\n5 3\n2 2 3 4 3\n4 3\n1000100001 1000000000 1000000000 1000010100\n", "output": ["25\n48\n8\n3000100001\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 1\n-7 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 5\n1000000000 1000000000 1000000010 1010010000\n", "output": ["25\n139\n27\n1010010000\n"]}, {"input": "4\n5 1\n1 0 3 4 1\n9 3\n-9 -10 -6 6 6 7 3 9 3\n5 2\n1 2 7 5 4\n4 1\n1000000010 1000000000 1000000000 1000000000\n", "output": ["14\n40\n17\n7000000010\n"]}, {"input": "4\n5 1\n0 2 3 4 10\n9 3\n-5 -10 -20 6 5 9 1 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000001 1000000000 1000000000 1000010100\n", "output": ["28\n48\n8\n3000010100\n"]}, {"input": "4\n5 1\n1 2 3 8 5\n9 4\n-5 -6 -15 10 5 8 4 0 0\n5 3\n2 7 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000110000\n", "output": ["30\n35\n13\n3000110000\n"]}, {"input": "4\n5 1\n1 2 3 4 0\n9 6\n-14 -18 -13 6 2 8 6 11 4\n5 3\n4 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["16\n40\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 1\n-5 -10 -20 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 5\n1000000000 1000000001 1000000010 1010010000\n", "output": ["25\n140\n27\n1010010000\n"]}, {"input": "4\n5 1\n1 2 3 4 10\n9 5\n-5 -10 -20 6 5 9 1 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000001 1000000000 1000000000 1000000100\n", "output": ["30\n40\n8\n3000000100\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 1\n-2 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 5\n1000000000 1000000001 1000000010 1010010000\n", "output": ["23\n129\n27\n1010010000\n"]}, {"input": "4\n5 1\n1 2 3 5 5\n9 4\n-5 -6 -15 10 5 8 4 0 4\n5 3\n2 7 3 3 3\n4 5\n1000000000 1000000000 1000000000 1000111000\n", "output": ["27\n43\n13\n1000111000\n"]}, {"input": "4\n5 2\n0 2 3 4 5\n9 1\n-5 -10 -15 6 7 8 3 14 7\n5 1\n4 3 3 5 3\n4 5\n1000000000 1000000001 1000000010 1010010000\n", "output": ["11\n135\n31\n1010010000\n"]}, {"input": "4\n5 1\n1 2 3 5 5\n9 4\n-5 -4 -15 10 3 8 4 0 4\n5 3\n2 7 3 3 3\n4 5\n1000000000 1000000000 1000000000 1000110000\n", "output": ["27\n41\n13\n1000110000\n"]}, {"input": "4\n5 1\n0 0 3 4 5\n9 1\n-5 -10 -15 6 7 8 3 4 7\n5 1\n4 3 3 5 1\n4 5\n1000000000 1000000001 1000000010 1010010000\n", "output": ["19\n115\n27\n1010010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 5 4\n5 3\n2 2 5 3 3\n4 2\n1000001000 1000000000 1000000000 1000000000\n", "output": ["25\n41\n9\n3000001000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 3 8 0 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n39\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 2\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 4 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["20\n41\n10\n3000010000\n"]}], "task_id": "codecontest/47", "prompt": "A total of n depots are situated on a number line. Depot i lies at the point x_i for 1 \u2264 i \u2264 n.\n\nYou are a salesman with n bags of goods, attempting to deliver one bag to each of the n depots. You and the n bags are initially at the origin 0. You can carry up to k bags at a time. Up to k bags can be carried at one time. You must collect the required number of goods from the origin, deliver them to the respective depots, and then return to the origin to collect your next batch of goods.\n\nCalculate the minimum distance you need to cover to deliver all the bags of goods to the depots. You do not have to return to the origin after you have delivered all the bags.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line of each test case contains n integers x_1, x_2, \u2026, x_n (-10^9 \u2264 x_i \u2264 10^9). It is possible that some depots share the same position.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots. \n\nExample\n\nInput\n\n\n4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n\n25\n41\n7\n3000000000\n\nNote\n\nIn the first test case, you can carry only one bag at a time. Thus, the following is a solution sequence that gives a minimum travel distance: 0 \u2192 2 \u2192 0 \u2192 4 \u2192 0 \u2192 3 \u2192 0 \u2192 1 \u2192 0 \u2192 5, where each 0 means you go the origin and grab one bag, and each positive integer means you deliver the bag to a depot at this coordinate, giving a total distance of 25 units. It must be noted that there are other sequences that give the same distance.\n\nIn the second test case, you can follow the following sequence, among multiple such sequences, to travel minimum distance: 0 \u2192 6 \u2192 8 \u2192 7 \u2192 0 \u2192 5 \u2192 4 \u2192 3 \u2192 0 \u2192 (-5) \u2192 (-10) \u2192 (-15), with distance 41. It can be shown that 41 is the optimal distance for this test case.", "repair_prompt": ["A total of n depots are situated on a number line. Depot i lies at the point x_i for 1 \u2264 i \u2264 n.\n\nYou are a salesman with n bags of goods, attempting to deliver one bag to each of the n depots. You and the n bags are initially at the origin 0. You can carry up to k bags at a time. Up to k bags can be carried at one time. You must collect the required number of goods from the origin, deliver them to the respective depots, and then return to the origin to collect your next batch of goods.\n\nCalculate the minimum distance you need to cover to deliver all the bags of goods to the depots. You do not have to return to the origin after you have delivered all the bags.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line of each test case contains n integers x_1, x_2, \u2026, x_n (-10^9 \u2264 x_i \u2264 10^9). It is possible that some depots share the same position.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots. \n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n\n25\n41\n7\n3000000000\n\nNote\n\nIn the first test case, you can carry only one bag at a time. Thus, the following is a solution sequence that gives a minimum travel distance: 0 \u2192 2 \u2192 0 \u2192 4 \u2192 0 \u2192 3 \u2192 0 \u2192 1 \u2192 0 \u2192 5, where each 0 means you go the origin and grab one bag, and each positive integer means you deliver the bag to a depot at this coordinate, giving a total distance of 25 units. It must be noted that there are other sequences that give the same distance.\n\nIn the second test case, you can follow the following sequence, among multiple such sequences, to travel minimum distance: 0 \u2192 6 \u2192 8 \u2192 7 \u2192 0 \u2192 5 \u2192 4 \u2192 3 \u2192 0 \u2192 (-5) \u2192 (-10) \u2192 (-15), with distance 41. It can be shown that 41 is the optimal distance for this test case.", "A total of n depots are situated on a number line. Depot i lies at the point x_i for 1 \u2264 i \u2264 n.\n\nYou are a salesman with n bags of goods, attempting to deliver one bag to each of the n depots. You and the n bags are initially at the origin 0. You can carry up to k bags at a time. You may carry no more than k bags simultaneously during each trip. You must collect the required number of goods from the origin, deliver them to the respective depots, and then return to the origin to collect your next batch of goods.\n\nCalculate the minimum distance you need to cover to deliver all the bags of goods to the depots. You do not have to return to the origin after you have delivered all the bags.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line of each test case contains n integers x_1, x_2, \u2026, x_n (-10^9 \u2264 x_i \u2264 10^9). It is possible that some depots share the same position.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots. \n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n\n25\n41\n7\n3000000000\n\nNote\n\nIn the first test case, you can carry only one bag at a time. Thus, the following is a solution sequence that gives a minimum travel distance: 0 \u2192 2 \u2192 0 \u2192 4 \u2192 0 \u2192 3 \u2192 0 \u2192 1 \u2192 0 \u2192 5, where each 0 means you go the origin and grab one bag, and each positive integer means you deliver the bag to a depot at this coordinate, giving a total distance of 25 units. It must be noted that there are other sequences that give the same distance.\n\nIn the second test case, you can follow the following sequence, among multiple such sequences, to travel minimum distance: 0 \u2192 6 \u2192 8 \u2192 7 \u2192 0 \u2192 5 \u2192 4 \u2192 3 \u2192 0 \u2192 (-5) \u2192 (-10) \u2192 (-15), with distance 41. It can be shown that 41 is the optimal distance for this test case.", "A total of n depots are situated on a number line. Depot i lies at the point x_i for 1 \u2264 i \u2264 n.\n\nYou are a salesman with n bags of goods, attempting to deliver one bag to each of the n depots, starting initially with you and the bags at the origin 0. You can carry up to k bags at a time, collect the required number of goods from the origin, deliver them to the respective depots, and return to the origin to collect your next batch.\n\nCalculate the minimum distance you need to cover to deliver all the bags of goods to the depots. You do not have to return to the origin after you have delivered all the bags.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line of each test case contains n integers x_1, x_2, \u2026, x_n (-10^9 \u2264 x_i \u2264 10^9). It is possible that some depots share the same position.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots. \n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n\n25\n41\n7\n3000000000\n\nNote\n\nIn the first test case, you can carry only one bag at a time. Thus, the following is a solution sequence that gives a minimum travel distance: 0 \u2192 2 \u2192 0 \u2192 4 \u2192 0 \u2192 3 \u2192 0 \u2192 1 \u2192 0 \u2192 5, where each 0 means you go the origin and grab one bag, and each positive integer means you deliver the bag to a depot at this coordinate, giving a total distance of 25 units. It must be noted that there are other sequences that give the same distance.\n\nIn the second test case, you can follow the following sequence, among multiple such sequences, to travel minimum distance: 0 \u2192 6 \u2192 8 \u2192 7 \u2192 0 \u2192 5 \u2192 4 \u2192 3 \u2192 0 \u2192 (-5) \u2192 (-10) \u2192 (-15), with distance 41. It can be shown that 41 is the optimal distance for this test case."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_minimum_distance(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum distance to deliver goods to depots.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of test cases, each containing:\n            - n (int): Number of depots.\n            - k (int): Maximum number of bags that can be carried at once.\n            - depots (List[int]): Positions of depots on the number line.\n\n    Returns:\n        List[int]: Minimum distance for each test case.\n    \"\"\"\n    results = []\n\n    for n, k, depots in test_cases:\n        # Separate depots into positive and negative positions\n        positive_positions = sorted([x for x in depots if x > 0])\n        negative_positions = sorted([-x for x in depots if x < 0])\n\n        def calculate_distance(positions: List[int], k: int) -> int:\n            \"\"\"Calculate the total distance for a list of positions.\n\n            Args:\n                positions (List[int]): Sorted list of positions.\n                k (int): Maximum number of bags that can be carried at once.\n\n            Returns:\n                int: Total distance for the positions.\n            \"\"\"\n            total_distance = 0\n            # Process positions in batches of size k\n            for i in range(len(positions) - 1, -1, -k):\n                total_distance += 2 * positions[i]  # Round trip to the farthest depot in the batch\n            return total_distance\n\n        # Calculate total distance for positive and negative positions\n        positive_distance = calculate_distance(positive_positions, k)\n        negative_distance = calculate_distance(negative_positions, k)\n\n        # Calculate the minimum distance by subtracting the farthest depot distance\n        min_distance = positive_distance + negative_distance\n        if positive_positions:\n            min_distance -= positive_positions[-1]\n        if negative_positions:\n            min_distance -= negative_positions[-1]\n\n        results.append(min_distance)\n\n    return results\n\n# Input interface\ndef main():\n    \"\"\"Main function to read input and output results.\"\"\"\n    # Read number of test cases\n    t = int(input())\n\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        depots = list(map(int, input().split()))\n        test_cases.append((n, k, depots))\n\n    # Call the function and print results\n    results = calculate_minimum_distance(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_minimum_distance(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum distance to deliver all bags to depots.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of test cases, each containing:\n            - n (int): Number of depots.\n            - k (int): Maximum number of bags that can be carried at once.\n            - depots (List[int]): List of depot positions on the number line.\n\n    Returns:\n        List[int]: List of minimum distances for each test case.\n    \"\"\"\n    results = []\n\n    for n, k, depots in test_cases:\n        # Separate depots into positive and negative positions\n        positive_depots = [x for x in depots if x > 0]\n        negative_depots = [-x for x in depots if x < 0]\n\n        # Sort both lists in descending order\n        positive_depots.sort(reverse=True)\n        negative_depots.sort(reverse=True)\n\n        # Calculate the minimum distance\n        total_distance = 0\n\n        # Handle positive depots\n        for i in range(0, len(positive_depots), k):\n            total_distance += 2 * positive_depots[i]\n\n        # Handle negative depots\n        for i in range(0, len(negative_depots), k):\n            total_distance += 2 * negative_depots[i]\n\n        # Subtract the farthest trip as we don't need to return to origin after last delivery\n        if positive_depots and negative_depots:\n            total_distance -= max(positive_depots[0], negative_depots[0])\n        elif positive_depots:\n            total_distance -= positive_depots[0]\n        elif negative_depots:\n            total_distance -= negative_depots[0]\n\n        results.append(total_distance)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    # Read number of test cases\n    t = int(input().strip())\n\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().strip().split())\n        depots = list(map(int, input().strip().split()))\n        test_cases.append((n, k, depots))\n\n    # Call the function and print results\n    results = calculate_minimum_distance(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef calculate_minimum_distance(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum delivery distance for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of tuples, each containing:\n            - n (int): Number of depots.\n            - k (int): Maximum number of bags that can be carried at a time.\n            - depots (List[int]): Positions of the depots on the number line.\n\n    Returns:\n        List[int]: List of minimum distances for each test case.\n    \"\"\"\n    results = []\n    \n    for n, k, depots in test_cases:\n        # Separate depots into positive and negative positions\n        positive_depots = [x for x in depots if x > 0]\n        negative_depots = [-x for x in depots if x < 0]\n        \n        # Sort depots in descending order of absolute values\n        positive_depots.sort(reverse=True)\n        negative_depots.sort(reverse=True)\n        \n        total_distance = 0\n        \n        # Calculate distance for positive depots\n        for i in range(0, len(positive_depots), k):\n            total_distance += 2 * positive_depots[i]\n        \n        # Calculate distance for negative depots\n        for i in range(0, len(negative_depots), k):\n            total_distance += 2 * negative_depots[i]\n        \n        # Subtract the last trip distance as we don't return to origin\n        if positive_depots and negative_depots:\n            total_distance -= max(positive_depots[0], negative_depots[0])\n        elif positive_depots:\n            total_distance -= positive_depots[0]\n        elif negative_depots:\n            total_distance -= negative_depots[0]\n        \n        results.append(total_distance)\n    \n    return results\n\n# Input interface\ndef main():\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        depots = list(map(int, input().split()))\n        test_cases.append((n, k, depots))\n    \n    # Call the function and print results\n    results = calculate_minimum_distance(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_minimum_distance(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    \"\"\"Calculate the minimum distance to deliver goods to depots on a number line.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: Number of depots.\n            - k: Maximum number of bags that can be carried in one trip.\n            - depots: List of integers representing the positions of the depots.\n\n    Returns:\n        A list of integers where each integer is the minimum distance for the corresponding test case.\n    \"\"\"\n    results = []\n\n    for n, k, depots in test_cases:\n        # Separate depots into positive and negative positions\n        positive_depots = sorted([x for x in depots if x > 0], reverse=True)\n        negative_depots = sorted([-x for x in depots if x < 0], reverse=True)\n\n        # Function to calculate the distance for a list of depots\n        def calculate_distance(depots: List[int]) -> int:\n            distance = 0\n            for i in range(0, len(depots), k):\n                # Add twice the distance of the farthest depot in the current group\n                distance += 2 * depots[i]\n            return distance\n\n        # Calculate total distance\n        total_distance = calculate_distance(positive_depots) + calculate_distance(negative_depots)\n\n        # Subtract the return trip for the farthest depot\n        if positive_depots and negative_depots:\n            total_distance -= max(positive_depots[0], negative_depots[0])\n        elif positive_depots:\n            total_distance -= positive_depots[0]\n        elif negative_depots:\n            total_distance -= negative_depots[0]\n\n        results.append(total_distance)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().strip().split())\n        depots = list(map(int, input().strip().split()))\n        test_cases.append((n, k, depots))\n\n    # Output results\n    results = calculate_minimum_distance(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_minimum_distance(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum distance to deliver all bags to depots for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of tuples, each containing:\n            - n (int): Number of depots.\n            - k (int): Carrying capacity.\n            - depots (List[int]): List of depot positions.\n\n    Returns:\n        List[int]: Minimum distance for each test case.\n    \"\"\"\n    results = []\n\n    for n, k, depots in test_cases:\n        # Separate depots into positive and negative positions\n        positive_depots = [x for x in depots if x > 0]\n        negative_depots = [-x for x in depots if x < 0]\n\n        # Sort both lists in descending order\n        positive_depots.sort(reverse=True)\n        negative_depots.sort(reverse=True)\n\n        # Function to calculate the total distance for a list of depots\n        def calculate_distance(depots: List[int], k: int) -> int:\n            distance = 0\n            for i in range(0, len(depots), k):\n                # Only add the distance to the farthest depot in each batch\n                distance += 2 * depots[i]\n            return distance\n\n        # Calculate total distance for positive and negative depots\n        total_distance = calculate_distance(positive_depots, k) + calculate_distance(negative_depots, k)\n\n        # Subtract the distance of the farthest depot (as we don't return to origin after last delivery)\n        if positive_depots and negative_depots:\n            total_distance -= max(positive_depots[0], negative_depots[0])\n        elif positive_depots:\n            total_distance -= positive_depots[0]\n        elif negative_depots:\n            total_distance -= negative_depots[0]\n\n        results.append(total_distance)\n\n    return results\n\n# Input and output interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    # Read number of test cases\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n, k = int(data[index]), int(data[index + 1])\n        index += 2\n        depots = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, k, depots))\n\n    # Calculate results\n    results = calculate_minimum_distance(t, test_cases)\n\n    # Print results for each test case\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_minimum_distance(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum travel distance for delivering goods to depots.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of test cases, each containing:\n            - n (int): Number of depots.\n            - k (int): Maximum number of bags that can be carried in one trip.\n            - depots (List[int]): List of depot positions on the number line.\n\n    Returns:\n        List[int]: List of minimum distances for each test case.\n    \"\"\"\n    results = []\n\n    for n, k, depots in test_cases:\n        # Separate depots into positive and negative positions\n        positive_depots = [x for x in depots if x > 0]\n        negative_depots = [-x for x in depots if x < 0]\n\n        # Sort depots in descending order of absolute values\n        positive_depots.sort(reverse=True)\n        negative_depots.sort(reverse=True)\n\n        # Function to calculate distance for a list of depots\n        def calculate_distance(depot_list: List[int]) -> int:\n            distance = 0\n            for i in range(0, len(depot_list), k):\n                # Add the round trip distance for each batch, except the last trip\n                distance += 2 * depot_list[i]\n            # Subtract the return trip for the last batch\n            if depot_list:\n                distance -= depot_list[0]\n            return distance\n\n        # Calculate total minimum distance\n        total_distance = calculate_distance(positive_depots) + calculate_distance(negative_depots)\n        results.append(total_distance)\n\n    return results\n\n# Input interface\ndef main():\n    # Read number of test cases\n    t = int(input())\n\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        depots = list(map(int, input().split()))\n        test_cases.append((n, k, depots))\n\n    # Call the function and print results\n    results = calculate_minimum_distance(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_minimum_distance(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum distance to deliver all goods to depots.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of test cases, each containing:\n            - n (int): Number of depots.\n            - k (int): Maximum number of bags that can be carried at once.\n            - positions (List[int]): List of depot positions on the number line.\n\n    Returns:\n        List[int]: List of minimum distances for each test case.\n    \"\"\"\n    results = []\n\n    for n, k, positions in test_cases:\n        # Separate positions into positive and negative lists\n        positive_positions = [x for x in positions if x > 0]\n        negative_positions = [-x for x in positions if x < 0]\n\n        # Sort both lists in descending order\n        positive_positions.sort(reverse=True)\n        negative_positions.sort(reverse=True)\n\n        # Calculate total distance\n        total_distance = 0\n\n        # Process positive positions\n        for i in range(0, len(positive_positions), k):\n            total_distance += 2 * positive_positions[i]\n\n        # Process negative positions\n        for i in range(0, len(negative_positions), k):\n            total_distance += 2 * negative_positions[i]\n\n        # Subtract the farthest trip as we don't need to return to origin\n        if positive_positions and negative_positions:\n            total_distance -= max(positive_positions[0], negative_positions[0])\n        elif positive_positions:\n            total_distance -= positive_positions[0]\n        elif negative_positions:\n            total_distance -= negative_positions[0]\n\n        results.append(total_distance)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    # Read number of test cases\n    t = int(input().strip())\n\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().strip().split())\n        positions = list(map(int, input().strip().split()))\n        test_cases.append((n, k, positions))\n\n    # Call the function and print results\n    results = calculate_minimum_distance(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_minimum_distance(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    \"\"\"Calculate the minimum distance required to deliver goods to depots on a number line.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int]]]): List of test cases, each containing:\n            - n (int): Number of depots.\n            - k (int): Maximum number of bags that can be carried at a time.\n            - depots (List[int]): List of depot positions on the number line.\n\n    Returns:\n        List[int]: List of minimum distances for each test case.\n    \"\"\"\n    results = []\n\n    for n, k, depots in test_cases:\n        # Separate depots into positive and negative positions\n        positive_depots = [x for x in depots if x > 0]\n        negative_depots = [-x for x in depots if x < 0]\n\n        # Sort both lists in descending order\n        positive_depots.sort(reverse=True)\n        negative_depots.sort(reverse=True)\n\n        # Calculate the total distance\n        total_distance = 0\n\n        # Process positive depots\n        for i in range(0, len(positive_depots), k):\n            total_distance += 2 * positive_depots[i]\n\n        # Process negative depots\n        for i in range(0, len(negative_depots), k):\n            total_distance += 2 * negative_depots[i]\n\n        # Subtract the farthest trip as it doesn't require returning to origin\n        if positive_depots and negative_depots:\n            total_distance -= max(positive_depots[0], negative_depots[0])\n        elif positive_depots:\n            total_distance -= positive_depots[0]\n        elif negative_depots:\n            total_distance -= negative_depots[0]\n\n        results.append(total_distance)\n\n    return results\n\n# Input interface\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        k = int(data[index + 1])\n        index += 2\n        depots = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, k, depots))\n    \n    # Output interface\n    results = calculate_minimum_distance(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_minimum_distance(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum distance to deliver goods to depots.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of test cases, each containing:\n            - n (int): Number of depots.\n            - k (int): Maximum number of bags that can be carried at once.\n            - depots (List[int]): List of depot positions on the number line.\n\n    Returns:\n        List[int]: List of minimum distances for each test case.\n    \"\"\"\n    results = []\n\n    for n, k, depots in test_cases:\n        # Separate depots into positive and negative positions\n        positive_depots = [x for x in depots if x > 0]\n        negative_depots = [-x for x in depots if x < 0]\n\n        # Sort both lists in descending order\n        positive_depots.sort(reverse=True)\n        negative_depots.sort(reverse=True)\n\n        # Calculate total distance for positive and negative depots\n        total_distance = 0\n\n        # Process positive depots\n        for i in range(0, len(positive_depots), k):\n            total_distance += 2 * positive_depots[i]\n\n        # Process negative depots\n        for i in range(0, len(negative_depots), k):\n            total_distance += 2 * negative_depots[i]\n\n        # Subtract the farthest trip as it doesn't require a return\n        if positive_depots and negative_depots:\n            total_distance -= max(positive_depots[0], negative_depots[0])\n        elif positive_depots:\n            total_distance -= positive_depots[0]\n        elif negative_depots:\n            total_distance -= negative_depots[0]\n\n        results.append(total_distance)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().strip().split())\n        depots = list(map(int, input().strip().split()))\n        test_cases.append((n, k, depots))\n\n    # Call the function and print results\n    results = calculate_minimum_distance(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_minimum_distance(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum distance to deliver goods to depots.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of test cases, each containing:\n            - n (int): Number of depots.\n            - k (int): Maximum number of bags that can be carried in one trip.\n            - positions (List[int]): Positions of the depots on the number line.\n\n    Returns:\n        List[int]: Minimum distance for each test case.\n    \"\"\"\n    results = []\n\n    for n, k, positions in test_cases:\n        # Separate positions into positive and negative lists\n        positive_positions = sorted([pos for pos in positions if pos > 0])\n        negative_positions = sorted([-pos for pos in positions if pos < 0])\n\n        def calculate_distance(positions: List[int], k: int) -> int:\n            \"\"\"Calculate the distance for a list of positions.\"\"\"\n            distance = 0\n            # Process positions in batches of size k\n            for i in range(len(positions) - 1, -1, -k):\n                distance += 2 * positions[i]  # Go to the farthest point and return\n            return distance\n\n        # Calculate total distance for positive and negative positions\n        total_distance = calculate_distance(positive_positions, k) + calculate_distance(negative_positions, k)\n\n        # Adjust for the last trip where we don't return to the origin\n        if positive_positions and negative_positions:\n            total_distance -= max(positive_positions[-1], negative_positions[-1])\n        elif positive_positions:\n            total_distance -= positive_positions[-1]\n        elif negative_positions:\n            total_distance -= negative_positions[-1]\n\n        results.append(total_distance)\n\n    return results\n\n# Input interface\ndef main():\n    \"\"\"Main function to read input and output results.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        positions = list(map(int, input().split()))\n        test_cases.append((n, k, positions))\n\n    results = calculate_minimum_distance(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires calculating the minimum distance to deliver goods to depots on a number line. The key challenge is optimizing the delivery route while considering the constraint of carrying a maximum of k bags at a time. The solution must efficiently handle large input sizes and multiple test cases.\nrequirement pool:\n- Implement the main algorithm to calculate minimum delivery distance.\n- Optimize the algorithm for large input sizes.\n- Ensure the solution handles edge cases like overlapping depot positions.\n- Provide clear and concise output for each test case.\n- Document the solution approach and edge case handling.\nWe will use a greedy algorithm to optimize the delivery route. The key idea is to sort the depot positions and deliver goods in batches of up to k bags, minimizing the distance traveled by grouping depots that are closest together. We will utilize Python's built-in sorting capabilities for efficiency and handle edge cases like overlapping depot positions by considering unique positions only.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'depot': A location on the number line where goods need to be delivered.\n    'origin': The starting point (0) where the salesman begins and returns to collect more goods.\n    'carry up to k bags': The maximum number of bags the salesman can carry in one trip.\n\n# [phrase showing quantity relationship]\n    'up to k bags': This means the salesman can carry a maximum of k bags in one trip. In code, this can be implemented by iterating over the depots in chunks of size k.\n    'minimum distance': This refers to the shortest possible total distance the salesman needs to travel to deliver all goods. This can be implemented by optimizing the delivery route using sorting and grouping strategies.\n\n# [degree adverb]\n    'minimum': This indicates that the goal is to find the smallest possible total distance. In code, this involves using a greedy algorithm to minimize travel distance.\n\n# [code logic]\n1. For each test case, read n and k.\n2. Read the positions of the depots and sort them.\n3. Separate the depots into positive and negative positions.\n4. For each group (positive and negative), calculate the total distance by:\n   - Grouping depots into batches of size k.\n   - For each batch, calculate the round trip distance (to the farthest depot in the batch and back).\n5. Sum the distances for both positive and negative groups.\n6. Subtract the distance of the farthest depot (either positive or negative) from the total, as you don't need to return to the origin after delivering all goods.\n7. Output the calculated minimum distance for each test case.\n\n# [edge case]\n    Test case 1: n = 1, k = 1, positions = [0] = 0\n    Explanation: The depot is at the origin, so no travel is needed.\n\n    Test case 2: n = 3, k = 2, positions = [-5, -3, -1] = 10\n    Explanation: Deliver to -5 and -3 in one trip (10 units round trip), then deliver to -1 (2 units one way).\n\n    Test case 3: n = 4, k = 2, positions = [1, 2, 3, 4] = 8\n    Explanation: Deliver to 3 and 4 in one trip (8 units round trip), then deliver to 1 and 2 in another trip (4 units round trip).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and grouping depots into batches of size k inherently handles these cases.\n", "requirement analysis:\nThe problem requires calculating the minimum distance to deliver goods to depots on a number line, considering the capacity of bags that can be carried at once. The solution must efficiently handle multiple test cases and large input sizes, ensuring optimal performance.\nrequirement pool:\n- Implement the main algorithm to calculate minimum travel distance.\n- Optimize the solution for handling large input sizes.\n- Ensure the solution is scalable and efficient.\n- Test the solution against multiple test cases for accuracy.\n- Provide clear documentation and examples for users.\nWe will implement a function to calculate the minimum travel distance using a greedy approach. The depots will be sorted based on their positions, and the salesman will deliver goods in batches of up to k bags, minimizing the distance traveled by grouping deliveries to the farthest depots first. We will use Python's built-in sorting and list manipulation capabilities to efficiently handle large input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'depot', 'origin', 'minimum distance', 'carry up to k bags'\n    Explanation: \n    - 'depot': A location on the number line where goods need to be delivered.\n    - 'origin': The starting point (0) where the salesman begins and returns to collect goods.\n    - 'minimum distance': The shortest total distance the salesman needs to travel to deliver all goods.\n    - 'carry up to k bags': The maximum number of bags the salesman can carry in one trip.\n\n# [phrase showing quantity relationship]\n    'up to k bags': This indicates a limit on the number of bags that can be carried in one trip. In code, this can be implemented by grouping deliveries into batches of size k.\n\n# [degree adverb]\n    'minimum': This indicates the need to find the smallest possible total travel distance. In code, this can be implemented using a greedy approach to optimize the delivery sequence.\n\n# [code logic]\n    1. Parse the input to get the number of test cases.\n    2. For each test case, read n and k, and the positions of depots.\n    3. Separate depots into positive and negative positions.\n    4. Sort both lists of positions.\n    5. Calculate the minimum distance by delivering goods in batches of up to k bags, starting from the farthest depot and working back towards the origin.\n    6. Sum the distances traveled for each batch and return the total minimum distance.\n\n# [edge case]\n    Test case with all depots at the same position:\n    - Input: 4 2, 1000000000 1000000000 1000000000 1000000000\n      Expected output: 3000000000\n      Explanation: All depots are at the same position, so the salesman only needs to make two trips carrying two bags each time.\n\n    Test case with depots at both positive and negative positions:\n    - Input: 3 1, -1 -2 3\n      Expected output: 10\n      Explanation: The salesman needs to travel to both negative and positive positions, optimizing trips by visiting farthest depots first.\n\n    Test case with k equal to n:\n    - Input: 5 5, 1 2 3 4 5\n      Expected output: 10\n      Explanation: The salesman can carry all bags in one trip directly to the farthest depot.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and grouping deliveries by distance already accounts for these scenarios efficiently.\n", "requirement analysis:\nThe problem requires calculating the minimum distance to deliver goods to depots on a number line, considering the constraint of carrying a limited number of bags at a time. The solution must efficiently handle large input sizes and provide accurate results for multiple test cases.\nrequirement pool:\n- Implement the main algorithm to calculate minimum delivery distance.\n- Optimize the solution for handling up to 200,000 depots efficiently.\n- Ensure the solution is easy to understand and maintain.\n- Provide clear documentation and examples for users.\n- Consider edge cases and validate input data.\nWe will implement a function to calculate the minimum delivery distance using a greedy approach. The depots will be sorted based on their positions, and the salesman will deliver goods in batches of up to k bags, minimizing the travel distance by grouping deliveries to nearby depots. We will use Python's built-in sorting and list manipulation capabilities to efficiently handle large input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'depots on a number line'\n    Explanation: Depots are positioned along a one-dimensional line, which means their positions can be represented as integers on a number line.\n\n    'carry up to k bags at a time'\n    Explanation: The salesman can carry a maximum of k bags in one trip from the origin to the depots.\n\n    'minimum distance'\n    Explanation: The goal is to minimize the total distance traveled while delivering all bags to the depots.\n\n# [phrase showing quantity relationship]\n    'up to k bags'\n    Explanation: This indicates a maximum limit on the number of bags that can be carried in one trip. In code, this can be implemented by iterating over the depots in chunks of size k.\n\n# [degree adverb]\n    'minimum'\n    Explanation: The requirement is to find the smallest possible total distance traveled. In code, this involves optimizing the delivery sequence to reduce travel distance.\n\n# [code logic]\n    1. Parse the input to get the number of test cases.\n    2. For each test case, read n and k, and then read the positions of the depots.\n    3. Separate the depot positions into positive and negative lists.\n    4. Sort both lists in descending order of absolute values.\n    5. Calculate the total distance by making trips to deliver up to k bags at a time, starting from the farthest depot and moving towards the origin.\n    6. Sum up the distances for all trips, ensuring not to return to the origin after the last delivery.\n\n# [edge case]\n    Test case with all depots at the same position:\n    Input: 4 2\n           5 5 5 5\n    Expected output: 10\n    Explanation: The salesman makes two trips, each covering a distance of 5 units, totaling 10 units.\n\n    Test case with depots at extreme positions:\n    Input: 3 1\n           -1000000000 0 1000000000\n    Expected output: 4000000000\n    Explanation: Each trip covers a distance of 2000000000 units, totaling 4000000000 units.\n\n    Test case with k equal to n:\n    Input: 3 3\n           -1 0 1\n    Expected output: 2\n    Explanation: All bags can be delivered in one trip, covering a distance of 2 units.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and grouping deliveries based on k will naturally handle these scenarios.\n", "requirement analysis:\nThe requirements focus on calculating the minimum distance for delivering goods to depots on a number line. The constraints include handling multiple test cases efficiently and ensuring the solution scales with large input sizes. The solution must optimize the number of trips based on the carrying capacity.\nrequirement pool:\n- Implement efficient algorithm for minimum distance calculation\n- Ensure solution handles up to 10,500 test cases\n- Optimize for large input sizes up to 2 \u22c5 10^5 depots\n- Provide clear and accurate output format\n- Consider edge cases with overlapping depot positions\nWe will implement an efficient algorithm to calculate the minimum distance required to deliver goods to depots on a number line. The approach involves sorting the depot positions and grouping them based on the carrying capacity k. We will use a greedy strategy to minimize the distance by always delivering to the farthest depots first in each trip. This ensures that we minimize the number of trips and the total distance traveled. The solution will handle multiple test cases efficiently and scale well with large input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'number line'\n    Explanation: The depots are positioned on a one-dimensional line, which means the distance between any two points is the absolute difference of their coordinates.\n\n    'carry up to k bags'\n    Explanation: You can only carry a maximum of k bags in one trip, which affects how you plan your trips to minimize the total distance.\n\n    'minimum distance'\n    Explanation: The goal is to find the shortest possible total distance traveled to deliver all bags to their respective depots.\n\n# [phrase showing quantity relationship]\n    'up to k bags': This indicates a constraint on the maximum number of bags that can be carried in one trip. In code, this means you need to group the depots into batches of size k or less.\n\n# [degree adverb]\n    'minimum': This indicates that the solution should aim to find the smallest possible total distance. In code, this involves optimizing the order and grouping of trips.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n and k, and then read the positions of the depots.\n3. Separate the depot positions into positive and negative lists.\n4. Sort both lists in descending order (farthest first).\n5. Calculate the total distance by making trips to the farthest depots first, grouping them by k.\n6. For each group, add twice the distance of the farthest depot in that group (to go and return).\n7. After all trips are made, subtract the return trip for the last group since you don't need to return after delivering all bags.\n8. Output the total minimum distance for each test case.\n\n# [edge case]\n    Test case with all depots at the same position:\n    Input: 3 2\n           5 5 5\n    Expected output: 10\n    Explanation: You make two trips: 0 \u2192 5 \u2192 0 \u2192 5 \u2192 0 \u2192 5, totaling 10 units.\n\n    Test case with depots at extreme positions:\n    Input: 2 1\n           -1000000000 1000000000\n    Expected output: 3000000000\n    Explanation: Two trips: 0 \u2192 -1000000000 \u2192 0 \u2192 1000000000, totaling 3000000000 units.\n\n    Test case with k equal to n:\n    Input: 4 4\n           -1 -2 -3 -4\n    Expected output: 8\n    Explanation: One trip: 0 \u2192 -4 \u2192 -3 \u2192 -2 \u2192 -1, totaling 8 units.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and grouping by k handles these scenarios effectively.\n", "requirement analysis:\nThe problem requires calculating the minimum distance to deliver goods to depots on a number line. The salesman can carry a limited number of bags per trip, and the solution must handle multiple test cases efficiently. The challenge lies in optimizing the travel distance while considering the constraints of carrying capacity and large input sizes.\nrequirement pool:\n- Implement an algorithm to calculate the minimum travel distance.\n- Ensure the solution handles up to 10,500 test cases efficiently.\n- Optimize the algorithm for large input sizes up to 2 \u22c5 10^5 depots.\n- Consider edge cases where depots share the same position.\n- Provide clear and concise output for each test case.\nWe will implement a function to calculate the minimum travel distance by sorting the depot positions and grouping them based on the carrying capacity. The approach will involve separating depots into positive and negative positions, sorting them, and then calculating the distance by making trips to the farthest depots first, considering the carrying capacity. This ensures that we minimize the number of trips and the total distance traveled. We will use Python's built-in sorting and list manipulation capabilities to handle large input sizes efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'depot'\n    Explanation: A depot is a location on the number line where a bag of goods needs to be delivered.\n\n    'origin'\n    Explanation: The starting point (0 on the number line) where the salesman begins and returns to collect more bags.\n\n    'carrying capacity'\n    Explanation: The maximum number of bags (k) that can be carried by the salesman in one trip.\n\n# [phrase showing quantity relationship]\n    'up to k bags'\n    Explanation: The salesman can carry a maximum of k bags per trip. In code, this means we need to group the depots into batches of size k or less for each trip.\n\n# [degree adverb]\n    'minimum distance'\n    Explanation: The goal is to minimize the total distance traveled by the salesman. In code, this involves optimizing the order and grouping of trips to depots.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n and k, and then the list of depot positions.\n3. Separate the depot positions into positive and negative lists.\n4. Sort both lists in descending order of absolute values.\n5. Calculate the total distance by making trips to the farthest depots first, considering the carrying capacity k.\n6. For each group of k depots, calculate the round trip distance (except for the last trip where you don't return to origin).\n7. Sum up all these distances to get the minimum distance for each test case.\n8. Output the result for each test case.\n\n# [edge case]\n    Test case 1: n = 1, k = 1, x = [0] = 0\n    Explanation: No travel is needed as the depot is at the origin.\n\n    Test case 2: n = 5, k = 5, x = [1, 2, 3, 4, 5] = 5\n    Explanation: All depots can be visited in one trip since k equals n, so only one round trip is needed to the farthest depot.\n\n    Test case 3: n = 3, k = 2, x = [-1, -2, -3] = 6\n    Explanation: The salesman can take two bags in one trip and one in another. The optimal sequence is 0 \u2192 -3 \u2192 -2 \u2192 0 \u2192 -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and grouping based on carrying capacity inherently handles these scenarios.\n", "requirement analysis:\nThe requirements focus on optimizing the delivery process by minimizing the travel distance and efficiently managing the number of trips based on carrying capacity. The solution should handle multiple test cases and large inputs effectively.\nrequirement pool:\n- Calculate minimum travel distance for deliveries.\n- Optimize trips based on carrying capacity.\n- Handle multiple test cases efficiently.\n- Ensure solution scalability for large inputs.\n- Provide clear output format for results.\nWe will implement a function to calculate the minimum travel distance using a greedy approach. The function will sort the depot positions, split them into positive and negative coordinates, and then calculate the distance by grouping the depots into batches based on the carrying capacity. We will use Python's built-in sorting and list manipulation capabilities to efficiently handle the input data.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'depot': A location on the number line where goods need to be delivered.\n    'origin': The starting point (0) where the salesman begins and returns to collect more goods.\n    'carry up to k bags': The maximum number of bags the salesman can carry in one trip.\n\n# [phrase showing quantity relationship]\n    'up to k bags': This means the salesman can carry a maximum of k bags per trip. In code, this can be implemented by grouping the depots into batches of size k.\n    'minimum distance': This refers to the shortest total distance the salesman needs to travel to deliver all bags. In code, this involves calculating the optimal path that minimizes travel distance.\n\n# [degree adverb]\n    'minimum': This indicates the need to find the smallest possible total travel distance. In code, this involves optimizing the path and grouping strategy to reduce travel.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n and k, and then read the depot positions.\n3. Separate depot positions into positive and negative lists.\n4. Sort both lists in descending order of absolute values.\n5. Calculate the total distance by:\n   - Grouping depots into batches of size k.\n   - For each batch, calculate the round trip distance (except for the last trip which doesn't require returning to origin).\n6. Sum up all calculated distances for each test case and output the result.\n\n# [edge case]\n    Case 1: n = 1, k = 1, x = [0] = 0\n    Explanation: The depot is at the origin, so no travel is needed. The expected output is 0.\n\n    Case 2: n = 5, k = 5, x = [1, 2, 3, 4, 5] = 5\n    Explanation: All depots can be delivered in one trip without returning, so the distance is just the farthest depot's position.\n\n    Case 3: n = 3, k = 1, x = [-1, -2, -3] = 12\n    Explanation: Each depot requires a separate trip. The total distance is calculated as: (2 * 3) + (2 * 2) + (2 * 1) = 12.\n\n# [extra code for edge case]\n    We do not need extra code to handle these edge cases. The original logic of sorting and batching handles them correctly by design.\n", "requirement analysis:\nThe problem requires calculating the minimum distance to deliver goods to depots on a number line, considering the constraint of carrying a limited number of bags at a time. The solution must efficiently handle multiple test cases and large input sizes.\nrequirement pool:\n- Implement efficient route calculation algorithm\n- Ensure scalability for large datasets\n- Optimize code for performance\n- Provide clear documentation\n- Enhance user interface for better usability\nWe will implement an efficient route calculation algorithm using a greedy approach. The idea is to sort the depot positions and deliver goods in batches of k bags, minimizing the distance traveled by grouping deliveries to the farthest depots first. We will use Python's built-in sorting and list manipulation capabilities to handle large datasets efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'depot': A location on a number line where goods need to be delivered.\n    'origin': The starting point (0) where the salesman begins and returns to collect goods.\n    'minimum distance': The shortest total distance the salesman needs to travel to deliver all goods.\n\n# [phrase showing quantity relationship]\n    'up to k bags': Indicates the maximum number of bags that can be carried at once. In code, this means grouping deliveries in batches of size k.\n    'n depots': Refers to the total number of delivery locations. In code, this means iterating over n positions.\n\n# [degree adverb]\n    'minimum': Refers to the smallest possible total travel distance. In code, this involves optimizing the delivery route to reduce travel.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n and k, and then the list of depot positions.\n3. Separate depot positions into positive and negative lists.\n4. Sort both lists in descending order of absolute value.\n5. Calculate the total distance by delivering goods in batches of k, starting with the farthest depots.\n6. Sum the distances traveled for each batch, ensuring not to return to the origin after the last delivery.\n\n# [edge case]\n    Test case with all depots at the same position:\n    Input: 3 2\n           5 5 5\n    Expected output: 10\n    Explanation: Deliver two bags in one trip (0 \u2192 5 \u2192 0) and one bag in another trip (0 \u2192 5), totaling 10 units.\n\n    Test case with depots at maximum positive and negative positions:\n    Input: 2 1\n           -1000000000 1000000000\n    Expected output: 3000000000\n    Explanation: Deliver one bag to -1000000000 and one bag to 1000000000, totaling 3000000000 units.\n\n    Test case with k equal to n:\n    Input: 4 4\n           -1 -2 -3 -4\n    Expected output: 4\n    Explanation: Deliver all bags in one trip (0 \u2192 -4), totaling 4 units.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and batching deliveries will naturally handle these scenarios efficiently.\n", "requirement analysis:\nThe requirements focus on calculating the minimum distance for delivering goods to depots on a number line. The solution must handle multiple test cases efficiently, considering constraints on the number of depots and the maximum number of bags carried at a time. The algorithm should optimize the travel path to minimize the total distance covered.\nrequirement pool:\n- Implement efficient route calculation algorithm\n- Ensure solution handles large input sizes\n- Optimize code for readability and maintainability\n- Provide detailed documentation for the solution\n- Include test cases for edge scenarios\nWe will implement an efficient algorithm to calculate the minimum distance required to deliver goods to depots on a number line. The algorithm will handle multiple test cases and optimize the travel path by grouping deliveries based on the maximum number of bags that can be carried at a time. We will use Python's built-in sorting and list manipulation capabilities to achieve this efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'depots on a number line'\n    Explanation: This refers to the locations of the depots being represented as points on a one-dimensional line, where each point has a coordinate value.\n\n    'carry up to k bags at a time'\n    Explanation: This means that the salesman can only take a maximum of k bags in one trip from the origin to the depots.\n\n    'minimum distance'\n    Explanation: The goal is to find the shortest total distance the salesman needs to travel to deliver all bags to the depots.\n\n# [phrase showing quantity relationship]\n    'up to k bags': This indicates a maximum limit, meaning the salesman can carry 1 to k bags in one trip.\n    Implementation: Use a loop to handle batches of up to k bags.\n\n# [degree adverb]\n    'minimum': This indicates that we need to find the smallest possible total distance.\n    Implementation: Calculate distances for different delivery sequences and choose the smallest one.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n and k, and then read the positions of the depots.\n3. Separate depot positions into positive and negative lists.\n4. Sort both lists in descending order of absolute values.\n5. Calculate the total distance by making trips to deliver up to k bags at a time, starting with the farthest depots.\n6. For each trip, add twice the distance to the farthest depot in that batch (except for the last trip, which doesn't require returning to origin).\n7. Sum up all calculated distances for each test case and output the result.\n\n# [edge case]\n    Test case with all depots at the same position:\n    Input: 1 1\n           0\n    Output: 0\n    Explanation: No travel is needed as all depots are at the origin.\n\n    Test case with maximum distance:\n    Input: 2 1\n           -1000000000 1000000000\n    Output: 4000000000\n    Explanation: The salesman must travel to both ends of the number line, resulting in a large distance.\n\n    Test case with k equal to n:\n    Input: 3 3\n           -1 0 1\n    Output: 2\n    Explanation: All bags can be delivered in one trip, covering only the distance from -1 to 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle these edge cases. The original logic of sorting and batching based on k will naturally handle these scenarios.\n", "requirement analysis:\nThe problem requires calculating the minimum distance to deliver goods to depots on a number line. The key challenge is optimizing the delivery route while considering the constraint of carrying a limited number of bags at a time. The solution must handle large input sizes efficiently and ensure accurate results across multiple test cases.\nrequirement pool:\n- Implement an efficient algorithm to calculate minimum delivery distance.\n- Ensure the solution handles up to 2 \u22c5 10^5 depots efficiently.\n- Optimize the algorithm for both small and large input sizes.\n- Provide clear and concise output for each test case.\n- Include detailed comments and documentation for the code.\nWe will use a greedy algorithm to efficiently calculate the minimum delivery distance. The approach involves sorting the depot positions, dividing them into positive and negative coordinates, and then delivering the goods in batches of k bags. This ensures that we minimize the distance traveled by always delivering to the farthest depots first in each batch. We will utilize Python's built-in sorting and list manipulation capabilities to handle large input sizes effectively.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'depot': A location on the number line where goods need to be delivered.\n    'origin': The starting point (0) where the salesman begins and returns to collect more goods.\n    'minimum distance': The shortest total distance the salesman needs to travel to deliver all goods.\n\n# [phrase showing quantity relationship]\n    'up to k bags': The salesman can carry a maximum of k bags at a time.\n    'n depots': There are n locations where goods need to be delivered.\n\n# [degree adverb]\n    'minimum': The goal is to find the smallest possible total distance traveled.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n and k, and then the list of depot positions.\n3. Separate the depot positions into positive and negative lists.\n4. Sort both lists in descending order of absolute values.\n5. For each list, calculate the total distance by taking k bags at a time, always going to the farthest point first and returning to the origin, except for the last trip.\n6. Sum the distances from both positive and negative sides.\n7. Output the total minimum distance for each test case.\n\n# [edge case]\n    Case 1: n = 1, k = 1, x = [0] = 0\n    Explanation: The depot is at the origin, so no travel is needed. The expected output is 0.\n\n    Case 2: n = 3, k = 3, x = [-1, 0, 1] = 2\n    Explanation: All depots can be reached in one trip without returning to the origin. The expected output is 2.\n\n    Case 3: n = 5, k = 2, x = [-10^9, -10^9, 10^9, 10^9, 0] = 4 * 10^9\n    Explanation: The farthest depots are at -10^9 and 10^9. The salesman needs two trips for each side. The expected output is 4 * 10^9.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and batching handles these scenarios effectively.\n", "requirement analysis:\nThe problem requires calculating the minimum distance to deliver goods to depots on a number line, considering the constraint of carrying a limited number of bags at a time. The solution must efficiently handle large input sizes and multiple test cases.\nrequirement pool:\n- Implement an algorithm to calculate the minimum delivery distance.\n- Ensure the solution is optimized for large input sizes.\n- Provide clear and concise output for each test case.\n- Handle edge cases such as depots at the same position.\n- Optimize the code for readability and maintainability.\nWe will implement a function to calculate the minimum delivery distance using a greedy approach. The depots will be sorted based on their positions, and the salesman will deliver goods in batches of up to k bags, minimizing the distance traveled by strategically planning the trips. We will use Python's built-in sorting and list manipulation capabilities to efficiently handle large input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'depots on a number line'\n    Explanation: Depots are positioned along a one-dimensional line, each with a specific coordinate.\n\n    'origin'\n    Explanation: The starting point for the salesman, located at position 0 on the number line.\n\n    'carry up to k bags'\n    Explanation: The salesman can transport a maximum of k bags in one trip from the origin to the depots.\n\n# [phrase showing quantity relationship]\n    'up to k bags'\n    Explanation: The salesman can carry a maximum of k bags per trip. In code, this means iterating over the depots in chunks of size k.\n\n# [degree adverb]\n    'minimum distance'\n    Explanation: The goal is to minimize the total distance traveled by the salesman. In code, this involves optimizing the trips to reduce unnecessary travel.\n\n# [code logic]\n    1. Sort the depot positions.\n    2. Separate depots into positive and negative positions.\n    3. For each group (positive and negative), calculate the total distance by making trips carrying up to k bags.\n    4. For each trip, calculate the distance to the farthest depot in that batch and back to the origin.\n    5. Sum the distances for all trips, ensuring not to return to the origin after the last delivery.\n\n# [edge case]\n    Test case with all depots at the origin: n = 3, k = 2, positions = [0, 0, 0]\n    Expected output = 0\n    Explanation: All depots are at the origin, so no travel is needed.\n\n    Test case with maximum positive and negative positions: n = 2, k = 1, positions = [-10^9, 10^9]\n    Expected output = 2 * 10^9\n    Explanation: The salesman must travel to both extreme positions separately.\n\n    Test case with overlapping depot positions: n = 4, k = 2, positions = [1, 1, -1, -1]\n    Expected output = 4\n    Explanation: Two trips are needed: one to position 1 and back, and one to position -1 and back.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and batching handles these scenarios effectively.\n"], "scores": [], "pass_results": [false, true, true, true, true, true, true, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 8, "round": 954, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line of each test case contains n integers x_1, x_2, \u2026, x_n (-10^9 \u2264 x_i \u2264 10^9). It is possible that some depots share the same position.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots. \n\nExample\n\nInput\n\n\n4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n\n25\n41\n7\n3000000000\n\nNote\n\nIn the first test case, you can carry only one bag at a time. Thus, the following is a solution sequence that gives a minimum travel distance: 0 \u2192 2 \u2192 0 \u2192 4 \u2192 0 \u2192 3 \u2192 0 \u2192 1 \u2192 0 \u2192 5, where each 0 means you go the origin and grab one bag, and each positive integer means you deliver the bag to a depot at this coordinate, giving a total distance of 25 units. It must be noted that there are other sequences that give the same distance.\n\nIn the second test case, you can follow the following sequence, among multiple such sequences, to travel minimum distance: 0 \u2192 6 \u2192 8 \u2192 7 \u2192 0 \u2192 5 \u2192 4 \u2192 3 \u2192 0 \u2192 (-5) \u2192 (-10) \u2192 (-15), with distance 41. It can be shown that 41 is the optimal distance for this test case.", "mutate_method": "rephrase_one", "parent_index": 553}
