{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He possesses a songs lasting one minute, b songs lasting two minutes, and c songs lasting three minutes. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He possesses a songs lasting one minute, b songs lasting two minutes, and c songs lasting three minutes. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik has decided to try singing. He possesses a songs lasting one minute, b songs lasting two minutes, and c songs lasting three minutes. He wants to distribute all songs into two concerts. Every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik has decided to try singing. He possesses a songs lasting one minute, b songs lasting two minutes, and c songs lasting three minutes, and he wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples, each containing the number of one-minute,\n            two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        if total_duration % 2 == 1:\n            results.append(1)\n        else:\n            # If total duration is even, check if we can split it evenly\n            # We need to check if we can form a subset with sum equal to half of total_duration\n            half_duration = total_duration // 2\n            \n            # Dynamic programming approach to check if we can form half_duration\n            # Initialize a set to store possible sums\n            possible_sums = {0}\n            \n            # Add possible sums using one-minute songs\n            for _ in range(a):\n                new_sums = set()\n                for s in possible_sums:\n                    new_sums.add(s + 1)\n                possible_sums.update(new_sums)\n            \n            # Add possible sums using two-minute songs\n            for _ in range(b):\n                new_sums = set()\n                for s in possible_sums:\n                    new_sums.add(s + 2)\n                possible_sums.update(new_sums)\n            \n            # Add possible sums using three-minute songs\n            for _ in range(c):\n                new_sums = set()\n                for s in possible_sums:\n                    new_sums.add(s + 3)\n                possible_sums.update(new_sums)\n            \n            # Check if half_duration is achievable\n            if half_duration in possible_sums:\n                results.append(0)\n            else:\n                results.append(1)\n    \n    return results\n\n# Input interface\nnumber_of_test_cases = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(number_of_test_cases)]\n\n# Function call\nresults = minimal_concert_difference(number_of_test_cases, test_cases)\n\n# Output interface\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples, each containing the number of one-minute, \n                                                 two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a == 1 and b == 0 and c == 0:\n            results.append(1)\n            continue\n        \n        # Dynamic programming approach\n        half_duration = total_duration // 2\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(half_duration, 0, -1):\n                if j >= 1 and dp[j - 1]:\n                    dp[j] = True\n        \n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(half_duration, 0, -1):\n                if j >= 2 and dp[j - 2]:\n                    dp[j] = True\n        \n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(half_duration, 0, -1):\n                if j >= 3 and dp[j - 3]:\n                    dp[j] = True\n        \n        # Find the closest sum to half of the total duration\n        closest_sum = 0\n        for i in range(half_duration + 1):\n            if dp[i]:\n                closest_sum = i\n        \n        # Calculate minimal difference\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = minimal_difference(n, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples containing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a == 1 and b == 0 and c == 0:\n            results.append(1)\n            continue\n        \n        # Dynamic programming approach\n        # Initialize DP table\n        max_possible_sum = total_duration // 2\n        dp = [False] * (max_possible_sum + 1)\n        dp[0] = True\n        \n        # Iterate over each song type and update the DP table\n        for duration, count in [(1, a), (2, b), (3, c)]:\n            for _ in range(count):\n                for j in range(max_possible_sum, duration - 1, -1):\n                    dp[j] = dp[j] or dp[j - duration]\n        \n        # Find the closest sum to half of the total duration\n        closest_sum = 0\n        for i in range(max_possible_sum + 1):\n            if dp[i]:\n                closest_sum = i\n        \n        # Calculate the minimal difference using the closest sum found\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = minimal_difference(n, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples, each containing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate the total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        half_duration = total_duration // 2\n        \n        # Initialize the dynamic programming table\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(half_duration, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(half_duration, 1, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(half_duration, 2, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        # Find the closest sum to half of the total duration\n        for i in range(half_duration, -1, -1):\n            if dp[i]:\n                min_diff = total_duration - 2 * i\n                results.append(min_diff)\n                break\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Function call\n    results = minimal_concert_difference(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing three integers representing the number of one-minute,\n                    two-minute, and three-minute songs.\n\n    Returns:\n        A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        if total_duration == 0:\n            results.append(0)\n            continue\n        \n        # Dynamic programming approach to find minimal difference\n        half_duration = total_duration // 2\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        for _ in range(a):\n            for j in range(half_duration, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        for _ in range(b):\n            for j in range(half_duration, 1, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        for _ in range(c):\n            for j in range(half_duration, 2, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        max_possible = max(i for i in range(half_duration + 1) if dp[i])\n        min_difference = total_duration - 2 * max_possible\n        results.append(min_difference)\n    \n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = [tuple(map(int, input(): \").split())) for _ in range(n)]\n    \n    # Function call\n    results = minimal_difference(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing three integers\n            representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate the total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If the total duration is even, the minimal difference is 0\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            # If the total duration is odd, the minimal difference is 1\n            results.append(1)\n    \n    return results\n\n# Input and output interface\nif __name__ == \"__main__\":\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    # Get the result for each test case\n    results = minimal_difference(t, test_cases)\n    # Print each result\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing three integers\n            representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        if total_duration == 0:\n            results.append(0)\n            continue\n        \n        # Dynamic programming approach\n        dp = [False] * (total_duration // 2 + 1)\n        dp[0] = True\n        \n        for count, duration in [(a, 1), (b, 2), (c, 3)]:\n            for _ in range(count):\n                for j in range(total_duration // 2, duration - 1, -1):\n                    dp[j] = dp[j] or dp[j - duration]\n        \n        min_diff = float('inf')\n        for i in range(total_duration // 2 + 1):\n            if dp[i]:\n                min_diff = min(min_diff, abs(total_duration - 2 * i))\n        \n        results.append(min_diff)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    \n    # Call the function and print results\n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples, each containing the number of one-minute, \n                                                 two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The minimal difference is the absolute difference between two equal parts\n        # If the total duration is even, the minimal difference can be 0\n        # If the total duration is odd, the minimal difference can be 1\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [tuple(map(int, input(): \").split())) for _ in range(n)]\n    \n    # Output interface\n    results = minimal_difference(n, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing three integers representing the number of one-minute,\n                    two-minute, and three-minute songs.\n\n    Returns:\n        A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1, otherwise it's 0\n        minimal_diff = total_duration % 2\n        \n        results.append(minimal_diff)\n    \n    return results\n\ndef main():\n    # Input interface\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Process and output results\n    results = minimal_difference(n, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the durations of two concerts.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing three integers\n            representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        if total_duration == 0:\n            results.append(0)\n            continue\n        \n        # Initialize DP array\n        dp = [False] * (total_duration // 2 + 1)\n        dp[0] = True\n        \n        # Update DP array for each song type\n        for duration, count in [(1, a), (2, b), (3, c)]:\n            for _ in range(count):\n                for j in range(total_duration // 2, duration - 1, -1):\n                    dp[j] = dp[j] or dp[j - duration]\n        \n        # Find the minimal possible difference\n        for i in range(total_duration // 2, -1, -1):\n            if dp[i]:\n                min_diff = total_duration - 2 * i\n                results.append(min_diff)\n                break\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    \n    # Call the function and print results\n    results = minimal_concert_difference(t, test_cases)\n    for result in results:\n        print(result)\n"], "plans": ["requirement analysis:\nThe main requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. This involves calculating the total duration of all songs and finding a partition that balances the two concerts as closely as possible. The solution must handle up to 1000 test cases with potentially large numbers of songs efficiently.\nrequirement pool:\n- Implement an algorithm to minimize the difference in concert durations.\n- Ensure all songs are included in one of the concerts.\n- Optimize the solution for large input sizes.\n- Provide clear documentation and code comments.\n- Include test cases to validate the solution.\nWe will use a dynamic programming approach to solve this problem. The idea is to treat it as a variation of the subset sum problem, where we try to partition the songs into two groups with the minimal difference in their total durations. Given the constraints, this approach will efficiently handle the large input sizes by focusing on the possible sums of durations rather than individual song counts.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'songs lasting one minute, two minutes, three minutes'\n    Explanation: This refers to the different durations of songs that need to be distributed between two concerts.\n\n    'absolute difference of durations'\n    Explanation: This means the non-negative difference between the total durations of the two concerts.\n\n    'minimal possible difference'\n    Explanation: The goal is to make the difference between the total durations of the two concerts as small as possible.\n\n# [phrase showing quantity relationship]\n    'exactly one concert': Each song must be assigned to one and only one concert.\n\n# [degree adverb]\n    'minimal': The smallest possible value for the difference in concert durations.\n\n# [code logic]\n1. Calculate the total duration of all songs.\n2. Use a dynamic programming approach to find the closest possible sum to half of the total duration.\n3. The minimal difference will be twice the difference between this closest sum and half of the total duration.\n\n# [edge case]\n    1 0 0 = 1\n    Explanation: With only one song, it must be assigned to one concert, resulting in a difference equal to its duration.\n\n    0 0 0 = 0\n    Explanation: No songs mean no difference in concert durations.\n\n    1 1 1 = 0\n    Explanation: As explained in the example, songs can be distributed to achieve a zero difference.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0 and c == 0:\n            return 0\n        if a + b + c == 1:\n            return max(a, b, c)\n        (other code for dynamic programming approach)\n", "requirement analysis:\nThe problem requires distributing songs into two concerts such that the absolute difference in their durations is minimized. The challenge lies in efficiently handling large numbers of songs and ensuring the solution is optimal for all test cases.\nrequirement pool:\n- Implement an efficient algorithm to minimize the difference in concert durations.\n- Ensure the solution can handle the maximum constraints of input size.\n- Optimize the algorithm for both small and large input sizes.\n- Provide clear documentation and comments within the code.\n- Include test cases to validate the solution's correctness and efficiency.\nWe will use a dynamic programming approach to solve this problem efficiently. The key idea is to use a subset sum approach where we try to partition the songs into two groups with minimal difference in their total durations. Given the constraints, we will optimize the algorithm to handle large input sizes by using a greedy strategy combined with dynamic programming to ensure the solution is both efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is to minimize the absolute difference between the total durations of two concerts. This means we need to find a way to distribute the songs such that the sum of durations in each concert is as close as possible.\n\n    'dynamic programming'\n    Explanation: A method for solving complex problems by breaking them down into simpler subproblems. It is particularly useful for optimization problems like this one, where we need to find the best way to partition songs.\n\n# [phrase showing quantity relationship]\n    'one minute', 'two minutes', 'three minutes': These phrases indicate the duration of each type of song. In code, they can be represented as constants or variables that denote the duration of each song type.\n\n# [degree adverb]\n    'minimal': This indicates that we need to find the smallest possible difference between the durations of the two concerts.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Use dynamic programming to find a subset of songs whose total duration is as close as possible to half of the total duration.\n    3. Calculate the difference between the total duration and twice the duration of this subset.\n    4. Return this difference as the minimal possible difference.\n\n# [edge case]\n    Case 1: (1, 0, 0) = 1\n    Explanation: Only one song with one minute duration, it must be placed in one concert, leading to a difference of 1 minute.\n\n    Case 2: (0, 0, 0) = 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0.\n\n    Case 3: (1000000000, 1000000000, 1000000000) = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between two concerts, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0 and c == 0:\n            return 0\n        if a == 1 and b == 0 and c == 0:\n            return 1\n        # Implement dynamic programming logic for other cases.\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases and large input values efficiently. The output format must strictly follow the given example.\nrequirement pool:\n- Implement an efficient algorithm to minimize concert duration difference\n- Ensure the solution handles large input values up to 10^9\n- Optimize for speed and memory usage\n- Maintain consistent output format\n- Provide clear documentation and examples\nWe will use a dynamic programming approach to solve the problem efficiently. The idea is to calculate the total duration of all songs and then try to partition them into two subsets such that the difference between their sums is minimized. This is similar to the subset sum problem, which can be solved using dynamic programming. We will utilize Python's built-in capabilities to handle large numbers and ensure the solution is scalable for large input values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is to minimize the absolute difference between the total durations of two concerts. This means we need to find two subsets of songs such that the difference in their total durations is as small as possible.\n\n    'dynamic programming'\n    Explanation: The plan suggests using dynamic programming, which is a method for solving complex problems by breaking them down into simpler subproblems. It is particularly useful for optimization problems like minimizing the difference between two subsets.\n\n# [phrase showing quantity relationship]\n    'one-minute, two-minute, three-minute'\n    Explanation: These phrases indicate the duration of each type of song. The total duration of each concert is calculated by summing these durations. In code, this can be implemented by multiplying the number of songs by their respective durations and summing them.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The requirement is to find the minimal possible difference between the durations of the two concerts. This means we need to optimize the distribution of songs to achieve the smallest possible difference.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Use dynamic programming to find two subsets of songs such that the difference between their total durations is minimized.\n    3. Initialize a DP table to keep track of possible sums.\n    4. Iterate over each song type and update the DP table.\n    5. Find the closest sum to half of the total duration.\n    6. Calculate the minimal difference using the closest sum found.\n\n# [edge case]\n    Edge Case 1: (1, 0, 0) = 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n\n    Edge Case 2: (0, 0, 0) = 0\n    Explanation: No songs are present, so both concerts have a duration of 0 minutes, resulting in a difference of 0.\n\n    Edge Case 3: (1000000000, 1000000000, 1000000000) = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between the two concerts, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0 and c == 0:\n            return 0\n        if a == 1 and b == 0 and c == 0:\n            return 1\n        # Implement dynamic programming logic for general cases\n        # Initialize DP table and iterate over song types\n        # Calculate minimal difference using DP results\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases and large values for a, b, and c efficiently.\nrequirement pool:\n- Implement an efficient algorithm to minimize concert duration difference\n- Ensure the solution handles large input values up to 10^9\n- Optimize for speed and memory usage\n- Maintain consistent output format\n- Provide detailed documentation for the solution\nWe will use a dynamic programming approach to solve this problem efficiently. The idea is to calculate the total duration of all songs and then try to partition them into two subsets such that the absolute difference between their sums is minimized. This is similar to the 'Partition Problem' which can be solved using a dynamic programming approach. Given the constraints, we will optimize the solution to handle large input values efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The absolute difference between two numbers is the non-negative difference between them, calculated as |a - b|. In this context, it refers to the difference in total durations of the two concerts.\n\n    'partition'\n    Explanation: Partitioning in this context means dividing the songs into two groups (concerts) such that the difference in their total durations is minimized.\n\n# [phrase showing quantity relationship]\n    'one minute', 'two minutes', 'three minutes'\n    Explanation: These phrases indicate the duration of each type of song. In code, these can be represented as 1, 2, and 3 respectively.\n\n# [degree adverb]\n    'minimal'\n    Explanation: This indicates that we need to find the smallest possible value for the difference in durations between the two concerts. In code, this involves finding the minimum value of |sum1 - sum2|.\n\n# [code logic]\n1. Calculate the total duration of all songs.\n2. Use dynamic programming to determine if it's possible to achieve a certain sum with a subset of songs.\n3. Iterate over possible sums to find the one closest to half of the total duration.\n4. Calculate the minimal possible difference using the closest sum found.\n\n# [edge case]\n    1 0 0 = 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n\n    0 0 0 = 0\n    Explanation: With no songs, both concerts have a duration of 0, resulting in a difference of 0 minutes.\n\n    1000000000 1000000000 1000000000 = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between the two concerts, resulting in a difference of 0 minutes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    def minimal_difference(t, test_cases):\n        results = []\n        for a, b, c in test_cases:\n            total_duration = a * 1 + b * 2 + c * 3\n            half_duration = total_duration // 2\n            dp = [False] * (half_duration + 1)\n            dp[0] = True\n\n            for _ in range(a):\n                for j in range(half_duration, 0, -1):\n                    if j >= 1:\n                        dp[j] = dp[j] or dp[j - 1]\n\n            for _ in range(b):\n                for j in range(half_duration, 1, -1):\n                    if j >= 2:\n                        dp[j] = dp[j] or dp[j - 2]\n\n            for _ in range(c):\n                for j in range(half_duration, 2, -1):\n                    if j >= 3:\n                        dp[j] = dp[j] or dp[j - 3]\n\n            for i in range(half_duration, -1, -1):\n                if dp[i]:\n                    min_diff = total_duration - 2 * i\n                    results.append(min_diff)\n                    break\n\n        return results\n    ```\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases and large values for a, b, and c efficiently.\nrequirement pool:\n- Implement efficient algorithm to minimize concert duration difference\n- Ensure solution handles large input values seamlessly\n- Optimize for multiple test cases\n- Provide clear output format\n- Consider edge cases for minimal difference calculation\nWe will use a dynamic programming approach to solve the problem of distributing songs into two concerts such that the absolute difference in their durations is minimized. The problem can be reduced to a subset sum problem where we try to partition the total duration of songs into two subsets with minimal difference. Given the constraints, we will optimize the solution to handle large input values efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The absolute difference between two values is the non-negative difference, calculated as |x - y|, where x and y are the durations of the two concerts.\n\n    'distribute all songs'\n    Explanation: Every song must be assigned to one of the two concerts, ensuring no song is left out.\n\n    'minimal possible difference'\n    Explanation: The goal is to make the difference in total duration between the two concerts as small as possible.\n\n# [phrase showing quantity relationship]\n    'one minute', 'two minutes', 'three minutes'\n    Explanation: These phrases indicate the duration of each type of song. In code, this can be represented by multiplying the number of songs by their respective durations to calculate total time.\n\n# [degree adverb] \n    'minimal'\n    Explanation: This indicates that we need to find the smallest possible value for the difference in concert durations. In code, this can be implemented by iterating through possible distributions and keeping track of the smallest difference found.\n\n# [code logic]\n1. Calculate the total duration of all songs.\n2. Use a dynamic programming approach to find a subset of songs that can form a concert with a duration closest to half of the total duration.\n3. Calculate the difference between this subset's duration and the remaining songs' duration.\n4. Return the minimal difference found for each test case.\n\n# [edge case] \n    1 0 0 = 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n    \n    0 0 0 = 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0.\n    \n    1 1 1 = 0\n    Explanation: As explained in the example, distributing one one-minute and one two-minute song in one concert and a three-minute song in another results in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Specifically, handle cases where there are no songs (a = b = c = 0) by directly returning 0.\n    - Handle cases with only one type of song by directly calculating the difference based on their count and duration.\n\n```python\ndef minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        if total_duration == 0:\n            results.append(0)\n            continue\n        \n        # Dynamic programming approach to find minimal difference\n        half_duration = total_duration // 2\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        for _ in range(a):\n            for j in range(half_duration, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        for _ in range(b):\n            for j in range(half_duration, 1, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        for _ in range(c):\n            for j in range(half_duration, 2, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        max_possible = max(i for i in range(half_duration + 1) if dp[i])\n        min_difference = total_duration - 2 * max_possible\n        results.append(min_difference)\n    \n    return results\n```\n\n", "requirement analysis:\nThe main requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases efficiently, with each test case containing up to 10^9 songs of varying durations. The output should be the minimal possible difference for each test case.\nrequirement pool:\n- Efficiently calculate minimal difference in concert durations\n- Handle large input values without performance degradation\n- Provide clear output format for easy understanding\n- Ensure solution scalability for up to 1000 test cases\n- Optimize algorithm for faster processing\nWe will use a dynamic programming approach to solve this problem. The idea is to use a knapsack-like algorithm to distribute the songs into two concerts such that the absolute difference in their durations is minimized. This approach will efficiently handle the large input values and multiple test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is to minimize the absolute difference between the total durations of two concerts. This means the difference should be non-negative and as small as possible.\n\n    'distribute all songs'\n    Explanation: Every song must be assigned to one of the two concerts, ensuring no song is left out.\n\n# [phrase showing quantity relationship]\n    'one-minute, two-minute, three-minute'\n    Explanation: These phrases indicate the duration of each type of song. The implementation should consider these durations when calculating the total duration of each concert.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The goal is to achieve the smallest possible difference between the durations of the two concerts.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Use a dynamic programming approach to find a subset of songs that can be assigned to one concert such that the absolute difference between the two concerts is minimized.\n    3. Iterate over each test case and apply the dynamic programming solution to find the minimal difference.\n    4. Return the minimal difference for each test case.\n\n# [edge case]\n    Test case: 1 0 0 = 1\n    Explanation: With only one one-minute song, it must be assigned to one concert, resulting in a difference of 1 minute.\n\n    Test case: 0 0 0 = 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0.\n\n    Test case: 1000000000 1000000000 1000000000 = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between the two concerts, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0 and c == 0:\n            return 0\n        if a == 1 and b == 0 and c == 0:\n            return 1\n        # Implement dynamic programming logic for other cases.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases efficiently, with each test case containing up to 10^9 songs of varying durations. The algorithm should be optimized for performance and memory usage, ensuring accurate results across all test cases.\nrequirement pool:\n- Implement an efficient algorithm to minimize the difference in concert durations.\n- Ensure the solution handles large inputs within constraints.\n- Optimize the algorithm for performance and memory usage.\n- Provide clear input and output instructions.\n- Test the solution against edge cases and large datasets.\nWe will use a dynamic programming approach to solve this problem efficiently. The key idea is to calculate the total duration of all songs and then try to partition them into two subsets such that the difference between their sums is minimized. This is similar to the 'Partition Problem' which can be solved using a dynamic programming technique. Given the constraints, we will optimize the solution to handle large inputs efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concerts'\n    Explanation: In the requirement, concerts refer to two separate groups or sets of songs that Luntik wants to distribute his songs into. Each concert will have a total duration based on the sum of the durations of the songs included in it.\n\n    'absolute difference'\n    Explanation: This refers to the non-negative difference between the total durations of the two concerts. The goal is to minimize this difference.\n\n# [phrase showing quantity relationship]\n    'one minute', 'two minutes', 'three minutes'\n    Explanation: These phrases indicate the duration of each type of song. In code, this can be represented by multiplying the number of each type of song by its respective duration to calculate total durations.\n\n# [degree adverb]\n    'minimal'\n    Explanation: This indicates that the goal is to achieve the smallest possible absolute difference between the durations of the two concerts. In code, this involves finding a partition of songs that results in the smallest possible difference.\n\n# [code logic]\n1. Calculate the total duration of all songs.\n2. Use dynamic programming to determine if it's possible to achieve a certain sum with a subset of songs.\n3. Iterate over possible sums to find the one that results in the minimal absolute difference when compared to half of the total duration.\n4. For each test case, output the minimal possible difference.\n\n# [edge case]\n    1 0 0 = 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n\n    0 0 0 = 0\n    Explanation: With no songs, both concerts have a duration of 0, resulting in a difference of 0 minutes.\n\n    1 1 1 = 0\n    Explanation: As explained in the example, one possible distribution is a one-minute song and a two-minute song in one concert and a three-minute song in the other, resulting in a difference of 0 minutes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where there are no songs or only one type of song.\n```python\ndef minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        if total_duration == 0:\n            results.append(0)\n            continue\n        # Dynamic programming approach\n        dp = [False] * (total_duration // 2 + 1)\n        dp[0] = True\n        for count, duration in [(a, 1), (b, 2), (c, 3)]:\n            for _ in range(count):\n                for j in range(total_duration // 2, duration - 1, -1):\n                    dp[j] = dp[j] or dp[j - duration]\n        min_diff = float('inf')\n        for i in range(total_duration // 2 + 1):\n            if dp[i]:\n                min_diff = min(min_diff, abs(total_duration - 2 * i))\n        results.append(min_diff)\n    return results\n\n# Example usage:\nt = 4\ntest_cases = [(1, 1, 1), (2, 1, 3), (5, 5, 5), (1, 1, 2)]\nprint(minimal_difference(t, test_cases)) # Output: [0, 1, 0, 1]\n```\n", "requirement analysis:\nThe problem requires distributing songs into two concerts such that the absolute difference in their total durations is minimized. The solution must handle up to 1000 test cases efficiently, with each test case having up to 10^9 songs of each type. This requires an algorithm that can quickly compute the optimal distribution without iterating over all possible combinations.\nrequirement pool:\n- Implement an efficient algorithm to minimize the duration difference between two concerts.\n- Ensure the solution handles up to 1000 test cases efficiently.\n- Optimize the algorithm for large input sizes.\n- Provide clear and concise output for each test case.\n- Consider edge cases where one type of song is significantly more numerous.\nWe will use a greedy algorithm to distribute the songs into two concerts. The key idea is to balance the total duration of songs in each concert by considering the number of songs and their durations. We will calculate the total duration of all songs and aim to split them into two parts with minimal difference. This approach is efficient and simple, suitable for handling large input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is to minimize the absolute difference between the total durations of two concerts. This means the difference should be non-negative and as small as possible.\n\n    'duration'\n    Explanation: The duration of a concert is the sum of the durations of all songs included in that concert.\n\n# [phrase showing quantity relationship]\n    'one-minute, two-minute, three-minute'\n    Explanation: These phrases indicate the duration of each type of song. In code, this can be represented by multiplying the number of songs by their respective durations (1, 2, or 3).\n\n# [degree adverb]\n    'minimal'\n    Explanation: The goal is to achieve the smallest possible difference between the durations of the two concerts. This can be implemented by iteratively checking different distributions of songs and calculating the difference.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute songs into two concerts.\n    3. Aim to balance the total duration in each concert.\n    4. Calculate the absolute difference between the two concerts' durations.\n    5. Return the minimal difference for each test case.\n\n# [edge case]\n    Case 1: a = 0, b = 0, c = 0\n    Expected output: 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0.\n\n    Case 2: a = 1, b = 0, c = 0\n    Expected output: 1\n    Explanation: Only one song with a duration of 1 minute is present, so one concert will have a duration of 1 and the other will have a duration of 0, resulting in a difference of 1.\n\n    Case 3: a = 0, b = 1, c = 1\n    Expected output: 1\n    Explanation: One song with a duration of 2 minutes and one song with a duration of 3 minutes are present. The best distribution is one song in each concert, resulting in a difference of |2-3| = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic should be able to handle these cases by considering all possible distributions and calculating the minimal difference.\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution should efficiently handle up to 1000 test cases with large numbers of songs, ensuring quick computation and output.\nrequirement pool:\n- Efficiently calculate the minimal possible difference in concert durations.\n- Handle up to 1000 test cases with large input sizes.\n- Provide a user-friendly interface for input and output.\n- Ensure the application is responsive and accessible.\n- Include detailed output explanations for users.\nWe will use a greedy algorithm to distribute the songs into two concerts such that the absolute difference in their durations is minimized. The approach will involve calculating the total duration of all songs and then attempting to balance the concerts by distributing songs based on their durations. We will use Python's built-in capabilities to handle large numbers efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is to minimize the absolute difference between the total durations of two concerts. Absolute difference means the non-negative difference between two values, calculated as |x - y|.\n\n    'distribute all songs'\n    Explanation: Every song must be included in one of the two concerts, ensuring no song is left out.\n\n# [phrase showing quantity relationship]\n    'one-minute, two-minute, three-minute'\n    Explanation: These phrases indicate the duration of each type of song. The implementation should consider these durations when calculating the total duration of each concert.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The goal is to achieve the smallest possible absolute difference between the durations of the two concerts.\n\n# [code logic]\n1. Calculate the total duration of all songs.\n2. Initialize two variables to represent the duration of each concert.\n3. Use a greedy approach to distribute songs into two concerts:\n   - Start by adding songs with longer durations to balance the concerts.\n   - Adjust the distribution to minimize the absolute difference.\n4. Calculate and return the absolute difference between the two concert durations for each test case.\n\n# [edge case]\n    Input: 1 0 0\n    Expected Output: 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a duration difference of 1.\n\n    Input: 0 0 0\n    Expected Output: 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0.\n\n    Input: 1000000000 1000000000 1000000000\n    Expected Output: 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between the two concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy algorithm inherently considers all possible distributions to minimize the absolute difference.\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases and large values for a, b, and c efficiently.\nrequirement pool:\n- Implement efficient algorithm to minimize concert duration difference\n- Ensure solution scalability for large input values\n- Maintain consistent output format\n- Optimize for speed with multiple test cases\n- Provide clear documentation for the solution\nWe will use a dynamic programming approach to solve this problem efficiently. The idea is to use a knapsack-like algorithm to distribute the songs into two concerts such that the absolute difference in their durations is minimized. This approach is efficient and scalable for large input values, as it leverages the properties of the problem to reduce the computational complexity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The absolute difference between two values is the non-negative difference between them, calculated as |x - y|. In this context, it refers to the difference in total durations of the two concerts.\n    \n    'distribute all songs': This means every song must be assigned to one of the two concerts without any being left out.\n\n# [phrase showing quantity relationship]\n    'one minute', 'two minutes', 'three minutes': These phrases indicate the duration of each type of song. In code, this can be represented by multiplying the number of songs by their respective durations to calculate total time.\n\n# [degree adverb]\n    'minimal': This indicates that the goal is to achieve the smallest possible absolute difference between the durations of the two concerts. In code, this involves finding a distribution of songs that minimizes this difference.\n\n# [code logic]\n1. Calculate the total duration of all songs.\n2. Use a dynamic programming approach to determine if it's possible to achieve a certain sum of durations for one concert.\n3. Iterate over possible sums to find the one that results in the minimal absolute difference.\n4. For each test case, output the minimal possible difference.\n\n# [edge case]\n    1 0 0 = 1\n    Explanation: With only one one-minute song, it must be assigned to one concert, resulting in a difference of 1 minute.\n    \n    0 0 0 = 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0.\n    \n    1 1 1 = 0\n    Explanation: As explained in the example, distributing one one-minute and one two-minute song to one concert and a three-minute song to another results in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where there are no songs or only one type of song.\n    \n```python\ndef minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        if total_duration == 0:\n            results.append(0)\n            continue\n        # Initialize DP array\n        dp = [False] * (total_duration // 2 + 1)\n        dp[0] = True\n        \n        # Update DP array for each song type\n        for duration, count in [(1, a), (2, b), (3, c)]:\n            for _ in range(count):\n                for j in range(total_duration // 2, duration - 1, -1):\n                    dp[j] = dp[j] or dp[j - duration]\n        \n        # Find the minimal possible difference\n        for i in range(total_duration // 2, -1, -1):\n            if dp[i]:\n                min_diff = total_duration - 2 * i\n                results.append(min_diff)\n                break\n    \n    return results\n\n# Example usage:\nt = 4\ntest_cases = [(1, 1, 1), (2, 1, 3), (5, 5, 5), (1, 1, 2)]\nprint(minimal_difference(t, test_cases)) # Output: [0, 1, 0, 1]\n```\n"], "scores": [], "pass_results": [true, true, true, true, false, true, false, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 8, "round": 417, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "parent_index": 12}
