{"name": "1594_B. Special Numbers", "description": "Theofanis really likes sequences of positive integers, thus his teacher (Yeltsa Kcir) gave him a problem about a sequence that consists of only special numbers.\n\nLet's call a positive number special if it can be written as a sum of different non-negative powers of n. For example, for n = 4 number 17 is special, because it can be written as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to help him find the k-th special number if they are sorted in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]", "tags": ["bitmasks", "math"], "difficulty": 8, "id": 1594, "sample_io": [{"input": "3\n3 4\n2 12\n105 564\n", "output": ["9\n12\n3595374\n"]}], "test_list": [{"input": "3\n3 4\n2 6\n105 564\n", "output": ["9\n6\n3595374\n"]}, {"input": "3\n1 4\n2 6\n105 564\n", "output": ["1\n6\n3595374\n"]}, {"input": "3\n0 4\n2 6\n105 564\n", "output": ["0\n6\n3595374\n"]}, {"input": "3\n0 8\n0 6\n105 564\n", "output": ["0\n0\n3595374\n"]}, {"input": "3\n1 8\n0 6\n105 564\n", "output": ["1\n0\n3595374\n"]}, {"input": "3\n1 7\n0 6\n105 564\n", "output": ["3\n0\n3595374\n"]}, {"input": "3\n1 7\n0 6\n105 984\n", "output": ["3\n0\n713307087\n"]}, {"input": "3\n1 10\n0 6\n105 984\n", "output": ["2\n0\n713307087\n"]}, {"input": "3\n6 4\n2 12\n105 564\n", "output": ["36\n12\n3595374\n"]}, {"input": "3\n3 4\n2 1\n105 564\n", "output": ["9\n1\n3595374\n"]}, {"input": "3\n1 4\n2 6\n105 571\n", "output": ["1\n6\n4742080\n"]}, {"input": "3\n0 4\n2 6\n39 564\n", "output": ["0\n6\n452236824\n"]}, {"input": "3\n0 8\n2 6\n105 713\n", "output": ["0\n6\n257287716\n"]}, {"input": "3\n0 8\n0 6\n105 46\n", "output": ["0\n0\n763984296\n"]}, {"input": "3\n1 8\n0 6\n105 868\n", "output": ["1\n0\n312144741\n"]}, {"input": "3\n1 7\n0 6\n35 564\n", "output": ["3\n0\n692143895\n"]}, {"input": "3\n6 7\n2 12\n105 564\n", "output": ["43\n12\n3595374\n"]}, {"input": "3\n3 4\n2 1\n110 564\n", "output": ["9\n1\n745888270\n"]}, {"input": "3\n1 4\n3 6\n105 571\n", "output": ["1\n12\n4742080\n"]}, {"input": "3\n0 4\n0 6\n39 564\n", "output": ["0\n0\n452236824\n"]}, {"input": "3\n0 8\n2 12\n105 713\n", "output": ["0\n12\n257287716\n"]}, {"input": "3\n1 8\n1 6\n105 868\n", "output": ["1\n2\n312144741\n"]}, {"input": "3\n1 4\n0 6\n35 564\n", "output": ["1\n0\n692143895\n"]}, {"input": "3\n6 7\n2 12\n105 276\n", "output": ["43\n12\n456030397\n"]}, {"input": "3\n1 4\n2 6\n105 211\n", "output": ["1\n6\n258462631\n"]}, {"input": "3\n0 8\n2 12\n103 713\n", "output": ["0\n12\n134894835\n"]}, {"input": "3\n0 12\n0 6\n105 28\n", "output": ["0\n0\n122719275\n"]}, {"input": "3\n1 8\n1 6\n105 238\n", "output": ["1\n2\n900896196\n"]}, {"input": "3\n2 18\n0 2\n105 984\n", "output": ["18\n0\n713307087\n"]}, {"input": "3\n2 26\n0 10\n105 984\n", "output": ["26\n0\n713307087\n"]}, {"input": "3\n6 7\n2 20\n105 276\n", "output": ["43\n20\n456030397\n"]}, {"input": "3\n1 6\n2 6\n105 211\n", "output": ["2\n6\n258462631\n"]}, {"input": "3\n1 8\n2 12\n103 713\n", "output": ["1\n12\n134894835\n"]}, {"input": "3\n1 8\n2 6\n105 238\n", "output": ["1\n6\n900896196\n"]}, {"input": "3\n2 18\n0 2\n105 735\n", "output": ["18\n0\n378849471\n"]}, {"input": "3\n6 7\n2 6\n105 276\n", "output": ["43\n6\n456030397\n"]}, {"input": "3\n1 6\n2 6\n105 274\n", "output": ["2\n6\n456019477\n"]}, {"input": "3\n1 10\n2 12\n103 713\n", "output": ["2\n12\n134894835\n"]}, {"input": "3\n6 7\n2 6\n105 255\n", "output": ["43\n6\n22446815\n"]}, {"input": "3\n1 7\n2 6\n105 274\n", "output": ["3\n6\n456019477\n"]}, {"input": "3\n1 4\n3 6\n105 238\n", "output": ["1\n12\n900896196\n"]}, {"input": "3\n6 7\n2 1\n105 255\n", "output": ["43\n1\n22446815\n"]}, {"input": "3\n1 20\n2 4\n103 713\n", "output": ["2\n4\n134894835\n"]}, {"input": "3\n1 4\n4 6\n105 238\n", "output": ["1\n20\n900896196\n"]}, {"input": "3\n1 4\n5 6\n105 238\n", "output": ["1\n30\n900896196\n"]}, {"input": "3\n1 3\n2 4\n165 713\n", "output": ["2\n4\n58081920\n"]}, {"input": "3\n1 3\n2 7\n165 713\n", "output": ["2\n7\n58081920\n"]}, {"input": "3\n1 2\n2 6\n105 433\n", "output": ["1\n6\n260115562\n"]}, {"input": "3\n0 2\n2 6\n105 433\n", "output": ["0\n6\n260115562\n"]}, {"input": "3\n0 2\n2 6\n105 443\n", "output": ["0\n6\n261273292\n"]}, {"input": "3\n0 2\n2 6\n105 583\n", "output": ["0\n6\n214860566\n"]}, {"input": "3\n0 2\n2 7\n105 583\n", "output": ["0\n7\n214860566\n"]}, {"input": "3\n0 2\n2 12\n105 583\n", "output": ["0\n12\n214860566\n"]}, {"input": "3\n0 2\n2 12\n23 583\n", "output": ["0\n12\n300685298\n"]}, {"input": "3\n1 2\n2 12\n23 583\n", "output": ["1\n12\n300685298\n"]}, {"input": "3\n1 2\n2 12\n23 476\n", "output": ["1\n12\n864138587\n"]}, {"input": "3\n1 2\n3 12\n23 476\n", "output": ["1\n36\n864138587\n"]}, {"input": "3\n1 2\n3 12\n15 476\n", "output": ["1\n36\n745194836\n"]}, {"input": "3\n1 2\n3 12\n15 714\n", "output": ["1\n36\n625612499\n"]}, {"input": "3\n1 2\n3 12\n15 657\n", "output": ["1\n36\n614269110\n"]}, {"input": "3\n1 2\n3 8\n15 657\n", "output": ["1\n27\n614269110\n"]}, {"input": "3\n1 2\n3 8\n15 224\n", "output": ["1\n27\n183009375\n"]}, {"input": "3\n1 3\n3 8\n15 224\n", "output": ["2\n27\n183009375\n"]}, {"input": "3\n1 3\n1 8\n15 224\n", "output": ["2\n1\n183009375\n"]}, {"input": "3\n1 3\n1 8\n15 250\n", "output": ["2\n1\n183063390\n"]}, {"input": "3\n3 4\n2 17\n105 564\n", "output": ["9\n17\n3595374\n"]}, {"input": "3\n3 4\n2 6\n88 564\n", "output": ["9\n6\n950813808\n"]}, {"input": "3\n1 4\n3 6\n105 564\n", "output": ["1\n12\n3595374\n"]}, {"input": "3\n0 4\n2 6\n105 549\n", "output": ["0\n6\n882044757\n"]}, {"input": "3\n0 8\n1 6\n105 564\n", "output": ["0\n2\n3595374\n"]}, {"input": "3\n1 5\n0 6\n105 564\n", "output": ["2\n0\n3595374\n"]}, {"input": "3\n1 7\n0 6\n16 564\n", "output": ["3\n0\n720590628\n"]}, {"input": "3\n1 7\n0 6\n109 984\n", "output": ["3\n0\n669833413\n"]}, {"input": "3\n1 10\n0 10\n137 984\n", "output": ["2\n0\n172328490\n"]}, {"input": "3\n6 4\n2 12\n151 564\n", "output": ["36\n12\n532389654\n"]}, {"input": "3\n3 4\n2 1\n89 564\n", "output": ["9\n1\n901799978\n"]}, {"input": "3\n1 4\n2 6\n105 290\n", "output": ["1\n6\n97284386\n"]}, {"input": "3\n0 4\n2 6\n39 1030\n", "output": ["0\n6\n28210319\n"]}, {"input": "3\n0 8\n0 6\n105 75\n", "output": ["0\n0\n96788976\n"]}, {"input": "3\n0 10\n0 2\n105 984\n", "output": ["0\n0\n713307087\n"]}, {"input": "3\n6 7\n2 22\n105 564\n", "output": ["43\n22\n3595374\n"]}, {"input": "3\n1 8\n2 12\n105 713\n", "output": ["1\n12\n257287716\n"]}, {"input": "3\n0 12\n0 6\n209 46\n", "output": ["0\n0\n787390482\n"]}, {"input": "3\n1 8\n1 6\n80 868\n", "output": ["1\n2\n69536402\n"]}, {"input": "3\n1 6\n0 6\n35 564\n", "output": ["2\n0\n692143895\n"]}, {"input": "3\n1 26\n0 10\n105 1003\n", "output": ["3\n0\n354572102\n"]}, {"input": "3\n6 7\n2 17\n105 276\n", "output": ["43\n17\n456030397\n"]}, {"input": "3\n3 3\n4 1\n110 564\n", "output": ["4\n1\n745888270\n"]}, {"input": "3\n0 8\n2 16\n103 713\n", "output": ["0\n16\n134894835\n"]}, {"input": "3\n1 8\n1 6\n201 238\n", "output": ["1\n2\n436757470\n"]}, {"input": "3\n2 18\n1 2\n105 984\n", "output": ["18\n1\n713307087\n"]}, {"input": "3\n2 26\n1 10\n105 984\n", "output": ["26\n2\n713307087\n"]}, {"input": "3\n6 7\n4 20\n105 276\n", "output": ["43\n272\n456030397\n"]}, {"input": "3\n1 15\n2 12\n103 713\n", "output": ["4\n12\n134894835\n"]}, {"input": "3\n1 8\n2 4\n105 238\n", "output": ["1\n4\n900896196\n"]}, {"input": "3\n6 7\n0 6\n105 276\n", "output": ["43\n0\n456030397\n"]}, {"input": "3\n1 6\n2 6\n105 176\n", "output": ["2\n6\n925646821\n"]}, {"input": "3\n1 10\n2 12\n50 713\n", "output": ["2\n12\n861447554\n"]}, {"input": "3\n1 4\n2 6\n60 238\n", "output": ["1\n6\n793799738\n"]}, {"input": "3\n6 7\n2 6\n9 255\n", "output": ["43\n6\n5380840\n"]}, {"input": "3\n1 7\n2 6\n93 274\n", "output": ["3\n6\n132284969\n"]}, {"input": "3\n1 20\n2 12\n132 713\n", "output": ["2\n12\n320033969\n"]}, {"input": "3\n2 4\n3 6\n105 238\n", "output": ["4\n12\n900896196\n"]}, {"input": "3\n1 20\n2 1\n103 713\n", "output": ["2\n1\n134894835\n"]}, {"input": "3\n1 7\n4 6\n105 238\n", "output": ["3\n20\n900896196\n"]}, {"input": "3\n6 7\n3 1\n105 389\n", "output": ["43\n1\n375760428\n"]}, {"input": "3\n1 3\n2 4\n103 863\n", "output": ["2\n4\n586977111\n"]}, {"input": "3\n1 3\n2 4\n165 330\n", "output": ["2\n4\n846108753\n"]}, {"input": "3\n2 3\n2 7\n165 713\n", "output": ["3\n7\n58081920\n"]}, {"input": "3\n1 2\n2 6\n192 238\n", "output": ["1\n6\n77020973\n"]}, {"input": "3\n1 2\n2 6\n7 433\n", "output": ["1\n6\n6607553\n"]}, {"input": "3\n0 2\n2 6\n134 433\n", "output": ["0\n6\n333298828\n"]}, {"input": "3\n1 2\n2 6\n105 583\n", "output": ["1\n6\n214860566\n"]}, {"input": "3\n1 2\n2 7\n105 583\n", "output": ["1\n7\n214860566\n"]}, {"input": "3\n0 2\n2 12\n105 433\n", "output": ["0\n12\n260115562\n"]}, {"input": "3\n1 2\n2 12\n39 583\n", "output": ["1\n12\n878442964\n"]}, {"input": "3\n1 2\n4 12\n23 476\n", "output": ["1\n80\n864138587\n"]}, {"input": "3\n2 2\n3 12\n23 476\n", "output": ["2\n36\n864138587\n"]}, {"input": "3\n1 2\n4 12\n15 476\n", "output": ["1\n80\n745194836\n"]}, {"input": "3\n1 2\n3 12\n15 156\n", "output": ["1\n36\n170913600\n"]}, {"input": "3\n1 2\n3 16\n15 657\n", "output": ["1\n81\n614269110\n"]}, {"input": "3\n1 2\n5 8\n15 657\n", "output": ["1\n125\n614269110\n"]}, {"input": "3\n1 3\n3 8\n15 216\n", "output": ["2\n27\n182304000\n"]}, {"input": "3\n1 3\n2 8\n15 224\n", "output": ["2\n8\n183009375\n"]}, {"input": "3\n1 1\n1 8\n15 250\n", "output": ["1\n1\n183063390\n"]}, {"input": "3\n3 4\n2 17\n105 515\n", "output": ["9\n17\n119218296\n"]}, {"input": "3\n3 2\n2 6\n88 564\n", "output": ["3\n6\n950813808\n"]}, {"input": "3\n1 4\n3 6\n27 564\n", "output": ["1\n12\n612312689\n"]}, {"input": "3\n0 4\n3 6\n105 549\n", "output": ["0\n12\n882044757\n"]}, {"input": "3\n0 8\n1 6\n110 564\n", "output": ["0\n2\n745888270\n"]}, {"input": "3\n0 2\n0 6\n105 68\n", "output": ["0\n0\n95642270\n"]}, {"input": "3\n1 5\n0 6\n105 1004\n", "output": ["2\n0\n354583021\n"]}, {"input": "3\n1 7\n0 6\n21 564\n", "output": ["3\n0\n284320046\n"]}, {"input": "3\n1 10\n0 8\n105 1410\n", "output": ["2\n0\n893659373\n"]}, {"input": "3\n6 4\n2 12\n244 564\n", "output": ["36\n12\n472775977\n"]}, {"input": "3\n3 2\n2 1\n89 564\n", "output": ["3\n1\n901799978\n"]}, {"input": "3\n1 4\n2 6\n105 385\n", "output": ["1\n6\n375749403\n"]}, {"input": "3\n0 8\n3 8\n105 713\n", "output": ["0\n27\n257287716\n"]}, {"input": "3\n0 18\n1 10\n105 984\n", "output": ["0\n2\n713307087\n"]}, {"input": "3\n6 4\n2 22\n105 564\n", "output": ["36\n22\n3595374\n"]}, {"input": "3\n3 4\n3 1\n110 923\n", "output": ["9\n1\n300692073\n"]}, {"input": "3\n1 2\n6 6\n105 571\n", "output": ["1\n42\n4742080\n"]}, {"input": "3\n1 8\n2 15\n105 713\n", "output": ["1\n15\n257287716\n"]}, {"input": "3\n1 8\n1 6\n80 798\n", "output": ["1\n2\n690210344\n"]}, {"input": "3\n0 18\n0 2\n136 984\n", "output": ["0\n0\n313996483\n"]}, {"input": "3\n1 26\n1 10\n105 1003\n", "output": ["3\n2\n354572102\n"]}, {"input": "3\n6 7\n2 17\n105 194\n", "output": ["43\n17\n136912005\n"]}, {"input": "3\n1 1\n2 6\n105 81\n", "output": ["1\n6\n217181871\n"]}, {"input": "3\n0 8\n2 16\n103 658\n", "output": ["0\n16\n194064920\n"]}, {"input": "3\n1 8\n1 6\n201 445\n", "output": ["1\n2\n708509974\n"]}, {"input": "3\n2 18\n1 3\n105 984\n", "output": ["18\n2\n713307087\n"]}, {"input": "3\n6 10\n4 20\n105 276\n", "output": ["222\n272\n456030397\n"]}, {"input": "3\n1 9\n2 6\n74 211\n", "output": ["2\n6\n516663646\n"]}, {"input": "3\n1 19\n2 12\n103 713\n", "output": ["3\n12\n134894835\n"]}, {"input": "3\n1 8\n4 4\n105 238\n", "output": ["1\n16\n900896196\n"]}, {"input": "3\n9 7\n0 6\n105 276\n", "output": ["91\n0\n456030397\n"]}, {"input": "3\n1 6\n2 2\n105 176\n", "output": ["2\n2\n925646821\n"]}, {"input": "3\n1 10\n0 12\n50 713\n", "output": ["2\n0\n861447554\n"]}, {"input": "3\n1 4\n2 3\n60 238\n", "output": ["1\n3\n793799738\n"]}, {"input": "3\n6 7\n2 6\n9 205\n", "output": ["43\n6\n5315221\n"]}, {"input": "3\n1 7\n3 6\n93 274\n", "output": ["3\n12\n132284969\n"]}, {"input": "3\n1 20\n2 12\n132 818\n", "output": ["2\n12\n838210136\n"]}, {"input": "3\n4 4\n3 6\n105 238\n", "output": ["16\n12\n900896196\n"]}, {"input": "3\n1 20\n2 1\n103 372\n", "output": ["2\n1\n482792581\n"]}, {"input": "3\n1 7\n4 6\n105 182\n", "output": ["3\n20\n925657951\n"]}, {"input": "3\n1 3\n2 2\n165 330\n", "output": ["2\n2\n846108753\n"]}, {"input": "3\n1 1\n5 6\n198 238\n", "output": ["1\n30\n423451933\n"]}, {"input": "3\n2 3\n3 7\n165 713\n", "output": ["3\n13\n58081920\n"]}, {"input": "3\n1 2\n1 6\n192 238\n", "output": ["1\n2\n77020973\n"]}, {"input": "3\n1 2\n2 6\n7 749\n", "output": ["1\n6\n41311999\n"]}, {"input": "3\n0 2\n2 6\n268 433\n", "output": ["0\n6\n974641\n"]}, {"input": "3\n1 2\n2 6\n192 583\n", "output": ["1\n6\n590294341\n"]}, {"input": "3\n1 2\n2 7\n114 583\n", "output": ["1\n7\n365619380\n"]}, {"input": "3\n1 2\n1 12\n39 583\n", "output": ["1\n2\n878442964\n"]}, {"input": "3\n2 2\n3 4\n23 476\n", "output": ["2\n9\n864138587\n"]}, {"input": "3\n1 2\n4 12\n16 476\n", "output": ["1\n80\n580249828\n"]}, {"input": "3\n1 2\n2 12\n15 156\n", "output": ["1\n12\n170913600\n"]}, {"input": "3\n1 2\n3 16\n6 657\n", "output": ["1\n81\n10358929\n"]}, {"input": "3\n1 2\n5 11\n15 657\n", "output": ["1\n131\n614269110\n"]}, {"input": "3\n0 4\n3 8\n15 224\n", "output": ["0\n27\n183009375\n"]}, {"input": "3\n1 3\n6 8\n15 216\n", "output": ["2\n216\n182304000\n"]}, {"input": "3\n1 3\n2 8\n15 378\n", "output": ["2\n8\n575094626\n"]}, {"input": "3\n3 7\n2 17\n105 515\n", "output": ["13\n17\n119218296\n"]}, {"input": "3\n3 2\n2 6\n88 962\n", "output": ["3\n6\n799832816\n"]}, {"input": "3\n1 4\n3 6\n27 107\n", "output": ["1\n12\n401789107\n"]}, {"input": "3\n0 4\n4 6\n105 549\n", "output": ["0\n20\n882044757\n"]}, {"input": "3\n1 2\n0 6\n105 68\n", "output": ["1\n0\n95642270\n"]}, {"input": "3\n2 5\n0 6\n105 1004\n", "output": ["5\n0\n354583021\n"]}, {"input": "3\n4 4\n2 12\n244 564\n", "output": ["16\n12\n472775977\n"]}, {"input": "3\n1 4\n2 4\n105 385\n", "output": ["1\n4\n375749403\n"]}, {"input": "3\n0 2\n0 6\n39 1030\n", "output": ["0\n0\n28210319\n"]}, {"input": "3\n0 8\n3 8\n105 437\n", "output": ["0\n27\n260126587\n"]}, {"input": "3\n1 4\n0 2\n105 984\n", "output": ["1\n0\n713307087\n"]}, {"input": "3\n6 4\n0 22\n105 564\n", "output": ["36\n0\n3595374\n"]}, {"input": "3\n3 4\n3 1\n110 1290\n", "output": ["9\n1\n331570536\n"]}, {"input": "3\n1 2\n10 6\n105 571\n", "output": ["1\n110\n4742080\n"]}, {"input": "3\n1 14\n2 15\n105 713\n", "output": ["3\n15\n257287716\n"]}, {"input": "3\n1 26\n1 10\n129 1003\n", "output": ["3\n2\n286863200\n"]}, {"input": "3\n6 11\n2 17\n105 194\n", "output": ["223\n17\n136912005\n"]}, {"input": "3\n1 1\n0 6\n105 81\n", "output": ["1\n0\n217181871\n"]}], "task_id": "codecontest/52", "prompt": "Theofanis truly enjoys sequences of positive integers, thus his teacher (Yeltsa Kcir) assigned him a problem concerning a sequence composed solely of special numbers.\n\nLet's define a positive number as special if it can be expressed as a sum of distinct non-negative powers of n. For instance, consider n = 4. The number 17 is special. It can be represented as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to assist him in finding the k-th special number once they are arranged in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]", "repair_prompt": ["Theofanis truly enjoys sequences of positive integers, thus his teacher (Yeltsa Kcir) assigned him a problem concerning a sequence composed solely of special numbers.\n\nLet's define a positive number as special if it can be expressed as a sum of distinct non-negative powers of n. For instance, consider n = 4. The number 17 is special. It can be represented as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not.\n\nTheofanis asks you to assist him in finding the k-th special number once they are arranged in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]", "Theofanis truly enjoys sequences of positive integers, thus his teacher (Yeltsa Kcir) assigned him a problem concerning a sequence composed solely of special numbers.\n\nLet's define a positive number as special if it can be expressed as a sum of distinct non-negative powers of n. For instance, consider n = 4. The number 17 is special. It can indeed be represented as 4^0 + 4^2, which equals 1 + 16 and gives us 17. However, the number 9 is not considered special because it cannot be expressed in such a manner.\n\nTheofanis asks you to assist him in finding the k-th special number once they are arranged in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]", "Theofanis truly enjoys sequences of positive integers, thus his teacher (Yeltsa Kcir) assigned him a problem concerning a sequence composed solely of special numbers. Let's define a positive number as special if it can be expressed as a sum of distinct non-negative powers of n; for example, when n = 4, the number 17 is special because it can be represented as 4^0 + 4^2 = 1 + 16 = 17, but 9 is not. Theofanis asks you to assist him in finding the k-th special number once they are arranged in increasing order. Since this number may be too large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nMODULO = 10**9 + 7\n\ndef find_kth_special_number(test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Finds the k-th special number for each test case.\n\n    A special number is defined as a positive number that can be expressed as a sum\n    of distinct non-negative powers of a given integer n. The k-th special number\n    is the k-th number in the sequence of special numbers when they are arranged\n    in increasing order.\n\n    Args:\n        test_cases: A list of tuples, each containing two integers n and k.\n\n    Returns:\n        A list of integers, each representing the k-th special number modulo 10^9+7.\n    \"\"\"\n    results = []\n    for n, k in test_cases:\n        result = 0\n        power = 1\n        while k > 0:\n            if k & 1:\n                result = (result + power) % MODULO\n            power = (power * n) % MODULO\n            k >>= 1\n        results.append(result)\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input().strip())\n    test_cases = [tuple(map(int, input().strip().split())) for _ in range(t)]\n    results = find_kth_special_number(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nMOD = 10**9 + 7\n\ndef find_kth_special_number(test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Finds the k-th special number for each test case.\n\n    Args:\n        test_cases: A list of tuples, each containing two integers n and k.\n\n    Returns:\n        A list of integers, each representing the k-th special number modulo 10^9+7.\n    \"\"\"\n    results = []\n    for n, k in test_cases:\n        special_number = 0\n        power = 1\n        k -= 1  # Convert k to zero-based index\n        while k > 0:\n            if k % 2 == 1:\n                special_number = (special_number + power) % MOD\n            power = (power * n) % MOD\n            k //= 2\n        results.append((special_number + 1) % MOD)  # Add 1 for the first special number\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().strip().split())\n        test_cases.append((n, k))\n    \n    results = find_kth_special_number(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nMOD = 10**9 + 7\n\ndef find_kth_special_number(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Finds the k-th special number for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of tuples, each containing two integers n and k.\n\n    Returns:\n        A list of integers, each representing the k-th special number modulo 10^9+7.\n    \"\"\"\n    results = []\n    for n, k in test_cases:\n        special_number = 0\n        base = 1\n        k -= 1  # Convert k to zero-indexed\n        while k > 0:\n            if k % n != 0:\n                special_number = (special_number + base) % MOD\n            base = (base * n) % MOD\n            k //= n\n        special_number = (special_number + base) % MOD  # Add the last base for k=0\n        results.append(special_number)\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    \n    # Function call\n    results = find_kth_special_number(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nMODULO = 10**9 + 7\n\ndef find_kth_special_number(test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Find the k-th special number for each test case.\n\n    Args:\n        test_cases: A list of tuples, each containing two integers n and k.\n\n    Returns:\n        A list of integers representing the k-th special number modulo 10^9+7 for each test case.\n    \"\"\"\n    results = []\n    for n, k in test_cases:\n        special_number = calculate_special_number(n, k)\n        results.append(special_number)\n    return results\n\ndef calculate_special_number(n: int, k: int) -> int:\n    \"\"\"Calculate the k-th special number for a given base n.\n\n    Args:\n        n: The base number.\n        k: The position in the sequence of special numbers.\n\n    Returns:\n        The k-th special number modulo 10^9+7.\n    \"\"\"\n    special_number = 0\n    power = 0\n    while k > 0:\n        if k % 2 == 1:\n            special_number = (special_number + pow(n, power, MODULO)) % MODULO\n        k //= 2\n        power += 1\n    return special_number\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        test_cases.append((n, k))\n    \n    results = find_kth_special_number(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nMOD = 10**9 + 7\n\ndef find_kth_special_number(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Find the k-th special number for each test case.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing two integers n and k.\n\n    Returns:\n        A list of integers representing the k-th special number modulo 10^9+7 for each test case.\n    \"\"\"\n    results = []\n    for n, k in test_cases:\n        special_number = calculate_special_number(n, k)\n        results.append(special_number)\n    return results\n\ndef calculate_special_number(n: int, k: int) -> int:\n    \"\"\"Calculate the k-th special number for given n and k.\n\n    Args:\n        n: The base number.\n        k: The position in the sequence of special numbers.\n\n    Returns:\n        The k-th special number modulo 10^9+7.\n    \"\"\"\n    special_number = 0\n    power = 0\n    while k > 0:\n        if k % 2 == 1:\n            special_number = (special_number + pow(n, power, MOD)) % MOD\n        k //= 2\n        power += 1\n    return special_number\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        test_cases.append((n, k))\n    \n    results = find_kth_special_number(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nMOD = 10**9 + 7\n\ndef find_kth_special_number(test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Find the k-th special number for each test case.\n\n    Args:\n        test_cases: A list of tuples, each containing two integers n and k.\n\n    Returns:\n        A list of integers, each representing the k-th special number modulo 10^9+7.\n    \"\"\"\n    results = []\n    for n, k in test_cases:\n        # Generate special numbers using binary representation\n        special_numbers = []\n        i = 0\n        while len(special_numbers) < k:\n            num = 0\n            power = 1\n            j = i\n            while j > 0:\n                if j % 2 == 1:\n                    num += power\n                power *= n\n                j //= 2\n            special_numbers.append(num)\n            i += 1\n        \n        # Sort and retrieve the k-th special number modulo MOD\n        special_numbers.sort()\n        results.append(special_numbers[k-1] % MOD)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = find_kth_special_number(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nMODULO = 10**9 + 7\n\ndef find_kth_special_number(test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Find the k-th special number for each test case.\n\n    Args:\n        test_cases: A list of tuples, each containing two integers n and k.\n\n    Returns:\n        A list of integers representing the k-th special number modulo 10^9+7 for each test case.\n    \"\"\"\n    results = []\n    for n, k in test_cases:\n        special_number = 0\n        power = 1\n        while k > 0:\n            if k % n != 0:\n                special_number = (special_number + power) % MODULO\n            k //= n\n            power = (power * n) % MODULO\n        results.append(special_number)\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = find_kth_special_number(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nMOD = 10**9 + 7\n\ndef find_kth_special_number(test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Finds the k-th special number for each test case.\n\n    A special number is defined as a positive integer that can be expressed\n    as a sum of distinct non-negative powers of n. The function calculates\n    the k-th special number modulo 10^9+7.\n\n    Args:\n        test_cases: A list of tuples, each containing two integers n and k.\n\n    Returns:\n        A list of integers, each representing the k-th special number modulo 10^9+7.\n    \"\"\"\n    results = []\n    for n, k in test_cases:\n        special_number = 0\n        power = 1\n        while k > 0:\n            if k % 2 == 1:\n                special_number = (special_number + power) % MOD\n            power = (power * n) % MOD\n            k //= 2\n        results.append(special_number)\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().strip().split())\n        test_cases.append((n, k))\n    \n    results = find_kth_special_number(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nMODULO = 10**9 + 7\n\ndef find_kth_special_number(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Finds the k-th special number for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of tuples, each containing two integers n and k.\n\n    Returns:\n        A list of integers, each representing the k-th special number modulo 10^9+7.\n    \"\"\"\n    results = []\n    for n, k in test_cases:\n        special_number = 0\n        power = 1\n        k -= 1  # Convert k to zero-based index\n        while k > 0:\n            if k % n != 0:\n                special_number = (special_number + power) % MODULO\n            power = (power * n) % MODULO\n            k //= n\n        special_number = (special_number + power) % MODULO  # Add the n^0 term\n        results.append(special_number)\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = find_kth_special_number(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nMODULO = 10**9 + 7\n\ndef find_kth_special_number(t: int, test_cases: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Compute the k-th special number for each test case.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing two integers n and k.\n\n    Returns:\n        A list of integers representing the k-th special number modulo 10^9+7 for each test case.\n    \"\"\"\n    results = []\n    for n, k in test_cases:\n        special_number = 0\n        power = 1\n        while k > 0:\n            if k % 2 == 1:\n                special_number = (special_number + power) % MODULO\n            power = (power * n) % MODULO\n            k //= 2\n        results.append(special_number)\n    return results\n\ndef main():\n    \"\"\"Main function to read input, compute results, and print them.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    \n    # Call the function and print results\n    results = find_kth_special_number(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires computing the k-th special number for given n and k values. The special number is defined as a sum of distinct non-negative powers of n. The solution must handle up to 10,000 test cases and large values of n and k efficiently, ensuring results are output modulo 10^9+7.\nrequirement pool:\n- Implement an efficient algorithm to compute the k-th special number.\n- Ensure the solution handles large inputs for n and k.\n- Optimize the algorithm for speed and memory usage.\n- Provide clear and correct output formatting.\n- Include comprehensive test cases to validate the solution.\nWe will use a mathematical approach to generate the k-th special number by considering the binary representation of k. Each bit in the binary representation corresponds to a power of n, which allows us to efficiently compute the sum of distinct non-negative powers of n. This approach ensures that we handle large values of n and k efficiently. We will use Python's built-in capabilities for handling large integers and modular arithmetic to ensure the results are correct and within the constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'special number'\n    Explanation: A special number is defined as a positive number that can be expressed as a sum of distinct non-negative powers of a given integer n. For example, if n = 4, the number 17 is special because it can be represented as 4^0 + 4^2 = 1 + 16 = 17.\n\n    'k-th special number'\n    Explanation: This refers to the k-th number in the sequence of special numbers when they are arranged in increasing order.\n\n# [phrase showing quantity relationship]\n    'sum of distinct non-negative powers'\n    Explanation: This means that each power of n can be used at most once in the sum to form a special number. In code, this can be implemented by iterating over the binary representation of k and using each bit to determine whether to include a corresponding power of n in the sum.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the integers n and k.\n2. Initialize a variable to store the result of the k-th special number.\n3. Convert k to its binary representation.\n4. Iterate over each bit in the binary representation:\n   - If the bit is set (1), add the corresponding power of n to the result.\n5. Since the result can be large, take modulo 10^9+7 at each step to ensure it fits within constraints.\n6. Output the result for each test case.\n\n# [edge case]\n    Test case: (n=2, k=1) = 1\n    Explanation: The first special number for n=2 is 2^0 = 1.\n\n    Test case: (n=2, k=2) = 2\n    Explanation: The second special number for n=2 is 2^1 = 2.\n\n    Test case: (n=10^9, k=1) = 1\n    Explanation: The first special number for any n is always 1, as it corresponds to n^0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of using binary representation and modular arithmetic inherently handles these cases correctly.\n", "requirement analysis:\nThe problem requires finding the k-th special number for given n, where a special number is defined as a sum of distinct non-negative powers of n. The solution must handle up to 10,000 test cases and large values of n and k efficiently, ensuring results are computed modulo 10^9+7.\nrequirement pool:\n- Efficient computation of k-th special number\n- Handle large input values for n and k\n- Output results modulo 10^9+7\n- Support multiple test cases\n- Optimize for minimal computational overhead\nWe will use a binary representation approach to solve the problem. Each special number can be represented as a sum of distinct powers of n, which is analogous to representing numbers in base-n. The k-th special number is essentially the k-th number in base-n, where each digit is either 0 or 1. This approach is efficient and handles large values of n and k well. We will use Python's built-in capabilities to handle large integers and perform modulo operations to ensure results are within the required range.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'special number'\n    Explanation: A special number is defined as a positive integer that can be expressed as a sum of distinct non-negative powers of n. For example, for n = 4, the number 17 is special because it can be represented as 4^0 + 4^2 = 1 + 16 = 17.\n\n    'k-th special number'\n    Explanation: This refers to the k-th number in the sequence of special numbers when arranged in increasing order.\n\n# [phrase showing quantity relationship]\n    'sum of distinct non-negative powers'\n    Explanation: This means that each special number is formed by adding different powers of n, where each power is used at most once. In code, this can be implemented by iterating over powers of n and checking combinations.\n\n# [degree adverb]\n    'increasing order'\n    Explanation: The sequence of special numbers should be sorted from smallest to largest. This implies that when generating or accessing these numbers, they should be considered in sorted order.\n\n# [code logic]\n1. Read the number of test cases, t.\n2. For each test case, read the integers n and k.\n3. For each test case, determine the k-th special number:\n   - Convert k-1 to its base-n representation, where each digit is either 0 or 1.\n   - Calculate the sum of n raised to the power of each position where there is a 1 in the base-n representation.\n   - Take the result modulo 10^9+7.\n4. Output the result for each test case.\n\n# [edge case]\n    Edge Case 1: n = 2, k = 1\n    Expected Output: 1\n    Explanation: The first special number for any n is always 1 (n^0).\n\n    Edge Case 2: n = 10^9, k = 1\n    Expected Output: 1\n    Explanation: Even for large n, the first special number is always 1.\n\n    Edge Case 3: n = 2, k = 10^9\n    Expected Output: (calculated value modulo 10^9+7)\n    Explanation: This tests the upper limit of k and ensures that the code handles large numbers efficiently.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of converting k-1 to base-n and summing powers of n inherently handles all edge cases by design.\n", "requirement analysis:\nThe task requires finding the k-th special number for given n, where a special number is defined as a sum of distinct non-negative powers of n. The solution must handle up to 10,000 test cases and large values of n and k efficiently, outputting results modulo 10^9+7.\nrequirement pool:\n- Efficient algorithm to compute k-th special number\n- Handle large input values for n and k\n- Output results modulo 10^9+7\n- Support multiple test cases\n- Optimize for both time and space complexity\nWe will use a binary representation approach to determine the k-th special number. Each special number can be represented as a sum of distinct powers of n, which is analogous to representing numbers in base-n. By converting k-1 to its base-n representation, we can determine the k-th special number by interpreting each digit as a power of n. This approach is efficient and handles large values of n and k effectively. We will use Python's built-in capabilities for handling large integers and modular arithmetic to ensure the results are computed modulo 10^9+7.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'special number'\n    Explanation: A special number is defined as a positive integer that can be expressed as a sum of distinct non-negative powers of n. For example, if n = 4, the number 17 is special because it can be represented as 4^0 + 4^2 = 1 + 16 = 17.\n\n    'k-th special number'\n    Explanation: This refers to the k-th number in the sequence of special numbers when they are arranged in increasing order.\n\n# [phrase showing quantity relationship]\n    'sum of distinct non-negative powers'\n    Explanation: This means that each special number is formed by adding together different powers of n, where each power is used at most once.\n\n# [degree adverb]\n    'increasing order'\n    Explanation: The sequence of special numbers is sorted from smallest to largest.\n\n# [code logic]\n1. For each test case, read the integers n and k.\n2. Convert k-1 to its base-n representation. This is because the sequence is zero-indexed in terms of powers.\n3. Interpret each digit in this base-n representation as a power of n and sum these powers to get the k-th special number.\n4. Compute the result modulo 10^9+7 to handle large numbers.\n5. Output the result for each test case.\n\n# [edge case]\n    Edge Case 1: n = 2, k = 1\n    Expected Output: 1\n    Explanation: The first special number for n=2 is 2^0 = 1.\n\n    Edge Case 2: n = 10^9, k = 1\n    Expected Output: 1\n    Explanation: The first special number for any n is always 1, as it corresponds to n^0.\n\n    Edge Case 3: n = 2, k = 10^9\n    Expected Output: (a large number modulo 10^9+7)\n    Explanation: This tests the upper limit of k and ensures that the code handles large values correctly.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of converting k-1 to base-n and summing the powers inherently handles all cases, including edge cases.\n", "requirement analysis:\nThe requirement is to compute the k-th special number for given n, where a special number is defined as a sum of distinct non-negative powers of n. The solution must handle up to 10,000 test cases efficiently, with n and k values as large as 10^9. The output must be modulo 10^9+7 to manage large numbers.\nrequirement pool:\n- Efficient computation of special numbers\n- Handle large input values for n and k\n- Ensure output is modulo 10^9+7\n- Support multiple test cases\n- Provide clear and formatted output\nWe will use a binary representation approach to solve this problem. The k-th special number in base n can be represented as the binary representation of k, where each bit represents a power of n. This approach is efficient because it directly maps the problem to a binary counting problem, which is computationally simple and fast. We will use Python's built-in capabilities to handle large integers and perform modular arithmetic to ensure results are within the required constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'special number'\n    Explanation: A special number is defined as a positive integer that can be expressed as a sum of distinct non-negative powers of a given base n.\n\n    'k-th special number'\n    Explanation: The k-th special number refers to the k-th number in the sequence of special numbers when arranged in increasing order.\n\n# [phrase showing quantity relationship]\n    'sum of distinct non-negative powers'\n    Explanation: This means that each power of n can be used at most once in the sum to form a special number. In code, this can be implemented by using binary representation where each bit represents whether a particular power of n is included in the sum.\n\n# [degree adverb] \n    'increasing order'\n    Explanation: The sequence of special numbers should be sorted from smallest to largest. This implies that when generating or accessing these numbers, they should be considered in their natural numerical order.\n\n# [code logic]\n1. For each test case, read the integers n and k.\n2. Convert k to its binary representation.\n3. Interpret this binary representation as a sum of distinct powers of n.\n4. Calculate the resulting number and take modulo 10^9+7 to ensure it fits within the required constraints.\n5. Output the result for each test case.\n\n# [edge case] \n    (2, 1) = 1\n    Explanation: The first special number for any n is always 1, as it corresponds to n^0.\n    \n    (2, 2) = 2\n    Explanation: The second special number for n=2 is 2, which corresponds to 2^1.\n    \n    (10^9, 1) = 1\n    Explanation: Even for very large n, the first special number is always 1, corresponding to n^0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of using binary representation inherently handles these cases by correctly mapping powers of n based on the binary digits of k.\n", "requirement analysis:\nThe requirement is to compute the k-th special number for given n efficiently, considering constraints on n and k. The solution must handle large inputs and provide results modulo 10^9+7.\nrequirement pool:\n- Efficient computation of special numbers\n- Scalability for large values of n and k\n- Accurate results modulo 10^9+7\n- Support for multiple test cases\n- User-friendly input/output format\nWe will use a binary representation approach to determine the k-th special number. Each special number can be represented as a sum of distinct powers of n, which is analogous to representing numbers in base-n. The k-th special number can be found by interpreting the binary representation of k as a base-n number. This approach is efficient and scalable for large values of n and k.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'special number'\n    Explanation: A special number is defined as a positive integer that can be expressed as a sum of distinct non-negative powers of n.\n\n    'modulo 10^9+7'\n    Explanation: This is a common technique used to prevent overflow and ensure numbers remain manageable in size. It requires taking the remainder when dividing by 10^9+7.\n\n# [phrase showing quantity relationship]\n    'k-th': Refers to the position of the special number in the sequence when arranged in increasing order. In code, this means finding the k-th element in a sorted list of special numbers.\n\n# [degree adverb]\n    'increasing order': This indicates that the sequence of special numbers should be sorted from smallest to largest.\n\n# [code logic]\n    1. For each test case, read the values of n and k.\n    2. Use the binary representation of k to determine which powers of n are included in the sum to form the k-th special number.\n    3. Convert the binary representation into a base-n number by summing the distinct powers of n.\n    4. Return the result modulo 10^9+7.\n\n# [edge case]\n    Input: 2 1\n    Output: 1\n    Explanation: The first special number for n=2 is 2^0 = 1.\n\n    Input: 10^9 1\n    Output: 1\n    Explanation: The first special number for n=10^9 is 10^9^0 = 1.\n\n    Input: 2 10^9\n    Output: (calculated value modulo 10^9+7)\n    Explanation: The k-th special number for large k will be calculated using the binary representation approach and returned modulo 10^9+7.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles large values of n and k by using binary representation and modulo operation.\n", "requirement analysis:\nThe problem requires calculating the k-th special number for given n and k values. A special number is defined as a sum of distinct non-negative powers of n. The solution must handle up to 10,000 test cases and large values of n and k efficiently, outputting results modulo 10^9+7.\nrequirement pool:\n- Efficient algorithm to compute k-th special number\n- Handle large input sizes for n and k\n- Output results modulo 10^9+7\n- Ensure correct input/output format\n- Optimize for performance and memory usage\nWe will use a mathematical approach to generate special numbers by considering the binary representation of numbers. Each special number can be represented as a sum of distinct powers of n, which corresponds to the binary representation of numbers. We will use Python's built-in capabilities to handle large integers and modular arithmetic efficiently. The algorithm will generate the k-th special number by iterating through numbers and checking their binary representation to form sums of distinct powers of n.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'special number'\n    Explanation: A special number is defined as a positive integer that can be expressed as a sum of distinct non-negative powers of a given base n. For example, for n = 4, the number 17 is special because it can be represented as 4^0 + 4^2.\n\n    'k-th special number'\n    Explanation: This refers to the k-th number in the sequence of special numbers when they are arranged in increasing order.\n\n# [phrase showing quantity relationship]\n    'sum of distinct non-negative powers'\n    Explanation: This means that each special number is formed by adding different powers of n, where each power is used at most once. In code, this can be implemented by iterating over possible powers of n and checking combinations.\n\n# [degree adverb]\n    'increasing order'\n    Explanation: The sequence of special numbers should be sorted from smallest to largest. This implies that when generating or selecting the k-th special number, the sequence must be ordered.\n\n# [code logic]\n1. Parse the input to get the number of test cases t.\n2. For each test case, read the values of n and k.\n3. Use a loop to generate special numbers by considering binary representations:\n   - For each number, convert it to binary.\n   - Use the binary digits to determine which powers of n to sum.\n   - Calculate the sum and check if it forms a special number.\n4. Store special numbers in a list and sort them.\n5. Retrieve the k-th special number from the sorted list.\n6. Output the k-th special number modulo 10^9+7.\n\n# [edge case]\n    Edge Case 1: n = 2, k = 1 = 1\n    Explanation: The smallest special number for any n is always 1 (n^0).\n\n    Edge Case 2: n = 10^9, k = 1 = 1\n    Explanation: Even for large n, the smallest special number is still 1.\n\n    Edge Case 3: n = 2, k = 10^9\n    Explanation: This tests the upper limit of k. The expected output would be a large number modulo 10^9+7.\n\n# [extra code for edge case]\n    We need extra code to handle large values of n and k efficiently.\n    - Use efficient algorithms to generate and store only necessary special numbers.\n    - Implement modular arithmetic to handle large numbers and prevent overflow.\n\n```python\nMOD = 10**9 + 7\n\ndef find_kth_special_number(n, k):\n    # Generate special numbers using binary representation\n    special_numbers = []\n    i = 0\n    while len(special_numbers) < k:\n        num = 0\n        power = 1\n        j = i\n        while j > 0:\n            if j % 2 == 1:\n                num += power\n            power *= n\n            j //= 2\n        special_numbers.append(num)\n        i += 1\n    \n    # Sort and return the k-th special number modulo MOD\n    special_numbers.sort()\n    return special_numbers[k-1] % MOD\n\n# Example usage for multiple test cases\nt = int(input())\nfor _ in range(t):\n    n, k = map(int, input().split())\n    print(find_kth_special_number(n, k))\n```\n", "requirement analysis:\nThe requirement is to compute the k-th special number for given n, where a special number is defined as a sum of distinct non-negative powers of n. The solution must handle up to 10,000 test cases efficiently and output results modulo 10^9+7. The challenge lies in efficiently generating and sorting these numbers for large values of n and k.\nrequirement pool:\n- Efficient algorithm to compute special numbers\n- Handle large values of n and k\n- Output results modulo 10^9+7\n- Format output correctly for multiple test cases\n- Ensure robustness and error handling\nWe will use a binary representation approach to determine the k-th special number. Each special number can be represented as a sum of distinct powers of n, which is analogous to representing numbers in base-n. By converting k to its base-n representation, we can directly determine the k-th special number. This approach is efficient and scales well with large values of n and k. We will use Python's built-in capabilities for handling large integers and modular arithmetic to ensure results are computed modulo 10^9+7.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'special number'\n    Explanation: A special number is defined as a positive integer that can be expressed as a sum of distinct non-negative powers of n. This means that for a given base n, a special number is formed by adding different powers of n, each used at most once.\n\n    'k-th special number'\n    Explanation: This refers to the k-th number in the sequence of special numbers when arranged in increasing order.\n\n# [phrase showing quantity relationship]\n    'sum of distinct non-negative powers'\n    Explanation: This means that each special number is formed by adding different powers of n, where each power is used only once. In code, this can be implemented by iterating over powers of n and checking combinations that sum up to the desired number.\n\n# [degree adverb]\n    'increasing order'\n    Explanation: The sequence of special numbers should be sorted from smallest to largest. This implies that when generating or accessing the k-th special number, the sequence must be ordered.\n\n# [code logic]\n1. Parse the input to get the number of test cases t.\n2. For each test case, read the integers n and k.\n3. Convert k to its base-n representation to determine the k-th special number.\n4. Calculate the sum of distinct powers of n based on the base-n representation.\n5. Return the result modulo 10^9+7 for each test case.\n\n# [edge case]\n    Edge Case 1: n = 2, k = 1\n    Expected Output: 1\n    Explanation: The first special number when n=2 is 2^0 = 1.\n\n    Edge Case 2: n = 10^9, k = 1\n    Expected Output: 1\n    Explanation: The first special number for any n is always 1 (n^0).\n\n    Edge Case 3: n = 3, k = 10^9\n    Expected Output: (calculated value modulo 10^9+7)\n    Explanation: This tests the upper limit of k and ensures that the code handles large values efficiently.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for converting k to its base-n representation and calculating the sum of distinct powers inherently handles these cases.\n", "requirement analysis:\nThe problem requires finding the k-th special number for given n, where a special number is defined as a sum of distinct non-negative powers of n. The solution must handle up to 10^4 test cases and large values of n and k efficiently. The result should be output modulo 10^9+7 to handle large numbers.\nrequirement pool:\n- Efficient algorithm to compute k-th special number.\n- Handle large input values for n and k.\n- Ensure results are accurate with modulo operation.\n- Optimize for performance to handle up to 10^4 test cases.\n- Provide clear and concise output format.\nWe will use a binary representation approach to solve this problem. Each special number can be represented as a sum of distinct powers of n, which is analogous to representing numbers in base-n. The k-th special number can be found by converting k to its base-n representation and interpreting it as a sum of powers of n. This approach is efficient and handles large values of n and k well. We will use Python's built-in capabilities for handling large integers and perform modulo operations to ensure results fit within the constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'special number'\n    Explanation: A special number is defined as a positive integer that can be expressed as a sum of distinct non-negative powers of n.\n\n    'modulo 10^9+7'\n    Explanation: The result should be given modulo 10^9+7 to ensure it fits within the constraints of typical competitive programming problems.\n\n# [phrase showing quantity relationship]\n    'k-th': Refers to finding the k-th number in a sequence, which implies an ordered list and accessing the k-th element.\n    Implementation: Use indexing or iteration to access the k-th element in a sequence.\n\n# [degree adverb]\n    'increasing order': Indicates that the sequence of special numbers should be sorted in ascending order.\n    Implementation: Ensure the sequence is generated or maintained in sorted order.\n\n# [code logic]\n    - Convert k to its base-n representation.\n    - Interpret this representation as a sum of distinct powers of n.\n    - Calculate the sum and apply modulo 10^9+7 to the result.\n    - Repeat for each test case.\n\n# [edge case]\n    Edge Case 1: (n=2, k=1) = 1\n    Explanation: The smallest special number when n=2 is 2^0 = 1.\n\n    Edge Case 2: (n=10^9, k=1) = 1\n    Explanation: Even with a large n, the smallest special number is still 1 (n^0).\n\n    Edge Case 3: (n=2, k=10^9) = large number modulo 10^9+7\n    Explanation: For large k, the k-th special number will be large, requiring modulo operation.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles large values and modulo operations.\n", "requirement analysis:\nThe requirement is to compute the k-th special number for given values of n and k, where a special number is defined as a sum of distinct non-negative powers of n. The solution must handle up to 10,000 test cases efficiently and provide results modulo 10^9+7.\nrequirement pool:\n- Efficient computation of special numbers\n- Handling large values of n and k\n- Output results modulo 10^9+7\n- Ensure solution passes all test cases\n- Optimize for performance\nWe will use a binary representation approach to determine the k-th special number. Each special number can be represented as a sum of distinct powers of n, which is analogous to representing numbers in base-n. By converting k-1 to its base-n representation, we can determine the k-th special number by interpreting each digit as a power of n. This approach is efficient and handles large values of n and k effectively. We will use Python's built-in capabilities for handling large integers and modular arithmetic to ensure results are computed modulo 10^9+7.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'special number'\n    Explanation: A special number is defined as a positive integer that can be expressed as a sum of distinct non-negative powers of n. For example, for n = 4, the number 17 is special because it can be represented as 4^0 + 4^2 = 1 + 16 = 17.\n\n    'k-th special number'\n    Explanation: This refers to the k-th number in the sequence of special numbers when arranged in increasing order.\n\n# [phrase showing quantity relationship]\n    'sum of distinct non-negative powers'\n    Explanation: This means that each special number is formed by adding different powers of n, where each power is used at most once. In code, this can be implemented by iterating over powers of n and checking combinations.\n\n# [degree adverb]\n    'increasing order'\n    Explanation: The sequence of special numbers should be sorted from smallest to largest. This implies that when generating or accessing the k-th special number, the sequence must be ordered.\n\n# [code logic]\n1. For each test case, read the integers n and k.\n2. Convert k-1 to its base-n representation. This representation will guide which powers of n to sum to form the k-th special number.\n3. Initialize a variable to store the special number.\n4. Iterate over each digit in the base-n representation:\n   - If the digit is 1, add the corresponding power of n to the special number.\n5. Compute the result modulo 10^9+7 to handle large numbers.\n6. Output the result for each test case.\n\n# [edge case]\n    Edge Case 1: (n=2, k=1) = 1\n    Explanation: The first special number for any n is always 1, as it corresponds to n^0.\n\n    Edge Case 2: (n=10^9, k=1) = 1\n    Explanation: Even for very large n, the first special number remains 1.\n\n    Edge Case 3: (n=2, k=10^9) = (result modulo 10^9+7)\n    Explanation: This tests the upper limit of k and ensures that the code handles large values efficiently.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of converting k-1 to base-n and summing powers of n inherently handles these cases.\n", "requirement analysis:\nThe requirement is to compute the k-th special number for given n, where a special number is defined as a sum of distinct non-negative powers of n. The solution must handle up to 10,000 test cases efficiently, with n and k values as large as 10^9. The output should be modulo 10^9+7 to manage large numbers.\nrequirement pool:\n- Efficient computation of special numbers\n- Handle large values of n and k\n- Output results modulo 10^9+7\n- Support multiple test cases\n- Ensure robust error handling\nWe will use a mathematical approach to generate special numbers efficiently. The key is to understand that each special number can be represented as a sum of distinct powers of n. We will use a binary representation of numbers to determine which powers of n to include in the sum. This approach allows us to compute the k-th special number directly without generating all previous special numbers, ensuring efficiency even for large values of n and k. We will use Python's built-in capabilities for handling large integers and modular arithmetic to ensure results are within the constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'special number'\n    Explanation: A special number is defined as a positive integer that can be expressed as a sum of distinct non-negative powers of a given number n. For example, if n = 4, the number 17 is special because it can be represented as 4^0 + 4^2 = 1 + 16 = 17.\n\n    'k-th special number'\n    Explanation: This refers to the k-th number in the sequence of special numbers when they are arranged in increasing order.\n\n# [phrase showing quantity relationship]\n    'sum of distinct non-negative powers'\n    Explanation: This means that each special number is formed by adding different powers of n, where each power is used at most once. In code, this can be implemented by iterating over the binary representation of numbers to decide which powers to include.\n\n# [degree adverb]\n    'increasing order'\n    Explanation: The sequence of special numbers should be sorted from smallest to largest. This implies that when generating or selecting the k-th special number, the sequence must be ordered.\n\n# [code logic]\n1. For each test case, read the values of n and k.\n2. Use a loop to iterate over numbers starting from 0.\n3. For each number, convert it to its binary representation.\n4. Calculate the sum of distinct powers of n based on the binary representation.\n5. Keep track of how many special numbers have been found.\n6. Once the k-th special number is found, compute it modulo 10^9+7 and store the result.\n7. Output the result for each test case.\n\n# [edge case]\n    Edge Case 1: n = 2, k = 1\n    Expected Output: 1\n    Explanation: The first special number for n = 2 is 2^0 = 1.\n\n    Edge Case 2: n = 10^9, k = 1\n    Expected Output: 1\n    Explanation: The first special number for any n is always 1 (n^0).\n\n    Edge Case 3: n = 2, k = 10^9\n    Expected Output: (a large number modulo 10^9+7)\n    Explanation: This tests the efficiency and correctness of handling large k values.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of using binary representation to determine which powers to include in the sum inherently handles all cases, including edge cases.\n"], "scores": [], "pass_results": [true, false, true, false, false, false, true, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 452, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first and only line of each test case contains two integers n and k (2 \u2264 n \u2264 10^9; 1 \u2264 k \u2264 10^9).\n\nOutput\n\nFor each test case, print one integer \u2014 the k-th special number in increasing order modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n3 4\n2 12\n105 564\n\n\nOutput\n\n\n9\n12\n3595374\n\nNote\n\nFor n = 3 the sequence is [1,3,4,9...]", "mutate_method": "rephrase_one", "parent_index": 262}
