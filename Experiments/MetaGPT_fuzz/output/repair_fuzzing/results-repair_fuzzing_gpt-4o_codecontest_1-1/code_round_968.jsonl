{"name": "1607_A. Linear Keyboard", "description": "You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "tags": ["implementation", "strings"], "difficulty": 7, "id": 1607, "sample_io": [{"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}], "test_list": [{"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjmnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanc\n", "output": ["166\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjkcanj\n", "output": ["157\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n70\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nbbdes\n", "output": ["17\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n6\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeeb\n", "output": ["25\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjlcanj\n", "output": ["159\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["13\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n68\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "1\naycdefbhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n52\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadfb\n", "output": ["27\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n50\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzywwsutvrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["171\n"]}, {"input": "1\nzgxovudsrqpcnljklihyfetwba\nsedba\n", "output": ["48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n50\n0\n35\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdea\n", "output": ["38\n"]}, {"input": "1\nzywwsutvrqponmlcjihgfedkba\njnacljnajcsnackncasca\n", "output": ["173\n"]}, {"input": "1\nzgxwdutsrqponmjklihbfeucya\nsfdba\n", "output": ["50\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n6\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["153\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n50\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naasccnkianscjanjlcanb\n", "output": ["163\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdfa\n", "output": ["39\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n49\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naatccnkianscjanjlcanb\n", "output": ["165\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccanb\n", "output": ["147\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n54\n6\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n80\n0\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n36\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofecod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n69\n18\n74\n"]}, {"input": "1\nabcdefyhilkjmponsrwtuvqxhz\nbedsa\n", "output": ["33\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngdlln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n36\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwfrtyuhopasdfghjklzxcvbnm\nabcabab\n", "output": ["14\n0\n54\n6\n65\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n18\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\nteaae\n", "output": ["23\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n65\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\naacddfghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzxcvbnj\nabacaba\n", "output": ["15\n0\n80\n0\n74\n"]}, {"input": "1\naccdehgsilkilnopqqftuvwxxz\nseaae\n", "output": ["11\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponmlkjihgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n6\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n24\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n15\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nrqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n27\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nzqxwvutsryponmlkiihgfedcba\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n80\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n82\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdllo\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n82\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n80\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacaa\n", "output": ["15\n0\n80\n15\n24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhlelo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["21\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacjkjanscnanjlcanb\n", "output": ["169\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n3\n74\n"]}, {"input": "1\nabcdefghijklmonpqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["170\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncoacljnajcsnajkncasca\n", "output": ["168\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n18\n61\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeea\n", "output": ["26\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanscjanjlcanj\n", "output": ["200\n"]}, {"input": "1\nnbcdefyhilkjmaopqrstuvwxgz\nsfdba\n", "output": ["29\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforbes\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n70\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwerbyuiopasdfghjklzxcvtnm\nabacaba\n", "output": ["12\n0\n68\n18\n46\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n18\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncatca\n", "output": ["161\n"]}, {"input": "5\nzyxwvutsrqponmakjihgfedcbl\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["19\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["12\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\ncsdea\n", "output": ["36\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nkelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["18\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuuterqponmjklihbfsdcya\nsfdba\n", "output": ["12\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjldanb\n", "output": ["195\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdae\n", "output": ["40\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabbcaba\n", "output": ["11\n0\n68\n18\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnzpqrstuvwxyo\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n106\n18\n74\n"]}, {"input": "1\nzyxwjvtsrqponmlkvihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["211\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbscfa\n", "output": ["41\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n18\n74\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlnlhe\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\neholl\nabcdefghijklmnopqrstuvwyyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n49\n0\n35\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljihgfedcba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n68\n24\n52\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnlleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofedod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n67\n18\n74\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccana\n", "output": ["148\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nbbacaba\n", "output": ["11\n0\n68\n18\n61\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseeqofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n63\n18\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeefoqcse\nqwertyujnpasdfghjklzxcvbnn\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n78\n0\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\naeate\n", "output": ["42\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmlfh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["10\n0\n65\n18\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmelh\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["20\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhem\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["17\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdsfghzjmlmnopqretuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n53\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcsf\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n79\n6\n74\n"]}, {"input": "1\nzxxwvutfqqponlekljshhiccca\nteaae\n", "output": ["30\n"]}, {"input": "1\nztxwvuxfqqponlikcjshieccma\neaaet\n", "output": ["28\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdlln\naacddfghmjklinopqrstuvvxyz\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["14\n0\n82\n15\n26\n"]}, {"input": "1\narcdeffhilkjmnopqbstuvwxyz\nabdes\n", "output": ["46\n"]}, {"input": "1\nzyxwvutsrqponclkjihgeedmba\nacsacnkjanscjanjlcanc\n", "output": ["144\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n9\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nccacljnajcsnajknoasca\n", "output": ["146\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnnjcacaska\n", "output": ["145\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n24\n61\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabababa\n", "output": ["14\n0\n68\n0\n78\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanrcjanjlcanj\n", "output": ["198\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhdllo\nabcdezghijklmnopqrstuvwxyf\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["15\n0\n68\n0\n48\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nabdes\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxzz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdfs\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabcdefyhilkjlnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nabcdefyhilkhmnopqrstuvwxjz\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabodefyhilkjlncpqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedaa\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbedsa\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadeb\n", "output": ["25\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrqpnomhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabwdefyhilkjlncpqrstuvoxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcnnajkscasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\naedsb\n", "output": ["37\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nzgxwvutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\nzgxovutsrqpcnljklihyfedwba\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvvxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabeet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsroponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzyxwvutsrqponljklihgfedcba\nabeet\n", "output": ["19\n"]}], "task_id": "codecontest/98", "prompt": "You should implement a function that takes the keyboard layout and the word s as inputs. The function should then process these inputs accordingly. It returns the total time needed to type the word on the keyboard.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "repair_prompt": ["You should implement a function that takes the keyboard layout and the word s as inputs. The function should then process these inputs accordingly. It returns the total time needed to type the word on the keyboard.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "You should implement a function that takes the keyboard layout and the word s as inputs. The function should then process these inputs. It should do so accordingly. It returns the total time needed to type the word on the keyboard.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "You should implement a function that takes the keyboard layout and the word s as inputs, processing these inputs accordingly. It returns the total time needed to type the word on the keyboard.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_typing_time(test_cases: List[Tuple[str, str]]) -> List[int]:\n    \"\"\"Calculate the minimal typing time for each test case.\n\n    Args:\n        test_cases: A list of tuples, each containing a keyboard layout and a word.\n\n    Returns:\n        A list of integers representing the minimal typing time for each test case.\n    \"\"\"\n    results = []\n    for keyboard, word in test_cases:\n        # Create a mapping from character to its position on the keyboard\n        char_to_index = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize total typing time\n        total_time = 0\n        \n        # Calculate the typing time for the word\n        for i in range(1, len(word)):\n            total_time += abs(char_to_index[word[i]] - char_to_index[word[i - 1]])\n        \n        # Append the result for the current test case\n        results.append(total_time)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    n = int(input().strip())\n    test_cases = []\n    \n    # Read each test case\n    for _ in range(n):\n        keyboard = input().strip()\n        word = input().strip()\n        test_cases.append((keyboard, word))\n    \n    # Calculate typing times\n    results = calculate_typing_time(test_cases)\n    \n    # Print results\n    for result in results:\n        print(result)\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_typing_time(test_cases: List[Tuple[str, str]]) -> List[int]:\n    \"\"\"Calculate the minimal typing time for each test case based on the given keyboard layout.\n\n    Args:\n        test_cases: A list of tuples, each containing a keyboard layout and a word.\n\n    Returns:\n        A list of integers representing the minimal typing time for each test case.\n    \"\"\"\n    results = []\n    \n    for keyboard, word in test_cases:\n        # Create a dictionary to map each character to its position on the keyboard\n        char_position = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize total typing time\n        total_time = 0\n        \n        # Iterate through the word to calculate typing time\n        for i in range(1, len(word)):\n            # Calculate the distance between consecutive characters\n            distance = abs(char_position[word[i]] - char_position[word[i - 1]])\n            total_time += distance\n        \n        # Append the result for the current test case\n        results.append(total_time)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input().strip())\n    test_cases = []\n    \n    # Read each test case\n    for _ in range(t):\n        keyboard = input().strip()\n        word = input().strip()\n        test_cases.append((keyboard, word))\n    \n    # Calculate typing times for all test cases\n    results = calculate_typing_time(test_cases)\n    \n    # Print results for each test case\n    for result in results:\n        print(result)\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(t: int, test_cases: list[tuple[str, str]]) -> list[int]:\n    \"\"\"Calculate the minimal typing time for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of tuples, each containing a keyboard layout and a word.\n\n    Returns:\n        A list of integers representing the minimal typing time for each test case.\n    \"\"\"\n    results = []\n    \n    for keyboard, word in test_cases:\n        # Create a dictionary to map each character to its position on the keyboard\n        char_position = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize total typing time\n        total_time = 0\n        \n        # Calculate the typing time for the word\n        for i in range(1, len(word)):\n            # Calculate the distance between consecutive characters\n            distance = abs(char_position[word[i]] - char_position[word[i - 1]])\n            total_time += distance\n        \n        # Append the result for the current test case\n        results.append(total_time)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input().strip())\n    test_cases = []\n    \n    for _ in range(t):\n        keyboard = input().strip()\n        word = input().strip()\n        test_cases.append((keyboard, word))\n    \n    results = calculate_typing_time(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_typing_time(test_cases: List[Tuple[str, str]]) -> List[int]:\n    \"\"\"Calculate the minimal typing time for each test case.\n\n    Args:\n        test_cases: A list of tuples, each containing a keyboard layout and a word.\n\n    Returns:\n        A list of integers representing the minimal typing time for each test case.\n    \"\"\"\n    results = []\n    \n    for keyboard, word in test_cases:\n        # Create a dictionary to map each character to its position on the keyboard\n        char_position = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize total time to 0\n        total_time = 0\n        \n        # Calculate the typing time for the word\n        for i in range(1, len(word)):\n            # Get the positions of the current and previous characters\n            current_pos = char_position[word[i]]\n            previous_pos = char_position[word[i - 1]]\n            \n            # Add the absolute difference to the total time\n            total_time += abs(current_pos - previous_pos)\n        \n        # Append the result for this test case\n        results.append(total_time)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        keyboard = input().strip()\n        word = input().strip()\n        test_cases.append((keyboard, word))\n    \n    # Output interface\n    results = calculate_typing_time(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_typing_time(test_cases: List[Tuple[str, str]]) -> List[int]:\n    \"\"\"Calculate the minimal typing time for each test case.\n\n    Args:\n        test_cases: A list of tuples, each containing a keyboard layout and a word.\n\n    Returns:\n        A list of integers representing the minimal typing time for each test case.\n    \"\"\"\n    results = []\n    for keyboard, word in test_cases:\n        # Create a mapping from character to its position on the keyboard\n        char_to_index = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize total time to zero\n        total_time = 0\n        \n        # Calculate the typing time for the word\n        for i in range(1, len(word)):\n            # Get the positions of consecutive characters\n            prev_char_pos = char_to_index[word[i - 1]]\n            curr_char_pos = char_to_index[word[i]]\n            \n            # Calculate the absolute difference and add to total time\n            total_time += abs(curr_char_pos - prev_char_pos)\n        \n        # Append the result for the current test case\n        results.append(total_time)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input().strip())\n    test_cases = []\n    \n    # Read each test case\n    for _ in range(t):\n        keyboard = input().strip()\n        word = input().strip()\n        test_cases.append((keyboard, word))\n    \n    # Calculate typing times\n    results = calculate_typing_time(test_cases)\n    \n    # Print results for each test case\n    for result in results:\n        print(result)\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_typing_time(test_cases: List[Tuple[str, str]]) -> List[int]:\n    \"\"\"Calculate the minimal typing time for each test case.\n\n    Args:\n        test_cases: A list of tuples, each containing a keyboard layout and a word.\n\n    Returns:\n        A list of integers representing the minimal typing time for each word.\n    \"\"\"\n    results = []\n    \n    for keyboard, word in test_cases:\n        # Create a dictionary to map each character to its index in the keyboard layout\n        char_to_index = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize total typing time for the current word\n        total_time = 0\n        \n        # Iterate through the word to calculate the typing time\n        for i in range(1, len(word)):\n            # Calculate the index difference between consecutive characters\n            total_time += abs(char_to_index[word[i]] - char_to_index[word[i - 1]])\n        \n        # Append the result for the current test case\n        results.append(total_time)\n    \n    return results\n\n# Input interface\ndef main():\n    number_of_cases = int(input().strip())\n    test_cases = []\n    \n    for _ in range(number_of_cases):\n        keyboard = input().strip()\n        word = input().strip()\n        test_cases.append((keyboard, word))\n    \n    # Output interface\n    results = calculate_typing_time(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_typing_time(test_cases: List[Tuple[str, str]]) -> List[int]:\n    \"\"\"Calculate the minimal typing time for each test case based on a custom keyboard layout.\n\n    Args:\n        test_cases (List[Tuple[str, str]]): A list of tuples where each tuple contains a keyboard layout\n                                            and a word to be typed.\n\n    Returns:\n        List[int]: A list of integers representing the minimal typing time for each test case.\n    \"\"\"\n    results = []\n    \n    for keyboard, word in test_cases:\n        # Create a dictionary to map each character to its position on the keyboard\n        position_map = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize total typing time\n        total_time = 0\n        \n        # Calculate the typing time for the word\n        for i in range(1, len(word)):\n            # Calculate the absolute difference in positions between consecutive characters\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        # Append the result for the current test case\n        results.append(total_time)\n    \n    return results\n\n# Input interface\ndef main():\n    n = int(input().strip())\n    test_cases = []\n    for _ in range(n):\n        keyboard = input().strip()\n        word = input().strip()\n        test_cases.append((keyboard, word))\n    \n    # Output interface\n    results = calculate_typing_time(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_typing_time(test_cases: List[Tuple[str, str]]) -> List[int]:\n    \"\"\"Calculate the minimal typing time for each test case.\n\n    Args:\n        test_cases: A list of tuples, each containing a keyboard layout and a word.\n\n    Returns:\n        A list of integers representing the minimal typing time for each test case.\n    \"\"\"\n    results = []\n    for keyboard, word in test_cases:\n        # Create a dictionary to map each character to its index in the keyboard layout\n        char_to_index = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize total typing time for the current word\n        total_time = 0\n        \n        # Calculate the typing time by summing the absolute differences between indices\n        for i in range(1, len(word)):\n            total_time += abs(char_to_index[word[i]] - char_to_index[word[i - 1]])\n        \n        # Append the result for the current test case\n        results.append(total_time)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input().strip())\n    test_cases = []\n    \n    for _ in range(t):\n        keyboard = input().strip()\n        word = input().strip()\n        test_cases.append((keyboard, word))\n    \n    results = calculate_typing_time(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_typing_time(test_cases: List[Tuple[str, str]]) -> List[int]:\n    \"\"\"Calculate the minimal typing time for each test case.\n\n    Args:\n        test_cases: A list of tuples, each containing a keyboard layout and a word.\n\n    Returns:\n        A list of integers representing the minimal typing time for each test case.\n    \"\"\"\n    results = []\n    \n    for keyboard, word in test_cases:\n        # Create a dictionary to map each character to its position in the keyboard layout\n        position_map = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize total typing time\n        total_time = 0\n        \n        # Calculate the typing time for the word\n        for i in range(1, len(word)):\n            # Calculate the distance between consecutive characters\n            distance = abs(position_map[word[i]] - position_map[word[i - 1]])\n            total_time += distance\n        \n        # Append the result for the current test case\n        results.append(total_time)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        keyboard = input().strip()\n        word = input().strip()\n        test_cases.append((keyboard, word))\n    \n    # Output interface\n    results = calculate_typing_time(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_typing_time(test_cases: List[Tuple[str, str]]) -> List[int]:\n    \"\"\"Calculate the minimal typing time for each test case.\n\n    Args:\n        test_cases (List[Tuple[str, str]]): A list of tuples where each tuple contains\n                                            a keyboard layout and a word.\n\n    Returns:\n        List[int]: A list of integers representing the minimal typing time for each test case.\n    \"\"\"\n    results = []\n    \n    for keyboard, word in test_cases:\n        # Create a dictionary to map each character to its position on the keyboard\n        position_map = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize total typing time\n        total_time = 0\n        \n        # Calculate the typing time for the word\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        # Append the result for this test case\n        results.append(total_time)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    n = int(input().strip())\n    test_cases = []\n    \n    # Read each test case\n    for _ in range(n):\n        keyboard = input().strip()\n        word = input().strip()\n        test_cases.append((keyboard, word))\n    \n    # Calculate results\n    results = calculate_typing_time(test_cases)\n    \n    # Output results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe function needs to efficiently calculate the typing time based on the given keyboard layout and word. It should handle up to 1000 test cases and ensure accurate results for each. The function must be optimized for performance, especially when dealing with edge cases such as maximum word length and varying keyboard layouts.\nrequirement pool:\n- Implement function to calculate typing time based on keyboard layout\n- Ensure function handles up to 1000 test cases efficiently\n- Optimize performance for edge cases\n- Provide clear output format\n- Include error handling for invalid inputs\nWe will implement a function that calculates the typing time based on the given keyboard layout and word. The function will map each character to its position on the keyboard layout and compute the total time by summing the absolute differences between consecutive characters' positions. This approach ensures efficient handling of up to 1000 test cases. We will use Python's built-in functions and data structures to optimize performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: This refers to the specific arrangement of letters on the keyboard, which determines the position of each letter.\n\n    'minimal time'\n    Explanation: This means calculating the least amount of time required to type the word based on the given keyboard layout.\n\n# [phrase showing quantity relationship]\n    'length 26': The keyboard string is exactly 26 characters long, representing each letter of the alphabet once.\n    \n    'length from 1 to 50': The word s can have a length ranging from 1 to 50 characters.\n\n# [degree adverb]\n    'minimal': This indicates that we need to find the smallest possible time to type the word, which involves calculating the shortest path between consecutive letters on the keyboard.\n\n# [code logic]\n1. Parse the number of test cases, t.\n2. For each test case:\n   - Read the keyboard layout and map each character to its index position.\n   - Read the word s.\n   - Initialize a variable to keep track of the total typing time.\n   - For each character in the word (except the first one), calculate the absolute difference in positions between consecutive characters and add it to the total time.\n3. Print the total time for each test case.\n\n# [edge case]\n    Test case 1: \n    Input: \n    1\n    abcdefghijklmnopqrstuvwxyz\n    a\n    Output: \n    0\n    Explanation: The word consists of a single character, so no movement is needed, resulting in zero time.\n\n    Test case 2:\n    Input: \n    1\n    zyxwvutsrqponmlkjihgfedcba\n    zzzzz\n    Output: \n    0\n    Explanation: All characters are the same, so no movement is needed between them, resulting in zero time.\n\n    Test case 3:\n    Input: \n    1\n    qwertyuiopasdfghjklzxcvbnm\n    qwerty\n    Output: \n    25\n    Explanation: The positions are consecutive on this keyboard layout, so the total time is calculated by summing up the differences between consecutive positions.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating absolute differences between consecutive character positions will naturally handle these cases.\n", "requirement analysis:\nThe function must efficiently calculate the typing time based on the given keyboard layout and word. It should handle up to 1000 test cases and ensure accurate results for each. The output format must strictly follow the example provided, ensuring compatibility with automated testing systems.\nrequirement pool:\n- Implement the main function to calculate typing time\n- Ensure the function handles up to 1000 test cases efficiently\n- Optimize the function for performance\n- Validate input data for correctness\n- Provide detailed error messages for invalid inputs\nWe will implement a function that calculates the typing time for a given word based on a custom keyboard layout. The function will iterate through each character of the word, calculate the distance between consecutive characters on the keyboard, and sum these distances to get the total typing time. The function will handle multiple test cases efficiently by processing each test case independently. We will use Python's built-in capabilities to handle string operations and indexing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: This refers to the specific arrangement of letters on the keyboard, which affects the typing time based on the distance between consecutive letters.\n\n    'minimal time'\n    Explanation: This means calculating the least amount of time required to type the word based on the given keyboard layout.\n\n# [phrase showing quantity relationship]\n    'length from 1 to 50'\n    Explanation: The word can have a length anywhere between 1 and 50 characters. In code, this can be checked using conditions like `1 <= len(s) <= 50`.\n\n# [degree adverb] \n    'minimal'\n    Explanation: This indicates that we need to calculate the smallest possible time to type the word, which involves summing up the distances between consecutive characters on the keyboard.\n\n# [code logic]\n1. Parse the number of test cases `t`.\n2. For each test case:\n   - Read the keyboard layout and store the position of each character in a dictionary for quick lookup.\n   - Read the word `s`.\n   - Initialize a variable to keep track of the total typing time.\n   - Iterate through each character in the word `s`:\n     - Calculate the distance between the current character and the previous character using their positions from the dictionary.\n     - Add this distance to the total typing time.\n   - Print the total typing time for each test case.\n\n# [edge case] \n    Test case 1: \n    Input: \n    ```\n    1\n    abcdefghijklmnopqrstuvwxyz\n    a\n    ```\n    Output: \n    ```\n    0\n    ```\n    Explanation: The word consists of a single character, so no movement is needed, resulting in a typing time of 0.\n\n    Test case 2: \n    Input: \n    ```\n    1\n    zyxwvutsrqponmlkjihgfedcba\n    az\n    ```\n    Output: \n    ```\n    25\n    ```\n    Explanation: The distance from 'a' to 'z' on this reversed keyboard is 25.\n\n    Test case 3: \n    Input: \n    ```\n    1\n    qwertyuiopasdfghjklzxcvbnm\n    qqqqqqqqqq\n    ```\n    Output: \n    ```\n    0\n    ```\n    Explanation: All characters are the same, so no movement is needed, resulting in a typing time of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating distances between consecutive characters will naturally handle these cases.\n", "requirement analysis:\nThe function needs to efficiently calculate the typing time for a given word based on a custom keyboard layout. The main challenge is to ensure the function can handle up to 1000 test cases and words of varying lengths, while maintaining accuracy and performance.\nrequirement pool:\n- Implement the main function to calculate typing time based on keyboard layout.\n- Ensure the function handles up to 1000 test cases efficiently.\n- Optimize the function for performance with varying word lengths.\n- Include error handling for invalid inputs.\n- Provide detailed documentation and examples for users.\nWe will implement a function that calculates the typing time for a given word based on a custom keyboard layout. The function will iterate through each character of the word, calculate the distance between consecutive characters on the keyboard, and sum these distances to get the total typing time. The function will handle up to 1000 test cases efficiently by using a dictionary to map each character to its position on the keyboard, allowing for O(1) access time.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: The keyboard layout is a string of length 26, representing the arrangement of letters from 'a' to 'z'. Each letter appears exactly once, and the layout determines the position of each letter on the keyboard.\n\n    'typing time'\n    Explanation: Typing time refers to the total time required to type a word based on the distances between consecutive characters on the given keyboard layout.\n\n# [phrase showing quantity relationship]\n    'minimal time'\n    Explanation: The requirement is to calculate the minimal time needed to type the word, which involves summing the distances between consecutive characters on the keyboard.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Parse the number of test cases, t.\n2. For each test case:\n   - Read the keyboard layout and map each character to its index position using a dictionary.\n   - Read the word s.\n   - Initialize a variable to store the total typing time.\n   - Iterate through each character in the word s, calculate the distance between consecutive characters using their positions from the dictionary, and add this distance to the total typing time.\n3. Print the total typing time for each test case.\n\n# [edge case]\n    Test case with a single character word:\n    Input: \n    1\n    qwertyuiopasdfghjklzxcvbnm\n    a\n    Expected output: 0\n    Explanation: Since there is only one character, no typing movement is needed, resulting in a typing time of 0.\n\n    Test case with repeated characters:\n    Input:\n    1\n    qwertyuiopasdfghjklzxcvbnm\n    qqqqq\n    Expected output: 0\n    Explanation: All characters are the same, so no movement is needed between them, resulting in a typing time of 0.\n\n    Test case with maximum length word:\n    Input:\n    1\n    qwertyuiopasdfghjklzxcvbnm\n    abcdefghijklmnopqrstuvwxyz\n    Expected output: 25\n    Explanation: Each consecutive character requires a movement of 1 position, resulting in a total typing time of 25.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by calculating distances based on character positions.\n", "requirement analysis:\nThe function needs to efficiently calculate the time taken to type a word based on a custom keyboard layout. It should handle up to 1000 test cases, with each test case consisting of a unique keyboard layout and a word. The function must ensure accurate results and be optimized for performance, especially with the maximum input sizes.\nrequirement pool:\n- Implement the function to calculate typing time based on keyboard layout.\n- Ensure the function handles up to 1000 test cases efficiently.\n- Optimize the function for performance with large input sizes.\n- Test the function with edge cases like single-letter words.\n- Provide detailed error messages for invalid inputs.\nWe will implement a function that calculates the typing time based on a custom keyboard layout. The function will map each character to its position on the keyboard layout and compute the total time by summing the absolute differences between consecutive characters' positions in the word. This approach ensures efficient calculation even for the maximum input sizes. We will use Python's built-in data structures for optimal performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: This refers to the specific arrangement of letters on the keyboard, which determines the position of each letter.\n\n    'minimal time'\n    Explanation: This means calculating the least amount of time required to type the word based on the given keyboard layout.\n\n# [phrase showing quantity relationship]\n    'length from 1 to 50'\n    Explanation: The word can have a length ranging from 1 to 50 characters. In code, this can be checked using a condition like `1 <= len(s) <= 50`.\n\n    't (1 \u2264 t \u2264 1000)'\n    Explanation: The number of test cases is between 1 and 1000. This can be implemented in code by iterating over the range of `t`.\n\n# [degree adverb]\n    'minimal'\n    Explanation: This indicates that we need to find the smallest possible time to type the word. In code, this involves calculating the sum of absolute differences between positions of consecutive characters.\n\n# [code logic]\n1. Parse the number of test cases `t`.\n2. For each test case:\n   - Read the keyboard layout and map each character to its index.\n   - Read the word `s`.\n   - Initialize a variable to store the total time.\n   - Iterate through the word `s` and calculate the time by summing up the absolute differences between positions of consecutive characters.\n   - Print the total time for each test case.\n\n# [edge case]\n    Test case 1: \n    Input: \n    ```\n    1\n    abcdefghijklmnopqrstuvwxyz\n    a\n    ```\n    Output: \n    ```\n    0\n    ```\n    Explanation: The word consists of a single character, so no movement is needed, resulting in zero time.\n\n    Test case 2:\n    Input:\n    ```\n    1\n    zyxwvutsrqponmlkjihgfedcba\n    az\n    ```\n    Output:\n    ```\n    25\n    ```\n    Explanation: The keyboard is reversed, so moving from 'a' to 'z' requires moving across all other letters, resulting in a time of 25.\n\n    Test case 3:\n    Input:\n    ```\n    1\n    qwertyuiopasdfghjklzxcvbnm\n    qwerty\n    ```\n    Output:\n    ```\n    5\n    ```\n    Explanation: The word is typed in sequence as per the keyboard layout, so each move is one step apart, resulting in a total time of 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the sum of absolute differences between positions will handle these cases correctly.\n", "requirement analysis:\nThe requirement is to create a function that calculates the time needed to type a word based on a given keyboard layout. The function must handle multiple test cases efficiently, with each test case consisting of a unique keyboard layout and a word. The solution should be optimized for performance, especially considering the constraints of up to 1000 test cases and word lengths up to 50 characters.\nrequirement pool:\n- Implement the function to calculate typing time based on keyboard layout.\n- Ensure the function handles up to 1000 test cases efficiently.\n- Optimize the function for performance with large input sizes.\n- Validate input to ensure it meets the specified constraints.\n- Provide detailed error messages for invalid inputs.\nWe will implement a function that calculates the typing time based on a given keyboard layout and a word. The function will map each character to its position on the keyboard layout and compute the total time by summing the absolute differences between consecutive characters' positions. This approach ensures efficient handling of up to 1000 test cases using simple arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: This refers to the specific arrangement of letters on the keyboard, which determines the position of each letter.\n\n    'minimal time'\n    Explanation: This means calculating the least amount of time required to type the word based on the given keyboard layout.\n\n# [phrase showing quantity relationship]\n    'length from 1 to 50'\n    Explanation: The word can have a length between 1 and 50 characters, inclusive. In code, this can be checked using a condition like `1 <= len(s) <= 50`.\n\n# [degree adverb] \n    'minimal'\n    Explanation: This indicates that the goal is to find the smallest possible time to type the word, which involves calculating the shortest path between consecutive characters on the keyboard.\n\n# [code logic]\n1. Parse the number of test cases, `t`.\n2. For each test case:\n   - Read the keyboard layout and map each character to its index.\n   - Read the word `s`.\n   - Initialize a variable to store the total time.\n   - Iterate through the word `s` and calculate the time taken to move from one character to the next by finding the absolute difference in their positions on the keyboard.\n   - Sum these differences to get the total time for typing the word.\n3. Print the total time for each test case.\n\n# [edge case] \n    Case 1: \n    Input: \n    1\n    abcdefghijklmnopqrstuvwxyz\n    a\n    Output: \n    0\n    Explanation: The word consists of a single character, so no movement is needed, resulting in zero time.\n\n    Case 2: \n    Input: \n    1\n    zyxwvutsrqponmlkjihgfedcba\n    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n    Output: \n    0\n    Explanation: All characters are the same, so no movement is needed, resulting in zero time.\n\n    Case 3: \n    Input: \n    1\n    qwertyuiopasdfghjklzxcvbnm\n    mnbvcxzlkjhgfdsapoiuytrewq\n    Output: \n    50\n    Explanation: The word is a reverse of the keyboard layout, requiring maximum movement between consecutive characters.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating absolute differences between consecutive character positions will naturally handle these cases.\n", "requirement analysis:\nThe function needs to efficiently calculate the typing time based on the given keyboard layout and word. It should handle up to 1000 test cases and provide accurate results for each. The function should be optimized for performance, especially when dealing with edge cases such as maximum word length and varying keyboard layouts.\nrequirement pool:\n- Implement function to calculate typing time based on keyboard layout\n- Optimize function for handling up to 1000 test cases\n- Ensure function handles edge cases gracefully\n- Provide clear and concise output format\n- Document function usage and edge case handling\nWe will implement a function that calculates the typing time based on the keyboard layout by determining the index difference between consecutive characters in the word. The typing time is the sum of these index differences. We will use Python's built-in functions to efficiently handle up to 1000 test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: The keyboard layout is a string of 26 unique lowercase Latin letters representing the arrangement of keys on a keyboard. Each letter from 'a' to 'z' appears exactly once.\n\n    'minimal time'\n    Explanation: The minimal time refers to the sum of the index differences between consecutive characters in the word, based on their positions in the given keyboard layout.\n\n# [phrase showing quantity relationship]\n    'length from 1 to 50'\n    Explanation: The word s can have a length between 1 and 50 characters inclusive. This means we need to handle words of varying lengths within this range.\n\n# [degree adverb]\n    'minimal'\n    Explanation: We need to calculate the smallest possible time required to type the word on the given keyboard layout, which involves summing the index differences between consecutive characters.\n\n# [code logic]\n    1. Parse the number of test cases, t.\n    2. For each test case, read the keyboard layout and the word s.\n    3. Create a dictionary mapping each character to its index in the keyboard layout.\n    4. Initialize a variable to store the total typing time for the word.\n    5. Iterate through the word s, calculating the index difference between consecutive characters using the dictionary.\n    6. Sum these differences to get the total typing time for the word.\n    7. Print the total typing time for each test case.\n\n# [edge case]\n    Test case with a single character word:\n    Input: \n    1\n    abcdefghijklmnopqrstuvwxyz\n    a\n    Expected Output: \n    0\n    Explanation: Since there is only one character, no typing is needed, resulting in a time of 0.\n\n    Test case with all identical characters:\n    Input: \n    1\n    qwertyuiopasdfghjklzxcvbnm\n    qqqqq\n    Expected Output: \n    0\n    Explanation: All characters are the same, so no movement is needed between keys, resulting in a time of 0.\n\n    Test case with maximum length word:\n    Input: \n    1\n    abcdefghijklmnopqrstuvwxyz\n    abcdefghijklmnopqrstuvwxyz\n    Expected Output: \n    25\n    Explanation: The word contains all letters in order, so each consecutive character requires moving one position on the keyboard, resulting in a total time of 25.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic naturally handles these scenarios by calculating index differences, which are zero when characters are identical or when there is only one character.\n", "requirement analysis:\nThe function needs to efficiently calculate the typing time based on a custom keyboard layout. It should handle up to 1000 test cases and provide accurate results for each. The solution must be optimized for performance and ensure clarity in output format.\nrequirement pool:\n- Implement function to calculate typing time based on keyboard layout\n- Ensure function handles up to 1000 test cases efficiently\n- Optimize performance for large input sizes\n- Provide clear and concise output format\n- Handle edge cases smoothly\nWe will implement a function that calculates the typing time based on a custom keyboard layout. The function will map each character to its position on the keyboard layout and compute the total time by summing the absolute differences between consecutive characters' positions in the word. This approach ensures efficient processing even for the maximum number of test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: The keyboard layout is a string of 26 lowercase Latin letters, each appearing exactly once, representing the order of keys on a custom keyboard.\n\n    'minimal time'\n    Explanation: The minimal time refers to the sum of the absolute differences between the positions of consecutive characters in the word on the given keyboard layout.\n\n# [phrase showing quantity relationship]\n    'length from 1 to 50'\n    Explanation: The word can have a length between 1 and 50 characters, inclusive. This means we need to handle words of varying lengths efficiently.\n\n# [degree adverb]\n    'minimal'\n    Explanation: We need to calculate the smallest possible time required to type the word based on the given keyboard layout.\n\n# [code logic]\n1. Parse the number of test cases, t.\n2. For each test case:\n   - Read the keyboard layout and map each character to its position.\n   - Read the word s.\n   - Initialize a variable to store the total typing time.\n   - Iterate through the word s, calculating the absolute difference in positions for consecutive characters.\n   - Sum these differences to get the total typing time for the word.\n3. Print the total typing time for each test case.\n\n# [edge case]\n    Test case with a single character word:\n    Input: \n    1\n    abcdefghijklmnopqrstuvwxyz\n    a\n    Expected Output: 0\n    Explanation: Typing a single character requires no movement, hence the time is 0.\n\n    Test case with all characters being the same:\n    Input:\n    1\n    qwertyuiopasdfghjklzxcvbnm\n    qqqqq\n    Expected Output: 0\n    Explanation: Since all characters are the same, no movement is needed, resulting in a time of 0.\n\n    Test case with maximum length word:\n    Input:\n    1\n    abcdefghijklmnopqrstuvwxyz\n    zyxwvutsrqponmlkjihgfedcba\n    Expected Output: 49\n    Explanation: The word is in reverse order, requiring maximum movement across all keys.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases naturally by calculating position differences.\n", "requirement analysis:\nThe function needs to efficiently calculate the typing time based on the given keyboard layout and word. It should handle up to 1000 test cases and provide accurate results for each. The solution should be optimized for performance, especially when processing the maximum input size.\nrequirement pool:\n- Implement the main function to calculate typing time\n- Ensure the function handles up to 1000 test cases efficiently\n- Optimize the function for performance with large inputs\n- Provide clear output format as specified\n- Handle edge cases such as single character words\nWe will implement a function that calculates the typing time by determining the index of each character in the word on the given keyboard layout. The time to type a word is the sum of the absolute differences between the indices of consecutive characters in the word. This approach ensures that we efficiently handle up to 1000 test cases by leveraging Python's built-in string and list operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: This refers to the specific arrangement of letters on the keyboard, which determines the position of each letter.\n\n    'minimal time'\n    Explanation: This means calculating the least amount of time required to type the word based on the given keyboard layout.\n\n# [phrase showing quantity relationship]\n    'length 26': The keyboard string is exactly 26 characters long, representing each letter of the alphabet once.\n    \n    'length from 1 to 50': The word s can have a length ranging from 1 to 50 characters.\n\n# [degree adverb] \n    'minimal': This indicates that we need to calculate the smallest possible time to type the word, which involves summing the minimal distances between consecutive characters.\n\n# [code logic]\n1. Parse the number of test cases, t.\n2. For each test case:\n   - Read the keyboard layout and the word s.\n   - Create a dictionary to map each character in the keyboard layout to its index.\n   - Initialize a variable to store the total typing time.\n   - Iterate through the word s, calculating the absolute difference in indices between consecutive characters using the dictionary.\n   - Sum these differences to get the total typing time for the word.\n3. Print the total typing time for each test case.\n\n# [edge case] \n    Case 1: \n    Input: \n    1\n    abcdefghijklmnopqrstuvwxyz\n    a\n    Output: \n    0\n    Explanation: The word consists of a single character, so no movement is needed, resulting in a typing time of 0.\n\n    Case 2: \n    Input: \n    1\n    zyxwvutsrqponmlkjihgfedcba\n    zzzzz\n    Output: \n    0\n    Explanation: All characters are the same, so no movement is needed between them, resulting in a typing time of 0.\n\n    Case 3: \n    Input: \n    1\n    qwertyuiopasdfghjklzxcvbnm\n    qwertyuiopasdfghjklzxcvbnm\n    Output: \n    25\n    Explanation: The word is exactly the keyboard layout, so each character is typed in sequence with minimal movement.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the sum of absolute differences between indices will naturally handle these cases correctly.\n", "requirement analysis:\nThe function needs to efficiently process multiple test cases, ensuring that the keyboard layout is correctly interpreted to calculate the typing time for each word. The solution should handle edge cases such as minimal and maximal word lengths and provide accurate results for each test case.\nrequirement pool:\n- Implement function to calculate typing time based on keyboard layout\n- Ensure function handles up to 1000 test cases efficiently\n- Optimize function for performance and accuracy\n- Provide clear output format for results\n- Handle edge cases for word lengths and keyboard layouts\nWe will implement a function that calculates the typing time by determining the distance between consecutive characters in the word based on their positions in the given keyboard layout. The distance is the absolute difference between the indices of the characters in the keyboard string. We will iterate through each test case, compute the total typing time for the word, and output the result. This approach ensures efficient handling of up to 1000 test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: This refers to the specific arrangement of letters on the keyboard, which determines the position of each letter.\n\n    'minimal time'\n    Explanation: This means calculating the least amount of time required to type the word based on the given keyboard layout.\n\n# [phrase showing quantity relationship]\n    'length 26': The keyboard string is exactly 26 characters long, representing each letter of the alphabet once.\n    \n    'length from 1 to 50': The word s can have a length ranging from 1 to 50 characters.\n\n# [degree adverb]\n    'minimal': This indicates that we need to find the smallest possible time to type the word, which involves calculating the shortest path between consecutive characters in the word based on their positions in the keyboard layout.\n\n# [code logic]\n1. Parse the number of test cases, t.\n2. For each test case:\n   - Read the keyboard layout string.\n   - Read the word s.\n   - Initialize a variable to keep track of the total typing time.\n   - For each character in the word (except the first one), calculate the distance between its position and the previous character's position in the keyboard layout.\n   - Add this distance to the total typing time.\n3. Print the total typing time for each test case.\n\n# [edge case]\n    Test case 1: \n    Input: \n    1\n    abcdefghijklmnopqrstuvwxyz\n    a\n    Output: \n    0\n    Explanation: The word consists of a single character, so no movement is needed, resulting in a typing time of 0.\n\n    Test case 2:\n    Input:\n    1\n    zyxwvutsrqponmlkjihgfedcba\n    zzzzz\n    Output:\n    0\n    Explanation: All characters are the same, so no movement is needed between them, resulting in a typing time of 0.\n\n    Test case 3:\n    Input:\n    1\n    qwertyuiopasdfghjklzxcvbnm\n    qwerty\n    Output:\n    25\n    Explanation: The positions of consecutive characters are calculated as follows: q(0) -> w(1) -> e(2) -> r(3) -> t(4) -> y(5), resulting in a total typing time of 1+1+1+1+1=5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for cases where no movement is needed (e.g., single character or repeated characters).\n", "requirement analysis:\nThe function needs to efficiently calculate the typing time based on the given keyboard layout and word. It should handle up to 1000 test cases and words of up to 50 characters. The solution should be optimized for performance and accuracy.\nrequirement pool:\n- Implement the main function to calculate typing time.\n- Ensure the function handles multiple test cases.\n- Optimize the function for performance with large inputs.\n- Write clear and maintainable code.\n- Include comprehensive test cases to cover edge scenarios.\nWe will implement a function that calculates the typing time by mapping each character's position on the given keyboard layout. The time to type a word is the sum of the absolute differences between consecutive characters' positions. We will use a dictionary to store the positions of each character for quick lookup.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: The keyboard layout is a string of 26 unique lowercase Latin letters representing the order of keys on a keyboard. Each letter from 'a' to 'z' appears exactly once.\n\n    'minimal time'\n    Explanation: The minimal time refers to the sum of the absolute differences in positions between consecutive characters in the word, based on their positions in the given keyboard layout.\n\n# [phrase showing quantity relationship]\n    'length from 1 to 50'\n    Explanation: The word can have a length ranging from 1 to 50 characters. This means we need to handle words of varying lengths, including very short and very long words.\n\n# [degree adverb]\n    'minimal'\n    Explanation: We need to calculate the smallest possible time required to type the word on the given keyboard layout, which involves summing the absolute differences between consecutive character positions.\n\n# [code logic]\n1. Parse the number of test cases, t.\n2. For each test case:\n   - Read the keyboard layout and map each character to its position using a dictionary.\n   - Read the word s.\n   - Initialize a variable to store the total typing time.\n   - Iterate through the word s, calculating the absolute difference in positions between consecutive characters using the dictionary.\n   - Sum these differences to get the total typing time for the word.\n3. Print the total typing time for each test case.\n\n# [edge case]\n    Test case with a single character word:\n    Input: \n    1\n    qwertyuiopasdfghjklzxcvbnm\n    a\n    Expected output: 0\n    Explanation: Since there is only one character, no movement is needed, resulting in zero typing time.\n\n    Test case with all identical characters:\n    Input:\n    1\n    qwertyuiopasdfghjklzxcvbnm\n    qqqqq\n    Expected output: 0\n    Explanation: All characters are the same, so no movement is needed between them, resulting in zero typing time.\n\n    Test case with maximum length word:\n    Input:\n    1\n    qwertyuiopasdfghjklzxcvbnm\n    abcdefghijklmnopqrstuvwxyz\n    Expected output: 25\n    Explanation: Each consecutive character requires moving one position on the keyboard, resulting in a total typing time of 25.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating absolute differences between consecutive character positions inherently handles these cases correctly.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 968, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "mutate_method": "expand_one2two", "parent_index": 484}
