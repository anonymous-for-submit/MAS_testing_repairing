{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b. Assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b. Assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3. He then calculated 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b. Assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers and wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a and only has the array b left. Help him to restore the array a by determining the correct array a using the properties of the given array b. Assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[-1]\n        # Calculate a_3 by subtracting a_1 and a_2 from the sum of all elements\n        a_3 = sum_a - a_1 - a_2\n        # Append the result for this test case\n        results.append([a_1, a_2, a_3])\n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = restore_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array 'a' from the given array 'b' for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing the sorted sums of all non-empty subsequences of 'a'.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array 'a' for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in 'b' is the smallest element of 'a'\n        a1 = b[0]\n        # The second smallest element in 'b' is the second smallest element of 'a'\n        a2 = b[1]\n        # The largest element in 'b' is the sum of all elements in 'a'\n        sum_a = b[-1]\n        # Calculate the third element of 'a' by subtracting the first two elements from the sum\n        a3 = sum_a - a1 - a2\n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n\n    # Call the function\n    results = restore_array(n, test_cases)\n\n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the given array b which contains\n    the sums of all non-empty subsequences of a sorted in non-decreasing order.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sums of all non-empty\n                       subsequences of the original array a.\n\n    Returns:\n        List[int]: The original array a consisting of 3 positive integers.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements in a\n    sum_a = b[6]\n    # The second largest element in b is the sum of the two largest elements in a\n    sum_a2_a3 = b[5]\n    \n    # Calculate the second and third elements of a\n    a2 = sum_a - sum_a2_a3\n    a3 = sum_a2_a3 - a1\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    num_cases = int(input())\n    results = []\n    for _ in range(num_cases):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        results.append(result)\n    \n    for res in results:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each containing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # According to the problem, b is sorted in non-decreasing order\n        a1 = b[0]  # The smallest element in b\n        a2 = b[1]  # The second smallest element in b\n        a3 = b[6] - a1 - a2  # The largest element in b minus a1 and a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing the array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of a_1, a_2, and a_3\n        sum_a1_a2_a3 = b[-1]\n        # Calculate a_3\n        a_3 = sum_a1_a2_a3 - a_1 - a_2\n        # Append the result as a tuple\n        results.append((a_1, a_2, a_3))\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Call the function and print results\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted array b.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing the sorted array b.\n\n    Returns:\n        A list of lists, where each inner list contains the restored array a for the corresponding test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of all three elements a_1 + a_2 + a_3\n        sum_a = b[-1]\n        # Calculate a_3 by subtracting a_1 and a_2 from the largest element\n        a_3 = sum_a - a_1 - a_2\n        # Append the result for this test case\n        results.append([a_1, a_2, a_3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    result = restore_array(n, test_cases)\n    \n    # Output interface\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array 'a' from the sorted array 'b' of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted array 'b'.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each containing the restored array 'a' for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Deduce the original array 'a' from the sorted array 'b'\n        a1 = b[0]  # The smallest element in 'b' corresponds to 'a_1'\n        a2 = b[1]  # The second smallest element in 'b' corresponds to 'a_2'\n        a3 = b[-1] - a1 - a2  # The largest element in 'b' is the sum of all three elements 'a_1 + a_2 + a_3'\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process and output results\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted list of sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[list[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        list[tuple[int, int, int]]: A list of tuples, each containing the restored array of 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is a_1 + a_2 + a_3\n        a_3 = b[-1] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    number_of_test_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(number_of_test_cases)]\n    \n    # Process the test cases\n    results = restore_array(number_of_test_cases, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing array b.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b corresponds to a_1\n        a_1 = b[0]\n        # The second smallest element in b corresponds to a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of a_1, a_2, and a_3\n        largest_element = b[-1]\n        # Calculate a_3 using the formula: a_3 = largest_element - (a_1 + a_2)\n        a_3 = largest_element - (a_1 + a_2)\n        # Append the restored array a to the results\n        results.append([a_1, a_2, a_3])\n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresult = restore_array(n, test_cases)\nfor res in result:\n    print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted list of sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list containing t test cases, each with 7 integers.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each containing the restored array a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[-1]\n        # Calculate a_3 by subtracting a_1 and a_2 from the sum of all elements\n        a_3 = sum_a - a_1 - a_2\n        # Append the result as a tuple\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read the number of test cases\n    n = int(input())\n    # Read each test case\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    # Call the function to restore the array\n    results = restore_array(n, test_cases)\n    # Output the results for each test case\n    for result in results:\n        print(' '.join(map(str, result)))\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires determining the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle up to 5000 test cases\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will use a straightforward approach to restore the array a from the given array b. Since b contains the sums of all non-empty subsequences of a, we can deduce that the smallest element in b is a_1, the second smallest is a_2, and the largest element in b is the sum of all elements in a. By subtracting the smallest and second smallest elements from the largest, we can find the third element a_3. This approach is efficient and handles large numbers well.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty means that at least one element is present in the subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': refers to the smallest element in array b, which corresponds to a_1.\n    'largest': refers to the largest element in array b, which corresponds to the sum of all elements in array a.\n\n# [code logic]\n    1. For each test case, identify the smallest element in array b as a_1.\n    2. Identify the second smallest element in array b as a_2.\n    3. Identify the largest element in array b as the sum of all elements in array a.\n    4. Calculate a_3 by subtracting a_1 and a_2 from the largest element in array b.\n    5. Return a_1, a_2, and a_3 for each test case.\n\n# [edge case] \n    Case 1: b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000]\n    Expected output: 999999998 1 1\n    Explanation: The smallest two elements are both 1, and the largest element is 1000000000. Subtracting the two smallest elements from the largest gives 999999998.\n\n    Case 2: b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000]\n    Expected output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so a_1 = a_2 = a_3 = 300000000.\n\n    Case 3: b = [1, 2, 2, 3, 3, 4, 5]\n    Expected output: 1 2 2\n    Explanation: The smallest element is 1, the second smallest is 2, and the largest is 5. Subtracting the smallest and second smallest from the largest gives another 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by correctly identifying a_1, a_2, and calculating a_3 using subtraction from the largest element in b.\n", "requirement analysis:\nThe task is to deduce the original array a from the given array b, which contains the sums of all non-empty subsequences of a. The solution must efficiently handle up to 5000 test cases, each with 7 integers. The output must be formatted correctly, and the solution should be able to handle large integer values up to 10^9.\nrequirement pool:\n- Implement the algorithm to deduce array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Provide clear and concise output for each test case.\n- Consider edge cases and validate input constraints.\nWe will deduce the original array 'a' from the given array 'b' by leveraging the properties of the sums of subsequences. Since 'b' is sorted and contains the sums of all non-empty subsequences of 'a', the smallest element in 'b' is the smallest element of 'a'. The largest element in 'b' is the sum of all elements in 'a'. The second smallest element in 'b' is the second smallest element of 'a'. The third element of 'a' can be found by subtracting the first two elements from the largest element in 'b'. This approach ensures that we can efficiently determine 'a' for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. In this context, it refers to all possible non-empty combinations of the elements in array 'a'.\n\n    'sorted in non-decreasing order'\n    Explanation: The array 'b' is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This means calculating the sum of every possible combination of elements from array 'a' and storing them in array 'b'. In code, this involves iterating through combinations of elements and summing them.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest element in 'b' corresponds to the smallest element in 'a', and the largest element in 'b' corresponds to the sum of all elements in 'a'.\n\n# [code logic]\n1. For each test case, identify the smallest element in 'b' as the smallest element of 'a'.\n2. Identify the largest element in 'b' as the sum of all elements in 'a'.\n3. The second smallest element in 'b' is the second smallest element of 'a'.\n4. Calculate the third element of 'a' by subtracting the first two elements from the largest element in 'b'.\n5. Return the three elements of array 'a'.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are identical, leading to repeated sums. The smallest element is 1, and the sum of all elements is 3.\n    \n    1 2 3 4 5 6 7 = 4 1 2\n    Explanation: The smallest element is 1, the second smallest is 2, and the sum of all elements is 7.\n    \n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are identical, leading to repeated sums. The smallest element is 300000000, and the sum of all elements is 900000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases by correctly identifying the smallest and largest elements and calculating the third element based on these values.\n", "requirement analysis:\nThe task requires determining the original array of three distinct integers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct and clear output for each test case.\nrequirement pool:\n- Efficiently compute the original array from the given subsequence sums.\n- Ensure the solution handles the maximum constraints effectively.\n- Provide clear and correct output for each test case.\n- Optimize the solution for speed and clarity.\n- Include comprehensive test cases to validate the solution.\nWe will solve the problem by leveraging the properties of the sorted array b. Since b contains all possible sums of the non-empty subsequences of a, we can deduce that the smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these properties, we can efficiently reconstruct the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The array a consists of exactly three integers, each greater than zero.\n\n    '7 integers': The array b consists of exactly seven integers.\n\n# [degree adverb]\n    'smallest': Refers to the minimum value in the array b, which corresponds to the smallest element in array a.\n\n    'largest': Refers to the maximum value in the array b, which is the sum of all elements in array a.\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to the smallest element in a.\n2. Identify the largest element in b, which is the sum of all elements in a.\n3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n4. Use these identified values to reconstruct the original array a.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are identical, so the original array a consists of three identical elements.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest element is 1, and the largest sum is 7. The second largest sum is 6, which is the sum of the two largest elements (2 and 4).\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are identical and large, so the original array a consists of three identical large elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for identifying the smallest, largest, and second largest sums inherently handles these cases.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and ensure the output is formatted correctly. The constraints on the input ensure that a valid array a exists for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Ensure output format matches the requirements\n- Handle large numbers and multiple test cases\n- Provide clear documentation for the solution\n- Optimize for performance and scalability\nWe will use a simple mathematical approach to restore the array a from the given array b. Since b contains the sums of all non-empty subsequences of a, we can deduce that the smallest element in b is a_1, the second smallest element is a_2, and the largest element is a_1 + a_2 + a_3. By using these properties, we can efficiently determine the values of a_1, a_2, and a_3 for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No explicit phrases showing quantity relationships are present in the requirement.\n\n# [degree adverb] \n    'smallest': The smallest element in b is a_1.\n    'largest': The largest element in b is a_1 + a_2 + a_3.\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Identify a_1 as the smallest element in b (b[0]).\n3. Identify a_2 as the second smallest element in b (b[1]).\n4. Identify a_3 using the largest element in b (b[6]) and the formula: a_3 = b[6] - a_1 - a_2.\n5. Output the values of a_1, a_2, and a_3 for each test case.\n\n# [edge case] \n    Edge cases are not explicitly defined in the requirement, but we can consider:\n    1. b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n       Explanation: All elements are the same, leading to identical sums.\n    2. b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n       Explanation: A straightforward increasing sequence.\n    3. b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n       Explanation: Large numbers with identical values.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying a_1 as the smallest element, a_2 as the second smallest element, and using the largest element to find a_3 will handle these cases correctly.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output should be the original array in any order, ensuring correctness and efficiency.\nrequirement pool:\n- Implement the main algorithm to reconstruct array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Provide clear and concise output for each test case.\n- Consider edge cases and ensure robustness of the solution.\nWe will leverage the properties of the sorted array b, which contains the sums of all non-empty subsequences of the original array a. Since a consists of three distinct integers, the smallest element in b is a_1, the second smallest is a_2, and the largest element in b is the sum of all three elements a_1 + a_2 + a_3. Using these properties, we can deduce the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': refers to the smallest element in array b, which corresponds to a_1.\n    'largest': refers to the largest element in array b, which corresponds to the sum of a_1, a_2, and a_3.\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to a_1.\n    2. Identify the second smallest element in array b, which corresponds to a_2.\n    3. Identify the largest element in array b, which corresponds to the sum of a_1, a_2, and a_3.\n    4. Calculate a_3 using the formula: a_3 = (largest element) - a_1 - a_2.\n    5. Return the array [a_1, a_2, a_3].\n\n# [edge case] \n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1 (a_1), the second smallest is also 1 (a_2), and the largest is 1000000000 (sum of all three). Thus, a_3 = 1000000000 - 1 - 1 = 999999998.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so a_1 = a_2 = a_3 = 300000000.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1 (a_1), the second smallest is 2 (a_2), and the largest is 5 (sum of all three). Thus, a_3 = 5 - 1 - 2 = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by correctly identifying a_1, a_2, and calculating a_3 using the largest sum.\n", "requirement analysis:\nThe task requires restoring an array of three distinct integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output is correctly formatted.\nrequirement pool:\n- Efficiently compute the original array a from array b\n- Ensure scalability for up to 5000 test cases\n- Handle large integer values efficiently\n- Provide clear and accurate output formatting\n- Optimize for performance in terms of time complexity\nWe will use a simple mathematical approach to deduce the original array a from the sorted array b. Since b contains all possible sums of non-empty subsequences of a, we can identify the elements of a by using the smallest, second smallest, and largest elements of b. The smallest element in b is a_1, the second smallest is a_2, and the largest element is the sum of all three elements a_1 + a_2 + a_3. This approach is efficient and handles large numbers well without requiring complex data structures.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    'smallest': Refers to the first element in the sorted array b, which is the smallest sum of a single element from array a.\n    \n    'largest': Refers to the last element in the sorted array b, which is the sum of all three elements of array a.\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to the smallest element in a (a_1).\n2. Identify the second smallest element in b, which corresponds to the second smallest element in a (a_2).\n3. Identify the largest element in b, which is the sum of all three elements of a (a_1 + a_2 + a_3).\n4. Calculate a_3 by subtracting a_1 and a_2 from the largest element.\n5. Return the elements a_1, a_2, and a_3.\n\n# [edge case] \n    Case 1: b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = 999999998 1 1\n    Explanation: The smallest two elements are both 1, and the largest element is 1000000000. Thus, a_3 = 1000000000 - 1 - 1 = 999999998.\n\n    Case 2: b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element of a is equal to 300000000.\n\n    Case 3: b = [1, 2, 2, 3, 3, 4, 5] = 1 2 2\n    Explanation: The smallest two elements are 1 and 2, and the largest element is 5. Thus, a_3 = 5 - 1 - 2 = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by using the properties of sorted array b and simple arithmetic operations.\n", "requirement analysis:\nThe task requires determining the original array of three distinct integers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring that the output is correct and adheres to the input-output format.\nrequirement pool:\n- Efficiently compute the original array from the given subsequence sums.\n- Ensure the solution handles the maximum constraints effectively.\n- Provide clear and concise output for each test case.\n- Optimize for performance with large numbers.\n- Include detailed comments and documentation for the solution.\nWe will use a simple mathematical approach to deduce the original array 'a' from the sorted array 'b'. Since 'b' contains the sums of all non-empty subsequences of 'a', we can determine 'a' by using the properties of these sums. Specifically, the smallest element in 'b' is 'a_1', the second smallest is 'a_2', and the largest element is the sum of all three elements 'a_1 + a_2 + a_3'. This allows us to deduce 'a_3' by subtracting 'a_1' and 'a_2' from the largest element in 'b'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The array 'b' is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n    1. Identify the smallest element in array 'b', which corresponds to 'a_1'.\n    2. Identify the second smallest element in array 'b', which corresponds to 'a_2'.\n    3. Identify the largest element in array 'b', which is the sum of all three elements 'a_1 + a_2 + a_3'.\n    4. Deduce 'a_3' by subtracting 'a_1' and 'a_2' from the largest element in 'b'.\n    5. Return the array 'a' as [a_1, a_2, a_3].\n\n# [edge case] \n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so the original array consists of three identical elements.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest element is 1, second smallest is 2, and the largest sum is 7. Thus, a_3 = 7 - (1 + 2) = 4.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large and identical, so the original array consists of three identical large elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying a_1, a_2, and calculating a_3 from the largest sum will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and provide the correct output format. The constraints ensure that there is always a valid array a for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle up to 5000 test cases\n- Ensure output format is clear and correct\n- Optimize for large integer values\n- Provide multiple valid solutions if possible\nWe will solve the problem by leveraging the properties of the array b. Since b is the sorted list of all non-empty subsequences of a, the smallest element in b is a_1, the second smallest is a_2, and the largest element is a_1 + a_2 + a_3. We can deduce a_3 by subtracting a_1 and a_2 from the largest element in b. This approach is efficient and works within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb]\n    'smallest': The smallest element in array b corresponds to a_1.\n    'largest': The largest element in array b corresponds to the sum a_1 + a_2 + a_3.\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to a_1.\n    2. Identify the second smallest element in array b, which corresponds to a_2.\n    3. Identify the largest element in array b, which corresponds to the sum a_1 + a_2 + a_3.\n    4. Calculate a_3 by subtracting a_1 and a_2 from the largest element in array b.\n    5. Return the values of a_1, a_2, and a_3.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are identical, and the sum of all three identical elements is the largest value.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest element is 1, second smallest is 2, and the largest is 7. Subtracting gives a_3 = 4.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are identical, and the sum of all three identical elements is the largest value.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases by correctly identifying a_1, a_2, and calculating a_3 using subtraction from the largest element.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and ensure the output is correctly formatted. The constraints ensure that a valid array a exists for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle up to 5000 test cases\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will use a simple mathematical approach to restore the original array a from the given array b. The key observation is that the smallest element in b is a_1, the second smallest is a_2, and the largest element in b is the sum of all elements in a. Using these properties, we can efficiently determine the values of a_1, a_2, and a_3.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of elements in each possible non-empty subsequence of array a. In code, this can be implemented by calculating all possible sums of combinations of elements from array a.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest element in array b represents the sum of all elements in array a. This helps in determining the total sum of the original array.\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to a_1.\n    2. Identify the second smallest element in array b, which corresponds to a_2.\n    3. Identify the largest element in array b, which is the sum of a_1, a_2, and a_3.\n    4. Calculate a_3 using the formula: a_3 = largest_element - (a_1 + a_2).\n    5. Return the values of a_1, a_2, and a_3.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Expected Output: 1 1 1\n    Explanation: All elements are identical, leading to repeated sums. The smallest element is 1, and the largest sum is 3, which confirms all elements are 1.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Expected Output: 1000000000 1000000000 1000000000\n    Explanation: Large identical numbers result in repeated sums. The smallest element is 1000000000, and the largest sum is 3000000000, confirming all elements are identical.\n\n    Input: 1 2 3 4 5 6 7\n    Expected Output: 1 2 4\n    Explanation: The smallest element is 1, second smallest is 2, and the largest sum is 7. Thus, a_3 = 7 - (1 + 2) = 4.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles these cases by using the properties of sorted array b and calculating based on given constraints.\n", "requirement analysis:\nThe task requires determining the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output is correctly formatted for each test case.\nrequirement pool:\n- Efficiently compute the original array a from array b\n- Handle up to 5000 test cases in a single run\n- Ensure the solution is optimized for large integer values\n- Provide clear and concise output formatting\n- Consider edge cases and ensure robustness\nWe will solve the problem by leveraging the properties of the array b. Since b is the sorted list of all non-empty subsequences of a, the smallest element in b is a_1, the second smallest is a_2, and the largest element is the sum of all elements in a. Thus, a_3 can be found by subtracting a_1 and a_2 from the largest element in b. This approach is efficient and straightforward, ensuring we handle up to 5000 test cases smoothly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    'sum of all elements'\n    Explanation: This refers to the total sum of all elements in the array a. In the context of the problem, it is the largest element in array b.\n\n# [degree adverb]\n    'largest'\n    Explanation: In this context, it refers to the maximum value in array b, which represents the sum of all elements in array a.\n\n# [code logic]\n1. For each test case, read the array b.\n2. Identify a_1 as the first element of b (smallest).\n3. Identify a_2 as the second element of b.\n4. Identify a_3 by subtracting a_1 and a_2 from the largest element in b (last element).\n5. Return a_1, a_2, and a_3 for each test case.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: The smallest three numbers are 1, 1, and 1, and their sum is 3, which matches the largest number in b.\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: The smallest three numbers are all equal to 1000000000, and their sum is 3000000000, which matches the largest number in b.\n    \n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest two numbers are 1 and 2, and the largest number is 7. Subtracting gives us the third number as 4.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying a_1, a_2, and calculating a_3 from the largest element in b will handle these cases correctly.\n"], "scores": [], "pass_results": [false, true, true, true, true, true, true, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 8, "round": 64, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "add_1_sentence_at_end", "parent_index": 79}
