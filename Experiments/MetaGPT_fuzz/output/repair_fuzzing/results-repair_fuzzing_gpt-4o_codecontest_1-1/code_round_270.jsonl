{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp possessed a list of three positive integers named a, and he listed the totals of every non-empty subsequence from this array, arranged them in ascending order, and ended up with a series b of seven numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a, and assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp possessed a list of three positive integers named a, and he listed the totals of every non-empty subsequence from this array, arranged them in ascending order, and ended up with a series b of seven numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a, and assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed a list of three positive integers named a, and he listed the totals of every non-empty subsequence from this array, arranged them in ascending order. He ended up with a series b of seven numbers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a, and assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed a list of three positive integers named a, listed the totals of every non-empty subsequence from this array, and arranged them in ascending order to end up with a series b of seven numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a, and assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted list b of subsequence sums.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of seven integers.\n\n    Returns:\n        A list of tuples, each containing three integers representing the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Deduce the original array a from the sorted list b\n        a_1 = b[0]  # The smallest element in b\n        a_2 = b[1]  # The second smallest element in b\n        a_3 = b[6] - a_1 - a_2  # The largest element in b minus a_1 and a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    # Function call\n    results = restore_original_array(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three distinct integers from the sorted list of subsequence sums.\n\n    Args:\n        b (List[int]): A sorted list of seven integers representing the sums of all non-empty subsequences\n                       of the original array.\n\n    Returns:\n        List[int]: The original array of three distinct integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The largest element in b is the sum of all three integers\n    sum_all = b[-1]\n    # The second smallest element in b helps deduce another integer\n    a2 = b[1]\n    # Calculate the third integer\n    a3 = sum_all - (a1 + a2)\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle multiple test cases and output the restored arrays.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three distinct positive integers from the sorted list of sums of all non-empty subsequences.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences of the original array.\n\n    Returns:\n        List[int]: The original array of three distinct positive integers in increasing order.\n    \"\"\"\n    # The smallest element in b is the smallest element of the original array a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements of the original array a\n    sum_all = b[6]\n    # The second element of the original array a can be found by subtracting the smallest element from the second largest element\n    a2 = b[1] - a1\n    # The third element of the original array a can be found by subtracting the smallest and second elements from the sum of all elements\n    a3 = sum_all - a1 - a2\n    # Return the original array in increasing order\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the sorted array 'b' for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the elements of a\n        a1, a2, a3 = b[0], b[1], b[2]\n        # The largest number in b is the sum of all elements in a\n        sum_a = b[-1]\n        \n        # Verify the sum matches the largest number in b\n        if a1 + a2 + a3 == sum_a:\n            results.append([a1, a2, a3])\n        else:\n            # If the sum doesn't match, adjust the elements to match the sum\n            # This handles cases where the smallest three numbers don't directly sum to the largest number\n            a1 = b[0]\n            a2 = b[1]\n            a3 = sum_a - a1 - a2\n            results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = restore_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[list[int]]): A list containing t test cases, each with 7 integers.\n\n    Returns:\n        list[tuple[int, int, int]]: A list of tuples, each containing the restored array a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest number in b is a_1\n        a_1 = b[0]\n        # The second smallest number in b is a_2\n        a_2 = b[1]\n        # The largest number in b is the sum of a_1, a_2, and a_3\n        sum_a = b[-1]\n        # Calculate a_3 as the difference between the largest number and the sum of a_1 and a_2\n        a_3 = sum_a - a_1 - a_2\n        # Append the result as a tuple\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted list of sums of all non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of seven integers.\n\n    Returns:\n        A list of tuples, each containing three integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Identify a_1 as the smallest element in b\n        a_1 = b[0]\n        # Identify a_2 as the second smallest element in b\n        a_2 = b[1]\n        # Identify a_3 using the largest element in b, which is a_1 + a_2 + a_3\n        a_3 = b[-1] - a_1 - a_2\n        # Append the result as a tuple\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    # Call the function to restore the original array\n    results = restore_original_array(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted array b of subsequence sums.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of a_1, a_2, and a_3\n        sum_a = b[-1]\n        # Calculate a_3 by subtracting a_1 and a_2 from the largest element\n        a_3 = sum_a - a_1 - a_2\n        # Append the result as a tuple\n        results.append((a_1, a_2, a_3))\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    # Process and output results\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\ndef restore_original_array(b: list[int]) -> tuple[int, int, int]:\n    \"\"\"Restores the original array of three distinct integers from the sorted list of sums of all non-empty subsequences.\n\n    Args:\n        b (list[int]): A sorted list of seven integers representing the sums of all non-empty subsequences.\n\n    Returns:\n        tuple[int, int, int]: The original array of three distinct integers.\n    \"\"\"\n    # The smallest element in b is a_1\n    a1 = b[0]\n    # The second smallest element in b is a_2\n    a2 = b[1]\n    # The largest element in b is the sum of a_1, a_2, and a_3\n    largest = b[-1]\n    # Calculate a_3 using the formula: a_3 = largest - (a_1 + a_2)\n    a3 = largest - (a1 + a2)\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])  # Number of test cases\n    results = []\n    \n    for i in range(1, t + 1):\n        b = list(map(int, data[i].split()))\n        a1, a2, a3 = restore_original_array(b)\n        results.append(f\"{a1} {a2} {a3}\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the sorted array 'b' of subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in 'b' are the elements of 'a'\n        a1 = b[0]\n        a2 = b[1]\n        # The largest number in 'b' is the sum of all elements of 'a'\n        a3 = b[6] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b'.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the restored array 'a'.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in 'b' is the smallest element in 'a'\n        a1 = b[0]\n        # The second smallest element in 'b' is the second smallest element in 'a'\n        a2 = b[1]\n        # The largest element in 'b' is the sum of all elements in 'a'\n        sum_a = b[-1]\n        # Deduce the third element of 'a' by subtracting the first two elements from the sum\n        a3 = sum_a - a1 - a2\n        # Append the result in increasing order\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle up to 5000 test cases efficiently and ensure the output format is strictly followed.\nrequirement pool:\n- Restore array a from array b efficiently\n- Ensure solution scalability for up to 5000 test cases\n- Handle large integer values up to 10^9\n- Provide output in the correct format\n- Optimize for performance and accuracy\nWe will implement a function that takes the sorted list b of seven integers and deduces the original list a of three integers. The key observation is that the smallest element in b is a_1, the second smallest is a_2, and the largest element in b is the sum of all three elements a_1 + a_2 + a_3. Using these observations, we can deduce the values of a_1, a_2, and a_3 efficiently. This approach ensures that the solution is both simple and scalable for up to 5000 test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty means that at least one element is present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'sum of all three elements'\n    Explanation: The largest number in array b is the sum of all three elements in array a. This can be implemented by identifying the largest number in b and using it to deduce the sum a_1 + a_2 + a_3.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest number in array b corresponds to a_1, and the largest number corresponds to the sum a_1 + a_2 + a_3. This can be implemented by selecting the first and last elements of the sorted array b.\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Identify a_1 as the smallest element in b (b[0]).\n    3. Identify a_2 as the second smallest element in b (b[1]).\n    4. Identify a_3 by subtracting a_1 and a_2 from the largest element in b (b[6]).\n    5. Return the values of a_1, a_2, and a_3.\n\n# [edge case]\n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = 999999998 1 1\n    Explanation: The smallest two numbers are both 1, and the largest number is 1000000000, which gives us a_3 = 1000000000 - 1 - 1 = 999999998.\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All numbers are equal, so each element of a is equal to the smallest number.\n\n    b = [1, 2, 2, 3, 3, 4, 5] = 1 2 2\n    Explanation: The smallest two numbers are 1 and 2, and the largest number is 5, which gives us a_3 = 5 - 1 - 2 = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic correctly deduces the values of a_1, a_2, and a_3 based on the sorted array b.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Implement the main algorithm to restore the original array.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the algorithm for speed and memory usage.\n- Provide clear and concise output for each test case.\n- Consider edge cases and validate input constraints.\nWe will implement a function that takes the sorted list of subsequence sums and deduces the original array of three distinct integers. The key observation is that the smallest element in the list is one of the original integers, and the largest element is the sum of all three integers. By using these observations, we can efficiently reconstruct the original array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. In this context, it refers to all possible non-empty combinations of the elements in array a.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'three positive integers'\n    Explanation: The array a consists of exactly three integers, each greater than zero.\n\n# [degree adverb]\n    'ascending order'\n    Explanation: The array b is sorted from the smallest to the largest value.\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to one of the original integers in array a.\n    2. Identify the largest element in array b, which is the sum of all three integers in array a.\n    3. Use the second smallest element in array b to deduce another integer from array a.\n    4. Calculate the third integer by subtracting the sum of the first two identified integers from the largest element.\n    5. Return the three integers as the reconstructed array a.\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1, and the largest element is 1000000000. The second smallest element is also 1, indicating that two of the integers are 1. The third integer is calculated as 1000000000 - (1 + 1) = 999999998.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are identical, indicating that all three integers are equal to the smallest element, which is 300000000.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1, and the largest element is 5. The second smallest element is 2, indicating that two of the integers are 2. The third integer is calculated as 5 - (1 + 2) = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles these scenarios by using the properties of sorted subsequence sums to deduce the original integers.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from a given sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring the output is correct and formatted as specified.\nrequirement pool:\n- Restore the original array from the given sequence.\n- Ensure the solution is efficient for the maximum constraints.\n- Provide clear and concise output for each test case.\n- Handle edge cases and large numbers effectively.\n- Optimize the solution for specific input patterns.\nWe will use a simple mathematical approach to restore the original array. Given the sorted list of sums of all non-empty subsequences, the smallest element in the list is the smallest element of the original array. The largest element in the list is the sum of all three elements of the original array. By subtracting the smallest element from the second largest element, we can find the second element of the original array. This approach is efficient and handles large numbers well.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed, but the order of the remaining elements is preserved. Non-empty means that at least one element is present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'three positive integers'\n    Explanation: The array a consists of exactly three integers, all greater than zero.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest element in the sorted list b is the smallest element of the original array a.\n\n    'largest'\n    Explanation: The largest element in the sorted list b is the sum of all three elements of the original array a.\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to the smallest element in array a.\n    2. Identify the largest element in array b, which is the sum of all elements in array a.\n    3. Subtract the smallest element from the second largest element in array b to find the second element of array a.\n    4. The third element of array a can be found by subtracting the smallest element from the largest element in array b and then subtracting the second element found in step 3.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are identical, and their sums are consistent with the subsequence sums.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest element is 1, and the largest sum is 7. The second element can be derived from subtracting the smallest from the second largest sum (6 - 1 = 5).\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are identical, and their sums are consistent with the subsequence sums.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by correctly identifying elements based on their sums.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle up to 5000 test cases efficiently, ensuring that the output format is strictly followed. The constraints on the input values are significant, requiring careful handling of large integers.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle multiple test cases quickly\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide clear documentation and comments\nWe will implement a function that takes the sorted array b and deduces the original array a. The key observation is that the smallest three numbers in b are the elements of a, and the largest number in b is the sum of all elements in a. We will use this observation to efficiently restore a for each test case. The solution will handle multiple test cases by iterating over the input and processing each case independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty means that at least one element must be present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'three positive integers': indicates that array a consists of exactly three elements, all greater than zero.\n    \n    'seven numbers': indicates that array b consists of exactly seven elements.\n\n# [degree adverb]\n    'ascending order': means that the elements in array b are sorted from smallest to largest.\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Identify the smallest three numbers in b, which correspond to the elements of array a.\n    3. The largest number in b is the sum of all elements in a.\n    4. Use these observations to deduce the original array a.\n    5. Print the elements of array a for each test case.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are identical, and their sum matches the largest number in b.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest three numbers are 1, 2, and 3, and their sum matches the largest number in b.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are identical, and their sum matches the largest number in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers and using the largest number as their sum will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring the original array of three distinct integers from a given sorted array of seven integers, which represent all possible non-empty subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values.\nrequirement pool:\n- Restore the original array a from the given array b\n- Ensure the solution is efficient for the maximum constraints\n- Handle edge cases where numbers are very large\n- Provide clear and formatted output for each test case\n- Optimize for both speed and memory usage\nWe will leverage the fact that the largest number in the sorted array b is the sum of all three numbers in array a. The smallest number in b is the smallest number in a. The second smallest number in b is the second smallest number in a. By using these properties, we can efficiently reconstruct the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. A non-empty subsequence means that at least one element is present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'three positive integers'\n    Explanation: The array a consists of exactly three integers, each greater than zero.\n\n    'seven numbers'\n    Explanation: The array b consists of exactly seven numbers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest number in array b is the sum of all three numbers in array a.\n\n    'smallest'\n    Explanation: The smallest number in array b is the smallest number in array a.\n\n# [code logic]\n1. For each test case, read the array b.\n2. Identify the smallest number in b as a_1.\n3. Identify the second smallest number in b as a_2.\n4. Identify the largest number in b as the sum of a_1, a_2, and a_3.\n5. Calculate a_3 as the difference between the largest number and the sum of a_1 and a_2.\n6. Return the values of a_1, a_2, and a_3.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements in b are sums of subsequences of [1, 1, 1], and they satisfy the conditions.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest numbers are 1 and 2, and the largest is 7, which is the sum of 1, 2, and 4.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements in b are sums of subsequences of [1000000000, 1000000000, 1000000000], and they satisfy the conditions.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by leveraging the properties of subsequences and their sums.\n", "requirement analysis:\nThe task requires restoring the original array of three distinct integers from a given sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output for each case.\nrequirement pool:\n- Restore the original array from the given sequence.\n- Handle up to 5000 test cases efficiently.\n- Ensure the solution works with large integer values.\n- Provide clear and correctly formatted output.\n- Optimize for both speed and memory usage.\nWe will solve the problem by leveraging the properties of the sorted list of sums of all non-empty subsequences. Given the sorted list b, the smallest element is a_1, the second smallest is a_2, and the largest element is a_1 + a_2 + a_3. By using these properties, we can efficiently reconstruct the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. A non-empty subsequence means that at least one element is present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'three positive integers'\n    Explanation: The array a consists of exactly three integers, each greater than zero.\n\n    'seven numbers'\n    Explanation: The array b consists of exactly seven integers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest element in the sorted list b is the smallest element of array a.\n\n    'largest'\n    Explanation: The largest element in the sorted list b is the sum of all elements in array a.\n\n# [code logic]\n1. For each test case, read the sorted list b of seven integers.\n2. Identify a_1 as the smallest element in b.\n3. Identify a_2 as the second smallest element in b.\n4. Identify a_3 by using the largest element in b, which is a_1 + a_2 + a_3.\n5. Calculate a_3 = (largest element in b) - a_1 - a_2.\n6. Return the three integers a_1, a_2, and a_3.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are the same, so each element in array a is 1.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest two elements are 1 and 2, and the largest is 7, so a_3 = 7 - 1 - 2 = 4.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are the same large number, so each element in array a is that number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases by correctly identifying the smallest and largest elements and calculating the third element accordingly.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from a given sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring the output format is consistent and correct.\nrequirement pool:\n- Efficiently compute the original array from the given sequence.\n- Ensure the solution is optimized for large input values.\n- Provide a user-friendly output format.\n- Handle edge cases and ensure robustness.\n- Document the solution approach clearly.\nWe will solve the problem by recognizing that the largest number in the sorted list b is the sum of all three numbers in the original array a. The smallest number in b is the smallest number in a. The second smallest number in b is the second smallest number in a. The third number in a can be found by subtracting the sum of the first two numbers from the largest number in b. This approach is efficient and works within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. A non-empty subsequence means that at least one element is present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'sum of all three numbers'\n    Explanation: The largest number in array b is the sum of all three numbers in array a. This can be implemented in code by identifying the last element of the sorted array b.\n\n# [degree adverb]\n    'largest'\n    Explanation: Refers to the maximum value in array b, which is the sum of all elements in array a.\n\n    'smallest'\n    Explanation: Refers to the minimum value in array b, which corresponds to the smallest element in array a.\n\n# [code logic]\n1. For each test case, read the array b.\n2. Identify the smallest element in b as a_1.\n3. Identify the second smallest element in b as a_2.\n4. Identify the largest element in b as the sum of a_1, a_2, and a_3.\n5. Calculate a_3 by subtracting a_1 and a_2 from the largest element.\n6. Return a_1, a_2, and a_3.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are the same except for the largest, which is the sum of three identical numbers.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest two numbers are 1 and 2, and the largest number is 7, which is the sum of 1, 2, and 4.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical, except for the largest, which is the sum of three identical numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of sorted arrays and sums.\n", "requirement analysis:\nThe task requires restoring the original array of three distinct integers from a given sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from the given sequence.\n- Handle up to 5000 test cases efficiently.\n- Ensure the solution works with large integer values.\n- Provide output in the specified format.\n- Optimize for both speed and memory usage.\nWe will implement a function that takes the sorted list of sums of all non-empty subsequences and restores the original array of three distinct integers. The approach is straightforward: given the sorted list b, the smallest element is a_1, the second smallest is a_2, and the largest element is a_3. This is because the smallest element in b is the smallest element in a, the second smallest is the second element in a, and the largest element in b is the sum of all elements in a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'sum of all elements'\n    Explanation: The largest number in array b is the sum of all elements in array a. This can be implemented by identifying the largest number in b.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest number in array b corresponds to the smallest element in array a, and the largest number in array b is the sum of all elements in array a.\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Identify the smallest element in b as a_1.\n    3. Identify the second smallest element in b as a_2.\n    4. Identify the largest element in b as the sum of a_1, a_2, and a_3.\n    5. Calculate a_3 using the formula: a_3 = largest - (a_1 + a_2).\n    6. Return the array [a_1, a_2, a_3].\n\n# [edge case]\n    Input: [1, 1, 2, 999999998, 999999999, 999999999, 1000000000]\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1, the second smallest is also 1, and the largest element is the sum of all three elements.\n\n    Input: [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000]\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element in a is equal to the smallest element in b.\n\n    Input: [1, 2, 2, 3, 3, 4, 5]\n    Output: 1 2 2\n    Explanation: The smallest element is 1, the second smallest is 2, and the largest element is the sum of all three elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases correctly by identifying the smallest and largest elements and calculating the third element accordingly.\n", "requirement analysis:\nThe task requires restoring the original array a from the sorted array b of subsequence sums. The solution must handle up to 5000 test cases efficiently, ensuring that the output format is strictly followed. The constraints guarantee that a valid array a exists for each test case, simplifying the problem to finding a consistent method to derive a from b.\nrequirement pool:\n- Implement the main algorithm to restore array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the algorithm for large integer values.\n- Validate the output format for each test case.\n- Document the solution for maintainability and scalability.\nWe will implement a simple function to restore the original array 'a' from the sorted array 'b' of subsequence sums. The approach leverages the fact that the smallest three numbers in 'b' are the elements of 'a', and the largest number in 'b' is the sum of all elements in 'a'. This allows us to efficiently derive 'a' from 'b' without complex computations. We will use Python's built-in capabilities to handle input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. A non-empty subsequence means that at least one element is present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array 'a' are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'three positive integers'\n    Explanation: The array 'a' consists of exactly three integers, each greater than zero.\n\n    'seven numbers'\n    Explanation: The array 'b' consists of exactly seven integers, which are the sums of all non-empty subsequences of 'a'.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the array 'b' of seven integers.\n2. Identify the smallest three numbers in 'b', which correspond to the individual elements of 'a'.\n3. The largest number in 'b' is the sum of all three elements of 'a'.\n4. Use these observations to reconstruct the original array 'a'.\n5. Output the elements of 'a' in increasing order.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements in 'b' are sums of subsequences of [1, 1, 1]. The largest number is 3, which is the sum of all elements in 'a'.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7, which is the sum of all elements in 'a'.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements in 'b' are sums of subsequences of [1000000000, 1000000000, 1000000000]. The largest number is 3000000000, which is the sum of all elements in 'a'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of subsequences and their sums.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from a given sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output for each case.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums.\n- Handle up to 5000 test cases with large integer values.\n- Ensure the output is correctly formatted for each test case.\n- Optimize for performance to handle edge cases smoothly.\n- Provide a user-friendly interface for input and output.\nWe will use a simple mathematical approach to deduce the original array 'a' from the given sorted array 'b'. Since 'b' contains all possible sums of non-empty subsequences of 'a', we can deduce that the smallest element in 'b' is the smallest element in 'a', the second smallest element in 'b' is the second smallest element in 'a', and the largest element in 'b' is the sum of all elements in 'a'. Thus, we can easily restore 'a' by selecting the first, second, and last elements from 'b'. This approach is efficient and handles the constraints smoothly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. A non-empty subsequence means that at least one element is present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array 'a' are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'three positive integers'\n    Explanation: The array 'a' consists of exactly three integers, each greater than zero.\n\n    'seven numbers'\n    Explanation: The array 'b' consists of exactly seven integers, which are the sums of all non-empty subsequences of 'a'.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the array 'b' of seven integers.\n2. Identify the smallest element in 'b', which corresponds to the smallest element in 'a'.\n3. Identify the second smallest element in 'b', which corresponds to the second smallest element in 'a'.\n4. Identify the largest element in 'b', which is the sum of all elements in 'a'.\n5. Deduce the third element of 'a' by subtracting the first two elements from the largest element.\n6. Return the three elements of 'a' in increasing order.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements in 'b' are sums of subsequences of [1, 1, 1], and they satisfy the condition.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest two elements are 1 and 2, and the largest is 7. The third element is deduced as 4.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements in 'b' are sums of subsequences of [1000000000, 1000000000, 1000000000], and they satisfy the condition.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all possible configurations of array 'b' that can be derived from a valid array 'a'.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, true, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 270, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "parent_index": 191}
