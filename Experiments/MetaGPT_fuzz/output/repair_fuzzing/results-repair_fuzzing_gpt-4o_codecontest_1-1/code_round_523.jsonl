{"name": "1591_C. Minimize Distance", "description": "A total of n depots are located on a number line. Depot i lies at the point x_i for 1 \u2264 i \u2264 n.\n\nYou are a salesman with n bags of goods, attempting to deliver one bag to each of the n depots. You and the n bags are initially at the origin 0. You can carry up to k bags at a time. You must collect the required number of goods from the origin, deliver them to the respective depots, and then return to the origin to collect your next batch of goods.\n\nCalculate the minimum distance you need to cover to deliver all the bags of goods to the depots. You do not have to return to the origin after you have delivered all the bags.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line of each test case contains n integers x_1, x_2, \u2026, x_n (-10^9 \u2264 x_i \u2264 10^9). It is possible that some depots share the same position.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots. \n\nExample\n\nInput\n\n\n4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n\n25\n41\n7\n3000000000\n\nNote\n\nIn the first test case, you can carry only one bag at a time. Thus, the following is a solution sequence that gives a minimum travel distance: 0 \u2192 2 \u2192 0 \u2192 4 \u2192 0 \u2192 3 \u2192 0 \u2192 1 \u2192 0 \u2192 5, where each 0 means you go the origin and grab one bag, and each positive integer means you deliver the bag to a depot at this coordinate, giving a total distance of 25 units. It must be noted that there are other sequences that give the same distance.\n\nIn the second test case, you can follow the following sequence, among multiple such sequences, to travel minimum distance: 0 \u2192 6 \u2192 8 \u2192 7 \u2192 0 \u2192 5 \u2192 4 \u2192 3 \u2192 0 \u2192 (-5) \u2192 (-10) \u2192 (-15), with distance 41. It can be shown that 41 is the optimal distance for this test case.", "tags": ["greedy", "math"], "difficulty": 9, "id": 1591, "sample_io": [{"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["25\n41\n7\n3000000000\n"]}], "test_list": [{"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n41\n7\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["25\n41\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n41\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 1\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n41\n23\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 4 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n41\n10\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -18 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["25\n44\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 8 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 4 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["30\n41\n10\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n41\n25\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 7 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n43\n25\n3000010000\n"]}, {"input": "4\n5 1\n1 3 3 4 5\n9 3\n-9 -18 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["27\n44\n9\n3000000000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 7 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n43\n25\n3000010000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -12 6 7 8 3 7 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n40\n25\n3000010000\n"]}, {"input": "4\n5 1\n1 3 3 4 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["27\n46\n9\n3000000000\n"]}, {"input": "4\n5 1\n0 1 3 4 5\n9 3\n-5 -10 -12 6 7 8 3 7 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["21\n40\n25\n3000010000\n"]}, {"input": "4\n5 1\n1 1 3 4 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["23\n46\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 1 3 4 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 6 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["23\n46\n10\n3000000000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["16\n46\n10\n3000000000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -18 -6 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n46\n10\n3000000010\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -22 -6 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n50\n10\n3000000010\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -12 -6 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n40\n10\n3000000010\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -12 -6 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 1\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n40\n10\n7000000010\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 0\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["25\n41\n7\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000010100\n", "output": ["25\n41\n7\n3000010100\n"]}, {"input": "4\n5 2\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["13\n41\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 4 4\n5 3\n2 2 5 3 3\n4 2\n0000000000 1000000000 1000000000 1000000000\n", "output": ["25\n39\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 7 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000001 1000000000 1000010000\n", "output": ["29\n41\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 9\n9 3\n-5 -18 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["29\n44\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 2 5\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n41\n9\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 1\n2 2 3 3 3\n4 5\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n41\n23\n1000010000\n"]}, {"input": "4\n5 1\n1 2 3 8 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 4 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000110000\n", "output": ["30\n41\n10\n3000110000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n41\n25\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 7 4\n5 1\n2 3 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n43\n27\n3000010000\n"]}, {"input": "4\n5 1\n1 3 3 4 5\n9 3\n-9 -18 -15 6 5 8 3 7 4\n5 3\n1 2 5 0 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["27\n44\n7\n3000000000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -12 6 7 8 3 7 4\n5 1\n2 2 2 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n40\n23\n3000010000\n"]}, {"input": "4\n5 1\n1 3 3 4 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 5 3 2\n4 2\n1001000000 1000000000 1000000000 1000000000\n", "output": ["27\n46\n9\n3001000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["25\n46\n10\n3000000000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -18 -15 5 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["16\n44\n10\n3000000000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -18 -6 6 6 8 3 7 4\n5 3\n1 1 6 3 4\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["16\n46\n8\n3000000000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -22 -6 6 6 8 3 7 4\n5 3\n1 3 6 3 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n50\n12\n3000000010\n"]}, {"input": "4\n5 2\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 0\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["13\n41\n7\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -25 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000010100\n", "output": ["25\n51\n7\n3000010100\n"]}, {"input": "4\n5 1\n1 2 3 7 5\n9 3\n-5 -10 -15 6 2 8 3 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000001 1000000000 1000010000\n", "output": ["29\n39\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 9\n9 3\n-5 -18 -15 6 5 8 3 7 4\n5 3\n4 2 5 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["29\n44\n11\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 5 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 1\n2 2 3 3 3\n4 5\n1000000000 1000000000 1000000000 1000010000\n", "output": ["27\n41\n23\n1000010000\n"]}, {"input": "4\n5 1\n1 2 3 8 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 7 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000110000\n", "output": ["30\n41\n13\n3000110000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-9 -4 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 3\n4 2\n1000000000 1000100000 1000000000 1000000000\n", "output": ["25\n41\n9\n3000100000\n"]}, {"input": "4\n5 1\n1 2 3 4 2\n9 3\n-14 -18 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["20\n44\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 7 7\n5 1\n2 3 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n45\n27\n3000010000\n"]}, {"input": "4\n5 1\n0 3 3 4 5\n9 3\n-9 -18 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n44\n9\n3000010000\n"]}, {"input": "4\n5 1\n1 3 3 4 5\n9 3\n-9 -18 -15 6 5 8 3 7 8\n5 3\n1 2 5 0 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["27\n46\n7\n3000000000\n"]}, {"input": "4\n5 1\n1 3 3 6 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 5 3 2\n4 2\n1001000000 1000000000 1000000000 1000000000\n", "output": ["30\n46\n9\n3001000000\n"]}, {"input": "4\n5 1\n1 0 3 4 5\n9 3\n-9 -18 -1 6 6 8 3 7 4\n5 3\n1 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["21\n46\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000001 1000000000 1000000000 1000000000\n", "output": ["25\n46\n10\n3000000001\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -18 -6 6 5 8 3 7 4\n5 3\n1 1 6 3 4\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["16\n44\n8\n3000000000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -22 -6 6 6 8 3 7 4\n5 3\n1 3 6 0 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n50\n8\n3000000010\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -12 -6 6 6 8 3 9 3\n5 3\n1 2 6 3 4\n4 1\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n42\n10\n7000000010\n"]}, {"input": "4\n5 2\n1 2 3 4 5\n9 3\n-5 -10 -15 6 0 8 3 7 0\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["13\n37\n7\n3000000000\n"]}, {"input": "4\n5 2\n1 2 3 4 5\n9 3\n-5 -10 -15 6 0 8 3 7 4\n5 3\n2 2 3 4 3\n4 3\n1000001000 1000000000 1000000000 1000010000\n", "output": ["13\n39\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 7 5\n9 3\n-5 -10 -15 6 2 8 3 0 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000001 1000000000 1000010000\n", "output": ["29\n37\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 8 5\n9 3\n-5 -10 -15 10 5 8 3 7 4\n5 3\n2 7 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000110000\n", "output": ["30\n45\n13\n3000110000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -13 -15 6 5 8 3 12 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n49\n25\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n57\n27\n3000010000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 7 7\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000001000 1000000000 1000010000\n", "output": ["23\n45\n25\n3000010000\n"]}, {"input": "4\n5 1\n1 3 3 4 5\n9 3\n-9 -18 -15 6 5 8 3 7 8\n5 3\n1 2 5 0 2\n4 2\n1000000000 1000000000 1010000000 1000000000\n", "output": ["27\n46\n7\n3010000000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -12 6 7 8 3 7 0\n5 1\n2 4 2 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n40\n27\n3000010000\n"]}, {"input": "4\n5 1\n1 3 3 6 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 1 5 3 2\n4 2\n1001000000 1000000000 1000000000 1000000000\n", "output": ["30\n46\n7\n3001000000\n"]}, {"input": "4\n5 1\n2 2 3 4 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000001 1000000000 1000000000 1000000000\n", "output": ["27\n46\n10\n3000000001\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -18 -6 6 5 8 3 7 4\n5 3\n1 1 6 3 4\n4 2\n1000000000 1000000000 1000000000 1010000000\n", "output": ["16\n44\n8\n3010000000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -22 -6 6 6 0 3 7 4\n5 3\n1 3 6 0 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n44\n8\n3000000010\n"]}, {"input": "4\n5 2\n1 2 3 4 5\n9 3\n-5 -10 -15 6 -1 8 3 7 0\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["13\n39\n7\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -25 6 5 9 1 7 4\n5 3\n2 2 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000010100\n", "output": ["25\n53\n7\n3000010100\n"]}, {"input": "4\n5 1\n1 2 3 7 0\n9 3\n-5 -10 -15 6 2 8 3 0 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000001 1000000000 1000010000\n", "output": ["19\n37\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 9\n9 3\n-5 -18 -8 6 5 8 3 7 4\n5 3\n4 2 5 3 3\n4 2\n1000000000 1000000000 1000000010 1000000000\n", "output": ["29\n44\n11\n3000000010\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 5\n5 3\n2 2 3 2 5\n4 3\n1000000000 1000000000 1000010000 1001010000\n", "output": ["25\n41\n9\n3001010000\n"]}, {"input": "4\n5 1\n1 2 3 8 5\n9 4\n-5 -10 -15 10 5 8 3 7 4\n5 3\n2 7 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000110000\n", "output": ["30\n43\n13\n3000110000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-9 -4 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 2\n4 1\n1000000000 1000100000 1000000000 1000000000\n", "output": ["25\n41\n9\n7000100000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -13 -15 6 5 8 3 12 4\n5 1\n2 0 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n49\n21\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 5\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n57\n27\n1000010000\n"]}, {"input": "4\n5 1\n1 3 3 4 5\n9 3\n-9 -18 -15 6 5 8 3 7 8\n5 3\n1 2 5 0 2\n4 2\n1000000000 1000000000 1010010000 1000000000\n", "output": ["27\n46\n7\n3010010000\n"]}, {"input": "4\n5 1\n1 3 3 11 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 1 5 3 2\n4 2\n1001000000 1000000000 1000000000 1000000000\n", "output": ["35\n46\n7\n3001000000\n"]}, {"input": "4\n5 1\n2 2 3 4 5\n9 3\n-9 -25 -15 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000001 1000000000 1000000000 1000000000\n", "output": ["27\n53\n10\n3000000001\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -18 -6 6 5 8 3 7 4\n5 3\n1 1 6 3 4\n4 2\n1000000000 1000000000 1000000000 1010100000\n", "output": ["16\n44\n8\n3010100000\n"]}, {"input": "4\n5 1\n1 1 3 1 1\n9 3\n-9 -22 -6 6 6 0 3 7 4\n5 3\n1 3 6 0 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["11\n44\n8\n3000000010\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -25 6 5 9 1 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000000 1000000000 1000010100\n", "output": ["25\n53\n8\n3000010100\n"]}, {"input": "4\n5 1\n1 2 3 7 0\n9 3\n-5 -10 -15 6 2 8 3 0 4\n5 3\n2 4 3 4 3\n4 3\n1000000000 1000000001 1000000000 1000010000\n", "output": ["19\n37\n10\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 9\n9 3\n-5 -18 -8 6 5 8 3 7 4\n5 3\n4 2 5 3 3\n4 2\n1000000000 1010000000 1000000010 1000000000\n", "output": ["29\n44\n11\n3010000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-9 -4 -15 2 5 8 3 7 4\n5 3\n2 2 5 3 2\n4 1\n1000000000 1000100000 1000000000 1000000000\n", "output": ["25\n39\n9\n7000100000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -13 -15 6 5 1 3 12 4\n5 1\n2 0 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n47\n21\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 2\n9 3\n-14 -18 -13 6 2 8 3 7 4\n5 3\n4 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["20\n42\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 3 3 11 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 1 8 3 2\n4 2\n1001000000 1000000000 1000000000 1000000000\n", "output": ["35\n46\n10\n3001000000\n"]}, {"input": "4\n5 1\n2 2 3 4 5\n9 3\n-9 -25 -15 6 6 8 3 7 4\n5 3\n1 0 6 3 4\n4 2\n1000000001 1000000000 1000000000 1000000000\n", "output": ["27\n53\n8\n3000000001\n"]}, {"input": "4\n5 1\n1 1 3 1 1\n9 3\n-9 -22 -6 6 6 0 3 7 4\n5 3\n2 3 6 0 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["11\n44\n10\n3000000010\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -12 -6 6 6 7 3 9 3\n5 3\n1 2 7 5 4\n4 1\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n42\n11\n7000000010\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -20 6 5 9 1 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000000 1000000000 1000010100\n", "output": ["25\n48\n8\n3000010100\n"]}, {"input": "4\n5 1\n1 2 3 4 2\n9 3\n-14 -18 -13 6 2 8 6 7 4\n5 3\n4 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["20\n46\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 5\n1000000000 1000000000 1000000010 1010010000\n", "output": ["25\n57\n27\n1010010000\n"]}, {"input": "4\n5 1\n2 2 3 4 7\n9 3\n-9 -25 -15 6 6 8 3 7 4\n5 3\n1 0 6 3 4\n4 2\n1000000001 1000000000 1000000000 1000000000\n", "output": ["29\n53\n8\n3000000001\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -18 -6 6 5 8 3 0 4\n5 3\n1 1 6 3 4\n4 2\n1000000000 1001000000 1000000000 1010100000\n", "output": ["16\n42\n8\n3010100000\n"]}, {"input": "4\n5 1\n1 1 3 1 1\n9 3\n-9 -22 -6 6 6 0 3 7 4\n5 4\n2 3 6 0 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["11\n44\n6\n3000000010\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -12 -6 6 6 7 3 9 3\n5 2\n1 2 7 5 4\n4 1\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n42\n17\n7000000010\n"]}, {"input": "4\n5 1\n1 2 3 4 2\n9 6\n-14 -18 -13 6 2 8 6 7 4\n5 3\n4 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["20\n34\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 1\n-5 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 5\n1000000000 1000000000 1000000010 1010010000\n", "output": ["25\n135\n27\n1010010000\n"]}, {"input": "4\n5 1\n2 2 3 5 7\n9 3\n-9 -25 -15 6 6 8 3 7 4\n5 3\n1 0 6 3 4\n4 2\n1000000001 1000000000 1000000000 1000000000\n", "output": ["31\n53\n8\n3000000001\n"]}, {"input": "4\n5 1\n1 1 3 8 1\n9 3\n-9 -18 -6 6 5 8 3 0 4\n5 3\n1 1 6 3 4\n4 2\n1000000000 1001000000 1000000000 1010100000\n", "output": ["20\n42\n8\n3010100000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -10 -6 6 6 7 3 9 3\n5 2\n1 2 7 5 4\n4 1\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n40\n17\n7000000010\n"]}, {"input": "4\n5 1\n1 2 3 4 10\n9 3\n-5 -10 -20 6 5 9 1 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000001 1000000000 1000000000 1000010100\n", "output": ["30\n48\n8\n3000010100\n"]}, {"input": "4\n5 1\n1 2 3 4 2\n9 6\n-14 -18 -13 6 2 8 6 11 4\n5 3\n4 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["20\n40\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 10\n9 5\n-5 -10 -20 6 5 9 1 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000001 1000000000 1000000000 1000010100\n", "output": ["30\n40\n8\n3000010100\n"]}, {"input": "4\n5 1\n1 2 3 5 5\n9 4\n-5 -6 -15 10 5 8 4 0 4\n5 3\n2 7 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000110000\n", "output": ["27\n43\n13\n3000110000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 1\n-5 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 5\n1000000000 1000000001 1000000010 1010010000\n", "output": ["23\n135\n27\n1010010000\n"]}, {"input": "4\n5 1\n1 2 3 5 5\n9 4\n-5 -6 -15 10 5 8 4 0 4\n5 3\n2 7 3 3 3\n4 5\n1000000000 1000000000 1000000000 1000110000\n", "output": ["27\n43\n13\n1000110000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 1\n-5 -10 -15 6 7 8 3 14 7\n5 1\n4 3 3 5 3\n4 5\n1000000000 1000000001 1000000010 1010010000\n", "output": ["23\n135\n31\n1010010000\n"]}, {"input": "4\n5 1\n0 0 3 4 5\n9 1\n-5 -10 -15 6 7 8 3 14 7\n5 1\n4 3 3 5 3\n4 5\n1000000000 1000000001 1000000010 1010010000\n", "output": ["19\n135\n31\n1010010000\n"]}, {"input": "4\n5 1\n0 0 3 4 5\n9 1\n-5 -10 -15 6 7 8 3 4 7\n5 1\n4 3 3 5 3\n4 5\n1000000000 1000000001 1000000010 1010010000\n", "output": ["19\n115\n31\n1010010000\n"]}, {"input": "4\n5 1\n1 2 3 3 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n41\n7\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 7\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 3\n4 2\n0000000000 1000000000 1000000000 1000000000\n", "output": ["27\n41\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 1\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 4 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["18\n41\n10\n3000010000\n"]}, {"input": "4\n5 1\n1 2 4 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 2 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["27\n41\n7\n3000010000\n"]}, {"input": "4\n5 1\n1 0 3 4 5\n9 3\n-9 -18 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["21\n44\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 1\n2 4 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n41\n29\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 7 4\n5 1\n2 2 3 5 3\n4 1\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n43\n25\n7000010000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 7 4\n5 1\n1 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n43\n23\n3000010000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -12 6 7 8 3 12 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n48\n25\n3000010000\n"]}, {"input": "4\n5 1\n0 1 3 4 3\n9 3\n-5 -10 -12 6 7 8 3 7 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["18\n40\n25\n3000010000\n"]}, {"input": "4\n5 1\n1 1 3 4 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 0 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["23\n46\n7\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-9 -18 -15 6 6 8 3 9 4\n5 3\n1 2 6 3 4\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["25\n48\n10\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 1\n9 3\n-9 -22 -6 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["18\n50\n10\n3000000010\n"]}, {"input": "4\n5 1\n1 1 3 4 0\n9 3\n-9 -12 -6 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["14\n40\n10\n3000000010\n"]}, {"input": "4\n5 1\n1 2 6 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000010100\n", "output": ["30\n41\n7\n3000010100\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 4 4\n5 3\n2 2 5 6 3\n4 2\n0000000000 1000000000 1000000000 1000000000\n", "output": ["25\n39\n10\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 7 5\n9 3\n-5 -10 -23 6 5 8 3 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000001 1000000000 1000010000\n", "output": ["29\n49\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 9\n9 4\n-5 -18 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["29\n42\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 16 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 4 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000110000\n", "output": ["38\n41\n10\n3000110000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-14 -18 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 2\n4 2\n1000000000 1000000000 1000000001 1000000000\n", "output": ["25\n44\n9\n3000000001\n"]}, {"input": "4\n5 1\n0 3 3 4 5\n9 3\n-9 -18 -15 6 5 3 3 7 4\n5 3\n2 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["25\n40\n9\n3000000000\n"]}, {"input": "4\n5 1\n-1 2 3 4 5\n9 3\n-5 -10 -15 9 7 8 3 7 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n47\n25\n3000010000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -12 6 7 8 3 7 4\n5 1\n2 2 2 10 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n40\n28\n3000010000\n"]}, {"input": "4\n5 1\n1 3 3 4 0\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 5 3 2\n4 2\n1001000000 1000000000 1000000000 1000000000\n", "output": ["18\n46\n9\n3001000000\n"]}, {"input": "4\n5 1\n1 1 3 4 5\n9 3\n-9 -18 -1 6 6 8 3 7 4\n5 5\n1 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["23\n46\n5\n3000000000\n"]}, {"input": "4\n5 1\n1 2 1 4 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["21\n46\n10\n3000000000\n"]}, {"input": "4\n5 1\n1 0 3 4 1\n9 3\n-9 -18 -15 5 6 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["14\n44\n10\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -25 3 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000010100\n", "output": ["25\n49\n7\n3000010100\n"]}, {"input": "4\n5 2\n2 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 4 3\n4 3\n1000001000 1000000000 1000000000 1000010000\n", "output": ["15\n41\n8\n3000010000\n"]}, {"input": "4\n5 1\n2 2 3 7 5\n9 3\n-5 -10 -15 6 2 8 3 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000001 1000000000 1000010000\n", "output": ["31\n39\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 0 3 4 9\n9 3\n-5 -18 -15 6 5 8 3 7 4\n5 3\n4 2 5 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["25\n44\n11\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 8 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 7 3 3 3\n4 3\n1000000000 1000000000 0000000000 1000110000\n", "output": ["30\n41\n13\n1000110000\n"]}, {"input": "4\n5 1\n1 2 3 2 2\n9 3\n-14 -18 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["17\n44\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 7 7\n5 1\n2 3 3 0 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n45\n19\n3000010000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 7 4\n5 1\n4 2 3 5 3\n4 3\n1000000000 1000001000 1000000000 1000010000\n", "output": ["23\n43\n29\n3000010000\n"]}, {"input": "4\n5 1\n1 3 3 4 5\n9 3\n-9 -18 -15 6 5 8 3 7 8\n5 6\n1 2 5 0 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["27\n46\n5\n3000000000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -10 -12 6 14 8 3 7 0\n5 1\n2 2 2 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n50\n23\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-9 -18 -15 6 0 8 3 7 4\n5 3\n1 2 6 3 4\n4 2\n1000000001 1000000000 1000000000 1000000000\n", "output": ["25\n42\n10\n3000000001\n"]}, {"input": "4\n5 2\n1 2 3 4 5\n9 3\n-5 -10 -15 6 0 8 3 7 4\n5 3\n2 2 3 4 3\n4 3\n1000001000 1000000000 1001000000 1000010000\n", "output": ["13\n39\n8\n3001000000\n"]}, {"input": "4\n5 1\n1 2 3 7 5\n9 3\n-5 -10 -9 6 2 8 3 0 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000001 1000000000 1000010000\n", "output": ["29\n32\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 9\n9 3\n-5 -18 -8 6 5 8 3 7 4\n5 5\n4 2 5 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["29\n44\n5\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 2\n-5 -10 -15 6 5 8 3 7 5\n5 3\n2 2 3 2 5\n4 3\n1000000000 1000000000 1000010000 1000010000\n", "output": ["25\n63\n9\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 8 5\n9 3\n-5 -10 -15 10 5 8 3 7 4\n5 3\n2 7 3 3 3\n4 3\n1000000000 1001000000 1000000000 1000110000\n", "output": ["30\n45\n13\n3001000000\n"]}, {"input": "4\n5 1\n1 2 6 4 5\n9 3\n-9 -4 -15 6 5 8 3 7 4\n5 3\n2 2 5 3 2\n4 2\n1000000000 1000100000 1000000000 1000000000\n", "output": ["30\n41\n9\n3000100000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -13 -15 6 4 8 3 12 4\n5 1\n2 2 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n47\n25\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 3\n1000000000 1000000000 1000000000 1010010000\n", "output": ["25\n57\n27\n3010010000\n"]}, {"input": "4\n5 1\n1 3 3 8 5\n9 3\n-9 -18 -15 6 5 8 3 7 8\n5 3\n1 2 5 0 2\n4 2\n1000000000 1000000000 1010000000 1000000000\n", "output": ["32\n46\n7\n3010000000\n"]}, {"input": "4\n5 1\n0 2 3 6 5\n9 3\n-5 -10 -12 6 7 8 3 7 0\n5 1\n2 4 2 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["26\n40\n27\n3000010000\n"]}, {"input": "4\n5 2\n1 2 4 4 5\n9 3\n-5 -10 -15 6 -1 8 3 7 0\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["15\n39\n7\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 7 0\n9 3\n-5 -10 -15 6 2 8 3 0 4\n5 3\n2 2 3 8 3\n4 3\n1000000000 1000000001 1000000000 1000010000\n", "output": ["19\n37\n12\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 9\n9 3\n-5 -18 -8 6 5 8 3 7 4\n5 2\n4 2 5 3 3\n4 2\n1000000000 1000000000 1000000010 1000000000\n", "output": ["29\n44\n15\n3000000010\n"]}, {"input": "4\n5 1\n1 2 3 4 6\n9 3\n-5 -10 -15 6 5 8 3 7 5\n5 3\n2 2 3 2 5\n4 3\n1000000000 1000000000 1000010000 1001010000\n", "output": ["26\n41\n9\n3001010000\n"]}, {"input": "4\n5 1\n1 2 3 8 5\n9 4\n-5 -10 -15 10 5 8 3 7 4\n5 3\n2 7 3 3 3\n4 3\n1000000000 1000000000 1000000000 1010110000\n", "output": ["30\n43\n13\n3010110000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-9 -4 -15 6 5 8 3 7 8\n5 3\n2 2 5 3 2\n4 1\n1000000000 1000100000 1000000000 1000000000\n", "output": ["25\n43\n9\n7000100000\n"]}, {"input": "4\n5 1\n1 2 3 7 2\n9 3\n-14 -18 -13 6 5 8 3 7 4\n5 3\n4 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["23\n44\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 5\n1000100000 1000000000 1000000000 1000010000\n", "output": ["25\n57\n27\n1000100000\n"]}, {"input": "4\n5 1\n1 3 3 4 5\n9 3\n-9 -18 -15 1 5 8 3 7 8\n5 3\n1 2 5 0 2\n4 2\n1000000000 1000000000 1010010000 1000000000\n", "output": ["27\n44\n7\n3010010000\n"]}, {"input": "4\n5 1\n1 3 3 11 5\n9 3\n-9 -18 -15 6 6 8 3 7 4\n5 3\n1 1 5 3 2\n4 4\n1001000000 1000000000 1000000000 1000000000\n", "output": ["35\n46\n7\n1001000000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -6 -6 6 5 8 3 7 4\n5 3\n1 1 6 3 4\n4 2\n1000000000 1000000000 1000000000 1010100000\n", "output": ["16\n35\n8\n3010100000\n"]}, {"input": "4\n5 2\n1 1 3 1 1\n9 3\n-9 -22 -6 6 6 0 3 7 4\n5 3\n1 3 6 0 4\n4 2\n1000000010 1000000000 1000000000 1000000000\n", "output": ["7\n44\n8\n3000000010\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 2\n-5 -10 -25 6 5 9 1 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000000 1000000000 1000010100\n", "output": ["25\n73\n8\n3000010100\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -18 -15 6 5 1 3 12 4\n5 1\n2 0 3 5 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n50\n21\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 6\n4 5\n1000000000 1000000000 1000000010 1000010000\n", "output": ["25\n57\n32\n1000010000\n"]}, {"input": "4\n5 1\n1 3 3 11 5\n9 3\n-9 -18 -26 6 6 8 3 7 4\n5 3\n1 1 8 3 2\n4 2\n1001000000 1000000000 1000000000 1000000000\n", "output": ["35\n54\n10\n3001000000\n"]}, {"input": "4\n5 1\n2 1 3 4 1\n9 3\n-9 -18 -6 6 5 8 3 7 4\n5 3\n1 1 6 3 4\n4 2\n1000000000 1001000000 1000000000 1010100000\n", "output": ["18\n44\n8\n3010100000\n"]}, {"input": "4\n5 1\n1 1 3 4 1\n9 3\n-9 -14 -6 6 6 7 3 9 3\n5 3\n1 2 7 5 4\n4 1\n1000000010 1000000000 1000000000 1000000000\n", "output": ["16\n44\n11\n7000000010\n"]}, {"input": "4\n5 2\n1 2 3 4 5\n9 3\n-5 -10 -20 6 5 9 1 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000000 1000000000 1000010100\n", "output": ["13\n48\n8\n3000010100\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-9 -4 -15 2 1 8 3 7 4\n5 4\n2 2 5 3 2\n4 1\n1000000000 1000100000 1000000000 1000000000\n", "output": ["25\n37\n9\n7000100000\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 3\n-5 -13 -15 6 5 1 3 12 4\n5 1\n1 0 3 5 3\n4 2\n1000000000 1000000000 1000000000 1000010000\n", "output": ["23\n47\n19\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 6\n4 5\n1000000000 1000000000 1000000010 1010010000\n", "output": ["25\n57\n32\n1010010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -20 6 5 9 1 7 4\n5 3\n2 2 3 4 3\n4 3\n1000100001 1000000000 1000000000 1000010100\n", "output": ["25\n48\n8\n3000100001\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 1\n-7 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 5\n1000000000 1000000000 1000000010 1010010000\n", "output": ["25\n139\n27\n1010010000\n"]}, {"input": "4\n5 1\n1 0 3 4 1\n9 3\n-9 -10 -6 6 6 7 3 9 3\n5 2\n1 2 7 5 4\n4 1\n1000000010 1000000000 1000000000 1000000000\n", "output": ["14\n40\n17\n7000000010\n"]}, {"input": "4\n5 1\n0 2 3 4 10\n9 3\n-5 -10 -20 6 5 9 1 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000001 1000000000 1000000000 1000010100\n", "output": ["28\n48\n8\n3000010100\n"]}, {"input": "4\n5 1\n1 2 3 8 5\n9 4\n-5 -6 -15 10 5 8 4 0 0\n5 3\n2 7 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000110000\n", "output": ["30\n35\n13\n3000110000\n"]}, {"input": "4\n5 1\n1 2 3 4 0\n9 6\n-14 -18 -13 6 2 8 6 11 4\n5 3\n4 2 5 3 2\n4 2\n1000000000 1000000000 1000000000 1000000000\n", "output": ["16\n40\n9\n3000000000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 1\n-5 -10 -20 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 5\n1000000000 1000000001 1000000010 1010010000\n", "output": ["25\n140\n27\n1010010000\n"]}, {"input": "4\n5 1\n1 2 3 4 10\n9 5\n-5 -10 -20 6 5 9 1 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000001 1000000000 1000000000 1000000100\n", "output": ["30\n40\n8\n3000000100\n"]}, {"input": "4\n5 1\n0 2 3 4 5\n9 1\n-2 -10 -15 6 7 8 3 14 7\n5 1\n2 3 3 5 3\n4 5\n1000000000 1000000001 1000000010 1010010000\n", "output": ["23\n129\n27\n1010010000\n"]}, {"input": "4\n5 1\n1 2 3 5 5\n9 4\n-5 -6 -15 10 5 8 4 0 4\n5 3\n2 7 3 3 3\n4 5\n1000000000 1000000000 1000000000 1000111000\n", "output": ["27\n43\n13\n1000111000\n"]}, {"input": "4\n5 2\n0 2 3 4 5\n9 1\n-5 -10 -15 6 7 8 3 14 7\n5 1\n4 3 3 5 3\n4 5\n1000000000 1000000001 1000000010 1010010000\n", "output": ["11\n135\n31\n1010010000\n"]}, {"input": "4\n5 1\n1 2 3 5 5\n9 4\n-5 -4 -15 10 3 8 4 0 4\n5 3\n2 7 3 3 3\n4 5\n1000000000 1000000000 1000000000 1000110000\n", "output": ["27\n41\n13\n1000110000\n"]}, {"input": "4\n5 1\n0 0 3 4 5\n9 1\n-5 -10 -15 6 7 8 3 4 7\n5 1\n4 3 3 5 1\n4 5\n1000000000 1000000001 1000000010 1010010000\n", "output": ["19\n115\n27\n1010010000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 5 4\n5 3\n2 2 5 3 3\n4 2\n1000001000 1000000000 1000000000 1000000000\n", "output": ["25\n41\n9\n3000001000\n"]}, {"input": "4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 3 8 0 7 4\n5 3\n2 2 3 4 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["25\n39\n8\n3000010000\n"]}, {"input": "4\n5 1\n1 2 3 4 2\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 4 3 3 3\n4 3\n1000000000 1000000000 1000000000 1000010000\n", "output": ["20\n41\n10\n3000010000\n"]}], "task_id": "codecontest/47", "prompt": "A total of n depots are located on a number line. Depot i lies at the point x_i for 1 \u2264 i \u2264 n.\n\nYou are a salesman with n bags of goods, attempting to deliver one bag to each of the n depots. You and the n bags are initially at the origin 0. You can carry up to k bags at a time. You are required to collect the required number of goods from the origin and then deliver them to the respective depots. After that, you need to return to the origin to collect your next batch of goods.\n\nCalculate the minimum distance you need to cover to deliver all the bags of goods to the depots. You do not have to return to the origin after you have delivered all the bags. Consider optimizing your strategy to minimize the total distance traveled.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line of each test case contains n integers x_1, x_2, \u2026, x_n (-10^9 \u2264 x_i \u2264 10^9). It is possible that some depots share the same position.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots. \n\nExample\n\nInput\n\n\n4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n\n25\n41\n7\n3000000000\n\nNote\n\nIn the first test case, you can carry only one bag at a time. Thus, the following is a solution sequence that gives a minimum travel distance: 0 \u2192 2 \u2192 0 \u2192 4 \u2192 0 \u2192 3 \u2192 0 \u2192 1 \u2192 0 \u2192 5, where each 0 means you go the origin and grab one bag, and each positive integer means you deliver the bag to a depot at this coordinate, giving a total distance of 25 units. It must be noted that there are other sequences that give the same distance.\n\nIn the second test case, you can follow the following sequence, among multiple such sequences, to travel minimum distance: 0 \u2192 6 \u2192 8 \u2192 7 \u2192 0 \u2192 5 \u2192 4 \u2192 3 \u2192 0 \u2192 (-5) \u2192 (-10) \u2192 (-15), with distance 41. It can be shown that 41 is the optimal distance for this test case.", "repair_prompt": ["A total of n depots are located on a number line. Depot i lies at the point x_i for 1 \u2264 i \u2264 n.\n\nYou are a salesman with n bags of goods, attempting to deliver one bag to each of the n depots. You and the n bags are initially at the origin 0. You can carry up to k bags at a time. You are required to collect the required number of goods from the origin and then deliver them to the respective depots. After that, you need to return to the origin to collect your next batch of goods.\n\nCalculate the minimum distance you need to cover to deliver all the bags of goods to the depots. You do not have to return to the origin after you have delivered all the bags. Consider optimizing your strategy to minimize the total distance traveled.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line of each test case contains n integers x_1, x_2, \u2026, x_n (-10^9 \u2264 x_i \u2264 10^9). It is possible that some depots share the same position.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots. \n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n\n25\n41\n7\n3000000000\n\nNote\n\nIn the first test case, you can carry only one bag at a time. Thus, the following is a solution sequence that gives a minimum travel distance: 0 \u2192 2 \u2192 0 \u2192 4 \u2192 0 \u2192 3 \u2192 0 \u2192 1 \u2192 0 \u2192 5, where each 0 means you go the origin and grab one bag, and each positive integer means you deliver the bag to a depot at this coordinate, giving a total distance of 25 units. It must be noted that there are other sequences that give the same distance.\n\nIn the second test case, you can follow the following sequence, among multiple such sequences, to travel minimum distance: 0 \u2192 6 \u2192 8 \u2192 7 \u2192 0 \u2192 5 \u2192 4 \u2192 3 \u2192 0 \u2192 (-5) \u2192 (-10) \u2192 (-15), with distance 41. It can be shown that 41 is the optimal distance for this test case.", "A total of n depots are located on a number line. Depot i lies at the point x_i for 1 \u2264 i \u2264 n.\n\nYou are a salesman with n bags of goods, attempting to deliver one bag to each of the n depots. You and the n bags are initially at the origin 0. You can carry up to k bags at a time. You are required to collect the required number of goods from the origin. Then, you will deliver them to the respective depots. After that, you need to return to the origin to collect your next batch of goods.\n\nCalculate the minimum distance you need to cover to deliver all the bags of goods to the depots. You do not have to return to the origin after you have delivered all the bags. Consider optimizing your strategy to minimize the total distance traveled.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line of each test case contains n integers x_1, x_2, \u2026, x_n (-10^9 \u2264 x_i \u2264 10^9). It is possible that some depots share the same position.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots. \n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n\n25\n41\n7\n3000000000\n\nNote\n\nIn the first test case, you can carry only one bag at a time. Thus, the following is a solution sequence that gives a minimum travel distance: 0 \u2192 2 \u2192 0 \u2192 4 \u2192 0 \u2192 3 \u2192 0 \u2192 1 \u2192 0 \u2192 5, where each 0 means you go the origin and grab one bag, and each positive integer means you deliver the bag to a depot at this coordinate, giving a total distance of 25 units. It must be noted that there are other sequences that give the same distance.\n\nIn the second test case, you can follow the following sequence, among multiple such sequences, to travel minimum distance: 0 \u2192 6 \u2192 8 \u2192 7 \u2192 0 \u2192 5 \u2192 4 \u2192 3 \u2192 0 \u2192 (-5) \u2192 (-10) \u2192 (-15), with distance 41. It can be shown that 41 is the optimal distance for this test case.", "A total of n depots are located on a number line. Depot i lies at the point x_i for 1 \u2264 i \u2264 n.\n\nYou are a salesman with n bags of goods, attempting to deliver one bag to each of the n depots and you and the n bags are initially at the origin 0; you can carry up to k bags at a time. You are required to collect the required number of goods from the origin and then deliver them to the respective depots. After that, you need to return to the origin to collect your next batch of goods.\n\nCalculate the minimum distance you need to cover to deliver all the bags of goods to the depots. You do not have to return to the origin after you have delivered all the bags. Consider optimizing your strategy to minimize the total distance traveled.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line of each test case contains n integers x_1, x_2, \u2026, x_n (-10^9 \u2264 x_i \u2264 10^9). It is possible that some depots share the same position.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots. \n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n\n25\n41\n7\n3000000000\n\nNote\n\nIn the first test case, you can carry only one bag at a time. Thus, the following is a solution sequence that gives a minimum travel distance: 0 \u2192 2 \u2192 0 \u2192 4 \u2192 0 \u2192 3 \u2192 0 \u2192 1 \u2192 0 \u2192 5, where each 0 means you go the origin and grab one bag, and each positive integer means you deliver the bag to a depot at this coordinate, giving a total distance of 25 units. It must be noted that there are other sequences that give the same distance.\n\nIn the second test case, you can follow the following sequence, among multiple such sequences, to travel minimum distance: 0 \u2192 6 \u2192 8 \u2192 7 \u2192 0 \u2192 5 \u2192 4 \u2192 3 \u2192 0 \u2192 (-5) \u2192 (-10) \u2192 (-15), with distance 41. It can be shown that 41 is the optimal distance for this test case."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_minimum_distance(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum distance to deliver all bags to depots.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of test cases, each containing:\n            - n (int): Number of depots.\n            - k (int): Maximum number of bags that can be carried at once.\n            - depots (List[int]): List of depot positions on the number line.\n\n    Returns:\n        List[int]: List of minimum distances for each test case.\n    \"\"\"\n    results = []\n\n    for n, k, depots in test_cases:\n        # Separate depots into positive and negative positions\n        positive_depots = [x for x in depots if x > 0]\n        negative_depots = [-x for x in depots if x < 0]\n\n        # Sort both lists in descending order\n        positive_depots.sort(reverse=True)\n        negative_depots.sort(reverse=True)\n\n        # Calculate total distance for positive and negative depots\n        total_distance = 0\n\n        # Process positive depots\n        for i in range(0, len(positive_depots), k):\n            total_distance += 2 * positive_depots[i]\n\n        # Process negative depots\n        for i in range(0, len(negative_depots), k):\n            total_distance += 2 * negative_depots[i]\n\n        # Subtract the farthest trip as we don't need to return to origin after last delivery\n        if positive_depots and negative_depots:\n            total_distance -= max(positive_depots[0], negative_depots[0])\n        elif positive_depots:\n            total_distance -= positive_depots[0]\n        elif negative_depots:\n            total_distance -= negative_depots[0]\n\n        results.append(total_distance)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    number_of_test_cases = int(input())\n    test_cases = []\n    for _ in range(number_of_test_cases):\n        n, k = map(int, input().split())\n        depots = list(map(int, input().split()))\n        test_cases.append((n, k, depots))\n\n    # Output interface\n    results = calculate_minimum_distance(number_of_test_cases, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_minimum_distance(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum distance to deliver all bags to depots.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of test cases, each containing:\n            - n (int): Number of depots.\n            - k (int): Maximum number of bags that can be carried at once.\n            - depots (List[int]): List of depot positions.\n\n    Returns:\n        List[int]: List of minimum distances for each test case.\n    \"\"\"\n    results = []\n\n    for n, k, depots in test_cases:\n        # Separate depots into positive and negative positions\n        positive_depots = [x for x in depots if x > 0]\n        negative_depots = [-x for x in depots if x < 0]\n\n        # Sort both lists in descending order\n        positive_depots.sort(reverse=True)\n        negative_depots.sort(reverse=True)\n\n        total_distance = 0\n\n        # Calculate distance for positive depots\n        for i in range(0, len(positive_depots), k):\n            total_distance += 2 * positive_depots[i]\n\n        # Calculate distance for negative depots\n        for i in range(0, len(negative_depots), k):\n            total_distance += 2 * negative_depots[i]\n\n        # Subtract the distance of the farthest depot from the total distance\n        if positive_depots and negative_depots:\n            total_distance -= max(positive_depots[0], negative_depots[0])\n        elif positive_depots:\n            total_distance -= positive_depots[0]\n        elif negative_depots:\n            total_distance -= negative_depots[0]\n\n        results.append(total_distance)\n\n    return results\n\n# Input interface\ndef main():\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        depots = list(map(int, input().split()))\n        test_cases.append((n, k, depots))\n\n    # Call the function and print results\n    results = calculate_minimum_distance(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_minimum_distance(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum distance to deliver all bags to depots.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of test cases, each containing:\n            - n (int): Number of depots.\n            - k (int): Maximum number of bags that can be carried at once.\n            - depots (List[int]): List of depot positions on the number line.\n\n    Returns:\n        List[int]: Minimum distance for each test case.\n    \"\"\"\n    results = []\n    \n    for n, k, depots in test_cases:\n        # Separate depots into positive and negative lists\n        positive_depots = [x for x in depots if x > 0]\n        negative_depots = [-x for x in depots if x < 0]\n        \n        # Sort both lists in descending order\n        positive_depots.sort(reverse=True)\n        negative_depots.sort(reverse=True)\n        \n        total_distance = 0\n        \n        # Calculate distance for positive depots\n        for i in range(0, len(positive_depots), k):\n            # Add twice the distance to the farthest depot in this batch\n            total_distance += 2 * positive_depots[i]\n        \n        # Calculate distance for negative depots\n        for i in range(0, len(negative_depots), k):\n            # Add twice the distance to the farthest depot in this batch\n            total_distance += 2 * negative_depots[i]\n        \n        # Subtract the distance of the farthest depot (no need to return to origin)\n        if positive_depots and negative_depots:\n            total_distance -= max(positive_depots[0], negative_depots[0])\n        elif positive_depots:\n            total_distance -= positive_depots[0]\n        elif negative_depots:\n            total_distance -= negative_depots[0]\n        \n        results.append(total_distance)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        depots = list(map(int, input().split()))\n        test_cases.append((n, k, depots))\n    \n    # Output interface\n    results = calculate_minimum_distance(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_minimum_distance(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum distance to deliver all bags to depots for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of tuples, each containing:\n            - n (int): Number of depots.\n            - k (int): Maximum number of bags that can be carried at once.\n            - depots (List[int]): List of depot positions on the number line.\n\n    Returns:\n        List[int]: List of minimum distances for each test case.\n    \"\"\"\n    results = []\n\n    for n, k, depots in test_cases:\n        # Separate depots into positive and negative positions\n        positive_positions = [x for x in depots if x > 0]\n        negative_positions = [-x for x in depots if x < 0]\n\n        # Sort positions in descending order of absolute value\n        positive_positions.sort(reverse=True)\n        negative_positions.sort(reverse=True)\n\n        # Calculate total distance\n        total_distance = 0\n\n        # Process positive positions\n        for i in range(0, len(positive_positions), k):\n            # Add the distance for the farthest point in this group\n            total_distance += 2 * positive_positions[i]\n\n        # Process negative positions\n        for i in range(0, len(negative_positions), k):\n            # Add the distance for the farthest point in this group\n            total_distance += 2 * negative_positions[i]\n\n        # Subtract the farthest distance as the last trip doesn't require returning to origin\n        if positive_positions and negative_positions:\n            total_distance -= max(positive_positions[0], negative_positions[0])\n        elif positive_positions:\n            total_distance -= positive_positions[0]\n        elif negative_positions:\n            total_distance -= negative_positions[0]\n\n        results.append(total_distance)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().strip().split())\n        depots = list(map(int, input().strip().split()))\n        test_cases.append((n, k, depots))\n\n    # Call the function and print results\n    results = calculate_minimum_distance(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_minimum_distance(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum distance to deliver all goods to depots.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of test cases, each containing:\n            - n (int): Number of depots.\n            - k (int): Maximum number of bags that can be carried at once.\n            - depots (List[int]): List of depot positions on the number line.\n\n    Returns:\n        List[int]: Minimum distance for each test case.\n    \"\"\"\n    results = []\n    \n    for n, k, depots in test_cases:\n        # Separate depots into positive and negative positions\n        positive_depots = [x for x in depots if x > 0]\n        negative_depots = [-x for x in depots if x < 0]\n        \n        # Sort both lists in descending order\n        positive_depots.sort(reverse=True)\n        negative_depots.sort(reverse=True)\n        \n        # Function to calculate the total distance for a list of depots\n        def calculate_distance(depots: List[int]) -> int:\n            distance = 0\n            for i in range(0, len(depots), k):\n                # Only add the distance to the farthest point in each batch\n                distance += 2 * depots[i]\n            return distance\n        \n        # Calculate total distance for both positive and negative depots\n        total_distance = calculate_distance(positive_depots) + calculate_distance(negative_depots)\n        \n        # Subtract the distance of the farthest depot since we don't return to origin after last delivery\n        if positive_depots and negative_depots:\n            total_distance -= max(positive_depots[0], negative_depots[0])\n        elif positive_depots:\n            total_distance -= positive_depots[0]\n        elif negative_depots:\n            total_distance -= negative_depots[0]\n        \n        results.append(total_distance)\n    \n    return results\n\n# Input interface\nnumber_of_test_cases = int(input())\ntest_cases = []\nfor _ in range(number_of_test_cases):\n    n, k = map(int, input().split())\n    depots = list(map(int, input().split()))\n    test_cases.append((n, k, depots))\n\n# Output interface\nresults = calculate_minimum_distance(number_of_test_cases, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_minimum_distance(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum distance to deliver all bags to depots.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of test cases, each containing:\n            - n (int): Number of depots.\n            - k (int): Maximum number of bags that can be carried at once.\n            - depots (List[int]): List of depot positions on the number line.\n\n    Returns:\n        List[int]: Minimum distance for each test case.\n    \"\"\"\n    results = []\n    \n    for n, k, depots in test_cases:\n        # Separate depots into positive and negative positions\n        positive_depots = [x for x in depots if x > 0]\n        negative_depots = [-x for x in depots if x < 0]\n        \n        # Sort both lists in descending order\n        positive_depots.sort(reverse=True)\n        negative_depots.sort(reverse=True)\n        \n        # Function to calculate the distance for a list of depots\n        def calculate_distance(depots: List[int]) -> int:\n            distance = 0\n            for i in range(0, len(depots), k):\n                # Only add the distance to the farthest depot in each batch\n                distance += 2 * depots[i]\n            return distance\n        \n        # Calculate total distance\n        total_distance = calculate_distance(positive_depots) + calculate_distance(negative_depots)\n        \n        # Subtract the distance of the farthest depot since we don't return to origin after last delivery\n        if positive_depots and negative_depots:\n            total_distance -= max(positive_depots[0], negative_depots[0])\n        elif positive_depots:\n            total_distance -= positive_depots[0]\n        elif negative_depots:\n            total_distance -= negative_depots[0]\n        \n        results.append(total_distance)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        depots = list(map(int, input().split()))\n        test_cases.append((n, k, depots))\n    \n    # Output interface\n    results = calculate_minimum_distance(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_minimum_distance(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum distance to deliver goods to depots.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of test cases, each containing:\n            - n (int): Number of depots.\n            - k (int): Maximum number of bags that can be carried in one trip.\n            - depots (List[int]): Positions of the depots on the number line.\n\n    Returns:\n        List[int]: Minimum distance for each test case.\n    \"\"\"\n    results = []\n    \n    for n, k, depots in test_cases:\n        # Separate depots into positive and negative positions\n        positive_depots = sorted([x for x in depots if x > 0], reverse=True)\n        negative_depots = sorted([-x for x in depots if x < 0], reverse=True)\n        \n        def calculate_distance(depot_list: List[int], k: int) -> int:\n            \"\"\"Calculate the total distance for a list of depots.\"\"\"\n            total_distance = 0\n            for i in range(0, len(depot_list), k):\n                total_distance += 2 * depot_list[i]\n            return total_distance\n        \n        # Calculate total distance for positive and negative depots\n        positive_distance = calculate_distance(positive_depots, k)\n        negative_distance = calculate_distance(negative_depots, k)\n        \n        # Subtract the distance of the farthest depot from the total distance\n        if positive_depots and negative_depots:\n            min_distance = positive_distance + negative_distance - max(positive_depots[0], negative_depots[0])\n        elif positive_depots:\n            min_distance = positive_distance - positive_depots[0]\n        elif negative_depots:\n            min_distance = negative_distance - negative_depots[0]\n        else:\n            min_distance = 0\n        \n        results.append(min_distance)\n    \n    return results\n\n# Input interface\nnumber_of_test_cases = int(input())\ntest_cases = []\nfor _ in range(number_of_test_cases):\n    n, k = map(int, input().split())\n    depots = list(map(int, input().split()))\n    test_cases.append((n, k, depots))\n\n# Output interface\nresults = calculate_minimum_distance(number_of_test_cases, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_minimum_distance(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum distance to deliver all bags to depots.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of test cases, each containing:\n            - n (int): Number of depots.\n            - k (int): Maximum number of bags per trip.\n            - depots (List[int]): Positions of depots on the number line.\n\n    Returns:\n        List[int]: Minimum distance for each test case.\n    \"\"\"\n    results = []\n\n    for n, k, depots in test_cases:\n        # Separate depots into positive and negative positions\n        positive_positions = sorted([x for x in depots if x > 0], reverse=True)\n        negative_positions = sorted([-x for x in depots if x < 0], reverse=True)\n\n        total_distance = 0\n\n        # Calculate distance for positive positions\n        for i in range(0, len(positive_positions), k):\n            total_distance += 2 * positive_positions[i]\n\n        # Calculate distance for negative positions\n        for i in range(0, len(negative_positions), k):\n            total_distance += 2 * negative_positions[i]\n\n        # Subtract the farthest trip as it doesn't require returning to origin\n        if positive_positions and negative_positions:\n            total_distance -= max(positive_positions[0], negative_positions[0])\n        elif positive_positions:\n            total_distance -= positive_positions[0]\n        elif negative_positions:\n            total_distance -= negative_positions[0]\n\n        results.append(total_distance)\n\n    return results\n\n# Input interface\ndef main():\n    # Read number of test cases\n    t = int(input())\n\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        depots = list(map(int, input().split()))\n        test_cases.append((n, k, depots))\n\n    # Call the function and print results\n    results = calculate_minimum_distance(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_minimum_distance(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum distance to deliver goods to depots on a number line.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of test cases, each containing:\n            - n (int): Number of depots.\n            - k (int): Maximum number of bags that can be carried in one trip.\n            - depots (List[int]): List of depot positions on the number line.\n\n    Returns:\n        List[int]: List of minimum distances for each test case.\n    \"\"\"\n    results = []\n\n    for n, k, depots in test_cases:\n        # Separate depots into positive and negative positions\n        positive_positions = [x for x in depots if x > 0]\n        negative_positions = [-x for x in depots if x < 0]\n\n        # Sort positions\n        positive_positions.sort(reverse=True)\n        negative_positions.sort(reverse=True)\n\n        # Calculate total distance\n        total_distance = 0\n\n        # Calculate distance for positive positions\n        for i in range(0, len(positive_positions), k):\n            total_distance += 2 * positive_positions[i]\n\n        # Calculate distance for negative positions\n        for i in range(0, len(negative_positions), k):\n            total_distance += 2 * negative_positions[i]\n\n        # Subtract the last trip distance as no return to origin is needed\n        if positive_positions and negative_positions:\n            total_distance -= max(positive_positions[0], negative_positions[0])\n        elif positive_positions:\n            total_distance -= positive_positions[0]\n        elif negative_positions:\n            total_distance -= negative_positions[0]\n\n        results.append(total_distance)\n\n    return results\n\n# Input interface\ndef main():\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        depots = list(map(int, input().split()))\n        test_cases.append((n, k, depots))\n\n    # Call the function and print results\n    results = calculate_minimum_distance(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_minimum_distance(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum distance to deliver all bags to depots.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of test cases, each containing:\n            - n (int): Number of depots.\n            - k (int): Maximum number of bags that can be carried at once.\n            - depots (List[int]): List of depot positions.\n\n    Returns:\n        List[int]: Minimum distance for each test case.\n    \"\"\"\n    results = []\n\n    for n, k, depots in test_cases:\n        # Separate depots into positive and negative positions\n        positive_depots = [x for x in depots if x > 0]\n        negative_depots = [-x for x in depots if x < 0]\n\n        # Sort depots in descending order of absolute values\n        positive_depots.sort(reverse=True)\n        negative_depots.sort(reverse=True)\n\n        total_distance = 0\n\n        # Calculate distance for positive depots\n        for i in range(0, len(positive_depots), k):\n            total_distance += 2 * positive_depots[i]\n\n        # Calculate distance for negative depots\n        for i in range(0, len(negative_depots), k):\n            total_distance += 2 * negative_depots[i]\n\n        # Subtract the farthest trip as we don't need to return to origin after last delivery\n        if positive_depots and negative_depots:\n            total_distance -= max(positive_depots[0], negative_depots[0])\n        elif positive_depots:\n            total_distance -= positive_depots[0]\n        elif negative_depots:\n            total_distance -= negative_depots[0]\n\n        results.append(total_distance)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        depots = list(map(int, input().split()))\n        test_cases.append((n, k, depots))\n\n    # Output interface\n    results = calculate_minimum_distance(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires calculating the minimum distance to deliver goods to depots located on a number line. The salesman can carry a limited number of bags at a time, necessitating multiple trips. The solution must efficiently handle large input sizes and optimize the delivery sequence to minimize travel distance.\nrequirement pool:\n- Implement the main algorithm to calculate minimum travel distance.\n- Ensure the solution handles up to 2 \u22c5 10^5 depots efficiently.\n- Optimize the algorithm for both positive and negative depot positions.\n- Provide clear documentation and comments in the code.\n- Include test cases to validate the solution against edge cases.\nWe will implement a function to calculate the minimum travel distance using a greedy approach. The depots will be split into positive and negative positions, and the salesman will deliver bags in batches of k, optimizing the travel distance by visiting the farthest depot in each batch first. We will use Python's built-in sorting and list manipulation capabilities to efficiently handle the input size constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'depot'\n    Explanation: A depot is a location on the number line where a bag of goods needs to be delivered.\n\n    'origin'\n    Explanation: The starting point (0 on the number line) where the salesman begins and returns to collect more bags.\n\n    'carry up to k bags'\n    Explanation: The salesman can carry a maximum of k bags in one trip from the origin to the depots.\n\n    'minimum distance'\n    Explanation: The shortest total distance the salesman needs to travel to deliver all bags to the depots.\n\n# [phrase showing quantity relationship]\n    'up to k bags': The salesman can carry a maximum of k bags in one trip. In code, this means we need to handle batches of size k when planning trips.\n\n# [degree adverb]\n    'minimum': We need to find the smallest possible total distance traveled. In code, this involves optimizing the order and grouping of trips to depots.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n and k, and then the list of depot positions.\n3. Separate depot positions into positive and negative lists.\n4. Sort both lists by absolute value in descending order.\n5. For each list, calculate the total distance by taking k depots at a time, always visiting the farthest first.\n6. Sum the distances for both positive and negative trips.\n7. Return the total minimum distance for each test case.\n\n# [edge case]\n    Test case with all depots at the same position:\n    Input: 3 2\n           5 5 5\n    Expected output: 10\n    Explanation: The salesman makes two trips: 0 \u2192 5 \u2192 0 and 0 \u2192 5, totaling 10 units.\n\n    Test case with depots at maximum positive and negative positions:\n    Input: 2 1\n           -1000000000 1000000000\n    Expected output: 3000000000\n    Explanation: Two separate trips to -1000000000 and 1000000000, totaling 3000000000 units.\n\n    Test case with k equal to n:\n    Input: 3 3\n           -1 0 1\n    Expected output: 2\n    Explanation: One trip covering all depots in one go: 0 \u2192 -1 \u2192 1, totaling 2 units.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and batching by k handles these scenarios effectively.\n", "requirement analysis:\nThe problem requires calculating the minimum distance to deliver goods to depots on a number line, considering the constraint of carrying a limited number of bags at a time. The solution must efficiently handle large input sizes and provide correct outputs for multiple test cases.\nrequirement pool:\n- Implement an efficient algorithm to calculate the minimum travel distance.\n- Ensure the solution handles up to 200,000 depots efficiently.\n- Optimize the algorithm for both positive and negative depot positions.\n- Provide clear and concise output for each test case.\n- Consider edge cases where depots share the same position.\nWe will implement an efficient algorithm to calculate the minimum travel distance by sorting the depot positions and grouping them based on the maximum number of bags that can be carried at once. We will handle both positive and negative positions separately to optimize the travel path. The algorithm will ensure that the solution is efficient enough to handle up to 200,000 depots by leveraging sorting and grouping strategies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'depot': A location on the number line where goods need to be delivered.\n    'origin': The starting point (0) where the salesman begins and returns to collect more goods.\n    'minimum distance': The shortest total distance the salesman needs to travel to deliver all goods.\n\n# [phrase showing quantity relationship]\n    'n depots': The total number of depots where goods need to be delivered.\n    'k bags at a time': The maximum number of bags the salesman can carry in one trip.\n    '1 \u2264 i \u2264 n': Indicates that depot indices range from 1 to n.\n    '1 \u2264 k \u2264 n': Indicates that the number of bags that can be carried at once is between 1 and n.\n\n# [degree adverb]\n    'minimum': Refers to the smallest possible total distance traveled to deliver all goods.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n and k, and then the list of depot positions.\n3. Separate depot positions into positive and negative lists.\n4. Sort both lists in descending order of absolute values.\n5. Calculate the total distance by grouping depots into batches of size k, starting from the farthest depot in each list.\n6. For each batch, add twice the distance to the farthest depot in that batch (since you need to return to the origin after delivery).\n7. Subtract the distance of the farthest depot from the total distance, as you don't need to return after the last delivery.\n8. Output the calculated minimum distance for each test case.\n\n# [edge case]\n    Test case: 1 1\n    Input: 0\n    Output: 0\n    Explanation: No depots to deliver, so no distance is traveled.\n\n    Test case: 2 2\n    Input: -1000000000 1000000000\n    Output: 2000000000\n    Explanation: Deliver one bag to -1000000000 and one bag to 1000000000, no need to return after last delivery.\n\n    Test case: 3 1\n    Input: -1 -1 -1\n    Output: 6\n    Explanation: Deliver each bag separately, traveling back to origin each time.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and grouping handles all cases, including when all depots are at the same position or when there are no depots.\n", "requirement analysis:\nThe requirements focus on optimizing the delivery strategy to minimize the total distance traveled. The solution must handle multiple test cases efficiently and ensure scalability for large inputs. The algorithm should be designed to calculate the minimum distance accurately while considering constraints such as the number of bags that can be carried at a time.\nrequirement pool:\n- Optimize delivery strategy for minimum distance\n- Ensure scalability for large number of depots\n- Provide accurate and efficient calculations\n- Handle multiple test cases efficiently\n- Design user-friendly interface for input and output\nWe will use a greedy algorithm to optimize the delivery strategy. The idea is to sort the depot positions and deliver the bags in batches of k, minimizing the distance traveled by grouping deliveries to nearby depots. We will use Python's built-in sorting capabilities to efficiently handle large inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'depot': A location on the number line where goods need to be delivered.\n    'origin': The starting point (0) where the salesman and goods are initially located.\n    'carry up to k bags': The maximum number of bags the salesman can carry at one time.\n    'minimum distance': The shortest total distance the salesman needs to travel to deliver all goods.\n\n# [phrase showing quantity relationship]\n    'up to k bags': This means the salesman can carry a maximum of k bags in one trip. In code, this can be implemented by iterating over the depots in chunks of size k.\n    'n depots': The total number of depots, which indicates the number of bags to be delivered. This is used to determine the number of trips needed.\n\n# [degree adverb]\n    'minimum': This indicates that the goal is to find the smallest possible total distance. In code, this involves optimizing the delivery sequence to reduce travel distance.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n and k, and then read the depot positions.\n3. Separate depot positions into positive and negative lists.\n4. Sort both lists in descending order of absolute values.\n5. Calculate the total distance by making trips to the farthest depots first, carrying up to k bags per trip.\n6. For each trip, add twice the distance to the farthest depot in that batch (except for the last trip, which doesn't require a return).\n7. Sum up the distances for all trips and output the result for each test case.\n\n# [edge case]\n    Case 1: n = 1, k = 1, x = [0] = 0\n    Explanation: The depot is at the origin, so no travel is needed. Expected output is 0.\n\n    Case 2: n = 5, k = 5, x = [-1, -2, -3, -4, -5] = 5\n    Explanation: All depots are negative and can be delivered in one trip. The farthest depot is -5, so total distance is 5.\n\n    Case 3: n = 3, k = 2, x = [1, 2, 3] = 5\n    Explanation: Deliver to depots at 2 and 3 in one trip (distance 6), then deliver to depot at 1 (distance 2). Total distance is 8.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and grouping deliveries by distance naturally handles these scenarios.\n", "requirement analysis:\nThe problem requires calculating the minimum distance to deliver goods to depots on a number line, considering the constraint of carrying a limited number of bags at a time. The solution must efficiently handle up to 200,000 depots across multiple test cases, ensuring optimal performance and accuracy.\nrequirement pool:\n- Implement an efficient algorithm to calculate the minimum travel distance.\n- Ensure the solution can handle the maximum input size within time limits.\n- Optimize the algorithm for both positive and negative depot positions.\n- Provide detailed comments and documentation for the implemented solution.\n- Include test cases to validate the solution against edge cases.\nWe will implement an efficient algorithm to calculate the minimum travel distance by sorting the depot positions and grouping them based on the maximum number of bags that can be carried at once. The algorithm will handle both positive and negative positions separately to optimize the travel path. We will use Python's built-in sorting and list manipulation capabilities to achieve this efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'depot': A location on the number line where goods need to be delivered.\n    'origin': The starting point (0) where the salesman begins and returns to collect more goods.\n    'carry up to k bags': The maximum number of bags the salesman can carry in one trip.\n    'minimum distance': The shortest total distance the salesman needs to travel to deliver all goods.\n\n# [phrase showing quantity relationship]\n    'up to k bags': This means the salesman can carry a maximum of k bags in one trip. In code, this can be implemented by grouping the depots into chunks of size k.\n    'minimum distance': This refers to finding the shortest path that covers all necessary deliveries. In code, this involves optimizing the order of deliveries and minimizing unnecessary travel.\n\n# [degree adverb]\n    'minimum': This indicates the need to find the smallest possible total distance. In code, this involves calculating and comparing different possible routes to find the optimal one.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n and k, and then read the depot positions.\n3. Separate the depot positions into positive and negative lists.\n4. Sort both lists in descending order of absolute value.\n5. Calculate the total distance by:\n   - Grouping depots into chunks of size k.\n   - For each chunk, calculate the round trip distance (except for the last trip which doesn't require returning to origin).\n6. Sum up all calculated distances for both positive and negative positions.\n7. Output the total minimum distance for each test case.\n\n# [edge case]\n    Case 1: n = 1, k = 1, x = [0] = 0\n    Explanation: No travel is needed as the depot is at the origin. The expected output is 0.\n\n    Case 2: n = 3, k = 3, x = [-1, 0, 1] = 2\n    Explanation: All depots can be visited in one trip without returning to origin after delivery. The expected output is 2.\n\n    Case 3: n = 5, k = 2, x = [-10^9, -10^9, 10^9, 10^9, 10^9] = 4000000000\n    Explanation: The salesman needs to make two trips to each extreme end. The expected output is 4000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle these edge cases. The original logic of grouping depots and calculating distances based on sorted positions will naturally handle these scenarios.\n", "requirement analysis:\nThe problem requires calculating the minimum distance to deliver goods to depots on a number line. The salesman can carry a limited number of bags at a time, necessitating multiple trips. The solution must efficiently handle large input sizes and provide the correct minimum distance for each test case.\nrequirement pool:\n- Implement an efficient algorithm to calculate the minimum travel distance.\n- Ensure the solution handles up to 10,500 test cases efficiently.\n- Optimize the algorithm for both positive and negative depot positions.\n- Provide clear and concise output for each test case.\n- Consider edge cases where depots share the same position.\nWe will use a greedy algorithm to minimize the travel distance. The idea is to sort the depot positions and deliver goods in batches of k bags, prioritizing the farthest depots first. This approach ensures that each trip covers the maximum possible distance, reducing the number of trips needed. We will handle both positive and negative depot positions separately to optimize the travel path.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'depot': A location on the number line where goods need to be delivered.\n    'origin': The starting point (0) where the salesman begins and returns to collect more goods.\n    'carry up to k bags': The maximum number of bags the salesman can carry in one trip.\n    'minimum distance': The shortest total distance the salesman needs to travel to deliver all goods.\n\n# [phrase showing quantity relationship]\n    'up to k bags': This means the salesman can carry a maximum of k bags in one trip. In code, this can be implemented by grouping deliveries into batches of size k.\n    'minimum distance': This refers to the shortest possible total distance traveled. In code, this involves optimizing the delivery sequence to reduce travel.\n\n# [degree adverb]\n    'minimum': This indicates the need to find the smallest possible value for the total distance traveled. In code, this involves using a strategy that minimizes unnecessary trips.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n and k, and then the list of depot positions.\n3. Separate depot positions into positive and negative lists.\n4. Sort both lists in descending order of absolute values.\n5. For each list, calculate the total distance by taking k depots at a time, starting from the farthest.\n6. Sum the distances for both positive and negative depots, ensuring not to return to origin after the last delivery.\n7. Output the total minimum distance for each test case.\n\n# [edge case]\n    Case 1: n = 1, k = 1, depots = [0] = 0\n    Explanation: The depot is at the origin, so no travel is needed.\n\n    Case 2: n = 3, k = 3, depots = [-1, 0, 1] = 2\n    Explanation: All depots can be delivered in one trip without returning to origin.\n\n    Case 3: n = 5, k = 2, depots = [-10^9, -10^9, 10^9, 10^9, 10^9] = 3000000000\n    Explanation: Delivering two bags at a time to farthest depots first minimizes travel.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and batching deliveries already accounts for these scenarios.\n", "requirement analysis:\nThe problem requires calculating the minimum distance to deliver goods to depots on a number line. The salesman can carry a limited number of bags at a time, necessitating multiple trips. The solution must efficiently handle large input sizes and multiple test cases, ensuring optimal travel distance is calculated for each scenario.\nrequirement pool:\n- Implement an efficient algorithm to calculate the minimum travel distance.\n- Ensure the solution can handle up to 10,500 test cases efficiently.\n- Optimize the algorithm for both positive and negative depot positions.\n- Provide clear and concise output for each test case.\n- Consider edge cases such as depots at the same position.\nWe will implement an efficient algorithm to calculate the minimum travel distance by sorting the depot positions and grouping them based on the maximum number of bags that can be carried at once. We will use a greedy approach to minimize the distance by always delivering to the farthest depots first, and then returning to the origin to pick up more bags. This approach ensures that we minimize the number of trips and the total distance traveled. We will use Python's built-in sorting and list manipulation capabilities to handle the input efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'depot', 'origin', 'distance', 'bags'\n    Explanation: \n    - 'depot': A location on the number line where goods need to be delivered.\n    - 'origin': The starting point (0) where the salesman begins and returns to collect goods.\n    - 'distance': The total travel distance required to deliver all goods.\n    - 'bags': The goods that need to be delivered, with a limit on how many can be carried at once.\n\n# [phrase showing quantity relationship]\n    'up to k bags': This indicates the maximum number of bags that can be carried in one trip. In code, this means we need to group deliveries in batches of size k or less.\n    'minimum distance': This indicates the need to optimize the travel path to reduce the total distance covered. In code, this involves sorting and strategically planning the delivery sequence.\n\n# [degree adverb]\n    'minimum': This indicates the need to find the smallest possible total travel distance. In code, this involves using a strategy that minimizes back-and-forth trips.\n\n# [code logic]\n    1. Parse the input to get the number of test cases.\n    2. For each test case, read n and k, and then read the depot positions.\n    3. Separate depot positions into positive and negative lists.\n    4. Sort both lists in descending order of absolute value.\n    5. Calculate the total distance by grouping depots into batches of size k, always delivering to the farthest depot first.\n    6. Sum up the distances for all trips, ensuring not to return to origin after the last delivery.\n\n# [edge case]\n    Test case with all depots at the same position:\n    Input: 3 2\n           5 5 5\n    Expected output: 10\n    Explanation: Deliver two bags in one trip (0 \u2192 5 \u2192 0) and one bag in another (0 \u2192 5), totaling 10 units.\n\n    Test case with depots at extreme positions:\n    Input: 2 1\n           -1000000000 1000000000\n    Expected output: 3000000000\n    Explanation: Deliver one bag at a time, first to -1000000000 and then to 1000000000, totaling 3000000000 units.\n\n    Test case with k equal to n:\n    Input: 4 4\n           -1 -2 -3 -4\n    Expected output: 8\n    Explanation: Deliver all bags in one trip (0 \u2192 -4 \u2192 -3 \u2192 -2 \u2192 -1), totaling 8 units.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and grouping based on k handles these scenarios effectively.\n", "requirement analysis:\nThe problem requires calculating the minimum distance to deliver goods to depots on a number line. The key challenge is optimizing the delivery strategy to minimize travel distance while considering the constraint of carrying a limited number of bags at a time. The solution must efficiently handle large input sizes and provide correct outputs for multiple test cases.\nrequirement pool:\n- Optimize delivery strategy to minimize travel distance\n- Handle large input sizes efficiently\n- Provide clear and correct output for each test case\n- Ensure code readability and maintainability\n- Consider edge cases such as overlapping depot positions\nWe will use a greedy algorithm to optimize the delivery strategy. The key idea is to sort the depot positions and deliver goods in batches of k bags, minimizing the distance traveled by prioritizing the farthest depots first. This approach ensures that we handle large input sizes efficiently by reducing unnecessary trips back to the origin.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'depot': A location on the number line where goods need to be delivered.\n    'origin': The starting point (0) where the salesman and goods are initially located.\n    'carry up to k bags': The maximum number of bags the salesman can carry in one trip.\n    'minimum distance': The shortest total distance the salesman needs to travel to deliver all goods.\n\n# [phrase showing quantity relationship]\n    'up to k bags': This means the salesman can carry a maximum of k bags in one trip. In code, this can be implemented by iterating over the depots in chunks of size k.\n    'n depots': The total number of depots, which indicates the number of bags that need to be delivered.\n\n# [degree adverb]\n    'minimum': This indicates that the goal is to find the smallest possible total distance. In code, this involves optimizing the delivery strategy to reduce unnecessary travel.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n and k.\n3. Read the positions of the depots and sort them.\n4. Separate the depot positions into positive and negative lists.\n5. For each list, calculate the total distance by delivering goods in batches of k, starting from the farthest depot.\n6. Sum the distances from both positive and negative sides.\n7. Subtract the distance of the farthest depot from the total distance, as you don't need to return to the origin after the last delivery.\n8. Output the minimum distance for each test case.\n\n# [edge case]\n    Test case with all depots at the same position: \n    Example: n = 5, k = 2, positions = [10, 10, 10, 10, 10]\n    Expected output: 20\n    Explanation: Deliver in batches of 2, making three trips: (0 -> 10 -> 0) twice and (0 -> 10) once.\n\n    Test case with depots on both sides of origin:\n    Example: n = 4, k = 2, positions = [-5, -5, 5, 5]\n    Expected output: 20\n    Explanation: Deliver in two trips: (0 -> -5 -> -5 -> 0) and (0 -> 5 -> 5).\n\n    Test case with k equal to n:\n    Example: n = 3, k = 3, positions = [1, 2, 3]\n    Expected output: 3\n    Explanation: Deliver all in one trip: (0 -> 3).\n\n# [extra code for edge case]\n    We do not need extra code to handle these edge cases. The original logic of sorting and delivering in batches already accounts for these scenarios.\n", "requirement analysis:\nThe requirements focus on optimizing the delivery strategy to minimize the total distance traveled. The solution must handle multiple test cases efficiently, considering constraints on the number of depots and the maximum number of bags that can be carried at once. The algorithm should be scalable and provide accurate results even for large inputs.\nrequirement pool:\n- Optimize delivery strategy for minimum distance\n- Ensure scalability for large number of depots\n- Provide accurate and efficient computation\n- Handle multiple test cases efficiently\n- Maintain code readability and ease of maintenance\nWe will use a greedy algorithm to optimize the delivery strategy for minimum distance. The approach involves sorting the depot positions and delivering bags in batches of k, prioritizing the farthest depots first. This ensures that each trip covers the maximum possible distance, reducing the total number of trips required. We will utilize Python's built-in sorting capabilities for efficiency.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'depot': A location on the number line where goods need to be delivered.\n    'origin': The starting point (0) where the salesman and goods are initially located.\n    'carry up to k bags': The maximum number of bags the salesman can carry in one trip.\n    'minimum distance': The shortest total distance the salesman needs to travel to deliver all goods.\n\n# [phrase showing quantity relationship]\n    'up to k bags': This means the salesman can carry a maximum of k bags in one trip. In code, this can be implemented by grouping deliveries into batches of size k.\n    'minimum distance': This refers to optimizing the travel path to cover the least possible distance. In code, this involves sorting and strategically planning trips.\n\n# [degree adverb]\n    'minimum': This indicates the need to find the smallest possible total distance. In code, this is achieved by using a greedy strategy to minimize travel.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n (number of depots) and k (maximum bags per trip).\n3. Read the positions of depots and separate them into positive and negative positions.\n4. Sort both positive and negative positions.\n5. Calculate the total distance by:\n   - Delivering to the farthest depots first in batches of k.\n   - For each batch, calculate the round trip distance except for the last trip, which doesn't require returning to origin.\n6. Sum up the distances for both positive and negative sides.\n7. Output the total minimum distance for each test case.\n\n# [edge case]\n    Test case 1: 1 1\n                 0\n    Expected output: 0\n    Explanation: The depot is at the origin, so no travel is needed.\n\n    Test case 2: 3 2\n                 -1 -1 -1\n    Expected output: 2\n    Explanation: All depots are at -1, so one trip carrying two bags and another carrying one bag results in a total distance of 2.\n\n    Test case 3: 4 4\n                 1000000000 -1000000000 1000000000 -1000000000\n    Expected output: 4000000000\n    Explanation: The farthest depots are at extreme ends, requiring two trips of maximum distance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and batching already accommodates these scenarios effectively.\n", "requirement analysis:\nThe requirement is to calculate the minimum distance needed to deliver goods to depots located on a number line. The salesman can carry a limited number of bags at a time, necessitating multiple trips. The solution must efficiently handle multiple test cases and large input sizes, ensuring optimal performance.\nrequirement pool:\n- Implement the main algorithm to calculate minimum travel distance\n- Optimize the algorithm for large input sizes\n- Ensure the solution handles edge cases like overlapping depot positions\n- Provide clear documentation and comments in the code\n- Develop a user-friendly interface for input and output\nWe will implement a function to calculate the minimum distance required to deliver goods to depots on a number line. The approach involves sorting the depot positions, dividing them into positive and negative coordinates, and then calculating the distance for each segment by taking k bags at a time. The algorithm will ensure that the salesman does not return to the origin after the last delivery. We will use Python's built-in sorting and list manipulation capabilities to efficiently handle large input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'number line'\n    Explanation: The depots are located on a one-dimensional line, which means the distance between any two points is the absolute difference of their coordinates.\n\n    'carry up to k bags'\n    Explanation: The salesman can carry a maximum of k bags in one trip, which affects how the trips are planned to minimize the total distance.\n\n    'minimum distance'\n    Explanation: The goal is to find the shortest possible total distance traveled to deliver all bags without returning to the origin after the last delivery.\n\n# [phrase showing quantity relationship]\n    'up to k bags': This indicates a constraint on the number of bags that can be carried in one trip. In code, this can be implemented by dividing the list of depot positions into chunks of size k.\n\n# [degree adverb]\n    'minimum': This indicates that the solution should optimize for the least possible distance traveled. In code, this involves calculating and comparing different possible routes to ensure the shortest path is chosen.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n and k, and then read the list of depot positions.\n3. Separate depot positions into positive and negative lists.\n4. Sort both lists in descending order (for positive) and ascending order (for negative).\n5. Calculate the total distance by taking k bags at a time from each sorted list, ensuring not to return to origin after the last delivery.\n6. Sum up the distances for both positive and negative trips.\n7. Output the total minimum distance for each test case.\n\n# [edge case]\n    Test case with all depots at the same position:\n    Input: 4 2\n           1000000000 1000000000 1000000000 1000000000\n    Expected output: 3000000000\n    Explanation: Since all depots are at the same position, the salesman only needs to make two trips, each covering twice the distance to the depot.\n\n    Test case with depots at origin:\n    Input: 3 1\n           0 0 0\n    Expected output: 0\n    Explanation: All depots are at the origin, so no travel is needed.\n\n    Test case with maximum negative and positive values:\n    Input: 2 1\n           -1000000000 1000000000\n    Expected output: 2000000000\n    Explanation: The salesman needs to travel to both extreme ends of the number line.\n\n# [extra code for edge case]\n    We do not need extra code to handle these edge cases. The original logic of sorting and chunking by k will naturally handle these scenarios correctly.\n", "requirement analysis:\nThe requirements focus on optimizing the delivery strategy to minimize travel distance while handling large inputs efficiently. The solution should be scalable and provide accurate calculations for various test cases.\nrequirement pool:\n- Optimize delivery strategy for minimum distance\n- Ensure scalability for large number of depots\n- Provide accurate and efficient calculations\n- Handle multiple test cases successfully\n- Visualize delivery route for better understanding\nWe will use a greedy algorithm to optimize the delivery strategy. The key idea is to sort the depot positions and deliver the bags in batches of size up to k, starting from the farthest depot and moving towards the origin. This minimizes the number of trips and the total distance traveled. We will handle both positive and negative depot positions separately to ensure the correct calculation of distances.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'depot', 'origin', 'distance', 'greedy algorithm'\n    Explanation: \n    - 'depot': A location on the number line where goods need to be delivered.\n    - 'origin': The starting point (0) where the salesman begins and returns to collect goods.\n    - 'distance': The total travel distance required to deliver all goods.\n    - 'greedy algorithm': An approach to optimize the delivery strategy by minimizing the total distance traveled.\n\n# [phrase showing quantity relationship]\n    'up to k bags': This indicates the maximum number of bags that can be carried in one trip.\n    Implementation: Use a loop to deliver goods in batches of size up to k.\n\n# [degree adverb]\n    'minimum': Indicates the need to find the smallest possible total distance traveled.\n    Implementation: Use a sorting and batching strategy to minimize the travel distance.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n and k, and the list of depot positions.\n3. Separate depot positions into positive and negative lists.\n4. Sort both lists in descending order of absolute values.\n5. Calculate the total distance by delivering goods in batches of size up to k, starting from the farthest depot.\n6. Sum the distances for both positive and negative depot deliveries.\n7. Output the minimum distance for each test case.\n\n# [edge case]\n    Test case with all depots at the same position:\n    Input: 4 2\n           1000000000 1000000000 1000000000 1000000000\n    Expected output: 3000000000\n    Explanation: All depots are at the same position, so only one trip is needed for each batch.\n\n    Test case with depots at both positive and negative positions:\n    Input: 3 1\n           -1 0 1\n    Expected output: 4\n    Explanation: Delivering one bag at a time requires trips to -1, 1, and back to origin, totaling 4 units.\n\n    Test case with maximum k:\n    Input: 5 5\n           1 2 3 4 5\n    Expected output: 5\n    Explanation: All bags can be delivered in one trip since k equals n.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and batching handles these scenarios effectively.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 523, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line of each test case contains n integers x_1, x_2, \u2026, x_n (-10^9 \u2264 x_i \u2264 10^9). It is possible that some depots share the same position.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots. \n\nExample\n\nInput\n\n\n4\n5 1\n1 2 3 4 5\n9 3\n-5 -10 -15 6 5 8 3 7 4\n5 3\n2 2 3 3 3\n4 2\n1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n\n25\n41\n7\n3000000000\n\nNote\n\nIn the first test case, you can carry only one bag at a time. Thus, the following is a solution sequence that gives a minimum travel distance: 0 \u2192 2 \u2192 0 \u2192 4 \u2192 0 \u2192 3 \u2192 0 \u2192 1 \u2192 0 \u2192 5, where each 0 means you go the origin and grab one bag, and each positive integer means you deliver the bag to a depot at this coordinate, giving a total distance of 25 units. It must be noted that there are other sequences that give the same distance.\n\nIn the second test case, you can follow the following sequence, among multiple such sequences, to travel minimum distance: 0 \u2192 6 \u2192 8 \u2192 7 \u2192 0 \u2192 5 \u2192 4 \u2192 3 \u2192 0 \u2192 (-5) \u2192 (-10) \u2192 (-15), with distance 41. It can be shown that 41 is the optimal distance for this test case.", "mutate_method": "add_1_sentence_at_end", "parent_index": 65}
