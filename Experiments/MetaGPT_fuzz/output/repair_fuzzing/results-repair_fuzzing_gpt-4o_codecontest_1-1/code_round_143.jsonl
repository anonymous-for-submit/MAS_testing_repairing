{"name": "1618_E. Singers' Tour", "description": "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "tags": ["constructive algorithms", "math"], "difficulty": 11, "id": 1618, "sample_io": [{"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n", "output": ["YES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n"]}], "test_list": [{"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n4\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["YES\n3 1 3\nYES\n4\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n3\n3\n1 2 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n3\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n4\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n4\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n2\n3\n1 2 0\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n2\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n19 16 19\n1\n1\n3\n1 0 3\n6\n8 37 80 169 133 87\n", "output": ["YES\n3 4 2\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 105\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 62 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n112 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 132 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 39 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n112 75 75 93 93 124\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 2 3\n6\n8 39 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n2\n8 37 80 169 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 22\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 16 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n2\n1 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 91 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 19 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 184 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 0\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 184 129 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 4 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 4 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 2 3\n6\n8 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n10 75 75 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 155 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 13\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n62 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 84 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 93 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 102 119 179 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 16 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 27\n1\n1\n3\n0 2 3\n6\n8 75 75 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n8 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 81 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 6\n6\n8 75 32 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 64 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 0 3\n6\n8 75 119 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n4 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 22\n1\n1\n3\n1 2 2\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n8 16 4\n1\n1\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 16 2\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 8\n6\n8 75 75 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n22 16 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n2 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 3 3\n6\n8 75 32 50 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 176 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 4 3\n6\n8 75 32 91 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 0 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 -1\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 42 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 138 75 184 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 6\n1\n1\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 1\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 75 32 4 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n6\n13 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 2 3\n6\n8 75 75 93 21 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n10 75 75 88 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 240 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 13\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 16 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n13 16 14\n1\n1\n3\n1 1 3\n6\n8 75 84 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 41 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 14\n1\n1\n3\n1 2 3\n6\n14 102 119 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n1 2 3\n6\n8 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 140\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 27\n1\n1\n3\n0 0 3\n6\n8 75 75 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 119 93 4 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n12 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 37 81 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 3\n6\n8 75 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 0 3\n6\n8 75 112 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n3\n8 75 75 82 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n8 16 4\n1\n2\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n22 16 7\n1\n1\n2\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n2 2 3\n6\n8 39 4 82 133 20\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 3 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 24\n1\n1\n3\n0 4 3\n6\n8 75 32 91 3 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n0 0 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 55 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 6\n1\n2\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 53 32 4 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n4\n13 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n10 75 75 88 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 15 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 13\n1\n1\n3\n1 2 3\n6\n8 109 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 93 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n13 16 14\n1\n1\n3\n1 1 3\n6\n8 75 104 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 14\n1\n1\n3\n1 2 3\n6\n14 102 38 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n1 2 3\n6\n11 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 38 140\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 143 93 4 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 1 4\n6\n12 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 2 3\n6\n10 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 37 81 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 3\n6\n8 21 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 35 62 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n3\n8 75 75 133 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 0 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n22 22 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 6 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 47 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 2\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n8 75 28 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n3 75 202 179 55 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n0 16 6\n1\n2\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 53 32 2 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n0 75 75 88 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 23\n1\n1\n3\n1 2 3\n6\n8 109 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 141 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 6 14\n1\n1\n3\n1 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 6\n6\n8 75 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 28\n1\n1\n3\n1 2 3\n6\n14 102 38 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n11 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 143 93 5 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 1 4\n6\n12 81 144 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 0 3\n6\n10 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 2\n6\n8 21 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 35 12 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 -1 4\n3\n8 75 75 133 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 1 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n0 6 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 57 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 4\n1\n1\n3\n1 2 2\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n13 75 28 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n3\n3\n1 1 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n3\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n2\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n0 75 75 27 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 23\n1\n1\n3\n1 2 3\n6\n8 136 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 141 64 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 6 14\n1\n1\n3\n2 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 6\n6\n8 141 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}], "task_id": "codecontest/136", "prompt": "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Consider all possible configurations that satisfy this condition.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "repair_prompt": ["n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Consider all possible configurations that satisfy this condition.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. When each singer entered a town, he felt the urge to create a new piece of music. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Consider all possible configurations that satisfy this condition.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order, and in the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town; in addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes, which was added to his repertoire so that he could perform it in the rest of the cities. Hence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Consider all possible configurations that satisfy this condition.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. "], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations or determines if it's impossible.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing an integer n and a list of integers b.\n\n    Returns:\n        A list of strings, each being \"YES\" followed by the sequence of integers a, or \"NO\".\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        # Calculate the sum of b_i\n        total_duration = sum(b)\n\n        # Check if the sum is divisible by n\n        if total_duration % n != 0:\n            results.append(\"NO\")\n        else:\n            # Calculate each a_i by dividing b_i by n\n            a = [b_i // n for b_i in b]\n\n            # Verify if this a satisfies all conditions\n            if valid(a, n, b):\n                results.append(\"YES\")\n                results.append(\" \".join(map(str, a)))\n            else:\n                results.append(\"NO\")\n\n    return results\n\ndef valid(a: List[int], n: int, b: List[int]) -> bool:\n    \"\"\"Checks if the sequence a satisfies the conditions for all towns.\n\n    Args:\n        a: The sequence of initial repertoire durations.\n        n: The number of towns.\n        b: The total duration of concerts in each town.\n\n    Returns:\n        True if the sequence a satisfies the conditions, False otherwise.\n    \"\"\"\n    # Check if the calculated sequence a can reproduce the b sequence\n    for i in range(n):\n        expected_duration = sum((j + 1) * a[(i + j) % n] for j in range(n))\n        if expected_duration != b[i]:\n            return False\n    return True\n\n# Input interface\ndef main():\n    # Read number of test cases\n    t = int(input())\n\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n\n    # Call the function and print the results\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_repertoire(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the initial repertoire durations for each singer or determines if it's impossible.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns\n            and the list of total concert durations in each town.\n\n    Returns:\n        List[str]: List of results for each test case. Each result is either \"NO\" or \"YES\" followed by\n            the sequence of initial repertoire durations.\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        total_b = sum(b)\n        sum_n = n * (n + 1) // 2\n        \n        if total_b % sum_n != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // sum_n\n        a = [0] * n\n        valid = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1] if i > 0 else b[i] - b[n - 1]\n            a[i] = (total_a - diff) // n\n            \n            if a[i] <= 0 or (total_a - diff) % n != 0:\n                valid = False\n                break\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Call the function and print the results\n    results = reconstruct_repertoire(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    results = []\n    \n    for n, b in test_cases:\n        total_b = sum(b)\n        # Check if the sum of b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        valid = True\n        \n        for i in range(n):\n            # Calculate the difference between consecutive b values\n            diff = b[i] - b[i - 1]\n            # Check if the calculated a_i is a valid positive integer\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                valid = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs a sequence of initial repertoire durations for each singer.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of tuples, each containing the number of towns (n) and\n                    a list of total concert durations (b) for each town.\n\n    Returns:\n        A list of strings, each representing the result for a test case. The result\n        is either \"NO\" if no valid sequence exists, or \"YES\" followed by the sequence\n        of initial repertoire durations.\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        # Calculate the total sum of b\n        total_sum = sum(b)\n        \n        # Check if the total sum is divisible by n * (n + 1) / 2\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of initial repertoire durations\n        total_a_sum = total_sum // (n * (n + 1) // 2)\n        \n        # Initialize the sequence a\n        a = [0] * n\n        valid = True\n        \n        for i in range(n):\n            # Calculate the difference between consecutive b values\n            diff = b[i] - b[i - 1]\n            \n            # Calculate a_i\n            a[i] = (total_a_sum - diff) // n\n            \n            # Check if a_i is a positive integer\n            if a[i] <= 0 or (total_a_sum - diff) % n != 0:\n                valid = False\n                break\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Call the function and print the results\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence 'a' from the given sequence 'b' for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of tuples, each containing an integer n and a list of integers b.\n\n    Returns:\n        A list of strings, each representing the result for a test case. \n        \"YES\" followed by the sequence 'a' if possible, otherwise \"NO\".\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        total_b = sum(b)\n        \n        # Check if the total sum of b is divisible by n\n        if total_b % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        avg_contribution = total_b // n\n        a = [0] * n\n        possible = True\n        \n        # Attempt to construct a valid sequence 'a'\n        for i in range(n):\n            if (b[i] - avg_contribution) % n != 0:\n                possible = False\n                break\n            a[i] = (b[i] - avg_contribution) // n\n        \n        # Check if all elements in 'a' are positive\n        if possible and all(x > 0 for x in a):\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Call the function and print the results\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations for singers in towns.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing\n            the number of towns and the list of total concert durations.\n\n    Returns:\n        List[str]: List of results for each test case, either \"NO\" or \"YES\" followed by\n            the sequence of initial repertoire durations.\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        total_duration = sum(b)\n        \n        # Check if the sum of b is divisible by n\n        if total_duration % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the sum of initial repertoire durations\n        sum_a = total_duration // n\n        \n        # Initialize the sequence a\n        a = [0] * n\n        \n        # Calculate the initial repertoire for each singer\n        for i in range(n):\n            # Calculate a[i] using the correct formula\n            a[i] = (b[i] - sum_a) // (n - 1)\n        \n        # Validate the sequence a\n        if all(x > 0 for x in a):\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    results = []\n    \n    for n, b in test_cases:\n        # Initialize the sequence a with zeros\n        a = [0] * n\n        \n        # Calculate the sum of b\n        total_b = sum(b)\n        \n        # Check if the total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a_i\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        # Flag to check if a valid sequence is found\n        valid = True\n        \n        for i in range(n):\n            # Calculate the difference between b[i] and b[i-1] in a circular manner\n            diff = b[i] - b[i - 1]\n            \n            # Calculate a[i] using the formula derived from the problem statement\n            a[i] = (total_a - diff) // n\n            \n            # Check if a[i] is a positive integer\n            if a[i] <= 0 or (total_a - diff) % n != 0:\n                valid = False\n                break\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, b))\n    \n    # Call the function and get the result\n    results = reconstruct_sequence(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire lengths for singers in towns.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the number of towns and the list of total concert durations.\n\n    Returns:\n        A list of strings, each representing the result for a test case. \"YES\" followed by the sequence if possible, otherwise \"NO\".\n    \"\"\"\n    results = []\n    \n    for case_index in range(t):\n        n, b = test_cases[case_index]\n        a = [0] * n\n        possible = True\n        \n        # Calculate initial repertoire lengths\n        for i in range(n):\n            if i == 0:\n                a[i] = b[i] // n\n            else:\n                a[i] = (b[i] - b[i-1]) // n\n            \n            # Check feasibility\n            if a[i] <= 0 or (b[i] - sum(a[j] * ((i-j+n) % n + 1) for j in range(n))) != 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    \"\"\"Main function to read input, call the reconstruct_sequence function, and print results.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\n# Program entry point\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoires for singers in towns.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing\n            the number of towns and the list of total concert durations.\n\n    Returns:\n        List[str]: List of results for each test case, either \"YES\" followed by the sequence\n        or \"NO\" if no valid sequence can be found.\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        if n == 1:\n            # Edge case where there is only one town\n            results.append(\"YES\")\n            results.append(str(b[0]))\n            continue\n\n        # Attempt to reconstruct sequence a\n        a = [0] * n\n        possible = True\n\n        # Calculate a[0] based on b[0] and b[n-1]\n        a[0] = (b[0] + b[n-1] - b[n-2]) // n\n\n        if a[0] <= 0 or (b[0] + b[n-1] - b[n-2]) % n != 0:\n            possible = False\n\n        # Calculate other a[i] based on b[i]\n        for i in range(1, n):\n            a[i] = b[i] - (n - 1) * a[0]\n            if a[i] <= 0:\n                possible = False\n                break\n\n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, b))\n\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs a sequence of initial repertoires or determines if it's impossible.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of tuples, each containing the number of towns `n` and a list `b`\n                    of total concert durations for each town.\n\n    Returns:\n        A list of strings, each representing the result for a test case. \"YES\" followed by\n        the sequence if possible, otherwise \"NO\".\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        total_sum = sum(b)\n        \n        # Check if the total sum of durations is divisible by the number of towns\n        if total_sum % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        target_sum = total_sum // n\n        a = []\n        possible = True\n        \n        for i in range(n):\n            # Check if the difference is divisible by n\n            if (b[i] - target_sum) % n != 0:\n                possible = False\n                break\n            a.append((b[i] - target_sum) // n)\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        b = list(map(int, input().strip().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The main challenge is ensuring the sequence satisfies the conditions for all towns and singers. The solution must handle large input sizes efficiently and provide clear output for each test case.\nrequirement pool:\n- Implement the main algorithm to reconstruct sequence a\n- Ensure the solution handles edge cases and large inputs\n- Optimize the algorithm for performance\n- Provide clear output formatting\n- Include comprehensive test cases for validation\nWe will use a mathematical approach to reconstruct the sequence a. The key observation is that the sum of the durations in each town should be divisible by n, as each singer contributes a sequence of durations that are multiples of their initial repertoire. We will iterate over each test case, check if the sum of b_i is divisible by n, and if so, reconstruct the sequence a by dividing each b_i by n.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting their tour.\n\n    'concert duration'\n    Explanation: The duration of each concert increases as the singer visits more towns, based on their initial repertoire.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This means the concert duration in the next town is twice the initial repertoire.\n    'k + 2 \u22c5 a_i': This indicates the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer visits more towns.\n    'n \u22c5 a_i': This means the concert duration in the last town is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, calculate the sum of b_i.\n2. Check if this sum is divisible by n. If not, print \"NO\".\n3. If divisible, calculate each a_i by dividing b_i by n.\n4. Verify if the calculated sequence a satisfies the conditions for all towns.\n5. If valid, print \"YES\" and the sequence a; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1\n    Explanation: Since there's only one town and one singer, the sequence a is simply [1].\n\n    Test case with n = 3 and b = [3, 3, 3]\n    Explanation: Each town has equal concert duration, suggesting each singer's initial repertoire is 1.\n\n    Test case with n = 4 and b = [4, 8, 12, 16]\n    Explanation: The sequence suggests an increasing pattern that might not be possible to satisfy with a valid sequence a.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        for each test case:\n            if sum(b) % n != 0:\n                print(\"NO\")\n            else:\n                a = [b_i // n for b_i in b]\n                # Verify if this a satisfies all conditions\n                if valid(a):\n                    print(\"YES\")\n                    print(\" \".join(map(str, a)))\n                else:\n                    print(\"NO\")\n\n        def valid(a):\n            # Implement logic to check if a satisfies all conditions\n            pass\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers representing the initial repertoire of singers based on the total concert durations in each town. The solution must efficiently handle multiple test cases and large input sizes, ensuring accurate calculations and clear output formatting.\nrequirement pool:\n- Efficiently handle multiple test cases\n- Accurately calculate the sequence of repertoire\n- Ensure output format is clear and concise\n- Handle large input sizes efficiently\n- Provide detailed error messages if no valid sequence exists\nWe will iterate over each test case and attempt to reconstruct the sequence of initial repertoire durations for each singer. The key observation is that the sum of the durations of concerts in all towns for a given singer forms an arithmetic progression. We will use this property to deduce the initial repertoire. If the sum of the total durations in all towns is divisible by the sum of the first n natural numbers, then a valid sequence exists. Otherwise, it is impossible.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'arithmetic progression'\n    Explanation: The sum of the durations of concerts in all towns for a given singer forms an arithmetic progression. This means that the sequence of concert durations increases by a constant amount each time.\n\n# [phrase showing quantity relationship]\n    'two times', 'k + 2', 'n times'\n    Explanation: These phrases indicate the multiplication factor applied to the initial repertoire duration as the singer moves from town to town. For example, 'two times' means the concert duration is twice the initial repertoire, 'k + 2' means the concert duration is (k + 2) times the initial repertoire, and 'n times' means the concert duration is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - For each test case, calculate the sum of b_i values.\n    - Check if this sum is divisible by the sum of the first n natural numbers (which is n * (n + 1) / 2).\n    - If divisible, reconstruct the sequence a by dividing each b_i by n and adjusting for the arithmetic progression.\n    - If not divisible, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1\n    Explanation: The only possible sequence is [1], which satisfies the condition.\n    \n    Test case with n = 3 and b = [1, 2, 3]\n    Explanation: No valid sequence can be formed because the sum of b_i (6) is not divisible by the sum of first 3 natural numbers (6).\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]\n    Explanation: A valid sequence can be formed as [5, 5, 4, 1, 4, 5] because it satisfies the arithmetic progression condition.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking divisibility and reconstructing based on arithmetic progression will handle these cases.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The main challenge is ensuring the sequence satisfies the total concert duration for each town while considering the circular arrangement of towns. The solution must efficiently handle large input sizes and provide a clear output format.\nrequirement pool:\n- Reconstruct sequence a accurately for each test case\n- Optimize algorithm to handle large input sizes efficiently\n- Ensure output format is clear and concise\n- Provide detailed explanation of the solution logic\n- Implement error handling for invalid inputs\nWe will use a mathematical approach to reconstruct the sequence a. The key observation is that the sum of the sequence a multiplied by the number of towns should equal the total duration of concerts in each town. We will iterate over each test case, calculate the possible sequence a, and check if it satisfies the given conditions. If it does, we output the sequence; otherwise, we output NO.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire growth'\n    Explanation: Each singer's repertoire grows as they visit each town, adding a new song of their initial repertoire length to their total performance time.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that in the second town, the concert duration is twice the initial repertoire.\n    'k + 2 \u22c5 a_i': This indicates that in the (k+1)-th town, the concert duration is (k+2) times the initial repertoire.\n    Implementation: Use a loop to calculate the concert duration for each town based on the initial repertoire and the number of towns visited.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list `b` of total concert durations.\n2. Initialize an empty list `a` to store the initial repertoire for each singer.\n3. Calculate the sum of all elements in `b`.\n4. Check if this sum is divisible by `n * (n + 1) / 2`. If not, print \"NO\" and continue to the next test case.\n5. If divisible, calculate each `a_i` using the formula derived from the total concert durations and check if all `a_i` are positive integers.\n6. If valid, print \"YES\" followed by the sequence `a`. Otherwise, print \"NO\".\n\n# [edge case]\n    Test Case 1: \n    Input: 1\n           1\n           1\n    Output: YES\n            1\n    Explanation: With only one town and one singer, the initial repertoire must be equal to the total concert duration.\n\n    Test Case 2:\n    Input: 3\n           3\n           3 3 3\n    Output: NO\n    Explanation: The sum of b is not divisible by n * (n + 1) / 2, hence no valid sequence exists.\n\n    Test Case 3:\n    Input: 4\n           4\n           10 10 10 10\n    Output: NO\n    Explanation: The sum of b is not divisible by n * (n + 1) / 2, hence no valid sequence exists.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    \n```python\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_b // (n * (n + 1) // 2)\n        a = [0] * n\n        valid = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                valid = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n```\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must efficiently handle up to 200,000 total cities across all test cases, with each city's concert duration potentially reaching 1 billion. The challenge lies in determining a valid sequence or identifying when it's impossible.\nrequirement pool:\n- Implement the main algorithm to reconstruct the sequence of integers.\n- Ensure the solution handles the maximum input size efficiently.\n- Provide clear and correct output for each test case.\n- Handle edge cases where no solution is possible.\n- Optimize the solution for better performance if possible.\nWe will iterate over each test case and attempt to reconstruct the sequence of initial repertoire durations for each singer. The key observation is that the sum of the durations of concerts in all towns for a given singer forms an arithmetic progression. We need to check if the given total durations can be decomposed into such progressions. If not, we return 'NO'. Otherwise, we reconstruct one possible sequence and return 'YES' followed by the sequence.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'arithmetic progression'\n    Explanation: The requirement involves reconstructing sequences where the sum of concert durations forms an arithmetic progression. This means each singer's concert durations increase linearly as they visit each town.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i', '(k + 2) \u22c5 a_i', 'n \u22c5 a_i'\n    Explanation: These phrases indicate the multiplication of the initial repertoire duration by a factor that increases with each town visited. In code, this can be implemented by iterating over towns and multiplying the initial duration by the respective factor.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Iterate over each test case.\n    - For each test case, check if the total durations can be decomposed into arithmetic progressions.\n    - If possible, reconstruct one sequence of initial repertoire durations.\n    - Return 'YES' followed by the sequence if successful, otherwise return 'NO'.\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1: \n    Expected output: YES followed by 1\n    Explanation: With only one town, the initial repertoire duration must equal the total concert duration.\n\n    Test case with n = 3 and b = [1, 2, 3]:\n    Expected output: NO\n    Explanation: The total durations do not form a valid arithmetic progression for any initial sequence.\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]:\n    Expected output: YES followed by a valid sequence such as [5, 5, 4, 1, 4, 5]\n    Explanation: The sequence can be reconstructed to satisfy the total durations.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Implement checks to ensure the sum of durations can form valid arithmetic progressions.\n        - Use modular arithmetic to handle circular town arrangements.\n        - Ensure that reconstructed sequences are positive integers within the given constraints.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must efficiently handle multiple test cases and large input sizes, ensuring accurate reconstruction or determining impossibility. The output format must be strictly followed to ensure compatibility with automated testing.\nrequirement pool:\n- Accurate reconstruction of sequence a\n- Efficient handling of large input sizes\n- Clear and concise output format\n- Responsive solution for multiple test cases\n- User-friendly input and output handling\nWe will iterate over each test case and attempt to reconstruct the sequence 'a' from the given sequence 'b'. The key observation is that the sum of the sequence 'a' should be equal to the sum of the sequence 'b' divided by n, as each singer contributes to each town's total concert duration. We will check if this condition holds and then attempt to construct a valid sequence 'a'. If the condition does not hold, we will output 'NO'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the tour.\n\n    'concert duration'\n    Explanation: The total time a singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This means the concert duration in the next town is twice the initial repertoire.\n    'k + 2 \u22c5 a_i': This indicates that the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer visits more towns.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, calculate the total sum of b and check if it is divisible by n. If not, print \"NO\".\n2. If divisible, calculate the average contribution per singer, which should be the sum of b divided by n.\n3. Attempt to reconstruct sequence 'a' such that each a_i is a positive integer and satisfies the conditions given by b.\n4. If a valid sequence 'a' is found, print \"YES\" followed by the sequence. Otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1\n    Explanation: The simplest case where only one town and one singer exist. The output should be \"YES\" with a_1 = 1.\n\n    Test case with n = 3 and b = [3, 3, 3]\n    Explanation: Each town has the same concert duration, which might suggest equal initial repertoires. The output should be \"YES\" with a possible sequence like [1, 1, 1].\n\n    Test case with n = 4 and b = [10, 10, 10, 10]\n    Explanation: If all towns have equal concert durations but cannot be divided evenly among singers, the output should be \"NO\".\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Check if the sum of b is divisible by n.\n    - Ensure that each calculated a_i is positive and satisfies the conditions for all towns.\n    \n```python\ndef solve(test_cases):\n    results = []\n    for n, b in test_cases:\n        total_b = sum(b)\n        if total_b % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        avg_contribution = total_b // n\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            if b[i] % n != 0:\n                possible = False\n                break\n            a[i] = b[i] // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n```\nThis code checks if the sum of b is divisible by n and attempts to construct a valid sequence 'a'. If it fails at any point, it outputs \"NO\".\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must efficiently handle multiple test cases and large input sizes, ensuring accurate reconstruction or determining impossibility.\nrequirement pool:\n- Efficiently handle multiple test cases\n- Accurately reconstruct sequence a or determine impossibility\n- Optimize performance for large input sizes\n- Provide clear and concise output format\n- Ensure solution is easy to understand and implement\nWe will use a mathematical approach to reconstruct the sequence a based on the given constraints. The key observation is that the sum of the durations in each town should be divisible by the number of towns, n, to form a valid sequence. We will iterate over each test case, check the divisibility condition, and reconstruct the sequence if possible. If not, we will return 'NO'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the tour.\n\n    'concert duration'\n    Explanation: The total time a singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': The concert duration in the next town is twice the initial repertoire.\n    Implementation: Multiply the initial repertoire by 2 for the next town.\n\n    '(k + 2) \u22c5 a_i': The concert duration increases by a factor of (k + 2) as the singer visits more towns.\n    Implementation: Multiply the initial repertoire by (k + 2) for subsequent towns.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list `b` of total concert durations.\n2. Check if the sum of `b` is divisible by `n`. If not, print \"NO\".\n3. If divisible, calculate the initial repertoire `a` for each singer such that the sum of concerts in each town matches `b`.\n4. Iterate over each town and calculate the possible initial repertoire using the formula derived from the concert durations.\n5. Validate if the calculated sequence `a` satisfies all conditions.\n6. Print \"YES\" and the sequence `a` if valid, otherwise print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b = [1] = YES\n    Explanation: With only one town, any positive integer a_i that equals b_i is valid.\n\n    Test case with n = 3 and b = [1, 2, 3] = NO\n    Explanation: The sum of b is not divisible by n, making it impossible to form a valid sequence.\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87] = YES\n    Explanation: A valid sequence can be formed as shown in the example output.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Check if the sum of b is divisible by n.\n        - If not, immediately return \"NO\".\n        - Implement logic to calculate and validate sequence `a` based on derived formulas.\n", "requirement analysis:\nThe task requires reconstructing a sequence of integers based on given constraints. The solution must handle multiple test cases efficiently and provide clear output indicating whether reconstruction is possible. The constraints on input size and values necessitate an optimized approach to ensure performance.\nrequirement pool:\n- Efficiently handle up to 10^3 test cases\n- Correctly reconstruct sequence or determine impossibility\n- Ensure output format matches requirements\n- Optimize for large input sizes\n- Provide multiple valid sequences if possible\nWe will use a mathematical approach to reconstruct the sequence of initial repertoire durations for each singer. The key observation is that the total duration of concerts in each town is a sum of arithmetic progressions. We can leverage this to deduce the initial durations by solving a system of linear equations derived from the given total durations. The solution will involve iterating over the towns and calculating the initial durations using modular arithmetic to handle the circular nature of the towns. We will ensure the solution is efficient enough to handle the upper limits of the input constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'arithmetic progression'\n    Explanation: The duration of concerts increases in a predictable pattern as the singer moves from town to town.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial duration.\n    Implementation: Use multiplication in code to calculate the concert duration for each subsequent town.\n\n    '(k + 2) \u22c5 a_i': This indicates that the concert duration increases by a factor of (k + 2) times the initial duration.\n    Implementation: Use multiplication with the factor (k + 2) in code to calculate the concert duration.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - For each test case, iterate over the towns.\n    - For each town, calculate the initial duration using modular arithmetic to account for circular arrangement.\n    - Solve the system of linear equations derived from total durations using arithmetic progression properties.\n    - Check if a valid sequence exists; if not, return \"NO\".\n    - If valid, return \"YES\" and print any valid sequence of initial durations.\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1\n    Explanation: With only one town and one singer, the initial duration must be equal to the total concert duration. Expected output is \"YES\" followed by \"1\".\n\n    Test case with n = 3 and b = [1, 2, 3]\n    Explanation: The total durations do not allow for a valid sequence of initial durations due to mismatched arithmetic progression. Expected output is \"NO\".\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]\n    Explanation: A valid sequence exists that satisfies the arithmetic progression conditions. Expected output is \"YES\" followed by a valid sequence like \"5 5 4 1 4 5\".\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic should be able to handle these cases by checking for valid sequences and using modular arithmetic for circular arrangements.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must efficiently handle multiple test cases and large input sizes, ensuring accurate reconstruction or determining impossibility. The output format must be strictly followed to ensure compatibility with test case validation.\nrequirement pool:\n- Implement the main algorithm to reconstruct sequence a\n- Optimize the solution for handling large input sizes\n- Ensure the output format is strictly adhered to\n- Provide clear error handling for impossible cases\n- Enhance performance for edge cases\nWe will implement a function to reconstruct the sequence a based on the given constraints. The approach involves iterating over the array b and calculating possible values for a using modular arithmetic and checking feasibility. We will use Python's built-in capabilities for handling large integers and efficient list operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire growth'\n    Explanation: Each singer's repertoire grows as they visit each town, adding a song of their initial repertoire length to their performance time in each subsequent town.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire length.\n    'k + 2 \u22c5 a_i': This indicates that the concert duration increases by the initial repertoire length multiplied by the number of towns visited plus one.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list `b` of total concert durations.\n2. Initialize an empty list `a` to store the initial repertoire lengths.\n3. Iterate over each town index `i`:\n   - Calculate the possible initial repertoire length `a_i` using modular arithmetic to ensure the sequence wraps around correctly.\n   - Check if the calculated `a_i` is feasible (i.e., it should be a positive integer and should satisfy the given conditions for all towns).\n4. If a valid sequence `a` is found, print \"YES\" followed by the sequence. Otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b = [1] = YES\n    Explanation: With only one town, the initial repertoire can be directly equal to the total concert duration.\n\n    Test case with n = 3 and b = [1, 2, 3] = NO\n    Explanation: The sequence cannot be reconstructed as no valid initial repertoire lengths satisfy the conditions.\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87] = YES\n    Explanation: A valid sequence can be found that satisfies all conditions for each town.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where no valid sequence can be found.\n    \n```python\ndef reconstruct_sequence(t, test_cases):\n    results = []\n    for _ in range(t):\n        n, b = test_cases[_]\n        a = [0] * n\n        possible = True\n        \n        # Calculate initial repertoire lengths\n        for i in range(n):\n            if i == 0:\n                a[i] = b[i] // n\n            else:\n                a[i] = (b[i] - b[i-1]) // n\n            \n            # Check feasibility\n            if a[i] <= 0 or (b[i] - sum(a[j] * ((i-j+n) % n + 1) for j in range(n))) != 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Example usage:\nt = 4\ntest_cases = [\n    (3, [12, 16, 14]),\n    (1, [1]),\n    (3, [1, 2, 3]),\n    (6, [81, 75, 75, 93, 93, 87])\n]\n\noutput = reconstruct_sequence(t, test_cases)\nfor line in output:\n    print(line)\n```\nThis code handles edge cases by checking if the calculated initial repertoire lengths are feasible and ensuring they satisfy all conditions for each town.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must handle multiple test cases efficiently and provide correct outputs for each. Edge cases, such as when no solution is possible, must be addressed. The constraints on input size and values necessitate an optimized approach.\nrequirement pool:\n- Develop an algorithm to reconstruct the sequence of integers\n- Ensure the solution handles large inputs efficiently\n- Provide clear output for each test case\n- Identify and handle cases where no solution is possible\n- Optimize the solution for edge cases\nWe will use a mathematical approach to reconstruct the sequence of integers 'a' from the given 'b' values. The key observation is that the sum of the sequence 'a' multiplied by the respective indices should match the given 'b' values. We will iterate over each test case, and for each town, calculate the possible values of 'a' using modular arithmetic to ensure the sequence wraps around correctly. If a valid sequence is found, we output 'YES' followed by the sequence; otherwise, we output 'NO'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'concert duration'\n    Explanation: The duration of concerts increases as the singer moves from town to town, adding their initial repertoire to each subsequent concert.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire of the singer.\n    'n \u22c5 a_i': This indicates that the concert duration in the last town is n times the initial repertoire of the singer.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list `b` which contains total concert durations for each town.\n2. Initialize an empty list `a` to store the initial repertoire for each singer.\n3. For each town, calculate the possible initial repertoire `a_i` using the formula derived from the given `b` values and modular arithmetic.\n4. Check if the calculated sequence `a` satisfies all conditions for each town.\n5. If a valid sequence is found, print \"YES\" followed by the sequence `a`. If no valid sequence is found, print \"NO\".\n\n# [edge case]\n    1. Input: 1\n       1\n       1\n       Expected Output: YES\n       Explanation: With only one town and one singer, the initial repertoire must be equal to the total concert duration.\n       \n    2. Input: 3\n       1 2 3\n       Expected Output: NO\n       Explanation: The given durations do not allow for a valid sequence of initial repertoires that satisfy the conditions.\n       \n    3. Input: 6\n       81 75 75 93 93 87\n       Expected Output: YES\n       Explanation: A valid sequence of initial repertoires can be found that satisfies all conditions.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where n = 1 or when no valid sequence can be found.\n    \n```python\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1:\n            results.append(\"YES\")\n            results.append(str(b[0]))\n            continue\n        \n        # Attempt to reconstruct a\n        a = [0] * n\n        possible = True\n        \n        # Calculate a[0] based on b[0] and b[n-1]\n        a[0] = (b[0] + b[n-1] - b[n-2]) // n\n        \n        if a[0] <= 0 or (b[0] + b[n-1] - b[n-2]) % n != 0:\n            possible = False\n        \n        # Calculate other a[i] based on b[i]\n        for i in range(1, n):\n            a[i] = b[i] - (n - 1) * a[0]\n            if a[i] <= 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n```\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must handle multiple test cases efficiently and provide correct outputs for each case. The constraints involve large numbers and arrays, necessitating optimized algorithms to ensure performance.\nrequirement pool:\n- Implement the main algorithm to reconstruct sequence a\n- Ensure the solution handles large input sizes efficiently\n- Provide clear output formatting for user interpretation\n- Optimize the code for performance and responsiveness\n- Include error handling for invalid inputs\nWe will iterate over each test case and attempt to reconstruct the sequence 'a' by leveraging the properties of the problem. The key observation is that the sum of the durations in each town should be divisible by the number of towns, as each singer contributes a multiple of their initial repertoire to the total. We will use this property to check if a valid sequence can be constructed. If the sum of durations in a town is not divisible by the number of towns, it is impossible to construct such a sequence.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the tour.\n\n    'concert duration'\n    Explanation: The total time a singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire.\n    'k + 2 \u22c5 a_i': This shows that the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer visits more towns.\n    'n \u22c5 a_i': This indicates that the concert duration in the last town visited is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list of total concert durations `b`.\n2. Check if the sum of `b` is divisible by `n`. If not, print \"NO\" and continue to the next test case.\n3. If divisible, calculate the total sum of `b` divided by `n` to get the sum of initial repertoires.\n4. Attempt to reconstruct the sequence `a` by iterating over `b` and using modular arithmetic to ensure each town's total duration can be achieved by summing multiples of `a_i`.\n5. If a valid sequence is found, print \"YES\" followed by the sequence. Otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b = [1] = YES\n    Explanation: With only one town and one singer, the initial repertoire can be 1, matching the total concert duration.\n\n    Test case with n = 3 and b = [3, 3, 3] = YES\n    Explanation: Each singer can have an initial repertoire of 1, leading to concert durations of 1, 2, and 3 in each town.\n\n    Test case with n = 2 and b = [5, 7] = NO\n    Explanation: The sum of b (12) is not divisible by n (2), making it impossible to construct a valid sequence.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the sum of b is not divisible by n.\n```python\ndef solve(test_cases):\n    results = []\n    for n, b in test_cases:\n        total_sum = sum(b)\n        if total_sum % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        target_sum = total_sum // n\n        a = []\n        possible = True\n        \n        for i in range(n):\n            if (b[i] - target_sum) % n != 0:\n                possible = False\n                break\n            a.append((b[i] - target_sum) // n)\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n```\nThis code checks if the sum of `b` is divisible by `n` and attempts to construct a valid sequence `a`. If not possible, it returns \"NO\".\n"], "scores": [], "pass_results": [true, false, true, false, true, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 143, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "mutate_method": "add_1_sentence_at_end", "parent_index": 44}
