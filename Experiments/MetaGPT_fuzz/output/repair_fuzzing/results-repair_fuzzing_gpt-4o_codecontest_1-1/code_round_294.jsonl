{"name": "1618_E. Singers' Tour", "description": "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "tags": ["constructive algorithms", "math"], "difficulty": 11, "id": 1618, "sample_io": [{"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n", "output": ["YES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n"]}], "test_list": [{"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n4\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["YES\n3 1 3\nYES\n4\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n3\n3\n1 2 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n3\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n4\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n4\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n2\n3\n1 2 0\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n2\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n19 16 19\n1\n1\n3\n1 0 3\n6\n8 37 80 169 133 87\n", "output": ["YES\n3 4 2\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 105\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 62 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n112 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 132 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 39 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n112 75 75 93 93 124\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 2 3\n6\n8 39 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n2\n8 37 80 169 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 22\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 16 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n2\n1 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 91 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 19 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 184 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 0\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 184 129 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 4 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 4 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 2 3\n6\n8 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n10 75 75 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 155 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 13\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n62 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 84 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 93 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 102 119 179 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 16 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 27\n1\n1\n3\n0 2 3\n6\n8 75 75 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n8 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 81 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 6\n6\n8 75 32 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 64 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 0 3\n6\n8 75 119 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n4 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 22\n1\n1\n3\n1 2 2\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n8 16 4\n1\n1\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 16 2\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 8\n6\n8 75 75 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n22 16 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n2 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 3 3\n6\n8 75 32 50 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 176 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 4 3\n6\n8 75 32 91 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 0 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 -1\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 42 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 138 75 184 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 6\n1\n1\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 1\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 75 32 4 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n6\n13 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 2 3\n6\n8 75 75 93 21 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n10 75 75 88 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 240 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 13\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 16 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n13 16 14\n1\n1\n3\n1 1 3\n6\n8 75 84 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 41 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 14\n1\n1\n3\n1 2 3\n6\n14 102 119 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n1 2 3\n6\n8 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 140\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 27\n1\n1\n3\n0 0 3\n6\n8 75 75 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 119 93 4 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n12 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 37 81 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 3\n6\n8 75 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 0 3\n6\n8 75 112 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n3\n8 75 75 82 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n8 16 4\n1\n2\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n22 16 7\n1\n1\n2\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n2 2 3\n6\n8 39 4 82 133 20\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 3 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 24\n1\n1\n3\n0 4 3\n6\n8 75 32 91 3 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n0 0 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 55 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 6\n1\n2\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 53 32 4 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n4\n13 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n10 75 75 88 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 15 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 13\n1\n1\n3\n1 2 3\n6\n8 109 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 93 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n13 16 14\n1\n1\n3\n1 1 3\n6\n8 75 104 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 14\n1\n1\n3\n1 2 3\n6\n14 102 38 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n1 2 3\n6\n11 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 38 140\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 143 93 4 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 1 4\n6\n12 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 2 3\n6\n10 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 37 81 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 3\n6\n8 21 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 35 62 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n3\n8 75 75 133 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 0 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n22 22 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 6 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 47 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 2\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n8 75 28 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n3 75 202 179 55 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n0 16 6\n1\n2\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 53 32 2 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n0 75 75 88 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 23\n1\n1\n3\n1 2 3\n6\n8 109 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 141 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 6 14\n1\n1\n3\n1 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 6\n6\n8 75 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 28\n1\n1\n3\n1 2 3\n6\n14 102 38 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n11 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 143 93 5 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 1 4\n6\n12 81 144 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 0 3\n6\n10 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 2\n6\n8 21 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 35 12 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 -1 4\n3\n8 75 75 133 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 1 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n0 6 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 57 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 4\n1\n1\n3\n1 2 2\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n13 75 28 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n3\n3\n1 1 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n3\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n2\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n0 75 75 27 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 23\n1\n1\n3\n1 2 3\n6\n8 136 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 141 64 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 6 14\n1\n1\n3\n2 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 6\n6\n8 141 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}], "task_id": "codecontest/136", "prompt": "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Assume all integers involved are within typical 32-bit signed integer range. Consider edge cases such as when n equals 1 or when all concerts in a town last the same duration.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "repair_prompt": ["n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Assume all integers involved are within typical 32-bit signed integer range. Consider edge cases such as when n equals 1 or when all concerts in a town last the same duration.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. While visiting the towns, the singer happened to get inspired. In each town, the i-th singer came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Assume all integers involved are within typical 32-bit signed integer range. Consider edge cases such as when n equals 1 or when all concerts in a town last the same duration.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "n towns are arranged in a circle sequentially, and numbered from 1 to n in clockwise order, with each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. Each singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. Hence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes. You are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Assume all integers involved are within typical 32-bit signed integer range. Consider edge cases such as when n equals 1 or when all concerts in a town last the same duration.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. "], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the initial repertoire durations or determines if it's impossible.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the number of towns and the total concert durations.\n\n    Returns:\n        A list of strings, each representing the result for a test case. \"YES\" followed by the sequence if possible, otherwise \"NO\".\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        if n == 1:\n            # Edge case where there is only one town\n            results.append(\"YES\")\n            results.append(f\"{b[0]}\")\n            continue\n\n        if all(x == b[0] for x in b):\n            # Edge case where all concert durations are equal\n            results.append(\"NO\")\n            continue\n\n        # Attempt to reconstruct the sequence using mathematical deduction\n        a = [0] * n\n        possible = True\n\n        # Calculate initial repertoire durations\n        for i in range(n):\n            if i == 0:\n                a[i] = b[i] // n\n            else:\n                a[i] = (b[i] - sum((k + 1) * a[(i - k - 1) % n] for k in range(n - 1))) // n\n\n            # Check if the calculated duration is valid\n            if a[i] <= 0 or a[i] > 10**9:\n                possible = False\n                break\n\n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n\n    # Call the function and get the result\n    results = reconstruct_sequence(t, test_cases)\n\n    # Output interface\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_repertoire(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations for each test case.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the number of towns and a list of concert durations.\n\n    Returns:\n        A list of strings, each representing the result for a test case. \"YES\" followed by the sequence if possible, otherwise \"NO\".\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        if n == 1:\n            # Edge case: Only one town\n            results.append(\"YES\")\n            results.append(f\"{b[0]}\")\n            continue\n\n        if all(x == b[0] for x in b):\n            # Edge case: All concert durations are the same\n            results.append(\"NO\")\n            continue\n\n        # Attempt to reconstruct the sequence\n        a = [0] * n\n        total_sum = sum(b)\n        \n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n\n        total_a_sum = total_sum // (n * (n + 1) // 2)\n\n        valid = True\n        for i in range(n):\n            prev_index = (i - 1 + n) % n\n            diff = b[i] - b[prev_index]\n            if (diff + total_a_sum) % n != 0 or (diff + total_a_sum) // n <= 0:\n                valid = False\n                break\n            a[i] = (diff + total_a_sum) // n\n\n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n\n    # Call the function and get results\n    results = reconstruct_repertoire(t, test_cases)\n\n    # Output interface\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_repertoire(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of tuples, each containing the number of towns `n` and a list of total concert durations `b`.\n\n    Returns:\n        A list of strings, each representing the result for a test case. \"YES\" followed by the sequence if possible, otherwise \"NO\".\n    \"\"\"\n    results = []\n    \n    for case_index in range(t):\n        n, b = test_cases[case_index]\n        \n        if n == 1:\n            # Edge case: Only one town\n            if b[0] > 0:\n                results.append(\"YES\")\n                results.append(f\"{b[0]}\")\n            else:\n                results.append(\"NO\")\n            continue\n        \n        # Attempt to reconstruct sequence a\n        a = [0] * n\n        possible = True\n        \n        # Calculate the sum of all b_i\n        total_b = sum(b)\n        \n        # Check if the total sum of b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a_i\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        for i in range(n):\n            # Calculate a_i using derived formula\n            a[i] = (b[i] - b[i - 1] + total_a) // n\n            if a[i] <= 0 or (b[i] - b[i - 1] + total_a) % n != 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Example usage:\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    results = reconstruct_repertoire(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations based on the given total concert durations in towns.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns and the list of total concert durations.\n\n    Returns:\n        List[str]: List of results for each test case, either \"YES\" followed by the sequence or \"NO\".\n    \"\"\"\n    results = []\n    for case_index in range(t):\n        n, b = test_cases[case_index]\n        \n        # Edge case for n = 1\n        if n == 1:\n            results.append(\"YES\")\n            results.append(f\"{b[0]}\")\n            continue\n        \n        # Initialize the sequence of initial repertoire durations\n        a = [0] * n\n        possible = True\n        \n        # Calculate the initial repertoire durations\n        for i in range(n):\n            if b[i] % n != 0:\n                possible = False\n                break\n            a[i] = b[i] // n\n        \n        # Check if the sequence is valid\n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Call the function and get the result\n    results = reconstruct_sequence(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_repertoire(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the initial repertoire durations or determines if it's impossible.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the number of towns and the total concert durations.\n\n    Returns:\n        A list of strings, each representing the result for a test case.\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        if n == 1:\n            # Edge case where there is only one town\n            results.append(\"YES\")\n            results.append(f\"{b[0]}\")\n        elif all(x == b[0] for x in b):\n            # Edge case where all concerts have the same duration\n            results.append(\"NO\")\n        else:\n            # Attempt to reconstruct the sequence of initial durations\n            a = [0] * n\n            possible = True\n            \n            # Calculate initial durations using mathematical properties\n            for i in range(n):\n                if b[i] % n != 0:\n                    possible = False\n                    break\n                a[i] = b[i] // n\n            \n            if possible:\n                results.append(\"YES\")\n                results.append(\" \".join(map(str, a)))\n            else:\n                results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Call the function and get the result\n    results = reconstruct_repertoire(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[str, List[int]]]:\n    results = []\n    \n    for n, b in test_cases:\n        if n == 1:\n            # Edge case: Only one town\n            if b[0] <= 10**9:\n                results.append((\"YES\", [b[0]]))\n            else:\n                results.append((\"NO\", []))\n        elif all(x == b[0] for x in b):\n            # Edge case: Uniform concert durations\n            results.append((\"NO\", []))\n        else:\n            # General case: Attempt to reconstruct the sequence\n            a = [0] * n\n            total_sum = sum(b)\n            \n            if total_sum % (n * (n + 1) // 2) != 0:\n                results.append((\"NO\", []))\n                continue\n            \n            total_a = total_sum // (n * (n + 1) // 2)\n            valid = True\n            \n            for i in range(n):\n                diff = b[i] - b[i - 1]\n                if (total_a + diff) % n != 0 or (total_a + diff) // n <= 0:\n                    valid = False\n                    break\n                a[i] = (total_a + diff) // n\n            \n            if valid:\n                results.append((\"YES\", a))\n            else:\n                results.append((\"NO\", []))\n    \n    return results\n\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result[0])\n        if result[0] == \"YES\":\n            print(\" \".join(map(str, result[1])))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_song_durations(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the initial song durations for each test case or determines if it's impossible.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns `n`\n            and a list of total concert durations `b`.\n\n    Returns:\n        List[str]: A list of results for each test case. Each result is either \"NO\" or \"YES\" followed by\n            the sequence of initial song durations.\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        if n == 1:\n            # Edge case: Only one town\n            results.append(\"YES\")\n            results.append(f\"{b[0]}\")\n            continue\n        \n        # Check if all b values are the same\n        if all(x == b[0] for x in b):\n            results.append(\"NO\")\n            continue\n        \n        # Attempt to reconstruct sequence a\n        a = [0] * n\n        possible = True\n        \n        # Calculate initial song durations using modular arithmetic\n        for i in range(n):\n            a[i] = (b[i] - b[i-1]) // n\n            if a[i] <= 0 or a[i] > 10**9:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, b))\n    \n    # Call the function and get results\n    results = reconstruct_song_durations(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[str, List[int]]]:\n    \"\"\"Reconstructs a sequence of initial song durations or determines if it's impossible.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the number of towns and the list of total concert durations.\n\n    Returns:\n        A list of tuples, each containing 'YES' or 'NO' and the sequence of initial song durations if possible.\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        if n == 1:\n            # Edge case: Only one town\n            results.append(('YES', [b[0]]))\n            continue\n\n        if all(x == b[0] for x in b):\n            # Edge case: All concert durations are the same\n            results.append(('YES', [b[0] // n] * n))\n            continue\n\n        # Attempt to reconstruct sequence a\n        a = [0] * n\n        possible = True\n\n        # Calculate the initial song durations\n        for i in range(n):\n            if b[i] % n != 0:\n                possible = False\n                break\n            a[i] = b[i] // n\n\n        if possible:\n            results.append(('YES', a))\n        else:\n            results.append(('NO', []))\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result[0])\n        if result[0] == 'YES':\n            print(' '.join(map(str, result[1])))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial song durations or determines if it's impossible.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the number of towns `n` and a list of total concert durations `b`.\n\n    Returns:\n        A list of strings, each representing the result for a test case. \"YES\" followed by the sequence if possible, otherwise \"NO\".\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        if n == 1:\n            # Edge case: Only one town\n            results.append(\"YES\")\n            results.append(f\"{b[0]}\")\n            continue\n        \n        # Check if all b_i are equal\n        if all(x == b[0] for x in b):\n            results.append(\"NO\")\n            continue\n        \n        # Attempt to reconstruct sequence a\n        a = [0] * n\n        total_sum = sum(b)\n        \n        # Check if total_sum is divisible by n*(n+1)/2\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_sum // (n * (n + 1) // 2)\n        possible = True\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1]\n            a[i] = (diff + total_a) // n\n            \n            if a[i] <= 0 or (diff + total_a) % n != 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n    \n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    results = []\n    \n    for n, b in test_cases:\n        total_sum = sum(b)\n        \n        # Check if the sum of b is divisible by n\n        if total_sum % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the sum of initial repertoires\n        a_sum = total_sum // n\n        a = [0] * n\n        \n        # Attempt to reconstruct the sequence a\n        valid = True\n        for i in range(n):\n            # Calculate the expected sum for the i-th town\n            expected_sum = b[i]\n            current_sum = 0\n            \n            for j in range(n):\n                current_sum += (j + 1) * a[(i + j) % n]\n            \n            # Calculate the initial repertoire for the i-th singer\n            a[i] = (expected_sum - current_sum) // n\n            \n            # Check if the calculated a[i] is valid\n            if a[i] <= 0 or (expected_sum - current_sum) % n != 0:\n                valid = False\n                break\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n"], "plans": ["requirement analysis:\nThe problem requires reconstructing a sequence of initial repertoire durations based on given total concert durations in each town. The solution must handle multiple test cases efficiently and consider edge cases such as when n equals 1 or when all concerts in a town last the same duration. The output must be clear, indicating whether reconstruction is possible and providing the sequence if it is.\nrequirement pool:\n- Efficiently handle up to 10^3 test cases\n- Correctly reconstruct the sequence of initial repertoire durations\n- Handle edge cases effectively\n- Provide clear output format\n- Optimize for large inputs\nWe will use a mathematical approach to reconstruct the sequence of initial repertoire durations. The key observation is that the sum of the durations for each town can be expressed as a linear combination of the initial durations. We will use this observation to derive the sequence by solving a system of linear equations. The solution will be efficient enough to handle up to 10^3 test cases and consider edge cases such as when n equals 1 or when all concerts in a town last the same duration.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the initial duration of songs each singer has before visiting other towns.\n    'concert duration': refers to the total time a singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration in the next town is twice the initial repertoire.\n    '(k + 2) \u22c5 a_i': means the concert duration increases linearly with each town visited, where k is the number of towns visited so far.\n    'n \u22c5 a_i': means the concert duration in the last town visited is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the number of towns and the total concert durations for each town.\n    2. Use mathematical deduction to reconstruct the initial repertoire durations by solving a system of linear equations.\n    3. Check if the solution is valid (all values are positive integers within the given range).\n    4. If valid, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Input: 1\n           1\n    Output: YES\n            1\n    Explanation: With only one town, the initial repertoire must equal the total concert duration.\n\n    Input: 2\n           2 2\n    Output: NO\n    Explanation: If all concerts in a town last the same duration, it may be impossible to reconstruct a valid sequence.\n\n    Input: 3\n           3 3 3\n    Output: NO\n    Explanation: If all concert durations are equal, it may be impossible to reconstruct a valid sequence.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where n equals 1 or all concert durations are equal.\n        if n == 1:\n            print(\"YES\")\n            print(b[0])\n        elif all(x == b[0] for x in b):\n            print(\"NO\")\n        else:\n            # Original logic for solving linear equations and reconstructing sequence\n", "requirement analysis:\nThe problem requires reconstructing a sequence of initial repertoire durations based on given concert durations in towns. The solution must efficiently handle multiple test cases and large inputs, ensuring edge cases are addressed. The output must clearly indicate whether reconstruction is possible and provide the sequence if it is.\nrequirement pool:\n- Efficiently handle multiple test cases\n- Ensure solution is robust against edge cases\n- Provide clear output indicating possibility of reconstruction\n- Output the sequence of initial repertoire durations if possible\n- Optimize for large input sizes\nWe will implement a function that reconstructs the sequence of initial repertoire durations for each test case. The function will iterate over the given concert durations and attempt to deduce the initial durations by leveraging the mathematical relationship between the concert durations and the initial repertoire. The approach will handle edge cases such as when n equals 1 or when all concerts in a town last the same duration. We will use basic Python data structures to ensure efficiency and simplicity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the initial duration of songs each singer has before visiting other towns.\n    'concert duration': refers to the total time a singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': indicates that the concert duration in the next town is twice the initial repertoire.\n    '(k + 2) \u22c5 a_i': indicates that the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer visits more towns.\n    'n \u22c5 a_i': indicates that the concert duration in the last town visited is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - For each test case, read the number of towns and the concert durations.\n    - Initialize an array to store the initial repertoire durations.\n    - For each town, calculate the possible initial repertoire duration using the given concert durations and mathematical relationships.\n    - Check if the calculated durations are valid (positive integers within the specified range).\n    - If valid, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Input: 1\n           1\n           Output: YES\n                   1\n    Explanation: With only one town, the concert duration equals the initial repertoire.\n\n    Input: 2\n           2\n           2 2\n           Output: NO\n    Explanation: If all concerts in a town last the same duration, it might be impossible to deduce a valid sequence.\n\n    Input: 3\n           3\n           9 9 9\n           Output: NO\n    Explanation: If all concert durations are equal across towns, it might be impossible to deduce a valid sequence.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where n equals 1 or when all concerts in a town last the same duration.\n        if n == 1:\n            print(\"YES\")\n            print(b[0])\n        elif all(x == b[0] for x in b):\n            print(\"NO\")\n        else:\n            # Original logic for reconstructing sequence a\n", "requirement analysis:\nThe requirements involve reconstructing a sequence of integers based on given constraints. The solution must efficiently handle multiple test cases and large input sizes, ensuring accurate results even in edge cases. The output format must strictly adhere to the specified format, providing either a valid sequence or indicating impossibility.\nrequirement pool:\n- Efficiently handle multiple test cases\n- Accurately reconstruct the sequence of initial repertoire durations\n- Handle edge cases such as n equals 1 or uniform concert durations\n- Ensure output format compliance\n- Optimize for large input sizes\nWe will implement a function to reconstruct the sequence of initial repertoire durations for each test case. The function will iterate over the given total concert durations and attempt to deduce the initial durations by leveraging the mathematical relationship between the total durations and the sequence of concerts. We will handle edge cases such as when n equals 1 or when all concerts in a town last the same duration. The solution will be efficient enough to handle the upper limits of input size constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence of concerts wraps around after the last town back to the first.\n\n    'repertoire growth'\n    Explanation: Each singer's repertoire grows as they perform in each town, adding a new song of the same duration as their initial repertoire.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire.\n    'k + 2': This indicates that the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer moves to subsequent towns.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list of total concert durations `b`.\n2. If `n` is 1, check if `b[0]` is a valid initial duration (i.e., it should be a positive integer). If so, print \"YES\" and `b[0]`; otherwise, print \"NO\".\n3. For `n > 1`, attempt to reconstruct the sequence `a`:\n   - Initialize an empty list `a`.\n   - Iterate over each town index `i` from 0 to `n-1`.\n   - Calculate the initial repertoire `a_i` for each singer using the formula derived from the total concert durations.\n   - Ensure that each calculated `a_i` is a positive integer.\n4. If a valid sequence `a` is found, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case 1: \n    Input: 1\n           1\n    Output: YES\n            1\n    Explanation: With only one town and a total concert duration of 1, the initial repertoire must be 1.\n\n    Test case 2:\n    Input: 3\n           3 3 3\n    Output: NO\n    Explanation: All concerts in each town last the same duration, making it impossible to determine distinct initial repertoires.\n\n    Test case 3:\n    Input: 4\n           10 10 10 10\n    Output: NO\n    Explanation: The uniformity in total concert durations across all towns makes it impossible to deduce distinct initial repertoires.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where `n` equals 1 or when all concerts in a town last the same duration.\n    \n```python\ndef reconstruct_sequence(t, test_cases):\n    results = []\n    for _ in range(t):\n        n, b = test_cases[_]\n        if n == 1:\n            if b[0] > 0:\n                results.append(\"YES\")\n                results.append(f\"{b[0]}\")\n            else:\n                results.append(\"NO\")\n            continue\n        \n        # Attempt to reconstruct sequence a\n        a = [0] * n\n        possible = True\n        for i in range(n):\n            # Calculate a_i using derived formula\n            a[i] = (b[i] - b[i-1]) // n\n            if a[i] <= 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Example usage:\nt = 4\ntest_cases = [\n    (3, [12, 16, 14]),\n    (1, [1]),\n    (3, [1, 2, 3]),\n    (6, [81, 75, 75, 93, 93, 87])\n]\n\noutput = reconstruct_sequence(t, test_cases)\nfor line in output:\n    print(line)\n```\n\n", "requirement analysis:\nThe problem requires reconstructing a sequence of initial repertoire durations based on given total concert durations in towns. The solution must handle multiple test cases efficiently and consider edge cases such as minimal towns or uniform concert durations.\nrequirement pool:\n- Efficiently handle up to 10^3 test cases\n- Correctly reconstruct sequence or determine impossibility\n- Optimize for large inputs up to 4 \u22c5 10^4 towns\n- Ensure robustness against edge cases\n- Provide clear output format as specified\nWe will implement a function to reconstruct the sequence of initial repertoire durations based on the given total concert durations in towns. The approach involves iterating over the given durations and checking if a valid sequence can be formed. If not, we will return 'NO'. The solution will handle edge cases such as when n equals 1 or when all concerts in a town last the same duration. We will use basic Python data structures and ensure the solution is efficient enough to handle the constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting their tour.\n\n    'concert duration'\n    Explanation: The total time a singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration doubles as the singer moves to the next town.\n    Implementation: Multiply the initial repertoire by the number of towns visited so far.\n\n    '(k + 2) \u22c5 a_i': This shows the concert duration increases by a factor of (k + 2) as the singer visits more towns.\n    Implementation: Use a loop to calculate the concert duration for each town based on the number of towns visited.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list of total concert durations `b`.\n2. Initialize an empty list `a` to store the initial repertoire durations.\n3. For each town, calculate the possible initial repertoire `a_i` by dividing the total concert duration by `n`.\n4. Check if the calculated `a_i` can form a valid sequence by ensuring all concert durations match `b`.\n5. If a valid sequence is found, print \"YES\" and the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Edge Case 1: n = 1, b = [1] = YES, 1\n    Explanation: With only one town, the initial repertoire is equal to the total concert duration.\n\n    Edge Case 2: n = 3, b = [3, 3, 3] = NO\n    Explanation: All concerts have the same duration, but no valid initial repertoire can satisfy this condition.\n\n    Edge Case 3: n = 4, b = [4, 8, 12, 16] = YES, 1 2 3 4\n    Explanation: The sequence of initial repertoires can be reconstructed as each town's concert duration is a multiple of its position.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    \n```python\ndef reconstruct_sequence(t, test_cases):\n    results = []\n    for _ in range(t):\n        n, b = test_cases[_]\n        if n == 1:\n            results.append(\"YES\")\n            results.append(f\"{b[0]}\")\n            continue\n        \n        a = [0] * n\n        possible = True\n        for i in range(n):\n            if b[i] % n != 0:\n                possible = False\n                break\n            a[i] = b[i] // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Example usage:\nt = 4\ntest_cases = [\n    (3, [12, 16, 14]),\n    (1, [1]),\n    (3, [1, 2, 3]),\n    (6, [81, 75, 75, 93, 93, 87])\n]\n\noutput = reconstruct_sequence(t, test_cases)\nfor line in output:\n    print(line)\n```\nThis code handles edge cases by checking if each total concert duration is divisible by `n`, ensuring that a valid sequence can be formed.\n", "requirement analysis:\nThe problem requires reconstructing the initial repertoire durations for singers based on the total concert durations in each town. The solution must handle multiple test cases efficiently, considering edge cases such as when n equals 1 or when all concerts in a town last the same duration. The output must clearly indicate whether a solution is possible and provide the sequence if it is.\nrequirement pool:\n- Efficiently handle multiple test cases\n- Correctly reconstruct the sequence of initial repertoire durations\n- Handle edge cases effectively\n- Provide clear output format\n- Optimize for large inputs\nWe will use a mathematical approach to reconstruct the sequence of initial repertoire durations. The key observation is that the sum of the durations in each town can be expressed as a linear combination of the initial durations. We will use this observation to derive the initial durations from the given total durations. The solution will handle edge cases such as when n equals 1 or when all concerts in a town last the same duration. We will ensure the solution is efficient enough to handle large inputs by leveraging mathematical properties and avoiding unnecessary computations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the initial duration of songs each singer has before visiting other towns.\n    'concert duration': refers to the total time a singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration in the next town is twice the initial repertoire.\n    '(k + 2) \u22c5 a_i': means the concert duration increases linearly with each town visited, where k is the number of towns visited after the initial town.\n    'n \u22c5 a_i': means the concert duration in the last town visited is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the number of towns and the total concert durations for each town.\n    2. Check if n equals 1, then directly return the total duration as the initial repertoire.\n    3. For n > 1, use mathematical properties to derive the initial repertoire durations from the total durations.\n    4. If a valid sequence of initial durations can be reconstructed, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Input: 1\n           1\n           Output: YES\n                   1\n    Explanation: With only one town, the initial repertoire is equal to the total concert duration.\n\n    Input: 3\n           3\n           3 3 3\n           Output: NO\n    Explanation: All concerts have the same duration, making it impossible to reconstruct a valid sequence of initial durations.\n\n    Input: 2\n           2\n           4 4\n           Output: YES\n                   2 2\n    Explanation: Each singer performs for 2 minutes initially, and then for 4 minutes in the next town.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where n equals 1 or when all concerts have the same duration.\n        if n == 1:\n            print(\"YES\")\n            print(b[0])\n        elif all(x == b[0] for x in b):\n            print(\"NO\")\n        else:\n            # Implement logic to reconstruct sequence a using mathematical properties.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of initial repertoire durations based on given total concert durations in each town. The solution must efficiently handle multiple test cases and large inputs, ensuring correct handling of edge cases such as single town scenarios or uniform concert durations.\nrequirement pool:\n- Efficiently process multiple test cases\n- Handle large input sizes up to 2 \u22c5 10^5\n- Ensure accurate reconstruction of sequence\n- Provide clear output format\n- Robust handling of edge cases\nWe will use a mathematical approach to reconstruct the sequence of initial repertoire durations. The key observation is that the sum of the durations for each town can be expressed as a linear combination of the initial durations. We will leverage this to solve for the initial durations using modular arithmetic and linear algebra techniques. Given the constraints, we will ensure the solution is efficient and handles edge cases such as n=1 or uniform concert durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the initial duration of songs each singer has before visiting other towns.\n    'concert duration': refers to the total time a singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration in the next town is twice the initial repertoire.\n    '(k + 2) \u22c5 a_i': means the concert duration increases linearly with each town visited, where k is the number of towns visited after the initial town.\n    'n \u22c5 a_i': means the concert duration in the last town visited is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the number of towns and the total concert durations for each town.\n    2. Check if it's possible to reconstruct the initial repertoire durations using modular arithmetic.\n    3. If n = 1, directly check if b_1 is a valid initial duration.\n    4. For n > 1, use linear algebra techniques to solve for initial durations.\n    5. If a valid sequence is found, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1:\n    Input: 1\n           1\n    Output: YES\n            1\n    Explanation: With only one town, the total concert duration must equal the initial repertoire.\n\n    Test case with uniform concert durations:\n    Input: 3\n           3 3 3\n    Output: NO\n    Explanation: It's impossible to have uniform concert durations with increasing repertoire.\n\n    Test case with maximum possible values:\n    Input: 2\n           10^9 10^9\n    Output: NO\n    Explanation: The values are too large to form a valid sequence with increasing concert durations.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where n = 1 or uniform concert durations.\n        if n == 1:\n            if b[0] <= 10^9:\n                print(\"YES\")\n                print(b[0])\n            else:\n                print(\"NO\")\n        elif all(x == b[0] for x in b):\n            print(\"NO\")\n        else:\n            # Implement logic for reconstructing sequence using modular arithmetic and linear algebra techniques.\n", "requirement analysis:\nThe requirements focus on reconstructing a sequence of song durations based on given total durations for each town. The solution must handle multiple test cases efficiently and provide clear output indicating whether reconstruction is possible. Edge cases such as single town scenarios and uniform concert durations must be considered.\nrequirement pool:\n- Efficiently process up to 10^3 test cases\n- Handle edge cases like n=1 and uniform durations\n- Provide clear output format for each test case\n- Ensure solution works within 32-bit integer range\n- Optimize for large input sizes up to 2 \u22c5 10^5\nWe will use a mathematical approach to reconstruct the sequence of song durations. The key is to understand the pattern of concert durations and use modular arithmetic to determine the initial song duration for each singer. We will iterate over each test case, calculate possible values for the sequence, and check if they satisfy the given conditions. If no valid sequence can be found, we will return 'NO'. Libraries like NumPy can be used for efficient array operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'concert duration pattern'\n    Explanation: Each singer's concert duration in towns follows a specific pattern based on their initial song duration and the town's position relative to their starting town.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial duration.\n    'n \u22c5 a_i': This indicates that the concert duration in the last town of the sequence is n times the initial duration.\n    Implementation: Use multiplication in code to calculate these durations.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list of total concert durations `b`.\n2. Initialize an empty list `a` to store the initial song durations.\n3. For each town, calculate the possible initial song duration using the given pattern and modular arithmetic.\n4. Check if the calculated sequence satisfies the total durations `b`.\n5. If a valid sequence is found, print \"YES\" and the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1:\n    Input: 1\n           1\n    Expected output: YES\n                     1\n    Explanation: With only one town, the initial song duration must equal the total concert duration.\n\n    Test case with all concerts having the same duration:\n    Input: 3\n           3 3 3\n    Expected output: NO\n    Explanation: It's impossible for all concerts to have the same total duration due to the increasing pattern.\n\n    Test case with maximum possible values:\n    Input: 2\n           1000000000 1000000000\n    Expected output: YES\n                     500000000 500000000\n    Explanation: Each singer can have an initial duration of half the total, satisfying the pattern.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where n = 1 or when all concerts have the same total duration.\n    \n```python\ndef solve_concert_durations(t, test_cases):\n    results = []\n    for n, b in test_cases:\n        if n == 1:\n            results.append(\"YES\")\n            results.append(f\"{b[0]}\")\n            continue\n        \n        # Check if all b values are the same\n        if all(x == b[0] for x in b):\n            results.append(\"NO\")\n            continue\n        \n        # Attempt to reconstruct sequence a\n        a = [0] * n\n        possible = True\n        \n        # Calculate initial song durations using modular arithmetic\n        for i in range(n):\n            a[i] = (b[i] - b[i-1]) // n\n            if a[i] <= 0 or a[i] > 10**9:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Example usage:\nt = 4\ntest_cases = [\n    (3, [12, 16, 14]),\n    (1, [1]),\n    (3, [1, 2, 3]),\n    (6, [81, 75, 75, 93, 93, 87])\n]\n\noutput = solve_concert_durations(t, test_cases)\nfor line in output:\n    print(line)\n```\n\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The main challenge is to ensure that the sequence satisfies the conditions for all towns and singers. Edge cases such as n=1 or uniform concert durations need special attention. The solution must be efficient due to the large possible input size.\nrequirement pool:\n- Develop an algorithm to reconstruct the sequence of integers a.\n- Ensure the solution handles edge cases like n=1 or uniform durations.\n- Optimize the solution for large input sizes.\n- Provide clear and concise output for each test case.\n- Allow flexibility in the solution to accommodate multiple valid outputs.\nWe will use a mathematical approach to reconstruct the sequence of integers a from the given sequence b. The key observation is that the sum of the sequence a multiplied by a constant factor should match the sequence b. We will iterate over the sequence b and attempt to derive a possible sequence a by checking if the sum of the sequence a multiplied by the respective factors matches the sequence b. If no valid sequence can be derived, we will output 'NO'. Otherwise, we will output 'YES' followed by any valid sequence a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circle sequentially'\n    Explanation: The towns are arranged in a circular manner, meaning after the last town, the sequence wraps back to the first town.\n\n    'concert duration'\n    Explanation: The duration of concerts increases in a pattern based on the singer's initial song duration and the town they are visiting.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration in the next town is twice the initial duration.\n    'k + 2 \u22c5 a_i': means the concert duration increases by a factor of (k + 2) times the initial duration as the singer moves to subsequent towns.\n    'n \u22c5 a_i': means the concert duration in the last town is n times the initial duration.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - For each test case, read the number of towns `n` and the list `b` representing total concert durations.\n    - Initialize an empty list `a` to store the initial song durations.\n    - For each town, calculate possible initial song durations `a_i` such that the sum of concerts matches `b_i`.\n    - Use modular arithmetic to handle circular arrangement of towns.\n    - If a valid sequence `a` is found for all towns, print 'YES' followed by the sequence. Otherwise, print 'NO'.\n\n# [edge case]\n    Input: 1\n           1\n           1\n    Output: YES\n            1\n    Explanation: With only one town, the initial song duration must match the total concert duration.\n\n    Input: 2\n           2\n           2 4\n    Output: NO\n    Explanation: It's impossible to find a sequence where concerts match these durations with only two towns.\n\n    Input: 3\n           3\n           6 6 6\n    Output: YES\n            2 2 2\n    Explanation: Each singer can have an initial duration of 2 minutes, resulting in equal concert durations across all towns.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where n equals 1 or when all concerts in a town last the same duration.\n        if n == 1:\n            print(\"YES\")\n            print(b[0])\n        elif all(x == b[0] for x in b):\n            print(\"YES\")\n            print(b[0] // n) * n\n        else:\n            # Original logic to find sequence a\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The main challenge is to ensure the solution is efficient for large inputs and correctly identifies when a solution is not possible. Edge cases such as n equals 1 or uniform concert durations need special attention.\nrequirement pool:\n- Develop an efficient algorithm to handle large input sizes.\n- Ensure the solution correctly identifies impossible cases.\n- Optimize the solution for edge cases like n equals 1.\n- Provide clear and concise output formatting.\n- Implement additional test cases for robustness.\nWe will use a mathematical approach to reconstruct the sequence of integers based on the given constraints. The key is to understand the pattern of concert durations and reverse-engineer the sequence. We will iterate over each test case, calculate possible values for the sequence, and check if they satisfy the conditions. If a valid sequence is found, we output it; otherwise, we output 'NO'. The solution will be optimized to handle large inputs efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'concert duration pattern'\n    Explanation: Each singer's concert duration in towns follows a specific pattern based on their initial song duration.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': The concert duration in the next town is twice the initial duration.\n    'k + 2 \u22c5 a_i': The concert duration increases by a factor of (k + 2) times the initial duration as the singer moves to subsequent towns.\n    'n \u22c5 a_i': The maximum multiplier for the concert duration in the last town before returning to the starting town.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list of total concert durations `b`.\n2. Initialize an empty list `a` to store the initial song durations for each singer.\n3. For each town, calculate the possible initial song duration `a_i` using the formula derived from the total concert durations.\n4. Check if the calculated sequence satisfies all conditions for each town.\n5. If a valid sequence is found, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1: \n    Input: 1\n           1\n    Output: YES\n            1\n    Explanation: With only one town, the initial song duration must equal the total concert duration.\n\n    Test case with all b_i equal:\n    Input: 3\n           3 3 3\n    Output: NO\n    Explanation: If all total durations are equal, it may not be possible to find distinct initial durations that satisfy the pattern.\n\n    Test case with maximum b_i:\n    Input: 2\n           1000000000 1000000000\n    Output: NO\n    Explanation: Large values may not allow for a valid sequence due to integer overflow or pattern constraints.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where n = 1 or all b_i are equal.\n    \n```python\ndef solve():\n    import sys\n    input = sys.stdin.readline\n    \n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        \n        if n == 1:\n            print(\"YES\")\n            print(b[0])\n            continue\n        \n        # Check if all b_i are equal\n        if all(x == b[0] for x in b):\n            print(\"NO\")\n            continue\n        \n        # Attempt to reconstruct sequence a\n        a = [0] * n\n        possible = True\n        \n        # Calculate a_i based on b_i and check validity\n        for i in range(n):\n            # Calculate a_i using derived formula\n            # This is a placeholder logic, actual logic needs to be implemented based on pattern analysis\n            a[i] = b[i] // n  # Simplified assumption\n            \n            # Validate if this a_i can form valid sequence\n            if a[i] <= 0 or a[i] * n != b[i]:\n                possible = False\n                break\n        \n        if possible:\n            print(\"YES\")\n            print(\" \".join(map(str, a)))\n        else:\n            print(\"NO\")\n```\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The main challenge is to ensure that the sequence satisfies the conditions for all towns and singers. Edge cases such as a single town or uniform concert durations need special attention.\nrequirement pool:\n- Implement the main algorithm to reconstruct the sequence.\n- Handle edge cases such as n equals 1 or uniform concert durations.\n- Optimize the solution for large inputs to ensure efficiency.\n- Ensure the solution is robust and handles all possible inputs.\n- Provide detailed comments and documentation for the code.\nWe will use a mathematical approach to reconstruct the sequence of integers. The key observation is that the sum of the durations in each town should be divisible by the number of towns, n. This allows us to calculate the initial duration of each singer's repertoire by dividing the total duration by n. We will iterate over each test case, check the divisibility condition, and construct the sequence if possible.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire growth'\n    Explanation: Each singer's repertoire grows as they visit each town, adding a new song of their initial repertoire length.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that in the second town, the concert duration is twice the initial repertoire.\n    'k + 2 \u22c5 a_i': This shows that in the k-th town, the concert duration is (k + 2) times the initial repertoire.\n    'n \u22c5 a_i': In the last town, the concert duration is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list of total concert durations `b`.\n2. Check if the sum of `b` is divisible by `n`. If not, print \"NO\" and continue to the next test case.\n3. If divisible, calculate the initial repertoire for each singer by dividing each total duration by `n`.\n4. Verify if this calculated sequence can reconstruct the given total durations `b` by simulating the concert durations.\n5. If a valid sequence is found, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1:\n    Input: 1\n           1\n    Output: YES\n            1\n    Explanation: With only one town, the total duration must equal the initial repertoire.\n\n    Test case with all b_i equal:\n    Input: 3\n           3 3 3\n    Output: NO\n    Explanation: If all b_i are equal and n > 1, it's impossible to have a valid sequence since each singer's repertoire must grow.\n\n    Test case with maximum b_i:\n    Input: 2\n           1000000000 1000000000\n    Output: NO\n    Explanation: The sum of b_i is not divisible by n, making it impossible to find a valid sequence.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the sum of b is not divisible by n.\n    \n```python\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_sum = sum(b)\n        \n        if total_sum % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        a_sum = total_sum // n\n        a = [b[i] // n for i in range(n)]\n        \n        # Verify if this sequence can reconstruct b\n        valid = True\n        for i in range(n):\n            if sum((j + 1) * a[(i + j) % n] for j in range(n)) != b[i]:\n                valid = False\n                break\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n```\n"], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": false, "pass": false, "pass_num": 0, "round": 294, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "mutate_method": "add_1_sentence_at_end", "parent_index": 210}
