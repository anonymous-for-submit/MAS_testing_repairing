{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 733, "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "code": "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "test_imports": [], "test_list": ["assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2", "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4", "assert find_first_occurrence([4, 3, 2, 7, 8, 3, 13, 4, 11, 9], 4) == -1", "assert find_first_occurrence([4, 6, 1, 6, 7, 10, 9, 5, 12, 10], 4) == 0", "assert find_first_occurrence([5, 1, 8, 10, 7, 11, 6, 12, 6, 13], 3) == -1", "assert find_first_occurrence([2, 8, 9, 3, 4, 9, 13, 5, 7, 12], 8) == -1", "assert find_first_occurrence([3, 9, 6, 3, 7, 2, 11, 5, 13, 6], 3) == 0", "assert find_first_occurrence([1, 4, 8, 4, 7, 10, 12, 10, 14, 13], 5) == -1", "assert find_first_occurrence([4, 10, 9, 8, 2, 10, 4, 13, 14, 12], 1) == -1", "assert find_first_occurrence([2, 8, 3, 7, 3, 2, 7, 8, 7, 13], 4) == -1", "assert find_first_occurrence([4, 10, 9, 8, 1, 4, 13, 10, 4, 9], 6) == -1", "assert find_first_occurrence([7, 5, 2, 5, 3, 5, 13, 12, 4, 6], 10) == -1", "assert find_first_occurrence([7, 5, 3, 3, 10, 9, 10, 9, 4, 13], 9) == -1", "assert find_first_occurrence([3, 5, 1, 5, 9, 6, 6, 13, 12, 10], 4) == -1", "assert find_first_occurrence([5, 10, 3, 4, 6, 8, 3, 9, 10, 14], 4) == -1", "assert find_first_occurrence([5, 1, 7, 9, 9, 5, 12, 7, 11, 10], 8) == -1", "assert find_first_occurrence([1, 5, 5, 10, 5, 9, 11, 4, 5, 7], 10) == -1", "assert find_first_occurrence([6, 7, 2, 5, 11, 2, 9, 13, 11, 9], 3) == -1", "assert find_first_occurrence([1, 7, 1, 5, 1, 5, 6, 7, 6, 12], 7) == 7", "assert find_first_occurrence([2, 8, 9, 6, 10, 7, 10, 6, 5, 5], 10) == 4", "assert find_first_occurrence([2, 5, 3, 10, 8, 7, 12, 10, 11, 12], 2) == 0", "assert find_first_occurrence([4, 7, 3, 3, 7, 7, 5, 7, 13, 6], 5) == -1", "assert find_first_occurrence([3, 7, 4, 1, 4, 9, 6, 14, 13, 8], 4) == 4", "assert find_first_occurrence([5, 5, 1, 6, 10, 4, 11, 5, 10, 12], 5) == 0", "assert find_first_occurrence([1, 2, 7, 7, 1, 7, 9, 13, 9, 14], 7) == 5", "assert find_first_occurrence([5, 8, 1, 2, 3, 5, 7, 10, 4, 10], 6) == -1", "assert find_first_occurrence([4, 2, 9, 9, 11, 9, 3, 13, 7, 9], 7) == -1", "assert find_first_occurrence([7, 9, 6, 5, 9, 5, 3, 12, 6, 12], 10) == -1", "assert find_first_occurrence([1, 4, 5, 6, 11, 8, 11, 10, 14, 10], 9) == -1", "assert find_first_occurrence([1, 5, 9, 8, 4, 11, 10, 13, 11, 5], 4) == 4", "assert find_first_occurrence([6, 1, 3, 8, 3, 7, 6, 11, 4, 10], 3) == 2", "assert find_first_occurrence([4, 1, 8, 3, 10, 6, 5, 10, 11, 9], 10) == 4", "assert find_first_occurrence([6, 9, 4, 1, 2, 1, 11, 10, 13, 6], 3) == -1", "assert find_first_occurrence([2, 5, 8, 1, 10, 9, 13, 6, 7, 7], 1) == -1", "assert find_first_occurrence([2, 5, 1, 5, 10, 5, 10, 6, 11, 12], 4) == -1", "assert find_first_occurrence([3, 7, 7, 5, 6, 1, 6, 6, 14, 12], 2) == -1", "assert find_first_occurrence([5, 5, 10, 2, 2, 3, 7, 8, 12, 5], 10) == -1", "assert find_first_occurrence([6, 1, 5, 8, 3, 1, 12, 8, 5, 5], 8) == 7", "assert find_first_occurrence([1, 7, 5, 2, 1, 3, 11, 7, 6, 12], 7) == 7", "assert find_first_occurrence([6, 6, 8, 3, 4, 1, 6, 11, 4, 10], 1) == -1", "assert find_first_occurrence([4, 5, 10, 8, 1, 9, 13, 8, 14, 10], 8) == 7", "assert find_first_occurrence([1, 8, 7, 2, 11, 5, 7, 9, 9, 9], 7) == -1", "assert find_first_occurrence([5, 5, 9, 4, 3, 10, 4, 4, 7, 9], 8) == -1", "assert find_first_occurrence([6, 4, 3, 9, 10, 9, 11, 14, 14, 9], 6) == -1", "assert find_first_occurrence([2, 1, 4, 3, 7, 4, 6, 10, 4, 10], 1) == 1", "assert find_first_occurrence([6, 5, 6, 5, 8, 3, 9, 14, 14, 11], 1) == -1", "assert find_first_occurrence([7, 1, 1, 9, 9, 10, 13, 10, 11, 5], 5) == -1", "assert find_first_occurrence([5, 5, 1, 2, 3, 4, 5, 8, 12, 11], 10) == -1", "assert find_first_occurrence([5, 2, 1, 9, 8, 11, 3, 6, 8, 4], 7) == -1", "assert find_first_occurrence([3, 8, 8, 7, 8, 3, 5, 11, 14, 12], 8) == 1", "assert find_first_occurrence([2, 3, 3, 10, 1, 3, 10, 14, 13, 8], 4) == -1", "assert find_first_occurrence([2, 4, 1, 10, 11, 5, 7, 13, 4, 8], 6) == -1", "assert find_first_occurrence([6, 4, 9, 8, 2, 10, 10, 11, 8, 5], 10) == 5", "assert find_first_occurrence([1, 7, 10, 5, 8, 11, 11, 13, 12, 6], 3) == -1", "assert find_first_occurrence([7, 7, 7, 6, 8, 4, 5, 4, 4, 7], 8) == 4", "assert find_first_occurrence([5, 2, 4, 10, 11, 8, 3, 6, 10, 12], 2) == 1", "assert find_first_occurrence([3, 6, 7, 2, 10, 1, 7, 12, 14, 7], 8) == -1", "assert find_first_occurrence([5, 1, 4, 2, 3, 8, 8, 12, 12, 4], 1) == 1", "assert find_first_occurrence([7, 1, 10, 9, 3, 11, 7, 8, 11, 5], 3) == 4", "assert find_first_occurrence([7, 2, 9, 1, 7, 3, 3, 4, 5, 5], 8) == -1", "assert find_first_occurrence([3, 3, 9, 1, 11, 7, 11, 11, 6, 13], 8) == -1", "assert find_first_occurrence([5, 7, 5, 1, 2, 1, 11, 5, 11, 11], 9) == -1", "assert find_first_occurrence([4, 5, 9, 6, 11, 1, 6, 5, 12, 12], 3) == -1", "assert find_first_occurrence([7, 5, 4, 9, 2, 8, 9, 11, 11, 13], 4) == -1", "assert find_first_occurrence([7, 5, 9, 9, 6, 11, 3, 9, 8, 5], 7) == -1", "assert find_first_occurrence([7, 1, 6, 8, 4, 8, 10, 10, 10, 10], 5) == -1", "assert find_first_occurrence([4, 5, 8, 4, 6, 9, 11, 10, 8, 14], 9) == 5", "assert find_first_occurrence([2, 2, 1, 5, 4, 3, 9, 4, 12, 11], 4) == 4", "assert find_first_occurrence([1, 1, 5, 2, 1, 6, 3, 13, 9, 9], 4) == -1", "assert find_first_occurrence([6, 5, 1, 4, 10, 2, 5, 11, 11, 5], 7) == -1", "assert find_first_occurrence([6, 5, 3, 8, 1, 5, 11, 9, 8, 4], 3) == -1", "assert find_first_occurrence([3, 6, 6, 2, 3, 1, 10, 14, 4, 11], 11) == -1", "assert find_first_occurrence([3, 8, 3, 2, 8, 1, 6, 10, 9, 4], 10) == 7", "assert find_first_occurrence([2, 8, 1, 4, 3, 3, 4, 14, 7, 13], 8) == -1", "assert find_first_occurrence([2, 5, 5, 3, 8, 8, 10, 8, 11, 13], 5) == 1", "assert find_first_occurrence([4, 7, 4, 2, 8, 10, 5, 8, 4, 9], 4) == 0", "assert find_first_occurrence([3, 9, 2, 5, 10, 1, 3, 5, 13, 6], 8) == -1", "assert find_first_occurrence([2, 3, 4, 9, 3, 10, 13, 6, 14, 5], 11) == -1", "assert find_first_occurrence([5, 4, 5, 9, 11, 4, 6, 8, 12, 4], 4) == 1", "assert find_first_occurrence([1, 3, 2, 1, 7, 8, 12, 10, 9, 5], 8) == 5", "assert find_first_occurrence([5, 8, 5, 3, 6, 8, 5, 10, 13, 10], 11) == -1", "assert find_first_occurrence([2, 9, 3, 7, 4, 11, 9, 11, 7, 6], 2) == 0", "assert find_first_occurrence([7, 3, 5, 4, 7, 10, 5, 5, 14, 13], 2) == -1", "assert find_first_occurrence([7, 7, 6, 3, 8, 6, 9, 9, 7, 5], 10) == -1", "assert find_first_occurrence([4, 1, 1, 10, 8, 10, 4, 9, 7, 10], 8) == 4", "assert find_first_occurrence([6, 1, 4, 4, 3, 10, 9, 9, 11, 13], 6) == -1", "assert find_first_occurrence([2, 4, 5, 5, 10, 5, 9, 8, 6, 8], 6) == -1", "assert find_first_occurrence([1, 1, 4, 7, 5, 4, 11, 10, 4, 10], 1) == 0", "assert find_first_occurrence([7, 2, 4, 2, 11, 4, 11, 12, 7, 10], 7) == -1", "assert find_first_occurrence([2, 8, 2, 4, 8, 4, 13, 4, 4, 14], 9) == -1", "assert find_first_occurrence([2, 7, 4, 8, 5, 1, 9, 5, 4, 10], 6) == -1", "assert find_first_occurrence([7, 7, 4, 3, 8, 8, 7, 13, 11, 14], 3) == -1", "assert find_first_occurrence([2, 8, 2, 4, 5, 11, 12, 13, 4, 4], 6) == -1", "assert find_first_occurrence([6, 9, 5, 8, 7, 9, 8, 11, 9, 9], 4) == -1", "assert find_first_occurrence([5, 8, 4, 1, 3, 8, 10, 14, 7, 13], 2) == -1", "assert find_first_occurrence([7, 7, 3, 2, 5, 5, 6, 13, 7, 7], 7) == -1", "assert find_first_occurrence([2, 5, 3, 5, 11, 4, 4, 13, 13, 7], 2) == 0", "assert find_first_occurrence([7, 3, 5, 8, 11, 7, 7, 4, 7, 5], 3) == 1", "assert find_first_occurrence([1, 6, 3, 10, 9, 6, 10, 9, 5, 4], 1) == 0", "assert find_first_occurrence([4, 2, 4, 1, 9, 3, 12, 13, 5, 7], 8) == -1", "assert find_first_occurrence([7, 6, 1, 5, 9, 5, 9, 12, 13, 11], 5) == -1"], "entry_point": "find_first_occurrence", "repair_prompt": ["Write a function find_first_occurrence to find the index of the first occurrence of a given number in a sorted array.\nfind_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n", "Write a function find_first_occurrence to find the index of the first occurrence of a given number in a sorted array, ensuring that the array is in ascending order for accurate results.\nfind_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n", "Write a function find_first_occurrence to find the index of the first occurrence of a given number in a sorted array.\nfind_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the first occurrence of a number in a sorted array using binary search algorithm.\n\n    Args:\n        arr (List[int]): A sorted array of integers.\n        target (int): The number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of the target in the array, or -1 if not found.\n    \"\"\"\n    \n    def binary_search(arr, target):\n        left, right = 0, len(arr) - 1\n        result = -1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            if arr[mid] == target:\n                result = mid\n                right = mid - 1\n            elif arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return result\n    \n    if not arr:\n        return -1\n    \n    return binary_search(arr, target)\n", "from typing import List\n## main.py\n\nimport bisect\n\ndef find_first_occurrence(arr, target) -> int:\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n    arr (List[int]): A sorted array of integers.\n    target (int): The number to find the first occurrence of.\n\n    Returns:\n    int: The index of the first occurrence of the target number in the array, or -1 if the number is not found.\n    \"\"\"\n    index = bisect.bisect_left(arr, target)\n    if index < len(arr) and arr[index] == target:\n        return index\n    return -1\n\n# Test the function\nprint(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output should be 1\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport bisect\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of the target number in a sorted array.\n\n    Args:\n        arr (List[int]): A sorted array of integers.\n        target (int): The target number to find.\n\n    Returns:\n        int: The index of the first occurrence of the target number. Returns -1 if the target number is not found.\n    \"\"\"\n    index = bisect.bisect_left(arr, target)\n    \n    if index < len(arr) and arr[index] == target:\n        return index\n    else:\n        return -1\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the first occurrence of a number in a sorted array using binary search algorithm.\n\n    Args:\n        arr (List[int]): A sorted array of integers.\n        target (int): The number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of the target number in the array, or -1 if not found.\n    \"\"\"\n    \n    low = 0\n    high = len(arr) - 1\n    \n    while low < high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == target:\n            high = mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    \n    if arr[low] == target:\n        return low\n    else:\n        return -1\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of the target number in a sorted array using binary search.\n    \n    Args:\n        arr (List[int]): A sorted list of integers.\n        target (int): The number to find the first occurrence of.\n        \n    Returns:\n        int: The index of the first occurrence of the target number. Returns -1 if the target is not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    if not arr:\n        return -1\n    \n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the first occurrence of a number in a sorted array using binary search.\n\n    Args:\n        arr (List[int]): A sorted array of integers.\n        target (int): The number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of the target number in the array. Returns -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n"], "plans": ["requirement analysis:\nThe function should efficiently locate the first occurrence of a number in a sorted array by employing a binary search approach. It must handle cases where the number may not exist in the array.\nrequirement pool:\n- Implement binary search algorithm to find the first occurrence\n- Handle edge case where the number is not present in the array\n- Optimize the function for large arrays to ensure quick retrieval\nWe will implement the find_first_occurrence function using a binary search algorithm to efficiently locate the first occurrence of a number in a sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array'\n    Explanation: The input array is sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using a binary search algorithm, the detailed logic for implementing the code will involve:\n    - Setting up the binary search algorithm to find the first occurrence of the given number in the sorted array.\n    - Handling the case where the number is not found in the array.\n\n# [edge case] \n    find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    Explanation: In the sorted array, the first occurrence of the number 5 is at index 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The binary search algorithm will efficiently find the first occurrence of the given number in the sorted array.\n", "requirement analysis:\nThe function should iterate through the sorted array and return the index of the first occurrence of the given number. It should handle cases where the number is not present in the array.\nrequirement pool:\n- Implement the find_first_occurrence function\n- Ensure the function works correctly for duplicate numbers\n- Optimize the function for large arrays\nWe will use a simple binary search algorithm to efficiently find the first occurrence of a number in a sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array'\n    Explanation: The input array is sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using a binary search algorithm, the detailed logic for implementing the code would involve:\n    - Setting up the binary search algorithm to find the first occurrence of the given number in the sorted array.\n    - Handling the case where the number is not found in the array.\n\n# [edge case] \n    find_first_occurrence([1, 2, 3, 4, 5], 5) = 4\n    Explanation: The number 5 is at index 4 in the sorted array.\n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    Explanation: The number 6 is not present in the sorted array, so the function returns -1.\n    find_first_occurrence([], 5) = -1\n    Explanation: The array is empty, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search algorithm will efficiently handle these cases.\n", "requirement analysis:\nThe function should efficiently search for the first occurrence of a number in a sorted array. It must return the index of the first occurrence or -1 if the number is not found. The function should handle duplicate numbers appropriately.\nrequirement pool:\n- Implement the find_first_occurrence function\n- Perform thorough testing to ensure accuracy and efficiency\n- Optimize the function for large arrays\nWe will use the bisect module in Python to efficiently find the first occurrence of a number in a sorted array.\nPlease read and understand the following inteperation before coding\n## Prompt 3:\n\n[requirement]\nWrite a function find_first_occurrence to find the index of the first occurrence of a given number in a sorted array.\nfind_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\n[plan]\nWe will use the bisect module in Python to efficiently find the first occurrence of a number in a sorted array.\n\n## Answer 3:\n\n# [core concept]\n    'sorted array'\n    Explanation: The input array is sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already suggests using the bisect module, we can directly implement the code using this module.\n\n```python\nimport bisect\n\ndef find_first_occurrence(arr, target):\n    index = bisect.bisect_left(arr, target)\n    if index < len(arr) and arr[index] == target:\n        return index\n    return -1\n\n# Test the function\nprint(find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))  # Output should be 1\n```\n\n# [edge case] \n    find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 7) = -1\n    Explanation: The number 7 is not present in the array, so the function should return -1.\n\n    find_first_occurrence([2, 2, 2, 2], 2) = 0\n    Explanation: All elements in the array are equal to the target number, and the function should return the index of the first occurrence which is 0.\n\n    find_first_occurrence([], 5) = -1\n    Explanation: The array is empty, so the function should return -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The bisect module efficiently handles finding the first occurrence in a sorted array.\n", "requirement analysis:\nThe function should efficiently find the index of the first occurrence of a given number in a sorted array. It must handle duplicate values correctly and ensure the array is in ascending order for accurate results.\nrequirement pool:\n- Implement the find_first_occurrence function with efficient search algorithm\n- Handle duplicate values in the array to return the correct index\n- Optimize the function for performance on large datasets\nWe will use the bisect module in Python to efficiently find the first occurrence of a number in a sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array': The array is arranged in ascending order to ensure accurate results.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the bisect module in Python, the logic would involve utilizing the bisect_left function to find the index of the first occurrence of the given number in the sorted array.\n\n# [edge case] \n    find_first_occurrence([1, 2, 3, 4, 5], 5) = 4\n    Explanation: The given number 5 is at the last index of the sorted array.\n    find_first_occurrence([1, 1, 1, 1, 1], 1) = 0\n    Explanation: All elements in the array are the same, and the first occurrence of 1 is at index 0.\n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    Explanation: The number 6 is not present in the array, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the bisect_left function efficiently handles finding the first occurrence in a sorted array.\n", "requirement analysis:\nThe function should efficiently find the index of the first occurrence of a given number in a sorted array. It must handle ascending order arrays and return the correct index. Performance optimization is crucial for large datasets.\nrequirement pool:\n- Implement find_first_occurrence function to accurately locate the first occurrence\n- Ensure the function handles edge cases and boundary scenarios\n- Optimize the function's performance for scalability and large datasets\nWe will use the binary search algorithm to efficiently find the first occurrence of a number in a sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array': The array is arranged in ascending order to ensure accurate results.\n    'first occurrence': Refers to the index of the first appearance of the given number in the sorted array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using binary search algorithm, the detailed logic to implement the code would involve:\n    - Set low to 0 and high to the length of the array minus 1\n    - While low is less than high, calculate mid as (low + high) // 2\n    - If the element at mid is equal to the target number, update high to mid\n    - If the element at mid is greater than the target number, update high to mid - 1\n    - If the element at mid is less than the target number, update low to mid + 1\n    - Return low if the target number is found, else return -1\n\n# [edge case] \n    find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    Explanation: In the sorted array [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], the first occurrence of number 5 is at index 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The binary search algorithm efficiently handles finding the first occurrence in a sorted array.\n", "requirement analysis:\nThe function should efficiently locate the first occurrence of a given number in a sorted array by utilizing appropriate search algorithms and handling edge cases effectively.\nrequirement pool:\n- Implement find_first_occurrence function with time complexity O(log n)\n- Ensure the function works correctly for arrays with duplicate elements\n- Include unit tests to validate the function's accuracy\nWe will implement the find_first_occurrence function using the binary search algorithm to achieve O(log n) time complexity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array'\n    Explanation: The array is arranged in ascending order to ensure accurate results when searching for the first occurrence of a given number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will implement the find_first_occurrence function using the binary search algorithm to achieve O(log n) time complexity.\n\n# [edge case] \n    find_first_occurrence([1, 1, 1, 1, 1], 1) = 0\n    Explanation: In this case, all elements in the array are the same, and the given number is also the same. The expected output is 0 as the first occurrence index.\n    find_first_occurrence([2, 2, 2, 2, 2], 3) = -1\n    Explanation: The given number does not exist in the array, so the function should return -1.\n    find_first_occurrence([], 5) = -1\n    Explanation: The array is empty, so the function should return -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search algorithm covers scenarios where the array is empty or all elements are the same.\n", "requirement analysis:\nThe function should efficiently search for the first occurrence of a number in a sorted array. It must return the index of the first occurrence or -1 if the number is not found.\nrequirement pool:\n- Implement a binary search algorithm to find the first occurrence efficiently\n- Handle cases where the target number is not present in the array\n- Optimize the function for large arrays to ensure performance\nWe will implement the find_first_occurrence function using a binary search algorithm to efficiently locate the first occurrence of a number in a sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array'\n    Explanation: The input array is sorted in ascending order.\n\n    'first occurrence'\n    Explanation: We need to find the index of the first occurrence of the given number in the sorted array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using a binary search algorithm, we can follow the steps outlined in the plan to implement the function efficiently.\n\n# [edge case] \n    find_first_occurrence([1, 1, 1, 1, 1], 1) = 0\n    Explanation: All elements in the array are the same, and the given number is present at index 0.\n\n    find_first_occurrence([2, 2, 2, 2, 2], 3) = -1\n    Explanation: The given number is not present in the array, so the function returns -1.\n\n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    Explanation: The given number is greater than all elements in the array, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search algorithm will efficiently handle these scenarios.\n", "requirement pool:\n- Implement find_first_occurrence function to handle sorted arrays\n- Ensure the function returns -1 for numbers not found in the array\n- Optimize the function for large datasets to maintain efficiency\nWe will use a simple binary search algorithm to efficiently find the first occurrence of a number in a sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array'\n    Explanation: The input array is sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using a binary search algorithm, the detailed logic for implementing the code would involve:\n    - Setting up the binary search algorithm to find the first occurrence of the given number in the sorted array.\n    - Handling the case where the number is not found in the array.\n\n# [edge case] \n    find_first_occurrence([1, 2, 3, 4, 5], 5) = 4\n    Explanation: The number 5 is at index 4 in the sorted array.\n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    Explanation: The number 6 is not present in the sorted array, so the function returns -1.\n    find_first_occurrence([], 5) = -1\n    Explanation: The array is empty, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search algorithm will efficiently handle these cases.\n", "requirement pool:\n- Implement find_first_occurrence function to accurately locate the first occurrence\n- Ensure the function handles edge cases like empty arrays or non-existent numbers\n- Optimize the search algorithm for efficiency\nWe will design a simple static Python function using appropriate open-source libraries to efficiently find the first occurrence of a number in a sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array'\n    Explanation: The input array is sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the array is sorted, we can utilize binary search to efficiently find the first occurrence of the given number in the sorted array. Here is the detailed logic:\n    1. Initialize variables for start index and end index of the array.\n    2. Perform binary search by comparing the middle element with the target number.\n    3. If the middle element is equal to the target number, update the end index to mid-1 to search for the first occurrence.\n    4. If the middle element is greater than the target number, update the end index to mid-1.\n    5. If the middle element is less than the target number, update the start index to mid+1.\n    6. Repeat the process until start index is less than or equal to end index.\n    7. Return the start index as the first occurrence index.\n\n# [edge case] \n    find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) = 1\n    Explanation: In the sorted array [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], the first occurrence of number 5 is at index 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The binary search logic covers all scenarios for finding the first occurrence efficiently.\n", "requirement analysis:\nThe function should efficiently locate the first occurrence of a number in a sorted array by utilizing binary search or similar optimized algorithms. It must handle duplicate numbers appropriately and return the correct index. Edge cases like empty arrays or non-existent numbers should be considered.\nrequirement pool:\n- Implement binary search algorithm for efficient search\n- Handle edge case of empty input array\n- Ensure correct index retrieval for duplicate numbers\n- Optimize for large input arrays\n- Provide clear documentation and examples\nWe will design a simple static Python function using binary search to efficiently find the first occurrence of a number in a sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array'\n    Explanation: The input array is sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using binary search to find the first occurrence of a number in a sorted array, the detailed logic would involve implementing binary search to efficiently locate the first occurrence index.\n\n# [edge case] \n    find_first_occurrence([1, 1, 1, 1, 1], 1) = 0\n    Explanation: In this case, all elements in the array are the same, and the function should return the index of the first occurrence of the given number.\n    find_first_occurrence([2, 2, 2, 2, 2], 3) = -1\n    Explanation: The given number does not exist in the array, so the function should return -1.\n    find_first_occurrence([], 5) = -1\n    Explanation: The array is empty, so the function should return -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search logic should cover all scenarios effectively.\n"], "test": ["def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 3, 2, 7, 8, 3, 13, 4, 11, 9], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 6, 1, 6, 7, 10, 9, 5, 12, 10], 4) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 1, 8, 10, 7, 11, 6, 12, 6, 13], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 9, 3, 4, 9, 13, 5, 7, 12], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 9, 6, 3, 7, 2, 11, 5, 13, 6], 3) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 4, 8, 4, 7, 10, 12, 10, 14, 13], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 10, 9, 8, 2, 10, 4, 13, 14, 12], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 3, 7, 3, 2, 7, 8, 7, 13], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 10, 9, 8, 1, 4, 13, 10, 4, 9], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 2, 5, 3, 5, 13, 12, 4, 6], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 3, 3, 10, 9, 10, 9, 4, 13], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 5, 1, 5, 9, 6, 6, 13, 12, 10], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 10, 3, 4, 6, 8, 3, 9, 10, 14], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 1, 7, 9, 9, 5, 12, 7, 11, 10], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 5, 5, 10, 5, 9, 11, 4, 5, 7], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 7, 2, 5, 11, 2, 9, 13, 11, 9], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 7, 1, 5, 1, 5, 6, 7, 6, 12], 7) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 9, 6, 10, 7, 10, 6, 5, 5], 10) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 3, 10, 8, 7, 12, 10, 11, 12], 2) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 7, 3, 3, 7, 7, 5, 7, 13, 6], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 7, 4, 1, 4, 9, 6, 14, 13, 8], 4) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 1, 6, 10, 4, 11, 5, 10, 12], 5) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 2, 7, 7, 1, 7, 9, 13, 9, 14], 7) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 8, 1, 2, 3, 5, 7, 10, 4, 10], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 2, 9, 9, 11, 9, 3, 13, 7, 9], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 9, 6, 5, 9, 5, 3, 12, 6, 12], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 4, 5, 6, 11, 8, 11, 10, 14, 10], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 5, 9, 8, 4, 11, 10, 13, 11, 5], 4) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 1, 3, 8, 3, 7, 6, 11, 4, 10], 3) == 2", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 1, 8, 3, 10, 6, 5, 10, 11, 9], 10) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 9, 4, 1, 2, 1, 11, 10, 13, 6], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 8, 1, 10, 9, 13, 6, 7, 7], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 1, 5, 10, 5, 10, 6, 11, 12], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 7, 7, 5, 6, 1, 6, 6, 14, 12], 2) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 10, 2, 2, 3, 7, 8, 12, 5], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 1, 5, 8, 3, 1, 12, 8, 5, 5], 8) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 7, 5, 2, 1, 3, 11, 7, 6, 12], 7) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 6, 8, 3, 4, 1, 6, 11, 4, 10], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 5, 10, 8, 1, 9, 13, 8, 14, 10], 8) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 8, 7, 2, 11, 5, 7, 9, 9, 9], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 9, 4, 3, 10, 4, 4, 7, 9], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 4, 3, 9, 10, 9, 11, 14, 14, 9], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 1, 4, 3, 7, 4, 6, 10, 4, 10], 1) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 5, 6, 5, 8, 3, 9, 14, 14, 11], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 1, 1, 9, 9, 10, 13, 10, 11, 5], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 1, 2, 3, 4, 5, 8, 12, 11], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 2, 1, 9, 8, 11, 3, 6, 8, 4], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 8, 8, 7, 8, 3, 5, 11, 14, 12], 8) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 3, 3, 10, 1, 3, 10, 14, 13, 8], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 4, 1, 10, 11, 5, 7, 13, 4, 8], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 4, 9, 8, 2, 10, 10, 11, 8, 5], 10) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 7, 10, 5, 8, 11, 11, 13, 12, 6], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 7, 6, 8, 4, 5, 4, 4, 7], 8) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 2, 4, 10, 11, 8, 3, 6, 10, 12], 2) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 6, 7, 2, 10, 1, 7, 12, 14, 7], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 1, 4, 2, 3, 8, 8, 12, 12, 4], 1) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 1, 10, 9, 3, 11, 7, 8, 11, 5], 3) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 2, 9, 1, 7, 3, 3, 4, 5, 5], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 3, 9, 1, 11, 7, 11, 11, 6, 13], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 7, 5, 1, 2, 1, 11, 5, 11, 11], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 5, 9, 6, 11, 1, 6, 5, 12, 12], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 4, 9, 2, 8, 9, 11, 11, 13], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 9, 9, 6, 11, 3, 9, 8, 5], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 1, 6, 8, 4, 8, 10, 10, 10, 10], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 5, 8, 4, 6, 9, 11, 10, 8, 14], 9) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 2, 1, 5, 4, 3, 9, 4, 12, 11], 4) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 1, 5, 2, 1, 6, 3, 13, 9, 9], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 5, 1, 4, 10, 2, 5, 11, 11, 5], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 5, 3, 8, 1, 5, 11, 9, 8, 4], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 6, 6, 2, 3, 1, 10, 14, 4, 11], 11) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 8, 3, 2, 8, 1, 6, 10, 9, 4], 10) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 1, 4, 3, 3, 4, 14, 7, 13], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 5, 3, 8, 8, 10, 8, 11, 13], 5) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 7, 4, 2, 8, 10, 5, 8, 4, 9], 4) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 9, 2, 5, 10, 1, 3, 5, 13, 6], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 3, 4, 9, 3, 10, 13, 6, 14, 5], 11) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 4, 5, 9, 11, 4, 6, 8, 12, 4], 4) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 3, 2, 1, 7, 8, 12, 10, 9, 5], 8) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 8, 5, 3, 6, 8, 5, 10, 13, 10], 11) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 9, 3, 7, 4, 11, 9, 11, 7, 6], 2) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 3, 5, 4, 7, 10, 5, 5, 14, 13], 2) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 6, 3, 8, 6, 9, 9, 7, 5], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 1, 1, 10, 8, 10, 4, 9, 7, 10], 8) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 1, 4, 4, 3, 10, 9, 9, 11, 13], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 4, 5, 5, 10, 5, 9, 8, 6, 8], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 1, 4, 7, 5, 4, 11, 10, 4, 10], 1) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 2, 4, 2, 11, 4, 11, 12, 7, 10], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 2, 4, 8, 4, 13, 4, 4, 14], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 7, 4, 8, 5, 1, 9, 5, 4, 10], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 4, 3, 8, 8, 7, 13, 11, 14], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 2, 4, 5, 11, 12, 13, 4, 4], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 9, 5, 8, 7, 9, 8, 11, 9, 9], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 8, 4, 1, 3, 8, 10, 14, 7, 13], 2) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 3, 2, 5, 5, 6, 13, 7, 7], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 3, 5, 11, 4, 4, 13, 13, 7], 2) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 3, 5, 8, 11, 7, 7, 4, 7, 5], 3) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 6, 3, 10, 9, 6, 10, 9, 5, 4], 1) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 2, 4, 1, 9, 3, 12, 13, 5, 7], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 6, 1, 5, 9, 5, 9, 12, 13, 11], 5) == -1"], "scores": [1.0, 1.0, 0.7255, 0.7255, 0.8725, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, false, false, false, true, true, true, true, true], "pass_test_cases_num": [102, 102, 74, 74, 89, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the first occurrence of a number in a sorted array using binary search.\n\n    Args:\n        arr (List[int]): A sorted array of integers.\n        target (int): The number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of the target number in the array. Returns -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n", "passed": true, "pass": true, "pass_num": 7, "round": 345, "mutate_method": "condense_two2one", "parent_index": 495}
