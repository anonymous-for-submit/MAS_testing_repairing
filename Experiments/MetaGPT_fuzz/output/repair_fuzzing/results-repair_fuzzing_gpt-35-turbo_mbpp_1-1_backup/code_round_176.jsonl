{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 606, "prompt": "Create a function that transforms degrees into radians.", "code": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian", "test_imports": [], "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(92) == 1.6057029118347832", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(62) == 1.0821041362364843", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(59) == 1.0297442586766545", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(125) == 2.181661564992912", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254"], "entry_point": "radian_degree", "repair_prompt": ["Create a function radian_degree that transforms degrees into radians.\nradian_degree(90)==1.5707963267948966\n", "Create a function radian_degree that takes in a value in degrees and converts it into its corresponding equivalent in radians. This function should accurately perform the conversion based on the mathematical relationship between degrees and radians.\nradian_degree(90)==1.5707963267948966\n", "Create a function radian_degree that transforms degrees into radians.\nradian_degree(90)==1.5707963267948966\n"], "completions": ["from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians using the formula: radians = degrees * (pi / 180)\n    \n    Args:\n        degrees (float): The degree value to be converted\n        \n    Returns:\n        float: The corresponding radian value\n    \"\"\"\n    return degrees * (math.pi / 180)\n", "from typing import List\n## main.py\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Function to convert degrees to radians\n\n    Args:\n    degrees: float - The angle in degrees to be converted to radians\n\n    Returns:\n    float - The angle converted to radians\n    \"\"\"\n    import math\n    return math.radians(degrees)\n", "from typing import List\n## main.py\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Function to convert degrees to radians\n\n    Args:\n        degrees: A float representing the angle in degrees\n\n    Returns:\n        A float representing the angle in radians\n    \"\"\"\n    import math\n    return math.radians(degrees)\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians using math library.\n\n    Args:\n        degrees: A float representing the angle in degrees.\n\n    Returns:\n        A float representing the angle in radians.\n    \"\"\"\n    return degrees * (math.pi / 180)\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    # Convert degrees to radians using the math library\n    return math.radians(degrees)\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians accurately.\n\n    Args:\n        degrees (float): The value in degrees to be converted\n\n    Returns:\n        float: The corresponding value in radians\n    \"\"\"\n    radians = math.radians(degrees)\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    # Function to convert degrees to radians\n    return math.radians(degrees)\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert the given degree value to radians.\n\n    Args:\n        degrees (float): The degree value to be converted to radians\n\n    Returns:\n        float: The corresponding radian value\n    \"\"\"\n    return degrees * math.pi / 180.0\n", "from typing import List\n## main.py\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Function to convert degrees to radians\n    \n    Args:\n    degrees: A float representing the angle in degrees\n    \n    Returns:\n    A float representing the angle in radians\n    \"\"\"\n    import math\n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians using math library.\n\n    Args:\n        degrees (float): The angle in degrees to be converted.\n\n    Returns:\n        float: The angle in radians after conversion.\n    \"\"\"\n    return math.radians(degrees)\n"], "plans": ["requirement analysis:\nThe function should accurately convert degrees to radians using the formula radians = degrees * pi / 180. It should handle common angles like 0, 90, 180 degrees correctly. Performance should be optimized for quick conversions.\nrequirement pool:\n- Implement the core conversion logic using the radians = degrees * pi / 180 formula\n- Include unit tests to validate the conversion accuracy\n- Optimize the function for speed and efficiency\nWe will design a simple Python function using the math library to efficiently convert degrees to radians.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'degrees into radians'\n    Explanation: The core concept is to convert angles measured in degrees to radians.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will use the math library in Python to convert degrees to radians using the formula: radians = degrees * (pi / 180)\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: Converting 0 degrees to radians results in 0 radians.\n    radian_degree(360) = 6.283185307179586\n    Explanation: Converting 360 degrees to radians results in 2\u03c0 radians.\n    radian_degree(180) = 3.141592653589793\n    Explanation: Converting 180 degrees to radians results in \u03c0 radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The conversion formula covers all possible input angles.\n", "requirement pool:\n- Implement radian_degree function with correct conversion formula\n- Ensure the function handles edge cases gracefully\n- Optimize the function for performance\nWe will design a simple Python function using the math library to accurately convert degrees to radians.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'degrees': refers to the unit of measurement for angles where a full circle is 360 degrees.\n    'radians': refers to the unit of measurement for angles where a full circle is 2\u03c0 radians.\n    Explanation: The core concept involves converting angles from degrees to radians using the mathematical relationship between the two units.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code, you can use the math library in Python to convert degrees to radians using the formula: radians = degrees * (pi/180).\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: Converting 0 degrees to radians results in 0 radians.\n    radian_degree(360) = 6.283185307179586\n    Explanation: Converting 360 degrees to radians results in 2\u03c0 radians.\n    radian_degree(180) = 3.141592653589793\n    Explanation: Converting 180 degrees to radians results in \u03c0 radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The conversion formula covers all possible input angles effectively.\n", "requirement pool:\n- Implement radian_degree function with correct conversion formula\n- Ensure the function handles edge cases gracefully\n- Optimize the function for performance\nWe will design a simple Python function using the math library to accurately convert degrees to radians.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'degrees': refers to the unit of measurement for angles in the requirement.\n    'radians': refers to another unit of measurement for angles, where 1 radian is equal to 57.2958 degrees.\n    Explanation: The core concept involves converting angles from degrees to radians using a mathematical formula.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code, you can use the math library in Python to convert degrees to radians using the formula: radians = degrees * (pi / 180).\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: When converting 0 degrees to radians, the result should be 0.\n    radian_degree(360) = 6.283185307179586\n    Explanation: When converting 360 degrees to radians, the result should be approximately 6.2832.\n    radian_degree(180) = 3.141592653589793\n    Explanation: When converting 180 degrees to radians, the result should be approximately 3.1416.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the conversion formula covers all possible input angles.\n", "We will use the math library in Python to perform the conversion calculation from degrees to radians.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'conversion': Refers to the process of changing a value from one unit of measurement to another.\n    'degrees': Represents a unit of measurement for angles.\n    'radians': Represents another unit of measurement for angles.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the math library for the conversion, the code logic would involve importing the math library and using the math.radians() function to convert degrees to radians.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: When converting 0 degrees to radians, the result should be 0.\n    radian_degree(360) = 6.283185307179586\n    Explanation: When converting 360 degrees to radians, the result should be approximately 6.283185307179586.\n    radian_degree(180) = 3.141592653589793\n    Explanation: When converting 180 degrees to radians, the result should be approximately 3.141592653589793.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the math library handles the conversion accurately.\n", "requirement pool:\n- Implement the radian_degree function to accurately convert degrees to radians\n- Ensure the conversion formula used is correct and reliable\n- Handle edge cases such as 0 degrees and 360 degrees appropriately\nWe will use the math library in Python to implement the radian_degree function for accurate conversion of degrees to radians.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'degrees': refers to the unit of measurement for angles where a full circle is 360 degrees.\n    'radians': refers to the unit of measurement for angles where a full circle is 2\u03c0 radians.\n    Explanation: The core concept involves converting angles from degrees to radians based on the mathematical relationship between the two units.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the math library for accurate conversion, the code logic would involve importing the math library and using the math.radians() function to convert degrees to radians.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: Converting 0 degrees to radians results in 0 radians.\n    radian_degree(360) = 6.283185307179586\n    Explanation: Converting 360 degrees (a full circle) to radians results in 2\u03c0 radians.\n    radian_degree(180) = 3.141592653589793\n    Explanation: Converting 180 degrees (a straight angle) to radians results in \u03c0 radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the math library handles the conversion accurately.\n", "requirement pool:\n- Implement accurate degree to radian conversion\n- Ensure the function handles edge cases gracefully\n- Optimize the conversion algorithm for efficiency\nWe will design a simple Python function using the math library to accurately convert degrees to radians.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'degrees': The input value representing an angle in degrees.\n    'radians': The output value representing the same angle in radians.\n    Explanation: The core concept involves converting an angle measurement from degrees to radians accurately.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: Converting 0 degrees to radians results in 0 radians.\n    radian_degree(360) = 6.283185307179586\n    Explanation: Converting 360 degrees to radians results in 2\u03c0 radians.\n    radian_degree(180) = 3.141592653589793\n    Explanation: Converting 180 degrees to radians results in \u03c0 radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The math library handles the conversion accurately for all input values.\n", "requirement pool:\n- Implement radian_degree function with correct conversion formula\n- Ensure the function handles edge cases gracefully\n- Optimize the function for performance\nWe will use the math library in Python to leverage the built-in functions for trigonometric calculations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'degrees into radians'\n    Explanation: The core concept is to convert an angle measurement from degrees to radians.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the math library in Python, the code logic would involve using the math.radians() function to convert degrees to radians.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: Converting 0 degrees to radians should result in 0 radians.\n    radian_degree(360) = 6.283185307179586\n    Explanation: Converting 360 degrees to radians should result in approximately 6.283 radians.\n    radian_degree(180) = 3.141592653589793\n    Explanation: Converting 180 degrees to radians should result in approximately 3.142 radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the math.radians() function handles the conversion accurately.\n", "requirement analysis:\nThe function should accurately convert degrees to radians using the formula: radians = degrees * (pi / 180). It should handle both positive and negative degree values.\nrequirement pool:\n- Implement the core conversion logic using the provided formula\n- Include input validation to ensure only numerical values are accepted\n- Optimize the function for performance to handle large-scale conversions efficiently\nWe will use the math library in Python to leverage the pi constant and perform the degree to radian conversion calculation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'degrees into radians'\n    Explanation: The core concept is to convert an angle measurement from degrees to radians.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will use the math library in Python to leverage the pi constant and perform the degree to radian conversion calculation.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: Converting 0 degrees to radians results in 0.\n    radian_degree(360) = 6.283185307179586\n    Explanation: Converting 360 degrees to radians results in 2\u03c0.\n    radian_degree(180) = 3.141592653589793\n    Explanation: Converting 180 degrees to radians results in \u03c0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The math library handles the conversion accurately.\n", "requirement analysis:\nThe function should accurately convert degrees to radians using the formula radians = degrees * (pi / 180). It should handle common degree inputs like 0, 90, 180, and 360 correctly.\nrequirement pool:\n- Implement the radian_degree function with the correct conversion formula\n- Include input validation to handle invalid degree inputs\n- Optimize the function for performance to handle large-scale conversions efficiently\nWe will design a simple Python function using the math library to efficiently convert degrees to radians.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'degrees into radians'\n    Explanation: The core concept is to convert angles measured in degrees to radians.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will use the math library in Python to convert degrees to radians using the formula: radians = degrees * (pi/180).\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: Converting 0 degrees to radians results in 0 radians.\n    radian_degree(360) = 6.283185307179586\n    Explanation: Converting 360 degrees to radians results in 2\u03c0 radians.\n    radian_degree(180) = 3.141592653589793\n    Explanation: Converting 180 degrees to radians results in \u03c0 radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The conversion logic covers all possible input angles effectively.\n", "requirement pool:\n- Implement radian_degree function with correct conversion formula\n- Ensure the function handles edge cases like 0 degrees or 360 degrees\n- Optimize the function for performance to handle large-scale conversions efficiently\nWe will design a simple Python function using the math library to efficiently convert degrees to radians.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'degrees into radians'\n    Explanation: The core concept is to convert angles measured in degrees to radians.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will design a simple Python function using the math library to efficiently convert degrees to radians.\n    ```python\n    import math\n\n    def radian_degree(degrees: float) -> float:\n        return math.radians(degrees)\n    ```\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: Converting 0 degrees to radians results in 0 radians.\n    radian_degree(360) = 6.283185307179586\n    Explanation: Converting 360 degrees to radians results in approximately 6.283 radians.\n    radian_degree(180) = 3.141592653589793\n    Explanation: Converting 180 degrees to radians results in approximately 3.142 radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The math library handles the conversion of degrees to radians effectively.\n"], "test": ["def check(radian_degree):\n\tassert radian_degree(90)==1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(60)==1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(120)==2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(92) == 1.6057029118347832", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(62) == 1.0821041362364843", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(59) == 1.0297442586766545", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(125) == 2.181661564992912", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8039, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, false, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 82, 102, 102], "completion": "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians using math library.\n\n    Args:\n        degrees (float): The angle in degrees to be converted.\n\n    Returns:\n        float: The angle in radians after conversion.\n    \"\"\"\n    return math.radians(degrees)\n", "passed": true, "pass": true, "pass_num": 9, "round": 176, "mutate_method": "rephrase_one", "parent_index": 176}
