{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 566, "prompt": "Write a function to get the sum of the digits of a non-negative integer. Make sure your solution efficiently processes large inputs with time and space complexity optimization in mind.", "code": "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))", "test_imports": [], "test_list": ["assert sum_digits(345)==12", "assert sum_digits(12)==3", "assert sum_digits(97)==16", "assert sum_digits(344) == 11", "assert sum_digits(350) == 8", "assert sum_digits(342) == 9", "assert sum_digits(342) == 9", "assert sum_digits(341) == 8", "assert sum_digits(347) == 14", "assert sum_digits(345) == 12", "assert sum_digits(343) == 10", "assert sum_digits(341) == 8", "assert sum_digits(345) == 12", "assert sum_digits(340) == 7", "assert sum_digits(345) == 12", "assert sum_digits(347) == 14", "assert sum_digits(350) == 8", "assert sum_digits(344) == 11", "assert sum_digits(343) == 10", "assert sum_digits(344) == 11", "assert sum_digits(340) == 7", "assert sum_digits(341) == 8", "assert sum_digits(350) == 8", "assert sum_digits(344) == 11", "assert sum_digits(343) == 10", "assert sum_digits(347) == 14", "assert sum_digits(349) == 16", "assert sum_digits(348) == 15", "assert sum_digits(347) == 14", "assert sum_digits(341) == 8", "assert sum_digits(343) == 10", "assert sum_digits(343) == 10", "assert sum_digits(346) == 13", "assert sum_digits(350) == 8", "assert sum_digits(340) == 7", "assert sum_digits(349) == 16", "assert sum_digits(15) == 6", "assert sum_digits(9) == 9", "assert sum_digits(10) == 1", "assert sum_digits(12) == 3", "assert sum_digits(11) == 2", "assert sum_digits(15) == 6", "assert sum_digits(10) == 1", "assert sum_digits(14) == 5", "assert sum_digits(17) == 8", "assert sum_digits(10) == 1", "assert sum_digits(13) == 4", "assert sum_digits(7) == 7", "assert sum_digits(9) == 9", "assert sum_digits(16) == 7", "assert sum_digits(15) == 6", "assert sum_digits(16) == 7", "assert sum_digits(9) == 9", "assert sum_digits(13) == 4", "assert sum_digits(10) == 1", "assert sum_digits(16) == 7", "assert sum_digits(16) == 7", "assert sum_digits(7) == 7", "assert sum_digits(13) == 4", "assert sum_digits(10) == 1", "assert sum_digits(10) == 1", "assert sum_digits(9) == 9", "assert sum_digits(14) == 5", "assert sum_digits(17) == 8", "assert sum_digits(12) == 3", "assert sum_digits(16) == 7", "assert sum_digits(7) == 7", "assert sum_digits(8) == 8", "assert sum_digits(13) == 4", "assert sum_digits(100) == 1", "assert sum_digits(98) == 17", "assert sum_digits(94) == 13", "assert sum_digits(92) == 11", "assert sum_digits(101) == 2", "assert sum_digits(102) == 3", "assert sum_digits(93) == 12", "assert sum_digits(98) == 17", "assert sum_digits(101) == 2", "assert sum_digits(92) == 11", "assert sum_digits(95) == 14", "assert sum_digits(102) == 3", "assert sum_digits(96) == 15", "assert sum_digits(93) == 12", "assert sum_digits(96) == 15", "assert sum_digits(98) == 17", "assert sum_digits(92) == 11", "assert sum_digits(102) == 3", "assert sum_digits(100) == 1", "assert sum_digits(95) == 14", "assert sum_digits(93) == 12", "assert sum_digits(98) == 17", "assert sum_digits(102) == 3", "assert sum_digits(92) == 11", "assert sum_digits(98) == 17", "assert sum_digits(97) == 16", "assert sum_digits(95) == 14", "assert sum_digits(101) == 2", "assert sum_digits(97) == 16", "assert sum_digits(100) == 1", "assert sum_digits(92) == 11", "assert sum_digits(97) == 16", "assert sum_digits(93) == 12"], "entry_point": "sum_digits", "repair_prompt": ["Write a function sum_digits to get the sum of the digits of a non-negative integer. Make sure your solution efficiently processes large inputs with time and space complexity optimization in mind.\nsum_digits(345)==12\n", "Write a function sum_digits to efficiently process large inputs, optimizing time and space complexity for getting the sum of digits in a non-negative integer.\nsum_digits(345)==12\n", "Write a function sum_digits to get the sum of the digits of a non-negative integer efficiently processing large inputs with time and space complexity optimization in mind.\nsum_digits(345)==12\n"], "completions": ["from typing import List\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of digits of a non-negative integer.\n\n    Args:\n        n: A non-negative integer.\n\n    Returns:\n        The sum of digits of the input integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of digits of a non-negative integer using a recursive approach.\n    \n    Args:\n        n: A non-negative integer for which the sum of digits needs to be calculated.\n        \n    Returns:\n        The sum of digits of the input non-negative integer.\n    \"\"\"\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n // 10)\n", "from typing import List\n## main.py\n\ndef sum_digits(num: int) -> int:\n    \"\"\"\n    Calculate the sum of digits of a non-negative integer.\n\n    Args:\n        num: A non-negative integer.\n\n    Returns:\n        The sum of digits of the input number.\n    \"\"\"\n    return sum(int(digit) for digit in str(num))\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of digits in a non-negative integer using a recursive approach.\n\n    Args:\n        n: non-negative integer\n\n    Returns:\n        int: sum of digits in n\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    # Function to calculate the sum of digits in a non-negative integer\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n // 10)\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of digits in a non-negative integer using a recursive approach.\n\n    Args:\n    - n: non-negative integer\n\n    Returns:\n    - Sum of digits in the input non-negative integer\n    \"\"\"\n\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of digits of a non-negative integer using a recursive approach.\n    \n    Args:\n        n: non-negative integer\n    \n    Returns:\n        int: sum of digits of n\n    \"\"\"\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n // 10)\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of digits in a non-negative integer efficiently.\n\n    Args:\n        n: A non-negative integer for which the sum of digits needs to be calculated.\n\n    Returns:\n        An integer representing the sum of digits in the input number.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of digits of a non-negative integer using a recursive approach.\n    \n    Args:\n        n: A non-negative integer for which the sum of digits needs to be calculated.\n        \n    Returns:\n        The sum of digits of the input non-negative integer.\n    \"\"\"\n    \n    # Base case: If the input number is less than 10, return the number itself\n    if n < 10:\n        return n\n    \n    # Recursive case: Return the sum of the last digit and the sum of digits of the remaining number\n    return n % 10 + sum_digits(n // 10)\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of digits in a non-negative integer efficiently.\n\n    Args:\n        n: A non-negative integer for which the sum of digits needs to be calculated.\n\n    Returns:\n        int: The sum of digits in the input non-negative integer.\n\n    Examples:\n        >>> sum_digits(0)\n        0\n        >>> sum_digits(999)\n        27\n        >>> sum_digits(123456789)\n        45\n    \"\"\"\n    return sum(int(digit) for digit in str(n))\n"], "plans": ["We will use Python built-in functions to efficiently process large inputs and optimize time and space complexity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of digits'\n    Explanation: The core concept is to calculate the sum of all the individual digits in a non-negative integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using Python built-in functions for efficiency, the code logic can directly implement the sum of digits calculation using those functions.\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: When the input is 0, the sum of digits is also 0.\n    sum_digits(999) = 27\n    Explanation: The sum of digits in 999 is 9+9+9 = 27.\n    sum_digits(123456789) = 45\n    Explanation: The sum of digits in 123456789 is 1+2+3+4+5+6+7+8+9 = 45.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to sum the digits can handle all non-negative integers efficiently.\n", "requirement pool:\n- Efficiently process large inputs\n- Optimize time and space complexity\n- Accurately calculate the sum of digits\nWe will use a simple recursive approach to efficiently calculate the sum of digits of a non-negative integer.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of digits'\n    Explanation: The core concept is to calculate the sum of all the individual digits in a non-negative integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will use a simple recursive approach to efficiently calculate the sum of digits of a non-negative integer.\n    1. Base case: If the input number is less than 10, return the number itself.\n    2. Recursive case: Return the sum of the last digit (number % 10) and the sum of digits of the remaining number (number // 10).\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: The input number is 0, so the sum of digits is also 0.\n    sum_digits(999) = 27\n    Explanation: The input number is 999, and the sum of its digits is 9+9+9 = 27.\n    sum_digits(123456789) = 45\n    Explanation: The input number is 123456789, and the sum of its digits is 1+2+3+4+5+6+7+8+9 = 45.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach efficiently handles large inputs as well.\n", "requirement pool:\n- Efficiently process large inputs\n- Optimize time and space complexity\n- Accurately calculate the sum of digits\nWe will use Python built-in functions to efficiently process large inputs and optimize time and space complexity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of digits'\n    Explanation: The core concept is to calculate the sum of all the individual digits in a non-negative integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using Python built-in functions for efficiency, the code logic can be implemented as follows:\n```python\ndef sum_digits(num: int) -> int:\n    return sum(int(digit) for digit in str(num))\n```\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: When the input is 0, the sum of digits is also 0.\n    sum_digits(999) = 27\n    Explanation: The sum of digits in 999 is 9+9+9 = 27.\n    sum_digits(123456789) = 45\n    Explanation: The sum of digits in 123456789 is 1+2+3+4+5+6+7+8+9 = 45.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios efficiently.\n", "We will use a simple recursive approach to efficiently calculate the sum of digits in a non-negative integer.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of digits'\n    Explanation: Refers to the total sum of all individual digits in a number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: The sum of digits in 0 is 0.\n    sum_digits(999) = 27\n    Explanation: The sum of digits in 999 is 9+9+9 = 27.\n    sum_digits(123456789) = 45\n    Explanation: The sum of digits in 123456789 is 1+2+3+4+5+6+7+8+9 = 45.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach should handle all non-negative integers efficiently.\n", "We will use a simple recursive approach to efficiently calculate the sum of digits in a non-negative integer.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of digits'\n    Explanation: Refers to the total sum of individual digits in a number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: The sum of digits in 0 is 0.\n    sum_digits(999) = 27\n    Explanation: The sum of digits in 999 is 9+9+9 = 27.\n    sum_digits(123456789) = 45\n    Explanation: The sum of digits in 123456789 is 1+2+3+4+5+6+7+8+9 = 45.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach should handle all non-negative integers efficiently.\n", "We will use a simple recursive approach to efficiently calculate the sum of digits in a non-negative integer.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of digits'\n    Explanation: Refers to the total sum of individual digits in a number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: The sum of digits in 0 is 0.\n    sum_digits(999) = 27\n    Explanation: The sum of digits in 999 is 9+9+9 = 27.\n    sum_digits(123456789) = 45\n    Explanation: The sum of digits in 123456789 is 1+2+3+4+5+6+7+8+9 = 45.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach should handle all non-negative integers efficiently.\n", "We will use a simple recursive approach to efficiently calculate the sum of digits of a non-negative integer.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of digits'\n    Explanation: The core concept is to calculate the sum of all the individual digits in a non-negative integer efficiently.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will use a simple recursive approach to efficiently calculate the sum of digits of a non-negative integer.\n\n    def sum_digits(n: int) -> int:\n        if n == 0:\n            return 0\n        return n % 10 + sum_digits(n // 10)\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: When the input is 0, the sum of digits is 0.\n    sum_digits(123456789) = 45\n    Explanation: The sum of digits from 1 to 9 is 45.\n    sum_digits(999999999999999) = 135\n    Explanation: The sum of digits from 9 repeated 15 times is 135.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach efficiently handles large inputs.\n", "We will use the built-in functions in Python to efficiently process the input integer and calculate the sum of its digits.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of digits'\n    Explanation: The core concept is to calculate the sum of all the individual digits in a non-negative integer efficiently.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in functions in Python, we can implement the code as follows:\n```python\ndef sum_digits(num: int) -> int:\n    return sum(int(digit) for digit in str(num))\n```\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: When the input is 0, the sum of digits is also 0.\n    sum_digits(999) = 27\n    Explanation: The sum of digits in 999 is 9+9+9 = 27.\n    sum_digits(123456789) = 45\n    Explanation: The sum of digits in 123456789 is 1+2+3+4+5+6+7+8+9 = 45.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios efficiently.\n", "We will use a simple recursive approach to efficiently calculate the sum of digits of a non-negative integer.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of digits'\n    Explanation: Refers to the total sum of all individual digits in a non-negative integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will use a simple recursive approach to efficiently calculate the sum of digits of a non-negative integer.\n    1. Base case: If the input number is less than 10, return the number itself.\n    2. Recursive case: Return the sum of the last digit (number % 10) and the sum of digits of the remaining number (number // 10).\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: For an input of 0, the sum of digits is 0.\n    sum_digits(999) = 27\n    Explanation: The sum of digits for 999 is 9+9+9 = 27.\n    sum_digits(123456789) = 45\n    Explanation: The sum of digits for 123456789 is 1+2+3+4+5+6+7+8+9 = 45.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach efficiently handles large inputs with time and space complexity optimization in mind.\n", "requirement pool:\n- Handle non-negative integers\n- Efficiently process large inputs\n- Optimize time and space complexity\nWe will use a simple approach to iterate through the digits of the input number and calculate the sum efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of digits'\n    Explanation: The core concept is to calculate the sum of all the individual digits in a non-negative integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: When the input is 0, the sum of digits is also 0.\n    sum_digits(999) = 27\n    Explanation: The sum of digits in 999 is 9+9+9 = 27.\n    sum_digits(123456789) = 45\n    Explanation: The sum of digits in 123456789 is 1+2+3+4+5+6+7+8+9 = 45.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should efficiently process large inputs.\n"], "test": ["def check(sum_digits):\n\tassert sum_digits(345)==12", "def check(sum_digits):\n\tassert sum_digits(12)==3", "def check(sum_digits):\n\tassert sum_digits(97)==16", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(342) == 9", "def check(sum_digits):\n\tassert sum_digits(342) == 9", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(345) == 12", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(345) == 12", "def check(sum_digits):\n\tassert sum_digits(340) == 7", "def check(sum_digits):\n\tassert sum_digits(345) == 12", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(340) == 7", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(349) == 16", "def check(sum_digits):\n\tassert sum_digits(348) == 15", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(346) == 13", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(340) == 7", "def check(sum_digits):\n\tassert sum_digits(349) == 16", "def check(sum_digits):\n\tassert sum_digits(15) == 6", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(12) == 3", "def check(sum_digits):\n\tassert sum_digits(11) == 2", "def check(sum_digits):\n\tassert sum_digits(15) == 6", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(14) == 5", "def check(sum_digits):\n\tassert sum_digits(17) == 8", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(7) == 7", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(15) == 6", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(7) == 7", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(14) == 5", "def check(sum_digits):\n\tassert sum_digits(17) == 8", "def check(sum_digits):\n\tassert sum_digits(12) == 3", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(7) == 7", "def check(sum_digits):\n\tassert sum_digits(8) == 8", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(100) == 1", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(94) == 13", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(101) == 2", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(93) == 12", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(101) == 2", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(95) == 14", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(96) == 15", "def check(sum_digits):\n\tassert sum_digits(93) == 12", "def check(sum_digits):\n\tassert sum_digits(96) == 15", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(100) == 1", "def check(sum_digits):\n\tassert sum_digits(95) == 14", "def check(sum_digits):\n\tassert sum_digits(93) == 12", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(97) == 16", "def check(sum_digits):\n\tassert sum_digits(95) == 14", "def check(sum_digits):\n\tassert sum_digits(101) == 2", "def check(sum_digits):\n\tassert sum_digits(97) == 16", "def check(sum_digits):\n\tassert sum_digits(100) == 1", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(97) == 16", "def check(sum_digits):\n\tassert sum_digits(93) == 12"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of digits in a non-negative integer efficiently.\n\n    Args:\n        n: A non-negative integer for which the sum of digits needs to be calculated.\n\n    Returns:\n        int: The sum of digits in the input non-negative integer.\n\n    Examples:\n        >>> sum_digits(0)\n        0\n        >>> sum_digits(999)\n        27\n        >>> sum_digits(123456789)\n        45\n    \"\"\"\n    return sum(int(digit) for digit in str(n))\n", "passed": true, "pass": true, "pass_num": 10, "round": 316, "mutate_method": "rephrase_one", "parent_index": 545}
