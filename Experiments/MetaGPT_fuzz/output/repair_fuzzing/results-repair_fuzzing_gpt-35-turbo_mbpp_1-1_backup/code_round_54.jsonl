{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 130, "prompt": "Write a function to find the item with maximum frequency in a given list. To solve this problem, you need to count the frequency of each item in the list. You should identify the item that appears most frequently among all the items.", "code": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]", "test_imports": [], "test_list": ["assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)", "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)", "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)", "assert max_occurrences([3, 2, 8, 3, 11, 10, 5, 1, 3, 3, 4, 6, 2, 5, 6, 7, 6, 2, 4, 6, 7]) == (3, 4)", "assert max_occurrences([5, 6, 7, 8, 12, 14, 13, 2, 10, 3, 2, 5, 5, 3, 7, 7, 1, 10, 4, 1, 2]) == (5, 3)", "assert max_occurrences([7, 8, 13, 5, 12, 13, 3, 4, 10, 6, 1, 4, 4, 1, 6, 5, 6, 2, 14, 3, 3]) == (3, 3)", "assert max_occurrences([5, 2, 5, 7, 6, 8, 10, 1, 2, 2, 5, 6, 2, 1, 6, 4, 8, 8, 9, 5, 2]) == (2, 5)", "assert max_occurrences([7, 4, 6, 6, 6, 5, 6, 3, 10, 4, 6, 2, 3, 7, 8, 3, 4, 3, 5, 6, 2]) == (6, 6)", "assert max_occurrences([5, 1, 3, 4, 6, 14, 10, 3, 8, 1, 3, 9, 4, 3, 5, 2, 4, 1, 11, 6, 6]) == (3, 4)", "assert max_occurrences([6, 5, 8, 3, 4, 4, 9, 2, 11, 4, 2, 6, 4, 5, 7, 2, 4, 1, 14, 4, 5]) == (4, 6)", "assert max_occurrences([2, 6, 7, 3, 7, 7, 8, 2, 9, 3, 4, 4, 2, 7, 6, 1, 1, 7, 12, 5, 2]) == (7, 5)", "assert max_occurrences([5, 4, 9, 1, 3, 7, 9, 1, 7, 5, 5, 2, 6, 4, 1, 7, 1, 5, 6, 4, 4]) == (5, 4)", "assert max_occurrences([6, 8, 9, 8, 8, 8, 11, 6, 11, 9, 6, 9, 5, 1, 4, 5, 1, 5, 13, 4, 6]) == (6, 4)", "assert max_occurrences([7, 6, 7, 5, 7, 10, 3, 6, 2, 9, 2, 1, 4, 6, 5, 7, 9, 7, 4, 4, 5]) == (7, 5)", "assert max_occurrences([7, 3, 9, 8, 12, 6, 8, 4, 10, 7, 2, 6, 6, 3, 1, 1, 6, 10, 7, 2, 6]) == (6, 5)", "assert max_occurrences([5, 3, 10, 7, 10, 8, 7, 1, 11, 3, 3, 6, 1, 2, 8, 5, 2, 3, 9, 4, 2]) == (3, 4)", "assert max_occurrences([4, 1, 5, 3, 10, 12, 10, 4, 9, 7, 3, 8, 2, 5, 6, 5, 3, 11, 10, 6, 7]) == (5, 3)", "assert max_occurrences([7, 4, 9, 7, 8, 10, 11, 3, 11, 9, 6, 9, 5, 7, 7, 7, 9, 10, 11, 6, 3]) == (7, 5)", "assert max_occurrences([4, 8, 4, 5, 4, 13, 13, 2, 10, 7, 6, 7, 2, 5, 5, 6, 2, 7, 13, 6, 5]) == (5, 4)", "assert max_occurrences([7, 7, 8, 3, 2, 6, 5, 3, 8, 2, 2, 10, 6, 2, 8, 4, 8, 4, 5, 3, 4]) == (8, 4)", "assert max_occurrences([6, 4, 3, 6, 10, 7, 8, 4, 4, 10, 5, 11, 4, 5, 8, 3, 2, 8, 6, 3, 6]) == (6, 4)", "assert max_occurrences([6, 3, 7, 1, 2, 10, 10, 7, 3, 7, 2, 6, 2, 2, 1, 5, 8, 9, 14, 1, 7]) == (7, 4)", "assert max_occurrences([5, 7, 6, 7, 11, 14, 5, 5, 1, 10, 3, 7, 1, 7, 4, 7, 2, 7, 14, 4, 2]) == (7, 6)", "assert max_occurrences([5, 6, 11, 7, 3, 11, 7, 2, 9, 5, 6, 1, 1, 6, 4, 7, 8, 10, 6, 2, 1]) == (6, 4)", "assert max_occurrences([2, 4, 6, 9, 5, 8, 3, 1, 11, 7, 5, 11, 5, 2, 2, 3, 7, 5, 6, 6, 2]) == (2, 4)", "assert max_occurrences([1, 4, 6, 8, 6, 5, 7, 6, 10, 3, 1, 2, 4, 4, 7, 2, 2, 6, 11, 5, 1]) == (6, 4)", "assert max_occurrences([3, 8, 12, 8, 6, 7, 6, 1, 8, 6, 3, 7, 1, 2, 1, 6, 9, 10, 13, 4, 2]) == (6, 4)", "assert max_occurrences([3, 3, 13, 8, 10, 14, 10, 3, 4, 8, 5, 1, 2, 4, 8, 4, 2, 7, 8, 4, 7]) == (8, 4)", "assert max_occurrences([4, 2, 11, 3, 9, 4, 8, 6, 4, 1, 4, 4, 5, 4, 4, 5, 7, 7, 14, 1, 4]) == (4, 8)", "assert max_occurrences([6, 3, 4, 4, 6, 7, 10, 5, 3, 6, 4, 2, 4, 6, 3, 6, 9, 9, 14, 1, 4]) == (6, 5)", "assert max_occurrences([3, 1, 5, 2, 4, 8, 8, 7, 5, 10, 1, 7, 2, 2, 8, 5, 8, 5, 6, 6, 1]) == (5, 4)", "assert max_occurrences([7, 6, 8, 4, 6, 12, 11, 2, 9, 3, 1, 10, 4, 5, 6, 7, 8, 1, 13, 6, 2]) == (6, 4)", "assert max_occurrences([6, 8, 12, 1, 10, 12, 5, 2, 7, 4, 3, 5, 3, 2, 2, 2, 5, 8, 12, 2, 4]) == (2, 5)", "assert max_occurrences([4, 2, 8, 8, 3, 9, 7, 5, 3, 9, 4, 6, 1, 1, 8, 1, 6, 1, 11, 6, 1]) == (1, 5)", "assert max_occurrences([7, 2, 7, 1, 9, 5, 4, 1, 2, 3, 6, 5, 5, 2, 2, 5, 9, 10, 12, 1, 1]) == (2, 4)", "assert max_occurrences([5, 8, 4, 7, 3, 4, 12, 6, 4, 7, 6, 10, 4, 7, 8, 4, 7, 8, 7, 2, 5]) == (4, 5)", "assert max_occurrences([5, 3, 8, 2, 10, 14, 9, 4, 11, 17, 10, 9, 10, 17, 13, 17, 16]) == (10, 3)", "assert max_occurrences([4, 5, 4, 5, 3, 4, 13, 12, 13, 10, 16, 14, 14, 18, 12, 14, 14]) == (14, 4)", "assert max_occurrences([6, 4, 11, 8, 5, 11, 6, 5, 6, 18, 9, 14, 10, 9, 20, 14, 18]) == (6, 3)", "assert max_occurrences([2, 7, 9, 5, 2, 4, 11, 3, 8, 14, 11, 14, 14, 8, 20, 20, 21]) == (14, 3)", "assert max_occurrences([4, 1, 12, 6, 5, 10, 5, 2, 7, 10, 13, 7, 7, 13, 16, 14, 18]) == (7, 3)", "assert max_occurrences([3, 6, 12, 6, 6, 5, 5, 9, 11, 14, 19, 14, 11, 12, 11, 17, 16]) == (6, 3)", "assert max_occurrences([1, 2, 4, 3, 4, 14, 11, 10, 10, 12, 13, 13, 11, 15, 14, 11, 18]) == (11, 3)", "assert max_occurrences([7, 6, 7, 8, 4, 13, 11, 3, 10, 20, 9, 5, 7, 8, 20, 18, 21]) == (7, 3)", "assert max_occurrences([1, 3, 12, 6, 3, 10, 7, 6, 4, 20, 19, 5, 15, 8, 20, 18, 15]) == (3, 2)", "assert max_occurrences([5, 5, 5, 8, 2, 8, 12, 11, 7, 11, 11, 10, 9, 11, 12, 17, 16]) == (11, 4)", "assert max_occurrences([3, 6, 8, 4, 7, 13, 11, 5, 6, 13, 9, 12, 17, 18, 12, 20, 13]) == (13, 3)", "assert max_occurrences([5, 1, 3, 5, 9, 14, 10, 9, 4, 12, 12, 5, 13, 11, 13, 17, 22]) == (5, 3)", "assert max_occurrences([5, 1, 5, 4, 4, 9, 12, 9, 4, 14, 11, 11, 7, 16, 18, 15, 23]) == (4, 3)", "assert max_occurrences([7, 2, 10, 1, 3, 11, 4, 12, 13, 11, 13, 10, 15, 16, 19, 20, 23]) == (10, 2)", "assert max_occurrences([6, 7, 8, 9, 6, 11, 4, 10, 10, 15, 19, 11, 11, 16, 19, 20, 15]) == (11, 3)", "assert max_occurrences([7, 4, 13, 9, 11, 14, 5, 3, 13, 14, 18, 7, 17, 13, 14, 14, 13]) == (13, 4)", "assert max_occurrences([7, 2, 12, 9, 2, 11, 10, 5, 7, 17, 10, 7, 16, 8, 20, 13, 19]) == (7, 3)", "assert max_occurrences([5, 2, 4, 3, 6, 8, 9, 5, 9, 13, 18, 8, 17, 9, 21, 18, 14]) == (9, 3)", "assert max_occurrences([2, 7, 8, 9, 3, 7, 9, 8, 5, 16, 10, 7, 15, 15, 17, 19, 18]) == (7, 3)", "assert max_occurrences([2, 8, 5, 6, 9, 4, 13, 6, 13, 13, 14, 11, 7, 11, 15, 21, 15]) == (13, 3)", "assert max_occurrences([1, 6, 10, 8, 8, 9, 9, 8, 9, 20, 17, 14, 16, 17, 12, 15, 16]) == (8, 3)", "assert max_occurrences([6, 6, 10, 3, 2, 12, 6, 7, 11, 16, 19, 11, 10, 15, 18, 20, 19]) == (6, 3)", "assert max_occurrences([4, 8, 13, 2, 8, 14, 3, 10, 6, 20, 16, 9, 16, 10, 13, 14, 21]) == (8, 2)", "assert max_occurrences([6, 8, 8, 1, 2, 13, 3, 8, 11, 18, 9, 10, 8, 14, 15, 17, 18]) == (8, 4)", "assert max_occurrences([5, 3, 7, 8, 12, 9, 10, 6, 14, 19, 18, 5, 8, 18, 21, 17, 21]) == (5, 2)", "assert max_occurrences([6, 4, 10, 1, 12, 8, 12, 3, 14, 19, 9, 6, 17, 14, 17, 11, 19]) == (6, 2)", "assert max_occurrences([2, 6, 12, 5, 7, 13, 5, 8, 11, 11, 11, 6, 11, 13, 15, 14, 19]) == (11, 4)", "assert max_occurrences([7, 4, 9, 2, 10, 13, 12, 12, 13, 18, 17, 8, 17, 12, 18, 14, 13]) == (13, 3)", "assert max_occurrences([7, 2, 5, 3, 10, 13, 8, 9, 7, 18, 12, 10, 10, 15, 18, 20, 18]) == (10, 3)", "assert max_occurrences([5, 5, 13, 3, 12, 12, 8, 4, 4, 20, 18, 11, 17, 8, 13, 19, 22]) == (5, 2)", "assert max_occurrences([1, 5, 12, 9, 9, 9, 11, 7, 11, 14, 12, 8, 13, 13, 12, 18, 22]) == (12, 3)", "assert max_occurrences([5, 4, 3, 6, 6, 9, 9, 2, 12, 13, 10, 15, 17, 14, 17, 13, 20]) == (6, 2)", "assert max_occurrences([3, 1, 7, 4, 9, 12, 11, 3, 13, 20, 13, 10, 12, 18, 15, 20, 15]) == (3, 2)", "assert max_occurrences([7, 20, 22, 31, 35, 87, 85, 48, 30, 18, 54, 13]) == (7, 1)", "assert max_occurrences([14, 18, 16, 27, 36, 91, 78, 50, 27, 15, 51, 5]) == (27, 2)", "assert max_occurrences([8, 23, 15, 27, 45, 89, 79, 47, 35, 16, 47, 14]) == (47, 2)", "assert max_occurrences([5, 20, 25, 29, 45, 95, 84, 51, 32, 19, 50, 10]) == (5, 1)", "assert max_occurrences([13, 15, 16, 28, 40, 94, 76, 54, 29, 25, 50, 11]) == (13, 1)", "assert max_occurrences([11, 22, 21, 25, 35, 88, 82, 52, 34, 21, 53, 14]) == (21, 2)", "assert max_occurrences([11, 24, 22, 25, 41, 86, 80, 48, 30, 21, 55, 7]) == (11, 1)", "assert max_occurrences([5, 16, 23, 26, 43, 91, 75, 51, 27, 20, 49, 15]) == (5, 1)", "assert max_occurrences([11, 21, 16, 33, 36, 85, 82, 54, 34, 16, 49, 6]) == (16, 2)", "assert max_occurrences([10, 17, 21, 28, 38, 92, 75, 55, 35, 16, 49, 9]) == (10, 1)", "assert max_occurrences([12, 20, 20, 27, 38, 91, 80, 51, 29, 21, 52, 10]) == (20, 2)", "assert max_occurrences([8, 22, 19, 31, 43, 87, 78, 48, 27, 21, 46, 11]) == (8, 1)", "assert max_occurrences([10, 19, 17, 26, 44, 90, 82, 51, 31, 15, 53, 10]) == (10, 2)", "assert max_occurrences([12, 19, 19, 34, 39, 93, 83, 51, 33, 21, 47, 7]) == (19, 2)", "assert max_occurrences([9, 24, 22, 30, 40, 91, 85, 50, 33, 20, 52, 7]) == (9, 1)", "assert max_occurrences([10, 18, 22, 25, 40, 92, 77, 51, 31, 21, 46, 13]) == (10, 1)", "assert max_occurrences([15, 25, 25, 35, 35, 88, 80, 51, 28, 20, 45, 6]) == (25, 2)", "assert max_occurrences([14, 23, 23, 25, 43, 93, 79, 51, 31, 25, 52, 7]) == (23, 2)", "assert max_occurrences([10, 21, 17, 33, 45, 87, 79, 45, 35, 21, 45, 14]) == (45, 3)", "assert max_occurrences([15, 16, 16, 32, 44, 93, 79, 49, 33, 17, 53, 13]) == (16, 2)", "assert max_occurrences([12, 19, 24, 35, 39, 89, 78, 47, 35, 17, 50, 11]) == (35, 2)", "assert max_occurrences([11, 23, 22, 25, 45, 93, 84, 46, 28, 18, 54, 13]) == (11, 1)", "assert max_occurrences([12, 25, 17, 26, 35, 87, 84, 52, 35, 19, 49, 11]) == (35, 2)", "assert max_occurrences([10, 25, 23, 25, 38, 93, 79, 51, 34, 17, 45, 14]) == (25, 2)", "assert max_occurrences([9, 22, 18, 26, 39, 88, 81, 49, 26, 17, 47, 15]) == (26, 2)", "assert max_occurrences([14, 17, 19, 34, 36, 89, 84, 55, 25, 22, 46, 8]) == (14, 1)", "assert max_occurrences([13, 15, 19, 26, 43, 93, 80, 52, 34, 20, 49, 11]) == (13, 1)", "assert max_occurrences([6, 25, 21, 26, 38, 86, 76, 54, 30, 18, 45, 11]) == (6, 1)", "assert max_occurrences([14, 25, 17, 35, 41, 86, 83, 48, 28, 18, 46, 12]) == (14, 1)", "assert max_occurrences([7, 25, 23, 26, 39, 92, 85, 51, 25, 18, 46, 6]) == (25, 2)", "assert max_occurrences([9, 15, 19, 35, 44, 94, 78, 47, 30, 15, 48, 9]) == (9, 2)", "assert max_occurrences([11, 17, 18, 26, 37, 88, 79, 52, 25, 15, 53, 7]) == (11, 1)", "assert max_occurrences([13, 24, 24, 35, 37, 89, 79, 50, 28, 20, 46, 14]) == (24, 2)"], "entry_point": "max_occurrences", "repair_prompt": ["Write a function max_occurrences to find the item with maximum frequency in a given list. To solve this problem, you need to count the frequency of each item in the list. You should identify the item that appears most frequently among all the items.\nmax_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n", "Write a function max_occurrences to find the item with maximum frequency in a given list. Identify the item that appears most frequently among all the items and return it. To solve this problem, you need to count the frequency of each item in the list.\nmax_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n", "Write a function max_occurrences to find the item with maximum frequency in a given list by counting the frequency of each item to identify the most frequent one.\nmax_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import Counter\n\ndef max_occurrences(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Function to find the item with maximum frequency in a given list\n    \n    Args:\n    arr: List of integers\n    \n    Returns:\n    Tuple containing the item with maximum frequency and its frequency\n    \"\"\"\n    \n    if not arr:\n        return None\n    \n    counts = Counter(arr)\n    max_item = max(counts, key=counts.get)\n    \n    return max_item, counts[max_item]\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import Counter\n\ndef max_occurrences(arr: List[int]) -> Tuple[int, int]:\n    counts = Counter(arr)\n    if not counts:\n        return None\n    \n    max_item = min(counts, key=lambda x: (-counts[x], x))\n    max_count = counts[max_item]\n    \n    return max_item, max_count\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import Counter\n\ndef max_occurrences(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Function to find the item with maximum frequency in a given list\n    Returns a tuple with the most frequent item and its frequency count\n    \"\"\"\n    if not arr:\n        return None\n    \n    count = Counter(arr)\n    max_freq = max(count.values())\n    most_frequent_item = min([key for key, value in count.items() if value == max_freq])\n    \n    return most_frequent_item, max_freq\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import Counter\n\ndef max_occurrences(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Count the frequency of each item in the list and return the item with the maximum frequency.\n    \n    Args:\n        arr (List[int]): Input list of integers\n    \n    Returns:\n        Tuple[int, int]: Item with maximum frequency and its frequency as a tuple\n    \"\"\"\n    if not arr:\n        return None\n    \n    counter = Counter(arr)\n    most_common_item = counter.most_common(1)[0]\n    \n    return most_common_item\n\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import Counter\n\ndef max_occurrences(arr: List[int]) -> Tuple[int, int]:\n    counts = Counter(arr)\n    max_item = max(counts, key=counts.get)\n    return max_item, counts[max_item]\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import Counter\n\ndef max_occurrences(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Function to find the item with maximum frequency in a given list\n    \n    Args:\n    arr: List of integers\n    \n    Returns:\n    Tuple containing the item with maximum frequency and its frequency\n    \"\"\"\n    if not arr:\n        return None\n    \n    counter = Counter(arr)\n    max_item = max(counter, key=counter.get)\n    \n    return max_item, counter[max_item]\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import Counter\n\ndef max_occurrences(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Function to find the item with maximum frequency in a given list\n    Input: arr - List of integers\n    Output: Tuple containing the item with maximum frequency and its frequency\n    \"\"\"\n\n    if not arr:\n        return None\n\n    count = Counter(arr)\n    max_item = max(count, key=count.get)\n    max_freq = count[max_item]\n\n    return max_item, max_freq\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import Counter\n\ndef max_occurrences(arr: List) -> Tuple:\n    \"\"\"\n    Function to find the item with maximum frequency in a given list\n    \n    Args:\n    arr (List): Input list of items\n    \n    Returns:\n    Tuple: Item with maximum frequency along with its frequency\n    \"\"\"\n    \n    counts = Counter(arr)\n    max_item = max(counts, key=counts.get)\n    max_count = counts[max_item]\n    \n    return max_item, max_count\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import Counter\n\ndef max_occurrences(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Function to find the item with maximum frequency in a given list\n    Input: arr - List of integers\n    Output: Tuple containing the item with maximum frequency and its frequency\n    Example: max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) -> (2, 5)\n    \"\"\"\n    if not arr:\n        return None\n    \n    count = Counter(arr)\n    max_freq = max(count.values())\n    \n    most_common = [key for key, value in count.items() if value == max_freq]\n    \n    return min(most_common), max_freq\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import Counter\n\ndef max_occurrences(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Function to find the item with maximum frequency in a given list\n    \n    Args:\n    arr: List of integers\n    \n    Returns:\n    Tuple containing the item with maximum frequency and its frequency\n    \"\"\"\n    \n    if not arr:\n        return None\n    \n    count = Counter(arr)\n    max_freq = max(count.values())\n    most_common = [key for key, value in count.items() if value == max_freq]\n    \n    return most_common[0], max_freq\n"], "plans": ["requirement pool:\n- Implement a function to count the frequency of each item in the list\n- Identify the item with the maximum frequency\n- Optimize the algorithm for performance on large datasets\nWe will use the Counter class from the collections module in Python to efficiently count the frequency of each item in the list and then identify the item with the maximum frequency.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'frequency'\n    Explanation: The core concept here is to identify the item that appears most frequently in the given list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': means that we need to find the item with the highest frequency in the list\n\n# [code logic]\n    1. Import Counter class from collections module\n    2. Use Counter to count the frequency of each item in the list\n    3. Find the item with the maximum frequency\n    4. Return the item with its frequency as a tuple\n\n# [edge case] \n    max_occurrences([1, 1, 2, 2, 3, 3]) = (1, 2)\n    Explanation: Both items 1 and 2 appear twice, but since 1 is smaller than 2, it is returned as the result.\n    max_occurrences([1, 2, 3, 4, 5]) = (1, 1)\n    Explanation: All items appear only once, so the smallest item is returned with a frequency of 1.\n    max_occurrences([]) = None\n    Explanation: When the list is empty, there are no items to count, so the function returns None.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not lst:\n            return None\n        (other code)\n", "requirement pool:\n- Implement a function to count item frequencies\n- Ensure the function handles edge cases gracefully\n- Optimize the function for large datasets\nWe will use the Counter class from the collections module in Python to efficiently count item frequencies in the given list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'frequency': Refers to the number of times an item appears in a list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': Indicates the highest frequency of an item in the list.\n\n# [code logic]\n    1. Import Counter class from collections module.\n    2. Use Counter to count the frequency of each item in the list.\n    3. Find the item with the maximum frequency.\n    4. Return the item with its frequency as a tuple.\n\n# [edge case] \n    max_occurrences([1, 1, 2, 2, 3, 3]) == (1, 2)\n    Explanation: Both items 1 and 2 have the same maximum frequency of 2, but we return the smallest item in case of a tie.\n    \n    max_occurrences([1, 2, 3, 4, 5]) == (1, 1)\n    Explanation: All items have a frequency of 1, so the function returns the first item with frequency 1.\n\n    max_occurrences([]) == None\n    Explanation: When the list is empty, there are no items to find the maximum frequency for.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where there are ties for maximum frequency and when the list is empty.\n", "requirement pool:\n- Implement a function to count the frequency of each item in a list\n- Identify the item with the highest frequency and return it along with the frequency count\n- Optimize the algorithm for efficiency and scalability\nWe will use the collections library in Python to efficiently count the frequency of each item in the list and then identify the item with the highest frequency.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'frequency'\n    Explanation: It refers to the number of times an item appears in the list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': means finding the item with the highest frequency\n\n# [code logic]\n    Since the plan already mentions using the collections library to count frequencies and identify the item with the highest frequency, the code logic would involve:\n    - Importing the collections library\n    - Using Counter to count the frequency of each item in the list\n    - Finding the item with the maximum frequency\n    - Returning the item with its frequency\n\n# [edge case] \n    max_occurrences([1, 1, 2, 2, 3, 3]) == (1, 2)\n    Explanation: Both items 1 and 2 have the same maximum frequency of 2, but since 1 is smaller than 2, it is returned as the result.\n    max_occurrences([1, 2, 3, 4, 5]) == (1, 1)\n    Explanation: All items have a frequency of 1, so the smallest item (1) is returned as the result.\n    max_occurrences([]) == None\n    Explanation: When the list is empty, there are no items to count, so None is returned.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan using the collections library efficiently handles different scenarios.\n", "requirement pool:\n- Implement max_occurrences function to accurately count item frequencies\n- Optimize the function for performance to handle large datasets efficiently\n- Include error handling to deal with invalid inputs gracefully\nWe will use the Counter class from the collections module in Python to efficiently count item frequencies in the given list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'frequency': Refers to the number of times an item appears in a list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': Indicates the highest frequency of an item in the list.\n\n# [code logic]\n    1. Import Counter class from collections module.\n    2. Use Counter to count the frequency of each item in the list.\n    3. Find the item with the maximum frequency.\n    4. Return the item with its frequency as a tuple.\n\n# [edge case] \n    max_occurrences([1, 1, 2, 2, 3, 3]) = (1, 2)\n    Explanation: Both items 1 and 2 have the same maximum frequency of 2, but we return the smallest item in case of a tie.\n    max_occurrences([4, 4, 4, 4]) = (4, 4)\n    Explanation: Item 4 has the maximum frequency of 4 in the list.\n    max_occurrences([]) = None\n    Explanation: When the list is empty, there are no items to find the maximum frequency.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic implemented covers scenarios where there are ties for maximum frequency and empty lists.\n", "requirement pool:\n- Implement max_occurrences function to accurately find the most frequent item\n- Ensure the function can handle large input lists efficiently\n- Optimize the frequency counting algorithm for better performance\nWe will use the Counter class from the collections module in Python to efficiently count the frequency of items in the given list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'frequency'\n    Explanation: The core concept here is to find the item that appears most frequently in the given list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': means finding the item with the highest frequency in the list\n\n# [code logic]\n    Since the plan already suggests using the Counter class from the collections module in Python, we can directly implement the code using this approach.\n\n```python\nfrom collections import Counter\n\ndef max_occurrences(lst):\n    freq = Counter(lst)\n    max_freq = max(freq.values())\n    most_common = [k for k, v in freq.items() if v == max_freq]\n    return most_common[0], max_freq\n```\n\n# [edge case] \n    max_occurrences([1, 1, 2, 2, 3, 3]) = (1, 2)\n    Explanation: Both items 1 and 2 appear twice, but since 1 is smaller than 2, it is returned as the result.\n    max_occurrences([1, 2, 3, 4, 5]) = (1, 1)\n    Explanation: All items appear only once, so the smallest item is returned as the result.\n    max_occurrences([]) = None\n    Explanation: When the list is empty, there are no items to count, so None is returned.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where there are multiple items with the same maximum frequency.\n", "requirement pool:\n- Implement a function to count item frequencies accurately\n- Ensure the function can handle large datasets efficiently\n- Optimize the algorithm for improved performance\nWe will use the collections library in Python to efficiently count the frequency of items in the given list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'frequency': It refers to the number of times an item appears in a list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': It indicates the highest frequency of an item in the list.\n\n# [code logic]\n    1. Import the Counter class from the collections module.\n    2. Use Counter to count the frequency of each item in the list.\n    3. Find the item with the maximum frequency using the most_common() method of Counter.\n    4. Return the item with its frequency as a tuple.\n\n# [edge case] \n    max_occurrences([1, 1, 2, 2, 3, 3]) == (1, 2)\n    Explanation: Both items 1 and 2 have the same maximum frequency of 2, but we return the smallest item in case of a tie.\n    \n    max_occurrences([1, 2, 3, 4, 5]) == (1, 1)\n    Explanation: All items have a frequency of 1, so the function returns the first item encountered.\n\n    max_occurrences([]) == None\n    Explanation: When the list is empty, there are no items to find the maximum frequency, so None is returned.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where there are ties for maximum frequency and when the list is empty.\n", "requirement pool:\n- Implement max_occurrences function to accurately find the most frequent item\n- Optimize the function for performance on large input lists\n- Ensure the function handles edge cases gracefully\nWe will use the collections library in Python to efficiently count the frequency of items in the given list and then identify the item with the maximum frequency.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'frequency'\n    Explanation: It refers to the number of times an item appears in a list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': It indicates the highest frequency of an item in the list.\n\n# [code logic]\n    1. Import the Counter class from the collections module.\n    2. Use Counter to count the frequency of each item in the list.\n    3. Find the item with the maximum frequency.\n    4. Return the item with its frequency as a tuple.\n\n# [edge case] \n    max_occurrences([1, 1, 2, 2, 3, 3]) = (1, 2)\n    Explanation: Both items 1 and 2 have the same maximum frequency of 2, but we return the smallest item.\n    max_occurrences([1, 2, 3, 4]) = (1, 1)\n    Explanation: All items have a frequency of 1, so the function returns the smallest item with its frequency.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.\n", "requirement pool:\n- Implement a function to count item frequencies\n- Ensure the function can handle large datasets efficiently\n- Include error handling for invalid inputs\nWe will use the Counter class from the collections module in Python to efficiently count the frequency of items in the given list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'frequency': Refers to the number of times an item appears in a list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': Indicates the highest frequency of an item in the list.\n\n# [code logic]\n    1. Import Counter class from collections module.\n    2. Use Counter to count the frequency of each item in the list.\n    3. Find the item with the maximum frequency.\n    4. Return the item with its frequency as a tuple.\n\n# [edge case] \n    max_occurrences([1, 1, 2, 2, 3, 3]) = (1, 2)\n    Explanation: Both items 1 and 2 have the same maximum frequency of 2, but since 1 is smaller, it is returned.\n    max_occurrences([1, 2, 3, 4, 5]) = (1, 1)\n    Explanation: All items have a frequency of 1, so the smallest item is returned.\n    max_occurrences([]) = None\n    Explanation: When the list is empty, there are no items to count, so None is returned.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The Counter class efficiently handles counting frequencies and finding the maximum occurrence.\n", "requirement pool:\n- Implement max_occurrences function to accurately find the most frequent item\n- Ensure the function can handle large datasets efficiently\n- Optimize the algorithm for improved performance\nWe will use the collections library in Python to efficiently count the frequency of items in the given list and then return the item with the maximum frequency.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'frequency'\n    Explanation: It refers to the number of times an item appears in a list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': It indicates the highest value or frequency in this context.\n\n# [code logic]\n    We will use the collections library in Python to efficiently count the frequency of items in the given list and then return the item with the maximum frequency.\n\n# [edge case] \n    max_occurrences([1, 1, 2, 2, 3, 3]) == (1, 2)\n    Explanation: Both items 1 and 2 have the same maximum frequency of 2, but since 1 is smaller than 2, it will be returned as the result.\n    max_occurrences([1, 2, 3, 4, 5]) == (1, 1)\n    Explanation: All items have a frequency of 1, so the function will return the smallest item with the maximum frequency.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided using the collections library efficiently handles finding the item with maximum frequency.\n", "requirement pool:\n- Implement a function to count the frequency of each item in the list\n- Identify the item with the highest frequency\n- Handle edge cases like empty lists or multiple items with the same maximum frequency\nWe will use the Counter class from the collections module in Python to efficiently count the frequency of each item in the list and then identify the item with the highest frequency.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'frequency'\n    Explanation: It refers to the number of times an item appears in the list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': It means the highest frequency among all items in the list.\n\n# [code logic]\n    1. Import Counter class from collections module.\n    2. Use Counter to count the frequency of each item in the list.\n    3. Find the item with the maximum frequency.\n    4. Return the item with its frequency as a tuple.\n\n# [edge case] \n    max_occurrences([1, 1, 2, 2, 3, 3]) = (1, 2)\n    Explanation: Both items 1 and 2 have the same maximum frequency of 2, but we return the smallest item.\n    max_occurrences([1, 2, 3, 4, 5]) = (1, 1)\n    Explanation: All items have a frequency of 1, so the function returns the smallest item with frequency 1.\n    max_occurrences([]) = None\n    Explanation: When the list is empty, there are no items to count, so the function returns None.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic covers scenarios where there are ties for maximum frequency or when the list is empty.\n"], "test": ["def check(max_occurrences):\n\tassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)", "def check(max_occurrences):\n\tassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)", "def check(max_occurrences):\n\tassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)", "def check(max_occurrences):\n\tassert max_occurrences([3, 2, 8, 3, 11, 10, 5, 1, 3, 3, 4, 6, 2, 5, 6, 7, 6, 2, 4, 6, 7]) == (3, 4)", "def check(max_occurrences):\n\tassert max_occurrences([5, 6, 7, 8, 12, 14, 13, 2, 10, 3, 2, 5, 5, 3, 7, 7, 1, 10, 4, 1, 2]) == (5, 3)", "def check(max_occurrences):\n\tassert max_occurrences([7, 8, 13, 5, 12, 13, 3, 4, 10, 6, 1, 4, 4, 1, 6, 5, 6, 2, 14, 3, 3]) == (3, 3)", "def check(max_occurrences):\n\tassert max_occurrences([5, 2, 5, 7, 6, 8, 10, 1, 2, 2, 5, 6, 2, 1, 6, 4, 8, 8, 9, 5, 2]) == (2, 5)", "def check(max_occurrences):\n\tassert max_occurrences([7, 4, 6, 6, 6, 5, 6, 3, 10, 4, 6, 2, 3, 7, 8, 3, 4, 3, 5, 6, 2]) == (6, 6)", "def check(max_occurrences):\n\tassert max_occurrences([5, 1, 3, 4, 6, 14, 10, 3, 8, 1, 3, 9, 4, 3, 5, 2, 4, 1, 11, 6, 6]) == (3, 4)", "def check(max_occurrences):\n\tassert max_occurrences([6, 5, 8, 3, 4, 4, 9, 2, 11, 4, 2, 6, 4, 5, 7, 2, 4, 1, 14, 4, 5]) == (4, 6)", "def check(max_occurrences):\n\tassert max_occurrences([2, 6, 7, 3, 7, 7, 8, 2, 9, 3, 4, 4, 2, 7, 6, 1, 1, 7, 12, 5, 2]) == (7, 5)", "def check(max_occurrences):\n\tassert max_occurrences([5, 4, 9, 1, 3, 7, 9, 1, 7, 5, 5, 2, 6, 4, 1, 7, 1, 5, 6, 4, 4]) == (5, 4)", "def check(max_occurrences):\n\tassert max_occurrences([6, 8, 9, 8, 8, 8, 11, 6, 11, 9, 6, 9, 5, 1, 4, 5, 1, 5, 13, 4, 6]) == (6, 4)", "def check(max_occurrences):\n\tassert max_occurrences([7, 6, 7, 5, 7, 10, 3, 6, 2, 9, 2, 1, 4, 6, 5, 7, 9, 7, 4, 4, 5]) == (7, 5)", "def check(max_occurrences):\n\tassert max_occurrences([7, 3, 9, 8, 12, 6, 8, 4, 10, 7, 2, 6, 6, 3, 1, 1, 6, 10, 7, 2, 6]) == (6, 5)", "def check(max_occurrences):\n\tassert max_occurrences([5, 3, 10, 7, 10, 8, 7, 1, 11, 3, 3, 6, 1, 2, 8, 5, 2, 3, 9, 4, 2]) == (3, 4)", "def check(max_occurrences):\n\tassert max_occurrences([4, 1, 5, 3, 10, 12, 10, 4, 9, 7, 3, 8, 2, 5, 6, 5, 3, 11, 10, 6, 7]) == (5, 3)", "def check(max_occurrences):\n\tassert max_occurrences([7, 4, 9, 7, 8, 10, 11, 3, 11, 9, 6, 9, 5, 7, 7, 7, 9, 10, 11, 6, 3]) == (7, 5)", "def check(max_occurrences):\n\tassert max_occurrences([4, 8, 4, 5, 4, 13, 13, 2, 10, 7, 6, 7, 2, 5, 5, 6, 2, 7, 13, 6, 5]) == (5, 4)", "def check(max_occurrences):\n\tassert max_occurrences([7, 7, 8, 3, 2, 6, 5, 3, 8, 2, 2, 10, 6, 2, 8, 4, 8, 4, 5, 3, 4]) == (8, 4)", "def check(max_occurrences):\n\tassert max_occurrences([6, 4, 3, 6, 10, 7, 8, 4, 4, 10, 5, 11, 4, 5, 8, 3, 2, 8, 6, 3, 6]) == (6, 4)", "def check(max_occurrences):\n\tassert max_occurrences([6, 3, 7, 1, 2, 10, 10, 7, 3, 7, 2, 6, 2, 2, 1, 5, 8, 9, 14, 1, 7]) == (7, 4)", "def check(max_occurrences):\n\tassert max_occurrences([5, 7, 6, 7, 11, 14, 5, 5, 1, 10, 3, 7, 1, 7, 4, 7, 2, 7, 14, 4, 2]) == (7, 6)", "def check(max_occurrences):\n\tassert max_occurrences([5, 6, 11, 7, 3, 11, 7, 2, 9, 5, 6, 1, 1, 6, 4, 7, 8, 10, 6, 2, 1]) == (6, 4)", "def check(max_occurrences):\n\tassert max_occurrences([2, 4, 6, 9, 5, 8, 3, 1, 11, 7, 5, 11, 5, 2, 2, 3, 7, 5, 6, 6, 2]) == (2, 4)", "def check(max_occurrences):\n\tassert max_occurrences([1, 4, 6, 8, 6, 5, 7, 6, 10, 3, 1, 2, 4, 4, 7, 2, 2, 6, 11, 5, 1]) == (6, 4)", "def check(max_occurrences):\n\tassert max_occurrences([3, 8, 12, 8, 6, 7, 6, 1, 8, 6, 3, 7, 1, 2, 1, 6, 9, 10, 13, 4, 2]) == (6, 4)", "def check(max_occurrences):\n\tassert max_occurrences([3, 3, 13, 8, 10, 14, 10, 3, 4, 8, 5, 1, 2, 4, 8, 4, 2, 7, 8, 4, 7]) == (8, 4)", "def check(max_occurrences):\n\tassert max_occurrences([4, 2, 11, 3, 9, 4, 8, 6, 4, 1, 4, 4, 5, 4, 4, 5, 7, 7, 14, 1, 4]) == (4, 8)", "def check(max_occurrences):\n\tassert max_occurrences([6, 3, 4, 4, 6, 7, 10, 5, 3, 6, 4, 2, 4, 6, 3, 6, 9, 9, 14, 1, 4]) == (6, 5)", "def check(max_occurrences):\n\tassert max_occurrences([3, 1, 5, 2, 4, 8, 8, 7, 5, 10, 1, 7, 2, 2, 8, 5, 8, 5, 6, 6, 1]) == (5, 4)", "def check(max_occurrences):\n\tassert max_occurrences([7, 6, 8, 4, 6, 12, 11, 2, 9, 3, 1, 10, 4, 5, 6, 7, 8, 1, 13, 6, 2]) == (6, 4)", "def check(max_occurrences):\n\tassert max_occurrences([6, 8, 12, 1, 10, 12, 5, 2, 7, 4, 3, 5, 3, 2, 2, 2, 5, 8, 12, 2, 4]) == (2, 5)", "def check(max_occurrences):\n\tassert max_occurrences([4, 2, 8, 8, 3, 9, 7, 5, 3, 9, 4, 6, 1, 1, 8, 1, 6, 1, 11, 6, 1]) == (1, 5)", "def check(max_occurrences):\n\tassert max_occurrences([7, 2, 7, 1, 9, 5, 4, 1, 2, 3, 6, 5, 5, 2, 2, 5, 9, 10, 12, 1, 1]) == (2, 4)", "def check(max_occurrences):\n\tassert max_occurrences([5, 8, 4, 7, 3, 4, 12, 6, 4, 7, 6, 10, 4, 7, 8, 4, 7, 8, 7, 2, 5]) == (4, 5)", "def check(max_occurrences):\n\tassert max_occurrences([5, 3, 8, 2, 10, 14, 9, 4, 11, 17, 10, 9, 10, 17, 13, 17, 16]) == (10, 3)", "def check(max_occurrences):\n\tassert max_occurrences([4, 5, 4, 5, 3, 4, 13, 12, 13, 10, 16, 14, 14, 18, 12, 14, 14]) == (14, 4)", "def check(max_occurrences):\n\tassert max_occurrences([6, 4, 11, 8, 5, 11, 6, 5, 6, 18, 9, 14, 10, 9, 20, 14, 18]) == (6, 3)", "def check(max_occurrences):\n\tassert max_occurrences([2, 7, 9, 5, 2, 4, 11, 3, 8, 14, 11, 14, 14, 8, 20, 20, 21]) == (14, 3)", "def check(max_occurrences):\n\tassert max_occurrences([4, 1, 12, 6, 5, 10, 5, 2, 7, 10, 13, 7, 7, 13, 16, 14, 18]) == (7, 3)", "def check(max_occurrences):\n\tassert max_occurrences([3, 6, 12, 6, 6, 5, 5, 9, 11, 14, 19, 14, 11, 12, 11, 17, 16]) == (6, 3)", "def check(max_occurrences):\n\tassert max_occurrences([1, 2, 4, 3, 4, 14, 11, 10, 10, 12, 13, 13, 11, 15, 14, 11, 18]) == (11, 3)", "def check(max_occurrences):\n\tassert max_occurrences([7, 6, 7, 8, 4, 13, 11, 3, 10, 20, 9, 5, 7, 8, 20, 18, 21]) == (7, 3)", "def check(max_occurrences):\n\tassert max_occurrences([1, 3, 12, 6, 3, 10, 7, 6, 4, 20, 19, 5, 15, 8, 20, 18, 15]) == (3, 2)", "def check(max_occurrences):\n\tassert max_occurrences([5, 5, 5, 8, 2, 8, 12, 11, 7, 11, 11, 10, 9, 11, 12, 17, 16]) == (11, 4)", "def check(max_occurrences):\n\tassert max_occurrences([3, 6, 8, 4, 7, 13, 11, 5, 6, 13, 9, 12, 17, 18, 12, 20, 13]) == (13, 3)", "def check(max_occurrences):\n\tassert max_occurrences([5, 1, 3, 5, 9, 14, 10, 9, 4, 12, 12, 5, 13, 11, 13, 17, 22]) == (5, 3)", "def check(max_occurrences):\n\tassert max_occurrences([5, 1, 5, 4, 4, 9, 12, 9, 4, 14, 11, 11, 7, 16, 18, 15, 23]) == (4, 3)", "def check(max_occurrences):\n\tassert max_occurrences([7, 2, 10, 1, 3, 11, 4, 12, 13, 11, 13, 10, 15, 16, 19, 20, 23]) == (10, 2)", "def check(max_occurrences):\n\tassert max_occurrences([6, 7, 8, 9, 6, 11, 4, 10, 10, 15, 19, 11, 11, 16, 19, 20, 15]) == (11, 3)", "def check(max_occurrences):\n\tassert max_occurrences([7, 4, 13, 9, 11, 14, 5, 3, 13, 14, 18, 7, 17, 13, 14, 14, 13]) == (13, 4)", "def check(max_occurrences):\n\tassert max_occurrences([7, 2, 12, 9, 2, 11, 10, 5, 7, 17, 10, 7, 16, 8, 20, 13, 19]) == (7, 3)", "def check(max_occurrences):\n\tassert max_occurrences([5, 2, 4, 3, 6, 8, 9, 5, 9, 13, 18, 8, 17, 9, 21, 18, 14]) == (9, 3)", "def check(max_occurrences):\n\tassert max_occurrences([2, 7, 8, 9, 3, 7, 9, 8, 5, 16, 10, 7, 15, 15, 17, 19, 18]) == (7, 3)", "def check(max_occurrences):\n\tassert max_occurrences([2, 8, 5, 6, 9, 4, 13, 6, 13, 13, 14, 11, 7, 11, 15, 21, 15]) == (13, 3)", "def check(max_occurrences):\n\tassert max_occurrences([1, 6, 10, 8, 8, 9, 9, 8, 9, 20, 17, 14, 16, 17, 12, 15, 16]) == (8, 3)", "def check(max_occurrences):\n\tassert max_occurrences([6, 6, 10, 3, 2, 12, 6, 7, 11, 16, 19, 11, 10, 15, 18, 20, 19]) == (6, 3)", "def check(max_occurrences):\n\tassert max_occurrences([4, 8, 13, 2, 8, 14, 3, 10, 6, 20, 16, 9, 16, 10, 13, 14, 21]) == (8, 2)", "def check(max_occurrences):\n\tassert max_occurrences([6, 8, 8, 1, 2, 13, 3, 8, 11, 18, 9, 10, 8, 14, 15, 17, 18]) == (8, 4)", "def check(max_occurrences):\n\tassert max_occurrences([5, 3, 7, 8, 12, 9, 10, 6, 14, 19, 18, 5, 8, 18, 21, 17, 21]) == (5, 2)", "def check(max_occurrences):\n\tassert max_occurrences([6, 4, 10, 1, 12, 8, 12, 3, 14, 19, 9, 6, 17, 14, 17, 11, 19]) == (6, 2)", "def check(max_occurrences):\n\tassert max_occurrences([2, 6, 12, 5, 7, 13, 5, 8, 11, 11, 11, 6, 11, 13, 15, 14, 19]) == (11, 4)", "def check(max_occurrences):\n\tassert max_occurrences([7, 4, 9, 2, 10, 13, 12, 12, 13, 18, 17, 8, 17, 12, 18, 14, 13]) == (13, 3)", "def check(max_occurrences):\n\tassert max_occurrences([7, 2, 5, 3, 10, 13, 8, 9, 7, 18, 12, 10, 10, 15, 18, 20, 18]) == (10, 3)", "def check(max_occurrences):\n\tassert max_occurrences([5, 5, 13, 3, 12, 12, 8, 4, 4, 20, 18, 11, 17, 8, 13, 19, 22]) == (5, 2)", "def check(max_occurrences):\n\tassert max_occurrences([1, 5, 12, 9, 9, 9, 11, 7, 11, 14, 12, 8, 13, 13, 12, 18, 22]) == (12, 3)", "def check(max_occurrences):\n\tassert max_occurrences([5, 4, 3, 6, 6, 9, 9, 2, 12, 13, 10, 15, 17, 14, 17, 13, 20]) == (6, 2)", "def check(max_occurrences):\n\tassert max_occurrences([3, 1, 7, 4, 9, 12, 11, 3, 13, 20, 13, 10, 12, 18, 15, 20, 15]) == (3, 2)", "def check(max_occurrences):\n\tassert max_occurrences([7, 20, 22, 31, 35, 87, 85, 48, 30, 18, 54, 13]) == (7, 1)", "def check(max_occurrences):\n\tassert max_occurrences([14, 18, 16, 27, 36, 91, 78, 50, 27, 15, 51, 5]) == (27, 2)", "def check(max_occurrences):\n\tassert max_occurrences([8, 23, 15, 27, 45, 89, 79, 47, 35, 16, 47, 14]) == (47, 2)", "def check(max_occurrences):\n\tassert max_occurrences([5, 20, 25, 29, 45, 95, 84, 51, 32, 19, 50, 10]) == (5, 1)", "def check(max_occurrences):\n\tassert max_occurrences([13, 15, 16, 28, 40, 94, 76, 54, 29, 25, 50, 11]) == (13, 1)", "def check(max_occurrences):\n\tassert max_occurrences([11, 22, 21, 25, 35, 88, 82, 52, 34, 21, 53, 14]) == (21, 2)", "def check(max_occurrences):\n\tassert max_occurrences([11, 24, 22, 25, 41, 86, 80, 48, 30, 21, 55, 7]) == (11, 1)", "def check(max_occurrences):\n\tassert max_occurrences([5, 16, 23, 26, 43, 91, 75, 51, 27, 20, 49, 15]) == (5, 1)", "def check(max_occurrences):\n\tassert max_occurrences([11, 21, 16, 33, 36, 85, 82, 54, 34, 16, 49, 6]) == (16, 2)", "def check(max_occurrences):\n\tassert max_occurrences([10, 17, 21, 28, 38, 92, 75, 55, 35, 16, 49, 9]) == (10, 1)", "def check(max_occurrences):\n\tassert max_occurrences([12, 20, 20, 27, 38, 91, 80, 51, 29, 21, 52, 10]) == (20, 2)", "def check(max_occurrences):\n\tassert max_occurrences([8, 22, 19, 31, 43, 87, 78, 48, 27, 21, 46, 11]) == (8, 1)", "def check(max_occurrences):\n\tassert max_occurrences([10, 19, 17, 26, 44, 90, 82, 51, 31, 15, 53, 10]) == (10, 2)", "def check(max_occurrences):\n\tassert max_occurrences([12, 19, 19, 34, 39, 93, 83, 51, 33, 21, 47, 7]) == (19, 2)", "def check(max_occurrences):\n\tassert max_occurrences([9, 24, 22, 30, 40, 91, 85, 50, 33, 20, 52, 7]) == (9, 1)", "def check(max_occurrences):\n\tassert max_occurrences([10, 18, 22, 25, 40, 92, 77, 51, 31, 21, 46, 13]) == (10, 1)", "def check(max_occurrences):\n\tassert max_occurrences([15, 25, 25, 35, 35, 88, 80, 51, 28, 20, 45, 6]) == (25, 2)", "def check(max_occurrences):\n\tassert max_occurrences([14, 23, 23, 25, 43, 93, 79, 51, 31, 25, 52, 7]) == (23, 2)", "def check(max_occurrences):\n\tassert max_occurrences([10, 21, 17, 33, 45, 87, 79, 45, 35, 21, 45, 14]) == (45, 3)", "def check(max_occurrences):\n\tassert max_occurrences([15, 16, 16, 32, 44, 93, 79, 49, 33, 17, 53, 13]) == (16, 2)", "def check(max_occurrences):\n\tassert max_occurrences([12, 19, 24, 35, 39, 89, 78, 47, 35, 17, 50, 11]) == (35, 2)", "def check(max_occurrences):\n\tassert max_occurrences([11, 23, 22, 25, 45, 93, 84, 46, 28, 18, 54, 13]) == (11, 1)", "def check(max_occurrences):\n\tassert max_occurrences([12, 25, 17, 26, 35, 87, 84, 52, 35, 19, 49, 11]) == (35, 2)", "def check(max_occurrences):\n\tassert max_occurrences([10, 25, 23, 25, 38, 93, 79, 51, 34, 17, 45, 14]) == (25, 2)", "def check(max_occurrences):\n\tassert max_occurrences([9, 22, 18, 26, 39, 88, 81, 49, 26, 17, 47, 15]) == (26, 2)", "def check(max_occurrences):\n\tassert max_occurrences([14, 17, 19, 34, 36, 89, 84, 55, 25, 22, 46, 8]) == (14, 1)", "def check(max_occurrences):\n\tassert max_occurrences([13, 15, 19, 26, 43, 93, 80, 52, 34, 20, 49, 11]) == (13, 1)", "def check(max_occurrences):\n\tassert max_occurrences([6, 25, 21, 26, 38, 86, 76, 54, 30, 18, 45, 11]) == (6, 1)", "def check(max_occurrences):\n\tassert max_occurrences([14, 25, 17, 35, 41, 86, 83, 48, 28, 18, 46, 12]) == (14, 1)", "def check(max_occurrences):\n\tassert max_occurrences([7, 25, 23, 26, 39, 92, 85, 51, 25, 18, 46, 6]) == (25, 2)", "def check(max_occurrences):\n\tassert max_occurrences([9, 15, 19, 35, 44, 94, 78, 47, 30, 15, 48, 9]) == (9, 2)", "def check(max_occurrences):\n\tassert max_occurrences([11, 17, 18, 26, 37, 88, 79, 52, 25, 15, 53, 7]) == (11, 1)", "def check(max_occurrences):\n\tassert max_occurrences([13, 24, 24, 35, 37, 89, 79, 50, 28, 20, 46, 14]) == (24, 2)"], "scores": [1.0, 0.7941, 0.7941, 1.0, 1.0, 1.0, 1.0, 1.0, 0.7941, 1.0], "pass_results": [true, false, false, true, true, true, true, true, false, true], "pass_test_cases_num": [102, 81, 81, 102, 102, 102, 102, 102, 81, 102], "completion": "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import Counter\n\ndef max_occurrences(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Function to find the item with maximum frequency in a given list\n    \n    Args:\n    arr: List of integers\n    \n    Returns:\n    Tuple containing the item with maximum frequency and its frequency\n    \"\"\"\n    \n    if not arr:\n        return None\n    \n    count = Counter(arr)\n    max_freq = max(count.values())\n    most_common = [key for key, value in count.items() if value == max_freq]\n    \n    return most_common[0], max_freq\n", "passed": true, "pass": true, "pass_num": 7, "round": 54, "mutate_method": "expand_one2two", "parent_index": 54}
