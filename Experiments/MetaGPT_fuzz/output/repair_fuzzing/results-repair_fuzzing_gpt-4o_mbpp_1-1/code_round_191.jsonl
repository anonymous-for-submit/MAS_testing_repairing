{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 606, "prompt": "Write a function to compute the conversion from degrees to radians. This function should take an input in degrees and return the corresponding value in radians.", "code": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian", "test_imports": [], "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(92) == 1.6057029118347832", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(62) == 1.0821041362364843", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(59) == 1.0297442586766545", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(125) == 2.181661564992912", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254"], "entry_point": "radian_degree", "repair_prompt": ["Write a function radian_degree to compute the conversion from degrees to radians. This function should take an input in degrees and return the corresponding value in radians.\nradian_degree(90)==1.5707963267948966\n", "Write a function radian_degree to compute the conversion from degrees to radians. This specific task requires a function designed to convert an angle measured in degrees. The function will output the corresponding value in radians based on the input given. This function should take an input in degrees and return the corresponding value in radians.\nradian_degree(90)==1.5707963267948966\n", "Write a function radian_degree to compute the conversion from degrees to radians, taking an input in degrees and returning the corresponding value in radians.\nradian_degree(90)==1.5707963267948966\n"], "completions": ["from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases to demonstrate the function's capability\n    test_angles = [0, 360, -90, 45, 180]\n    for angle in test_angles:\n        radians = radian_degree(angle)\n        print(f\"{angle} degrees is {radians} radians.\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n\ndef main():\n    # Test cases to validate the function\n    test_cases = [0, -90, 360, 45, 180]\n    for degrees in test_cases:\n        radians = radian_degree(degrees)\n        print(f\"{degrees} degrees is {radians} radians.\")\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    # Conversion formula: radians = degrees * (\u03c0 / 180)\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example usage:\n# result = radian_degree(90)\n# print(result)  # Output: 1.5707963267948966\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    '''\n    Convert an angle from degrees to radians.\n    \n    Parameters:\n    degrees (float): Angle in degrees.\n    \n    Returns:\n    float: Angle in radians.\n    '''\n    # Conversion formula: radians = degrees * (\u03c0 / 180)\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example usage:\n# print(radian_degree(0))       # Expected output: 0.0\n# print(radian_degree(360))     # Expected output: 6.283185307179586\n# print(radian_degree(-90))     # Expected output: -1.5707963267948966\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert an angle from degrees to radians.\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases to demonstrate the function\n    print(radian_degree(0))        # Expected output: 0.0\n    print(radian_degree(360))      # Expected output: 6.283185307179586\n    print(radian_degree(-90))      # Expected output: -1.5707963267948966\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert an angle from degrees to radians.\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases to demonstrate the function\n    print(f\"0 degrees in radians: {radian_degree(0)}\")  # Expected: 0.0\n    print(f\"180 degrees in radians: {radian_degree(180)}\")  # Expected: 3.141592653589793\n    print(f\"360 degrees in radians: {radian_degree(360)}\")  # Expected: 6.283185307179586\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n\n# Example usage:\n# print(radian_degree(0))        # Expected output: 0.0\n# print(radian_degree(360))      # Expected output: 6.283185307179586\n# print(radian_degree(-90))      # Expected output: -1.5707963267948966\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    # Conversion formula: radians = degrees \u00d7 (\u03c0 / 180)\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases to demonstrate edge cases and typical usage\n    print(f\"0 degrees in radians: {radian_degree(0)}\")  # Expected output: 0.0\n    print(f\"360 degrees in radians: {radian_degree(360)}\")  # Expected output: 6.283185307179586\n    print(f\"-90 degrees in radians: {radian_degree(-90)}\")  # Expected output: -1.5707963267948966\n    print(f\"45 degrees in radians: {radian_degree(45)}\")  # Expected output: 0.7853981633974483\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees to be converted.\n\n    Returns:\n    float: The angle in radians.\n\n    Raises:\n    ValueError: If the input is not a numeric value.\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise ValueError(\"Input must be a numeric value.\")\n    \n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example usage:\n# print(radian_degree(0))        # Expected output: 0.0\n# print(radian_degree(360))      # Expected output: 6.283185307179586\n# print(radian_degree(-90))      # Expected output: -1.5707963267948966\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    # Conversion formula: radians = degrees * (pi / 180)\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example usage:\n# print(radian_degree(0))      # Expected output: 0.0\n# print(radian_degree(360))    # Expected output: 6.283185307179586\n# print(radian_degree(-90))    # Expected output: -1.5707963267948966\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be simple to use, taking a single input in degrees and returning the corresponding radian value. The expected output for an input of 90 degrees is approximately 1.5708 radians.\nrequirement pool:\n- Implement the degree to radian conversion function\n- Ensure the function handles edge cases like 0 and 360 degrees\n- Optimize the function for performance\n- Create a user-friendly interface for input and output\n- Include documentation and examples for user guidance\nWe will use the math library in Python, which provides a built-in function `math.radians()` to convert degrees to radians accurately and efficiently. This approach ensures high performance and accuracy, meeting the product goals and user stories.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'conversion from degrees to radians'\n    Explanation: This refers to the mathematical process of converting an angle measured in degrees to its equivalent in radians. The conversion is done using the formula: radians = degrees \u00d7 (\u03c0/180).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic is straightforward as it involves using the `math.radians()` function from the Python math library to perform the conversion. This function takes an angle in degrees and returns the corresponding angle in radians.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: An angle of 0 degrees corresponds to 0 radians.\n    \n    radian_degree(360) = 6.283185307179586\n    Explanation: An angle of 360 degrees corresponds to 2\u03c0 radians, which is approximately 6.283185307179586.\n    \n    radian_degree(-90) = -1.5707963267948966\n    Explanation: An angle of -90 degrees corresponds to -\u03c0/2 radians, which is approximately -1.5707963267948966.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The `math.radians()` function inherently handles these conversions correctly, including negative angles and angles greater than 360 degrees.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be simple, efficient, and easy to use, ensuring it meets the standard mathematical conversion formula: radians = degrees * (pi/180).\nrequirement pool:\n- Implement the conversion formula using Python\n- Ensure the function handles edge cases like 0 degrees\n- Optimize the function for performance\n- Provide documentation for the function\n- Include unit tests for validation\nWe will implement the conversion formula using Python's math module, which provides a constant for pi, ensuring accurate conversion from degrees to radians. The function will be simple and efficient, handling edge cases like 0 degrees and negative inputs. We will also provide documentation and unit tests for validation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'conversion from degrees to radians'\n    Explanation: This refers to the mathematical process of converting an angle measured in degrees to an equivalent angle measured in radians. The conversion is done using the formula: radians = degrees * (pi / 180).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math module to access the constant pi.\n    2. Define the function radian_degree that takes one parameter, degrees.\n    3. Inside the function, calculate the radians using the formula: radians = degrees * (math.pi / 180).\n    4. Return the calculated radians value.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: 0 degrees is equivalent to 0 radians, as there is no angle to convert.\n    \n    radian_degree(-90) = -1.5707963267948966\n    Explanation: Negative angles are valid and should be converted using the same formula, resulting in a negative radian value.\n    \n    radian_degree(360) = 6.283185307179586\n    Explanation: A full circle (360 degrees) is equivalent to 2*pi radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The conversion formula inherently handles zero and negative inputs correctly.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be efficient and easy to use, with clear documentation to aid understanding.\nrequirement pool:\n- Implement the conversion function using Python\n- Ensure the function handles edge cases like 0 and 360 degrees\n- Optimize the function for performance\n- Provide documentation and examples\n- Test the function for accuracy\nWe will use the math module from Python's standard library to implement the conversion function. The math module provides a constant for pi, which is essential for converting degrees to radians. This approach ensures accuracy and efficiency, as the math module is optimized for such operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'conversion from degrees to radians'\n    Explanation: The requirement is to convert an angle measured in degrees to its equivalent in radians. This is a common mathematical operation where 180 degrees is equivalent to \u03c0 radians.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math module to access the constant \u03c0 (pi).\n    2. Define the function `radian_degree` that takes an input parameter `degrees`.\n    3. Use the formula to convert degrees to radians: radians = degrees * (\u03c0 / 180).\n    4. Return the calculated radians value.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: 0 degrees is equivalent to 0 radians.\n    \n    radian_degree(180) = 3.141592653589793\n    Explanation: 180 degrees is equivalent to \u03c0 radians.\n    \n    radian_degree(360) = 6.283185307179586\n    Explanation: 360 degrees is equivalent to 2\u03c0 radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The conversion formula inherently handles these cases correctly.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be simple to use and integrate into other projects. It should not require additional dependencies beyond standard Python libraries.\nrequirement pool:\n- Implement the degree to radian conversion function.\n- Ensure the function handles edge cases like 0 and 360 degrees.\n- Optimize the function for performance.\n- Include documentation and examples for usage.\n- Test the function with a variety of inputs.\nWe will implement a simple function using Python's standard math library to convert degrees to radians. This approach ensures accuracy and performance without the need for additional dependencies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'conversion'\n    Explanation: The requirement is about converting an angle from degrees to radians, which involves a mathematical transformation using a constant factor.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To convert degrees to radians, use the formula: radians = degrees * (\u03c0 / 180). This can be implemented using Python's math library, specifically the math.radians function which performs this conversion directly.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: An angle of 0 degrees corresponds to 0 radians.\n    \n    radian_degree(360) = 6.283185307179586\n    Explanation: An angle of 360 degrees corresponds to a full circle, which is 2\u03c0 radians.\n    \n    radian_degree(-90) = -1.5707963267948966\n    Explanation: Negative angles are valid and -90 degrees corresponds to -\u03c0/2 radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The conversion formula handles all angles, including zero and negative values, naturally.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be simple to use, requiring only a degree input and returning the corresponding radian value. Precision and performance are key factors.\nrequirement pool:\n- Implement the degree to radian conversion function\n- Ensure the function handles edge cases like 0 and 360 degrees\n- Optimize the function for performance\n- Include documentation and examples for usage\n- Test the function with a variety of inputs\nWe will implement a simple function using Python's built-in math module to convert degrees to radians. The math module provides a constant, math.pi, which can be used to perform the conversion accurately without needing to import additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'conversion from degrees to radians'\n    Explanation: This refers to the mathematical process of converting an angle measured in degrees to its equivalent in radians. The conversion is done using the formula: radians = degrees * (\u03c0 / 180).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math module to access the constant math.pi.\n    2. Define the function radian_degree that takes one parameter, degrees.\n    3. Inside the function, calculate the radians by multiplying the degrees by (math.pi / 180).\n    4. Return the calculated radians.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: An angle of 0 degrees is equivalent to 0 radians.\n    \n    radian_degree(360) = 6.283185307179586\n    Explanation: An angle of 360 degrees is equivalent to 2\u03c0 radians, which is approximately 6.283185307179586.\n    \n    radian_degree(-90) = -1.5707963267948966\n    Explanation: An angle of -90 degrees is equivalent to -\u03c0/2 radians, which is approximately -1.5707963267948966.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of multiplying degrees by (math.pi / 180) will correctly handle these cases.\n", "requirement analysis:\nThe function should accurately convert degrees to radians using the formula radians = degrees * (pi / 180). It should handle typical edge cases and provide results with high precision.\nrequirement pool:\n- Implement the conversion formula accurately\n- Ensure the function handles edge cases like 0 and 360 degrees\n- Optimize the function for performance\n- Provide clear documentation and examples\n- Consider adding batch conversion capabilities\nWe will use the built-in math library in Python, which provides a reliable and efficient method for converting degrees to radians using the math.radians function. This approach ensures high accuracy and performance, meeting the requirement for precise conversion and handling edge cases like 0 and 360 degrees.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'conversion from degrees to radians'\n    Explanation: The requirement is to convert an angle given in degrees to its equivalent in radians. This is a common mathematical conversion where 180 degrees is equivalent to \u03c0 radians.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math library to access the radians function.\n    2. Define the function radian_degree that takes an angle in degrees as input.\n    3. Use math.radians to convert the input degrees to radians.\n    4. Return the converted value.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: 0 degrees is equivalent to 0 radians.\n    \n    radian_degree(180) = 3.141592653589793\n    Explanation: 180 degrees is equivalent to \u03c0 radians.\n    \n    radian_degree(360) = 6.283185307179586\n    Explanation: 360 degrees is equivalent to 2\u03c0 radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The math.radians function inherently handles these conversions accurately.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be simple to use, taking a single input and returning the correct radian value. The focus is on accuracy and ease of use.\nrequirement pool:\n- Implement the degree to radian conversion function.\n- Ensure the function handles edge cases like 0 and 360 degrees.\n- Optimize the function for performance.\n- Create a user-friendly interface for input and output.\n- Include documentation and examples for user guidance.\nWe will use the math library in Python, which provides a reliable and efficient method for converting degrees to radians using the math.radians function. This ensures accuracy and performance while keeping the interface simple.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'conversion from degrees to radians'\n    Explanation: This refers to the mathematical process of converting an angle measured in degrees to an angle measured in radians. The conversion is done using the formula: radians = degrees \u00d7 (\u03c0 / 180).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math library to access the math.radians function.\n    2. Define the function radian_degree that takes an input parameter in degrees.\n    3. Use the math.radians function to convert the input degrees to radians.\n    4. Return the result.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: The conversion of 0 degrees is 0 radians because any angle of 0 degrees corresponds to 0 radians.\n    \n    radian_degree(360) = 6.283185307179586\n    Explanation: A full circle in degrees is 360, which corresponds to 2\u03c0 radians, approximately 6.283185307179586.\n\n    radian_degree(-90) = -1.5707963267948966\n    Explanation: Negative angles are valid and -90 degrees corresponds to -\u03c0/2 radians, approximately -1.5707963267948966.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The math.radians function inherently handles these cases correctly.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be simple to use, taking a single input and returning the correct output. The focus is on accuracy and ease of use.\nrequirement pool:\n- Implement the degree to radian conversion function.\n- Ensure the function handles edge cases like 0 and 360 degrees.\n- Optimize the function for performance.\n- Create a user-friendly interface for input and output.\n- Include documentation and examples for user guidance.\nWe will use the math library in Python, which provides a built-in function to convert degrees to radians. This ensures accuracy and efficiency. The function will be simple, taking a single float input representing degrees and returning a float output in radians. We will also handle edge cases like 0 and 360 degrees, and consider negative inputs by directly using the conversion formula.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'conversion from degrees to radians'\n    Explanation: This refers to the mathematical process of converting an angle measured in degrees to an equivalent angle measured in radians. The conversion is done using the formula: radians = degrees \u00d7 (\u03c0 / 180).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math library to access the constant \u03c0 (pi).\n    2. Define the function `radian_degree` that takes a single argument `degrees`.\n    3. Use the conversion formula: radians = degrees \u00d7 (\u03c0 / 180).\n    4. Return the calculated radians value.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: 0 degrees is equivalent to 0 radians, as there is no angle to convert.\n    \n    radian_degree(360) = 6.283185307179586\n    Explanation: 360 degrees is a full circle, equivalent to 2\u03c0 radians.\n    \n    radian_degree(-90) = -1.5707963267948966\n    Explanation: -90 degrees is equivalent to -\u03c0/2 radians, representing a clockwise rotation.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The conversion formula inherently handles all degree values, including zero, full circle, and negative angles.\n", "requirement analysis:\nThe function should accurately convert degrees to radians using the formula radians = degrees * (pi/180). It should handle typical input ranges and return precise results.\nrequirement pool:\n- Implement the conversion formula accurately\n- Optimize the function for performance\n- Ensure compatibility with existing Python projects\n- Provide documentation for educational purposes\n- Include error handling for invalid inputs\nWe will implement a simple function using Python's built-in math module to ensure accurate conversion from degrees to radians. The math module provides a constant for pi, which will be used in the conversion formula radians = degrees * (pi/180). This approach ensures high accuracy and performance. We will also include basic error handling to manage invalid inputs such as non-numeric values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'conversion from degrees to radians'\n    Explanation: The requirement is about converting an angle measured in degrees to an angle measured in radians. This is a common mathematical operation, where 1 degree equals \u03c0/180 radians.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math module to access the constant value of pi.\n    2. Define the function radian_degree that takes one parameter, degrees.\n    3. Inside the function, check if the input is a numeric value; if not, raise a ValueError.\n    4. Use the formula radians = degrees * (pi/180) to convert the input degrees to radians.\n    5. Return the calculated radians value.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: Zero degrees is equivalent to zero radians, as any angle of zero remains zero regardless of the unit.\n    \n    radian_degree(360) = 6.283185307179586\n    Explanation: A full circle (360 degrees) is equivalent to 2\u03c0 radians.\n    \n    radian_degree(-90) = -1.5707963267948966\n    Explanation: Negative angles are valid and -90 degrees converts to -\u03c0/2 radians.\n\n# [extra code for edge case]\n    We need extra code to handle invalid inputs.\n        import math\n        \n        def radian_degree(degrees):\n            if not isinstance(degrees, (int, float)):\n                raise ValueError(\"Input must be a numeric value.\")\n            return degrees * (math.pi / 180)\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be efficient and easy to use, with clear documentation to aid understanding.\nrequirement pool:\n- Implement the conversion formula using Python\n- Optimize the function for performance\n- Ensure the function handles edge cases\n- Provide documentation and examples\n- Test the function for accuracy\nWe will use the math module from Python's standard library to perform the conversion from degrees to radians. This module provides a reliable and efficient way to handle mathematical operations, ensuring accuracy and performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'conversion'\n    Explanation: The requirement is about converting a measurement from one unit (degrees) to another unit (radians).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math module to access the constant pi.\n    2. Define the function radian_degree that takes an input in degrees.\n    3. Use the formula radians = degrees * (pi / 180) to convert degrees to radians.\n    4. Return the calculated radians value.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: Zero degrees is equivalent to zero radians.\n    \n    radian_degree(360) = 6.283185307179586\n    Explanation: 360 degrees is a full circle, equivalent to 2*pi radians.\n    \n    radian_degree(-90) = -1.5707963267948966\n    Explanation: Negative degrees should be converted similarly, -90 degrees is equivalent to -pi/2 radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The conversion formula handles all input values correctly, including zero and negative values.\n"], "test": ["def check(radian_degree):\n\tassert radian_degree(90)==1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(60)==1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(120)==2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(92) == 1.6057029118347832", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(62) == 1.0821041362364843", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(59) == 1.0297442586766545", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(125) == 2.181661564992912", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    # Conversion formula: radians = degrees * (pi / 180)\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example usage:\n# print(radian_degree(0))      # Expected output: 0.0\n# print(radian_degree(360))    # Expected output: 6.283185307179586\n# print(radian_degree(-90))    # Expected output: -1.5707963267948966\n", "passed": true, "pass": true, "pass_num": 10, "round": 191, "mutate_method": "expand_one2two", "parent_index": 191}
