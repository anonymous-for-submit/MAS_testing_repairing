{"source_file": "Ellen's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 297, "prompt": "Write a function to flatten a given nested list structure.", "code": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ", "test_imports": [], "test_list": ["assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]", "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]", "assert flatten_list([5, 15, [17, 25], 39, 49, [65, 69, 78], [86, 97, 110, 123]]) == [5, 15, 17, 25, 39, 49, 65, 69, 78, 86, 97, 110, 123]", "assert flatten_list([5, 7, [15, 33], 39, 45, [65, 75, 82], [92, 104, 115, 116]]) == [5, 7, 15, 33, 39, 45, 65, 75, 82, 92, 104, 115, 116]", "assert flatten_list([2, 9, [22, 28], 35, 52, [58, 68, 81], [87, 100, 105, 117]]) == [2, 9, 22, 28, 35, 52, 58, 68, 81, 87, 100, 105, 117]", "assert flatten_list([5, 10, [24, 29], 42, 49, [65, 72, 85], [92, 97, 105, 119]]) == [5, 10, 24, 29, 42, 49, 65, 72, 85, 92, 97, 105, 119]", "assert flatten_list([5, 15, [24, 32], 36, 50, [63, 74, 78], [85, 101, 113, 115]]) == [5, 15, 24, 32, 36, 50, 63, 74, 78, 85, 101, 113, 115]", "assert flatten_list([4, 11, [15, 25], 37, 51, [64, 74, 82], [94, 101, 110, 117]]) == [4, 11, 15, 25, 37, 51, 64, 74, 82, 94, 101, 110, 117]", "assert flatten_list([1, 10, [17, 26], 39, 49, [65, 75, 77], [87, 103, 112, 121]]) == [1, 10, 17, 26, 39, 49, 65, 75, 77, 87, 103, 112, 121]", "assert flatten_list([3, 7, [24, 25], 43, 45, [55, 69, 83], [90, 105, 108, 121]]) == [3, 7, 24, 25, 43, 45, 55, 69, 83, 90, 105, 108, 121]", "assert flatten_list([5, 15, [16, 34], 37, 49, [61, 68, 84], [95, 95, 114, 125]]) == [5, 15, 16, 34, 37, 49, 61, 68, 84, 95, 95, 114, 125]", "assert flatten_list([3, 5, [20, 29], 35, 48, [56, 71, 85], [85, 104, 108, 122]]) == [3, 5, 20, 29, 35, 48, 56, 71, 85, 85, 104, 108, 122]", "assert flatten_list([1, 11, [22, 26], 45, 53, [61, 74, 83], [90, 97, 113, 118]]) == [1, 11, 22, 26, 45, 53, 61, 74, 83, 90, 97, 113, 118]", "assert flatten_list([5, 8, [15, 32], 41, 50, [56, 75, 82], [90, 104, 114, 125]]) == [5, 8, 15, 32, 41, 50, 56, 75, 82, 90, 104, 114, 125]", "assert flatten_list([4, 8, [23, 27], 36, 55, [60, 71, 78], [85, 105, 108, 125]]) == [4, 8, 23, 27, 36, 55, 60, 71, 78, 85, 105, 108, 125]", "assert flatten_list([2, 11, [22, 34], 41, 48, [65, 68, 82], [85, 101, 108, 124]]) == [2, 11, 22, 34, 41, 48, 65, 68, 82, 85, 101, 108, 124]", "assert flatten_list([4, 11, [19, 35], 37, 55, [63, 70, 75], [95, 97, 108, 116]]) == [4, 11, 19, 35, 37, 55, 63, 70, 75, 95, 97, 108, 116]", "assert flatten_list([1, 13, [16, 28], 40, 46, [62, 72, 78], [95, 101, 109, 117]]) == [1, 13, 16, 28, 40, 46, 62, 72, 78, 95, 101, 109, 117]", "assert flatten_list([3, 9, [23, 27], 38, 53, [63, 71, 79], [93, 104, 111, 117]]) == [3, 9, 23, 27, 38, 53, 63, 71, 79, 93, 104, 111, 117]", "assert flatten_list([2, 15, [15, 35], 37, 51, [57, 68, 75], [90, 96, 112, 116]]) == [2, 15, 15, 35, 37, 51, 57, 68, 75, 90, 96, 112, 116]", "assert flatten_list([2, 6, [23, 35], 43, 52, [56, 69, 75], [86, 95, 112, 120]]) == [2, 6, 23, 35, 43, 52, 56, 69, 75, 86, 95, 112, 120]", "assert flatten_list([5, 7, [23, 33], 44, 48, [63, 71, 76], [85, 104, 114, 117]]) == [5, 7, 23, 33, 44, 48, 63, 71, 76, 85, 104, 114, 117]", "assert flatten_list([2, 12, [20, 35], 35, 48, [57, 72, 76], [85, 95, 105, 119]]) == [2, 12, 20, 35, 35, 48, 57, 72, 76, 85, 95, 105, 119]", "assert flatten_list([5, 8, [23, 25], 45, 48, [57, 75, 80], [90, 98, 108, 120]]) == [5, 8, 23, 25, 45, 48, 57, 75, 80, 90, 98, 108, 120]", "assert flatten_list([2, 13, [19, 26], 35, 51, [64, 70, 80], [92, 100, 107, 115]]) == [2, 13, 19, 26, 35, 51, 64, 70, 80, 92, 100, 107, 115]", "assert flatten_list([2, 11, [19, 29], 44, 53, [58, 71, 82], [93, 103, 111, 116]]) == [2, 11, 19, 29, 44, 53, 58, 71, 82, 93, 103, 111, 116]", "assert flatten_list([4, 14, [19, 32], 44, 45, [59, 74, 84], [93, 97, 115, 122]]) == [4, 14, 19, 32, 44, 45, 59, 74, 84, 93, 97, 115, 122]", "assert flatten_list([2, 10, [16, 35], 43, 54, [64, 75, 85], [86, 98, 106, 116]]) == [2, 10, 16, 35, 43, 54, 64, 75, 85, 86, 98, 106, 116]", "assert flatten_list([2, 8, [16, 31], 36, 49, [55, 68, 77], [94, 103, 105, 124]]) == [2, 8, 16, 31, 36, 49, 55, 68, 77, 94, 103, 105, 124]", "assert flatten_list([1, 13, [22, 26], 37, 46, [61, 73, 81], [90, 103, 107, 124]]) == [1, 13, 22, 26, 37, 46, 61, 73, 81, 90, 103, 107, 124]", "assert flatten_list([3, 14, [22, 26], 44, 45, [56, 73, 85], [89, 103, 112, 121]]) == [3, 14, 22, 26, 44, 45, 56, 73, 85, 89, 103, 112, 121]", "assert flatten_list([3, 11, [20, 26], 38, 53, [59, 65, 76], [93, 99, 114, 122]]) == [3, 11, 20, 26, 38, 53, 59, 65, 76, 93, 99, 114, 122]", "assert flatten_list([4, 6, [16, 31], 42, 48, [55, 67, 85], [86, 97, 112, 124]]) == [4, 6, 16, 31, 42, 48, 55, 67, 85, 86, 97, 112, 124]", "assert flatten_list([5, 9, [16, 26], 35, 49, [65, 74, 77], [91, 98, 109, 119]]) == [5, 9, 16, 26, 35, 49, 65, 74, 77, 91, 98, 109, 119]", "assert flatten_list([4, 5, [25, 25], 45, 55, [63, 68, 77], [91, 105, 105, 118]]) == [4, 5, 25, 25, 45, 55, 63, 68, 77, 91, 105, 105, 118]", "assert flatten_list([[11, 21], [42], [28, 57, 26], [11, 16], [36], [37]]) == [11, 21, 42, 28, 57, 26, 11, 16, 36, 37]", "assert flatten_list([[10, 23], [40], [31, 51, 25], [15, 18], [37], [43]]) == [10, 23, 40, 31, 51, 25, 15, 18, 37, 43]", "assert flatten_list([[6, 21], [37], [30, 61, 29], [7, 22], [33], [41]]) == [6, 21, 37, 30, 61, 29, 7, 22, 33, 41]", "assert flatten_list([[12, 23], [39], [33, 53, 22], [10, 22], [38], [43]]) == [12, 23, 39, 33, 53, 22, 10, 22, 38, 43]", "assert flatten_list([[11, 17], [40], [31, 57, 24], [9, 15], [30], [43]]) == [11, 17, 40, 31, 57, 24, 9, 15, 30, 43]", "assert flatten_list([[15, 20], [35], [27, 55, 28], [13, 21], [38], [39]]) == [15, 20, 35, 27, 55, 28, 13, 21, 38, 39]", "assert flatten_list([[13, 22], [35], [31, 54, 27], [15, 24], [37], [41]]) == [13, 22, 35, 31, 54, 27, 15, 24, 37, 41]", "assert flatten_list([[12, 23], [43], [32, 55, 27], [5, 18], [32], [43]]) == [12, 23, 43, 32, 55, 27, 5, 18, 32, 43]", "assert flatten_list([[8, 21], [40], [30, 61, 21], [11, 22], [33], [42]]) == [8, 21, 40, 30, 61, 21, 11, 22, 33, 42]", "assert flatten_list([[11, 20], [39], [28, 60, 27], [8, 22], [31], [42]]) == [11, 20, 39, 28, 60, 27, 8, 22, 31, 42]", "assert flatten_list([[6, 19], [39], [31, 53, 24], [8, 23], [33], [42]]) == [6, 19, 39, 31, 53, 24, 8, 23, 33, 42]", "assert flatten_list([[9, 23], [37], [29, 55, 23], [15, 18], [35], [36]]) == [9, 23, 37, 29, 55, 23, 15, 18, 35, 36]", "assert flatten_list([[13, 23], [44], [28, 52, 24], [11, 17], [29], [40]]) == [13, 23, 44, 28, 52, 24, 11, 17, 29, 40]", "assert flatten_list([[11, 21], [36], [35, 60, 24], [7, 15], [29], [39]]) == [11, 21, 36, 35, 60, 24, 7, 15, 29, 39]", "assert flatten_list([[6, 20], [35], [30, 51, 21], [13, 19], [31], [35]]) == [6, 20, 35, 30, 51, 21, 13, 19, 31, 35]", "assert flatten_list([[14, 18], [40], [26, 53, 30], [11, 24], [34], [36]]) == [14, 18, 40, 26, 53, 30, 11, 24, 34, 36]", "assert flatten_list([[15, 16], [43], [26, 60, 25], [8, 20], [28], [37]]) == [15, 16, 43, 26, 60, 25, 8, 20, 28, 37]", "assert flatten_list([[7, 25], [35], [25, 51, 26], [8, 21], [29], [45]]) == [7, 25, 35, 25, 51, 26, 8, 21, 29, 45]", "assert flatten_list([[13, 23], [44], [35, 56, 27], [12, 16], [31], [45]]) == [13, 23, 44, 35, 56, 27, 12, 16, 31, 45]", "assert flatten_list([[9, 18], [39], [30, 61, 29], [9, 20], [31], [41]]) == [9, 18, 39, 30, 61, 29, 9, 20, 31, 41]", "assert flatten_list([[12, 16], [45], [33, 54, 24], [13, 19], [38], [43]]) == [12, 16, 45, 33, 54, 24, 13, 19, 38, 43]", "assert flatten_list([[14, 23], [38], [30, 58, 24], [7, 16], [37], [43]]) == [14, 23, 38, 30, 58, 24, 7, 16, 37, 43]", "assert flatten_list([[6, 17], [45], [26, 58, 23], [8, 18], [32], [36]]) == [6, 17, 45, 26, 58, 23, 8, 18, 32, 36]", "assert flatten_list([[15, 19], [43], [26, 57, 28], [7, 22], [34], [39]]) == [15, 19, 43, 26, 57, 28, 7, 22, 34, 39]", "assert flatten_list([[6, 16], [37], [25, 61, 25], [8, 20], [36], [42]]) == [6, 16, 37, 25, 61, 25, 8, 20, 36, 42]", "assert flatten_list([[12, 15], [41], [33, 60, 24], [10, 18], [33], [38]]) == [12, 15, 41, 33, 60, 24, 10, 18, 33, 38]", "assert flatten_list([[13, 18], [35], [26, 51, 22], [13, 19], [31], [45]]) == [13, 18, 35, 26, 51, 22, 13, 19, 31, 45]", "assert flatten_list([[15, 22], [39], [29, 53, 20], [9, 22], [29], [36]]) == [15, 22, 39, 29, 53, 20, 9, 22, 29, 36]", "assert flatten_list([[8, 15], [40], [25, 52, 23], [7, 18], [33], [35]]) == [8, 15, 40, 25, 52, 23, 7, 18, 33, 35]", "assert flatten_list([[11, 24], [39], [34, 53, 29], [5, 17], [33], [35]]) == [11, 24, 39, 34, 53, 29, 5, 17, 33, 35]", "assert flatten_list([[14, 24], [43], [27, 58, 20], [9, 16], [35], [40]]) == [14, 24, 43, 27, 58, 20, 9, 16, 35, 40]", "assert flatten_list([[9, 21], [44], [32, 54, 21], [10, 15], [36], [36]]) == [9, 21, 44, 32, 54, 21, 10, 15, 36, 36]", "assert flatten_list([[6, 18], [35], [32, 54, 25], [11, 23], [30], [42]]) == [6, 18, 35, 32, 54, 25, 11, 23, 30, 42]", "assert flatten_list([[3, 4, 4], [9, 7, 8], [10, 15, 16], [11, 4, 12]]) == [3, 4, 4, 9, 7, 8, 10, 15, 16, 11, 4, 12]", "assert flatten_list([[4, 1, 4], [3, 1, 5], [13, 11, 8], [10, 3, 4]]) == [4, 1, 4, 3, 1, 5, 13, 11, 8, 10, 3, 4]", "assert flatten_list([[3, 1, 3], [1, 6, 4], [13, 6, 16], [11, 12, 10]]) == [3, 1, 3, 1, 6, 4, 13, 6, 16, 11, 12, 10]", "assert flatten_list([[3, 2, 7], [7, 9, 8], [14, 8, 7], [5, 6, 8]]) == [3, 2, 7, 7, 9, 8, 14, 8, 7, 5, 6, 8]", "assert flatten_list([[4, 1, 2], [9, 6, 2], [9, 15, 17], [9, 5, 13]]) == [4, 1, 2, 9, 6, 2, 9, 15, 17, 9, 5, 13]", "assert flatten_list([[1, 2, 2], [8, 1, 7], [10, 14, 12], [11, 11, 10]]) == [1, 2, 2, 8, 1, 7, 10, 14, 12, 11, 11, 10]", "assert flatten_list([[2, 7, 2], [8, 4, 3], [10, 10, 13], [3, 3, 5]]) == [2, 7, 2, 8, 4, 3, 10, 10, 13, 3, 3, 5]", "assert flatten_list([[3, 6, 5], [2, 1, 8], [6, 16, 16], [4, 13, 7]]) == [3, 6, 5, 2, 1, 8, 6, 16, 16, 4, 13, 7]", "assert flatten_list([[2, 3, 1], [8, 9, 2], [15, 16, 8], [7, 9, 6]]) == [2, 3, 1, 8, 9, 2, 15, 16, 8, 7, 9, 6]", "assert flatten_list([[3, 3, 8], [6, 6, 11], [15, 6, 10], [8, 4, 13]]) == [3, 3, 8, 6, 6, 11, 15, 6, 10, 8, 4, 13]", "assert flatten_list([[2, 2, 2], [5, 4, 4], [14, 8, 11], [3, 11, 13]]) == [2, 2, 2, 5, 4, 4, 14, 8, 11, 3, 11, 13]", "assert flatten_list([[2, 2, 8], [7, 9, 6], [8, 6, 17], [9, 9, 12]]) == [2, 2, 8, 7, 9, 6, 8, 6, 17, 9, 9, 12]", "assert flatten_list([[2, 4, 3], [1, 4, 10], [10, 8, 14], [10, 8, 4]]) == [2, 4, 3, 1, 4, 10, 10, 8, 14, 10, 8, 4]", "assert flatten_list([[1, 1, 1], [5, 5, 1], [12, 12, 9], [4, 4, 10]]) == [1, 1, 1, 5, 5, 1, 12, 12, 9, 4, 4, 10]", "assert flatten_list([[5, 1, 5], [6, 5, 10], [8, 14, 12], [10, 9, 14]]) == [5, 1, 5, 6, 5, 10, 8, 14, 12, 10, 9, 14]", "assert flatten_list([[1, 2, 2], [5, 4, 11], [14, 11, 16], [6, 12, 9]]) == [1, 2, 2, 5, 4, 11, 14, 11, 16, 6, 12, 9]", "assert flatten_list([[3, 2, 3], [2, 8, 11], [13, 16, 9], [2, 7, 13]]) == [3, 2, 3, 2, 8, 11, 13, 16, 9, 2, 7, 13]", "assert flatten_list([[2, 6, 6], [1, 4, 5], [5, 11, 10], [3, 12, 6]]) == [2, 6, 6, 1, 4, 5, 5, 11, 10, 3, 12, 6]", "assert flatten_list([[5, 6, 8], [6, 4, 8], [5, 11, 10], [8, 8, 4]]) == [5, 6, 8, 6, 4, 8, 5, 11, 10, 8, 8, 4]", "assert flatten_list([[2, 4, 7], [8, 1, 1], [8, 16, 8], [7, 13, 9]]) == [2, 4, 7, 8, 1, 1, 8, 16, 8, 7, 13, 9]", "assert flatten_list([[1, 2, 3], [9, 3, 8], [10, 7, 13], [10, 8, 13]]) == [1, 2, 3, 9, 3, 8, 10, 7, 13, 10, 8, 13]", "assert flatten_list([[1, 5, 8], [1, 9, 5], [5, 7, 9], [12, 11, 6]]) == [1, 5, 8, 1, 9, 5, 5, 7, 9, 12, 11, 6]", "assert flatten_list([[1, 3, 2], [3, 9, 10], [5, 11, 16], [11, 5, 5]]) == [1, 3, 2, 3, 9, 10, 5, 11, 16, 11, 5, 5]", "assert flatten_list([[3, 5, 4], [8, 6, 6], [9, 7, 16], [6, 7, 9]]) == [3, 5, 4, 8, 6, 6, 9, 7, 16, 6, 7, 9]", "assert flatten_list([[1, 1, 1], [2, 3, 7], [9, 13, 12], [9, 13, 7]]) == [1, 1, 1, 2, 3, 7, 9, 13, 12, 9, 13, 7]", "assert flatten_list([[4, 5, 3], [8, 4, 1], [8, 16, 11], [7, 11, 6]]) == [4, 5, 3, 8, 4, 1, 8, 16, 11, 7, 11, 6]", "assert flatten_list([[3, 2, 8], [4, 9, 4], [10, 7, 13], [2, 7, 13]]) == [3, 2, 8, 4, 9, 4, 10, 7, 13, 2, 7, 13]", "assert flatten_list([[4, 7, 5], [6, 5, 5], [12, 11, 12], [3, 13, 5]]) == [4, 7, 5, 6, 5, 5, 12, 11, 12, 3, 13, 5]", "assert flatten_list([[1, 1, 4], [6, 7, 8], [10, 16, 9], [3, 6, 10]]) == [1, 1, 4, 6, 7, 8, 10, 16, 9, 3, 6, 10]", "assert flatten_list([[6, 1, 7], [4, 5, 11], [8, 14, 11], [9, 8, 12]]) == [6, 1, 7, 4, 5, 11, 8, 14, 11, 9, 8, 12]", "assert flatten_list([[3, 4, 4], [8, 9, 6], [10, 6, 16], [8, 4, 11]]) == [3, 4, 4, 8, 9, 6, 10, 6, 16, 8, 4, 11]", "assert flatten_list([[2, 4, 8], [8, 10, 6], [5, 13, 8], [6, 3, 14]]) == [2, 4, 8, 8, 10, 6, 5, 13, 8, 6, 3, 14]", "assert flatten_list([[3, 7, 8], [8, 10, 4], [9, 9, 9], [9, 13, 7]]) == [3, 7, 8, 8, 10, 4, 9, 9, 9, 9, 13, 7]"], "entry_point": "flatten_list", "repair_prompt": ["Write a function flatten_list to flatten a given nested list structure.\nflatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n", "Write a function flatten_list to transform a given nested list structure into a flat list. A nested list structure may contain lists within lists, which needs to be processed accordingly.\nflatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n", "Write a function flatten_list to flatten a given nested list structure.\nflatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n"], "completions": ["from typing import List\n## main.py\n\ndef flatten_list(nested_list: list) -> list:\n    \"\"\"\n    Flattens a nested list structure into a single list.\n\n    Parameters:\n    nested_list (list): A list that may contain other nested lists.\n\n    Returns:\n    list: A flattened list containing all elements from the nested structure.\n    \"\"\"\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(flatten_list([]))  # Output: []\n    print(flatten_list([1, [2, [3, [4]]]]))  # Output: [1, 2, 3, 4]\n    print(flatten_list([[[[5]]], 6]))  # Output: [5, 6]\n", "from typing import List\n## main.py\n\ndef flatten_list(nested_list: list) -> list:\n    \"\"\"\n    Flattens a nested list structure into a single list.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists of varying depths.\n\n    Returns:\n    list: A flattened list containing all elements from the nested structure.\n\n    Example:\n    >>> flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n    [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    \"\"\"\n    flat_list = []\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively flatten the sublist\n            flat_list.extend(flatten_list(element))\n        else:\n            # Append non-list elements directly\n            flat_list.append(element)\n\n    return flat_list\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [1, [2, [3, [4]]], 5, [6, 7, [8, 9]], 10]\n    print(flatten_list(example_list))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n", "from typing import List\n## main.py\n\ndef flatten_list(nested_list: list) -> list:\n    \"\"\"\n    Flattens a nested list structure.\n\n    Parameters:\n    nested_list (list): A list that may contain other lists as elements.\n\n    Returns:\n    list: A single flattened list containing all elements from the nested structure.\n    \"\"\"\n    def _flatten(current_list: list, result: list) -> None:\n        \"\"\"\n        Helper function to recursively flatten the list.\n\n        Parameters:\n        current_list (list): The current list to flatten.\n        result (list): The list to store flattened elements.\n        \"\"\"\n        for element in current_list:\n            if isinstance(element, list):\n                _flatten(element, result)\n            else:\n                result.append(element)\n\n    # Initialize the result list\n    flattened_result = []\n    # Start the recursive flattening process\n    _flatten(nested_list, flattened_result)\n    return flattened_result\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(flatten_list([]))  # Output: []\n    print(flatten_list([1, [2, [3, [4]]]]))  # Output: [1, 2, 3, 4]\n    print(flatten_list([1, 'a', [2, 'b', [3, 'c']]]))  # Output: [1, 'a', 2, 'b', 3, 'c']\n", "from typing import List\n## main.py\n\ndef flatten_list(nested_list: list) -> list:\n    \"\"\"\n    Flattens a nested list into a single flat list.\n\n    Parameters:\n    nested_list (list): A list that may contain other lists as elements.\n\n    Returns:\n    list: A flat list containing all elements from the nested structure.\n    \"\"\"\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(flatten_list([]))  # Expected output: []\n    print(flatten_list([1, [2, [3, [4]]]]))  # Expected output: [1, 2, 3, 4]\n    print(flatten_list([[[[5]]], 6]))  # Expected output: [5, 6]\n", "from typing import List\n## main.py\n\ndef flatten_list(nested_list: list) -> list:\n    \"\"\"\n    Flattens a nested list into a single list.\n\n    Parameters:\n    nested_list (list): A list that may contain other lists.\n\n    Returns:\n    list: A flat list containing all elements from the nested list.\n    \"\"\"\n    result = []\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively flatten the list and extend the result\n            result.extend(flatten_list(element))\n        else:\n            # Append non-list elements directly to the result\n            result.append(element)\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(flatten_list([]))  # Expected output: []\n    print(flatten_list([1, [2, [3, [4]]]]))  # Expected output: [1, 2, 3, 4]\n    print(flatten_list([[[[5]]]]))  # Expected output: [5]\n", "from typing import List\n## main.py\n\ndef flatten_list(nested_list: list) -> list:\n    \"\"\"\n    Flattens a nested list structure into a single flat list.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists.\n\n    Returns:\n    list: A flat list containing all elements from the nested structure.\n    \"\"\"\n    if not isinstance(nested_list, list):\n        raise TypeError(\"Input must be a list\")\n\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list\n\n# Example usage:\n# print(flatten_list([1, [2, [3, [4]]]]))  # Output: [1, 2, 3, 4]\n# print(flatten_list([1, 'a', [2, ['b', 3]], 'c']))  # Output: [1, 'a', 2, 'b', 3, 'c]\n", "from typing import List\n## main.py\n\ndef flatten_list(nested_list: list) -> list:\n    \"\"\"\n    Flattens a nested list into a single list of values.\n\n    Parameters:\n    nested_list (list): A list that may contain other nested lists.\n\n    Returns:\n    list: A flattened list containing all the values from the nested structure.\n    \"\"\"\n    result = []\n    \n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively flatten the nested list\n            result.extend(flatten_list(element))\n        else:\n            # Append non-list elements directly to the result\n            result.append(element)\n    \n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(flatten_list([]))  # Expected output: []\n    print(flatten_list([1, [2, [3, [4]]]]))  # Expected output: [1, 2, 3, 4]\n    print(flatten_list([1, 'a', [2, 'b', [3, 'c']]]))  # Expected output: [1, 'a', 2, 'b', 3, 'c']\n", "from typing import List\n## main.py\n\ndef flatten_list(nested_list: list) -> list:\n    \"\"\"\n    Flattens a nested list structure into a single list.\n\n    Parameters:\n    nested_list (list): A list that may contain other lists as elements.\n\n    Returns:\n    list: A flattened list containing all elements from the nested structure.\n    \"\"\"\n    result = []\n    for element in nested_list:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(flatten_list([]))  # Expected output: []\n    print(flatten_list([1, [2, [3, [4]]]]))  # Expected output: [1, 2, 3, 4]\n    print(flatten_list([1, 'a', [2, 'b', [3, 'c']]]))  # Expected output: [1, 'a', 2, 'b', 3, 'c']\n", "from typing import List\n## main.py\n\ndef flatten_list(nested_list: list) -> list:\n    \"\"\"\n    Flattens a nested list into a single list.\n\n    Parameters:\n    nested_list (list): A list that may contain other lists as elements.\n\n    Returns:\n    list: A single flattened list containing all elements from the nested structure.\n    \"\"\"\n    flat_list = []\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively flatten the list element\n            flat_list.extend(flatten_list(element))\n        else:\n            # Append non-list elements directly to the flat list\n            flat_list.append(element)\n\n    return flat_list\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(flatten_list([]))  # Expected output: []\n    print(flatten_list([1, [2, [3, [4]]]]))  # Expected output: [1, 2, 3, 4]\n    print(flatten_list([[[[5]]], 6]))  # Expected output: [5, 6]\n", "from typing import List\n## main.py\n\ndef flatten_list(nested_list: list) -> list:\n    \"\"\"\n    Flattens a nested list into a single list.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists.\n\n    Returns:\n    list: A flattened list with all elements from the nested structure.\n    \"\"\"\n    result = []\n    for element in nested_list:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(flatten_list([]))  # Expected output: []\n    print(flatten_list([1, [2, [3, [4]]]]))  # Expected output: [1, 2, 3, 4]\n    print(flatten_list([[[[5]]], 6]))  # Expected output: [5, 6]\n"], "plans": ["requirement analysis:\nThe function should efficiently flatten nested lists of varying depths while maintaining performance with large datasets. It should be easy to use and integrate into existing projects.\nrequirement pool:\n- Implement the main flattening algorithm\n- Optimize for performance with large lists\n- Ensure compatibility with different data types\n- Provide comprehensive documentation\n- Include examples for common use cases\nWe will implement a recursive function to flatten nested lists. This approach will handle lists of varying depths efficiently. We will use Python's built-in capabilities without relying on external libraries, ensuring compatibility with different data types. The function will be optimized for performance with large datasets by minimizing recursive calls and using list comprehensions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten'\n    Explanation: In the requirement, \"flatten\" means converting a nested list structure into a single list with all the elements in a linear sequence, removing any nested list levels.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a recursive function `flatten_list` that takes a list as input.\n    2. Initialize an empty list `flat_list` to store the flattened elements.\n    3. Iterate through each element in the input list:\n        - If the element is a list, recursively call `flatten_list` on this element and extend `flat_list` with the result.\n        - If the element is not a list, append it directly to `flat_list`.\n    4. Return `flat_list` as the result.\n\n# [edge case] \n    flatten_list([]) = []\n    Explanation: An empty list should return an empty list since there are no elements to flatten.\n    \n    flatten_list([1, [2, [3, [4]]]]) = [1, 2, 3, 4]\n    Explanation: The function should handle multiple levels of nesting and return a single flattened list.\n\n    flatten_list([[[[5]]], 6]) = [5, 6]\n    Explanation: Deeply nested lists should be flattened to a single level.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive logic inherently handles empty lists and multiple levels of nesting.\n", "requirement analysis:\nThe function should efficiently flatten nested lists of varying depths while maintaining simplicity and readability. It should be optimized for performance, especially with large datasets, and handle edge cases like empty lists or non-list elements.\nrequirement pool:\n- Implement the main flatten_list function\n- Ensure the function handles deeply nested lists\n- Optimize performance for large datasets\n- Include error handling for non-list inputs\n- Document the function with examples\nWe will implement a recursive function to flatten nested lists. This approach will handle deeply nested structures efficiently and maintain simplicity. We will avoid using additional libraries to keep the solution lightweight and dependency-free. The function will include error handling for non-list inputs and will be documented with examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten'\n    Explanation: In the requirement, \"flatten\" means converting a nested list structure into a single list with all the elements in a linear sequence, removing any nested list levels.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a recursive function `flatten_list` that takes a list as input.\n    2. Initialize an empty list `flat_list` to store the flattened elements.\n    3. Iterate through each element in the input list:\n        - If the element is a list, recursively call `flatten_list` on this element and extend `flat_list` with the result.\n        - If the element is not a list, append it directly to `flat_list`.\n    4. Return `flat_list` as the final flattened list.\n\n# [edge case] \n    flatten_list([]) = []\n    Explanation: An empty list should return an empty list since there are no elements to flatten.\n    \n    flatten_list([1, [2, [3, [4]]]]) = [1, 2, 3, 4]\n    Explanation: The function should handle deeply nested lists and return a single flattened list with all elements in order.\n    \n    flatten_list([1, 'a', [2, 'b', [3, 'c']]]) = [1, 'a', 2, 'b', 3, 'c']\n    Explanation: The function should handle lists containing mixed data types and flatten them correctly.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach inherently handles empty lists and mixed data types within nested structures.\n", "requirement analysis:\nThe function should efficiently flatten nested lists of varying depths while maintaining the order of elements. It should handle edge cases such as empty lists and non-list elements within the structure.\nrequirement pool:\n- Implement the main flattening algorithm\n- Optimize for performance with large datasets\n- Ensure compatibility with different Python versions\n- Include comprehensive error handling\n- Provide detailed documentation and examples\nWe will implement a recursive function to flatten nested lists. This approach is flexible and can handle deeply nested structures efficiently. We will use Python's built-in capabilities without relying on external libraries, ensuring compatibility across different Python versions. The function will include error handling to manage edge cases such as empty lists and non-list elements, which will be included in the flattened result.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten'\n    Explanation: In the requirement, 'flatten' means converting a nested list structure into a single list containing all the elements in the original order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a recursive function `flatten_list` that takes a list as input.\n    2. Initialize an empty list `result` to store the flattened elements.\n    3. Iterate through each element in the input list:\n        - If the element is a list, recursively call `flatten_list` on this element and extend `result` with the returned list.\n        - If the element is not a list, append it directly to `result`.\n    4. Return the `result` list.\n\n# [edge case] \n    flatten_list([]) = []\n    Explanation: An empty list should return an empty list as there are no elements to flatten.\n    \n    flatten_list([1, [2, [3, [4]]]]) = [1, 2, 3, 4]\n    Explanation: The function should handle deeply nested lists and return a single flattened list with all elements in order.\n    \n    flatten_list([1, 'a', [2, 'b', [3, 'c']]]) = [1, 'a', 2, 'b', 3, 'c']\n    Explanation: The function should handle lists containing different data types and return a flattened list with all elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach inherently handles empty lists and deeply nested structures.\n", "requirement analysis:\nThe function should recursively process nested lists to ensure all elements are extracted into a single flat list. It should handle varying levels of nesting and be optimized for performance.\nrequirement pool:\n- Implement recursive flattening logic\n- Optimize for performance with large nested lists\n- Provide clear documentation and usage examples\n- Ensure compatibility with Python's list data structure\n- Consider edge cases like empty lists or non-list elements\nWe will implement a recursive function to flatten nested lists. The function will iterate through each element of the list, check if it is a list itself, and recursively flatten it. This approach ensures that all levels of nesting are handled efficiently. We will use Python's built-in capabilities without relying on third-party libraries to maintain simplicity and avoid unnecessary dependencies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested list'\n    Explanation: A nested list is a list that contains other lists as its elements. The requirement is to transform such a structure into a single flat list, meaning all elements from all levels of nesting should be extracted and placed into a single list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `flatten_list` that takes a list as input.\n    2. Initialize an empty list `flat_list` to store the flattened elements.\n    3. Iterate through each element in the input list.\n    4. Check if the element is a list:\n        - If it is, recursively call `flatten_list` on this element and extend `flat_list` with the result.\n        - If it is not, append the element directly to `flat_list`.\n    5. Return `flat_list`.\n\n# [edge case] \n    flatten_list([]) = []\n    Explanation: An empty list should return an empty list as there are no elements to flatten.\n    \n    flatten_list([1, [2, [3, [4]]]]) = [1, 2, 3, 4]\n    Explanation: The function should handle multiple levels of nesting and return a flat list with all elements.\n\n    flatten_list([[[[5]]], 6]) = [5, 6]\n    Explanation: Deeply nested lists should be flattened completely, extracting all elements into a single list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach inherently handles all levels of nesting and empty lists.\n", "requirement analysis:\nThe function should recursively iterate through the nested list structure, appending each non-list element to a result list. It should handle various levels of nesting and different data types within the lists.\nrequirement pool:\n- The function must handle arbitrary levels of nesting.\n- The function should be optimized for performance with large datasets.\n- The function should include error handling for non-list inputs.\n- Provide comprehensive documentation and examples.\n- Consider edge cases such as empty lists or lists with non-iterable elements.\nWe will implement a recursive function to handle arbitrary levels of nesting efficiently. The function will iterate through each element of the list, checking if it is a list itself. If it is, the function will recursively flatten it; otherwise, it will append the element to the result list. We will use Python's built-in capabilities without relying on external libraries to ensure simplicity and ease of use.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested list'\n    Explanation: A nested list is a list that contains other lists as its elements. The task is to flatten such a structure into a single list with no nested lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a function `flatten_list` that takes a list as input.\n    2. Initialize an empty list `result` to store the flattened elements.\n    3. Iterate over each element in the input list.\n    4. Check if the current element is a list:\n        - If it is, recursively call `flatten_list` on this element and extend the `result` list with the returned value.\n        - If it is not, append the element directly to the `result` list.\n    5. Return the `result` list after processing all elements.\n\n# [edge case] \n    flatten_list([]) = []\n    Explanation: An empty list should return an empty list since there are no elements to flatten.\n    \n    flatten_list([1, [2, [3, [4]]]]) = [1, 2, 3, 4]\n    Explanation: The function should handle multiple levels of nesting and return a flat list with all elements in order.\n    \n    flatten_list([[[[5]]]]) = [5]\n    Explanation: Even deeply nested single elements should be flattened into a single-element list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive logic inherently handles any level of nesting and empty lists.\n", "requirement analysis:\nThe function should efficiently handle lists with multiple levels of nesting, ensuring that all elements are extracted and returned in a single flat list. Performance considerations are crucial, especially for large datasets.\nrequirement pool:\n- The function must handle arbitrary levels of nesting\n- Performance optimization for large datasets\n- Provide clear documentation and usage examples\n- Ensure compatibility with Python's list data structure\n- Include error handling for non-list inputs\nWe will implement a recursive function to handle arbitrary levels of nesting efficiently. The function will iterate through each element of the list, check if it is a list itself, and recursively flatten it. This approach ensures that deeply nested lists are handled correctly. We will use Python's built-in capabilities without relying on external libraries to maintain simplicity and performance. Additionally, we will include error handling to manage non-list inputs gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested list'\n    Explanation: A nested list is a list that contains other lists as its elements. The requirement is to transform such a structure into a single flat list, meaning all elements from the nested lists should be extracted and placed into a single list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Define a recursive function `flatten_list`.\n    - Iterate through each element in the input list.\n    - Check if the element is a list:\n        - If it is, recursively call `flatten_list` on this element and extend the result to the main list.\n        - If it is not, append the element directly to the main list.\n    - Return the flattened list.\n\n# [edge case] \n    flatten_list([]) = []\n    Explanation: An empty list should return an empty list as there are no elements to flatten.\n    \n    flatten_list([1, [2, [3, [4]]]]) = [1, 2, 3, 4]\n    Explanation: The function should handle multiple levels of nesting and return a flat list with all elements in order.\n    \n    flatten_list([1, 'a', [2, ['b', 3]], 'c']) = [1, 'a', 2, 'b', 3, 'c']\n    Explanation: The function should handle lists containing different data types and flatten them correctly.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive logic inherently handles empty lists and multiple levels of nesting.\n", "requirement analysis:\nThe function should efficiently flatten nested lists of varying depths without requiring additional dependencies. It should be intuitive to use and well-documented.\nrequirement pool:\n- Implement the flatten_list function to handle nested lists\n- Optimize the function for performance with large datasets\n- Provide comprehensive documentation and usage examples\n- Ensure compatibility with different Python versions\n- Include error handling for non-list inputs\nWe will implement a recursive function to flatten nested lists. This approach will handle lists of varying depths efficiently without requiring additional dependencies. The function will include error handling for non-list inputs and provide comprehensive documentation with examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten'\n    Explanation: In the requirement, 'flatten' means converting a nested list structure into a single list containing all the elements in the original order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a recursive function `flatten_list` that takes a list as input.\n    2. Initialize an empty list `result` to store the flattened elements.\n    3. Iterate through each element in the input list.\n    4. If an element is a list, recursively call `flatten_list` on that element and extend the `result` list with the returned flattened list.\n    5. If an element is not a list, append it directly to the `result` list.\n    6. Return the `result` list.\n\n# [edge case] \n    flatten_list([]) = []\n    Explanation: An empty list should return an empty list as there are no elements to flatten.\n    \n    flatten_list([1, [2, [3, [4]]]]) = [1, 2, 3, 4]\n    Explanation: The function should handle deeply nested lists and return a single flattened list with all elements in order.\n    \n    flatten_list([1, 'a', [2, 'b', [3, 'c']]]) = [1, 'a', 2, 'b', 3, 'c']\n    Explanation: The function should handle lists containing different data types and flatten them correctly.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach inherently handles empty lists and deeply nested structures.\n", "requirement analysis:\nThe function should be able to recursively flatten nested lists of varying depths while maintaining performance and simplicity. It should handle edge cases such as empty lists and non-list elements.\nrequirement pool:\n- Implement recursive flattening logic\n- Optimize for performance with large datasets\n- Ensure code readability and maintainability\n- Handle edge cases like empty lists\n- Provide clear documentation and examples\nWe will implement a recursive function to flatten nested lists. The function will iterate through each element, check if it is a list, and recursively flatten it. For non-list elements, it will simply append them to the result list. We will use Python's built-in capabilities to ensure simplicity and performance. The function will handle edge cases like empty lists and non-list elements gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten'\n    Explanation: In the context of lists, \"flatten\" means to convert a nested list structure into a single list with no sublists, containing all the elements of the original nested lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a function `flatten_list` that takes a nested list as input.\n    2. Initialize an empty list `result` to store the flattened elements.\n    3. Iterate through each element in the input list:\n        - If the element is a list, recursively call `flatten_list` on this element and extend the `result` list with the returned flattened list.\n        - If the element is not a list, append it directly to the `result` list.\n    4. Return the `result` list.\n\n# [edge case] \n    flatten_list([]) = []\n    Explanation: An empty list should return an empty list since there are no elements to flatten.\n    \n    flatten_list([1, [2, [3, [4]]]]) = [1, 2, 3, 4]\n    Explanation: The function should handle deeply nested lists and return a single flattened list with all elements in order.\n    \n    flatten_list([1, 'a', [2, 'b', [3, 'c']]]) = [1, 'a', 2, 'b', 3, 'c']\n    Explanation: The function should handle lists with mixed data types and flatten them correctly.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach inherently handles empty lists and mixed data types.\n", "requirement analysis:\nThe function should be able to handle lists with multiple levels of nesting and return a single flattened list. It should be efficient in terms of time complexity, especially for large lists, and maintain simplicity for ease of understanding and use.\nrequirement pool:\n- Implement the main flattening logic\n- Optimize for performance with large datasets\n- Ensure compatibility with various data types\n- Include error handling for non-list inputs\n- Document the function with examples\nWe will implement a recursive function to handle the flattening of nested lists. This approach will allow us to handle lists with multiple levels of nesting efficiently. We will use Python's built-in capabilities to ensure compatibility with various data types and maintain simplicity. The function will include error handling to manage non-list inputs gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten'\n    Explanation: In the requirement, 'flatten' refers to converting a nested list structure into a single list containing all the elements in the original order, without any nested lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a recursive function `flatten_list` that takes a list as input.\n    2. Initialize an empty list `flat_list` to store the flattened elements.\n    3. Iterate through each element in the input list:\n        - If the element is a list, recursively call `flatten_list` on this element and extend `flat_list` with the result.\n        - If the element is not a list, append it directly to `flat_list`.\n    4. Return `flat_list`.\n\n# [edge case] \n    flatten_list([]) = []\n    Explanation: An empty list should return an empty list as there are no elements to flatten.\n    \n    flatten_list([1, [2, [3, [4]]]]) = [1, 2, 3, 4]\n    Explanation: The function should handle multiple levels of nesting and return a single flattened list.\n\n    flatten_list([[[[5]]], 6]) = [5, 6]\n    Explanation: Deeply nested lists should be flattened into a single list with all elements in order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach inherently handles all levels of nesting and empty lists.\n", "requirement analysis:\nThe function should recursively iterate through the list, checking for nested lists and flattening them into a single list. It should handle various levels of nesting and be optimized for performance.\nrequirement pool:\n- Implement recursive flattening logic\n- Ensure compatibility with Python lists\n- Optimize for performance with large datasets\n- Maintain code readability and simplicity\n- Include error handling for non-list inputs\nWe will implement a recursive function to flatten nested lists. The function will iterate through each element, checking if it is a list. If it is, the function will recursively flatten it; otherwise, it will add the element to the result list. This approach ensures that the function can handle various levels of nesting. We will use Python's built-in capabilities without additional libraries to maintain simplicity and readability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten'\n    Explanation: In the requirement, 'flatten' means converting a nested list structure into a single list containing all the elements in the same order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a function `flatten_list` that takes a nested list as input.\n    2. Initialize an empty list `result` to store the flattened elements.\n    3. Iterate through each element in the input list:\n        - If the element is a list, recursively call `flatten_list` on this element and extend the `result` list with the returned flattened list.\n        - If the element is not a list, append it directly to the `result` list.\n    4. Return the `result` list.\n\n# [edge case] \n    flatten_list([]) = []\n    Explanation: An empty list should return an empty list as there are no elements to flatten.\n    \n    flatten_list([1, [2, [3, [4]]]]) = [1, 2, 3, 4]\n    Explanation: The function should handle multiple levels of nesting and return a single flattened list.\n    \n    flatten_list([[[[5]]], 6]) = [5, 6]\n    Explanation: Deeply nested lists should be flattened into a single level.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach inherently handles various levels of nesting and empty lists.\n"], "test": ["def check(flatten_list):\n\tassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "def check(flatten_list):\n\tassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]", "def check(flatten_list):\n\tassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]", "def check(flatten_list):\n\tassert flatten_list([5, 15, [17, 25], 39, 49, [65, 69, 78], [86, 97, 110, 123]]) == [5, 15, 17, 25, 39, 49, 65, 69, 78, 86, 97, 110, 123]", "def check(flatten_list):\n\tassert flatten_list([5, 7, [15, 33], 39, 45, [65, 75, 82], [92, 104, 115, 116]]) == [5, 7, 15, 33, 39, 45, 65, 75, 82, 92, 104, 115, 116]", "def check(flatten_list):\n\tassert flatten_list([2, 9, [22, 28], 35, 52, [58, 68, 81], [87, 100, 105, 117]]) == [2, 9, 22, 28, 35, 52, 58, 68, 81, 87, 100, 105, 117]", "def check(flatten_list):\n\tassert flatten_list([5, 10, [24, 29], 42, 49, [65, 72, 85], [92, 97, 105, 119]]) == [5, 10, 24, 29, 42, 49, 65, 72, 85, 92, 97, 105, 119]", "def check(flatten_list):\n\tassert flatten_list([5, 15, [24, 32], 36, 50, [63, 74, 78], [85, 101, 113, 115]]) == [5, 15, 24, 32, 36, 50, 63, 74, 78, 85, 101, 113, 115]", "def check(flatten_list):\n\tassert flatten_list([4, 11, [15, 25], 37, 51, [64, 74, 82], [94, 101, 110, 117]]) == [4, 11, 15, 25, 37, 51, 64, 74, 82, 94, 101, 110, 117]", "def check(flatten_list):\n\tassert flatten_list([1, 10, [17, 26], 39, 49, [65, 75, 77], [87, 103, 112, 121]]) == [1, 10, 17, 26, 39, 49, 65, 75, 77, 87, 103, 112, 121]", "def check(flatten_list):\n\tassert flatten_list([3, 7, [24, 25], 43, 45, [55, 69, 83], [90, 105, 108, 121]]) == [3, 7, 24, 25, 43, 45, 55, 69, 83, 90, 105, 108, 121]", "def check(flatten_list):\n\tassert flatten_list([5, 15, [16, 34], 37, 49, [61, 68, 84], [95, 95, 114, 125]]) == [5, 15, 16, 34, 37, 49, 61, 68, 84, 95, 95, 114, 125]", "def check(flatten_list):\n\tassert flatten_list([3, 5, [20, 29], 35, 48, [56, 71, 85], [85, 104, 108, 122]]) == [3, 5, 20, 29, 35, 48, 56, 71, 85, 85, 104, 108, 122]", "def check(flatten_list):\n\tassert flatten_list([1, 11, [22, 26], 45, 53, [61, 74, 83], [90, 97, 113, 118]]) == [1, 11, 22, 26, 45, 53, 61, 74, 83, 90, 97, 113, 118]", "def check(flatten_list):\n\tassert flatten_list([5, 8, [15, 32], 41, 50, [56, 75, 82], [90, 104, 114, 125]]) == [5, 8, 15, 32, 41, 50, 56, 75, 82, 90, 104, 114, 125]", "def check(flatten_list):\n\tassert flatten_list([4, 8, [23, 27], 36, 55, [60, 71, 78], [85, 105, 108, 125]]) == [4, 8, 23, 27, 36, 55, 60, 71, 78, 85, 105, 108, 125]", "def check(flatten_list):\n\tassert flatten_list([2, 11, [22, 34], 41, 48, [65, 68, 82], [85, 101, 108, 124]]) == [2, 11, 22, 34, 41, 48, 65, 68, 82, 85, 101, 108, 124]", "def check(flatten_list):\n\tassert flatten_list([4, 11, [19, 35], 37, 55, [63, 70, 75], [95, 97, 108, 116]]) == [4, 11, 19, 35, 37, 55, 63, 70, 75, 95, 97, 108, 116]", "def check(flatten_list):\n\tassert flatten_list([1, 13, [16, 28], 40, 46, [62, 72, 78], [95, 101, 109, 117]]) == [1, 13, 16, 28, 40, 46, 62, 72, 78, 95, 101, 109, 117]", "def check(flatten_list):\n\tassert flatten_list([3, 9, [23, 27], 38, 53, [63, 71, 79], [93, 104, 111, 117]]) == [3, 9, 23, 27, 38, 53, 63, 71, 79, 93, 104, 111, 117]", "def check(flatten_list):\n\tassert flatten_list([2, 15, [15, 35], 37, 51, [57, 68, 75], [90, 96, 112, 116]]) == [2, 15, 15, 35, 37, 51, 57, 68, 75, 90, 96, 112, 116]", "def check(flatten_list):\n\tassert flatten_list([2, 6, [23, 35], 43, 52, [56, 69, 75], [86, 95, 112, 120]]) == [2, 6, 23, 35, 43, 52, 56, 69, 75, 86, 95, 112, 120]", "def check(flatten_list):\n\tassert flatten_list([5, 7, [23, 33], 44, 48, [63, 71, 76], [85, 104, 114, 117]]) == [5, 7, 23, 33, 44, 48, 63, 71, 76, 85, 104, 114, 117]", "def check(flatten_list):\n\tassert flatten_list([2, 12, [20, 35], 35, 48, [57, 72, 76], [85, 95, 105, 119]]) == [2, 12, 20, 35, 35, 48, 57, 72, 76, 85, 95, 105, 119]", "def check(flatten_list):\n\tassert flatten_list([5, 8, [23, 25], 45, 48, [57, 75, 80], [90, 98, 108, 120]]) == [5, 8, 23, 25, 45, 48, 57, 75, 80, 90, 98, 108, 120]", "def check(flatten_list):\n\tassert flatten_list([2, 13, [19, 26], 35, 51, [64, 70, 80], [92, 100, 107, 115]]) == [2, 13, 19, 26, 35, 51, 64, 70, 80, 92, 100, 107, 115]", "def check(flatten_list):\n\tassert flatten_list([2, 11, [19, 29], 44, 53, [58, 71, 82], [93, 103, 111, 116]]) == [2, 11, 19, 29, 44, 53, 58, 71, 82, 93, 103, 111, 116]", "def check(flatten_list):\n\tassert flatten_list([4, 14, [19, 32], 44, 45, [59, 74, 84], [93, 97, 115, 122]]) == [4, 14, 19, 32, 44, 45, 59, 74, 84, 93, 97, 115, 122]", "def check(flatten_list):\n\tassert flatten_list([2, 10, [16, 35], 43, 54, [64, 75, 85], [86, 98, 106, 116]]) == [2, 10, 16, 35, 43, 54, 64, 75, 85, 86, 98, 106, 116]", "def check(flatten_list):\n\tassert flatten_list([2, 8, [16, 31], 36, 49, [55, 68, 77], [94, 103, 105, 124]]) == [2, 8, 16, 31, 36, 49, 55, 68, 77, 94, 103, 105, 124]", "def check(flatten_list):\n\tassert flatten_list([1, 13, [22, 26], 37, 46, [61, 73, 81], [90, 103, 107, 124]]) == [1, 13, 22, 26, 37, 46, 61, 73, 81, 90, 103, 107, 124]", "def check(flatten_list):\n\tassert flatten_list([3, 14, [22, 26], 44, 45, [56, 73, 85], [89, 103, 112, 121]]) == [3, 14, 22, 26, 44, 45, 56, 73, 85, 89, 103, 112, 121]", "def check(flatten_list):\n\tassert flatten_list([3, 11, [20, 26], 38, 53, [59, 65, 76], [93, 99, 114, 122]]) == [3, 11, 20, 26, 38, 53, 59, 65, 76, 93, 99, 114, 122]", "def check(flatten_list):\n\tassert flatten_list([4, 6, [16, 31], 42, 48, [55, 67, 85], [86, 97, 112, 124]]) == [4, 6, 16, 31, 42, 48, 55, 67, 85, 86, 97, 112, 124]", "def check(flatten_list):\n\tassert flatten_list([5, 9, [16, 26], 35, 49, [65, 74, 77], [91, 98, 109, 119]]) == [5, 9, 16, 26, 35, 49, 65, 74, 77, 91, 98, 109, 119]", "def check(flatten_list):\n\tassert flatten_list([4, 5, [25, 25], 45, 55, [63, 68, 77], [91, 105, 105, 118]]) == [4, 5, 25, 25, 45, 55, 63, 68, 77, 91, 105, 105, 118]", "def check(flatten_list):\n\tassert flatten_list([[11, 21], [42], [28, 57, 26], [11, 16], [36], [37]]) == [11, 21, 42, 28, 57, 26, 11, 16, 36, 37]", "def check(flatten_list):\n\tassert flatten_list([[10, 23], [40], [31, 51, 25], [15, 18], [37], [43]]) == [10, 23, 40, 31, 51, 25, 15, 18, 37, 43]", "def check(flatten_list):\n\tassert flatten_list([[6, 21], [37], [30, 61, 29], [7, 22], [33], [41]]) == [6, 21, 37, 30, 61, 29, 7, 22, 33, 41]", "def check(flatten_list):\n\tassert flatten_list([[12, 23], [39], [33, 53, 22], [10, 22], [38], [43]]) == [12, 23, 39, 33, 53, 22, 10, 22, 38, 43]", "def check(flatten_list):\n\tassert flatten_list([[11, 17], [40], [31, 57, 24], [9, 15], [30], [43]]) == [11, 17, 40, 31, 57, 24, 9, 15, 30, 43]", "def check(flatten_list):\n\tassert flatten_list([[15, 20], [35], [27, 55, 28], [13, 21], [38], [39]]) == [15, 20, 35, 27, 55, 28, 13, 21, 38, 39]", "def check(flatten_list):\n\tassert flatten_list([[13, 22], [35], [31, 54, 27], [15, 24], [37], [41]]) == [13, 22, 35, 31, 54, 27, 15, 24, 37, 41]", "def check(flatten_list):\n\tassert flatten_list([[12, 23], [43], [32, 55, 27], [5, 18], [32], [43]]) == [12, 23, 43, 32, 55, 27, 5, 18, 32, 43]", "def check(flatten_list):\n\tassert flatten_list([[8, 21], [40], [30, 61, 21], [11, 22], [33], [42]]) == [8, 21, 40, 30, 61, 21, 11, 22, 33, 42]", "def check(flatten_list):\n\tassert flatten_list([[11, 20], [39], [28, 60, 27], [8, 22], [31], [42]]) == [11, 20, 39, 28, 60, 27, 8, 22, 31, 42]", "def check(flatten_list):\n\tassert flatten_list([[6, 19], [39], [31, 53, 24], [8, 23], [33], [42]]) == [6, 19, 39, 31, 53, 24, 8, 23, 33, 42]", "def check(flatten_list):\n\tassert flatten_list([[9, 23], [37], [29, 55, 23], [15, 18], [35], [36]]) == [9, 23, 37, 29, 55, 23, 15, 18, 35, 36]", "def check(flatten_list):\n\tassert flatten_list([[13, 23], [44], [28, 52, 24], [11, 17], [29], [40]]) == [13, 23, 44, 28, 52, 24, 11, 17, 29, 40]", "def check(flatten_list):\n\tassert flatten_list([[11, 21], [36], [35, 60, 24], [7, 15], [29], [39]]) == [11, 21, 36, 35, 60, 24, 7, 15, 29, 39]", "def check(flatten_list):\n\tassert flatten_list([[6, 20], [35], [30, 51, 21], [13, 19], [31], [35]]) == [6, 20, 35, 30, 51, 21, 13, 19, 31, 35]", "def check(flatten_list):\n\tassert flatten_list([[14, 18], [40], [26, 53, 30], [11, 24], [34], [36]]) == [14, 18, 40, 26, 53, 30, 11, 24, 34, 36]", "def check(flatten_list):\n\tassert flatten_list([[15, 16], [43], [26, 60, 25], [8, 20], [28], [37]]) == [15, 16, 43, 26, 60, 25, 8, 20, 28, 37]", "def check(flatten_list):\n\tassert flatten_list([[7, 25], [35], [25, 51, 26], [8, 21], [29], [45]]) == [7, 25, 35, 25, 51, 26, 8, 21, 29, 45]", "def check(flatten_list):\n\tassert flatten_list([[13, 23], [44], [35, 56, 27], [12, 16], [31], [45]]) == [13, 23, 44, 35, 56, 27, 12, 16, 31, 45]", "def check(flatten_list):\n\tassert flatten_list([[9, 18], [39], [30, 61, 29], [9, 20], [31], [41]]) == [9, 18, 39, 30, 61, 29, 9, 20, 31, 41]", "def check(flatten_list):\n\tassert flatten_list([[12, 16], [45], [33, 54, 24], [13, 19], [38], [43]]) == [12, 16, 45, 33, 54, 24, 13, 19, 38, 43]", "def check(flatten_list):\n\tassert flatten_list([[14, 23], [38], [30, 58, 24], [7, 16], [37], [43]]) == [14, 23, 38, 30, 58, 24, 7, 16, 37, 43]", "def check(flatten_list):\n\tassert flatten_list([[6, 17], [45], [26, 58, 23], [8, 18], [32], [36]]) == [6, 17, 45, 26, 58, 23, 8, 18, 32, 36]", "def check(flatten_list):\n\tassert flatten_list([[15, 19], [43], [26, 57, 28], [7, 22], [34], [39]]) == [15, 19, 43, 26, 57, 28, 7, 22, 34, 39]", "def check(flatten_list):\n\tassert flatten_list([[6, 16], [37], [25, 61, 25], [8, 20], [36], [42]]) == [6, 16, 37, 25, 61, 25, 8, 20, 36, 42]", "def check(flatten_list):\n\tassert flatten_list([[12, 15], [41], [33, 60, 24], [10, 18], [33], [38]]) == [12, 15, 41, 33, 60, 24, 10, 18, 33, 38]", "def check(flatten_list):\n\tassert flatten_list([[13, 18], [35], [26, 51, 22], [13, 19], [31], [45]]) == [13, 18, 35, 26, 51, 22, 13, 19, 31, 45]", "def check(flatten_list):\n\tassert flatten_list([[15, 22], [39], [29, 53, 20], [9, 22], [29], [36]]) == [15, 22, 39, 29, 53, 20, 9, 22, 29, 36]", "def check(flatten_list):\n\tassert flatten_list([[8, 15], [40], [25, 52, 23], [7, 18], [33], [35]]) == [8, 15, 40, 25, 52, 23, 7, 18, 33, 35]", "def check(flatten_list):\n\tassert flatten_list([[11, 24], [39], [34, 53, 29], [5, 17], [33], [35]]) == [11, 24, 39, 34, 53, 29, 5, 17, 33, 35]", "def check(flatten_list):\n\tassert flatten_list([[14, 24], [43], [27, 58, 20], [9, 16], [35], [40]]) == [14, 24, 43, 27, 58, 20, 9, 16, 35, 40]", "def check(flatten_list):\n\tassert flatten_list([[9, 21], [44], [32, 54, 21], [10, 15], [36], [36]]) == [9, 21, 44, 32, 54, 21, 10, 15, 36, 36]", "def check(flatten_list):\n\tassert flatten_list([[6, 18], [35], [32, 54, 25], [11, 23], [30], [42]]) == [6, 18, 35, 32, 54, 25, 11, 23, 30, 42]", "def check(flatten_list):\n\tassert flatten_list([[3, 4, 4], [9, 7, 8], [10, 15, 16], [11, 4, 12]]) == [3, 4, 4, 9, 7, 8, 10, 15, 16, 11, 4, 12]", "def check(flatten_list):\n\tassert flatten_list([[4, 1, 4], [3, 1, 5], [13, 11, 8], [10, 3, 4]]) == [4, 1, 4, 3, 1, 5, 13, 11, 8, 10, 3, 4]", "def check(flatten_list):\n\tassert flatten_list([[3, 1, 3], [1, 6, 4], [13, 6, 16], [11, 12, 10]]) == [3, 1, 3, 1, 6, 4, 13, 6, 16, 11, 12, 10]", "def check(flatten_list):\n\tassert flatten_list([[3, 2, 7], [7, 9, 8], [14, 8, 7], [5, 6, 8]]) == [3, 2, 7, 7, 9, 8, 14, 8, 7, 5, 6, 8]", "def check(flatten_list):\n\tassert flatten_list([[4, 1, 2], [9, 6, 2], [9, 15, 17], [9, 5, 13]]) == [4, 1, 2, 9, 6, 2, 9, 15, 17, 9, 5, 13]", "def check(flatten_list):\n\tassert flatten_list([[1, 2, 2], [8, 1, 7], [10, 14, 12], [11, 11, 10]]) == [1, 2, 2, 8, 1, 7, 10, 14, 12, 11, 11, 10]", "def check(flatten_list):\n\tassert flatten_list([[2, 7, 2], [8, 4, 3], [10, 10, 13], [3, 3, 5]]) == [2, 7, 2, 8, 4, 3, 10, 10, 13, 3, 3, 5]", "def check(flatten_list):\n\tassert flatten_list([[3, 6, 5], [2, 1, 8], [6, 16, 16], [4, 13, 7]]) == [3, 6, 5, 2, 1, 8, 6, 16, 16, 4, 13, 7]", "def check(flatten_list):\n\tassert flatten_list([[2, 3, 1], [8, 9, 2], [15, 16, 8], [7, 9, 6]]) == [2, 3, 1, 8, 9, 2, 15, 16, 8, 7, 9, 6]", "def check(flatten_list):\n\tassert flatten_list([[3, 3, 8], [6, 6, 11], [15, 6, 10], [8, 4, 13]]) == [3, 3, 8, 6, 6, 11, 15, 6, 10, 8, 4, 13]", "def check(flatten_list):\n\tassert flatten_list([[2, 2, 2], [5, 4, 4], [14, 8, 11], [3, 11, 13]]) == [2, 2, 2, 5, 4, 4, 14, 8, 11, 3, 11, 13]", "def check(flatten_list):\n\tassert flatten_list([[2, 2, 8], [7, 9, 6], [8, 6, 17], [9, 9, 12]]) == [2, 2, 8, 7, 9, 6, 8, 6, 17, 9, 9, 12]", "def check(flatten_list):\n\tassert flatten_list([[2, 4, 3], [1, 4, 10], [10, 8, 14], [10, 8, 4]]) == [2, 4, 3, 1, 4, 10, 10, 8, 14, 10, 8, 4]", "def check(flatten_list):\n\tassert flatten_list([[1, 1, 1], [5, 5, 1], [12, 12, 9], [4, 4, 10]]) == [1, 1, 1, 5, 5, 1, 12, 12, 9, 4, 4, 10]", "def check(flatten_list):\n\tassert flatten_list([[5, 1, 5], [6, 5, 10], [8, 14, 12], [10, 9, 14]]) == [5, 1, 5, 6, 5, 10, 8, 14, 12, 10, 9, 14]", "def check(flatten_list):\n\tassert flatten_list([[1, 2, 2], [5, 4, 11], [14, 11, 16], [6, 12, 9]]) == [1, 2, 2, 5, 4, 11, 14, 11, 16, 6, 12, 9]", "def check(flatten_list):\n\tassert flatten_list([[3, 2, 3], [2, 8, 11], [13, 16, 9], [2, 7, 13]]) == [3, 2, 3, 2, 8, 11, 13, 16, 9, 2, 7, 13]", "def check(flatten_list):\n\tassert flatten_list([[2, 6, 6], [1, 4, 5], [5, 11, 10], [3, 12, 6]]) == [2, 6, 6, 1, 4, 5, 5, 11, 10, 3, 12, 6]", "def check(flatten_list):\n\tassert flatten_list([[5, 6, 8], [6, 4, 8], [5, 11, 10], [8, 8, 4]]) == [5, 6, 8, 6, 4, 8, 5, 11, 10, 8, 8, 4]", "def check(flatten_list):\n\tassert flatten_list([[2, 4, 7], [8, 1, 1], [8, 16, 8], [7, 13, 9]]) == [2, 4, 7, 8, 1, 1, 8, 16, 8, 7, 13, 9]", "def check(flatten_list):\n\tassert flatten_list([[1, 2, 3], [9, 3, 8], [10, 7, 13], [10, 8, 13]]) == [1, 2, 3, 9, 3, 8, 10, 7, 13, 10, 8, 13]", "def check(flatten_list):\n\tassert flatten_list([[1, 5, 8], [1, 9, 5], [5, 7, 9], [12, 11, 6]]) == [1, 5, 8, 1, 9, 5, 5, 7, 9, 12, 11, 6]", "def check(flatten_list):\n\tassert flatten_list([[1, 3, 2], [3, 9, 10], [5, 11, 16], [11, 5, 5]]) == [1, 3, 2, 3, 9, 10, 5, 11, 16, 11, 5, 5]", "def check(flatten_list):\n\tassert flatten_list([[3, 5, 4], [8, 6, 6], [9, 7, 16], [6, 7, 9]]) == [3, 5, 4, 8, 6, 6, 9, 7, 16, 6, 7, 9]", "def check(flatten_list):\n\tassert flatten_list([[1, 1, 1], [2, 3, 7], [9, 13, 12], [9, 13, 7]]) == [1, 1, 1, 2, 3, 7, 9, 13, 12, 9, 13, 7]", "def check(flatten_list):\n\tassert flatten_list([[4, 5, 3], [8, 4, 1], [8, 16, 11], [7, 11, 6]]) == [4, 5, 3, 8, 4, 1, 8, 16, 11, 7, 11, 6]", "def check(flatten_list):\n\tassert flatten_list([[3, 2, 8], [4, 9, 4], [10, 7, 13], [2, 7, 13]]) == [3, 2, 8, 4, 9, 4, 10, 7, 13, 2, 7, 13]", "def check(flatten_list):\n\tassert flatten_list([[4, 7, 5], [6, 5, 5], [12, 11, 12], [3, 13, 5]]) == [4, 7, 5, 6, 5, 5, 12, 11, 12, 3, 13, 5]", "def check(flatten_list):\n\tassert flatten_list([[1, 1, 4], [6, 7, 8], [10, 16, 9], [3, 6, 10]]) == [1, 1, 4, 6, 7, 8, 10, 16, 9, 3, 6, 10]", "def check(flatten_list):\n\tassert flatten_list([[6, 1, 7], [4, 5, 11], [8, 14, 11], [9, 8, 12]]) == [6, 1, 7, 4, 5, 11, 8, 14, 11, 9, 8, 12]", "def check(flatten_list):\n\tassert flatten_list([[3, 4, 4], [8, 9, 6], [10, 6, 16], [8, 4, 11]]) == [3, 4, 4, 8, 9, 6, 10, 6, 16, 8, 4, 11]", "def check(flatten_list):\n\tassert flatten_list([[2, 4, 8], [8, 10, 6], [5, 13, 8], [6, 3, 14]]) == [2, 4, 8, 8, 10, 6, 5, 13, 8, 6, 3, 14]", "def check(flatten_list):\n\tassert flatten_list([[3, 7, 8], [8, 10, 4], [9, 9, 9], [9, 13, 7]]) == [3, 7, 8, 8, 10, 4, 9, 9, 9, 9, 13, 7]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef flatten_list(nested_list: list) -> list:\n    \"\"\"\n    Flattens a nested list into a single list.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists.\n\n    Returns:\n    list: A flattened list with all elements from the nested structure.\n    \"\"\"\n    result = []\n    for element in nested_list:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(flatten_list([]))  # Expected output: []\n    print(flatten_list([1, [2, [3, [4]]]]))  # Expected output: [1, 2, 3, 4]\n    print(flatten_list([[[[5]]], 6]))  # Expected output: [5, 6]\n", "passed": true, "pass": true, "pass_num": 10, "round": 983, "mutate_method": "condense_two2one", "parent_index": 122}
