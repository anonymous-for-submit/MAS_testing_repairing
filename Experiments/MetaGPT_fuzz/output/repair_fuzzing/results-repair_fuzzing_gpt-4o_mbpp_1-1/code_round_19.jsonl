{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 65, "prompt": "Write a function to flatten a list and sum all of its elements.", "code": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "test_imports": [], "test_list": ["assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210", "assert recursive_list_sum([3, 1, [7, 2], [1, 1]]) == 15", "assert recursive_list_sum([5, 7, [5, 7], [7, 2]]) == 33", "assert recursive_list_sum([4, 4, [1, 5], [9, 6]]) == 29", "assert recursive_list_sum([1, 5, [5, 8], [2, 1]]) == 22", "assert recursive_list_sum([1, 3, [3, 8], [2, 4]]) == 21", "assert recursive_list_sum([4, 2, [8, 3], [3, 2]]) == 22", "assert recursive_list_sum([1, 5, [8, 1], [7, 11]]) == 33", "assert recursive_list_sum([5, 6, [2, 8], [7, 5]]) == 33", "assert recursive_list_sum([4, 4, [3, 3], [10, 2]]) == 26", "assert recursive_list_sum([1, 3, [2, 2], [10, 1]]) == 19", "assert recursive_list_sum([3, 1, [7, 9], [2, 1]]) == 23", "assert recursive_list_sum([6, 7, [4, 8], [7, 10]]) == 42", "assert recursive_list_sum([2, 7, [5, 7], [1, 5]]) == 27", "assert recursive_list_sum([3, 3, [1, 9], [1, 11]]) == 28", "assert recursive_list_sum([2, 5, [5, 8], [10, 7]]) == 37", "assert recursive_list_sum([3, 2, [3, 6], [7, 6]]) == 27", "assert recursive_list_sum([4, 7, [1, 5], [4, 4]]) == 25", "assert recursive_list_sum([5, 4, [7, 4], [4, 7]]) == 31", "assert recursive_list_sum([1, 2, [5, 8], [4, 1]]) == 21", "assert recursive_list_sum([1, 1, [4, 8], [8, 8]]) == 30", "assert recursive_list_sum([4, 2, [3, 9], [8, 11]]) == 37", "assert recursive_list_sum([6, 5, [1, 7], [8, 4]]) == 31", "assert recursive_list_sum([5, 7, [2, 7], [8, 4]]) == 33", "assert recursive_list_sum([1, 3, [2, 6], [9, 4]]) == 25", "assert recursive_list_sum([6, 7, [1, 8], [9, 11]]) == 42", "assert recursive_list_sum([1, 1, [1, 9], [10, 6]]) == 28", "assert recursive_list_sum([1, 4, [8, 8], [8, 6]]) == 35", "assert recursive_list_sum([6, 4, [2, 6], [6, 2]]) == 26", "assert recursive_list_sum([1, 5, [4, 8], [5, 4]]) == 27", "assert recursive_list_sum([3, 6, [1, 1], [4, 5]]) == 20", "assert recursive_list_sum([5, 4, [3, 9], [10, 9]]) == 40", "assert recursive_list_sum([6, 6, [8, 9], [5, 3]]) == 37", "assert recursive_list_sum([2, 2, [7, 1], [5, 9]]) == 26", "assert recursive_list_sum([2, 8, [13, 14], [23, 46]]) == 106", "assert recursive_list_sum([8, 13, [16, 14], [14, 36]]) == 101", "assert recursive_list_sum([2, 14, [19, 15], [16, 40]]) == 106", "assert recursive_list_sum([7, 12, [13, 18], [21, 41]]) == 112", "assert recursive_list_sum([7, 8, [14, 12], [23, 43]]) == 107", "assert recursive_list_sum([12, 12, [18, 12], [20, 36]]) == 110", "assert recursive_list_sum([12, 9, [14, 12], [24, 39]]) == 110", "assert recursive_list_sum([7, 11, [17, 12], [15, 41]]) == 103", "assert recursive_list_sum([10, 12, [19, 15], [19, 46]]) == 121", "assert recursive_list_sum([12, 12, [14, 19], [15, 38]]) == 110", "assert recursive_list_sum([9, 8, [13, 15], [18, 38]]) == 101", "assert recursive_list_sum([8, 11, [15, 13], [17, 40]]) == 104", "assert recursive_list_sum([10, 15, [19, 10], [17, 42]]) == 113", "assert recursive_list_sum([6, 12, [11, 12], [21, 46]]) == 108", "assert recursive_list_sum([8, 10, [13, 15], [24, 45]]) == 115", "assert recursive_list_sum([2, 13, [12, 19], [15, 43]]) == 104", "assert recursive_list_sum([7, 8, [19, 11], [15, 44]]) == 104", "assert recursive_list_sum([5, 13, [19, 18], [16, 45]]) == 116", "assert recursive_list_sum([11, 6, [17, 16], [16, 39]]) == 105", "assert recursive_list_sum([11, 13, [20, 14], [21, 46]]) == 125", "assert recursive_list_sum([6, 9, [16, 15], [20, 45]]) == 111", "assert recursive_list_sum([5, 8, [11, 16], [23, 45]]) == 108", "assert recursive_list_sum([9, 11, [11, 10], [16, 41]]) == 98", "assert recursive_list_sum([11, 5, [18, 10], [18, 40]]) == 102", "assert recursive_list_sum([4, 6, [12, 13], [21, 46]]) == 102", "assert recursive_list_sum([12, 10, [15, 9], [18, 38]]) == 102", "assert recursive_list_sum([5, 13, [20, 9], [22, 39]]) == 108", "assert recursive_list_sum([4, 7, [16, 15], [21, 39]]) == 102", "assert recursive_list_sum([9, 9, [15, 19], [19, 45]]) == 116", "assert recursive_list_sum([7, 13, [18, 19], [17, 39]]) == 113", "assert recursive_list_sum([6, 15, [19, 18], [21, 37]]) == 116", "assert recursive_list_sum([12, 5, [13, 19], [15, 38]]) == 102", "assert recursive_list_sum([12, 10, [10, 9], [17, 40]]) == 98", "assert recursive_list_sum([11, 15, [31, 43], [47, 56]]) == 203", "assert recursive_list_sum([15, 19, [32, 41], [54, 64]]) == 225", "assert recursive_list_sum([8, 22, [28, 35], [55, 59]]) == 207", "assert recursive_list_sum([8, 23, [35, 40], [54, 60]]) == 220", "assert recursive_list_sum([6, 20, [32, 42], [45, 57]]) == 202", "assert recursive_list_sum([9, 17, [26, 44], [55, 60]]) == 211", "assert recursive_list_sum([13, 20, [35, 45], [51, 62]]) == 226", "assert recursive_list_sum([7, 20, [35, 37], [49, 60]]) == 208", "assert recursive_list_sum([9, 25, [27, 43], [54, 55]]) == 213", "assert recursive_list_sum([15, 17, [34, 38], [49, 58]]) == 211", "assert recursive_list_sum([5, 21, [26, 44], [52, 56]]) == 204", "assert recursive_list_sum([7, 20, [29, 43], [46, 61]]) == 206", "assert recursive_list_sum([14, 25, [34, 42], [48, 57]]) == 220", "assert recursive_list_sum([11, 25, [32, 40], [49, 61]]) == 218", "assert recursive_list_sum([6, 16, [34, 36], [49, 55]]) == 196", "assert recursive_list_sum([11, 23, [26, 35], [49, 57]]) == 201", "assert recursive_list_sum([9, 19, [25, 42], [49, 60]]) == 204", "assert recursive_list_sum([13, 19, [29, 41], [55, 57]]) == 214", "assert recursive_list_sum([13, 18, [32, 37], [49, 55]]) == 204", "assert recursive_list_sum([10, 23, [28, 36], [46, 57]]) == 200", "assert recursive_list_sum([12, 16, [32, 43], [53, 58]]) == 214", "assert recursive_list_sum([11, 16, [29, 45], [51, 57]]) == 209", "assert recursive_list_sum([13, 15, [27, 44], [54, 57]]) == 210", "assert recursive_list_sum([15, 23, [28, 38], [52, 62]]) == 218", "assert recursive_list_sum([14, 16, [34, 42], [53, 62]]) == 221", "assert recursive_list_sum([7, 19, [25, 43], [48, 65]]) == 207", "assert recursive_list_sum([9, 25, [35, 37], [51, 58]]) == 215", "assert recursive_list_sum([8, 22, [33, 41], [51, 63]]) == 218", "assert recursive_list_sum([6, 21, [30, 36], [45, 61]]) == 199", "assert recursive_list_sum([12, 24, [27, 42], [46, 56]]) == 207", "assert recursive_list_sum([12, 21, [33, 41], [48, 63]]) == 218", "assert recursive_list_sum([12, 25, [32, 41], [45, 61]]) == 216", "assert recursive_list_sum([13, 20, [35, 35], [49, 61]]) == 213"], "entry_point": "recursive_list_sum", "repair_prompt": ["Write a function recursive_list_sum to flatten a list and sum all of its elements.\nrecursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n", "Write a function recursive_list_sum to flatten a list. The function should also sum all of its elements.\nrecursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n", "Write a function recursive_list_sum to flatten a list and sum all of its elements.\nrecursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n"], "completions": ["from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Recursively sums all numeric elements in a nested list.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists of numeric elements.\n\n    Returns:\n    int: The sum of all numeric elements in the nested list.\n\n    Raises:\n    TypeError: If the input is not a list.\n    \"\"\"\n    if not isinstance(nested_list, list):\n        raise TypeError(\"Input must be a list\")\n\n    total = 0\n    for element in nested_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            total += element\n    return total\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists of integers.\n\n    Returns:\n    int: The sum of all numeric elements in the list.\n    \"\"\"\n    total_sum = 0\n    for element in nested_list:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):  # Check if element is a number\n            total_sum += element\n    return total_sum\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(recursive_list_sum([]))  # Expected output: 0\n    print(recursive_list_sum([1, [2, [3, [4, [5]]]]]))  # Expected output: 15\n    print(recursive_list_sum([1, 'a', [2, [3, 'b']]]))  # Expected output: 6\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively flattens a nested list and sums all numeric elements.\n\n    Parameters:\n    lst (list): A potentially nested list containing numeric and non-numeric elements.\n\n    Returns:\n    int: The sum of all numeric elements in the list.\n    \"\"\"\n    total_sum = 0\n\n    for element in lst:\n        if isinstance(element, list):\n            # Recursively sum the elements of the sublist\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            # Add numeric elements directly to the total sum\n            total_sum += element\n        # Non-numeric elements are ignored\n\n    return total_sum\n\n# Example usage:\n# print(recursive_list_sum([1, [2, [3, [4, [5]]]]]))  # Output: 15\n# print(recursive_list_sum([[], [[], []]]))           # Output: 0\n# print(recursive_list_sum([]))                       # Output: 0\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists of integers.\n\n    Returns:\n    int: The sum of all numeric elements in the list.\n    \"\"\"\n    def flatten_and_sum(lst: list) -> int:\n        \"\"\"Helper function to recursively flatten and sum numeric elements.\"\"\"\n        total_sum = 0\n        for element in lst:\n            if isinstance(element, list):\n                total_sum += flatten_and_sum(element)\n            elif isinstance(element, (int, float)):\n                total_sum += element\n        return total_sum\n\n    return flatten_and_sum(nested_list)\n\n# Example usage:\n# print(recursive_list_sum([1, [2, [3, [4]]]]))  # Output: 10\n# print(recursive_list_sum([]))  # Output: 0\n# print(recursive_list_sum([[], [[], []]]))  # Output: 0\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists.\n\n    Returns:\n    int: The sum of all numeric elements in the list.\n    \"\"\"\n    def flatten_and_sum(lst: list) -> int:\n        total_sum = 0\n        for element in lst:\n            if isinstance(element, list):\n                total_sum += flatten_and_sum(element)\n            elif isinstance(element, (int, float)):\n                total_sum += element\n            else:\n                raise ValueError(\"Non-numeric element found in the list.\")\n        return total_sum\n\n    return flatten_and_sum(nested_list)\n\n# Example usage:\n# print(recursive_list_sum([1, [2, [3, [4]]]]))  # Output: 10\n# print(recursive_list_sum([]))  # Output: 0\n# print(recursive_list_sum([0, [0, [0]]]))  # Output: 0\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists of integers.\n\n    Returns:\n    int: The sum of all numeric elements in the flattened list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively call the function for sublists\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            # Add numeric elements to the sum\n            total_sum += element\n\n    return total_sum\n\n# Example usage:\n# print(recursive_list_sum([1, [2, [3, [4]]]]))  # Output: 10\n# print(recursive_list_sum([1, 'a', [2, 'b', [3, 'c']]]))  # Output: 6\n# print(recursive_list_sum([]))  # Output: 0\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all numeric elements.\n\n    Args:\n        nested_list (list): A list that may contain nested lists of integers.\n\n    Returns:\n        int: The sum of all numeric elements in the nested list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively call recursive_list_sum for nested lists\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            # Add numeric elements directly to the sum\n            total_sum += element\n        else:\n            # If non-numeric elements are encountered, raise an error\n            raise ValueError(\"Non-numeric element found in the list\")\n\n    return total_sum\n\n# Example usage:\n# print(recursive_list_sum([1, [2, [3, [4]]]]))  # Output: 10\n# print(recursive_list_sum([0, [0, [0]]]))       # Output: 0\n# print(recursive_list_sum([]))                  # Output: 0\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    lst (list): A potentially nested list of elements.\n\n    Returns:\n    int: The sum of all numeric elements in the list.\n    \"\"\"\n    total_sum = 0\n\n    for element in lst:\n        if isinstance(element, list):\n            # If the element is a list, call the function recursively\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            # If the element is a number, add it to the sum\n            total_sum += element\n\n    return total_sum\n\n# Example usage:\n# print(recursive_list_sum([1, [2, [3, [4]]]]))  # Output: 10\n# print(recursive_list_sum([1, 'a', [2, 'b', [3, 'c']]]))  # Output: 6\n# print(recursive_list_sum([]))  # Output: 0\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Recursively sums all elements in a nested list.\n\n    Parameters:\n    nested_list (list): A list that may contain integers and other lists.\n\n    Returns:\n    int: The sum of all integers in the nested list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively sum the elements of the sublist\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            # Add the integer directly to the total sum\n            total_sum += element\n        else:\n            # If the element is not an integer or list, raise a TypeError\n            raise TypeError(\"All elements must be integers or lists of integers.\")\n\n    return total_sum\n\n# Example usage:\n# print(recursive_list_sum([1, [2, [3, [4, [5]]]]]))  # Output: 15\n# print(recursive_list_sum([0, [0, [0]]]))            # Output: 0\n# print(recursive_list_sum([]))                       # Output: 0\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    This function takes a nested list as input and returns the sum of all numeric elements.\n    \n    Args:\n        nested_list (list): A list that may contain integers and other lists.\n        \n    Returns:\n        int: The sum of all numeric elements in the nested list.\n    \"\"\"\n    total_sum = 0\n    \n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively call the function if the element is a list\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            # Add the element to the sum if it is an integer\n            total_sum += element\n        else:\n            # Ignore non-numeric elements\n            pass\n    \n    return total_sum\n\n# Example usage:\n# print(recursive_list_sum([1, [2, [3, [4]]]]))  # Output: 10\n# print(recursive_list_sum([]))  # Output: 0\n# print(recursive_list_sum([0, [0, [0]]]))  # Output: 0\n"], "plans": ["requirement analysis:\nThe function should recursively traverse nested lists, flatten them, and compute the sum of all elements. It must handle various data types within the list and provide error handling for non-list inputs.\nrequirement pool:\n- Implement recursive list traversal and summation\n- Optimize for performance with large datasets\n- Include error handling for invalid inputs\n- Document function usage and edge cases\n- Test function with diverse list structures\nWe will implement a recursive function that traverses through the nested list structure, checks for numeric elements, and sums them up. The function will handle deeply nested lists efficiently by using recursion. Additionally, it will include error handling to ensure the input is a list and will raise an appropriate error message if the input is invalid.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten'\n    Explanation: In the requirement, 'flatten' means converting a nested list structure into a single-level list where all elements are accessible directly.\n\n    'sum'\n    Explanation: 'Sum' refers to the addition of all numeric elements within the flattened list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a recursive function that takes a list as input.\n    2. Initialize a sum variable to zero.\n    3. Iterate through each element in the list:\n        - If the element is a list, recursively call the function and add the result to the sum.\n        - If the element is a number, add it directly to the sum.\n    4. Return the sum after processing all elements.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n    \n    recursive_list_sum([1, [2, [3, [4]]]]) = 10\n    Explanation: The nested list structure should be flattened and summed, resulting in 1 + 2 + 3 + 4 = 10.\n    \n    recursive_list_sum([1, 'a', [2, [3, 'b']]]) = 6\n    Explanation: Non-numeric elements should be ignored, resulting in 1 + 2 + 3 = 6.\n\n# [extra code for edge case]\n    We need extra code to handle non-numeric elements.\n        def recursive_list_sum(lst):\n            if not isinstance(lst, list):\n                raise ValueError(\"Input must be a list\")\n            \n            total = 0\n            for element in lst:\n                if isinstance(element, list):\n                    total += recursive_list_sum(element)\n                elif isinstance(element, (int, float)):\n                    total += element\n            return total\n", "requirement analysis:\nThe function needs to handle nested lists of varying depths and types, ensuring all elements are summed correctly. Performance optimization is crucial for handling large datasets.\nrequirement pool:\n- Implement recursive list flattening and summation\n- Optimize for performance with large datasets\n- Provide clear documentation and usage examples\n- Ensure compatibility with different Python versions\n- Include error handling for non-list inputs\nWe will implement a recursive function to flatten and sum elements of a nested list. The function will handle lists of varying depths and ensure all numeric elements are summed correctly. We will use Python's built-in capabilities to achieve this without additional libraries, as they provide sufficient functionality for this task. The function will include error handling to manage non-list inputs and non-numeric elements within the list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten a list'\n    Explanation: This means converting a nested list (a list containing other lists) into a single list with all the elements at the same level.\n\n    'sum all of its elements'\n    Explanation: This means adding together all the numeric elements in the list, regardless of their original nesting level.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a recursive function `recursive_list_sum` that takes a list as input.\n    2. Initialize a variable `total_sum` to 0 to keep track of the sum of elements.\n    3. Iterate through each element in the list:\n        - If the element is a list, recursively call `recursive_list_sum` on this element and add the result to `total_sum`.\n        - If the element is a number, add it directly to `total_sum`.\n    4. Return `total_sum` as the final result.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n    \n    recursive_list_sum([1, [2, [3, [4, [5]]]]]) = 15\n    Explanation: The function should correctly handle deeply nested lists and sum all elements: 1 + 2 + 3 + 4 + 5 = 15.\n    \n    recursive_list_sum([1, 'a', [2, [3, 'b']]]) = 6\n    Explanation: Non-numeric elements should be ignored in the sum. Only numeric elements are summed: 1 + 2 + 3 = 6.\n\n# [extra code for edge case]\n    We need extra code to handle non-numeric elements.\n        def recursive_list_sum(lst):\n            total_sum = 0\n            for element in lst:\n                if isinstance(element, list):\n                    total_sum += recursive_list_sum(element)\n                elif isinstance(element, (int, float)):  # Check if element is a number\n                    total_sum += element\n            return total_sum\n", "requirement analysis:\nThe function should recursively traverse nested lists, flatten them, and sum all elements. It must handle various levels of nesting and different data types within the list, ensuring type safety and error handling.\nrequirement pool:\n- Implement the recursive list flattening and summing function\n- Ensure the function handles edge cases like empty lists\n- Optimize the function for performance with large datasets\n- Provide comprehensive documentation and usage examples\n- Include error handling for non-numeric elements\nWe will implement a recursive function that traverses through nested lists, flattening them and summing all numeric elements. The function will ignore non-numeric elements to ensure type safety and avoid errors. We will use native Python capabilities to achieve this, ensuring the function is efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten a list'\n    Explanation: This means converting a nested list structure into a single list containing all the elements without any sublists.\n\n    'sum all of its elements'\n    Explanation: This means adding up all the numeric values present in the list after flattening it.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a recursive function `recursive_list_sum` that takes a list as input.\n    2. Initialize a variable `total_sum` to 0 to keep track of the sum of elements.\n    3. Iterate through each element in the list:\n        - If the element is a list, recursively call `recursive_list_sum` on this sublist and add the result to `total_sum`.\n        - If the element is a number, add it directly to `total_sum`.\n        - Ignore non-numeric elements.\n    4. Return `total_sum` as the final result.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n    \n    recursive_list_sum([[], [[], []]]) = 0\n    Explanation: A list with only empty sublists also results in a sum of 0.\n    \n    recursive_list_sum([1, [2, [3, [4, [5]]]]]) = 15\n    Explanation: The nested structure is flattened to [1, 2, 3, 4, 5], and their sum is 15.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive logic inherently handles empty lists and deeply nested structures.\n", "requirement analysis:\nThe function needs to recursively traverse nested lists, flatten them, and compute the sum of all elements. It should handle various data types within the list and provide accurate results.\nrequirement pool:\n- Implement recursive list traversal\n- Ensure accurate sum computation\n- Optimize for performance with large lists\n- Provide clear documentation\n- Include examples for user understanding\nWe will implement a recursive function to traverse and flatten nested lists while summing their elements. The function will handle deeply nested lists efficiently by using recursion. We will ensure that the function only processes numeric elements, and any non-numeric elements will be ignored. This approach will be simple yet efficient for the given task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten a list'\n    Explanation: This means converting a nested list (a list containing other lists) into a single list with no nested lists.\n\n    'sum all of its elements'\n    Explanation: This means adding up all the numeric elements in the list, including those within any nested lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a recursive function `recursive_list_sum` that takes a list as input.\n    2. Initialize a variable `total_sum` to 0 to keep track of the sum of elements.\n    3. Iterate through each element in the list:\n        - If the element is a list, recursively call `recursive_list_sum` on this element and add the result to `total_sum`.\n        - If the element is a number, add it directly to `total_sum`.\n    4. Return `total_sum` as the final result.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n    \n    recursive_list_sum([[], [[], []]]) = 0\n    Explanation: A list with only empty nested lists also has no elements to sum, so the expected output is 0.\n    \n    recursive_list_sum([1, [2, [3, [4]]]]) = 10\n    Explanation: The nested structure should be flattened and summed as 1 + 2 + 3 + 4 = 10.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive logic inherently handles empty lists and deeply nested structures.\n", "requirement analysis:\nThe function needs to handle nested lists of varying depths and types, ensuring all elements are summed correctly. It should be efficient and easy to use, with clear documentation for integration.\nrequirement pool:\n- Implement recursive list flattening and summing\n- Optimize for performance with large datasets\n- Provide comprehensive documentation\n- Include error handling for non-list inputs\n- Support for different data types within lists\nWe will implement a recursive function to flatten and sum elements of a nested list. The function will handle deeply nested lists efficiently using recursion. We will use Python's built-in capabilities without additional libraries to keep the solution simple and easy to integrate. The function will include error handling for non-list inputs and support different data types within lists, focusing on numeric types for summation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten': means converting a nested list into a single list with no sublists.\n    'sum': means adding all the elements together to get a total.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a recursive function that takes a list as input.\n    2. Initialize a sum variable to zero.\n    3. Iterate through each element in the list:\n        - If the element is a list, recursively call the function and add the result to the sum.\n        - If the element is a number, add it directly to the sum.\n    4. Return the sum.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n    \n    recursive_list_sum([1, [2, [3, [4]]]]) = 10\n    Explanation: The nested list is flattened and summed: 1 + 2 + 3 + 4 = 10.\n    \n    recursive_list_sum([0, [0, [0]]]) = 0\n    Explanation: All elements are zero, so the sum is zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach naturally handles empty lists and deeply nested lists.\n", "requirement analysis:\nThe function needs to recursively traverse nested lists, flatten them, and compute the sum of all elements. It should handle various data types within the list and provide accurate results.\nrequirement pool:\n- Implement recursive list traversal\n- Ensure accurate sum computation\n- Optimize for performance with large lists\n- Provide clear documentation\n- Include examples for user understanding\nWe will implement a recursive function to traverse and flatten nested lists while summing all numeric elements. The function will handle deeply nested lists efficiently by using recursion. We will use Python's built-in capabilities without additional libraries to keep the solution simple and easy to integrate. Non-numeric elements will be ignored during the summation process.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten'\n    Explanation: In the requirement, \"flatten\" means converting a nested list into a single list containing all the elements without any sublists.\n\n    'sum'\n    Explanation: \"Sum\" refers to the addition of all numeric elements within the flattened list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a recursive function that takes a list as input.\n    2. Initialize a variable to keep track of the sum.\n    3. Iterate through each element in the list:\n        - If the element is a list, recursively call the function on this sublist and add the result to the sum.\n        - If the element is a number, add it directly to the sum.\n    4. Return the total sum after processing all elements.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n\n    recursive_list_sum([1, [2, [3, [4]]]]) = 10\n    Explanation: The nested list is flattened to [1, 2, 3, 4], and their sum is 10.\n\n    recursive_list_sum([1, 'a', [2, 'b', [3, 'c']]]) = 6\n    Explanation: Non-numeric elements are ignored, so only numbers are summed: 1 + 2 + 3 = 6.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive logic inherently handles empty lists and ignores non-numeric elements.\n", "requirement analysis:\nThe function should efficiently flatten and sum elements of nested lists, ensuring it handles various levels of nesting without performance degradation.\nrequirement pool:\n- Implement recursive list flattening and summation\n- Optimize for performance with large datasets\n- Provide comprehensive documentation\n- Include error handling for non-list inputs\n- Offer examples for user understanding\nWe will implement a recursive function to traverse and sum elements of nested lists. The function will check if an element is a list and recursively call itself to flatten and sum the elements. We will use Python's built-in capabilities without additional libraries to keep the implementation simple and efficient.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten'\n    Explanation: In the requirement, \"flatten\" means converting a nested list into a single-level list where all elements are accessible directly.\n\n    'sum'\n    Explanation: \"Sum\" refers to the addition of all elements in the list, including those within nested lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a function `recursive_list_sum` that takes a list as input.\n    2. Initialize a variable `total_sum` to store the cumulative sum of elements.\n    3. Iterate through each element in the list:\n        - If the element is a list, recursively call `recursive_list_sum` on this element and add the result to `total_sum`.\n        - If the element is not a list, add it directly to `total_sum`.\n    4. Return `total_sum`.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n    \n    recursive_list_sum([1, [2, [3, [4]]]]) = 10\n    Explanation: The nested structure should be flattened and summed as 1 + 2 + 3 + 4 = 10.\n    \n    recursive_list_sum([0, [0, [0]]]) = 0\n    Explanation: All elements are zero, so the sum is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach inherently handles empty lists and deeply nested structures.\n", "requirement analysis:\nThe function should recursively traverse nested lists, flatten them, and compute the sum of all elements. It must handle various levels of nesting and different data types within the list, ensuring type safety and error handling.\nrequirement pool:\n- Implement the recursive list flattening and summing function\n- Ensure the function handles edge cases like empty lists\n- Optimize the function for performance with large and deeply nested lists\n- Provide comprehensive documentation and examples\n- Include unit tests to verify functionality\nWe will implement a recursive function that traverses through each element of the list. If an element is a list itself, the function will call itself recursively to handle the nested list. Non-numeric elements will be ignored to ensure type safety and prevent errors. The function will be optimized to handle large and deeply nested lists efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten'\n    Explanation: In the requirement, 'flatten' means converting a nested list into a single-level list where all elements are accessible directly.\n\n    'sum'\n    Explanation: 'sum' refers to the addition of all numeric elements in the flattened list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a recursive function that takes a list as input.\n    2. Initialize a variable to keep track of the sum.\n    3. Iterate through each element in the list:\n        - If the element is a list, call the function recursively and add the result to the sum.\n        - If the element is a number, add it directly to the sum.\n    4. Return the total sum.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n\n    recursive_list_sum([1, [2, [3, [4]]]]) = 10\n    Explanation: The nested list is flattened to [1, 2, 3, 4], and their sum is 10.\n\n    recursive_list_sum([1, 'a', [2, 'b', [3, 'c']]]) = 6\n    Explanation: Non-numeric elements are ignored, so the flattened list is [1, 2, 3], and their sum is 6.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive logic inherently handles empty lists and ignores non-numeric elements.\n", "requirement analysis:\nThe function should recursively traverse nested lists, flatten them, and compute the sum of all elements. It must handle various levels of nesting efficiently.\nrequirement pool:\n- Implement recursive list traversal and summation\n- Optimize for performance with large datasets\n- Provide comprehensive documentation\n- Include error handling for non-numeric values\n- Support for additional data types if necessary\nWe will implement a recursive function to traverse and sum elements of nested lists. The function will check if an element is a list and recursively call itself to flatten and sum the elements. We will use Python's built-in capabilities without additional libraries to keep the solution simple and efficient.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten a list'\n    Explanation: This means converting a nested list (a list containing other lists) into a single list with all elements at the same level.\n\n    'sum all of its elements'\n    Explanation: This means adding up all the numbers in the list, including those in any nested lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a function `recursive_list_sum` that takes a list as an argument.\n    2. Initialize a variable `total_sum` to 0 to keep track of the sum of elements.\n    3. Iterate over each element in the list:\n        - If the element is a list, recursively call `recursive_list_sum` on this element and add the result to `total_sum`.\n        - If the element is not a list, add it directly to `total_sum`.\n    4. Return `total_sum` as the result.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n    \n    recursive_list_sum([0, [0, [0]]]) = 0\n    Explanation: All elements are zero, so the sum is 0.\n    \n    recursive_list_sum([1, [2, [3, [4, [5]]]]]) = 15\n    Explanation: The list is deeply nested but contains numbers from 1 to 5. The sum of these numbers is 15.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach inherently handles empty lists and deeply nested structures.\n", "requirement analysis:\nThe function should recursively traverse nested lists, flatten them, and compute the sum of all elements. It must handle various levels of nesting and different data types within the list.\nrequirement pool:\n- Implement recursive list flattening and summing\n- Optimize for performance with large lists\n- Provide comprehensive documentation\n- Include error handling for non-numeric elements\n- Support for additional data types if needed\nWe will implement a recursive function that traverses through each element of the list. If an element is a list itself, the function will call itself recursively to flatten and sum the elements. This approach ensures that all levels of nesting are handled efficiently. We will use Python's built-in capabilities without relying on external libraries, as they are sufficient for this task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten'\n    Explanation: In the requirement, 'flatten' means converting a nested list into a single-level list where all elements are accessible directly.\n\n    'sum'\n    Explanation: 'sum' refers to the addition of all elements in the list, including those within nested lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a function `recursive_list_sum` that takes a list as input.\n    2. Initialize a variable `total_sum` to 0 to keep track of the sum.\n    3. Iterate through each element in the list:\n        - If the element is a list, call `recursive_list_sum` recursively on this element and add the result to `total_sum`.\n        - If the element is not a list, add its value directly to `total_sum`.\n    4. Return `total_sum`.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n    \n    recursive_list_sum([1, [2, [3, [4]]]]) = 10\n    Explanation: The nested structure should be flattened and summed correctly, resulting in 1 + 2 + 3 + 4 = 10.\n    \n    recursive_list_sum([0, [0, [0]]]) = 0\n    Explanation: All elements are zero, so the sum is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach inherently handles empty lists and deeply nested structures.\n"], "test": ["def check(recursive_list_sum):\n\tassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "def check(recursive_list_sum):\n\tassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "def check(recursive_list_sum):\n\tassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 1, [7, 2], [1, 1]]) == 15", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 7, [5, 7], [7, 2]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 4, [1, 5], [9, 6]]) == 29", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 5, [5, 8], [2, 1]]) == 22", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 3, [3, 8], [2, 4]]) == 21", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 2, [8, 3], [3, 2]]) == 22", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 5, [8, 1], [7, 11]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 6, [2, 8], [7, 5]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 4, [3, 3], [10, 2]]) == 26", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 3, [2, 2], [10, 1]]) == 19", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 1, [7, 9], [2, 1]]) == 23", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 7, [4, 8], [7, 10]]) == 42", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 7, [5, 7], [1, 5]]) == 27", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 3, [1, 9], [1, 11]]) == 28", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 5, [5, 8], [10, 7]]) == 37", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 2, [3, 6], [7, 6]]) == 27", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 7, [1, 5], [4, 4]]) == 25", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 4, [7, 4], [4, 7]]) == 31", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 2, [5, 8], [4, 1]]) == 21", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 1, [4, 8], [8, 8]]) == 30", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 2, [3, 9], [8, 11]]) == 37", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 5, [1, 7], [8, 4]]) == 31", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 7, [2, 7], [8, 4]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 3, [2, 6], [9, 4]]) == 25", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 7, [1, 8], [9, 11]]) == 42", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 1, [1, 9], [10, 6]]) == 28", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 4, [8, 8], [8, 6]]) == 35", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 4, [2, 6], [6, 2]]) == 26", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 5, [4, 8], [5, 4]]) == 27", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 6, [1, 1], [4, 5]]) == 20", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 4, [3, 9], [10, 9]]) == 40", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 6, [8, 9], [5, 3]]) == 37", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 2, [7, 1], [5, 9]]) == 26", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 8, [13, 14], [23, 46]]) == 106", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 13, [16, 14], [14, 36]]) == 101", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 14, [19, 15], [16, 40]]) == 106", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 12, [13, 18], [21, 41]]) == 112", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 8, [14, 12], [23, 43]]) == 107", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 12, [18, 12], [20, 36]]) == 110", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 9, [14, 12], [24, 39]]) == 110", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 11, [17, 12], [15, 41]]) == 103", "def check(recursive_list_sum):\n\tassert recursive_list_sum([10, 12, [19, 15], [19, 46]]) == 121", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 12, [14, 19], [15, 38]]) == 110", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 8, [13, 15], [18, 38]]) == 101", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 11, [15, 13], [17, 40]]) == 104", "def check(recursive_list_sum):\n\tassert recursive_list_sum([10, 15, [19, 10], [17, 42]]) == 113", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 12, [11, 12], [21, 46]]) == 108", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 10, [13, 15], [24, 45]]) == 115", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 13, [12, 19], [15, 43]]) == 104", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 8, [19, 11], [15, 44]]) == 104", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 13, [19, 18], [16, 45]]) == 116", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 6, [17, 16], [16, 39]]) == 105", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 13, [20, 14], [21, 46]]) == 125", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 9, [16, 15], [20, 45]]) == 111", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 8, [11, 16], [23, 45]]) == 108", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 11, [11, 10], [16, 41]]) == 98", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 5, [18, 10], [18, 40]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 6, [12, 13], [21, 46]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 10, [15, 9], [18, 38]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 13, [20, 9], [22, 39]]) == 108", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 7, [16, 15], [21, 39]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 9, [15, 19], [19, 45]]) == 116", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 13, [18, 19], [17, 39]]) == 113", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 15, [19, 18], [21, 37]]) == 116", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 5, [13, 19], [15, 38]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 10, [10, 9], [17, 40]]) == 98", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 15, [31, 43], [47, 56]]) == 203", "def check(recursive_list_sum):\n\tassert recursive_list_sum([15, 19, [32, 41], [54, 64]]) == 225", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 22, [28, 35], [55, 59]]) == 207", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 23, [35, 40], [54, 60]]) == 220", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 20, [32, 42], [45, 57]]) == 202", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 17, [26, 44], [55, 60]]) == 211", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 20, [35, 45], [51, 62]]) == 226", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 20, [35, 37], [49, 60]]) == 208", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 25, [27, 43], [54, 55]]) == 213", "def check(recursive_list_sum):\n\tassert recursive_list_sum([15, 17, [34, 38], [49, 58]]) == 211", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 21, [26, 44], [52, 56]]) == 204", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 20, [29, 43], [46, 61]]) == 206", "def check(recursive_list_sum):\n\tassert recursive_list_sum([14, 25, [34, 42], [48, 57]]) == 220", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 25, [32, 40], [49, 61]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 16, [34, 36], [49, 55]]) == 196", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 23, [26, 35], [49, 57]]) == 201", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 19, [25, 42], [49, 60]]) == 204", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 19, [29, 41], [55, 57]]) == 214", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 18, [32, 37], [49, 55]]) == 204", "def check(recursive_list_sum):\n\tassert recursive_list_sum([10, 23, [28, 36], [46, 57]]) == 200", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 16, [32, 43], [53, 58]]) == 214", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 16, [29, 45], [51, 57]]) == 209", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 15, [27, 44], [54, 57]]) == 210", "def check(recursive_list_sum):\n\tassert recursive_list_sum([15, 23, [28, 38], [52, 62]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([14, 16, [34, 42], [53, 62]]) == 221", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 19, [25, 43], [48, 65]]) == 207", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 25, [35, 37], [51, 58]]) == 215", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 22, [33, 41], [51, 63]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 21, [30, 36], [45, 61]]) == 199", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 24, [27, 42], [46, 56]]) == 207", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 21, [33, 41], [48, 63]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 25, [32, 41], [45, 61]]) == 216", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 20, [35, 35], [49, 61]]) == 213"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    This function takes a nested list as input and returns the sum of all numeric elements.\n    \n    Args:\n        nested_list (list): A list that may contain integers and other lists.\n        \n    Returns:\n        int: The sum of all numeric elements in the nested list.\n    \"\"\"\n    total_sum = 0\n    \n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively call the function if the element is a list\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            # Add the element to the sum if it is an integer\n            total_sum += element\n        else:\n            # Ignore non-numeric elements\n            pass\n    \n    return total_sum\n\n# Example usage:\n# print(recursive_list_sum([1, [2, [3, [4]]]]))  # Output: 10\n# print(recursive_list_sum([]))  # Output: 0\n# print(recursive_list_sum([0, [0, [0]]]))  # Output: 0\n", "passed": true, "pass": true, "pass_num": 10, "round": 19, "mutate_method": "condense_two2one", "parent_index": 19}
