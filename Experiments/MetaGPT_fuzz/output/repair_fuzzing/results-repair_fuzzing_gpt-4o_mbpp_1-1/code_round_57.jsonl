{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 133, "prompt": "Write a function to calculate the sum of the negative numbers from a given list. The list is composed of both positive and negative numbers.", "code": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)", "test_imports": [], "test_list": ["assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32", "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52", "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894", "assert sum_negativenum([6, 4, -9, -8, 12, -14, 12, -9, 22]) == -40", "assert sum_negativenum([6, 4, -1, -12, 12, -12, 13, -5, 20]) == -30", "assert sum_negativenum([6, 7, -9, -13, 12, -10, 11, -2, 13]) == -34", "assert sum_negativenum([2, 7, -6, -14, 8, -8, 18, 0, 15]) == -28", "assert sum_negativenum([4, 4, -2, -13, 6, -7, 16, -4, 20]) == -26", "assert sum_negativenum([2, 3, -1, -12, 9, -11, 13, -6, 21]) == -30", "assert sum_negativenum([5, 1, -8, -5, 10, -13, 12, -9, 19]) == -35", "assert sum_negativenum([4, 8, -4, -8, 16, -7, 16, -2, 14]) == -21", "assert sum_negativenum([6, 1, -5, -13, 10, -17, 13, -9, 18]) == -44", "assert sum_negativenum([6, 1, -2, -14, 12, -13, 19, -3, 20]) == -32", "assert sum_negativenum([3, 9, -6, -7, 12, -13, 15, -2, 20]) == -28", "assert sum_negativenum([5, 7, -1, -14, 13, -11, 9, -4, 12]) == -30", "assert sum_negativenum([6, 9, -11, -12, 11, -11, 15, 0, 22]) == -34", "assert sum_negativenum([2, 1, -1, -13, 13, -16, 19, -2, 19]) == -32", "assert sum_negativenum([4, 4, -7, -5, 15, -16, 12, -6, 17]) == -34", "assert sum_negativenum([2, 1, -7, -9, 14, -10, 10, -7, 15]) == -33", "assert sum_negativenum([3, 3, -8, -11, 15, -13, 19, -3, 18]) == -35", "assert sum_negativenum([6, 7, -4, -12, 10, -8, 13, -1, 16]) == -25", "assert sum_negativenum([1, 8, -7, -8, 13, -9, 17, -2, 22]) == -26", "assert sum_negativenum([5, 4, -3, -13, 16, -11, 17, -10, 12]) == -37", "assert sum_negativenum([5, 6, -4, -10, 6, -7, 10, -7, 14]) == -28", "assert sum_negativenum([1, 8, -6, -9, 11, -14, 18, -8, 15]) == -37", "assert sum_negativenum([5, 1, -10, -10, 14, -8, 10, -10, 15]) == -38", "assert sum_negativenum([4, 6, -11, -4, 14, -16, 10, -10, 19]) == -41", "assert sum_negativenum([6, 2, -6, -14, 16, -8, 9, -10, 18]) == -38", "assert sum_negativenum([6, 7, -8, -5, 15, -13, 13, -8, 16]) == -34", "assert sum_negativenum([2, 1, -4, -7, 10, -9, 12, -2, 15]) == -22", "assert sum_negativenum([5, 6, -5, -7, 16, -11, 13, -9, 22]) == -32", "assert sum_negativenum([4, 7, -4, -11, 15, -15, 12, -8, 16]) == -38", "assert sum_negativenum([2, 2, -10, -7, 10, -7, 19, -8, 20]) == -32", "assert sum_negativenum([2, 3, -7, -9, 16, -16, 19, -9, 13]) == -41", "assert sum_negativenum([5, 1, -5, -9, 11, -9, 18, -8, 16]) == -31", "assert sum_negativenum([1, 5, -6, -4, 6, -8, 18, 0, 21]) == -18", "assert sum_negativenum([9, 14, -11, 8, -18, 12, -15]) == -44", "assert sum_negativenum([9, 16, -12, 10, -21, 16, -16]) == -49", "assert sum_negativenum([14, 15, -19, 16, -22, 14, -15]) == -56", "assert sum_negativenum([11, 15, -17, 12, -18, 11, -21]) == -56", "assert sum_negativenum([7, 10, -14, 13, -20, 11, -21]) == -55", "assert sum_negativenum([5, 19, -13, 15, -14, 16, -21]) == -48", "assert sum_negativenum([7, 15, -11, 11, -14, 14, -24]) == -49", "assert sum_negativenum([10, 16, -18, 11, -22, 16, -21]) == -61", "assert sum_negativenum([13, 11, -17, 13, -13, 16, -16]) == -46", "assert sum_negativenum([10, 14, -9, 9, -21, 14, -18]) == -48", "assert sum_negativenum([11, 14, -17, 16, -20, 8, -24]) == -61", "assert sum_negativenum([14, 14, -9, 15, -13, 9, -23]) == -45", "assert sum_negativenum([5, 14, -15, 12, -13, 12, -19]) == -47", "assert sum_negativenum([9, 10, -15, 14, -15, 8, -19]) == -49", "assert sum_negativenum([9, 10, -9, 18, -23, 15, -25]) == -57", "assert sum_negativenum([8, 12, -10, 9, -23, 16, -21]) == -54", "assert sum_negativenum([15, 12, -14, 17, -20, 10, -16]) == -50", "assert sum_negativenum([10, 13, -14, 17, -13, 16, -21]) == -48", "assert sum_negativenum([8, 17, -15, 12, -20, 16, -17]) == -52", "assert sum_negativenum([13, 19, -15, 10, -19, 11, -21]) == -55", "assert sum_negativenum([12, 18, -17, 15, -17, 15, -15]) == -49", "assert sum_negativenum([5, 10, -10, 8, -22, 14, -24]) == -56", "assert sum_negativenum([11, 13, -9, 17, -17, 10, -16]) == -42", "assert sum_negativenum([7, 11, -10, 10, -13, 17, -16]) == -39", "assert sum_negativenum([11, 10, -16, 17, -22, 13, -24]) == -62", "assert sum_negativenum([5, 17, -16, 12, -19, 13, -18]) == -53", "assert sum_negativenum([6, 14, -15, 12, -15, 9, -17]) == -47", "assert sum_negativenum([7, 16, -15, 11, -21, 8, -16]) == -52", "assert sum_negativenum([15, 15, -16, 17, -17, 8, -22]) == -55", "assert sum_negativenum([13, 17, -11, 9, -20, 17, -18]) == -49", "assert sum_negativenum([10, 16, -18, 12, -21, 16, -20]) == -59", "assert sum_negativenum([10, 20, -15, 18, -21, 14, -16]) == -52", "assert sum_negativenum([11, 13, -17, 14, -18, 17, -20]) == -55", "assert sum_negativenum([14, -66, 54, 41, 154, -636, 123, 49, 90, -195]) == -897", "assert sum_negativenum([23, -67, 56, 42, 152, -641, 117, 48, 94, -191]) == -899", "assert sum_negativenum([21, -66, 55, 37, 150, -641, 118, 40, 92, -195]) == -902", "assert sum_negativenum([14, -67, 57, 36, 152, -641, 116, 40, 95, -194]) == -902", "assert sum_negativenum([20, -62, 52, 34, 156, -640, 126, 40, 85, -185]) == -887", "assert sum_negativenum([14, -60, 57, 40, 151, -643, 124, 43, 86, -192]) == -895", "assert sum_negativenum([24, -68, 55, 44, 152, -637, 116, 47, 87, -194]) == -899", "assert sum_negativenum([24, -61, 62, 43, 157, -639, 120, 46, 91, -188]) == -888", "assert sum_negativenum([18, -70, 62, 42, 157, -644, 126, 43, 93, -189]) == -903", "assert sum_negativenum([23, -70, 54, 43, 157, -637, 117, 48, 85, -188]) == -895", "assert sum_negativenum([22, -68, 59, 38, 149, -644, 117, 39, 88, -192]) == -904", "assert sum_negativenum([24, -61, 54, 41, 154, -643, 117, 45, 93, -195]) == -899", "assert sum_negativenum([19, -62, 52, 37, 150, -634, 126, 46, 85, -190]) == -886", "assert sum_negativenum([24, -67, 60, 37, 150, -639, 120, 44, 95, -189]) == -895", "assert sum_negativenum([17, -61, 58, 35, 155, -634, 125, 44, 87, -191]) == -886", "assert sum_negativenum([20, -67, 55, 35, 148, -635, 121, 41, 92, -186]) == -888", "assert sum_negativenum([17, -66, 59, 43, 154, -639, 125, 45, 90, -186]) == -891", "assert sum_negativenum([24, -62, 53, 39, 148, -639, 119, 44, 87, -195]) == -896", "assert sum_negativenum([16, -65, 59, 38, 156, -643, 126, 48, 89, -194]) == -902", "assert sum_negativenum([16, -67, 56, 41, 157, -642, 117, 47, 94, -185]) == -894", "assert sum_negativenum([15, -69, 57, 35, 157, -639, 122, 47, 87, -194]) == -902", "assert sum_negativenum([19, -69, 53, 35, 153, -638, 123, 43, 89, -187]) == -894", "assert sum_negativenum([15, -70, 61, 44, 154, -644, 119, 46, 85, -191]) == -905", "assert sum_negativenum([14, -66, 60, 36, 147, -635, 126, 47, 92, -190]) == -891", "assert sum_negativenum([16, -67, 52, 42, 153, -636, 122, 47, 94, -194]) == -897", "assert sum_negativenum([17, -66, 61, 38, 154, -639, 120, 41, 86, -189]) == -894", "assert sum_negativenum([19, -63, 57, 35, 147, -643, 125, 42, 85, -192]) == -898", "assert sum_negativenum([14, -67, 53, 42, 154, -638, 120, 44, 90, -192]) == -897", "assert sum_negativenum([19, -66, 57, 44, 152, -637, 124, 44, 91, -185]) == -888", "assert sum_negativenum([21, -68, 62, 40, 156, -638, 122, 41, 89, -191]) == -897", "assert sum_negativenum([18, -70, 54, 39, 156, -644, 117, 46, 95, -189]) == -903", "assert sum_negativenum([24, -62, 62, 40, 157, -639, 117, 39, 85, -191]) == -892", "assert sum_negativenum([21, -68, 53, 44, 150, -641, 122, 43, 94, -189]) == -898"], "entry_point": "sum_negativenum", "repair_prompt": ["Write a function sum_negativenum to calculate the sum of the negative numbers from a given list. The list is composed of both positive and negative numbers.\nsum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n", "Write a function sum_negativenum to calculate the sum of the negative numbers from a given list. The list contains integers that are both positive and negative. Some numbers in the list are above zero, while others are below zero.\nsum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n", "Write a function sum_negativenum to calculate the sum of the negative numbers from a given list composed of both positive and negative numbers.\nsum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n"], "completions": ["from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative numbers in the list.\n\n    Example:\n    >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    -32\n    \"\"\"\n    # Initialize the sum of negative numbers\n    negative_sum = 0\n    \n    # Iterate through each element in the list\n    for num in numbers:\n        # Check if the element is negative\n        if isinstance(num, int) and num < 0:\n            # Add it to the sum variable\n            negative_sum += num\n    \n    # Return the sum of negative numbers\n    return negative_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [2, 4, -6, -9, 11, -12, 14, -5, 17]\n    print(sum_negativenum(example_list))  # Output: -32\n", "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers from a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative numbers in the list.\n\n    Raises:\n    TypeError: If the input is not a list.\n    \"\"\"\n    # Check if the input is a list; if not, raise an error.\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Use list comprehension to filter out negative numbers from the list.\n    negative_numbers = [num for num in numbers if num < 0]\n\n    # Sum the filtered negative numbers.\n    negative_sum = sum(negative_numbers)\n\n    # Return the sum.\n    return negative_sum\n\n# Example usage:\n# print(sum_negativenum([-1, -2, -3]))  # Output: -6\n# print(sum_negativenum([1, 2, 3]))     # Output: 0\n# print(sum_negativenum([]))            # Output: 0\n", "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative numbers in the list.\n\n    Example:\n    >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    -32\n    \"\"\"\n    # Initialize the sum of negative numbers\n    negative_sum = 0\n\n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if isinstance(number, (int, float)) and number < 0:\n            # Add the negative number to the sum\n            negative_sum += number\n        elif not isinstance(number, (int, float)):\n            raise ValueError(\"All elements in the list must be numeric.\")\n\n    # Return the sum of negative numbers\n    return negative_sum\n", "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list[int]) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in a list.\n\n    Parameters:\n    numbers (list[int]): A list of integers.\n\n    Returns:\n    int: The sum of negative integers in the list.\n    \"\"\"\n    # Initialize the sum of negative numbers to zero\n    negative_sum = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            # Add the negative number to the sum\n            negative_sum += number\n    \n    # Return the sum of negative numbers\n    return negative_sum\n\n# Example usage:\n# result = sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n# print(result)  # Output: -32\n", "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list[int]) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in a given list.\n\n    Parameters:\n    numbers (list[int]): A list of integers.\n\n    Returns:\n    int: The sum of negative numbers in the list.\n    \"\"\"\n    # Initialize the sum of negative numbers\n    negative_sum = 0\n\n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is less than zero\n        if number < 0:\n            # Add it to the sum variable\n            negative_sum += number\n\n    # Return the sum of negative numbers\n    return negative_sum\n\n# Example usage:\n# result = sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n# print(result)  # Output: -32\n", "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in a list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative integers in the list.\n    \"\"\"\n    # Initialize the sum of negative numbers\n    negative_sum = 0\n\n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if isinstance(number, int) and number < 0:\n            # Add the negative number to the sum\n            negative_sum += number\n\n    # Return the sum of negative numbers\n    return negative_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(sum_negativenum([]))  # Expected output: 0\n    print(sum_negativenum([0, 1, 2, 3]))  # Expected output: 0\n    print(sum_negativenum([-1, -2, -3, -4]))  # Expected output: -10\n    print(sum_negativenum([-1, 2, -3, 4]))  # Expected output: -4\n", "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in a list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative numbers in the list.\n    \"\"\"\n    # Initialize the sum of negative numbers\n    negative_sum = sum(num for num in numbers if num < 0)\n    \n    return negative_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))  # Expected output: -32\n    print(sum_negativenum([]))  # Expected output: 0\n    print(sum_negativenum([1, 2, 3]))  # Expected output: 0\n    print(sum_negativenum([-1, -2, -3]))  # Expected output: -6\n", "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in a list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative numbers in the list. Returns 0 if there are no negative numbers or the list is empty.\n    \"\"\"\n    # Use list comprehension to filter out negative numbers\n    negative_numbers = [num for num in numbers if num < 0]\n    \n    # Calculate the sum of the filtered negative numbers\n    negative_sum = sum(negative_numbers)\n    \n    return negative_sum\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]))  # Output: -32\n    print(sum_negativenum([]))  # Output: 0\n    print(sum_negativenum([1, 2, 3]))  # Output: 0\n    print(sum_negativenum([-1, -2, -3, -4]))  # Output: -10\n", "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative numbers in the list.\n    \"\"\"\n    # Initialize the sum of negative numbers\n    negative_sum = 0\n\n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            # Add the negative number to the sum\n            negative_sum += number\n\n    # Return the sum of negative numbers\n    return negative_sum\n\n# Example usage:\n# print(sum_negativenum([-1, -2, -3, -4]))  # Output: -10\n# print(sum_negativenum([0, 1, 2, 3]))      # Output: 0\n# print(sum_negativenum([]))                # Output: 0\n", "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative numbers in the list.\n    \"\"\"\n    # Initialize the sum of negative numbers\n    negative_sum = 0\n\n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            # Add the negative number to the sum\n            negative_sum += number\n\n    # Return the sum of negative numbers\n    return negative_sum\n\n# Example usage:\n# print(sum_negativenum([]))  # Output: 0\n# print(sum_negativenum([1, 2, 3]))  # Output: 0\n# print(sum_negativenum([-1, -2, -3]))  # Output: -6\n"], "plans": ["requirement analysis:\nThe function should efficiently iterate through the list, identify negative numbers, and calculate their sum. It should handle lists of varying sizes and provide accurate results.\nrequirement pool:\n- Implement the function to sum negative numbers\n- Optimize for performance with large lists\n- Include error handling for non-numeric inputs\n- Provide examples in documentation\n- Ensure compatibility with Python 3.x\nWe will implement a simple function using Python built-in functions to iterate through the list and sum the negative numbers. This approach is chosen for its ease of use and sufficient performance for the task. We will ensure compatibility with Python 3.x and provide clear documentation with examples. Error handling for non-numeric inputs will be included to ensure robustness.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'negative numbers'\n    Explanation: The requirement focuses on summing only the negative numbers from a given list, ignoring positive numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize a variable to store the sum of negative numbers.\n    2. Iterate through each element in the list.\n    3. Check if the element is negative.\n    4. If it is negative, add it to the sum variable.\n    5. Return the sum variable.\n\n# [edge case] \n    sum_negativenum([]) = 0\n    Explanation: An empty list has no elements, so the sum of negative numbers is 0.\n    \n    sum_negativenum([0, 1, 2, 3]) = 0\n    Explanation: There are no negative numbers in the list, so the sum is 0.\n    \n    sum_negativenum([-1, -2, -3, -4]) = -10\n    Explanation: All numbers are negative, so the sum is simply the sum of all elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through the list and summing negative numbers will naturally handle these cases.\n", "requirement analysis:\nThe function should iterate through the list, identify negative numbers, and calculate their sum. It should handle edge cases such as empty lists or lists without negative numbers.\nrequirement pool:\n- Implement the main function to sum negative numbers.\n- Optimize the function for performance with large lists.\n- Include error handling for non-list inputs.\n- Provide comprehensive documentation and examples.\n- Consider extending functionality to handle nested lists.\nWe will implement a simple function using list comprehension to efficiently filter and sum negative numbers from a given list. This approach is optimal for small to medium-sized lists and ensures quick execution. We will also include error handling for non-list inputs and provide comprehensive documentation with examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'negative numbers'\n    Explanation: In the requirement, it refers to numbers less than zero. The task is to sum only these numbers from the list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the input is a list; if not, raise an error.\n    2. Use list comprehension to filter out negative numbers from the list.\n    3. Sum the filtered negative numbers.\n    4. Return the sum.\n\n# [edge case] \n    sum_negativenum([]) = 0\n    Explanation: An empty list has no numbers, so the sum of negative numbers is 0.\n    \n    sum_negativenum([1, 2, 3]) = 0\n    Explanation: There are no negative numbers in the list, so the sum is 0.\n    \n    sum_negativenum([-1, -2, -3]) = -6\n    Explanation: All numbers are negative, so the sum is simply the sum of all elements.\n\n# [extra code for edge case]\n    We need extra code to handle non-list inputs.\n        if not isinstance(lst, list):\n            raise TypeError(\"Input must be a list\")\n        (other code)\n", "requirement analysis:\nThe function should iterate through the list, identify negative numbers, and calculate their sum. It should handle both small and large lists efficiently and provide clear documentation for ease of use.\nrequirement pool:\n- Implement the function to sum negative numbers\n- Optimize for performance with large lists\n- Include error handling for non-numeric inputs\n- Provide examples and documentation\n- Test the function with various list sizes\nWe will implement a simple function using Python's built-in capabilities to iterate through the list and sum the negative numbers. This approach ensures ease of use and efficiency without the need for additional libraries. We will also include error handling for non-numeric inputs to ensure robustness.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'negative numbers'\n    Explanation: In the requirement, it refers to numbers less than zero. The task is to sum all such numbers from the given list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize a variable to store the sum of negative numbers, starting at 0.\n    2. Iterate through each number in the list.\n    3. Check if the number is negative (less than 0).\n    4. If it is negative, add it to the sum variable.\n    5. Return the sum after iterating through the entire list.\n\n# [edge case] \n    sum_negativenum([]) = 0\n    Explanation: An empty list has no numbers, so the sum of negative numbers is 0.\n    \n    sum_negativenum([1, 2, 3]) = 0\n    Explanation: There are no negative numbers in the list, so the sum is 0.\n    \n    sum_negativenum([-1, -2, -3]) = -6\n    Explanation: All numbers are negative, so the sum is -1 + (-2) + (-3) = -6.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through the list and summing negative numbers will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently iterate through the list, identify negative numbers, and calculate their sum. It should handle edge cases such as empty lists and lists with no negative numbers.\nrequirement pool:\n- Implement the function to sum negative numbers\n- Optimize for performance with large datasets\n- Include error handling for non-integer inputs\n- Provide examples and documentation\n- Test the function with various list configurations\nWe will implement a simple function using Python's built-in capabilities to iterate through the list, filter out negative numbers, and calculate their sum. This approach ensures ease of use and efficiency without the need for additional libraries. We will also handle edge cases such as empty lists and lists with no negative numbers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'negative numbers'\n    Explanation: In the requirement, it refers to numbers that are less than zero. The task is to sum these numbers from the given list.\n\n# [phrase showing quantity relationship]\n    'sum': means adding all the negative numbers together to get a total value.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize a variable to store the sum of negative numbers.\n    2. Iterate through each number in the list.\n    3. Check if the number is negative (less than zero).\n    4. If it is negative, add it to the sum variable.\n    5. Return the sum variable as the result.\n\n# [edge case] \n    sum_negativenum([]) = 0\n    Explanation: The list is empty, so there are no negative numbers to sum, resulting in a total of 0.\n    \n    sum_negativenum([1, 2, 3]) = 0\n    Explanation: There are no negative numbers in the list, so the sum of negative numbers is 0.\n    \n    sum_negativenum([-1, -2, -3]) = -6\n    Explanation: All numbers in the list are negative, so the sum is -1 + (-2) + (-3) = -6.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic naturally handles empty lists and lists with no negative numbers by returning a sum of 0.\n", "requirement analysis:\nThe function should efficiently iterate through the list, identify negative numbers, and calculate their sum. It should handle edge cases such as empty lists or lists without negative numbers. The implementation should be straightforward and well-documented.\nrequirement pool:\n- Implement the function to sum negative numbers\n- Optimize for performance with large datasets\n- Include error handling for invalid inputs\n- Provide examples and documentation\n- Test the function with various edge cases\nWe will implement a simple function using Python's built-in capabilities to iterate through the list and sum the negative numbers. This approach ensures ease of use and efficiency without the need for additional libraries. We will handle edge cases such as empty lists and lists without negative numbers, and provide clear documentation and examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'negative numbers'\n    Explanation: The requirement focuses on summing only the negative numbers from the list, which are numbers less than zero.\n\n# [phrase showing quantity relationship]\n    'above zero': refers to numbers greater than zero, which are not included in the sum.\n    'below zero': refers to numbers less than zero, which are included in the sum.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize a variable to store the sum of negative numbers.\n    2. Iterate through each number in the list.\n    3. Check if the number is less than zero.\n    4. If it is, add it to the sum variable.\n    5. Return the sum variable.\n\n# [edge case] \n    sum_negativenum([]) = 0\n    Explanation: The list is empty, so there are no negative numbers to sum, resulting in a sum of 0.\n    \n    sum_negativenum([1, 2, 3]) = 0\n    Explanation: There are no negative numbers in the list, so the sum is 0.\n    \n    sum_negativenum([-1, -2, -3]) = -6\n    Explanation: All numbers in the list are negative, so the sum is -1 + -2 + -3 = -6.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic naturally handles empty lists and lists without negative numbers by returning a sum of 0.\n", "requirement analysis:\nThe function should iterate through the list, identify negative numbers, and calculate their sum. It should handle lists of varying sizes efficiently and provide clear output.\nrequirement pool:\n- Implement the function to sum negative numbers\n- Optimize for performance with large lists\n- Include documentation and usage examples\n- Ensure compatibility with different Python versions\n- Provide error handling for non-integer inputs\nWe will implement a simple function using Python's built-in capabilities to iterate through the list and sum the negative numbers. This approach ensures ease of use and efficiency without the need for complex libraries. We will also include error handling for non-integer inputs and provide documentation with examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'negative numbers'\n    Explanation: In the requirement, it refers to numbers that are less than zero. The task is to sum these numbers from the given list.\n\n# [phrase showing quantity relationship]\n    'sum': means adding all the negative numbers together to get a total.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize a variable to store the sum of negative numbers, starting at 0.\n    2. Iterate through each number in the list.\n    3. Check if the number is negative (less than zero).\n    4. If it is negative, add it to the sum variable.\n    5. After iterating through the list, return the sum variable.\n\n# [edge case] \n    sum_negativenum([]) = 0\n    Explanation: An empty list has no numbers, so the sum of negative numbers is 0.\n    \n    sum_negativenum([0, 1, 2, 3]) = 0\n    Explanation: There are no negative numbers in the list, so the sum is 0.\n    \n    sum_negativenum([-1, -2, -3, -4]) = -10\n    Explanation: All numbers are negative, so the sum is -1 + -2 + -3 + -4 = -10.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through the list and summing negative numbers will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently iterate through the list, identify negative numbers, and calculate their sum. It should handle edge cases such as empty lists or lists without negative numbers.\nrequirement pool:\n- Implement the function to calculate the sum of negative numbers\n- Optimize the function for performance with large lists\n- Provide documentation and usage examples\n- Handle edge cases like empty lists\n- Ensure compatibility with different Python versions\nWe will implement a simple Python function using built-in list comprehension to filter and sum negative numbers. This approach is efficient for iterating through lists and is easy to understand and maintain. We will also include documentation and examples to demonstrate usage. The function will handle edge cases such as empty lists and lists without negative numbers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'negative numbers'\n    Explanation: The requirement focuses on identifying and summing numbers that are less than zero from a given list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Initialize a variable to store the sum of negative numbers.\n    - Iterate through the list using list comprehension to filter out negative numbers.\n    - Sum the filtered negative numbers.\n    - Return the sum.\n\n# [edge case] \n    sum_negativenum([]) = 0\n    Explanation: An empty list has no numbers, so the sum of negative numbers is 0.\n    \n    sum_negativenum([1, 2, 3]) = 0\n    Explanation: The list contains only positive numbers, so the sum of negative numbers is 0.\n    \n    sum_negativenum([-1, -2, -3]) = -6\n    Explanation: All numbers in the list are negative, so the sum is simply the sum of all elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of filtering and summing negative numbers inherently handles these cases.\n", "requirement analysis:\nThe function should iterate through the list, identify negative numbers, and calculate their sum. It should handle edge cases such as empty lists or lists without negative numbers gracefully.\nrequirement pool:\n- Implement the function to sum negative numbers.\n- Optimize the function for performance with large lists.\n- Ensure the function handles edge cases like empty lists.\n- Document the function usage and edge cases.\n- Create test cases for various input scenarios.\nWe will implement a simple Python function using list comprehension to filter out negative numbers and then use the built-in sum function to calculate their sum. This approach is efficient for small to medium-sized lists and does not require any additional libraries, making it suitable for our needs. The function will handle edge cases by returning zero for lists without negative numbers or empty lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'negative numbers'\n    Explanation: In the requirement, it refers to numbers less than zero. The task is to sum only these numbers from the list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Use list comprehension to filter out negative numbers from the input list.\n    2. Use the built-in `sum` function to calculate the sum of the filtered negative numbers.\n    3. Return the calculated sum.\n\n# [edge case] \n    sum_negativenum([1, 2, 3, 4]) = 0\n    Explanation: There are no negative numbers in the list, so the sum is 0.\n    \n    sum_negativenum([]) = 0\n    Explanation: The list is empty, so there are no numbers to sum, resulting in a sum of 0.\n    \n    sum_negativenum([-1, -2, -3, -4]) = -10\n    Explanation: All numbers in the list are negative, and their sum is -10.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of filtering negative numbers and summing them inherently handles these cases.\n", "requirement analysis:\nThe function should efficiently iterate through the list, identify negative numbers, and calculate their sum. It should handle edge cases such as empty lists or lists without negative numbers.\nrequirement pool:\n- Implement the function to sum negative numbers\n- Optimize for performance with large lists\n- Provide comprehensive documentation\n- Include usage examples\n- Handle edge cases gracefully\nWe will implement a simple Python function using built-in functions to iterate through the list and sum the negative numbers. This approach ensures ease of use and efficiency for the task at hand. We will also include documentation and examples to demonstrate usage.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'negative numbers'\n    Explanation: The requirement focuses on identifying and summing numbers that are less than zero from the given list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize a variable to store the sum of negative numbers.\n    2. Iterate through each number in the list.\n    3. Check if the number is negative (less than zero).\n    4. If the number is negative, add it to the sum variable.\n    5. Return the sum of negative numbers.\n\n# [edge case] \n    sum_negativenum([]) = 0\n    Explanation: An empty list has no numbers, so the sum of negative numbers is 0.\n    \n    sum_negativenum([0, 1, 2, 3]) = 0\n    Explanation: There are no negative numbers in the list, so the sum is 0.\n    \n    sum_negativenum([-1, -2, -3, -4]) = -10\n    Explanation: All numbers are negative, so the sum is simply the addition of all numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic naturally handles these scenarios by iterating through the list and summing only negative numbers.\n", "requirement analysis:\nThe function should efficiently iterate through the list, identify negative numbers, and calculate their sum. It should handle edge cases such as empty lists or lists without negative numbers.\nrequirement pool:\n- Implement the function to sum negative numbers\n- Optimize for performance with large lists\n- Provide documentation and usage examples\n- Handle edge cases like empty lists\n- Ensure compatibility with different Python versions\nWe will implement a simple Python function using list comprehensions to efficiently filter and sum negative numbers from a list. This approach is both efficient and easy to understand, making it ideal for our needs. We will also handle edge cases such as empty lists and lists without negative numbers. The function will be documented with examples to ensure clarity for users and developers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'negative numbers'\n    Explanation: In the requirement, it refers to numbers less than zero. The task is to sum these numbers from the given list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize a variable to store the sum of negative numbers.\n    2. Iterate through each number in the list.\n    3. Check if the number is negative (less than zero).\n    4. If it is negative, add it to the sum.\n    5. Return the sum after iterating through the list.\n\n# [edge case] \n    sum_negativenum([]) = 0\n    Explanation: The list is empty, so there are no negative numbers to sum, resulting in a sum of 0.\n    \n    sum_negativenum([1, 2, 3]) = 0\n    Explanation: The list contains only positive numbers, so the sum of negative numbers is 0.\n    \n    sum_negativenum([-1, -2, -3]) = -6\n    Explanation: All numbers in the list are negative, so the sum is the total of all numbers: -1 + -2 + -3 = -6.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through the list and summing negative numbers will naturally handle empty lists and lists without negative numbers.\n"], "test": ["def check(sum_negativenum):\n\tassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32", "def check(sum_negativenum):\n\tassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52", "def check(sum_negativenum):\n\tassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 4, -9, -8, 12, -14, 12, -9, 22]) == -40", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 4, -1, -12, 12, -12, 13, -5, 20]) == -30", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 7, -9, -13, 12, -10, 11, -2, 13]) == -34", "def check(sum_negativenum):\n\tassert sum_negativenum([2, 7, -6, -14, 8, -8, 18, 0, 15]) == -28", "def check(sum_negativenum):\n\tassert sum_negativenum([4, 4, -2, -13, 6, -7, 16, -4, 20]) == -26", "def check(sum_negativenum):\n\tassert sum_negativenum([2, 3, -1, -12, 9, -11, 13, -6, 21]) == -30", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 1, -8, -5, 10, -13, 12, -9, 19]) == -35", "def check(sum_negativenum):\n\tassert sum_negativenum([4, 8, -4, -8, 16, -7, 16, -2, 14]) == -21", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 1, -5, -13, 10, -17, 13, -9, 18]) == -44", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 1, -2, -14, 12, -13, 19, -3, 20]) == -32", "def check(sum_negativenum):\n\tassert sum_negativenum([3, 9, -6, -7, 12, -13, 15, -2, 20]) == -28", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 7, -1, -14, 13, -11, 9, -4, 12]) == -30", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 9, -11, -12, 11, -11, 15, 0, 22]) == -34", "def check(sum_negativenum):\n\tassert sum_negativenum([2, 1, -1, -13, 13, -16, 19, -2, 19]) == -32", "def check(sum_negativenum):\n\tassert sum_negativenum([4, 4, -7, -5, 15, -16, 12, -6, 17]) == -34", "def check(sum_negativenum):\n\tassert sum_negativenum([2, 1, -7, -9, 14, -10, 10, -7, 15]) == -33", "def check(sum_negativenum):\n\tassert sum_negativenum([3, 3, -8, -11, 15, -13, 19, -3, 18]) == -35", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 7, -4, -12, 10, -8, 13, -1, 16]) == -25", "def check(sum_negativenum):\n\tassert sum_negativenum([1, 8, -7, -8, 13, -9, 17, -2, 22]) == -26", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 4, -3, -13, 16, -11, 17, -10, 12]) == -37", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 6, -4, -10, 6, -7, 10, -7, 14]) == -28", "def check(sum_negativenum):\n\tassert sum_negativenum([1, 8, -6, -9, 11, -14, 18, -8, 15]) == -37", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 1, -10, -10, 14, -8, 10, -10, 15]) == -38", "def check(sum_negativenum):\n\tassert sum_negativenum([4, 6, -11, -4, 14, -16, 10, -10, 19]) == -41", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 2, -6, -14, 16, -8, 9, -10, 18]) == -38", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 7, -8, -5, 15, -13, 13, -8, 16]) == -34", "def check(sum_negativenum):\n\tassert sum_negativenum([2, 1, -4, -7, 10, -9, 12, -2, 15]) == -22", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 6, -5, -7, 16, -11, 13, -9, 22]) == -32", "def check(sum_negativenum):\n\tassert sum_negativenum([4, 7, -4, -11, 15, -15, 12, -8, 16]) == -38", "def check(sum_negativenum):\n\tassert sum_negativenum([2, 2, -10, -7, 10, -7, 19, -8, 20]) == -32", "def check(sum_negativenum):\n\tassert sum_negativenum([2, 3, -7, -9, 16, -16, 19, -9, 13]) == -41", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 1, -5, -9, 11, -9, 18, -8, 16]) == -31", "def check(sum_negativenum):\n\tassert sum_negativenum([1, 5, -6, -4, 6, -8, 18, 0, 21]) == -18", "def check(sum_negativenum):\n\tassert sum_negativenum([9, 14, -11, 8, -18, 12, -15]) == -44", "def check(sum_negativenum):\n\tassert sum_negativenum([9, 16, -12, 10, -21, 16, -16]) == -49", "def check(sum_negativenum):\n\tassert sum_negativenum([14, 15, -19, 16, -22, 14, -15]) == -56", "def check(sum_negativenum):\n\tassert sum_negativenum([11, 15, -17, 12, -18, 11, -21]) == -56", "def check(sum_negativenum):\n\tassert sum_negativenum([7, 10, -14, 13, -20, 11, -21]) == -55", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 19, -13, 15, -14, 16, -21]) == -48", "def check(sum_negativenum):\n\tassert sum_negativenum([7, 15, -11, 11, -14, 14, -24]) == -49", "def check(sum_negativenum):\n\tassert sum_negativenum([10, 16, -18, 11, -22, 16, -21]) == -61", "def check(sum_negativenum):\n\tassert sum_negativenum([13, 11, -17, 13, -13, 16, -16]) == -46", "def check(sum_negativenum):\n\tassert sum_negativenum([10, 14, -9, 9, -21, 14, -18]) == -48", "def check(sum_negativenum):\n\tassert sum_negativenum([11, 14, -17, 16, -20, 8, -24]) == -61", "def check(sum_negativenum):\n\tassert sum_negativenum([14, 14, -9, 15, -13, 9, -23]) == -45", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 14, -15, 12, -13, 12, -19]) == -47", "def check(sum_negativenum):\n\tassert sum_negativenum([9, 10, -15, 14, -15, 8, -19]) == -49", "def check(sum_negativenum):\n\tassert sum_negativenum([9, 10, -9, 18, -23, 15, -25]) == -57", "def check(sum_negativenum):\n\tassert sum_negativenum([8, 12, -10, 9, -23, 16, -21]) == -54", "def check(sum_negativenum):\n\tassert sum_negativenum([15, 12, -14, 17, -20, 10, -16]) == -50", "def check(sum_negativenum):\n\tassert sum_negativenum([10, 13, -14, 17, -13, 16, -21]) == -48", "def check(sum_negativenum):\n\tassert sum_negativenum([8, 17, -15, 12, -20, 16, -17]) == -52", "def check(sum_negativenum):\n\tassert sum_negativenum([13, 19, -15, 10, -19, 11, -21]) == -55", "def check(sum_negativenum):\n\tassert sum_negativenum([12, 18, -17, 15, -17, 15, -15]) == -49", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 10, -10, 8, -22, 14, -24]) == -56", "def check(sum_negativenum):\n\tassert sum_negativenum([11, 13, -9, 17, -17, 10, -16]) == -42", "def check(sum_negativenum):\n\tassert sum_negativenum([7, 11, -10, 10, -13, 17, -16]) == -39", "def check(sum_negativenum):\n\tassert sum_negativenum([11, 10, -16, 17, -22, 13, -24]) == -62", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 17, -16, 12, -19, 13, -18]) == -53", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 14, -15, 12, -15, 9, -17]) == -47", "def check(sum_negativenum):\n\tassert sum_negativenum([7, 16, -15, 11, -21, 8, -16]) == -52", "def check(sum_negativenum):\n\tassert sum_negativenum([15, 15, -16, 17, -17, 8, -22]) == -55", "def check(sum_negativenum):\n\tassert sum_negativenum([13, 17, -11, 9, -20, 17, -18]) == -49", "def check(sum_negativenum):\n\tassert sum_negativenum([10, 16, -18, 12, -21, 16, -20]) == -59", "def check(sum_negativenum):\n\tassert sum_negativenum([10, 20, -15, 18, -21, 14, -16]) == -52", "def check(sum_negativenum):\n\tassert sum_negativenum([11, 13, -17, 14, -18, 17, -20]) == -55", "def check(sum_negativenum):\n\tassert sum_negativenum([14, -66, 54, 41, 154, -636, 123, 49, 90, -195]) == -897", "def check(sum_negativenum):\n\tassert sum_negativenum([23, -67, 56, 42, 152, -641, 117, 48, 94, -191]) == -899", "def check(sum_negativenum):\n\tassert sum_negativenum([21, -66, 55, 37, 150, -641, 118, 40, 92, -195]) == -902", "def check(sum_negativenum):\n\tassert sum_negativenum([14, -67, 57, 36, 152, -641, 116, 40, 95, -194]) == -902", "def check(sum_negativenum):\n\tassert sum_negativenum([20, -62, 52, 34, 156, -640, 126, 40, 85, -185]) == -887", "def check(sum_negativenum):\n\tassert sum_negativenum([14, -60, 57, 40, 151, -643, 124, 43, 86, -192]) == -895", "def check(sum_negativenum):\n\tassert sum_negativenum([24, -68, 55, 44, 152, -637, 116, 47, 87, -194]) == -899", "def check(sum_negativenum):\n\tassert sum_negativenum([24, -61, 62, 43, 157, -639, 120, 46, 91, -188]) == -888", "def check(sum_negativenum):\n\tassert sum_negativenum([18, -70, 62, 42, 157, -644, 126, 43, 93, -189]) == -903", "def check(sum_negativenum):\n\tassert sum_negativenum([23, -70, 54, 43, 157, -637, 117, 48, 85, -188]) == -895", "def check(sum_negativenum):\n\tassert sum_negativenum([22, -68, 59, 38, 149, -644, 117, 39, 88, -192]) == -904", "def check(sum_negativenum):\n\tassert sum_negativenum([24, -61, 54, 41, 154, -643, 117, 45, 93, -195]) == -899", "def check(sum_negativenum):\n\tassert sum_negativenum([19, -62, 52, 37, 150, -634, 126, 46, 85, -190]) == -886", "def check(sum_negativenum):\n\tassert sum_negativenum([24, -67, 60, 37, 150, -639, 120, 44, 95, -189]) == -895", "def check(sum_negativenum):\n\tassert sum_negativenum([17, -61, 58, 35, 155, -634, 125, 44, 87, -191]) == -886", "def check(sum_negativenum):\n\tassert sum_negativenum([20, -67, 55, 35, 148, -635, 121, 41, 92, -186]) == -888", "def check(sum_negativenum):\n\tassert sum_negativenum([17, -66, 59, 43, 154, -639, 125, 45, 90, -186]) == -891", "def check(sum_negativenum):\n\tassert sum_negativenum([24, -62, 53, 39, 148, -639, 119, 44, 87, -195]) == -896", "def check(sum_negativenum):\n\tassert sum_negativenum([16, -65, 59, 38, 156, -643, 126, 48, 89, -194]) == -902", "def check(sum_negativenum):\n\tassert sum_negativenum([16, -67, 56, 41, 157, -642, 117, 47, 94, -185]) == -894", "def check(sum_negativenum):\n\tassert sum_negativenum([15, -69, 57, 35, 157, -639, 122, 47, 87, -194]) == -902", "def check(sum_negativenum):\n\tassert sum_negativenum([19, -69, 53, 35, 153, -638, 123, 43, 89, -187]) == -894", "def check(sum_negativenum):\n\tassert sum_negativenum([15, -70, 61, 44, 154, -644, 119, 46, 85, -191]) == -905", "def check(sum_negativenum):\n\tassert sum_negativenum([14, -66, 60, 36, 147, -635, 126, 47, 92, -190]) == -891", "def check(sum_negativenum):\n\tassert sum_negativenum([16, -67, 52, 42, 153, -636, 122, 47, 94, -194]) == -897", "def check(sum_negativenum):\n\tassert sum_negativenum([17, -66, 61, 38, 154, -639, 120, 41, 86, -189]) == -894", "def check(sum_negativenum):\n\tassert sum_negativenum([19, -63, 57, 35, 147, -643, 125, 42, 85, -192]) == -898", "def check(sum_negativenum):\n\tassert sum_negativenum([14, -67, 53, 42, 154, -638, 120, 44, 90, -192]) == -897", "def check(sum_negativenum):\n\tassert sum_negativenum([19, -66, 57, 44, 152, -637, 124, 44, 91, -185]) == -888", "def check(sum_negativenum):\n\tassert sum_negativenum([21, -68, 62, 40, 156, -638, 122, 41, 89, -191]) == -897", "def check(sum_negativenum):\n\tassert sum_negativenum([18, -70, 54, 39, 156, -644, 117, 46, 95, -189]) == -903", "def check(sum_negativenum):\n\tassert sum_negativenum([24, -62, 62, 40, 157, -639, 117, 39, 85, -191]) == -892", "def check(sum_negativenum):\n\tassert sum_negativenum([21, -68, 53, 44, 150, -641, 122, 43, 94, -189]) == -898"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative numbers in the list.\n    \"\"\"\n    # Initialize the sum of negative numbers\n    negative_sum = 0\n\n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            # Add the negative number to the sum\n            negative_sum += number\n\n    # Return the sum of negative numbers\n    return negative_sum\n\n# Example usage:\n# print(sum_negativenum([]))  # Output: 0\n# print(sum_negativenum([1, 2, 3]))  # Output: 0\n# print(sum_negativenum([-1, -2, -3]))  # Output: -6\n", "passed": true, "pass": true, "pass_num": 10, "round": 57, "mutate_method": "expand_one2two", "parent_index": 57}
