{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 237, "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. You need to create a dictionary where each key is a unique tuple found in the list. The value for each key should represent the count of occurrences for that tuple in the list.", "code": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ", "test_imports": [], "test_list": ["assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}", "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}", "assert check_occurences([(1, 6), (5, 7), (2, 4), (2, 5), (9, 2)]) == {(1, 6): 1, (5, 7): 1, (2, 4): 1, (2, 5): 1, (2, 9): 1}", "assert check_occurences([(2, 2), (2, 4), (4, 8), (8, 4), (7, 1)]) == {(2, 2): 1, (2, 4): 1, (4, 8): 2, (1, 7): 1}", "assert check_occurences([(8, 2), (4, 3), (5, 8), (5, 1), (8, 4)]) == {(2, 8): 1, (3, 4): 1, (5, 8): 1, (1, 5): 1, (4, 8): 1}", "assert check_occurences([(1, 2), (2, 6), (6, 5), (4, 6), (6, 4)]) == {(1, 2): 1, (2, 6): 1, (5, 6): 1, (4, 6): 2}", "assert check_occurences([(2, 4), (4, 8), (1, 10), (2, 5), (3, 2)]) == {(2, 4): 1, (4, 8): 1, (1, 10): 1, (2, 5): 1, (2, 3): 1}", "assert check_occurences([(1, 6), (5, 6), (2, 7), (2, 3), (9, 7)]) == {(1, 6): 1, (5, 6): 1, (2, 7): 1, (2, 3): 1, (7, 9): 1}", "assert check_occurences([(3, 2), (3, 3), (7, 8), (5, 1), (6, 6)]) == {(2, 3): 1, (3, 3): 1, (7, 8): 1, (1, 5): 1, (6, 6): 1}", "assert check_occurences([(8, 2), (2, 1), (1, 6), (9, 4), (6, 2)]) == {(2, 8): 1, (1, 2): 1, (1, 6): 1, (4, 9): 1, (2, 6): 1}", "assert check_occurences([(3, 1), (2, 5), (3, 5), (8, 3), (11, 5)]) == {(1, 3): 1, (2, 5): 1, (3, 5): 1, (3, 8): 1, (5, 11): 1}", "assert check_occurences([(2, 6), (4, 1), (1, 4), (8, 1), (9, 1)]) == {(2, 6): 1, (1, 4): 2, (1, 8): 1, (1, 9): 1}", "assert check_occurences([(3, 2), (3, 3), (3, 7), (3, 1), (5, 8)]) == {(2, 3): 1, (3, 3): 1, (3, 7): 1, (1, 3): 1, (5, 8): 1}", "assert check_occurences([(6, 5), (2, 4), (2, 7), (9, 7), (6, 3)]) == {(5, 6): 1, (2, 4): 1, (2, 7): 1, (7, 9): 1, (3, 6): 1}", "assert check_occurences([(3, 1), (5, 4), (1, 4), (8, 4), (5, 5)]) == {(1, 3): 1, (4, 5): 1, (1, 4): 1, (4, 8): 1, (5, 5): 1}", "assert check_occurences([(5, 3), (4, 6), (4, 5), (10, 3), (11, 3)]) == {(3, 5): 1, (4, 6): 1, (4, 5): 1, (3, 10): 1, (3, 11): 1}", "assert check_occurences([(4, 4), (1, 7), (3, 8), (4, 3), (5, 7)]) == {(4, 4): 1, (1, 7): 1, (3, 8): 1, (3, 4): 1, (5, 7): 1}", "assert check_occurences([(8, 5), (6, 6), (2, 2), (9, 7), (3, 4)]) == {(5, 8): 1, (6, 6): 1, (2, 2): 1, (7, 9): 1, (3, 4): 1}", "assert check_occurences([(5, 4), (1, 7), (6, 10), (4, 5), (9, 1)]) == {(4, 5): 2, (1, 7): 1, (6, 10): 1, (1, 9): 1}", "assert check_occurences([(5, 1), (2, 1), (4, 3), (5, 3), (2, 5)]) == {(1, 5): 1, (1, 2): 1, (3, 4): 1, (3, 5): 1, (2, 5): 1}", "assert check_occurences([(3, 2), (1, 6), (1, 4), (10, 6), (9, 2)]) == {(2, 3): 1, (1, 6): 1, (1, 4): 1, (6, 10): 1, (2, 9): 1}", "assert check_occurences([(8, 4), (5, 3), (1, 5), (1, 3), (11, 7)]) == {(4, 8): 1, (3, 5): 1, (1, 5): 1, (1, 3): 1, (7, 11): 1}", "assert check_occurences([(3, 3), (3, 5), (6, 8), (1, 4), (11, 2)]) == {(3, 3): 1, (3, 5): 1, (6, 8): 1, (1, 4): 1, (2, 11): 1}", "assert check_occurences([(2, 1), (1, 2), (1, 4), (1, 7), (3, 7)]) == {(1, 2): 2, (1, 4): 1, (1, 7): 1, (3, 7): 1}", "assert check_occurences([(2, 1), (3, 8), (3, 10), (7, 3), (7, 6)]) == {(1, 2): 1, (3, 8): 1, (3, 10): 1, (3, 7): 1, (6, 7): 1}", "assert check_occurences([(7, 6), (6, 5), (6, 4), (5, 3), (10, 3)]) == {(6, 7): 1, (5, 6): 1, (4, 6): 1, (3, 5): 1, (3, 10): 1}", "assert check_occurences([(5, 5), (1, 7), (2, 1), (1, 1), (11, 1)]) == {(5, 5): 1, (1, 7): 1, (1, 2): 1, (1, 1): 1, (1, 11): 1}", "assert check_occurences([(5, 4), (2, 8), (7, 5), (9, 3), (3, 2)]) == {(4, 5): 1, (2, 8): 1, (5, 7): 1, (3, 9): 1, (2, 3): 1}", "assert check_occurences([(5, 4), (4, 7), (3, 9), (1, 6), (10, 2)]) == {(4, 5): 1, (4, 7): 1, (3, 9): 1, (1, 6): 1, (2, 10): 1}", "assert check_occurences([(5, 6), (4, 3), (5, 9), (8, 7), (2, 7)]) == {(5, 6): 1, (3, 4): 1, (5, 9): 1, (7, 8): 1, (2, 7): 1}", "assert check_occurences([(4, 5), (6, 8), (5, 9), (7, 2), (2, 3)]) == {(4, 5): 1, (6, 8): 1, (5, 9): 1, (2, 7): 1, (2, 3): 1}", "assert check_occurences([(1, 2), (3, 3), (7, 10), (1, 2), (4, 6)]) == {(1, 2): 2, (3, 3): 1, (7, 10): 1, (4, 6): 1}", "assert check_occurences([(6, 3), (1, 5), (3, 3), (9, 1), (6, 6)]) == {(3, 6): 1, (1, 5): 1, (3, 3): 1, (1, 9): 1, (6, 6): 1}", "assert check_occurences([(2, 5), (6, 5), (2, 9), (8, 1), (5, 6)]) == {(2, 5): 1, (5, 6): 2, (2, 9): 1, (1, 8): 1}", "assert check_occurences([(2, 6), (4, 5), (6, 4), (4, 1), (10, 1)]) == {(2, 6): 1, (4, 5): 1, (4, 6): 1, (1, 4): 1, (1, 10): 1}", "assert check_occurences([(6, 3), (4, 4), (7, 2), (10, 8), (10, 3)]) == {(3, 6): 1, (4, 4): 1, (2, 7): 1, (8, 10): 1, (3, 10): 1}", "assert check_occurences([(2, 4), (3, 9), (7, 6), (10, 4), (11, 8)]) == {(2, 4): 1, (3, 9): 1, (6, 7): 1, (4, 10): 1, (8, 11): 1}", "assert check_occurences([(3, 7), (2, 4), (2, 2), (9, 5), (8, 6)]) == {(3, 7): 1, (2, 4): 1, (2, 2): 1, (5, 9): 1, (6, 8): 1}", "assert check_occurences([(9, 1), (7, 5), (8, 9), (5, 1), (4, 8)]) == {(1, 9): 1, (5, 7): 1, (8, 9): 1, (1, 5): 1, (4, 8): 1}", "assert check_occurences([(4, 5), (2, 7), (7, 3), (10, 8), (10, 4)]) == {(4, 5): 1, (2, 7): 1, (3, 7): 1, (8, 10): 1, (4, 10): 1}", "assert check_occurences([(2, 4), (2, 9), (1, 9), (3, 8), (6, 7)]) == {(2, 4): 1, (2, 9): 1, (1, 9): 1, (3, 8): 1, (6, 7): 1}", "assert check_occurences([(8, 6), (2, 7), (8, 3), (10, 2), (3, 4)]) == {(6, 8): 1, (2, 7): 1, (3, 8): 1, (2, 10): 1, (3, 4): 1}", "assert check_occurences([(9, 7), (5, 5), (7, 8), (10, 2), (7, 4)]) == {(7, 9): 1, (5, 5): 1, (7, 8): 1, (2, 10): 1, (4, 7): 1}", "assert check_occurences([(8, 3), (5, 8), (6, 10), (8, 4), (8, 3)]) == {(3, 8): 2, (5, 8): 1, (6, 10): 1, (4, 8): 1}", "assert check_occurences([(6, 7), (5, 9), (1, 1), (2, 1), (9, 7)]) == {(6, 7): 1, (5, 9): 1, (1, 1): 1, (1, 2): 1, (7, 9): 1}", "assert check_occurences([(8, 7), (5, 6), (3, 10), (1, 2), (9, 8)]) == {(7, 8): 1, (5, 6): 1, (3, 10): 1, (1, 2): 1, (8, 9): 1}", "assert check_occurences([(2, 5), (3, 4), (8, 4), (4, 8), (2, 4)]) == {(2, 5): 1, (3, 4): 1, (4, 8): 2, (2, 4): 1}", "assert check_occurences([(9, 7), (4, 4), (8, 3), (1, 1), (4, 8)]) == {(7, 9): 1, (4, 4): 1, (3, 8): 1, (1, 1): 1, (4, 8): 1}", "assert check_occurences([(5, 5), (7, 9), (8, 1), (4, 1), (4, 4)]) == {(5, 5): 1, (7, 9): 1, (1, 8): 1, (1, 4): 1, (4, 4): 1}", "assert check_occurences([(2, 4), (2, 4), (1, 5), (7, 5), (2, 6)]) == {(2, 4): 2, (1, 5): 1, (5, 7): 1, (2, 6): 1}", "assert check_occurences([(6, 7), (2, 7), (8, 1), (9, 4), (2, 7)]) == {(6, 7): 1, (2, 7): 2, (1, 8): 1, (4, 9): 1}", "assert check_occurences([(8, 4), (7, 1), (3, 11), (9, 4), (6, 8)]) == {(4, 8): 1, (1, 7): 1, (3, 11): 1, (4, 9): 1, (6, 8): 1}", "assert check_occurences([(2, 4), (7, 6), (3, 1), (7, 4), (3, 6)]) == {(2, 4): 1, (6, 7): 1, (1, 3): 1, (4, 7): 1, (3, 6): 1}", "assert check_occurences([(8, 3), (1, 8), (8, 3), (9, 5), (12, 8)]) == {(3, 8): 2, (1, 8): 1, (5, 9): 1, (8, 12): 1}", "assert check_occurences([(8, 6), (3, 8), (3, 3), (7, 5), (9, 6)]) == {(6, 8): 1, (3, 8): 1, (3, 3): 1, (5, 7): 1, (6, 9): 1}", "assert check_occurences([(3, 3), (2, 6), (7, 7), (6, 7), (6, 1)]) == {(3, 3): 1, (2, 6): 1, (7, 7): 1, (6, 7): 1, (1, 6): 1}", "assert check_occurences([(2, 7), (5, 7), (2, 8), (6, 6), (6, 2)]) == {(2, 7): 1, (5, 7): 1, (2, 8): 1, (6, 6): 1, (2, 6): 1}", "assert check_occurences([(6, 1), (5, 7), (1, 1), (9, 5), (8, 7)]) == {(1, 6): 1, (5, 7): 1, (1, 1): 1, (5, 9): 1, (7, 8): 1}", "assert check_occurences([(9, 1), (1, 8), (2, 8), (8, 3), (3, 2)]) == {(1, 9): 1, (1, 8): 1, (2, 8): 1, (3, 8): 1, (2, 3): 1}", "assert check_occurences([(8, 2), (7, 5), (7, 6), (11, 4), (4, 2)]) == {(2, 8): 1, (5, 7): 1, (6, 7): 1, (4, 11): 1, (2, 4): 1}", "assert check_occurences([(2, 5), (6, 4), (7, 6), (4, 2), (6, 1)]) == {(2, 5): 1, (4, 6): 1, (6, 7): 1, (2, 4): 1, (1, 6): 1}", "assert check_occurences([(3, 4), (1, 6), (8, 8), (1, 1), (4, 8)]) == {(3, 4): 1, (1, 6): 1, (8, 8): 1, (1, 1): 1, (4, 8): 1}", "assert check_occurences([(4, 1), (3, 2), (7, 2), (2, 6), (6, 1)]) == {(1, 4): 1, (2, 3): 1, (2, 7): 1, (2, 6): 1, (1, 6): 1}", "assert check_occurences([(2, 4), (6, 8), (2, 6), (6, 5), (2, 1)]) == {(2, 4): 1, (6, 8): 1, (2, 6): 1, (5, 6): 1, (1, 2): 1}", "assert check_occurences([(9, 1), (4, 4), (7, 4), (10, 2), (7, 9)]) == {(1, 9): 1, (4, 4): 1, (4, 7): 1, (2, 10): 1, (7, 9): 1}", "assert check_occurences([(1, 4), (3, 6), (7, 9), (7, 3), (10, 8)]) == {(1, 4): 1, (3, 6): 1, (7, 9): 1, (3, 7): 1, (8, 10): 1}", "assert check_occurences([(2, 3), (2, 5), (1, 11), (6, 7), (5, 4)]) == {(2, 3): 1, (2, 5): 1, (1, 11): 1, (6, 7): 1, (4, 5): 1}", "assert check_occurences([(6, 7), (5, 3), (3, 6), (9, 7), (4, 5)]) == {(6, 7): 1, (3, 5): 1, (3, 6): 1, (7, 9): 1, (4, 5): 1}", "assert check_occurences([(11, 1), (13, 27), (13, 20), (30, 8), (11, 21)]) == {(1, 11): 1, (13, 27): 1, (13, 20): 1, (8, 30): 1, (11, 21): 1}", "assert check_occurences([(8, 1), (6, 22), (13, 27), (22, 17), (13, 24)]) == {(1, 8): 1, (6, 22): 1, (13, 27): 1, (17, 22): 1, (13, 24): 1}", "assert check_occurences([(15, 3), (12, 22), (13, 25), (30, 16), (12, 18)]) == {(3, 15): 1, (12, 22): 1, (13, 25): 1, (16, 30): 1, (12, 18): 1}", "assert check_occurences([(10, 1), (16, 19), (16, 25), (23, 14), (11, 18)]) == {(1, 10): 1, (16, 19): 1, (16, 25): 1, (14, 23): 1, (11, 18): 1}", "assert check_occurences([(13, 1), (11, 18), (12, 20), (27, 16), (11, 22)]) == {(1, 13): 1, (11, 18): 1, (12, 20): 1, (16, 27): 1, (11, 22): 1}", "assert check_occurences([(11, 2), (12, 28), (14, 29), (20, 11), (19, 28)]) == {(2, 11): 1, (12, 28): 1, (14, 29): 1, (11, 20): 1, (19, 28): 1}", "assert check_occurences([(14, 4), (7, 27), (12, 27), (26, 17), (17, 28)]) == {(4, 14): 1, (7, 27): 1, (12, 27): 1, (17, 26): 1, (17, 28): 1}", "assert check_occurences([(11, 3), (15, 18), (10, 28), (30, 16), (16, 22)]) == {(3, 11): 1, (15, 18): 1, (10, 28): 1, (16, 30): 1, (16, 22): 1}", "assert check_occurences([(11, 1), (8, 25), (8, 29), (26, 13), (14, 22)]) == {(1, 11): 1, (8, 25): 1, (8, 29): 1, (13, 26): 1, (14, 22): 1}", "assert check_occurences([(13, 2), (12, 22), (9, 25), (25, 15), (20, 24)]) == {(2, 13): 1, (12, 22): 1, (9, 25): 1, (15, 25): 1, (20, 24): 1}", "assert check_occurences([(10, 7), (10, 21), (9, 20), (29, 17), (11, 25)]) == {(7, 10): 1, (10, 21): 1, (9, 20): 1, (17, 29): 1, (11, 25): 1}", "assert check_occurences([(12, 4), (7, 21), (14, 28), (28, 17), (11, 25)]) == {(4, 12): 1, (7, 21): 1, (14, 28): 1, (17, 28): 1, (11, 25): 1}", "assert check_occurences([(9, 1), (9, 20), (8, 29), (24, 9), (16, 26)]) == {(1, 9): 1, (9, 20): 1, (8, 29): 1, (9, 24): 1, (16, 26): 1}", "assert check_occurences([(15, 7), (13, 23), (7, 23), (27, 10), (19, 26)]) == {(7, 15): 1, (13, 23): 1, (7, 23): 1, (10, 27): 1, (19, 26): 1}", "assert check_occurences([(8, 5), (11, 21), (7, 24), (29, 7), (16, 19)]) == {(5, 8): 1, (11, 21): 1, (7, 24): 1, (7, 29): 1, (16, 19): 1}", "assert check_occurences([(18, 3), (14, 27), (10, 21), (28, 7), (13, 23)]) == {(3, 18): 1, (14, 27): 1, (10, 21): 1, (7, 28): 1, (13, 23): 1}", "assert check_occurences([(11, 3), (9, 19), (15, 25), (21, 7), (19, 18)]) == {(3, 11): 1, (9, 19): 1, (15, 25): 1, (7, 21): 1, (18, 19): 1}", "assert check_occurences([(11, 3), (13, 20), (16, 22), (24, 15), (19, 19)]) == {(3, 11): 1, (13, 20): 1, (16, 22): 1, (15, 24): 1, (19, 19): 1}", "assert check_occurences([(17, 1), (11, 18), (11, 24), (21, 16), (19, 24)]) == {(1, 17): 1, (11, 18): 1, (11, 24): 1, (16, 21): 1, (19, 24): 1}", "assert check_occurences([(10, 6), (6, 28), (12, 20), (27, 11), (17, 26)]) == {(6, 10): 1, (6, 28): 1, (12, 20): 1, (11, 27): 1, (17, 26): 1}", "assert check_occurences([(8, 3), (14, 27), (13, 20), (24, 8), (16, 19)]) == {(3, 8): 1, (14, 27): 1, (13, 20): 1, (8, 24): 1, (16, 19): 1}", "assert check_occurences([(13, 4), (16, 20), (12, 24), (25, 16), (17, 27)]) == {(4, 13): 1, (16, 20): 1, (12, 24): 1, (16, 25): 1, (17, 27): 1}", "assert check_occurences([(10, 6), (13, 18), (16, 21), (26, 17), (13, 23)]) == {(6, 10): 1, (13, 18): 1, (16, 21): 1, (17, 26): 1, (13, 23): 1}", "assert check_occurences([(13, 7), (7, 28), (13, 28), (21, 16), (13, 23)]) == {(7, 13): 1, (7, 28): 1, (13, 28): 1, (16, 21): 1, (13, 23): 1}", "assert check_occurences([(8, 7), (7, 18), (15, 23), (23, 7), (18, 21)]) == {(7, 8): 1, (7, 18): 1, (15, 23): 1, (7, 23): 1, (18, 21): 1}", "assert check_occurences([(17, 7), (10, 24), (14, 23), (23, 16), (16, 27)]) == {(7, 17): 1, (10, 24): 1, (14, 23): 1, (16, 23): 1, (16, 27): 1}", "assert check_occurences([(10, 5), (14, 26), (11, 28), (29, 13), (18, 25)]) == {(5, 10): 1, (14, 26): 1, (11, 28): 1, (13, 29): 1, (18, 25): 1}", "assert check_occurences([(17, 3), (15, 22), (10, 29), (20, 17), (20, 18)]) == {(3, 17): 1, (15, 22): 1, (10, 29): 1, (17, 20): 1, (18, 20): 1}", "assert check_occurences([(11, 3), (12, 27), (13, 26), (24, 12), (20, 18)]) == {(3, 11): 1, (12, 27): 1, (13, 26): 1, (12, 24): 1, (18, 20): 1}", "assert check_occurences([(12, 7), (9, 19), (9, 25), (29, 11), (15, 22)]) == {(7, 12): 1, (9, 19): 1, (9, 25): 1, (11, 29): 1, (15, 22): 1}", "assert check_occurences([(8, 3), (9, 20), (16, 23), (22, 8), (15, 24)]) == {(3, 8): 1, (9, 20): 1, (16, 23): 1, (8, 22): 1, (15, 24): 1}", "assert check_occurences([(17, 2), (6, 20), (13, 28), (30, 14), (21, 21)]) == {(2, 17): 1, (6, 20): 1, (13, 28): 1, (14, 30): 1, (21, 21): 1}", "assert check_occurences([(8, 4), (7, 26), (10, 26), (28, 8), (21, 26)]) == {(4, 8): 1, (7, 26): 1, (10, 26): 1, (8, 28): 1, (21, 26): 1}"], "entry_point": "check_occurences", "repair_prompt": ["Write a function check_occurences that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. You need to create a dictionary where each key is a unique tuple found in the list. The value for each key should represent the count of occurrences for that tuple in the list.\ncheck_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n", "Write a function check_occurences that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. You are required to create a dictionary. The dictionary should have each key as a unique tuple found in the list. The value for each key should represent the count of occurrences for that tuple in the list.\ncheck_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n", "Write a function check_occurences that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. You need to create a dictionary where each key is a unique tuple found in the list, and the value for each key should represent the count of occurrences for that tuple in the list.\ncheck_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n"], "completions": ["from typing import List\n## main.py\n\nfrom collections import Counter\n\ndef check_occurences(tuples_list: list[tuple]) -> dict[tuple, int]:\n    \"\"\"\n    Count occurrences of each unique tuple in the list.\n\n    Parameters:\n    tuples_list (list of tuple): A list containing tuples to count.\n\n    Returns:\n    dict: A dictionary with tuples as keys and their occurrence counts as values.\n    \"\"\"\n    # Initialize a Counter to store the count of each unique tuple\n    counter = Counter()\n    \n    # Iterate through each tuple in the list\n    for tpl in tuples_list:\n        # Sort the elements of the tuple to ensure identical tuples are considered the same\n        sorted_tpl = tuple(sorted(tpl))\n        # Increment the count for this sorted tuple in the counter\n        counter[sorted_tpl] += 1\n    \n    # Return the dictionary containing the counts of each unique tuple\n    return dict(counter)\n", "from typing import List\n## main.py\n\nfrom collections import Counter\n\ndef check_occurences(tuples_list: list[tuple]) -> dict[tuple, int]:\n    \"\"\"\n    Takes a list of tuples and returns a dictionary mapping each unique tuple to its occurrence count.\n\n    Parameters:\n    tuples_list (list of tuple): A list containing tuples.\n\n    Returns:\n    dict: A dictionary with tuples as keys and their occurrence counts as values.\n    \"\"\"\n    # Use Counter to count occurrences of each tuple in the list\n    tuple_counter = Counter(tuples_list)\n    \n    # Convert the Counter object to a dictionary\n    occurrences_dict = dict(tuple_counter)\n    \n    return occurrences_dict\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_list = [(1, 2), (1, 2), (2, 1), (3, 6)]\n    result = check_occurences(example_list)\n    print(result)  # Output: {(1, 2): 2, (2, 1): 1, (3, 6): 1}\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List, Tuple, Dict\n\ndef check_occurences(tuples_list: List[Tuple]) -> Dict[Tuple, int]:\n    \"\"\"Count occurrences of each unique tuple in the list.\n\n    Parameters:\n    tuples_list (list of tuple): A list containing tuples to be counted.\n\n    Returns:\n    dict: A dictionary where keys are unique tuples and values are their counts.\n    \"\"\"\n    # Use Counter to count occurrences of each tuple in the list\n    tuple_counter = Counter(tuples_list)\n    \n    # Convert the Counter object to a dictionary\n    return dict(tuple_counter)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(check_occurences([]))  # Expected output: {}\n    print(check_occurences([(1, 2), (1, 2), (1, 2)]))  # Expected output: {(1, 2): 3}\n    print(check_occurences([(1, 2), (2, 1), (1, 2), (2, 1)]))  # Expected output: {(1, 2): 2, (2, 1): 2}\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List, Tuple, Dict\n\ndef check_occurences(tuples_list: List[Tuple]) -> Dict[Tuple, int]:\n    \"\"\"Count occurrences of each tuple in the list.\n\n    This function takes a list of tuples and returns a dictionary where each\n    key is a unique tuple from the list, and the value is the count of how\n    many times that tuple appears in the list.\n\n    Args:\n        tuples_list (List[Tuple]): A list containing tuples to count.\n\n    Returns:\n        Dict[Tuple, int]: A dictionary with tuples as keys and their occurrence counts as values.\n    \"\"\"\n    # Use collections.Counter to count occurrences of each tuple\n    tuple_counts = Counter(tuples_list)\n    \n    # Convert the Counter object to a dictionary and return\n    return dict(tuple_counts)\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_list = [(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]\n    print(check_occurences(example_list))  # Output: {(3, 1): 1, (1, 3): 1, (2, 5): 1, (5, 2): 1, (6, 3): 1}\n", "from typing import List\n## main.py\n\ndef check_occurences(tuples_list: list[tuple]) -> dict[tuple, int]:\n    \"\"\"\n    Count occurrences of each tuple in the list.\n\n    Parameters:\n    tuples_list (list of tuple): A list containing tuples to count.\n\n    Returns:\n    dict: A dictionary with tuples as keys and their occurrence counts as values.\n    \"\"\"\n    # Initialize an empty dictionary to store the count of each unique tuple\n    occurrences = {}\n\n    # Iterate over each tuple in the input list\n    for tuple_item in tuples_list:\n        # Check if the tuple is already a key in the dictionary\n        if tuple_item in occurrences:\n            # Increment its value by 1 if it is already a key\n            occurrences[tuple_item] += 1\n        else:\n            # Add it to the dictionary with a value of 1 if it is not a key\n            occurrences[tuple_item] = 1\n\n    # Return the dictionary after processing all tuples\n    return occurrences\n", "from typing import List\n## main.py\n\nfrom collections import Counter\n\ndef check_occurences(tuples_list: list[tuple]) -> dict[tuple, int]:\n    \"\"\"\n    Takes a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Parameters:\n    tuples_list (list of tuple): A list containing tuples.\n\n    Returns:\n    dict: A dictionary with tuples as keys and their occurrence counts as values.\n    \"\"\"\n    # Use Counter from collections to count occurrences of each tuple in the list\n    tuple_counter = Counter(tuples_list)\n    \n    # Convert the Counter object to a dictionary and return it\n    return dict(tuple_counter)\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]\n    result = check_occurences(example_list)\n    print(result)  # Output: {(3, 1): 1, (1, 3): 1, (2, 5): 1, (5, 2): 1, (6, 3): 1}\n", "from typing import List\n## main.py\nfrom collections import Counter\n\ndef check_occurences(tuples_list: list) -> dict:\n    \"\"\"\n    Count occurrences of each unique tuple in the list.\n\n    Parameters:\n    tuples_list (list): A list of tuples to count occurrences from.\n\n    Returns:\n    dict: A dictionary with tuples as keys and their occurrence counts as values.\n    \"\"\"\n    # Validate input: Ensure all elements in the list are tuples\n    if not all(isinstance(item, tuple) for item in tuples_list):\n        raise ValueError(\"All elements in the list must be tuples.\")\n\n    # Use collections.Counter to count occurrences of each tuple\n    tuple_counter = Counter(tuples_list)\n\n    # Convert Counter object to dictionary and return\n    return dict(tuple_counter)\n", "from typing import List\n## main.py\nfrom collections import Counter\n\ndef check_occurences(tuples_list: list[tuple]) -> dict[tuple, int]:\n    \"\"\"\n    Counts the occurrences of each unique tuple in the input list.\n\n    Parameters:\n    tuples_list (list of tuple): A list containing tuples to be counted.\n\n    Returns:\n    dict: A dictionary where keys are unique tuples and values are their counts.\n    \"\"\"\n    # Validate input\n    if not isinstance(tuples_list, list) or not all(isinstance(t, tuple) for t in tuples_list):\n        raise ValueError(\"Input must be a list of tuples.\")\n\n    # Count occurrences using collections.Counter\n    tuple_counter = Counter(tuples_list)\n\n    # Convert Counter object to dictionary and return\n    return dict(tuple_counter)\n", "from typing import List\n## main.py\n\nfrom collections import Counter\n\ndef check_occurences(tuples_list: list[tuple]) -> dict[tuple, int]:\n    \"\"\"\n    Takes a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Parameters:\n    tuples_list (list of tuple): A list containing tuples.\n\n    Returns:\n    dict: A dictionary with tuples as keys and their occurrence counts as values.\n    \"\"\"\n    # Use Counter from collections to count occurrences of each tuple in the list\n    tuple_counter = Counter(tuples_list)\n    \n    # Convert the Counter object to a dictionary and return it\n    return dict(tuple_counter)\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]\n    result = check_occurences(example_list)\n    print(result)  # Output: {(3, 1): 1, (1, 3): 1, (2, 5): 1, (5, 2): 1, (6, 3): 1}\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List, Tuple, Dict\n\ndef check_occurences(tuples_list: List[Tuple]) -> Dict[Tuple, int]:\n    \"\"\"\n    Takes a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs.\n\n    Parameters:\n    tuples_list (List[Tuple]): A list containing tuples.\n\n    Returns:\n    Dict[Tuple, int]: A dictionary with tuples as keys and their occurrence counts as values.\n    \"\"\"\n    # Use Counter from collections to count occurrences of each tuple\n    occurrences = Counter(tuples_list)\n    \n    # Convert Counter object to a regular dictionary\n    return dict(occurrences)\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_list = [(1, 2), (1, 2), (2, 1), (3, 4), (1, 2)]\n    result = check_occurences(example_list)\n    print(result)  # Output: {(1, 2): 3, (2, 1): 1, (3, 4): 1}\n"], "plans": ["requirement analysis:\nThe function should efficiently count the occurrences of each unique tuple in a list. It should handle edge cases such as empty lists and lists with non-unique tuples. The output should be a dictionary with tuples as keys and their counts as values.\nrequirement pool:\n- Implement the main function to count tuple occurrences\n- Optimize the function for large datasets\n- Write comprehensive documentation and examples\n- Create unit tests to ensure function accuracy\n- Ensure compatibility with Python 3.x\nWe will use Python's collections.Counter to efficiently count the occurrences of each unique tuple in the list. This approach is chosen because Counter is highly efficient for counting hashable objects, which tuples are. This will ensure the function is both efficient and easy to integrate into existing projects.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique tuple'\n    Explanation: In the requirement, a unique tuple refers to a tuple that appears in the list without considering the order of elements within the tuple. For example, (3, 1) and (1, 3) are considered the same unique tuple.\n\n# [phrase showing quantity relationship]\n    'number of times': This indicates that we need to count how many times each unique tuple appears in the list.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize an empty dictionary to store the count of each unique tuple.\n    2. Iterate through each tuple in the list.\n    3. For each tuple, sort its elements to ensure that tuples with the same elements in different orders are considered identical.\n    4. Convert the sorted tuple back to a tuple and use it as a key in the dictionary.\n    5. Increment the count for this key in the dictionary.\n    6. Return the dictionary containing the counts of each unique tuple.\n\n# [edge case] \n    check_occurences([]) = {}\n    Explanation: An empty list has no tuples, so the expected output is an empty dictionary.\n    \n    check_occurences([(1, 2), (2, 1), (1, 2)]) = {(1, 2): 3}\n    Explanation: The tuples (1, 2) and (2, 1) are considered the same after sorting, so they all count towards the same key.\n\n    check_occurences([(1, 1), (1, 1), (1, 1)]) = {(1, 1): 3}\n    Explanation: All tuples are identical, so they count towards a single key with a count of 3.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where tuples need to be considered identical regardless of element order.\n    \n```python\ndef check_occurences(tuples_list):\n    from collections import Counter\n    counter = Counter()\n    for tpl in tuples_list:\n        sorted_tpl = tuple(sorted(tpl))\n        counter[sorted_tpl] += 1\n    return dict(counter)\n```\n", "requirement analysis:\nThe function should efficiently count the occurrences of each unique tuple in a list and return a dictionary. It should handle edge cases such as empty lists and large datasets. The function should be optimized for performance and easy to use.\nrequirement pool:\n- Implement the main function to count tuple occurrences.\n- Optimize the function for performance with large datasets.\n- Ensure the function handles edge cases like empty lists.\n- Provide documentation and examples for ease of use.\n- Test the function with various input scenarios.\nWe will implement a function using Python's collections.Counter to efficiently count occurrences of tuples in a list. This approach leverages the built-in functionality of Counter to handle large datasets and provides a simple API for integration.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique tuple'\n    Explanation: In the requirement, it means that each tuple in the list should be considered as a distinct entity, and the function should count how many times each distinct tuple appears in the list.\n\n# [phrase showing quantity relationship]\n    'number of times': This indicates that we need to count the occurrences of each unique tuple in the list.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the `Counter` class from the `collections` module.\n    2. Use `Counter` to count the occurrences of each tuple in the list.\n    3. Convert the `Counter` object to a dictionary to get the desired output format.\n    4. Return the dictionary.\n\n# [edge case] \n    check_occurences([]) = {}\n    Explanation: An empty list has no tuples, so the expected output is an empty dictionary.\n    \n    check_occurences([(1, 2), (1, 2), (1, 2)]) = {(1, 2): 3}\n    Explanation: The tuple (1, 2) appears three times in the list, so it should be mapped to 3 in the dictionary.\n    \n    check_occurences([(1, 2), (2, 1), (1, 2)]) = {(1, 2): 2, (2, 1): 1}\n    Explanation: The tuple (1, 2) appears twice and (2, 1) appears once. Each tuple is considered unique based on its order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `Counter` inherently handles these cases by counting occurrences accurately regardless of list content.\n", "requirement analysis:\nThe function should efficiently count occurrences of each unique tuple in a list and return a dictionary. It must handle large datasets and provide clear output for further processing.\nrequirement pool:\n- Implement the main function to count tuple occurrences.\n- Optimize the function for performance with large datasets.\n- Ensure the output is clear and easy to understand.\n- Include error handling for invalid inputs.\n- Document the function usage and examples.\nWe will use Python's built-in collections module, specifically the Counter class, to efficiently count occurrences of each unique tuple in the list. This approach is optimal for performance with large datasets due to the efficiency of the Counter class in handling large volumes of data.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique tuple'\n    Explanation: In the requirement, it refers to each distinct tuple present in the list, meaning no duplicates are considered when counting occurrences.\n\n# [phrase showing quantity relationship]\n    'number of times': refers to the count of occurrences of each unique tuple in the list. This can be implemented using a dictionary where keys are tuples and values are their counts.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Import the Counter class from the collections module.\n    - Use Counter to count occurrences of each tuple in the list.\n    - Convert the Counter object to a dictionary to map each unique tuple to its count.\n\n# [edge case] \n    check_occurences([]) = {}\n    Explanation: An empty list means there are no tuples to count, so the expected output is an empty dictionary.\n    \n    check_occurences([(1, 2), (1, 2), (1, 2)]) = {(1, 2): 3}\n    Explanation: The tuple (1, 2) appears three times in the list, so the expected output is a dictionary with {(1, 2): 3}.\n    \n    check_occurences([(1, 2), (2, 1), (1, 2), (2, 1)]) = {(1, 2): 2, (2, 1): 2}\n    Explanation: Both tuples (1, 2) and (2, 1) appear twice in the list, so the expected output is a dictionary with {(1, 2): 2, (2, 1): 2}.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of Counter from the collections module inherently handles these cases by counting occurrences accurately.\n", "requirement analysis:\nThe function needs to efficiently count occurrences of tuples in a list and return a dictionary. It should handle edge cases such as empty lists and lists with non-unique tuples. The function should be optimized for performance, especially for large datasets.\nrequirement pool:\n- Implement the main function to count tuple occurrences.\n- Optimize the function for large datasets.\n- Ensure the function handles edge cases like empty lists.\n- Provide documentation and examples for usage.\n- Include unit tests to verify functionality.\nWe will implement a function named check_occurences that utilizes Python's collections.Counter to efficiently count the occurrences of each tuple in the list. This approach is chosen for its simplicity and performance, as Counter is optimized for counting hashable objects like tuples. The function will handle edge cases such as empty lists and ensure that the output is a dictionary with tuples as keys and their counts as values.\nPlease read and understand the following inteperation before coding\n## Prompt 3:\n\n[requirement]\nWrite a function check_occurences that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. You are required to create a dictionary. The dictionary should have each key as a unique tuple found in the list. The value for each key should represent the count of occurrences for that tuple in the list.\ncheck_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\n[plan]\nWe will implement a function named check_occurences that utilizes Python's collections.Counter to efficiently count the occurrences of each tuple in the list. This approach is chosen for its simplicity and performance, as Counter is optimized for counting hashable objects like tuples. The function will handle edge cases such as empty lists and ensure that the output is a dictionary with tuples as keys and their counts as values.\n\n## Answer 3:\n\n# [core concept]\n    'unique tuple'\n    Explanation: Each tuple in the list should be considered as a distinct entity, and the dictionary should map each unique tuple to its count of occurrences.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Import collections.Counter from Python's standard library.\n    - Use Counter to count occurrences of each tuple in the list.\n    - Convert the Counter object to a dictionary to return the result.\n\n# [edge case] \n    check_occurences([]) = {}\n    Explanation: An empty list has no tuples, so the expected output is an empty dictionary.\n    \n    check_occurences([(1, 2), (1, 2), (1, 2)]) = {(1, 2): 3}\n    Explanation: The tuple (1, 2) appears three times in the list, so it should be mapped to the count of 3.\n    \n    check_occurences([(1, 2), (2, 1), (1, 2)]) = {(1, 2): 2, (2, 1): 1}\n    Explanation: The tuple (1, 2) appears twice and (2, 1) appears once.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of collections.Counter inherently handles these scenarios efficiently.\n", "requirement analysis:\nThe function needs to efficiently count occurrences of tuples in a list and return a dictionary with tuples as keys and their counts as values. The solution should handle edge cases such as empty lists and large datasets.\nrequirement pool:\n- Implement the main function to count tuple occurrences.\n- Optimize the function for performance with large datasets.\n- Ensure the function handles edge cases like empty lists.\n- Provide documentation and examples for usage.\n- Include unit tests to verify functionality.\nWe will implement a function named check_occurences that utilizes Python's built-in dictionary to count the occurrences of each tuple in the list. This approach is efficient and leverages Python's ability to handle hashable types like tuples as dictionary keys. We will ensure the function handles edge cases such as empty lists and large datasets. The function will iterate over the list of tuples, updating the count for each tuple in the dictionary.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique tuple'\n    Explanation: In the requirement, it means that each tuple in the list should be considered as a distinct key in the dictionary, and only unique tuples should be counted.\n\n# [phrase showing quantity relationship]\n    'number of times': This indicates that we need to count how many times each unique tuple appears in the list.\n    Implementation: Use a dictionary to store each tuple as a key and increment its value each time the tuple is encountered in the list.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize an empty dictionary to store the count of each unique tuple.\n    2. Iterate over each tuple in the input list.\n    3. For each tuple, check if it is already a key in the dictionary.\n    4. If it is, increment its value by 1.\n    5. If it is not, add it to the dictionary with a value of 1.\n    6. Return the dictionary after processing all tuples.\n\n# [edge case] \n    check_occurences([]) = {}\n    Explanation: An empty list should return an empty dictionary since there are no tuples to count.\n    \n    check_occurences([(1, 2), (1, 2), (1, 2)]) = {(1, 2): 3}\n    Explanation: The same tuple appears three times, so the dictionary should reflect this count.\n\n    check_occurences([(1, 2), (2, 1), (1, 2)]) = {(1, 2): 2, (2, 1): 1}\n    Explanation: The tuple (1, 2) appears twice and (2, 1) appears once, so both should be counted separately.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of using a dictionary to count occurrences will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently count the occurrences of each unique tuple in a list and return a dictionary with tuples as keys and their counts as values. The solution should handle edge cases such as empty lists and large datasets.\nrequirement pool:\n- Implement the main function to count tuple occurrences.\n- Ensure the function handles empty lists gracefully.\n- Optimize the function for performance with large datasets.\n- Include error handling for invalid inputs.\n- Provide documentation and examples for usage.\nWe will use Python's collections.Counter to efficiently count occurrences of tuples in the list. This approach is optimal for performance and simplicity, as Counter is designed to handle large datasets and provides a straightforward way to count hashable objects like tuples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique tuple'\n    Explanation: In the requirement, it means that each tuple in the list should be considered as a distinct key in the dictionary, regardless of its order or content.\n\n    'dictionary mapping'\n    Explanation: This refers to creating a dictionary where each key is a unique tuple from the list, and the value is the count of how many times that tuple appears in the list.\n\n# [phrase showing quantity relationship]\n    'number of times': This indicates that we need to count the occurrences of each unique tuple in the list.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the `Counter` class from the `collections` module.\n    2. Use `Counter` to count occurrences of each tuple in the list.\n    3. Convert the `Counter` object to a dictionary.\n    4. Return the dictionary.\n\n# [edge case] \n    check_occurences([]) = {}\n    Explanation: An empty list should return an empty dictionary since there are no tuples to count.\n    \n    check_occurences([(1, 2), (2, 1), (1, 2)]) = {(1, 2): 2, (2, 1): 1}\n    Explanation: The tuple (1, 2) appears twice, and (2, 1) appears once. Each tuple is considered unique based on its order.\n\n    check_occurences([(1, 1), (1, 1), (1, 1)]) = {(1, 1): 3}\n    Explanation: The tuple (1, 1) appears three times in the list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `Counter` inherently handles these cases by counting occurrences accurately.\n", "requirement analysis:\nThe function should efficiently count occurrences of each unique tuple in a list and return a dictionary with tuples as keys and their counts as values. The solution should handle large datasets and provide accurate results.\nrequirement pool:\n- Implement the main function to count tuple occurrences.\n- Optimize the function for performance with large datasets.\n- Ensure the output is user-friendly and easy to interpret.\n- Include error handling for invalid inputs.\n- Document the function with examples and usage instructions.\nWe will implement a function named check_occurences that utilizes Python's collections.Counter to efficiently count the occurrences of each tuple in the list. This approach is optimal for performance as Counter is specifically designed for counting hashable objects and handles large datasets efficiently. We will ensure the function is robust by including error handling for invalid inputs, such as non-tuple elements in the list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique tuple'\n    Explanation: In the requirement, a unique tuple refers to a distinct pair of elements in the list. Each tuple is considered unique based on its content and order.\n\n# [phrase showing quantity relationship]\n    'number of times': This indicates that we need to count how many times each unique tuple appears in the list.\n    Implementation: Use a dictionary to map each unique tuple to its count, or use `collections.Counter` to automatically handle this counting.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Import `collections.Counter` from the Python standard library.\n    2. Define the function `check_occurences` that takes a list of tuples as input.\n    3. Use `Counter` to count the occurrences of each tuple in the list.\n    4. Convert the `Counter` object to a dictionary.\n    5. Return the dictionary.\n\n# [edge case]\n    check_occurences([]) = {}\n    Explanation: An empty list should return an empty dictionary since there are no tuples to count.\n    \n    check_occurences([(1, 2), (1, 2), (1, 2)]) = {(1, 2): 3}\n    Explanation: The same tuple appears three times, so it should be counted as such.\n\n    check_occurences([(1, 2), (2, 1), (1, 2)]) = {(1, 2): 2, (2, 1): 1}\n    Explanation: The tuples (1, 2) and (2, 1) are considered different due to order, so they are counted separately.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `collections.Counter` inherently handles counting and can manage empty lists or lists with repeated tuples without additional logic.\n", "requirement analysis:\nThe function should efficiently count occurrences of each unique tuple in a list and return a dictionary. It should handle both small and large datasets, ensuring performance and accuracy.\nrequirement pool:\n- Implement the main function to count tuple occurrences.\n- Optimize the function for large datasets.\n- Ensure the function is easy to integrate into other projects.\n- Provide detailed documentation for the function.\n- Include error handling for invalid inputs.\nWe will implement a function named check_occurences that utilizes Python's collections module, specifically the Counter class, to efficiently count the occurrences of each unique tuple in the list. This approach ensures optimal performance even with large datasets. The function will be simple to integrate into existing projects and will provide clear and concise output. We will also handle invalid inputs by checking if the input is a list of tuples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique tuple'\n    Explanation: The requirement focuses on identifying each distinct tuple in the list and counting its occurrences.\n\n# [phrase showing quantity relationship]\n    'number of times': This indicates the need to count how many times each unique tuple appears in the list.\n    Implementation: Use a dictionary to map each tuple to its count.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Verify that the input is a list of tuples.\n    2. Use the Counter class from the collections module to count occurrences of each tuple.\n    3. Convert the Counter object to a dictionary and return it.\n\n# [edge case]\n    check_occurences([]) = {}\n    Explanation: An empty list should return an empty dictionary since there are no tuples to count.\n    \n    check_occurences([(1, 2), (1, 2), (1, 2)]) = {(1, 2): 3}\n    Explanation: The tuple (1, 2) appears three times, so the dictionary should reflect this count.\n    \n    check_occurences([(1, 2), (2, 1), (1, 2)]) = {(1, 2): 2, (2, 1): 1}\n    Explanation: The tuple (1, 2) appears twice and (2, 1) appears once, so the dictionary should reflect these counts.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of Counter from the collections module inherently handles these scenarios efficiently.\n", "requirement analysis:\nThe function should efficiently count occurrences of tuples in a list and return a dictionary with unique tuples as keys and their counts as values. It should handle large datasets and provide clear output.\nrequirement pool:\n- Implement the main function to count tuple occurrences\n- Optimize the function for performance with large lists\n- Ensure the output format is user-friendly\n- Include error handling for invalid inputs\n- Document the function usage and examples\nWe will use the collections.Counter from the Python standard library to efficiently count occurrences of tuples in the list. This approach is optimal for handling large datasets due to its performance characteristics and simplicity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique tuple'\n    Explanation: The requirement specifies that each key in the resulting dictionary should be a unique tuple from the list, meaning no duplicate tuples should be counted separately.\n\n# [phrase showing quantity relationship]\n    'number of times': This indicates that we need to count the occurrences of each unique tuple in the list.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the `Counter` class from the `collections` module.\n    2. Use `Counter` to count occurrences of each tuple in the list.\n    3. Convert the `Counter` object to a dictionary and return it.\n\n# [edge case] \n    check_occurences([]) = {}\n    Explanation: An empty list means there are no tuples to count, so the expected output is an empty dictionary.\n    \n    check_occurences([(1, 2), (1, 2), (1, 2)]) = {(1, 2): 3}\n    Explanation: The tuple (1, 2) appears three times in the list, so the expected output is a dictionary with {(1, 2): 3}.\n    \n    check_occurences([(1, 2), (2, 1), (1, 2)]) = {(1, 2): 2, (2, 1): 1}\n    Explanation: The tuple (1, 2) appears twice and (2, 1) appears once, so the expected output is a dictionary with {(1, 2): 2, (2, 1): 1}.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `Counter` naturally handles all cases including empty lists and multiple occurrences.\n", "requirement analysis:\nThe function should efficiently count the occurrences of each unique tuple in a list and return a dictionary with tuples as keys and their counts as values. It should handle edge cases such as empty lists and large datasets.\nrequirement pool:\n- Implement the main function to count tuple occurrences.\n- Optimize the function for performance with large datasets.\n- Ensure the function handles edge cases like empty lists.\n- Provide documentation and examples for usage.\n- Include unit tests to verify functionality.\nWe will implement a function using Python's collections.Counter to efficiently count occurrences of tuples in a list. This approach leverages the high performance and functionality of Counter, which is well-suited for handling large datasets and provides a straightforward way to count hashable items like tuples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique tuple'\n    Explanation: In the requirement, it means that each tuple in the list should be considered as a distinct entity, and the dictionary should map each unique tuple to its count of occurrences.\n\n# [phrase showing quantity relationship]\n    'number of times': This indicates the need to count how many times each unique tuple appears in the list.\n    Implementation: Use a dictionary to store each unique tuple as a key and its count as the value.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize an empty dictionary to store the count of occurrences.\n    2. Iterate through the list of tuples.\n    3. For each tuple, check if it is already a key in the dictionary.\n    4. If it is, increment its value by 1.\n    5. If it is not, add it to the dictionary with a value of 1.\n    6. Return the dictionary.\n\n# [edge case]\n    check_occurences([]) = {}\n    Explanation: An empty list means there are no tuples to count, so the expected output is an empty dictionary.\n    \n    check_occurences([(1, 2), (1, 2), (1, 2)]) = {(1, 2): 3}\n    Explanation: The tuple (1, 2) appears three times in the list, so the expected output is a dictionary with {(1, 2): 3}.\n    \n    check_occurences([(1, 2), (2, 1), (1, 2)]) = {(1, 2): 2, (2, 1): 1}\n    Explanation: The tuple (1, 2) appears twice and (2, 1) appears once, so the expected output is a dictionary with {(1, 2): 2, (2, 1): 1}.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through the list and updating the dictionary handles all cases effectively.\n"], "test": ["def check(check_occurences):\n\tassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}", "def check(check_occurences):\n\tassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}", "def check(check_occurences):\n\tassert check_occurences([(1, 6), (5, 7), (2, 4), (2, 5), (9, 2)]) == {(1, 6): 1, (5, 7): 1, (2, 4): 1, (2, 5): 1, (2, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 2), (2, 4), (4, 8), (8, 4), (7, 1)]) == {(2, 2): 1, (2, 4): 1, (4, 8): 2, (1, 7): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 2), (4, 3), (5, 8), (5, 1), (8, 4)]) == {(2, 8): 1, (3, 4): 1, (5, 8): 1, (1, 5): 1, (4, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(1, 2), (2, 6), (6, 5), (4, 6), (6, 4)]) == {(1, 2): 1, (2, 6): 1, (5, 6): 1, (4, 6): 2}", "def check(check_occurences):\n\tassert check_occurences([(2, 4), (4, 8), (1, 10), (2, 5), (3, 2)]) == {(2, 4): 1, (4, 8): 1, (1, 10): 1, (2, 5): 1, (2, 3): 1}", "def check(check_occurences):\n\tassert check_occurences([(1, 6), (5, 6), (2, 7), (2, 3), (9, 7)]) == {(1, 6): 1, (5, 6): 1, (2, 7): 1, (2, 3): 1, (7, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(3, 2), (3, 3), (7, 8), (5, 1), (6, 6)]) == {(2, 3): 1, (3, 3): 1, (7, 8): 1, (1, 5): 1, (6, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 2), (2, 1), (1, 6), (9, 4), (6, 2)]) == {(2, 8): 1, (1, 2): 1, (1, 6): 1, (4, 9): 1, (2, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(3, 1), (2, 5), (3, 5), (8, 3), (11, 5)]) == {(1, 3): 1, (2, 5): 1, (3, 5): 1, (3, 8): 1, (5, 11): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 6), (4, 1), (1, 4), (8, 1), (9, 1)]) == {(2, 6): 1, (1, 4): 2, (1, 8): 1, (1, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(3, 2), (3, 3), (3, 7), (3, 1), (5, 8)]) == {(2, 3): 1, (3, 3): 1, (3, 7): 1, (1, 3): 1, (5, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(6, 5), (2, 4), (2, 7), (9, 7), (6, 3)]) == {(5, 6): 1, (2, 4): 1, (2, 7): 1, (7, 9): 1, (3, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(3, 1), (5, 4), (1, 4), (8, 4), (5, 5)]) == {(1, 3): 1, (4, 5): 1, (1, 4): 1, (4, 8): 1, (5, 5): 1}", "def check(check_occurences):\n\tassert check_occurences([(5, 3), (4, 6), (4, 5), (10, 3), (11, 3)]) == {(3, 5): 1, (4, 6): 1, (4, 5): 1, (3, 10): 1, (3, 11): 1}", "def check(check_occurences):\n\tassert check_occurences([(4, 4), (1, 7), (3, 8), (4, 3), (5, 7)]) == {(4, 4): 1, (1, 7): 1, (3, 8): 1, (3, 4): 1, (5, 7): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 5), (6, 6), (2, 2), (9, 7), (3, 4)]) == {(5, 8): 1, (6, 6): 1, (2, 2): 1, (7, 9): 1, (3, 4): 1}", "def check(check_occurences):\n\tassert check_occurences([(5, 4), (1, 7), (6, 10), (4, 5), (9, 1)]) == {(4, 5): 2, (1, 7): 1, (6, 10): 1, (1, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(5, 1), (2, 1), (4, 3), (5, 3), (2, 5)]) == {(1, 5): 1, (1, 2): 1, (3, 4): 1, (3, 5): 1, (2, 5): 1}", "def check(check_occurences):\n\tassert check_occurences([(3, 2), (1, 6), (1, 4), (10, 6), (9, 2)]) == {(2, 3): 1, (1, 6): 1, (1, 4): 1, (6, 10): 1, (2, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 4), (5, 3), (1, 5), (1, 3), (11, 7)]) == {(4, 8): 1, (3, 5): 1, (1, 5): 1, (1, 3): 1, (7, 11): 1}", "def check(check_occurences):\n\tassert check_occurences([(3, 3), (3, 5), (6, 8), (1, 4), (11, 2)]) == {(3, 3): 1, (3, 5): 1, (6, 8): 1, (1, 4): 1, (2, 11): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 1), (1, 2), (1, 4), (1, 7), (3, 7)]) == {(1, 2): 2, (1, 4): 1, (1, 7): 1, (3, 7): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 1), (3, 8), (3, 10), (7, 3), (7, 6)]) == {(1, 2): 1, (3, 8): 1, (3, 10): 1, (3, 7): 1, (6, 7): 1}", "def check(check_occurences):\n\tassert check_occurences([(7, 6), (6, 5), (6, 4), (5, 3), (10, 3)]) == {(6, 7): 1, (5, 6): 1, (4, 6): 1, (3, 5): 1, (3, 10): 1}", "def check(check_occurences):\n\tassert check_occurences([(5, 5), (1, 7), (2, 1), (1, 1), (11, 1)]) == {(5, 5): 1, (1, 7): 1, (1, 2): 1, (1, 1): 1, (1, 11): 1}", "def check(check_occurences):\n\tassert check_occurences([(5, 4), (2, 8), (7, 5), (9, 3), (3, 2)]) == {(4, 5): 1, (2, 8): 1, (5, 7): 1, (3, 9): 1, (2, 3): 1}", "def check(check_occurences):\n\tassert check_occurences([(5, 4), (4, 7), (3, 9), (1, 6), (10, 2)]) == {(4, 5): 1, (4, 7): 1, (3, 9): 1, (1, 6): 1, (2, 10): 1}", "def check(check_occurences):\n\tassert check_occurences([(5, 6), (4, 3), (5, 9), (8, 7), (2, 7)]) == {(5, 6): 1, (3, 4): 1, (5, 9): 1, (7, 8): 1, (2, 7): 1}", "def check(check_occurences):\n\tassert check_occurences([(4, 5), (6, 8), (5, 9), (7, 2), (2, 3)]) == {(4, 5): 1, (6, 8): 1, (5, 9): 1, (2, 7): 1, (2, 3): 1}", "def check(check_occurences):\n\tassert check_occurences([(1, 2), (3, 3), (7, 10), (1, 2), (4, 6)]) == {(1, 2): 2, (3, 3): 1, (7, 10): 1, (4, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(6, 3), (1, 5), (3, 3), (9, 1), (6, 6)]) == {(3, 6): 1, (1, 5): 1, (3, 3): 1, (1, 9): 1, (6, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 5), (6, 5), (2, 9), (8, 1), (5, 6)]) == {(2, 5): 1, (5, 6): 2, (2, 9): 1, (1, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 6), (4, 5), (6, 4), (4, 1), (10, 1)]) == {(2, 6): 1, (4, 5): 1, (4, 6): 1, (1, 4): 1, (1, 10): 1}", "def check(check_occurences):\n\tassert check_occurences([(6, 3), (4, 4), (7, 2), (10, 8), (10, 3)]) == {(3, 6): 1, (4, 4): 1, (2, 7): 1, (8, 10): 1, (3, 10): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 4), (3, 9), (7, 6), (10, 4), (11, 8)]) == {(2, 4): 1, (3, 9): 1, (6, 7): 1, (4, 10): 1, (8, 11): 1}", "def check(check_occurences):\n\tassert check_occurences([(3, 7), (2, 4), (2, 2), (9, 5), (8, 6)]) == {(3, 7): 1, (2, 4): 1, (2, 2): 1, (5, 9): 1, (6, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(9, 1), (7, 5), (8, 9), (5, 1), (4, 8)]) == {(1, 9): 1, (5, 7): 1, (8, 9): 1, (1, 5): 1, (4, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(4, 5), (2, 7), (7, 3), (10, 8), (10, 4)]) == {(4, 5): 1, (2, 7): 1, (3, 7): 1, (8, 10): 1, (4, 10): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 4), (2, 9), (1, 9), (3, 8), (6, 7)]) == {(2, 4): 1, (2, 9): 1, (1, 9): 1, (3, 8): 1, (6, 7): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 6), (2, 7), (8, 3), (10, 2), (3, 4)]) == {(6, 8): 1, (2, 7): 1, (3, 8): 1, (2, 10): 1, (3, 4): 1}", "def check(check_occurences):\n\tassert check_occurences([(9, 7), (5, 5), (7, 8), (10, 2), (7, 4)]) == {(7, 9): 1, (5, 5): 1, (7, 8): 1, (2, 10): 1, (4, 7): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 3), (5, 8), (6, 10), (8, 4), (8, 3)]) == {(3, 8): 2, (5, 8): 1, (6, 10): 1, (4, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(6, 7), (5, 9), (1, 1), (2, 1), (9, 7)]) == {(6, 7): 1, (5, 9): 1, (1, 1): 1, (1, 2): 1, (7, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 7), (5, 6), (3, 10), (1, 2), (9, 8)]) == {(7, 8): 1, (5, 6): 1, (3, 10): 1, (1, 2): 1, (8, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 5), (3, 4), (8, 4), (4, 8), (2, 4)]) == {(2, 5): 1, (3, 4): 1, (4, 8): 2, (2, 4): 1}", "def check(check_occurences):\n\tassert check_occurences([(9, 7), (4, 4), (8, 3), (1, 1), (4, 8)]) == {(7, 9): 1, (4, 4): 1, (3, 8): 1, (1, 1): 1, (4, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(5, 5), (7, 9), (8, 1), (4, 1), (4, 4)]) == {(5, 5): 1, (7, 9): 1, (1, 8): 1, (1, 4): 1, (4, 4): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 4), (2, 4), (1, 5), (7, 5), (2, 6)]) == {(2, 4): 2, (1, 5): 1, (5, 7): 1, (2, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(6, 7), (2, 7), (8, 1), (9, 4), (2, 7)]) == {(6, 7): 1, (2, 7): 2, (1, 8): 1, (4, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 4), (7, 1), (3, 11), (9, 4), (6, 8)]) == {(4, 8): 1, (1, 7): 1, (3, 11): 1, (4, 9): 1, (6, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 4), (7, 6), (3, 1), (7, 4), (3, 6)]) == {(2, 4): 1, (6, 7): 1, (1, 3): 1, (4, 7): 1, (3, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 3), (1, 8), (8, 3), (9, 5), (12, 8)]) == {(3, 8): 2, (1, 8): 1, (5, 9): 1, (8, 12): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 6), (3, 8), (3, 3), (7, 5), (9, 6)]) == {(6, 8): 1, (3, 8): 1, (3, 3): 1, (5, 7): 1, (6, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(3, 3), (2, 6), (7, 7), (6, 7), (6, 1)]) == {(3, 3): 1, (2, 6): 1, (7, 7): 1, (6, 7): 1, (1, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 7), (5, 7), (2, 8), (6, 6), (6, 2)]) == {(2, 7): 1, (5, 7): 1, (2, 8): 1, (6, 6): 1, (2, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(6, 1), (5, 7), (1, 1), (9, 5), (8, 7)]) == {(1, 6): 1, (5, 7): 1, (1, 1): 1, (5, 9): 1, (7, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(9, 1), (1, 8), (2, 8), (8, 3), (3, 2)]) == {(1, 9): 1, (1, 8): 1, (2, 8): 1, (3, 8): 1, (2, 3): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 2), (7, 5), (7, 6), (11, 4), (4, 2)]) == {(2, 8): 1, (5, 7): 1, (6, 7): 1, (4, 11): 1, (2, 4): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 5), (6, 4), (7, 6), (4, 2), (6, 1)]) == {(2, 5): 1, (4, 6): 1, (6, 7): 1, (2, 4): 1, (1, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(3, 4), (1, 6), (8, 8), (1, 1), (4, 8)]) == {(3, 4): 1, (1, 6): 1, (8, 8): 1, (1, 1): 1, (4, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(4, 1), (3, 2), (7, 2), (2, 6), (6, 1)]) == {(1, 4): 1, (2, 3): 1, (2, 7): 1, (2, 6): 1, (1, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 4), (6, 8), (2, 6), (6, 5), (2, 1)]) == {(2, 4): 1, (6, 8): 1, (2, 6): 1, (5, 6): 1, (1, 2): 1}", "def check(check_occurences):\n\tassert check_occurences([(9, 1), (4, 4), (7, 4), (10, 2), (7, 9)]) == {(1, 9): 1, (4, 4): 1, (4, 7): 1, (2, 10): 1, (7, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(1, 4), (3, 6), (7, 9), (7, 3), (10, 8)]) == {(1, 4): 1, (3, 6): 1, (7, 9): 1, (3, 7): 1, (8, 10): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 3), (2, 5), (1, 11), (6, 7), (5, 4)]) == {(2, 3): 1, (2, 5): 1, (1, 11): 1, (6, 7): 1, (4, 5): 1}", "def check(check_occurences):\n\tassert check_occurences([(6, 7), (5, 3), (3, 6), (9, 7), (4, 5)]) == {(6, 7): 1, (3, 5): 1, (3, 6): 1, (7, 9): 1, (4, 5): 1}", "def check(check_occurences):\n\tassert check_occurences([(11, 1), (13, 27), (13, 20), (30, 8), (11, 21)]) == {(1, 11): 1, (13, 27): 1, (13, 20): 1, (8, 30): 1, (11, 21): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 1), (6, 22), (13, 27), (22, 17), (13, 24)]) == {(1, 8): 1, (6, 22): 1, (13, 27): 1, (17, 22): 1, (13, 24): 1}", "def check(check_occurences):\n\tassert check_occurences([(15, 3), (12, 22), (13, 25), (30, 16), (12, 18)]) == {(3, 15): 1, (12, 22): 1, (13, 25): 1, (16, 30): 1, (12, 18): 1}", "def check(check_occurences):\n\tassert check_occurences([(10, 1), (16, 19), (16, 25), (23, 14), (11, 18)]) == {(1, 10): 1, (16, 19): 1, (16, 25): 1, (14, 23): 1, (11, 18): 1}", "def check(check_occurences):\n\tassert check_occurences([(13, 1), (11, 18), (12, 20), (27, 16), (11, 22)]) == {(1, 13): 1, (11, 18): 1, (12, 20): 1, (16, 27): 1, (11, 22): 1}", "def check(check_occurences):\n\tassert check_occurences([(11, 2), (12, 28), (14, 29), (20, 11), (19, 28)]) == {(2, 11): 1, (12, 28): 1, (14, 29): 1, (11, 20): 1, (19, 28): 1}", "def check(check_occurences):\n\tassert check_occurences([(14, 4), (7, 27), (12, 27), (26, 17), (17, 28)]) == {(4, 14): 1, (7, 27): 1, (12, 27): 1, (17, 26): 1, (17, 28): 1}", "def check(check_occurences):\n\tassert check_occurences([(11, 3), (15, 18), (10, 28), (30, 16), (16, 22)]) == {(3, 11): 1, (15, 18): 1, (10, 28): 1, (16, 30): 1, (16, 22): 1}", "def check(check_occurences):\n\tassert check_occurences([(11, 1), (8, 25), (8, 29), (26, 13), (14, 22)]) == {(1, 11): 1, (8, 25): 1, (8, 29): 1, (13, 26): 1, (14, 22): 1}", "def check(check_occurences):\n\tassert check_occurences([(13, 2), (12, 22), (9, 25), (25, 15), (20, 24)]) == {(2, 13): 1, (12, 22): 1, (9, 25): 1, (15, 25): 1, (20, 24): 1}", "def check(check_occurences):\n\tassert check_occurences([(10, 7), (10, 21), (9, 20), (29, 17), (11, 25)]) == {(7, 10): 1, (10, 21): 1, (9, 20): 1, (17, 29): 1, (11, 25): 1}", "def check(check_occurences):\n\tassert check_occurences([(12, 4), (7, 21), (14, 28), (28, 17), (11, 25)]) == {(4, 12): 1, (7, 21): 1, (14, 28): 1, (17, 28): 1, (11, 25): 1}", "def check(check_occurences):\n\tassert check_occurences([(9, 1), (9, 20), (8, 29), (24, 9), (16, 26)]) == {(1, 9): 1, (9, 20): 1, (8, 29): 1, (9, 24): 1, (16, 26): 1}", "def check(check_occurences):\n\tassert check_occurences([(15, 7), (13, 23), (7, 23), (27, 10), (19, 26)]) == {(7, 15): 1, (13, 23): 1, (7, 23): 1, (10, 27): 1, (19, 26): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 5), (11, 21), (7, 24), (29, 7), (16, 19)]) == {(5, 8): 1, (11, 21): 1, (7, 24): 1, (7, 29): 1, (16, 19): 1}", "def check(check_occurences):\n\tassert check_occurences([(18, 3), (14, 27), (10, 21), (28, 7), (13, 23)]) == {(3, 18): 1, (14, 27): 1, (10, 21): 1, (7, 28): 1, (13, 23): 1}", "def check(check_occurences):\n\tassert check_occurences([(11, 3), (9, 19), (15, 25), (21, 7), (19, 18)]) == {(3, 11): 1, (9, 19): 1, (15, 25): 1, (7, 21): 1, (18, 19): 1}", "def check(check_occurences):\n\tassert check_occurences([(11, 3), (13, 20), (16, 22), (24, 15), (19, 19)]) == {(3, 11): 1, (13, 20): 1, (16, 22): 1, (15, 24): 1, (19, 19): 1}", "def check(check_occurences):\n\tassert check_occurences([(17, 1), (11, 18), (11, 24), (21, 16), (19, 24)]) == {(1, 17): 1, (11, 18): 1, (11, 24): 1, (16, 21): 1, (19, 24): 1}", "def check(check_occurences):\n\tassert check_occurences([(10, 6), (6, 28), (12, 20), (27, 11), (17, 26)]) == {(6, 10): 1, (6, 28): 1, (12, 20): 1, (11, 27): 1, (17, 26): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 3), (14, 27), (13, 20), (24, 8), (16, 19)]) == {(3, 8): 1, (14, 27): 1, (13, 20): 1, (8, 24): 1, (16, 19): 1}", "def check(check_occurences):\n\tassert check_occurences([(13, 4), (16, 20), (12, 24), (25, 16), (17, 27)]) == {(4, 13): 1, (16, 20): 1, (12, 24): 1, (16, 25): 1, (17, 27): 1}", "def check(check_occurences):\n\tassert check_occurences([(10, 6), (13, 18), (16, 21), (26, 17), (13, 23)]) == {(6, 10): 1, (13, 18): 1, (16, 21): 1, (17, 26): 1, (13, 23): 1}", "def check(check_occurences):\n\tassert check_occurences([(13, 7), (7, 28), (13, 28), (21, 16), (13, 23)]) == {(7, 13): 1, (7, 28): 1, (13, 28): 1, (16, 21): 1, (13, 23): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 7), (7, 18), (15, 23), (23, 7), (18, 21)]) == {(7, 8): 1, (7, 18): 1, (15, 23): 1, (7, 23): 1, (18, 21): 1}", "def check(check_occurences):\n\tassert check_occurences([(17, 7), (10, 24), (14, 23), (23, 16), (16, 27)]) == {(7, 17): 1, (10, 24): 1, (14, 23): 1, (16, 23): 1, (16, 27): 1}", "def check(check_occurences):\n\tassert check_occurences([(10, 5), (14, 26), (11, 28), (29, 13), (18, 25)]) == {(5, 10): 1, (14, 26): 1, (11, 28): 1, (13, 29): 1, (18, 25): 1}", "def check(check_occurences):\n\tassert check_occurences([(17, 3), (15, 22), (10, 29), (20, 17), (20, 18)]) == {(3, 17): 1, (15, 22): 1, (10, 29): 1, (17, 20): 1, (18, 20): 1}", "def check(check_occurences):\n\tassert check_occurences([(11, 3), (12, 27), (13, 26), (24, 12), (20, 18)]) == {(3, 11): 1, (12, 27): 1, (13, 26): 1, (12, 24): 1, (18, 20): 1}", "def check(check_occurences):\n\tassert check_occurences([(12, 7), (9, 19), (9, 25), (29, 11), (15, 22)]) == {(7, 12): 1, (9, 19): 1, (9, 25): 1, (11, 29): 1, (15, 22): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 3), (9, 20), (16, 23), (22, 8), (15, 24)]) == {(3, 8): 1, (9, 20): 1, (16, 23): 1, (8, 22): 1, (15, 24): 1}", "def check(check_occurences):\n\tassert check_occurences([(17, 2), (6, 20), (13, 28), (30, 14), (21, 21)]) == {(2, 17): 1, (6, 20): 1, (13, 28): 1, (14, 30): 1, (21, 21): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 4), (7, 26), (10, 26), (28, 8), (21, 26)]) == {(4, 8): 1, (7, 26): 1, (10, 26): 1, (8, 28): 1, (21, 26): 1}"], "scores": [1.0, 0.0294, 0.0294, 0.0294, 0.0294, 0.0294, 0.0294, 0.0294, 0.0294, 0.0294], "pass_results": [true, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [102, 3, 3, 3, 3, 3, 3, 3, 3, 3], "completion": "from typing import List\n## main.py\n\nfrom collections import Counter\n\ndef check_occurences(tuples_list: list[tuple]) -> dict[tuple, int]:\n    \"\"\"\n    Count occurrences of each unique tuple in the list.\n\n    Parameters:\n    tuples_list (list of tuple): A list containing tuples to count.\n\n    Returns:\n    dict: A dictionary with tuples as keys and their occurrence counts as values.\n    \"\"\"\n    # Initialize a Counter to store the count of each unique tuple\n    counter = Counter()\n    \n    # Iterate through each tuple in the list\n    for tpl in tuples_list:\n        # Sort the elements of the tuple to ensure identical tuples are considered the same\n        sorted_tpl = tuple(sorted(tpl))\n        # Increment the count for this sorted tuple in the counter\n        counter[sorted_tpl] += 1\n    \n    # Return the dictionary containing the counts of each unique tuple\n    return dict(counter)\n", "passed": true, "pass": true, "pass_num": 1, "round": 771, "mutate_method": "expand_one2two", "parent_index": 80}
