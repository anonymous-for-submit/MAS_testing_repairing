{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 728, "prompt": "Write a function receives as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].", "code": "def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list", "test_imports": [], "test_list": ["assert sum_list([10,20,30],[15,25,35])==[25,45,65]", "assert sum_list([1,2,3],[5,6,7])==[6,8,10]", "assert sum_list([15,20,30],[15,45,75])==[30,65,105]", "assert sum_list([11, 19, 31], [20, 29, 39]) == [31, 48, 70]", "assert sum_list([15, 19, 31], [18, 26, 30]) == [33, 45, 61]", "assert sum_list([11, 23, 29], [15, 20, 40]) == [26, 43, 69]", "assert sum_list([11, 25, 35], [13, 27, 32]) == [24, 52, 67]", "assert sum_list([6, 20, 25], [11, 29, 36]) == [17, 49, 61]", "assert sum_list([10, 18, 26], [11, 27, 30]) == [21, 45, 56]", "assert sum_list([6, 16, 31], [19, 21, 36]) == [25, 37, 67]", "assert sum_list([8, 17, 30], [17, 30, 40]) == [25, 47, 70]", "assert sum_list([12, 22, 26], [17, 27, 32]) == [29, 49, 58]", "assert sum_list([12, 20, 34], [14, 22, 37]) == [26, 42, 71]", "assert sum_list([8, 21, 26], [15, 23, 36]) == [23, 44, 62]", "assert sum_list([5, 19, 27], [13, 22, 39]) == [18, 41, 66]", "assert sum_list([6, 15, 25], [15, 28, 32]) == [21, 43, 57]", "assert sum_list([8, 22, 27], [11, 28, 35]) == [19, 50, 62]", "assert sum_list([5, 25, 33], [13, 30, 38]) == [18, 55, 71]", "assert sum_list([12, 18, 34], [17, 23, 36]) == [29, 41, 70]", "assert sum_list([5, 20, 30], [20, 28, 39]) == [25, 48, 69]", "assert sum_list([12, 21, 30], [15, 22, 36]) == [27, 43, 66]", "assert sum_list([14, 15, 27], [18, 25, 36]) == [32, 40, 63]", "assert sum_list([7, 15, 33], [16, 30, 35]) == [23, 45, 68]", "assert sum_list([7, 22, 33], [12, 27, 30]) == [19, 49, 63]", "assert sum_list([13, 25, 35], [18, 21, 35]) == [31, 46, 70]", "assert sum_list([9, 23, 35], [11, 28, 35]) == [20, 51, 70]", "assert sum_list([14, 24, 27], [11, 26, 37]) == [25, 50, 64]", "assert sum_list([9, 24, 34], [20, 23, 35]) == [29, 47, 69]", "assert sum_list([11, 24, 33], [14, 29, 31]) == [25, 53, 64]", "assert sum_list([13, 24, 28], [10, 25, 34]) == [23, 49, 62]", "assert sum_list([15, 21, 28], [10, 20, 30]) == [25, 41, 58]", "assert sum_list([9, 17, 28], [17, 22, 32]) == [26, 39, 60]", "assert sum_list([7, 25, 28], [13, 29, 31]) == [20, 54, 59]", "assert sum_list([6, 25, 26], [12, 26, 34]) == [18, 51, 60]", "assert sum_list([9, 21, 34], [10, 26, 40]) == [19, 47, 74]", "assert sum_list([13, 18, 25], [12, 26, 39]) == [25, 44, 64]", "assert sum_list([2, 1, 2], [10, 8, 6]) == [12, 9, 8]", "assert sum_list([1, 7, 5], [1, 9, 2]) == [2, 16, 7]", "assert sum_list([1, 2, 6], [4, 11, 2]) == [5, 13, 8]", "assert sum_list([4, 6, 4], [1, 6, 6]) == [5, 12, 10]", "assert sum_list([6, 3, 2], [3, 8, 7]) == [9, 11, 9]", "assert sum_list([5, 3, 2], [10, 4, 7]) == [15, 7, 9]", "assert sum_list([2, 5, 5], [7, 10, 3]) == [9, 15, 8]", "assert sum_list([6, 7, 4], [9, 5, 8]) == [15, 12, 12]", "assert sum_list([4, 3, 1], [8, 11, 7]) == [12, 14, 8]", "assert sum_list([1, 7, 8], [1, 10, 4]) == [2, 17, 12]", "assert sum_list([5, 2, 1], [2, 9, 9]) == [7, 11, 10]", "assert sum_list([1, 5, 2], [2, 4, 9]) == [3, 9, 11]", "assert sum_list([1, 4, 2], [8, 5, 7]) == [9, 9, 9]", "assert sum_list([4, 4, 1], [4, 5, 5]) == [8, 9, 6]", "assert sum_list([6, 2, 4], [5, 10, 12]) == [11, 12, 16]", "assert sum_list([3, 2, 6], [7, 1, 4]) == [10, 3, 10]", "assert sum_list([2, 7, 3], [9, 5, 2]) == [11, 12, 5]", "assert sum_list([2, 3, 4], [9, 6, 12]) == [11, 9, 16]", "assert sum_list([2, 6, 6], [1, 3, 10]) == [3, 9, 16]", "assert sum_list([4, 7, 7], [6, 7, 8]) == [10, 14, 15]", "assert sum_list([1, 3, 7], [10, 8, 6]) == [11, 11, 13]", "assert sum_list([1, 3, 6], [3, 1, 6]) == [4, 4, 12]", "assert sum_list([2, 7, 1], [9, 4, 4]) == [11, 11, 5]", "assert sum_list([4, 2, 1], [8, 2, 5]) == [12, 4, 6]", "assert sum_list([6, 2, 5], [3, 4, 10]) == [9, 6, 15]", "assert sum_list([5, 3, 2], [5, 1, 4]) == [10, 4, 6]", "assert sum_list([4, 5, 5], [9, 10, 8]) == [13, 15, 13]", "assert sum_list([3, 4, 3], [3, 5, 11]) == [6, 9, 14]", "assert sum_list([1, 5, 2], [5, 1, 11]) == [6, 6, 13]", "assert sum_list([2, 3, 8], [3, 7, 3]) == [5, 10, 11]", "assert sum_list([3, 5, 7], [5, 8, 8]) == [8, 13, 15]", "assert sum_list([4, 3, 6], [8, 11, 11]) == [12, 14, 17]", "assert sum_list([3, 7, 8], [6, 9, 2]) == [9, 16, 10]", "assert sum_list([14, 18, 32], [14, 49, 80]) == [28, 67, 112]", "assert sum_list([15, 21, 33], [13, 47, 78]) == [28, 68, 111]", "assert sum_list([14, 15, 27], [17, 49, 79]) == [31, 64, 106]", "assert sum_list([10, 20, 33], [19, 41, 75]) == [29, 61, 108]", "assert sum_list([19, 21, 32], [11, 48, 80]) == [30, 69, 112]", "assert sum_list([18, 18, 28], [10, 50, 76]) == [28, 68, 104]", "assert sum_list([19, 17, 25], [19, 44, 79]) == [38, 61, 104]", "assert sum_list([16, 21, 26], [15, 44, 72]) == [31, 65, 98]", "assert sum_list([11, 19, 32], [10, 44, 77]) == [21, 63, 109]", "assert sum_list([20, 21, 34], [14, 50, 74]) == [34, 71, 108]", "assert sum_list([18, 23, 34], [10, 41, 72]) == [28, 64, 106]", "assert sum_list([17, 23, 28], [20, 49, 71]) == [37, 72, 99]", "assert sum_list([16, 17, 33], [12, 41, 74]) == [28, 58, 107]", "assert sum_list([13, 16, 29], [19, 40, 70]) == [32, 56, 99]", "assert sum_list([19, 18, 29], [12, 46, 79]) == [31, 64, 108]", "assert sum_list([20, 16, 33], [13, 47, 80]) == [33, 63, 113]", "assert sum_list([16, 24, 34], [17, 41, 76]) == [33, 65, 110]", "assert sum_list([19, 24, 34], [11, 50, 80]) == [30, 74, 114]", "assert sum_list([14, 24, 28], [18, 43, 76]) == [32, 67, 104]", "assert sum_list([11, 15, 29], [19, 46, 80]) == [30, 61, 109]", "assert sum_list([14, 18, 31], [11, 41, 78]) == [25, 59, 109]", "assert sum_list([16, 18, 32], [13, 46, 72]) == [29, 64, 104]", "assert sum_list([13, 23, 30], [19, 41, 78]) == [32, 64, 108]", "assert sum_list([16, 18, 33], [17, 44, 80]) == [33, 62, 113]", "assert sum_list([13, 22, 33], [12, 48, 77]) == [25, 70, 110]", "assert sum_list([13, 18, 29], [14, 50, 76]) == [27, 68, 105]", "assert sum_list([15, 18, 29], [12, 43, 80]) == [27, 61, 109]", "assert sum_list([12, 16, 35], [11, 46, 74]) == [23, 62, 109]", "assert sum_list([14, 16, 32], [18, 40, 75]) == [32, 56, 107]", "assert sum_list([14, 21, 29], [10, 41, 80]) == [24, 62, 109]", "assert sum_list([13, 18, 25], [16, 45, 75]) == [29, 63, 100]", "assert sum_list([18, 25, 35], [19, 47, 79]) == [37, 72, 114]", "assert sum_list([18, 25, 29], [16, 48, 73]) == [34, 73, 102]"], "entry_point": "sum_list", "repair_prompt": ["Write a function sum_list receives as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nsum_list([10,20,30],[15,25,35])==[25,45,65]\n", "Write a function sum_list receives as input two lists [a_1,...,a_n], [b_1,...,b_n]. The function should return a single list. The returned list should be [a_1+b_1,...,a_n+b_n].\nsum_list([10,20,30],[15,25,35])==[25,45,65]\n", "Write a function sum_list receives as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nsum_list([10,20,30],[15,25,35])==[25,45,65]\n"], "completions": ["from typing import List\n## main.py\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Takes two lists of integers and returns a new list containing the element-wise sum.\n    If the lists are of different lengths, the shorter list is padded with zeros.\n\n    Args:\n        list1 (list[int]): The first list of integers.\n        list2 (list[int]): The second list of integers.\n\n    Returns:\n        list[int]: A new list containing the element-wise sum of the input lists.\n    \"\"\"\n    \n    # Determine the maximum length of the two lists\n    max_length = max(len(list1), len(list2))\n    \n    # Pad the shorter list with zeros\n    padded_list1 = list1 + [0] * (max_length - len(list1))\n    padded_list2 = list2 + [0] * (max_length - len(list2))\n    \n    # Use map and lambda to compute the element-wise sum\n    return list(map(lambda x, y: x + y, padded_list1, padded_list2))\n\n# Example usage:\n# result = sum_list([10, 20, 30], [15, 25, 35])\n# print(result)  # Output: [25, 45, 65]\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Sums two lists element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise sums of the input lists.\n\n    Raises:\n    ValueError: If the input lists are not of the same length or contain non-numeric elements.\n    \"\"\"\n    # Check if both lists are of equal length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of equal length.\")\n\n    # Check for non-numeric elements in the lists\n    if not all(isinstance(x, (int, float)) for x in list1 + list2):\n        raise ValueError(\"Both lists must contain only numeric elements.\")\n\n    # Perform element-wise sum using list comprehension\n    result = [list1[i] + list2[i] for i in range(len(list1))]\n\n    return result\n", "from typing import List\n## main.py\n\ndef sum_list(list_a: list[int], list_b: list[int]) -> list[int]:\n    '''\n    Sums corresponding elements of two lists.\n\n    Parameters:\n    list_a (list[int]): First list of integers.\n    list_b (list[int]): Second list of integers.\n\n    Returns:\n    list[int]: A list containing the sum of corresponding elements.\n\n    Raises:\n    ValueError: If the input lists are of different lengths.\n    '''\n    if len(list_a) != len(list_b):\n        raise ValueError(\"Lists must be of the same length\")\n\n    return [a + b for a, b in zip(list_a, list_b)]\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Sums two lists element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise sums of the input lists.\n\n    Raises:\n    ValueError: If the input lists are not of the same length or contain non-numeric elements.\n    TypeError: If the inputs are not lists.\n    \"\"\"\n    # Check if both inputs are lists\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Both inputs must be lists.\")\n    \n    # Check if lists are of equal length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of equal length.\")\n    \n    # Check if all elements are numeric\n    if not all(isinstance(x, (int, float)) for x in list1 + list2):\n        raise TypeError(\"All elements must be numeric.\")\n    \n    # Compute element-wise sum using list comprehension\n    return [x + y for x, y in zip(list1, list2)]\n\n# Example usage:\n# result = sum_list([10, 20, 30], [15, 25, 35])\n# print(result)  # Output: [25, 45, 65]\n", "from typing import List\n## main.py\n\ndef sum_list(list_a: list[int], list_b: list[int]) -> list[int]:\n    \"\"\"\n    Computes the element-wise sum of two lists of integers.\n\n    Parameters:\n    list_a (list[int]): The first list of integers.\n    list_b (list[int]): The second list of integers.\n\n    Returns:\n    list[int]: A list containing the element-wise sums of the input lists.\n\n    Raises:\n    ValueError: If the input lists are of different lengths.\n    \"\"\"\n    if len(list_a) != len(list_b):\n        raise ValueError(\"Both lists must be of the same length.\")\n\n    # Using list comprehension to compute the element-wise sum\n    result = [a + b for a, b in zip(list_a, list_b)]\n    return result\n\n# Example usage:\n# result = sum_list([10, 20, 30], [15, 25, 35])\n# print(result)  # Output: [25, 45, 65]\n\n# result = sum_list([10, 20], [15, 25, 35])\n# This will raise a ValueError: \"Both lists must be of the same length.\"\n", "from typing import List\n## main.py\n\ndef sum_list(list_a: list[int], list_b: list[int]) -> list[int]:\n    \"\"\"\n    Sums corresponding elements of two lists of equal length.\n\n    Parameters:\n    list_a (list[int]): The first list of integers.\n    list_b (list[int]): The second list of integers.\n\n    Returns:\n    list[int]: A list containing the sums of corresponding elements.\n\n    Raises:\n    ValueError: If the input lists are of different lengths.\n    \"\"\"\n    if len(list_a) != len(list_b):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    return [a + b for a, b in zip(list_a, list_b)]\n", "from typing import List\n## main.py\n\ndef sum_list(list_a: list[int], list_b: list[int]) -> list[int]:\n    \"\"\"\n    Sums corresponding elements of two lists.\n\n    Parameters:\n    list_a (list[int]): First list of integers.\n    list_b (list[int]): Second list of integers.\n\n    Returns:\n    list[int]: A list containing the sum of corresponding elements.\n\n    Example:\n    >>> sum_list([10, 20, 30], [15, 25, 35])\n    [25, 45, 65]\n    \"\"\"\n    # Use zip to pair elements from both lists\n    # Use list comprehension to sum the pairs\n    return [a + b for a, b in zip(list_a, list_b)]\n\n# Example usage\nif __name__ == \"__main__\":\n    result = sum_list([10, 20, 30], [15, 25, 35])\n    print(result)  # Output: [25, 45, 65]\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Sums corresponding elements of two lists. If lists are of different lengths, the shorter list is padded with zeros.\n\n    Parameters:\n    list1 (list[int]): The first list of integers.\n    list2 (list[int]): The second list of integers.\n\n    Returns:\n    list[int]: A list containing the sum of corresponding elements from list1 and list2.\n    \"\"\"\n    # Determine the maximum length of the two lists\n    max_length = max(len(list1), len(list2))\n    \n    # Pad the shorter list with zeros to match the length of the longer list\n    list1.extend([0] * (max_length - len(list1)))\n    list2.extend([0] * (max_length - len(list2)))\n    \n    # Sum corresponding elements using list comprehension\n    return [list1[i] + list2[i] for i in range(max_length)]\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Sums corresponding elements of two lists of equal length.\n\n    Parameters:\n    list1 (list[int]): The first list of integers.\n    list2 (list[int]): The second list of integers.\n\n    Returns:\n    list[int]: A list containing the sums of corresponding elements.\n\n    Raises:\n    ValueError: If the input lists are of different lengths.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    return [a + b for a, b in zip(list1, list2)]\n", "from typing import List\n## main.py\n\ndef sum_list(list_a: list[int], list_b: list[int]) -> list[int]:\n    \"\"\"\n    Adds corresponding elements of two lists.\n\n    Parameters:\n    list_a (list[int]): The first list of integers.\n    list_b (list[int]): The second list of integers.\n\n    Returns:\n    list[int]: A list containing the sum of corresponding elements of list_a and list_b.\n\n    Raises:\n    ValueError: If the input lists are of different lengths.\n    \"\"\"\n    if len(list_a) != len(list_b):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    return [a + b for a, b in zip(list_a, list_b)]\n\n# Example usage:\n# result = sum_list([1, 2, 3], [4, 5, 6])\n# print(result)  # Output: [5, 7, 9]\n"], "plans": ["requirement analysis:\nThe function should efficiently compute the element-wise sum of two lists, ensuring compatibility with lists of different lengths and optimizing for performance.\nrequirement pool:\n- Implement the main function to sum two lists element-wise\n- Handle cases where lists are of different lengths\n- Optimize performance for large lists\n- Ensure compatibility with various data types within lists\n- Provide clear error messages for invalid inputs\nWe will use the built-in Python map function combined with a lambda to efficiently compute the element-wise sum of two lists. This approach is simple, effective, and performs well even with large lists. To handle lists of different lengths, we will pad the shorter list with zeros to match the length of the longer list, ensuring graceful handling of varying list lengths.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'element-wise sum'\n    Explanation: This means that each element from the first list is added to the corresponding element from the second list, resulting in a new list of sums.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Determine the length of both input lists.\n    2. Pad the shorter list with zeros to match the length of the longer list.\n    3. Use the map function with a lambda to compute the sum of corresponding elements from both lists.\n    4. Return the resulting list of sums.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = [1, 2, 3]\n    Explanation: The second list is empty, so it is padded with zeros, resulting in the same list as the first one.\n    \n    sum_list([], [4, 5, 6]) = [4, 5, 6]\n    Explanation: The first list is empty, so it is padded with zeros, resulting in the same list as the second one.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def sum_list(list1, list2):\n            max_length = max(len(list1), len(list2))\n            list1 += [0] * (max_length - len(list1))\n            list2 += [0] * (max_length - len(list2))\n            return list(map(lambda x, y: x + y, list1, list2))\n", "requirement analysis:\nThe function should efficiently compute the element-wise sum of two lists, ensuring both lists are of equal length. It should handle edge cases such as empty lists and provide informative error messages for invalid inputs.\nrequirement pool:\n- Implement the main function to sum two lists element-wise.\n- Ensure the function checks for equal list lengths and handles errors.\n- Optimize the function for performance with large lists.\n- Include documentation for usage and error handling.\n- Test the function with various list sizes and edge cases.\nWe will implement a function using native Python features to sum two lists element-wise. The function will first check if the lists are of equal length and raise an error if they are not. For performance optimization, especially with large lists, we will use list comprehension, which is efficient and easy to understand. We will also include error handling for non-numeric elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'element-wise sum'\n    Explanation: This means that each element from the first list is added to the corresponding element from the second list, resulting in a new list of sums.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if both input lists are of equal length. If not, raise an error.\n    2. Use list comprehension to iterate over the indices of the lists.\n    3. For each index, add the corresponding elements from both lists.\n    4. Return the new list containing the sums.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1], [2]) = [3]\n    Explanation: Both lists have one element, so the result is a list with one element which is the sum of the two elements.\n    \n    sum_list([1, 2, 3], [4, 5]) = Error\n    Explanation: The lists are of different lengths, so an error should be raised.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(list1) != len(list2):\n            raise ValueError(\"Both lists must be of equal length.\")\n        (other code)\n", "requirement analysis:\nThe function should efficiently sum corresponding elements of two lists of equal length. It should handle edge cases such as empty lists and ensure compatibility with various Python versions.\nrequirement pool:\n- Implement the main function to sum elements of two lists\n- Ensure the function handles edge cases like empty lists\n- Provide documentation and examples for usage\n- Optimize for performance with large lists\n- Test compatibility with different Python versions\nWe will use native Python list comprehensions to efficiently sum corresponding elements of two lists. This approach is simple, efficient for small to medium-sized lists, and does not require any additional libraries. We will ensure the function handles edge cases such as empty lists and lists of different lengths by raising an appropriate error.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum corresponding elements'\n    Explanation: The requirement is to add elements from two lists at the same index position and return a new list with these sums.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Check if both lists are of the same length; if not, raise an error.\n    - Use a list comprehension to iterate over the indices of the lists.\n    - For each index, sum the elements from both lists and store the result in a new list.\n    - Return the new list.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], [4, 5]) = Error\n    Explanation: The lists are of different lengths, so an error should be raised.\n    \n    sum_list([0, 0, 0], [0, 0, 0]) = [0, 0, 0]\n    Explanation: All elements are zero, so the sum at each index is zero.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(list1) != len(list2):\n            raise ValueError(\"Lists must be of the same length\")\n        (other code)\n", "requirement analysis:\nThe function should efficiently sum two lists element-wise, ensuring that both lists are of equal length. It should handle errors gracefully, providing clear messages for invalid inputs such as non-list types or lists of differing lengths.\nrequirement pool:\n- Implement element-wise summation of two lists\n- Optimize performance for large lists\n- Include error handling for invalid inputs\n- Document function usage and edge cases\n- Test function with various list sizes and types\nWe will implement a simple function using list comprehension to sum two lists element-wise. This approach is efficient for both small and large lists and is easy to understand. We will include error handling to ensure both inputs are lists of equal length and contain numeric elements. If inputs are invalid, the function will raise informative exceptions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'element-wise sum'\n    Explanation: The requirement specifies that each element in the first list should be added to the corresponding element in the second list, resulting in a new list where each position contains the sum of the elements from the input lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if both inputs are lists and have the same length.\n    2. Use list comprehension to iterate over the indices of the lists.\n    3. For each index, add the elements from both lists and store the result in a new list.\n    4. Return the new list.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both input lists are empty, so the result is an empty list.\n    \n    sum_list([0], [0]) = [0]\n    Explanation: Both lists contain a single element which is zero, so their sum is zero.\n    \n    sum_list([1, 2, 3], [4, 5]) = Error\n    Explanation: The lists are of different lengths, which is invalid input according to the requirement.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not isinstance(list1, list) or not isinstance(list2, list):\n            raise TypeError(\"Both inputs must be lists.\")\n        if len(list1) != len(list2):\n            raise ValueError(\"Both lists must be of equal length.\")\n        if not all(isinstance(x, (int, float)) for x in list1 + list2):\n            raise TypeError(\"All elements must be numeric.\")\n        (other code)\n", "requirement analysis:\nThe function should efficiently compute the element-wise sum of two lists, ensuring both lists are of equal length. It should handle large lists without performance degradation and provide clear error messages for invalid inputs.\nrequirement pool:\n- Implement the main function to compute element-wise sum of two lists\n- Optimize the function for performance with large lists\n- Add error handling for lists of different lengths\n- Document the function usage and edge cases\n- Test the function with various list sizes and types\nWe will implement a function using native Python features to compute the element-wise sum of two lists. The function will include error handling to ensure both lists are of equal length and will be optimized for performance with large lists using list comprehension, which is efficient and easy to understand. We will not use external libraries like NumPy or Pandas to keep the solution simple and avoid additional dependencies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'element-wise sum'\n    Explanation: This refers to adding corresponding elements from two lists to produce a new list. For example, if the first elements of the two lists are 10 and 15, the first element of the resulting list will be 25.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if both input lists are of equal length. If not, raise an error or return an appropriate message.\n    2. Use list comprehension to iterate over the indices of the lists.\n    3. For each index, add the corresponding elements from both lists.\n    4. Return the new list containing the sums.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both input lists are empty, so the resulting list is also empty.\n    \n    sum_list([0], [0]) = [0]\n    Explanation: The only elements in both lists are zero, so their sum is also zero.\n    \n    sum_list([1, 2, 3], [4, 5]) = Error or appropriate message\n    Explanation: The input lists are of different lengths, so an error should be raised or a message should be returned indicating the mismatch.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the input lists are of different lengths.\n        if len(list1) != len(list2):\n            raise ValueError(\"Both lists must be of the same length.\")\n        (other code)\n", "requirement analysis:\nThe function should efficiently sum corresponding elements of two lists of equal length. It should handle edge cases such as empty lists and ensure compatibility with various Python versions.\nrequirement pool:\n- The function must correctly sum corresponding elements of two lists.\n- The function should handle edge cases like empty lists.\n- The function should be efficient for large lists.\n- The function should include clear documentation.\n- The function should be compatible with Python 3.x versions.\nWe will use Python's built-in zip function combined with a list comprehension to efficiently sum corresponding elements of two lists. This approach is both efficient and easy to understand, making it suitable for integration into existing codebases. It will handle edge cases such as empty lists gracefully by returning an empty list. For lists of different lengths, the function will raise a ValueError to ensure the user is aware of the input mismatch.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum corresponding elements'\n    Explanation: The requirement is to sum elements at the same position from two lists and return a new list with these sums.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Check if both lists are of the same length; if not, raise a ValueError.\n    - Use the zip function to pair elements from both lists.\n    - Use a list comprehension to iterate over the pairs and sum them.\n    - Return the resulting list.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], [4, 5]) = ValueError\n    Explanation: The lists are of different lengths, so a ValueError should be raised.\n    \n    sum_list([0, 0, 0], [0, 0, 0]) = [0, 0, 0]\n    Explanation: All elements are zero, so the sum of corresponding elements is zero.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(list1) != len(list2):\n            raise ValueError(\"Lists must be of the same length\")\n        return [a + b for a, b in zip(list1, list2)]\n", "requirement analysis:\nThe function should efficiently sum corresponding elements of two lists, handle edge cases like empty lists, and provide accurate results. It should be easy to integrate and compatible with various Python versions.\nrequirement pool:\n- The function should sum corresponding elements of two lists\n- Handle edge cases like empty lists\n- Provide clear documentation and examples\n- Ensure compatibility with different Python versions\n- Optimize for large lists\nWe will use the zip function combined with list comprehension to efficiently sum corresponding elements of two lists. This approach is both readable and efficient, making it ideal for most users. It handles edge cases like empty lists gracefully by returning an empty list if either input list is empty. For lists of different lengths, the function will sum elements up to the length of the shorter list, which is a common practice in Python to handle such cases gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum corresponding elements'\n    Explanation: The requirement is to sum each pair of elements from two lists at the same index and return a new list containing these sums.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Use the `zip` function to pair elements from both lists.\n    2. Use a list comprehension to iterate over these pairs and sum them.\n    3. Return the resulting list of sums.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both input lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = []\n    Explanation: The second list is empty, so there are no pairs to sum, resulting in an empty list.\n    \n    sum_list([], [4, 5, 6]) = []\n    Explanation: The first list is empty, so there are no pairs to sum, resulting in an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `zip` naturally handles cases where one or both lists are empty by returning an empty iterator, resulting in an empty list when summed.\n", "requirement analysis:\nThe function should efficiently sum corresponding elements of two lists, ensuring it handles edge cases such as lists of different lengths or empty lists. It should be optimized for performance and easy to understand.\nrequirement pool:\n- Implement the main function to sum elements of two lists\n- Ensure the function handles lists of different lengths\n- Optimize performance for large lists\n- Improve code readability and maintainability\n- Include error handling for invalid inputs\nWe will implement a function that sums corresponding elements of two lists. To handle lists of different lengths, we will pad the shorter list with zeros to match the length of the longer list. This approach ensures that the function can handle varying list lengths gracefully. We will use list comprehension for its simplicity and efficiency in Python.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum corresponding elements'\n    Explanation: The requirement is to add each element from the first list to the corresponding element in the second list, resulting in a new list of summed values.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n    1. Determine the lengths of both input lists.\n    2. Pad the shorter list with zeros to match the length of the longer list.\n    3. Use list comprehension to iterate over the indices of the lists and sum the corresponding elements.\n    4. Return the resulting list of summed values.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = [1, 2, 3]\n    Explanation: The second list is empty, so it is padded with zeros, resulting in the same list as the first one.\n    \n    sum_list([], [4, 5, 6]) = [4, 5, 6]\n    Explanation: The first list is empty, so it is padded with zeros, resulting in the same list as the second one.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where lists are of different lengths.\n    ```python\n    def sum_list(list1, list2):\n        max_length = max(len(list1), len(list2))\n        # Pad shorter list with zeros\n        list1.extend([0] * (max_length - len(list1)))\n        list2.extend([0] * (max_length - len(list2)))\n        # Sum corresponding elements\n        return [list1[i] + list2[i] for i in range(max_length)]\n    ```\n", "requirement analysis:\nThe function should efficiently sum corresponding elements of two lists of equal length. It must handle edge cases such as empty lists and ensure compatibility with various Python versions. The function should be easy to integrate and use in different projects.\nrequirement pool:\n- The function must correctly sum corresponding elements of two lists.\n- The function should handle edge cases like empty lists.\n- The function should be efficient for large lists.\n- The function should be compatible with different Python versions.\n- The function should include clear documentation.\nWe will use Python's built-in zip function combined with a list comprehension to efficiently sum corresponding elements of two lists. This approach is efficient for both small and large lists and is compatible with all Python versions. We will handle edge cases such as empty lists gracefully by returning an empty list if either input list is empty. For lists of different lengths, we will raise a ValueError to ensure the function is used correctly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum corresponding elements'\n    Explanation: The requirement is to sum elements from two lists at the same positions and return a new list with these sums.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Check if both lists are of the same length; if not, raise a ValueError.\n    - Use the zip function to pair elements from both lists.\n    - Use a list comprehension to iterate over the pairs and sum them.\n    - Return the resulting list.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = ValueError\n    Explanation: The lists are of different lengths, so a ValueError should be raised.\n    \n    sum_list([], [1, 2, 3]) = ValueError\n    Explanation: The lists are of different lengths, so a ValueError should be raised.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(list1) != len(list2):\n            raise ValueError(\"Lists must be of the same length\")\n        return [a + b for a, b in zip(list1, list2)]\n", "requirement analysis:\nThe function should efficiently add corresponding elements of two lists of equal length. It should handle edge cases such as empty lists and ensure compatibility with various Python versions. Documentation should be clear to facilitate easy integration.\nrequirement pool:\n- The function must correctly add elements of two lists.\n- The function should handle edge cases like empty lists.\n- The function should be compatible with Python 3.x versions.\n- The function should include comprehensive documentation.\n- The function should be optimized for performance with large lists.\nWe will use native Python list comprehension to efficiently add corresponding elements of two lists. This approach is optimal for small to medium-sized lists and ensures compatibility with Python 3.x versions. It will handle edge cases such as empty lists gracefully. Comprehensive documentation will be provided to facilitate easy integration.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'corresponding elements'\n    Explanation: This refers to elements at the same index in both lists. The requirement is to add elements from the first list to elements at the same index in the second list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic involves iterating over the indices of the lists and adding elements at each index from both lists. This can be efficiently implemented using list comprehension in Python.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    sum_list([1, 2, 3], []) = Error or undefined behavior\n    Explanation: The second list is empty, which does not match the length of the first list, leading to an error or undefined behavior.\n    sum_list([], [4, 5, 6]) = Error or undefined behavior\n    Explanation: The first list is empty, which does not match the length of the second list, leading to an error or undefined behavior.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(list1) != len(list2):\n            raise ValueError(\"Both lists must have the same length.\")\n        return [a + b for a, b in zip(list1, list2)]\n"], "test": ["def check(sum_list):\n\tassert sum_list([10,20,30],[15,25,35])==[25,45,65]", "def check(sum_list):\n\tassert sum_list([1,2,3],[5,6,7])==[6,8,10]", "def check(sum_list):\n\tassert sum_list([15,20,30],[15,45,75])==[30,65,105]", "def check(sum_list):\n\tassert sum_list([11, 19, 31], [20, 29, 39]) == [31, 48, 70]", "def check(sum_list):\n\tassert sum_list([15, 19, 31], [18, 26, 30]) == [33, 45, 61]", "def check(sum_list):\n\tassert sum_list([11, 23, 29], [15, 20, 40]) == [26, 43, 69]", "def check(sum_list):\n\tassert sum_list([11, 25, 35], [13, 27, 32]) == [24, 52, 67]", "def check(sum_list):\n\tassert sum_list([6, 20, 25], [11, 29, 36]) == [17, 49, 61]", "def check(sum_list):\n\tassert sum_list([10, 18, 26], [11, 27, 30]) == [21, 45, 56]", "def check(sum_list):\n\tassert sum_list([6, 16, 31], [19, 21, 36]) == [25, 37, 67]", "def check(sum_list):\n\tassert sum_list([8, 17, 30], [17, 30, 40]) == [25, 47, 70]", "def check(sum_list):\n\tassert sum_list([12, 22, 26], [17, 27, 32]) == [29, 49, 58]", "def check(sum_list):\n\tassert sum_list([12, 20, 34], [14, 22, 37]) == [26, 42, 71]", "def check(sum_list):\n\tassert sum_list([8, 21, 26], [15, 23, 36]) == [23, 44, 62]", "def check(sum_list):\n\tassert sum_list([5, 19, 27], [13, 22, 39]) == [18, 41, 66]", "def check(sum_list):\n\tassert sum_list([6, 15, 25], [15, 28, 32]) == [21, 43, 57]", "def check(sum_list):\n\tassert sum_list([8, 22, 27], [11, 28, 35]) == [19, 50, 62]", "def check(sum_list):\n\tassert sum_list([5, 25, 33], [13, 30, 38]) == [18, 55, 71]", "def check(sum_list):\n\tassert sum_list([12, 18, 34], [17, 23, 36]) == [29, 41, 70]", "def check(sum_list):\n\tassert sum_list([5, 20, 30], [20, 28, 39]) == [25, 48, 69]", "def check(sum_list):\n\tassert sum_list([12, 21, 30], [15, 22, 36]) == [27, 43, 66]", "def check(sum_list):\n\tassert sum_list([14, 15, 27], [18, 25, 36]) == [32, 40, 63]", "def check(sum_list):\n\tassert sum_list([7, 15, 33], [16, 30, 35]) == [23, 45, 68]", "def check(sum_list):\n\tassert sum_list([7, 22, 33], [12, 27, 30]) == [19, 49, 63]", "def check(sum_list):\n\tassert sum_list([13, 25, 35], [18, 21, 35]) == [31, 46, 70]", "def check(sum_list):\n\tassert sum_list([9, 23, 35], [11, 28, 35]) == [20, 51, 70]", "def check(sum_list):\n\tassert sum_list([14, 24, 27], [11, 26, 37]) == [25, 50, 64]", "def check(sum_list):\n\tassert sum_list([9, 24, 34], [20, 23, 35]) == [29, 47, 69]", "def check(sum_list):\n\tassert sum_list([11, 24, 33], [14, 29, 31]) == [25, 53, 64]", "def check(sum_list):\n\tassert sum_list([13, 24, 28], [10, 25, 34]) == [23, 49, 62]", "def check(sum_list):\n\tassert sum_list([15, 21, 28], [10, 20, 30]) == [25, 41, 58]", "def check(sum_list):\n\tassert sum_list([9, 17, 28], [17, 22, 32]) == [26, 39, 60]", "def check(sum_list):\n\tassert sum_list([7, 25, 28], [13, 29, 31]) == [20, 54, 59]", "def check(sum_list):\n\tassert sum_list([6, 25, 26], [12, 26, 34]) == [18, 51, 60]", "def check(sum_list):\n\tassert sum_list([9, 21, 34], [10, 26, 40]) == [19, 47, 74]", "def check(sum_list):\n\tassert sum_list([13, 18, 25], [12, 26, 39]) == [25, 44, 64]", "def check(sum_list):\n\tassert sum_list([2, 1, 2], [10, 8, 6]) == [12, 9, 8]", "def check(sum_list):\n\tassert sum_list([1, 7, 5], [1, 9, 2]) == [2, 16, 7]", "def check(sum_list):\n\tassert sum_list([1, 2, 6], [4, 11, 2]) == [5, 13, 8]", "def check(sum_list):\n\tassert sum_list([4, 6, 4], [1, 6, 6]) == [5, 12, 10]", "def check(sum_list):\n\tassert sum_list([6, 3, 2], [3, 8, 7]) == [9, 11, 9]", "def check(sum_list):\n\tassert sum_list([5, 3, 2], [10, 4, 7]) == [15, 7, 9]", "def check(sum_list):\n\tassert sum_list([2, 5, 5], [7, 10, 3]) == [9, 15, 8]", "def check(sum_list):\n\tassert sum_list([6, 7, 4], [9, 5, 8]) == [15, 12, 12]", "def check(sum_list):\n\tassert sum_list([4, 3, 1], [8, 11, 7]) == [12, 14, 8]", "def check(sum_list):\n\tassert sum_list([1, 7, 8], [1, 10, 4]) == [2, 17, 12]", "def check(sum_list):\n\tassert sum_list([5, 2, 1], [2, 9, 9]) == [7, 11, 10]", "def check(sum_list):\n\tassert sum_list([1, 5, 2], [2, 4, 9]) == [3, 9, 11]", "def check(sum_list):\n\tassert sum_list([1, 4, 2], [8, 5, 7]) == [9, 9, 9]", "def check(sum_list):\n\tassert sum_list([4, 4, 1], [4, 5, 5]) == [8, 9, 6]", "def check(sum_list):\n\tassert sum_list([6, 2, 4], [5, 10, 12]) == [11, 12, 16]", "def check(sum_list):\n\tassert sum_list([3, 2, 6], [7, 1, 4]) == [10, 3, 10]", "def check(sum_list):\n\tassert sum_list([2, 7, 3], [9, 5, 2]) == [11, 12, 5]", "def check(sum_list):\n\tassert sum_list([2, 3, 4], [9, 6, 12]) == [11, 9, 16]", "def check(sum_list):\n\tassert sum_list([2, 6, 6], [1, 3, 10]) == [3, 9, 16]", "def check(sum_list):\n\tassert sum_list([4, 7, 7], [6, 7, 8]) == [10, 14, 15]", "def check(sum_list):\n\tassert sum_list([1, 3, 7], [10, 8, 6]) == [11, 11, 13]", "def check(sum_list):\n\tassert sum_list([1, 3, 6], [3, 1, 6]) == [4, 4, 12]", "def check(sum_list):\n\tassert sum_list([2, 7, 1], [9, 4, 4]) == [11, 11, 5]", "def check(sum_list):\n\tassert sum_list([4, 2, 1], [8, 2, 5]) == [12, 4, 6]", "def check(sum_list):\n\tassert sum_list([6, 2, 5], [3, 4, 10]) == [9, 6, 15]", "def check(sum_list):\n\tassert sum_list([5, 3, 2], [5, 1, 4]) == [10, 4, 6]", "def check(sum_list):\n\tassert sum_list([4, 5, 5], [9, 10, 8]) == [13, 15, 13]", "def check(sum_list):\n\tassert sum_list([3, 4, 3], [3, 5, 11]) == [6, 9, 14]", "def check(sum_list):\n\tassert sum_list([1, 5, 2], [5, 1, 11]) == [6, 6, 13]", "def check(sum_list):\n\tassert sum_list([2, 3, 8], [3, 7, 3]) == [5, 10, 11]", "def check(sum_list):\n\tassert sum_list([3, 5, 7], [5, 8, 8]) == [8, 13, 15]", "def check(sum_list):\n\tassert sum_list([4, 3, 6], [8, 11, 11]) == [12, 14, 17]", "def check(sum_list):\n\tassert sum_list([3, 7, 8], [6, 9, 2]) == [9, 16, 10]", "def check(sum_list):\n\tassert sum_list([14, 18, 32], [14, 49, 80]) == [28, 67, 112]", "def check(sum_list):\n\tassert sum_list([15, 21, 33], [13, 47, 78]) == [28, 68, 111]", "def check(sum_list):\n\tassert sum_list([14, 15, 27], [17, 49, 79]) == [31, 64, 106]", "def check(sum_list):\n\tassert sum_list([10, 20, 33], [19, 41, 75]) == [29, 61, 108]", "def check(sum_list):\n\tassert sum_list([19, 21, 32], [11, 48, 80]) == [30, 69, 112]", "def check(sum_list):\n\tassert sum_list([18, 18, 28], [10, 50, 76]) == [28, 68, 104]", "def check(sum_list):\n\tassert sum_list([19, 17, 25], [19, 44, 79]) == [38, 61, 104]", "def check(sum_list):\n\tassert sum_list([16, 21, 26], [15, 44, 72]) == [31, 65, 98]", "def check(sum_list):\n\tassert sum_list([11, 19, 32], [10, 44, 77]) == [21, 63, 109]", "def check(sum_list):\n\tassert sum_list([20, 21, 34], [14, 50, 74]) == [34, 71, 108]", "def check(sum_list):\n\tassert sum_list([18, 23, 34], [10, 41, 72]) == [28, 64, 106]", "def check(sum_list):\n\tassert sum_list([17, 23, 28], [20, 49, 71]) == [37, 72, 99]", "def check(sum_list):\n\tassert sum_list([16, 17, 33], [12, 41, 74]) == [28, 58, 107]", "def check(sum_list):\n\tassert sum_list([13, 16, 29], [19, 40, 70]) == [32, 56, 99]", "def check(sum_list):\n\tassert sum_list([19, 18, 29], [12, 46, 79]) == [31, 64, 108]", "def check(sum_list):\n\tassert sum_list([20, 16, 33], [13, 47, 80]) == [33, 63, 113]", "def check(sum_list):\n\tassert sum_list([16, 24, 34], [17, 41, 76]) == [33, 65, 110]", "def check(sum_list):\n\tassert sum_list([19, 24, 34], [11, 50, 80]) == [30, 74, 114]", "def check(sum_list):\n\tassert sum_list([14, 24, 28], [18, 43, 76]) == [32, 67, 104]", "def check(sum_list):\n\tassert sum_list([11, 15, 29], [19, 46, 80]) == [30, 61, 109]", "def check(sum_list):\n\tassert sum_list([14, 18, 31], [11, 41, 78]) == [25, 59, 109]", "def check(sum_list):\n\tassert sum_list([16, 18, 32], [13, 46, 72]) == [29, 64, 104]", "def check(sum_list):\n\tassert sum_list([13, 23, 30], [19, 41, 78]) == [32, 64, 108]", "def check(sum_list):\n\tassert sum_list([16, 18, 33], [17, 44, 80]) == [33, 62, 113]", "def check(sum_list):\n\tassert sum_list([13, 22, 33], [12, 48, 77]) == [25, 70, 110]", "def check(sum_list):\n\tassert sum_list([13, 18, 29], [14, 50, 76]) == [27, 68, 105]", "def check(sum_list):\n\tassert sum_list([15, 18, 29], [12, 43, 80]) == [27, 61, 109]", "def check(sum_list):\n\tassert sum_list([12, 16, 35], [11, 46, 74]) == [23, 62, 109]", "def check(sum_list):\n\tassert sum_list([14, 16, 32], [18, 40, 75]) == [32, 56, 107]", "def check(sum_list):\n\tassert sum_list([14, 21, 29], [10, 41, 80]) == [24, 62, 109]", "def check(sum_list):\n\tassert sum_list([13, 18, 25], [16, 45, 75]) == [29, 63, 100]", "def check(sum_list):\n\tassert sum_list([18, 25, 35], [19, 47, 79]) == [37, 72, 114]", "def check(sum_list):\n\tassert sum_list([18, 25, 29], [16, 48, 73]) == [34, 73, 102]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_list(list_a: list[int], list_b: list[int]) -> list[int]:\n    \"\"\"\n    Adds corresponding elements of two lists.\n\n    Parameters:\n    list_a (list[int]): The first list of integers.\n    list_b (list[int]): The second list of integers.\n\n    Returns:\n    list[int]: A list containing the sum of corresponding elements of list_a and list_b.\n\n    Raises:\n    ValueError: If the input lists are of different lengths.\n    \"\"\"\n    if len(list_a) != len(list_b):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    return [a + b for a, b in zip(list_a, list_b)]\n\n# Example usage:\n# result = sum_list([1, 2, 3], [4, 5, 6])\n# print(result)  # Output: [5, 7, 9]\n", "passed": true, "pass": true, "pass_num": 10, "round": 973, "mutate_method": "rephrase_one", "parent_index": 219}
