{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 731, "prompt": "Write a function to find the lateral surface area of a cone given radius r and the height h.", "code": "import math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA", "test_imports": [], "test_list": ["assert lateralsurface_cone(5,12)==204.20352248333654", "assert lateralsurface_cone(10,15)==566.3586699569488", "assert lateralsurface_cone(19,17)==1521.8090132193388", "assert lateralsurface_cone(4, 10) == 135.3439535717124", "assert lateralsurface_cone(8, 11) == 341.84223862609196", "assert lateralsurface_cone(10, 14) == 540.5000372546194", "assert lateralsurface_cone(10, 17) == 619.6189241803191", "assert lateralsurface_cone(2, 17) == 107.55080826324239", "assert lateralsurface_cone(1, 11) == 34.700025027842585", "assert lateralsurface_cone(10, 17) == 619.6189241803191", "assert lateralsurface_cone(3, 12) == 116.5780650907367", "assert lateralsurface_cone(1, 15) == 47.22849346153437", "assert lateralsurface_cone(9, 14) == 470.5787011194216", "assert lateralsurface_cone(7, 8) == 233.76911594312833", "assert lateralsurface_cone(6, 12) == 252.89333031746617", "assert lateralsurface_cone(10, 13) == 515.25950586991", "assert lateralsurface_cone(9, 7) == 322.3770065365564", "assert lateralsurface_cone(9, 14) == 470.5787011194216", "assert lateralsurface_cone(9, 15) == 494.59884217959996", "assert lateralsurface_cone(10, 9) == 422.6580647044575", "assert lateralsurface_cone(5, 17) == 278.3458182702795", "assert lateralsurface_cone(6, 15) == 304.52389553635294", "assert lateralsurface_cone(4, 12) == 158.95341225273762", "assert lateralsurface_cone(6, 9) == 203.88912118450162", "assert lateralsurface_cone(8, 16) == 449.5881427866065", "assert lateralsurface_cone(9, 11) == 401.85378834922545", "assert lateralsurface_cone(8, 8) == 284.34450804213543", "assert lateralsurface_cone(1, 10) == 31.572615420804546", "assert lateralsurface_cone(6, 17) == 339.8152019741693", "assert lateralsurface_cone(1, 14) == 44.09435413989645", "assert lateralsurface_cone(5, 7) == 135.12500931365486", "assert lateralsurface_cone(1, 13) == 40.9613567668991", "assert lateralsurface_cone(1, 10) == 31.572615420804546", "assert lateralsurface_cone(1, 13) == 40.9613567668991", "assert lateralsurface_cone(4, 7) == 101.31331885360844", "assert lateralsurface_cone(8, 9) == 302.63828052992443", "assert lateralsurface_cone(7, 10) == 268.43617813616964", "assert lateralsurface_cone(14, 16) == 935.0764637725133", "assert lateralsurface_cone(6, 12) == 252.89333031746617", "assert lateralsurface_cone(6, 17) == 339.8152019741693", "assert lateralsurface_cone(6, 14) == 287.1078820894653", "assert lateralsurface_cone(6, 20) == 393.59028275542903", "assert lateralsurface_cone(6, 18) == 357.6451775686596", "assert lateralsurface_cone(11, 19) == 758.6929997570384", "assert lateralsurface_cone(13, 15) == 810.6648374334094", "assert lateralsurface_cone(15, 11) == 876.5550197362436", "assert lateralsurface_cone(11, 12) == 562.5556551319436", "assert lateralsurface_cone(11, 20) == 788.7900424378303", "assert lateralsurface_cone(14, 12) == 810.9934878213232", "assert lateralsurface_cone(9, 18) == 569.0099932142988", "assert lateralsurface_cone(14, 12) == 810.9934878213232", "assert lateralsurface_cone(9, 13) == 447.0564719608245", "assert lateralsurface_cone(9, 18) == 569.0099932142988", "assert lateralsurface_cone(12, 16) == 753.9822368615503", "assert lateralsurface_cone(10, 11) == 467.03132364336636", "assert lateralsurface_cone(14, 18) == 1002.9506870026199", "assert lateralsurface_cone(15, 10) == 849.5380049354233", "assert lateralsurface_cone(14, 10) == 756.7000521564672", "assert lateralsurface_cone(14, 17) == 968.6096191797571", "assert lateralsurface_cone(11, 12) == 562.5556551319436", "assert lateralsurface_cone(14, 10) == 756.7000521564672", "assert lateralsurface_cone(13, 16) == 841.9526923219875", "assert lateralsurface_cone(5, 13) == 218.78661143973912", "assert lateralsurface_cone(12, 11) == 613.6970783257566", "assert lateralsurface_cone(12, 11) == 613.6970783257566", "assert lateralsurface_cone(8, 20) == 541.3758142868496", "assert lateralsurface_cone(9, 16) == 519.0477736553122", "assert lateralsurface_cone(7, 20) == 465.98408387880266", "assert lateralsurface_cone(13, 19) == 940.2236256367811", "assert lateralsurface_cone(19, 22) == 1735.1292385670592", "assert lateralsurface_cone(22, 16) == 1880.1323124435057", "assert lateralsurface_cone(22, 19) == 2009.0970130776475", "assert lateralsurface_cone(24, 13) == 2057.9710009121764", "assert lateralsurface_cone(14, 16) == 935.0764637725133", "assert lateralsurface_cone(22, 18) == 1964.6185208184352", "assert lateralsurface_cone(19, 15) == 1444.9482110556244", "assert lateralsurface_cone(21, 19) == 1868.3418915675168", "assert lateralsurface_cone(15, 12) == 905.2203628953802", "assert lateralsurface_cone(15, 19) == 1140.748587675493", "assert lateralsurface_cone(21, 16) == 1741.7489463162146", "assert lateralsurface_cone(17, 15) == 1210.8221402684294", "assert lateralsurface_cone(22, 12) == 1732.0178974017306", "assert lateralsurface_cone(22, 22) == 2150.355342068649", "assert lateralsurface_cone(17, 16) == 1246.8007223263787", "assert lateralsurface_cone(24, 16) == 2174.8172926346833", "assert lateralsurface_cone(16, 20) == 1287.4245161178742", "assert lateralsurface_cone(17, 12) == 1111.3292428165107", "assert lateralsurface_cone(23, 12) == 1874.4991197817697", "assert lateralsurface_cone(19, 17) == 1521.8090132193388", "assert lateralsurface_cone(20, 19) == 1733.2938526665353", "assert lateralsurface_cone(16, 15) == 1102.4080948235726", "assert lateralsurface_cone(24, 22) == 2454.7883133030264", "assert lateralsurface_cone(15, 22) == 1254.7703543213713", "assert lateralsurface_cone(17, 20) == 1401.8721403713373", "assert lateralsurface_cone(16, 14) == 1068.6588157400154", "assert lateralsurface_cone(15, 19) == 1140.748587675493", "assert lateralsurface_cone(19, 17) == 1521.8090132193388", "assert lateralsurface_cone(20, 15) == 1570.7963267948965", "assert lateralsurface_cone(17, 17) == 1283.9931691277677", "assert lateralsurface_cone(17, 21) == 1442.9797089695412", "assert lateralsurface_cone(24, 13) == 2057.9710009121764", "assert lateralsurface_cone(15, 16) == 1033.5075888970994"], "entry_point": "lateralsurface_cone", "repair_prompt": ["Write a function lateralsurface_cone to find the lateral surface area of a cone given radius r and the height h.\nlateralsurface_cone(5,12)==204.20352248333654\n", "Write a function lateralsurface_cone to find the lateral surface area of a cone. The function requires two inputs, namely the radius r, and the height h.\nlateralsurface_cone(5,12)==204.20352248333654\n", "Write a function lateralsurface_cone to find the lateral surface area of a cone given radius r and the height h.\nlateralsurface_cone(5,12)==204.20352248333654\n"], "completions": ["from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Args:\n        r (float): Radius of the base of the cone (must be greater than zero).\n        h (float): Height of the cone (must be greater than zero).\n\n    Returns:\n        float: Lateral surface area of the cone, or a string message if inputs are invalid.\n    \"\"\"\n    if r <= 0:\n        return \"Invalid input: radius must be greater than zero.\"\n    if h <= 0:\n        return \"Invalid input: height must be greater than zero.\"\n\n    # Calculate the slant height using the Pythagorean theorem\n    l = math.sqrt(r**2 + h**2)\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * l\n    \n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone. Must be a positive number.\n    h (float): The height of the cone. Must be a positive number.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If the radius or height is not a positive number.\n    \"\"\"\n    # Validate inputs\n    if r <= 0 or h < 0:\n        raise ValueError(\"Radius and height must be positive numbers.\")\n\n    # Calculate the slant height using the Pythagorean theorem\n    l = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area using the formula \u03c0 * r * l\n    area = math.pi * r * l\n\n    return area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone, or None if inputs are invalid.\n    \"\"\"\n    # Handle edge cases where radius or height is zero or negative\n    if r <= 0 or h <= 0:\n        return None\n\n    # Calculate the slant height using the Pythagorean theorem\n    l = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area using the formula \u03c0 * r * l\n    lateral_surface_area = math.pi * r * l\n\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n    \n    Args:\n        r (float): Radius of the cone base.\n        h (float): Height of the cone.\n    \n    Returns:\n        float: Lateral surface area of the cone, or a message indicating invalid input.\n    \"\"\"\n    # Check for invalid inputs\n    if r <= 0 or h <= 0:\n        return \"Invalid input: radius and height must be positive numbers.\"\n    \n    # Calculate the lateral surface area using the formula \u03c0 * r * sqrt(r^2 + h^2)\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    \n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone, or a message indicating invalid input.\n    \"\"\"\n    # Check for invalid inputs\n    if r <= 0 or h <= 0:\n        return \"Invalid input\"\n\n    # Calculate the slant height\n    l = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * l\n\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone, or a message indicating invalid input.\n    \"\"\"\n    if r <= 0:\n        return \"Invalid input: radius must be greater than zero.\"\n    if h < 0:\n        return \"Invalid input: height must be non-negative.\"\n\n    # Calculate the slant height using the Pythagorean theorem\n    l = math.sqrt(r**2 + h**2)\n    \n    # Calculate the lateral surface area using the formula \u03c0 * r * l\n    lateral_surface_area = math.pi * r * l\n    \n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone, or an error message if inputs are invalid.\n    \"\"\"\n    # Validate inputs\n    if r <= 0:\n        return \"Error: Radius must be positive\"\n    if h <= 0:\n        return \"Error: Height must be positive\"\n\n    # Calculate the lateral surface area using the formula \u03c0 * r * sqrt(r^2 + h^2)\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone, or an error message if inputs are invalid.\n    \"\"\"\n    # Validate inputs\n    if r <= 0 or h <= 0:\n        return \"Error: Radius and height must be positive numbers.\"\n\n    # Calculate the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2)\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n\n    return lateral_surface_area\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(lateralsurface_cone(5, 12))  # Expected output: 204.20352248333654\n    print(lateralsurface_cone(0, 10))  # Expected output: \"Error: Radius and height must be positive numbers.\"\n    print(lateralsurface_cone(5, -12)) # Expected output: \"Error: Radius and height must be positive numbers.\"\n    print(lateralsurface_cone(5, 0))   # Expected output: \"Error: Radius and height must be positive numbers.\"\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone. Must be greater than zero.\n    h (float): The height of the cone. Must be greater than zero.\n\n    Returns:\n    float: The lateral surface area of the cone, or an error message if inputs are invalid.\n    \"\"\"\n    # Validate the inputs\n    if r <= 0:\n        return \"Error: Radius must be greater than zero.\"\n    if h <= 0:\n        return \"Error: Height must be greater than zero.\"\n\n    # Calculate the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2)\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone, or an error message if inputs are invalid.\n    \"\"\"\n    # Check for edge cases where radius or height is zero or negative\n    if r <= 0:\n        return \"Error: Radius must be greater than zero.\"\n    if h <= 0:\n        return \"Error: Height must be greater than zero.\"\n\n    # Calculate the slant height using the Pythagorean theorem\n    slant_height = math.sqrt(r**2 + h**2)\n\n    # Compute the lateral surface area using the formula \u03c0 * r * l\n    lateral_surface_area = math.pi * r * slant_height\n\n    return lateral_surface_area\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cone using the formula \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). The function should be accurate and efficient.\nrequirement pool:\n- Implement the function to calculate the lateral surface area of a cone.\n- Ensure the function handles edge cases, such as zero or negative inputs.\n- Optimize the function for performance.\n- Create a user interface for input and output.\n- Add documentation and examples for user guidance.\nWe will implement a simple Python function to calculate the lateral surface area of a cone using the formula \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). We will use the math library for accurate mathematical calculations. The function will handle edge cases such as zero or negative inputs by returning an appropriate message. The function will be optimized for performance by using efficient mathematical operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: The lateral surface area of a cone is the area of the cone's side, excluding the base. It is calculated using the formula \u03c0 * r * l, where r is the radius and l is the slant height.\n\n    'slant height'\n    Explanation: The slant height of a cone is the distance from the top of the cone to any point on the edge of the base. It can be calculated using the Pythagorean theorem as sqrt(r^2 + h^2).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math library to use mathematical functions.\n    2. Define the function lateralsurface_cone with parameters r and h.\n    3. Calculate the slant height l using sqrt(r^2 + h^2).\n    4. Calculate the lateral surface area using \u03c0 * r * l.\n    5. Return the calculated lateral surface area.\n\n# [edge case] \n    lateralsurface_cone(0, 12) = \"Invalid input: radius must be greater than zero.\"\n    Explanation: A cone with a radius of zero does not have a lateral surface area, so an appropriate message should be returned.\n    \n    lateralsurface_cone(5, 0) = \"Invalid input: height must be greater than zero.\"\n    Explanation: A cone with a height of zero does not have a lateral surface area, so an appropriate message should be returned.\n    \n    lateralsurface_cone(-5, 12) = \"Invalid input: radius must be greater than zero.\"\n    Explanation: A negative radius is not physically meaningful for a cone, so an appropriate message should be returned.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        import math\n        \n        def lateralsurface_cone(r, h):\n            if r <= 0:\n                return \"Invalid input: radius must be greater than zero.\"\n            if h <= 0:\n                return \"Invalid input: height must be greater than zero.\"\n            \n            l = math.sqrt(r**2 + h**2)\n            lateral_surface_area = math.pi * r * l\n            return lateral_surface_area\n", "requirement analysis:\nThe requirement is to develop a function that calculates the lateral surface area of a cone using the formula \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). The function should be accurate and efficient.\nrequirement pool:\n- Implement the function to calculate the lateral surface area of a cone.\n- Ensure the function handles edge cases, such as zero or negative inputs.\n- Optimize the function for performance.\n- Create a user-friendly interface for inputting values.\n- Provide detailed error messages for invalid inputs.\nWe will implement a function named `lateralsurface_cone` that calculates the lateral surface area of a cone using the formula \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). We will use the `math` library for accurate mathematical calculations. The function will include error handling for non-positive inputs to ensure robustness.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: The lateral surface area of a cone is the area of the cone's surface excluding its base. It is calculated using the formula \u03c0 * r * l, where r is the radius of the base and l is the slant height.\n\n    'slant height'\n    Explanation: The slant height of a cone is the distance from the top of the cone to any point on the edge of the base. It can be calculated using the Pythagorean theorem as sqrt(r^2 + h^2), where r is the radius and h is the height of the cone.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the `math` library to use mathematical functions.\n    2. Define the function `lateralsurface_cone` with parameters `r` (radius) and `h` (height).\n    3. Check if `r` and `h` are positive numbers; if not, raise a ValueError.\n    4. Calculate the slant height `l` using the formula `l = math.sqrt(r**2 + h**2)`.\n    5. Calculate the lateral surface area using the formula `area = math.pi * r * l`.\n    6. Return the calculated lateral surface area.\n\n# [edge case] \n    lateralsurface_cone(0, 10) = ValueError\n    Explanation: The radius cannot be zero or negative, so a ValueError should be raised.\n    \n    lateralsurface_cone(5, -12) = ValueError\n    Explanation: The height cannot be negative, so a ValueError should be raised.\n    \n    lateralsurface_cone(5, 0) = 0\n    Explanation: If the height is zero, the slant height equals the radius, and the lateral surface area will be zero.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if r <= 0 or h < 0:\n            raise ValueError(\"Radius and height must be positive numbers.\")\n        (other code)\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cone using the given radius and height. The formula for the lateral surface area of a cone is \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). The function should return a precise floating-point result.\nrequirement pool:\n- Implement the function to calculate the lateral surface area of a cone.\n- Ensure the function handles edge cases such as zero or negative inputs.\n- Optimize the function for performance with large input values.\n- Create a user interface for inputting radius and height.\n- Provide educational content explaining the formula used.\nWe will implement a simple Python function to calculate the lateral surface area of a cone using the formula \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). We will use the math library for accurate mathematical calculations. The function will handle edge cases such as zero or negative inputs by returning None or an appropriate message. The function will be optimized for performance to handle large input values efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area of a cone'\n    Explanation: The lateral surface area of a cone is the area of the cone's surface excluding its base. It is calculated using the formula \u03c0 * r * l, where r is the radius of the base and l is the slant height of the cone.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math library to use mathematical functions.\n    2. Define the function `lateralsurface_cone` with parameters `r` and `h`.\n    3. Calculate the slant height `l` using the formula `l = sqrt(r^2 + h^2)`.\n    4. Calculate the lateral surface area using the formula `\u03c0 * r * l`.\n    5. Return the calculated lateral surface area.\n    6. Handle edge cases where `r` or `h` are zero or negative by returning None or an appropriate message.\n\n# [edge case] \n    lateralsurface_cone(0, 12) = None\n    Explanation: The radius is zero, which means there is no cone, so the lateral surface area is undefined.\n    \n    lateralsurface_cone(5, 0) = None\n    Explanation: The height is zero, which means the cone is essentially a flat circle, so the lateral surface area is undefined.\n    \n    lateralsurface_cone(-5, 12) = None\n    Explanation: A negative radius is not physically meaningful for a cone, so the function should return None.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if r <= 0 or h <= 0:\n            return None\n        (other code)\n", "requirement analysis:\nThe function should accurately compute the lateral surface area of a cone using the formula \u03c0 * r * sqrt(r^2 + h^2). The inputs are radius and height, and the output should be a floating-point number representing the area.\nrequirement pool:\n- Implement the function to calculate lateral surface area of a cone\n- Ensure the function handles edge cases like zero or negative inputs\n- Optimize the function for performance\n- Create a user-friendly interface for input and output\n- Add additional geometric calculations as future enhancements\nWe will implement a simple function to calculate the lateral surface area of a cone using the formula \u03c0 * r * sqrt(r^2 + h^2). We will use the math library for mathematical operations to ensure precision and performance. The function will handle edge cases such as zero or negative inputs by returning a message indicating invalid input.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: The lateral surface area of a cone is the area of the cone's surface excluding its base. It is calculated using the formula \u03c0 * r * sqrt(r^2 + h^2), where r is the radius and h is the height.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math library to use mathematical functions.\n    2. Define the function lateralsurface_cone with parameters r and h.\n    3. Check if r or h are less than or equal to zero, and return an error message if so.\n    4. Calculate the lateral surface area using the formula \u03c0 * r * sqrt(r^2 + h^2).\n    5. Return the calculated lateral surface area.\n\n# [edge case] \n    lateralsurface_cone(0, 12) = \"Invalid input: radius and height must be positive numbers.\"\n    Explanation: The radius is zero, which is not valid for calculating the surface area, so an error message is returned.\n    \n    lateralsurface_cone(-5, 12) = \"Invalid input: radius and height must be positive numbers.\"\n    Explanation: The radius is negative, which is not valid for calculating the surface area, so an error message is returned.\n    \n    lateralsurface_cone(5, -12) = \"Invalid input: radius and height must be positive numbers.\"\n    Explanation: The height is negative, which is not valid for calculating the surface area, so an error message is returned.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if r <= 0 or h <= 0:\n            return \"Invalid input: radius and height must be positive numbers.\"\n        (other code)\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cone using the formula \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). The function should be efficient and return results with high precision.\nrequirement pool:\n- Implement the function to calculate the lateral surface area of a cone.\n- Ensure the function handles edge cases, such as zero or negative inputs.\n- Optimize the function for performance.\n- Create a simple user interface for input and output.\n- Add documentation and examples for user guidance.\nWe will implement a function named `lateralsurface_cone` that calculates the lateral surface area of a cone using the formula \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). We will use the `math` library for precise mathematical calculations. The function will handle edge cases such as zero or negative inputs by returning an appropriate message or value.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: In geometry, the lateral surface area of a cone is the area of the cone's surface excluding its base. It is calculated using the formula \u03c0 * r * l, where r is the radius of the base and l is the slant height.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the `math` library to use mathematical functions.\n    2. Define the function `lateralsurface_cone` with parameters `r` (radius) and `h` (height).\n    3. Calculate the slant height `l` using the formula `l = sqrt(r^2 + h^2)`.\n    4. Calculate the lateral surface area using the formula `\u03c0 * r * l`.\n    5. Return the calculated lateral surface area.\n\n# [edge case] \n    lateralsurface_cone(0, 12) = \"Invalid input\"\n    Explanation: A radius of zero is not valid for a cone, so the function should return an appropriate message.\n    \n    lateralsurface_cone(5, 0) = \"Invalid input\"\n    Explanation: A height of zero is not valid for a cone, so the function should return an appropriate message.\n    \n    lateralsurface_cone(-5, 12) = \"Invalid input\"\n    Explanation: A negative radius is not valid for a cone, so the function should return an appropriate message.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if r <= 0 or h <= 0:\n            return \"Invalid input\"\n        (other code)\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cone using the formula \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). The function should be efficient and return precise results.\nrequirement pool:\n- Implement the function to calculate the lateral surface area of a cone.\n- Ensure the function handles edge cases, such as zero or negative inputs.\n- Optimize the function for performance.\n- Create a simple user interface for input and output.\n- Provide documentation and examples for users.\nWe will implement a function named `lateralsurface_cone` that calculates the lateral surface area of a cone using the formula \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). We will use the `math` library for precise mathematical calculations. The function will handle edge cases such as zero or negative inputs by returning an appropriate message or value.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area of a cone'\n    Explanation: The lateral surface area of a cone is the area of the cone's surface excluding its base. It is calculated using the formula \u03c0 * r * l, where r is the radius of the base and l is the slant height.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the `math` library to use mathematical functions.\n    2. Define the function `lateralsurface_cone` with parameters `r` and `h`.\n    3. Calculate the slant height `l` using the formula `sqrt(r^2 + h^2)`.\n    4. Calculate the lateral surface area using the formula `\u03c0 * r * l`.\n    5. Return the calculated lateral surface area.\n\n# [edge case] \n    lateralsurface_cone(0, 12) = \"Invalid input: radius must be greater than zero.\"\n    Explanation: A cone with a radius of zero does not have a valid lateral surface area.\n    \n    lateralsurface_cone(5, 0) = 0.0\n    Explanation: A cone with a height of zero results in a slant height equal to the radius, and thus the lateral surface area is zero.\n    \n    lateralsurface_cone(-5, 12) = \"Invalid input: radius must be greater than zero.\"\n    Explanation: Negative radius is not physically meaningful for a cone, so an error message is returned.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        import math\n        \n        def lateralsurface_cone(r, h):\n            if r <= 0:\n                return \"Invalid input: radius must be greater than zero.\"\n            if h < 0:\n                return \"Invalid input: height must be non-negative.\"\n            \n            l = math.sqrt(r**2 + h**2)\n            lateral_surface_area = math.pi * r * l\n            return lateral_surface_area\n", "requirement analysis:\nThe function should accurately compute the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2). It should handle various input types and ensure precision in floating-point calculations.\nrequirement pool:\n- Implement the main function to calculate lateral surface area.\n- Ensure the function handles edge cases like zero or negative values.\n- Optimize the function for performance.\n- Provide documentation for the function usage.\n- Include unit tests for validation.\nWe will implement a function to calculate the lateral surface area of a cone using the formula \u03c0 * r * sqrt(r^2 + h^2). We will use the math library for precise calculations and handle edge cases such as zero or negative values by returning an error message or zero as appropriate.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: The lateral surface area of a cone is the area of the cone's surface excluding its base. It is calculated using the formula \u03c0 * r * sqrt(r^2 + h^2), where r is the radius and h is the height.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math library to use mathematical functions.\n    2. Define the function lateralsurface_cone with parameters r and h.\n    3. Check if r or h are zero or negative, and handle these cases appropriately.\n    4. Calculate the lateral surface area using the formula \u03c0 * r * sqrt(r^2 + h^2).\n    5. Return the calculated lateral surface area.\n\n# [edge case] \n    lateralsurface_cone(0, 12) = \"Error: Radius must be positive\"\n    Explanation: A cone with a radius of zero does not exist, so an error message is returned.\n    \n    lateralsurface_cone(5, 0) = \"Error: Height must be positive\"\n    Explanation: A cone with a height of zero does not exist, so an error message is returned.\n    \n    lateralsurface_cone(-5, 12) = \"Error: Radius must be positive\"\n    Explanation: A negative radius is not valid for a cone, so an error message is returned.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if r <= 0:\n            return \"Error: Radius must be positive\"\n        if h <= 0:\n            return \"Error: Height must be positive\"\n        (other code)\n", "requirement analysis:\nThe function should accurately calculate the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2). It should handle various input types and sizes efficiently.\nrequirement pool:\n- Implement the main function to calculate lateral surface area\n- Ensure the function handles edge cases like zero or negative values\n- Provide documentation explaining the formula and usage\n- Optimize the function for performance with large inputs\n- Include unit tests to verify accuracy\nWe will implement a function to calculate the lateral surface area of a cone using the formula: \u03c0 * r * sqrt(r^2 + h^2). The function will handle edge cases such as zero or negative values for radius and height by returning an error message, as these values are not physically meaningful. We will use the math library for accurate mathematical calculations and ensure the function is optimized for performance with large inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area of a cone'\n    Explanation: The lateral surface area of a cone is the area of the cone's surface excluding its base. It can be calculated using the formula: \u03c0 * r * sqrt(r^2 + h^2), where r is the radius of the base and h is the height of the cone.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math library to use mathematical functions.\n    2. Define the function `lateralsurface_cone` with parameters `r` and `h`.\n    3. Check if `r` or `h` are less than or equal to zero, and return an error message if so.\n    4. Calculate the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2).\n    5. Return the calculated lateral surface area.\n\n# [edge case] \n    lateralsurface_cone(0, 10) = \"Error: Radius and height must be positive numbers.\"\n    Explanation: A radius of zero is not physically meaningful for a cone, so an error message is returned.\n    \n    lateralsurface_cone(5, -12) = \"Error: Radius and height must be positive numbers.\"\n    Explanation: A negative height is not physically meaningful for a cone, so an error message is returned.\n    \n    lateralsurface_cone(5, 0) = \"Error: Radius and height must be positive numbers.\"\n    Explanation: A height of zero is not physically meaningful for a cone, so an error message is returned.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if r <= 0 or h <= 0:\n            return \"Error: Radius and height must be positive numbers.\"\n        (other code)\n", "requirement analysis:\nThe function should accurately calculate the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2). It must handle various input types and edge cases, ensuring robustness and efficiency.\nrequirement pool:\n- Implement the main function to calculate lateral surface area\n- Handle edge cases and input validation\n- Optimize the function for performance\n- Provide documentation and examples\n- Test the function with different scenarios\nWe will implement a function named `lateralsurface_cone` that calculates the lateral surface area of a cone using the formula: \u03c0 * r * sqrt(r^2 + h^2). We will use the `math` library for mathematical operations. The function will include input validation to handle edge cases such as zero or negative values for radius and height. If invalid inputs are provided, the function will return an appropriate error message.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: The lateral surface area of a cone is the area of the cone's side, excluding the base. It is calculated using the formula: \u03c0 * r * sqrt(r^2 + h^2), where r is the radius and h is the height.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the `math` library to access mathematical functions.\n    2. Define the function `lateralsurface_cone` with parameters `r` and `h`.\n    3. Validate the inputs to ensure `r` and `h` are positive numbers.\n    4. If inputs are invalid, return an error message.\n    5. Calculate the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2).\n    6. Return the calculated lateral surface area.\n\n# [edge case] \n    lateralsurface_cone(0, 12) = \"Error: Radius must be greater than zero.\"\n    Explanation: A radius of zero is invalid for calculating the lateral surface area, so an error message is returned.\n    \n    lateralsurface_cone(5, 0) = \"Error: Height must be greater than zero.\"\n    Explanation: A height of zero is invalid for calculating the lateral surface area, so an error message is returned.\n    \n    lateralsurface_cone(-5, 12) = \"Error: Radius must be greater than zero.\"\n    Explanation: A negative radius is invalid for calculating the lateral surface area, so an error message is returned.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if r <= 0:\n            return \"Error: Radius must be greater than zero.\"\n        if h <= 0:\n            return \"Error: Height must be greater than zero.\"\n        (other code)\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cone using the formula \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). The function should be precise and handle floating-point arithmetic accurately.\nrequirement pool:\n- Implement the function to calculate lateral surface area of a cone.\n- Ensure the function handles edge cases like zero or negative inputs gracefully.\n- Optimize the function for performance to handle large inputs.\n- Create a simple UI for input and output display.\n- Include documentation and examples for user guidance.\nWe will implement a simple function using Python's math library to calculate the lateral surface area of a cone. The function will take radius and height as inputs, calculate the slant height using the Pythagorean theorem, and then compute the lateral surface area using the formula \u03c0 * r * l. The function will handle edge cases like zero or negative inputs by returning an error message.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: The lateral surface area of a cone is the area of the cone's side, excluding the base. It is calculated using the formula \u03c0 * r * l, where r is the radius and l is the slant height.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math library to access the constant \u03c0.\n    2. Define the function lateralsurface_cone with parameters r and h.\n    3. Calculate the slant height l using the Pythagorean theorem: l = sqrt(r^2 + h^2).\n    4. Compute the lateral surface area using the formula: area = \u03c0 * r * l.\n    5. Return the computed area.\n\n# [edge case] \n    lateralsurface_cone(0, 12) = \"Error: Radius must be greater than zero.\"\n    Explanation: A radius of zero is not valid for a cone, so an error message should be returned.\n    \n    lateralsurface_cone(5, 0) = \"Error: Height must be greater than zero.\"\n    Explanation: A height of zero is not valid for a cone, so an error message should be returned.\n    \n    lateralsurface_cone(-5, 12) = \"Error: Radius must be greater than zero.\"\n    Explanation: A negative radius is not valid for a cone, so an error message should be returned.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if r <= 0:\n            return \"Error: Radius must be greater than zero.\"\n        if h <= 0:\n            return \"Error: Height must be greater than zero.\"\n        (other code)\n"], "test": ["def check(lateralsurface_cone):\n\tassert lateralsurface_cone(5,12)==204.20352248333654", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10,15)==566.3586699569488", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(19,17)==1521.8090132193388", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(4, 10) == 135.3439535717124", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(8, 11) == 341.84223862609196", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10, 14) == 540.5000372546194", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10, 17) == 619.6189241803191", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(2, 17) == 107.55080826324239", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 11) == 34.700025027842585", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10, 17) == 619.6189241803191", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(3, 12) == 116.5780650907367", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 15) == 47.22849346153437", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 14) == 470.5787011194216", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(7, 8) == 233.76911594312833", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 12) == 252.89333031746617", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10, 13) == 515.25950586991", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 7) == 322.3770065365564", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 14) == 470.5787011194216", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 15) == 494.59884217959996", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10, 9) == 422.6580647044575", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(5, 17) == 278.3458182702795", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 15) == 304.52389553635294", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(4, 12) == 158.95341225273762", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 9) == 203.88912118450162", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(8, 16) == 449.5881427866065", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 11) == 401.85378834922545", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(8, 8) == 284.34450804213543", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 10) == 31.572615420804546", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 17) == 339.8152019741693", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 14) == 44.09435413989645", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(5, 7) == 135.12500931365486", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 13) == 40.9613567668991", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 10) == 31.572615420804546", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 13) == 40.9613567668991", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(4, 7) == 101.31331885360844", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(8, 9) == 302.63828052992443", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(7, 10) == 268.43617813616964", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 16) == 935.0764637725133", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 12) == 252.89333031746617", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 17) == 339.8152019741693", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 14) == 287.1078820894653", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 20) == 393.59028275542903", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 18) == 357.6451775686596", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(11, 19) == 758.6929997570384", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(13, 15) == 810.6648374334094", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 11) == 876.5550197362436", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(11, 12) == 562.5556551319436", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(11, 20) == 788.7900424378303", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 12) == 810.9934878213232", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 18) == 569.0099932142988", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 12) == 810.9934878213232", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 13) == 447.0564719608245", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 18) == 569.0099932142988", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(12, 16) == 753.9822368615503", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10, 11) == 467.03132364336636", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 18) == 1002.9506870026199", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 10) == 849.5380049354233", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 10) == 756.7000521564672", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 17) == 968.6096191797571", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(11, 12) == 562.5556551319436", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 10) == 756.7000521564672", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(13, 16) == 841.9526923219875", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(5, 13) == 218.78661143973912", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(12, 11) == 613.6970783257566", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(12, 11) == 613.6970783257566", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(8, 20) == 541.3758142868496", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 16) == 519.0477736553122", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(7, 20) == 465.98408387880266", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(13, 19) == 940.2236256367811", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(19, 22) == 1735.1292385670592", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(22, 16) == 1880.1323124435057", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(22, 19) == 2009.0970130776475", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(24, 13) == 2057.9710009121764", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 16) == 935.0764637725133", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(22, 18) == 1964.6185208184352", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(19, 15) == 1444.9482110556244", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(21, 19) == 1868.3418915675168", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 12) == 905.2203628953802", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 19) == 1140.748587675493", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(21, 16) == 1741.7489463162146", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(17, 15) == 1210.8221402684294", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(22, 12) == 1732.0178974017306", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(22, 22) == 2150.355342068649", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(17, 16) == 1246.8007223263787", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(24, 16) == 2174.8172926346833", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(16, 20) == 1287.4245161178742", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(17, 12) == 1111.3292428165107", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(23, 12) == 1874.4991197817697", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(19, 17) == 1521.8090132193388", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(20, 19) == 1733.2938526665353", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(16, 15) == 1102.4080948235726", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(24, 22) == 2454.7883133030264", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 22) == 1254.7703543213713", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(17, 20) == 1401.8721403713373", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(16, 14) == 1068.6588157400154", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 19) == 1140.748587675493", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(19, 17) == 1521.8090132193388", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(20, 15) == 1570.7963267948965", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(17, 17) == 1283.9931691277677", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(17, 21) == 1442.9797089695412", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(24, 13) == 2057.9710009121764", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 16) == 1033.5075888970994"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone, or an error message if inputs are invalid.\n    \"\"\"\n    # Check for edge cases where radius or height is zero or negative\n    if r <= 0:\n        return \"Error: Radius must be greater than zero.\"\n    if h <= 0:\n        return \"Error: Height must be greater than zero.\"\n\n    # Calculate the slant height using the Pythagorean theorem\n    slant_height = math.sqrt(r**2 + h**2)\n\n    # Compute the lateral surface area using the formula \u03c0 * r * l\n    lateral_surface_area = math.pi * r * slant_height\n\n    return lateral_surface_area\n", "passed": true, "pass": true, "pass_num": 10, "round": 831, "mutate_method": "condense_two2one", "parent_index": 221}
