{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 728, "prompt": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n]. Ensure your function handles edge cases. Make sure it can handle situations such as empty lists or varying list lengths gracefully.", "code": "def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list", "test_imports": [], "test_list": ["assert sum_list([10,20,30],[15,25,35])==[25,45,65]", "assert sum_list([1,2,3],[5,6,7])==[6,8,10]", "assert sum_list([15,20,30],[15,45,75])==[30,65,105]", "assert sum_list([11, 19, 31], [20, 29, 39]) == [31, 48, 70]", "assert sum_list([15, 19, 31], [18, 26, 30]) == [33, 45, 61]", "assert sum_list([11, 23, 29], [15, 20, 40]) == [26, 43, 69]", "assert sum_list([11, 25, 35], [13, 27, 32]) == [24, 52, 67]", "assert sum_list([6, 20, 25], [11, 29, 36]) == [17, 49, 61]", "assert sum_list([10, 18, 26], [11, 27, 30]) == [21, 45, 56]", "assert sum_list([6, 16, 31], [19, 21, 36]) == [25, 37, 67]", "assert sum_list([8, 17, 30], [17, 30, 40]) == [25, 47, 70]", "assert sum_list([12, 22, 26], [17, 27, 32]) == [29, 49, 58]", "assert sum_list([12, 20, 34], [14, 22, 37]) == [26, 42, 71]", "assert sum_list([8, 21, 26], [15, 23, 36]) == [23, 44, 62]", "assert sum_list([5, 19, 27], [13, 22, 39]) == [18, 41, 66]", "assert sum_list([6, 15, 25], [15, 28, 32]) == [21, 43, 57]", "assert sum_list([8, 22, 27], [11, 28, 35]) == [19, 50, 62]", "assert sum_list([5, 25, 33], [13, 30, 38]) == [18, 55, 71]", "assert sum_list([12, 18, 34], [17, 23, 36]) == [29, 41, 70]", "assert sum_list([5, 20, 30], [20, 28, 39]) == [25, 48, 69]", "assert sum_list([12, 21, 30], [15, 22, 36]) == [27, 43, 66]", "assert sum_list([14, 15, 27], [18, 25, 36]) == [32, 40, 63]", "assert sum_list([7, 15, 33], [16, 30, 35]) == [23, 45, 68]", "assert sum_list([7, 22, 33], [12, 27, 30]) == [19, 49, 63]", "assert sum_list([13, 25, 35], [18, 21, 35]) == [31, 46, 70]", "assert sum_list([9, 23, 35], [11, 28, 35]) == [20, 51, 70]", "assert sum_list([14, 24, 27], [11, 26, 37]) == [25, 50, 64]", "assert sum_list([9, 24, 34], [20, 23, 35]) == [29, 47, 69]", "assert sum_list([11, 24, 33], [14, 29, 31]) == [25, 53, 64]", "assert sum_list([13, 24, 28], [10, 25, 34]) == [23, 49, 62]", "assert sum_list([15, 21, 28], [10, 20, 30]) == [25, 41, 58]", "assert sum_list([9, 17, 28], [17, 22, 32]) == [26, 39, 60]", "assert sum_list([7, 25, 28], [13, 29, 31]) == [20, 54, 59]", "assert sum_list([6, 25, 26], [12, 26, 34]) == [18, 51, 60]", "assert sum_list([9, 21, 34], [10, 26, 40]) == [19, 47, 74]", "assert sum_list([13, 18, 25], [12, 26, 39]) == [25, 44, 64]", "assert sum_list([2, 1, 2], [10, 8, 6]) == [12, 9, 8]", "assert sum_list([1, 7, 5], [1, 9, 2]) == [2, 16, 7]", "assert sum_list([1, 2, 6], [4, 11, 2]) == [5, 13, 8]", "assert sum_list([4, 6, 4], [1, 6, 6]) == [5, 12, 10]", "assert sum_list([6, 3, 2], [3, 8, 7]) == [9, 11, 9]", "assert sum_list([5, 3, 2], [10, 4, 7]) == [15, 7, 9]", "assert sum_list([2, 5, 5], [7, 10, 3]) == [9, 15, 8]", "assert sum_list([6, 7, 4], [9, 5, 8]) == [15, 12, 12]", "assert sum_list([4, 3, 1], [8, 11, 7]) == [12, 14, 8]", "assert sum_list([1, 7, 8], [1, 10, 4]) == [2, 17, 12]", "assert sum_list([5, 2, 1], [2, 9, 9]) == [7, 11, 10]", "assert sum_list([1, 5, 2], [2, 4, 9]) == [3, 9, 11]", "assert sum_list([1, 4, 2], [8, 5, 7]) == [9, 9, 9]", "assert sum_list([4, 4, 1], [4, 5, 5]) == [8, 9, 6]", "assert sum_list([6, 2, 4], [5, 10, 12]) == [11, 12, 16]", "assert sum_list([3, 2, 6], [7, 1, 4]) == [10, 3, 10]", "assert sum_list([2, 7, 3], [9, 5, 2]) == [11, 12, 5]", "assert sum_list([2, 3, 4], [9, 6, 12]) == [11, 9, 16]", "assert sum_list([2, 6, 6], [1, 3, 10]) == [3, 9, 16]", "assert sum_list([4, 7, 7], [6, 7, 8]) == [10, 14, 15]", "assert sum_list([1, 3, 7], [10, 8, 6]) == [11, 11, 13]", "assert sum_list([1, 3, 6], [3, 1, 6]) == [4, 4, 12]", "assert sum_list([2, 7, 1], [9, 4, 4]) == [11, 11, 5]", "assert sum_list([4, 2, 1], [8, 2, 5]) == [12, 4, 6]", "assert sum_list([6, 2, 5], [3, 4, 10]) == [9, 6, 15]", "assert sum_list([5, 3, 2], [5, 1, 4]) == [10, 4, 6]", "assert sum_list([4, 5, 5], [9, 10, 8]) == [13, 15, 13]", "assert sum_list([3, 4, 3], [3, 5, 11]) == [6, 9, 14]", "assert sum_list([1, 5, 2], [5, 1, 11]) == [6, 6, 13]", "assert sum_list([2, 3, 8], [3, 7, 3]) == [5, 10, 11]", "assert sum_list([3, 5, 7], [5, 8, 8]) == [8, 13, 15]", "assert sum_list([4, 3, 6], [8, 11, 11]) == [12, 14, 17]", "assert sum_list([3, 7, 8], [6, 9, 2]) == [9, 16, 10]", "assert sum_list([14, 18, 32], [14, 49, 80]) == [28, 67, 112]", "assert sum_list([15, 21, 33], [13, 47, 78]) == [28, 68, 111]", "assert sum_list([14, 15, 27], [17, 49, 79]) == [31, 64, 106]", "assert sum_list([10, 20, 33], [19, 41, 75]) == [29, 61, 108]", "assert sum_list([19, 21, 32], [11, 48, 80]) == [30, 69, 112]", "assert sum_list([18, 18, 28], [10, 50, 76]) == [28, 68, 104]", "assert sum_list([19, 17, 25], [19, 44, 79]) == [38, 61, 104]", "assert sum_list([16, 21, 26], [15, 44, 72]) == [31, 65, 98]", "assert sum_list([11, 19, 32], [10, 44, 77]) == [21, 63, 109]", "assert sum_list([20, 21, 34], [14, 50, 74]) == [34, 71, 108]", "assert sum_list([18, 23, 34], [10, 41, 72]) == [28, 64, 106]", "assert sum_list([17, 23, 28], [20, 49, 71]) == [37, 72, 99]", "assert sum_list([16, 17, 33], [12, 41, 74]) == [28, 58, 107]", "assert sum_list([13, 16, 29], [19, 40, 70]) == [32, 56, 99]", "assert sum_list([19, 18, 29], [12, 46, 79]) == [31, 64, 108]", "assert sum_list([20, 16, 33], [13, 47, 80]) == [33, 63, 113]", "assert sum_list([16, 24, 34], [17, 41, 76]) == [33, 65, 110]", "assert sum_list([19, 24, 34], [11, 50, 80]) == [30, 74, 114]", "assert sum_list([14, 24, 28], [18, 43, 76]) == [32, 67, 104]", "assert sum_list([11, 15, 29], [19, 46, 80]) == [30, 61, 109]", "assert sum_list([14, 18, 31], [11, 41, 78]) == [25, 59, 109]", "assert sum_list([16, 18, 32], [13, 46, 72]) == [29, 64, 104]", "assert sum_list([13, 23, 30], [19, 41, 78]) == [32, 64, 108]", "assert sum_list([16, 18, 33], [17, 44, 80]) == [33, 62, 113]", "assert sum_list([13, 22, 33], [12, 48, 77]) == [25, 70, 110]", "assert sum_list([13, 18, 29], [14, 50, 76]) == [27, 68, 105]", "assert sum_list([15, 18, 29], [12, 43, 80]) == [27, 61, 109]", "assert sum_list([12, 16, 35], [11, 46, 74]) == [23, 62, 109]", "assert sum_list([14, 16, 32], [18, 40, 75]) == [32, 56, 107]", "assert sum_list([14, 21, 29], [10, 41, 80]) == [24, 62, 109]", "assert sum_list([13, 18, 25], [16, 45, 75]) == [29, 63, 100]", "assert sum_list([18, 25, 35], [19, 47, 79]) == [37, 72, 114]", "assert sum_list([18, 25, 29], [16, 48, 73]) == [34, 73, 102]"], "entry_point": "sum_list", "repair_prompt": ["Write a function sum_list takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n]. Ensure your function handles edge cases. Make sure it can handle situations such as empty lists or varying list lengths gracefully.\nsum_list([10,20,30],[15,25,35])==[25,45,65]\n", "Write a function sum_list takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n]. Ensure your function handles edge cases. Make sure it can handle various scenarios appropriately, such as when lists are empty. It should also gracefully handle situations where the lengths of the lists differ.\nsum_list([10,20,30],[15,25,35])==[25,45,65]\n", "Write a function sum_list takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n]. Ensure your function handles edge cases gracefully, including situations such as empty lists or varying list lengths.\nsum_list([10,20,30],[15,25,35])==[25,45,65]\n"], "completions": ["from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Sums corresponding elements of two lists.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A list containing the sum of corresponding elements from list1 and list2.\n\n    Raises:\n    TypeError: If either input is not a list.\n    \"\"\"\n    # Check if both inputs are lists; if not, raise a TypeError.\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Both inputs must be lists.\")\n\n    # Determine the length of the shorter list to avoid index errors.\n    min_length = min(len(list1), len(list2))\n\n    # Initialize an empty list to store the results.\n    result = []\n\n    # Iterate over the range of the shorter list's length.\n    for i in range(min_length):\n        # For each index, add the elements from both lists and append the result to the results list.\n        result.append(list1[i] + list2[i])\n\n    # Return the results list.\n    return result\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Takes two lists of numbers and returns a list where each element is the sum of elements at the same position in the input lists.\n    If the lists are of different lengths, the shorter list is padded with zeros.\n\n    Parameters:\n    list1 (list): First list of numbers.\n    list2 (list): Second list of numbers.\n\n    Returns:\n    list: A list containing the sums of corresponding elements.\n\n    Raises:\n    TypeError: If either input is not a list.\n    \"\"\"\n    # Check if both inputs are lists\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Both inputs must be lists.\")\n\n    # Determine the length of the longer list\n    max_length = max(len(list1), len(list2))\n\n    # Pad the shorter list with zeros\n    list1.extend([0] * (max_length - len(list1)))\n    list2.extend([0] * (max_length - len(list2)))\n\n    # Sum corresponding elements and return the result\n    return [a + b for a, b in zip(list1, list2)]\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Sums two lists element-wise.\n\n    Parameters:\n    list1 (list): First list of numbers.\n    list2 (list): Second list of numbers.\n\n    Returns:\n    list: A list containing the element-wise sum of the two input lists.\n    \"\"\"\n    # Determine the length of the shorter list\n    min_length = min(len(list1), len(list2))\n    \n    # Use list comprehension to sum elements up to the length of the shorter list\n    result = [list1[i] + list2[i] for i in range(min_length)]\n    \n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n    print(sum_list([], []))                      # Output: []\n    print(sum_list([1, 2], [1, 2, 3]))           # Output: [2, 4]\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Sums two lists element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise sums of the input lists.\n\n    Raises:\n    ValueError: If the input lists have different lengths.\n    \"\"\"\n    # Check if both lists are empty\n    if not list1 and not list2:\n        return []\n\n    # Check if the lengths of the two lists are equal\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length.\")\n\n    # Initialize an empty list to store the results\n    result = []\n\n    # Iterate over the elements of both lists simultaneously\n    for elem1, elem2 in zip(list1, list2):\n        # Calculate the sum of each pair of elements and append it to the result list\n        result.append(elem1 + elem2)\n\n    # Return the result list\n    return result\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"Sums elements of two lists, padding the shorter list with zeros if necessary.\n\n    Args:\n        list1 (list[int]): The first list of integers.\n        list2 (list[int]): The second list of integers.\n\n    Returns:\n        list[int]: A new list where each element is the sum of elements at the same position in the input lists.\n\n    Raises:\n        ValueError: If inputs are not lists of integers.\n    \"\"\"\n    # Validate input types\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise ValueError(\"Both inputs must be lists.\")\n    if not all(isinstance(x, int) for x in list1) or not all(isinstance(x, int) for x in list2):\n        raise ValueError(\"All elements in the input lists must be integers.\")\n\n    # Check if both lists are empty\n    if not list1 and not list2:\n        return []\n\n    # Determine the maximum length of the two lists\n    max_length = max(len(list1), len(list2))\n\n    # Pad the shorter list with zeros\n    list1 += [0] * (max_length - len(list1))\n    list2 += [0] * (max_length - len(list2))\n\n    # Compute the element-wise sum\n    return [list1[i] + list2[i] for i in range(max_length)]\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Sums two lists element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise sums of the input lists.\n\n    Raises:\n    ValueError: If the input lists have different lengths.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length.\")\n\n    result = []\n    for elem1, elem2 in zip(list1, list2):\n        result.append(elem1 + elem2)\n\n    return result\n\n# Example usage:\n# print(sum_list([10, 20, 30], [15, 25, 35]))  # Output: [25, 45, 65]\n# print(sum_list([], []))  # Output: []\n# print(sum_list([1, 2], [1, 2, 3]))  # Raises ValueError: Lists must be of the same length.\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Takes two lists of integers and returns a new list with summed elements.\n    Handles edge cases such as empty lists and varying lengths.\n    \n    Args:\n        list1 (list[int]): The first list of integers.\n        list2 (list[int]): The second list of integers.\n    \n    Returns:\n        list[int]: A list containing the sums of corresponding elements from the input lists.\n    \"\"\"\n    return [a + b for a, b in zip(list1, list2)]\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(sum_list([10, 20, 30], [15, 25, 35]))  # Expected output: [25, 45, 65]\n    print(sum_list([], []))                      # Expected output: []\n    print(sum_list([1, 2], [3]))                 # Expected output: [4]\n    print(sum_list([1, 2, 3], []))               # Expected output: []\n    print(sum_list([1, 2], [3, 4, 5]))           # Expected output: [4, 6]\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Takes two lists of integers and returns a list where each element is the sum of the corresponding elements from the input lists.\n    If the lists are of different lengths, sums up to the length of the shorter list.\n    Handles empty lists gracefully.\n\n    Parameters:\n    list1 (list[int]): First list of integers.\n    list2 (list[int]): Second list of integers.\n\n    Returns:\n    list[int]: A list containing the sums of corresponding elements.\n    \"\"\"\n    # Use zip to pair elements from both lists\n    paired_elements = zip(list1, list2)\n    \n    # Sum paired elements and return the result as a list\n    summed_list = [a + b for a, b in paired_elements]\n    \n    return summed_list\n\n# Example usage:\n# sum_list([1, 2, 3], [4, 5]) should return [5, 7]\n# sum_list([], []) should return []\n# sum_list([1, 2], []) should return []\n", "from typing import List\n## main.py\n\nfrom itertools import zip_longest\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Sums two lists element-wise, handling varying lengths by treating missing elements as zero.\n\n    Parameters:\n    list1 (list[int]): The first list of integers.\n    list2 (list[int]): The second list of integers.\n\n    Returns:\n    list[int]: A new list containing the element-wise sums.\n    \"\"\"\n    return [a + b for a, b in zip_longest(list1, list2, fillvalue=0)]\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Sums corresponding elements of two lists and returns a new list.\n    Handles empty lists and lists of different lengths by summing up to the length of the shorter list.\n    \n    Parameters:\n    list1 (list[int]): The first list of integers.\n    list2 (list[int]): The second list of integers.\n    \n    Returns:\n    list[int]: A list containing the sum of corresponding elements.\n    \"\"\"\n    # Use zip to pair elements from both lists and sum them\n    summed_list = [a + b for a, b in zip(list1, list2)]\n    return summed_list\n\n# Example usage:\n# result = sum_list([10, 20, 30], [15, 25, 35])\n# print(result)  # Output: [25, 45, 65]\n\n# result = sum_list([], [])\n# print(result)  # Output: []\n\n# result = sum_list([1, 2, 3], [4, 5])\n# print(result)  # Output: [5, 7]\n"], "plans": ["requirement analysis:\nThe function should efficiently sum elements of two lists, handling edge cases such as empty lists and varying lengths. It should provide clear error messages for invalid inputs and optimize performance for large lists.\nrequirement pool:\n- Handle empty lists gracefully\n- Sum lists of varying lengths\n- Provide informative error messages\n- Optimize performance for large lists\n- Ensure compatibility with Python 3.x\nWe will implement a function named `sum_list` that takes two lists as input and returns a list containing the sum of corresponding elements. The function will handle edge cases such as empty lists and lists of different lengths by summing up to the length of the shorter list. If the input is not a list, it will raise a TypeError with a clear error message. We will use Python's built-in capabilities to ensure compatibility and performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of corresponding elements'\n    Explanation: This means that for each index in the lists, the elements at that index from both lists should be added together to form a new list.\n\n# [phrase showing quantity relationship]\n    'two lists': indicates that there are two input lists to be processed.\n    'corresponding elements': means elements at the same index in both lists should be summed.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if both inputs are lists; if not, raise a TypeError.\n    2. Determine the length of the shorter list to avoid index errors.\n    3. Initialize an empty list to store the results.\n    4. Iterate over the range of the shorter list's length.\n    5. For each index, add the elements from both lists and append the result to the results list.\n    6. Return the results list.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = []\n    Explanation: The second list is empty, so no corresponding elements can be summed, resulting in an empty list.\n    \n    sum_list([1, 2], [3, 4, 5]) = [4, 6]\n    Explanation: The function sums up to the length of the shorter list, which is 2 in this case.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not isinstance(list1, list) or not isinstance(list2, list):\n            raise TypeError(\"Both inputs must be lists.\")\n        min_length = min(len(list1), len(list2))\n        result = []\n        for i in range(min_length):\n            result.append(list1[i] + list2[i])\n        return result\n", "requirement analysis:\nThe function should efficiently sum elements of two lists, handling edge cases such as empty lists and varying lengths. It should provide clear error messages for invalid inputs and maintain performance with large lists.\nrequirement pool:\n- Handle empty lists gracefully\n- Sum lists of varying lengths\n- Optimize performance for large lists\n- Provide clear error messages for invalid inputs\n- Ensure compatibility with different data types\nWe will implement a function that sums elements of two lists, handling edge cases such as empty lists and varying lengths. The function will pad shorter lists with zeros to match the length of the longer list. We will use Python's built-in capabilities to ensure efficient performance and provide clear error messages for invalid inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of lists'\n    Explanation: The requirement is to sum corresponding elements from two lists and return a new list containing these sums.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship, but the concept of summing elements implies a one-to-one correspondence between elements of the two lists.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if both input lists are valid (i.e., they are lists).\n    2. Determine the length of the longer list.\n    3. Pad the shorter list with zeros to match the length of the longer list.\n    4. Iterate through both lists simultaneously, summing corresponding elements.\n    5. Return the resulting list of sums.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = [1, 2, 3]\n    Explanation: The second list is empty, so it is padded with zeros, resulting in the sum being the first list itself.\n    \n    sum_list([], [4, 5, 6]) = [4, 5, 6]\n    Explanation: The first list is empty, so it is padded with zeros, resulting in the sum being the second list itself.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def sum_list(list1, list2):\n            if not isinstance(list1, list) or not isinstance(list2, list):\n                raise ValueError(\"Both inputs must be lists.\")\n            \n            max_length = max(len(list1), len(list2))\n            list1.extend([0] * (max_length - len(list1)))\n            list2.extend([0] * (max_length - len(list2)))\n            \n            return [a + b for a, b in zip(list1, list2)]\n", "requirement analysis:\nThe function should efficiently sum elements of two lists, handling cases where lists are of different lengths by summing up to the length of the shorter list and ignoring extra elements in the longer list. It should return an empty list if both input lists are empty.\nrequirement pool:\n- Implement the main function to sum two lists.\n- Ensure the function handles empty lists gracefully.\n- Optimize performance for large lists.\n- Handle varying list lengths without errors.\n- Provide clear documentation for the function.\nWe will implement a function that sums two lists element-wise. If the lists are of different lengths, the function will sum elements up to the length of the shorter list and ignore extra elements in the longer list. We will use Python's built-in list comprehension for simplicity and efficiency. The function will also handle edge cases such as empty lists gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'element-wise sum'\n    Explanation: The requirement specifies that each element from the first list should be added to the corresponding element from the second list, resulting in a new list of summed elements.\n\n# [phrase showing quantity relationship]\n    'two lists': indicates that there are two lists involved in the operation.\n    'element-wise': implies a one-to-one correspondence between elements of the two lists for the sum operation.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Check if both lists are non-empty.\n    - Use list comprehension to iterate over the range of the shorter list's length.\n    - Sum corresponding elements from both lists.\n    - Return the resulting list.\n\n# [edge case]\n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = []\n    Explanation: The second list is empty, so no element-wise sum can be performed, resulting in an empty list.\n    \n    sum_list([1, 2], [3, 4, 5]) = [4, 6]\n    Explanation: The first list is shorter, so only the first two elements of the second list are summed with the first list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of iterating up to the length of the shorter list inherently handles these cases.\n", "requirement analysis:\nThe function should efficiently sum elements of two lists, handling cases where lists are empty or of different lengths. It should provide clear error messages or handle mismatched lengths gracefully.\nrequirement pool:\n- Handle empty lists without errors.\n- Sum elements of lists with equal lengths.\n- Provide clear error messages for mismatched list lengths.\n- Optimize performance for large lists.\n- Support for lists containing non-numeric elements.\nWe will implement a function that sums two lists element-wise. The function will handle edge cases such as empty lists and lists of different lengths. If the lists are of different lengths, the function will return an error message. We will use Python's built-in capabilities to achieve this, ensuring simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'element-wise sum'\n    Explanation: This means that each element from the first list is added to the corresponding element from the second list, resulting in a new list of sums.\n\n# [phrase showing quantity relationship]\n    No specific phrases showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n    1. Check if both lists are empty. If so, return an empty list.\n    2. Check if the lengths of the two lists are equal. If not, return an error message indicating that the lists must be of the same length.\n    3. Initialize an empty list to store the results.\n    4. Iterate over the elements of both lists simultaneously.\n    5. For each pair of elements, calculate their sum and append it to the result list.\n    6. Return the result list.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = \"Error: Lists must be of the same length.\"\n    Explanation: The lists have different lengths, so an error message is returned.\n    \n    sum_list([], [4, 5, 6]) = \"Error: Lists must be of the same length.\"\n    Explanation: The lists have different lengths, so an error message is returned.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(list1) != len(list2):\n            return \"Error: Lists must be of the same length.\"\n        elif not list1 and not list2:\n            return []\n        (other code)\n", "requirement analysis:\nThe function should efficiently sum elements of two lists, handling edge cases such as empty lists and differing lengths. It should provide clear error messages for invalid inputs and optimize performance for large lists.\nrequirement pool:\n- Handle empty lists gracefully\n- Manage lists of differing lengths\n- Optimize performance for large lists\n- Provide clear error messages for invalid inputs\n- Ensure compatibility with other Python list operations\nWe will implement a function that sums elements of two lists, handling edge cases such as empty lists and differing lengths. The function will use Python's built-in list comprehension for simplicity and efficiency. If the lists are of different lengths, the function will pad the shorter list with zeros to match the length of the longer list, ensuring graceful handling without errors. We will also include error handling to provide clear messages for invalid inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum elements of two lists'\n    Explanation: The requirement is to add corresponding elements from two lists and return a new list with these sums.\n\n# [phrase showing quantity relationship]\n    'lengths of the lists differ': This indicates that the lists may not be of equal length, and we need to handle this by padding the shorter list with zeros.\n    Implementation: Use conditional logic to pad the shorter list with zeros until it matches the length of the longer list.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if both lists are empty; if so, return an empty list.\n    2. Determine the length of both lists.\n    3. Pad the shorter list with zeros to match the length of the longer list.\n    4. Use list comprehension to iterate over the indices and sum corresponding elements from both lists.\n    5. Return the resulting list.\n\n# [edge case]\n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2], []) = [1, 2]\n    Explanation: The second list is empty, so it is padded with zeros, resulting in [1+0, 2+0] = [1, 2].\n    \n    sum_list([], [3, 4]) = [3, 4]\n    Explanation: The first list is empty, so it is padded with zeros, resulting in [0+3, 0+4] = [3, 4].\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def sum_list(list1, list2):\n            if not list1 and not list2:\n                return []\n            max_length = max(len(list1), len(list2))\n            list1 += [0] * (max_length - len(list1))\n            list2 += [0] * (max_length - len(list2))\n            return [list1[i] + list2[i] for i in range(max_length)]\n", "requirement analysis:\nThe function should handle edge cases such as empty lists and mismatched lengths. It should provide clear error messages and maintain performance with large lists. The implementation should be straightforward for integration and well-documented.\nrequirement pool:\n- Handle empty lists gracefully\n- Provide error messages for mismatched list lengths\n- Optimize performance for large lists\n- Ensure easy integration into existing projects\n- Document the function thoroughly\nWe will implement a function named `sum_list` that takes two lists as input and returns a new list with the element-wise sum of the input lists. The function will handle edge cases such as empty lists and mismatched list lengths. If the lists have different lengths, the function will raise a ValueError with a clear error message. The implementation will use native Python features to ensure simplicity and ease of integration. We will also document the function thoroughly for future reference.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'element-wise sum'\n    Explanation: This means that each element from the first list is added to the corresponding element from the second list, resulting in a new list of sums.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n    1. Check if both lists are of the same length. If not, raise a ValueError with a message indicating the mismatch.\n    2. Initialize an empty list to store the results.\n    3. Iterate over the elements of both lists simultaneously.\n    4. For each pair of elements, calculate their sum and append it to the result list.\n    5. Return the result list.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = ValueError\n    Explanation: The lists have different lengths, so a ValueError should be raised.\n    \n    sum_list([], [4, 5, 6]) = ValueError\n    Explanation: The lists have different lengths, so a ValueError should be raised.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(list1) != len(list2):\n            raise ValueError(\"Lists must be of the same length\")\n        (other code)\n", "requirement analysis:\nThe function should efficiently sum elements of two lists, handling edge cases such as empty lists and varying lengths. It should return a new list with summed elements, ensuring no errors occur during execution.\nrequirement pool:\n- Implement the main summation logic\n- Handle empty list inputs gracefully\n- Manage lists of different lengths\n- Optimize performance for large lists\n- Provide clear error messages for invalid inputs\nWe will use the zip function to pair elements from both lists and sum them. This approach handles varying list lengths by truncating the longer list to match the shorter one. For empty lists, the function will return an empty list. This method is efficient and leverages native Python capabilities without requiring additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of lists'\n    Explanation: The requirement is to sum corresponding elements from two lists and return a new list containing these sums.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n    1. Use the `zip` function to pair elements from both input lists.\n    2. Iterate over the paired elements and compute their sum.\n    3. Collect these sums into a new list.\n    4. Return the new list as the result.\n    5. If either list is empty, return an empty list.\n    6. If the lists are of varying lengths, only sum up to the length of the shorter list.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = []\n    Explanation: The second list is empty, so no elements can be summed, resulting in an empty list.\n    \n    sum_list([1, 2], [3, 4, 5]) = [4, 6]\n    Explanation: The first list is shorter, so only the first two elements of each list are summed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `zip` naturally handles varying list lengths by truncating to the shortest list, and returning an empty list when either input list is empty.\n", "requirement analysis:\nThe function should take two lists as input and return a new list where each element is the sum of the corresponding elements from the input lists. It should handle cases where the lists are of different lengths by summing up to the length of the shorter list and ignoring extra elements in the longer list. The function should also handle empty lists gracefully, returning an empty list if both inputs are empty.\nrequirement pool:\n- The function must correctly sum corresponding elements of two lists.\n- The function should handle empty lists without errors.\n- The function should handle lists of different lengths by summing up to the length of the shorter list.\n- The function should be optimized for performance with large lists.\n- The function should include clear documentation for ease of use.\nWe will use Python's built-in zip function to pair elements from both lists and sum them. This approach handles varying list lengths by stopping at the shortest list, which aligns with the requirement to ignore extra elements in the longer list. We will also ensure the function handles empty lists gracefully by returning an empty list if both inputs are empty.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum': The requirement involves summing corresponding elements from two lists.\n    'handle edge cases gracefully': The function should manage scenarios like empty lists or lists of different lengths without errors.\n\n# [phrase showing quantity relationship]\n    'pair elements': This implies a one-to-one relationship between elements of the two lists, where each element from the first list is paired with the corresponding element from the second list.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Use Python's built-in `zip` function to pair elements from both lists.\n    2. Iterate over the paired elements and sum them.\n    3. Return the list of summed values.\n    4. If both lists are empty, return an empty list.\n    5. If lists are of different lengths, stop summing at the shortest list.\n\n# [edge case]\n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2], []) = []\n    Explanation: The second list is empty, so no pairs can be formed, resulting in an empty list.\n    \n    sum_list([1, 2, 3], [4, 5]) = [5, 7]\n    Explanation: The second list is shorter, so only pairs (1,4) and (2,5) are summed, ignoring the extra element in the first list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. Using `zip` naturally handles varying list lengths by stopping at the shortest list, and returning an empty list if both inputs are empty aligns with the requirement.\n", "requirement analysis:\nThe function should efficiently sum elements of two lists, handling edge cases such as empty lists and varying lengths. It should prioritize simplicity and readability while ensuring performance for large datasets.\nrequirement pool:\n- Handle empty lists without errors\n- Gracefully manage lists of varying lengths\n- Optimize performance for large lists\n- Maintain simplicity and readability\n- Provide clear error messages for invalid inputs\nWe will use a simple list comprehension to sum the elements of two lists. To handle lists of varying lengths, we will use the itertools.zip_longest function from the Python standard library, which allows us to iterate over the lists in parallel, filling in missing values with a default (zero in this case). This approach ensures simplicity, readability, and efficiency, even for large lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum_list'\n    Explanation: The function is designed to take two lists of numbers and return a new list where each element is the sum of corresponding elements from the input lists.\n\n# [phrase showing quantity relationship]\n    'sum': This indicates that each element in the resulting list should be the sum of elements from the two input lists at the same position.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Import `zip_longest` from `itertools`.\n    - Use a list comprehension to iterate over pairs of elements from the two lists using `zip_longest`.\n    - For each pair, add the elements together, using zero as a default for missing values.\n    - Return the resulting list.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2], []) = [1, 2]\n    Explanation: The second list is empty, so the result is the first list itself.\n    \n    sum_list([], [3, 4]) = [3, 4]\n    Explanation: The first list is empty, so the result is the second list itself.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. Using `zip_longest` with a default value of zero handles varying list lengths and empty lists gracefully.\n", "requirement analysis:\nThe function should sum corresponding elements of two lists. It must handle cases where lists are empty or of different lengths by returning a list that sums elements up to the length of the shorter list. This ensures no index errors occur.\nrequirement pool:\n- The function must sum elements of two lists.\n- The function must handle empty lists without errors.\n- The function must handle lists of different lengths gracefully.\n- The function should be optimized for performance with large lists.\n- The function should include clear documentation for developers.\nWe will implement a function named `sum_list` that takes two lists as input and returns a new list containing the sum of corresponding elements. The function will handle edge cases such as empty lists and lists of different lengths by summing elements up to the length of the shorter list. This approach ensures no index errors occur. We will use native Python features like `zip` to achieve this, as it is efficient and easy to use.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of corresponding elements'\n    Explanation: This means that for each pair of elements at the same index in the two lists, we need to add them together to form a new list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `sum_list` that takes two lists as input.\n    2. Use the `zip` function to iterate over pairs of elements from both lists simultaneously.\n    3. For each pair, calculate the sum and store it in a new list.\n    4. Return the new list containing the sums of corresponding elements.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = []\n    Explanation: The second list is empty, so there are no corresponding elements to sum, resulting in an empty list.\n    \n    sum_list([1, 2], [3, 4, 5]) = [4, 6]\n    Explanation: The function sums elements up to the length of the shorter list, resulting in [4, 6].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. Using `zip` inherently handles lists of different lengths by stopping at the shortest list.\n"], "test": ["def check(sum_list):\n\tassert sum_list([10,20,30],[15,25,35])==[25,45,65]", "def check(sum_list):\n\tassert sum_list([1,2,3],[5,6,7])==[6,8,10]", "def check(sum_list):\n\tassert sum_list([15,20,30],[15,45,75])==[30,65,105]", "def check(sum_list):\n\tassert sum_list([11, 19, 31], [20, 29, 39]) == [31, 48, 70]", "def check(sum_list):\n\tassert sum_list([15, 19, 31], [18, 26, 30]) == [33, 45, 61]", "def check(sum_list):\n\tassert sum_list([11, 23, 29], [15, 20, 40]) == [26, 43, 69]", "def check(sum_list):\n\tassert sum_list([11, 25, 35], [13, 27, 32]) == [24, 52, 67]", "def check(sum_list):\n\tassert sum_list([6, 20, 25], [11, 29, 36]) == [17, 49, 61]", "def check(sum_list):\n\tassert sum_list([10, 18, 26], [11, 27, 30]) == [21, 45, 56]", "def check(sum_list):\n\tassert sum_list([6, 16, 31], [19, 21, 36]) == [25, 37, 67]", "def check(sum_list):\n\tassert sum_list([8, 17, 30], [17, 30, 40]) == [25, 47, 70]", "def check(sum_list):\n\tassert sum_list([12, 22, 26], [17, 27, 32]) == [29, 49, 58]", "def check(sum_list):\n\tassert sum_list([12, 20, 34], [14, 22, 37]) == [26, 42, 71]", "def check(sum_list):\n\tassert sum_list([8, 21, 26], [15, 23, 36]) == [23, 44, 62]", "def check(sum_list):\n\tassert sum_list([5, 19, 27], [13, 22, 39]) == [18, 41, 66]", "def check(sum_list):\n\tassert sum_list([6, 15, 25], [15, 28, 32]) == [21, 43, 57]", "def check(sum_list):\n\tassert sum_list([8, 22, 27], [11, 28, 35]) == [19, 50, 62]", "def check(sum_list):\n\tassert sum_list([5, 25, 33], [13, 30, 38]) == [18, 55, 71]", "def check(sum_list):\n\tassert sum_list([12, 18, 34], [17, 23, 36]) == [29, 41, 70]", "def check(sum_list):\n\tassert sum_list([5, 20, 30], [20, 28, 39]) == [25, 48, 69]", "def check(sum_list):\n\tassert sum_list([12, 21, 30], [15, 22, 36]) == [27, 43, 66]", "def check(sum_list):\n\tassert sum_list([14, 15, 27], [18, 25, 36]) == [32, 40, 63]", "def check(sum_list):\n\tassert sum_list([7, 15, 33], [16, 30, 35]) == [23, 45, 68]", "def check(sum_list):\n\tassert sum_list([7, 22, 33], [12, 27, 30]) == [19, 49, 63]", "def check(sum_list):\n\tassert sum_list([13, 25, 35], [18, 21, 35]) == [31, 46, 70]", "def check(sum_list):\n\tassert sum_list([9, 23, 35], [11, 28, 35]) == [20, 51, 70]", "def check(sum_list):\n\tassert sum_list([14, 24, 27], [11, 26, 37]) == [25, 50, 64]", "def check(sum_list):\n\tassert sum_list([9, 24, 34], [20, 23, 35]) == [29, 47, 69]", "def check(sum_list):\n\tassert sum_list([11, 24, 33], [14, 29, 31]) == [25, 53, 64]", "def check(sum_list):\n\tassert sum_list([13, 24, 28], [10, 25, 34]) == [23, 49, 62]", "def check(sum_list):\n\tassert sum_list([15, 21, 28], [10, 20, 30]) == [25, 41, 58]", "def check(sum_list):\n\tassert sum_list([9, 17, 28], [17, 22, 32]) == [26, 39, 60]", "def check(sum_list):\n\tassert sum_list([7, 25, 28], [13, 29, 31]) == [20, 54, 59]", "def check(sum_list):\n\tassert sum_list([6, 25, 26], [12, 26, 34]) == [18, 51, 60]", "def check(sum_list):\n\tassert sum_list([9, 21, 34], [10, 26, 40]) == [19, 47, 74]", "def check(sum_list):\n\tassert sum_list([13, 18, 25], [12, 26, 39]) == [25, 44, 64]", "def check(sum_list):\n\tassert sum_list([2, 1, 2], [10, 8, 6]) == [12, 9, 8]", "def check(sum_list):\n\tassert sum_list([1, 7, 5], [1, 9, 2]) == [2, 16, 7]", "def check(sum_list):\n\tassert sum_list([1, 2, 6], [4, 11, 2]) == [5, 13, 8]", "def check(sum_list):\n\tassert sum_list([4, 6, 4], [1, 6, 6]) == [5, 12, 10]", "def check(sum_list):\n\tassert sum_list([6, 3, 2], [3, 8, 7]) == [9, 11, 9]", "def check(sum_list):\n\tassert sum_list([5, 3, 2], [10, 4, 7]) == [15, 7, 9]", "def check(sum_list):\n\tassert sum_list([2, 5, 5], [7, 10, 3]) == [9, 15, 8]", "def check(sum_list):\n\tassert sum_list([6, 7, 4], [9, 5, 8]) == [15, 12, 12]", "def check(sum_list):\n\tassert sum_list([4, 3, 1], [8, 11, 7]) == [12, 14, 8]", "def check(sum_list):\n\tassert sum_list([1, 7, 8], [1, 10, 4]) == [2, 17, 12]", "def check(sum_list):\n\tassert sum_list([5, 2, 1], [2, 9, 9]) == [7, 11, 10]", "def check(sum_list):\n\tassert sum_list([1, 5, 2], [2, 4, 9]) == [3, 9, 11]", "def check(sum_list):\n\tassert sum_list([1, 4, 2], [8, 5, 7]) == [9, 9, 9]", "def check(sum_list):\n\tassert sum_list([4, 4, 1], [4, 5, 5]) == [8, 9, 6]", "def check(sum_list):\n\tassert sum_list([6, 2, 4], [5, 10, 12]) == [11, 12, 16]", "def check(sum_list):\n\tassert sum_list([3, 2, 6], [7, 1, 4]) == [10, 3, 10]", "def check(sum_list):\n\tassert sum_list([2, 7, 3], [9, 5, 2]) == [11, 12, 5]", "def check(sum_list):\n\tassert sum_list([2, 3, 4], [9, 6, 12]) == [11, 9, 16]", "def check(sum_list):\n\tassert sum_list([2, 6, 6], [1, 3, 10]) == [3, 9, 16]", "def check(sum_list):\n\tassert sum_list([4, 7, 7], [6, 7, 8]) == [10, 14, 15]", "def check(sum_list):\n\tassert sum_list([1, 3, 7], [10, 8, 6]) == [11, 11, 13]", "def check(sum_list):\n\tassert sum_list([1, 3, 6], [3, 1, 6]) == [4, 4, 12]", "def check(sum_list):\n\tassert sum_list([2, 7, 1], [9, 4, 4]) == [11, 11, 5]", "def check(sum_list):\n\tassert sum_list([4, 2, 1], [8, 2, 5]) == [12, 4, 6]", "def check(sum_list):\n\tassert sum_list([6, 2, 5], [3, 4, 10]) == [9, 6, 15]", "def check(sum_list):\n\tassert sum_list([5, 3, 2], [5, 1, 4]) == [10, 4, 6]", "def check(sum_list):\n\tassert sum_list([4, 5, 5], [9, 10, 8]) == [13, 15, 13]", "def check(sum_list):\n\tassert sum_list([3, 4, 3], [3, 5, 11]) == [6, 9, 14]", "def check(sum_list):\n\tassert sum_list([1, 5, 2], [5, 1, 11]) == [6, 6, 13]", "def check(sum_list):\n\tassert sum_list([2, 3, 8], [3, 7, 3]) == [5, 10, 11]", "def check(sum_list):\n\tassert sum_list([3, 5, 7], [5, 8, 8]) == [8, 13, 15]", "def check(sum_list):\n\tassert sum_list([4, 3, 6], [8, 11, 11]) == [12, 14, 17]", "def check(sum_list):\n\tassert sum_list([3, 7, 8], [6, 9, 2]) == [9, 16, 10]", "def check(sum_list):\n\tassert sum_list([14, 18, 32], [14, 49, 80]) == [28, 67, 112]", "def check(sum_list):\n\tassert sum_list([15, 21, 33], [13, 47, 78]) == [28, 68, 111]", "def check(sum_list):\n\tassert sum_list([14, 15, 27], [17, 49, 79]) == [31, 64, 106]", "def check(sum_list):\n\tassert sum_list([10, 20, 33], [19, 41, 75]) == [29, 61, 108]", "def check(sum_list):\n\tassert sum_list([19, 21, 32], [11, 48, 80]) == [30, 69, 112]", "def check(sum_list):\n\tassert sum_list([18, 18, 28], [10, 50, 76]) == [28, 68, 104]", "def check(sum_list):\n\tassert sum_list([19, 17, 25], [19, 44, 79]) == [38, 61, 104]", "def check(sum_list):\n\tassert sum_list([16, 21, 26], [15, 44, 72]) == [31, 65, 98]", "def check(sum_list):\n\tassert sum_list([11, 19, 32], [10, 44, 77]) == [21, 63, 109]", "def check(sum_list):\n\tassert sum_list([20, 21, 34], [14, 50, 74]) == [34, 71, 108]", "def check(sum_list):\n\tassert sum_list([18, 23, 34], [10, 41, 72]) == [28, 64, 106]", "def check(sum_list):\n\tassert sum_list([17, 23, 28], [20, 49, 71]) == [37, 72, 99]", "def check(sum_list):\n\tassert sum_list([16, 17, 33], [12, 41, 74]) == [28, 58, 107]", "def check(sum_list):\n\tassert sum_list([13, 16, 29], [19, 40, 70]) == [32, 56, 99]", "def check(sum_list):\n\tassert sum_list([19, 18, 29], [12, 46, 79]) == [31, 64, 108]", "def check(sum_list):\n\tassert sum_list([20, 16, 33], [13, 47, 80]) == [33, 63, 113]", "def check(sum_list):\n\tassert sum_list([16, 24, 34], [17, 41, 76]) == [33, 65, 110]", "def check(sum_list):\n\tassert sum_list([19, 24, 34], [11, 50, 80]) == [30, 74, 114]", "def check(sum_list):\n\tassert sum_list([14, 24, 28], [18, 43, 76]) == [32, 67, 104]", "def check(sum_list):\n\tassert sum_list([11, 15, 29], [19, 46, 80]) == [30, 61, 109]", "def check(sum_list):\n\tassert sum_list([14, 18, 31], [11, 41, 78]) == [25, 59, 109]", "def check(sum_list):\n\tassert sum_list([16, 18, 32], [13, 46, 72]) == [29, 64, 104]", "def check(sum_list):\n\tassert sum_list([13, 23, 30], [19, 41, 78]) == [32, 64, 108]", "def check(sum_list):\n\tassert sum_list([16, 18, 33], [17, 44, 80]) == [33, 62, 113]", "def check(sum_list):\n\tassert sum_list([13, 22, 33], [12, 48, 77]) == [25, 70, 110]", "def check(sum_list):\n\tassert sum_list([13, 18, 29], [14, 50, 76]) == [27, 68, 105]", "def check(sum_list):\n\tassert sum_list([15, 18, 29], [12, 43, 80]) == [27, 61, 109]", "def check(sum_list):\n\tassert sum_list([12, 16, 35], [11, 46, 74]) == [23, 62, 109]", "def check(sum_list):\n\tassert sum_list([14, 16, 32], [18, 40, 75]) == [32, 56, 107]", "def check(sum_list):\n\tassert sum_list([14, 21, 29], [10, 41, 80]) == [24, 62, 109]", "def check(sum_list):\n\tassert sum_list([13, 18, 25], [16, 45, 75]) == [29, 63, 100]", "def check(sum_list):\n\tassert sum_list([18, 25, 35], [19, 47, 79]) == [37, 72, 114]", "def check(sum_list):\n\tassert sum_list([18, 25, 29], [16, 48, 73]) == [34, 73, 102]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Sums corresponding elements of two lists and returns a new list.\n    Handles empty lists and lists of different lengths by summing up to the length of the shorter list.\n    \n    Parameters:\n    list1 (list[int]): The first list of integers.\n    list2 (list[int]): The second list of integers.\n    \n    Returns:\n    list[int]: A list containing the sum of corresponding elements.\n    \"\"\"\n    # Use zip to pair elements from both lists and sum them\n    summed_list = [a + b for a, b in zip(list1, list2)]\n    return summed_list\n\n# Example usage:\n# result = sum_list([10, 20, 30], [15, 25, 35])\n# print(result)  # Output: [25, 45, 65]\n\n# result = sum_list([], [])\n# print(result)  # Output: []\n\n# result = sum_list([1, 2, 3], [4, 5])\n# print(result)  # Output: [5, 7]\n", "passed": true, "pass": true, "pass_num": 10, "round": 669, "mutate_method": "expand_one2two", "parent_index": 489}
