{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 65, "prompt": "Write a function to flatten a list and sum all of its elements.", "code": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "test_imports": [], "test_list": ["assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210", "assert recursive_list_sum([3, 1, [7, 2], [1, 1]]) == 15", "assert recursive_list_sum([5, 7, [5, 7], [7, 2]]) == 33", "assert recursive_list_sum([4, 4, [1, 5], [9, 6]]) == 29", "assert recursive_list_sum([1, 5, [5, 8], [2, 1]]) == 22", "assert recursive_list_sum([1, 3, [3, 8], [2, 4]]) == 21", "assert recursive_list_sum([4, 2, [8, 3], [3, 2]]) == 22", "assert recursive_list_sum([1, 5, [8, 1], [7, 11]]) == 33", "assert recursive_list_sum([5, 6, [2, 8], [7, 5]]) == 33", "assert recursive_list_sum([4, 4, [3, 3], [10, 2]]) == 26", "assert recursive_list_sum([1, 3, [2, 2], [10, 1]]) == 19", "assert recursive_list_sum([3, 1, [7, 9], [2, 1]]) == 23", "assert recursive_list_sum([6, 7, [4, 8], [7, 10]]) == 42", "assert recursive_list_sum([2, 7, [5, 7], [1, 5]]) == 27", "assert recursive_list_sum([3, 3, [1, 9], [1, 11]]) == 28", "assert recursive_list_sum([2, 5, [5, 8], [10, 7]]) == 37", "assert recursive_list_sum([3, 2, [3, 6], [7, 6]]) == 27", "assert recursive_list_sum([4, 7, [1, 5], [4, 4]]) == 25", "assert recursive_list_sum([5, 4, [7, 4], [4, 7]]) == 31", "assert recursive_list_sum([1, 2, [5, 8], [4, 1]]) == 21", "assert recursive_list_sum([1, 1, [4, 8], [8, 8]]) == 30", "assert recursive_list_sum([4, 2, [3, 9], [8, 11]]) == 37", "assert recursive_list_sum([6, 5, [1, 7], [8, 4]]) == 31", "assert recursive_list_sum([5, 7, [2, 7], [8, 4]]) == 33", "assert recursive_list_sum([1, 3, [2, 6], [9, 4]]) == 25", "assert recursive_list_sum([6, 7, [1, 8], [9, 11]]) == 42", "assert recursive_list_sum([1, 1, [1, 9], [10, 6]]) == 28", "assert recursive_list_sum([1, 4, [8, 8], [8, 6]]) == 35", "assert recursive_list_sum([6, 4, [2, 6], [6, 2]]) == 26", "assert recursive_list_sum([1, 5, [4, 8], [5, 4]]) == 27", "assert recursive_list_sum([3, 6, [1, 1], [4, 5]]) == 20", "assert recursive_list_sum([5, 4, [3, 9], [10, 9]]) == 40", "assert recursive_list_sum([6, 6, [8, 9], [5, 3]]) == 37", "assert recursive_list_sum([2, 2, [7, 1], [5, 9]]) == 26", "assert recursive_list_sum([2, 8, [13, 14], [23, 46]]) == 106", "assert recursive_list_sum([8, 13, [16, 14], [14, 36]]) == 101", "assert recursive_list_sum([2, 14, [19, 15], [16, 40]]) == 106", "assert recursive_list_sum([7, 12, [13, 18], [21, 41]]) == 112", "assert recursive_list_sum([7, 8, [14, 12], [23, 43]]) == 107", "assert recursive_list_sum([12, 12, [18, 12], [20, 36]]) == 110", "assert recursive_list_sum([12, 9, [14, 12], [24, 39]]) == 110", "assert recursive_list_sum([7, 11, [17, 12], [15, 41]]) == 103", "assert recursive_list_sum([10, 12, [19, 15], [19, 46]]) == 121", "assert recursive_list_sum([12, 12, [14, 19], [15, 38]]) == 110", "assert recursive_list_sum([9, 8, [13, 15], [18, 38]]) == 101", "assert recursive_list_sum([8, 11, [15, 13], [17, 40]]) == 104", "assert recursive_list_sum([10, 15, [19, 10], [17, 42]]) == 113", "assert recursive_list_sum([6, 12, [11, 12], [21, 46]]) == 108", "assert recursive_list_sum([8, 10, [13, 15], [24, 45]]) == 115", "assert recursive_list_sum([2, 13, [12, 19], [15, 43]]) == 104", "assert recursive_list_sum([7, 8, [19, 11], [15, 44]]) == 104", "assert recursive_list_sum([5, 13, [19, 18], [16, 45]]) == 116", "assert recursive_list_sum([11, 6, [17, 16], [16, 39]]) == 105", "assert recursive_list_sum([11, 13, [20, 14], [21, 46]]) == 125", "assert recursive_list_sum([6, 9, [16, 15], [20, 45]]) == 111", "assert recursive_list_sum([5, 8, [11, 16], [23, 45]]) == 108", "assert recursive_list_sum([9, 11, [11, 10], [16, 41]]) == 98", "assert recursive_list_sum([11, 5, [18, 10], [18, 40]]) == 102", "assert recursive_list_sum([4, 6, [12, 13], [21, 46]]) == 102", "assert recursive_list_sum([12, 10, [15, 9], [18, 38]]) == 102", "assert recursive_list_sum([5, 13, [20, 9], [22, 39]]) == 108", "assert recursive_list_sum([4, 7, [16, 15], [21, 39]]) == 102", "assert recursive_list_sum([9, 9, [15, 19], [19, 45]]) == 116", "assert recursive_list_sum([7, 13, [18, 19], [17, 39]]) == 113", "assert recursive_list_sum([6, 15, [19, 18], [21, 37]]) == 116", "assert recursive_list_sum([12, 5, [13, 19], [15, 38]]) == 102", "assert recursive_list_sum([12, 10, [10, 9], [17, 40]]) == 98", "assert recursive_list_sum([11, 15, [31, 43], [47, 56]]) == 203", "assert recursive_list_sum([15, 19, [32, 41], [54, 64]]) == 225", "assert recursive_list_sum([8, 22, [28, 35], [55, 59]]) == 207", "assert recursive_list_sum([8, 23, [35, 40], [54, 60]]) == 220", "assert recursive_list_sum([6, 20, [32, 42], [45, 57]]) == 202", "assert recursive_list_sum([9, 17, [26, 44], [55, 60]]) == 211", "assert recursive_list_sum([13, 20, [35, 45], [51, 62]]) == 226", "assert recursive_list_sum([7, 20, [35, 37], [49, 60]]) == 208", "assert recursive_list_sum([9, 25, [27, 43], [54, 55]]) == 213", "assert recursive_list_sum([15, 17, [34, 38], [49, 58]]) == 211", "assert recursive_list_sum([5, 21, [26, 44], [52, 56]]) == 204", "assert recursive_list_sum([7, 20, [29, 43], [46, 61]]) == 206", "assert recursive_list_sum([14, 25, [34, 42], [48, 57]]) == 220", "assert recursive_list_sum([11, 25, [32, 40], [49, 61]]) == 218", "assert recursive_list_sum([6, 16, [34, 36], [49, 55]]) == 196", "assert recursive_list_sum([11, 23, [26, 35], [49, 57]]) == 201", "assert recursive_list_sum([9, 19, [25, 42], [49, 60]]) == 204", "assert recursive_list_sum([13, 19, [29, 41], [55, 57]]) == 214", "assert recursive_list_sum([13, 18, [32, 37], [49, 55]]) == 204", "assert recursive_list_sum([10, 23, [28, 36], [46, 57]]) == 200", "assert recursive_list_sum([12, 16, [32, 43], [53, 58]]) == 214", "assert recursive_list_sum([11, 16, [29, 45], [51, 57]]) == 209", "assert recursive_list_sum([13, 15, [27, 44], [54, 57]]) == 210", "assert recursive_list_sum([15, 23, [28, 38], [52, 62]]) == 218", "assert recursive_list_sum([14, 16, [34, 42], [53, 62]]) == 221", "assert recursive_list_sum([7, 19, [25, 43], [48, 65]]) == 207", "assert recursive_list_sum([9, 25, [35, 37], [51, 58]]) == 215", "assert recursive_list_sum([8, 22, [33, 41], [51, 63]]) == 218", "assert recursive_list_sum([6, 21, [30, 36], [45, 61]]) == 199", "assert recursive_list_sum([12, 24, [27, 42], [46, 56]]) == 207", "assert recursive_list_sum([12, 21, [33, 41], [48, 63]]) == 218", "assert recursive_list_sum([12, 25, [32, 41], [45, 61]]) == 216", "assert recursive_list_sum([13, 20, [35, 35], [49, 61]]) == 213"], "entry_point": "recursive_list_sum", "repair_prompt": ["Write a function recursive_list_sum to flatten a list and sum all of its elements.\nrecursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n", "Write a function recursive_list_sum to flatten a list. The goal is to make the function so that the list is no longer nested. Then sum all of its elements.\nrecursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n", "Write a function recursive_list_sum to flatten a list and sum all of its elements.\nrecursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n"], "completions": ["from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Recursively sums all numeric elements in a nested list.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists of numeric elements.\n\n    Returns:\n    int: The sum of all numeric elements in the nested list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively call recursive_list_sum for sublist\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            # Add numeric element to total_sum\n            total_sum += element\n        # Non-numeric elements are ignored\n\n    return total_sum\n\n# Example usage:\n# print(recursive_list_sum([1, [2, [3, [4]]]]))  # Output: 10\n# print(recursive_list_sum([1, 'a', [2, 'b', [3, 'c']]]))  # Output: 6\n# print(recursive_list_sum([]))  # Output: 0\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively flattens a nested list and sums all numeric elements.\n\n    Parameters:\n    lst (list): A list which may contain nested lists.\n\n    Returns:\n    int: The sum of all numeric elements in the list.\n\n    Raises:\n    ValueError: If a non-numeric type is encountered in the list.\n\n    Example:\n    >>> recursive_list_sum([1, 2, [3, 4], [5, 6]])\n    21\n    \"\"\"\n    total_sum = 0\n    for element in lst:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            total_sum += element\n        else:\n            raise ValueError(\"List contains non-numeric type\")\n    return total_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        print(recursive_list_sum([1, 2, [3, 4], [5, 6]]))  # Output: 21\n        print(recursive_list_sum([1, [2, [3, [4]]]]))     # Output: 10\n        print(recursive_list_sum([]))                     # Output: 0\n        print(recursive_list_sum([1, 'a', [2]]))          # Raises ValueError\n    except ValueError as e:\n        print(f\"Error: {e}\")\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively flattens a nested list and sums all numeric elements.\n\n    Parameters:\n    lst (list): A potentially nested list of elements.\n\n    Returns:\n    int: The sum of all numeric elements in the list.\n    \"\"\"\n    total_sum = 0\n\n    for element in lst:\n        if isinstance(element, list):\n            # If the element is a list, call the function recursively\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            # If the element is a number, add it to the total sum\n            total_sum += element\n        # Non-numeric elements are ignored\n\n    return total_sum\n\n# Example usage:\n# print(recursive_list_sum([1, [2, [3, [4]]]]))  # Output: 10\n# print(recursive_list_sum([1, 'a', [2, 'b', [3, 'c']]]))  # Output: 6\n# print(recursive_list_sum([]))  # Output: 0\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all integer elements.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists of integers.\n\n    Returns:\n    int: The sum of all integer elements in the flattened list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, int):\n            total_sum += element\n        elif isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n\n    return total_sum\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(recursive_list_sum([]))  # Expected output: 0\n    print(recursive_list_sum([1, [2, [3, [4]]]]))  # Expected output: 10\n    print(recursive_list_sum([1, 'a', [2, [3, 'b', [4]]]]))  # Expected output: 10\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists.\n\n    Returns:\n    int: The sum of all numeric elements in the flattened list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively call the function for sublists\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            # Add numeric elements to the sum\n            total_sum += element\n\n    return total_sum\n\n# Example usage:\n# print(recursive_list_sum([1, [2, [3, [4]]]]))  # Output: 10\n# print(recursive_list_sum([1, 'a', [2, 'b', [3, 'c']]]))  # Output: 6\n# print(recursive_list_sum([]))  # Output: 0\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists.\n\n    Returns:\n    int: The sum of all numeric elements in the flattened list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively call the function for sublists\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            # Add numeric elements to the sum\n            total_sum += element\n        # Non-numeric elements are ignored\n\n    return total_sum\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(recursive_list_sum([]))  # Expected output: 0\n    print(recursive_list_sum([1, [2, [3, [4]]]]))  # Expected output: 10\n    print(recursive_list_sum([[], [[], []]]))  # Expected output: 0\n    print(recursive_list_sum([1, 'a', [2, [3, 'b', [4]]]]))  # Expected output: 10\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    lst (list): A potentially nested list of integers.\n\n    Returns:\n    int: The sum of all integers in the list.\n    \"\"\"\n    total_sum = 0\n\n    for element in lst:\n        if isinstance(element, list):\n            # Recursively call the function for nested lists\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            # Add numeric elements directly to the sum\n            total_sum += element\n        else:\n            # Handle non-numeric elements by ignoring them\n            # Alternatively, raise an error if required\n            raise ValueError(\"List contains non-numeric elements\")\n\n    return total_sum\n\n# Example usage:\n# print(recursive_list_sum([1, [2, [3, [4]]]]))  # Output: 10\n# print(recursive_list_sum([0, [0, [0]]]))       # Output: 0\n# print(recursive_list_sum([]))                  # Output: 0\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists.\n\n    Returns:\n    int: The sum of all numeric elements in the list.\n    \"\"\"\n    total_sum = 0\n    for element in nested_list:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            total_sum += element\n        else:\n            # Optionally handle non-numeric elements\n            print(f\"Skipping non-numeric element: {element}\")\n    return total_sum\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_list = [1, 'a', [2, 'b', [3, 'c']]]\n    print(f\"The sum of numeric elements is: {recursive_list_sum(example_list)}\")\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively sums all elements in a nested list.\n\n    Parameters:\n    lst (list): A list which may contain integers and other lists.\n\n    Returns:\n    int: The sum of all integer elements in the list.\n    \"\"\"\n    total_sum = 0\n\n    for element in lst:\n        if isinstance(element, int):\n            total_sum += element\n        elif isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            # If the element is neither an integer nor a list, ignore it.\n            # This handles non-integer elements gracefully without causing an error.\n            pass\n\n    return total_sum\n\n# Example usage:\n# print(recursive_list_sum([1, [2, [3, [4, [5]]]]]))  # Output: 15\n# print(recursive_list_sum([0, [0, [0]]]))            # Output: 0\n# print(recursive_list_sum([]))                       # Output: 0\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    lst (list): A potentially nested list of elements.\n\n    Returns:\n    int: The sum of all numeric elements in the list.\n    \"\"\"\n    total_sum = 0\n    for element in lst:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):  # Check for numeric types\n            total_sum += element\n    return total_sum\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(recursive_list_sum([]))  # Expected output: 0\n    print(recursive_list_sum([1, [2, [3, [4]]]]))  # Expected output: 10\n    print(recursive_list_sum([1, 'a', [2, [3, 'b']]]))  # Expected output: 6\n"], "plans": ["requirement analysis:\nThe function needs to handle nested lists of varying depths and types, ensuring all elements are summed correctly. It should be efficient and easy to use, with clear documentation.\nrequirement pool:\n- Implement recursive list flattening and summation\n- Optimize for performance with large datasets\n- Provide comprehensive documentation and examples\n- Ensure compatibility with different Python versions\n- Include error handling for non-numeric elements\nWe will implement a recursive function to traverse and sum elements of a nested list. The function will check if an element is a list and recursively call itself to flatten and sum the elements. For non-numeric elements, we will skip them to ensure the function only sums numeric values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten a list'\n    Explanation: This means converting a nested list into a single list with no sublists, containing all the elements of the original nested list.\n\n    'sum all of its elements'\n    Explanation: This means adding together all the numeric elements in the flattened list to get a total sum.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a recursive function `recursive_list_sum` that takes a list as input.\n    2. Initialize a variable `total_sum` to 0 to keep track of the sum of elements.\n    3. Iterate through each element in the list:\n        - If the element is a list, recursively call `recursive_list_sum` on this sublist and add the result to `total_sum`.\n        - If the element is a number, add it directly to `total_sum`.\n        - If the element is not a number or list, skip it.\n    4. Return `total_sum` as the result.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n\n    recursive_list_sum([1, [2, [3, [4]]]]) = 10\n    Explanation: The nested list is flattened to [1, 2, 3, 4], and their sum is 10.\n\n    recursive_list_sum([1, 'a', [2, 'b', [3, 'c']]]) = 6\n    Explanation: Non-numeric elements are skipped. The numeric elements are 1, 2, and 3, which sum to 6.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of recursively summing numeric elements and skipping non-numeric ones inherently handles these cases.\n", "requirement analysis:\nThe function should recursively traverse nested lists, flatten them, and sum all elements. It must handle various levels of nesting and different data types within the list, ensuring type safety and error handling.\nrequirement pool:\n- Implement the recursive list flattening and summing function\n- Ensure the function handles edge cases like empty lists\n- Optimize the function for performance with large datasets\n- Provide comprehensive documentation and usage examples\n- Include unit tests to verify function correctness\nWe will implement a recursive function that traverses through the list, checking each element. If an element is a list, the function will call itself recursively to flatten and sum the elements. If an element is numeric, it will be added to the sum. We will use Python's built-in capabilities to handle recursion efficiently. The function will include error handling to manage non-numeric types by raising an appropriate error.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten a list'\n    Explanation: This means converting a nested list into a single list with no sublists, so that all elements are at the same level.\n\n    'sum all of its elements'\n    Explanation: This means adding together all the numeric values in the list after it has been flattened.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a function `recursive_list_sum` that takes a list as input.\n    2. Initialize a variable `total_sum` to 0 to keep track of the sum of elements.\n    3. Iterate through each element in the list:\n        - If the element is a list, call `recursive_list_sum` recursively on this element and add the result to `total_sum`.\n        - If the element is numeric, add it directly to `total_sum`.\n        - If the element is neither a list nor numeric, raise an error.\n    4. Return `total_sum` as the final result.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n\n    recursive_list_sum([1, [2, [3, [4]]]]) = 10\n    Explanation: The nested list is flattened to [1, 2, 3, 4], and their sum is 10.\n\n    recursive_list_sum([1, 'a', [2]]) = Error\n    Explanation: The presence of a non-numeric type ('a') should raise an error as per the plan's error handling.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def recursive_list_sum(lst):\n            total_sum = 0\n            for element in lst:\n                if isinstance(element, list):\n                    total_sum += recursive_list_sum(element)\n                elif isinstance(element, (int, float)):\n                    total_sum += element\n                else:\n                    raise ValueError(\"List contains non-numeric type\")\n            return total_sum\n", "requirement analysis:\nThe function should recursively traverse nested lists, flatten them, and sum all elements. It must handle various levels of nesting and different data types within the list, ensuring type safety and error handling.\nrequirement pool:\n- Implement the recursive list flattening and summing function\n- Ensure the function handles edge cases like empty lists\n- Optimize the function for performance with large datasets\n- Provide comprehensive documentation and usage examples\n- Include error handling for non-numeric elements\nWe will implement a recursive function that traverses through each element of the list. If an element is a list, the function will call itself recursively to flatten and sum the elements. Non-numeric elements will be ignored to ensure type safety and prevent errors. This approach will handle deeply nested lists efficiently and perform well with large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten a list'\n    Explanation: This means converting a nested list into a single list with no sublists, containing all the elements of the original nested list.\n\n    'sum all of its elements'\n    Explanation: This means adding together all the numerical values present in the flattened list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a function `recursive_list_sum` that takes a list as input.\n    2. Initialize a variable `total_sum` to 0 to keep track of the sum of elements.\n    3. Iterate through each element in the list:\n        - If the element is a list, call `recursive_list_sum` recursively on this element and add the result to `total_sum`.\n        - If the element is a number, add it directly to `total_sum`.\n        - Ignore non-numeric elements to ensure type safety.\n    4. Return `total_sum` as the final result.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n\n    recursive_list_sum([1, [2, [3, [4]]]]) = 10\n    Explanation: The nested list is flattened to [1, 2, 3, 4], and their sum is 10.\n\n    recursive_list_sum([1, 'a', [2, 'b', [3, 'c']]]) = 6\n    Explanation: Non-numeric elements are ignored. The numeric elements are 1, 2, and 3, which sum to 6.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive logic inherently handles empty lists and ignores non-numeric elements.\n", "requirement analysis:\nThe function needs to flatten any level of nested lists and sum the elements. It should handle edge cases like empty lists and non-integer elements gracefully. Performance is crucial for large datasets.\nrequirement pool:\n- The function must flatten nested lists of any depth.\n- The function must sum all elements after flattening.\n- The function should handle non-integer elements by ignoring them.\n- The function should be optimized for performance with large lists.\n- The function should include comprehensive documentation.\nWe will implement a recursive function to flatten nested lists and sum their elements. The function will handle non-integer elements by ignoring them. We will use Python's built-in capabilities to manage recursion and ensure the function is optimized for performance. The function will include comprehensive documentation with examples and edge case handling.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten a list'\n    Explanation: This means converting a nested list into a single-level list where all elements are directly accessible without any sublists.\n\n    'sum all of its elements'\n    Explanation: After flattening the list, calculate the total sum of all integer elements in the list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a recursive function `recursive_list_sum` that takes a list as input.\n    2. Initialize a variable `total_sum` to 0 to keep track of the sum of elements.\n    3. Iterate through each element in the list:\n        - If the element is an integer, add it to `total_sum`.\n        - If the element is a list, recursively call `recursive_list_sum` on this sublist and add the result to `total_sum`.\n    4. Return `total_sum` as the final result.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements, so the sum is 0.\n    \n    recursive_list_sum([1, [2, [3, [4]]]]) = 10\n    Explanation: The nested list is flattened to [1, 2, 3, 4], and their sum is 10.\n    \n    recursive_list_sum([1, 'a', [2, [3, 'b', [4]]]]) = 10\n    Explanation: Non-integer elements like 'a' and 'b' are ignored. The nested list is flattened to [1, 2, 3, 4], and their sum is 10.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive logic inherently handles empty lists and ignores non-integer elements.\n", "requirement analysis:\nThe function should recursively traverse nested lists, flatten them, and sum all elements. It should handle various data types within the list and be optimized for performance.\nrequirement pool:\n- Implement the recursive function to flatten and sum the list.\n- Ensure the function handles edge cases like empty lists or non-numeric elements.\n- Optimize the function for performance with large datasets.\n- Provide comprehensive documentation and examples.\n- Include unit tests to verify the function's correctness.\nWe will implement a recursive function that traverses nested lists, flattens them, and sums all numeric elements. The function will ignore non-numeric elements to prevent errors and ensure robustness. We will use native Python features to maintain simplicity and efficiency, avoiding external libraries for this task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten a list'\n    Explanation: This means converting a nested list into a single-level list where all elements are accessible without any sublists.\n\n    'sum all of its elements'\n    Explanation: This means adding up all the numeric values in the flattened list to get a total sum.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a recursive function that takes a list as input.\n    2. Initialize a sum variable to zero.\n    3. Iterate through each element in the list:\n        - If the element is a list, recursively call the function on this sublist and add the result to the sum.\n        - If the element is a numeric value, add it directly to the sum.\n    4. Return the total sum.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n    \n    recursive_list_sum([1, [2, [3, [4]]]]) = 10\n    Explanation: The nested list is flattened to [1, 2, 3, 4], and the sum of these elements is 10.\n    \n    recursive_list_sum([1, 'a', [2, 'b', [3, 'c']]]) = 6\n    Explanation: Non-numeric elements are ignored, so the flattened list is [1, 2, 3], and their sum is 6.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive logic inherently handles empty lists and ignores non-numeric elements.\n", "requirement analysis:\nThe function should recursively traverse the list, flattening it by extracting elements from nested lists and summing them. It should handle various data types and structures, ensuring robustness and efficiency.\nrequirement pool:\n- Implement the recursive list flattening and summing function.\n- Ensure the function handles edge cases like empty lists.\n- Optimize the function for performance with large datasets.\n- Provide comprehensive documentation and examples.\n- Include error handling for non-numeric elements.\nWe will implement a recursive function to flatten and sum elements of a nested list. The function will traverse the list, checking each element to determine if it is a list itself. If it is, the function will recursively call itself to flatten the sublist. Non-numeric elements will be ignored, and the function will handle empty lists gracefully. We will use Python's built-in capabilities to achieve this without additional libraries, ensuring efficiency and simplicity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten'\n    Explanation: In the requirement, 'flatten' means converting a nested list into a single-level list where all elements are directly accessible without any sublists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a recursive function that takes a list as input.\n    2. Initialize a sum variable to accumulate the total.\n    3. Iterate through each element in the list:\n        - If the element is a list, recursively call the function and add the result to the sum.\n        - If the element is a number, add it directly to the sum.\n    4. Return the accumulated sum.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n    \n    recursive_list_sum([1, [2, [3, [4]]]]) = 10\n    Explanation: The nested list is flattened to [1, 2, 3, 4], and their sum is 10.\n    \n    recursive_list_sum([[], [[], []]]) = 0\n    Explanation: All sublists are empty, resulting in a total sum of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach naturally handles empty lists and deeply nested structures.\n", "requirement analysis:\nThe function should recursively traverse nested lists, flatten them, and compute the sum of all elements. It must handle various levels of nesting efficiently and provide accurate results.\nrequirement pool:\n- Implement recursive list traversal and summation\n- Optimize for performance with large datasets\n- Include comprehensive documentation and examples\n- Ensure compatibility with different Python versions\n- Provide error handling for non-list inputs\nWe will implement a recursive function that traverses through each element of the list. If an element is a list itself, the function will call itself recursively to handle the nested list. If the element is a number, it will be added to the cumulative sum. This approach ensures that all levels of nesting are handled efficiently. We will also include error handling to manage non-list inputs and non-numeric elements within the list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten a list'\n    Explanation: This means converting a nested list into a single list containing all the elements without any sublists.\n\n    'sum all of its elements'\n    Explanation: This means adding up all the numbers in the list, including those in any nested sublists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a function `recursive_list_sum` that takes a list as input.\n    2. Initialize a variable `total_sum` to 0 to keep track of the cumulative sum.\n    3. Iterate through each element in the list:\n        - If the element is a list, call `recursive_list_sum` recursively on this element and add the result to `total_sum`.\n        - If the element is a number, add it directly to `total_sum`.\n    4. Return `total_sum` after iterating through all elements.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n    \n    recursive_list_sum([1, [2, [3, [4]]]]) = 10\n    Explanation: The nested structure should be flattened and summed as 1 + 2 + 3 + 4 = 10.\n    \n    recursive_list_sum([0, [0, [0]]]) = 0\n    Explanation: All elements are zero, so the sum is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive logic inherently handles empty lists and deeply nested lists.\n", "requirement analysis:\nThe function should recursively traverse nested lists, flatten them, and compute the sum of all elements. It must handle various data types and provide error handling for non-numeric inputs.\nrequirement pool:\n- Implement recursive list flattening and summation\n- Optimize for performance with large datasets\n- Include error handling for invalid inputs\n- Document usage examples and edge cases\n- Test with diverse list structures\nWe will implement a recursive function that traverses nested lists, flattens them, and computes the sum of all numeric elements. The function will include error handling to manage non-numeric inputs by skipping them and providing informative error messages. We will use Python's built-in capabilities to achieve this without additional libraries, ensuring simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten a list'\n    Explanation: This means converting a nested list (a list that contains other lists) into a single list with all the elements at the same level.\n\n    'sum all of its elements'\n    Explanation: This means adding up all the numeric values in the list after it has been flattened.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a recursive function `recursive_list_sum` that takes a list as input.\n    2. Initialize a variable `total_sum` to 0 to keep track of the sum.\n    3. Iterate through each element in the list:\n        - If the element is a list, recursively call `recursive_list_sum` on this element and add the result to `total_sum`.\n        - If the element is a number, add it directly to `total_sum`.\n        - If the element is not a number or list, skip it or handle it as needed.\n    4. Return `total_sum`.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n    \n    recursive_list_sum([1, [2, [3, [4]]]]) = 10\n    Explanation: The nested list is flattened to [1, 2, 3, 4], and their sum is 10.\n    \n    recursive_list_sum([1, 'a', [2, 'b', [3, 'c']]]) = 6\n    Explanation: Non-numeric elements are skipped. The numeric elements are 1, 2, and 3, which sum to 6.\n\n# [extra code for edge case]\n    We need extra code to handle non-numeric elements.\n        def recursive_list_sum(lst):\n            total_sum = 0\n            for element in lst:\n                if isinstance(element, list):\n                    total_sum += recursive_list_sum(element)\n                elif isinstance(element, (int, float)):\n                    total_sum += element\n                # Optionally handle non-numeric elements\n            return total_sum\n", "requirement analysis:\nThe function should recursively traverse nested lists, flatten them, and compute the sum of all elements. It must handle various levels of nesting and different data types within the list, ensuring type safety and error handling.\nrequirement pool:\n- Implement the recursive list sum function\n- Ensure the function handles edge cases like empty lists\n- Optimize the function for performance with large datasets\n- Provide comprehensive documentation and examples\n- Include unit tests to verify functionality\nWe will implement a recursive function that traverses through the list, checking each element. If an element is a list, the function will call itself recursively to sum the elements within that sublist. If the element is an integer, it will add it to the total sum. This approach ensures that deeply nested lists are handled efficiently. We will use Python's built-in capabilities without additional libraries to keep the solution simple and performant.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten a list'\n    Explanation: This means converting a nested list structure into a single list containing all the elements without any sublists.\n\n    'sum all of its elements'\n    Explanation: This means adding together all the integer elements in the list, including those within any nested sublists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a function `recursive_list_sum` that takes a list as an argument.\n    2. Initialize a variable `total_sum` to 0 to keep track of the sum of elements.\n    3. Iterate over each element in the list:\n        a. If the element is an integer, add it to `total_sum`.\n        b. If the element is a list, recursively call `recursive_list_sum` on this sublist and add the result to `total_sum`.\n    4. Return `total_sum` after iterating through all elements.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n    \n    recursive_list_sum([0, [0, [0]]]) = 0\n    Explanation: All elements are zero, so the sum is 0.\n    \n    recursive_list_sum([1, [2, [3, [4, [5]]]]]) = 15\n    Explanation: The list is deeply nested but contains integers from 1 to 5, which sum up to 15.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The recursive approach inherently handles empty lists and deeply nested structures.\n", "requirement analysis:\nThe function should recursively traverse nested lists, flatten them, and compute the sum of all elements. It must handle various levels of nesting and different data types within the list.\nrequirement pool:\n- Implement the recursive list flattening and summing function\n- Ensure the function handles edge cases like empty lists\n- Optimize the function for performance with large datasets\n- Provide comprehensive documentation and examples\n- Include unit tests to verify functionality\nWe will implement a recursive function that traverses through each element of the list. If an element is a list itself, the function will call itself recursively to handle the nested list. If the element is a number, it will be added to the sum. We will use Python's built-in capabilities to handle recursion efficiently. The function will also include checks to handle non-numeric elements by ignoring them, as the requirement for handling such elements is unclear.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flatten'\n    Explanation: In the requirement, 'flatten' means converting a nested list into a single-level list by extracting all elements from sublists.\n\n    'sum'\n    Explanation: 'sum' refers to the addition of all numerical elements in the list, including those extracted from nested sublists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a function `recursive_list_sum` that takes a list as input.\n    2. Initialize a variable `total_sum` to 0 to keep track of the sum.\n    3. Iterate through each element in the list:\n        - If the element is a list, call `recursive_list_sum` recursively on this element and add the result to `total_sum`.\n        - If the element is a number, add it directly to `total_sum`.\n    4. Return `total_sum`.\n\n# [edge case] \n    recursive_list_sum([]) = 0\n    Explanation: An empty list has no elements to sum, so the expected output is 0.\n\n    recursive_list_sum([1, [2, [3, [4]]]]) = 10\n    Explanation: The nested list is flattened to [1, 2, 3, 4], and their sum is 10.\n\n    recursive_list_sum([1, 'a', [2, [3, 'b']]]) = 6\n    Explanation: Non-numeric elements are ignored. The numeric elements are flattened to [1, 2, 3], and their sum is 6.\n\n# [extra code for edge case]\n    We need extra code to handle non-numeric elements.\n        def recursive_list_sum(lst):\n            total_sum = 0\n            for element in lst:\n                if isinstance(element, list):\n                    total_sum += recursive_list_sum(element)\n                elif isinstance(element, (int, float)):  # Check for numeric types\n                    total_sum += element\n            return total_sum\n"], "test": ["def check(recursive_list_sum):\n\tassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "def check(recursive_list_sum):\n\tassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "def check(recursive_list_sum):\n\tassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 1, [7, 2], [1, 1]]) == 15", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 7, [5, 7], [7, 2]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 4, [1, 5], [9, 6]]) == 29", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 5, [5, 8], [2, 1]]) == 22", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 3, [3, 8], [2, 4]]) == 21", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 2, [8, 3], [3, 2]]) == 22", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 5, [8, 1], [7, 11]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 6, [2, 8], [7, 5]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 4, [3, 3], [10, 2]]) == 26", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 3, [2, 2], [10, 1]]) == 19", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 1, [7, 9], [2, 1]]) == 23", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 7, [4, 8], [7, 10]]) == 42", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 7, [5, 7], [1, 5]]) == 27", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 3, [1, 9], [1, 11]]) == 28", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 5, [5, 8], [10, 7]]) == 37", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 2, [3, 6], [7, 6]]) == 27", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 7, [1, 5], [4, 4]]) == 25", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 4, [7, 4], [4, 7]]) == 31", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 2, [5, 8], [4, 1]]) == 21", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 1, [4, 8], [8, 8]]) == 30", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 2, [3, 9], [8, 11]]) == 37", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 5, [1, 7], [8, 4]]) == 31", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 7, [2, 7], [8, 4]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 3, [2, 6], [9, 4]]) == 25", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 7, [1, 8], [9, 11]]) == 42", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 1, [1, 9], [10, 6]]) == 28", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 4, [8, 8], [8, 6]]) == 35", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 4, [2, 6], [6, 2]]) == 26", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 5, [4, 8], [5, 4]]) == 27", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 6, [1, 1], [4, 5]]) == 20", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 4, [3, 9], [10, 9]]) == 40", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 6, [8, 9], [5, 3]]) == 37", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 2, [7, 1], [5, 9]]) == 26", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 8, [13, 14], [23, 46]]) == 106", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 13, [16, 14], [14, 36]]) == 101", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 14, [19, 15], [16, 40]]) == 106", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 12, [13, 18], [21, 41]]) == 112", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 8, [14, 12], [23, 43]]) == 107", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 12, [18, 12], [20, 36]]) == 110", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 9, [14, 12], [24, 39]]) == 110", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 11, [17, 12], [15, 41]]) == 103", "def check(recursive_list_sum):\n\tassert recursive_list_sum([10, 12, [19, 15], [19, 46]]) == 121", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 12, [14, 19], [15, 38]]) == 110", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 8, [13, 15], [18, 38]]) == 101", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 11, [15, 13], [17, 40]]) == 104", "def check(recursive_list_sum):\n\tassert recursive_list_sum([10, 15, [19, 10], [17, 42]]) == 113", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 12, [11, 12], [21, 46]]) == 108", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 10, [13, 15], [24, 45]]) == 115", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 13, [12, 19], [15, 43]]) == 104", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 8, [19, 11], [15, 44]]) == 104", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 13, [19, 18], [16, 45]]) == 116", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 6, [17, 16], [16, 39]]) == 105", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 13, [20, 14], [21, 46]]) == 125", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 9, [16, 15], [20, 45]]) == 111", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 8, [11, 16], [23, 45]]) == 108", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 11, [11, 10], [16, 41]]) == 98", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 5, [18, 10], [18, 40]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 6, [12, 13], [21, 46]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 10, [15, 9], [18, 38]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 13, [20, 9], [22, 39]]) == 108", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 7, [16, 15], [21, 39]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 9, [15, 19], [19, 45]]) == 116", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 13, [18, 19], [17, 39]]) == 113", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 15, [19, 18], [21, 37]]) == 116", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 5, [13, 19], [15, 38]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 10, [10, 9], [17, 40]]) == 98", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 15, [31, 43], [47, 56]]) == 203", "def check(recursive_list_sum):\n\tassert recursive_list_sum([15, 19, [32, 41], [54, 64]]) == 225", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 22, [28, 35], [55, 59]]) == 207", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 23, [35, 40], [54, 60]]) == 220", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 20, [32, 42], [45, 57]]) == 202", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 17, [26, 44], [55, 60]]) == 211", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 20, [35, 45], [51, 62]]) == 226", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 20, [35, 37], [49, 60]]) == 208", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 25, [27, 43], [54, 55]]) == 213", "def check(recursive_list_sum):\n\tassert recursive_list_sum([15, 17, [34, 38], [49, 58]]) == 211", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 21, [26, 44], [52, 56]]) == 204", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 20, [29, 43], [46, 61]]) == 206", "def check(recursive_list_sum):\n\tassert recursive_list_sum([14, 25, [34, 42], [48, 57]]) == 220", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 25, [32, 40], [49, 61]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 16, [34, 36], [49, 55]]) == 196", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 23, [26, 35], [49, 57]]) == 201", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 19, [25, 42], [49, 60]]) == 204", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 19, [29, 41], [55, 57]]) == 214", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 18, [32, 37], [49, 55]]) == 204", "def check(recursive_list_sum):\n\tassert recursive_list_sum([10, 23, [28, 36], [46, 57]]) == 200", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 16, [32, 43], [53, 58]]) == 214", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 16, [29, 45], [51, 57]]) == 209", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 15, [27, 44], [54, 57]]) == 210", "def check(recursive_list_sum):\n\tassert recursive_list_sum([15, 23, [28, 38], [52, 62]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([14, 16, [34, 42], [53, 62]]) == 221", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 19, [25, 43], [48, 65]]) == 207", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 25, [35, 37], [51, 58]]) == 215", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 22, [33, 41], [51, 63]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 21, [30, 36], [45, 61]]) == 199", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 24, [27, 42], [46, 56]]) == 207", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 21, [33, 41], [48, 63]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 25, [32, 41], [45, 61]]) == 216", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 20, [35, 35], [49, 61]]) == 213"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    lst (list): A potentially nested list of elements.\n\n    Returns:\n    int: The sum of all numeric elements in the list.\n    \"\"\"\n    total_sum = 0\n    for element in lst:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):  # Check for numeric types\n            total_sum += element\n    return total_sum\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(recursive_list_sum([]))  # Expected output: 0\n    print(recursive_list_sum([1, [2, [3, [4]]]]))  # Expected output: 10\n    print(recursive_list_sum([1, 'a', [2, [3, 'b']]]))  # Expected output: 6\n", "passed": true, "pass": true, "pass_num": 10, "round": 415, "mutate_method": "condense_two2one", "parent_index": 19}
