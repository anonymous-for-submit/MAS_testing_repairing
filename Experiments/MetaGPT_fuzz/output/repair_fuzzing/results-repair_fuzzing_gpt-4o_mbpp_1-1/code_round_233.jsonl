{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 745, "prompt": "Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.", "code": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "test_imports": [], "test_list": ["assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(20,25)==[22, 24]", "assert divisible_by_digits(6, 20) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 22) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(5, 27) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 21) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 25) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 23) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(4, 25) == [4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 25) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 24) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 24) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 19) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 18) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 26) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 25) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(5, 25) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 19) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 26) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 26) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 23) == [6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 21) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 26) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(5, 22) == [5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1, 27) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 10) == [4, 5, 6, 7, 8, 9]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 11) == [4, 5, 6, 7, 8, 9, 11]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 15) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 18) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 17) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]", "assert divisible_by_digits(1, 14) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 17) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 15) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 12) == [5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 10) == [5, 6, 7, 8, 9]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 13) == [4, 5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 17) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 16) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 16) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 20) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 17) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 18) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 18) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(24, 30) == [24]", "assert divisible_by_digits(24, 30) == [24]", "assert divisible_by_digits(17, 24) == [22, 24]", "assert divisible_by_digits(23, 25) == [24]", "assert divisible_by_digits(25, 29) == []", "assert divisible_by_digits(25, 25) == []", "assert divisible_by_digits(25, 27) == []", "assert divisible_by_digits(18, 29) == [22, 24]", "assert divisible_by_digits(25, 21) == []", "assert divisible_by_digits(22, 28) == [22, 24]", "assert divisible_by_digits(22, 25) == [22, 24]", "assert divisible_by_digits(19, 26) == [22, 24]", "assert divisible_by_digits(15, 28) == [15, 22, 24]", "assert divisible_by_digits(20, 25) == [22, 24]", "assert divisible_by_digits(25, 26) == []", "assert divisible_by_digits(16, 20) == []", "assert divisible_by_digits(23, 20) == []", "assert divisible_by_digits(22, 23) == [22]", "assert divisible_by_digits(23, 25) == [24]", "assert divisible_by_digits(21, 23) == [22]", "assert divisible_by_digits(19, 24) == [22, 24]", "assert divisible_by_digits(20, 24) == [22, 24]", "assert divisible_by_digits(17, 22) == [22]", "assert divisible_by_digits(18, 26) == [22, 24]", "assert divisible_by_digits(23, 30) == [24]", "assert divisible_by_digits(25, 28) == []", "assert divisible_by_digits(15, 29) == [15, 22, 24]", "assert divisible_by_digits(20, 26) == [22, 24]", "assert divisible_by_digits(16, 23) == [22]", "assert divisible_by_digits(20, 21) == []", "assert divisible_by_digits(18, 22) == [22]", "assert divisible_by_digits(22, 22) == [22]", "assert divisible_by_digits(21, 21) == []"], "entry_point": "divisible_by_digits", "repair_prompt": ["Write a function divisible_by_digits to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\ndivisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "Write a function divisible_by_digits to find numbers within a given range from startnum to endnum. These numbers should be such that every number is divisible by every digit it contains.\ndivisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "Write a function divisible_by_digits to identify numbers in a specified range from startnum to endnum that are divisible by every digit they contain.\ndivisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n"], "completions": ["from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n    \n    Returns:\n    list[int]: A list of numbers that are divisible by each of their non-zero digits.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"\n        Check if a number is divisible by each of its non-zero digits.\n        \n        Parameters:\n        number (int): The number to check.\n        \n        Returns:\n        bool: True if the number is divisible by each of its non-zero digits, False otherwise.\n        \"\"\"\n        str_number = str(number)\n        for char in str_number:\n            digit = int(char)\n            if digit == 0:\n                continue\n            if number % digit != 0:\n                return False\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    \n    return result\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Finds and returns a list of numbers within the range from startnum to endnum\n    where each number is divisible by every non-zero digit it contains.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers meeting the criteria.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        # Skip numbers containing zero\n        if '0' in num_str:\n            continue\n        # Check divisibility by each non-zero digit\n        if all(num % int(digit) == 0 for digit in num_str if digit != '0'):\n            result.append(num)\n    return result\n\n# Example usage:\n# print(divisible_by_digits(10, 12))  # Output: [11, 12]\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Finds and returns a list of numbers within the range from startnum to endnum\n    where each number is divisible by every non-zero digit it contains.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers satisfying the divisibility condition.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"\n        Checks if a number is divisible by each of its non-zero digits.\n\n        Parameters:\n        number (int): The number to check.\n\n        Returns:\n        bool: True if the number is divisible by all its non-zero digits, False otherwise.\n        \"\"\"\n        digits = str(number)\n        for digit in digits:\n            if digit == '0':\n                continue\n            if number % int(digit) != 0:\n                return False\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n\n    return result\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    This function takes two integers, startnum and endnum, and returns a list of integers within that range\n    where each number is divisible by each of its non-zero digits.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers that are divisible by their non-zero digits.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"\n        Helper function to check if a number is divisible by each of its non-zero digits.\n\n        Parameters:\n        number (int): The number to check.\n\n        Returns:\n        bool: True if the number is divisible by each of its non-zero digits, False otherwise.\n        \"\"\"\n        str_number = str(number)\n        for digit_char in str_number:\n            digit = int(digit_char)\n            if digit == 0 or number % digit != 0:\n                return False\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n\n    return result\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Finds and returns a list of numbers within the range from startnum to endnum (inclusive)\n    where each number is divisible by every non-zero digit it contains.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers satisfying the divisibility condition.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"\n        Checks if a number is divisible by each of its non-zero digits.\n\n        Parameters:\n        number (int): The number to check.\n\n        Returns:\n        bool: True if the number is divisible by all its non-zero digits, False otherwise.\n        \"\"\"\n        str_number = str(number)\n        for char in str_number:\n            digit = int(char)\n            if digit != 0 and number % digit != 0:\n                return False\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n\n    return result\n\n# Example usage:\n# print(divisible_by_digits(1, 9))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# print(divisible_by_digits(10, 12))  # Output: [11, 12]\n# print(divisible_by_digits(20, 22))  # Output: [22]\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Finds numbers within the range from startnum to endnum where each number is divisible by every digit it contains.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers that are divisible by every digit they contain.\n    \"\"\"\n    result = []\n    \n    for number in range(startnum, endnum + 1):\n        str_number = str(number)\n        if '0' in str_number:\n            continue  # Skip numbers containing zero\n        \n        divisible = True\n        for digit in str_number:\n            if number % int(digit) != 0:\n                divisible = False\n                break\n        \n        if divisible:\n            result.append(number)\n    \n    return result\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Identifies numbers in the range from startnum to endnum that are divisible by every non-zero digit they contain.\n    \n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n    \n    Returns:\n    list[int]: A list of numbers that are divisible by their non-zero digits.\n    \"\"\"\n    result = []\n    \n    for number in range(startnum, endnum + 1):\n        if is_divisible_by_digits(number):\n            result.append(number)\n    \n    return result\n\ndef is_divisible_by_digits(number: int) -> bool:\n    \"\"\"\n    Checks if a number is divisible by each of its non-zero digits.\n    \n    Parameters:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is divisible by all its non-zero digits, False otherwise.\n    \"\"\"\n    str_number = str(number)\n    \n    for char in str_number:\n        digit = int(char)\n        if digit != 0 and number % digit != 0:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Identifies numbers in the range from startnum to endnum that are divisible by every non-zero digit they contain.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers that are divisible by each of their non-zero digits.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"Check if a number is divisible by each of its non-zero digits.\"\"\"\n        str_number = str(number)\n        for digit in str_number:\n            if digit == '0':\n                return False\n            if number % int(digit) != 0:\n                return False\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    \n    return result\n\n# Example usage:\n# print(divisible_by_digits(1, 1))  # Output: [1]\n# print(divisible_by_digits(10, 12))  # Output: [11, 12]\n# print(divisible_by_digits(20, 22))  # Output: [22]\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Identifies numbers in the range from startnum to endnum that are divisible by every non-zero digit they contain.\n    \n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n    \n    Returns:\n    list[int]: A list of numbers that are divisible by their non-zero digits.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"\n        Checks if a number is divisible by each of its non-zero digits.\n        \n        Parameters:\n        number (int): The number to check.\n        \n        Returns:\n        bool: True if the number is divisible by all its non-zero digits, False otherwise.\n        \"\"\"\n        for digit_char in str(number):\n            digit = int(digit_char)\n            if digit == 0:\n                continue\n            if number % digit != 0:\n                return False\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    \n    return result\n\n# Example usage:\n# print(divisible_by_digits(1, 9))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# print(divisible_by_digits(10, 12))  # Output: [11, 12]\n# print(divisible_by_digits(20, 22))  # Output: [22]\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"Finds numbers within the range from startnum to endnum where each number is divisible by every non-zero digit it contains.\n\n    Args:\n        startnum (int): The starting number of the range.\n        endnum (int): The ending number of the range.\n\n    Returns:\n        list[int]: A list of numbers that are divisible by their non-zero digits.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"Checks if a number is divisible by each of its non-zero digits.\n\n        Args:\n            number (int): The number to check.\n\n        Returns:\n            bool: True if the number is divisible by all its non-zero digits, False otherwise.\n        \"\"\"\n        original_number = number\n        while number > 0:\n            digit = number % 10\n            if digit != 0 and original_number % digit != 0:\n                return False\n            number //= 10\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    \n    return result\n\n# Example usage:\n# print(divisible_by_digits(1, 9))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# print(divisible_by_digits(10, 12))  # Output: [11, 12]\n# print(divisible_by_digits(20, 22))  # Output: [22]\n"], "plans": ["requirement analysis:\nThe function needs to iterate over a range of numbers and check if each number is divisible by its digits. This requires handling edge cases such as zero digits and ensuring the function is efficient for large ranges.\nrequirement pool:\n- Implement the core functionality to check divisibility by digits.\n- Optimize the function for performance with large ranges.\n- Include comprehensive documentation and examples.\n- Ensure compatibility with Python 3.x versions.\n- Add error handling for invalid inputs.\nWe will implement a function that iterates over each number in the given range and checks if the number is divisible by each of its non-zero digits. The function will handle edge cases such as numbers containing the digit zero by skipping those digits during the divisibility check. We will use Python's built-in capabilities to ensure compatibility across Python 3.x versions and optimize for performance by minimizing unnecessary calculations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit'\n    Explanation: This means that for each number in the range, it should be divisible by each of its digits (ignoring zeros).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate over each number in the range from startnum to endnum.\n    2. For each number, convert it to a string to access its digits.\n    3. Check if the number is divisible by each of its non-zero digits.\n    4. If the number is divisible by all its non-zero digits, add it to the result list.\n    5. Return the result list.\n\n# [edge case] \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is skipped because it contains a zero. Number 11 is divisible by 1, and number 12 is divisible by both 1 and 2.\n    divisible_by_digits(20, 25) = [22]\n    Explanation: Number 22 is divisible by both 2s. Numbers 20, 21, 23, 24, and 25 are not divisible by all their digits.\n    divisible_by_digits(1, 9) = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Explanation: All single-digit numbers are divisible by themselves.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already skips zeros and checks divisibility for each digit.\n", "requirement analysis:\nThe function needs to iterate over a range of numbers and check each number for divisibility by its digits. It should handle edge cases such as numbers containing zero and ensure that the function is efficient for large ranges.\nrequirement pool:\n- Implement the core functionality to check divisibility by digits\n- Optimize the function for performance with large ranges\n- Include comprehensive documentation and examples\n- Add error handling for invalid inputs\n- Create unit tests to ensure reliability\nWe will implement a function that iterates over each number in the given range and checks if the number is divisible by each of its non-zero digits. The function will handle edge cases such as numbers containing the digit zero by skipping the division check for zero. We will use basic Python functionality to achieve this, ensuring the function is efficient and easy to integrate into larger projects.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit it contains'\n    Explanation: This means that for each number in the specified range, the number should be divisible by each of its digits (ignoring zeros).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate over each number in the range from startnum to endnum.\n    2. For each number, convert it to a string to iterate over its digits.\n    3. Check if the number is divisible by each of its non-zero digits.\n    4. If the number is divisible by all its non-zero digits, add it to the result list.\n    5. Return the list of numbers that meet the criteria.\n\n# [edge case] \n    divisible_by_digits(1, 0) = []\n    Explanation: The range is invalid as startnum is greater than endnum, so the expected output is an empty list.\n    \n    divisible_by_digits(0, 0) = []\n    Explanation: The only number in the range is 0, which cannot be divided by any digit, so the expected output is an empty list.\n    \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is not included because it contains a zero. Number 11 is divisible by 1, and number 12 is divisible by both 1 and 2.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where numbers contain zero.\n        def divisible_by_digits(startnum, endnum):\n            result = []\n            for num in range(startnum, endnum + 1):\n                num_str = str(num)\n                if '0' in num_str:\n                    continue\n                if all(num % int(digit) == 0 for digit in num_str if digit != '0'):\n                    result.append(num)\n            return result\n", "requirement analysis:\nThe function should efficiently compute numbers divisible by their digits within a given range. It must handle edge cases such as zero and ensure performance optimization for large ranges.\nrequirement pool:\n- Implement the main function logic\n- Optimize for large range inputs\n- Provide clear documentation\n- Handle edge cases like zero\n- Enhance user interface for input and output\nWe will implement a function that iterates through each number in the given range and checks if the number is divisible by each of its non-zero digits. We will use Python's built-in capabilities for string manipulation and list comprehension to achieve this efficiently. The function will handle edge cases such as numbers containing the digit zero by skipping those digits during the divisibility check.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit it contains'\n    Explanation: This means that for a number to be included in the result, it must be divisible by each of its digits, excluding zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Iterate through each number in the range from startnum to endnum.\n    - Convert the number to a string to access each digit.\n    - For each digit in the number, check if the digit is non-zero and if the number is divisible by this digit.\n    - If the number is divisible by all its non-zero digits, add it to the result list.\n    - Return the result list.\n\n# [edge case] \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is not included because it contains a zero. Number 11 is included because it is divisible by 1. Number 12 is included because it is divisible by both 1 and 2.\n    \n    divisible_by_digits(20, 25) = [22]\n    Explanation: Number 20 is not included because it contains a zero. Number 21 is not included because it is not divisible by 2. Number 22 is included because it is divisible by 2. Numbers 23, 24, and 25 are not included because they are not divisible by all their digits.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of skipping zero digits and checking divisibility handles these cases naturally.\n", "requirement analysis:\nThe function needs to iterate over a range and check divisibility of each number by its digits. Edge cases include numbers with zero digits and handling large ranges efficiently.\nrequirement pool:\n- Implement the main divisible_by_digits function\n- Optimize for performance with large ranges\n- Ensure code readability and maintainability\n- Handle edge cases such as zero digits\n- Provide comprehensive test cases\nWe will implement a function that iterates over each number in the given range and checks if the number is divisible by each of its non-zero digits. We will use basic Python functionality to achieve this, ensuring the function is efficient and readable. The function will handle edge cases such as numbers containing zero digits by skipping those digits during divisibility checks.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit it contains'\n    Explanation: This means that for a number to be included in the result, each of its digits (except zero) must be a divisor of the number itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate over each number in the range from startnum to endnum.\n    2. For each number, convert it to a string to iterate over its digits.\n    3. Check if each digit (converted back to an integer) is a non-zero divisor of the number.\n    4. If all non-zero digits are divisors, add the number to the result list.\n    5. Return the result list.\n\n# [edge case] \n    divisible_by_digits(1, 1) = [1]\n    Explanation: The number 1 is divisible by its only digit, 1.\n    \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is skipped because it contains a zero. Number 11 is divisible by its digit 1, and number 12 is divisible by both digits 1 and 2.\n    \n    divisible_by_digits(20, 22) = [22]\n    Explanation: Number 20 is skipped because it contains a zero. Number 21 is not divisible by its digit 2. Number 22 is divisible by its digit 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of skipping zero digits and checking divisibility for each non-zero digit inherently handles these cases.\n", "requirement analysis:\nThe function needs to efficiently check each number within the range to ensure it is divisible by each of its digits. Edge cases such as zero digits should be handled appropriately.\nrequirement pool:\n- Implement the main function logic for divisibility check\n- Optimize for performance with large ranges\n- Provide clear documentation and usage examples\n- Handle edge cases like zero digits\n- Ensure compatibility with different Python versions\nWe will implement a function that iterates through each number in the given range and checks if the number is divisible by each of its non-zero digits. We will use Python's built-in capabilities to handle the iteration and digit extraction efficiently. The function will be optimized to handle large ranges by minimizing unnecessary computations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit it contains'\n    Explanation: This means that for each number in the range, we need to check if the number can be divided evenly by each of its digits (ignoring zero digits).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate through each number in the range from startnum to endnum.\n    2. For each number, convert it to a string to extract its digits.\n    3. Check if the number is divisible by each of its non-zero digits.\n    4. If the number is divisible by all its non-zero digits, add it to the result list.\n    5. Return the list of numbers that meet the criteria.\n\n# [edge case] \n    divisible_by_digits(1, 9) = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Explanation: All single-digit numbers are divisible by themselves.\n    \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is not included because it is not divisible by 0. Number 11 is included because it is divisible by 1. Number 12 is included because it is divisible by both 1 and 2.\n    \n    divisible_by_digits(20, 22) = [22]\n    Explanation: Number 20 is not included because it is not divisible by 0. Number 21 is not included because it is not divisible by 2. Number 22 is included because it is divisible by both 2s.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking divisibility by non-zero digits inherently handles these cases.\n", "requirement analysis:\nThe function needs to iterate over a range of numbers and check each digit of a number to ensure it divides the number without a remainder. Special attention is needed for digits like zero, which should be handled to avoid division errors.\nrequirement pool:\n- Implement the core logic to check divisibility by digits\n- Optimize the function for performance with large ranges\n- Document the function with examples and edge case handling\n- Create test cases to validate the function's correctness\n- Ensure compatibility with Python 3.x\nWe will implement a function that iterates over each number in the given range and checks if each digit of the number divides the number without a remainder. We will handle the special case of zero by skipping any number containing the digit zero, as division by zero is undefined. The function will be optimized for performance by using efficient iteration and conditional checks.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit it contains'\n    Explanation: This means that for a number to be included in the result, each digit of the number must be a divisor of the number itself. For example, the number 12 is divisible by both 1 and 2, so it should be included in the result.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Iterate over each number in the range from startnum to endnum.\n    - For each number, convert it to a string to access its digits.\n    - Check if any digit is zero; if so, skip the number since division by zero is undefined.\n    - For each digit, check if the number is divisible by the digit using modulus operation.\n    - If all digits divide the number without a remainder, add the number to the result list.\n    - Return the result list.\n\n# [edge case] \n    divisible_by_digits(10, 15) = [11, 12, 15]\n    Explanation: Numbers like 10 and 13 are skipped because they contain digits that do not divide them (0 cannot divide any number, and 3 does not divide 13).\n    \n    divisible_by_digits(20, 25) = [22]\n    Explanation: Only 22 is included because both digits (2) divide it evenly. Numbers like 20, 21, 23, 24, and 25 are skipped due to non-divisible digits.\n\n    divisible_by_digits(1, 9) = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Explanation: All single-digit numbers are included because they are trivially divisible by themselves.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking divisibility for each digit inherently handles these cases.\n", "requirement analysis:\nThe function needs to efficiently check each number in the range to ensure it is divisible by all its digits. Edge cases such as numbers containing zero should be handled appropriately.\nrequirement pool:\n- Implement the main function logic for divisibility by digits\n- Optimize the function for performance with large ranges\n- Provide clear documentation and examples for user understanding\n- Handle edge cases such as numbers containing zero\n- Ensure compatibility with different Python versions\nWe will implement a function that iterates over each number in the specified range and checks if the number is divisible by each of its non-zero digits. We will handle edge cases such as numbers containing zero by skipping the division check for zero digits. The function will be optimized for performance by using efficient iteration and condition checking. We will use Python's built-in capabilities to achieve this without the need for additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit'\n    Explanation: This means that for a number to be included in the result list, it must be divisible by each of its digits (ignoring zeros).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate over each number in the range from startnum to endnum.\n    2. For each number, convert it to a string to access its digits.\n    3. Check divisibility for each non-zero digit.\n    4. If the number is divisible by all its non-zero digits, add it to the result list.\n    5. Return the result list.\n\n# [edge case] \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is not divisible by 1 (since 10 % 1 == 0 but 10 % 0 is undefined), number 11 is divisible by 1, and number 12 is divisible by both 1 and 2.\n    \n    divisible_by_digits(20, 25) = [22]\n    Explanation: Number 20 is not considered because of the zero digit, number 21 is not divisible by 2, number 22 is divisible by both 2s, and numbers 23, 24, and 25 are not divisible by all their digits.\n\n    divisible_by_digits(1, 9) = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Explanation: All single-digit numbers are divisible by themselves.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers non-zero digits only for divisibility checks.\n", "requirement analysis:\nThe function needs to iterate over a range and check divisibility by each digit. Edge cases include numbers with zero digits and handling negative numbers if applicable.\nrequirement pool:\n- Implement the main function logic to check divisibility by digits\n- Optimize the function for performance with large ranges\n- Ensure the function handles edge cases like zero digits\n- Improve code readability and maintainability\n- Document the function with examples and edge case handling\nWe will implement a function that iterates over each number in the specified range and checks if the number is divisible by each of its non-zero digits. We will use basic Python functionality to achieve this, ensuring the function is efficient and handles edge cases such as numbers containing the digit zero. We will not consider negative numbers unless specified otherwise.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit they contain'\n    Explanation: This means that for each number in the specified range, we need to check if the number can be evenly divided by each of its digits (ignoring zeros).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate over each number from startnum to endnum.\n    2. For each number, convert it to a string to access each digit.\n    3. Check if the number is divisible by each of its non-zero digits.\n    4. If it is divisible by all its non-zero digits, add it to the result list.\n    5. Return the result list.\n\n# [edge case] \n    divisible_by_digits(1, 1) = [1]\n    Explanation: The number 1 is divisible by itself.\n    \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is not included because it contains a zero. Number 11 is divisible by 1, and number 12 is divisible by both 1 and 2.\n    \n    divisible_by_digits(20, 22) = [22]\n    Explanation: Number 20 is not included because it contains a zero. Number 21 is not divisible by 2. Number 22 is divisible by both 2s.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking divisibility by non-zero digits inherently handles these cases.\n", "requirement analysis:\nThe function needs to efficiently check each number in the range for divisibility by its digits, handling edge cases such as zero digits and ensuring performance optimization for large ranges.\nrequirement pool:\n- Implement the main function logic for divisibility check\n- Optimize the function for performance\n- Handle edge cases like zero digits\n- Provide clear documentation and examples\n- Ensure compatibility with different Python versions\nWe will implement a function that iterates over each number in the given range and checks if the number is divisible by each of its non-zero digits. We will handle edge cases by skipping any digit that is zero to avoid division by zero errors. The function will be optimized for performance by using efficient iteration and condition checking.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit'\n    Explanation: This means that for a number to be included in the result list, it must be divisible by each of its non-zero digits.\n\n# [phrase showing quantity relationship]\n    'range from startnum to endnum': This indicates that we need to iterate over numbers starting from 'startnum' and ending at 'endnum', inclusive.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate over each number in the range from 'startnum' to 'endnum'.\n    2. For each number, convert it to a string to access individual digits.\n    3. Check if the number is divisible by each of its non-zero digits.\n    4. If the number is divisible by all its non-zero digits, add it to the result list.\n    5. Return the result list.\n\n# [edge case] \n    divisible_by_digits(1, 9) = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Explanation: All numbers from 1 to 9 are divisible by themselves.\n    \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is not included because it is not divisible by its digit '0'. Number 11 is included because it is divisible by '1'. Number 12 is included because it is divisible by both '1' and '2'.\n    \n    divisible_by_digits(20, 22) = [22]\n    Explanation: Number 20 is not included because it is not divisible by its digit '0'. Number 21 is not included because it is not divisible by '2'. Number 22 is included because it is divisible by both '2'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of skipping zero digits and checking divisibility handles these cases naturally.\n", "requirement analysis:\nThe function needs to efficiently check each number in the range for divisibility by its digits, ensuring performance optimization for larger ranges. Clear documentation is necessary to guide users in utilizing the function effectively.\nrequirement pool:\n- Implement the main function logic for divisibility check\n- Optimize performance for large ranges\n- Provide clear documentation and usage examples\n- Enhance user interface for better understanding\n- Conduct thorough testing for edge cases\nWe will implement a function that iterates through each number in the given range and checks if the number is divisible by each of its non-zero digits. We will use Python's built-in capabilities to handle the iteration and digit extraction efficiently. The function will skip any digit that is zero to avoid division by zero errors.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit'\n    Explanation: This means that for a number to be included in the result list, it must be divisible by each of its digits. For example, the number 12 is divisible by 1 and 2, so it would be included.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate through each number in the range from startnum to endnum.\n    2. For each number, extract its digits.\n    3. Check if the number is divisible by each of its non-zero digits.\n    4. If it is divisible by all non-zero digits, add it to the result list.\n    5. Return the result list.\n\n# [edge case] \n    divisible_by_digits(1, 9) = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Explanation: All numbers from 1 to 9 are divisible by themselves.\n    \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is not included because it is not divisible by 0. Number 11 is included because it is divisible by 1. Number 12 is included because it is divisible by both 1 and 2.\n    \n    divisible_by_digits(20, 22) = [22]\n    Explanation: Number 20 is not included because it is not divisible by 0. Number 21 is not included because it is not divisible by 2. Number 22 is included because it is divisible by both 2s.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of skipping zero digits and checking divisibility handles these cases naturally.\n"], "test": ["def check(divisible_by_digits):\n\tassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20,25)==[22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 20) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 22) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 27) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 21) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 25) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 23) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 25) == [4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 25) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 24) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 24) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 19) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 18) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 26) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 25) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 25) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 19) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 26) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 26) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 23) == [6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 21) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 26) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 22) == [5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 27) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 10) == [4, 5, 6, 7, 8, 9]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 11) == [4, 5, 6, 7, 8, 9, 11]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 15) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 18) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 17) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 14) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 17) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 15) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 12) == [5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 10) == [5, 6, 7, 8, 9]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 13) == [4, 5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 17) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 16) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 16) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 20) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 17) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 18) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 18) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(24, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(24, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(17, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 25) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 29) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 25) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 27) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 29) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 21) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 28) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 25) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(19, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(15, 28) == [15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 25) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 26) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(16, 20) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 20) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 25) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(21, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(19, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(17, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 28) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(15, 29) == [15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(16, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 21) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(21, 21) == []"], "scores": [0.1471, 1.0, 0.1471, 1.0, 0.1471, 1.0, 0.1471, 1.0, 0.1471, 0.1471], "pass_results": [false, true, false, true, false, true, false, true, false, false], "pass_test_cases_num": [15, 102, 15, 102, 15, 102, 15, 102, 15, 15], "completion": "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Identifies numbers in the range from startnum to endnum that are divisible by every non-zero digit they contain.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers that are divisible by each of their non-zero digits.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"Check if a number is divisible by each of its non-zero digits.\"\"\"\n        str_number = str(number)\n        for digit in str_number:\n            if digit == '0':\n                return False\n            if number % int(digit) != 0:\n                return False\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    \n    return result\n\n# Example usage:\n# print(divisible_by_digits(1, 1))  # Output: [1]\n# print(divisible_by_digits(10, 12))  # Output: [11, 12]\n# print(divisible_by_digits(20, 22))  # Output: [22]\n", "passed": true, "pass": true, "pass_num": 4, "round": 233, "mutate_method": "condense_two2one", "parent_index": 233}
