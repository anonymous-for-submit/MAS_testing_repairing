{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 733, "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "code": "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "test_imports": [], "test_list": ["assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2", "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4", "assert find_first_occurrence([4, 3, 2, 7, 8, 3, 13, 4, 11, 9], 4) == -1", "assert find_first_occurrence([4, 6, 1, 6, 7, 10, 9, 5, 12, 10], 4) == 0", "assert find_first_occurrence([5, 1, 8, 10, 7, 11, 6, 12, 6, 13], 3) == -1", "assert find_first_occurrence([2, 8, 9, 3, 4, 9, 13, 5, 7, 12], 8) == -1", "assert find_first_occurrence([3, 9, 6, 3, 7, 2, 11, 5, 13, 6], 3) == 0", "assert find_first_occurrence([1, 4, 8, 4, 7, 10, 12, 10, 14, 13], 5) == -1", "assert find_first_occurrence([4, 10, 9, 8, 2, 10, 4, 13, 14, 12], 1) == -1", "assert find_first_occurrence([2, 8, 3, 7, 3, 2, 7, 8, 7, 13], 4) == -1", "assert find_first_occurrence([4, 10, 9, 8, 1, 4, 13, 10, 4, 9], 6) == -1", "assert find_first_occurrence([7, 5, 2, 5, 3, 5, 13, 12, 4, 6], 10) == -1", "assert find_first_occurrence([7, 5, 3, 3, 10, 9, 10, 9, 4, 13], 9) == -1", "assert find_first_occurrence([3, 5, 1, 5, 9, 6, 6, 13, 12, 10], 4) == -1", "assert find_first_occurrence([5, 10, 3, 4, 6, 8, 3, 9, 10, 14], 4) == -1", "assert find_first_occurrence([5, 1, 7, 9, 9, 5, 12, 7, 11, 10], 8) == -1", "assert find_first_occurrence([1, 5, 5, 10, 5, 9, 11, 4, 5, 7], 10) == -1", "assert find_first_occurrence([6, 7, 2, 5, 11, 2, 9, 13, 11, 9], 3) == -1", "assert find_first_occurrence([1, 7, 1, 5, 1, 5, 6, 7, 6, 12], 7) == 7", "assert find_first_occurrence([2, 8, 9, 6, 10, 7, 10, 6, 5, 5], 10) == 4", "assert find_first_occurrence([2, 5, 3, 10, 8, 7, 12, 10, 11, 12], 2) == 0", "assert find_first_occurrence([4, 7, 3, 3, 7, 7, 5, 7, 13, 6], 5) == -1", "assert find_first_occurrence([3, 7, 4, 1, 4, 9, 6, 14, 13, 8], 4) == 4", "assert find_first_occurrence([5, 5, 1, 6, 10, 4, 11, 5, 10, 12], 5) == 0", "assert find_first_occurrence([1, 2, 7, 7, 1, 7, 9, 13, 9, 14], 7) == 5", "assert find_first_occurrence([5, 8, 1, 2, 3, 5, 7, 10, 4, 10], 6) == -1", "assert find_first_occurrence([4, 2, 9, 9, 11, 9, 3, 13, 7, 9], 7) == -1", "assert find_first_occurrence([7, 9, 6, 5, 9, 5, 3, 12, 6, 12], 10) == -1", "assert find_first_occurrence([1, 4, 5, 6, 11, 8, 11, 10, 14, 10], 9) == -1", "assert find_first_occurrence([1, 5, 9, 8, 4, 11, 10, 13, 11, 5], 4) == 4", "assert find_first_occurrence([6, 1, 3, 8, 3, 7, 6, 11, 4, 10], 3) == 2", "assert find_first_occurrence([4, 1, 8, 3, 10, 6, 5, 10, 11, 9], 10) == 4", "assert find_first_occurrence([6, 9, 4, 1, 2, 1, 11, 10, 13, 6], 3) == -1", "assert find_first_occurrence([2, 5, 8, 1, 10, 9, 13, 6, 7, 7], 1) == -1", "assert find_first_occurrence([2, 5, 1, 5, 10, 5, 10, 6, 11, 12], 4) == -1", "assert find_first_occurrence([3, 7, 7, 5, 6, 1, 6, 6, 14, 12], 2) == -1", "assert find_first_occurrence([5, 5, 10, 2, 2, 3, 7, 8, 12, 5], 10) == -1", "assert find_first_occurrence([6, 1, 5, 8, 3, 1, 12, 8, 5, 5], 8) == 7", "assert find_first_occurrence([1, 7, 5, 2, 1, 3, 11, 7, 6, 12], 7) == 7", "assert find_first_occurrence([6, 6, 8, 3, 4, 1, 6, 11, 4, 10], 1) == -1", "assert find_first_occurrence([4, 5, 10, 8, 1, 9, 13, 8, 14, 10], 8) == 7", "assert find_first_occurrence([1, 8, 7, 2, 11, 5, 7, 9, 9, 9], 7) == -1", "assert find_first_occurrence([5, 5, 9, 4, 3, 10, 4, 4, 7, 9], 8) == -1", "assert find_first_occurrence([6, 4, 3, 9, 10, 9, 11, 14, 14, 9], 6) == -1", "assert find_first_occurrence([2, 1, 4, 3, 7, 4, 6, 10, 4, 10], 1) == 1", "assert find_first_occurrence([6, 5, 6, 5, 8, 3, 9, 14, 14, 11], 1) == -1", "assert find_first_occurrence([7, 1, 1, 9, 9, 10, 13, 10, 11, 5], 5) == -1", "assert find_first_occurrence([5, 5, 1, 2, 3, 4, 5, 8, 12, 11], 10) == -1", "assert find_first_occurrence([5, 2, 1, 9, 8, 11, 3, 6, 8, 4], 7) == -1", "assert find_first_occurrence([3, 8, 8, 7, 8, 3, 5, 11, 14, 12], 8) == 1", "assert find_first_occurrence([2, 3, 3, 10, 1, 3, 10, 14, 13, 8], 4) == -1", "assert find_first_occurrence([2, 4, 1, 10, 11, 5, 7, 13, 4, 8], 6) == -1", "assert find_first_occurrence([6, 4, 9, 8, 2, 10, 10, 11, 8, 5], 10) == 5", "assert find_first_occurrence([1, 7, 10, 5, 8, 11, 11, 13, 12, 6], 3) == -1", "assert find_first_occurrence([7, 7, 7, 6, 8, 4, 5, 4, 4, 7], 8) == 4", "assert find_first_occurrence([5, 2, 4, 10, 11, 8, 3, 6, 10, 12], 2) == 1", "assert find_first_occurrence([3, 6, 7, 2, 10, 1, 7, 12, 14, 7], 8) == -1", "assert find_first_occurrence([5, 1, 4, 2, 3, 8, 8, 12, 12, 4], 1) == 1", "assert find_first_occurrence([7, 1, 10, 9, 3, 11, 7, 8, 11, 5], 3) == 4", "assert find_first_occurrence([7, 2, 9, 1, 7, 3, 3, 4, 5, 5], 8) == -1", "assert find_first_occurrence([3, 3, 9, 1, 11, 7, 11, 11, 6, 13], 8) == -1", "assert find_first_occurrence([5, 7, 5, 1, 2, 1, 11, 5, 11, 11], 9) == -1", "assert find_first_occurrence([4, 5, 9, 6, 11, 1, 6, 5, 12, 12], 3) == -1", "assert find_first_occurrence([7, 5, 4, 9, 2, 8, 9, 11, 11, 13], 4) == -1", "assert find_first_occurrence([7, 5, 9, 9, 6, 11, 3, 9, 8, 5], 7) == -1", "assert find_first_occurrence([7, 1, 6, 8, 4, 8, 10, 10, 10, 10], 5) == -1", "assert find_first_occurrence([4, 5, 8, 4, 6, 9, 11, 10, 8, 14], 9) == 5", "assert find_first_occurrence([2, 2, 1, 5, 4, 3, 9, 4, 12, 11], 4) == 4", "assert find_first_occurrence([1, 1, 5, 2, 1, 6, 3, 13, 9, 9], 4) == -1", "assert find_first_occurrence([6, 5, 1, 4, 10, 2, 5, 11, 11, 5], 7) == -1", "assert find_first_occurrence([6, 5, 3, 8, 1, 5, 11, 9, 8, 4], 3) == -1", "assert find_first_occurrence([3, 6, 6, 2, 3, 1, 10, 14, 4, 11], 11) == -1", "assert find_first_occurrence([3, 8, 3, 2, 8, 1, 6, 10, 9, 4], 10) == 7", "assert find_first_occurrence([2, 8, 1, 4, 3, 3, 4, 14, 7, 13], 8) == -1", "assert find_first_occurrence([2, 5, 5, 3, 8, 8, 10, 8, 11, 13], 5) == 1", "assert find_first_occurrence([4, 7, 4, 2, 8, 10, 5, 8, 4, 9], 4) == 0", "assert find_first_occurrence([3, 9, 2, 5, 10, 1, 3, 5, 13, 6], 8) == -1", "assert find_first_occurrence([2, 3, 4, 9, 3, 10, 13, 6, 14, 5], 11) == -1", "assert find_first_occurrence([5, 4, 5, 9, 11, 4, 6, 8, 12, 4], 4) == 1", "assert find_first_occurrence([1, 3, 2, 1, 7, 8, 12, 10, 9, 5], 8) == 5", "assert find_first_occurrence([5, 8, 5, 3, 6, 8, 5, 10, 13, 10], 11) == -1", "assert find_first_occurrence([2, 9, 3, 7, 4, 11, 9, 11, 7, 6], 2) == 0", "assert find_first_occurrence([7, 3, 5, 4, 7, 10, 5, 5, 14, 13], 2) == -1", "assert find_first_occurrence([7, 7, 6, 3, 8, 6, 9, 9, 7, 5], 10) == -1", "assert find_first_occurrence([4, 1, 1, 10, 8, 10, 4, 9, 7, 10], 8) == 4", "assert find_first_occurrence([6, 1, 4, 4, 3, 10, 9, 9, 11, 13], 6) == -1", "assert find_first_occurrence([2, 4, 5, 5, 10, 5, 9, 8, 6, 8], 6) == -1", "assert find_first_occurrence([1, 1, 4, 7, 5, 4, 11, 10, 4, 10], 1) == 0", "assert find_first_occurrence([7, 2, 4, 2, 11, 4, 11, 12, 7, 10], 7) == -1", "assert find_first_occurrence([2, 8, 2, 4, 8, 4, 13, 4, 4, 14], 9) == -1", "assert find_first_occurrence([2, 7, 4, 8, 5, 1, 9, 5, 4, 10], 6) == -1", "assert find_first_occurrence([7, 7, 4, 3, 8, 8, 7, 13, 11, 14], 3) == -1", "assert find_first_occurrence([2, 8, 2, 4, 5, 11, 12, 13, 4, 4], 6) == -1", "assert find_first_occurrence([6, 9, 5, 8, 7, 9, 8, 11, 9, 9], 4) == -1", "assert find_first_occurrence([5, 8, 4, 1, 3, 8, 10, 14, 7, 13], 2) == -1", "assert find_first_occurrence([7, 7, 3, 2, 5, 5, 6, 13, 7, 7], 7) == -1", "assert find_first_occurrence([2, 5, 3, 5, 11, 4, 4, 13, 13, 7], 2) == 0", "assert find_first_occurrence([7, 3, 5, 8, 11, 7, 7, 4, 7, 5], 3) == 1", "assert find_first_occurrence([1, 6, 3, 10, 9, 6, 10, 9, 5, 4], 1) == 0", "assert find_first_occurrence([4, 2, 4, 1, 9, 3, 12, 13, 5, 7], 8) == -1", "assert find_first_occurrence([7, 6, 1, 5, 9, 5, 9, 12, 13, 11], 5) == -1"], "entry_point": "find_first_occurrence", "repair_prompt": ["Write a function find_first_occurrence to find the index of the first occurrence of a given number in a sorted array.\nfind_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n", "Write a function find_first_occurrence to find the index of the first occurrence of a given number in a sorted array. You are provided with a sorted array where all numbers are arranged in ascending order. Your task is to search through the array for the specified number.\nfind_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n", "Write a function find_first_occurrence to find the index of the first occurrence of a given number in a sorted array.\nfind_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n"], "completions": ["from typing import List\n## main.py\n\ndef find_first_occurrence(arr: list[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    arr (list[int]): A sorted list of integers.\n    target (int): The number to find the first occurrence of.\n\n    Returns:\n    int: The index of the first occurrence of the target number, or -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            # Check if it's the first occurrence\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n# Example usage:\n# print(find_first_occurrence([1, 2, 3, 4, 5, 5, 6], 5))  # Output: 4\n# print(find_first_occurrence([], 5))  # Output: -1\n# print(find_first_occurrence([1, 2, 3, 4, 6], 5))  # Output: -1\n# print(find_first_occurrence([5, 5, 5, 5], 5))  # Output: 0\n", "from typing import List\n## main.py\n\ndef find_first_occurrence(arr: list[int], target: int) -> int:\n    \"\"\"\n    Finds the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    arr (list[int]): A sorted list of integers.\n    target (int): The integer to find in the array.\n\n    Returns:\n    int: The index of the first occurrence of the target number, or -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            # Check if it's the first occurrence\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n# Example test cases to validate the function\nif __name__ == \"__main__\":\n    # Test case 1: Empty array\n    assert find_first_occurrence([], 5) == -1, \"Test case 1 failed\"\n\n    # Test case 2: Target not in array\n    assert find_first_occurrence([1, 2, 3, 4, 5], 6) == -1, \"Test case 2 failed\"\n\n    # Test case 3: Target appears multiple times\n    assert find_first_occurrence([5, 5, 5, 5, 5], 5) == 0, \"Test case 3 failed\"\n\n    # Test case 4: Target is the first element\n    assert find_first_occurrence([1, 2, 3, 4, 5], 1) == 0, \"Test case 4 failed\"\n\n    # Test case 5: Target is the last element\n    assert find_first_occurrence([1, 2, 3, 4, 5], 5) == 4, \"Test case 5 failed\"\n\n    print(\"All test cases passed!\")\n", "from typing import List\n## main.py\n\ndef find_first_occurrence(arr: list[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    arr (list[int]): A sorted list of integers.\n    target (int): The number to find the first occurrence of.\n\n    Returns:\n    int: The index of the first occurrence of the target number, or -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            # Check if it's the first occurrence\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n", "from typing import List\n## main.py\n\ndef find_first_occurrence(arr: list[int], target: int) -> int:\n    \"\"\"\n    Searches for the first occurrence of the target number in a sorted array.\n\n    Parameters:\n    arr (list[int]): A list of integers sorted in ascending order.\n    target (int): The number to find the first occurrence of.\n\n    Returns:\n    int: The index of the first occurrence of the target number, or -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            # Check if it's the first occurrence\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n", "from typing import List\n## main.py\n\nimport bisect\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Searches for the first occurrence of target in a sorted array.\n\n    Parameters:\n    arr (List[int]): A sorted list of integers.\n    target (int): The integer to find.\n\n    Returns:\n    int: The index of the first occurrence of target, or -1 if not found.\n    \"\"\"\n    # Find the position where the target should be inserted to maintain sorted order\n    index = bisect.bisect_left(arr, target)\n    \n    # Check if the target is actually present at the found index\n    if index < len(arr) and arr[index] == target:\n        return index\n    else:\n        return -1\n\n# Example usage:\n# print(find_first_occurrence([1, 2, 3, 4, 5], 3))  # Output: 2\n# print(find_first_occurrence([1, 1, 1, 1, 1], 1))  # Output: 0\n# print(find_first_occurrence([1, 2, 3, 4, 5], 6))  # Output: -1\n# print(find_first_occurrence([], 3))               # Output: -1\n", "from typing import List\n## main.py\n\ndef find_first_occurrence(arr: list[int], target: int) -> int:\n    \"\"\"\n    Function to find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    arr (list[int]): A sorted list of integers.\n    target (int): The number to find in the array.\n\n    Returns:\n    int: The index of the first occurrence of the target number, or -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            # Check if it's the first occurrence\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n# Example usage:\n# print(find_first_occurrence([1, 2, 2, 3, 4], 2))  # Output: 1\n# print(find_first_occurrence([1, 2, 3, 4, 5], 6))  # Output: -1\n# print(find_first_occurrence([], 5))               # Output: -1\n# print(find_first_occurrence([5, 5, 5, 5], 5))     # Output: 0\n", "from typing import List\n## main.py\n\ndef find_first_occurrence(arr: list[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    arr (list[int]): A sorted list of integers.\n    target (int): The integer to find in the array.\n\n    Returns:\n    int: The index of the first occurrence of the target number, or -1 if not found.\n    \"\"\"\n    # Handle edge case for empty array\n    if not arr:\n        return -1\n\n    # Initialize binary search boundaries\n    left, right = 0, len(arr) - 1\n\n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            # Check if it's the first occurrence\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Return -1 if the target is not found\n    return -1\n\n# Example usage:\n# print(find_first_occurrence([1, 2, 3, 4, 5], 3))  # Output: 2\n# print(find_first_occurrence([5, 5, 5, 5, 5], 5))  # Output: 0\n# print(find_first_occurrence([], 5))               # Output: -1\n# print(find_first_occurrence([1, 2, 3, 4, 5], 6))  # Output: -1\n", "from typing import List\n## main.py\n\ndef find_first_occurrence(arr: list[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    arr (list[int]): A sorted list of integers.\n    target (int): The number to find the first occurrence of.\n\n    Returns:\n    int: The index of the first occurrence of the target number, or -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            # Check if it's the first occurrence\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n# Example usage:\n# print(find_first_occurrence([1, 2, 3, 4, 5], 3))  # Output: 2\n# print(find_first_occurrence([5, 5, 5, 5, 5], 5))  # Output: 0\n# print(find_first_occurrence([], 3))               # Output: -1\n# print(find_first_occurrence([1, 2, 3, 4, 5], 6))  # Output: -1\n", "from typing import List\n## main.py\n\nimport bisect\n\ndef find_first_occurrence(arr: list[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n    \n    Parameters:\n    arr (list[int]): A sorted list of integers.\n    target (int): The number to find the first occurrence of.\n    \n    Returns:\n    int: The index of the first occurrence of the target number, or -1 if not found.\n    \"\"\"\n    # Use bisect_left to find the insertion point for the target\n    index = bisect.bisect_left(arr, target)\n    \n    # Check if the target is present at the found index\n    if index < len(arr) and arr[index] == target:\n        return index\n    else:\n        return -1\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(find_first_occurrence([1, 2, 3, 4, 5], 6))  # Output: -1\n    print(find_first_occurrence([], 3))               # Output: -1\n    print(find_first_occurrence([2, 2, 2, 2], 2))     # Output: 0\n    print(find_first_occurrence([1, 2, 3, 4, 5], 3))  # Output: 2\n", "from typing import List\n## main.py\n\ndef find_first_occurrence(arr: list[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of a target number in a sorted array.\n\n    Parameters:\n    arr (list[int]): A sorted list of integers.\n    target (int): The number to find the first occurrence of.\n\n    Returns:\n    int: The index of the first occurrence of the target number, or -1 if not found.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            # Check if it's the first occurrence\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1\n"], "plans": ["requirement analysis:\nThe function should efficiently find the first occurrence of a number in a sorted array, leveraging the sorted nature of the array for optimal performance. It should handle edge cases such as empty arrays and numbers not present in the array.\nrequirement pool:\n- Implement binary search to find the first occurrence efficiently\n- Handle edge cases like empty arrays and numbers not present\n- Optimize for large datasets\n- Provide clear documentation and examples\n- Ensure compatibility with existing codebases\nWe will implement a binary search algorithm to efficiently find the first occurrence of a given number in a sorted array. This approach leverages the sorted nature of the array for optimal performance. We will handle edge cases such as empty arrays and numbers not present in the array. The function will be simple to integrate into existing projects and will include clear documentation and examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'first occurrence'\n    Explanation: In the requirement, it means finding the index of the first time a given number appears in the sorted array.\n\n    'sorted array'\n    Explanation: The array is sorted in non-decreasing order, which allows for efficient searching using algorithms like binary search.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'first': means that we need to find the earliest index where the given number appears in the array.\n\n# [code logic]\n    1. Initialize two pointers, `left` and `right`, to the start and end of the array, respectively.\n    2. Use a binary search approach:\n        - Calculate the middle index `mid`.\n        - If the element at `mid` is equal to the target number, check if it is the first occurrence by ensuring that either `mid` is 0 or the element before `mid` is not equal to the target.\n        - If it is the first occurrence, return `mid`.\n        - If the element at `mid` is greater than or equal to the target, move the `right` pointer to `mid - 1`.\n        - Otherwise, move the `left` pointer to `mid + 1`.\n    3. If the target is not found, return -1.\n\n# [edge case] \n    find_first_occurrence([], 5) = -1\n    Explanation: The array is empty, so there is no occurrence of any number.\n    \n    find_first_occurrence([1, 2, 3, 4, 6], 5) = -1\n    Explanation: The number 5 is not present in the array, so the function should return -1.\n    \n    find_first_occurrence([5, 5, 5, 5], 5) = 0\n    Explanation: The number 5 appears multiple times, but the first occurrence is at index 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search logic inherently handles cases where the array is empty or the number is not present by returning -1 when no valid index is found.\n", "requirement analysis:\nThe function should efficiently find the first occurrence of a number in a sorted array, leveraging the sorted nature to optimize the search process. It should handle edge cases such as empty arrays and numbers not present in the array.\nrequirement pool:\n- Implement the main search function using binary search for efficiency.\n- Ensure the function handles edge cases like empty arrays.\n- Optimize the function for large datasets.\n- Provide comprehensive documentation for ease of integration.\n- Include test cases to validate functionality.\nWe will implement the function using a binary search algorithm to efficiently find the first occurrence of a number in a sorted array. This approach leverages the sorted nature of the array to optimize the search process. We will handle edge cases such as empty arrays and numbers not present in the array. The function will be documented for ease of integration and include test cases to validate its functionality.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array'\n    Explanation: The array is sorted, which allows us to use binary search for efficient searching.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'first': means we need to find the first occurrence of the number in the array\n\n# [code logic]\n    1. Initialize two pointers, `left` and `right`, to the start and end of the array respectively.\n    2. Use a while loop to perform binary search while `left` is less than or equal to `right`.\n    3. Calculate the middle index.\n    4. If the middle element is equal to the target number, check if it's the first occurrence by ensuring it's either the first element or the previous element is different.\n    5. If the middle element is greater than or equal to the target, move the `right` pointer to `mid - 1`.\n    6. If the middle element is less than the target, move the `left` pointer to `mid + 1`.\n    7. Return -1 if the number is not found.\n\n# [edge case] \n    find_first_occurrence([], 5) = -1\n    Explanation: The array is empty, so there is no occurrence of any number.\n    \n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    Explanation: The number 6 is not present in the array, so the function should return -1.\n    \n    find_first_occurrence([5, 5, 5, 5, 5], 5) = 0\n    Explanation: The number 5 appears multiple times, but we need the index of its first occurrence, which is at index 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search logic inherently handles empty arrays and numbers not present in the array by returning -1 when no match is found.\n", "requirement analysis:\nThe function should efficiently find the first occurrence of a number in a sorted array, ensuring optimal performance for large datasets. It should be easy to implement and understand, with clear documentation provided.\nrequirement pool:\n- Implement the main search function to find the first occurrence.\n- Optimize the function for performance with large arrays.\n- Provide comprehensive documentation for implementation.\n- Ensure compatibility with various data types.\n- Include error handling for invalid inputs.\nWe will implement a binary search algorithm to efficiently find the first occurrence of a number in a sorted array. This approach is optimal for large datasets and ensures quick search operations. We will use Python's built-in capabilities without additional libraries to keep the implementation simple and efficient.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'first occurrence'\n    Explanation: In the requirement, it means finding the index of the first time a given number appears in the sorted array.\n\n    'sorted array'\n    Explanation: The array is already sorted in non-decreasing order, which allows us to use binary search for efficient searching.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'first': means that we need to find the earliest index where the number appears in the array.\n\n# [code logic]\n    1. Initialize two pointers, `left` and `right`, to the start and end of the array, respectively.\n    2. Use a while loop to perform binary search while `left` is less than or equal to `right`.\n    3. Calculate the middle index `mid`.\n    4. If the element at `mid` is equal to the target number, check if it is the first occurrence by ensuring that either `mid` is 0 or the element before `mid` is not equal to the target. If true, return `mid`.\n    5. If the element at `mid` is greater than or equal to the target, move the `right` pointer to `mid - 1`.\n    6. If the element at `mid` is less than the target, move the `left` pointer to `mid + 1`.\n    7. If the loop ends without finding the target, return -1.\n\n# [edge case] \n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    Explanation: The number 6 does not exist in the array, so the function should return -1.\n    \n    find_first_occurrence([5, 5, 5, 5, 5], 5) = 0\n    Explanation: All elements are 5, so the first occurrence is at index 0.\n    \n    find_first_occurrence([], 3) = -1\n    Explanation: The array is empty, so there is no occurrence of any number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search logic inherently handles cases where the number does not exist or when dealing with an empty array.\n", "requirement analysis:\nThe function should efficiently find the first occurrence of a number in a sorted array. It should handle edge cases such as the number not being present and large datasets. The function should return the index of the first occurrence or -1 if the number is not found.\nrequirement pool:\n- Implement efficient search algorithm for sorted arrays.\n- Ensure accurate index return for first occurrence.\n- Optimize performance for large datasets.\n- Handle edge cases where the number is not present.\n- Provide clear documentation for function usage.\nWe will implement a binary search algorithm to efficiently find the first occurrence of a number in a sorted array. This approach is chosen because it is highly efficient for sorted arrays, with a time complexity of O(log n). We will handle edge cases such as the number not being present by returning -1 in such scenarios.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array'\n    Explanation: The array is sorted in ascending order, which allows us to use efficient search algorithms like binary search.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'first': means we need to find the first occurrence of the specified number in the array.\n\n# [code logic]\n    1. Implement a binary search algorithm to efficiently find the specified number.\n    2. Once the number is found, check if it is the first occurrence by comparing it with the previous element.\n    3. If it is the first occurrence, return its index.\n    4. If the number is not found, return -1.\n\n# [edge case] \n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    Explanation: The number 6 is not present in the array, so the expected output is -1.\n    \n    find_first_occurrence([2, 2, 2, 2, 2], 2) = 0\n    Explanation: The number 2 appears multiple times, but the first occurrence is at index 0.\n    \n    find_first_occurrence([], 3) = -1\n    Explanation: The array is empty, so there are no numbers to search for, and the expected output is -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search logic inherently handles cases where the number is not present or when the array is empty.\n", "requirement analysis:\nThe function should efficiently find the first occurrence of a number in a sorted array, ensuring it handles edge cases such as non-existent numbers and large datasets. The implementation should prioritize performance and accuracy.\nrequirement pool:\n- Implement the main search function using efficient algorithms.\n- Ensure the function returns correct index or -1 if not found.\n- Optimize for large datasets to maintain performance.\n- Consider edge cases like empty arrays or arrays without the number.\n- Provide clear documentation and examples.\nWe will use the bisect module from Python's standard library to efficiently find the first occurrence of a number in a sorted array. The bisect module provides a binary search implementation that is optimal for sorted arrays, ensuring both efficiency and accuracy. This approach will handle large datasets effectively and return -1 if the number is not found.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array'\n    Explanation: The array is sorted in ascending order, which allows for efficient searching using binary search techniques.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'first': means that we need to find the first occurrence of the specified number in the array.\n\n# [code logic]\n    1. Import the bisect module.\n    2. Use bisect.bisect_left to find the position where the number should be inserted to maintain sorted order.\n    3. Check if the number at this position is equal to the target number.\n    4. If it is, return this position as the index of the first occurrence.\n    5. If not, return -1 indicating the number is not present in the array.\n\n# [edge case] \n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    Explanation: The number 6 is not present in the array, so the function should return -1.\n    \n    find_first_occurrence([1, 1, 1, 1, 1], 1) = 0\n    Explanation: The number 1 appears multiple times, but the first occurrence is at index 0.\n    \n    find_first_occurrence([], 3) = -1\n    Explanation: The array is empty, so any search should return -1 as there are no elements to find.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic using bisect.bisect_left inherently handles these cases by checking if the found index actually contains the target number and returning -1 if it does not.\n", "requirement analysis:\nThe function should efficiently find the first occurrence of a number in a sorted array, ensuring it handles edge cases such as the number not being present or the array being empty.\nrequirement pool:\n- Implement efficient search algorithm\n- Handle edge cases gracefully\n- Optimize for large datasets\n- Provide clear error messages\n- Ensure compatibility with different data types\nWe will use the binary search algorithm to efficiently find the first occurrence of a number in a sorted array. This approach is optimal for large datasets due to its logarithmic time complexity. We will handle edge cases such as the number not being present or the array being empty by returning a clear result.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array'\n    Explanation: The array is sorted in ascending order, which allows us to use binary search to efficiently find the first occurrence of a number.\n\n    'first occurrence'\n    Explanation: We need to find the index of the first appearance of the specified number in the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'first': means we need to find the earliest index where the specified number appears in the array.\n\n# [code logic]\n    1. Initialize two pointers, `left` and `right`, to the start and end of the array, respectively.\n    2. Use a while loop to perform binary search while `left` is less than or equal to `right`.\n    3. Calculate the middle index `mid`.\n    4. If the element at `mid` is equal to the target number, check if it is the first occurrence by ensuring that either `mid` is 0 or the element before `mid` is not equal to the target.\n    5. If it is the first occurrence, return `mid`.\n    6. If the element at `mid` is greater than or equal to the target, move the `right` pointer to `mid - 1`.\n    7. If the element at `mid` is less than the target, move the `left` pointer to `mid + 1`.\n    8. If the loop ends without finding the target, return -1.\n\n# [edge case] \n    find_first_occurrence([], 5) = -1\n    Explanation: The array is empty, so there is no occurrence of any number.\n\n    find_first_occurrence([2, 3, 4], 5) = -1\n    Explanation: The number 5 is not present in the array, so the function should return -1.\n\n    find_first_occurrence([5, 5, 5, 5], 5) = 0\n    Explanation: The number 5 appears multiple times, but we need to return the index of its first occurrence, which is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search logic inherently handles cases where the number is not present or when the array is empty by returning -1.\n", "requirement analysis:\nThe requirement is to develop a function that efficiently finds the first occurrence of a specified number in a sorted array. The function should handle edge cases such as empty arrays and numbers not present in the array. It should also be optimized for performance, especially with large datasets.\nrequirement pool:\n- Implement the main function to find the first occurrence of a number in a sorted array.\n- Optimize the function for performance with large arrays.\n- Handle edge cases such as empty arrays and numbers not present.\n- Provide clear documentation and examples for usage.\n- Ensure compatibility with different Python versions.\nWe will implement a function using Python's built-in capabilities to efficiently find the first occurrence of a number in a sorted array. The function will utilize binary search to optimize performance for large datasets, ensuring O(log n) complexity. We will handle edge cases such as empty arrays and numbers not present in the array. The function will be documented with examples and edge case handling.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array'\n    Explanation: The array is sorted, which allows us to use binary search for efficient searching.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'first': means we need to find the first occurrence of the number in the array\n\n# [code logic]\n    - Implement binary search to find the target number.\n    - Once the target is found, check if it's the first occurrence by verifying if the previous element is different.\n    - If the target is not found, return -1.\n\n# [edge case] \n    find_first_occurrence([], 5) = -1\n    Explanation: The array is empty, so the number cannot be found, resulting in -1.\n    \n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    Explanation: The number 6 is not present in the array, so the function returns -1.\n    \n    find_first_occurrence([5, 5, 5, 5, 5], 5) = 0\n    Explanation: The number 5 appears multiple times, but the first occurrence is at index 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not array:\n            return -1\n        # Implement binary search logic\n        left, right = 0, len(array) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if array[mid] == target:\n                # Check if it's the first occurrence\n                if mid == 0 or array[mid - 1] != target:\n                    return mid\n                else:\n                    right = mid - 1\n            elif array[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n", "requirement analysis:\nThe requirement is to develop a function that efficiently finds the first occurrence of a number in a sorted array. The function should be optimized for performance, especially with large datasets, and should be easy to understand and implement.\nrequirement pool:\n- Implement the main search function to find the first occurrence.\n- Optimize the function for performance with large arrays.\n- Provide comprehensive documentation for the function.\n- Ensure compatibility with different data types in the array.\n- Include error handling for invalid inputs.\nWe will implement a binary search algorithm to efficiently find the first occurrence of a number in a sorted array. This approach is optimal for performance, especially with large datasets, as it reduces the time complexity to O(log n). We will use Python's built-in capabilities without external libraries to keep the implementation simple and efficient.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'first occurrence'\n    Explanation: In the requirement, it means finding the index of the first time a given number appears in the sorted array.\n\n    'sorted array'\n    Explanation: The array is already sorted in non-decreasing order, which allows us to use binary search for efficient searching.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'first': means that we need to find the earliest index where the number appears in the array.\n\n# [code logic]\n    1. Initialize two pointers, `left` and `right`, to the start and end of the array, respectively.\n    2. Use a while loop to perform binary search while `left` is less than or equal to `right`.\n    3. Calculate the middle index `mid`.\n    4. If the element at `mid` is equal to the target number, check if it's the first occurrence by ensuring it's either the first element or the previous element is different. If so, return `mid`.\n    5. If the element at `mid` is greater than or equal to the target, move the `right` pointer to `mid - 1`.\n    6. If the element at `mid` is less than the target, move the `left` pointer to `mid + 1`.\n    7. If the loop ends without finding the target, return -1.\n\n# [edge case] \n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    Explanation: The number 6 does not exist in the array, so the function should return -1.\n    \n    find_first_occurrence([5, 5, 5, 5, 5], 5) = 0\n    Explanation: All elements are 5, so the first occurrence is at index 0.\n    \n    find_first_occurrence([], 3) = -1\n    Explanation: The array is empty, so there is no occurrence of any number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search logic inherently handles cases where the number does not exist or when dealing with an empty array.\n", "requirement analysis:\nThe function should efficiently find the first occurrence of a number in a sorted array, ensuring optimal performance for large datasets. It should be easy to use and integrate, with clear documentation provided.\nrequirement pool:\n- Implement the main search function to find the first occurrence.\n- Optimize the function for performance with large arrays.\n- Provide comprehensive documentation for ease of integration.\n- Ensure compatibility with existing Python projects.\n- Include error handling for edge cases.\nWe will use the bisect module from Python's standard library to efficiently find the first occurrence of a number in a sorted array. The bisect module provides a binary search implementation that is both efficient and easy to use, making it ideal for handling large datasets. This approach ensures optimal performance and ease of integration into existing projects.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'first occurrence'\n    Explanation: In the requirement, it means finding the index of the first time a given number appears in the sorted array.\n\n    'sorted array'\n    Explanation: The array is already sorted in non-decreasing order, which allows for efficient searching techniques like binary search.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'first': means that we need to find the earliest index where the number appears in the array.\n\n# [code logic]\n    1. Import the bisect module.\n    2. Use bisect.bisect_left to find the insertion point for the given number in the sorted array.\n    3. Check if the number at the found index is equal to the target number.\n    4. If it is, return the index; otherwise, return -1 indicating the number is not present.\n\n# [edge case] \n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    Explanation: The number 6 is not present in the array, so the function should return -1.\n    \n    find_first_occurrence([], 3) = -1\n    Explanation: The array is empty, so there are no elements to search, and the function should return -1.\n    \n    find_first_occurrence([2, 2, 2, 2], 2) = 0\n    Explanation: The number 2 appears multiple times, but the first occurrence is at index 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic using bisect.bisect_left inherently handles these cases by checking if the found index contains the target number and returning -1 if it does not.\n", "requirement analysis:\nThe function should efficiently find the first occurrence of a number in a sorted array, leveraging the sorted property to optimize the search. It should handle edge cases such as empty arrays and numbers not present in the array.\nrequirement pool:\n- Implement the main function to find the first occurrence of a number.\n- Optimize the function for large datasets.\n- Document the function with examples and edge cases.\n- Ensure compatibility with Python 3.x versions.\n- Include unit tests to verify functionality.\nWe will implement a binary search algorithm to efficiently find the first occurrence of a number in a sorted array. This approach leverages the sorted property of the array to optimize the search process, ensuring the function performs well with large datasets. We will use Python's built-in capabilities without additional libraries to maintain simplicity and compatibility with existing Python versions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'first occurrence'\n    Explanation: In the requirement, it means finding the index of the first time a given number appears in the sorted array.\n\n    'sorted array'\n    Explanation: The array is sorted in non-decreasing order, which allows us to use binary search for efficient searching.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'first': means we need to find the earliest index where the number appears in the array.\n\n# [code logic]\n    1. Initialize two pointers, `left` and `right`, to the start and end of the array, respectively.\n    2. Use a while loop to perform binary search while `left` is less than or equal to `right`.\n    3. Calculate the middle index `mid`.\n    4. If the element at `mid` is equal to the target number, check if it is the first occurrence by ensuring either `mid` is 0 or the element before `mid` is not equal to the target.\n    5. If it is the first occurrence, return `mid`.\n    6. If the element at `mid` is greater than or equal to the target, move the `right` pointer to `mid - 1`.\n    7. Otherwise, move the `left` pointer to `mid + 1`.\n    8. If the loop ends without finding the target, return -1.\n\n# [edge case] \n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    Explanation: The number 6 does not exist in the array, so the function should return -1.\n\n    find_first_occurrence([5, 5, 5, 5, 5], 5) = 0\n    Explanation: All elements are the same as the target, so the first occurrence is at index 0.\n\n    find_first_occurrence([], 3) = -1\n    Explanation: The array is empty, so there is no occurrence of any number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search logic inherently handles cases where the target is not found or when dealing with an empty array.\n"], "test": ["def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 3, 2, 7, 8, 3, 13, 4, 11, 9], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 6, 1, 6, 7, 10, 9, 5, 12, 10], 4) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 1, 8, 10, 7, 11, 6, 12, 6, 13], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 9, 3, 4, 9, 13, 5, 7, 12], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 9, 6, 3, 7, 2, 11, 5, 13, 6], 3) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 4, 8, 4, 7, 10, 12, 10, 14, 13], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 10, 9, 8, 2, 10, 4, 13, 14, 12], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 3, 7, 3, 2, 7, 8, 7, 13], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 10, 9, 8, 1, 4, 13, 10, 4, 9], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 2, 5, 3, 5, 13, 12, 4, 6], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 3, 3, 10, 9, 10, 9, 4, 13], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 5, 1, 5, 9, 6, 6, 13, 12, 10], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 10, 3, 4, 6, 8, 3, 9, 10, 14], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 1, 7, 9, 9, 5, 12, 7, 11, 10], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 5, 5, 10, 5, 9, 11, 4, 5, 7], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 7, 2, 5, 11, 2, 9, 13, 11, 9], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 7, 1, 5, 1, 5, 6, 7, 6, 12], 7) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 9, 6, 10, 7, 10, 6, 5, 5], 10) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 3, 10, 8, 7, 12, 10, 11, 12], 2) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 7, 3, 3, 7, 7, 5, 7, 13, 6], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 7, 4, 1, 4, 9, 6, 14, 13, 8], 4) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 1, 6, 10, 4, 11, 5, 10, 12], 5) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 2, 7, 7, 1, 7, 9, 13, 9, 14], 7) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 8, 1, 2, 3, 5, 7, 10, 4, 10], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 2, 9, 9, 11, 9, 3, 13, 7, 9], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 9, 6, 5, 9, 5, 3, 12, 6, 12], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 4, 5, 6, 11, 8, 11, 10, 14, 10], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 5, 9, 8, 4, 11, 10, 13, 11, 5], 4) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 1, 3, 8, 3, 7, 6, 11, 4, 10], 3) == 2", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 1, 8, 3, 10, 6, 5, 10, 11, 9], 10) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 9, 4, 1, 2, 1, 11, 10, 13, 6], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 8, 1, 10, 9, 13, 6, 7, 7], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 1, 5, 10, 5, 10, 6, 11, 12], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 7, 7, 5, 6, 1, 6, 6, 14, 12], 2) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 10, 2, 2, 3, 7, 8, 12, 5], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 1, 5, 8, 3, 1, 12, 8, 5, 5], 8) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 7, 5, 2, 1, 3, 11, 7, 6, 12], 7) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 6, 8, 3, 4, 1, 6, 11, 4, 10], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 5, 10, 8, 1, 9, 13, 8, 14, 10], 8) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 8, 7, 2, 11, 5, 7, 9, 9, 9], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 9, 4, 3, 10, 4, 4, 7, 9], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 4, 3, 9, 10, 9, 11, 14, 14, 9], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 1, 4, 3, 7, 4, 6, 10, 4, 10], 1) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 5, 6, 5, 8, 3, 9, 14, 14, 11], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 1, 1, 9, 9, 10, 13, 10, 11, 5], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 1, 2, 3, 4, 5, 8, 12, 11], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 2, 1, 9, 8, 11, 3, 6, 8, 4], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 8, 8, 7, 8, 3, 5, 11, 14, 12], 8) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 3, 3, 10, 1, 3, 10, 14, 13, 8], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 4, 1, 10, 11, 5, 7, 13, 4, 8], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 4, 9, 8, 2, 10, 10, 11, 8, 5], 10) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 7, 10, 5, 8, 11, 11, 13, 12, 6], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 7, 6, 8, 4, 5, 4, 4, 7], 8) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 2, 4, 10, 11, 8, 3, 6, 10, 12], 2) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 6, 7, 2, 10, 1, 7, 12, 14, 7], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 1, 4, 2, 3, 8, 8, 12, 12, 4], 1) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 1, 10, 9, 3, 11, 7, 8, 11, 5], 3) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 2, 9, 1, 7, 3, 3, 4, 5, 5], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 3, 9, 1, 11, 7, 11, 11, 6, 13], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 7, 5, 1, 2, 1, 11, 5, 11, 11], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 5, 9, 6, 11, 1, 6, 5, 12, 12], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 4, 9, 2, 8, 9, 11, 11, 13], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 9, 9, 6, 11, 3, 9, 8, 5], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 1, 6, 8, 4, 8, 10, 10, 10, 10], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 5, 8, 4, 6, 9, 11, 10, 8, 14], 9) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 2, 1, 5, 4, 3, 9, 4, 12, 11], 4) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 1, 5, 2, 1, 6, 3, 13, 9, 9], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 5, 1, 4, 10, 2, 5, 11, 11, 5], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 5, 3, 8, 1, 5, 11, 9, 8, 4], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 6, 6, 2, 3, 1, 10, 14, 4, 11], 11) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 8, 3, 2, 8, 1, 6, 10, 9, 4], 10) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 1, 4, 3, 3, 4, 14, 7, 13], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 5, 3, 8, 8, 10, 8, 11, 13], 5) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 7, 4, 2, 8, 10, 5, 8, 4, 9], 4) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 9, 2, 5, 10, 1, 3, 5, 13, 6], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 3, 4, 9, 3, 10, 13, 6, 14, 5], 11) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 4, 5, 9, 11, 4, 6, 8, 12, 4], 4) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 3, 2, 1, 7, 8, 12, 10, 9, 5], 8) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 8, 5, 3, 6, 8, 5, 10, 13, 10], 11) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 9, 3, 7, 4, 11, 9, 11, 7, 6], 2) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 3, 5, 4, 7, 10, 5, 5, 14, 13], 2) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 6, 3, 8, 6, 9, 9, 7, 5], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 1, 1, 10, 8, 10, 4, 9, 7, 10], 8) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 1, 4, 4, 3, 10, 9, 9, 11, 13], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 4, 5, 5, 10, 5, 9, 8, 6, 8], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 1, 4, 7, 5, 4, 11, 10, 4, 10], 1) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 2, 4, 2, 11, 4, 11, 12, 7, 10], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 2, 4, 8, 4, 13, 4, 4, 14], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 7, 4, 8, 5, 1, 9, 5, 4, 10], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 4, 3, 8, 8, 7, 13, 11, 14], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 2, 4, 5, 11, 12, 13, 4, 4], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 9, 5, 8, 7, 9, 8, 11, 9, 9], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 8, 4, 1, 3, 8, 10, 14, 7, 13], 2) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 3, 2, 5, 5, 6, 13, 7, 7], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 3, 5, 11, 4, 4, 13, 13, 7], 2) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 3, 5, 8, 11, 7, 7, 4, 7, 5], 3) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 6, 3, 10, 9, 6, 10, 9, 5, 4], 1) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 2, 4, 1, 9, 3, 12, 13, 5, 7], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 6, 1, 5, 9, 5, 9, 12, 13, 11], 5) == -1"], "scores": [0.9804, 0.9804, 0.9804, 0.9804, 0.7255, 0.9804, 0.9804, 0.9804, 0.7255, 0.9804], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [100, 100, 100, 100, 74, 100, 100, 100, 74, 100], "completion": "from typing import List\n## main.py\n\ndef find_first_occurrence(arr: list[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of a target number in a sorted array.\n\n    Parameters:\n    arr (list[int]): A sorted list of integers.\n    target (int): The number to find the first occurrence of.\n\n    Returns:\n    int: The index of the first occurrence of the target number, or -1 if not found.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            # Check if it's the first occurrence\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1\n", "passed": false, "pass": false, "pass_num": 0, "round": 223, "mutate_method": "condense_two2one", "parent_index": 223}
