{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 731, "prompt": "Write a function to find the lateral surface area of a cone given radius r and the height h.", "code": "import math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA", "test_imports": [], "test_list": ["assert lateralsurface_cone(5,12)==204.20352248333654", "assert lateralsurface_cone(10,15)==566.3586699569488", "assert lateralsurface_cone(19,17)==1521.8090132193388", "assert lateralsurface_cone(4, 10) == 135.3439535717124", "assert lateralsurface_cone(8, 11) == 341.84223862609196", "assert lateralsurface_cone(10, 14) == 540.5000372546194", "assert lateralsurface_cone(10, 17) == 619.6189241803191", "assert lateralsurface_cone(2, 17) == 107.55080826324239", "assert lateralsurface_cone(1, 11) == 34.700025027842585", "assert lateralsurface_cone(10, 17) == 619.6189241803191", "assert lateralsurface_cone(3, 12) == 116.5780650907367", "assert lateralsurface_cone(1, 15) == 47.22849346153437", "assert lateralsurface_cone(9, 14) == 470.5787011194216", "assert lateralsurface_cone(7, 8) == 233.76911594312833", "assert lateralsurface_cone(6, 12) == 252.89333031746617", "assert lateralsurface_cone(10, 13) == 515.25950586991", "assert lateralsurface_cone(9, 7) == 322.3770065365564", "assert lateralsurface_cone(9, 14) == 470.5787011194216", "assert lateralsurface_cone(9, 15) == 494.59884217959996", "assert lateralsurface_cone(10, 9) == 422.6580647044575", "assert lateralsurface_cone(5, 17) == 278.3458182702795", "assert lateralsurface_cone(6, 15) == 304.52389553635294", "assert lateralsurface_cone(4, 12) == 158.95341225273762", "assert lateralsurface_cone(6, 9) == 203.88912118450162", "assert lateralsurface_cone(8, 16) == 449.5881427866065", "assert lateralsurface_cone(9, 11) == 401.85378834922545", "assert lateralsurface_cone(8, 8) == 284.34450804213543", "assert lateralsurface_cone(1, 10) == 31.572615420804546", "assert lateralsurface_cone(6, 17) == 339.8152019741693", "assert lateralsurface_cone(1, 14) == 44.09435413989645", "assert lateralsurface_cone(5, 7) == 135.12500931365486", "assert lateralsurface_cone(1, 13) == 40.9613567668991", "assert lateralsurface_cone(1, 10) == 31.572615420804546", "assert lateralsurface_cone(1, 13) == 40.9613567668991", "assert lateralsurface_cone(4, 7) == 101.31331885360844", "assert lateralsurface_cone(8, 9) == 302.63828052992443", "assert lateralsurface_cone(7, 10) == 268.43617813616964", "assert lateralsurface_cone(14, 16) == 935.0764637725133", "assert lateralsurface_cone(6, 12) == 252.89333031746617", "assert lateralsurface_cone(6, 17) == 339.8152019741693", "assert lateralsurface_cone(6, 14) == 287.1078820894653", "assert lateralsurface_cone(6, 20) == 393.59028275542903", "assert lateralsurface_cone(6, 18) == 357.6451775686596", "assert lateralsurface_cone(11, 19) == 758.6929997570384", "assert lateralsurface_cone(13, 15) == 810.6648374334094", "assert lateralsurface_cone(15, 11) == 876.5550197362436", "assert lateralsurface_cone(11, 12) == 562.5556551319436", "assert lateralsurface_cone(11, 20) == 788.7900424378303", "assert lateralsurface_cone(14, 12) == 810.9934878213232", "assert lateralsurface_cone(9, 18) == 569.0099932142988", "assert lateralsurface_cone(14, 12) == 810.9934878213232", "assert lateralsurface_cone(9, 13) == 447.0564719608245", "assert lateralsurface_cone(9, 18) == 569.0099932142988", "assert lateralsurface_cone(12, 16) == 753.9822368615503", "assert lateralsurface_cone(10, 11) == 467.03132364336636", "assert lateralsurface_cone(14, 18) == 1002.9506870026199", "assert lateralsurface_cone(15, 10) == 849.5380049354233", "assert lateralsurface_cone(14, 10) == 756.7000521564672", "assert lateralsurface_cone(14, 17) == 968.6096191797571", "assert lateralsurface_cone(11, 12) == 562.5556551319436", "assert lateralsurface_cone(14, 10) == 756.7000521564672", "assert lateralsurface_cone(13, 16) == 841.9526923219875", "assert lateralsurface_cone(5, 13) == 218.78661143973912", "assert lateralsurface_cone(12, 11) == 613.6970783257566", "assert lateralsurface_cone(12, 11) == 613.6970783257566", "assert lateralsurface_cone(8, 20) == 541.3758142868496", "assert lateralsurface_cone(9, 16) == 519.0477736553122", "assert lateralsurface_cone(7, 20) == 465.98408387880266", "assert lateralsurface_cone(13, 19) == 940.2236256367811", "assert lateralsurface_cone(19, 22) == 1735.1292385670592", "assert lateralsurface_cone(22, 16) == 1880.1323124435057", "assert lateralsurface_cone(22, 19) == 2009.0970130776475", "assert lateralsurface_cone(24, 13) == 2057.9710009121764", "assert lateralsurface_cone(14, 16) == 935.0764637725133", "assert lateralsurface_cone(22, 18) == 1964.6185208184352", "assert lateralsurface_cone(19, 15) == 1444.9482110556244", "assert lateralsurface_cone(21, 19) == 1868.3418915675168", "assert lateralsurface_cone(15, 12) == 905.2203628953802", "assert lateralsurface_cone(15, 19) == 1140.748587675493", "assert lateralsurface_cone(21, 16) == 1741.7489463162146", "assert lateralsurface_cone(17, 15) == 1210.8221402684294", "assert lateralsurface_cone(22, 12) == 1732.0178974017306", "assert lateralsurface_cone(22, 22) == 2150.355342068649", "assert lateralsurface_cone(17, 16) == 1246.8007223263787", "assert lateralsurface_cone(24, 16) == 2174.8172926346833", "assert lateralsurface_cone(16, 20) == 1287.4245161178742", "assert lateralsurface_cone(17, 12) == 1111.3292428165107", "assert lateralsurface_cone(23, 12) == 1874.4991197817697", "assert lateralsurface_cone(19, 17) == 1521.8090132193388", "assert lateralsurface_cone(20, 19) == 1733.2938526665353", "assert lateralsurface_cone(16, 15) == 1102.4080948235726", "assert lateralsurface_cone(24, 22) == 2454.7883133030264", "assert lateralsurface_cone(15, 22) == 1254.7703543213713", "assert lateralsurface_cone(17, 20) == 1401.8721403713373", "assert lateralsurface_cone(16, 14) == 1068.6588157400154", "assert lateralsurface_cone(15, 19) == 1140.748587675493", "assert lateralsurface_cone(19, 17) == 1521.8090132193388", "assert lateralsurface_cone(20, 15) == 1570.7963267948965", "assert lateralsurface_cone(17, 17) == 1283.9931691277677", "assert lateralsurface_cone(17, 21) == 1442.9797089695412", "assert lateralsurface_cone(24, 13) == 2057.9710009121764", "assert lateralsurface_cone(15, 16) == 1033.5075888970994"], "entry_point": "lateralsurface_cone", "repair_prompt": ["Write a function lateralsurface_cone to find the lateral surface area of a cone given radius r and the height h.\nlateralsurface_cone(5,12)==204.20352248333654\n", "Write a function lateralsurface_cone to find the lateral surface area of a cone given radius r and the height h. The formula for the lateral surface area involves using the slant height. The slant height is the length of the line from the base to the apex of the cone along its side.\nlateralsurface_cone(5,12)==204.20352248333654\n", "Write a function lateralsurface_cone to find the lateral surface area of a cone given radius r and the height h.\nlateralsurface_cone(5,12)==204.20352248333654\n"], "completions": ["from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Args:\n        r (float): Radius of the base of the cone.\n        h (float): Height of the cone.\n\n    Returns:\n        float: Lateral surface area of the cone, or a message indicating invalid input.\n    \"\"\"\n    # Check for invalid inputs\n    if r <= 0:\n        return \"Invalid input: radius must be greater than zero.\"\n    elif h <= 0:\n        return \"Invalid input: height must be greater than zero.\"\n\n    # Calculate the slant height\n    slant_height = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * slant_height\n\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the cone's base. Must be positive.\n    h (float): The height of the cone. Must be positive.\n\n    Returns:\n    float: The lateral surface area of the cone if inputs are valid, otherwise raises ValueError.\n    \"\"\"\n    # Validate inputs\n    if r <= 0 or h <= 0:\n        raise ValueError(\"Invalid input: radius and height must be positive numbers.\")\n\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone, or raises a ValueError for invalid inputs.\n    \"\"\"\n    # Validate inputs\n    if r <= 0 or h <= 0:\n        raise ValueError(\"Invalid input: Radius and height must be greater than zero.\")\n\n    # Calculate the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2)\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If the radius or height is negative.\n    TypeError: If the inputs are not numeric.\n    \"\"\"\n    # Validate inputs\n    if not isinstance(r, (int, float)) or not isinstance(h, (int, float)):\n        raise TypeError(\"Radius and height must be numeric values.\")\n    \n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n    \n    if r == 0 or h == 0:\n        return 0.0\n\n    # Calculate slant height using the Pythagorean theorem\n    l = math.sqrt(r**2 + h**2)\n\n    # Calculate lateral surface area\n    area = math.pi * r * l\n\n    return area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone. Must be positive.\n    h (float): The height of the cone. Must be positive.\n\n    Returns:\n    float: The lateral surface area of the cone, or a string message if inputs are invalid.\n    \"\"\"\n    # Check for invalid input values\n    if r <= 0:\n        return \"Invalid input: radius must be positive\"\n    if h <= 0:\n        return \"Invalid input: height must be positive\"\n\n    # Calculate the slant height using the Pythagorean theorem\n    l = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area\n    area = math.pi * r * l\n\n    return area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the cone's base.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If the radius or height is negative.\n    TypeError: If the inputs are not numbers.\n    \"\"\"\n    # Validate input types\n    if not isinstance(r, (int, float)) or not isinstance(h, (int, float)):\n        raise TypeError(\"Radius and height must be numbers\")\n\n    # Validate input values\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative\")\n\n    # Calculate the slant height using the Pythagorean theorem\n    l = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * l\n\n    return lateral_surface_area\n\n# Example usage:\n# print(lateralsurface_cone(5, 12))  # Expected output: 204.20352248333654\n# print(lateralsurface_cone(0, 12))  # Expected output: 0\n# print(lateralsurface_cone(5, 0))   # Expected output: 78.53981633974483\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone, or a string indicating invalid input.\n    \"\"\"\n    # Validate inputs\n    if r <= 0 or h <= 0:\n        return \"Invalid input\"\n\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If the radius or height is negative.\n    \"\"\"\n    # Validate inputs\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative\")\n\n    # Calculate the slant height using the Pythagorean theorem\n    slant_height = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area using the formula \u03c0 * r * l\n    lateral_surface_area = math.pi * r * slant_height\n\n    return lateral_surface_area\n\n# Example usage:\n# print(lateralsurface_cone(5, 12))  # Expected output: 204.20352248333654\n# print(lateralsurface_cone(0, 0))   # Expected output: 0.0\n# print(lateralsurface_cone(-5, 12)) # Expected to raise ValueError\n# print(lateralsurface_cone(5, -12)) # Expected to raise ValueError\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone, or an error message if inputs are invalid.\n    \"\"\"\n    if r < 0:\n        return \"Error: Radius cannot be negative\"\n    if h < 0:\n        return \"Error: Height cannot be negative\"\n    if r == 0 or h == 0:\n        return 0.0\n\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone. Must be positive.\n    h (float): The height of the cone. Must be positive.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If r or h is less than or equal to zero.\n    \"\"\"\n    if r <= 0 or h <= 0:\n        raise ValueError(\"Invalid input: radius and height must be positive numbers.\")\n    \n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_surface_area\n"], "plans": ["requirement analysis:\nThe requirement is to develop a function that calculates the lateral surface area of a cone using the given radius and height. The formula for the lateral surface area of a cone is \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). The function should return a precise floating-point result.\nrequirement pool:\n- Implement the function to calculate the lateral surface area of a cone.\n- Ensure the function handles edge cases like zero or negative inputs gracefully.\n- Optimize the function for performance with large input values.\n- Create a simple user interface for input and output display.\n- Add additional features like unit conversion.\nWe will implement a simple function using Python's math library to perform the necessary calculations for the lateral surface area of a cone. The function will take two numeric inputs, radius and height, and will calculate the slant height using the formula sqrt(r^2 + h^2). The lateral surface area will then be calculated using the formula \u03c0 * r * l. We will ensure the function handles edge cases like zero or negative inputs gracefully by returning a message indicating invalid input.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: The lateral surface area of a cone is the area of the cone's side, excluding the base. It is calculated using the formula \u03c0 * r * l, where r is the radius and l is the slant height.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math library to use mathematical functions.\n    2. Define the function lateralsurface_cone with parameters r and h.\n    3. Calculate the slant height using the formula sqrt(r^2 + h^2).\n    4. Calculate the lateral surface area using the formula \u03c0 * r * l.\n    5. Return the calculated lateral surface area.\n    6. Handle edge cases by checking if r or h are zero or negative, and return an appropriate message.\n\n# [edge case] \n    lateralsurface_cone(0, 12) = \"Invalid input: radius must be greater than zero.\"\n    Explanation: A cone with a radius of zero does not exist, so the function should return an error message.\n    \n    lateralsurface_cone(5, 0) = \"Invalid input: height must be greater than zero.\"\n    Explanation: A cone with a height of zero does not exist, so the function should return an error message.\n    \n    lateralsurface_cone(-5, 12) = \"Invalid input: radius must be greater than zero.\"\n    Explanation: A negative radius is not valid for a cone, so the function should return an error message.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if r <= 0:\n            return \"Invalid input: radius must be greater than zero.\"\n        elif h <= 0:\n            return \"Invalid input: height must be greater than zero.\"\n        (other code)\n", "requirement analysis:\nThe function should accurately calculate the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2). It should handle various input types and edge cases, ensuring performance and usability.\nrequirement pool:\n- Implement the main function to calculate lateral surface area.\n- Ensure the function handles edge cases like zero or negative values.\n- Optimize the function for performance with large inputs.\n- Provide documentation for the function usage.\n- Include unit tests to verify function accuracy.\nWe will implement a function named `lateralsurface_cone` that calculates the lateral surface area of a cone using the formula: \u03c0 * r * sqrt(r^2 + h^2). We will use the `math` library for accurate mathematical calculations. The function will include input validation to handle edge cases such as zero or negative values for radius and height. If such values are provided, the function will return a message indicating invalid input. The function will be optimized for performance to handle large inputs efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: The lateral surface area of a cone is the area of the cone's side, excluding the base. It is calculated using the formula \u03c0 * r * sqrt(r^2 + h^2), where r is the radius and h is the height.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Import the `math` library for accurate calculations.\n    - Define the function `lateralsurface_cone` with parameters `r` and `h`.\n    - Validate the inputs to ensure `r` and `h` are positive numbers.\n    - Calculate the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2).\n    - Return the calculated area.\n\n# [edge case] \n    lateralsurface_cone(0, 12) = \"Invalid input\"\n    Explanation: A radius of 0 is not valid for a cone, so the function should return an invalid input message.\n    \n    lateralsurface_cone(5, 0) = \"Invalid input\"\n    Explanation: A height of 0 is not valid for a cone, so the function should return an invalid input message.\n    \n    lateralsurface_cone(-5, 12) = \"Invalid input\"\n    Explanation: Negative values for radius are not valid, so the function should return an invalid input message.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if r <= 0 or h <= 0:\n            return \"Invalid input\"\n        (other code)\n", "requirement analysis:\nThe function should accurately compute the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2). It must handle typical input values efficiently and return results with high precision.\nrequirement pool:\n- Implement the main function to calculate lateral surface area\n- Ensure precision in mathematical calculations\n- Optimize the function for performance\n- Provide documentation for the function usage\n- Include error handling for invalid inputs\nWe will implement a function to calculate the lateral surface area of a cone using the formula: \u03c0 * r * sqrt(r^2 + h^2). We will use the math library for precise calculations and ensure the function handles typical input values efficiently. We will also include error handling for invalid inputs such as zero or negative values for radius and height.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: The lateral surface area of a cone is the area of the cone's side, excluding the base. It is calculated using the formula: \u03c0 * r * sqrt(r^2 + h^2), where r is the radius and h is the height.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math library to use mathematical functions like sqrt and pi.\n    2. Define the function lateralsurface_cone with parameters r and h.\n    3. Check if r and h are valid (greater than zero) to avoid invalid inputs.\n    4. Calculate the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2).\n    5. Return the calculated lateral surface area.\n\n# [edge case] \n    lateralsurface_cone(0, 12) = \"Invalid input\"\n    Explanation: Radius cannot be zero for a valid cone, so the function should handle this as an invalid input.\n    \n    lateralsurface_cone(5, -12) = \"Invalid input\"\n    Explanation: Height cannot be negative for a valid cone, so the function should handle this as an invalid input.\n    \n    lateralsurface_cone(0, 0) = \"Invalid input\"\n    Explanation: Both radius and height cannot be zero for a valid cone, so the function should handle this as an invalid input.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if r <= 0 or h <= 0:\n            return \"Invalid input\"\n        (other code)\n", "requirement analysis:\nThe requirement is to calculate the lateral surface area of a cone using the given radius and height. The formula involves calculating the slant height first, which is derived from the Pythagorean theorem. The lateral surface area is then calculated using the formula \u03c0 * r * l, where l is the slant height.\nrequirement pool:\n- Implement the function to calculate lateral surface area using the correct formula.\n- Create a user-friendly interface for inputting radius and height.\n- Provide a brief explanation of the formula used.\n- Optimize the function for performance.\n- Ensure the function handles edge cases gracefully.\nWe will implement a function to calculate the lateral surface area of a cone using the formula \u03c0 * r * l, where l is the slant height calculated using the Pythagorean theorem. We will use the math library for accurate mathematical calculations. The function will be optimized for performance and will handle edge cases such as non-numeric inputs or negative values gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: The lateral surface area of a cone is the area of the cone's side, excluding the base. It is calculated using the formula \u03c0 * r * l, where r is the radius of the base and l is the slant height.\n\n    'slant height'\n    Explanation: The slant height is the length of the line from the base to the apex of the cone along its side. It can be calculated using the Pythagorean theorem as \u221a(r\u00b2 + h\u00b2), where r is the radius and h is the height of the cone.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math library to use \u03c0 and square root functions.\n    2. Define the function lateralsurface_cone with parameters r and h.\n    3. Calculate the slant height l using the formula l = math.sqrt(r**2 + h**2).\n    4. Calculate the lateral surface area using the formula area = math.pi * r * l.\n    5. Return the calculated area.\n\n# [edge case] \n    lateralsurface_cone(0, 12) = 0\n    Explanation: If the radius is zero, the lateral surface area will be zero because there is no side surface.\n\n    lateralsurface_cone(5, 0) = 0\n    Explanation: If the height is zero, the cone becomes a flat circle, and thus, there is no lateral surface area.\n\n    lateralsurface_cone(-5, 12) = Error or Exception\n    Explanation: Negative values for radius or height are not physically meaningful for a cone, so an error or exception should be raised.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        import math\n\n        def lateralsurface_cone(r, h):\n            if r < 0 or h < 0:\n                raise ValueError(\"Radius and height must be non-negative\")\n            if r == 0 or h == 0:\n                return 0\n            l = math.sqrt(r**2 + h**2)\n            area = math.pi * r * l\n            return area\n", "requirement analysis:\nThe function should accurately calculate the lateral surface area using the formula involving the slant height, which is derived from the Pythagorean theorem. It should handle various input sizes and provide results with high precision.\nrequirement pool:\n- Implement the function to calculate lateral surface area using the correct formula\n- Ensure the function handles edge cases like zero or negative inputs\n- Provide documentation explaining the formula and usage\n- Optimize the function for performance with large inputs\n- Include unit tests to verify accuracy\nWe will implement a function named `lateralsurface_cone` that calculates the lateral surface area of a cone using the formula: Lateral Surface Area = \u03c0 * r * l, where l is the slant height calculated using the Pythagorean theorem as l = sqrt(r^2 + h^2). We will use the `math` library for accurate mathematical calculations. The function will handle edge cases by checking for non-positive values of radius and height and returning an appropriate message or value.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: The lateral surface area of a cone is the area of the cone's side, excluding the base. It is calculated using the formula \u03c0 * r * l, where r is the radius of the base and l is the slant height.\n\n    'slant height'\n    Explanation: The slant height is the length of the line from the base to the apex of the cone along its side. It can be calculated using the Pythagorean theorem as l = sqrt(r^2 + h^2).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the `math` library to use mathematical functions.\n    2. Define the function `lateralsurface_cone` with parameters `r` and `h`.\n    3. Calculate the slant height `l` using the formula `l = math.sqrt(r**2 + h**2)`.\n    4. Calculate the lateral surface area using the formula `area = math.pi * r * l`.\n    5. Return the calculated area.\n\n# [edge case] \n    lateralsurface_cone(0, 12) = \"Invalid input: radius must be positive\"\n    Explanation: A radius of 0 is not valid for a cone, so the function should return an error message.\n    \n    lateralsurface_cone(5, 0) = \"Invalid input: height must be positive\"\n    Explanation: A height of 0 is not valid for a cone, so the function should return an error message.\n    \n    lateralsurface_cone(-5, 12) = \"Invalid input: radius must be positive\"\n    Explanation: A negative radius is not valid for a cone, so the function should return an error message.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if r <= 0:\n            return \"Invalid input: radius must be positive\"\n        if h <= 0:\n            return \"Invalid input: height must be positive\"\n        (other code)\n", "requirement analysis:\nThe function should accurately compute the lateral surface area using the formula involving the slant height, which is derived from the Pythagorean theorem. The function must handle typical input values for radius and height efficiently.\nrequirement pool:\n- Implement the function to calculate lateral surface area using the correct formula.\n- Ensure the function handles edge cases like zero or negative values.\n- Provide documentation explaining the formula and usage.\n- Optimize the function for performance.\n- Include unit tests to verify accuracy.\nWe will implement a function to calculate the lateral surface area of a cone using the formula: Lateral Surface Area = \u03c0 * r * l, where l is the slant height calculated using the Pythagorean theorem as l = sqrt(r^2 + h^2). We will use the math library for accurate mathematical calculations. The function will handle typical input values efficiently and include basic error handling for non-numeric inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: The lateral surface area of a cone is the area of the cone's surface excluding its base. It is calculated using the formula: Lateral Surface Area = \u03c0 * r * l, where r is the radius of the base and l is the slant height.\n\n    'slant height'\n    Explanation: The slant height of a cone is the distance from the base to the apex along the side of the cone. It can be calculated using the Pythagorean theorem as l = sqrt(r^2 + h^2), where r is the radius and h is the height of the cone.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math library to use mathematical functions.\n    2. Define the function `lateralsurface_cone` with parameters `r` (radius) and `h` (height).\n    3. Calculate the slant height `l` using the formula `l = sqrt(r^2 + h^2)`.\n    4. Calculate the lateral surface area using the formula `Lateral Surface Area = \u03c0 * r * l`.\n    5. Return the calculated lateral surface area.\n\n# [edge case] \n    lateralsurface_cone(0, 12) = 0\n    Explanation: If the radius is 0, the lateral surface area will be 0 regardless of the height.\n    \n    lateralsurface_cone(5, 0) = 78.53981633974483\n    Explanation: If the height is 0, the slant height will be equal to the radius, and the lateral surface area will be \u03c0 * r^2.\n\n    lateralsurface_cone(5, -12) = Error or appropriate handling\n    Explanation: A negative height doesn't make sense in this context, so an error or appropriate handling should be implemented.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        import math\n\n        def lateralsurface_cone(r, h):\n            if r < 0 or h < 0:\n                raise ValueError(\"Radius and height must be non-negative\")\n            l = math.sqrt(r**2 + h**2)\n            return math.pi * r * l\n", "requirement analysis:\nThe function should accurately calculate the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2). It should handle various input types and sizes, ensuring precision and performance.\nrequirement pool:\n- Implement the main function to calculate lateral surface area\n- Ensure the function handles edge cases like zero or negative values\n- Provide documentation explaining the formula and usage\n- Optimize the function for performance with large inputs\n- Include unit tests to verify accuracy\nWe will implement a function named `lateralsurface_cone` that calculates the lateral surface area of a cone using the formula: \u03c0 * r * sqrt(r^2 + h^2). We will use the `math` library for accurate mathematical calculations. The function will include input validation to handle edge cases such as zero or negative values for radius and height, which are not physically meaningful.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: The lateral surface area of a cone is the area of the cone's surface excluding its base. It is calculated using the formula: \u03c0 * r * sqrt(r^2 + h^2), where r is the radius and h is the height of the cone.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the `math` library to use mathematical functions.\n    2. Define the function `lateralsurface_cone` with parameters `r` (radius) and `h` (height).\n    3. Validate the inputs to ensure that both `r` and `h` are positive numbers.\n    4. Calculate the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2).\n    5. Return the calculated lateral surface area.\n\n# [edge case] \n    lateralsurface_cone(0, 10) = \"Invalid input\"\n    Explanation: A radius of zero is not physically meaningful for a cone, so the function should return an error or invalid input message.\n    \n    lateralsurface_cone(5, -12) = \"Invalid input\"\n    Explanation: A negative height is not physically meaningful for a cone, so the function should return an error or invalid input message.\n    \n    lateralsurface_cone(0, 0) = \"Invalid input\"\n    Explanation: Both radius and height being zero are not physically meaningful, so the function should return an error or invalid input message.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if r <= 0 or h <= 0:\n            return \"Invalid input\"\n        (other code)\n", "requirement analysis:\nThe function should accurately compute the lateral surface area of a cone using the formula \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). The function must handle typical input values and return precise results.\nrequirement pool:\n- Implement the lateral surface area calculation using the correct mathematical formula.\n- Ensure the function handles edge cases like zero or negative values gracefully.\n- Optimize the function for performance to handle large input values efficiently.\n- Design a simple interface for input and output.\n- Include error handling for invalid inputs.\nWe will implement the lateral surface area calculation using the formula \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). We will use the math library for accurate mathematical computations. The function will include error handling for invalid inputs such as negative values for radius and height, as these are not physically meaningful. The function will be optimized for performance to handle large input values efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: The lateral surface area of a cone is the area of the cone's surface excluding the base. It is calculated using the formula \u03c0 * r * l, where r is the radius and l is the slant height.\n\n    'slant height'\n    Explanation: The slant height of a cone is the distance from the top of the cone to any point on the edge of the base. It can be calculated using the Pythagorean theorem as sqrt(r^2 + h^2), where r is the radius and h is the height.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math library to use mathematical functions like sqrt and pi.\n    2. Define the function lateralsurface_cone with parameters r and h.\n    3. Check if r and h are valid (non-negative) values; if not, raise an error.\n    4. Calculate the slant height l using sqrt(r^2 + h^2).\n    5. Calculate the lateral surface area using \u03c0 * r * l.\n    6. Return the calculated lateral surface area.\n\n# [edge case] \n    lateralsurface_cone(0, 0) = 0\n    Explanation: Both radius and height are zero, resulting in a slant height of zero and thus a lateral surface area of zero.\n\n    lateralsurface_cone(-5, 12) = Error\n    Explanation: Negative radius is not physically meaningful, so an error should be raised.\n\n    lateralsurface_cone(5, -12) = Error\n    Explanation: Negative height is not physically meaningful, so an error should be raised.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if r < 0 or h < 0:\n            raise ValueError(\"Radius and height must be non-negative\")\n        (other code)\n", "requirement analysis:\nThe function should accurately compute the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2). It should handle edge cases such as zero or negative values gracefully.\nrequirement pool:\n- Implement the function to calculate lateral surface area using the correct formula\n- Ensure the function handles invalid inputs appropriately\n- Optimize the function for performance with large values\n- Provide comprehensive documentation for the function\n- Include unit tests to verify function accuracy\nWe will implement the function using the formula for the lateral surface area of a cone: \u03c0 * r * sqrt(r^2 + h^2). We will use the math library for accurate calculations and handle edge cases such as zero or negative values by returning an error message or zero as appropriate.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: The lateral surface area of a cone is the area of the cone's side, excluding the base. It is calculated using the formula \u03c0 * r * sqrt(r^2 + h^2), where r is the radius and h is the height.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the math library to use mathematical functions like sqrt and pi.\n    2. Define the function lateralsurface_cone with parameters r and h.\n    3. Check if r or h are zero or negative, and handle these cases appropriately.\n    4. Calculate the lateral surface area using the formula \u03c0 * r * sqrt(r^2 + h^2).\n    5. Return the calculated lateral surface area.\n\n# [edge case] \n    lateralsurface_cone(0, 12) = 0\n    Explanation: A cone with a radius of 0 has no lateral surface area, so the expected output is 0.\n    \n    lateralsurface_cone(5, 0) = 0\n    Explanation: A cone with a height of 0 has no lateral surface area, so the expected output is 0.\n    \n    lateralsurface_cone(-5, 12) = \"Error: Radius cannot be negative\"\n    Explanation: A negative radius is not physically meaningful for a cone, so an error message is returned.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        import math\n        \n        def lateralsurface_cone(r, h):\n            if r <= 0:\n                return \"Error: Radius cannot be zero or negative\"\n            if h <= 0:\n                return \"Error: Height cannot be zero or negative\"\n            return math.pi * r * math.sqrt(r**2 + h**2)\n", "requirement analysis:\nThe function should accurately compute the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2). It should handle typical input values and edge cases, such as zero or negative values, gracefully.\nrequirement pool:\n- Implement the function to calculate lateral surface area using the correct formula\n- Ensure the function handles edge cases like zero or negative values\n- Provide documentation explaining the formula and usage\n- Optimize the function for performance\n- Include unit tests to verify accuracy\nWe will implement a function named `lateralsurface_cone` that calculates the lateral surface area of a cone using the formula: \u03c0 * r * sqrt(r^2 + h^2). We will use the `math` library for mathematical operations. The function will include checks to handle edge cases such as zero or negative values for radius and height, returning an appropriate message or value. Additionally, we will provide documentation within the function to explain the formula and its usage.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: The lateral surface area of a cone is the area of the cone's surface excluding its base. It is calculated using the formula: \u03c0 * r * sqrt(r^2 + h^2), where r is the radius and h is the height of the cone.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the `math` library to access mathematical functions.\n    2. Define the function `lateralsurface_cone` with parameters `r` (radius) and `h` (height).\n    3. Check if `r` or `h` are less than or equal to zero, and return an appropriate message or value if so.\n    4. Calculate the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2).\n    5. Return the calculated lateral surface area.\n\n# [edge case] \n    lateralsurface_cone(0, 12) = \"Invalid input: radius and height must be positive numbers.\"\n    Explanation: The radius is zero, which is not valid for calculating a cone's surface area.\n    \n    lateralsurface_cone(5, 0) = \"Invalid input: radius and height must be positive numbers.\"\n    Explanation: The height is zero, which is not valid for calculating a cone's surface area.\n    \n    lateralsurface_cone(-5, 12) = \"Invalid input: radius and height must be positive numbers.\"\n    Explanation: The radius is negative, which is not valid for calculating a cone's surface area.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    import math\n\n    def lateralsurface_cone(r, h):\n        if r <= 0 or h <= 0:\n            return \"Invalid input: radius and height must be positive numbers.\"\n        return math.pi * r * math.sqrt(r**2 + h**2)\n    ```\n"], "test": ["def check(lateralsurface_cone):\n\tassert lateralsurface_cone(5,12)==204.20352248333654", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10,15)==566.3586699569488", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(19,17)==1521.8090132193388", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(4, 10) == 135.3439535717124", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(8, 11) == 341.84223862609196", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10, 14) == 540.5000372546194", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10, 17) == 619.6189241803191", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(2, 17) == 107.55080826324239", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 11) == 34.700025027842585", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10, 17) == 619.6189241803191", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(3, 12) == 116.5780650907367", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 15) == 47.22849346153437", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 14) == 470.5787011194216", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(7, 8) == 233.76911594312833", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 12) == 252.89333031746617", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10, 13) == 515.25950586991", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 7) == 322.3770065365564", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 14) == 470.5787011194216", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 15) == 494.59884217959996", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10, 9) == 422.6580647044575", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(5, 17) == 278.3458182702795", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 15) == 304.52389553635294", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(4, 12) == 158.95341225273762", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 9) == 203.88912118450162", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(8, 16) == 449.5881427866065", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 11) == 401.85378834922545", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(8, 8) == 284.34450804213543", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 10) == 31.572615420804546", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 17) == 339.8152019741693", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 14) == 44.09435413989645", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(5, 7) == 135.12500931365486", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 13) == 40.9613567668991", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 10) == 31.572615420804546", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 13) == 40.9613567668991", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(4, 7) == 101.31331885360844", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(8, 9) == 302.63828052992443", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(7, 10) == 268.43617813616964", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 16) == 935.0764637725133", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 12) == 252.89333031746617", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 17) == 339.8152019741693", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 14) == 287.1078820894653", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 20) == 393.59028275542903", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 18) == 357.6451775686596", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(11, 19) == 758.6929997570384", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(13, 15) == 810.6648374334094", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 11) == 876.5550197362436", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(11, 12) == 562.5556551319436", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(11, 20) == 788.7900424378303", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 12) == 810.9934878213232", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 18) == 569.0099932142988", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 12) == 810.9934878213232", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 13) == 447.0564719608245", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 18) == 569.0099932142988", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(12, 16) == 753.9822368615503", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10, 11) == 467.03132364336636", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 18) == 1002.9506870026199", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 10) == 849.5380049354233", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 10) == 756.7000521564672", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 17) == 968.6096191797571", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(11, 12) == 562.5556551319436", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 10) == 756.7000521564672", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(13, 16) == 841.9526923219875", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(5, 13) == 218.78661143973912", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(12, 11) == 613.6970783257566", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(12, 11) == 613.6970783257566", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(8, 20) == 541.3758142868496", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 16) == 519.0477736553122", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(7, 20) == 465.98408387880266", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(13, 19) == 940.2236256367811", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(19, 22) == 1735.1292385670592", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(22, 16) == 1880.1323124435057", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(22, 19) == 2009.0970130776475", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(24, 13) == 2057.9710009121764", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 16) == 935.0764637725133", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(22, 18) == 1964.6185208184352", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(19, 15) == 1444.9482110556244", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(21, 19) == 1868.3418915675168", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 12) == 905.2203628953802", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 19) == 1140.748587675493", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(21, 16) == 1741.7489463162146", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(17, 15) == 1210.8221402684294", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(22, 12) == 1732.0178974017306", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(22, 22) == 2150.355342068649", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(17, 16) == 1246.8007223263787", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(24, 16) == 2174.8172926346833", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(16, 20) == 1287.4245161178742", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(17, 12) == 1111.3292428165107", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(23, 12) == 1874.4991197817697", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(19, 17) == 1521.8090132193388", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(20, 19) == 1733.2938526665353", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(16, 15) == 1102.4080948235726", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(24, 22) == 2454.7883133030264", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 22) == 1254.7703543213713", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(17, 20) == 1401.8721403713373", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(16, 14) == 1068.6588157400154", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 19) == 1140.748587675493", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(19, 17) == 1521.8090132193388", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(20, 15) == 1570.7963267948965", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(17, 17) == 1283.9931691277677", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(17, 21) == 1442.9797089695412", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(24, 13) == 2057.9710009121764", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 16) == 1033.5075888970994"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone. Must be positive.\n    h (float): The height of the cone. Must be positive.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If r or h is less than or equal to zero.\n    \"\"\"\n    if r <= 0 or h <= 0:\n        raise ValueError(\"Invalid input: radius and height must be positive numbers.\")\n    \n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_surface_area\n", "passed": true, "pass": true, "pass_num": 10, "round": 538, "mutate_method": "condense_two2one", "parent_index": 221}
