{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 728, "prompt": "Write a function accepts two lists [a_1,...,a_n], [b_1,...,b_n] as input and returns [a_1+b_1,...,a_n+b_n].", "code": "def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list", "test_imports": [], "test_list": ["assert sum_list([10,20,30],[15,25,35])==[25,45,65]", "assert sum_list([1,2,3],[5,6,7])==[6,8,10]", "assert sum_list([15,20,30],[15,45,75])==[30,65,105]", "assert sum_list([11, 19, 31], [20, 29, 39]) == [31, 48, 70]", "assert sum_list([15, 19, 31], [18, 26, 30]) == [33, 45, 61]", "assert sum_list([11, 23, 29], [15, 20, 40]) == [26, 43, 69]", "assert sum_list([11, 25, 35], [13, 27, 32]) == [24, 52, 67]", "assert sum_list([6, 20, 25], [11, 29, 36]) == [17, 49, 61]", "assert sum_list([10, 18, 26], [11, 27, 30]) == [21, 45, 56]", "assert sum_list([6, 16, 31], [19, 21, 36]) == [25, 37, 67]", "assert sum_list([8, 17, 30], [17, 30, 40]) == [25, 47, 70]", "assert sum_list([12, 22, 26], [17, 27, 32]) == [29, 49, 58]", "assert sum_list([12, 20, 34], [14, 22, 37]) == [26, 42, 71]", "assert sum_list([8, 21, 26], [15, 23, 36]) == [23, 44, 62]", "assert sum_list([5, 19, 27], [13, 22, 39]) == [18, 41, 66]", "assert sum_list([6, 15, 25], [15, 28, 32]) == [21, 43, 57]", "assert sum_list([8, 22, 27], [11, 28, 35]) == [19, 50, 62]", "assert sum_list([5, 25, 33], [13, 30, 38]) == [18, 55, 71]", "assert sum_list([12, 18, 34], [17, 23, 36]) == [29, 41, 70]", "assert sum_list([5, 20, 30], [20, 28, 39]) == [25, 48, 69]", "assert sum_list([12, 21, 30], [15, 22, 36]) == [27, 43, 66]", "assert sum_list([14, 15, 27], [18, 25, 36]) == [32, 40, 63]", "assert sum_list([7, 15, 33], [16, 30, 35]) == [23, 45, 68]", "assert sum_list([7, 22, 33], [12, 27, 30]) == [19, 49, 63]", "assert sum_list([13, 25, 35], [18, 21, 35]) == [31, 46, 70]", "assert sum_list([9, 23, 35], [11, 28, 35]) == [20, 51, 70]", "assert sum_list([14, 24, 27], [11, 26, 37]) == [25, 50, 64]", "assert sum_list([9, 24, 34], [20, 23, 35]) == [29, 47, 69]", "assert sum_list([11, 24, 33], [14, 29, 31]) == [25, 53, 64]", "assert sum_list([13, 24, 28], [10, 25, 34]) == [23, 49, 62]", "assert sum_list([15, 21, 28], [10, 20, 30]) == [25, 41, 58]", "assert sum_list([9, 17, 28], [17, 22, 32]) == [26, 39, 60]", "assert sum_list([7, 25, 28], [13, 29, 31]) == [20, 54, 59]", "assert sum_list([6, 25, 26], [12, 26, 34]) == [18, 51, 60]", "assert sum_list([9, 21, 34], [10, 26, 40]) == [19, 47, 74]", "assert sum_list([13, 18, 25], [12, 26, 39]) == [25, 44, 64]", "assert sum_list([2, 1, 2], [10, 8, 6]) == [12, 9, 8]", "assert sum_list([1, 7, 5], [1, 9, 2]) == [2, 16, 7]", "assert sum_list([1, 2, 6], [4, 11, 2]) == [5, 13, 8]", "assert sum_list([4, 6, 4], [1, 6, 6]) == [5, 12, 10]", "assert sum_list([6, 3, 2], [3, 8, 7]) == [9, 11, 9]", "assert sum_list([5, 3, 2], [10, 4, 7]) == [15, 7, 9]", "assert sum_list([2, 5, 5], [7, 10, 3]) == [9, 15, 8]", "assert sum_list([6, 7, 4], [9, 5, 8]) == [15, 12, 12]", "assert sum_list([4, 3, 1], [8, 11, 7]) == [12, 14, 8]", "assert sum_list([1, 7, 8], [1, 10, 4]) == [2, 17, 12]", "assert sum_list([5, 2, 1], [2, 9, 9]) == [7, 11, 10]", "assert sum_list([1, 5, 2], [2, 4, 9]) == [3, 9, 11]", "assert sum_list([1, 4, 2], [8, 5, 7]) == [9, 9, 9]", "assert sum_list([4, 4, 1], [4, 5, 5]) == [8, 9, 6]", "assert sum_list([6, 2, 4], [5, 10, 12]) == [11, 12, 16]", "assert sum_list([3, 2, 6], [7, 1, 4]) == [10, 3, 10]", "assert sum_list([2, 7, 3], [9, 5, 2]) == [11, 12, 5]", "assert sum_list([2, 3, 4], [9, 6, 12]) == [11, 9, 16]", "assert sum_list([2, 6, 6], [1, 3, 10]) == [3, 9, 16]", "assert sum_list([4, 7, 7], [6, 7, 8]) == [10, 14, 15]", "assert sum_list([1, 3, 7], [10, 8, 6]) == [11, 11, 13]", "assert sum_list([1, 3, 6], [3, 1, 6]) == [4, 4, 12]", "assert sum_list([2, 7, 1], [9, 4, 4]) == [11, 11, 5]", "assert sum_list([4, 2, 1], [8, 2, 5]) == [12, 4, 6]", "assert sum_list([6, 2, 5], [3, 4, 10]) == [9, 6, 15]", "assert sum_list([5, 3, 2], [5, 1, 4]) == [10, 4, 6]", "assert sum_list([4, 5, 5], [9, 10, 8]) == [13, 15, 13]", "assert sum_list([3, 4, 3], [3, 5, 11]) == [6, 9, 14]", "assert sum_list([1, 5, 2], [5, 1, 11]) == [6, 6, 13]", "assert sum_list([2, 3, 8], [3, 7, 3]) == [5, 10, 11]", "assert sum_list([3, 5, 7], [5, 8, 8]) == [8, 13, 15]", "assert sum_list([4, 3, 6], [8, 11, 11]) == [12, 14, 17]", "assert sum_list([3, 7, 8], [6, 9, 2]) == [9, 16, 10]", "assert sum_list([14, 18, 32], [14, 49, 80]) == [28, 67, 112]", "assert sum_list([15, 21, 33], [13, 47, 78]) == [28, 68, 111]", "assert sum_list([14, 15, 27], [17, 49, 79]) == [31, 64, 106]", "assert sum_list([10, 20, 33], [19, 41, 75]) == [29, 61, 108]", "assert sum_list([19, 21, 32], [11, 48, 80]) == [30, 69, 112]", "assert sum_list([18, 18, 28], [10, 50, 76]) == [28, 68, 104]", "assert sum_list([19, 17, 25], [19, 44, 79]) == [38, 61, 104]", "assert sum_list([16, 21, 26], [15, 44, 72]) == [31, 65, 98]", "assert sum_list([11, 19, 32], [10, 44, 77]) == [21, 63, 109]", "assert sum_list([20, 21, 34], [14, 50, 74]) == [34, 71, 108]", "assert sum_list([18, 23, 34], [10, 41, 72]) == [28, 64, 106]", "assert sum_list([17, 23, 28], [20, 49, 71]) == [37, 72, 99]", "assert sum_list([16, 17, 33], [12, 41, 74]) == [28, 58, 107]", "assert sum_list([13, 16, 29], [19, 40, 70]) == [32, 56, 99]", "assert sum_list([19, 18, 29], [12, 46, 79]) == [31, 64, 108]", "assert sum_list([20, 16, 33], [13, 47, 80]) == [33, 63, 113]", "assert sum_list([16, 24, 34], [17, 41, 76]) == [33, 65, 110]", "assert sum_list([19, 24, 34], [11, 50, 80]) == [30, 74, 114]", "assert sum_list([14, 24, 28], [18, 43, 76]) == [32, 67, 104]", "assert sum_list([11, 15, 29], [19, 46, 80]) == [30, 61, 109]", "assert sum_list([14, 18, 31], [11, 41, 78]) == [25, 59, 109]", "assert sum_list([16, 18, 32], [13, 46, 72]) == [29, 64, 104]", "assert sum_list([13, 23, 30], [19, 41, 78]) == [32, 64, 108]", "assert sum_list([16, 18, 33], [17, 44, 80]) == [33, 62, 113]", "assert sum_list([13, 22, 33], [12, 48, 77]) == [25, 70, 110]", "assert sum_list([13, 18, 29], [14, 50, 76]) == [27, 68, 105]", "assert sum_list([15, 18, 29], [12, 43, 80]) == [27, 61, 109]", "assert sum_list([12, 16, 35], [11, 46, 74]) == [23, 62, 109]", "assert sum_list([14, 16, 32], [18, 40, 75]) == [32, 56, 107]", "assert sum_list([14, 21, 29], [10, 41, 80]) == [24, 62, 109]", "assert sum_list([13, 18, 25], [16, 45, 75]) == [29, 63, 100]", "assert sum_list([18, 25, 35], [19, 47, 79]) == [37, 72, 114]", "assert sum_list([18, 25, 29], [16, 48, 73]) == [34, 73, 102]"], "entry_point": "sum_list", "repair_prompt": ["Write a function sum_list accepts two lists [a_1,...,a_n], [b_1,...,b_n] as input and returns [a_1+b_1,...,a_n+b_n].\nsum_list([10,20,30],[15,25,35])==[25,45,65]\n", "Write a function sum_list accepts two lists [a_1,...,a_n], [b_1,...,b_n] as input. The function will take these lists as arguments. It returns [a_1+b_1,...,a_n+b_n].\nsum_list([10,20,30],[15,25,35])==[25,45,65]\n", "Write a function sum_list accepts two lists [a_1,...,a_n], [b_1,...,b_n] as input, returning [a_1+b_1,...,a_n+b_n].\nsum_list([10,20,30],[15,25,35])==[25,45,65]\n"], "completions": ["from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Sums corresponding elements of two lists of equal length.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the sums of the corresponding elements of list1 and list2.\n\n    Raises:\n    ValueError: If the input lists are of unequal length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of equal length\")\n    \n    return [a + b for a, b in zip(list1, list2)]\n\n# Example usage:\n# result = sum_list([1, 2, 3], [4, 5, 6])\n# print(result)  # Output: [5, 7, 9]\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Sums corresponding elements of two lists of equal length.\n\n    Parameters:\n    list1 (list[int]): The first list of integers.\n    list2 (list[int]): The second list of integers.\n\n    Returns:\n    list[int]: A list containing the sums of corresponding elements.\n\n    Raises:\n    ValueError: If the input lists are of different lengths.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    return [a + b for a, b in zip(list1, list2)]\n\n# Example usage:\n# result = sum_list([10, 20, 30], [15, 25, 35])\n# print(result)  # Output: [25, 45, 65]\n\n# Edge cases:\n# result = sum_list([], [])\n# print(result)  # Output: []\n\n# This will raise a ValueError:\n# result = sum_list([1, 2], [1, 2, 3])\n", "from typing import List\n## main.py\n\ndef sum_list(list_a: list[int], list_b: list[int]) -> list[int]:\n    \"\"\"\n    Sums corresponding elements of two lists.\n\n    Parameters:\n    list_a (list[int]): First list of integers.\n    list_b (list[int]): Second list of integers.\n\n    Returns:\n    list[int]: A list containing the sum of corresponding elements.\n\n    Raises:\n    ValueError: If the input lists are of different lengths.\n    \"\"\"\n    if len(list_a) != len(list_b):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    return [a + b for a, b in zip(list_a, list_b)]\n", "from typing import List\n## main.py\n\ndef sum_list(list_a: list[int], list_b: list[int]) -> list[int]:\n    \"\"\"\n    Sums corresponding elements of two lists.\n\n    Parameters:\n    list_a (list[int]): First list of integers.\n    list_b (list[int]): Second list of integers.\n\n    Returns:\n    list[int]: A list containing the sums of corresponding elements.\n\n    Raises:\n    ValueError: If the input lists are of different lengths.\n    \"\"\"\n    if len(list_a) != len(list_b):\n        raise ValueError(\"Lists must be of equal length\")\n    \n    return [a + b for a, b in zip(list_a, list_b)]\n", "from typing import List\n## main.py\n\ndef sum_list(list_a: list[int], list_b: list[int]) -> list[int]:\n    \"\"\"\n    Sums corresponding elements of two lists.\n\n    Parameters:\n    list_a (list[int]): First list of integers.\n    list_b (list[int]): Second list of integers.\n\n    Returns:\n    list[int]: A list containing the sum of corresponding elements.\n\n    Raises:\n    ValueError: If the input lists have different lengths.\n    \"\"\"\n    if len(list_a) != len(list_b):\n        raise ValueError(\"Error: Lists are of different lengths\")\n\n    # Using list comprehension to sum corresponding elements\n    summed_list = [a + b for a, b in zip(list_a, list_b)]\n    return summed_list\n\n# Example usage:\n# try:\n#     result = sum_list([1, 2, 3], [4, 5, 6])\n#     print(result)  # Output: [5, 7, 9]\n# except ValueError as e:\n#     print(e)\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    '''\n    Sums corresponding elements of two lists of equal length.\n    \n    Parameters:\n    list1 (list[int]): The first list of integers.\n    list2 (list[int]): The second list of integers.\n    \n    Returns:\n    list[int]: A new list containing the sums of the corresponding elements of list1 and list2.\n    \n    Raises:\n    ValueError: If the input lists are of different lengths.\n    '''\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    return [x + y for x, y in zip(list1, list2)]\n\n# Example usage:\n# result = sum_list([10, 20, 30], [15, 25, 35])\n# print(result)  # Output: [25, 45, 65]\n\n# result = sum_list([], [])\n# print(result)  # Output: []\n\n# result = sum_list([1, 2], [1])\n# This will raise a ValueError: Lists must be of the same length\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Sums corresponding elements of two lists.\n\n    Parameters:\n    list1 (list[int]): The first list of integers.\n    list2 (list[int]): The second list of integers.\n\n    Returns:\n    list[int]: A list containing the sum of corresponding elements from list1 and list2.\n\n    Example:\n    >>> sum_list([10, 20, 30], [15, 25, 35])\n    [25, 45, 65]\n    >>> sum_list([], [1, 2, 3])\n    []\n    >>> sum_list([1, 2, 3], [])\n    []\n    >>> sum_list([1, 2], [3, 4, 5])\n    [4, 6]\n    \"\"\"\n    # Determine the length of the shorter list\n    min_length = min(len(list1), len(list2))\n    \n    # Use list comprehension to sum corresponding elements up to the length of the shorter list\n    summed_list = [list1[i] + list2[i] for i in range(min_length)]\n    \n    return summed_list\n", "from typing import List\n## main.py\n\ndef sum_list(list_a: list[int], list_b: list[int]) -> list[int]:\n    '''\n    Sums corresponding elements of two lists of equal length.\n    \n    Parameters:\n    list_a (list[int]): First list of integers.\n    list_b (list[int]): Second list of integers.\n    \n    Returns:\n    list[int]: A list containing the sum of corresponding elements.\n    \n    Raises:\n    ValueError: If the input lists are of different lengths.\n    '''\n    if len(list_a) != len(list_b):\n        raise ValueError(\"Both lists must have the same number of elements.\")\n    \n    return [a + b for a, b in zip(list_a, list_b)]\n", "from typing import List\n## main.py\n\ndef sum_list(list_a: list[int], list_b: list[int]) -> list[int]:\n    \"\"\"\n    Sum corresponding elements of two lists.\n\n    Parameters:\n    list_a (list[int]): First list of integers.\n    list_b (list[int]): Second list of integers.\n\n    Returns:\n    list[int]: A list containing the sum of corresponding elements.\n\n    Raises:\n    ValueError: If the input lists are of different lengths.\n\n    Example:\n    >>> sum_list([10, 20, 30], [15, 25, 35])\n    [25, 45, 65]\n    \"\"\"\n    if len(list_a) != len(list_b):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    return [a + b for a, b in zip(list_a, list_b)]\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        result = sum_list([10, 20, 30], [15, 25, 35])\n        print(result)  # Output: [25, 45, 65]\n    except ValueError as e:\n        print(f\"Error: {e}\")\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Sums corresponding elements of two lists.\n\n    Parameters:\n    list1 (list of int): The first list of integers.\n    list2 (list of int): The second list of integers.\n\n    Returns:\n    list of int: A new list containing the sums of corresponding elements.\n\n    Raises:\n    ValueError: If the input lists are of different lengths.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n\n    return [a + b for a, b in zip(list1, list2)]\n"], "plans": ["requirement analysis:\nThe function should efficiently sum corresponding elements of two lists of equal length. It should handle edge cases such as empty lists and provide meaningful error messages for mismatched list lengths.\nrequirement pool:\n- The function must correctly sum elements of two lists.\n- The function should handle empty lists without errors.\n- The function should provide an error message for lists of unequal length.\n- The function should be optimized for performance with large lists.\n- The function should include comprehensive documentation.\nWe will use Python's native list comprehension to efficiently sum corresponding elements of two lists. This approach is optimal for small to medium-sized lists and provides a balance between efficiency and usability. We will also include error handling for cases where the lists are of unequal length and handle empty lists gracefully. The function will be documented to explain its usage, limitations, and edge case handling.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum corresponding elements'\n    Explanation: The requirement is to add elements from two lists at the same index positions and return a new list with these summed values.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Check if both lists are of equal length. If not, raise an error or handle the discrepancy.\n    - Use list comprehension to iterate over the indices of the lists.\n    - For each index, sum the elements from both lists and store the result in a new list.\n    - Return the new list containing summed values.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = Error or []\n    Explanation: The second list is empty, which is an unequal length scenario. Depending on implementation, this could raise an error or return an empty list.\n    \n    sum_list([], [4, 5, 6]) = Error or []\n    Explanation: The first list is empty, which is an unequal length scenario. Depending on implementation, this could raise an error or return an empty list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(list1) != len(list2):\n            raise ValueError(\"Lists must be of equal length\")\n        return [a + b for a, b in zip(list1, list2)]\n", "requirement analysis:\nThe function should efficiently sum corresponding elements of two lists of equal length. It should handle edge cases such as empty lists and ensure compatibility with various Python versions. Documentation should be provided to guide users on its usage and limitations.\nrequirement pool:\n- The function must correctly sum corresponding elements of two lists.\n- The function should handle edge cases like empty lists.\n- The function should be compatible with Python 3.x versions.\n- Provide comprehensive documentation for the function.\n- Optimize the function for performance with large lists.\nWe will use Python's built-in zip function combined with a list comprehension to efficiently sum corresponding elements of two lists. This approach is simple, effective, and compatible with all Python 3.x versions. It handles edge cases like empty lists gracefully by returning an empty list. We will document the function to explain its usage and limitations, including the behavior when lists of different lengths are provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum corresponding elements'\n    Explanation: The requirement is to sum elements from two lists at the same index positions.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Use the `zip` function to pair elements from both lists.\n    - Use a list comprehension to iterate over the pairs and sum each pair.\n    - Return the resulting list of sums.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = []\n    Explanation: The second list is empty, so no corresponding elements exist to sum, resulting in an empty list.\n    \n    sum_list([], [4, 5, 6]) = []\n    Explanation: The first list is empty, so no corresponding elements exist to sum, resulting in an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `zip` naturally handles cases where one or both lists are empty by returning an empty iterator, resulting in an empty list.\n", "requirement analysis:\nThe function should efficiently sum corresponding elements of two lists, handle edge cases like empty lists, and provide clear error messages for invalid inputs such as lists of different lengths.\nrequirement pool:\n- Implement the main function to sum elements of two lists\n- Handle edge cases such as empty lists\n- Provide error handling for lists of different lengths\n- Optimize the function for large lists\n- Ensure code readability and maintainability\nWe will implement a simple Python function using list comprehension to efficiently sum corresponding elements of two lists. We will handle edge cases such as empty lists and provide error handling for lists of different lengths by raising a ValueError with a clear message.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum corresponding elements'\n    Explanation: The requirement is to add elements from two lists at the same index positions and return a new list with these summed values.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Check if both lists are of the same length; if not, raise a ValueError.\n    - Use list comprehension to iterate over the indices of the lists.\n    - For each index, sum the elements from both lists and store the result in a new list.\n    - Return the new list.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = ValueError\n    Explanation: The lists are of different lengths, so a ValueError should be raised.\n    \n    sum_list([], [4, 5, 6]) = ValueError\n    Explanation: The lists are of different lengths, so a ValueError should be raised.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(list1) != len(list2):\n            raise ValueError(\"Lists must be of the same length\")\n        return [a + b for a, b in zip(list1, list2)]\n", "requirement analysis:\nThe function should efficiently sum corresponding elements of two lists, ensuring it handles edge cases like empty lists or lists of different lengths. It should be easy to use and integrate into existing projects.\nrequirement pool:\n- The function must correctly sum elements of two lists\n- The function should handle empty lists gracefully\n- The function should be compatible with Python 3.x\n- The function should include documentation and examples\n- The function should be optimized for performance\nWe will use native Python list comprehension to efficiently sum corresponding elements of two lists. This approach is simple, efficient, and compatible with all Python 3.x versions. It handles edge cases like empty lists gracefully. For lists of different lengths, we will assume the function should return an error, as summing elements of unequal lists is undefined without further instructions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum corresponding elements'\n    Explanation: The requirement is to sum each element from the first list with the corresponding element from the second list, resulting in a new list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Check if both lists are of the same length. If not, raise an error.\n    - Use list comprehension to iterate over the indices of the lists.\n    - For each index, sum the elements from both lists and store the result in a new list.\n    - Return the new list.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2], [3, 4]) = [4, 6]\n    Explanation: The lists are of equal length, and the sum of corresponding elements results in [4, 6].\n    \n    sum_list([1], [2, 3]) = Error\n    Explanation: The lists are of different lengths, which is undefined according to the requirement.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(list1) != len(list2):\n            raise ValueError(\"Lists must be of equal length\")\n        return [a + b for a, b in zip(list1, list2)]\n", "requirement analysis:\nThe function should efficiently sum corresponding elements of two lists. It must handle edge cases such as empty lists and lists of different lengths. The function should be easy to use and integrate into existing projects.\nrequirement pool:\n- The function must correctly sum corresponding elements of two lists.\n- The function should handle empty lists gracefully.\n- The function should handle lists of different lengths by returning an error or handling the mismatch.\n- The function should be optimized for performance with large lists.\n- The function should include comprehensive documentation and examples.\nWe will use native Python list comprehension to efficiently sum corresponding elements of two lists. This approach is optimal for small to medium-sized lists and ensures compatibility with different Python versions. We will handle edge cases such as empty lists and lists of different lengths by returning an error message for mismatched lengths.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum corresponding elements'\n    Explanation: The requirement is to add each element from the first list to the corresponding element in the second list, resulting in a new list of summed values.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship, but the concept of summing elements implies a one-to-one correspondence between elements of the two lists.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if both lists are of the same length. If not, return an error message.\n    2. Use list comprehension to iterate over the indices of the lists.\n    3. For each index, sum the elements from both lists and store the result in a new list.\n    4. Return the new list containing the summed values.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = \"Error: Lists are of different lengths\"\n    Explanation: The lists are of different lengths, so an error message is returned.\n    \n    sum_list([0, 0, 0], [0, 0, 0]) = [0, 0, 0]\n    Explanation: Both lists contain zeros, so the sum of corresponding elements is also zero.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(list1) != len(list2):\n            return \"Error: Lists are of different lengths\"\n        (other code using list comprehension to sum elements)\n", "requirement analysis:\nThe function should efficiently sum corresponding elements of two lists of equal length. It should handle edge cases such as empty lists and ensure compatibility with various Python versions.\nrequirement pool:\n- The function must correctly sum corresponding elements of two lists.\n- The function should handle edge cases like empty lists.\n- The function should be compatible with Python 3.x versions.\n- The function should include error handling for mismatched list lengths.\n- The function should be optimized for performance with large lists.\nWe will implement a function using list comprehension to efficiently sum corresponding elements of two lists. This approach is native to Python and provides a good balance between efficiency and usability. We will also include error handling to manage cases where the lists are of different lengths, and ensure compatibility with Python 3.x versions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum corresponding elements'\n    Explanation: The requirement is to add elements from two lists at the same index position and return a new list with these summed values.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if both lists are of the same length. If not, raise an error or handle the discrepancy.\n    2. Use list comprehension to iterate over the indices of the lists.\n    3. For each index, sum the elements from both lists and store the result in a new list.\n    4. Return the new list containing the summed values.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1], [2]) = [3]\n    Explanation: Both lists have one element, so the result is a list with one element which is the sum of the two elements.\n    \n    sum_list([1, 2, 3], [4, 5]) = Error or handle discrepancy\n    Explanation: The lists are of different lengths, which should be handled either by raising an error or by defining a behavior for such cases.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where lists are of different lengths.\n        if len(list1) != len(list2):\n            raise ValueError(\"Lists must be of the same length\")\n        (other code)\n", "requirement analysis:\nThe function should efficiently sum corresponding elements of two lists, ensuring it handles edge cases like empty lists or lists of different lengths. It should be easy to use and integrate into existing projects.\nrequirement pool:\n- Implement the main function to sum elements of two lists\n- Handle edge cases such as empty lists\n- Ensure compatibility with different Python versions\n- Provide documentation and examples\n- Optimize for performance with large lists\nWe will implement a simple function using Python's built-in capabilities to sum corresponding elements of two lists. The function will handle edge cases such as empty lists and lists of different lengths by returning a list that sums elements up to the length of the shorter list. This approach ensures compatibility with different Python versions and provides an efficient solution without the need for additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum corresponding elements'\n    Explanation: The requirement is to add each element from the first list to the corresponding element in the second list, resulting in a new list of summed values.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `sum_list` that takes two lists as input.\n    2. Determine the length of the shorter list to avoid index errors.\n    3. Use a loop or list comprehension to iterate over the range of the shorter list's length.\n    4. For each index, add the elements from both lists and store the result in a new list.\n    5. Return the new list containing the summed values.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = []\n    Explanation: The second list is empty, so there are no elements to sum with the first list, resulting in an empty list.\n    \n    sum_list([1, 2], [3, 4, 5]) = [4, 6]\n    Explanation: The first list is shorter, so only the first two elements of each list are summed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of summing up to the length of the shorter list inherently handles these cases.\n", "requirement analysis:\nThe function should efficiently sum corresponding elements of two lists of equal length. It should handle edge cases such as empty lists and ensure compatibility with various Python versions.\nrequirement pool:\n- The function must correctly sum two lists of equal length.\n- The function should handle empty lists gracefully.\n- The function should be optimized for performance with large lists.\n- The function should include comprehensive documentation.\n- The function should be compatible with Python 3.x versions.\nWe will use native Python functions such as zip and list comprehension to efficiently sum corresponding elements of two lists. This approach is optimal for performance and usability, especially for large lists, and ensures compatibility with different Python versions. We will also handle edge cases like empty lists gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum corresponding elements'\n    Explanation: The requirement is to add each element from the first list to the corresponding element in the second list, resulting in a new list of summed values.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Use the `zip` function to pair elements from both lists.\n    2. Use a list comprehension to iterate over these pairs and sum each pair.\n    3. Return the resulting list of sums.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = Error or undefined behavior\n    Explanation: The lists are of unequal length, which is not handled in the requirement. This could lead to an error or undefined behavior.\n    \n    sum_list([], [4, 5, 6]) = Error or undefined behavior\n    Explanation: Similar to the previous case, unequal list lengths are not handled.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases of unequal list lengths.\n        if len(list1) != len(list2):\n            raise ValueError(\"Both lists must have the same number of elements.\")\n        return [a + b for a, b in zip(list1, list2)]\n", "requirement analysis:\nThe function should efficiently sum corresponding elements of two lists of equal length. It should handle edge cases such as empty lists and ensure compatibility with various Python versions. The function should be easy to integrate and use in different projects.\nrequirement pool:\n- The function must correctly sum corresponding elements of two lists.\n- The function should handle edge cases like empty lists gracefully.\n- The function should be compatible with Python 3.x versions.\n- The function should include clear documentation and examples.\n- The function should be optimized for performance with large lists.\nWe will use native Python functions such as zip and list comprehension to efficiently sum corresponding elements of two lists. This approach is optimal for handling small to medium-sized lists and ensures compatibility with Python 3.x versions. We will also include error handling for edge cases like empty lists and lists of different lengths.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum corresponding elements'\n    Explanation: The requirement is to add elements from two lists at the same index positions and return a new list containing these sums.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Use the `zip` function to pair elements from both lists.\n    - Use list comprehension to iterate over these pairs and sum them.\n    - Return the resulting list of sums.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2], []) = Error or []\n    Explanation: The second list is empty, which may lead to an error or result in an empty list depending on implementation.\n    \n    sum_list([1, 2, 3], [4, 5]) = Error or [5, 7]\n    Explanation: The lists are of different lengths, which may lead to an error or result in a list with sums up to the length of the shorter list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(list1) != len(list2):\n            raise ValueError(\"Lists must be of the same length\")\n        return [a + b for a, b in zip(list1, list2)]\n", "requirement analysis:\nThe function should efficiently sum corresponding elements of two lists, handling edge cases such as lists of different lengths by returning an error or a specific message.\nrequirement pool:\n- Implement the main function to sum elements of two lists\n- Handle edge cases for lists of different lengths\n- Optimize performance for large list inputs\n- Provide detailed documentation for the function\n- Ensure compatibility with Python's native list operations\nWe will implement a function named `sum_list` that takes two lists as input and returns a new list containing the sum of corresponding elements. We will use Python's built-in `zip` function to pair elements from both lists and a list comprehension to sum these pairs. This approach is efficient and easy to understand. For lists of different lengths, we will raise a ValueError to inform the user of the mismatch, as this aligns with the requirement to handle such cases gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'corresponding elements'\n    Explanation: This means that each element from the first list is paired with the element at the same position in the second list, and their sum is calculated.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if both lists have the same length; if not, raise a ValueError.\n    2. Use the `zip` function to pair elements from both lists.\n    3. Use a list comprehension to iterate over the pairs and calculate their sum.\n    4. Return the resulting list.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1], [2]) = [3]\n    Explanation: Both lists have one element, so the result is a list with one element which is the sum of these two elements.\n    \n    sum_list([1, 2], [3]) = ValueError\n    Explanation: The lists have different lengths, so a ValueError should be raised.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(list1) != len(list2):\n            raise ValueError(\"Lists must be of the same length\")\n        (other code)\n"], "test": ["def check(sum_list):\n\tassert sum_list([10,20,30],[15,25,35])==[25,45,65]", "def check(sum_list):\n\tassert sum_list([1,2,3],[5,6,7])==[6,8,10]", "def check(sum_list):\n\tassert sum_list([15,20,30],[15,45,75])==[30,65,105]", "def check(sum_list):\n\tassert sum_list([11, 19, 31], [20, 29, 39]) == [31, 48, 70]", "def check(sum_list):\n\tassert sum_list([15, 19, 31], [18, 26, 30]) == [33, 45, 61]", "def check(sum_list):\n\tassert sum_list([11, 23, 29], [15, 20, 40]) == [26, 43, 69]", "def check(sum_list):\n\tassert sum_list([11, 25, 35], [13, 27, 32]) == [24, 52, 67]", "def check(sum_list):\n\tassert sum_list([6, 20, 25], [11, 29, 36]) == [17, 49, 61]", "def check(sum_list):\n\tassert sum_list([10, 18, 26], [11, 27, 30]) == [21, 45, 56]", "def check(sum_list):\n\tassert sum_list([6, 16, 31], [19, 21, 36]) == [25, 37, 67]", "def check(sum_list):\n\tassert sum_list([8, 17, 30], [17, 30, 40]) == [25, 47, 70]", "def check(sum_list):\n\tassert sum_list([12, 22, 26], [17, 27, 32]) == [29, 49, 58]", "def check(sum_list):\n\tassert sum_list([12, 20, 34], [14, 22, 37]) == [26, 42, 71]", "def check(sum_list):\n\tassert sum_list([8, 21, 26], [15, 23, 36]) == [23, 44, 62]", "def check(sum_list):\n\tassert sum_list([5, 19, 27], [13, 22, 39]) == [18, 41, 66]", "def check(sum_list):\n\tassert sum_list([6, 15, 25], [15, 28, 32]) == [21, 43, 57]", "def check(sum_list):\n\tassert sum_list([8, 22, 27], [11, 28, 35]) == [19, 50, 62]", "def check(sum_list):\n\tassert sum_list([5, 25, 33], [13, 30, 38]) == [18, 55, 71]", "def check(sum_list):\n\tassert sum_list([12, 18, 34], [17, 23, 36]) == [29, 41, 70]", "def check(sum_list):\n\tassert sum_list([5, 20, 30], [20, 28, 39]) == [25, 48, 69]", "def check(sum_list):\n\tassert sum_list([12, 21, 30], [15, 22, 36]) == [27, 43, 66]", "def check(sum_list):\n\tassert sum_list([14, 15, 27], [18, 25, 36]) == [32, 40, 63]", "def check(sum_list):\n\tassert sum_list([7, 15, 33], [16, 30, 35]) == [23, 45, 68]", "def check(sum_list):\n\tassert sum_list([7, 22, 33], [12, 27, 30]) == [19, 49, 63]", "def check(sum_list):\n\tassert sum_list([13, 25, 35], [18, 21, 35]) == [31, 46, 70]", "def check(sum_list):\n\tassert sum_list([9, 23, 35], [11, 28, 35]) == [20, 51, 70]", "def check(sum_list):\n\tassert sum_list([14, 24, 27], [11, 26, 37]) == [25, 50, 64]", "def check(sum_list):\n\tassert sum_list([9, 24, 34], [20, 23, 35]) == [29, 47, 69]", "def check(sum_list):\n\tassert sum_list([11, 24, 33], [14, 29, 31]) == [25, 53, 64]", "def check(sum_list):\n\tassert sum_list([13, 24, 28], [10, 25, 34]) == [23, 49, 62]", "def check(sum_list):\n\tassert sum_list([15, 21, 28], [10, 20, 30]) == [25, 41, 58]", "def check(sum_list):\n\tassert sum_list([9, 17, 28], [17, 22, 32]) == [26, 39, 60]", "def check(sum_list):\n\tassert sum_list([7, 25, 28], [13, 29, 31]) == [20, 54, 59]", "def check(sum_list):\n\tassert sum_list([6, 25, 26], [12, 26, 34]) == [18, 51, 60]", "def check(sum_list):\n\tassert sum_list([9, 21, 34], [10, 26, 40]) == [19, 47, 74]", "def check(sum_list):\n\tassert sum_list([13, 18, 25], [12, 26, 39]) == [25, 44, 64]", "def check(sum_list):\n\tassert sum_list([2, 1, 2], [10, 8, 6]) == [12, 9, 8]", "def check(sum_list):\n\tassert sum_list([1, 7, 5], [1, 9, 2]) == [2, 16, 7]", "def check(sum_list):\n\tassert sum_list([1, 2, 6], [4, 11, 2]) == [5, 13, 8]", "def check(sum_list):\n\tassert sum_list([4, 6, 4], [1, 6, 6]) == [5, 12, 10]", "def check(sum_list):\n\tassert sum_list([6, 3, 2], [3, 8, 7]) == [9, 11, 9]", "def check(sum_list):\n\tassert sum_list([5, 3, 2], [10, 4, 7]) == [15, 7, 9]", "def check(sum_list):\n\tassert sum_list([2, 5, 5], [7, 10, 3]) == [9, 15, 8]", "def check(sum_list):\n\tassert sum_list([6, 7, 4], [9, 5, 8]) == [15, 12, 12]", "def check(sum_list):\n\tassert sum_list([4, 3, 1], [8, 11, 7]) == [12, 14, 8]", "def check(sum_list):\n\tassert sum_list([1, 7, 8], [1, 10, 4]) == [2, 17, 12]", "def check(sum_list):\n\tassert sum_list([5, 2, 1], [2, 9, 9]) == [7, 11, 10]", "def check(sum_list):\n\tassert sum_list([1, 5, 2], [2, 4, 9]) == [3, 9, 11]", "def check(sum_list):\n\tassert sum_list([1, 4, 2], [8, 5, 7]) == [9, 9, 9]", "def check(sum_list):\n\tassert sum_list([4, 4, 1], [4, 5, 5]) == [8, 9, 6]", "def check(sum_list):\n\tassert sum_list([6, 2, 4], [5, 10, 12]) == [11, 12, 16]", "def check(sum_list):\n\tassert sum_list([3, 2, 6], [7, 1, 4]) == [10, 3, 10]", "def check(sum_list):\n\tassert sum_list([2, 7, 3], [9, 5, 2]) == [11, 12, 5]", "def check(sum_list):\n\tassert sum_list([2, 3, 4], [9, 6, 12]) == [11, 9, 16]", "def check(sum_list):\n\tassert sum_list([2, 6, 6], [1, 3, 10]) == [3, 9, 16]", "def check(sum_list):\n\tassert sum_list([4, 7, 7], [6, 7, 8]) == [10, 14, 15]", "def check(sum_list):\n\tassert sum_list([1, 3, 7], [10, 8, 6]) == [11, 11, 13]", "def check(sum_list):\n\tassert sum_list([1, 3, 6], [3, 1, 6]) == [4, 4, 12]", "def check(sum_list):\n\tassert sum_list([2, 7, 1], [9, 4, 4]) == [11, 11, 5]", "def check(sum_list):\n\tassert sum_list([4, 2, 1], [8, 2, 5]) == [12, 4, 6]", "def check(sum_list):\n\tassert sum_list([6, 2, 5], [3, 4, 10]) == [9, 6, 15]", "def check(sum_list):\n\tassert sum_list([5, 3, 2], [5, 1, 4]) == [10, 4, 6]", "def check(sum_list):\n\tassert sum_list([4, 5, 5], [9, 10, 8]) == [13, 15, 13]", "def check(sum_list):\n\tassert sum_list([3, 4, 3], [3, 5, 11]) == [6, 9, 14]", "def check(sum_list):\n\tassert sum_list([1, 5, 2], [5, 1, 11]) == [6, 6, 13]", "def check(sum_list):\n\tassert sum_list([2, 3, 8], [3, 7, 3]) == [5, 10, 11]", "def check(sum_list):\n\tassert sum_list([3, 5, 7], [5, 8, 8]) == [8, 13, 15]", "def check(sum_list):\n\tassert sum_list([4, 3, 6], [8, 11, 11]) == [12, 14, 17]", "def check(sum_list):\n\tassert sum_list([3, 7, 8], [6, 9, 2]) == [9, 16, 10]", "def check(sum_list):\n\tassert sum_list([14, 18, 32], [14, 49, 80]) == [28, 67, 112]", "def check(sum_list):\n\tassert sum_list([15, 21, 33], [13, 47, 78]) == [28, 68, 111]", "def check(sum_list):\n\tassert sum_list([14, 15, 27], [17, 49, 79]) == [31, 64, 106]", "def check(sum_list):\n\tassert sum_list([10, 20, 33], [19, 41, 75]) == [29, 61, 108]", "def check(sum_list):\n\tassert sum_list([19, 21, 32], [11, 48, 80]) == [30, 69, 112]", "def check(sum_list):\n\tassert sum_list([18, 18, 28], [10, 50, 76]) == [28, 68, 104]", "def check(sum_list):\n\tassert sum_list([19, 17, 25], [19, 44, 79]) == [38, 61, 104]", "def check(sum_list):\n\tassert sum_list([16, 21, 26], [15, 44, 72]) == [31, 65, 98]", "def check(sum_list):\n\tassert sum_list([11, 19, 32], [10, 44, 77]) == [21, 63, 109]", "def check(sum_list):\n\tassert sum_list([20, 21, 34], [14, 50, 74]) == [34, 71, 108]", "def check(sum_list):\n\tassert sum_list([18, 23, 34], [10, 41, 72]) == [28, 64, 106]", "def check(sum_list):\n\tassert sum_list([17, 23, 28], [20, 49, 71]) == [37, 72, 99]", "def check(sum_list):\n\tassert sum_list([16, 17, 33], [12, 41, 74]) == [28, 58, 107]", "def check(sum_list):\n\tassert sum_list([13, 16, 29], [19, 40, 70]) == [32, 56, 99]", "def check(sum_list):\n\tassert sum_list([19, 18, 29], [12, 46, 79]) == [31, 64, 108]", "def check(sum_list):\n\tassert sum_list([20, 16, 33], [13, 47, 80]) == [33, 63, 113]", "def check(sum_list):\n\tassert sum_list([16, 24, 34], [17, 41, 76]) == [33, 65, 110]", "def check(sum_list):\n\tassert sum_list([19, 24, 34], [11, 50, 80]) == [30, 74, 114]", "def check(sum_list):\n\tassert sum_list([14, 24, 28], [18, 43, 76]) == [32, 67, 104]", "def check(sum_list):\n\tassert sum_list([11, 15, 29], [19, 46, 80]) == [30, 61, 109]", "def check(sum_list):\n\tassert sum_list([14, 18, 31], [11, 41, 78]) == [25, 59, 109]", "def check(sum_list):\n\tassert sum_list([16, 18, 32], [13, 46, 72]) == [29, 64, 104]", "def check(sum_list):\n\tassert sum_list([13, 23, 30], [19, 41, 78]) == [32, 64, 108]", "def check(sum_list):\n\tassert sum_list([16, 18, 33], [17, 44, 80]) == [33, 62, 113]", "def check(sum_list):\n\tassert sum_list([13, 22, 33], [12, 48, 77]) == [25, 70, 110]", "def check(sum_list):\n\tassert sum_list([13, 18, 29], [14, 50, 76]) == [27, 68, 105]", "def check(sum_list):\n\tassert sum_list([15, 18, 29], [12, 43, 80]) == [27, 61, 109]", "def check(sum_list):\n\tassert sum_list([12, 16, 35], [11, 46, 74]) == [23, 62, 109]", "def check(sum_list):\n\tassert sum_list([14, 16, 32], [18, 40, 75]) == [32, 56, 107]", "def check(sum_list):\n\tassert sum_list([14, 21, 29], [10, 41, 80]) == [24, 62, 109]", "def check(sum_list):\n\tassert sum_list([13, 18, 25], [16, 45, 75]) == [29, 63, 100]", "def check(sum_list):\n\tassert sum_list([18, 25, 35], [19, 47, 79]) == [37, 72, 114]", "def check(sum_list):\n\tassert sum_list([18, 25, 29], [16, 48, 73]) == [34, 73, 102]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Sums corresponding elements of two lists.\n\n    Parameters:\n    list1 (list of int): The first list of integers.\n    list2 (list of int): The second list of integers.\n\n    Returns:\n    list of int: A new list containing the sums of corresponding elements.\n\n    Raises:\n    ValueError: If the input lists are of different lengths.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n\n    return [a + b for a, b in zip(list1, list2)]\n", "passed": true, "pass": true, "pass_num": 10, "round": 219, "mutate_method": "rephrase_one", "parent_index": 219}
