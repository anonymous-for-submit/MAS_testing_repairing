{"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 450, "prompt": "Write a function to extract specified size of strings from a given list of string values.", "code": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result", "test_imports": [], "test_list": ["assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']", "assert extract_string(['jKZxOlbTaCu', 'zidnr', 'xltfgdxamss', 'smtiqxdjc', 'mgtwbidx'], 10) == []", "assert extract_string(['Zhe', 'izedzf', 'ovwmfog', 'qsoizovqmp', 'ldrggernh'], 12) == []", "assert extract_string(['BApRsE', 'gqofblu', 'obikzivdtqfgyua', 'ekuizhhfbzgj', 'ehgisf'], 9) == []", "assert extract_string(['jNGUkWdPB', 'avmpxwx', 'yshaiwxgetv', 'xpuoyfeyiss', 'ezghlnx'], 3) == []", "assert extract_string(['dlpzCg', 'nnkxwjvcj', 'uckxhf', 'org', 'ngeiwjld'], 9) == ['nnkxwjvcj']", "assert extract_string(['qiLnBlBVj', 'aqfmgu', 'ogfajlf', 'nkpjspnrglch', 'onrbz'], 13) == []", "assert extract_string(['EXe', 'rvorn', 'tdmsbycpjsqf', 'tpycx', 'ekxvplpan'], 5) == ['rvorn', 'tpycx']", "assert extract_string(['wlRv', 'jlakv', 'rcaholmfvpcr', 'yqyk', 'hnizdsxozl'], 3) == []", "assert extract_string(['IxdWseMF', 'hxcmql', 'umjmrklebwoo', 'lzxlgcf', 'fnivue'], 11) == []", "assert extract_string(['iHGsQqvLWN', 'yjp', 'jgwnkuveyqxvwtk', 'vamwzd', 'srubdizrzf'], 4) == []", "assert extract_string(['NqOFuIkkLvfy', 'ppqws', 'xiphudcfbbjepny', 'aarbeuq', 'gstx'], 12) == ['NqOFuIkkLvfy']", "assert extract_string(['njVBD', 'zkglez', 'etwmrmolooxmx', 'yoismcx', 'uejkcgiizjdm'], 11) == []", "assert extract_string(['TuKjvortMDW', 'mykzhqsi', 'kedodjdilijtczg', 'fhmhkqihbgq', 'dkv'], 3) == ['dkv']", "assert extract_string(['cfAjjBcyAZ', 'npqki', 'qcaxrrzmkpynti', 'ickyesvysq', 'hfwbnabmrhnu'], 11) == []", "assert extract_string(['uilztUqcfYT', 'dcykggdb', 'zyxuhhkfpxu', 'ohonoifypmim', 'jkuhtm'], 6) == ['jkuhtm']", "assert extract_string(['xRyIDvJIkLAL', 'dgtfbavd', 'qjzxkfp', 'itudjtqnwa', 'koop'], 7) == ['qjzxkfp']", "assert extract_string(['UTIaeel', 'fwidoza', 'kqodrsniaucvrw', 'bzwvhqzdxmu', 'pcgyemagtz'], 8) == []", "assert extract_string(['hBHPytxSSPZD', 'xpn', 'fraakn', 'wlgcplz', 'kcf'], 8) == []", "assert extract_string(['cTNkh', 'qcyluhgvt', 'adaovka', 'gcqlvlu', 'qbu'], 4) == []", "assert extract_string(['puoQ', 'hpg', 'dwgsvnijfcxsac', 'jgwtzbnbok', 'onhhojymv'], 5) == []", "assert extract_string(['qFRztkZpcXZQ', 'jzu', 'ytptnt', 'dzkegjhb', 'xgka'], 3) == ['jzu']", "assert extract_string(['ZpnDIzn', 'yrv', 'jeuzpwufhmpjdd', 'vtebtv', 'bxj'], 4) == []", "assert extract_string(['uPmaLpDnHDY', 'yccg', 'yfsthyrcjlepqx', 'trm', 'usiiat'], 11) == ['uPmaLpDnHDY']", "assert extract_string(['yJoWsqXW', 'fpjlbg', 'dztsakosic', 'yuvjqanlxhmx', 'nxjnmosfyb'], 12) == ['yuvjqanlxhmx']", "assert extract_string(['uhnhSKLTHv', 'xxcqj', 'lgqmhnyimzmnx', 'uqtheqbvmt', 'vofocpbodgrj'], 10) == ['uhnhSKLTHv', 'uqtheqbvmt']", "assert extract_string(['sbdnssDPvP', 'spx', 'gmbegpimvqfg', 'szaaxcpbi', 'ytiupavt'], 5) == []", "assert extract_string(['WANM', 'rdjbp', 'lecfmv', 'bshpflmlhmu', 'qtl'], 12) == []", "assert extract_string(['IkT', 'aka', 'ccixezbmy', 'jyokaqmodc', 'dzlkcqwskxpd'], 11) == []", "assert extract_string(['fRuUWlOFAaa', 'dbl', 'zsisxpmhlzbhns', 'moao', 'rohvglzgfj'], 7) == []", "assert extract_string(['NsU', 'wxrox', 'zniqnpguf', 'tdudqqqynk', 'asqjfqbx'], 5) == ['wxrox']", "assert extract_string(['ZLudB', 'nuky', 'nynnor', 'glt', 'asegimcqbi'], 5) == ['ZLudB']", "assert extract_string(['jGJERDGVKYi', 'bkrstpsh', 'fwhysjwnvwqdnec', 'axhnclpuq', 'usjxvfmb'], 7) == []", "assert extract_string(['NNXY', 'vjwxzvj', 'aczciavhppbwcc', 'fgktlykw', 'jdqva'], 9) == []", "assert extract_string(['oGcmYUri', 'okxyz', 'qmbhowtfpqza', 'atgwvceh', 'tmji'], 2) == []", "assert extract_string(['ORulboIGPk', 'nqpachx', 'ifopccvpslnarb', 'rybhhlyb', 'lmbqgslrbtss'], 8) == ['rybhhlyb']", "assert extract_string(['DMAGPTjNl', 'bawiyko', 'ktasnut', 'jykrjrem', 'ftzdocnr'], 1) == []", "assert extract_string(['RjjNLI', 'kwnmigrvg', 'vktqhugw', 'ptjt', 'vixoimmdtf'], 10) == ['vixoimmdtf']", "assert extract_string(['HOLaaJtY', 'vhowitgg', 'jgpbpjmr', 'gjtszex', 'jvlojhwystev'], 5) == []", "assert extract_string(['lFaS', 'acfencxp', 'yehlorakttvx', 'fdhgagzepi', 'xypgmb'], 6) == ['xypgmb']", "assert extract_string(['eFrN', 'lad', 'ohabvssqo', 'pqucnc', 'kbd'], 1) == []", "assert extract_string(['pdh', 'bzpdbquby', 'obijxkxyggvuplg', 'fqwtrycrlykp', 'bsejeldtfyx'], 4) == []", "assert extract_string(['mXlWvciwAss', 'krq', 'hdnspxvczv', 'gclwusih', 'kxdngh'], 8) == ['gclwusih']", "assert extract_string(['VwTnATgEQ', 'kvaps', 'aappnineaqihdur', 'sbcur', 'kieiypucajbh'], 4) == []", "assert extract_string(['eHG', 'kwplmaur', 'nntcsofm', 'kijhbcmaod', 'tlyig'], 5) == ['tlyig']", "assert extract_string(['uhHIh', 'mwyjvyuid', 'ixrvfhdc', 'oroolrhw', 'dgsvq'], 9) == ['mwyjvyuid']", "assert extract_string(['CnKkr', 'xnfmwjthj', 'abjwmem', 'pczh', 'onmjfs'], 2) == []", "assert extract_string(['eVBNi', 'zyz', 'ogrildsjfpevn', 'lslyorggn', 'unqvawyz'], 4) == []", "assert extract_string(['llwsMBCqN', 'vwdh', 'ccabxbhtfvscg', 'bflsrutzs', 'hszmgzudedn'], 10) == []", "assert extract_string(['FfEx', 'bodzqjn', 'wxwouraulxh', 'roy', 'slsnypjspyw'], 5) == []", "assert extract_string(['WehfmOw', 'tbduqrcmn', 'lzjmrvxzvcpmku', 'xerbwpk', 'aka'], 1) == []", "assert extract_string(['arFJSEi', 'ajuxxh', 'jcbulfhzdljftca', 'jbkqkjzoi', 'pdcpbp'], 6) == ['ajuxxh', 'pdcpbp']", "assert extract_string(['yaXZCHRpL', 'szdsugfte', 'zsxbsjdl', 'efgmhlkpyq', 'cuckfgasiu'], 6) == []", "assert extract_string(['TykKJEXmfsCu', 'bndi', 'vwavjd', 'mbkwy', 'ivtembvxnxx'], 1) == []", "assert extract_string(['Yapm', 'isrlw', 'krujpqxalbfnc', 'aeqr', 'jerboootja'], 4) == ['Yapm', 'aeqr']", "assert extract_string(['kmdQxSk', 'gywfg', 'znhbvbrsnapwfn', 'phhyui', 'trw'], 1) == []", "assert extract_string(['lQz', 'irvtzrg', 'ehwoss', 'zvpqa', 'asvy'], 11) == []", "assert extract_string(['lkUQsj', 'xjhfwgrp', 'hlfcmp', 'qur', 'qhgjx'], 2) == []", "assert extract_string(['jlIvP', 'hdojcyh', 'jeoagmoa', 'lbpvdwentuch', 'dcnqo'], 8) == ['jeoagmoa']", "assert extract_string(['cTwyLkLvRoj', 'ykjtxbr', 'lqvjtx', 'yecbleuj', 'wnqxghdb'], 7) == ['ykjtxbr']", "assert extract_string(['hccEwgC', 'yjd', 'uokzwcczpvsb', 'bmvhgx', 'svrn'], 8) == []", "assert extract_string(['tpOa', 'dvq', 'lrpuecccgluizma', 'iftaa', 'fkjihu'], 1) == []", "assert extract_string(['KwnZ', 'eksebeodh', 'imodlc', 'cjhrj', 'mdyl'], 10) == []", "assert extract_string(['JvhxG', 'sjgsj', 'sxnqqqnili', 'vuy', 'mlwsvyfrphc'], 10) == ['sxnqqqnili']", "assert extract_string(['QdhSmsLAubVU', 'xbzqhulx', 'acbusubjn', 'mkfynjoz', 'atrmdmupltad'], 8) == ['xbzqhulx', 'mkfynjoz']", "assert extract_string(['CFwdBijf', 'kxa', 'fbjigawanb', 'llmefz', 'ecgyjxis'], 5) == []", "assert extract_string(['tQRJyzpFM', 'hwcz', 'geqtutltlxclil', 'kqeq', 'hkzxmnhvl'], 11) == []", "assert extract_string(['fRtPMnFd', 'lzezfaako', 'svxwfxhviowej', 'binvjageuybm', 'wljmkfwxu'], 7) == []", "assert extract_string(['QtklXVEQ', 'sacklcoq', 'smtmlthfiggeez', 'luao', 'ssmg'], 12) == []", "assert extract_string(['deRs', 'ypy', 'khxcxlsyhupvr', 'hrhojwmvzni', 'mkhijhwhrqsh'], 11) == ['hrhojwmvzni']", "assert extract_string(['tjDdGemi', 'zapfi', 'qkugnxqldrvg', 'gmoisdvdipbj', 'kgkrtucybilr'], 6) == []", "assert extract_string(['FPRXokkiErxM', 'zbxvjcuy', 'gylahjlnsfkam', 'vics', 'uqucacmltwy'], 8) == ['zbxvjcuy']", "assert extract_string(['pDBwDagBZz', 'itkxwqwxj', 'jufssdmqu', 'totoaqcocf', 'xae'], 11) == []", "assert extract_string(['TtAKb', 'iscr', 'ookgzgmsdffim', 'ltnpjnzfheb', 'nyysgpfsaw'], 9) == []", "assert extract_string(['zOBfcS', 'edquwnacz', 'mqdrbqk', 'nfta', 'oyj'], 11) == []", "assert extract_string(['gKHJi', 'kbujwgh', 'rpjyedpkg', 'vhxou', 'ugzmlp'], 14) == []", "assert extract_string(['msMrNGiA', 'vigojgqu', 'xtunpubkjxy', 'nafguzepvwk', 'iqpwig'], 10) == []", "assert extract_string(['QOMl', 'buebmomjw', 'puvytkdimonvwqs', 'qjwemc', 'zncgi'], 10) == []", "assert extract_string(['OzZPPlug', 'eufydot', 'jwtnas', 'lwesfhjnl', 'rolj'], 12) == []", "assert extract_string(['HpEgWRuGZ', 'atfcuqi', 'uobifsuhulkv', 'nfbiigw', 'mybnvveeky'], 4) == []", "assert extract_string(['zNpPqeHKTkRB', 'vjexpy', 'wijkiitcrpmnpue', 'xzqlmwaybow', 'jfgrdquowzj'], 4) == []", "assert extract_string(['CNEuyxKYgY', 'tjbgflieo', 'ztvzcg', 'bcn', 'apa'], 7) == []", "assert extract_string(['bkqRrG', 'mrc', 'zqpcdchvwc', 'eobojonbo', 'irglaue'], 6) == ['bkqRrG']", "assert extract_string(['yKZHIbqUcOf', 'vbap', 'temtsdkvmfyg', 'vgholm', 'nxwoi'], 7) == []", "assert extract_string(['OSqDpECc', 'grkaor', 'dcoxnpueknq', 'vsxautphmnva', 'rgbe'], 4) == ['rgbe']", "assert extract_string(['mIL', 'eytiuuru', 'ptzhwvxaydbedh', 'odolwiqs', 'anpdogtsmhme'], 10) == []", "assert extract_string(['uIkcyo', 'wwbgeb', 'xalrsw', 'juroqql', 'oxgohi'], 5) == []", "assert extract_string(['hCAkU', 'zajv', 'umevtcvsbemxgc', 'jeshwtrlp', 'coydeatcexx'], 5) == ['hCAkU']", "assert extract_string(['QiusjluDm', 'ixzuyi', 'afosdjxofjrgw', 'eoesfb', 'cnigxqut'], 8) == ['cnigxqut']", "assert extract_string(['cDaTdqPRiIJO', 'ytyzqtm', 'qbduwkn', 'bpfoeymufcx', 'secwkqsv'], 12) == ['cDaTdqPRiIJO']", "assert extract_string(['OtUxgXLi', 'alcta', 'fpzycv', 'smzlsvido', 'sfndgj'], 9) == ['smzlsvido']", "assert extract_string(['CXyvrbK', 'pkcadm', 'zugxlqlajsktm', 'jffbzxek', 'olyjh'], 7) == ['CXyvrbK']", "assert extract_string(['hAXrI', 'lgpwinx', 'fmbosrqdourfu', 'irnrvikoztpy', 'xxell'], 7) == ['lgpwinx']", "assert extract_string(['XUKRrkUPdle', 'qdqu', 'ggcdbhho', 'pnkegk', 'kbkwatjzkwf'], 11) == ['XUKRrkUPdle', 'kbkwatjzkwf']", "assert extract_string(['wodZDBBP', 'urpypeilp', 'acabxqj', 'qaasiyjgl', 'ligawovb'], 8) == ['wodZDBBP', 'ligawovb']", "assert extract_string(['RGYEVnw', 'necptvhl', 'aorjemubsk', 'unpkc', 'zydxygap'], 10) == ['aorjemubsk']", "assert extract_string(['TMXzNPgP', 'slldo', 'ntuphclibkh', 'osqwqb', 'moi'], 4) == []", "assert extract_string(['EoZ', 'qyfypovk', 'ourfcn', 'jwz', 'llqxtppzt'], 14) == []", "assert extract_string(['RIawmwjQdirR', 'pnhet', 'mywjfndfwl', 'nym', 'idsgtty'], 8) == []", "assert extract_string(['Eip', 'qgccnc', 'ujgeifgzrsxmuvw', 'fism', 'ifnn'], 13) == []"], "entry_point": "extract_string", "repair_prompt": ["Write a function extract_string to extract specified size of strings from a given list of string values.\nextract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n", "Write a function extract_string to extract specified size of strings from a given list. The list contains string values.\nextract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n", "Write a function extract_string to extract specified size of strings from a given list of string values.\nextract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n"], "completions": ["from typing import List\n## main.py\n\ndef extract_string(strings: list[str], length: int) -> list[str]:\n    '''\n    Extract strings of a specified length from a list of strings.\n\n    Parameters:\n    strings (list[str]): A list of strings to filter.\n    length (int): The length of strings to extract.\n\n    Returns:\n    list[str]: A list containing strings of the specified length.\n    '''\n    # Using list comprehension to filter strings based on the specified length\n    return [string for string in strings if len(string) == length]\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to demonstrate the function's behavior\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8))  # Expected: ['practice', 'solution']\n    print(extract_string([], 5))  # Expected: []\n    print(extract_string(['Python', 'list', 'exercises'], 0))  # Expected: []\n    print(extract_string(['a', 'bb', 'ccc'], 1))  # Expected: ['a']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list[str], length: int) -> list[str]:\n    '''\n    Extract strings of a specified length from a list of strings.\n\n    Parameters:\n    strings (list[str]): A list of strings to filter.\n    length (int): The length of strings to extract.\n\n    Returns:\n    list[str]: A list of strings that match the specified length.\n    '''\n    # Initialize an empty list to store strings that match the specified size\n    result = []\n\n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the length of the current string equals the specified size\n        if len(string) == length:\n            # If it matches, append the string to the result list\n            result.append(string)\n\n    # Return the result list\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to demonstrate functionality\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8))  # Expected: ['practice', 'solution']\n    print(extract_string([], 5))  # Expected: []\n    print(extract_string(['Python', 'list', 'exercises'], 4))  # Expected: ['list']\n    print(extract_string(['Python', 'list', 'exercises'], 10))  # Expected: []\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list[str], length: int) -> list[str]:\n    \"\"\"\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list[str]): A list of strings to filter.\n    length (int): The length of strings to extract.\n\n    Returns:\n    list[str]: A list of strings that match the specified length.\n    \"\"\"\n    # Use list comprehension to filter strings based on the specified length\n    return [string for string in strings if len(string) == length]\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to demonstrate functionality\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8))  # Expected: ['practice', 'solution']\n    print(extract_string([], 5))  # Expected: []\n    print(extract_string(['Python', 'list', 'exercises'], 4))  # Expected: ['list']\n    print(extract_string(['a', 'bb', 'ccc', 'dddd'], 2))  # Expected: ['bb']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list[str], length: int) -> list[str]:\n    \"\"\"\n    Extract strings from the input list that have the specified length.\n\n    Parameters:\n    strings (list[str]): A list of strings to filter.\n    length (int): The length of strings to extract.\n\n    Returns:\n    list[str]: A list of strings that match the specified length.\n    \"\"\"\n    # Using list comprehension to filter strings based on the specified length\n    return [string for string in strings if len(string) == length]\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases to demonstrate the function's behavior\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8))  # Output: ['practice', 'solution']\n    print(extract_string([], 5))  # Output: []\n    print(extract_string(['short', 'tiny', 'big'], 4))  # Output: ['tiny']\n    print(extract_string(['Python', 'list', 'exercises'], 10))  # Output: []\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list[str], length: int) -> list[str]:\n    '''\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list of str): The list of strings to filter.\n    length (int): The length of strings to extract.\n\n    Returns:\n    list of str: A list containing strings of the specified length.\n    '''\n    # Initialize an empty list to store strings that match the specified size\n    result = []\n\n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the length of the current string is equal to the specified size\n        if len(string) == length:\n            # Append the string to the result list\n            result.append(string)\n\n    # Return the result list after iterating through all strings\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    test_strings = ['Python', 'list', 'exercises', 'practice', 'solution']\n    specified_length = 8\n    print(extract_string(test_strings, specified_length))  # Output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list[str], length: int) -> list[str]:\n    '''\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list[str]): A list of strings to filter.\n    length (int): The length of strings to extract.\n\n    Returns:\n    list[str]: A list of strings that match the specified length.\n    '''\n    # Initialize an empty list to store the strings that match the specified size\n    result = []\n\n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the length of the current string is equal to the specified size\n        if len(string) == length:\n            # If it matches, append the string to the result list\n            result.append(string)\n\n    # Return the result list\n    return result\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, length: int) -> list:\n    \"\"\"Extract strings of a specified length from a list of strings.\n\n    This function iterates over the provided list of strings and filters out\n    those that match the specified length. Non-string elements are ignored.\n\n    Args:\n        strings (list): A list of strings to filter.\n        length (int): The length of strings to extract.\n\n    Returns:\n        list: A list of strings that match the specified length.\n    \"\"\"\n    # Initialize an empty list to store strings that match the specified size\n    result = []\n\n    # Iterate over each element in the input list\n    for element in strings:\n        # Check if the element is a string and if its length matches the specified size\n        if isinstance(element, str) and len(element) == length:\n            # Append the string to the result list if conditions are met\n            result.append(element)\n\n    # Return the result list\n    return result\n\n# Example usage:\n# result = extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n# print(result)  # Output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list[str], length: int) -> list[str]:\n    \"\"\"\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list[str]): The list of strings to filter.\n    length (int): The desired length of strings to extract.\n\n    Returns:\n    list[str]: A list containing strings of the specified length.\n    \"\"\"\n    # Use list comprehension to filter strings of the specified length\n    return [s for s in strings if isinstance(s, str) and len(s) == length]\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8))  # ['practice', 'solution']\n    print(extract_string([], 8))  # []\n    print(extract_string(['Python', 'list', 'exercises'], 4))  # ['list']\n    print(extract_string(['Python', 'list', 'exercises'], 10))  # []\n    print(extract_string(['Python', 123, 'list', None, 'exercises'], 4))  # ['list']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, length: int) -> list:\n    \"\"\"\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list): A list of string values.\n    length (int): The length of strings to extract.\n\n    Returns:\n    list: A list containing strings of the specified length.\n    \"\"\"\n    # Initialize an empty list to store strings that match the specified size\n    result = []\n\n    # Iterate over each element in the input list\n    for element in strings:\n        # Check if the element is a string and if its length is equal to the specified size\n        if isinstance(element, str) and len(element) == length:\n            # Append the string to the result list\n            result.append(element)\n\n    # Return the result list containing all strings of the specified size\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 0))  # Expected output: []\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 7))  # Expected output: ['exercises']\n    print(extract_string(['Python', 123, 'practice', None, 'solution'], 8))  # Expected output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, length: int) -> list:\n    \"\"\"\n    Extract strings of a specified length from a list of strings.\n\n    Parameters:\n    strings (list): A list of strings to filter.\n    length (int): The length of strings to extract.\n\n    Returns:\n    list: A list containing strings of the specified length.\n    \"\"\"\n    # Use list comprehension to filter strings based on the specified length\n    return [string for string in strings if isinstance(string, str) and len(string) == length]\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to demonstrate functionality\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8))  # Expected: ['practice', 'solution']\n    print(extract_string([], 5))  # Expected: []\n    print(extract_string(['Python', 'list', 'exercises'], 0))  # Expected: []\n    print(extract_string(['Python', 'list', 'exercises'], 4))  # Expected: ['list']\n    print(extract_string(['Python', 123, 'exercises', None], 8))  # Expected: ['exercises']\n"], "plans": ["requirement analysis:\nThe function should efficiently filter strings based on their length, ensuring it handles various input scenarios, including empty lists and strings of varying lengths.\nrequirement pool:\n- The function should correctly extract strings of the specified length.\n- The function should handle empty lists without errors.\n- The function should be optimized for performance.\n- The function should include error handling for invalid inputs.\n- The function should be well-documented for ease of use.\nWe will implement a simple function using Python's built-in capabilities to filter strings based on their length. The function will iterate over the list and use a list comprehension to efficiently extract strings of the specified length. This approach ensures simplicity and performance without the need for external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'specified size'\n    Explanation: The requirement is to extract strings from a list that match a given length.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` that takes two parameters: a list of strings and an integer representing the specified size.\n    2. Use a list comprehension to iterate over each string in the list.\n    3. Check if the length of each string matches the specified size.\n    4. Collect and return the strings that match the specified size.\n\n# [edge case] \n    extract_string([], 5) = []\n    Explanation: An empty list should return an empty list since there are no strings to check.\n    \n    extract_string(['Python', 'list', 'exercises'], 0) = []\n    Explanation: No string can have a length of 0, so the expected output is an empty list.\n    \n    extract_string(['a', 'bb', 'ccc'], 1) = ['a']\n    Explanation: Only the string 'a' has a length of 1, so it should be returned.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using list comprehension will naturally handle these cases by returning an empty list when no strings match the specified size.\n", "requirement analysis:\nThe function should efficiently filter strings based on their length, ensuring it handles various edge cases such as empty lists or strings. It should be easy to integrate into existing projects and maintain compatibility with Python 3.x.\nrequirement pool:\n- The function must correctly filter strings based on specified length.\n- The function should handle edge cases like empty lists or strings.\n- Ensure compatibility with Python 3.x.\n- Provide clear documentation for users.\n- Optimize for performance with large lists.\nWe will implement a simple function using Python's built-in capabilities to filter strings based on their length. This approach ensures compatibility with Python 3.x and avoids unnecessary dependencies. The function will handle edge cases such as empty lists and will be documented with examples for clarity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'extract specified size of strings'\n    Explanation: The requirement is to filter and return strings from a list that match a specified length.\n\n# [phrase showing quantity relationship]\n    'specified size': refers to the exact length that the strings need to match in order to be included in the result.\n    Implementation: Use a conditional check to compare the length of each string with the specified size.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` with parameters for the list of strings and the specified size.\n    2. Initialize an empty list to store strings that match the specified size.\n    3. Iterate through each string in the input list.\n    4. Check if the length of the current string equals the specified size.\n    5. If it matches, append the string to the result list.\n    6. Return the result list.\n\n# [edge case] \n    extract_string([], 5) = []\n    Explanation: An empty list has no strings to check, so the expected output is an empty list.\n    \n    extract_string(['Python', 'list', 'exercises'], 4) = ['list']\n    Explanation: Only 'list' matches the specified size of 4, so it is included in the result.\n\n    extract_string(['Python', 'list', 'exercises'], 10) = []\n    Explanation: No strings match the specified size of 10, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic naturally handles cases like empty lists and sizes that do not match any string length.\n", "requirement analysis:\nThe requirement is to create a function that filters strings from a list based on a specified length. The function should be efficient and handle edge cases such as empty lists or no matches.\nrequirement pool:\n- Implement the extract_string function to filter strings by length.\n- Ensure the function handles edge cases gracefully.\n- Provide documentation and examples for the function.\n- Optimize the function for performance with large lists.\n- Test the function across different Python versions.\nWe will implement a simple function using Python's built-in capabilities to filter strings based on their length. The function will iterate over the list and use a list comprehension to efficiently extract strings of the specified length. This approach ensures compatibility across different Python versions and handles edge cases such as empty lists gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'specified size'\n    Explanation: The requirement is to extract strings from a list that match a given length.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` that takes two parameters: a list of strings and an integer specifying the desired length.\n    2. Use a list comprehension to iterate over each string in the list.\n    3. Check if the length of each string matches the specified size.\n    4. Collect all strings that match the specified size into a new list.\n    5. Return the new list.\n\n# [edge case] \n    extract_string([], 5) = []\n    Explanation: An empty list should return an empty list since there are no strings to check.\n    \n    extract_string(['Python', 'list', 'exercises'], 4) = ['list']\n    Explanation: Only 'list' matches the specified size of 4.\n    \n    extract_string(['a', 'bb', 'ccc', 'dddd'], 2) = ['bb']\n    Explanation: Only 'bb' matches the specified size of 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of using list comprehension inherently handles empty lists and checks each string's length against the specified size.\n", "requirement analysis:\nThe function should efficiently filter strings based on their length, ensuring it handles edge cases such as empty lists or strings shorter than the specified length. It should be easy to integrate into existing projects and maintain compatibility with Python 3.x.\nrequirement pool:\n- The function must correctly filter strings based on specified length.\n- The function should handle edge cases gracefully.\n- The function should be compatible with Python 3.x.\n- Provide clear documentation for the function.\n- Ensure the function is efficient and easy to use.\nWe will implement a simple function using Python's built-in capabilities to filter strings based on their length. This approach ensures compatibility with Python 3.x and avoids unnecessary dependencies. The function will handle edge cases such as empty lists and strings shorter than the specified length gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'specified size'\n    Explanation: The requirement is to extract strings from a list that match a given length.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` that takes two parameters: a list of strings and an integer representing the specified size.\n    2. Use a list comprehension to iterate over each string in the list.\n    3. Check if the length of each string is equal to the specified size.\n    4. Collect all strings that match the specified size into a new list.\n    5. Return the new list.\n\n# [edge case] \n    extract_string([], 5) = []\n    Explanation: An empty list should return an empty list since there are no strings to check.\n    \n    extract_string(['short', 'tiny', 'big'], 4) = ['tiny']\n    Explanation: Only 'tiny' matches the specified size of 4, so it should be returned.\n    \n    extract_string(['Python', 'list', 'exercises'], 10) = []\n    Explanation: None of the strings match the specified size of 10, so an empty list should be returned.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using list comprehension will naturally handle these cases by returning an empty list when no strings match the specified size.\n", "requirement analysis:\nThe function should efficiently filter strings based on their length from a list. It must handle various edge cases, such as empty lists or strings shorter than the specified length. The implementation should be straightforward and compatible with different Python versions.\nrequirement pool:\n- Implement the main function to extract strings of specified length\n- Ensure compatibility with Python 3.x versions\n- Handle edge cases like empty lists or non-string elements\n- Provide comprehensive documentation and examples\n- Optimize for performance in large datasets\nWe will implement a simple function using Python's built-in capabilities to filter strings based on their length. The function will iterate over the list and select strings that match the specified length. We will ensure compatibility with Python 3.x versions and handle edge cases such as empty lists. Since the requirement does not specify handling non-string elements, we will assume the list contains only strings.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'extract specified size of strings'\n    Explanation: This means the function should filter and return strings from the list that have a length equal to the specified size.\n\n# [phrase showing quantity relationship]\n    'specified size': This indicates that the function should compare the length of each string in the list to a given number and select those that match exactly.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` that takes two parameters: a list of strings and an integer representing the specified size.\n    2. Initialize an empty list to store strings that match the specified size.\n    3. Iterate over each string in the input list.\n    4. Check if the length of the current string is equal to the specified size.\n    5. If it is, append the string to the result list.\n    6. Return the result list after iterating through all strings.\n\n# [edge case] \n    extract_string([], 5) = []\n    Explanation: An empty list should return an empty list since there are no strings to check.\n    \n    extract_string(['Python', 'list', 'exercises'], 0) = []\n    Explanation: No string can have a length of 0, so the expected output is an empty list.\n    \n    extract_string(['a', 'ab', 'abc'], 1) = ['a']\n    Explanation: Only the string 'a' has a length of 1, so it should be returned.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through the list and checking string lengths will naturally handle these cases.\n", "requirement analysis:\nThe function should iterate over the list of strings and filter out those that match the specified length. It should handle edge cases such as empty lists or when no strings match the specified length. The function should be efficient and compatible with different Python versions.\nrequirement pool:\n- Implement the main function to extract strings of a specified length.\n- Ensure compatibility with Python 3.x versions.\n- Include error handling for edge cases.\n- Provide comprehensive documentation and examples.\n- Optimize performance for large lists.\nWe will implement a simple function that iterates over the list of strings and filters out those that match the specified length. The function will handle edge cases such as empty lists or when no strings match the specified length. We will use Python's built-in capabilities to ensure compatibility with different Python 3.x versions and optimize for performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'specified size'\n    Explanation: The requirement is to extract strings from a list that match a given length.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` that takes two parameters: a list of strings and an integer representing the specified size.\n    2. Initialize an empty list to store the strings that match the specified size.\n    3. Iterate over each string in the input list.\n    4. Check if the length of the current string is equal to the specified size.\n    5. If it matches, append the string to the result list.\n    6. Return the result list.\n\n# [edge case] \n    extract_string([], 5) = []\n    Explanation: The input list is empty, so there are no strings to extract, resulting in an empty list.\n    \n    extract_string(['Python', 'list'], 10) = []\n    Explanation: None of the strings in the list have a length of 10, so the function returns an empty list.\n    \n    extract_string(['Python', 'list', 'exercises'], 4) = ['list']\n    Explanation: Only the string 'list' has a length of 4, so it is extracted.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for empty lists and cases where no strings match the specified length.\n", "requirement analysis:\nThe function should efficiently filter strings based on their length, ensuring it handles various input scenarios, including empty lists and non-string elements.\nrequirement pool:\n- Implement the main function logic to filter strings by length\n- Ensure compatibility with different Python versions\n- Provide comprehensive documentation and examples\n- Optimize for performance with large lists\n- Include error handling for non-string inputs\nWe will implement a simple function that iterates over the list of strings and filters out those that match the specified length. We will use Python's built-in capabilities to achieve this, ensuring compatibility with various Python versions. The function will handle edge cases such as empty lists and non-string elements by ignoring non-string elements and returning an empty list if no strings match the specified length.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'extract specified size of strings'\n    Explanation: The requirement is to filter and return strings from a list that match a given length.\n\n# [phrase showing quantity relationship]\n    'specified size': This indicates the exact length that the strings need to match in order to be included in the result.\n    Implementation: Use a conditional check to compare the length of each string with the specified size.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` that takes a list of strings and an integer representing the specified size.\n    2. Initialize an empty list to store strings that match the specified size.\n    3. Iterate over each element in the input list.\n    4. Check if the element is a string and if its length matches the specified size.\n    5. If both conditions are met, append the string to the result list.\n    6. Return the result list.\n\n# [edge case] \n    extract_string([], 8) = []\n    Explanation: The input list is empty, so there are no strings to check against the specified size.\n    \n    extract_string(['Python', 'list', 'exercises'], 4) = ['list']\n    Explanation: Only 'list' matches the specified size of 4.\n\n    extract_string(['Python', 123, 'solution'], 8) = ['solution']\n    Explanation: Non-string elements are ignored, and 'solution' matches the specified size of 8.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for empty lists and non-string elements by ignoring them and returning an empty list if no matches are found.\n", "requirement analysis:\nThe function should efficiently filter and return strings from a list that match a specified length. It should handle edge cases such as empty lists and non-string elements gracefully.\nrequirement pool:\n- Implement the core function to extract strings of a specified length.\n- Ensure compatibility with Python 3.x versions.\n- Provide comprehensive documentation and usage examples.\n- Optimize the function for performance with large datasets.\n- Include unit tests to verify functionality.\nWe will implement a simple function using Python's built-in capabilities to filter strings based on their length. The function will iterate over the list and use a list comprehension to efficiently extract strings of the specified length. We will ensure compatibility with Python 3.x versions and provide comprehensive documentation and examples. Non-string elements will be ignored during processing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'extract specified size of strings'\n    Explanation: The requirement is to filter and return strings from a list that match a given length.\n\n# [phrase showing quantity relationship]\n    'specified size': This indicates the exact length that the strings need to match in order to be included in the output list.\n    Implementation: Use a condition to check if the length of each string equals the specified size.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` with parameters for the list of strings and the specified size.\n    2. Use a list comprehension to iterate over each string in the list.\n    3. Check if the length of each string matches the specified size.\n    4. Collect and return all strings that meet the condition.\n\n# [edge case] \n    extract_string([], 8) = []\n    Explanation: An empty list should return an empty list since there are no strings to check.\n    \n    extract_string(['Python', 'list', 'exercises'], 4) = ['list']\n    Explanation: Only 'list' has a length of 4, so it should be returned.\n\n    extract_string(['Python', 'list', 'exercises'], 10) = []\n    Explanation: No string in the list has a length of 10, so the function should return an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using list comprehension will naturally handle these cases by returning an empty list when no strings match the specified size.\n", "requirement analysis:\nThe function should efficiently filter strings based on a specified length from a list. It should handle edge cases such as empty lists and non-string elements gracefully.\nrequirement pool:\n- Implement the core function to extract strings of a specified length.\n- Ensure compatibility with Python 3.x versions.\n- Provide comprehensive documentation and usage examples.\n- Optimize the function for performance with large datasets.\n- Include error handling for non-string inputs.\nWe will implement a simple function using Python's built-in capabilities to filter strings based on their length. The function will iterate over the list and check the length of each string, returning a new list with strings that match the specified length. We will handle non-string elements by ignoring them, ensuring the function remains robust and user-friendly. The function will be compatible with Python 3.x versions and will include comprehensive documentation and examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'extract specified size of strings'\n    Explanation: This means the function should filter and return strings from the list that have a length equal to the specified size.\n\n# [phrase showing quantity relationship]\n    'specified size': This indicates that the function should compare the length of each string to a given number and include only those strings that match this length.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` that takes a list of strings and an integer `size` as parameters.\n    2. Initialize an empty list to store strings that match the specified size.\n    3. Iterate over each element in the input list.\n    4. Check if the element is a string and if its length is equal to the specified size.\n    5. If both conditions are met, append the string to the result list.\n    6. Return the result list containing all strings of the specified size.\n\n# [edge case] \n    extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 0) = []\n    Explanation: No string can have a length of 0, so the expected output is an empty list.\n    \n    extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 7) = ['exercises']\n    Explanation: Only 'exercises' has a length of 7, so it is the only string returned in the list.\n    \n    extract_string(['Python', 123, 'practice', None, 'solution'], 8) = ['practice', 'solution']\n    Explanation: Non-string elements like integers and None are ignored, and only strings with length 8 are returned.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for non-string elements by ignoring them and handles any specified size, including zero.\n", "requirement analysis:\nThe function should efficiently filter strings based on their length, ensuring it handles various input scenarios, including empty lists and non-string elements.\nrequirement pool:\n- Implement the main function to extract strings of specified length\n- Ensure compatibility with Python 3.x versions\n- Provide comprehensive documentation and examples\n- Optimize for performance with large lists\n- Include error handling for invalid inputs\nWe will implement a simple function using Python's built-in capabilities to filter strings based on their length. The function will iterate over the list and use a list comprehension to efficiently extract strings of the specified length. We will ensure compatibility with Python 3.x and handle edge cases such as empty lists. Non-string elements will be ignored during the extraction process.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'extract specified size of strings'\n    Explanation: This means the function should filter and return strings from the list that match a given length.\n\n# [phrase showing quantity relationship]\n    'specified size': This indicates a specific length that strings must match to be included in the output list.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` that takes a list of strings and an integer `size`.\n    2. Use a list comprehension to iterate over each string in the list.\n    3. Check if the length of each string is equal to the specified `size`.\n    4. Collect and return all strings that meet this condition in a new list.\n\n# [edge case] \n    extract_string([], 5) = []\n    Explanation: An empty list should return an empty list since there are no strings to check.\n    \n    extract_string(['Python', 'list', 'exercises'], 0) = []\n    Explanation: No string can have a length of 0, so the result should be an empty list.\n    \n    extract_string(['Python', 'list', 'exercises'], 4) = ['list']\n    Explanation: Only the string 'list' has a length of 4, so it should be the only element in the result.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using list comprehension inherently handles these cases by filtering based on string length.\n"], "test": ["def check(extract_string):\n\tassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "def check(extract_string):\n\tassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']", "def check(extract_string):\n\tassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']", "def check(extract_string):\n\tassert extract_string(['jKZxOlbTaCu', 'zidnr', 'xltfgdxamss', 'smtiqxdjc', 'mgtwbidx'], 10) == []", "def check(extract_string):\n\tassert extract_string(['Zhe', 'izedzf', 'ovwmfog', 'qsoizovqmp', 'ldrggernh'], 12) == []", "def check(extract_string):\n\tassert extract_string(['BApRsE', 'gqofblu', 'obikzivdtqfgyua', 'ekuizhhfbzgj', 'ehgisf'], 9) == []", "def check(extract_string):\n\tassert extract_string(['jNGUkWdPB', 'avmpxwx', 'yshaiwxgetv', 'xpuoyfeyiss', 'ezghlnx'], 3) == []", "def check(extract_string):\n\tassert extract_string(['dlpzCg', 'nnkxwjvcj', 'uckxhf', 'org', 'ngeiwjld'], 9) == ['nnkxwjvcj']", "def check(extract_string):\n\tassert extract_string(['qiLnBlBVj', 'aqfmgu', 'ogfajlf', 'nkpjspnrglch', 'onrbz'], 13) == []", "def check(extract_string):\n\tassert extract_string(['EXe', 'rvorn', 'tdmsbycpjsqf', 'tpycx', 'ekxvplpan'], 5) == ['rvorn', 'tpycx']", "def check(extract_string):\n\tassert extract_string(['wlRv', 'jlakv', 'rcaholmfvpcr', 'yqyk', 'hnizdsxozl'], 3) == []", "def check(extract_string):\n\tassert extract_string(['IxdWseMF', 'hxcmql', 'umjmrklebwoo', 'lzxlgcf', 'fnivue'], 11) == []", "def check(extract_string):\n\tassert extract_string(['iHGsQqvLWN', 'yjp', 'jgwnkuveyqxvwtk', 'vamwzd', 'srubdizrzf'], 4) == []", "def check(extract_string):\n\tassert extract_string(['NqOFuIkkLvfy', 'ppqws', 'xiphudcfbbjepny', 'aarbeuq', 'gstx'], 12) == ['NqOFuIkkLvfy']", "def check(extract_string):\n\tassert extract_string(['njVBD', 'zkglez', 'etwmrmolooxmx', 'yoismcx', 'uejkcgiizjdm'], 11) == []", "def check(extract_string):\n\tassert extract_string(['TuKjvortMDW', 'mykzhqsi', 'kedodjdilijtczg', 'fhmhkqihbgq', 'dkv'], 3) == ['dkv']", "def check(extract_string):\n\tassert extract_string(['cfAjjBcyAZ', 'npqki', 'qcaxrrzmkpynti', 'ickyesvysq', 'hfwbnabmrhnu'], 11) == []", "def check(extract_string):\n\tassert extract_string(['uilztUqcfYT', 'dcykggdb', 'zyxuhhkfpxu', 'ohonoifypmim', 'jkuhtm'], 6) == ['jkuhtm']", "def check(extract_string):\n\tassert extract_string(['xRyIDvJIkLAL', 'dgtfbavd', 'qjzxkfp', 'itudjtqnwa', 'koop'], 7) == ['qjzxkfp']", "def check(extract_string):\n\tassert extract_string(['UTIaeel', 'fwidoza', 'kqodrsniaucvrw', 'bzwvhqzdxmu', 'pcgyemagtz'], 8) == []", "def check(extract_string):\n\tassert extract_string(['hBHPytxSSPZD', 'xpn', 'fraakn', 'wlgcplz', 'kcf'], 8) == []", "def check(extract_string):\n\tassert extract_string(['cTNkh', 'qcyluhgvt', 'adaovka', 'gcqlvlu', 'qbu'], 4) == []", "def check(extract_string):\n\tassert extract_string(['puoQ', 'hpg', 'dwgsvnijfcxsac', 'jgwtzbnbok', 'onhhojymv'], 5) == []", "def check(extract_string):\n\tassert extract_string(['qFRztkZpcXZQ', 'jzu', 'ytptnt', 'dzkegjhb', 'xgka'], 3) == ['jzu']", "def check(extract_string):\n\tassert extract_string(['ZpnDIzn', 'yrv', 'jeuzpwufhmpjdd', 'vtebtv', 'bxj'], 4) == []", "def check(extract_string):\n\tassert extract_string(['uPmaLpDnHDY', 'yccg', 'yfsthyrcjlepqx', 'trm', 'usiiat'], 11) == ['uPmaLpDnHDY']", "def check(extract_string):\n\tassert extract_string(['yJoWsqXW', 'fpjlbg', 'dztsakosic', 'yuvjqanlxhmx', 'nxjnmosfyb'], 12) == ['yuvjqanlxhmx']", "def check(extract_string):\n\tassert extract_string(['uhnhSKLTHv', 'xxcqj', 'lgqmhnyimzmnx', 'uqtheqbvmt', 'vofocpbodgrj'], 10) == ['uhnhSKLTHv', 'uqtheqbvmt']", "def check(extract_string):\n\tassert extract_string(['sbdnssDPvP', 'spx', 'gmbegpimvqfg', 'szaaxcpbi', 'ytiupavt'], 5) == []", "def check(extract_string):\n\tassert extract_string(['WANM', 'rdjbp', 'lecfmv', 'bshpflmlhmu', 'qtl'], 12) == []", "def check(extract_string):\n\tassert extract_string(['IkT', 'aka', 'ccixezbmy', 'jyokaqmodc', 'dzlkcqwskxpd'], 11) == []", "def check(extract_string):\n\tassert extract_string(['fRuUWlOFAaa', 'dbl', 'zsisxpmhlzbhns', 'moao', 'rohvglzgfj'], 7) == []", "def check(extract_string):\n\tassert extract_string(['NsU', 'wxrox', 'zniqnpguf', 'tdudqqqynk', 'asqjfqbx'], 5) == ['wxrox']", "def check(extract_string):\n\tassert extract_string(['ZLudB', 'nuky', 'nynnor', 'glt', 'asegimcqbi'], 5) == ['ZLudB']", "def check(extract_string):\n\tassert extract_string(['jGJERDGVKYi', 'bkrstpsh', 'fwhysjwnvwqdnec', 'axhnclpuq', 'usjxvfmb'], 7) == []", "def check(extract_string):\n\tassert extract_string(['NNXY', 'vjwxzvj', 'aczciavhppbwcc', 'fgktlykw', 'jdqva'], 9) == []", "def check(extract_string):\n\tassert extract_string(['oGcmYUri', 'okxyz', 'qmbhowtfpqza', 'atgwvceh', 'tmji'], 2) == []", "def check(extract_string):\n\tassert extract_string(['ORulboIGPk', 'nqpachx', 'ifopccvpslnarb', 'rybhhlyb', 'lmbqgslrbtss'], 8) == ['rybhhlyb']", "def check(extract_string):\n\tassert extract_string(['DMAGPTjNl', 'bawiyko', 'ktasnut', 'jykrjrem', 'ftzdocnr'], 1) == []", "def check(extract_string):\n\tassert extract_string(['RjjNLI', 'kwnmigrvg', 'vktqhugw', 'ptjt', 'vixoimmdtf'], 10) == ['vixoimmdtf']", "def check(extract_string):\n\tassert extract_string(['HOLaaJtY', 'vhowitgg', 'jgpbpjmr', 'gjtszex', 'jvlojhwystev'], 5) == []", "def check(extract_string):\n\tassert extract_string(['lFaS', 'acfencxp', 'yehlorakttvx', 'fdhgagzepi', 'xypgmb'], 6) == ['xypgmb']", "def check(extract_string):\n\tassert extract_string(['eFrN', 'lad', 'ohabvssqo', 'pqucnc', 'kbd'], 1) == []", "def check(extract_string):\n\tassert extract_string(['pdh', 'bzpdbquby', 'obijxkxyggvuplg', 'fqwtrycrlykp', 'bsejeldtfyx'], 4) == []", "def check(extract_string):\n\tassert extract_string(['mXlWvciwAss', 'krq', 'hdnspxvczv', 'gclwusih', 'kxdngh'], 8) == ['gclwusih']", "def check(extract_string):\n\tassert extract_string(['VwTnATgEQ', 'kvaps', 'aappnineaqihdur', 'sbcur', 'kieiypucajbh'], 4) == []", "def check(extract_string):\n\tassert extract_string(['eHG', 'kwplmaur', 'nntcsofm', 'kijhbcmaod', 'tlyig'], 5) == ['tlyig']", "def check(extract_string):\n\tassert extract_string(['uhHIh', 'mwyjvyuid', 'ixrvfhdc', 'oroolrhw', 'dgsvq'], 9) == ['mwyjvyuid']", "def check(extract_string):\n\tassert extract_string(['CnKkr', 'xnfmwjthj', 'abjwmem', 'pczh', 'onmjfs'], 2) == []", "def check(extract_string):\n\tassert extract_string(['eVBNi', 'zyz', 'ogrildsjfpevn', 'lslyorggn', 'unqvawyz'], 4) == []", "def check(extract_string):\n\tassert extract_string(['llwsMBCqN', 'vwdh', 'ccabxbhtfvscg', 'bflsrutzs', 'hszmgzudedn'], 10) == []", "def check(extract_string):\n\tassert extract_string(['FfEx', 'bodzqjn', 'wxwouraulxh', 'roy', 'slsnypjspyw'], 5) == []", "def check(extract_string):\n\tassert extract_string(['WehfmOw', 'tbduqrcmn', 'lzjmrvxzvcpmku', 'xerbwpk', 'aka'], 1) == []", "def check(extract_string):\n\tassert extract_string(['arFJSEi', 'ajuxxh', 'jcbulfhzdljftca', 'jbkqkjzoi', 'pdcpbp'], 6) == ['ajuxxh', 'pdcpbp']", "def check(extract_string):\n\tassert extract_string(['yaXZCHRpL', 'szdsugfte', 'zsxbsjdl', 'efgmhlkpyq', 'cuckfgasiu'], 6) == []", "def check(extract_string):\n\tassert extract_string(['TykKJEXmfsCu', 'bndi', 'vwavjd', 'mbkwy', 'ivtembvxnxx'], 1) == []", "def check(extract_string):\n\tassert extract_string(['Yapm', 'isrlw', 'krujpqxalbfnc', 'aeqr', 'jerboootja'], 4) == ['Yapm', 'aeqr']", "def check(extract_string):\n\tassert extract_string(['kmdQxSk', 'gywfg', 'znhbvbrsnapwfn', 'phhyui', 'trw'], 1) == []", "def check(extract_string):\n\tassert extract_string(['lQz', 'irvtzrg', 'ehwoss', 'zvpqa', 'asvy'], 11) == []", "def check(extract_string):\n\tassert extract_string(['lkUQsj', 'xjhfwgrp', 'hlfcmp', 'qur', 'qhgjx'], 2) == []", "def check(extract_string):\n\tassert extract_string(['jlIvP', 'hdojcyh', 'jeoagmoa', 'lbpvdwentuch', 'dcnqo'], 8) == ['jeoagmoa']", "def check(extract_string):\n\tassert extract_string(['cTwyLkLvRoj', 'ykjtxbr', 'lqvjtx', 'yecbleuj', 'wnqxghdb'], 7) == ['ykjtxbr']", "def check(extract_string):\n\tassert extract_string(['hccEwgC', 'yjd', 'uokzwcczpvsb', 'bmvhgx', 'svrn'], 8) == []", "def check(extract_string):\n\tassert extract_string(['tpOa', 'dvq', 'lrpuecccgluizma', 'iftaa', 'fkjihu'], 1) == []", "def check(extract_string):\n\tassert extract_string(['KwnZ', 'eksebeodh', 'imodlc', 'cjhrj', 'mdyl'], 10) == []", "def check(extract_string):\n\tassert extract_string(['JvhxG', 'sjgsj', 'sxnqqqnili', 'vuy', 'mlwsvyfrphc'], 10) == ['sxnqqqnili']", "def check(extract_string):\n\tassert extract_string(['QdhSmsLAubVU', 'xbzqhulx', 'acbusubjn', 'mkfynjoz', 'atrmdmupltad'], 8) == ['xbzqhulx', 'mkfynjoz']", "def check(extract_string):\n\tassert extract_string(['CFwdBijf', 'kxa', 'fbjigawanb', 'llmefz', 'ecgyjxis'], 5) == []", "def check(extract_string):\n\tassert extract_string(['tQRJyzpFM', 'hwcz', 'geqtutltlxclil', 'kqeq', 'hkzxmnhvl'], 11) == []", "def check(extract_string):\n\tassert extract_string(['fRtPMnFd', 'lzezfaako', 'svxwfxhviowej', 'binvjageuybm', 'wljmkfwxu'], 7) == []", "def check(extract_string):\n\tassert extract_string(['QtklXVEQ', 'sacklcoq', 'smtmlthfiggeez', 'luao', 'ssmg'], 12) == []", "def check(extract_string):\n\tassert extract_string(['deRs', 'ypy', 'khxcxlsyhupvr', 'hrhojwmvzni', 'mkhijhwhrqsh'], 11) == ['hrhojwmvzni']", "def check(extract_string):\n\tassert extract_string(['tjDdGemi', 'zapfi', 'qkugnxqldrvg', 'gmoisdvdipbj', 'kgkrtucybilr'], 6) == []", "def check(extract_string):\n\tassert extract_string(['FPRXokkiErxM', 'zbxvjcuy', 'gylahjlnsfkam', 'vics', 'uqucacmltwy'], 8) == ['zbxvjcuy']", "def check(extract_string):\n\tassert extract_string(['pDBwDagBZz', 'itkxwqwxj', 'jufssdmqu', 'totoaqcocf', 'xae'], 11) == []", "def check(extract_string):\n\tassert extract_string(['TtAKb', 'iscr', 'ookgzgmsdffim', 'ltnpjnzfheb', 'nyysgpfsaw'], 9) == []", "def check(extract_string):\n\tassert extract_string(['zOBfcS', 'edquwnacz', 'mqdrbqk', 'nfta', 'oyj'], 11) == []", "def check(extract_string):\n\tassert extract_string(['gKHJi', 'kbujwgh', 'rpjyedpkg', 'vhxou', 'ugzmlp'], 14) == []", "def check(extract_string):\n\tassert extract_string(['msMrNGiA', 'vigojgqu', 'xtunpubkjxy', 'nafguzepvwk', 'iqpwig'], 10) == []", "def check(extract_string):\n\tassert extract_string(['QOMl', 'buebmomjw', 'puvytkdimonvwqs', 'qjwemc', 'zncgi'], 10) == []", "def check(extract_string):\n\tassert extract_string(['OzZPPlug', 'eufydot', 'jwtnas', 'lwesfhjnl', 'rolj'], 12) == []", "def check(extract_string):\n\tassert extract_string(['HpEgWRuGZ', 'atfcuqi', 'uobifsuhulkv', 'nfbiigw', 'mybnvveeky'], 4) == []", "def check(extract_string):\n\tassert extract_string(['zNpPqeHKTkRB', 'vjexpy', 'wijkiitcrpmnpue', 'xzqlmwaybow', 'jfgrdquowzj'], 4) == []", "def check(extract_string):\n\tassert extract_string(['CNEuyxKYgY', 'tjbgflieo', 'ztvzcg', 'bcn', 'apa'], 7) == []", "def check(extract_string):\n\tassert extract_string(['bkqRrG', 'mrc', 'zqpcdchvwc', 'eobojonbo', 'irglaue'], 6) == ['bkqRrG']", "def check(extract_string):\n\tassert extract_string(['yKZHIbqUcOf', 'vbap', 'temtsdkvmfyg', 'vgholm', 'nxwoi'], 7) == []", "def check(extract_string):\n\tassert extract_string(['OSqDpECc', 'grkaor', 'dcoxnpueknq', 'vsxautphmnva', 'rgbe'], 4) == ['rgbe']", "def check(extract_string):\n\tassert extract_string(['mIL', 'eytiuuru', 'ptzhwvxaydbedh', 'odolwiqs', 'anpdogtsmhme'], 10) == []", "def check(extract_string):\n\tassert extract_string(['uIkcyo', 'wwbgeb', 'xalrsw', 'juroqql', 'oxgohi'], 5) == []", "def check(extract_string):\n\tassert extract_string(['hCAkU', 'zajv', 'umevtcvsbemxgc', 'jeshwtrlp', 'coydeatcexx'], 5) == ['hCAkU']", "def check(extract_string):\n\tassert extract_string(['QiusjluDm', 'ixzuyi', 'afosdjxofjrgw', 'eoesfb', 'cnigxqut'], 8) == ['cnigxqut']", "def check(extract_string):\n\tassert extract_string(['cDaTdqPRiIJO', 'ytyzqtm', 'qbduwkn', 'bpfoeymufcx', 'secwkqsv'], 12) == ['cDaTdqPRiIJO']", "def check(extract_string):\n\tassert extract_string(['OtUxgXLi', 'alcta', 'fpzycv', 'smzlsvido', 'sfndgj'], 9) == ['smzlsvido']", "def check(extract_string):\n\tassert extract_string(['CXyvrbK', 'pkcadm', 'zugxlqlajsktm', 'jffbzxek', 'olyjh'], 7) == ['CXyvrbK']", "def check(extract_string):\n\tassert extract_string(['hAXrI', 'lgpwinx', 'fmbosrqdourfu', 'irnrvikoztpy', 'xxell'], 7) == ['lgpwinx']", "def check(extract_string):\n\tassert extract_string(['XUKRrkUPdle', 'qdqu', 'ggcdbhho', 'pnkegk', 'kbkwatjzkwf'], 11) == ['XUKRrkUPdle', 'kbkwatjzkwf']", "def check(extract_string):\n\tassert extract_string(['wodZDBBP', 'urpypeilp', 'acabxqj', 'qaasiyjgl', 'ligawovb'], 8) == ['wodZDBBP', 'ligawovb']", "def check(extract_string):\n\tassert extract_string(['RGYEVnw', 'necptvhl', 'aorjemubsk', 'unpkc', 'zydxygap'], 10) == ['aorjemubsk']", "def check(extract_string):\n\tassert extract_string(['TMXzNPgP', 'slldo', 'ntuphclibkh', 'osqwqb', 'moi'], 4) == []", "def check(extract_string):\n\tassert extract_string(['EoZ', 'qyfypovk', 'ourfcn', 'jwz', 'llqxtppzt'], 14) == []", "def check(extract_string):\n\tassert extract_string(['RIawmwjQdirR', 'pnhet', 'mywjfndfwl', 'nym', 'idsgtty'], 8) == []", "def check(extract_string):\n\tassert extract_string(['Eip', 'qgccnc', 'ujgeifgzrsxmuvw', 'fism', 'ifnn'], 13) == []"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef extract_string(strings: list, length: int) -> list:\n    \"\"\"\n    Extract strings of a specified length from a list of strings.\n\n    Parameters:\n    strings (list): A list of strings to filter.\n    length (int): The length of strings to extract.\n\n    Returns:\n    list: A list containing strings of the specified length.\n    \"\"\"\n    # Use list comprehension to filter strings based on the specified length\n    return [string for string in strings if isinstance(string, str) and len(string) == length]\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to demonstrate functionality\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8))  # Expected: ['practice', 'solution']\n    print(extract_string([], 5))  # Expected: []\n    print(extract_string(['Python', 'list', 'exercises'], 0))  # Expected: []\n    print(extract_string(['Python', 'list', 'exercises'], 4))  # Expected: ['list']\n    print(extract_string(['Python', 123, 'exercises', None], 8))  # Expected: ['exercises']\n", "passed": true, "pass": true, "pass_num": 10, "round": 804, "mutate_method": "condense_two2one", "parent_index": 168}
