{"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 450, "prompt": "Write a function to extract specified size of strings from a given list of string values.", "code": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result", "test_imports": [], "test_list": ["assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']", "assert extract_string(['jKZxOlbTaCu', 'zidnr', 'xltfgdxamss', 'smtiqxdjc', 'mgtwbidx'], 10) == []", "assert extract_string(['Zhe', 'izedzf', 'ovwmfog', 'qsoizovqmp', 'ldrggernh'], 12) == []", "assert extract_string(['BApRsE', 'gqofblu', 'obikzivdtqfgyua', 'ekuizhhfbzgj', 'ehgisf'], 9) == []", "assert extract_string(['jNGUkWdPB', 'avmpxwx', 'yshaiwxgetv', 'xpuoyfeyiss', 'ezghlnx'], 3) == []", "assert extract_string(['dlpzCg', 'nnkxwjvcj', 'uckxhf', 'org', 'ngeiwjld'], 9) == ['nnkxwjvcj']", "assert extract_string(['qiLnBlBVj', 'aqfmgu', 'ogfajlf', 'nkpjspnrglch', 'onrbz'], 13) == []", "assert extract_string(['EXe', 'rvorn', 'tdmsbycpjsqf', 'tpycx', 'ekxvplpan'], 5) == ['rvorn', 'tpycx']", "assert extract_string(['wlRv', 'jlakv', 'rcaholmfvpcr', 'yqyk', 'hnizdsxozl'], 3) == []", "assert extract_string(['IxdWseMF', 'hxcmql', 'umjmrklebwoo', 'lzxlgcf', 'fnivue'], 11) == []", "assert extract_string(['iHGsQqvLWN', 'yjp', 'jgwnkuveyqxvwtk', 'vamwzd', 'srubdizrzf'], 4) == []", "assert extract_string(['NqOFuIkkLvfy', 'ppqws', 'xiphudcfbbjepny', 'aarbeuq', 'gstx'], 12) == ['NqOFuIkkLvfy']", "assert extract_string(['njVBD', 'zkglez', 'etwmrmolooxmx', 'yoismcx', 'uejkcgiizjdm'], 11) == []", "assert extract_string(['TuKjvortMDW', 'mykzhqsi', 'kedodjdilijtczg', 'fhmhkqihbgq', 'dkv'], 3) == ['dkv']", "assert extract_string(['cfAjjBcyAZ', 'npqki', 'qcaxrrzmkpynti', 'ickyesvysq', 'hfwbnabmrhnu'], 11) == []", "assert extract_string(['uilztUqcfYT', 'dcykggdb', 'zyxuhhkfpxu', 'ohonoifypmim', 'jkuhtm'], 6) == ['jkuhtm']", "assert extract_string(['xRyIDvJIkLAL', 'dgtfbavd', 'qjzxkfp', 'itudjtqnwa', 'koop'], 7) == ['qjzxkfp']", "assert extract_string(['UTIaeel', 'fwidoza', 'kqodrsniaucvrw', 'bzwvhqzdxmu', 'pcgyemagtz'], 8) == []", "assert extract_string(['hBHPytxSSPZD', 'xpn', 'fraakn', 'wlgcplz', 'kcf'], 8) == []", "assert extract_string(['cTNkh', 'qcyluhgvt', 'adaovka', 'gcqlvlu', 'qbu'], 4) == []", "assert extract_string(['puoQ', 'hpg', 'dwgsvnijfcxsac', 'jgwtzbnbok', 'onhhojymv'], 5) == []", "assert extract_string(['qFRztkZpcXZQ', 'jzu', 'ytptnt', 'dzkegjhb', 'xgka'], 3) == ['jzu']", "assert extract_string(['ZpnDIzn', 'yrv', 'jeuzpwufhmpjdd', 'vtebtv', 'bxj'], 4) == []", "assert extract_string(['uPmaLpDnHDY', 'yccg', 'yfsthyrcjlepqx', 'trm', 'usiiat'], 11) == ['uPmaLpDnHDY']", "assert extract_string(['yJoWsqXW', 'fpjlbg', 'dztsakosic', 'yuvjqanlxhmx', 'nxjnmosfyb'], 12) == ['yuvjqanlxhmx']", "assert extract_string(['uhnhSKLTHv', 'xxcqj', 'lgqmhnyimzmnx', 'uqtheqbvmt', 'vofocpbodgrj'], 10) == ['uhnhSKLTHv', 'uqtheqbvmt']", "assert extract_string(['sbdnssDPvP', 'spx', 'gmbegpimvqfg', 'szaaxcpbi', 'ytiupavt'], 5) == []", "assert extract_string(['WANM', 'rdjbp', 'lecfmv', 'bshpflmlhmu', 'qtl'], 12) == []", "assert extract_string(['IkT', 'aka', 'ccixezbmy', 'jyokaqmodc', 'dzlkcqwskxpd'], 11) == []", "assert extract_string(['fRuUWlOFAaa', 'dbl', 'zsisxpmhlzbhns', 'moao', 'rohvglzgfj'], 7) == []", "assert extract_string(['NsU', 'wxrox', 'zniqnpguf', 'tdudqqqynk', 'asqjfqbx'], 5) == ['wxrox']", "assert extract_string(['ZLudB', 'nuky', 'nynnor', 'glt', 'asegimcqbi'], 5) == ['ZLudB']", "assert extract_string(['jGJERDGVKYi', 'bkrstpsh', 'fwhysjwnvwqdnec', 'axhnclpuq', 'usjxvfmb'], 7) == []", "assert extract_string(['NNXY', 'vjwxzvj', 'aczciavhppbwcc', 'fgktlykw', 'jdqva'], 9) == []", "assert extract_string(['oGcmYUri', 'okxyz', 'qmbhowtfpqza', 'atgwvceh', 'tmji'], 2) == []", "assert extract_string(['ORulboIGPk', 'nqpachx', 'ifopccvpslnarb', 'rybhhlyb', 'lmbqgslrbtss'], 8) == ['rybhhlyb']", "assert extract_string(['DMAGPTjNl', 'bawiyko', 'ktasnut', 'jykrjrem', 'ftzdocnr'], 1) == []", "assert extract_string(['RjjNLI', 'kwnmigrvg', 'vktqhugw', 'ptjt', 'vixoimmdtf'], 10) == ['vixoimmdtf']", "assert extract_string(['HOLaaJtY', 'vhowitgg', 'jgpbpjmr', 'gjtszex', 'jvlojhwystev'], 5) == []", "assert extract_string(['lFaS', 'acfencxp', 'yehlorakttvx', 'fdhgagzepi', 'xypgmb'], 6) == ['xypgmb']", "assert extract_string(['eFrN', 'lad', 'ohabvssqo', 'pqucnc', 'kbd'], 1) == []", "assert extract_string(['pdh', 'bzpdbquby', 'obijxkxyggvuplg', 'fqwtrycrlykp', 'bsejeldtfyx'], 4) == []", "assert extract_string(['mXlWvciwAss', 'krq', 'hdnspxvczv', 'gclwusih', 'kxdngh'], 8) == ['gclwusih']", "assert extract_string(['VwTnATgEQ', 'kvaps', 'aappnineaqihdur', 'sbcur', 'kieiypucajbh'], 4) == []", "assert extract_string(['eHG', 'kwplmaur', 'nntcsofm', 'kijhbcmaod', 'tlyig'], 5) == ['tlyig']", "assert extract_string(['uhHIh', 'mwyjvyuid', 'ixrvfhdc', 'oroolrhw', 'dgsvq'], 9) == ['mwyjvyuid']", "assert extract_string(['CnKkr', 'xnfmwjthj', 'abjwmem', 'pczh', 'onmjfs'], 2) == []", "assert extract_string(['eVBNi', 'zyz', 'ogrildsjfpevn', 'lslyorggn', 'unqvawyz'], 4) == []", "assert extract_string(['llwsMBCqN', 'vwdh', 'ccabxbhtfvscg', 'bflsrutzs', 'hszmgzudedn'], 10) == []", "assert extract_string(['FfEx', 'bodzqjn', 'wxwouraulxh', 'roy', 'slsnypjspyw'], 5) == []", "assert extract_string(['WehfmOw', 'tbduqrcmn', 'lzjmrvxzvcpmku', 'xerbwpk', 'aka'], 1) == []", "assert extract_string(['arFJSEi', 'ajuxxh', 'jcbulfhzdljftca', 'jbkqkjzoi', 'pdcpbp'], 6) == ['ajuxxh', 'pdcpbp']", "assert extract_string(['yaXZCHRpL', 'szdsugfte', 'zsxbsjdl', 'efgmhlkpyq', 'cuckfgasiu'], 6) == []", "assert extract_string(['TykKJEXmfsCu', 'bndi', 'vwavjd', 'mbkwy', 'ivtembvxnxx'], 1) == []", "assert extract_string(['Yapm', 'isrlw', 'krujpqxalbfnc', 'aeqr', 'jerboootja'], 4) == ['Yapm', 'aeqr']", "assert extract_string(['kmdQxSk', 'gywfg', 'znhbvbrsnapwfn', 'phhyui', 'trw'], 1) == []", "assert extract_string(['lQz', 'irvtzrg', 'ehwoss', 'zvpqa', 'asvy'], 11) == []", "assert extract_string(['lkUQsj', 'xjhfwgrp', 'hlfcmp', 'qur', 'qhgjx'], 2) == []", "assert extract_string(['jlIvP', 'hdojcyh', 'jeoagmoa', 'lbpvdwentuch', 'dcnqo'], 8) == ['jeoagmoa']", "assert extract_string(['cTwyLkLvRoj', 'ykjtxbr', 'lqvjtx', 'yecbleuj', 'wnqxghdb'], 7) == ['ykjtxbr']", "assert extract_string(['hccEwgC', 'yjd', 'uokzwcczpvsb', 'bmvhgx', 'svrn'], 8) == []", "assert extract_string(['tpOa', 'dvq', 'lrpuecccgluizma', 'iftaa', 'fkjihu'], 1) == []", "assert extract_string(['KwnZ', 'eksebeodh', 'imodlc', 'cjhrj', 'mdyl'], 10) == []", "assert extract_string(['JvhxG', 'sjgsj', 'sxnqqqnili', 'vuy', 'mlwsvyfrphc'], 10) == ['sxnqqqnili']", "assert extract_string(['QdhSmsLAubVU', 'xbzqhulx', 'acbusubjn', 'mkfynjoz', 'atrmdmupltad'], 8) == ['xbzqhulx', 'mkfynjoz']", "assert extract_string(['CFwdBijf', 'kxa', 'fbjigawanb', 'llmefz', 'ecgyjxis'], 5) == []", "assert extract_string(['tQRJyzpFM', 'hwcz', 'geqtutltlxclil', 'kqeq', 'hkzxmnhvl'], 11) == []", "assert extract_string(['fRtPMnFd', 'lzezfaako', 'svxwfxhviowej', 'binvjageuybm', 'wljmkfwxu'], 7) == []", "assert extract_string(['QtklXVEQ', 'sacklcoq', 'smtmlthfiggeez', 'luao', 'ssmg'], 12) == []", "assert extract_string(['deRs', 'ypy', 'khxcxlsyhupvr', 'hrhojwmvzni', 'mkhijhwhrqsh'], 11) == ['hrhojwmvzni']", "assert extract_string(['tjDdGemi', 'zapfi', 'qkugnxqldrvg', 'gmoisdvdipbj', 'kgkrtucybilr'], 6) == []", "assert extract_string(['FPRXokkiErxM', 'zbxvjcuy', 'gylahjlnsfkam', 'vics', 'uqucacmltwy'], 8) == ['zbxvjcuy']", "assert extract_string(['pDBwDagBZz', 'itkxwqwxj', 'jufssdmqu', 'totoaqcocf', 'xae'], 11) == []", "assert extract_string(['TtAKb', 'iscr', 'ookgzgmsdffim', 'ltnpjnzfheb', 'nyysgpfsaw'], 9) == []", "assert extract_string(['zOBfcS', 'edquwnacz', 'mqdrbqk', 'nfta', 'oyj'], 11) == []", "assert extract_string(['gKHJi', 'kbujwgh', 'rpjyedpkg', 'vhxou', 'ugzmlp'], 14) == []", "assert extract_string(['msMrNGiA', 'vigojgqu', 'xtunpubkjxy', 'nafguzepvwk', 'iqpwig'], 10) == []", "assert extract_string(['QOMl', 'buebmomjw', 'puvytkdimonvwqs', 'qjwemc', 'zncgi'], 10) == []", "assert extract_string(['OzZPPlug', 'eufydot', 'jwtnas', 'lwesfhjnl', 'rolj'], 12) == []", "assert extract_string(['HpEgWRuGZ', 'atfcuqi', 'uobifsuhulkv', 'nfbiigw', 'mybnvveeky'], 4) == []", "assert extract_string(['zNpPqeHKTkRB', 'vjexpy', 'wijkiitcrpmnpue', 'xzqlmwaybow', 'jfgrdquowzj'], 4) == []", "assert extract_string(['CNEuyxKYgY', 'tjbgflieo', 'ztvzcg', 'bcn', 'apa'], 7) == []", "assert extract_string(['bkqRrG', 'mrc', 'zqpcdchvwc', 'eobojonbo', 'irglaue'], 6) == ['bkqRrG']", "assert extract_string(['yKZHIbqUcOf', 'vbap', 'temtsdkvmfyg', 'vgholm', 'nxwoi'], 7) == []", "assert extract_string(['OSqDpECc', 'grkaor', 'dcoxnpueknq', 'vsxautphmnva', 'rgbe'], 4) == ['rgbe']", "assert extract_string(['mIL', 'eytiuuru', 'ptzhwvxaydbedh', 'odolwiqs', 'anpdogtsmhme'], 10) == []", "assert extract_string(['uIkcyo', 'wwbgeb', 'xalrsw', 'juroqql', 'oxgohi'], 5) == []", "assert extract_string(['hCAkU', 'zajv', 'umevtcvsbemxgc', 'jeshwtrlp', 'coydeatcexx'], 5) == ['hCAkU']", "assert extract_string(['QiusjluDm', 'ixzuyi', 'afosdjxofjrgw', 'eoesfb', 'cnigxqut'], 8) == ['cnigxqut']", "assert extract_string(['cDaTdqPRiIJO', 'ytyzqtm', 'qbduwkn', 'bpfoeymufcx', 'secwkqsv'], 12) == ['cDaTdqPRiIJO']", "assert extract_string(['OtUxgXLi', 'alcta', 'fpzycv', 'smzlsvido', 'sfndgj'], 9) == ['smzlsvido']", "assert extract_string(['CXyvrbK', 'pkcadm', 'zugxlqlajsktm', 'jffbzxek', 'olyjh'], 7) == ['CXyvrbK']", "assert extract_string(['hAXrI', 'lgpwinx', 'fmbosrqdourfu', 'irnrvikoztpy', 'xxell'], 7) == ['lgpwinx']", "assert extract_string(['XUKRrkUPdle', 'qdqu', 'ggcdbhho', 'pnkegk', 'kbkwatjzkwf'], 11) == ['XUKRrkUPdle', 'kbkwatjzkwf']", "assert extract_string(['wodZDBBP', 'urpypeilp', 'acabxqj', 'qaasiyjgl', 'ligawovb'], 8) == ['wodZDBBP', 'ligawovb']", "assert extract_string(['RGYEVnw', 'necptvhl', 'aorjemubsk', 'unpkc', 'zydxygap'], 10) == ['aorjemubsk']", "assert extract_string(['TMXzNPgP', 'slldo', 'ntuphclibkh', 'osqwqb', 'moi'], 4) == []", "assert extract_string(['EoZ', 'qyfypovk', 'ourfcn', 'jwz', 'llqxtppzt'], 14) == []", "assert extract_string(['RIawmwjQdirR', 'pnhet', 'mywjfndfwl', 'nym', 'idsgtty'], 8) == []", "assert extract_string(['Eip', 'qgccnc', 'ujgeifgzrsxmuvw', 'fism', 'ifnn'], 13) == []"], "entry_point": "extract_string", "repair_prompt": ["Write a function extract_string to extract specified size of strings from a given list of string values.\nextract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n", "Write a function extract_string to extract specified size of strings. It should extract strings from a given list of string values.\nextract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n", "Write a function extract_string to extract specified size of strings from a given list of string values.\nextract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n"], "completions": ["from typing import List\n## main.py\n\ndef extract_string(strings: list, length: int) -> list:\n    \"\"\"\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list): A list of string values.\n    length (int): The length of strings to extract.\n\n    Returns:\n    list: A list containing strings of the specified length.\n    \"\"\"\n    # Using list comprehension to filter strings based on the specified length\n    return [s for s in strings if isinstance(s, str) and len(s) == length]\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases to validate the function\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8))  # Expected: ['practice', 'solution']\n    print(extract_string([], 8))  # Expected: []\n    print(extract_string(['Python', 'list', 123, 'practice'], 8))  # Expected: ['practice']\n    print(extract_string(['short', 'tiny', 'small'], 5))  # Expected: ['short', 'small']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list[str], length: int) -> list[str]:\n    \"\"\"\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list[str]): A list of strings to filter.\n    length (int): The length of strings to extract.\n\n    Returns:\n    list[str]: A list of strings that match the specified length.\n    \"\"\"\n    # Use list comprehension to filter strings based on the specified length\n    return [string for string in strings if isinstance(string, str) and len(string) == length]\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8))  # Expected: ['practice', 'solution']\n    print(extract_string([], 8))  # Expected: []\n    print(extract_string(['Python', 'list', 'exercises'], 4))  # Expected: ['list']\n    print(extract_string(['Python', 'list', 'exercises'], 10))  # Expected: []\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list[str], length: int) -> list[str]:\n    \"\"\"\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list[str]): A list of strings to filter.\n    length (int): The length of strings to extract.\n\n    Returns:\n    list[str]: A list of strings that match the specified length.\n    \"\"\"\n    # Using list comprehension to filter strings by the specified length\n    return [string for string in strings if isinstance(string, str) and len(string) == length]\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8))  # ['practice', 'solution']\n    print(extract_string([], 5))  # []\n    print(extract_string(['short', 'tiny', 'big'], 4))  # ['tiny']\n    print(extract_string(['exact', 'match', 'exact'], 5))  # ['exact', 'match', 'exact']\n    print(extract_string(['Python', 123, 'list', None, 'practice'], 5))  # ['Python']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list[str], size: int) -> list[str]:\n    \"\"\"\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list[str]): A list of string values.\n    size (int): The size of strings to extract.\n\n    Returns:\n    list[str]: A list of strings that match the specified size.\n    \"\"\"\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"The first argument must be a list of strings.\")\n    \n    if not isinstance(size, int) or size < 0:\n        raise ValueError(\"The size must be a non-negative integer.\")\n    \n    # Use list comprehension to filter strings by the specified size\n    return [string for string in strings if len(string) == size]\n\n# Example usage:\n# result = extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n# print(result)  # Output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list[str], length: int) -> list[str]:\n    \"\"\"\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list[str]): A list of strings to filter.\n    length (int): The desired length of strings to extract.\n\n    Returns:\n    list[str]: A list containing strings of the specified length.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the length of the current string matches the specified size\n        if len(string) == length:\n            # If it matches, append the string to the result list\n            result.append(string)\n\n    # Return the result list containing all strings of the specified size\n    return result\n\n# Example usage:\n# This will return ['practice', 'solution'] as both have a length of 8\nexample_result = extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\nprint(example_result)\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list[str], length: int) -> list[str]:\n    \"\"\"\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list[str]): A list of strings to filter.\n    length (int): The length of strings to extract.\n\n    Returns:\n    list[str]: A list of strings that match the specified length.\n    \"\"\"\n    # Using list comprehension to filter strings based on the specified length\n    return [string for string in strings if len(string) == length]\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to demonstrate the function's behavior\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8))  # Output: ['practice', 'solution']\n    print(extract_string([], 5))  # Output: []\n    print(extract_string(['Python', 'list', 'exercises'], 0))  # Output: []\n    print(extract_string(['Python', 'list', 'exercises'], 4))  # Output: ['list']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list[str], length: int) -> list[str]:\n    \"\"\"\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list[str]): A list of strings to filter.\n    length (int): The length of strings to extract.\n\n    Returns:\n    list[str]: A list of strings that match the specified length.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the current element is a string and its length matches the specified length\n        if isinstance(string, str) and len(string) == length:\n            # Append the string to the result list\n            result.append(string)\n\n    # Return the result list after iterating through all strings\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    example_strings = ['Python', 'list', 'exercises', 'practice', 'solution']\n    specified_length = 8\n    filtered_strings = extract_string(example_strings, specified_length)\n    print(filtered_strings)  # Output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, length: int) -> list:\n    \"\"\"\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list): A list of string values.\n    length (int): The length of strings to extract.\n\n    Returns:\n    list: A list of strings that match the specified length.\n    \"\"\"\n    # Use list comprehension to filter strings of the specified length\n    return [s for s in strings if isinstance(s, str) and len(s) == length]\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8))  # ['practice', 'solution']\n    print(extract_string([], 5))  # []\n    print(extract_string(['Python', 123, 'practice'], 7))  # ['practice']\n    print(extract_string(['Python', 'list', 'exercises'], 4))  # ['list']\n    print(extract_string(['Python', 'list', 'exercises'], 10))  # []\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list[str], length: int) -> list[str]:\n    '''\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list[str]): The list of strings to filter.\n    length (int): The desired length of strings to extract.\n\n    Returns:\n    list[str]: A list of strings that match the specified length.\n    '''\n    # Using list comprehension to filter strings based on the specified length\n    return [string for string in strings if len(string) == length]\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to demonstrate the function's behavior\n    print(extract_string(['Python', 'list', 'exercises'], 8))  # Expected output: ['exercises']\n    print(extract_string([], 5))  # Expected output: []\n    print(extract_string(['short', 'tiny'], 10))  # Expected output: []\n    print(extract_string(['Python', 'list'], 4))  # Expected output: ['list']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, length: int) -> list:\n    \"\"\"\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list): A list of string values.\n    length (int): The length of strings to extract.\n\n    Returns:\n    list: A list containing strings of the specified length.\n    \"\"\"\n    # Use list comprehension to filter strings based on specified length\n    return [s for s in strings if isinstance(s, str) and len(s) == length]\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to validate the function\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8))  # Expected: ['practice', 'solution']\n    print(extract_string([], 5))  # Expected: []\n    print(extract_string(['Python', 'list', 123, 'practice'], 4))  # Expected: ['list']\n    print(extract_string(['Python', 'list', 'exercises'], 10))  # Expected: []\n"], "plans": ["requirement analysis:\nThe function should efficiently filter strings based on their length, ensuring compatibility with Python 3.x and handling edge cases such as empty lists or non-string elements.\nrequirement pool:\n- Implement the main function to extract strings of specified length\n- Ensure compatibility with Python 3.x\n- Handle edge cases such as empty lists or non-string elements\n- Provide clear documentation and usage examples\n- Optimize performance for large datasets\nWe will implement a simple function using Python's built-in capabilities to filter strings based on their length. The function will handle edge cases such as empty lists and non-string elements by ignoring non-string elements and returning an empty list if no strings match the specified length. We will ensure compatibility with Python 3.x and optimize performance for large datasets by using list comprehensions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'extract specified size of strings'\n    Explanation: The requirement is to filter and return strings from a list that match a given length.\n\n# [phrase showing quantity relationship]\n    'specified size': This indicates the exact length that the strings need to match. In code, this can be implemented using a condition that checks if the length of each string equals the specified size.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` that takes a list of strings and an integer representing the specified size.\n    2. Use a list comprehension to iterate over each element in the list.\n    3. Check if the element is a string and if its length matches the specified size.\n    4. Collect and return all strings that meet the criteria.\n\n# [edge case]\n    extract_string([], 8) = []\n    Explanation: An empty list should return an empty list since there are no strings to check.\n    \n    extract_string(['Python', 'list', 123, 'practice'], 8) = ['practice']\n    Explanation: Non-string elements like integers should be ignored, and only strings matching the specified length should be returned.\n    \n    extract_string(['short', 'tiny', 'small'], 5) = ['short', 'small']\n    Explanation: Only strings with a length of 5 should be returned.\n\n# [extra code for edge case]\n    We need extra code to handle non-string elements.\n        def extract_string(lst, size):\n            return [s for s in lst if isinstance(s, str) and len(s) == size]\n", "requirement analysis:\nThe function should efficiently filter strings from a list based on a specified length. It should handle edge cases such as empty lists and strings of varying lengths. The implementation should be straightforward, leveraging Python's list comprehension for optimal performance.\nrequirement pool:\n- Implement the core function to extract strings of a specified length.\n- Ensure compatibility with Python 3.x versions.\n- Provide comprehensive documentation and usage examples.\n- Optimize for performance with large lists.\n- Include unit tests to verify functionality.\nWe will implement a simple function using Python's built-in capabilities, specifically leveraging list comprehension for efficient filtering of strings based on their length. This approach ensures compatibility with Python 3.x versions and provides optimal performance even for large lists. We will also include comprehensive documentation and examples to facilitate ease of use.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'extract specified size of strings'\n    Explanation: The requirement is to filter out strings from a list that match a specified length.\n\n# [phrase showing quantity relationship]\n    'specified size': This indicates that we need to compare the length of each string in the list to a given size and extract those that match.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Define the function `extract_string` that takes a list of strings and a size as parameters.\n    - Use list comprehension to iterate over each string in the list.\n    - Check if the length of each string is equal to the specified size.\n    - Collect and return the strings that match the specified size.\n\n# [edge case] \n    extract_string([], 8) = []\n    Explanation: An empty list should return an empty list since there are no strings to check.\n    \n    extract_string(['Python', 'list', 'exercises'], 4) = ['list']\n    Explanation: Only 'list' has a length of 4, so it should be returned.\n    \n    extract_string(['Python', 'list', 'exercises'], 10) = []\n    Explanation: No string in the list has a length of 10, so the function should return an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using list comprehension will naturally handle these cases by returning an empty list when no matches are found.\n", "requirement analysis:\nThe function should efficiently filter strings based on their length from a list. It must handle various edge cases, such as empty lists and strings of varying lengths, and provide clear error messages for invalid inputs.\nrequirement pool:\n- Implement the core functionality to filter strings by length\n- Ensure compatibility with Python 3.x versions\n- Provide comprehensive documentation and usage examples\n- Optimize performance for large datasets\n- Handle edge cases and provide error handling\nWe will implement a simple function using Python's built-in capabilities to filter strings based on their length. The function will iterate over the list and use a list comprehension to efficiently extract strings of the specified length. This approach ensures compatibility with Python 3.x versions and handles edge cases such as empty lists gracefully. We will also provide comprehensive documentation and usage examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'extract specified size of strings'\n    Explanation: This means the function should filter and return strings from the list that match a given length.\n\n# [phrase showing quantity relationship]\n    'specified size': This indicates that the function should compare the length of each string to a given number and include only those strings that match this length.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` that takes a list of strings and an integer `size` as parameters.\n    2. Use a list comprehension to iterate over each string in the list.\n    3. For each string, check if its length is equal to the specified `size`.\n    4. Collect and return all strings that meet this condition in a new list.\n\n# [edge case] \n    extract_string([], 5) = []\n    Explanation: An empty list should return an empty list since there are no strings to check.\n    \n    extract_string(['short', 'tiny', 'big'], 4) = ['tiny']\n    Explanation: Only 'tiny' has a length of 4, so it is the only string returned.\n    \n    extract_string(['exact', 'match', 'exact'], 5) = ['exact', 'match', 'exact']\n    Explanation: All strings have a length of 5, so all are returned.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using list comprehension inherently handles these cases by filtering based on string length.\n", "requirement analysis:\nThe function should efficiently extract strings of a specified length from a list, ensuring it handles edge cases such as empty lists or invalid sizes. Performance optimization is crucial for handling large datasets.\nrequirement pool:\n- Implement the main extraction logic based on string length.\n- Ensure error handling for invalid inputs.\n- Optimize performance for large lists.\n- Provide documentation for usage and edge cases.\n- Include unit tests to validate functionality.\nWe will implement a function named extract_string that takes a list of strings and an integer size as input. The function will return a list of strings that match the specified size. We will use Python's built-in list comprehension for efficient filtering. Error handling will be included to manage cases where the input list is empty or the size is invalid. For performance optimization, the function will be designed to handle large lists efficiently using list comprehension, which is generally faster than traditional loops.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'extract': means to select or filter specific elements from a collection based on a given condition.\n    'specified size': refers to the exact length of strings that need to be extracted from the list.\n\n# [phrase showing quantity relationship]\n    'specified size': indicates that the strings to be extracted must have a length equal to the given integer size.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` that takes two parameters: a list of strings and an integer size.\n    2. Use list comprehension to iterate over each string in the list.\n    3. Check if the length of each string matches the specified size.\n    4. Collect and return all strings that match the specified size in a new list.\n\n# [edge case] \n    extract_string([], 5) = []\n    Explanation: The input list is empty, so there are no strings to extract, resulting in an empty list.\n    \n    extract_string(['Python', 'list', 'exercises'], 0) = []\n    Explanation: No string can have a length of zero, so the expected output is an empty list.\n    \n    extract_string(['Python', 'list', 'exercises'], 7) = ['exercises']\n    Explanation: Only the string 'exercises' has a length of 7, so it is the only string extracted.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic using list comprehension inherently handles empty lists and invalid sizes by returning an empty list when no matches are found.\n", "requirement analysis:\nThe function should efficiently filter and return strings from a list that match a specified length. It should handle edge cases such as empty lists and non-string elements gracefully.\nrequirement pool:\n- Implement the core function to extract strings of a specified length.\n- Include error handling for non-string elements.\n- Provide comprehensive documentation and usage examples.\n- Optimize for performance with large lists.\n- Ensure compatibility with Python 3.x versions.\nWe will implement a simple function using Python's built-in capabilities to filter strings based on their length. The function will iterate over the list and check the length of each string, returning a new list containing only the strings that match the specified length. We will ensure compatibility with Python 3.x versions and provide clear documentation and examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'extract specified size of strings'\n    Explanation: The requirement is to filter and return strings from a list that match a given length.\n\n# [phrase showing quantity relationship]\n    'specified size': This indicates that the function should filter strings based on a given length, which is a specific number provided as input.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` that takes two parameters: a list of strings and an integer representing the desired string length.\n    2. Initialize an empty list to store the result.\n    3. Iterate over each string in the input list.\n    4. Check if the length of the current string matches the specified size.\n    5. If it matches, append the string to the result list.\n    6. Return the result list containing all strings of the specified size.\n\n# [edge case] \n    extract_string([], 5) = []\n    Explanation: An empty list should return an empty list since there are no strings to check.\n    \n    extract_string(['Python', 'list'], 10) = []\n    Explanation: None of the strings in the list have a length of 10, so the function should return an empty list.\n    \n    extract_string(['a', 'ab', 'abc'], 1) = ['a']\n    Explanation: Only the string 'a' has a length of 1, so it should be returned in a list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of filtering based on string length inherently handles these cases.\n", "requirement analysis:\nThe function should efficiently filter and return strings from a list that match a specified length. It should handle edge cases such as empty lists and non-string elements gracefully.\nrequirement pool:\n- Implement the core function to extract strings of a specified length.\n- Ensure compatibility with Python 3.x versions.\n- Provide comprehensive documentation and usage examples.\n- Optimize the function for performance with large lists.\n- Include unit tests to verify functionality across different scenarios.\nWe will implement a simple function using Python's built-in capabilities to filter strings based on their length. The function will iterate over the list and use a list comprehension to efficiently extract strings of the specified length. We will ensure compatibility with Python 3.x versions and provide comprehensive documentation and usage examples. The function will assume all elements in the list are strings, as handling non-string elements is not specified.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'extract specified size of strings'\n    Explanation: The requirement is to filter out strings from a list that match a given length.\n\n# [phrase showing quantity relationship]\n    'specified size': This indicates the exact length that the strings need to match in order to be extracted.\n    Implementation: Use a condition to check if the length of each string equals the specified size.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` with parameters for the list of strings and the specified size.\n    2. Use a list comprehension to iterate over each string in the list.\n    3. Check if the length of each string matches the specified size.\n    4. Collect and return the strings that meet the condition.\n\n# [edge case] \n    extract_string([], 5) = []\n    Explanation: An empty list should return an empty list, as there are no strings to check.\n    \n    extract_string(['Python', 'list', 'exercises'], 0) = []\n    Explanation: No string can have a length of 0, so the expected output is an empty list.\n    \n    extract_string(['Python', 'list', 'exercises'], 4) = ['list']\n    Explanation: Only 'list' has a length of 4, so it should be returned.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of using a list comprehension with a length check will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently filter strings based on their length, ensuring compatibility with Python 3.x and handling edge cases such as empty lists or non-string elements.\nrequirement pool:\n- Implement the main function to extract strings of specified length\n- Ensure compatibility with Python 3.x\n- Handle edge cases gracefully\n- Provide clear documentation and examples\n- Optimize for performance with large datasets\nWe will implement a simple function using Python's built-in capabilities to filter strings based on their length. The function will iterate over the list and check the length of each string, returning a new list containing only the strings that match the specified length. This approach ensures compatibility with Python 3.x and handles edge cases such as empty lists gracefully. We will also provide documentation and examples to enhance usability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'specified size of strings'\n    Explanation: This refers to the requirement to filter strings from the list that have a length equal to a given size.\n\n# [phrase showing quantity relationship]\n    'specified size': This indicates that the strings to be extracted should have a length equal to the specified number. In code, this can be implemented using a comparison operation, such as `len(string) == specified_size`.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` that takes a list of strings and an integer `size` as parameters.\n    2. Initialize an empty list to store the result.\n    3. Iterate over each string in the input list.\n    4. For each string, check if its length is equal to the specified size.\n    5. If the condition is met, append the string to the result list.\n    6. Return the result list after iterating through all strings.\n\n# [edge case] \n    extract_string([], 5) = []\n    Explanation: An empty list should return an empty list since there are no strings to check.\n    \n    extract_string(['short', 'tiny', 'big'], 4) = ['tiny']\n    Explanation: Only 'tiny' has a length of 4, so it is the only string returned.\n    \n    extract_string(['exact', 'match', 'exact'], 5) = ['exact', 'match', 'exact']\n    Explanation: All strings have a length of 5, so all are included in the result.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through the list and checking string lengths inherently handles these cases.\n", "requirement analysis:\nThe function should efficiently filter strings based on their length from a list. It should handle various edge cases such as empty lists and non-string elements gracefully.\nrequirement pool:\n- Implement the main function to extract strings of specified length\n- Ensure the function handles edge cases like empty lists\n- Provide documentation and examples for usage\n- Optimize performance for large datasets\n- Include unit tests to verify functionality\nWe will implement a simple function named `extract_string` that takes a list of strings and an integer specifying the desired string length. The function will filter and return a list of strings that match the specified length. We will use Python's built-in list comprehension for efficient filtering. The function will handle edge cases such as empty lists and non-string elements by ignoring non-string elements and returning an empty list if no strings match the specified length.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'specified size of strings'\n    Explanation: This refers to the requirement that the function should return strings from the list that have a length equal to the specified integer value.\n\n# [phrase showing quantity relationship]\n    'specified size': This indicates that the function should filter strings based on their length being equal to a given integer.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` that takes two parameters: a list of strings and an integer specifying the desired string length.\n    2. Use a list comprehension to iterate over each string in the list.\n    3. For each string, check if its length is equal to the specified integer.\n    4. Collect and return all strings that match the specified length in a new list.\n    5. Handle edge cases such as empty lists by returning an empty list if no strings match the specified length.\n\n# [edge case] \n    extract_string([], 5) = []\n    Explanation: The input list is empty, so there are no strings to check against the specified length, resulting in an empty list.\n    \n    extract_string(['Python', 'list', 'exercises'], 10) = []\n    Explanation: None of the strings in the list have a length of 10, so the function returns an empty list.\n    \n    extract_string(['Python', 'list', 'exercises'], 4) = ['list']\n    Explanation: Only the string 'list' has a length of 4, so it is returned in a list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using list comprehension inherently handles these cases by filtering based on string length.\n", "requirement analysis:\nThe function should efficiently filter strings from a list based on a specified length. It should handle edge cases such as empty lists or when no strings match the specified length. The function should be easy to integrate into existing projects and have clear documentation.\nrequirement pool:\n- Implement the core function to extract strings of a specified length.\n- Ensure the function handles edge cases gracefully.\n- Provide comprehensive documentation and usage examples.\n- Optimize the function for performance with large datasets.\n- Maintain compatibility with multiple Python versions.\nWe will implement a simple function using Python's built-in capabilities to filter strings based on their length. The function will iterate over the list and use a list comprehension to efficiently extract strings of the specified length. This approach ensures compatibility with different Python versions and handles edge cases such as empty lists or no matches gracefully. We will also provide clear documentation and examples for ease of use.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'extract': means to select or filter specific elements from a collection based on a condition.\n    'specified size': refers to the exact length of strings that need to be extracted from the list.\n\n# [phrase showing quantity relationship]\n    'specified size': indicates that the strings to be extracted must match a given length exactly.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` that takes a list of strings and an integer representing the specified size.\n    2. Use a list comprehension to iterate over each string in the list.\n    3. Check if the length of each string matches the specified size.\n    4. Collect and return all strings that meet the length condition.\n\n# [edge case]\n    extract_string([], 8) = []\n    Explanation: An empty list has no strings to extract, so the expected output is an empty list.\n    \n    extract_string(['Python', 'list'], 4) = ['list']\n    Explanation: Only 'list' matches the specified size of 4, so it is extracted.\n    \n    extract_string(['Python', 'list', 'exercises'], 10) = []\n    Explanation: None of the strings match the specified size of 10, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of using list comprehension inherently handles cases like empty lists or no matches by returning an empty list.\n", "requirement analysis:\nThe function should efficiently filter strings from a list based on a specified length. It should handle edge cases such as empty lists and non-string elements gracefully. The implementation should be straightforward, leveraging Python's list comprehension for optimal performance.\nrequirement pool:\n- Implement the core function to extract strings of a specified length.\n- Ensure compatibility with Python 3.x versions.\n- Provide comprehensive documentation and usage examples.\n- Optimize for performance with large datasets.\n- Include error handling for non-string inputs.\nWe will implement a simple function using Python's list comprehension to efficiently filter strings based on a specified length. The function will handle edge cases such as empty lists and non-string elements by checking the type of each element before processing. This approach ensures compatibility with Python 3.x versions and optimizes performance for large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'specified size'\n    Explanation: The requirement is to extract strings from a list that match a given length.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `extract_string` that takes two parameters: a list of strings and an integer representing the specified size.\n    2. Use list comprehension to iterate over each element in the list.\n    3. Check if the element is a string and its length matches the specified size.\n    4. Collect all strings that meet the criteria into a new list.\n    5. Return the new list.\n\n# [edge case] \n    extract_string([], 5) = []\n    Explanation: The input list is empty, so there are no strings to extract, resulting in an empty list.\n    \n    extract_string(['Python', 'list', 123, 'practice'], 4) = ['list']\n    Explanation: The function should ignore non-string elements like `123` and only consider strings with the specified length.\n    \n    extract_string(['Python', 'list', 'exercises'], 10) = []\n    Explanation: None of the strings in the list have a length of 10, so the function returns an empty list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def extract_string(strings, size):\n            return [s for s in strings if isinstance(s, str) and len(s) == size]\n"], "test": ["def check(extract_string):\n\tassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "def check(extract_string):\n\tassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']", "def check(extract_string):\n\tassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']", "def check(extract_string):\n\tassert extract_string(['jKZxOlbTaCu', 'zidnr', 'xltfgdxamss', 'smtiqxdjc', 'mgtwbidx'], 10) == []", "def check(extract_string):\n\tassert extract_string(['Zhe', 'izedzf', 'ovwmfog', 'qsoizovqmp', 'ldrggernh'], 12) == []", "def check(extract_string):\n\tassert extract_string(['BApRsE', 'gqofblu', 'obikzivdtqfgyua', 'ekuizhhfbzgj', 'ehgisf'], 9) == []", "def check(extract_string):\n\tassert extract_string(['jNGUkWdPB', 'avmpxwx', 'yshaiwxgetv', 'xpuoyfeyiss', 'ezghlnx'], 3) == []", "def check(extract_string):\n\tassert extract_string(['dlpzCg', 'nnkxwjvcj', 'uckxhf', 'org', 'ngeiwjld'], 9) == ['nnkxwjvcj']", "def check(extract_string):\n\tassert extract_string(['qiLnBlBVj', 'aqfmgu', 'ogfajlf', 'nkpjspnrglch', 'onrbz'], 13) == []", "def check(extract_string):\n\tassert extract_string(['EXe', 'rvorn', 'tdmsbycpjsqf', 'tpycx', 'ekxvplpan'], 5) == ['rvorn', 'tpycx']", "def check(extract_string):\n\tassert extract_string(['wlRv', 'jlakv', 'rcaholmfvpcr', 'yqyk', 'hnizdsxozl'], 3) == []", "def check(extract_string):\n\tassert extract_string(['IxdWseMF', 'hxcmql', 'umjmrklebwoo', 'lzxlgcf', 'fnivue'], 11) == []", "def check(extract_string):\n\tassert extract_string(['iHGsQqvLWN', 'yjp', 'jgwnkuveyqxvwtk', 'vamwzd', 'srubdizrzf'], 4) == []", "def check(extract_string):\n\tassert extract_string(['NqOFuIkkLvfy', 'ppqws', 'xiphudcfbbjepny', 'aarbeuq', 'gstx'], 12) == ['NqOFuIkkLvfy']", "def check(extract_string):\n\tassert extract_string(['njVBD', 'zkglez', 'etwmrmolooxmx', 'yoismcx', 'uejkcgiizjdm'], 11) == []", "def check(extract_string):\n\tassert extract_string(['TuKjvortMDW', 'mykzhqsi', 'kedodjdilijtczg', 'fhmhkqihbgq', 'dkv'], 3) == ['dkv']", "def check(extract_string):\n\tassert extract_string(['cfAjjBcyAZ', 'npqki', 'qcaxrrzmkpynti', 'ickyesvysq', 'hfwbnabmrhnu'], 11) == []", "def check(extract_string):\n\tassert extract_string(['uilztUqcfYT', 'dcykggdb', 'zyxuhhkfpxu', 'ohonoifypmim', 'jkuhtm'], 6) == ['jkuhtm']", "def check(extract_string):\n\tassert extract_string(['xRyIDvJIkLAL', 'dgtfbavd', 'qjzxkfp', 'itudjtqnwa', 'koop'], 7) == ['qjzxkfp']", "def check(extract_string):\n\tassert extract_string(['UTIaeel', 'fwidoza', 'kqodrsniaucvrw', 'bzwvhqzdxmu', 'pcgyemagtz'], 8) == []", "def check(extract_string):\n\tassert extract_string(['hBHPytxSSPZD', 'xpn', 'fraakn', 'wlgcplz', 'kcf'], 8) == []", "def check(extract_string):\n\tassert extract_string(['cTNkh', 'qcyluhgvt', 'adaovka', 'gcqlvlu', 'qbu'], 4) == []", "def check(extract_string):\n\tassert extract_string(['puoQ', 'hpg', 'dwgsvnijfcxsac', 'jgwtzbnbok', 'onhhojymv'], 5) == []", "def check(extract_string):\n\tassert extract_string(['qFRztkZpcXZQ', 'jzu', 'ytptnt', 'dzkegjhb', 'xgka'], 3) == ['jzu']", "def check(extract_string):\n\tassert extract_string(['ZpnDIzn', 'yrv', 'jeuzpwufhmpjdd', 'vtebtv', 'bxj'], 4) == []", "def check(extract_string):\n\tassert extract_string(['uPmaLpDnHDY', 'yccg', 'yfsthyrcjlepqx', 'trm', 'usiiat'], 11) == ['uPmaLpDnHDY']", "def check(extract_string):\n\tassert extract_string(['yJoWsqXW', 'fpjlbg', 'dztsakosic', 'yuvjqanlxhmx', 'nxjnmosfyb'], 12) == ['yuvjqanlxhmx']", "def check(extract_string):\n\tassert extract_string(['uhnhSKLTHv', 'xxcqj', 'lgqmhnyimzmnx', 'uqtheqbvmt', 'vofocpbodgrj'], 10) == ['uhnhSKLTHv', 'uqtheqbvmt']", "def check(extract_string):\n\tassert extract_string(['sbdnssDPvP', 'spx', 'gmbegpimvqfg', 'szaaxcpbi', 'ytiupavt'], 5) == []", "def check(extract_string):\n\tassert extract_string(['WANM', 'rdjbp', 'lecfmv', 'bshpflmlhmu', 'qtl'], 12) == []", "def check(extract_string):\n\tassert extract_string(['IkT', 'aka', 'ccixezbmy', 'jyokaqmodc', 'dzlkcqwskxpd'], 11) == []", "def check(extract_string):\n\tassert extract_string(['fRuUWlOFAaa', 'dbl', 'zsisxpmhlzbhns', 'moao', 'rohvglzgfj'], 7) == []", "def check(extract_string):\n\tassert extract_string(['NsU', 'wxrox', 'zniqnpguf', 'tdudqqqynk', 'asqjfqbx'], 5) == ['wxrox']", "def check(extract_string):\n\tassert extract_string(['ZLudB', 'nuky', 'nynnor', 'glt', 'asegimcqbi'], 5) == ['ZLudB']", "def check(extract_string):\n\tassert extract_string(['jGJERDGVKYi', 'bkrstpsh', 'fwhysjwnvwqdnec', 'axhnclpuq', 'usjxvfmb'], 7) == []", "def check(extract_string):\n\tassert extract_string(['NNXY', 'vjwxzvj', 'aczciavhppbwcc', 'fgktlykw', 'jdqva'], 9) == []", "def check(extract_string):\n\tassert extract_string(['oGcmYUri', 'okxyz', 'qmbhowtfpqza', 'atgwvceh', 'tmji'], 2) == []", "def check(extract_string):\n\tassert extract_string(['ORulboIGPk', 'nqpachx', 'ifopccvpslnarb', 'rybhhlyb', 'lmbqgslrbtss'], 8) == ['rybhhlyb']", "def check(extract_string):\n\tassert extract_string(['DMAGPTjNl', 'bawiyko', 'ktasnut', 'jykrjrem', 'ftzdocnr'], 1) == []", "def check(extract_string):\n\tassert extract_string(['RjjNLI', 'kwnmigrvg', 'vktqhugw', 'ptjt', 'vixoimmdtf'], 10) == ['vixoimmdtf']", "def check(extract_string):\n\tassert extract_string(['HOLaaJtY', 'vhowitgg', 'jgpbpjmr', 'gjtszex', 'jvlojhwystev'], 5) == []", "def check(extract_string):\n\tassert extract_string(['lFaS', 'acfencxp', 'yehlorakttvx', 'fdhgagzepi', 'xypgmb'], 6) == ['xypgmb']", "def check(extract_string):\n\tassert extract_string(['eFrN', 'lad', 'ohabvssqo', 'pqucnc', 'kbd'], 1) == []", "def check(extract_string):\n\tassert extract_string(['pdh', 'bzpdbquby', 'obijxkxyggvuplg', 'fqwtrycrlykp', 'bsejeldtfyx'], 4) == []", "def check(extract_string):\n\tassert extract_string(['mXlWvciwAss', 'krq', 'hdnspxvczv', 'gclwusih', 'kxdngh'], 8) == ['gclwusih']", "def check(extract_string):\n\tassert extract_string(['VwTnATgEQ', 'kvaps', 'aappnineaqihdur', 'sbcur', 'kieiypucajbh'], 4) == []", "def check(extract_string):\n\tassert extract_string(['eHG', 'kwplmaur', 'nntcsofm', 'kijhbcmaod', 'tlyig'], 5) == ['tlyig']", "def check(extract_string):\n\tassert extract_string(['uhHIh', 'mwyjvyuid', 'ixrvfhdc', 'oroolrhw', 'dgsvq'], 9) == ['mwyjvyuid']", "def check(extract_string):\n\tassert extract_string(['CnKkr', 'xnfmwjthj', 'abjwmem', 'pczh', 'onmjfs'], 2) == []", "def check(extract_string):\n\tassert extract_string(['eVBNi', 'zyz', 'ogrildsjfpevn', 'lslyorggn', 'unqvawyz'], 4) == []", "def check(extract_string):\n\tassert extract_string(['llwsMBCqN', 'vwdh', 'ccabxbhtfvscg', 'bflsrutzs', 'hszmgzudedn'], 10) == []", "def check(extract_string):\n\tassert extract_string(['FfEx', 'bodzqjn', 'wxwouraulxh', 'roy', 'slsnypjspyw'], 5) == []", "def check(extract_string):\n\tassert extract_string(['WehfmOw', 'tbduqrcmn', 'lzjmrvxzvcpmku', 'xerbwpk', 'aka'], 1) == []", "def check(extract_string):\n\tassert extract_string(['arFJSEi', 'ajuxxh', 'jcbulfhzdljftca', 'jbkqkjzoi', 'pdcpbp'], 6) == ['ajuxxh', 'pdcpbp']", "def check(extract_string):\n\tassert extract_string(['yaXZCHRpL', 'szdsugfte', 'zsxbsjdl', 'efgmhlkpyq', 'cuckfgasiu'], 6) == []", "def check(extract_string):\n\tassert extract_string(['TykKJEXmfsCu', 'bndi', 'vwavjd', 'mbkwy', 'ivtembvxnxx'], 1) == []", "def check(extract_string):\n\tassert extract_string(['Yapm', 'isrlw', 'krujpqxalbfnc', 'aeqr', 'jerboootja'], 4) == ['Yapm', 'aeqr']", "def check(extract_string):\n\tassert extract_string(['kmdQxSk', 'gywfg', 'znhbvbrsnapwfn', 'phhyui', 'trw'], 1) == []", "def check(extract_string):\n\tassert extract_string(['lQz', 'irvtzrg', 'ehwoss', 'zvpqa', 'asvy'], 11) == []", "def check(extract_string):\n\tassert extract_string(['lkUQsj', 'xjhfwgrp', 'hlfcmp', 'qur', 'qhgjx'], 2) == []", "def check(extract_string):\n\tassert extract_string(['jlIvP', 'hdojcyh', 'jeoagmoa', 'lbpvdwentuch', 'dcnqo'], 8) == ['jeoagmoa']", "def check(extract_string):\n\tassert extract_string(['cTwyLkLvRoj', 'ykjtxbr', 'lqvjtx', 'yecbleuj', 'wnqxghdb'], 7) == ['ykjtxbr']", "def check(extract_string):\n\tassert extract_string(['hccEwgC', 'yjd', 'uokzwcczpvsb', 'bmvhgx', 'svrn'], 8) == []", "def check(extract_string):\n\tassert extract_string(['tpOa', 'dvq', 'lrpuecccgluizma', 'iftaa', 'fkjihu'], 1) == []", "def check(extract_string):\n\tassert extract_string(['KwnZ', 'eksebeodh', 'imodlc', 'cjhrj', 'mdyl'], 10) == []", "def check(extract_string):\n\tassert extract_string(['JvhxG', 'sjgsj', 'sxnqqqnili', 'vuy', 'mlwsvyfrphc'], 10) == ['sxnqqqnili']", "def check(extract_string):\n\tassert extract_string(['QdhSmsLAubVU', 'xbzqhulx', 'acbusubjn', 'mkfynjoz', 'atrmdmupltad'], 8) == ['xbzqhulx', 'mkfynjoz']", "def check(extract_string):\n\tassert extract_string(['CFwdBijf', 'kxa', 'fbjigawanb', 'llmefz', 'ecgyjxis'], 5) == []", "def check(extract_string):\n\tassert extract_string(['tQRJyzpFM', 'hwcz', 'geqtutltlxclil', 'kqeq', 'hkzxmnhvl'], 11) == []", "def check(extract_string):\n\tassert extract_string(['fRtPMnFd', 'lzezfaako', 'svxwfxhviowej', 'binvjageuybm', 'wljmkfwxu'], 7) == []", "def check(extract_string):\n\tassert extract_string(['QtklXVEQ', 'sacklcoq', 'smtmlthfiggeez', 'luao', 'ssmg'], 12) == []", "def check(extract_string):\n\tassert extract_string(['deRs', 'ypy', 'khxcxlsyhupvr', 'hrhojwmvzni', 'mkhijhwhrqsh'], 11) == ['hrhojwmvzni']", "def check(extract_string):\n\tassert extract_string(['tjDdGemi', 'zapfi', 'qkugnxqldrvg', 'gmoisdvdipbj', 'kgkrtucybilr'], 6) == []", "def check(extract_string):\n\tassert extract_string(['FPRXokkiErxM', 'zbxvjcuy', 'gylahjlnsfkam', 'vics', 'uqucacmltwy'], 8) == ['zbxvjcuy']", "def check(extract_string):\n\tassert extract_string(['pDBwDagBZz', 'itkxwqwxj', 'jufssdmqu', 'totoaqcocf', 'xae'], 11) == []", "def check(extract_string):\n\tassert extract_string(['TtAKb', 'iscr', 'ookgzgmsdffim', 'ltnpjnzfheb', 'nyysgpfsaw'], 9) == []", "def check(extract_string):\n\tassert extract_string(['zOBfcS', 'edquwnacz', 'mqdrbqk', 'nfta', 'oyj'], 11) == []", "def check(extract_string):\n\tassert extract_string(['gKHJi', 'kbujwgh', 'rpjyedpkg', 'vhxou', 'ugzmlp'], 14) == []", "def check(extract_string):\n\tassert extract_string(['msMrNGiA', 'vigojgqu', 'xtunpubkjxy', 'nafguzepvwk', 'iqpwig'], 10) == []", "def check(extract_string):\n\tassert extract_string(['QOMl', 'buebmomjw', 'puvytkdimonvwqs', 'qjwemc', 'zncgi'], 10) == []", "def check(extract_string):\n\tassert extract_string(['OzZPPlug', 'eufydot', 'jwtnas', 'lwesfhjnl', 'rolj'], 12) == []", "def check(extract_string):\n\tassert extract_string(['HpEgWRuGZ', 'atfcuqi', 'uobifsuhulkv', 'nfbiigw', 'mybnvveeky'], 4) == []", "def check(extract_string):\n\tassert extract_string(['zNpPqeHKTkRB', 'vjexpy', 'wijkiitcrpmnpue', 'xzqlmwaybow', 'jfgrdquowzj'], 4) == []", "def check(extract_string):\n\tassert extract_string(['CNEuyxKYgY', 'tjbgflieo', 'ztvzcg', 'bcn', 'apa'], 7) == []", "def check(extract_string):\n\tassert extract_string(['bkqRrG', 'mrc', 'zqpcdchvwc', 'eobojonbo', 'irglaue'], 6) == ['bkqRrG']", "def check(extract_string):\n\tassert extract_string(['yKZHIbqUcOf', 'vbap', 'temtsdkvmfyg', 'vgholm', 'nxwoi'], 7) == []", "def check(extract_string):\n\tassert extract_string(['OSqDpECc', 'grkaor', 'dcoxnpueknq', 'vsxautphmnva', 'rgbe'], 4) == ['rgbe']", "def check(extract_string):\n\tassert extract_string(['mIL', 'eytiuuru', 'ptzhwvxaydbedh', 'odolwiqs', 'anpdogtsmhme'], 10) == []", "def check(extract_string):\n\tassert extract_string(['uIkcyo', 'wwbgeb', 'xalrsw', 'juroqql', 'oxgohi'], 5) == []", "def check(extract_string):\n\tassert extract_string(['hCAkU', 'zajv', 'umevtcvsbemxgc', 'jeshwtrlp', 'coydeatcexx'], 5) == ['hCAkU']", "def check(extract_string):\n\tassert extract_string(['QiusjluDm', 'ixzuyi', 'afosdjxofjrgw', 'eoesfb', 'cnigxqut'], 8) == ['cnigxqut']", "def check(extract_string):\n\tassert extract_string(['cDaTdqPRiIJO', 'ytyzqtm', 'qbduwkn', 'bpfoeymufcx', 'secwkqsv'], 12) == ['cDaTdqPRiIJO']", "def check(extract_string):\n\tassert extract_string(['OtUxgXLi', 'alcta', 'fpzycv', 'smzlsvido', 'sfndgj'], 9) == ['smzlsvido']", "def check(extract_string):\n\tassert extract_string(['CXyvrbK', 'pkcadm', 'zugxlqlajsktm', 'jffbzxek', 'olyjh'], 7) == ['CXyvrbK']", "def check(extract_string):\n\tassert extract_string(['hAXrI', 'lgpwinx', 'fmbosrqdourfu', 'irnrvikoztpy', 'xxell'], 7) == ['lgpwinx']", "def check(extract_string):\n\tassert extract_string(['XUKRrkUPdle', 'qdqu', 'ggcdbhho', 'pnkegk', 'kbkwatjzkwf'], 11) == ['XUKRrkUPdle', 'kbkwatjzkwf']", "def check(extract_string):\n\tassert extract_string(['wodZDBBP', 'urpypeilp', 'acabxqj', 'qaasiyjgl', 'ligawovb'], 8) == ['wodZDBBP', 'ligawovb']", "def check(extract_string):\n\tassert extract_string(['RGYEVnw', 'necptvhl', 'aorjemubsk', 'unpkc', 'zydxygap'], 10) == ['aorjemubsk']", "def check(extract_string):\n\tassert extract_string(['TMXzNPgP', 'slldo', 'ntuphclibkh', 'osqwqb', 'moi'], 4) == []", "def check(extract_string):\n\tassert extract_string(['EoZ', 'qyfypovk', 'ourfcn', 'jwz', 'llqxtppzt'], 14) == []", "def check(extract_string):\n\tassert extract_string(['RIawmwjQdirR', 'pnhet', 'mywjfndfwl', 'nym', 'idsgtty'], 8) == []", "def check(extract_string):\n\tassert extract_string(['Eip', 'qgccnc', 'ujgeifgzrsxmuvw', 'fism', 'ifnn'], 13) == []"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef extract_string(strings: list, length: int) -> list:\n    \"\"\"\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list): A list of string values.\n    length (int): The length of strings to extract.\n\n    Returns:\n    list: A list containing strings of the specified length.\n    \"\"\"\n    # Use list comprehension to filter strings based on specified length\n    return [s for s in strings if isinstance(s, str) and len(s) == length]\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to validate the function\n    print(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8))  # Expected: ['practice', 'solution']\n    print(extract_string([], 5))  # Expected: []\n    print(extract_string(['Python', 'list', 123, 'practice'], 4))  # Expected: ['list']\n    print(extract_string(['Python', 'list', 'exercises'], 10))  # Expected: []\n", "passed": true, "pass": true, "pass_num": 10, "round": 501, "mutate_method": "condense_two2one", "parent_index": 168}
