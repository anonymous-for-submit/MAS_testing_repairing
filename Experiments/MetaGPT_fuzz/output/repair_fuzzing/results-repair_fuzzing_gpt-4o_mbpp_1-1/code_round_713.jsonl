{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 129, "prompt": "Write a function to calculate whether the matrix is a magic square.", "code": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True", "test_imports": [], "test_list": ["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "assert magic_square_test([[8, 9, 3, 14], [7, 10, 9, 11], [16, 6, 13, 6], [9, 11, 17, 2]]) == False", "assert magic_square_test([[9, 10, 6, 17], [5, 8, 4, 11], [13, 1, 5, 9], [11, 10, 17, 8]]) == False", "assert magic_square_test([[2, 8, 3, 9], [3, 16, 5, 7], [12, 7, 5, 2], [12, 11, 12, 6]]) == False", "assert magic_square_test([[12, 12, 6, 10], [7, 10, 4, 9], [20, 8, 9, 8], [14, 8, 16, 3]]) == False", "assert magic_square_test([[12, 10, 1, 13], [4, 12, 3, 6], [18, 7, 5, 1], [4, 2, 15, 7]]) == False", "assert magic_square_test([[12, 17, 3, 9], [7, 9, 11, 8], [19, 1, 11, 1], [10, 9, 15, 7]]) == False", "assert magic_square_test([[11, 7, 2, 16], [7, 18, 4, 12], [16, 7, 13, 6], [10, 1, 18, 6]]) == False", "assert magic_square_test([[8, 7, 5, 15], [7, 13, 6, 8], [20, 2, 11, 9], [13, 6, 15, 4]]) == False", "assert magic_square_test([[10, 8, 3, 10], [1, 9, 7, 13], [16, 7, 14, 4], [7, 10, 18, 1]]) == False", "assert magic_square_test([[2, 17, 1, 10], [4, 15, 5, 11], [15, 6, 5, 7], [5, 1, 14, 8]]) == False", "assert magic_square_test([[6, 13, 5, 14], [5, 15, 11, 14], [12, 4, 15, 2], [13, 9, 13, 5]]) == False", "assert magic_square_test([[12, 14, 5, 9], [1, 11, 9, 14], [13, 5, 14, 8], [11, 7, 13, 4]]) == False", "assert magic_square_test([[2, 9, 2, 16], [7, 15, 4, 11], [21, 2, 13, 4], [10, 9, 20, 9]]) == False", "assert magic_square_test([[7, 11, 2, 16], [6, 10, 9, 8], [15, 4, 12, 6], [14, 10, 18, 9]]) == False", "assert magic_square_test([[9, 8, 3, 12], [6, 14, 5, 7], [13, 3, 6, 10], [12, 11, 15, 6]]) == False", "assert magic_square_test([[4, 10, 4, 17], [1, 14, 3, 12], [17, 6, 13, 1], [4, 8, 12, 8]]) == False", "assert magic_square_test([[9, 7, 6, 9], [6, 10, 8, 10], [19, 3, 5, 1], [8, 7, 18, 5]]) == False", "assert magic_square_test([[5, 13, 1, 12], [6, 16, 7, 10], [18, 4, 8, 5], [8, 5, 16, 4]]) == False", "assert magic_square_test([[8, 12, 3, 13], [4, 13, 13, 8], [17, 7, 15, 9], [14, 5, 14, 7]]) == False", "assert magic_square_test([[10, 9, 2, 18], [7, 9, 13, 13], [18, 7, 9, 4], [5, 9, 14, 8]]) == False", "assert magic_square_test([[5, 8, 5, 16], [6, 14, 9, 15], [20, 2, 13, 5], [7, 4, 18, 1]]) == False", "assert magic_square_test([[7, 14, 6, 9], [7, 14, 13, 8], [11, 6, 9, 5], [10, 3, 10, 6]]) == False", "assert magic_square_test([[7, 15, 5, 9], [2, 17, 7, 8], [21, 8, 8, 1], [10, 11, 15, 8]]) == False", "assert magic_square_test([[9, 14, 5, 19], [4, 15, 11, 16], [19, 6, 13, 7], [9, 7, 10, 1]]) == False", "assert magic_square_test([[12, 11, 6, 15], [6, 16, 5, 13], [19, 8, 11, 1], [13, 10, 11, 2]]) == False", "assert magic_square_test([[10, 11, 5, 11], [3, 18, 10, 15], [18, 6, 5, 3], [12, 5, 18, 3]]) == False", "assert magic_square_test([[7, 11, 4, 17], [2, 15, 4, 11], [17, 5, 5, 3], [8, 2, 20, 7]]) == False", "assert magic_square_test([[6, 16, 4, 15], [2, 15, 11, 8], [20, 6, 14, 3], [14, 3, 20, 7]]) == False", "assert magic_square_test([[8, 11, 3, 11], [2, 12, 9, 7], [21, 5, 9, 10], [14, 7, 11, 1]]) == False", "assert magic_square_test([[12, 17, 4, 14], [6, 9, 4, 16], [15, 5, 14, 5], [13, 3, 10, 7]]) == False", "assert magic_square_test([[11, 14, 2, 17], [5, 17, 4, 10], [14, 1, 8, 6], [4, 7, 14, 2]]) == False", "assert magic_square_test([[7, 16, 2, 10], [2, 17, 6, 13], [12, 5, 10, 5], [7, 1, 15, 1]]) == False", "assert magic_square_test([[12, 7, 4, 14], [7, 18, 5, 9], [17, 4, 12, 1], [10, 7, 17, 4]]) == False", "assert magic_square_test([[2, 2, 4], [5, 9, 5], [8, 2, 6]]) == False", "assert magic_square_test([[7, 10, 8], [14, 9, 6], [1, 1, 13]]) == False", "assert magic_square_test([[7, 2, 3], [4, 1, 1], [7, 2, 9]]) == False", "assert magic_square_test([[4, 10, 11], [7, 5, 3], [5, 1, 4]]) == False", "assert magic_square_test([[3, 7, 1], [12, 5, 3], [1, 7, 6]]) == False", "assert magic_square_test([[6, 11, 4], [8, 1, 2], [9, 8, 11]]) == False", "assert magic_square_test([[4, 3, 8], [4, 5, 6], [4, 4, 10]]) == False", "assert magic_square_test([[5, 2, 11], [10, 4, 1], [3, 6, 4]]) == False", "assert magic_square_test([[3, 7, 9], [5, 5, 6], [6, 2, 7]]) == False", "assert magic_square_test([[2, 3, 7], [5, 1, 5], [6, 3, 8]]) == False", "assert magic_square_test([[1, 11, 3], [11, 10, 3], [5, 8, 3]]) == False", "assert magic_square_test([[4, 9, 4], [8, 8, 4], [2, 8, 10]]) == False", "assert magic_square_test([[2, 11, 3], [9, 8, 3], [9, 5, 11]]) == False", "assert magic_square_test([[5, 8, 3], [7, 10, 4], [3, 2, 11]]) == False", "assert magic_square_test([[3, 9, 11], [13, 1, 3], [6, 3, 9]]) == False", "assert magic_square_test([[6, 4, 2], [13, 2, 2], [6, 1, 12]]) == False", "assert magic_square_test([[1, 2, 7], [13, 10, 3], [3, 6, 7]]) == False", "assert magic_square_test([[7, 2, 9], [10, 8, 5], [2, 8, 13]]) == False", "assert magic_square_test([[4, 8, 4], [14, 10, 3], [2, 1, 9]]) == False", "assert magic_square_test([[4, 10, 10], [5, 6, 5], [1, 2, 11]]) == False", "assert magic_square_test([[7, 3, 2], [6, 5, 4], [6, 1, 9]]) == False", "assert magic_square_test([[6, 3, 2], [11, 2, 6], [2, 7, 11]]) == False", "assert magic_square_test([[4, 8, 2], [6, 8, 5], [6, 6, 4]]) == False", "assert magic_square_test([[1, 7, 4], [9, 2, 3], [5, 8, 9]]) == False", "assert magic_square_test([[1, 8, 7], [4, 3, 4], [3, 1, 6]]) == False", "assert magic_square_test([[2, 6, 5], [5, 3, 3], [5, 2, 4]]) == False", "assert magic_square_test([[6, 5, 4], [6, 7, 1], [7, 1, 5]]) == False", "assert magic_square_test([[1, 7, 2], [10, 4, 6], [6, 4, 6]]) == False", "assert magic_square_test([[1, 12, 5], [7, 3, 1], [7, 3, 4]]) == False", "assert magic_square_test([[1, 10, 1], [13, 4, 6], [4, 7, 12]]) == False", "assert magic_square_test([[1, 7, 9], [7, 2, 2], [7, 5, 12]]) == False", "assert magic_square_test([[1, 10, 3], [5, 2, 2], [7, 6, 4]]) == False", "assert magic_square_test([[7, 5, 7], [6, 6, 2], [2, 1, 13]]) == False", "assert magic_square_test([[5, 9, 3], [8, 8, 2], [7, 6, 3]]) == False", "assert magic_square_test([[4, 2, 10], [10, 6, 4], [3, 4, 3]]) == False", "assert magic_square_test([[4, 6, 10], [11, 4, 6], [3, 6, 2]]) == False", "assert magic_square_test([[7, 11, 5], [5, 6, 2], [8, 4, 10]]) == False", "assert magic_square_test([[7, 5, 4], [12, 10, 1], [1, 3, 6]]) == False", "assert magic_square_test([[6, 7, 11], [7, 6, 5], [3, 8, 4]]) == False", "assert magic_square_test([[6, 10, 11], [10, 5, 4], [2, 4, 4]]) == False", "assert magic_square_test([[2, 5, 3], [4, 6, 1], [7, 1, 10]]) == False", "assert magic_square_test([[4, 7, 4], [4, 8, 4], [7, 3, 2]]) == False", "assert magic_square_test([[5, 2, 11], [12, 7, 4], [7, 2, 6]]) == False", "assert magic_square_test([[7, 7, 6], [7, 2, 2], [6, 7, 11]]) == False", "assert magic_square_test([[4, 8, 8], [7, 8, 3], [8, 3, 6]]) == False", "assert magic_square_test([[6, 6, 2], [13, 9, 4], [6, 4, 4]]) == False", "assert magic_square_test([[6, 11, 6], [8, 8, 4], [8, 7, 2]]) == False", "assert magic_square_test([[5, 11, 2], [14, 5, 2], [7, 5, 5]]) == False", "assert magic_square_test([[3, 12, 11], [13, 9, 2], [2, 8, 12]]) == False", "assert magic_square_test([[5, 7, 1], [9, 7, 6], [4, 2, 2]]) == False", "assert magic_square_test([[2, 3, 9], [14, 8, 5], [6, 1, 7]]) == False", "assert magic_square_test([[3, 6, 7], [14, 5, 6], [8, 8, 5]]) == False", "assert magic_square_test([[3, 8, 2], [9, 7, 3], [4, 8, 9]]) == False", "assert magic_square_test([[7, 2, 6], [4, 3, 2], [9, 8, 7]]) == False", "assert magic_square_test([[4, 10, 9], [11, 9, 3], [1, 3, 2]]) == False", "assert magic_square_test([[4, 5, 7], [5, 6, 2], [8, 2, 5]]) == False", "assert magic_square_test([[6, 8, 5], [10, 5, 3], [7, 6, 7]]) == False", "assert magic_square_test([[4, 7, 11], [13, 8, 6], [8, 6, 3]]) == False", "assert magic_square_test([[4, 5, 3], [11, 7, 5], [9, 1, 7]]) == False", "assert magic_square_test([[1, 7, 1], [7, 9, 1], [2, 1, 11]]) == False", "assert magic_square_test([[3, 7, 9], [13, 4, 3], [1, 3, 11]]) == False", "assert magic_square_test([[5, 4, 9], [12, 4, 1], [4, 4, 9]]) == False", "assert magic_square_test([[1, 4, 7], [9, 1, 3], [1, 8, 10]]) == False", "assert magic_square_test([[2, 11, 2], [11, 4, 4], [3, 5, 2]]) == False", "assert magic_square_test([[4, 2, 1], [14, 1, 3], [3, 4, 9]]) == False", "assert magic_square_test([[7, 4, 8], [8, 2, 3], [1, 7, 11]]) == False"], "entry_point": "magic_square_test", "repair_prompt": ["Write a function magic_square_test to calculate whether the matrix is a magic square.\nmagic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n", "Write a function magic_square_test to calculate whether the matrix is a magic square. A magic square is a square matrix in which the sums of the numbers in each row, column, and diagonal are all the same. The numbers can vary, but the sums must maintain equality.\nmagic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n", "Write a function magic_square_test to calculate whether the matrix is a magic square.\nmagic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\nimport numpy as np\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determines if a given matrix is a magic square.\n\n    A magic square is a square matrix in which the sums of the numbers in each row,\n    column, and both main diagonals are the same.\n\n    Args:\n        matrix: A list of lists where each sublist represents a row of the matrix.\n\n    Returns:\n        True if the matrix is a magic square, otherwise False.\n    \"\"\"\n    # Check if the matrix is empty or not square\n    if not matrix or len(matrix) != len(matrix[0]):\n        return False\n\n    n = len(matrix)\n    # Convert the matrix to a NumPy array for efficient operations\n    np_matrix = np.array(matrix)\n\n    # Calculate the target sum using the first row\n    target_sum = np.sum(np_matrix[0, :])\n\n    # Check sums of all rows\n    for row in range(n):\n        if np.sum(np_matrix[row, :]) != target_sum:\n            return False\n\n    # Check sums of all columns\n    for col in range(n):\n        if np.sum(np_matrix[:, col]) != target_sum:\n            return False\n\n    # Check sum of the main diagonal\n    if np.sum(np_matrix.diagonal()) != target_sum:\n        return False\n\n    # Check sum of the secondary diagonal\n    if np.sum(np.fliplr(np_matrix).diagonal()) != target_sum:\n        return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef magic_square_test(matrix: list[list[int]]) -> bool:\n    '''\n    Checks if the given matrix is a magic square.\n    \n    Parameters:\n    matrix (list[list[int]]): A 2D list representing the matrix to be checked.\n    \n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    '''\n    \n    # Check if the matrix is empty or not square\n    if not matrix or not all(len(row) == len(matrix) for row in matrix):\n        return False\n    \n    # Check if all elements are integers\n    if not all(isinstance(element, int) for row in matrix for element in row):\n        return False\n    \n    # Calculate the sum of the first row to use as the target sum\n    target_sum = sum(matrix[0])\n    \n    # Check if each row sums to the target sum\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check if each column sums to the target sum\n    for col in range(len(matrix)):\n        if sum(matrix[row][col] for row in range(len(matrix))) != target_sum:\n            return False\n    \n    # Check if the main diagonal sums to the target sum\n    if sum(matrix[i][i] for i in range(len(matrix))) != target_sum:\n        return False\n    \n    # Check if the secondary diagonal sums to the target sum\n    if sum(matrix[i][len(matrix) - 1 - i] for i in range(len(matrix))) != target_sum:\n        return False\n    \n    # If all checks pass, the matrix is a magic square\n    return True\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Checks if a given matrix is a magic square.\n    \n    A magic square is a square matrix in which the sums of the numbers in each row, \n    column, and both main diagonals are the same.\n    \n    Args:\n        matrix: A list of lists where each sublist represents a row of the matrix.\n        \n    Returns:\n        True if the matrix is a magic square, otherwise False.\n        Returns an error message if the matrix is not square.\n    \"\"\"\n    # Check if the matrix is square\n    if not matrix or len(matrix) != len(matrix[0]):\n        return \"Error: Non-square matrix\"\n    \n    n = len(matrix)\n    \n    # Calculate the sum of the first row to use as a reference sum\n    reference_sum = sum(matrix[0])\n    \n    # Check if all rows have the same sum as the reference sum\n    for row in matrix:\n        if sum(row) != reference_sum:\n            return False\n    \n    # Check if all columns have the same sum as the reference sum\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != reference_sum:\n            return False\n    \n    # Check if the main diagonal has the same sum as the reference sum\n    if sum(matrix[i][i] for i in range(n)) != reference_sum:\n        return False\n    \n    # Check if the secondary diagonal has the same sum as the reference sum\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != reference_sum:\n        return False\n    \n    return True\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a magic square.\n\n    A magic square is a square matrix where the sums of the numbers in each row,\n    column, and both main diagonals are equal.\n\n    Args:\n        matrix: A list of lists where each sublist represents a row of the matrix.\n\n    Returns:\n        True if the matrix is a magic square, otherwise False.\n    \"\"\"\n    # Check if matrix is square\n    if not all(len(row) == len(matrix) for row in matrix):\n        return False\n\n    n = len(matrix)\n    # Calculate the reference sum from the first row\n    ref_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != ref_sum:\n            return False\n\n    # Check columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != ref_sum:\n            return False\n\n    # Check main diagonal\n    if sum(matrix[i][i] for i in range(n)) != ref_sum:\n        return False\n\n    # Check secondary diagonal\n    if sum(matrix[i][n-i-1] for i in range(n)) != ref_sum:\n        return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef magic_square_test(matrix: list[list[int]]) -> tuple[bool, str]:\n    \"\"\"\n    Checks if the given matrix is a magic square.\n\n    Parameters:\n    matrix (list[list[int]]): A 2D list representing the matrix to be checked.\n\n    Returns:\n    tuple[bool, str]: A tuple where the first element is a boolean indicating if the matrix is a magic square,\n                      and the second element is a string message explaining the result.\n    \"\"\"\n    # Check if matrix is square\n    if not all(len(row) == len(matrix) for row in matrix):\n        return False, 'Matrix is not square'\n\n    n = len(matrix)\n    # Calculate the reference sum using the first row\n    ref_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != ref_sum:\n            return False, 'Matrix is not a magic square due to row sum mismatch'\n\n    # Check columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != ref_sum:\n            return False, 'Matrix is not a magic square due to column sum mismatch'\n\n    # Check main diagonal\n    if sum(matrix[i][i] for i in range(n)) != ref_sum:\n        return False, 'Matrix is not a magic square due to main diagonal sum mismatch'\n\n    # Check secondary diagonal\n    if sum(matrix[i][n-i-1] for i in range(n)) != ref_sum:\n        return False, 'Matrix is not a magic square due to secondary diagonal sum mismatch'\n\n    return True, 'Matrix is a magic square'\n", "from typing import List\n## main.py\nimport numpy as np\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Checks if the given matrix is a magic square.\n\n    Parameters:\n    matrix (List[List[int]]): A square matrix of integers.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    # Check if the matrix is empty or not a square matrix\n    if not matrix or len(matrix) != len(matrix[0]):\n        return False\n    \n    # Handle the edge case for a 1x1 matrix\n    if len(matrix) == 1:\n        return True\n    \n    # Convert the matrix to a NumPy array for efficient operations\n    np_matrix = np.array(matrix)\n    \n    # Calculate the reference sum using the first row\n    reference_sum = np.sum(np_matrix[0, :])\n    \n    # Check sums of all rows\n    for row in np_matrix:\n        if np.sum(row) != reference_sum:\n            return False\n    \n    # Check sums of all columns\n    for col in np_matrix.T:\n        if np.sum(col) != reference_sum:\n            return False\n    \n    # Check sums of both main diagonals\n    if np.sum(np.diag(np_matrix)) != reference_sum:\n        return False\n    if np.sum(np.diag(np.fliplr(np_matrix))) != reference_sum:\n        return False\n    \n    # If all checks pass, the matrix is a magic square\n    return True\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determine if the given matrix is a magic square.\n\n    Parameters:\n    matrix (List[List[int]]): A square matrix represented as a list of lists of integers.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    # Check if the matrix is square\n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n\n    # Calculate the sum of the first row to use as a reference sum\n    reference_sum = sum(matrix[0])\n\n    # Verify sums of all rows\n    for row in matrix:\n        if sum(row) != reference_sum:\n            return False\n\n    # Verify sums of all columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != reference_sum:\n            return False\n\n    # Verify sums of both main diagonals\n    if sum(matrix[i][i] for i in range(n)) != reference_sum:\n        return False\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != reference_sum:\n        return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef magic_square_test(matrix: list[list[int]]) -> bool:\n    \"\"\"Check if a given square matrix is a magic square.\n\n    Args:\n        matrix: A square matrix represented as a list of lists of integers.\n\n    Returns:\n        A boolean indicating whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix is square\n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            return False\n\n    # Calculate the reference sum using the first row\n    reference_sum = sum(matrix[0])\n\n    # Check sums of all rows\n    for row in matrix:\n        if sum(row) != reference_sum:\n            return False\n\n    # Check sums of all columns\n    for col in range(n):\n        column_sum = sum(matrix[row][col] for row in range(n))\n        if column_sum != reference_sum:\n            return False\n\n    # Check sum of the main diagonal\n    main_diagonal_sum = sum(matrix[i][i] for i in range(n))\n    if main_diagonal_sum != reference_sum:\n        return False\n\n    # Check sum of the secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n    if secondary_diagonal_sum != reference_sum:\n        return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef magic_square_test(matrix: list[list[int]]) -> bool:\n    \"\"\"Check if a given matrix is a magic square.\n\n    A magic square is a square matrix in which the sums of the numbers\n    in each row, column, and both main diagonals are the same.\n\n    Args:\n        matrix (list[list[int]]): A square matrix represented as a list of lists of integers.\n\n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    # Check if the matrix is square\n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n\n    # Calculate the target sum using the first row\n    target_sum = sum(matrix[0])\n\n    # Check sums of all rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check sums of all columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != target_sum:\n            return False\n\n    # Check sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n\n    # Check sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != target_sum:\n        return False\n\n    return True\n", "from typing import List\n## main.py\nimport numpy as np\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    '''\n    Checks if the given matrix is a magic square.\n    \n    Parameters:\n    matrix (List[List[int]]): A 2D list representing the matrix.\n    \n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    '''\n    # Convert the input list to a numpy array for efficient operations\n    np_matrix = np.array(matrix)\n    \n    # Check if the matrix is square\n    if np_matrix.shape[0] != np_matrix.shape[1]:\n        return False\n    \n    # Calculate the target sum using the sum of the first row\n    target_sum = np.sum(np_matrix[0, :])\n    \n    # Check if all rows have the same sum as the target sum\n    for row in np_matrix:\n        if np.sum(row) != target_sum:\n            return False\n    \n    # Check if all columns have the same sum as the target sum\n    for col in np_matrix.T:\n        if np.sum(col) != target_sum:\n            return False\n    \n    # Check if the main diagonal has the same sum as the target sum\n    if np.sum(np.diag(np_matrix)) != target_sum:\n        return False\n    \n    # Check if the anti-diagonal has the same sum as the target sum\n    if np.sum(np.diag(np.fliplr(np_matrix))) != target_sum:\n        return False\n    \n    # If all checks pass, return True\n    return True\n"], "plans": ["requirement analysis:\nThe function should accurately determine if a matrix is a magic square by checking the sums of rows, columns, and diagonals. It should handle various matrix sizes and provide feedback for invalid matrices.\nrequirement pool:\n- Implement the main function to check magic square properties\n- Optimize the function for performance with large matrices\n- Include error handling for invalid matrix inputs\n- Provide detailed feedback for non-magic square matrices\n- Ensure compatibility with different matrix sizes\nWe will implement a function to check if a given matrix is a magic square by verifying the sums of rows, columns, and diagonals. We will use NumPy for efficient matrix operations, which will help optimize performance for large matrices. The function will include error handling to provide informative feedback for invalid inputs, such as non-square matrices.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'magic square'\n    Explanation: A magic square is a square matrix in which the sums of the numbers in each row, column, and both main diagonals are the same.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Verify that the matrix is square (number of rows equals number of columns).\n    2. Calculate the sum of the first row to use as the target sum.\n    3. Check if all rows have the same sum as the target sum.\n    4. Check if all columns have the same sum as the target sum.\n    5. Check if both main diagonals have the same sum as the target sum.\n    6. Return True if all checks pass, otherwise return False.\n\n# [edge case] \n    magic_square_test([[1]]) = True\n    Explanation: A single element matrix is trivially a magic square since all sums are equal.\n    \n    magic_square_test([[1, 2], [2, 1]]) = False\n    Explanation: The sums of rows, columns, and diagonals are not equal, so it is not a magic square.\n    \n    magic_square_test([[2, 2], [2, 2]]) = True\n    Explanation: All rows, columns, and diagonals have the same sum (4), so it is a magic square.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def magic_square_test(matrix):\n            if not matrix or len(matrix) != len(matrix[0]):\n                return False\n            \n            n = len(matrix)\n            target_sum = sum(matrix[0])\n            \n            # Check rows\n            for row in matrix:\n                if sum(row) != target_sum:\n                    return False\n            \n            # Check columns\n            for col in range(n):\n                if sum(matrix[row][col] for row in range(n)) != target_sum:\n                    return False\n            \n            # Check diagonals\n            if sum(matrix[i][i] for i in range(n)) != target_sum:\n                return False\n            if sum(matrix[i][n-i-1] for i in range(n)) != target_sum:\n                return False\n            \n            return True\n", "requirement analysis:\nThe function should accurately determine if a matrix is a magic square by checking the sums of rows, columns, and diagonals. It should handle various matrix sizes and provide clear feedback for invalid inputs.\nrequirement pool:\n- Implement the main function to check magic square properties\n- Optimize the function for performance with large matrices\n- Include error handling for non-square matrices\n- Provide detailed feedback for invalid magic square matrices\n- Ensure compatibility with different data types\nWe will implement a function named `magic_square_test` that checks if a given matrix is a magic square. The function will verify that all rows, columns, and both diagonals sum to the same value. It will handle various matrix sizes and provide clear error messages for invalid inputs, such as non-square matrices or matrices with non-integer elements. We will use Python's built-in capabilities for matrix manipulation and error handling to ensure performance and usability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'magic square'\n    Explanation: A magic square is a square matrix in which the sum of every row, column, and both main diagonals is the same.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the matrix is square (i.e., the number of rows equals the number of columns).\n    2. Calculate the sum of the first row to use as the target sum.\n    3. Verify that each row sums to the target sum.\n    4. Verify that each column sums to the target sum.\n    5. Verify that both main diagonals sum to the target sum.\n    6. If all checks pass, return True; otherwise, return False.\n\n# [edge case] \n    magic_square_test([[1]]) = True\n    Explanation: A 1x1 matrix is trivially a magic square since there's only one element, and all sums are equal.\n    \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: The sums of rows, columns, and diagonals are not equal, so it is not a magic square.\n    \n    magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) = True\n    Explanation: This is a classic 3x3 magic square where all rows, columns, and diagonals sum to 15.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not matrix or not all(len(row) == len(matrix) for row in matrix):\n            return False\n        (other code)\n", "requirement analysis:\nThe function should determine if a matrix is a magic square by checking if the sums of the rows, columns, and diagonals are equal. It should handle matrices of varying sizes and provide clear feedback for invalid inputs.\nrequirement pool:\n- Implement the magic square test function\n- Optimize the function for performance\n- Handle different matrix sizes\n- Provide error messages for invalid inputs\n- Ensure compatibility with existing matrix libraries\nWe will implement a function named magic_square_test that checks if a given matrix is a magic square. The function will verify if all rows, columns, and both diagonals have the same sum. We will use numpy for efficient matrix operations and ensure the function handles non-square matrices by returning an error message.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'magic square'\n    Explanation: A magic square is a square matrix in which the sums of the numbers in each row, column, and both main diagonals are the same.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Verify that the matrix is square (i.e., the number of rows equals the number of columns).\n    2. Calculate the sum of the first row to use as a reference sum.\n    3. Check if all rows have the same sum as the reference sum.\n    4. Check if all columns have the same sum as the reference sum.\n    5. Check if both main diagonals have the same sum as the reference sum.\n    6. Return True if all checks pass; otherwise, return False.\n\n# [edge case] \n    magic_square_test([[1]]) = True\n    Explanation: A 1x1 matrix is trivially a magic square since all sums are equal to the single element.\n    \n    magic_square_test([[1, 2], [2, 1]]) = False\n    Explanation: The sums of rows, columns, and diagonals are not equal, so it is not a magic square.\n    \n    magic_square_test([[2, 2], [2, 2]]) = True\n    Explanation: All rows, columns, and diagonals have the same sum (4), so it is a magic square.\n\n# [extra code for edge case]\n    We need extra code to handle non-square matrices.\n        if len(matrix) != len(matrix[0]):\n            return \"Error: Non-square matrix\"\n        (other code)\n", "requirement analysis:\nThe function should efficiently determine if a given matrix is a magic square by checking the sums of rows, columns, and diagonals. It should handle various matrix sizes and provide feedback on errors.\nrequirement pool:\n- Implement the main function to check magic square properties\n- Optimize for performance with large matrices\n- Include error handling for non-square matrices\n- Provide detailed error messages for invalid magic squares\n- Support matrices of different sizes\nWe will implement a function `magic_square_test` that checks if a given matrix is a magic square by verifying the sums of rows, columns, and diagonals. We will use NumPy for efficient matrix operations, which is suitable for handling large matrices. The function will include error handling for non-square matrices and provide detailed error messages for invalid magic squares.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'magic square'\n    Explanation: A magic square is a square matrix where the sums of the numbers in each row, column, and both main diagonals are equal.\n\n# [phrase showing quantity relationship]\n    'sums of the numbers in each row, column, and diagonal are all the same': This means that for a matrix to be considered a magic square, the sum of numbers in every row, every column, and both diagonals must be equal.\n\n# [degree adverb] \n    'all the same': This indicates that the sums must be identical across all rows, columns, and diagonals.\n\n# [code logic]\n1. Check if the matrix is square (i.e., number of rows equals number of columns).\n2. Calculate the sum of the first row to use as a reference sum.\n3. Verify that each row's sum matches the reference sum.\n4. Verify that each column's sum matches the reference sum.\n5. Verify that both main diagonals' sums match the reference sum.\n6. If all checks pass, return True; otherwise, return False.\n\n# [edge case] \n    magic_square_test([[1]]) = True\n    Explanation: A 1x1 matrix is trivially a magic square since there's only one element.\n    \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: The sums of rows, columns, and diagonals are not equal, so it's not a magic square.\n    \n    magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) = True\n    Explanation: This is a classic 3x3 magic square where all rows, columns, and diagonals sum to 15.\n\n# [extra code for edge case]\n    We need extra code to handle non-square matrices.\n    ```python\n    def magic_square_test(matrix):\n        # Check if matrix is square\n        if not all(len(row) == len(matrix) for row in matrix):\n            return False\n        \n        n = len(matrix)\n        # Calculate the reference sum from the first row\n        ref_sum = sum(matrix[0])\n        \n        # Check rows\n        for row in matrix:\n            if sum(row) != ref_sum:\n                return False\n        \n        # Check columns\n        for col in range(n):\n            if sum(matrix[row][col] for row in range(n)) != ref_sum:\n                return False\n        \n        # Check main diagonal\n        if sum(matrix[i][i] for i in range(n)) != ref_sum:\n            return False\n        \n        # Check secondary diagonal\n        if sum(matrix[i][n-i-1] for i in range(n)) != ref_sum:\n            return False\n        \n        return True\n    ```\n", "requirement analysis:\nThe function should efficiently determine if a matrix is a magic square by checking the sums of rows, columns, and diagonals. It should handle edge cases such as non-square matrices and provide informative feedback.\nrequirement pool:\n- Implement the core logic to check row, column, and diagonal sums\n- Optimize the function for performance with large matrices\n- Include error handling for non-square matrices\n- Provide detailed error messages for failed tests\n- Ensure compatibility with various data types\nWe will implement a function named `magic_square_test` that checks if a given matrix is a magic square. The function will verify that the matrix is square, then calculate and compare the sums of each row, column, and both diagonals. We will use Python's built-in capabilities for list manipulation to ensure efficient performance. The function will also include error handling for non-square matrices and provide detailed error messages if the matrix fails the magic square test.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'magic square'\n    Explanation: A magic square is a square matrix where the sums of the numbers in each row, column, and both diagonals are equal.\n\n# [phrase showing quantity relationship]\n    'sums of the numbers in each row, column, and diagonal are all the same': This means that for a matrix to be considered a magic square, the sum of numbers in every row, every column, and both main diagonals must be equal.\n\n# [degree adverb] \n    'all the same': This indicates that the sums must be identical across all rows, columns, and diagonals.\n\n# [code logic]\n1. Verify that the matrix is square (i.e., the number of rows equals the number of columns).\n2. Calculate the sum of the first row to use as a reference sum.\n3. Check each row to ensure its sum matches the reference sum.\n4. Check each column to ensure its sum matches the reference sum.\n5. Check both main diagonals to ensure their sums match the reference sum.\n6. If all checks pass, return True; otherwise, return False.\n\n# [edge case] \n    magic_square_test([[1]]) = True\n    Explanation: A 1x1 matrix is trivially a magic square since there's only one element.\n    \n    magic_square_test([[1, 2], [2, 1]]) = False\n    Explanation: The sums of rows, columns, and diagonals are not equal (3 vs 3 vs 2), so it's not a magic square.\n    \n    magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) = True\n    Explanation: This is a classic 3x3 magic square where all rows, columns, and diagonals sum to 15.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    def magic_square_test(matrix):\n        # Check if matrix is square\n        if not all(len(row) == len(matrix) for row in matrix):\n            return False\n        \n        n = len(matrix)\n        # Calculate the reference sum using the first row\n        ref_sum = sum(matrix[0])\n        \n        # Check rows\n        for row in matrix:\n            if sum(row) != ref_sum:\n                return False\n        \n        # Check columns\n        for col in range(n):\n            if sum(matrix[row][col] for row in range(n)) != ref_sum:\n                return False\n        \n        # Check main diagonal\n        if sum(matrix[i][i] for i in range(n)) != ref_sum:\n            return False\n        \n        # Check secondary diagonal\n        if sum(matrix[i][n-i-1] for i in range(n)) != ref_sum:\n            return False\n        \n        return True\n    ```\n", "requirement analysis:\nThe function should efficiently determine if a given matrix is a magic square by checking the sums of rows, columns, and diagonals. It should handle matrices of varying sizes and provide feedback on invalid inputs.\nrequirement pool:\n- Implement the magic square validation logic\n- Optimize for performance with large matrices\n- Provide detailed error messages for invalid matrices\n- Support matrices of different sizes\n- Ensure user-friendly interface\nWe will implement a function to check if a given matrix is a magic square by verifying the sums of rows, columns, and diagonals. We will use NumPy for efficient matrix operations, which will help optimize performance for larger matrices. The function will also include error handling to provide clear messages for invalid inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'magic square'\n    Explanation: A magic square is a square matrix where the sums of the numbers in each row, column, and both main diagonals are equal.\n\n# [phrase showing quantity relationship]\n    'all the same': This means that the sum of each row, column, and diagonal must be equal to a specific constant value.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the input matrix is a square matrix (i.e., the number of rows equals the number of columns).\n    2. Calculate the sum of the first row to use as the reference sum.\n    3. Verify that each row's sum equals the reference sum.\n    4. Verify that each column's sum equals the reference sum.\n    5. Verify that both main diagonals' sums equal the reference sum.\n    6. If all checks pass, return True; otherwise, return False.\n\n# [edge case] \n    magic_square_test([[1]]) = True\n    Explanation: A 1x1 matrix is trivially a magic square since there's only one element, and all sums are equal.\n    \n    magic_square_test([[2, 2], [2, 2]]) = True\n    Explanation: All rows, columns, and diagonals sum to 4, which is consistent across the matrix.\n    \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: The sums of rows, columns, and diagonals are not equal.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not matrix or len(matrix) != len(matrix[0]):\n            return False\n        if len(matrix) == 1:\n            return True\n        (other code)\n", "requirement analysis:\nThe function should determine if a given square matrix is a magic square, where the sums of the numbers in each row, column, and both main diagonals are the same. The function should handle matrices of varying sizes and ensure accurate results.\nrequirement pool:\n- Implement the main function to check for magic square properties\n- Optimize the function for performance with large matrices\n- Include comprehensive test cases to validate the function\n- Provide detailed documentation and usage examples\n- Ensure compatibility with Python 3.x\nWe will implement a function to check if a given square matrix is a magic square by verifying that the sums of the numbers in each row, column, and both main diagonals are equal. We will use Python's built-in capabilities for list and matrix operations, as they are sufficient for this task and ensure compatibility with Python 3.x.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'magic square'\n    Explanation: A magic square is a square matrix in which the sum of every row, column, and both main diagonals are equal.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Calculate the sum of the first row to use as a reference sum.\n    2. Check if all rows have the same sum as the reference sum.\n    3. Check if all columns have the same sum as the reference sum.\n    4. Check if both main diagonals have the same sum as the reference sum.\n    5. If all checks pass, return True; otherwise, return False.\n\n# [edge case] \n    magic_square_test([[1]]) = True\n    Explanation: A 1x1 matrix is trivially a magic square since there's only one element.\n    \n    magic_square_test([[2, 2], [2, 2]]) = True\n    Explanation: All rows, columns, and diagonals sum to 4, so it is a magic square.\n    \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: The sums of rows, columns, and diagonals are not equal.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking sums of rows, columns, and diagonals will naturally handle these cases.\n", "requirement analysis:\nThe function should determine if a given matrix is a magic square, where the sums of the numbers in each row, column, and diagonal are the same. The function should handle square matrices of varying sizes and provide a boolean result.\nrequirement pool:\n- Implement the magic square test function\n- Optimize the function for performance\n- Include comprehensive test cases\n- Provide detailed documentation\n- Ensure compatibility with Python 3.x\nWe will implement a function named magic_square_test that checks if a given square matrix is a magic square. The function will iterate through the matrix to verify that the sum of each row, column, and both diagonals are equal. We will use basic Python data structures to keep the implementation simple and efficient, avoiding the complexity of external libraries like NumPy or Pandas for this task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'magic square'\n    Explanation: A magic square is a square matrix in which the sum of every row, column, and both main diagonals are the same.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Calculate the sum of the first row to use as a reference sum.\n    2. Iterate through each row and check if the sum matches the reference sum.\n    3. Iterate through each column and check if the sum matches the reference sum.\n    4. Calculate the sum of the main diagonal and check if it matches the reference sum.\n    5. Calculate the sum of the secondary diagonal and check if it matches the reference sum.\n    6. If all sums match the reference sum, return True; otherwise, return False.\n\n# [edge case] \n    magic_square_test([[1]]) = True\n    Explanation: A 1x1 matrix is trivially a magic square since all sums (row, column, diagonals) are equal to the single element.\n\n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: The sums of rows, columns, and diagonals are not equal, so it is not a magic square.\n\n    magic_square_test([[2, 2], [2, 2]]) = True\n    Explanation: All rows, columns, and diagonals have the same sum (4), so it is a magic square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking sums of rows, columns, and diagonals will naturally handle these cases.\n", "requirement analysis:\nThe function should accurately determine if a matrix is a magic square by checking the sums of rows, columns, and diagonals. It should handle various matrix sizes and return a boolean value.\nrequirement pool:\n- Implement the magic square test function\n- Optimize the function for performance\n- Ensure the function handles different matrix sizes\n- Provide detailed error messages for invalid matrices\n- Enhance usability with clear output\nWe will implement a function named magic_square_test that checks if a given matrix is a magic square. The function will verify that all rows, columns, and both diagonals sum to the same value. We will use Python's built-in capabilities for list and matrix manipulation to ensure simplicity and performance. The function will handle any square matrix size and return a boolean indicating whether the matrix is a magic square.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'magic square'\n    Explanation: A magic square is a square matrix in which the sums of the numbers in each row, column, and both main diagonals are the same.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Calculate the sum of the first row to determine the target sum for the magic square.\n    2. Check if all rows sum to the target sum.\n    3. Check if all columns sum to the target sum.\n    4. Check if both main diagonals sum to the target sum.\n    5. Return True if all checks pass, otherwise return False.\n\n# [edge case] \n    magic_square_test([[1]]) = True\n    Explanation: A 1x1 matrix is trivially a magic square since all sums are equal to the single element.\n    \n    magic_square_test([[2, 2], [2, 2]]) = True\n    Explanation: All rows, columns, and diagonals sum to 4, which is consistent across the matrix.\n    \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: The sums of rows, columns, and diagonals are not equal, so it is not a magic square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking sums across rows, columns, and diagonals will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently determine if a given matrix is a magic square by checking the sum of rows, columns, and diagonals. It should handle various matrix sizes and provide clear output.\nrequirement pool:\n- Implement the main function to check for magic square properties.\n- Optimize the function for larger matrices.\n- Include detailed documentation and examples.\n- Provide a user-friendly interface for input and output.\n- Add educational content about magic squares.\nWe will implement a function to check if a given matrix is a magic square by verifying that all rows, columns, and diagonals have the same sum. We will use numpy for efficient matrix operations and ensure the function handles only square matrices, as non-square matrices cannot be magic squares.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'magic square'\n    Explanation: A magic square is a square matrix in which the sum of every row, column, and both main diagonals is the same.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Verify that the matrix is square (i.e., the number of rows equals the number of columns).\n    2. Calculate the sum of the first row to use as the target sum.\n    3. Check if all rows have the same sum as the target sum.\n    4. Check if all columns have the same sum as the target sum.\n    5. Check if both main diagonals have the same sum as the target sum.\n    6. Return True if all checks pass; otherwise, return False.\n\n# [edge case] \n    magic_square_test([[1]]) = True\n    Explanation: A 1x1 matrix is trivially a magic square since all sums are equal to the single element.\n    \n    magic_square_test([[1, 2], [2, 1]]) = False\n    Explanation: The sums of rows, columns, and diagonals are not equal, so it is not a magic square.\n    \n    magic_square_test([[2, 2], [2, 2]]) = True\n    Explanation: All rows, columns, and diagonals have the same sum (4), so it is a magic square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking sums will naturally handle these cases.\n"], "test": ["def check(magic_square_test):\n\tassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "def check(magic_square_test):\n\tassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "def check(magic_square_test):\n\tassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 9, 3, 14], [7, 10, 9, 11], [16, 6, 13, 6], [9, 11, 17, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 10, 6, 17], [5, 8, 4, 11], [13, 1, 5, 9], [11, 10, 17, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 8, 3, 9], [3, 16, 5, 7], [12, 7, 5, 2], [12, 11, 12, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 12, 6, 10], [7, 10, 4, 9], [20, 8, 9, 8], [14, 8, 16, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 10, 1, 13], [4, 12, 3, 6], [18, 7, 5, 1], [4, 2, 15, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 17, 3, 9], [7, 9, 11, 8], [19, 1, 11, 1], [10, 9, 15, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[11, 7, 2, 16], [7, 18, 4, 12], [16, 7, 13, 6], [10, 1, 18, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 7, 5, 15], [7, 13, 6, 8], [20, 2, 11, 9], [13, 6, 15, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 8, 3, 10], [1, 9, 7, 13], [16, 7, 14, 4], [7, 10, 18, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 17, 1, 10], [4, 15, 5, 11], [15, 6, 5, 7], [5, 1, 14, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 13, 5, 14], [5, 15, 11, 14], [12, 4, 15, 2], [13, 9, 13, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 14, 5, 9], [1, 11, 9, 14], [13, 5, 14, 8], [11, 7, 13, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 9, 2, 16], [7, 15, 4, 11], [21, 2, 13, 4], [10, 9, 20, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 2, 16], [6, 10, 9, 8], [15, 4, 12, 6], [14, 10, 18, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 8, 3, 12], [6, 14, 5, 7], [13, 3, 6, 10], [12, 11, 15, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 4, 17], [1, 14, 3, 12], [17, 6, 13, 1], [4, 8, 12, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 7, 6, 9], [6, 10, 8, 10], [19, 3, 5, 1], [8, 7, 18, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 13, 1, 12], [6, 16, 7, 10], [18, 4, 8, 5], [8, 5, 16, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 12, 3, 13], [4, 13, 13, 8], [17, 7, 15, 9], [14, 5, 14, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 9, 2, 18], [7, 9, 13, 13], [18, 7, 9, 4], [5, 9, 14, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 8, 5, 16], [6, 14, 9, 15], [20, 2, 13, 5], [7, 4, 18, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 14, 6, 9], [7, 14, 13, 8], [11, 6, 9, 5], [10, 3, 10, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 15, 5, 9], [2, 17, 7, 8], [21, 8, 8, 1], [10, 11, 15, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 14, 5, 19], [4, 15, 11, 16], [19, 6, 13, 7], [9, 7, 10, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 11, 6, 15], [6, 16, 5, 13], [19, 8, 11, 1], [13, 10, 11, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 11, 5, 11], [3, 18, 10, 15], [18, 6, 5, 3], [12, 5, 18, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 4, 17], [2, 15, 4, 11], [17, 5, 5, 3], [8, 2, 20, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 16, 4, 15], [2, 15, 11, 8], [20, 6, 14, 3], [14, 3, 20, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 11, 3, 11], [2, 12, 9, 7], [21, 5, 9, 10], [14, 7, 11, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 17, 4, 14], [6, 9, 4, 16], [15, 5, 14, 5], [13, 3, 10, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[11, 14, 2, 17], [5, 17, 4, 10], [14, 1, 8, 6], [4, 7, 14, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 16, 2, 10], [2, 17, 6, 13], [12, 5, 10, 5], [7, 1, 15, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 7, 4, 14], [7, 18, 5, 9], [17, 4, 12, 1], [10, 7, 17, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 2, 4], [5, 9, 5], [8, 2, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 10, 8], [14, 9, 6], [1, 1, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 3], [4, 1, 1], [7, 2, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 11], [7, 5, 3], [5, 1, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 1], [12, 5, 3], [1, 7, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 11, 4], [8, 1, 2], [9, 8, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 3, 8], [4, 5, 6], [4, 4, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 2, 11], [10, 4, 1], [3, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 9], [5, 5, 6], [6, 2, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 3, 7], [5, 1, 5], [6, 3, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 11, 3], [11, 10, 3], [5, 8, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 9, 4], [8, 8, 4], [2, 8, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 11, 3], [9, 8, 3], [9, 5, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 8, 3], [7, 10, 4], [3, 2, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 9, 11], [13, 1, 3], [6, 3, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 4, 2], [13, 2, 2], [6, 1, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 2, 7], [13, 10, 3], [3, 6, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 9], [10, 8, 5], [2, 8, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 4], [14, 10, 3], [2, 1, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 10], [5, 6, 5], [1, 2, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 3, 2], [6, 5, 4], [6, 1, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 3, 2], [11, 2, 6], [2, 7, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 2], [6, 8, 5], [6, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 4], [9, 2, 3], [5, 8, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 8, 7], [4, 3, 4], [3, 1, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 6, 5], [5, 3, 3], [5, 2, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 5, 4], [6, 7, 1], [7, 1, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 2], [10, 4, 6], [6, 4, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 12, 5], [7, 3, 1], [7, 3, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 10, 1], [13, 4, 6], [4, 7, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 9], [7, 2, 2], [7, 5, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 10, 3], [5, 2, 2], [7, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 5, 7], [6, 6, 2], [2, 1, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 9, 3], [8, 8, 2], [7, 6, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 2, 10], [10, 6, 4], [3, 4, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 6, 10], [11, 4, 6], [3, 6, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 5], [5, 6, 2], [8, 4, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 5, 4], [12, 10, 1], [1, 3, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 7, 11], [7, 6, 5], [3, 8, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 10, 11], [10, 5, 4], [2, 4, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 5, 3], [4, 6, 1], [7, 1, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 7, 4], [4, 8, 4], [7, 3, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 2, 11], [12, 7, 4], [7, 2, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 7, 6], [7, 2, 2], [6, 7, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 8], [7, 8, 3], [8, 3, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 6, 2], [13, 9, 4], [6, 4, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 11, 6], [8, 8, 4], [8, 7, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 11, 2], [14, 5, 2], [7, 5, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 12, 11], [13, 9, 2], [2, 8, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 7, 1], [9, 7, 6], [4, 2, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 3, 9], [14, 8, 5], [6, 1, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 6, 7], [14, 5, 6], [8, 8, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 8, 2], [9, 7, 3], [4, 8, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 6], [4, 3, 2], [9, 8, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 9], [11, 9, 3], [1, 3, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 5, 7], [5, 6, 2], [8, 2, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 8, 5], [10, 5, 3], [7, 6, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 7, 11], [13, 8, 6], [8, 6, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 5, 3], [11, 7, 5], [9, 1, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 1], [7, 9, 1], [2, 1, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 9], [13, 4, 3], [1, 3, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 4, 9], [12, 4, 1], [4, 4, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 4, 7], [9, 1, 3], [1, 8, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 11, 2], [11, 4, 4], [3, 5, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 2, 1], [14, 1, 3], [3, 4, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 4, 8], [8, 2, 3], [1, 7, 11]]) == False"], "scores": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, false, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 0, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\nimport numpy as np\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    '''\n    Checks if the given matrix is a magic square.\n    \n    Parameters:\n    matrix (List[List[int]]): A 2D list representing the matrix.\n    \n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    '''\n    # Convert the input list to a numpy array for efficient operations\n    np_matrix = np.array(matrix)\n    \n    # Check if the matrix is square\n    if np_matrix.shape[0] != np_matrix.shape[1]:\n        return False\n    \n    # Calculate the target sum using the sum of the first row\n    target_sum = np.sum(np_matrix[0, :])\n    \n    # Check if all rows have the same sum as the target sum\n    for row in np_matrix:\n        if np.sum(row) != target_sum:\n            return False\n    \n    # Check if all columns have the same sum as the target sum\n    for col in np_matrix.T:\n        if np.sum(col) != target_sum:\n            return False\n    \n    # Check if the main diagonal has the same sum as the target sum\n    if np.sum(np.diag(np_matrix)) != target_sum:\n        return False\n    \n    # Check if the anti-diagonal has the same sum as the target sum\n    if np.sum(np.diag(np.fliplr(np_matrix))) != target_sum:\n        return False\n    \n    # If all checks pass, return True\n    return True\n", "passed": true, "pass": true, "pass_num": 9, "round": 713, "mutate_method": "condense_two2one", "parent_index": 53}
