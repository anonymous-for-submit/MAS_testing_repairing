{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 284, "prompt": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element. Ensure your function handles edge cases such as empty lists efficiently. Consider the time complexity of your solution for larger input sizes.", "code": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element", "test_imports": [], "test_list": ["assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "assert check_element([1,2,3,4],7)==False", "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True", "assert check_element(['kjtnbmhr', 'kokjyadgh', 'diyb', 'dlkvo'], 'fcebhgy') == False", "assert check_element(['dhexfu', 'btazydt', 'mtjn', 'gtc'], 'dpuils') == False", "assert check_element(['pzt', 'qoqwfbzp', 'xuzbx', 'ddkgikkfc'], 'zcd') == False", "assert check_element(['iumv', 'xtbnw', 'fyrxdd', 'zzzesud'], 'pkwbnc') == False", "assert check_element(['hflevlxr', 'srqsg', 'wlyjdl', 'gymwa'], 'blm') == False", "assert check_element(['dicp', 'winwrlp', 'ugwwtw', 'ufd'], 'cflzrk') == False", "assert check_element(['ucnzz', 'yyqptfx', 'sch', 'ybljkmyt'], 'kikexsyw') == False", "assert check_element(['cym', 'gkt', 'kwaxysw', 'upevwnx'], 'kibfjjkbp') == False", "assert check_element(['qypbx', 'jlgdzkf', 'oabirph', 'mwpodi'], 'drbubj') == False", "assert check_element(['kbd', 'cvpmamqmu', 'mraa', 'ssmtueyvn'], 'tra') == False", "assert check_element(['dbvq', 'fedbgfc', 'ewnojm', 'thql'], 'bkqqgd') == False", "assert check_element(['jyu', 'jfcbreyl', 'ihkssi', 'eilxlczs'], 'imumoxw') == False", "assert check_element(['gcaujsnkq', 'lpgjftst', 'byhzmyl', 'bzu'], 'aausq') == False", "assert check_element(['cxneblxvx', 'zoiuqdcvtngk', 'eonz', 'bdhrt'], 'fynahaqj') == False", "assert check_element(['nntv', 'cdizmbvyx', 'aqn', 'bsmyxi'], 'vdtksmum') == False", "assert check_element(['ioatt', 'eeeyuw', 'qzjb', 'iffwgp'], 'qvlt') == False", "assert check_element(['ufubrzgil', 'trkuttd', 'ubho', 'axaihiun'], 'yktimilj') == False", "assert check_element(['fzggrf', 'stxzervqca', 'dfwtakg', 'bubq'], 'saydq') == False", "assert check_element(['jpxhqe', 'nibhm', 'ooffq', 'uij'], 'leaduhoow') == False", "assert check_element(['qtcab', 'jldjkortnga', 'jpbfp', 'onokdlejs'], 'ygidpmkyz') == False", "assert check_element(['ajlmcvqbm', 'csjteybvfpd', 'yckfkfw', 'axvey'], 'sivja') == False", "assert check_element(['htouzb', 'eoru', 'vuzcw', 'dbg'], 'yuhyfsl') == False", "assert check_element(['ybfnngiy', 'qqaqcmxypnyt', 'hikkidiit', 'uoleamw'], 'eeswyhk') == False", "assert check_element(['kektkv', 'ofv', 'qyjjjvw', 'ojhcoc'], 'lkyapr') == False", "assert check_element(['ksyjya', 'ufzcf', 'jbpkm', 'sjaj'], 'rpqxyw') == False", "assert check_element(['jhogyc', 'tcdrhpz', 'kkjv', 'lamgpxk'], 'qxhp') == False", "assert check_element(['nocvt', 'eyubihywmro', 'ipteixxxo', 'gbbdl'], 'sfxt') == False", "assert check_element(['rkqm', 'gwrqv', 'rff', 'hizd'], 'pfqxgdm') == False", "assert check_element(['rndi', 'bfecc', 'qmtd', 'hoqamvz'], 'ieldvm') == False", "assert check_element(['ocdlqnhq', 'ooe', 'viatabsvb', 'cmpkaan'], 'untjyj') == False", "assert check_element(['uaegwul', 'hgkep', 'xvu', 'pkmbvlhvz'], 'pmhdzbtik') == False", "assert check_element(['qucz', 'ujwiyvpamphu', 'cdjtoycq', 'akjaubuzq'], 'qir') == False", "assert check_element(['rpxvklhs', 'lwhvgv', 'gmo', 'mbnczebo'], 'spwxteizw') == False", "assert check_element([6, 6, 5, 8], 9) == False", "assert check_element([3, 7, 3, 8], 5) == False", "assert check_element([2, 4, 2, 3], 2) == False", "assert check_element([5, 5, 6, 7], 10) == False", "assert check_element([3, 6, 1, 3], 12) == False", "assert check_element([2, 1, 6, 8], 4) == False", "assert check_element([4, 6, 5, 3], 7) == False", "assert check_element([5, 1, 4, 3], 2) == False", "assert check_element([6, 1, 4, 8], 4) == False", "assert check_element([5, 5, 7, 9], 2) == False", "assert check_element([3, 1, 2, 8], 5) == False", "assert check_element([2, 1, 3, 5], 12) == False", "assert check_element([6, 4, 3, 9], 10) == False", "assert check_element([1, 6, 2, 2], 11) == False", "assert check_element([3, 7, 7, 9], 3) == False", "assert check_element([6, 1, 1, 7], 7) == False", "assert check_element([2, 5, 4, 9], 10) == False", "assert check_element([5, 6, 7, 3], 9) == False", "assert check_element([6, 4, 5, 6], 4) == False", "assert check_element([1, 2, 5, 6], 11) == False", "assert check_element([5, 7, 5, 5], 5) == False", "assert check_element([6, 5, 3, 9], 8) == False", "assert check_element([2, 1, 6, 7], 12) == False", "assert check_element([2, 3, 1, 9], 2) == False", "assert check_element([5, 4, 4, 3], 4) == False", "assert check_element([2, 4, 1, 1], 3) == False", "assert check_element([3, 4, 2, 2], 10) == False", "assert check_element([3, 1, 5, 4], 2) == False", "assert check_element([5, 6, 2, 7], 4) == False", "assert check_element([1, 2, 7, 3], 12) == False", "assert check_element([4, 6, 1, 8], 10) == False", "assert check_element([3, 3, 8, 4], 11) == False", "assert check_element([2, 1, 3, 4], 9) == False", "assert check_element(['twxgyyvy', 'nbotihav', 'eyx', 'pqthuxh'], 'fue') == False", "assert check_element(['rbjrzjhvm', 'tphcjlahp', 'klujjx', 'rmrjoet'], 'imtitayfb') == False", "assert check_element(['gacsl', 'nmuwr', 'jrylm', 'tljtd'], 'gglbhwrq') == False", "assert check_element(['shh', 'bsgupw', 'fnzbuobn', 'xsyxp'], 'gvv') == False", "assert check_element(['bybqbq', 'yqfarwzt', 'wlhjg', 'furwg'], 'rndiv') == False", "assert check_element(['wnllzt', 'reiuyv', 'vuioj', 'kbbbna'], 'lhlnyhlxs') == False", "assert check_element(['wvz', 'ucpfmzep', 'nzt', 'jctttjb'], 'aclnn') == False", "assert check_element(['cwwdzh', 'oadwwaf', 'oeljcsin', 'lnrerjf'], 'msld') == False", "assert check_element(['tvdd', 'ejfmfb', 'vgpamj', 'qeyujydc'], 'vuiuso') == False", "assert check_element(['nrjty', 'qmd', 'lptpgj', 'fir'], 'mtaqgwh') == False", "assert check_element(['dzv', 'izc', 'yzj', 'yaoc'], 'vkwbk') == False", "assert check_element(['wci', 'qbsxierh', 'lsnom', 'mqmnfxfmo'], 'zbvxeo') == False", "assert check_element(['inly', 'huuy', 'izjt', 'pskj'], 'zeei') == False", "assert check_element(['wvyiembfl', 'aqawt', 'hbwkgj', 'igrvy'], 'gffxi') == False", "assert check_element(['znvxy', 'nck', 'uwqnckvj', 'vhrstfofy'], 'kgbt') == False", "assert check_element(['lufyesid', 'wykb', 'uwv', 'buo'], 'amhyjmygp') == False", "assert check_element(['corckyd', 'agoivl', 'xkkdhbhec', 'yjottc'], 'bomgv') == False", "assert check_element(['wejjjguc', 'srglrq', 'nkuilzmzo', 'lkhzxt'], 'adi') == False", "assert check_element(['ghnmsg', 'anrvphr', 'ojyb', 'ujfvkwtej'], 'kbhipuo') == False", "assert check_element(['kirp', 'gchvjmakk', 'lwu', 'dzmgu'], 'xrujixxyn') == False", "assert check_element(['cca', 'tufalq', 'mtmmvnwvh', 'yvm'], 'whgqcomzr') == False", "assert check_element(['mxo', 'vzfymij', 'apftwk', 'tfhndxe'], 'shbhvrw') == False", "assert check_element(['iylr', 'qbaggndx', 'kshgf', 'usrisohn'], 'eawk') == False", "assert check_element(['rjbvoga', 'xaxs', 'lkhbg', 'edea'], 'yqecdinr') == False", "assert check_element(['jyl', 'ckfxl', 'roszyhvr', 'gtvufyn'], 'ugovkk') == False", "assert check_element(['kwcle', 'vou', 'vkupqz', 'uycuemmxp'], 'meuex') == False", "assert check_element(['qpxubn', 'gscj', 'ltyqkavi', 'tbzq'], 'jast') == False", "assert check_element(['fomuzfac', 'vzmhaixs', 'jdohtr', 'mxmbutpvi'], 'phx') == False", "assert check_element(['jiifmliv', 'rbcr', 'zhfsgqrp', 'ejitlh'], 'mqiz') == False", "assert check_element(['nmbdehbx', 'noanqi', 'byixwf', 'vscuiv'], 'azr') == False", "assert check_element(['nwlkov', 'ysg', 'wcxqlqxti', 'fdrtzk'], 'ahtgyqa') == False", "assert check_element(['ojavf', 'ovndofiqd', 'ynjrpqijl', 'gbyfvnkmn'], 'ofkeoatq') == False", "assert check_element(['hiqzqqyh', 'ueapyxb', 'toqg', 'sxmgw'], 'dumihpsyd') == False"], "entry_point": "check_element", "repair_prompt": ["Write a function check_element that takes in a list and element and checks whether all items in the list are equal to the given element. Ensure your function handles edge cases such as empty lists efficiently. Consider the time complexity of your solution for larger input sizes.\ncheck_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n", "Write a function check_element that takes in a list and element and checks whether all items in the list are equal to the given element. Ensure your function handles edge cases such as empty lists efficiently. Make sure that your code doesn't fail when an empty list is passed, and handles it gracefully. Consider the time complexity of your solution for larger input sizes.\ncheck_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n", "Write a function check_element that takes in a list and element and checks whether all items in the list are equal to the given element. Ensure your function handles edge cases such as empty lists efficiently, and consider the time complexity of your solution for larger input sizes.\ncheck_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n"], "completions": ["from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Checks if all elements in the list are equal to the specified element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the specified element, False otherwise.\n    \"\"\"\n    return all(x == element for x in lst)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(check_element([], 'blue'))  # Expected output: True\n    print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Expected output: True\n    print(check_element(['blue', 'green', 'blue'], 'blue'))  # Expected output: False\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"Checks if all items in the list are equal to the given element.\n\n    Args:\n        lst (list): The list of elements to check.\n        element (any): The element to compare against each item in the list.\n\n    Returns:\n        bool: True if all items in the list are equal to the given element, otherwise False.\n              Returns True for an empty list.\n    \"\"\"\n    return all(item == element for item in lst)\n\n# Example usage:\n# print(check_element([], 'blue'))  # Expected output: True\n# print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Expected output: True\n# print(check_element(['blue', 'green', 'blue'], 'blue'))  # Expected output: False\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Check if all elements in the list are equal to the specified element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the specified element, False otherwise.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        return False\n    \n    # Use Python's built-in `all()` function to check if all elements are equal to the specified element\n    return all(x == element for x in lst)\n\n# Example usage:\n# print(check_element([], 'blue'))  # Expected output: False\n# print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Expected output: True\n# print(check_element(['blue', 'green', 'blue'], 'blue'))  # Expected output: False\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Checks if all elements in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        return False\n    \n    # Use the all() function to check if all elements match the given element\n    return all(item == element for item in lst)\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Check if all elements in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    # Return False immediately if the list is empty\n    if not lst:\n        return False\n    \n    # Use the all() function to check if all elements in the list are equal to the given element\n    return all(x == element for x in lst)\n\n# Example usage:\n# print(check_element([], 'blue'))  # Expected output: False\n# print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Expected output: True\n# print(check_element(['blue', 'green', 'blue'], 'blue'))  # Expected output: False\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Checks if all elements in the list are equal to the specified element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the specified element, False otherwise.\n    \"\"\"\n    # If the list is empty, return False immediately\n    if not lst:\n        return False\n    \n    # Use the all() function to check if all elements in the list are equal to the specified element\n    return all(item == element for item in lst)\n\n# Example usage:\n# print(check_element([], 'blue'))  # Output: False\n# print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Output: True\n# print(check_element(['blue', 'green', 'blue'], 'blue'))  # Output: False\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Checks if all elements in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        return False\n\n    # Iterate through each item in the list\n    for item in lst:\n        # Compare each item with the given element\n        if item != element:\n            return False\n\n    # If all items match, return True\n    return True\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Checks if all elements in the list are equal to the specified element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the specified element, False otherwise.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        return False\n\n    # Iterate through each item in the list\n    for item in lst:\n        # Check if the item is not equal to the specified element\n        if item != element:\n            return False\n\n    # If all items are equal to the specified element, return True\n    return True\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Check if all elements in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        return False\n    \n    # Use a generator expression to check if all elements are equal to the given element\n    return all(x == element for x in lst)\n\n# Example usage:\n# print(check_element([], 'blue'))  # Output: False\n# print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Output: True\n# print(check_element(['blue', 'green', 'blue'], 'blue'))  # Output: False\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"Checks if all elements in the list are equal to the specified element.\n\n    This function uses Python's built-in `all()` function to efficiently check\n    if all elements in a list are equal to a specified element. It handles edge\n    cases such as empty lists by returning False, as no elements can match the\n    specified element in an empty list.\n\n    Args:\n        lst (list): The list of elements to check.\n        element (any): The element to compare against.\n\n    Returns:\n        bool: True if all elements in the list are equal to the specified element,\n              False otherwise.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        return False\n\n    # Use all() to check if all elements in the list are equal to the specified element\n    return all(item == element for item in lst)\n\n# Example usage:\n# print(check_element([], 'blue'))  # Output: False\n# print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Output: True\n# print(check_element(['blue', 'green', 'blue'], 'blue'))  # Output: False\n"], "plans": ["requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, handling edge cases like empty lists. The solution should be optimized for performance, especially for large lists.\nrequirement pool:\n- Efficiently check if all elements match the given element\n- Handle empty lists without errors\n- Optimize for large input sizes\n- Provide clear feedback on the result\n- Ensure compatibility with various data types\nWe will implement a function named check_element that iterates through the list and checks if each element matches the specified element. For efficiency, we will use Python's built-in all() function, which is optimized for performance. This approach will handle empty lists gracefully and provide a clear boolean output indicating whether all elements match the specified element.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: This means that every element in the list should be the same as the specified element for the function to return True.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Use Python's built-in `all()` function to check if all elements in the list are equal to the given element.\n    2. The `all()` function will iterate over each element in the list and return True if all elements satisfy the condition, otherwise False.\n    3. Handle the edge case of an empty list by returning True, as technically all zero elements are equal to any given element.\n\n# [edge case] \n    check_element([], 'blue') = True\n    Explanation: An empty list has no elements that contradict the condition, so it is considered that all (zero) elements are equal to 'blue'.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the function should return True.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements in the list are equal to 'blue', so the function should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `all()` inherently handles empty lists and checks each element efficiently.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, handling edge cases like empty lists. The solution should be optimized for performance, especially for large lists.\nrequirement pool:\n- Efficiently check if all elements in a list match a given element.\n- Handle empty lists without errors.\n- Optimize for large input sizes.\n- Provide clear and concise output.\n- Ensure compatibility with various data types.\nWe will implement a function using Python's built-in all() function combined with a generator expression to efficiently check if all elements in a list match a given element. This approach is efficient for large input sizes and handles edge cases like empty lists gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: The requirement is to check if every item in the list matches the specified element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'efficiently': The requirement emphasizes that the solution should be efficient, particularly for large input sizes.\n\n# [code logic]\n    - Use Python's built-in `all()` function to iterate over the list.\n    - Use a generator expression to compare each item in the list with the given element.\n    - Return `True` if all comparisons are `True`, otherwise return `False`.\n\n# [edge case] \n    check_element([], 'blue') = True\n    Explanation: An empty list has no elements that contradict the condition, so it is vacuously true that all elements (none) are equal to 'blue'.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the function should return `True`.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements are equal to 'blue', so the function should return `False`.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `all()` with a generator expression naturally handles empty lists and checks each element efficiently.\n", "requirement analysis:\nThe function should efficiently determine if all elements in a list are equal to a specified element. It must handle empty lists by returning False, as no elements can match the given element. The solution should be optimized for performance, especially for large lists, potentially using Python's all() function for concise implementation.\nrequirement pool:\n- Implement the main function to check list elements.\n- Optimize the function for large input sizes.\n- Ensure the function handles empty lists correctly.\n- Provide clear documentation and examples.\n- Include performance benchmarks for different list sizes.\nWe will implement a function named check_element that uses Python's built-in all() function to efficiently check if all elements in a list are equal to a specified element. This approach ensures optimal performance even for large lists. The function will handle edge cases such as empty lists by returning False, as no elements can match the given element.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: This means that every single item in the list must match the specified element for the function to return True.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty. If it is, return False immediately since no elements can match the given element.\n    2. Use Python's built-in `all()` function to iterate over the list and check if each element is equal to the specified element.\n    3. Return the result of the `all()` function.\n\n# [edge case] \n    check_element([], 'blue') = False\n    Explanation: An empty list has no elements to compare, so it cannot satisfy the condition of all elements being equal to 'blue'.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the function should return True.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements in the list are equal to 'blue', so the function should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of checking if the list is empty and using `all()` handles these cases efficiently.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, handling empty lists gracefully. The solution should be optimized for performance, especially for large lists, and provide clear feedback to users.\nrequirement pool:\n- Efficiently check if all elements match the given element\n- Handle empty lists gracefully\n- Optimize for large input sizes\n- Provide clear feedback to users\n- Ensure compatibility with various data types\nWe will implement a function named check_element that iterates through the list and checks if each element matches the given element. For efficiency, we will use Python's built-in all() function, which short-circuits and stops checking as soon as a non-matching element is found. This approach ensures optimal performance for large lists. The function will handle empty lists by returning False immediately, as there are no elements to match. This approach is simple, efficient, and leverages Python's capabilities for handling large data sets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: This means that every element in the list should match the specified element for the function to return True.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty. If it is, return False immediately since there are no elements to compare.\n    2. Use Python's built-in `all()` function to iterate through the list and check if each element is equal to the given element.\n    3. The `all()` function will short-circuit and stop checking as soon as a non-matching element is found, ensuring efficiency.\n    4. Return the result of the `all()` function.\n\n# [edge case] \n    check_element([], 'blue') = False\n    Explanation: The list is empty, so there are no elements to compare with 'blue'. The function should return False.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are 'blue', which matches the given element, so the function should return True.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements in the list are 'blue', so the function should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the list is empty and using `all()` handles these cases efficiently.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list match a given element, handling empty lists gracefully. It should be optimized for time complexity, especially for larger lists, and provide clear documentation for ease of use.\nrequirement pool:\n- Handle empty lists without errors\n- Return False if any element does not match\n- Optimize for large lists\n- Provide clear documentation\n- Ensure easy integration into existing projects\nWe will implement a function using Python's built-in all() function to efficiently check if all elements in a list match a given element. The function will handle empty lists gracefully by returning False, as no elements can match the given element in an empty list. This approach is optimal for time complexity as it leverages Python's native capabilities for iteration and comparison.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: The requirement is to check if every element in the list matches the specified element. If all elements match, the function should return True; otherwise, it should return False.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Use Python's built-in `all()` function to iterate over the list and check if each element is equal to the given element.\n    - If the list is empty, return False immediately since no elements can match the given element.\n    - This approach efficiently handles larger input sizes due to the optimized nature of the `all()` function.\n\n# [edge case] \n    check_element([], 'blue') = False\n    Explanation: An empty list has no elements to compare, so it should return False.\n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the function should return True.\n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements in the list are equal to 'blue', so the function should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic using `all()` and checking for an empty list at the start is sufficient to handle these cases efficiently.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, handling empty lists gracefully. The solution should be optimized for time complexity, especially for larger lists, and should be easy to understand and integrate into existing codebases.\nrequirement pool:\n- Efficiently handle empty lists without errors\n- Optimize for time complexity in larger lists\n- Provide clear function documentation\n- Ensure the function is easy to integrate\n- Consider edge cases in list element checking\nWe will implement a function named check_element that uses Python's built-in all() function to efficiently check if all elements in a list are equal to a specified element. The function will handle edge cases such as empty lists by returning False, as no elements can be equal to the specified element in an empty list. This approach ensures optimal time complexity and simplicity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'equal'\n    Explanation: The requirement is to check if all elements in the list are equal to the specified element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Use Python's built-in `all()` function to iterate through the list.\n    - Check if each element in the list is equal to the specified element.\n    - If the list is empty, return False immediately as no elements can be equal to the specified element.\n\n# [edge case] \n    check_element([], 'blue') = False\n    Explanation: An empty list has no elements to compare, so the function should return False.\n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the function should return True.\n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements in the list are equal to 'blue', so the function should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic using `all()` inherently handles empty lists and checks each element efficiently.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a given element, handling edge cases like empty lists. The solution should be optimized for performance, especially for large lists, and provide clear output.\nrequirement pool:\n- Efficiently check list elements against a given element\n- Handle empty lists without errors\n- Optimize for large input sizes\n- Provide clear and concise output\n- Consider time complexity in the solution\nWe will implement a function named check_element that iterates through the list and compares each element to the given element. We will handle edge cases such as empty lists by returning False immediately, as there are no elements to compare. The function will be optimized for performance by using a simple loop, which is efficient for this type of operation. We will avoid using heavy libraries like NumPy or Pandas, as they are unnecessary for this simple task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'equal to the given element'\n    Explanation: The requirement is to check if every item in the list matches the specified element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty. If it is, return False immediately.\n    2. Iterate through each item in the list.\n    3. Compare each item with the given element.\n    4. If any item does not match the given element, return False.\n    5. If all items match, return True.\n\n# [edge case] \n    check_element([], 'blue') = False\n    Explanation: The list is empty, so there are no elements to compare, resulting in a return value of False.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the function returns True.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements are equal to 'blue', so the function returns False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already efficiently handles empty lists and checks each element against the given element.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, handling edge cases like empty lists. The solution should be optimized for performance, especially for large lists, and provide clear feedback to the user.\nrequirement pool:\n- Efficiently check if all elements in a list match a given element\n- Handle empty lists without errors\n- Optimize for performance with large lists\n- Provide clear feedback to users\n- Ensure compatibility with various data types\nWe will implement a function named check_element that iterates through the list and checks if each element matches the specified element. We will handle edge cases such as empty lists by returning False immediately, as there are no elements to compare. The function will be optimized for performance by using a simple loop, which is efficient for this type of operation. We will avoid using heavy libraries like NumPy or Pandas, as they are unnecessary for this simple task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: This means that every element in the list should match the specified element for the function to return True.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'all': This indicates that every single item in the list must be equal to the given element for the condition to be satisfied.\n\n# [code logic]\n    1. Check if the list is empty. If it is, return False immediately since there are no elements to compare.\n    2. Iterate through each item in the list.\n    3. For each item, check if it is equal to the given element.\n    4. If any item is not equal to the given element, return False.\n    5. If all items are equal to the given element, return True.\n\n# [edge case] \n    check_element([], 'blue') = False\n    Explanation: The list is empty, so there are no elements to compare with 'blue', hence it returns False.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are 'blue', which matches the given element, so it returns True.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements in the list are 'blue', so it returns False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already handles empty lists and checks each element against the given element efficiently.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, handling edge cases like empty lists. The solution should be optimized for performance, especially for larger lists, and provide clear feedback to users.\nrequirement pool:\n- Efficiently check if all elements match the given element\n- Handle empty lists without errors\n- Optimize for large input sizes\n- Provide clear feedback to users\n- Ensure simplicity in implementation\nWe will implement a simple function using Python's built-in capabilities to efficiently check if all elements in a list match a given element. The function will handle edge cases such as empty lists by returning False, as there are no elements to match. The solution will be optimized for performance by using a generator expression to minimize memory usage and improve execution speed for large lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: This means that every single item in the list should match the specified element for the function to return True.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'all': This indicates that every element in the list must be equal to the given element for the condition to be satisfied.\n\n# [code logic]\n    1. Check if the list is empty. If it is, return False because there are no elements to compare.\n    2. Use a generator expression to iterate through each item in the list.\n    3. For each item, check if it is equal to the given element.\n    4. If all items match, return True; otherwise, return False.\n\n# [edge case] \n    check_element([], 'blue') = False\n    Explanation: The list is empty, so there are no elements to compare with 'blue', thus returning False.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are 'blue', which matches the given element, so the function returns True.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements in the list are 'blue', so the function returns False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and checks each element against the given element efficiently.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, handling edge cases like empty lists. The solution should be optimized for performance, especially for large input sizes.\nrequirement pool:\n- Efficiently check if all elements match the given element\n- Handle empty lists without errors\n- Optimize for large input sizes\n- Provide clear feedback on the result\n- Ensure the function is easy to use and integrate\nWe will implement a simple function using Python's built-in all() function to efficiently check if all elements in a list are equal to a specified element. This approach is optimal for performance as it short-circuits on the first non-matching element, making it suitable for large input sizes. We will handle edge cases such as empty lists by returning False, as no elements can match the specified element in an empty list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: This means that every single item in the list must match the specified element for the function to return True.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty. If it is, return False immediately since no elements can match the specified element.\n    2. Use Python's built-in `all()` function to iterate over the list and check if each element is equal to the specified element.\n    3. The `all()` function will return False as soon as it finds an element that does not match, optimizing performance for large lists.\n    4. If all elements match, `all()` will return True.\n\n# [edge case] \n    check_element([], 'blue') = False\n    Explanation: An empty list has no elements to compare, so it cannot satisfy the condition of all elements being equal to 'blue'.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the function should return True.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements in the list are equal to 'blue', so the function should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic using `all()` and an initial check for an empty list is sufficient to handle these cases efficiently.\n"], "test": ["def check(check_element):\n\tassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "def check(check_element):\n\tassert check_element([1,2,3,4],7)==False", "def check(check_element):\n\tassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True", "def check(check_element):\n\tassert check_element(['kjtnbmhr', 'kokjyadgh', 'diyb', 'dlkvo'], 'fcebhgy') == False", "def check(check_element):\n\tassert check_element(['dhexfu', 'btazydt', 'mtjn', 'gtc'], 'dpuils') == False", "def check(check_element):\n\tassert check_element(['pzt', 'qoqwfbzp', 'xuzbx', 'ddkgikkfc'], 'zcd') == False", "def check(check_element):\n\tassert check_element(['iumv', 'xtbnw', 'fyrxdd', 'zzzesud'], 'pkwbnc') == False", "def check(check_element):\n\tassert check_element(['hflevlxr', 'srqsg', 'wlyjdl', 'gymwa'], 'blm') == False", "def check(check_element):\n\tassert check_element(['dicp', 'winwrlp', 'ugwwtw', 'ufd'], 'cflzrk') == False", "def check(check_element):\n\tassert check_element(['ucnzz', 'yyqptfx', 'sch', 'ybljkmyt'], 'kikexsyw') == False", "def check(check_element):\n\tassert check_element(['cym', 'gkt', 'kwaxysw', 'upevwnx'], 'kibfjjkbp') == False", "def check(check_element):\n\tassert check_element(['qypbx', 'jlgdzkf', 'oabirph', 'mwpodi'], 'drbubj') == False", "def check(check_element):\n\tassert check_element(['kbd', 'cvpmamqmu', 'mraa', 'ssmtueyvn'], 'tra') == False", "def check(check_element):\n\tassert check_element(['dbvq', 'fedbgfc', 'ewnojm', 'thql'], 'bkqqgd') == False", "def check(check_element):\n\tassert check_element(['jyu', 'jfcbreyl', 'ihkssi', 'eilxlczs'], 'imumoxw') == False", "def check(check_element):\n\tassert check_element(['gcaujsnkq', 'lpgjftst', 'byhzmyl', 'bzu'], 'aausq') == False", "def check(check_element):\n\tassert check_element(['cxneblxvx', 'zoiuqdcvtngk', 'eonz', 'bdhrt'], 'fynahaqj') == False", "def check(check_element):\n\tassert check_element(['nntv', 'cdizmbvyx', 'aqn', 'bsmyxi'], 'vdtksmum') == False", "def check(check_element):\n\tassert check_element(['ioatt', 'eeeyuw', 'qzjb', 'iffwgp'], 'qvlt') == False", "def check(check_element):\n\tassert check_element(['ufubrzgil', 'trkuttd', 'ubho', 'axaihiun'], 'yktimilj') == False", "def check(check_element):\n\tassert check_element(['fzggrf', 'stxzervqca', 'dfwtakg', 'bubq'], 'saydq') == False", "def check(check_element):\n\tassert check_element(['jpxhqe', 'nibhm', 'ooffq', 'uij'], 'leaduhoow') == False", "def check(check_element):\n\tassert check_element(['qtcab', 'jldjkortnga', 'jpbfp', 'onokdlejs'], 'ygidpmkyz') == False", "def check(check_element):\n\tassert check_element(['ajlmcvqbm', 'csjteybvfpd', 'yckfkfw', 'axvey'], 'sivja') == False", "def check(check_element):\n\tassert check_element(['htouzb', 'eoru', 'vuzcw', 'dbg'], 'yuhyfsl') == False", "def check(check_element):\n\tassert check_element(['ybfnngiy', 'qqaqcmxypnyt', 'hikkidiit', 'uoleamw'], 'eeswyhk') == False", "def check(check_element):\n\tassert check_element(['kektkv', 'ofv', 'qyjjjvw', 'ojhcoc'], 'lkyapr') == False", "def check(check_element):\n\tassert check_element(['ksyjya', 'ufzcf', 'jbpkm', 'sjaj'], 'rpqxyw') == False", "def check(check_element):\n\tassert check_element(['jhogyc', 'tcdrhpz', 'kkjv', 'lamgpxk'], 'qxhp') == False", "def check(check_element):\n\tassert check_element(['nocvt', 'eyubihywmro', 'ipteixxxo', 'gbbdl'], 'sfxt') == False", "def check(check_element):\n\tassert check_element(['rkqm', 'gwrqv', 'rff', 'hizd'], 'pfqxgdm') == False", "def check(check_element):\n\tassert check_element(['rndi', 'bfecc', 'qmtd', 'hoqamvz'], 'ieldvm') == False", "def check(check_element):\n\tassert check_element(['ocdlqnhq', 'ooe', 'viatabsvb', 'cmpkaan'], 'untjyj') == False", "def check(check_element):\n\tassert check_element(['uaegwul', 'hgkep', 'xvu', 'pkmbvlhvz'], 'pmhdzbtik') == False", "def check(check_element):\n\tassert check_element(['qucz', 'ujwiyvpamphu', 'cdjtoycq', 'akjaubuzq'], 'qir') == False", "def check(check_element):\n\tassert check_element(['rpxvklhs', 'lwhvgv', 'gmo', 'mbnczebo'], 'spwxteizw') == False", "def check(check_element):\n\tassert check_element([6, 6, 5, 8], 9) == False", "def check(check_element):\n\tassert check_element([3, 7, 3, 8], 5) == False", "def check(check_element):\n\tassert check_element([2, 4, 2, 3], 2) == False", "def check(check_element):\n\tassert check_element([5, 5, 6, 7], 10) == False", "def check(check_element):\n\tassert check_element([3, 6, 1, 3], 12) == False", "def check(check_element):\n\tassert check_element([2, 1, 6, 8], 4) == False", "def check(check_element):\n\tassert check_element([4, 6, 5, 3], 7) == False", "def check(check_element):\n\tassert check_element([5, 1, 4, 3], 2) == False", "def check(check_element):\n\tassert check_element([6, 1, 4, 8], 4) == False", "def check(check_element):\n\tassert check_element([5, 5, 7, 9], 2) == False", "def check(check_element):\n\tassert check_element([3, 1, 2, 8], 5) == False", "def check(check_element):\n\tassert check_element([2, 1, 3, 5], 12) == False", "def check(check_element):\n\tassert check_element([6, 4, 3, 9], 10) == False", "def check(check_element):\n\tassert check_element([1, 6, 2, 2], 11) == False", "def check(check_element):\n\tassert check_element([3, 7, 7, 9], 3) == False", "def check(check_element):\n\tassert check_element([6, 1, 1, 7], 7) == False", "def check(check_element):\n\tassert check_element([2, 5, 4, 9], 10) == False", "def check(check_element):\n\tassert check_element([5, 6, 7, 3], 9) == False", "def check(check_element):\n\tassert check_element([6, 4, 5, 6], 4) == False", "def check(check_element):\n\tassert check_element([1, 2, 5, 6], 11) == False", "def check(check_element):\n\tassert check_element([5, 7, 5, 5], 5) == False", "def check(check_element):\n\tassert check_element([6, 5, 3, 9], 8) == False", "def check(check_element):\n\tassert check_element([2, 1, 6, 7], 12) == False", "def check(check_element):\n\tassert check_element([2, 3, 1, 9], 2) == False", "def check(check_element):\n\tassert check_element([5, 4, 4, 3], 4) == False", "def check(check_element):\n\tassert check_element([2, 4, 1, 1], 3) == False", "def check(check_element):\n\tassert check_element([3, 4, 2, 2], 10) == False", "def check(check_element):\n\tassert check_element([3, 1, 5, 4], 2) == False", "def check(check_element):\n\tassert check_element([5, 6, 2, 7], 4) == False", "def check(check_element):\n\tassert check_element([1, 2, 7, 3], 12) == False", "def check(check_element):\n\tassert check_element([4, 6, 1, 8], 10) == False", "def check(check_element):\n\tassert check_element([3, 3, 8, 4], 11) == False", "def check(check_element):\n\tassert check_element([2, 1, 3, 4], 9) == False", "def check(check_element):\n\tassert check_element(['twxgyyvy', 'nbotihav', 'eyx', 'pqthuxh'], 'fue') == False", "def check(check_element):\n\tassert check_element(['rbjrzjhvm', 'tphcjlahp', 'klujjx', 'rmrjoet'], 'imtitayfb') == False", "def check(check_element):\n\tassert check_element(['gacsl', 'nmuwr', 'jrylm', 'tljtd'], 'gglbhwrq') == False", "def check(check_element):\n\tassert check_element(['shh', 'bsgupw', 'fnzbuobn', 'xsyxp'], 'gvv') == False", "def check(check_element):\n\tassert check_element(['bybqbq', 'yqfarwzt', 'wlhjg', 'furwg'], 'rndiv') == False", "def check(check_element):\n\tassert check_element(['wnllzt', 'reiuyv', 'vuioj', 'kbbbna'], 'lhlnyhlxs') == False", "def check(check_element):\n\tassert check_element(['wvz', 'ucpfmzep', 'nzt', 'jctttjb'], 'aclnn') == False", "def check(check_element):\n\tassert check_element(['cwwdzh', 'oadwwaf', 'oeljcsin', 'lnrerjf'], 'msld') == False", "def check(check_element):\n\tassert check_element(['tvdd', 'ejfmfb', 'vgpamj', 'qeyujydc'], 'vuiuso') == False", "def check(check_element):\n\tassert check_element(['nrjty', 'qmd', 'lptpgj', 'fir'], 'mtaqgwh') == False", "def check(check_element):\n\tassert check_element(['dzv', 'izc', 'yzj', 'yaoc'], 'vkwbk') == False", "def check(check_element):\n\tassert check_element(['wci', 'qbsxierh', 'lsnom', 'mqmnfxfmo'], 'zbvxeo') == False", "def check(check_element):\n\tassert check_element(['inly', 'huuy', 'izjt', 'pskj'], 'zeei') == False", "def check(check_element):\n\tassert check_element(['wvyiembfl', 'aqawt', 'hbwkgj', 'igrvy'], 'gffxi') == False", "def check(check_element):\n\tassert check_element(['znvxy', 'nck', 'uwqnckvj', 'vhrstfofy'], 'kgbt') == False", "def check(check_element):\n\tassert check_element(['lufyesid', 'wykb', 'uwv', 'buo'], 'amhyjmygp') == False", "def check(check_element):\n\tassert check_element(['corckyd', 'agoivl', 'xkkdhbhec', 'yjottc'], 'bomgv') == False", "def check(check_element):\n\tassert check_element(['wejjjguc', 'srglrq', 'nkuilzmzo', 'lkhzxt'], 'adi') == False", "def check(check_element):\n\tassert check_element(['ghnmsg', 'anrvphr', 'ojyb', 'ujfvkwtej'], 'kbhipuo') == False", "def check(check_element):\n\tassert check_element(['kirp', 'gchvjmakk', 'lwu', 'dzmgu'], 'xrujixxyn') == False", "def check(check_element):\n\tassert check_element(['cca', 'tufalq', 'mtmmvnwvh', 'yvm'], 'whgqcomzr') == False", "def check(check_element):\n\tassert check_element(['mxo', 'vzfymij', 'apftwk', 'tfhndxe'], 'shbhvrw') == False", "def check(check_element):\n\tassert check_element(['iylr', 'qbaggndx', 'kshgf', 'usrisohn'], 'eawk') == False", "def check(check_element):\n\tassert check_element(['rjbvoga', 'xaxs', 'lkhbg', 'edea'], 'yqecdinr') == False", "def check(check_element):\n\tassert check_element(['jyl', 'ckfxl', 'roszyhvr', 'gtvufyn'], 'ugovkk') == False", "def check(check_element):\n\tassert check_element(['kwcle', 'vou', 'vkupqz', 'uycuemmxp'], 'meuex') == False", "def check(check_element):\n\tassert check_element(['qpxubn', 'gscj', 'ltyqkavi', 'tbzq'], 'jast') == False", "def check(check_element):\n\tassert check_element(['fomuzfac', 'vzmhaixs', 'jdohtr', 'mxmbutpvi'], 'phx') == False", "def check(check_element):\n\tassert check_element(['jiifmliv', 'rbcr', 'zhfsgqrp', 'ejitlh'], 'mqiz') == False", "def check(check_element):\n\tassert check_element(['nmbdehbx', 'noanqi', 'byixwf', 'vscuiv'], 'azr') == False", "def check(check_element):\n\tassert check_element(['nwlkov', 'ysg', 'wcxqlqxti', 'fdrtzk'], 'ahtgyqa') == False", "def check(check_element):\n\tassert check_element(['ojavf', 'ovndofiqd', 'ynjrpqijl', 'gbyfvnkmn'], 'ofkeoatq') == False", "def check(check_element):\n\tassert check_element(['hiqzqqyh', 'ueapyxb', 'toqg', 'sxmgw'], 'dumihpsyd') == False"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"Checks if all elements in the list are equal to the specified element.\n\n    This function uses Python's built-in `all()` function to efficiently check\n    if all elements in a list are equal to a specified element. It handles edge\n    cases such as empty lists by returning False, as no elements can match the\n    specified element in an empty list.\n\n    Args:\n        lst (list): The list of elements to check.\n        element (any): The element to compare against.\n\n    Returns:\n        bool: True if all elements in the list are equal to the specified element,\n              False otherwise.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        return False\n\n    # Use all() to check if all elements in the list are equal to the specified element\n    return all(item == element for item in lst)\n\n# Example usage:\n# print(check_element([], 'blue'))  # Output: False\n# print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Output: True\n# print(check_element(['blue', 'green', 'blue'], 'blue'))  # Output: False\n", "passed": true, "pass": true, "pass_num": 10, "round": 656, "mutate_method": "add_1_sentence_at_end", "parent_index": 337}
