{"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 425, "prompt": "Write a function to count the number of sublists containing a particular element. Ensure that your solution efficiently handles large lists and varying input sizes.", "code": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr", "test_imports": [], "test_list": ["assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1", "assert count_element_in_list([[6, 8], [4, 2], [5, 10], [3, 17, 5]], 3) == 1", "assert count_element_in_list([[2, 1], [1, 4], [4, 11], [2, 14, 12]], 6) == 0", "assert count_element_in_list([[3, 6], [7, 4], [5, 15], [4, 18, 4]], 3) == 1", "assert count_element_in_list([[2, 6], [9, 2], [6, 11], [1, 19, 6]], 1) == 1", "assert count_element_in_list([[1, 4], [4, 3], [1, 16], [6, 15, 9]], 6) == 1", "assert count_element_in_list([[4, 2], [7, 7], [1, 7], [6, 18, 5]], 1) == 1", "assert count_element_in_list([[2, 3], [9, 10], [2, 6], [3, 12, 12]], 4) == 0", "assert count_element_in_list([[4, 4], [4, 11], [4, 14], [6, 19, 4]], 3) == 0", "assert count_element_in_list([[3, 6], [4, 2], [4, 13], [4, 13, 12]], 2) == 1", "assert count_element_in_list([[5, 1], [2, 8], [2, 10], [5, 12, 6]], 3) == 0", "assert count_element_in_list([[1, 7], [2, 10], [6, 13], [2, 16, 8]], 4) == 0", "assert count_element_in_list([[5, 4], [1, 12], [3, 16], [3, 18, 6]], 2) == 0", "assert count_element_in_list([[5, 4], [5, 8], [1, 14], [3, 20, 10]], 3) == 1", "assert count_element_in_list([[3, 4], [5, 7], [1, 14], [5, 20, 11]], 5) == 2", "assert count_element_in_list([[3, 6], [6, 2], [6, 15], [1, 11, 3]], 4) == 0", "assert count_element_in_list([[2, 7], [3, 7], [1, 16], [3, 10, 3]], 6) == 0", "assert count_element_in_list([[1, 5], [4, 11], [4, 12], [5, 16, 6]], 1) == 1", "assert count_element_in_list([[6, 5], [4, 7], [3, 12], [2, 10, 3]], 6) == 1", "assert count_element_in_list([[2, 3], [5, 11], [6, 13], [6, 13, 12]], 4) == 0", "assert count_element_in_list([[6, 6], [3, 3], [2, 13], [5, 16, 8]], 5) == 1", "assert count_element_in_list([[1, 6], [7, 12], [5, 16], [5, 14, 4]], 1) == 1", "assert count_element_in_list([[6, 8], [9, 6], [1, 9], [2, 10, 2]], 4) == 0", "assert count_element_in_list([[5, 2], [7, 2], [5, 15], [4, 10, 7]], 4) == 1", "assert count_element_in_list([[4, 1], [6, 5], [4, 15], [1, 20, 2]], 5) == 1", "assert count_element_in_list([[1, 1], [7, 7], [4, 7], [2, 15, 6]], 5) == 0", "assert count_element_in_list([[3, 8], [10, 6], [3, 15], [2, 19, 6]], 6) == 2", "assert count_element_in_list([[5, 5], [3, 11], [3, 15], [3, 10, 8]], 5) == 1", "assert count_element_in_list([[5, 3], [9, 6], [6, 9], [1, 16, 2]], 3) == 1", "assert count_element_in_list([[4, 8], [6, 12], [4, 12], [6, 16, 2]], 2) == 1", "assert count_element_in_list([[3, 1], [2, 10], [1, 11], [4, 15, 9]], 6) == 0", "assert count_element_in_list([[4, 1], [4, 7], [1, 6], [4, 20, 4]], 6) == 1", "assert count_element_in_list([[2, 2], [5, 2], [4, 13], [6, 15, 6]], 5) == 1", "assert count_element_in_list([[1, 5], [6, 3], [4, 6], [4, 17, 12]], 6) == 2", "assert count_element_in_list([['S', 'M'], ['Z', 'Y'], ['M', 'W', 'U'], ['V', 'Y', 'W']], 'R') == 0", "assert count_element_in_list([['P', 'I'], ['I', 'F'], ['E', 'O', 'X'], ['D', 'B', 'T']], 'E') == 1", "assert count_element_in_list([['Y', 'F'], ['A', 'L'], ['Y', 'T', 'V'], ['U', 'D', 'C']], 'Z') == 0", "assert count_element_in_list([['J', 'Z'], ['L', 'H'], ['D', 'Q', 'I'], ['X', 'P', 'O']], 'X') == 1", "assert count_element_in_list([['D', 'O'], ['F', 'S'], ['V', 'F', 'U'], ['S', 'H', 'U']], 'J') == 0", "assert count_element_in_list([['S', 'M'], ['X', 'X'], ['E', 'P', 'Q'], ['P', 'K', 'W']], 'G') == 0", "assert count_element_in_list([['M', 'A'], ['F', 'V'], ['Y', 'F', 'E'], ['B', 'A', 'H']], 'G') == 0", "assert count_element_in_list([['R', 'S'], ['C', 'Z'], ['X', 'J', 'V'], ['V', 'H', 'N']], 'C') == 1", "assert count_element_in_list([['S', 'J'], ['Y', 'Y'], ['D', 'D', 'M'], ['M', 'P', 'R']], 'V') == 0", "assert count_element_in_list([['C', 'T'], ['U', 'J'], ['E', 'Z', 'S'], ['D', 'E', 'K']], 'X') == 0", "assert count_element_in_list([['J', 'G'], ['L', 'G'], ['F', 'U', 'C'], ['H', 'I', 'Z']], 'E') == 0", "assert count_element_in_list([['A', 'B'], ['K', 'H'], ['Z', 'A', 'P'], ['A', 'U', 'L']], 'L') == 1", "assert count_element_in_list([['R', 'X'], ['K', 'D'], ['I', 'W', 'R'], ['Z', 'X', 'W']], 'K') == 1", "assert count_element_in_list([['N', 'N'], ['J', 'Q'], ['N', 'K', 'T'], ['H', 'G', 'L']], 'R') == 0", "assert count_element_in_list([['Z', 'L'], ['H', 'C'], ['J', 'T', 'S'], ['N', 'Z', 'N']], 'E') == 0", "assert count_element_in_list([['F', 'Z'], ['B', 'E'], ['E', 'A', 'Y'], ['H', 'L', 'K']], 'M') == 0", "assert count_element_in_list([['G', 'L'], ['C', 'O'], ['Y', 'M', 'K'], ['V', 'C', 'Y']], 'H') == 0", "assert count_element_in_list([['U', 'X'], ['D', 'W'], ['P', 'G', 'M'], ['F', 'P', 'W']], 'P') == 2", "assert count_element_in_list([['Y', 'Y'], ['A', 'S'], ['K', 'T', 'S'], ['Y', 'B', 'N']], 'H') == 0", "assert count_element_in_list([['Q', 'Q'], ['G', 'U'], ['W', 'G', 'B'], ['C', 'E', 'K']], 'W') == 1", "assert count_element_in_list([['G', 'A'], ['R', 'I'], ['C', 'I', 'F'], ['Q', 'G', 'Q']], 'S') == 0", "assert count_element_in_list([['V', 'Z'], ['F', 'G'], ['O', 'T', 'Z'], ['P', 'E', 'D']], 'S') == 0", "assert count_element_in_list([['V', 'T'], ['C', 'C'], ['N', 'Z', 'T'], ['U', 'Z', 'X']], 'R') == 0", "assert count_element_in_list([['X', 'L'], ['D', 'D'], ['L', 'G', 'X'], ['T', 'S', 'P']], 'N') == 0", "assert count_element_in_list([['L', 'G'], ['N', 'U'], ['C', 'E', 'R'], ['N', 'B', 'O']], 'U') == 1", "assert count_element_in_list([['N', 'S'], ['P', 'G'], ['X', 'Z', 'O'], ['J', 'T', 'U']], 'L') == 0", "assert count_element_in_list([['X', 'K'], ['M', 'M'], ['H', 'I', 'F'], ['A', 'Q', 'L']], 'J') == 0", "assert count_element_in_list([['T', 'Q'], ['I', 'E'], ['Z', 'X', 'W'], ['J', 'X', 'S']], 'R') == 0", "assert count_element_in_list([['M', 'O'], ['W', 'N'], ['U', 'V', 'D'], ['E', 'H', 'A']], 'Y') == 0", "assert count_element_in_list([['X', 'O'], ['N', 'K'], ['Y', 'G', 'C'], ['D', 'Z', 'N']], 'R') == 0", "assert count_element_in_list([['C', 'I'], ['J', 'C'], ['J', 'I', 'K'], ['D', 'F', 'L']], 'B') == 0", "assert count_element_in_list([['T', 'P'], ['W', 'R'], ['P', 'E', 'K'], ['G', 'G', 'S']], 'P') == 2", "assert count_element_in_list([['R', 'B'], ['E', 'J'], ['A', 'U', 'H'], ['M', 'B', 'D']], 'M') == 1", "assert count_element_in_list([['S', 'M'], ['N', 'S'], ['Z', 'D', 'E'], ['E', 'C', 'C']], 'V') == 0", "assert count_element_in_list([['I', 'Q'], ['D', 'B'], ['C', 'C', 'F'], ['D', 'W', 'G']], 'F') == 1", "assert count_element_in_list([['P', 'S'], ['J', 'T'], ['Q', 'B', 'I'], ['L', 'R', 'K']], 'T') == 1", "assert count_element_in_list([['C', 'C'], ['V', 'E'], ['C', 'V', 'A'], ['Y', 'A', 'A']], 'K') == 0", "assert count_element_in_list([['V', 'N'], ['Z', 'R'], ['S', 'Y', 'D'], ['Q', 'H', 'Y']], 'P') == 0", "assert count_element_in_list([['P', 'B'], ['G', 'I'], ['E', 'L', 'U'], ['X', 'H', 'X']], 'K') == 0", "assert count_element_in_list([['K', 'L'], ['H', 'Y'], ['U', 'T', 'R'], ['H', 'S', 'H']], 'Z') == 0", "assert count_element_in_list([['P', 'G'], ['H', 'X'], ['N', 'Z', 'J'], ['P', 'V', 'R']], 'A') == 0", "assert count_element_in_list([['E', 'Q'], ['R', 'V'], ['T', 'F', 'F'], ['M', 'P', 'L']], 'D') == 0", "assert count_element_in_list([['X', 'R'], ['P', 'Q'], ['N', 'Q', 'C'], ['L', 'J', 'O']], 'T') == 0", "assert count_element_in_list([['B', 'I'], ['O', 'N'], ['R', 'U', 'I'], ['U', 'Z', 'Z']], 'Y') == 0", "assert count_element_in_list([['C', 'Z'], ['Z', 'V'], ['Y', 'L', 'E'], ['O', 'E', 'S']], 'C') == 1", "assert count_element_in_list([['S', 'T'], ['P', 'H'], ['P', 'U', 'B'], ['L', 'E', 'Z']], 'T') == 1", "assert count_element_in_list([['Z', 'Q'], ['R', 'I'], ['T', 'L', 'X'], ['B', 'W', 'N']], 'A') == 0", "assert count_element_in_list([['P', 'R'], ['H', 'B'], ['K', 'X', 'J'], ['W', 'Z', 'U']], 'U') == 1", "assert count_element_in_list([['P', 'J'], ['G', 'Q'], ['T', 'P', 'Q'], ['N', 'E', 'Z']], 'T') == 1", "assert count_element_in_list([['Y', 'O'], ['J', 'I'], ['D', 'W', 'Z'], ['Z', 'Y', 'H']], 'L') == 0", "assert count_element_in_list([['O', 'W'], ['Q', 'V'], ['C', 'Z', 'V'], ['V', 'V', 'V']], 'J') == 0", "assert count_element_in_list([['K', 'D'], ['W', 'O'], ['V', 'R', 'M'], ['P', 'Q', 'H']], 'K') == 1", "assert count_element_in_list([['C', 'E'], ['D', 'K'], ['W', 'I', 'Y'], ['W', 'L', 'D']], 'C') == 1", "assert count_element_in_list([['T', 'P'], ['F', 'O'], ['A', 'D', 'Z'], ['H', 'W', 'X']], 'O') == 1", "assert count_element_in_list([['Q', 'A'], ['J', 'O'], ['P', 'Y', 'P'], ['H', 'Z', 'N']], 'U') == 0", "assert count_element_in_list([['F', 'Q'], ['S', 'L'], ['P', 'L', 'Z'], ['F', 'Y', 'P']], 'Z') == 1", "assert count_element_in_list([['A', 'D'], ['D', 'C'], ['H', 'D', 'H'], ['B', 'T', 'E']], 'Y') == 0", "assert count_element_in_list([['M', 'W'], ['M', 'S'], ['L', 'O', 'C'], ['X', 'X', 'M']], 'E') == 0", "assert count_element_in_list([['Q', 'A'], ['H', 'C'], ['X', 'V', 'J'], ['M', 'J', 'B']], 'P') == 0", "assert count_element_in_list([['M', 'A'], ['F', 'T'], ['C', 'E', 'G'], ['P', 'O', 'C']], 'C') == 2", "assert count_element_in_list([['F', 'F'], ['O', 'I'], ['S', 'F', 'M'], ['Y', 'R', 'F']], 'D') == 0", "assert count_element_in_list([['O', 'U'], ['K', 'R'], ['Z', 'O', 'A'], ['A', 'M', 'O']], 'H') == 0", "assert count_element_in_list([['Q', 'R'], ['U', 'N'], ['V', 'N', 'E'], ['L', 'Y', 'A']], 'S') == 0", "assert count_element_in_list([['Z', 'K'], ['M', 'T'], ['T', 'G', 'X'], ['Y', 'L', 'N']], 'Z') == 1", "assert count_element_in_list([['A', 'P'], ['J', 'P'], ['P', 'D', 'O'], ['K', 'C', 'R']], 'Q') == 0", "assert count_element_in_list([['Y', 'Y'], ['Z', 'P'], ['T', 'C', 'C'], ['Z', 'G', 'A']], 'T') == 1"], "entry_point": "count_element_in_list", "repair_prompt": ["Write a function count_element_in_list to count the number of sublists containing a particular element. Ensure that your solution efficiently handles large lists and varying input sizes.\ncount_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n", "Write a function count_element_in_list to count the number of sublists containing a particular element. Ensure that your solution efficiently handles large lists. It should also be capable of efficiently managing varying input sizes.\ncount_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n", "Write a function count_element_in_list to count the number of sublists containing a particular element, ensuring that your solution efficiently handles large lists and varying input sizes.\ncount_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n"], "completions": ["from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    Parameters:\n    sublists (list of list of int): A list containing sublists of integers.\n    element (int): The element to count in the sublists.\n\n    Returns:\n    int: The number of sublists containing the specified element.\n    \"\"\"\n    # Initialize count to zero\n    count = 0\n    \n    # Iterate over each sublist in the main list\n    for sublist in sublists:\n        # Check if the element is present in the current sublist\n        if element in sublist:\n            # Increment count if element is found\n            count += 1\n    \n    # Return the total count of sublists containing the element\n    return count\n", "from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    \"\"\"\n    Counts the number of sublists containing a specific element.\n\n    Parameters:\n    sublists (list[list[int]]): A list of sublists to search through.\n    element (int): The element to count occurrences of in sublists.\n\n    Returns:\n    int: The number of sublists containing the element.\n    \"\"\"\n    # Use list comprehension to iterate over each sublist and check for the element\n    count = sum(1 for sublist in sublists if element in sublist)\n    return count\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(count_element_in_list([], 1))  # Expected output: 0\n    print(count_element_in_list([[1, 2], [3, 4], [5, 6]], 7))  # Expected output: 0\n    print(count_element_in_list([[1, 1], [1], [1, 2, 3]], 1))  # Expected output: 3\n", "from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    Parameters:\n    sublists (list[list[int]]): A list of sublists to search through.\n    element (int): The element to count in the sublists.\n\n    Returns:\n    int: The number of sublists containing the element.\n    \"\"\"\n    # Initialize the counter to zero\n    count = 0\n\n    # Iterate over each sublist in the main list\n    for sublist in sublists:\n        # Check if the specified element is present in the current sublist\n        if element in sublist:\n            # Increment the counter if the element is found\n            count += 1\n\n    # Return the total count of sublists containing the element\n    return count\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(count_element_in_list([], 1))  # Expected output: 0\n    print(count_element_in_list([[2, 3], [4, 5]], 1))  # Expected output: 0\n    print(count_element_in_list([[1], [1, 2], [3, 1]], 1))  # Expected output: 3\n", "from typing import List\n## main.py\n\ndef count_element_in_list(nested_list: list[list[int]], element: int) -> int:\n    \"\"\"\n    Count the number of sublists containing a specific element.\n\n    Parameters:\n    nested_list (list of list of int): The list containing sublists to be checked.\n    element (int): The element to search for in each sublist.\n\n    Returns:\n    int: The count of sublists containing the specified element.\n    \"\"\"\n    # Initialize a counter to keep track of sublists containing the element\n    count = 0\n\n    # Iterate over each sublist in the nested list\n    for sublist in nested_list:\n        # Check if the element is present in the current sublist\n        if element in sublist:\n            # Increment the counter if the element is found\n            count += 1\n\n    # Return the final count of sublists containing the element\n    return count\n", "from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    \"\"\"\n    Count the number of sublists containing a specific element.\n\n    Parameters:\n    sublists (list[list[int]]): A list of sublists containing integers.\n    element (int): The element to count occurrences of in sublists.\n\n    Returns:\n    int: The number of sublists containing the specified element.\n    \"\"\"\n    # Initialize a counter to keep track of sublists containing the element\n    count = 0\n\n    # Iterate over each sublist in the main list\n    for sublist in sublists:\n        # Check if the element is present in the current sublist\n        if element in sublist:\n            # Increment the counter if the element is found\n            count += 1\n\n    # Return the total count of sublists containing the element\n    return count\n\n# Example usage:\n# print(count_element_in_list([[1, 2], [3, 4], [5, 6]], 1))  # Output: 1\n# print(count_element_in_list([[1, 2], [1, 2], [1, 2]], 1))  # Output: 3\n# print(count_element_in_list([], 1))  # Output: 0\n# print(count_element_in_list([[1, 2], [3, 4], [5, 6]], 7))  # Output: 0\n", "from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    Parameters:\n    sublists (list of list of int): A list containing sublists of integers.\n    element (int): The element to count in the sublists.\n\n    Returns:\n    int: The number of sublists containing the specified element.\n    \"\"\"\n    # Initialize a counter to keep track of sublists containing the element\n    count = 0\n\n    # Iterate over each sublist in the list of sublists\n    for sublist in sublists:\n        # Check if the element is present in the current sublist\n        if element in sublist:\n            # Increment the counter if the element is found\n            count += 1\n\n    # Return the final count of sublists containing the element\n    return count\n", "from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    Parameters:\n    sublists (list of list of int): A list containing sublists of integers.\n    element (int): The element to search for in the sublists.\n\n    Returns:\n    int: The count of sublists containing the specified element.\n    \"\"\"\n    # Initialize the counter to zero\n    count = 0\n    \n    # Iterate over each sublist in the main list\n    for sublist in sublists:\n        # Check if the specified element is present in the sublist\n        if element in sublist:\n            # Increment the counter if the element is found\n            count += 1\n    \n    # Return the final count of sublists containing the element\n    return count\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(count_element_in_list([], 1))  # Expected output: 0\n    print(count_element_in_list([[1, 2], [3, 4], [5, 6]], 7))  # Expected output: 0\n    print(count_element_in_list([[1, 2], [1, 2], [1, 2]], 1))  # Expected output: 3\n", "from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    \"\"\"\n    Counts the number of sublists containing the specified element.\n\n    Parameters:\n    sublists (list[list[int]]): A list of sublists to search through.\n    element (int): The element to count occurrences of in the sublists.\n\n    Returns:\n    int: The number of sublists containing the element.\n    \"\"\"\n    # Initialize a counter to keep track of the number of sublists containing the element\n    count = 0\n\n    # Iterate over each sublist in the main list\n    for sublist in sublists:\n        # Check if the element is present in the current sublist\n        if element in sublist:\n            # Increment the counter if the element is found\n            count += 1\n\n    # Return the final count of sublists containing the element\n    return count\n", "from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    Parameters:\n    sublists (list of list of int): A list containing sublists of integers.\n    element (int): The element to count in the sublists.\n\n    Returns:\n    int: The number of sublists containing the specified element.\n    \"\"\"\n    # Initialize the counter to zero\n    count = 0\n\n    # Iterate over each sublist in the main list\n    for sublist in sublists:\n        # Check if the element is present in the current sublist\n        if element in sublist:\n            # Increment the counter if the element is found\n            count += 1\n\n    # Return the total count of sublists containing the element\n    return count\n\n# Example usage:\n# print(count_element_in_list([[1, 2], [3, 4], [1, 5]], 1))  # Output: 2\n# print(count_element_in_list([[1, 2], [1, 2], [1, 2]], 1))  # Output: 3\n# print(count_element_in_list([], 1))  # Output: 0\n# print(count_element_in_list([[1, 2], [3, 4], [5, 6]], 7))  # Output: 0\n", "from typing import List\n## main.py\n\ndef count_element_in_list(lst: list[list[int]], element: int) -> int:\n    \"\"\"\n    Counts the number of sublists containing a specific element.\n\n    Parameters:\n    lst (list of list of int): The main list containing sublists.\n    element (int): The element to search for in each sublist.\n\n    Returns:\n    int: The count of sublists containing the element.\n    \"\"\"\n    # Use a generator expression to iterate over each sublist in the main list\n    # and check if the specified element is present in the sublist.\n    # The sum function will count the number of True values returned by the generator.\n    return sum(element in sublist for sublist in lst)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(count_element_in_list([], 1))  # Expected output: 0\n    print(count_element_in_list([[2, 3], [4, 5]], 1))  # Expected output: 0\n    print(count_element_in_list([[1], [1, 2], [3, 1]], 1))  # Expected output: 3\n"], "plans": ["requirement analysis:\nThe function should efficiently count occurrences of a specified element within sublists, ensuring performance does not degrade with large datasets. It should be optimized for both speed and accuracy, handling varying input sizes seamlessly.\nrequirement pool:\n- Efficiently count occurrences of an element in sublists\n- Handle large lists without performance degradation\n- Ensure accurate results for varying input sizes\n- Optimize for scalability\n- Provide clear documentation for usage\nWe will implement a function using Python's built-in capabilities to efficiently count the number of sublists containing a particular element. The function will leverage list comprehension for concise and efficient iteration over sublists. This approach is chosen for its balance between simplicity and performance, ensuring it can handle large datasets without significant performance degradation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, 'sublists' refers to the nested lists within the main list. Each sublist is a list itself and can contain multiple elements.\n\n    'particular element'\n    Explanation: This refers to the specific element we are searching for within each sublist. The function needs to count how many sublists contain this element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `count_element_in_list` that takes two parameters: a list of sublists and the particular element to search for.\n    2. Use list comprehension to iterate over each sublist in the main list.\n    3. For each sublist, check if the particular element is present.\n    4. Count the number of sublists where the element is found.\n    5. Return the count.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: The main list is empty, so there are no sublists to check, resulting in a count of 0.\n\n    count_element_in_list([[2, 3], [4, 5]], 1) = 0\n    Explanation: None of the sublists contain the element '1', so the count is 0.\n\n    count_element_in_list([[1], [1, 2], [3, 1]], 1) = 3\n    Explanation: All three sublists contain the element '1', so the count is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using list comprehension will naturally handle these cases by iterating over all sublists and checking for the presence of the element.\n", "requirement analysis:\nThe function should efficiently count sublists containing a specific element, ensuring performance does not degrade with large input sizes. It should be easy to integrate and understand, with clear documentation.\nrequirement pool:\n- Efficiently handle large lists\n- Count sublists containing a specific element\n- Provide clear documentation\n- Ensure easy integration\n- Enhance code readability\nWe will implement a function using Python's built-in capabilities to efficiently count sublists containing a specific element. The function will leverage list comprehension for concise and efficient iteration over sublists. We will ensure the function is well-documented and easy to integrate into existing projects. Given the competitive analysis, we aim to achieve high performance and usability by focusing on simplicity and clarity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, 'sublists' refers to the individual lists contained within a larger list. Each sublist is a separate list that can contain multiple elements.\n\n    'element'\n    Explanation: The 'element' is the specific item we are looking for within each sublist. The function needs to count how many sublists contain this particular element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `count_element_in_list` that takes two parameters: a list of sublists and the element to search for.\n    2. Use list comprehension to iterate over each sublist in the main list.\n    3. For each sublist, check if the element is present using the `in` keyword.\n    4. Count the number of sublists where the element is found.\n    5. Return the count.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: The main list is empty, so there are no sublists to check, resulting in a count of 0.\n\n    count_element_in_list([[1, 2], [3, 4], [5, 6]], 7) = 0\n    Explanation: The element 7 does not appear in any of the sublists, so the count is 0.\n\n    count_element_in_list([[1, 1], [1], [1, 2, 3]], 1) = 3\n    Explanation: The element 1 appears in all three sublists, so the count is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and checking for the presence of the element will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently count sublists containing a specific element, ensuring performance is maintained with large and varied input sizes. The solution should be easy to integrate and understand, with clear documentation.\nrequirement pool:\n- Efficiently count sublists containing a specific element\n- Handle large lists without performance degradation\n- Provide clear and concise documentation\n- Ensure code readability and maintainability\n- Offer examples for integration into projects\nWe will use Python's built-in capabilities to efficiently iterate over the list and count sublists containing the specified element. The function will be simple and easy to integrate, with clear documentation and examples. We will avoid complex libraries to maintain simplicity and performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, a sublist refers to a list that is an element within the main list. The task is to count how many of these sublists contain a specific element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `count_element_in_list` that takes two parameters: a list of sublists and the element to search for.\n    2. Initialize a counter variable to zero.\n    3. Iterate over each sublist in the main list.\n    4. Check if the specified element is present in the current sublist.\n    5. If the element is found, increment the counter.\n    6. After iterating through all sublists, return the counter value.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: The main list is empty, so there are no sublists to check, resulting in a count of 0.\n    \n    count_element_in_list([[2, 3], [4, 5]], 1) = 0\n    Explanation: None of the sublists contain the element '1', so the count is 0.\n    \n    count_element_in_list([[1], [1, 2], [3, 1]], 1) = 3\n    Explanation: All sublists contain the element '1', so the count is equal to the number of sublists, which is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and checking for the presence of the element will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently count sublists containing a specific element, handling large and varying input sizes. The focus is on performance and simplicity.\nrequirement pool:\n- Efficiently count sublists containing a specific element\n- Handle large lists without performance issues\n- Maintain code simplicity and readability\n- Provide clear documentation for the function\n- Ensure compatibility with different Python versions\nWe will implement a function named count_element_in_list that iterates through each sublist in the main list and checks for the presence of the specified element. To ensure efficiency, especially with large datasets, we will use Python's built-in functions and list comprehensions, which are optimized for performance. This approach will maintain simplicity and readability while efficiently handling large and varying input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, 'sublists' refers to the individual lists contained within the main list. Each sublist is a separate list that can contain multiple elements.\n\n    'element'\n    Explanation: The 'element' is the specific item we are searching for within each sublist. The function needs to count how many sublists contain this particular element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function count_element_in_list with parameters: main_list and element.\n    2. Initialize a counter variable to zero.\n    3. Iterate through each sublist in the main list.\n    4. Check if the specified element is present in the current sublist.\n    5. If the element is found, increment the counter.\n    6. After iterating through all sublists, return the counter value.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: The main list is empty, so there are no sublists to check for the element. The expected output is 0.\n\n    count_element_in_list([[1, 2], [3, 4], [5, 6]], 7) = 0\n    Explanation: The element 7 is not present in any of the sublists, so the expected output is 0.\n\n    count_element_in_list([[1, 1], [1, 1], [1, 1]], 1) = 3\n    Explanation: The element 1 is present in all sublists, so the expected output is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and checking for the presence of the element will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently count the number of sublists containing a specific element, even with large and varying input sizes. The focus is on performance and accuracy.\nrequirement pool:\n- Efficiently count sublists containing a specific element\n- Handle large lists without performance degradation\n- Ensure code readability and maintainability\n- Provide clear documentation for the function\n- Include test cases for various input scenarios\nWe will use Python's built-in functionalities to efficiently iterate over the list and count sublists containing the specified element. Given the requirement for handling large lists, we will ensure the function is optimized for performance by using list comprehensions and generator expressions where applicable. The function will be simple and easy to read, adhering to Pythonic principles.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, a sublist refers to each individual list within the main list. The task is to count how many of these sublists contain a specific element.\n\n    'particular element'\n    Explanation: This refers to the specific element we are searching for within each sublist. The function should count how many sublists contain this element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `count_element_in_list` that takes two parameters: a list of lists (`sublists`) and the `element` to search for.\n    2. Initialize a counter variable to zero.\n    3. Iterate over each sublist in the main list.\n    4. For each sublist, check if the `element` is present.\n    5. If the `element` is found, increment the counter.\n    6. After iterating through all sublists, return the counter value.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: An empty list has no sublists, so the count of sublists containing the element is zero.\n\n    count_element_in_list([[1, 2], [3, 4], [5, 6]], 7) = 0\n    Explanation: The element 7 is not present in any of the sublists, so the count is zero.\n\n    count_element_in_list([[1, 2], [1, 2], [1, 2]], 1) = 3\n    Explanation: The element 1 is present in all three sublists, so the count is three.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and checking for the presence of the element will naturally handle these cases.\n", "requirement analysis:\nThe function must efficiently count occurrences of a specified element within sublists, ensuring performance does not degrade with larger lists. It should be optimized for both speed and accuracy.\nrequirement pool:\n- Efficiently count occurrences of an element in sublists\n- Handle large lists without performance degradation\n- Ensure accuracy in counting across varying input sizes\n- Optimize for quick execution\n- Provide clear documentation for function usage\nWe will implement a function named count_element_in_list that iterates over the list of sublists and counts how many of these sublists contain the specified element. To ensure efficiency, especially with large datasets, we will use Python's built-in functions and avoid unnecessary computations. The function will be designed to handle varying input sizes effectively.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, a sublist refers to a list that is an element of another list. The task is to count how many of these sublists contain a specific element.\n\n    'particular element'\n    Explanation: This refers to the specific element we are searching for within each sublist to determine if it should be counted.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `count_element_in_list` that takes two parameters: a list of sublists and the element to search for.\n    2. Initialize a counter variable to zero.\n    3. Iterate over each sublist in the main list.\n    4. For each sublist, check if the particular element is present.\n    5. If the element is found, increment the counter.\n    6. After iterating through all sublists, return the counter value.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: An empty list has no sublists, so the count of sublists containing the element is 0.\n\n    count_element_in_list([[1, 2], [3, 4], [5, 6]], 7) = 0\n    Explanation: The element 7 is not present in any of the sublists, so the count is 0.\n\n    count_element_in_list([[1, 2], [1, 2], [1, 2]], 1) = 3\n    Explanation: The element 1 is present in all three sublists, so the count is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and checking for the presence of the element will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently count sublists containing a specific element, handling large lists and varying input sizes. It should be easy to integrate and well-documented.\nrequirement pool:\n- Efficiently count sublists containing a specific element\n- Handle large lists and varying input sizes\n- Provide clear and concise documentation\n- Ensure high code readability\n- Maintain easy integration into existing projects\nWe will implement a function named count_element_in_list that iterates over the list of sublists and counts how many of these sublists contain the specified element. We will use Python's built-in capabilities to ensure efficiency and simplicity, avoiding any unnecessary complexity. The function will be documented with clear examples and edge cases to ensure easy integration and understanding.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, a sublist refers to a list that is an element of another list. The task is to count how many of these sublists contain a specific element.\n\n    'particular element'\n    Explanation: This refers to the specific element we are checking for within each sublist.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `count_element_in_list` that takes two parameters: a list of sublists and the element to search for.\n    2. Initialize a counter variable to zero.\n    3. Iterate over each sublist in the main list.\n    4. For each sublist, check if the specified element is present.\n    5. If the element is found, increment the counter.\n    6. After iterating through all sublists, return the counter value.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: An empty list has no sublists, so the count of sublists containing the element is 0.\n\n    count_element_in_list([[1, 2], [3, 4], [5, 6]], 7) = 0\n    Explanation: The element 7 is not present in any of the sublists, so the count is 0.\n\n    count_element_in_list([[1, 2], [1, 2], [1, 2]], 1) = 3\n    Explanation: The element 1 is present in all three sublists, so the count is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and checking for the presence of the element will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently count the number of sublists containing a specific element. It must handle large lists and varying input sizes without performance degradation. The solution should be simple and maintainable.\nrequirement pool:\n- Efficiently handle large lists\n- Accurately count sublists containing the element\n- Maintain simplicity and readability\n- Ensure performance does not degrade with varying input sizes\n- Provide clear documentation and examples\nWe will use Python's built-in capabilities to efficiently iterate over the list of sublists and count occurrences of the specified element. The solution will leverage list comprehensions for simplicity and performance. No external libraries are required as Python's native list operations are sufficient for this task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, a sublist refers to a list that is contained within another list. The task is to count how many of these sublists contain a specific element.\n\n    'element'\n    Explanation: The element is the specific item we are looking for within each sublist. The function should count how many sublists contain this element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `count_element_in_list` that takes two parameters: a list of sublists and the element to search for.\n    2. Initialize a counter to zero to keep track of the number of sublists containing the element.\n    3. Iterate over each sublist in the main list.\n    4. For each sublist, check if the element is present.\n    5. If the element is found in a sublist, increment the counter by one.\n    6. After iterating through all sublists, return the counter value.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: An empty list contains no sublists, so the expected output is 0.\n\n    count_element_in_list([[1, 2], [3, 4], [5, 6]], 7) = 0\n    Explanation: The element 7 is not present in any of the sublists, so the expected output is 0.\n\n    count_element_in_list([[1, 2], [1, 2], [1, 2]], 1) = 3\n    Explanation: The element 1 is present in all three sublists, so the expected output is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and checking for the presence of the element will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently count occurrences of a specified element within sublists, ensuring scalability and accuracy across varying input sizes. It should be optimized for performance to handle large datasets without compromising speed or accuracy.\nrequirement pool:\n- Efficiently count occurrences of an element in sublists\n- Ensure scalability for large lists\n- Optimize performance for varying input sizes\n- Provide accurate results consistently\n- Maintain simplicity in function usage\nWe will implement a function named count_element_in_list that iterates through each sublist and checks for the presence of the specified element. To ensure efficiency, especially with large datasets, we will use Python's built-in functions and list comprehensions, which are optimized for performance. This approach will maintain simplicity while providing accurate results across varying input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, a sublist refers to a list that is contained within another list. The task is to count how many of these sublists contain a specific element.\n\n    'particular element'\n    Explanation: This refers to the specific element we are searching for within each sublist. The function should count how many sublists contain this element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `count_element_in_list` that takes two parameters: a list of sublists and the element to search for.\n    2. Initialize a counter variable to zero.\n    3. Iterate through each sublist in the main list.\n    4. For each sublist, check if the particular element is present.\n    5. If the element is found, increment the counter.\n    6. After iterating through all sublists, return the counter value.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: An empty list contains no sublists, so the count of sublists containing the element is 0.\n\n    count_element_in_list([[1, 2], [3, 4], [5, 6]], 7) = 0\n    Explanation: The element 7 is not present in any of the sublists, so the count is 0.\n\n    count_element_in_list([[1, 2], [1, 2], [1, 2]], 1) = 3\n    Explanation: The element 1 is present in all three sublists, so the count is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and checking for the presence of the element will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently count the number of sublists containing a specific element, ensuring performance does not degrade with large lists. It should be able to handle varying input sizes and provide accurate results.\nrequirement pool:\n- Efficiently handle large lists\n- Provide accurate results for varying input sizes\n- Optimize performance for quick execution\n- Ensure easy integration into existing systems\n- Maintain readability and simplicity of code\nWe will implement a function named count_element_in_list that iterates over each sublist in the main list and checks for the presence of the specified element. To ensure efficiency, we will use Python's built-in sum function combined with a generator expression to count the sublists containing the element. This approach minimizes memory usage and optimizes performance for large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, sublists refer to the lists contained within the main list. Each sublist is a separate list that can contain multiple elements.\n\n    'element'\n    Explanation: The element is the specific item we are looking for within each sublist. The function needs to count how many sublists contain this particular element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function count_element_in_list that takes two arguments: a list of sublists and the element to search for.\n    2. Use a generator expression to iterate over each sublist in the main list.\n    3. For each sublist, check if the specified element is present.\n    4. Use the sum function to count the number of sublists containing the element.\n    5. Return the count.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: The main list is empty, so there are no sublists to check, resulting in a count of 0.\n\n    count_element_in_list([[2, 3], [4, 5]], 1) = 0\n    Explanation: None of the sublists contain the element 1, so the expected output is 0.\n\n    count_element_in_list([[1], [1, 2], [3, 1]], 1) = 3\n    Explanation: All three sublists contain the element 1, so the expected output is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a generator expression and sum function will naturally handle these cases correctly.\n"], "test": ["def check(count_element_in_list):\n\tassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3", "def check(count_element_in_list):\n\tassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3", "def check(count_element_in_list):\n\tassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1", "def check(count_element_in_list):\n\tassert count_element_in_list([[6, 8], [4, 2], [5, 10], [3, 17, 5]], 3) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[2, 1], [1, 4], [4, 11], [2, 14, 12]], 6) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[3, 6], [7, 4], [5, 15], [4, 18, 4]], 3) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[2, 6], [9, 2], [6, 11], [1, 19, 6]], 1) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[1, 4], [4, 3], [1, 16], [6, 15, 9]], 6) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[4, 2], [7, 7], [1, 7], [6, 18, 5]], 1) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[2, 3], [9, 10], [2, 6], [3, 12, 12]], 4) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[4, 4], [4, 11], [4, 14], [6, 19, 4]], 3) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[3, 6], [4, 2], [4, 13], [4, 13, 12]], 2) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[5, 1], [2, 8], [2, 10], [5, 12, 6]], 3) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[1, 7], [2, 10], [6, 13], [2, 16, 8]], 4) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[5, 4], [1, 12], [3, 16], [3, 18, 6]], 2) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[5, 4], [5, 8], [1, 14], [3, 20, 10]], 3) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[3, 4], [5, 7], [1, 14], [5, 20, 11]], 5) == 2", "def check(count_element_in_list):\n\tassert count_element_in_list([[3, 6], [6, 2], [6, 15], [1, 11, 3]], 4) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[2, 7], [3, 7], [1, 16], [3, 10, 3]], 6) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[1, 5], [4, 11], [4, 12], [5, 16, 6]], 1) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[6, 5], [4, 7], [3, 12], [2, 10, 3]], 6) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[2, 3], [5, 11], [6, 13], [6, 13, 12]], 4) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[6, 6], [3, 3], [2, 13], [5, 16, 8]], 5) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[1, 6], [7, 12], [5, 16], [5, 14, 4]], 1) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[6, 8], [9, 6], [1, 9], [2, 10, 2]], 4) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[5, 2], [7, 2], [5, 15], [4, 10, 7]], 4) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[4, 1], [6, 5], [4, 15], [1, 20, 2]], 5) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[1, 1], [7, 7], [4, 7], [2, 15, 6]], 5) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[3, 8], [10, 6], [3, 15], [2, 19, 6]], 6) == 2", "def check(count_element_in_list):\n\tassert count_element_in_list([[5, 5], [3, 11], [3, 15], [3, 10, 8]], 5) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[5, 3], [9, 6], [6, 9], [1, 16, 2]], 3) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[4, 8], [6, 12], [4, 12], [6, 16, 2]], 2) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[3, 1], [2, 10], [1, 11], [4, 15, 9]], 6) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[4, 1], [4, 7], [1, 6], [4, 20, 4]], 6) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[2, 2], [5, 2], [4, 13], [6, 15, 6]], 5) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[1, 5], [6, 3], [4, 6], [4, 17, 12]], 6) == 2", "def check(count_element_in_list):\n\tassert count_element_in_list([['S', 'M'], ['Z', 'Y'], ['M', 'W', 'U'], ['V', 'Y', 'W']], 'R') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['P', 'I'], ['I', 'F'], ['E', 'O', 'X'], ['D', 'B', 'T']], 'E') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['Y', 'F'], ['A', 'L'], ['Y', 'T', 'V'], ['U', 'D', 'C']], 'Z') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['J', 'Z'], ['L', 'H'], ['D', 'Q', 'I'], ['X', 'P', 'O']], 'X') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['D', 'O'], ['F', 'S'], ['V', 'F', 'U'], ['S', 'H', 'U']], 'J') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['S', 'M'], ['X', 'X'], ['E', 'P', 'Q'], ['P', 'K', 'W']], 'G') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['M', 'A'], ['F', 'V'], ['Y', 'F', 'E'], ['B', 'A', 'H']], 'G') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['R', 'S'], ['C', 'Z'], ['X', 'J', 'V'], ['V', 'H', 'N']], 'C') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['S', 'J'], ['Y', 'Y'], ['D', 'D', 'M'], ['M', 'P', 'R']], 'V') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['C', 'T'], ['U', 'J'], ['E', 'Z', 'S'], ['D', 'E', 'K']], 'X') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['J', 'G'], ['L', 'G'], ['F', 'U', 'C'], ['H', 'I', 'Z']], 'E') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['A', 'B'], ['K', 'H'], ['Z', 'A', 'P'], ['A', 'U', 'L']], 'L') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['R', 'X'], ['K', 'D'], ['I', 'W', 'R'], ['Z', 'X', 'W']], 'K') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['N', 'N'], ['J', 'Q'], ['N', 'K', 'T'], ['H', 'G', 'L']], 'R') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['Z', 'L'], ['H', 'C'], ['J', 'T', 'S'], ['N', 'Z', 'N']], 'E') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['F', 'Z'], ['B', 'E'], ['E', 'A', 'Y'], ['H', 'L', 'K']], 'M') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['G', 'L'], ['C', 'O'], ['Y', 'M', 'K'], ['V', 'C', 'Y']], 'H') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['U', 'X'], ['D', 'W'], ['P', 'G', 'M'], ['F', 'P', 'W']], 'P') == 2", "def check(count_element_in_list):\n\tassert count_element_in_list([['Y', 'Y'], ['A', 'S'], ['K', 'T', 'S'], ['Y', 'B', 'N']], 'H') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['Q', 'Q'], ['G', 'U'], ['W', 'G', 'B'], ['C', 'E', 'K']], 'W') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['G', 'A'], ['R', 'I'], ['C', 'I', 'F'], ['Q', 'G', 'Q']], 'S') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['V', 'Z'], ['F', 'G'], ['O', 'T', 'Z'], ['P', 'E', 'D']], 'S') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['V', 'T'], ['C', 'C'], ['N', 'Z', 'T'], ['U', 'Z', 'X']], 'R') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['X', 'L'], ['D', 'D'], ['L', 'G', 'X'], ['T', 'S', 'P']], 'N') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['L', 'G'], ['N', 'U'], ['C', 'E', 'R'], ['N', 'B', 'O']], 'U') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['N', 'S'], ['P', 'G'], ['X', 'Z', 'O'], ['J', 'T', 'U']], 'L') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['X', 'K'], ['M', 'M'], ['H', 'I', 'F'], ['A', 'Q', 'L']], 'J') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['T', 'Q'], ['I', 'E'], ['Z', 'X', 'W'], ['J', 'X', 'S']], 'R') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['M', 'O'], ['W', 'N'], ['U', 'V', 'D'], ['E', 'H', 'A']], 'Y') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['X', 'O'], ['N', 'K'], ['Y', 'G', 'C'], ['D', 'Z', 'N']], 'R') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['C', 'I'], ['J', 'C'], ['J', 'I', 'K'], ['D', 'F', 'L']], 'B') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['T', 'P'], ['W', 'R'], ['P', 'E', 'K'], ['G', 'G', 'S']], 'P') == 2", "def check(count_element_in_list):\n\tassert count_element_in_list([['R', 'B'], ['E', 'J'], ['A', 'U', 'H'], ['M', 'B', 'D']], 'M') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['S', 'M'], ['N', 'S'], ['Z', 'D', 'E'], ['E', 'C', 'C']], 'V') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['I', 'Q'], ['D', 'B'], ['C', 'C', 'F'], ['D', 'W', 'G']], 'F') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['P', 'S'], ['J', 'T'], ['Q', 'B', 'I'], ['L', 'R', 'K']], 'T') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['C', 'C'], ['V', 'E'], ['C', 'V', 'A'], ['Y', 'A', 'A']], 'K') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['V', 'N'], ['Z', 'R'], ['S', 'Y', 'D'], ['Q', 'H', 'Y']], 'P') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['P', 'B'], ['G', 'I'], ['E', 'L', 'U'], ['X', 'H', 'X']], 'K') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['K', 'L'], ['H', 'Y'], ['U', 'T', 'R'], ['H', 'S', 'H']], 'Z') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['P', 'G'], ['H', 'X'], ['N', 'Z', 'J'], ['P', 'V', 'R']], 'A') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['E', 'Q'], ['R', 'V'], ['T', 'F', 'F'], ['M', 'P', 'L']], 'D') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['X', 'R'], ['P', 'Q'], ['N', 'Q', 'C'], ['L', 'J', 'O']], 'T') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['B', 'I'], ['O', 'N'], ['R', 'U', 'I'], ['U', 'Z', 'Z']], 'Y') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['C', 'Z'], ['Z', 'V'], ['Y', 'L', 'E'], ['O', 'E', 'S']], 'C') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['S', 'T'], ['P', 'H'], ['P', 'U', 'B'], ['L', 'E', 'Z']], 'T') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['Z', 'Q'], ['R', 'I'], ['T', 'L', 'X'], ['B', 'W', 'N']], 'A') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['P', 'R'], ['H', 'B'], ['K', 'X', 'J'], ['W', 'Z', 'U']], 'U') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['P', 'J'], ['G', 'Q'], ['T', 'P', 'Q'], ['N', 'E', 'Z']], 'T') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['Y', 'O'], ['J', 'I'], ['D', 'W', 'Z'], ['Z', 'Y', 'H']], 'L') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['O', 'W'], ['Q', 'V'], ['C', 'Z', 'V'], ['V', 'V', 'V']], 'J') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['K', 'D'], ['W', 'O'], ['V', 'R', 'M'], ['P', 'Q', 'H']], 'K') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['C', 'E'], ['D', 'K'], ['W', 'I', 'Y'], ['W', 'L', 'D']], 'C') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['T', 'P'], ['F', 'O'], ['A', 'D', 'Z'], ['H', 'W', 'X']], 'O') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['Q', 'A'], ['J', 'O'], ['P', 'Y', 'P'], ['H', 'Z', 'N']], 'U') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['F', 'Q'], ['S', 'L'], ['P', 'L', 'Z'], ['F', 'Y', 'P']], 'Z') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['A', 'D'], ['D', 'C'], ['H', 'D', 'H'], ['B', 'T', 'E']], 'Y') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['M', 'W'], ['M', 'S'], ['L', 'O', 'C'], ['X', 'X', 'M']], 'E') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['Q', 'A'], ['H', 'C'], ['X', 'V', 'J'], ['M', 'J', 'B']], 'P') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['M', 'A'], ['F', 'T'], ['C', 'E', 'G'], ['P', 'O', 'C']], 'C') == 2", "def check(count_element_in_list):\n\tassert count_element_in_list([['F', 'F'], ['O', 'I'], ['S', 'F', 'M'], ['Y', 'R', 'F']], 'D') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['O', 'U'], ['K', 'R'], ['Z', 'O', 'A'], ['A', 'M', 'O']], 'H') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['Q', 'R'], ['U', 'N'], ['V', 'N', 'E'], ['L', 'Y', 'A']], 'S') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['Z', 'K'], ['M', 'T'], ['T', 'G', 'X'], ['Y', 'L', 'N']], 'Z') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['A', 'P'], ['J', 'P'], ['P', 'D', 'O'], ['K', 'C', 'R']], 'Q') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['Y', 'Y'], ['Z', 'P'], ['T', 'C', 'C'], ['Z', 'G', 'A']], 'T') == 1"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef count_element_in_list(lst: list[list[int]], element: int) -> int:\n    \"\"\"\n    Counts the number of sublists containing a specific element.\n\n    Parameters:\n    lst (list of list of int): The main list containing sublists.\n    element (int): The element to search for in each sublist.\n\n    Returns:\n    int: The count of sublists containing the element.\n    \"\"\"\n    # Use a generator expression to iterate over each sublist in the main list\n    # and check if the specified element is present in the sublist.\n    # The sum function will count the number of True values returned by the generator.\n    return sum(element in sublist for sublist in lst)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(count_element_in_list([], 1))  # Expected output: 0\n    print(count_element_in_list([[2, 3], [4, 5]], 1))  # Expected output: 0\n    print(count_element_in_list([[1], [1, 2], [3, 1]], 1))  # Expected output: 3\n", "passed": true, "pass": true, "pass_num": 10, "round": 156, "mutate_method": "add_1_sentence_at_end", "parent_index": 156}
