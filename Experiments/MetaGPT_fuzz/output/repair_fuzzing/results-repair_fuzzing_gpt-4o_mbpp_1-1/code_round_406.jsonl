{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 12, "prompt": "Write a function to sort a given matrix. This sorting should be done in ascending order according to the sum of its rows.", "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "assert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "assert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "assert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "assert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "assert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "assert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "assert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "assert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "assert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "assert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "assert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "assert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "assert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "assert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "assert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "assert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "assert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "assert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "assert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "assert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "assert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "assert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "assert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "assert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "assert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "assert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "assert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "assert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "assert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "assert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "assert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "assert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "assert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "assert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "assert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "assert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "assert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "assert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "assert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "assert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "assert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "assert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "assert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "assert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "assert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "assert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "assert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "assert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "assert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "assert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "assert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "assert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "assert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "assert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "assert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "assert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "assert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "assert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "assert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "assert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "assert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "assert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "assert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "assert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "assert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "assert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "assert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "assert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "assert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "assert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "assert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "assert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "assert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "assert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "assert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "assert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "assert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "assert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "assert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "assert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "assert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "assert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "assert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "assert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "assert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "assert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "assert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "assert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "assert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "assert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "assert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "assert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "assert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "assert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "assert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "assert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "assert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "assert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "assert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "entry_point": "sort_matrix", "repair_prompt": ["Write a function sort_matrix to sort a given matrix. This sorting should be done in ascending order according to the sum of its rows.\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "Write a function sort_matrix to sort a given matrix. This sorting should be done in ascending order based on the sum of its rows. For each row in the matrix, calculate the sum of its elements. Then use these sums to determine the order of sorting.\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "Write a function sort_matrix to sort a given matrix, and this sorting should be done in ascending order according to the sum of its rows.\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"], "completions": ["from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Sorts a matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    matrix (list[list[int]]): A 2D list representing the matrix to be sorted.\n\n    Returns:\n    list[list[int]]: A new matrix sorted by the sum of its rows.\n    \"\"\"\n    # Use Python's built-in sorted function to sort the matrix\n    # The key for sorting is the sum of each row\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to demonstrate the function\n    matrix1 = [[1, 2], [3, 4], [0, 0]]\n    matrix2 = [[5], [2], [3]]\n    matrix3 = [[1, -1], [0, 0], [-1, 1]]\n\n    print(sort_matrix(matrix1))  # Expected output: [[0, 0], [1, 2], [3, 4]]\n    print(sort_matrix(matrix2))  # Expected output: [[2], [3], [5]]\n    print(sort_matrix(matrix3))  # Expected output: [[1, -1], [0, 0], [-1, 1]]\n", "from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    matrix (list[list[int]]): A 2D list representing the matrix to be sorted.\n\n    Returns:\n    list[list[int]]: A new matrix sorted by the sum of each row.\n    \"\"\"\n    # Calculate the sum of each row and pair it with the row\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the pairs based on the sum in ascending order\n    row_sums.sort(key=lambda x: x[0])\n    \n    # Extract and return the sorted rows from the sorted pairs\n    sorted_matrix = [row for _, row in row_sums]\n    \n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    example_matrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\n    sorted_example = sort_matrix(example_matrix)\n    print(sorted_example)  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    '''\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    matrix (list of list of int): A 2D list representing the matrix to be sorted.\n\n    Returns:\n    list of list of int: A new matrix sorted by the sum of its rows.\n    '''\n    # Use Python's built-in sorted function to sort the matrix\n    # The key for sorting is the sum of each row\n    sorted_matrix = sorted(matrix, key=sum)\n    \n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(sort_matrix([]))  # Expected output: []\n    print(sort_matrix([[1, 1, 1], [1, 1, 1]]))  # Expected output: [[1, 1, 1], [1, 1, 1]]\n    print(sort_matrix([[0], [0, 0], [0, 0, 0]]))  # Expected output: [[0], [0, 0], [0, 0, 0]]\n    print(sort_matrix([[3, 2, 1], [1, 2, 3], [2, 2, 2]]))  # Expected output: [[2, 2, 2], [1, 2, 3], [3, 2, 1]]\n", "from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    matrix (list of list of int): A 2D list where each sublist represents a row of the matrix.\n\n    Returns:\n    list of list of int: A new matrix sorted by the sum of its rows.\n    \"\"\"\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(sort_matrix([]))  # Expected output: []\n    print(sort_matrix([[0, 0, 0], [1, -1, 0], [2, 2, -4]]))  # Expected output: [[1, -1, 0], [0, 0, 0], [2, 2, -4]]\n    print(sort_matrix([[1, 2], [3, 4], [-1, -2]]))  # Expected output: [[-1, -2], [1, 2], [3, 4]]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    '''\n    Sorts a matrix in ascending order based on the sum of its rows.\n    \n    Parameters:\n    matrix (List[List[int]]): A list of lists where each sublist represents a row in the matrix.\n    \n    Returns:\n    List[List[int]]: A new matrix sorted by the sum of its rows.\n    \n    Example:\n    >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n    [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    '''\n    # Sort the matrix using the sum of each row as the key\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    example_matrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\n    print(sort_matrix(example_matrix))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    matrix (List[List[int]]): A 2D list representing the matrix to be sorted.\n\n    Returns:\n    List[List[int]]: A new matrix sorted based on the sum of its rows.\n\n    Example:\n    >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n    [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix:\n        return []\n\n    # Calculate the sum of each row and pair it with the row\n    row_sums = [(sum(row), row) for row in matrix]\n\n    # Sort the pairs based on the sum in ascending order\n    row_sums.sort(key=lambda x: x[0])\n\n    # Extract and return the rows from the sorted pairs\n    sorted_matrix = [row for _, row in row_sums]\n\n    return sorted_matrix\n", "from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"Sorts a matrix based on the sum of its rows in ascending order.\n\n    Args:\n        matrix (list[list[int]]): A two-dimensional list where each sublist represents a row of integers.\n\n    Returns:\n        list[list[int]]: A new matrix sorted in ascending order based on the sum of each row.\n\n    Raises:\n        ValueError: If any element in the matrix is not an integer.\n    \"\"\"\n    # Validate input\n    for row in matrix:\n        for element in row:\n            if not isinstance(element, int):\n                raise ValueError(\"All elements in the matrix must be integers.\")\n\n    # Calculate row sums\n    row_sums = [(sum(row), row) for row in matrix]\n\n    # Sort matrix based on row sums\n    sorted_matrix = [row for _, row in sorted(row_sums)]\n\n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    example_matrix = [[5], [3], [4]]\n    sorted_example = sort_matrix(example_matrix)\n    print(sorted_example)  # Output: [[3], [4], [5]]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    matrix (List[List[int]]): A list of lists where each sublist represents a row in the matrix.\n\n    Returns:\n    List[List[int]]: A new matrix sorted by the sum of its rows.\n    \"\"\"\n    # Check if the matrix is empty; if so, return an empty matrix.\n    if not matrix:\n        return []\n\n    # Calculate the sum of each row in the matrix and sort the rows based on their sums.\n    # The sorted function is stable, so it maintains the original order for rows with identical sums.\n    sorted_matrix = sorted(matrix, key=sum)\n\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    print(sort_matrix([]))  # Output: []\n    print(sort_matrix([[1, 2], [2, 1]]))  # Output: [[1, 2], [2, 1]]\n    print(sort_matrix([[0, 0], [1, -1], [2, -2]]))  # Output: [[0, 0], [1, -1], [2, -2]]\n", "from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    matrix (list of list of int): A 2D list where each sublist represents a row of the matrix.\n\n    Returns:\n    list of list of int: A new matrix sorted by the sum of its rows.\n    \"\"\"\n    # Validate input\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists (matrix).\")\n    \n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=sum)\n    \n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    example_matrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\n    sorted_example = sort_matrix(example_matrix)\n    print(\"Sorted Matrix:\", sorted_example)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    '''\n    Sorts a given matrix in ascending order based on the sum of its rows.\n    \n    Parameters:\n    matrix (List[List[int]]): A 2D list representing the matrix to be sorted.\n    \n    Returns:\n    List[List[int]]: A new matrix sorted by row sums.\n    '''\n    # Calculate the sum of each row and pair it with the row itself\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the list of tuples based on the sum (first element of the tuple)\n    row_sums.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in row_sums]\n    \n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    example_matrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\n    sorted_example = sort_matrix(example_matrix)\n    print(sorted_example)  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"], "plans": ["requirement analysis:\nThe function should efficiently sort matrices based on the sum of rows, ensuring compatibility with existing Python data structures and libraries. It should be easy to use and integrate, with clear documentation provided.\nrequirement pool:\n- The function must sort matrices based on row sums\n- The function should handle large matrices efficiently\n- Provide clear documentation and usage examples\n- Ensure compatibility with popular Python libraries\n- Optimize for performance in data-heavy applications\nWe will implement a simple Python function using built-in capabilities to sort matrices based on the sum of their rows. The function will be efficient and handle large matrices by leveraging Python's sorting capabilities. We will provide clear documentation and examples to ensure ease of use and integration. The function will be compatible with popular Python libraries and data structures, such as lists and NumPy arrays.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    A matrix is a two-dimensional array of numbers arranged in rows and columns.\n\n    'sort'\n    Sorting refers to arranging elements in a particular order, in this case, ascending order based on the sum of each row.\n\n# [phrase showing quantity relationship]\n    'ascending order': This means arranging the rows such that the row with the smallest sum comes first, followed by the next smallest, and so on.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `sort_matrix` that takes a matrix (list of lists) as input.\n    2. Use Python's built-in `sorted` function to sort the matrix.\n    3. The key for sorting should be the sum of each row, which can be calculated using the `sum` function.\n    4. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([[1, 2], [3, 4], [0, 0]]) = [[0, 0], [1, 2], [3, 4]]\n    Explanation: The sum of rows are 3, 7, and 0 respectively. Sorting by these sums results in the order [[0, 0], [1, 2], [3, 4]].\n\n    sort_matrix([[5], [2], [3]]) = [[2], [3], [5]]\n    Explanation: Each row is a single element, so sorting by their values directly results in [[2], [3], [5]].\n\n    sort_matrix([[1, -1], [0, 0], [-1, 1]]) = [[-1, 1], [0, 0], [1, -1]]\n    Explanation: The sums are 0, 0, and 0 respectively. Since all sums are equal, the original order is maintained.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using Python's `sorted` function with a key based on row sums will naturally handle these cases correctly.\n", "requirement analysis:\nThe function should take a matrix as input and return a new matrix sorted by the sum of each row. The primary focus is on efficiency and ease of use, ensuring it can handle various matrix sizes without performance degradation.\nrequirement pool:\n- Implement the core sorting functionality based on row sums\n- Optimize the function for large matrices\n- Provide comprehensive documentation and usage examples\n- Ensure compatibility with Python 3.x versions\n- Include error handling for invalid inputs\nWe will implement a function using pure Python to sort a matrix based on the sum of its rows. This approach will ensure compatibility with all Python 3.x versions and will be efficient for handling large matrices. We will use built-in functions to calculate row sums and sort the matrix accordingly. Comprehensive documentation and examples will be provided to facilitate easy integration and understanding.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array of numbers, where each element is identified by two indices representing its row and column position.\n\n    'sum of its rows'\n    Explanation: The sum of a row in a matrix is the total obtained by adding all the elements in that row.\n\n# [phrase showing quantity relationship]\n    'ascending order': means that the rows should be sorted from the smallest sum to the largest sum.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Calculate the sum of each row in the matrix.\n    2. Pair each row with its corresponding sum.\n    3. Sort the pairs based on the sum in ascending order.\n    4. Extract and return the sorted rows from the sorted pairs.\n\n# [edge case] \n    sort_matrix([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) = [[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n    Explanation: The sums are 0, 3, and 6 respectively, so the matrix is already sorted in ascending order.\n\n    sort_matrix([[5], [3], [4]]) = [[3], [4], [5]]\n    Explanation: The sums are 5, 3, and 4 respectively, so sorting them results in [[3], [4], [5]].\n\n    sort_matrix([[1, 2], [2, 1], [1, 1]]) = [[1, 1], [2, 1], [1, 2]]\n    Explanation: The sums are 3, 3, and 2 respectively. Sorting them results in [[1, 1], [2, 1], [1, 2]].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting based on row sums will naturally handle these cases.\n", "requirement analysis:\nThe function should sort a matrix based on the sum of its rows. It must handle matrices of varying sizes and ensure that the sorting is stable and efficient. Edge cases such as empty matrices or rows with identical sums should be considered.\nrequirement pool:\n- Implement the sort_matrix function to sort by row sums\n- Optimize the function for performance with large matrices\n- Include comprehensive test cases for various scenarios\n- Provide detailed documentation and usage examples\n- Ensure compatibility with Python 3.x versions\nWe will implement the sort_matrix function using pure Python to ensure simplicity and ease of integration. The function will sort the matrix based on the sum of its rows using Python's built-in sorted function, which is efficient and stable. We will handle edge cases such as empty matrices and rows with identical sums by maintaining their original order.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    A matrix is a two-dimensional array of numbers arranged in rows and columns.\n\n    'sort'\n    Sorting refers to arranging elements in a particular order, in this case, ascending order based on the sum of each row.\n\n# [phrase showing quantity relationship]\n    'ascending order': means that the rows should be arranged from the smallest sum to the largest sum.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `sort_matrix` that takes a matrix as input.\n    2. Use Python's built-in `sorted` function to sort the matrix.\n    3. The key for sorting should be the sum of each row.\n    4. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty matrix as there are no rows to sort.\n    \n    sort_matrix([[1, 1, 1], [1, 1, 1]]) = [[1, 1, 1], [1, 1, 1]]\n    Explanation: Rows with identical sums should maintain their original order due to the stability of the sorting algorithm.\n    \n    sort_matrix([[0], [0, 0], [0, 0, 0]]) = [[0], [0, 0], [0, 0, 0]]\n    Explanation: All rows have a sum of zero, so they should maintain their original order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of Python's built-in `sorted` function with a key based on row sums inherently handles these cases due to its stability and ability to handle empty inputs.\n", "requirement analysis:\nThe function should sort a matrix based on the sum of its rows. It needs to handle various matrix sizes and edge cases, such as empty matrices or rows with negative numbers. The implementation should be efficient and easy to understand.\nrequirement pool:\n- Implement the main sorting function\n- Handle edge cases like empty matrices\n- Optimize for performance with large matrices\n- Provide comprehensive documentation\n- Ensure compatibility with Python 3.x\nWe will implement a simple Python function using pure Python to sort the matrix based on the sum of its rows. This approach ensures ease of integration and understanding, while maintaining compatibility with Python 3.x. We will handle edge cases such as empty matrices and rows with negative numbers. For matrices with identical row sums, we will maintain their original order to keep the implementation straightforward.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array of numbers arranged in rows and columns.\n\n    'sort'\n    Explanation: Sorting refers to arranging elements in a particular order, in this case, ascending order based on the sum of each row.\n\n# [phrase showing quantity relationship]\n    'ascending order': \n    Explanation: This means arranging the rows such that the row with the smallest sum comes first, followed by larger sums.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a function `sort_matrix` that takes a matrix as input.\n    2. Calculate the sum of each row in the matrix.\n    3. Sort the rows of the matrix based on their calculated sums using a sorting function.\n    4. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty matrix as there are no rows to sort.\n\n    sort_matrix([[0, 0, 0], [1, -1, 0], [2, 2, -4]]) = [[1, -1, 0], [0, 0, 0], [2, 2, -4]]\n    Explanation: The row sums are [0, 0, 0], [0], and [0] respectively. The original order is maintained for rows with identical sums.\n\n    sort_matrix([[1, 2], [3, 4], [-1, -2]]) = [[-1, -2], [1, 2], [3, 4]]\n    Explanation: The row sums are [-3], [3], and [7]. The rows are sorted in ascending order of their sums.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The sorting logic inherently handles empty matrices and rows with identical sums by maintaining their original order.\n", "requirement analysis:\nThe function should efficiently sort matrices based on row sums, ensuring compatibility with existing Python projects. It should handle edge cases such as empty matrices or rows with negative numbers.\nrequirement pool:\n- Efficient sorting algorithm for matrices\n- Handle edge cases like empty matrices\n- Provide clear documentation\n- Ensure compatibility with Python 3\n- Optimize for large matrices\nWe will implement a function using Python's built-in capabilities to sort matrices based on the sum of their rows. The function will handle edge cases such as empty matrices and rows with negative numbers. We will use the 'sorted' function with a custom key to achieve this efficiently. No external libraries are required, ensuring compatibility with existing Python projects.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array consisting of rows and columns. In this requirement, each row of the matrix is a list of integers.\n\n    'sum of its rows'\n    Explanation: The sum of a row refers to the total obtained by adding all the elements within that row.\n\n# [phrase showing quantity relationship]\n    'ascending order'\n    Explanation: Sorting in ascending order means arranging the rows such that the row with the smallest sum comes first, followed by rows with larger sums.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `sort_matrix` that takes a matrix as input.\n    2. Use Python's built-in `sorted` function to sort the matrix.\n    3. Provide a custom key function to `sorted` that calculates the sum of each row.\n    4. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix has no rows to sort, so the expected output is an empty list.\n    \n    sort_matrix([[0, 0, 0], [1, -1, 0], [2, 2, -4]]) = [[1, -1, 0], [2, 2, -4], [0, 0, 0]]\n    Explanation: The sums of the rows are [0, 0, 0] = 0, [1, -1, 0] = 0, and [2, 2, -4] = 0. All rows have the same sum, so they can appear in any order.\n\n    sort_matrix([[1], [2], [3]]) = [[1], [2], [3]]\n    Explanation: Each row has only one element, so sorting by sum is equivalent to sorting by the element itself.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using Python's `sorted` function with a custom key will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently sort matrices based on the sum of their rows, ensuring compatibility with existing Python codebases and handling edge cases like empty matrices.\nrequirement pool:\n- Efficiently sort matrices based on row sums\n- Handle edge cases such as empty matrices\n- Provide clear documentation for users\n- Ensure compatibility with existing systems\n- Optimize for performance with large matrices\nWe will use pure Python to implement the function, as it provides simplicity and ease of integration into existing codebases. The function will sort the matrix based on the sum of its rows, handling edge cases like empty matrices efficiently. We will ensure the function is well-documented for ease of use.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array of numbers, where each element is identified by two indices, representing the row and column.\n\n    'sort in ascending order based on the sum of its rows'\n    Explanation: This means that the rows of the matrix should be rearranged such that the row with the smallest sum of its elements comes first, followed by the next smallest, and so on.\n\n# [phrase showing quantity relationship]\n    'ascending order': This indicates that the sorting should be done from the smallest to the largest based on the sum of each row.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a function `sort_matrix` that takes a matrix as input.\n    2. Calculate the sum of each row in the matrix.\n    3. Pair each row with its corresponding sum.\n    4. Sort these pairs based on the sum in ascending order.\n    5. Extract and return the rows from the sorted pairs.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty matrix as there are no rows to sort.\n\n    sort_matrix([[1, 2], [2, 1], [1, 1]]) = [[1, 1], [1, 2], [2, 1]]\n    Explanation: The sums of the rows are 3, 3, and 2 respectively. Sorting these gives the order based on sums: 2, 3, 3.\n\n    sort_matrix([[0, 0], [0, 0], [0, 0]]) = [[0, 0], [0, 0], [0, 0]]\n    Explanation: All rows have the same sum (0), so the order remains unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting based on row sums will naturally handle these cases.\n", "requirement analysis:\nThe function should sort a matrix based on the sum of its rows. It needs to handle matrices of varying sizes and ensure the output is in ascending order. The function should be efficient and easy to use, with clear documentation.\nrequirement pool:\n- Implement the sorting function based on row sums\n- Optimize the function for performance with large matrices\n- Provide comprehensive documentation and examples\n- Ensure compatibility with Python 3.x\n- Include error handling for invalid inputs\nWe will implement a simple Python function using pure Python to sort a matrix based on the sum of its rows. This approach ensures compatibility with all Python 3.x versions and avoids the complexity of external libraries. The function will include error handling to manage non-numeric data and invalid inputs gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sort': The requirement is to arrange the matrix rows in a specific order.\n    'matrix': A two-dimensional array where each element is a list representing a row.\n    'sum of its rows': The sum of all elements in a row, which will be used as the sorting key.\n\n# [phrase showing quantity relationship]\n    'ascending order': This indicates that the rows should be sorted from the smallest sum to the largest sum.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `sort_matrix` that takes a matrix as input.\n    2. Calculate the sum of each row in the matrix.\n    3. Sort the matrix based on the calculated sums using a sorting algorithm or Python's built-in `sorted` function.\n    4. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) = [[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n    Explanation: The sums are 0, 3, and 6 respectively, so the matrix is already sorted in ascending order.\n    \n    sort_matrix([[1, -1, 0], [2, -2, 0], [3, -3, 0]]) = [[1, -1, 0], [2, -2, 0], [3, -3, 0]]\n    Explanation: The sums are all zero, so the original order is maintained.\n\n    sort_matrix([[5], [3], [4]]) = [[3], [4], [5]]\n    Explanation: Single-element rows are sorted based on their values.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting based on row sums will naturally handle these cases.\n", "requirement analysis:\nThe function should sort matrices based on the sum of rows, ensuring it handles various matrix sizes and edge cases efficiently. It should be easy to integrate into existing Python projects without requiring additional libraries.\nrequirement pool:\n- Implement the sorting algorithm based on row sums\n- Ensure compatibility with Python 3.x\n- Provide documentation and examples\n- Optimize for performance with large matrices\n- Handle edge cases like empty matrices\nWe will implement a function using pure Python to sort matrices based on the sum of their rows. This approach ensures compatibility with Python 3.x and avoids the complexity of external libraries. The function will handle edge cases like empty matrices and provide documentation with examples for clarity. For matrices with identical row sums, they will maintain their original order.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    A matrix is a two-dimensional array of numbers arranged in rows and columns.\n\n    'sort'\n    Sorting refers to arranging elements in a particular order, in this case, ascending order based on the sum of each row.\n\n# [phrase showing quantity relationship]\n    'ascending order': This means arranging the rows such that the row with the smallest sum comes first, followed by larger sums.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `sort_matrix` that takes a matrix as input.\n    2. Check if the matrix is empty; if so, return an empty matrix.\n    3. Calculate the sum of each row in the matrix.\n    4. Sort the rows of the matrix based on their calculated sums using a sorting function.\n    5. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty matrix as there are no rows to sort.\n    \n    sort_matrix([[1, 2], [2, 1]]) = [[1, 2], [2, 1]]\n    Explanation: Both rows have the same sum (3), so they maintain their original order.\n    \n    sort_matrix([[0, 0], [1, -1], [2, -2]]) = [[0, 0], [1, -1], [2, -2]]\n    Explanation: All rows have a sum of zero, so they maintain their original order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The sorting logic inherently handles empty matrices and matrices with identical row sums by maintaining their original order.\n", "requirement analysis:\nThe requirement is to create a function that sorts a matrix based on the sum of its rows. The function should be efficient and easy to use, with clear documentation to aid users in understanding its implementation.\nrequirement pool:\n- Implement the sort_matrix function to sort matrices by row sum\n- Optimize the function for performance with large matrices\n- Provide comprehensive documentation and usage examples\n- Ensure compatibility with Python 3.x versions\n- Include error handling for invalid input types\nWe will implement the sort_matrix function using pure Python to keep it simple and straightforward. The function will sort the matrix based on the sum of its rows using Python's built-in sorted function, which is efficient for this purpose. We will ensure the function is compatible with Python 3.x and include error handling for invalid input types. Comprehensive documentation and examples will be provided to aid users in understanding and integrating the function.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array of numbers arranged in rows and columns.\n\n    'sort'\n    Explanation: Sorting refers to arranging elements in a particular order, in this case, ascending order based on the sum of each row.\n\n# [phrase showing quantity relationship]\n    'ascending order': means that the rows should be arranged from the smallest sum to the largest sum.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `sort_matrix` that takes a matrix as input.\n    2. Use Python's built-in `sorted` function to sort the matrix.\n    3. The key for sorting should be the sum of each row, which can be calculated using the `sum` function.\n    4. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) = [[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n    Explanation: The sums of the rows are already in ascending order (0, 3, 6), so the output is the same as the input.\n\n    sort_matrix([[5], [3], [4]]) = [[3], [4], [5]]\n    Explanation: Each row contains only one element, so sorting is based on these single elements.\n\n    sort_matrix([[1, 2], [1, 1], [2, 2]]) = [[1, 1], [1, 2], [2, 2]]\n    Explanation: The sums of the rows are (3, 2, 4), so they are sorted in ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using Python's `sorted` function with a key based on row sums will handle these cases correctly.\n", "requirement analysis:\nThe function should efficiently sort matrices by row sums, handle edge cases like empty matrices, and be easy to use and integrate. It should be well-documented and compatible with various Python versions.\nrequirement pool:\n- Implement the core sorting functionality based on row sums\n- Handle edge cases such as empty matrices or rows\n- Provide comprehensive documentation and usage examples\n- Ensure compatibility with Python 3.x versions\n- Optimize for performance with large matrices\nWe will implement a simple Python function using built-in list operations to sort matrices based on the sum of their rows. This approach ensures compatibility with all Python 3.x versions and handles edge cases like empty matrices efficiently. We will avoid using complex libraries like NumPy or Pandas to keep the solution lightweight and easy to integrate.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array of numbers, where each element is accessed by two indices representing its row and column position.\n\n    'sum of its rows'\n    Explanation: The sum of a row in a matrix is the total obtained by adding all the elements in that row.\n\n# [phrase showing quantity relationship]\n    'ascending order': means that the rows should be sorted from the smallest sum to the largest sum.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate through each row of the matrix.\n    2. Calculate the sum of each row.\n    3. Sort the rows based on their calculated sums in ascending order.\n    4. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix has no rows to sort, so the expected output is an empty matrix.\n\n    sort_matrix([[0, 0, 0], [0, 0, 0]]) = [[0, 0, 0], [0, 0, 0]]\n    Explanation: All rows have the same sum (0), so the order remains unchanged.\n\n    sort_matrix([[1], [2], [3]]) = [[1], [2], [3]]\n    Explanation: Each row has a single element, and they are already in ascending order based on their sums.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting based on row sums will naturally handle these cases.\n"], "test": ["def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9216, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, false, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 94, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    '''\n    Sorts a given matrix in ascending order based on the sum of its rows.\n    \n    Parameters:\n    matrix (List[List[int]]): A 2D list representing the matrix to be sorted.\n    \n    Returns:\n    List[List[int]]: A new matrix sorted by row sums.\n    '''\n    # Calculate the sum of each row and pair it with the row itself\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the list of tuples based on the sum (first element of the tuple)\n    row_sums.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in row_sums]\n    \n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    example_matrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\n    sorted_example = sort_matrix(example_matrix)\n    print(sorted_example)  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "passed": true, "pass": true, "pass_num": 9, "round": 406, "mutate_method": "expand_one2two", "parent_index": 7}
