{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 567, "prompt": "Write a function to check whether a specified list is sorted or not. You have to ascertain if the elements within the list are organized in a specific sequence. The order can be either ascending or descending.", "code": "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result", "test_imports": [], "test_list": ["assert issort_list([1,2,4,6,8,10,12,14,16,17])==True", "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False", "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False", "assert issort_list([3, 4, 5, 6, 5, 5, 17, 13, 13, 20]) == False", "assert issort_list([3, 5, 1, 11, 12, 13, 12, 16, 18, 16]) == False", "assert issort_list([1, 2, 9, 2, 7, 9, 12, 10, 21, 21]) == False", "assert issort_list([1, 7, 1, 10, 8, 11, 10, 11, 15, 18]) == False", "assert issort_list([4, 4, 4, 6, 7, 8, 9, 17, 15, 22]) == False", "assert issort_list([2, 6, 2, 1, 6, 11, 14, 15, 19, 16]) == False", "assert issort_list([5, 5, 9, 3, 7, 9, 7, 19, 18, 16]) == False", "assert issort_list([5, 3, 2, 8, 11, 13, 8, 13, 18, 16]) == False", "assert issort_list([1, 6, 9, 7, 4, 10, 8, 15, 16, 17]) == False", "assert issort_list([4, 6, 8, 6, 12, 7, 14, 10, 20, 16]) == False", "assert issort_list([4, 1, 2, 5, 7, 10, 9, 17, 14, 13]) == False", "assert issort_list([5, 6, 7, 3, 13, 12, 11, 10, 12, 22]) == False", "assert issort_list([5, 3, 4, 7, 4, 10, 11, 11, 15, 13]) == False", "assert issort_list([6, 3, 7, 9, 10, 11, 16, 13, 13, 17]) == False", "assert issort_list([5, 3, 4, 10, 10, 12, 14, 17, 17, 18]) == False", "assert issort_list([3, 3, 2, 3, 5, 13, 8, 13, 17, 15]) == False", "assert issort_list([2, 3, 5, 1, 6, 6, 12, 16, 11, 15]) == False", "assert issort_list([2, 2, 8, 4, 7, 12, 15, 9, 19, 19]) == False", "assert issort_list([1, 4, 6, 10, 12, 10, 8, 12, 19, 19]) == False", "assert issort_list([2, 7, 8, 11, 3, 9, 10, 15, 15, 21]) == False", "assert issort_list([5, 1, 9, 1, 10, 14, 8, 15, 19, 12]) == False", "assert issort_list([5, 4, 6, 8, 11, 14, 16, 11, 19, 15]) == False", "assert issort_list([3, 3, 5, 3, 5, 14, 13, 12, 13, 19]) == False", "assert issort_list([3, 3, 5, 4, 10, 12, 8, 15, 11, 12]) == False", "assert issort_list([4, 1, 9, 8, 13, 13, 10, 15, 17, 22]) == False", "assert issort_list([2, 6, 7, 2, 7, 9, 11, 16, 13, 16]) == False", "assert issort_list([3, 2, 2, 8, 9, 10, 9, 19, 17, 13]) == False", "assert issort_list([4, 3, 8, 6, 11, 7, 8, 10, 11, 16]) == False", "assert issort_list([1, 7, 1, 5, 11, 13, 14, 17, 20, 15]) == False", "assert issort_list([1, 7, 8, 2, 13, 8, 7, 12, 12, 18]) == False", "assert issort_list([5, 2, 5, 2, 11, 13, 11, 18, 17, 15]) == False", "assert issort_list([2, 1, 9, 7, 5, 12, 12, 19, 11, 13]) == False", "assert issort_list([3, 6, 8, 2, 8, 10, 13, 11, 19, 15]) == False", "assert issort_list([1, 2, 2, 10, 10, 14, 13, 18, 20, 13]) == False", "assert issort_list([3, 2, 7, 2, 6, 10, 9, 17, 21, 22]) == False", "assert issort_list([5, 6, 7, 7, 12, 6, 15, 10, 21, 20]) == False", "assert issort_list([3, 3, 3, 2, 11, 15, 14, 16, 23, 22]) == False", "assert issort_list([6, 2, 9, 1, 13, 12, 11, 9, 20, 17]) == False", "assert issort_list([1, 7, 1, 7, 13, 12, 16, 12, 22, 22]) == False", "assert issort_list([1, 4, 2, 7, 5, 8, 12, 11, 24, 21]) == False", "assert issort_list([6, 4, 1, 11, 3, 9, 9, 17, 23, 19]) == False", "assert issort_list([4, 7, 4, 2, 12, 7, 9, 13, 15, 12]) == False", "assert issort_list([6, 1, 1, 7, 3, 12, 12, 10, 18, 19]) == False", "assert issort_list([4, 4, 5, 11, 9, 10, 9, 17, 15, 15]) == False", "assert issort_list([6, 6, 7, 1, 9, 14, 14, 17, 15, 21]) == False", "assert issort_list([4, 5, 6, 3, 6, 7, 14, 12, 17, 15]) == False", "assert issort_list([5, 6, 8, 4, 10, 8, 9, 10, 22, 18]) == False", "assert issort_list([2, 6, 2, 10, 3, 13, 15, 10, 17, 12]) == False", "assert issort_list([2, 1, 2, 1, 10, 14, 10, 12, 19, 17]) == False", "assert issort_list([1, 4, 9, 3, 8, 14, 10, 9, 18, 15]) == False", "assert issort_list([2, 2, 4, 5, 13, 12, 7, 15, 25, 15]) == False", "assert issort_list([1, 2, 7, 9, 3, 15, 13, 11, 17, 18]) == False", "assert issort_list([2, 4, 7, 1, 11, 5, 14, 9, 22, 21]) == False", "assert issort_list([4, 6, 9, 10, 11, 11, 12, 12, 20, 21]) == True", "assert issort_list([1, 4, 6, 11, 12, 7, 11, 15, 15, 21]) == False", "assert issort_list([2, 1, 8, 9, 10, 5, 16, 12, 20, 17]) == False", "assert issort_list([4, 3, 3, 10, 12, 14, 9, 17, 17, 21]) == False", "assert issort_list([2, 6, 1, 10, 3, 11, 16, 18, 20, 21]) == False", "assert issort_list([3, 4, 9, 1, 4, 12, 17, 19, 25, 12]) == False", "assert issort_list([5, 7, 7, 6, 3, 11, 16, 17, 21, 12]) == False", "assert issort_list([2, 4, 9, 4, 4, 11, 7, 19, 24, 15]) == False", "assert issort_list([2, 6, 3, 10, 6, 11, 15, 9, 19, 19]) == False", "assert issort_list([3, 5, 1, 11, 4, 15, 8, 15, 17, 19]) == False", "assert issort_list([1, 7, 4, 7, 13, 5, 13, 11, 23, 19]) == False", "assert issort_list([5, 7, 8, 4, 11, 15, 17, 12, 20, 19]) == False", "assert issort_list([3, 1, 3, 2, 7, 12, 9, 17, 19, 20]) == False", "assert issort_list([3, 4, 2, 7, 11, 15, 20, 16, 16]) == False", "assert issort_list([5, 4, 2, 10, 3, 15, 14, 11, 21]) == False", "assert issort_list([6, 7, 2, 3, 7, 6, 13, 9, 25]) == False", "assert issort_list([5, 1, 3, 4, 11, 9, 12, 13, 23]) == False", "assert issort_list([4, 1, 5, 4, 7, 6, 11, 14, 16]) == False", "assert issort_list([3, 5, 4, 1, 10, 7, 18, 16, 22]) == False", "assert issort_list([3, 7, 9, 9, 4, 14, 19, 13, 19]) == False", "assert issort_list([5, 4, 5, 7, 13, 11, 10, 9, 23]) == False", "assert issort_list([6, 1, 8, 4, 13, 12, 19, 13, 19]) == False", "assert issort_list([6, 3, 9, 9, 9, 12, 15, 13, 23]) == False", "assert issort_list([5, 4, 4, 6, 7, 10, 11, 14, 23]) == False", "assert issort_list([4, 6, 6, 6, 3, 7, 18, 17, 23]) == False", "assert issort_list([6, 7, 1, 2, 9, 8, 20, 16, 16]) == False", "assert issort_list([2, 6, 9, 1, 4, 13, 17, 18, 21]) == False", "assert issort_list([6, 4, 8, 4, 6, 7, 16, 9, 17]) == False", "assert issort_list([1, 6, 2, 5, 8, 5, 13, 17, 25]) == False", "assert issort_list([5, 3, 8, 5, 7, 11, 15, 11, 22]) == False", "assert issort_list([5, 3, 5, 10, 8, 11, 17, 11, 24]) == False", "assert issort_list([2, 5, 4, 7, 3, 7, 15, 19, 25]) == False", "assert issort_list([5, 4, 9, 5, 8, 15, 16, 19, 15]) == False", "assert issort_list([4, 5, 8, 6, 6, 7, 20, 11, 16]) == False", "assert issort_list([6, 6, 9, 1, 12, 5, 11, 18, 19]) == False", "assert issort_list([4, 4, 5, 4, 3, 14, 13, 14, 19]) == False", "assert issort_list([2, 1, 6, 3, 4, 10, 11, 15, 23]) == False", "assert issort_list([4, 4, 7, 4, 12, 14, 10, 12, 20]) == False", "assert issort_list([4, 2, 1, 8, 11, 6, 11, 9, 25]) == False", "assert issort_list([2, 1, 3, 1, 9, 7, 15, 18, 17]) == False", "assert issort_list([4, 6, 9, 4, 4, 14, 11, 19, 19]) == False", "assert issort_list([5, 5, 6, 6, 6, 15, 10, 11, 23]) == False", "assert issort_list([3, 2, 8, 2, 13, 10, 11, 15, 18]) == False", "assert issort_list([4, 3, 6, 10, 4, 7, 12, 17, 21]) == False", "assert issort_list([5, 1, 8, 2, 4, 14, 12, 16, 16]) == False", "assert issort_list([5, 2, 5, 1, 10, 7, 20, 11, 15]) == False"], "entry_point": "issort_list", "repair_prompt": ["Write a function issort_list to check whether a specified list is sorted or not. You have to ascertain if the elements within the list are organized in a specific sequence. The order can be either ascending or descending.\nissort_list([1,2,4,6,8,10,12,14,16,17])==True\n", "Write a function issort_list to check whether a specified list is sorted or not. You have to ascertain if the elements within the list are organized in a specific sequence. You need to determine if the list follows a particular order. The order can be either ascending or descending.\nissort_list([1,2,4,6,8,10,12,14,16,17])==True\n", "Write a function issort_list to check whether a specified list is sorted or not. You have to ascertain if the elements within the list are organized in a specific sequence, which can be either ascending or descending.\nissort_list([1,2,4,6,8,10,12,14,16,17])==True\n"], "completions": ["from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # An empty list or a list with a single element is considered sorted\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    is_ascending = True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            is_ascending = False\n            break\n\n    # Check if the list is sorted in descending order\n    is_descending = True\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            is_descending = False\n            break\n\n    # The list is sorted if it is either ascending or descending\n    return is_ascending or is_descending\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the given list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    is_ascending = True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            is_ascending = False\n            break\n\n    # Check if the list is sorted in descending order\n    is_descending = True\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            is_descending = False\n            break\n\n    # Return True if the list is sorted in either ascending or descending order\n    return is_ascending or is_descending\n\n# Unit tests\ndef test_issort_list():\n    assert issort_list([]) == True, \"Test case 1 failed\"\n    assert issort_list([5]) == True, \"Test case 2 failed\"\n    assert issort_list([3, 3, 3]) == True, \"Test case 3 failed\"\n    assert issort_list([1, 2, 3, 4, 5]) == True, \"Test case 4 failed\"\n    assert issort_list([5, 4, 3, 2, 1]) == True, \"Test case 5 failed\"\n    assert issort_list([1, 3, 2, 4, 5]) == False, \"Test case 6 failed\"\n    assert issort_list([5, 3, 4, 2, 1]) == False, \"Test case 7 failed\"\n    print(\"All test cases passed.\")\n\n# Run unit tests\nif __name__ == \"__main__\":\n    test_issort_list()\n", "from typing import List\n## main.py\n\ndef issort_list(input_list: list) -> bool:\n    \"\"\"\n    Checks if the input list is sorted in ascending or descending order.\n\n    Parameters:\n    input_list (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n\n    Raises:\n    TypeError: If the input is not a list or contains non-comparable elements.\n    \"\"\"\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Handle edge cases for empty list and single-element list\n    if len(input_list) <= 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    is_ascending = True\n    for i in range(len(input_list) - 1):\n        if input_list[i] > input_list[i + 1]:\n            is_ascending = False\n            break\n\n    # If not ascending, check if the list is sorted in descending order\n    if not is_ascending:\n        is_descending = True\n        for i in range(len(input_list) - 1):\n            if input_list[i] < input_list[i + 1]:\n                is_descending = False\n                break\n        return is_descending\n\n    return is_ascending\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the given list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n\n    # Initialize flags for ascending and descending order\n    is_ascending = False\n    is_descending = False\n\n    # Iterate through the list and compare each element with the next one\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            is_ascending = True\n        elif lst[i] > lst[i + 1]:\n            is_descending = True\n\n        # If both flags are True, the list is neither fully ascending nor descending\n        if is_ascending and is_descending:\n            return False\n\n    # If only one of the flags is True, the list is sorted\n    return True\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Handle edge cases: empty list or list with a single element\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    is_ascending = all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n    \n    # Check if the list is sorted in descending order\n    is_descending = all(lst[i] >= lst[i + 1] for i in range(len(lst) - 1))\n    \n    # Return True if the list is sorted in either ascending or descending order\n    return is_ascending or is_descending\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the given list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n\n    # Initialize flags for ascending and descending order\n    is_ascending = True\n    is_descending = True\n\n    # Iterate through the list and compare each element with the next one\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            is_descending = False\n        elif lst[i] > lst[i + 1]:\n            is_ascending = False\n\n    # Return True if the list is sorted in either ascending or descending order\n    return is_ascending or is_descending\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the given list is sorted in either ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    is_ascending = True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            is_ascending = False\n            break\n\n    # If the list is sorted in ascending order, return True\n    if is_ascending:\n        return True\n\n    # Check if the list is sorted in descending order\n    is_descending = True\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            is_descending = False\n            break\n\n    # If the list is sorted in descending order, return True\n    if is_descending:\n        return True\n\n    # If the list is not sorted in either order, return False\n    return False\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> str:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n    \n    Args:\n        lst (list): List of comparable elements.\n        \n    Returns:\n        str: 'ascending' if sorted in ascending order,\n             'descending' if sorted in descending order,\n             'not sorted' if not sorted.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return 'ascending'  # Trivially sorted\n\n    # Check for ascending order\n    is_ascending = True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            is_ascending = False\n            break\n\n    if is_ascending:\n        return 'ascending'\n\n    # Check for descending order\n    is_descending = True\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            is_descending = False\n            break\n\n    if is_descending:\n        return 'descending'\n\n    # If neither ascending nor descending\n    return 'not sorted'\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the given list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Handle edge cases: empty list or single-element list\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    is_ascending = True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            is_ascending = False\n            break\n\n    # If the list is sorted in ascending order, return True\n    if is_ascending:\n        return True\n\n    # Check if the list is sorted in descending order\n    is_descending = True\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            is_descending = False\n            break\n\n    # Return True if the list is sorted in descending order, otherwise False\n    return is_descending\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Handle edge cases: empty list or list with a single element\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    is_ascending = all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n    if is_ascending:\n        return True\n\n    # Check if the list is sorted in descending order\n    is_descending = all(lst[i] >= lst[i + 1] for i in range(len(lst) - 1))\n    if is_descending:\n        return True\n\n    # If neither ascending nor descending, return False\n    return False\n"], "plans": ["requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order without altering the list itself. It should handle edge cases such as empty lists and lists with identical elements.\nrequirement pool:\n- Implement the main function to check list order.\n- Optimize for performance with large datasets.\n- Include comprehensive documentation.\n- Handle edge cases like empty lists.\n- Ensure compatibility with different data types.\nWe will implement a function named issort_list that checks if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and lists with identical elements. We will use Python's built-in capabilities to ensure optimal performance for large datasets. The function will be documented to provide clear guidance on its usage.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, 'sorted' means that the elements in the list are organized in a specific sequence, either ascending or descending.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element, in which case it is considered sorted.\n    2. Compare each element with the next one to determine if the list is sorted in ascending order.\n    3. Compare each element with the next one to determine if the list is sorted in descending order.\n    4. Return True if the list is sorted in either ascending or descending order, otherwise return False.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by default.\n    \n    issort_list([5]) = True\n    Explanation: A list with a single element is considered sorted by default.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered sorted as there is no change in order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking for empty lists and lists with identical elements already covers these scenarios.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It should handle edge cases such as empty lists and lists with identical elements. The implementation should be straightforward and easy to integrate into existing projects.\nrequirement pool:\n- Implement the issort_list function to check list order\n- Optimize the function for performance with large lists\n- Ensure compatibility with Python 3.x versions\n- Provide comprehensive documentation and examples\n- Include unit tests to verify functionality\nWe will implement the issort_list function using Python's built-in capabilities to efficiently check if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and lists with identical elements. We will ensure compatibility with Python 3.x versions and provide comprehensive documentation and unit tests.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, 'sorted' means that the elements in the list are organized in a specific sequence, either ascending or descending.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element, in which case it is considered sorted.\n    2. Compare each element with the next one to determine if the list is sorted in ascending order.\n    3. Compare each element with the next one to determine if the list is sorted in descending order.\n    4. Return True if the list is sorted in either ascending or descending order, otherwise return False.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by default.\n    \n    issort_list([5]) = True\n    Explanation: A list with a single element is considered sorted by default.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered sorted as there is no change in order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking for empty lists and single-element lists will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It should handle edge cases such as empty lists and lists with one element. The function should be easy to use and integrate into existing Python projects.\nrequirement pool:\n- The function must correctly identify sorted lists in both ascending and descending order.\n- The function should handle edge cases like empty lists and single-element lists.\n- The function should provide clear error messages for invalid inputs.\n- The function should be optimized for performance with large lists.\n- The function should be compatible with multiple Python versions.\nWe will implement a function named `issort_list` that checks if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and single-element lists. It will also provide clear error messages for invalid inputs. We will use Python's built-in capabilities to ensure compatibility across different Python versions and optimize for performance with large lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, \"sorted\" means that the elements in the list are arranged in a specific order, either ascending (from smallest to largest) or descending (from largest to smallest).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are trivially sorted.\n    2. Compare each element with the next one to determine if the list is sorted in ascending order.\n    3. If the list is not sorted in ascending order, check if it is sorted in descending order by comparing each element with the next one.\n    4. If the list is sorted in either ascending or descending order, return True; otherwise, return False.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by definition.\n    \n    issort_list([5]) = True\n    Explanation: A single-element list is considered sorted by definition.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: A list where all elements are the same is considered sorted in both ascending and descending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and single-element lists as sorted.\n", "requirement analysis:\nThe requirement is to create a function that checks if a list is sorted in either ascending or descending order. The function should be efficient and handle edge cases such as empty lists or lists with identical elements.\nrequirement pool:\n- Implement the issort_list function to check list order\n- Ensure the function handles both ascending and descending orders\n- Optimize the function for large lists\n- Provide comprehensive documentation and examples\n- Ensure compatibility with Python 3.x versions\nWe will implement a function named `issort_list` that checks if a list is sorted in either ascending or descending order. The function will iterate through the list and compare each element with the next one to determine the order. This approach is efficient for large lists as it only requires a single pass through the list. We will use Python's built-in capabilities without any additional libraries to ensure compatibility across different Python versions. The function will handle edge cases such as empty lists and lists with identical elements. We will also provide documentation in a markdown file to guide users on how to use the function.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, \"sorted\" means that the elements in the list are arranged in a specific order, either ascending (from smallest to largest) or descending (from largest to smallest).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are trivially sorted.\n    2. Initialize two flags: `is_ascending` and `is_descending`.\n    3. Iterate through the list and compare each element with the next one:\n       - If an element is greater than the next, set `is_descending` to True.\n       - If an element is less than the next, set `is_ascending` to True.\n    4. If both flags are True, return False because the list is neither fully ascending nor descending.\n    5. Otherwise, return True.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by definition.\n    \n    issort_list([5]) = True\n    Explanation: A single-element list is considered sorted by definition.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: A list with all identical elements is considered sorted in both ascending and descending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as sorted.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It must handle edge cases such as empty lists and lists with identical elements. Performance optimization is crucial for handling large datasets.\nrequirement pool:\n- Implement the main function to check list sorting\n- Optimize for performance with large lists\n- Handle edge cases like empty lists\n- Provide user feedback on sorting status\n- Ensure compatibility with different data types\nWe will implement a function named `issort_list` that checks if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and lists with identical elements. We will use Python's built-in capabilities to ensure optimal performance for large lists. The function will return a boolean indicating whether the list is sorted.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, \"sorted\" means that the elements in the list are arranged in a specific order, either ascending (from smallest to largest) or descending (from largest to smallest).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are trivially sorted.\n    2. Compare each element with the next one to determine if the list is sorted in ascending order.\n    3. Compare each element with the next one to determine if the list is sorted in descending order.\n    4. If the list is sorted in either ascending or descending order, return True; otherwise, return False.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by definition.\n    \n    issort_list([5]) = True\n    Explanation: A list with a single element is considered sorted by definition.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: A list where all elements are identical is considered sorted in both ascending and descending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking for empty lists and lists with identical elements.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It should handle edge cases such as empty lists and lists with identical elements. The function should be easy to use and integrate into existing Python projects.\nrequirement pool:\n- The function must check for both ascending and descending order.\n- The function should handle large lists efficiently.\n- The function should return a boolean value.\n- The function should be compatible with Python 3.x.\n- The function should include documentation and examples.\nWe will implement a simple function using Python's built-in capabilities to check if a list is sorted in either ascending or descending order. The function will iterate through the list and compare each element with the next one to determine the order. This approach is efficient and does not require any third-party libraries, ensuring compatibility with different Python versions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, \"sorted\" means that the elements in the list are arranged in a specific order, either ascending (from smallest to largest) or descending (from largest to smallest).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because a single-element list is trivially sorted.\n    2. Iterate through the list and compare each element with the next one.\n    3. Determine if the list is sorted in ascending order by checking if each element is less than or equal to the next one.\n    4. Determine if the list is sorted in descending order by checking if each element is greater than or equal to the next one.\n    5. If the list is sorted in either ascending or descending order, return True. Otherwise, return False.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by definition.\n    \n    issort_list([5]) = True\n    Explanation: A single-element list is trivially sorted.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: All elements are equal, so the list is considered sorted in both ascending and descending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking for empty or single-element lists and lists with all equal elements.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It should handle edge cases such as empty lists and lists with identical elements. The function should be optimized for performance to handle large datasets.\nrequirement pool:\n- Implement the issort_list function to check for sorted order\n- Optimize the function for performance with large lists\n- Ensure the function handles both ascending and descending orders\n- Provide comprehensive documentation and examples\n- Test the function across different Python versions\nWe will implement a function named issort_list that checks if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and lists with identical elements. We will use Python's built-in capabilities to ensure compatibility across different Python versions and optimize for performance with large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, \"sorted\" means that the elements in the list are arranged in a specific order, either ascending (from smallest to largest) or descending (from largest to smallest).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are trivially sorted.\n    2. Compare each element with the next one to determine if the list is sorted in ascending order.\n    3. If the list is not sorted in ascending order, check if it is sorted in descending order by comparing each element with the next one.\n    4. If the list is sorted in either ascending or descending order, return True; otherwise, return False.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by definition.\n    \n    issort_list([5]) = True\n    Explanation: A list with a single element is considered sorted.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered sorted in both ascending and descending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as sorted.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It must handle edge cases such as empty lists and lists with identical elements. Performance should be optimized for large datasets.\nrequirement pool:\n- Implement the main function to check list order.\n- Optimize for performance with large lists.\n- Handle edge cases like empty lists.\n- Provide user feedback on list order status.\n- Ensure compatibility with different data types.\nWe will implement a function named issort_list that checks if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and lists with identical elements. We will use Python's built-in capabilities to ensure efficient performance, especially for large lists. The function will also provide feedback on whether the list is sorted in ascending, descending, or not sorted at all.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, \"sorted\" means that the elements in the list are arranged in a specific order, either increasing (ascending) or decreasing (descending).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are trivially sorted.\n    2. Compare each element with the next one to determine if the list is sorted in ascending order.\n    3. If the list is not sorted in ascending order, check if it is sorted in descending order by comparing each element with the next one.\n    4. If the list is sorted in either ascending or descending order, return True; otherwise, return False.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by definition.\n    \n    issort_list([5]) = True\n    Explanation: A single-element list is trivially sorted.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered sorted in both ascending and descending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as sorted.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It should handle edge cases such as empty lists and lists with identical elements.\nrequirement pool:\n- The function must correctly identify sorted lists.\n- The function should handle large lists efficiently.\n- The function should be compatible with Python 3.x.\n- The function should include comprehensive documentation.\n- The function should handle edge cases gracefully.\nWe will implement a function named `issort_list` that checks if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and lists with identical elements. We will use Python's built-in capabilities to ensure compatibility with Python 3.x and to maintain efficiency. The function will be documented to explain its usage and edge case handling.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, \"sorted\" means that the elements in the list are arranged in a specific order, either ascending (from smallest to largest) or descending (from largest to smallest).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are trivially sorted.\n    2. Compare each element with the next one to determine if the list is sorted in ascending order.\n    3. If the list is not sorted in ascending order, check if it is sorted in descending order by comparing each element with the next one.\n    4. If the list is sorted in either ascending or descending order, return True; otherwise, return False.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by definition.\n    \n    issort_list([5]) = True\n    Explanation: A single-element list is trivially sorted.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered sorted in both ascending and descending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as sorted.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It must handle edge cases such as empty lists and lists with identical elements.\nrequirement pool:\n- Implement the main function to check list order\n- Optimize for performance with large datasets\n- Include comprehensive test cases\n- Document the function usage and edge cases\n- Consider additional features like partial sorting checks\nWe will implement a function named issort_list that checks if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and lists with identical elements, considering them as sorted. We will use Python's built-in capabilities to efficiently determine the order without additional libraries, ensuring optimal performance for large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, \"sorted\" means that the elements in the list are arranged in a specific order, either ascending (from smallest to largest) or descending (from largest to smallest).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are considered sorted.\n    2. Compare each element with the next one to determine if the list is sorted in ascending order.\n    3. If the list is not sorted in ascending order, check if it is sorted in descending order by comparing each element with the next one.\n    4. If the list is sorted in either ascending or descending order, return True; otherwise, return False.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by definition.\n    \n    issort_list([5]) = True\n    Explanation: A list with a single element is considered sorted.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered sorted.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as sorted.\n"], "test": ["def check(issort_list):\n\tassert issort_list([1,2,4,6,8,10,12,14,16,17])==True", "def check(issort_list):\n\tassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False", "def check(issort_list):\n\tassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False", "def check(issort_list):\n\tassert issort_list([3, 4, 5, 6, 5, 5, 17, 13, 13, 20]) == False", "def check(issort_list):\n\tassert issort_list([3, 5, 1, 11, 12, 13, 12, 16, 18, 16]) == False", "def check(issort_list):\n\tassert issort_list([1, 2, 9, 2, 7, 9, 12, 10, 21, 21]) == False", "def check(issort_list):\n\tassert issort_list([1, 7, 1, 10, 8, 11, 10, 11, 15, 18]) == False", "def check(issort_list):\n\tassert issort_list([4, 4, 4, 6, 7, 8, 9, 17, 15, 22]) == False", "def check(issort_list):\n\tassert issort_list([2, 6, 2, 1, 6, 11, 14, 15, 19, 16]) == False", "def check(issort_list):\n\tassert issort_list([5, 5, 9, 3, 7, 9, 7, 19, 18, 16]) == False", "def check(issort_list):\n\tassert issort_list([5, 3, 2, 8, 11, 13, 8, 13, 18, 16]) == False", "def check(issort_list):\n\tassert issort_list([1, 6, 9, 7, 4, 10, 8, 15, 16, 17]) == False", "def check(issort_list):\n\tassert issort_list([4, 6, 8, 6, 12, 7, 14, 10, 20, 16]) == False", "def check(issort_list):\n\tassert issort_list([4, 1, 2, 5, 7, 10, 9, 17, 14, 13]) == False", "def check(issort_list):\n\tassert issort_list([5, 6, 7, 3, 13, 12, 11, 10, 12, 22]) == False", "def check(issort_list):\n\tassert issort_list([5, 3, 4, 7, 4, 10, 11, 11, 15, 13]) == False", "def check(issort_list):\n\tassert issort_list([6, 3, 7, 9, 10, 11, 16, 13, 13, 17]) == False", "def check(issort_list):\n\tassert issort_list([5, 3, 4, 10, 10, 12, 14, 17, 17, 18]) == False", "def check(issort_list):\n\tassert issort_list([3, 3, 2, 3, 5, 13, 8, 13, 17, 15]) == False", "def check(issort_list):\n\tassert issort_list([2, 3, 5, 1, 6, 6, 12, 16, 11, 15]) == False", "def check(issort_list):\n\tassert issort_list([2, 2, 8, 4, 7, 12, 15, 9, 19, 19]) == False", "def check(issort_list):\n\tassert issort_list([1, 4, 6, 10, 12, 10, 8, 12, 19, 19]) == False", "def check(issort_list):\n\tassert issort_list([2, 7, 8, 11, 3, 9, 10, 15, 15, 21]) == False", "def check(issort_list):\n\tassert issort_list([5, 1, 9, 1, 10, 14, 8, 15, 19, 12]) == False", "def check(issort_list):\n\tassert issort_list([5, 4, 6, 8, 11, 14, 16, 11, 19, 15]) == False", "def check(issort_list):\n\tassert issort_list([3, 3, 5, 3, 5, 14, 13, 12, 13, 19]) == False", "def check(issort_list):\n\tassert issort_list([3, 3, 5, 4, 10, 12, 8, 15, 11, 12]) == False", "def check(issort_list):\n\tassert issort_list([4, 1, 9, 8, 13, 13, 10, 15, 17, 22]) == False", "def check(issort_list):\n\tassert issort_list([2, 6, 7, 2, 7, 9, 11, 16, 13, 16]) == False", "def check(issort_list):\n\tassert issort_list([3, 2, 2, 8, 9, 10, 9, 19, 17, 13]) == False", "def check(issort_list):\n\tassert issort_list([4, 3, 8, 6, 11, 7, 8, 10, 11, 16]) == False", "def check(issort_list):\n\tassert issort_list([1, 7, 1, 5, 11, 13, 14, 17, 20, 15]) == False", "def check(issort_list):\n\tassert issort_list([1, 7, 8, 2, 13, 8, 7, 12, 12, 18]) == False", "def check(issort_list):\n\tassert issort_list([5, 2, 5, 2, 11, 13, 11, 18, 17, 15]) == False", "def check(issort_list):\n\tassert issort_list([2, 1, 9, 7, 5, 12, 12, 19, 11, 13]) == False", "def check(issort_list):\n\tassert issort_list([3, 6, 8, 2, 8, 10, 13, 11, 19, 15]) == False", "def check(issort_list):\n\tassert issort_list([1, 2, 2, 10, 10, 14, 13, 18, 20, 13]) == False", "def check(issort_list):\n\tassert issort_list([3, 2, 7, 2, 6, 10, 9, 17, 21, 22]) == False", "def check(issort_list):\n\tassert issort_list([5, 6, 7, 7, 12, 6, 15, 10, 21, 20]) == False", "def check(issort_list):\n\tassert issort_list([3, 3, 3, 2, 11, 15, 14, 16, 23, 22]) == False", "def check(issort_list):\n\tassert issort_list([6, 2, 9, 1, 13, 12, 11, 9, 20, 17]) == False", "def check(issort_list):\n\tassert issort_list([1, 7, 1, 7, 13, 12, 16, 12, 22, 22]) == False", "def check(issort_list):\n\tassert issort_list([1, 4, 2, 7, 5, 8, 12, 11, 24, 21]) == False", "def check(issort_list):\n\tassert issort_list([6, 4, 1, 11, 3, 9, 9, 17, 23, 19]) == False", "def check(issort_list):\n\tassert issort_list([4, 7, 4, 2, 12, 7, 9, 13, 15, 12]) == False", "def check(issort_list):\n\tassert issort_list([6, 1, 1, 7, 3, 12, 12, 10, 18, 19]) == False", "def check(issort_list):\n\tassert issort_list([4, 4, 5, 11, 9, 10, 9, 17, 15, 15]) == False", "def check(issort_list):\n\tassert issort_list([6, 6, 7, 1, 9, 14, 14, 17, 15, 21]) == False", "def check(issort_list):\n\tassert issort_list([4, 5, 6, 3, 6, 7, 14, 12, 17, 15]) == False", "def check(issort_list):\n\tassert issort_list([5, 6, 8, 4, 10, 8, 9, 10, 22, 18]) == False", "def check(issort_list):\n\tassert issort_list([2, 6, 2, 10, 3, 13, 15, 10, 17, 12]) == False", "def check(issort_list):\n\tassert issort_list([2, 1, 2, 1, 10, 14, 10, 12, 19, 17]) == False", "def check(issort_list):\n\tassert issort_list([1, 4, 9, 3, 8, 14, 10, 9, 18, 15]) == False", "def check(issort_list):\n\tassert issort_list([2, 2, 4, 5, 13, 12, 7, 15, 25, 15]) == False", "def check(issort_list):\n\tassert issort_list([1, 2, 7, 9, 3, 15, 13, 11, 17, 18]) == False", "def check(issort_list):\n\tassert issort_list([2, 4, 7, 1, 11, 5, 14, 9, 22, 21]) == False", "def check(issort_list):\n\tassert issort_list([4, 6, 9, 10, 11, 11, 12, 12, 20, 21]) == True", "def check(issort_list):\n\tassert issort_list([1, 4, 6, 11, 12, 7, 11, 15, 15, 21]) == False", "def check(issort_list):\n\tassert issort_list([2, 1, 8, 9, 10, 5, 16, 12, 20, 17]) == False", "def check(issort_list):\n\tassert issort_list([4, 3, 3, 10, 12, 14, 9, 17, 17, 21]) == False", "def check(issort_list):\n\tassert issort_list([2, 6, 1, 10, 3, 11, 16, 18, 20, 21]) == False", "def check(issort_list):\n\tassert issort_list([3, 4, 9, 1, 4, 12, 17, 19, 25, 12]) == False", "def check(issort_list):\n\tassert issort_list([5, 7, 7, 6, 3, 11, 16, 17, 21, 12]) == False", "def check(issort_list):\n\tassert issort_list([2, 4, 9, 4, 4, 11, 7, 19, 24, 15]) == False", "def check(issort_list):\n\tassert issort_list([2, 6, 3, 10, 6, 11, 15, 9, 19, 19]) == False", "def check(issort_list):\n\tassert issort_list([3, 5, 1, 11, 4, 15, 8, 15, 17, 19]) == False", "def check(issort_list):\n\tassert issort_list([1, 7, 4, 7, 13, 5, 13, 11, 23, 19]) == False", "def check(issort_list):\n\tassert issort_list([5, 7, 8, 4, 11, 15, 17, 12, 20, 19]) == False", "def check(issort_list):\n\tassert issort_list([3, 1, 3, 2, 7, 12, 9, 17, 19, 20]) == False", "def check(issort_list):\n\tassert issort_list([3, 4, 2, 7, 11, 15, 20, 16, 16]) == False", "def check(issort_list):\n\tassert issort_list([5, 4, 2, 10, 3, 15, 14, 11, 21]) == False", "def check(issort_list):\n\tassert issort_list([6, 7, 2, 3, 7, 6, 13, 9, 25]) == False", "def check(issort_list):\n\tassert issort_list([5, 1, 3, 4, 11, 9, 12, 13, 23]) == False", "def check(issort_list):\n\tassert issort_list([4, 1, 5, 4, 7, 6, 11, 14, 16]) == False", "def check(issort_list):\n\tassert issort_list([3, 5, 4, 1, 10, 7, 18, 16, 22]) == False", "def check(issort_list):\n\tassert issort_list([3, 7, 9, 9, 4, 14, 19, 13, 19]) == False", "def check(issort_list):\n\tassert issort_list([5, 4, 5, 7, 13, 11, 10, 9, 23]) == False", "def check(issort_list):\n\tassert issort_list([6, 1, 8, 4, 13, 12, 19, 13, 19]) == False", "def check(issort_list):\n\tassert issort_list([6, 3, 9, 9, 9, 12, 15, 13, 23]) == False", "def check(issort_list):\n\tassert issort_list([5, 4, 4, 6, 7, 10, 11, 14, 23]) == False", "def check(issort_list):\n\tassert issort_list([4, 6, 6, 6, 3, 7, 18, 17, 23]) == False", "def check(issort_list):\n\tassert issort_list([6, 7, 1, 2, 9, 8, 20, 16, 16]) == False", "def check(issort_list):\n\tassert issort_list([2, 6, 9, 1, 4, 13, 17, 18, 21]) == False", "def check(issort_list):\n\tassert issort_list([6, 4, 8, 4, 6, 7, 16, 9, 17]) == False", "def check(issort_list):\n\tassert issort_list([1, 6, 2, 5, 8, 5, 13, 17, 25]) == False", "def check(issort_list):\n\tassert issort_list([5, 3, 8, 5, 7, 11, 15, 11, 22]) == False", "def check(issort_list):\n\tassert issort_list([5, 3, 5, 10, 8, 11, 17, 11, 24]) == False", "def check(issort_list):\n\tassert issort_list([2, 5, 4, 7, 3, 7, 15, 19, 25]) == False", "def check(issort_list):\n\tassert issort_list([5, 4, 9, 5, 8, 15, 16, 19, 15]) == False", "def check(issort_list):\n\tassert issort_list([4, 5, 8, 6, 6, 7, 20, 11, 16]) == False", "def check(issort_list):\n\tassert issort_list([6, 6, 9, 1, 12, 5, 11, 18, 19]) == False", "def check(issort_list):\n\tassert issort_list([4, 4, 5, 4, 3, 14, 13, 14, 19]) == False", "def check(issort_list):\n\tassert issort_list([2, 1, 6, 3, 4, 10, 11, 15, 23]) == False", "def check(issort_list):\n\tassert issort_list([4, 4, 7, 4, 12, 14, 10, 12, 20]) == False", "def check(issort_list):\n\tassert issort_list([4, 2, 1, 8, 11, 6, 11, 9, 25]) == False", "def check(issort_list):\n\tassert issort_list([2, 1, 3, 1, 9, 7, 15, 18, 17]) == False", "def check(issort_list):\n\tassert issort_list([4, 6, 9, 4, 4, 14, 11, 19, 19]) == False", "def check(issort_list):\n\tassert issort_list([5, 5, 6, 6, 6, 15, 10, 11, 23]) == False", "def check(issort_list):\n\tassert issort_list([3, 2, 8, 2, 13, 10, 11, 15, 18]) == False", "def check(issort_list):\n\tassert issort_list([4, 3, 6, 10, 4, 7, 12, 17, 21]) == False", "def check(issort_list):\n\tassert issort_list([5, 1, 8, 2, 4, 14, 12, 16, 16]) == False", "def check(issort_list):\n\tassert issort_list([5, 2, 5, 1, 10, 7, 20, 11, 15]) == False"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, false, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 0, 102, 102], "completion": "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Handle edge cases: empty list or list with a single element\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    is_ascending = all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n    if is_ascending:\n        return True\n\n    # Check if the list is sorted in descending order\n    is_descending = all(lst[i] >= lst[i + 1] for i in range(len(lst) - 1))\n    if is_descending:\n        return True\n\n    # If neither ascending nor descending, return False\n    return False\n", "passed": true, "pass": true, "pass_num": 9, "round": 372, "mutate_method": "rephrase_one", "parent_index": 409}
