{"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 425, "prompt": "Write a function to determine how many sublists contain a specific element. Ensure that your solution efficiently handles large lists and varying input sizes.", "code": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr", "test_imports": [], "test_list": ["assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1", "assert count_element_in_list([[6, 8], [4, 2], [5, 10], [3, 17, 5]], 3) == 1", "assert count_element_in_list([[2, 1], [1, 4], [4, 11], [2, 14, 12]], 6) == 0", "assert count_element_in_list([[3, 6], [7, 4], [5, 15], [4, 18, 4]], 3) == 1", "assert count_element_in_list([[2, 6], [9, 2], [6, 11], [1, 19, 6]], 1) == 1", "assert count_element_in_list([[1, 4], [4, 3], [1, 16], [6, 15, 9]], 6) == 1", "assert count_element_in_list([[4, 2], [7, 7], [1, 7], [6, 18, 5]], 1) == 1", "assert count_element_in_list([[2, 3], [9, 10], [2, 6], [3, 12, 12]], 4) == 0", "assert count_element_in_list([[4, 4], [4, 11], [4, 14], [6, 19, 4]], 3) == 0", "assert count_element_in_list([[3, 6], [4, 2], [4, 13], [4, 13, 12]], 2) == 1", "assert count_element_in_list([[5, 1], [2, 8], [2, 10], [5, 12, 6]], 3) == 0", "assert count_element_in_list([[1, 7], [2, 10], [6, 13], [2, 16, 8]], 4) == 0", "assert count_element_in_list([[5, 4], [1, 12], [3, 16], [3, 18, 6]], 2) == 0", "assert count_element_in_list([[5, 4], [5, 8], [1, 14], [3, 20, 10]], 3) == 1", "assert count_element_in_list([[3, 4], [5, 7], [1, 14], [5, 20, 11]], 5) == 2", "assert count_element_in_list([[3, 6], [6, 2], [6, 15], [1, 11, 3]], 4) == 0", "assert count_element_in_list([[2, 7], [3, 7], [1, 16], [3, 10, 3]], 6) == 0", "assert count_element_in_list([[1, 5], [4, 11], [4, 12], [5, 16, 6]], 1) == 1", "assert count_element_in_list([[6, 5], [4, 7], [3, 12], [2, 10, 3]], 6) == 1", "assert count_element_in_list([[2, 3], [5, 11], [6, 13], [6, 13, 12]], 4) == 0", "assert count_element_in_list([[6, 6], [3, 3], [2, 13], [5, 16, 8]], 5) == 1", "assert count_element_in_list([[1, 6], [7, 12], [5, 16], [5, 14, 4]], 1) == 1", "assert count_element_in_list([[6, 8], [9, 6], [1, 9], [2, 10, 2]], 4) == 0", "assert count_element_in_list([[5, 2], [7, 2], [5, 15], [4, 10, 7]], 4) == 1", "assert count_element_in_list([[4, 1], [6, 5], [4, 15], [1, 20, 2]], 5) == 1", "assert count_element_in_list([[1, 1], [7, 7], [4, 7], [2, 15, 6]], 5) == 0", "assert count_element_in_list([[3, 8], [10, 6], [3, 15], [2, 19, 6]], 6) == 2", "assert count_element_in_list([[5, 5], [3, 11], [3, 15], [3, 10, 8]], 5) == 1", "assert count_element_in_list([[5, 3], [9, 6], [6, 9], [1, 16, 2]], 3) == 1", "assert count_element_in_list([[4, 8], [6, 12], [4, 12], [6, 16, 2]], 2) == 1", "assert count_element_in_list([[3, 1], [2, 10], [1, 11], [4, 15, 9]], 6) == 0", "assert count_element_in_list([[4, 1], [4, 7], [1, 6], [4, 20, 4]], 6) == 1", "assert count_element_in_list([[2, 2], [5, 2], [4, 13], [6, 15, 6]], 5) == 1", "assert count_element_in_list([[1, 5], [6, 3], [4, 6], [4, 17, 12]], 6) == 2", "assert count_element_in_list([['S', 'M'], ['Z', 'Y'], ['M', 'W', 'U'], ['V', 'Y', 'W']], 'R') == 0", "assert count_element_in_list([['P', 'I'], ['I', 'F'], ['E', 'O', 'X'], ['D', 'B', 'T']], 'E') == 1", "assert count_element_in_list([['Y', 'F'], ['A', 'L'], ['Y', 'T', 'V'], ['U', 'D', 'C']], 'Z') == 0", "assert count_element_in_list([['J', 'Z'], ['L', 'H'], ['D', 'Q', 'I'], ['X', 'P', 'O']], 'X') == 1", "assert count_element_in_list([['D', 'O'], ['F', 'S'], ['V', 'F', 'U'], ['S', 'H', 'U']], 'J') == 0", "assert count_element_in_list([['S', 'M'], ['X', 'X'], ['E', 'P', 'Q'], ['P', 'K', 'W']], 'G') == 0", "assert count_element_in_list([['M', 'A'], ['F', 'V'], ['Y', 'F', 'E'], ['B', 'A', 'H']], 'G') == 0", "assert count_element_in_list([['R', 'S'], ['C', 'Z'], ['X', 'J', 'V'], ['V', 'H', 'N']], 'C') == 1", "assert count_element_in_list([['S', 'J'], ['Y', 'Y'], ['D', 'D', 'M'], ['M', 'P', 'R']], 'V') == 0", "assert count_element_in_list([['C', 'T'], ['U', 'J'], ['E', 'Z', 'S'], ['D', 'E', 'K']], 'X') == 0", "assert count_element_in_list([['J', 'G'], ['L', 'G'], ['F', 'U', 'C'], ['H', 'I', 'Z']], 'E') == 0", "assert count_element_in_list([['A', 'B'], ['K', 'H'], ['Z', 'A', 'P'], ['A', 'U', 'L']], 'L') == 1", "assert count_element_in_list([['R', 'X'], ['K', 'D'], ['I', 'W', 'R'], ['Z', 'X', 'W']], 'K') == 1", "assert count_element_in_list([['N', 'N'], ['J', 'Q'], ['N', 'K', 'T'], ['H', 'G', 'L']], 'R') == 0", "assert count_element_in_list([['Z', 'L'], ['H', 'C'], ['J', 'T', 'S'], ['N', 'Z', 'N']], 'E') == 0", "assert count_element_in_list([['F', 'Z'], ['B', 'E'], ['E', 'A', 'Y'], ['H', 'L', 'K']], 'M') == 0", "assert count_element_in_list([['G', 'L'], ['C', 'O'], ['Y', 'M', 'K'], ['V', 'C', 'Y']], 'H') == 0", "assert count_element_in_list([['U', 'X'], ['D', 'W'], ['P', 'G', 'M'], ['F', 'P', 'W']], 'P') == 2", "assert count_element_in_list([['Y', 'Y'], ['A', 'S'], ['K', 'T', 'S'], ['Y', 'B', 'N']], 'H') == 0", "assert count_element_in_list([['Q', 'Q'], ['G', 'U'], ['W', 'G', 'B'], ['C', 'E', 'K']], 'W') == 1", "assert count_element_in_list([['G', 'A'], ['R', 'I'], ['C', 'I', 'F'], ['Q', 'G', 'Q']], 'S') == 0", "assert count_element_in_list([['V', 'Z'], ['F', 'G'], ['O', 'T', 'Z'], ['P', 'E', 'D']], 'S') == 0", "assert count_element_in_list([['V', 'T'], ['C', 'C'], ['N', 'Z', 'T'], ['U', 'Z', 'X']], 'R') == 0", "assert count_element_in_list([['X', 'L'], ['D', 'D'], ['L', 'G', 'X'], ['T', 'S', 'P']], 'N') == 0", "assert count_element_in_list([['L', 'G'], ['N', 'U'], ['C', 'E', 'R'], ['N', 'B', 'O']], 'U') == 1", "assert count_element_in_list([['N', 'S'], ['P', 'G'], ['X', 'Z', 'O'], ['J', 'T', 'U']], 'L') == 0", "assert count_element_in_list([['X', 'K'], ['M', 'M'], ['H', 'I', 'F'], ['A', 'Q', 'L']], 'J') == 0", "assert count_element_in_list([['T', 'Q'], ['I', 'E'], ['Z', 'X', 'W'], ['J', 'X', 'S']], 'R') == 0", "assert count_element_in_list([['M', 'O'], ['W', 'N'], ['U', 'V', 'D'], ['E', 'H', 'A']], 'Y') == 0", "assert count_element_in_list([['X', 'O'], ['N', 'K'], ['Y', 'G', 'C'], ['D', 'Z', 'N']], 'R') == 0", "assert count_element_in_list([['C', 'I'], ['J', 'C'], ['J', 'I', 'K'], ['D', 'F', 'L']], 'B') == 0", "assert count_element_in_list([['T', 'P'], ['W', 'R'], ['P', 'E', 'K'], ['G', 'G', 'S']], 'P') == 2", "assert count_element_in_list([['R', 'B'], ['E', 'J'], ['A', 'U', 'H'], ['M', 'B', 'D']], 'M') == 1", "assert count_element_in_list([['S', 'M'], ['N', 'S'], ['Z', 'D', 'E'], ['E', 'C', 'C']], 'V') == 0", "assert count_element_in_list([['I', 'Q'], ['D', 'B'], ['C', 'C', 'F'], ['D', 'W', 'G']], 'F') == 1", "assert count_element_in_list([['P', 'S'], ['J', 'T'], ['Q', 'B', 'I'], ['L', 'R', 'K']], 'T') == 1", "assert count_element_in_list([['C', 'C'], ['V', 'E'], ['C', 'V', 'A'], ['Y', 'A', 'A']], 'K') == 0", "assert count_element_in_list([['V', 'N'], ['Z', 'R'], ['S', 'Y', 'D'], ['Q', 'H', 'Y']], 'P') == 0", "assert count_element_in_list([['P', 'B'], ['G', 'I'], ['E', 'L', 'U'], ['X', 'H', 'X']], 'K') == 0", "assert count_element_in_list([['K', 'L'], ['H', 'Y'], ['U', 'T', 'R'], ['H', 'S', 'H']], 'Z') == 0", "assert count_element_in_list([['P', 'G'], ['H', 'X'], ['N', 'Z', 'J'], ['P', 'V', 'R']], 'A') == 0", "assert count_element_in_list([['E', 'Q'], ['R', 'V'], ['T', 'F', 'F'], ['M', 'P', 'L']], 'D') == 0", "assert count_element_in_list([['X', 'R'], ['P', 'Q'], ['N', 'Q', 'C'], ['L', 'J', 'O']], 'T') == 0", "assert count_element_in_list([['B', 'I'], ['O', 'N'], ['R', 'U', 'I'], ['U', 'Z', 'Z']], 'Y') == 0", "assert count_element_in_list([['C', 'Z'], ['Z', 'V'], ['Y', 'L', 'E'], ['O', 'E', 'S']], 'C') == 1", "assert count_element_in_list([['S', 'T'], ['P', 'H'], ['P', 'U', 'B'], ['L', 'E', 'Z']], 'T') == 1", "assert count_element_in_list([['Z', 'Q'], ['R', 'I'], ['T', 'L', 'X'], ['B', 'W', 'N']], 'A') == 0", "assert count_element_in_list([['P', 'R'], ['H', 'B'], ['K', 'X', 'J'], ['W', 'Z', 'U']], 'U') == 1", "assert count_element_in_list([['P', 'J'], ['G', 'Q'], ['T', 'P', 'Q'], ['N', 'E', 'Z']], 'T') == 1", "assert count_element_in_list([['Y', 'O'], ['J', 'I'], ['D', 'W', 'Z'], ['Z', 'Y', 'H']], 'L') == 0", "assert count_element_in_list([['O', 'W'], ['Q', 'V'], ['C', 'Z', 'V'], ['V', 'V', 'V']], 'J') == 0", "assert count_element_in_list([['K', 'D'], ['W', 'O'], ['V', 'R', 'M'], ['P', 'Q', 'H']], 'K') == 1", "assert count_element_in_list([['C', 'E'], ['D', 'K'], ['W', 'I', 'Y'], ['W', 'L', 'D']], 'C') == 1", "assert count_element_in_list([['T', 'P'], ['F', 'O'], ['A', 'D', 'Z'], ['H', 'W', 'X']], 'O') == 1", "assert count_element_in_list([['Q', 'A'], ['J', 'O'], ['P', 'Y', 'P'], ['H', 'Z', 'N']], 'U') == 0", "assert count_element_in_list([['F', 'Q'], ['S', 'L'], ['P', 'L', 'Z'], ['F', 'Y', 'P']], 'Z') == 1", "assert count_element_in_list([['A', 'D'], ['D', 'C'], ['H', 'D', 'H'], ['B', 'T', 'E']], 'Y') == 0", "assert count_element_in_list([['M', 'W'], ['M', 'S'], ['L', 'O', 'C'], ['X', 'X', 'M']], 'E') == 0", "assert count_element_in_list([['Q', 'A'], ['H', 'C'], ['X', 'V', 'J'], ['M', 'J', 'B']], 'P') == 0", "assert count_element_in_list([['M', 'A'], ['F', 'T'], ['C', 'E', 'G'], ['P', 'O', 'C']], 'C') == 2", "assert count_element_in_list([['F', 'F'], ['O', 'I'], ['S', 'F', 'M'], ['Y', 'R', 'F']], 'D') == 0", "assert count_element_in_list([['O', 'U'], ['K', 'R'], ['Z', 'O', 'A'], ['A', 'M', 'O']], 'H') == 0", "assert count_element_in_list([['Q', 'R'], ['U', 'N'], ['V', 'N', 'E'], ['L', 'Y', 'A']], 'S') == 0", "assert count_element_in_list([['Z', 'K'], ['M', 'T'], ['T', 'G', 'X'], ['Y', 'L', 'N']], 'Z') == 1", "assert count_element_in_list([['A', 'P'], ['J', 'P'], ['P', 'D', 'O'], ['K', 'C', 'R']], 'Q') == 0", "assert count_element_in_list([['Y', 'Y'], ['Z', 'P'], ['T', 'C', 'C'], ['Z', 'G', 'A']], 'T') == 1"], "entry_point": "count_element_in_list", "repair_prompt": ["Write a function count_element_in_list to determine how many sublists contain a specific element. Ensure that your solution efficiently handles large lists and varying input sizes.\ncount_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n", "Write a function count_element_in_list to determine how many sublists contain a specific element. Ensure that your solution is capable of efficiently handling large lists. It should also manage varying input sizes effectively.\ncount_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n", "Write a function count_element_in_list to determine how many sublists contain a specific element, ensuring that your solution efficiently handles large lists and varying input sizes.\ncount_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n"], "completions": ["from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    \"\"\"\n    Count the number of sublists containing a specific element.\n\n    Parameters:\n    sublists (list[list[int]]): A list of sublists to be checked.\n    element (int): The element to count in the sublists.\n\n    Returns:\n    int: The number of sublists containing the element.\n    \"\"\"\n    # Initialize the count to zero\n    count = 0\n    \n    # Iterate over each sublist in the main list\n    for sublist in sublists:\n        # Check if the specific element is present in the sublist\n        if element in sublist:\n            # Increment the count if the element is found\n            count += 1\n    \n    # Return the final count of sublists containing the element\n    return count\n", "from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    \"\"\"\n    Count how many sublists contain the specific element.\n\n    Parameters:\n    sublists (list[list[int]]): A list of sublists containing integers.\n    element (int): The element to search for in the sublists.\n\n    Returns:\n    int: The number of sublists containing the element.\n    \"\"\"\n    # Use list comprehension to iterate over each sublist and check for the element\n    count = sum(1 for sublist in sublists if element in sublist)\n    return count\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(count_element_in_list([], 1))  # Expected output: 0\n    print(count_element_in_list([[1, 2], [3, 4], [5, 6]], 7))  # Expected output: 0\n    print(count_element_in_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))  # Expected output: 1\n", "from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    '''\n    Count how many sublists contain the specific element.\n    \n    Parameters:\n    sublists (list[list[int]]): A list of sublists containing integers.\n    element (int): The element to search for in the sublists.\n    \n    Returns:\n    int: The number of sublists containing the element.\n    '''\n    # Initialize a counter to keep track of the number of sublists containing the element\n    count = 0\n    \n    # Iterate over each sublist in the list of sublists\n    for sublist in sublists:\n        # Use the 'any' function to check if the element is present in the current sublist\n        if any(item == element for item in sublist):\n            # Increment the counter if the element is found\n            count += 1\n    \n    # Return the final count of sublists containing the element\n    return count\n", "from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    \"\"\"\n    Counts how many sublists contain the specified element.\n\n    Parameters:\n    sublists (list of list of int): A list containing sublists of integers.\n    element (int): The element to count in the sublists.\n\n    Returns:\n    int: The number of sublists containing the element.\n    \"\"\"\n    # Use list comprehension to check presence of element in each sublist\n    # Sum up the boolean values (True = 1, False = 0) to get the count\n    return sum(element in sublist for sublist in sublists)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(count_element_in_list([], 1))  # Expected output: 0\n    print(count_element_in_list([[1, 2], [3, 4], [5, 6]], 7))  # Expected output: 0\n    print(count_element_in_list([[1, 1], [1, 1], [1, 1]], 1))  # Expected output: 3\n", "from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    \"\"\"\n    Counts how many sublists contain the specified element.\n\n    Parameters:\n    sublists (list of list of int): A list containing sublists of integers.\n    element (int): The element to search for in each sublist.\n\n    Returns:\n    int: The number of sublists that contain the specified element.\n    \"\"\"\n    # Initialize a counter to keep track of sublists containing the element\n    count = 0\n\n    # Iterate over each sublist in the main list\n    for sublist in sublists:\n        # Check if the element is present in the current sublist\n        if element in sublist:\n            # Increment the counter if the element is found\n            count += 1\n\n    # Return the total count of sublists containing the element\n    return count\n\n# Example usage:\n# print(count_element_in_list([[1, 2], [3, 4], [1, 5]], 1))  # Output: 2\n# print(count_element_in_list([[1, 2], [3, 4], [5, 6]], 7))  # Output: 0\n# print(count_element_in_list([], 1))  # Output: 0\n", "from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    \"\"\"\n    Count how many sublists contain the specified element.\n\n    Parameters:\n    sublists (list of list of int): A list containing sublists of integers.\n    element (int): The element to search for in the sublists.\n\n    Returns:\n    int: The number of sublists that contain the specified element.\n    \"\"\"\n    # Use list comprehension to iterate over each sublist and count occurrences of the element\n    count = sum(1 for sublist in sublists if element in sublist)\n    return count\n\n# Example usage:\n# result = count_element_in_list([[1, 2], [1, 3], [1, 4]], 1)\n# print(result)  # Output: 3\n", "from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    \"\"\"\n    Count how many sublists contain the specified element.\n\n    Parameters:\n    sublists (list[list[int]]): A list of sublists where each sublist is a list of integers.\n    element (int): The element to search for in the sublists.\n\n    Returns:\n    int: The number of sublists containing the specified element.\n    \"\"\"\n    # Initialize a counter to keep track of the number of sublists containing the element\n    count = 0\n    \n    # Iterate over each sublist in the main list\n    for sublist in sublists:\n        # Check if the element is present in the current sublist\n        if element in sublist:\n            # Increment the counter if the element is found\n            count += 1\n    \n    # Return the final count of sublists containing the element\n    return count\n", "from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    \"\"\"\n    Count the number of sublists containing a specific element.\n\n    Parameters:\n    sublists (list of list of int): A list containing sublists of integers.\n    element (int): The element to search for in the sublists.\n\n    Returns:\n    int: The number of sublists containing the specified element.\n    \"\"\"\n    # Initialize a counter to keep track of the number of sublists containing the element\n    count = 0\n\n    # Iterate over each sublist in the main list\n    for sublist in sublists:\n        # Check if the specific element is present in the current sublist\n        if element in sublist:\n            # Increment the counter if the element is found\n            count += 1\n\n    # Return the total count of sublists containing the element\n    return count\n", "from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    \"\"\"\n    Counts how many sublists contain the specified element.\n\n    Parameters:\n    sublists (list[list[int]]): A list of sublists containing integers.\n    element (int): The element to search for within the sublists.\n\n    Returns:\n    int: The number of sublists containing the specified element.\n    \"\"\"\n    # Initialize a counter to zero\n    count = 0\n    \n    # Iterate over each sublist in the main list\n    for sublist in sublists:\n        # Check if the specific element is present in the sublist\n        if element in sublist:\n            # Increment the counter if the element is found\n            count += 1\n    \n    # Return the final count after checking all sublists\n    return count\n", "from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    \"\"\"\n    Count how many sublists contain the specified element.\n\n    Parameters:\n    sublists (list of list of int): A list containing sublists of integers.\n    element (int): The element to search for in each sublist.\n\n    Returns:\n    int: The number of sublists containing the specified element.\n    \"\"\"\n    # Use a generator expression to iterate over each sublist and check for the element\n    return sum(1 for sublist in sublists if element in sublist)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(count_element_in_list([], 1))  # Expected output: 0\n    print(count_element_in_list([[2, 3], [4, 5]], 1))  # Expected output: 0\n    print(count_element_in_list([[1], [1, 2], [3, 1]], 1))  # Expected output: 3\n"], "plans": ["requirement analysis:\nThe function should efficiently count the number of sublists containing a specific element, even with large and complex lists. It should be optimized for performance and accuracy, ensuring it can handle varying input sizes without degradation in speed.\nrequirement pool:\n- Efficiently count sublists containing a specific element.\n- Optimize for large list performance.\n- Ensure accuracy in counting.\n- Provide clear documentation for integration.\n- Maintain simplicity in function usage.\nWe will implement a function using Python's built-in capabilities to efficiently count sublists containing a specific element. The function will leverage list comprehension for concise and efficient iteration over sublists. Given the requirement for handling large datasets, the function will be optimized to minimize time complexity by using direct iteration and conditional checks. No additional libraries are necessary as Python's native capabilities are sufficient for this task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, 'sublists' refers to the individual lists contained within a larger list. Each sublist is a separate list that can contain multiple elements.\n\n    'specific element'\n    Explanation: This refers to the element that we are searching for within each sublist. The task is to count how many sublists contain this specific element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `count_element_in_list` that takes two parameters: a list of sublists and the specific element to search for.\n    2. Use list comprehension to iterate over each sublist in the main list.\n    3. For each sublist, check if the specific element is present using the `in` keyword.\n    4. Count the number of sublists where the specific element is found.\n    5. Return the count.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: The main list is empty, so there are no sublists to check, resulting in a count of 0.\n\n    count_element_in_list([[2, 3], [4, 5]], 1) = 0\n    Explanation: The specific element (1) is not present in any of the sublists, so the count is 0.\n\n    count_element_in_list([[1], [1, 2], [3, 1]], 1) = 3\n    Explanation: The specific element (1) is present in all three sublists, so the count is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and checking for the presence of the specific element will naturally handle these cases.\n", "requirement analysis:\nThe function needs to efficiently count occurrences of a specific element within sublists, ensuring performance is maintained across large datasets and varying input sizes.\nrequirement pool:\n- Efficiently count occurrences of an element in sublists\n- Handle large lists without performance degradation\n- Ensure accuracy across varying input sizes\n- Optimize for quick execution\n- Provide clear documentation for usage\nWe will use Python's built-in list comprehension to efficiently iterate over the list of sublists and count occurrences of the specific element. This approach is simple and effective for handling large datasets without the need for additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, a sublist refers to a list that is an element of another list. The task is to count how many of these sublists contain a specific element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `count_element_in_list` that takes two parameters: a list of sublists and the specific element to search for.\n    2. Use a list comprehension to iterate over each sublist in the main list.\n    3. For each sublist, check if the specific element is present.\n    4. Count the number of sublists where the specific element is found.\n    5. Return the count.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: An empty list has no sublists, so the count of sublists containing the element is 0.\n    \n    count_element_in_list([[1, 2], [3, 4], [5, 6]], 7) = 0\n    Explanation: The element 7 is not present in any of the sublists, so the count is 0.\n    \n    count_element_in_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) = 1\n    Explanation: The element 1 is present in only one sublist, so the count is 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and checking for the presence of the element will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently count occurrences of a specific element within sublists, ensuring performance is optimized for large datasets and varying input sizes.\nrequirement pool:\n- Efficiently handle large lists\n- Accurately count occurrences of the element\n- Optimize for quick execution\n- Ensure compatibility with varying input sizes\n- Provide clear documentation\nWe will use Python's built-in functions and list comprehensions to efficiently count occurrences of a specific element within sublists. The approach will leverage the 'any' function to check for the presence of the element in each sublist, ensuring quick execution even for large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, sublists refer to the lists contained within a larger list. The task is to count how many of these sublists contain a specific element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `count_element_in_list` that takes two arguments: a list of sublists and the element to search for.\n    2. Use a list comprehension to iterate over each sublist in the main list.\n    3. For each sublist, use the `any` function to check if the element is present.\n    4. Count the number of sublists where the element is found.\n    5. Return the count.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: An empty list has no sublists, so the expected output is 0.\n    \n    count_element_in_list([[2, 3], [4, 5], [6, 7]], 1) = 0\n    Explanation: The element 1 does not appear in any of the sublists, so the expected output is 0.\n    \n    count_element_in_list([[1], [1, 2], [3, 1]], 1) = 3\n    Explanation: The element 1 appears in all three sublists, so the expected output is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using list comprehension and `any` function will naturally handle these cases.\n", "requirement analysis:\nThe function needs to efficiently count occurrences of a specific element within sublists, ensuring it can handle large lists and varying input sizes without performance degradation.\nrequirement pool:\n- Efficiently count occurrences in sublists\n- Handle large lists without performance issues\n- Ensure scalability for varying input sizes\n- Provide accurate results\n- Optimize for future enhancements\nWe will implement a function that iterates through the list of sublists and checks for the presence of the specified element in each sublist. To efficiently handle large lists, we will use Python's built-in functions and avoid unnecessary computations. The function will be simple and leverage Python's list comprehension for concise and efficient processing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, sublists refer to lists that are elements within a larger list. Each sublist can contain multiple elements.\n\n    'specific element'\n    Explanation: This refers to the element we are searching for within each sublist to determine how many sublists contain it.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `count_element_in_list` that takes two arguments: a list of sublists and the specific element to search for.\n    2. Use a list comprehension to iterate through each sublist and check if the specific element is present.\n    3. Count the number of sublists that contain the specific element using the `sum` function.\n    4. Return the count.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: The list is empty, so there are no sublists to check, resulting in a count of 0.\n\n    count_element_in_list([[1, 2], [3, 4], [5, 6]], 7) = 0\n    Explanation: The specific element (7) is not present in any of the sublists, so the count is 0.\n\n    count_element_in_list([[1, 1], [1, 1], [1, 1]], 1) = 3\n    Explanation: The specific element (1) is present in all sublists, so the count is equal to the number of sublists, which is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using list comprehension and sum will naturally handle these cases efficiently.\n", "requirement analysis:\nThe function should efficiently count occurrences of a specific element across sublists, ensuring performance does not degrade with larger lists or varying input sizes.\nrequirement pool:\n- Efficiently count occurrences of an element in sublists\n- Handle large lists without performance degradation\n- Optimize for varying input sizes\n- Ensure accurate results\n- Provide clear documentation\nWe will implement a function named count_element_in_list that iterates through each sublist and checks for the presence of a specific element. To efficiently handle large lists, we will use Python's built-in functions and list comprehensions, which are optimized for performance. This approach ensures that the function can scale with varying input sizes without significant performance degradation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, a sublist refers to each individual list within the main list. The task is to check each of these sublists for the presence of a specific element.\n\n    'specific element'\n    Explanation: This refers to the element we are searching for within each sublist. The function should count how many sublists contain this element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `count_element_in_list` that takes two parameters: a list of lists (`sublists`) and the `element` to search for.\n    2. Initialize a counter variable to zero to keep track of how many sublists contain the specific element.\n    3. Iterate through each sublist in the main list.\n    4. For each sublist, check if the specific element is present.\n    5. If the element is found in a sublist, increment the counter by one.\n    6. After checking all sublists, return the counter value as the result.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: An empty list means there are no sublists to check, so the expected output is 0.\n\n    count_element_in_list([[1, 2], [3, 4], [5, 6]], 7) = 0\n    Explanation: The element 7 is not present in any of the sublists, so the expected output is 0.\n\n    count_element_in_list([[1, 2], [1, 2], [1, 2]], 1) = 3\n    Explanation: The element 1 is present in all three sublists, so the expected output is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and checking for the presence of the specific element will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently count occurrences of a specific element within sublists, ensuring scalability and performance optimization for large datasets and varying input sizes.\nrequirement pool:\n- Efficiently count occurrences of an element in sublists\n- Ensure scalability for large datasets\n- Optimize performance for varying input sizes\n- Provide accurate results\n- Maintain simplicity in implementation\nWe will use Python's built-in list comprehension to efficiently iterate over the list of sublists and count how many of them contain the specified element. This approach is chosen for its simplicity and efficiency, which aligns well with the requirement to handle large datasets and varying input sizes effectively.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, a sublist refers to a list that is contained within another list. The task is to count how many of these sublists contain a specific element.\n\n    'specific element'\n    Explanation: This refers to the element that we are checking for within each sublist. The function should count how many sublists contain this element.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    'efficiently'\n    Explanation: The requirement emphasizes the need for the solution to handle large lists efficiently, meaning the solution should be optimized for performance and not have unnecessary computational overhead.\n\n# [code logic]\n    1. Define the function `count_element_in_list` that takes two parameters: a list of sublists and the specific element to search for.\n    2. Use a list comprehension to iterate over each sublist in the main list.\n    3. For each sublist, check if the specific element is present.\n    4. Count the number of sublists that contain the specific element.\n    5. Return the count.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: An empty list of sublists means there are no sublists to check, so the expected output is 0.\n\n    count_element_in_list([[1, 2], [3, 4], [5, 6]], 7) = 0\n    Explanation: The specific element (7) is not present in any of the sublists, so the expected output is 0.\n\n    count_element_in_list([[1, 2], [1, 3], [1, 4]], 1) = 3\n    Explanation: The specific element (1) is present in all three sublists, so the expected output is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using list comprehension will naturally handle these cases by iterating over all sublists and counting occurrences of the specific element.\n", "requirement analysis:\nThe function should efficiently count occurrences of a specific element within sublists, ensuring scalability and accuracy across varying input sizes.\nrequirement pool:\n- Efficiently handle large lists\n- Accurately count occurrences in sublists\n- Optimize for performance\n- Ensure scalability\n- Provide clear documentation\nWe will implement a function named count_element_in_list that iterates over each sublist and checks for the presence of the specified element. To ensure efficiency, especially with large lists, we will use a generator expression to minimize memory usage. This approach will allow us to efficiently count the sublists containing the element without storing unnecessary data.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, a sublist refers to each individual list within the main list. The task is to check each of these sublists for the presence of a specific element.\n\n    'specific element'\n    Explanation: This refers to the element we are searching for within each sublist. The function should count how many sublists contain this element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `count_element_in_list` that takes two parameters: a list of lists (`main_list`) and the `element` to search for.\n    2. Initialize a counter variable to zero to keep track of the number of sublists containing the element.\n    3. Use a generator expression to iterate over each sublist in `main_list`.\n    4. For each sublist, check if the `element` is present.\n    5. If the element is found in a sublist, increment the counter.\n    6. Return the final count.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: An empty list has no sublists, so the expected output is 0.\n    \n    count_element_in_list([[1, 2], [3, 4], [5, 6]], 7) = 0\n    Explanation: The element 7 is not present in any of the sublists, so the expected output is 0.\n    \n    count_element_in_list([[1, 2], [1, 2], [1, 2]], 1) = 3\n    Explanation: The element 1 is present in all three sublists, so the expected output is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and checking for the presence of the element will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently count the number of sublists containing a specific element, with a focus on performance and scalability. It should be easy to integrate and understand, with clear documentation.\nrequirement pool:\n- Efficiently count sublists containing a specific element\n- Handle large lists without performance degradation\n- Provide clear and concise documentation\n- Ensure code readability and maintainability\n- Allow easy integration into existing projects\nWe will implement a simple and efficient function using Python's built-in capabilities to count the number of sublists containing a specific element. The function will iterate over the list of sublists and use the 'in' keyword to check for the presence of the element in each sublist. This approach is both efficient and easy to understand, making it suitable for large datasets. We will ensure the function is well-documented and easy to integrate into existing projects.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, 'sublists' refers to the individual lists contained within a larger list. Each sublist is a separate list that can contain multiple elements.\n\n    'specific element'\n    Explanation: This refers to the element we are searching for within each sublist. The function needs to determine how many sublists contain this particular element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `count_element_in_list` that takes two parameters: a list of sublists and the specific element to search for.\n    2. Initialize a counter variable to zero.\n    3. Iterate over each sublist in the main list.\n    4. Use the 'in' keyword to check if the specific element is present in the current sublist.\n    5. If the element is found, increment the counter.\n    6. After iterating through all sublists, return the counter value.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: The main list is empty, so there are no sublists to check, resulting in a count of 0.\n\n    count_element_in_list([[1, 2], [3, 4], [5, 6]], 7) = 0\n    Explanation: The specific element (7) is not present in any of the sublists, so the count is 0.\n\n    count_element_in_list([[1, 1], [1], [1, 2, 3]], 1) = 3\n    Explanation: The specific element (1) is present in all three sublists, so the count is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and checking for the presence of the element using 'in' naturally handles these cases.\n", "requirement analysis:\nThe function should efficiently count the number of sublists containing a specific element, ensuring scalability and accuracy across varying input sizes. It should be optimized for performance to handle large lists without compromising speed or accuracy.\nrequirement pool:\n- Efficiently handle large lists\n- Provide accurate results for varying input sizes\n- Optimize performance for scalability\n- Ensure easy integration into existing systems\n- Maintain simplicity in usage\nWe will use Python's built-in functionalities to efficiently iterate over the list of sublists and count occurrences of the specified element. The solution will leverage list comprehensions for concise and efficient processing, ensuring scalability and accuracy for large lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, sublists refer to the lists contained within a larger list. The task is to count how many of these sublists contain a specific element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Initialize a counter to zero.\n    - Iterate over each sublist in the main list.\n    - For each sublist, check if the specific element is present.\n    - If the element is found, increment the counter.\n    - Return the final count after checking all sublists.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: An empty list has no sublists, so the expected output is 0.\n    \n    count_element_in_list([[1, 2], [3, 4], [5, 6]], 7) = 0\n    Explanation: The element 7 does not appear in any sublist, so the expected output is 0.\n    \n    count_element_in_list([[1], [1], [1]], 1) = 3\n    Explanation: The element 1 appears in all sublists, so the expected output is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and checking for the presence of the element will naturally handle these cases.\n", "requirement analysis:\nThe function needs to efficiently count occurrences of a specific element within sublists, ensuring performance does not degrade with large datasets. It should be optimized for speed and accuracy.\nrequirement pool:\n- Efficiently handle large lists\n- Accurately count occurrences of the element\n- Optimize for quick execution\n- Ensure compatibility with varying input sizes\n- Provide clear documentation\nWe will implement a function named count_element_in_list that iterates through each sublist and checks for the presence of the specified element. To ensure efficiency, we will use Python's built-in sum function combined with a generator expression to count the sublists containing the element. This approach minimizes memory usage and optimizes performance for large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublists'\n    Explanation: In the requirement, sublists refer to the individual lists contained within a larger list. Each sublist is a separate list that can contain multiple elements.\n\n    'specific element'\n    Explanation: This refers to the element we are searching for within each sublist. The task is to count how many sublists contain this specific element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function count_element_in_list that takes two arguments: a list of sublists and the specific element to search for.\n    2. Use a generator expression within the sum function to iterate over each sublist.\n    3. For each sublist, check if the specific element is present using the 'in' keyword.\n    4. Sum the results of the generator expression to get the total count of sublists containing the specific element.\n    5. Return the total count.\n\n# [edge case] \n    count_element_in_list([], 1) = 0\n    Explanation: The list is empty, so there are no sublists to check, resulting in a count of 0.\n\n    count_element_in_list([[2, 3], [4, 5]], 1) = 0\n    Explanation: None of the sublists contain the element '1', so the expected output is 0.\n\n    count_element_in_list([[1], [1, 2], [3, 1]], 1) = 3\n    Explanation: All three sublists contain the element '1', so the expected output is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a generator expression and sum function will naturally handle these cases.\n"], "test": ["def check(count_element_in_list):\n\tassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3", "def check(count_element_in_list):\n\tassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3", "def check(count_element_in_list):\n\tassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1", "def check(count_element_in_list):\n\tassert count_element_in_list([[6, 8], [4, 2], [5, 10], [3, 17, 5]], 3) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[2, 1], [1, 4], [4, 11], [2, 14, 12]], 6) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[3, 6], [7, 4], [5, 15], [4, 18, 4]], 3) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[2, 6], [9, 2], [6, 11], [1, 19, 6]], 1) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[1, 4], [4, 3], [1, 16], [6, 15, 9]], 6) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[4, 2], [7, 7], [1, 7], [6, 18, 5]], 1) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[2, 3], [9, 10], [2, 6], [3, 12, 12]], 4) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[4, 4], [4, 11], [4, 14], [6, 19, 4]], 3) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[3, 6], [4, 2], [4, 13], [4, 13, 12]], 2) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[5, 1], [2, 8], [2, 10], [5, 12, 6]], 3) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[1, 7], [2, 10], [6, 13], [2, 16, 8]], 4) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[5, 4], [1, 12], [3, 16], [3, 18, 6]], 2) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[5, 4], [5, 8], [1, 14], [3, 20, 10]], 3) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[3, 4], [5, 7], [1, 14], [5, 20, 11]], 5) == 2", "def check(count_element_in_list):\n\tassert count_element_in_list([[3, 6], [6, 2], [6, 15], [1, 11, 3]], 4) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[2, 7], [3, 7], [1, 16], [3, 10, 3]], 6) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[1, 5], [4, 11], [4, 12], [5, 16, 6]], 1) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[6, 5], [4, 7], [3, 12], [2, 10, 3]], 6) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[2, 3], [5, 11], [6, 13], [6, 13, 12]], 4) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[6, 6], [3, 3], [2, 13], [5, 16, 8]], 5) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[1, 6], [7, 12], [5, 16], [5, 14, 4]], 1) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[6, 8], [9, 6], [1, 9], [2, 10, 2]], 4) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[5, 2], [7, 2], [5, 15], [4, 10, 7]], 4) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[4, 1], [6, 5], [4, 15], [1, 20, 2]], 5) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[1, 1], [7, 7], [4, 7], [2, 15, 6]], 5) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[3, 8], [10, 6], [3, 15], [2, 19, 6]], 6) == 2", "def check(count_element_in_list):\n\tassert count_element_in_list([[5, 5], [3, 11], [3, 15], [3, 10, 8]], 5) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[5, 3], [9, 6], [6, 9], [1, 16, 2]], 3) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[4, 8], [6, 12], [4, 12], [6, 16, 2]], 2) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[3, 1], [2, 10], [1, 11], [4, 15, 9]], 6) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[4, 1], [4, 7], [1, 6], [4, 20, 4]], 6) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[2, 2], [5, 2], [4, 13], [6, 15, 6]], 5) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[1, 5], [6, 3], [4, 6], [4, 17, 12]], 6) == 2", "def check(count_element_in_list):\n\tassert count_element_in_list([['S', 'M'], ['Z', 'Y'], ['M', 'W', 'U'], ['V', 'Y', 'W']], 'R') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['P', 'I'], ['I', 'F'], ['E', 'O', 'X'], ['D', 'B', 'T']], 'E') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['Y', 'F'], ['A', 'L'], ['Y', 'T', 'V'], ['U', 'D', 'C']], 'Z') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['J', 'Z'], ['L', 'H'], ['D', 'Q', 'I'], ['X', 'P', 'O']], 'X') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['D', 'O'], ['F', 'S'], ['V', 'F', 'U'], ['S', 'H', 'U']], 'J') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['S', 'M'], ['X', 'X'], ['E', 'P', 'Q'], ['P', 'K', 'W']], 'G') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['M', 'A'], ['F', 'V'], ['Y', 'F', 'E'], ['B', 'A', 'H']], 'G') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['R', 'S'], ['C', 'Z'], ['X', 'J', 'V'], ['V', 'H', 'N']], 'C') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['S', 'J'], ['Y', 'Y'], ['D', 'D', 'M'], ['M', 'P', 'R']], 'V') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['C', 'T'], ['U', 'J'], ['E', 'Z', 'S'], ['D', 'E', 'K']], 'X') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['J', 'G'], ['L', 'G'], ['F', 'U', 'C'], ['H', 'I', 'Z']], 'E') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['A', 'B'], ['K', 'H'], ['Z', 'A', 'P'], ['A', 'U', 'L']], 'L') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['R', 'X'], ['K', 'D'], ['I', 'W', 'R'], ['Z', 'X', 'W']], 'K') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['N', 'N'], ['J', 'Q'], ['N', 'K', 'T'], ['H', 'G', 'L']], 'R') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['Z', 'L'], ['H', 'C'], ['J', 'T', 'S'], ['N', 'Z', 'N']], 'E') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['F', 'Z'], ['B', 'E'], ['E', 'A', 'Y'], ['H', 'L', 'K']], 'M') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['G', 'L'], ['C', 'O'], ['Y', 'M', 'K'], ['V', 'C', 'Y']], 'H') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['U', 'X'], ['D', 'W'], ['P', 'G', 'M'], ['F', 'P', 'W']], 'P') == 2", "def check(count_element_in_list):\n\tassert count_element_in_list([['Y', 'Y'], ['A', 'S'], ['K', 'T', 'S'], ['Y', 'B', 'N']], 'H') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['Q', 'Q'], ['G', 'U'], ['W', 'G', 'B'], ['C', 'E', 'K']], 'W') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['G', 'A'], ['R', 'I'], ['C', 'I', 'F'], ['Q', 'G', 'Q']], 'S') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['V', 'Z'], ['F', 'G'], ['O', 'T', 'Z'], ['P', 'E', 'D']], 'S') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['V', 'T'], ['C', 'C'], ['N', 'Z', 'T'], ['U', 'Z', 'X']], 'R') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['X', 'L'], ['D', 'D'], ['L', 'G', 'X'], ['T', 'S', 'P']], 'N') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['L', 'G'], ['N', 'U'], ['C', 'E', 'R'], ['N', 'B', 'O']], 'U') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['N', 'S'], ['P', 'G'], ['X', 'Z', 'O'], ['J', 'T', 'U']], 'L') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['X', 'K'], ['M', 'M'], ['H', 'I', 'F'], ['A', 'Q', 'L']], 'J') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['T', 'Q'], ['I', 'E'], ['Z', 'X', 'W'], ['J', 'X', 'S']], 'R') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['M', 'O'], ['W', 'N'], ['U', 'V', 'D'], ['E', 'H', 'A']], 'Y') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['X', 'O'], ['N', 'K'], ['Y', 'G', 'C'], ['D', 'Z', 'N']], 'R') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['C', 'I'], ['J', 'C'], ['J', 'I', 'K'], ['D', 'F', 'L']], 'B') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['T', 'P'], ['W', 'R'], ['P', 'E', 'K'], ['G', 'G', 'S']], 'P') == 2", "def check(count_element_in_list):\n\tassert count_element_in_list([['R', 'B'], ['E', 'J'], ['A', 'U', 'H'], ['M', 'B', 'D']], 'M') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['S', 'M'], ['N', 'S'], ['Z', 'D', 'E'], ['E', 'C', 'C']], 'V') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['I', 'Q'], ['D', 'B'], ['C', 'C', 'F'], ['D', 'W', 'G']], 'F') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['P', 'S'], ['J', 'T'], ['Q', 'B', 'I'], ['L', 'R', 'K']], 'T') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['C', 'C'], ['V', 'E'], ['C', 'V', 'A'], ['Y', 'A', 'A']], 'K') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['V', 'N'], ['Z', 'R'], ['S', 'Y', 'D'], ['Q', 'H', 'Y']], 'P') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['P', 'B'], ['G', 'I'], ['E', 'L', 'U'], ['X', 'H', 'X']], 'K') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['K', 'L'], ['H', 'Y'], ['U', 'T', 'R'], ['H', 'S', 'H']], 'Z') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['P', 'G'], ['H', 'X'], ['N', 'Z', 'J'], ['P', 'V', 'R']], 'A') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['E', 'Q'], ['R', 'V'], ['T', 'F', 'F'], ['M', 'P', 'L']], 'D') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['X', 'R'], ['P', 'Q'], ['N', 'Q', 'C'], ['L', 'J', 'O']], 'T') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['B', 'I'], ['O', 'N'], ['R', 'U', 'I'], ['U', 'Z', 'Z']], 'Y') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['C', 'Z'], ['Z', 'V'], ['Y', 'L', 'E'], ['O', 'E', 'S']], 'C') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['S', 'T'], ['P', 'H'], ['P', 'U', 'B'], ['L', 'E', 'Z']], 'T') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['Z', 'Q'], ['R', 'I'], ['T', 'L', 'X'], ['B', 'W', 'N']], 'A') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['P', 'R'], ['H', 'B'], ['K', 'X', 'J'], ['W', 'Z', 'U']], 'U') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['P', 'J'], ['G', 'Q'], ['T', 'P', 'Q'], ['N', 'E', 'Z']], 'T') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['Y', 'O'], ['J', 'I'], ['D', 'W', 'Z'], ['Z', 'Y', 'H']], 'L') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['O', 'W'], ['Q', 'V'], ['C', 'Z', 'V'], ['V', 'V', 'V']], 'J') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['K', 'D'], ['W', 'O'], ['V', 'R', 'M'], ['P', 'Q', 'H']], 'K') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['C', 'E'], ['D', 'K'], ['W', 'I', 'Y'], ['W', 'L', 'D']], 'C') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['T', 'P'], ['F', 'O'], ['A', 'D', 'Z'], ['H', 'W', 'X']], 'O') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['Q', 'A'], ['J', 'O'], ['P', 'Y', 'P'], ['H', 'Z', 'N']], 'U') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['F', 'Q'], ['S', 'L'], ['P', 'L', 'Z'], ['F', 'Y', 'P']], 'Z') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['A', 'D'], ['D', 'C'], ['H', 'D', 'H'], ['B', 'T', 'E']], 'Y') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['M', 'W'], ['M', 'S'], ['L', 'O', 'C'], ['X', 'X', 'M']], 'E') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['Q', 'A'], ['H', 'C'], ['X', 'V', 'J'], ['M', 'J', 'B']], 'P') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['M', 'A'], ['F', 'T'], ['C', 'E', 'G'], ['P', 'O', 'C']], 'C') == 2", "def check(count_element_in_list):\n\tassert count_element_in_list([['F', 'F'], ['O', 'I'], ['S', 'F', 'M'], ['Y', 'R', 'F']], 'D') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['O', 'U'], ['K', 'R'], ['Z', 'O', 'A'], ['A', 'M', 'O']], 'H') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['Q', 'R'], ['U', 'N'], ['V', 'N', 'E'], ['L', 'Y', 'A']], 'S') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['Z', 'K'], ['M', 'T'], ['T', 'G', 'X'], ['Y', 'L', 'N']], 'Z') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['A', 'P'], ['J', 'P'], ['P', 'D', 'O'], ['K', 'C', 'R']], 'Q') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['Y', 'Y'], ['Z', 'P'], ['T', 'C', 'C'], ['Z', 'G', 'A']], 'T') == 1"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list[list[int]], element: int) -> int:\n    \"\"\"\n    Count how many sublists contain the specified element.\n\n    Parameters:\n    sublists (list of list of int): A list containing sublists of integers.\n    element (int): The element to search for in each sublist.\n\n    Returns:\n    int: The number of sublists containing the specified element.\n    \"\"\"\n    # Use a generator expression to iterate over each sublist and check for the element\n    return sum(1 for sublist in sublists if element in sublist)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(count_element_in_list([], 1))  # Expected output: 0\n    print(count_element_in_list([[2, 3], [4, 5]], 1))  # Expected output: 0\n    print(count_element_in_list([[1], [1, 2], [3, 1]], 1))  # Expected output: 3\n", "passed": true, "pass": true, "pass_num": 10, "round": 347, "mutate_method": "rephrase_one", "parent_index": 358}
