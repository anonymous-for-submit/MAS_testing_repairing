{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 805, "prompt": "Create a function that provides the sublist from a collection of sublists where the sum of its elements is the greatest.", "code": "def max_sum_list(lists):\n return max(lists, key=sum)", "test_imports": [], "test_list": ["assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ", "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ", "assert max_sum_list([[2,3,1]])==[2,3,1] ", "assert max_sum_list([[4, 5, 1], [2, 2, 6], [5, 16, 17], [9, 8, 14]]) == [5, 16, 17]", "assert max_sum_list([[3, 3, 4], [9, 6, 1], [6, 15, 15], [2, 4, 11]]) == [6, 15, 15]", "assert max_sum_list([[1, 1, 8], [9, 7, 8], [7, 9, 9], [3, 4, 10]]) == [7, 9, 9]", "assert max_sum_list([[5, 7, 7], [2, 6, 5], [14, 14, 14], [6, 13, 10]]) == [14, 14, 14]", "assert max_sum_list([[1, 1, 6], [4, 1, 6], [15, 12, 16], [3, 10, 14]]) == [15, 12, 16]", "assert max_sum_list([[1, 7, 7], [7, 1, 10], [13, 15, 14], [2, 12, 8]]) == [13, 15, 14]", "assert max_sum_list([[2, 3, 5], [5, 3, 11], [13, 13, 17], [4, 9, 13]]) == [13, 13, 17]", "assert max_sum_list([[3, 3, 5], [9, 4, 6], [15, 6, 15], [8, 3, 9]]) == [15, 6, 15]", "assert max_sum_list([[5, 5, 3], [9, 2, 5], [5, 13, 13], [7, 3, 6]]) == [5, 13, 13]", "assert max_sum_list([[3, 3, 6], [8, 3, 4], [7, 16, 15], [9, 11, 10]]) == [7, 16, 15]", "assert max_sum_list([[3, 6, 2], [8, 5, 10], [12, 13, 10], [6, 10, 4]]) == [12, 13, 10]", "assert max_sum_list([[4, 1, 2], [2, 1, 11], [8, 7, 9], [10, 11, 12]]) == [10, 11, 12]", "assert max_sum_list([[6, 6, 4], [3, 6, 9], [6, 7, 11], [7, 7, 4]]) == [6, 7, 11]", "assert max_sum_list([[5, 7, 6], [5, 7, 4], [10, 6, 10], [10, 4, 8]]) == [10, 6, 10]", "assert max_sum_list([[6, 4, 7], [9, 10, 5], [11, 13, 17], [10, 5, 6]]) == [11, 13, 17]", "assert max_sum_list([[5, 2, 8], [8, 7, 8], [13, 11, 11], [2, 3, 10]]) == [13, 11, 11]", "assert max_sum_list([[5, 5, 2], [8, 10, 11], [5, 9, 9], [7, 12, 11]]) == [7, 12, 11]", "assert max_sum_list([[2, 1, 3], [2, 8, 3], [13, 14, 7], [8, 11, 14]]) == [13, 14, 7]", "assert max_sum_list([[6, 3, 3], [8, 5, 6], [14, 10, 14], [8, 8, 5]]) == [14, 10, 14]", "assert max_sum_list([[3, 2, 8], [2, 4, 2], [13, 13, 16], [7, 7, 7]]) == [13, 13, 16]", "assert max_sum_list([[2, 1, 7], [3, 2, 1], [10, 11, 13], [7, 6, 13]]) == [10, 11, 13]", "assert max_sum_list([[5, 1, 8], [2, 9, 8], [13, 7, 11], [10, 11, 10]]) == [13, 7, 11]", "assert max_sum_list([[1, 7, 8], [3, 2, 8], [6, 16, 12], [5, 6, 8]]) == [6, 16, 12]", "assert max_sum_list([[5, 2, 3], [7, 8, 6], [14, 7, 8], [5, 8, 8]]) == [14, 7, 8]", "assert max_sum_list([[2, 6, 6], [6, 6, 3], [8, 11, 16], [4, 8, 5]]) == [8, 11, 16]", "assert max_sum_list([[2, 3, 4], [1, 6, 9], [9, 6, 17], [3, 6, 10]]) == [9, 6, 17]", "assert max_sum_list([[3, 5, 1], [8, 1, 6], [10, 7, 14], [10, 6, 4]]) == [10, 7, 14]", "assert max_sum_list([[6, 2, 6], [6, 1, 6], [7, 9, 16], [10, 4, 14]]) == [7, 9, 16]", "assert max_sum_list([[3, 2, 7], [2, 9, 9], [13, 8, 12], [2, 13, 4]]) == [13, 8, 12]", "assert max_sum_list([[6, 4, 2], [2, 3, 11], [11, 7, 14], [8, 10, 9]]) == [11, 7, 14]", "assert max_sum_list([[5, 3, 1], [5, 5, 2], [13, 15, 14], [10, 10, 13]]) == [13, 15, 14]", "assert max_sum_list([[5, 6, 2], [4, 9, 1], [8, 12, 9], [7, 6, 4]]) == [8, 12, 9]", "assert max_sum_list([[5, 6, 7], [2, 4, 4], [12, 10, 8], [3, 8, 6]]) == [12, 10, 8]", "assert max_sum_list([[5, 3, 6], [4, 2, 9], [13, 15, 14]]) == [13, 15, 14]", "assert max_sum_list([[5, 1, 6], [8, 9, 1], [7, 9, 11]]) == [7, 9, 11]", "assert max_sum_list([[7, 3, 3], [6, 3, 5], [16, 9, 7]]) == [16, 9, 7]", "assert max_sum_list([[4, 2, 6], [9, 4, 8], [10, 11, 6]]) == [10, 11, 6]", "assert max_sum_list([[4, 5, 4], [5, 8, 2], [9, 7, 12]]) == [9, 7, 12]", "assert max_sum_list([[5, 5, 1], [10, 10, 9], [14, 14, 12]]) == [14, 14, 12]", "assert max_sum_list([[2, 2, 1], [8, 10, 7], [16, 11, 11]]) == [16, 11, 11]", "assert max_sum_list([[7, 5, 3], [9, 8, 2], [11, 13, 13]]) == [11, 13, 13]", "assert max_sum_list([[5, 4, 1], [11, 4, 6], [13, 11, 13]]) == [13, 11, 13]", "assert max_sum_list([[5, 4, 3], [10, 2, 4], [9, 8, 10]]) == [9, 8, 10]", "assert max_sum_list([[4, 6, 5], [1, 7, 8], [7, 13, 7]]) == [7, 13, 7]", "assert max_sum_list([[6, 2, 6], [8, 2, 1], [14, 8, 15]]) == [14, 8, 15]", "assert max_sum_list([[4, 6, 5], [11, 5, 3], [13, 13, 10]]) == [13, 13, 10]", "assert max_sum_list([[1, 6, 2], [7, 10, 1], [12, 11, 6]]) == [12, 11, 6]", "assert max_sum_list([[7, 4, 6], [1, 9, 2], [7, 16, 15]]) == [7, 16, 15]", "assert max_sum_list([[8, 3, 6], [6, 2, 4], [8, 10, 15]]) == [8, 10, 15]", "assert max_sum_list([[4, 2, 4], [1, 2, 2], [17, 8, 9]]) == [17, 8, 9]", "assert max_sum_list([[6, 7, 1], [4, 4, 9], [10, 6, 15]]) == [10, 6, 15]", "assert max_sum_list([[5, 1, 6], [2, 8, 1], [16, 6, 13]]) == [16, 6, 13]", "assert max_sum_list([[4, 3, 6], [3, 3, 1], [17, 10, 10]]) == [17, 10, 10]", "assert max_sum_list([[8, 6, 3], [2, 1, 1], [9, 8, 13]]) == [9, 8, 13]", "assert max_sum_list([[2, 4, 5], [7, 4, 3], [8, 8, 13]]) == [8, 8, 13]", "assert max_sum_list([[4, 6, 4], [5, 4, 7], [8, 16, 12]]) == [8, 16, 12]", "assert max_sum_list([[7, 7, 3], [5, 1, 4], [15, 11, 8]]) == [15, 11, 8]", "assert max_sum_list([[4, 2, 2], [10, 7, 7], [7, 16, 10]]) == [7, 16, 10]", "assert max_sum_list([[1, 7, 5], [2, 10, 1], [15, 9, 10]]) == [15, 9, 10]", "assert max_sum_list([[6, 6, 1], [10, 1, 7], [11, 15, 5]]) == [11, 15, 5]", "assert max_sum_list([[4, 3, 5], [2, 8, 2], [12, 10, 12]]) == [12, 10, 12]", "assert max_sum_list([[4, 1, 2], [6, 10, 7], [11, 16, 13]]) == [11, 16, 13]", "assert max_sum_list([[4, 3, 1], [9, 10, 4], [11, 13, 14]]) == [11, 13, 14]", "assert max_sum_list([[1, 4, 3], [7, 6, 4], [16, 8, 7]]) == [16, 8, 7]", "assert max_sum_list([[2, 7, 3], [7, 6, 4], [11, 16, 15]]) == [11, 16, 15]", "assert max_sum_list([[6, 2, 5], [11, 5, 2], [8, 11, 9]]) == [8, 11, 9]", "assert max_sum_list([[2, 8, 6]]) == [2, 8, 6]", "assert max_sum_list([[7, 7, 2]]) == [7, 7, 2]", "assert max_sum_list([[6, 5, 2]]) == [6, 5, 2]", "assert max_sum_list([[3, 1, 4]]) == [3, 1, 4]", "assert max_sum_list([[6, 4, 2]]) == [6, 4, 2]", "assert max_sum_list([[1, 3, 1]]) == [1, 3, 1]", "assert max_sum_list([[2, 7, 2]]) == [2, 7, 2]", "assert max_sum_list([[7, 1, 6]]) == [7, 1, 6]", "assert max_sum_list([[2, 3, 5]]) == [2, 3, 5]", "assert max_sum_list([[1, 2, 1]]) == [1, 2, 1]", "assert max_sum_list([[3, 7, 4]]) == [3, 7, 4]", "assert max_sum_list([[2, 3, 2]]) == [2, 3, 2]", "assert max_sum_list([[5, 5, 5]]) == [5, 5, 5]", "assert max_sum_list([[1, 6, 2]]) == [1, 6, 2]", "assert max_sum_list([[4, 5, 6]]) == [4, 5, 6]", "assert max_sum_list([[3, 4, 1]]) == [3, 4, 1]", "assert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "assert max_sum_list([[1, 4, 3]]) == [1, 4, 3]", "assert max_sum_list([[6, 3, 2]]) == [6, 3, 2]", "assert max_sum_list([[4, 2, 1]]) == [4, 2, 1]", "assert max_sum_list([[4, 7, 6]]) == [4, 7, 6]", "assert max_sum_list([[4, 4, 4]]) == [4, 4, 4]", "assert max_sum_list([[3, 7, 1]]) == [3, 7, 1]", "assert max_sum_list([[4, 5, 4]]) == [4, 5, 4]", "assert max_sum_list([[2, 6, 4]]) == [2, 6, 4]", "assert max_sum_list([[2, 3, 6]]) == [2, 3, 6]", "assert max_sum_list([[1, 4, 6]]) == [1, 4, 6]", "assert max_sum_list([[6, 5, 6]]) == [6, 5, 6]", "assert max_sum_list([[4, 8, 3]]) == [4, 8, 3]", "assert max_sum_list([[6, 4, 1]]) == [6, 4, 1]", "assert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "assert max_sum_list([[5, 5, 1]]) == [5, 5, 1]", "assert max_sum_list([[1, 1, 1]]) == [1, 1, 1]"], "entry_point": "max_sum_list", "repair_prompt": ["Create a function max_sum_list that provides the sublist from a collection of sublists where the sum of its elements is the greatest.\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n", "Create a function max_sum_list that provides the sublist from a collection of sublists where the sum of its elements is the greatest. This function should examine each of the sublists in the collection. It should then identify which one has the largest sum of its elements.\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n", "Create a function max_sum_list that provides the sublist from a collection of sublists where the sum of its elements is the greatest.\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n"], "completions": ["from typing import List\n## main.py\n\ndef max_sum_list(sublists: list[list[int]]) -> list[int]:\n    \"\"\"\n    This function takes a list of sublists and returns the sublist with the greatest sum of elements.\n    \n    Parameters:\n    sublists (list[list[int]]): A list of sublists containing integers.\n    \n    Returns:\n    list[int]: The sublist with the maximum sum of elements.\n    \"\"\"\n    # Initialize variables to track the maximum sum and the corresponding sublist\n    max_sum = float('-inf')\n    max_sum_sublist = []\n\n    # Iterate through each sublist in the collection\n    for sublist in sublists:\n        # Calculate the sum of elements for the current sublist\n        current_sum = sum(sublist)\n        \n        # Compare the calculated sum with the current maximum sum\n        if current_sum > max_sum:\n            # Update the maximum sum and store the current sublist\n            max_sum = current_sum\n            max_sum_sublist = sublist\n\n    # Return the sublist with the maximum sum\n    return max_sum_sublist\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))  # Output: [10, 11, 12]\n    print(max_sum_list([[0], [-1, -2], [-3, -4]]))  # Output: [0]\n    print(max_sum_list([[1], [1, 1], [1, 1, 1]]))  # Output: [1, 1, 1]\n", "from typing import List\n## main.py\n\ndef max_sum_list(sublists: list[list[int]]) -> list[int]:\n    \"\"\"\n    This function takes a list of sublists containing integers and returns the sublist with the maximum sum.\n\n    Parameters:\n    sublists (list of list of int): A list containing sublists of integers.\n\n    Returns:\n    list of int: The sublist with the maximum sum of elements.\n    \"\"\"\n    # Initialize variables to track the maximum sum and the corresponding sublist\n    max_sum = float('-inf')\n    max_sublist = []\n\n    # Iterate through each sublist in the list of sublists\n    for sublist in sublists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # If the sum of the current sublist is greater than the maximum sum found so far,\n        # update the maximum sum and the corresponding sublist\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sublist = sublist\n\n    # Return the sublist with the maximum sum\n    return max_sublist\n\n# Example usage\nif __name__ == \"__main__\":\n    example_sublists = [[1, 2, 3], [-1, -2, -3], [0, 0, 0], [0, 0], [0]]\n    print(max_sum_list(example_sublists))  # Output: [1, 2, 3]\n", "from typing import List\n## main.py\n\ndef max_sum_list(sublists: list[list[int]]) -> list[int]:\n    \"\"\"\n    Returns the sublist with the maximum sum of elements.\n\n    Parameters:\n    sublists (list of list of int): A list containing sublists of integers.\n\n    Returns:\n    list of int: The sublist with the maximum sum of elements.\n    \"\"\"\n    # Initialize variables to track the maximum sum and the corresponding sublist\n    max_sum = float('-inf')\n    max_sum_sublist = []\n\n    # Iterate through each sublist\n    for sublist in sublists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # Compare the current sum with the maximum sum found so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_sublist = sublist\n\n    # Return the sublist with the greatest sum\n    return max_sum_sublist\n", "from typing import List\n## main.py\n\ndef max_sum_list(sublists: list[list[int]]) -> list[int]:\n    \"\"\"\n    This function takes a list of sublists and returns the sublist with the maximum sum.\n\n    Parameters:\n    sublists (list[list[int]]): A list of sublists containing integers.\n\n    Returns:\n    list[int]: The sublist with the maximum sum of elements.\n    \"\"\"\n    # Initialize variables to track the maximum sum and the corresponding sublist\n    max_sum = float('-inf')\n    max_sum_sublist = []\n\n    # Iterate over each sublist in the collection\n    for sublist in sublists:\n        # Calculate the sum of elements in the current sublist\n        current_sum = sum(sublist)\n        \n        # Compare this sum with the current maximum sum\n        if current_sum > max_sum:\n            # Update the maximum sum and store the current sublist\n            max_sum = current_sum\n            max_sum_sublist = sublist\n\n    # Return the sublist with the maximum sum\n    return max_sum_sublist\n", "from typing import List\n## main.py\n\ndef max_sum_list(sublists: list[list[int]]) -> list[int]:\n    \"\"\"\n    Determine the sublist with the maximum sum of its elements.\n\n    Args:\n        sublists (list of list of int): A collection of sublists to evaluate.\n\n    Returns:\n        list of int: The sublist with the greatest sum of elements.\n    \"\"\"\n    # Initialize variables to track the maximum sum and the corresponding sublist\n    max_sum = float('-inf')\n    max_sum_sublist = []\n\n    # Iterate through each sublist in the collection\n    for sublist in sublists:\n        # Calculate the sum of elements in the current sublist\n        current_sum = sum(sublist)\n        \n        # If this sum is greater than the current maximum sum, update the maximum sum and store the current sublist\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_sublist = sublist\n\n    # Return the sublist with the maximum sum\n    return max_sum_sublist\n\n# Example usage:\n# result = max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n# print(result)  # Output: [10, 11, 12]\n", "from typing import List\n## main.py\n\ndef max_sum_list(sublists: list[list[int]]) -> list[int]:\n    \"\"\"\n    This function takes a list of sublists and returns the sublist with the maximum sum of elements.\n    If multiple sublists have the same sum, the first one encountered is returned.\n\n    Parameters:\n    sublists (list[list[int]]): A list of sublists containing integers.\n\n    Returns:\n    list[int]: The sublist with the maximum sum of elements.\n    \"\"\"\n    # Initialize variables to track the maximum sum and the corresponding sublist\n    max_sum = float('-inf')\n    max_sum_sublist = []\n\n    # Iterate over each sublist in the collection\n    for sublist in sublists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n\n        # Compare the current sum with the maximum sum found so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_sublist = sublist\n\n    # Return the sublist with the greatest sum\n    return max_sum_sublist\n\n# Example usage:\n# result = max_sum_list([[1, 2, 3], [-1, -2, -3], [0, 0, 0]])\n# print(result)  # Output: [1, 2, 3]\n", "from typing import List\n## main.py\n\ndef max_sum_list(sublists: list[list[int]]) -> list[int]:\n    \"\"\"\n    This function takes a list of sublists and returns the sublist with the maximum sum.\n\n    Parameters:\n    sublists (list[list[int]]): A list containing sublists of integers.\n\n    Returns:\n    list[int]: The sublist with the maximum sum of elements.\n    \"\"\"\n    # Initialize variables to track the maximum sum and the corresponding sublist\n    max_sum = float('-inf')  # Start with the smallest possible number\n    max_sum_sublist = []\n\n    # Iterate through each sublist in the collection\n    for sublist in sublists:\n        # Calculate the sum of elements in the current sublist\n        current_sum = sum(sublist)\n        \n        # Compare this sum with the current maximum sum\n        if current_sum > max_sum:\n            # Update the maximum sum and store the current sublist\n            max_sum = current_sum\n            max_sum_sublist = sublist\n\n    # Return the sublist with the greatest sum\n    return max_sum_sublist\n\n# Example usage:\n# result = max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n# print(result)  # Output: [10, 11, 12]\n", "from typing import List\n## main.py\n\ndef max_sum_list(sublists: list[list[int]]) -> list[int]:\n    \"\"\"\n    Returns the sublist with the maximum sum of elements.\n\n    Parameters:\n    sublists (list of list of int): A list containing sublists of integers.\n\n    Returns:\n    list of int: The sublist with the maximum sum.\n    \"\"\"\n    # Initialize variables to track the maximum sum and the corresponding sublist\n    max_sum = float('-inf')\n    max_sum_sublist = []\n\n    # Iterate through each sublist in the collection\n    for sublist in sublists:\n        # Calculate the sum of elements in the current sublist\n        current_sum = sum(sublist)\n        \n        # If the current sum is greater than the maximum sum found so far, update the maximum sum and sublist\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_sublist = sublist\n\n    # Return the sublist with the maximum sum\n    return max_sum_sublist\n\n# Unit tests to verify the correctness of the function\ndef test_max_sum_list():\n    assert max_sum_list([[], [1, 2, 3], [4, 5, 6]]) == [4, 5, 6], \"Test case 1 failed\"\n    assert max_sum_list([[0, 0, 0], [-1, -2, -3], [1, 1, 1]]) == [1, 1, 1], \"Test case 2 failed\"\n    assert max_sum_list([[5], [5], [5]]) == [5], \"Test case 3 failed\"\n    assert max_sum_list([[1, 2], [3, 4], [5, 6]]) == [5, 6], \"Test case 4 failed\"\n    assert max_sum_list([[10, 20, 30], [5, 5, 5], [15, 15, 15]]) == [10, 20, 30], \"Test case 5 failed\"\n    print(\"All test cases passed!\")\n\n# Run the unit tests\nif __name__ == \"__main__\":\n    test_max_sum_list()\n", "from typing import List\n## main.py\n\ndef max_sum_list(sublists: list[list[int]]) -> list[int]:\n    \"\"\"\n    This function takes a list of sublists, where each sublist contains integers, \n    and returns the sublist with the maximum sum of its elements.\n\n    Parameters:\n    sublists (list[list[int]]): A list of sublists containing integers.\n\n    Returns:\n    list[int]: The sublist with the maximum sum of elements. If there are multiple \n    sublists with the same maximum sum, the first one encountered is returned. If \n    the input list is empty or contains only empty sublists, an empty list is returned.\n    \"\"\"\n    # Initialize variables to track the maximum sum and the corresponding sublist\n    max_sum = float('-inf')\n    max_sum_sublist = []\n\n    # Iterate through each sublist in the collection\n    for sublist in sublists:\n        # Calculate the sum of elements in the current sublist\n        current_sum = sum(sublist)\n        \n        # Compare the current sum with the maximum sum found so far\n        if current_sum > max_sum:\n            # Update the maximum sum and store the current sublist\n            max_sum = current_sum\n            max_sum_sublist = sublist\n\n    # Return the sublist with the maximum sum\n    return max_sum_sublist\n\n# Example usage:\n# result = max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n# print(result)  # Output: [10, 11, 12]\n", "from typing import List\n## main.py\n\ndef max_sum_list(sublists: list[list[float]]) -> list[float]:\n    \"\"\"\n    Returns the sublist with the greatest sum of elements.\n\n    Parameters:\n    sublists (list of list of float): A list containing sublists of numbers.\n\n    Returns:\n    list of float: The sublist with the greatest sum.\n    \"\"\"\n    # Initialize variables to track the maximum sum and the corresponding sublist\n    max_sum = float('-inf')\n    max_sum_sublist = []\n\n    # Iterate through each sublist\n    for sublist in sublists:\n        # Calculate the sum of the current sublist\n        try:\n            current_sum = sum(sublist)\n        except TypeError:\n            raise ValueError(\"All elements in sublists must be numeric.\")\n\n        # Update the maximum sum and sublist if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_sublist = sublist\n\n    return max_sum_sublist\n"], "plans": ["requirement analysis:\nThe function should iterate through each sublist, calculate the sum of its elements, and keep track of the sublist with the maximum sum. It should handle edge cases such as empty sublists or lists with negative numbers.\nrequirement pool:\n- Implement the main function logic to find the sublist with the maximum sum.\n- Optimize the function for performance with large datasets.\n- Write comprehensive documentation and usage examples.\n- Ensure compatibility with Python 3.6 and above.\n- Include unit tests to verify the function's correctness.\nWe will implement a simple function using built-in Python functions to iterate through each sublist, calculate the sum of its elements, and keep track of the sublist with the maximum sum. This approach ensures compatibility with various Python versions and provides efficiency for handling large datasets. We will also include comprehensive documentation and unit tests to verify correctness.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublist'\n    Explanation: A sublist is a list contained within another list. In this requirement, we are dealing with a collection of sublists, and the task is to find the one with the maximum sum of its elements.\n\n    'sum'\n    Explanation: The sum refers to the total obtained by adding all the elements of a sublist together. The requirement is to find the sublist with the greatest sum.\n\n# [phrase showing quantity relationship]\n    'greatest': means we need to find the sublist with the maximum sum of its elements.\n\n# [degree adverb] \n    'greatest': means that we need to identify the sublist whose sum of elements is larger than any other sublist in the collection.\n\n# [code logic]\n    1. Initialize a variable to keep track of the maximum sum found so far and another variable to store the corresponding sublist.\n    2. Iterate through each sublist in the collection.\n    3. Calculate the sum of elements for each sublist.\n    4. Compare the calculated sum with the current maximum sum.\n    5. If the calculated sum is greater than the current maximum sum, update the maximum sum and store the current sublist.\n    6. After iterating through all sublists, return the sublist with the maximum sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sublist [10, 11, 12] has the greatest sum (33) compared to other sublists.\n\n    max_sum_list([[0], [-1, -2], [-3, -4]]) = [0]\n    Explanation: Even though all numbers are non-positive, [0] has the greatest sum (0).\n\n    max_sum_list([[1], [1, 1], [1, 1, 1]]) = [1, 1, 1]\n    Explanation: The sublist [1, 1, 1] has the greatest sum (3) compared to other sublists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and comparing sums will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently determine the sublist with the maximum sum from a list of sublists. It should handle various list sizes and types of numerical data, providing accurate results consistently.\nrequirement pool:\n- Implement the main function logic to find the sublist with the maximum sum\n- Ensure the function handles edge cases, such as empty sublists\n- Provide documentation and examples for user understanding\n- Optimize the function for performance with large datasets\n- Maintain compatibility with Python 3.x versions\nWe will implement a function named max_sum_list that iterates through a list of sublists, calculates the sum of each sublist, and returns the sublist with the maximum sum. We will use built-in Python functions to keep the implementation simple and efficient. The function will handle edge cases such as empty sublists by returning an empty list if all sublists are empty. We will ensure compatibility with Python 3.x versions and provide documentation with examples for clarity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublist'\n    Explanation: A sublist is a list contained within another list. In this requirement, we are dealing with a list of sublists, and we need to find the sublist with the maximum sum of its elements.\n\n# [phrase showing quantity relationship]\n    'greatest': This indicates that we need to find the sublist with the maximum sum of its elements.\n\n# [degree adverb] \n    'greatest': This means we are looking for the sublist with the highest sum compared to other sublists.\n\n# [code logic]\n    1. Initialize a variable to keep track of the maximum sum found so far and another variable to store the corresponding sublist.\n    2. Iterate through each sublist in the list of sublists.\n    3. Calculate the sum of the current sublist.\n    4. If the sum of the current sublist is greater than the maximum sum found so far, update the maximum sum and the corresponding sublist.\n    5. After iterating through all sublists, return the sublist with the maximum sum.\n\n# [edge case] \n    max_sum_list([[]]) = []\n    Explanation: The only sublist is empty, so the function should return an empty list.\n    \n    max_sum_list([[1, 2, 3], [-1, -2, -3]]) = [1, 2, 3]\n    Explanation: The first sublist has a positive sum, while the second has a negative sum. The function should return the first sublist.\n\n    max_sum_list([[0, 0, 0], [0, 0], [0]]) = [0, 0, 0]\n    Explanation: All sublists have a sum of zero, but the first one is the longest. The function should return it as it appears first.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and comparing sums will naturally handle these cases.\n", "requirement analysis:\nThe function should iterate through each sublist, calculate the sum of its elements, and keep track of the sublist with the maximum sum. It should handle edge cases such as empty sublists or lists with negative numbers.\nrequirement pool:\n- Implement the main function logic to find the sublist with the maximum sum.\n- Optimize the function for performance with large datasets.\n- Include comprehensive test cases to cover various scenarios.\n- Provide detailed documentation and usage examples.\n- Ensure compatibility with Python 3.x versions.\nWe will implement a function that iterates through each sublist, calculates the sum of its elements, and keeps track of the sublist with the maximum sum. We will use Python's built-in functions to ensure simplicity and compatibility with various Python versions. The function will handle edge cases such as empty sublists or lists with negative numbers. If sublists have equal sums, the function will return the first occurrence.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublist'\n    Explanation: A sublist is a list contained within another list. In this requirement, we are dealing with a list of lists, and each inner list is considered a sublist.\n\n    'sum of its elements'\n    Explanation: This refers to the total obtained by adding all the numbers in a sublist.\n\n# [phrase showing quantity relationship]\n    'greatest': This indicates that we need to find the sublist with the highest sum of its elements.\n\n# [degree adverb] \n    'greatest': This means we are looking for the sublist with the maximum sum compared to other sublists.\n\n# [code logic]\n1. Initialize a variable to keep track of the maximum sum found so far and another variable to store the corresponding sublist.\n2. Iterate through each sublist in the collection.\n3. For each sublist, calculate the sum of its elements.\n4. Compare this sum with the current maximum sum. If it is greater, update the maximum sum and store the current sublist as the one with the maximum sum.\n5. After iterating through all sublists, return the sublist with the greatest sum.\n\n# [edge case] \n    max_sum_list([[]]) = []\n    Explanation: The only sublist is empty, so its sum is 0, and it is returned as it is the only option.\n    \n    max_sum_list([[1, 2, 3], [-1, -2, -3], [0, 0, 0]]) = [1, 2, 3]\n    Explanation: The first sublist has the greatest sum (6), compared to -6 and 0 for the other sublists.\n    \n    max_sum_list([[1, 2], [2, 1], [1, 1, 1]]) = [1, 2]\n    Explanation: The first two sublists have equal sums (3), but since we return the first occurrence, [1, 2] is returned.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and comparing sums will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently determine the sublist with the maximum sum from a collection of sublists. It must handle edge cases such as empty sublists and varying sublist lengths. The implementation should prioritize performance and simplicity.\nrequirement pool:\n- Implement the main function to find the sublist with the maximum sum.\n- Optimize the function for performance with large datasets.\n- Include comprehensive documentation and examples.\n- Ensure compatibility with Python 3.x versions.\n- Handle edge cases such as empty sublists gracefully.\nWe will implement a simple function using built-in Python functions to iterate over the collection of sublists and calculate the sum of each sublist. The function will return the sublist with the maximum sum. We will handle edge cases such as empty sublists and ensure compatibility with Python 3.x versions. The function will prioritize performance and simplicity, making it easy to integrate into existing codebases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublist'\n    Explanation: A sublist is a list contained within another list. In this requirement, we are dealing with a collection of sublists, and the task is to find the one with the maximum sum of its elements.\n\n# [phrase showing quantity relationship]\n    'sum of its elements': This indicates that we need to calculate the total sum of all elements within each sublist to determine which sublist has the greatest sum.\n\n# [degree adverb] \n    'greatest': This means we need to find the sublist with the largest sum compared to all other sublists in the collection.\n\n# [code logic]\n    1. Initialize a variable to keep track of the maximum sum found and another variable to store the sublist with this maximum sum.\n    2. Iterate over each sublist in the collection.\n    3. Calculate the sum of elements in the current sublist.\n    4. Compare this sum with the current maximum sum. If it is greater, update the maximum sum and store the current sublist as the one with the maximum sum.\n    5. After iterating through all sublists, return the sublist with the maximum sum.\n\n# [edge case] \n    max_sum_list([[], [1, 2, 3], [4, 5, 6]]) = [4, 5, 6]\n    Explanation: The empty sublist has a sum of 0, which is less than the sums of other sublists. The sublist [4, 5, 6] has the greatest sum.\n    \n    max_sum_list([[0, 0, 0], [-1, -2, -3], [1, 2, 3]]) = [1, 2, 3]\n    Explanation: The sublist [1, 2, 3] has a positive sum which is greater than the sums of other sublists.\n    \n    max_sum_list([[1], [2], [3]]) = [3]\n    Explanation: Each sublist contains a single element, and [3] has the greatest sum.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and comparing sums will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently determine the sublist with the maximum sum from a collection of sublists. It should handle edge cases such as empty sublists and ensure compatibility with various Python versions. The function should be easy to integrate and understand, with clear documentation and examples.\nrequirement pool:\n- Implement the max_sum_list function to find the sublist with the greatest sum\n- Optimize the function for performance with large datasets\n- Provide comprehensive documentation and examples\n- Ensure compatibility with Python 3.x versions\n- Handle edge cases such as empty sublists gracefully\nWe will implement a simple Python function using built-in functions to determine the sublist with the maximum sum. This approach ensures compatibility with Python 3.x versions and handles edge cases like empty sublists. The function will return the first occurrence of a sublist with the maximum sum if there are multiple sublists with equal sums.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublist'\n    Explanation: A sublist is a list contained within another list. In this requirement, it refers to each individual list within the main list of sublists.\n\n    'sum of its elements'\n    Explanation: This refers to the total obtained by adding all the numbers in a sublist.\n\n# [phrase showing quantity relationship]\n    'greatest': This indicates that we need to find the sublist with the highest sum of its elements.\n\n# [degree adverb] \n    'largest': This means we need to identify the sublist with the maximum sum compared to others.\n\n# [code logic]\n1. Initialize a variable to keep track of the maximum sum found and another to store the corresponding sublist.\n2. Iterate through each sublist in the collection.\n3. Calculate the sum of elements in the current sublist.\n4. If this sum is greater than the current maximum sum, update the maximum sum and store the current sublist.\n5. After checking all sublists, return the sublist with the maximum sum.\n\n# [edge case] \n    max_sum_list([[]]) = []\n    Explanation: The only sublist is empty, so its sum is 0, and it is returned as it is the only option.\n    \n    max_sum_list([[1, 2], [3, 4], [5, 6], [7, 8]]) = [7, 8]\n    Explanation: The sublist [7, 8] has the largest sum (15) compared to others.\n\n    max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [10, 11, 12]]) = [10, 11, 12]\n    Explanation: There are two sublists with the same maximum sum (33), but the function returns the first occurrence.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and comparing sums will naturally handle these cases.\n", "requirement analysis:\nThe function should iterate over each sublist, calculate the sum of its elements, and keep track of the sublist with the highest sum. It should handle edge cases such as empty sublists or lists with negative numbers.\nrequirement pool:\n- Implement the main function logic to find the sublist with the maximum sum.\n- Optimize the function for performance with large datasets.\n- Write comprehensive tests to cover various edge cases.\n- Document the function usage and examples.\n- Ensure compatibility with Python 3.x versions.\nWe will implement a function that iterates over each sublist, calculates the sum of its elements, and keeps track of the sublist with the highest sum. We will use Python's built-in functions to ensure simplicity and compatibility across Python 3.x versions. The function will handle edge cases such as empty sublists and lists with negative numbers. For sublists with equal sums, the function will return the first occurrence.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublist'\n    Explanation: A sublist is a list contained within another list. In this requirement, we are dealing with a collection of sublists, and we need to find the one with the greatest sum of its elements.\n\n    'sum of its elements'\n    Explanation: This refers to the total obtained by adding all the numbers in a sublist. The task is to compare these sums across all sublists to find the greatest one.\n\n# [phrase showing quantity relationship]\n    'greatest': This indicates that we need to find the sublist with the maximum sum of elements.\n\n# [degree adverb] \n    'greatest': This means we are looking for the sublist with the highest sum compared to others.\n\n# [code logic]\n1. Initialize a variable to keep track of the maximum sum found so far and another variable to store the corresponding sublist.\n2. Iterate over each sublist in the collection.\n3. For each sublist, calculate the sum of its elements.\n4. Compare this sum with the current maximum sum. If it is greater, update the maximum sum and store this sublist as the current best.\n5. After iterating through all sublists, return the sublist with the greatest sum.\n\n# [edge case] \n    max_sum_list([[]]) = []\n    Explanation: The only sublist is empty, so its sum is 0, and it is returned as it is the only option.\n    \n    max_sum_list([[1, 2, 3], [-1, -2, -3], [0, 0, 0]]) = [1, 2, 3]\n    Explanation: The first sublist has the greatest sum (6), compared to -6 and 0 for the other sublists.\n    \n    max_sum_list([[1, 2], [2, 1], [1, 1, 1]]) = [1, 2]\n    Explanation: The first two sublists have equal sums (3), but since we return the first occurrence, [1, 2] is returned.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and comparing sums will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently iterate through a list of sublists, calculate the sum of each sublist, and return the sublist with the highest sum. It should handle edge cases such as empty sublists and negative numbers.\nrequirement pool:\n- Implement the main function logic to find the sublist with the maximum sum.\n- Ensure the function handles edge cases like empty sublists.\n- Provide documentation and examples for user understanding.\n- Optimize the function for large datasets.\n- Maintain compatibility with older Python versions.\nWe will implement a function that iterates through each sublist, calculates the sum of its elements, and keeps track of the sublist with the highest sum. We will use Python's built-in functions for simplicity and efficiency, ensuring compatibility with older Python versions. Edge cases such as empty sublists and sublists with negative numbers will be handled by considering their sums in the comparison.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublist'\n    Explanation: A sublist is a list contained within another list. In this requirement, we are dealing with a collection of sublists, and the task is to find the one with the highest sum of its elements.\n\n# [phrase showing quantity relationship]\n    'sum of its elements': This indicates that we need to calculate the total sum of numbers within each sublist.\n    Implementation: Use the `sum()` function in Python to calculate the sum of elements in each sublist.\n\n# [degree adverb]\n    'greatest': This means we need to find the sublist with the highest sum compared to others.\n    Implementation: Track the maximum sum encountered and update it whenever a higher sum is found.\n\n# [code logic]\n    - Initialize a variable to keep track of the maximum sum and the corresponding sublist.\n    - Iterate through each sublist in the collection.\n    - Calculate the sum of elements in the current sublist.\n    - Compare this sum with the current maximum sum; if it's greater, update the maximum sum and store the current sublist.\n    - After iterating through all sublists, return the sublist with the greatest sum.\n\n# [edge case]\n    max_sum_list([[], [1, 2, 3], [-1, -2, -3]]) = [1, 2, 3]\n    Explanation: The empty sublist has a sum of 0, and the sublist with negative numbers has a negative sum. The sublist [1, 2, 3] has the greatest positive sum.\n    \n    max_sum_list([[0], [-1, -2], [0, 0]]) = [0, 0]\n    Explanation: The sublists have sums of 0, -3, and 0 respectively. The sublist [0, 0] has a sum equal to the greatest sum found (0).\n\n    max_sum_list([[1], [2], [3]]) = [3]\n    Explanation: Each sublist contains a single element. The sublist [3] has the greatest sum.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and comparing sums will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently determine the sublist with the maximum sum from a list of sublists. It should handle edge cases such as empty sublists and varying sublist lengths.\nrequirement pool:\n- Implement the main function logic to find the sublist with the maximum sum.\n- Optimize the function for performance with large datasets.\n- Write comprehensive documentation for the function.\n- Ensure compatibility with Python 3.x versions.\n- Include unit tests to verify the function's correctness.\nWe will implement a function using built-in Python functions to efficiently find the sublist with the maximum sum. This approach ensures compatibility with various Python versions and avoids the overhead of additional libraries. The function will handle edge cases such as empty sublists and varying sublist lengths. We will also include unit tests to verify correctness and provide comprehensive documentation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublist'\n    Explanation: A sublist is a list contained within another list. In this requirement, we are dealing with a collection of sublists, and the task is to find the one with the maximum sum of its elements.\n\n# [phrase showing quantity relationship]\n    'sum of its elements': This indicates that we need to calculate the total sum of all elements within each sublist to determine which sublist has the greatest sum.\n\n# [degree adverb] \n    'greatest': This means we need to find the sublist with the highest sum compared to all other sublists.\n\n# [code logic]\n    1. Initialize a variable to keep track of the maximum sum found and another variable to store the corresponding sublist.\n    2. Iterate through each sublist in the collection.\n    3. Calculate the sum of elements in the current sublist.\n    4. If the sum is greater than the current maximum sum, update the maximum sum and store the current sublist.\n    5. After iterating through all sublists, return the sublist with the maximum sum.\n\n# [edge case] \n    max_sum_list([[], [1,2,3], [4,5,6]]) = [4, 5, 6]\n    Explanation: The first sublist is empty, so its sum is 0. The second sublist has a sum of 6, and the third sublist has a sum of 15. The third sublist has the greatest sum.\n    \n    max_sum_list([[0,0,0], [-1,-2,-3], [1,1,1]]) = [1, 1, 1]\n    Explanation: The first sublist has a sum of 0, the second has a sum of -6, and the third has a sum of 3. The third sublist has the greatest sum.\n    \n    max_sum_list([[5], [5], [5]]) = [5]\n    Explanation: All sublists have the same sum of 5. Any of them can be returned as they all have the greatest sum.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will correctly handle empty sublists and sublists with negative numbers or identical sums.\n", "requirement analysis:\nThe function should efficiently determine the sublist with the maximum sum from a list of sublists. It should handle edge cases such as empty sublists and varying sublist lengths. The implementation should be straightforward and not rely on external libraries to maintain simplicity and ease of use.\nrequirement pool:\n- Implement the main function logic to find the sublist with the maximum sum\n- Handle edge cases such as empty sublists\n- Ensure compatibility with Python 3.x versions\n- Provide comprehensive documentation and examples\n- Optimize for performance with large datasets\nWe will implement a simple function using built-in Python functions to find the sublist with the maximum sum. This approach ensures compatibility with various Python versions and maintains simplicity without relying on external libraries. The function will handle edge cases such as empty sublists and varying sublist lengths.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublist': refers to a list within a list, or a nested list.\n    'sum of its elements': means adding up all the numbers in a sublist to get a total value.\n\n# [phrase showing quantity relationship]\n    'greatest': means the largest sum among all sublists.\n\n# [degree adverb] \n    'greatest': indicates that we need to find the sublist with the highest sum of elements.\n\n# [code logic]\n    1. Initialize a variable to keep track of the maximum sum found and the corresponding sublist.\n    2. Iterate through each sublist in the collection.\n    3. Calculate the sum of elements in the current sublist.\n    4. Compare the current sum with the maximum sum found so far.\n    5. If the current sum is greater, update the maximum sum and store the current sublist.\n    6. After iterating through all sublists, return the sublist with the maximum sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The empty sublist has a sum of 0, which is less than any other sublist. The sublist [10, 11, 12] has the greatest sum.\n    \n    max_sum_list([[], [], []]) = []\n    Explanation: All sublists are empty, so their sums are all 0. The function should return an empty list as there is no sublist with a positive sum.\n    \n    max_sum_list([[0], [-1, -2], [-3, -4]]) = [0]\n    Explanation: The sublist [0] has the greatest sum compared to other negative sums.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each sublist and comparing sums will naturally handle these cases.\n", "requirement analysis:\nThe function should iterate through each sublist, calculate the sum of its elements, and keep track of the sublist with the highest sum. It should handle edge cases such as empty sublists or lists with negative numbers.\nrequirement pool:\n- The function must return the sublist with the greatest sum.\n- The function should handle empty sublists gracefully.\n- The function should be optimized for performance with large inputs.\n- The function should include error handling for non-numeric inputs.\n- The function should be compatible with Python 3.x versions.\nWe will implement a simple function using built-in Python functions to iterate through each sublist, calculate the sum of its elements, and keep track of the sublist with the highest sum. This approach ensures compatibility with various Python versions and handles edge cases such as empty sublists or lists with negative numbers. We will also include error handling for non-numeric inputs to ensure robustness.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublist'\n    Explanation: A sublist is a list contained within another list. In this requirement, we are dealing with a collection of sublists, and the task is to find the one with the greatest sum of its elements.\n\n    'sum'\n    Explanation: The sum refers to the total obtained by adding all the elements of a sublist together. The requirement is to find the sublist with the greatest sum.\n\n# [phrase showing quantity relationship]\n    'greatest': means that we need to find the sublist whose sum of elements is larger than any other sublist.\n\n# [degree adverb] \n    'greatest': means that we need to find the sublist with the highest sum of its elements compared to other sublists.\n\n# [code logic]\n    1. Initialize a variable to keep track of the maximum sum found and another variable to store the sublist with this maximum sum.\n    2. Iterate through each sublist in the collection.\n    3. Calculate the sum of elements in the current sublist.\n    4. Compare this sum with the current maximum sum.\n    5. If the current sum is greater than the maximum sum, update the maximum sum and store the current sublist.\n    6. After iterating through all sublists, return the sublist with the greatest sum.\n\n# [edge case] \n    max_sum_list([[], [1,2,3], [4,5,6]]) = [4, 5, 6]\n    Explanation: The first sublist is empty, so its sum is 0. The second sublist has a sum of 6, and the third has a sum of 15. The third sublist has the greatest sum.\n\n    max_sum_list([[1,2,-3], [-4,-5,-6], [7,8,9]]) = [7, 8, 9]\n    Explanation: The first sublist has a sum of 0, the second has a sum of -15, and the third has a sum of 24. The third sublist has the greatest sum.\n\n    max_sum_list([[0], [-1,-2,-3], [1]]) = [1]\n    Explanation: The first sublist has a sum of 0, the second has a sum of -6, and the third has a sum of 1. The third sublist has the greatest sum.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will correctly handle empty sublists and lists with negative numbers by comparing sums directly.\n"], "test": ["def check(max_sum_list):\n\tassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ", "def check(max_sum_list):\n\tassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ", "def check(max_sum_list):\n\tassert max_sum_list([[2,3,1]])==[2,3,1] ", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 1], [2, 2, 6], [5, 16, 17], [9, 8, 14]]) == [5, 16, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 4], [9, 6, 1], [6, 15, 15], [2, 4, 11]]) == [6, 15, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 8], [9, 7, 8], [7, 9, 9], [3, 4, 10]]) == [7, 9, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 7, 7], [2, 6, 5], [14, 14, 14], [6, 13, 10]]) == [14, 14, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 6], [4, 1, 6], [15, 12, 16], [3, 10, 14]]) == [15, 12, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 7], [7, 1, 10], [13, 15, 14], [2, 12, 8]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 5], [5, 3, 11], [13, 13, 17], [4, 9, 13]]) == [13, 13, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 5], [9, 4, 6], [15, 6, 15], [8, 3, 9]]) == [15, 6, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 3], [9, 2, 5], [5, 13, 13], [7, 3, 6]]) == [5, 13, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 6], [8, 3, 4], [7, 16, 15], [9, 11, 10]]) == [7, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 6, 2], [8, 5, 10], [12, 13, 10], [6, 10, 4]]) == [12, 13, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 1, 2], [2, 1, 11], [8, 7, 9], [10, 11, 12]]) == [10, 11, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 6, 4], [3, 6, 9], [6, 7, 11], [7, 7, 4]]) == [6, 7, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 7, 6], [5, 7, 4], [10, 6, 10], [10, 4, 8]]) == [10, 6, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 7], [9, 10, 5], [11, 13, 17], [10, 5, 6]]) == [11, 13, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 2, 8], [8, 7, 8], [13, 11, 11], [2, 3, 10]]) == [13, 11, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 2], [8, 10, 11], [5, 9, 9], [7, 12, 11]]) == [7, 12, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 1, 3], [2, 8, 3], [13, 14, 7], [8, 11, 14]]) == [13, 14, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 3, 3], [8, 5, 6], [14, 10, 14], [8, 8, 5]]) == [14, 10, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 2, 8], [2, 4, 2], [13, 13, 16], [7, 7, 7]]) == [13, 13, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 1, 7], [3, 2, 1], [10, 11, 13], [7, 6, 13]]) == [10, 11, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 8], [2, 9, 8], [13, 7, 11], [10, 11, 10]]) == [13, 7, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 8], [3, 2, 8], [6, 16, 12], [5, 6, 8]]) == [6, 16, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 2, 3], [7, 8, 6], [14, 7, 8], [5, 8, 8]]) == [14, 7, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 6, 6], [6, 6, 3], [8, 11, 16], [4, 8, 5]]) == [8, 11, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 4], [1, 6, 9], [9, 6, 17], [3, 6, 10]]) == [9, 6, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 5, 1], [8, 1, 6], [10, 7, 14], [10, 6, 4]]) == [10, 7, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 6], [6, 1, 6], [7, 9, 16], [10, 4, 14]]) == [7, 9, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 2, 7], [2, 9, 9], [13, 8, 12], [2, 13, 4]]) == [13, 8, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 2], [2, 3, 11], [11, 7, 14], [8, 10, 9]]) == [11, 7, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 3, 1], [5, 5, 2], [13, 15, 14], [10, 10, 13]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 6, 2], [4, 9, 1], [8, 12, 9], [7, 6, 4]]) == [8, 12, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 6, 7], [2, 4, 4], [12, 10, 8], [3, 8, 6]]) == [12, 10, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 3, 6], [4, 2, 9], [13, 15, 14]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6], [8, 9, 1], [7, 9, 11]]) == [7, 9, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 3, 3], [6, 3, 5], [16, 9, 7]]) == [16, 9, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 6], [9, 4, 8], [10, 11, 6]]) == [10, 11, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 4], [5, 8, 2], [9, 7, 12]]) == [9, 7, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 1], [10, 10, 9], [14, 14, 12]]) == [14, 14, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 2, 1], [8, 10, 7], [16, 11, 11]]) == [16, 11, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 5, 3], [9, 8, 2], [11, 13, 13]]) == [11, 13, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 4, 1], [11, 4, 6], [13, 11, 13]]) == [13, 11, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 4, 3], [10, 2, 4], [9, 8, 10]]) == [9, 8, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 5], [1, 7, 8], [7, 13, 7]]) == [7, 13, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 6], [8, 2, 1], [14, 8, 15]]) == [14, 8, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 5], [11, 5, 3], [13, 13, 10]]) == [13, 13, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 6, 2], [7, 10, 1], [12, 11, 6]]) == [12, 11, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 4, 6], [1, 9, 2], [7, 16, 15]]) == [7, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[8, 3, 6], [6, 2, 4], [8, 10, 15]]) == [8, 10, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 4], [1, 2, 2], [17, 8, 9]]) == [17, 8, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 7, 1], [4, 4, 9], [10, 6, 15]]) == [10, 6, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6], [2, 8, 1], [16, 6, 13]]) == [16, 6, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 6], [3, 3, 1], [17, 10, 10]]) == [17, 10, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[8, 6, 3], [2, 1, 1], [9, 8, 13]]) == [9, 8, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 4, 5], [7, 4, 3], [8, 8, 13]]) == [8, 8, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 4], [5, 4, 7], [8, 16, 12]]) == [8, 16, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 7, 3], [5, 1, 4], [15, 11, 8]]) == [15, 11, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 2], [10, 7, 7], [7, 16, 10]]) == [7, 16, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 5], [2, 10, 1], [15, 9, 10]]) == [15, 9, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 6, 1], [10, 1, 7], [11, 15, 5]]) == [11, 15, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 5], [2, 8, 2], [12, 10, 12]]) == [12, 10, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 1, 2], [6, 10, 7], [11, 16, 13]]) == [11, 16, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 1], [9, 10, 4], [11, 13, 14]]) == [11, 13, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 3], [7, 6, 4], [16, 8, 7]]) == [16, 8, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 7, 3], [7, 6, 4], [11, 16, 15]]) == [11, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 5], [11, 5, 2], [8, 11, 9]]) == [8, 11, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 8, 6]]) == [2, 8, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 7, 2]]) == [7, 7, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 5, 2]]) == [6, 5, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 1, 4]]) == [3, 1, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 2]]) == [6, 4, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 3, 1]]) == [1, 3, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 7, 2]]) == [2, 7, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 1, 6]]) == [7, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 5]]) == [2, 3, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 2, 1]]) == [1, 2, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 7, 4]]) == [3, 7, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 2]]) == [2, 3, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 5]]) == [5, 5, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 6, 2]]) == [1, 6, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 6]]) == [4, 5, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 4, 1]]) == [3, 4, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 3]]) == [1, 4, 3]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 3, 2]]) == [6, 3, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 1]]) == [4, 2, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 7, 6]]) == [4, 7, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 4, 4]]) == [4, 4, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 7, 1]]) == [3, 7, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 4]]) == [4, 5, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 6, 4]]) == [2, 6, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 6]]) == [2, 3, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 6]]) == [1, 4, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 5, 6]]) == [6, 5, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 8, 3]]) == [4, 8, 3]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 1]]) == [6, 4, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 1]]) == [5, 5, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 1]]) == [1, 1, 1]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef max_sum_list(sublists: list[list[float]]) -> list[float]:\n    \"\"\"\n    Returns the sublist with the greatest sum of elements.\n\n    Parameters:\n    sublists (list of list of float): A list containing sublists of numbers.\n\n    Returns:\n    list of float: The sublist with the greatest sum.\n    \"\"\"\n    # Initialize variables to track the maximum sum and the corresponding sublist\n    max_sum = float('-inf')\n    max_sum_sublist = []\n\n    # Iterate through each sublist\n    for sublist in sublists:\n        # Calculate the sum of the current sublist\n        try:\n            current_sum = sum(sublist)\n        except TypeError:\n            raise ValueError(\"All elements in sublists must be numeric.\")\n\n        # Update the maximum sum and sublist if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_sublist = sublist\n\n    return max_sum_sublist\n", "passed": true, "pass": true, "pass_num": 10, "round": 701, "mutate_method": "condense_two2one", "parent_index": 401}
