{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 12, "prompt": "Write a function to sort a given matrix in ascending order. The sorting should be done according to the sum of its rows.", "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "assert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "assert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "assert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "assert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "assert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "assert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "assert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "assert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "assert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "assert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "assert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "assert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "assert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "assert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "assert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "assert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "assert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "assert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "assert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "assert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "assert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "assert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "assert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "assert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "assert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "assert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "assert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "assert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "assert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "assert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "assert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "assert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "assert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "assert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "assert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "assert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "assert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "assert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "assert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "assert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "assert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "assert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "assert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "assert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "assert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "assert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "assert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "assert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "assert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "assert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "assert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "assert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "assert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "assert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "assert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "assert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "assert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "assert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "assert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "assert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "assert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "assert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "assert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "assert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "assert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "assert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "assert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "assert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "assert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "assert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "assert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "assert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "assert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "assert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "assert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "assert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "assert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "assert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "assert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "assert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "assert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "assert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "assert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "assert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "assert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "assert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "assert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "assert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "assert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "assert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "assert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "assert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "assert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "assert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "assert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "assert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "assert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "assert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "assert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "entry_point": "sort_matrix", "repair_prompt": ["Write a function sort_matrix to sort a given matrix in ascending order. The sorting should be done according to the sum of its rows.\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "Write a function sort_matrix to sort a given matrix in ascending order. The sorting should be done according to the sum of its rows. Sorting must be based on the total value of the elements in each row. The rows with a lower sum should appear before those with a higher sum.\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "Write a function sort_matrix to sort a given matrix in ascending order by the sum of its rows.\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"], "completions": ["from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    matrix (list of list of int): A 2D list where each sublist represents a row of the matrix.\n\n    Returns:\n    list of list of int: A new matrix sorted by the sum of its rows.\n    \"\"\"\n    # Calculate the sum of each row and pair it with the row itself\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort the rows based on their sums in ascending order\n    row_sums.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows from the sorted pairs\n    sorted_matrix = [row for _, row in row_sums]\n    \n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(sort_matrix([]))  # Expected output: []\n    print(sort_matrix([[1, 2], [3, 4], [5, 6]]))  # Expected output: [[1, 2], [3, 4], [5, 6]]\n    print(sort_matrix([[1], [2], [3]]))  # Expected output: [[1], [2], [3]]\n", "from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    matrix (list of list of int): A 2D list representing the matrix to be sorted.\n\n    Returns:\n    list of list of int: A new matrix sorted by the sum of its rows.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix:\n        return []\n\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=sum)\n\n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(sort_matrix([]))  # Expected output: []\n    print(sort_matrix([[0, 0, 0], [1, 1, 1], [2, 2, 2]]))  # Expected output: [[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n    print(sort_matrix([[5], [3], [4]]))  # Expected output: [[3], [4], [5]]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    '''\n    Sorts a matrix in ascending order based on the sum of its rows.\n    \n    Parameters:\n    matrix (List[List[int]]): A 2D list representing the matrix to be sorted.\n    \n    Returns:\n    List[List[int]]: A new matrix sorted by the sum of its rows.\n    '''\n    # Calculate the sum of each row in the matrix\n    row_sums = [(sum(row), index) for index, row in enumerate(matrix)]\n    \n    # Sort the matrix based on the row sums, maintaining original order for identical sums\n    sorted_indices = sorted(row_sums, key=lambda x: (x[0], x[1]))\n    \n    # Return the sorted matrix\n    return [matrix[index] for _, index in sorted_indices]\n\n# Example usage\nif __name__ == \"__main__\":\n    example_matrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\n    sorted_matrix = sort_matrix(example_matrix)\n    print(sorted_matrix)  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import List\n## main.py\nfrom typing import List, Union\n\ndef sort_matrix(matrix: List[List[Union[int, float]]]) -> List[List[Union[int, float]]]:\n    \"\"\"\n    Sorts a matrix based on the sum of its rows.\n\n    Parameters:\n    matrix (List[List[Union[int, float]]]): A 2D list representing the matrix.\n\n    Returns:\n    List[List[Union[int, float]]]: A new matrix sorted by row sums.\n    \"\"\"\n    # Handle edge case for empty matrix\n    if not matrix:\n        return []\n\n    # Validate input to ensure all elements are numeric\n    for row in matrix:\n        if not all(isinstance(x, (int, float)) for x in row):\n            raise ValueError(\"Matrix must contain numeric data only.\")\n\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=sum)\n\n    return sorted_matrix\n", "from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    matrix (list of list of int): A 2D list representing the matrix to be sorted.\n\n    Returns:\n    list of list of int: A new matrix sorted by the sum of its rows.\n    \"\"\"\n    # Use Python's built-in sorted function to sort the matrix\n    # The key parameter is set to a lambda function that calculates the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    \n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(sort_matrix([]))  # Expected output: []\n    print(sort_matrix([[0, 0, 0], [1, 1, 1]]))  # Expected output: [[0, 0, 0], [1, 1, 1]]\n    print(sort_matrix([[1, -1], [2, -2], [3, -3]]))  # Expected output: [[1, -1], [2, -2], [3, -3]]\n", "from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    '''\n    Sorts a given matrix in ascending order based on the sum of its rows.\n    \n    Parameters:\n    matrix (list of list of int): A 2D list where each sublist represents a row of the matrix.\n    \n    Returns:\n    list of list of int: A new matrix sorted by the sum of its rows.\n    '''\n    # Check if the matrix is empty. If it is, return an empty matrix.\n    if not matrix:\n        return []\n\n    # Use Python's built-in `sorted` function to sort the matrix.\n    # The key for sorting is the sum of each row.\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases to demonstrate the functionality of sort_matrix\n    print(sort_matrix([]))  # Expected output: []\n    print(sort_matrix([[0, 0, 0], [1, 1, 1], [2, 2, 2]]))  # Expected output: [[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n    print(sort_matrix([[3, 3], [1, 1, 1], [2]]))  # Expected output: [[2], [1, 1, 1], [3, 3]]\n", "from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    '''\n    Sorts a given matrix in ascending order by the sum of its rows.\n    \n    Parameters:\n    matrix (list[list[int]]): A 2D list representing the matrix to be sorted.\n    \n    Returns:\n    list[list[int]]: A new matrix sorted by the sum of its rows.\n    \n    Example:\n    >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n    [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    '''\n    # Validate input to ensure all elements are numeric\n    for row in matrix:\n        if not all(isinstance(item, (int, float)) for item in row):\n            raise ValueError(\"Matrix should only contain numeric elements.\")\n    \n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    \n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    example_matrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\n    print(sort_matrix(example_matrix))\n", "from typing import List\n## main.py\nfrom typing import List, Union\n\ndef sort_matrix(matrix: List[List[Union[int, float]]]) -> List[List[Union[int, float]]]:\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    matrix (List[List[Union[int, float]]]): A 2D list representing the matrix.\n\n    Returns:\n    List[List[Union[int, float]]]: A new matrix sorted by the sum of its rows.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix:\n        return []\n\n    # Sort the matrix using the sum of each row as the key\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n\n    return sorted_matrix\n", "from typing import List\n## main.py\n\nfrom typing import List, Union\n\ndef sort_matrix(matrix: List[List[Union[int, float]]]) -> List[List[Union[int, float]]]:\n    \"\"\"\n    Sorts a matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    matrix (List[List[Union[int, float]]]): A 2D list representing the matrix.\n\n    Returns:\n    List[List[Union[int, float]]]: A new matrix sorted by the sum of its rows.\n\n    Example:\n    >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n    [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    \"\"\"\n    # Handle edge case for empty matrix\n    if not matrix:\n        return []\n\n    # Calculate the sum of each row and pair it with the row\n    row_sums = [(sum(row), row) for row in matrix]\n\n    # Sort the pairs based on the sum in ascending order\n    row_sums.sort(key=lambda x: x[0])\n\n    # Extract and return the rows from the sorted pairs\n    sorted_matrix = [row for _, row in row_sums]\n\n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    example_matrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\n    print(sort_matrix(example_matrix))\n", "from typing import List\n## main.py\n\nfrom typing import List, Union\n\ndef sort_matrix(matrix: List[List[Union[int, float]]]) -> List[List[Union[int, float]]]:\n    \"\"\"\n    Sorts a matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    matrix (List[List[Union[int, float]]]): A 2D list representing the matrix.\n\n    Returns:\n    List[List[Union[int, float]]]: The sorted matrix.\n    \"\"\"\n    # Validate input\n    if not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n    if not all(all(isinstance(item, (int, float)) for item in row) for row in matrix):\n        raise ValueError(\"All elements in the matrix must be numeric (int or float).\")\n\n    # Calculate row sums and sort the matrix based on these sums\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n\n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    example_matrix = [[1, 2], [3, 4], [5, 6]]\n    sorted_example = sort_matrix(example_matrix)\n    print(\"Sorted Matrix:\", sorted_example)\n"], "plans": ["requirement analysis:\nThe function should efficiently sort matrices based on the sum of their rows. It should handle edge cases such as empty matrices or matrices with varying row lengths. The implementation should be straightforward and not rely on external libraries to maintain simplicity and ease of use.\nrequirement pool:\n- Implement the core sorting functionality based on row sums\n- Ensure compatibility with Python 3.x\n- Provide comprehensive documentation and examples\n- Optimize for performance with large matrices\n- Include unit tests to verify functionality\nWe will implement a function in pure Python to sort a matrix based on the sum of its rows. This approach ensures simplicity and compatibility with all Python 3.x versions. The function will handle edge cases such as empty matrices and matrices with varying row lengths. We will avoid using external libraries to maintain ease of integration and use.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array consisting of rows and columns. In this requirement, the matrix is a list of lists where each inner list represents a row.\n\n    'sum of its rows'\n    Explanation: The sum of a row refers to the total obtained by adding all the elements within that row. The requirement specifies sorting the matrix based on these sums.\n\n# [phrase showing quantity relationship]\n    'ascending order': means that the rows should be sorted from the smallest sum to the largest sum.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Calculate the sum of each row in the matrix.\n    2. Sort the rows based on their sums in ascending order.\n    3. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix has no rows to sort, so the expected output is an empty matrix.\n    \n    sort_matrix([[1, 2], [3, 4], [5, 6]]) = [[1, 2], [3, 4], [5, 6]]\n    Explanation: The sums of the rows are 3, 7, and 11 respectively. Since they are already in ascending order, the output remains unchanged.\n    \n    sort_matrix([[1], [2], [3]]) = [[1], [2], [3]]\n    Explanation: Each row has only one element, so they are already sorted in ascending order based on their sums.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting based on row sums will naturally handle these cases.\n", "requirement analysis:\nThe requirement is to create a function that sorts a matrix based on the sum of its rows. The function should be efficient and handle various matrix sizes. It should also be easy to integrate and understand.\nrequirement pool:\n- Implement the sort_matrix function to sort matrices by row sum\n- Ensure the function handles edge cases like empty matrices\n- Provide documentation and usage examples\n- Optimize for performance with large matrices\n- Maintain compatibility with Python 3.x\nWe will implement the sort_matrix function using pure Python to keep it simple and efficient. The function will sort the matrix based on the sum of its rows. We will ensure it handles edge cases like empty matrices and maintain compatibility with Python 3.x. We will also provide clear documentation and examples for ease of integration and understanding.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array of numbers arranged in rows and columns.\n\n    'sort in ascending order'\n    Explanation: Arrange the elements from smallest to largest based on a specific criterion.\n\n    'sum of its rows'\n    Explanation: The criterion for sorting is the sum of the elements in each row of the matrix.\n\n# [phrase showing quantity relationship]\n    'ascending order': means that the rows should be sorted from the smallest sum to the largest sum.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `sort_matrix` that takes a matrix as input.\n    2. Check if the matrix is empty. If it is, return an empty matrix.\n    3. Calculate the sum of each row in the matrix.\n    4. Sort the rows of the matrix based on their sums in ascending order.\n    5. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty matrix as there are no rows to sort.\n\n    sort_matrix([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) = [[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n    Explanation: The rows are already sorted in ascending order based on their sums (0, 3, and 6).\n\n    sort_matrix([[5], [3], [4]]) = [[3], [4], [5]]\n    Explanation: Each row contains a single element, so sorting is based on these individual values.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting based on row sums will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently sort matrices based on the sum of rows, ensuring it handles various matrix sizes and edge cases. It should be easy to integrate and understand, with clear documentation.\nrequirement pool:\n- Implement the sorting algorithm based on row sums\n- Optimize for performance with large matrices\n- Provide comprehensive documentation and examples\n- Ensure compatibility with existing Python codebases\n- Handle edge cases such as empty matrices or single-row matrices\nWe will implement a function using pure Python to sort a matrix based on the sum of its rows. The function will handle edge cases such as empty matrices or matrices with identical row sums. We will use Python's built-in sorting capabilities to ensure efficiency and compatibility with existing codebases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix': A two-dimensional array where each element is a list representing a row.\n    'sum of its rows': The total sum of elements in each row of the matrix.\n\n# [phrase showing quantity relationship]\n    'ascending order': The rows should be sorted from the smallest sum to the largest sum.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Calculate the sum of each row in the matrix.\n    2. Sort the matrix based on these sums using Python's built-in sorting functions.\n    3. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty matrix as there are no rows to sort.\n    \n    sort_matrix([[1, 1, 1], [1, 1, 1]]) = [[1, 1, 1], [1, 1, 1]]\n    Explanation: All rows have identical sums, so the order remains unchanged.\n    \n    sort_matrix([[0], [0, 0], [0, 0, 0]]) = [[0], [0, 0], [0, 0, 0]]\n    Explanation: All rows have a sum of zero, so the order remains unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. Python's sorting functions can handle empty lists and lists with identical values naturally.\n", "requirement analysis:\nThe function should efficiently sort matrices based on row sums, ensuring compatibility with various data structures and providing clear documentation for ease of use.\nrequirement pool:\n- Implement the matrix sorting function based on row sums\n- Optimize the function for large matrices\n- Provide comprehensive documentation and examples\n- Ensure compatibility with existing Python data structures\n- Handle edge cases such as empty matrices or non-numeric data\nWe will implement the matrix sorting function using pure Python to ensure simplicity and compatibility with existing systems. The function will sort the matrix based on the sum of each row, using Python's built-in sorting capabilities. We will handle edge cases such as empty matrices and non-numeric data by validating input before processing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array consisting of rows and columns. In this requirement, the matrix is a list of lists where each inner list represents a row.\n\n    'sum of its rows'\n    Explanation: The sum of a row refers to the total value obtained by adding all the elements within that row.\n\n# [phrase showing quantity relationship]\n    'lower sum': means that rows with smaller total values should appear before those with larger total values in the sorted matrix.\n\n# [degree adverb] \n    'ascending order': means sorting from smallest to largest based on the sum of the rows.\n\n# [code logic]\n    1. Define the function `sort_matrix` that takes a matrix (list of lists) as input.\n    2. Validate the input to ensure it is a matrix and contains numeric data.\n    3. Calculate the sum of each row in the matrix.\n    4. Sort the matrix based on the calculated sums using Python's built-in sorting capabilities.\n    5. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty list as there are no rows to sort.\n\n    sort_matrix([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) = [[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n    Explanation: The sums are 0, 3, and 6 respectively, so the matrix is already sorted in ascending order.\n\n    sort_matrix([[1], [2], [3]]) = [[1], [2], [3]]\n    Explanation: Each row contains a single element, and they are already sorted in ascending order based on their sums.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def sort_matrix(matrix):\n            if not matrix:\n                return []\n            for row in matrix:\n                if not all(isinstance(x, (int, float)) for x in row):\n                    raise ValueError(\"Matrix must contain numeric data only.\")\n            return sorted(matrix, key=sum)\n", "requirement analysis:\nThe function should efficiently sort a matrix based on the sum of its rows. It must handle edge cases such as empty matrices or rows with negative numbers. The implementation should be straightforward, leveraging Python's built-in capabilities for sorting.\nrequirement pool:\n- Implement the sort_matrix function to sort by row sums\n- Optimize the function for large matrices\n- Include comprehensive documentation and examples\n- Ensure compatibility with Python 3.x\n- Handle edge cases like empty matrices or negative numbers\nWe will implement the sort_matrix function using Python's built-in sorted function. This approach leverages the key parameter to sort the matrix based on the sum of each row. This method is efficient and straightforward, making it suitable for handling large matrices. We will ensure compatibility with Python 3.x and handle edge cases such as empty matrices or rows with negative numbers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array of numbers arranged in rows and columns. In this requirement, the matrix is a list of lists, where each inner list represents a row.\n\n    'sum of its rows'\n    Explanation: This refers to the total value obtained by adding all the elements in a row of the matrix. The requirement is to sort the matrix based on these sums.\n\n# [phrase showing quantity relationship]\n    'ascending order': This means that the rows should be sorted from the smallest sum to the largest sum.\n\n# [degree adverb] \n    'lower': This indicates that rows with smaller sums should appear before those with larger sums in the sorted matrix.\n\n# [code logic]\n    1. Define the function `sort_matrix` that takes a matrix (list of lists) as input.\n    2. Use Python's built-in `sorted` function to sort the matrix.\n    3. Set the `key` parameter of `sorted` to a lambda function that calculates the sum of each row.\n    4. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty matrix as there are no rows to sort.\n\n    sort_matrix([[0, 0, 0], [1, 1, 1]]) = [[0, 0, 0], [1, 1, 1]]\n    Explanation: The first row has a sum of 0, which is less than the sum of the second row (3), so it should appear first.\n\n    sort_matrix([[1, -1], [2, -2], [3, -3]]) = [[1, -1], [2, -2], [3, -3]]\n    Explanation: All rows have a sum of 0, so their order remains unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of Python's `sorted` function with a key based on row sums inherently handles these cases.\n", "requirement analysis:\nThe function should efficiently sort matrices based on row sums, ensuring compatibility with existing Python data structures and providing clear documentation for ease of use.\nrequirement pool:\n- Efficiently sort matrices based on row sums\n- Handle edge cases such as empty matrices or rows with negative numbers\n- Provide clear documentation and usage examples\n- Ensure compatibility with Python 3.x\n- Optimize for large matrices\nWe will implement a function using pure Python to sort the matrix based on the sum of its rows. This approach will ensure compatibility with Python 3.x and handle edge cases such as empty matrices or rows with negative numbers. We will use Python's built-in sorting capabilities to achieve this efficiently. The function will be documented with clear examples and comments for ease of understanding.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    A matrix is a two-dimensional array of numbers arranged in rows and columns.\n\n    'sort in ascending order'\n    This means arranging the rows of the matrix such that the row with the smallest sum of its elements comes first, followed by rows with larger sums.\n\n# [phrase showing quantity relationship]\n    'lower sum': This indicates that the sum of the elements in one row is less than the sum of the elements in another row.\n\n# [degree adverb]\n    'ascending': This means sorting from smallest to largest based on the sum of the rows.\n\n# [code logic]\n1. Define a function `sort_matrix` that takes a matrix as input.\n2. Check if the matrix is empty. If it is, return an empty matrix.\n3. Use Python's built-in `sorted` function to sort the matrix.\n4. The key for sorting should be the sum of each row.\n5. Return the sorted matrix.\n\n# [edge case]\n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty matrix as there are no rows to sort.\n\n    sort_matrix([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) = [[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n    Explanation: The rows are already sorted in ascending order based on their sums.\n\n    sort_matrix([[3, 3], [1, 1, 1], [2]]) = [[2], [1, 1, 1], [3, 3]]\n    Explanation: The sum of the first row is 6, the second row is 3, and the third row is 2. Sorting them gives the order based on their sums.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using Python's `sorted` function with a key based on row sums will handle these cases correctly.\n", "requirement analysis:\nThe function should efficiently sort matrices by row sums, ensuring it handles various matrix sizes and edge cases. Documentation and examples are crucial for user understanding.\nrequirement pool:\n- Implement the sort_matrix function to sort matrices by row sums\n- Ensure the function handles edge cases like empty matrices\n- Provide documentation and examples for user understanding\n- Optimize the function for large matrices\n- Maintain compatibility with existing Python versions\nWe will implement the sort_matrix function using Python's built-in capabilities to sort lists. The function will calculate the sum of each row and sort the matrix based on these sums. We will ensure the function handles edge cases like empty matrices and maintain compatibility with existing Python versions. Documentation and examples will be provided for user understanding.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array consisting of rows and columns. In this requirement, the matrix is a list of lists where each inner list represents a row.\n\n    'sum of its rows'\n    Explanation: The sum of a row refers to the total obtained by adding all the elements within that row.\n\n# [phrase showing quantity relationship]\n    'ascending order'\n    Explanation: This means sorting the matrix such that the rows with smaller sums appear before rows with larger sums. In code, this can be implemented using Python's built-in sorting functions, specifying the key as the sum of each row.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Define the function `sort_matrix` that takes a matrix (list of lists) as input.\n    2. Use Python's `sorted()` function to sort the matrix.\n    3. Specify the key for sorting as the sum of each row using a lambda function.\n    4. Return the sorted matrix.\n\n# [edge case]\n    sort_matrix([]) = []\n    Explanation: An empty matrix has no rows to sort, so the expected output is an empty list.\n    \n    sort_matrix([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) = [[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n    Explanation: The sums of the rows are 0, 3, and 6 respectively. The matrix is already sorted in ascending order by these sums.\n\n    sort_matrix([[5], [3, 2], [4, 1]]) = [[3, 2], [4, 1], [5]]\n    Explanation: The sums of the rows are 5, 5, and 5 respectively. Since all sums are equal, any order is valid; however, Python's sort will maintain the original order due to stability.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using Python's `sorted()` function will naturally handle empty matrices and maintain stability for rows with equal sums.\n", "requirement analysis:\nThe function should sort matrices based on the sum of their rows, ensuring that it handles various matrix sizes efficiently. It should be easy to integrate and provide clear output.\nrequirement pool:\n- Implement the sorting algorithm based on row sums\n- Optimize for performance with large matrices\n- Include comprehensive documentation and examples\n- Ensure compatibility with existing Python projects\n- Handle edge cases such as empty matrices or non-numeric values\nWe will implement the function using pure Python to ensure ease of integration and compatibility with existing systems. The function will sort the matrix based on the sum of its rows, handling edge cases such as empty matrices gracefully. For performance optimization, we will use Python's built-in sorting capabilities, which are efficient for handling large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    A matrix is a two-dimensional array of numbers, where each element is accessed by two indices: the row index and the column index.\n\n    'sum of its rows'\n    This refers to the total sum of all elements in a particular row of the matrix.\n\n# [phrase showing quantity relationship]\n    'ascending order': This means arranging the rows such that the sum of each row is less than or equal to the sum of the next row.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `sort_matrix` that takes a matrix as input.\n    2. Check if the matrix is empty. If it is, return an empty list.\n    3. Use Python's built-in `sorted` function to sort the matrix.\n    4. The key for sorting should be the sum of each row.\n    5. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty list as there are no rows to sort.\n    \n    sort_matrix([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) = [[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n    Explanation: The rows are already in ascending order based on their sums (0, 3, and 6).\n\n    sort_matrix([[5], [3], [4]]) = [[3], [4], [5]]\n    Explanation: Each row contains a single element, so sorting is based on these individual values.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using Python's built-in sorting handles these cases naturally.\n", "requirement analysis:\nThe function should sort matrices based on the sum of their rows, ensuring it handles various matrix sizes and data types efficiently. It should be easy to integrate and provide clear documentation for users.\nrequirement pool:\n- Implement the sorting algorithm based on row sums\n- Optimize for performance with large matrices\n- Include comprehensive documentation and examples\n- Ensure compatibility with existing Python projects\n- Handle edge cases such as empty matrices or non-numeric data\nWe will implement a function using pure Python to sort a matrix based on the sum of its rows. The function will handle edge cases such as empty matrices and non-numeric data gracefully. We will use Python's built-in capabilities to ensure compatibility and efficiency, avoiding the complexity of external libraries like NumPy or Pandas for this simple task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array consisting of rows and columns. In this requirement, the matrix is a list of lists where each inner list represents a row.\n\n    'sum of its rows'\n    Explanation: The sum of a row is the total obtained by adding all the elements in that row. The requirement is to sort the matrix based on these sums.\n\n# [phrase showing quantity relationship]\n    'ascending order': means that the rows should be sorted from the smallest sum to the largest sum.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Calculate the sum of each row in the matrix.\n    2. Pair each row with its corresponding sum.\n    3. Sort the pairs based on the sum in ascending order.\n    4. Extract and return the rows from the sorted pairs.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix has no rows to sort, so the expected output is an empty list.\n    \n    sort_matrix([[1, 2], [2, 1], [1, 1, 1]]) = [[1, 1, 1], [1, 2], [2, 1]]\n    Explanation: The sums are 3, 3, and 3 respectively. Since they are equal, the original order is maintained.\n    \n    sort_matrix([[0], [0, 0], [0, 0, 0]]) = [[0], [0, 0], [0, 0, 0]]\n    Explanation: All rows have a sum of zero, so they remain in their original order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of sorting based on row sums inherently handles these cases.\n", "requirement analysis:\nThe function should sort a matrix based on the sum of its rows. It needs to handle matrices of varying sizes and ensure the output is consistently ordered. The function should be optimized for performance and include error handling for non-numeric inputs.\nrequirement pool:\n- Implement the core sorting functionality based on row sums\n- Optimize the function for performance with large matrices\n- Include comprehensive documentation and usage examples\n- Ensure compatibility with Python 3.x versions\n- Add error handling for invalid inputs\nWe will implement the function using pure Python to keep it simple and easy to integrate into existing codebases. The function will sort the matrix based on the sum of its rows, ensuring compatibility with Python 3.x versions. We will include error handling for non-numeric inputs and provide comprehensive documentation and usage examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sort': The requirement is to arrange the matrix rows in a specific order.\n    'matrix': A two-dimensional array consisting of rows and columns.\n    'sum of its rows': The total of all elements in a row.\n\n# [phrase showing quantity relationship]\n    'ascending order': This means arranging the rows from the smallest sum to the largest sum.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Calculate the sum of each row in the matrix.\n    2. Sort the rows based on their calculated sums in ascending order.\n    3. Return the sorted matrix.\n\n# [edge case]\n    sort_matrix([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) = [[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n    Explanation: The sums are already in ascending order: 0, 3, and 6.\n    \n    sort_matrix([[1, 2], [3, 4], [5, 6]]) = [[1, 2], [3, 4], [5, 6]]\n    Explanation: The sums are already in ascending order: 3, 7, and 11.\n    \n    sort_matrix([[5], [3], [4]]) = [[3], [4], [5]]\n    Explanation: The sums are already in ascending order: 3, 4, and 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting based on row sums will naturally handle these cases.\n"], "test": ["def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nfrom typing import List, Union\n\ndef sort_matrix(matrix: List[List[Union[int, float]]]) -> List[List[Union[int, float]]]:\n    \"\"\"\n    Sorts a matrix in ascending order based on the sum of its rows.\n\n    Parameters:\n    matrix (List[List[Union[int, float]]]): A 2D list representing the matrix.\n\n    Returns:\n    List[List[Union[int, float]]]: The sorted matrix.\n    \"\"\"\n    # Validate input\n    if not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists.\")\n    if not all(all(isinstance(item, (int, float)) for item in row) for row in matrix):\n        raise ValueError(\"All elements in the matrix must be numeric (int or float).\")\n\n    # Calculate row sums and sort the matrix based on these sums\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n\n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    example_matrix = [[1, 2], [3, 4], [5, 6]]\n    sorted_example = sort_matrix(example_matrix)\n    print(\"Sorted Matrix:\", sorted_example)\n", "passed": true, "pass": true, "pass_num": 10, "round": 7, "mutate_method": "expand_one2two", "parent_index": 7}
