{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 572, "prompt": "Create a Python function to eliminate redundant numbers from a specified collection of lists.", "code": "def two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]", "test_imports": [], "test_list": ["assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]", "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]", "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]", "assert two_unique_nums([1, 2, 5, 3, 2, 1, 5]) == [3]", "assert two_unique_nums([2, 6, 2, 4, 2, 1, 10]) == [6, 4, 1, 10]", "assert two_unique_nums([1, 2, 4, 7, 2, 8, 3]) == [1, 4, 7, 8, 3]", "assert two_unique_nums([1, 6, 3, 7, 6, 4, 8]) == [1, 3, 7, 4, 8]", "assert two_unique_nums([2, 5, 5, 1, 7, 4, 5]) == [2, 1, 7, 4]", "assert two_unique_nums([2, 7, 4, 1, 5, 5, 3]) == [2, 7, 4, 1, 3]", "assert two_unique_nums([2, 5, 2, 1, 3, 4, 8]) == [5, 1, 3, 4, 8]", "assert two_unique_nums([1, 6, 5, 4, 6, 3, 10]) == [1, 5, 4, 3, 10]", "assert two_unique_nums([4, 7, 3, 4, 6, 2, 10]) == [7, 3, 6, 2, 10]", "assert two_unique_nums([3, 7, 2, 2, 6, 9, 10]) == [3, 7, 6, 9, 10]", "assert two_unique_nums([5, 1, 5, 4, 3, 2, 1]) == [4, 3, 2]", "assert two_unique_nums([3, 5, 3, 5, 1, 2, 3]) == [1, 2]", "assert two_unique_nums([2, 5, 1, 2, 4, 2, 6]) == [5, 1, 4, 6]", "assert two_unique_nums([5, 2, 7, 6, 2, 7, 5]) == [6]", "assert two_unique_nums([5, 4, 2, 5, 7, 7, 5]) == [4, 2]", "assert two_unique_nums([3, 2, 7, 1, 5, 8, 5]) == [3, 2, 7, 1, 8]", "assert two_unique_nums([5, 6, 8, 2, 1, 7, 1]) == [5, 6, 8, 2, 7]", "assert two_unique_nums([5, 6, 1, 1, 5, 8, 10]) == [6, 8, 10]", "assert two_unique_nums([4, 5, 8, 3, 6, 4, 6]) == [5, 8, 3]", "assert two_unique_nums([4, 7, 7, 7, 8, 5, 10]) == [4, 8, 5, 10]", "assert two_unique_nums([4, 6, 5, 7, 3, 7, 10]) == [4, 6, 5, 3, 10]", "assert two_unique_nums([2, 3, 7, 6, 6, 7, 8]) == [2, 3, 8]", "assert two_unique_nums([5, 2, 1, 4, 4, 8, 4]) == [5, 2, 1, 8]", "assert two_unique_nums([3, 1, 4, 6, 3, 4, 2]) == [1, 6, 2]", "assert two_unique_nums([2, 2, 3, 5, 7, 5, 2]) == [3, 7]", "assert two_unique_nums([4, 1, 5, 4, 4, 9, 1]) == [5, 9]", "assert two_unique_nums([5, 6, 1, 6, 2, 4, 10]) == [5, 1, 2, 4, 10]", "assert two_unique_nums([5, 3, 2, 6, 2, 4, 9]) == [5, 3, 6, 4, 9]", "assert two_unique_nums([1, 3, 3, 4, 4, 5, 8]) == [1, 5, 8]", "assert two_unique_nums([4, 6, 8, 5, 2, 4, 3]) == [6, 8, 5, 2, 3]", "assert two_unique_nums([3, 7, 2, 7, 7, 7, 2]) == [3]", "assert two_unique_nums([6, 7, 7, 4, 4, 6, 5]) == [5]", "assert two_unique_nums([1, 4, 8, 2, 6, 9, 2]) == [1, 4, 8, 6, 9]", "assert two_unique_nums([2, 7, 4, 4, 9, 8]) == [2, 7, 9, 8]", "assert two_unique_nums([4, 5, 4, 1, 6, 10]) == [5, 1, 6, 10]", "assert two_unique_nums([4, 3, 7, 1, 6, 9]) == [4, 3, 7, 1, 6, 9]", "assert two_unique_nums([1, 1, 2, 7, 1, 1]) == [2, 7]", "assert two_unique_nums([5, 4, 1, 5, 2, 1]) == [4, 2]", "assert two_unique_nums([1, 6, 6, 3, 3, 5]) == [1, 5]", "assert two_unique_nums([6, 2, 8, 4, 1, 9]) == [6, 2, 8, 4, 1, 9]", "assert two_unique_nums([4, 5, 7, 5, 9, 7]) == [4, 9]", "assert two_unique_nums([1, 4, 7, 2, 4, 9]) == [1, 7, 2, 9]", "assert two_unique_nums([1, 2, 6, 7, 8, 5]) == [1, 2, 6, 7, 8, 5]", "assert two_unique_nums([3, 3, 6, 7, 8, 3]) == [6, 7, 8]", "assert two_unique_nums([2, 6, 1, 2, 9, 2]) == [6, 1, 9]", "assert two_unique_nums([2, 4, 8, 5, 7, 8]) == [2, 4, 5, 7]", "assert two_unique_nums([6, 7, 5, 1, 9, 9]) == [6, 7, 5, 1]", "assert two_unique_nums([4, 1, 1, 6, 4, 7]) == [6, 7]", "assert two_unique_nums([5, 4, 2, 2, 6, 2]) == [5, 4, 6]", "assert two_unique_nums([5, 1, 3, 2, 8, 6]) == [5, 1, 3, 2, 8, 6]", "assert two_unique_nums([4, 3, 4, 4, 1, 6]) == [3, 1, 6]", "assert two_unique_nums([4, 2, 4, 6, 4, 3]) == [2, 6, 3]", "assert two_unique_nums([1, 5, 1, 7, 6, 7]) == [5, 6]", "assert two_unique_nums([4, 2, 1, 4, 3, 7]) == [2, 1, 3, 7]", "assert two_unique_nums([2, 5, 3, 2, 9, 6]) == [5, 3, 9, 6]", "assert two_unique_nums([4, 4, 4, 2, 5, 1]) == [2, 5, 1]", "assert two_unique_nums([5, 4, 5, 1, 3, 1]) == [4, 3]", "assert two_unique_nums([6, 2, 1, 3, 9, 5]) == [6, 2, 1, 3, 9, 5]", "assert two_unique_nums([2, 4, 8, 7, 4, 9]) == [2, 8, 7, 9]", "assert two_unique_nums([6, 6, 6, 1, 1, 5]) == [5]", "assert two_unique_nums([1, 6, 6, 4, 9, 4]) == [1, 9]", "assert two_unique_nums([6, 3, 6, 5, 5, 3]) == []", "assert two_unique_nums([3, 1, 7, 2, 8, 8]) == [3, 1, 7, 2]", "assert two_unique_nums([1, 6, 2, 5, 8, 2]) == [1, 6, 5, 8]", "assert two_unique_nums([2, 7, 4, 6, 7, 1]) == [2, 4, 6, 1]", "assert two_unique_nums([5, 4, 7, 3, 2, 2]) == [5, 4, 7, 3]", "assert two_unique_nums([2, 6, 8, 8, 10]) == [2, 6, 10]", "assert two_unique_nums([3, 5, 3, 3, 6]) == [5, 6]", "assert two_unique_nums([2, 1, 4, 9, 4]) == [2, 1, 9]", "assert two_unique_nums([6, 3, 3, 7, 7]) == [6]", "assert two_unique_nums([1, 5, 6, 4, 9]) == [1, 5, 6, 4, 9]", "assert two_unique_nums([6, 6, 6, 4, 6]) == [4]", "assert two_unique_nums([1, 6, 1, 6, 6]) == []", "assert two_unique_nums([4, 3, 8, 3, 8]) == [4]", "assert two_unique_nums([5, 4, 5, 3, 1]) == [4, 3, 1]", "assert two_unique_nums([2, 7, 3, 9, 5]) == [2, 7, 3, 9, 5]", "assert two_unique_nums([1, 2, 7, 3, 1]) == [2, 7, 3]", "assert two_unique_nums([1, 7, 1, 9, 2]) == [7, 9, 2]", "assert two_unique_nums([4, 1, 3, 4, 5]) == [1, 3, 5]", "assert two_unique_nums([1, 6, 3, 2, 5]) == [1, 6, 3, 2, 5]", "assert two_unique_nums([5, 3, 2, 5, 7]) == [3, 2, 7]", "assert two_unique_nums([5, 7, 6, 8, 2]) == [5, 7, 6, 8, 2]", "assert two_unique_nums([5, 4, 2, 8, 4]) == [5, 2, 8]", "assert two_unique_nums([4, 7, 8, 5, 9]) == [4, 7, 8, 5, 9]", "assert two_unique_nums([3, 4, 7, 8, 4]) == [3, 7, 8]", "assert two_unique_nums([5, 4, 7, 7, 5]) == [4]", "assert two_unique_nums([6, 6, 8, 6, 5]) == [8, 5]", "assert two_unique_nums([4, 7, 8, 3, 6]) == [4, 7, 8, 3, 6]", "assert two_unique_nums([6, 7, 7, 3, 1]) == [6, 3, 1]", "assert two_unique_nums([4, 6, 4, 6, 10]) == [10]", "assert two_unique_nums([1, 1, 3, 6, 1]) == [3, 6]", "assert two_unique_nums([6, 7, 6, 3, 6]) == [7, 3]", "assert two_unique_nums([1, 2, 1, 7, 5]) == [2, 7, 5]", "assert two_unique_nums([1, 2, 7, 4, 2]) == [1, 7, 4]", "assert two_unique_nums([3, 3, 2, 8, 3]) == [2, 8]", "assert two_unique_nums([4, 6, 3, 4, 3]) == [6]", "assert two_unique_nums([2, 6, 1, 6, 4]) == [2, 1, 4]", "assert two_unique_nums([5, 1, 1, 2, 8]) == [5, 2, 8]", "assert two_unique_nums([2, 4, 8, 4, 9]) == [2, 8, 9]"], "entry_point": "two_unique_nums", "repair_prompt": ["Create a Python function two_unique_nums to eliminate redundant numbers from a specified collection of lists.\ntwo_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n", "Create a Python function two_unique_nums to eliminate numbers that are redundant from a specified collection of lists. Numbers that appear more than once should be removed to ensure uniqueness.\ntwo_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n", "Create a Python function two_unique_nums to eliminate redundant numbers from a specified collection of lists.\ntwo_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n"], "completions": ["from typing import List\n## main.py\n\ndef two_unique_nums(numbers: list) -> list:\n    \"\"\"\n    Removes duplicate numbers from the list while preserving the order of first occurrences.\n\n    Parameters:\n    numbers (list): A list of integers from which duplicates need to be removed.\n\n    Returns:\n    list: A list of integers with duplicates removed, preserving the order of first occurrences.\n    \"\"\"\n    # Initialize a dictionary to track the frequency of each number\n    frequency_dict = {}\n\n    # Iterate over each number in the list to populate the frequency dictionary\n    for number in numbers:\n        if number in frequency_dict:\n            frequency_dict[number] += 1\n        else:\n            frequency_dict[number] = 1\n\n    # Create a new list to store numbers that appear exactly once\n    unique_numbers = []\n\n    # Iterate through the original list and add numbers with frequency 1 to the unique_numbers list\n    for number in numbers:\n        if frequency_dict[number] == 1:\n            unique_numbers.append(number)\n\n    return unique_numbers\n\n# Example usage:\n# print(two_unique_nums([1, 1, 2, 2, 3, 3]))  # Output: []\n# print(two_unique_nums([1, 2, 3, 4, 5]))    # Output: [1, 2, 3, 4, 5]\n# print(two_unique_nums([]))                 # Output: []\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef two_unique_nums(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Removes redundant numbers from the list, preserving the order of first occurrences.\n\n    Parameters:\n    numbers (List[int]): A list of integers.\n\n    Returns:\n    List[int]: A list of integers with duplicates removed.\n    \"\"\"\n    # Count occurrences of each number in the list\n    number_counts = Counter(numbers)\n    \n    # Filter numbers that appear only once\n    unique_numbers = [num for num in numbers if number_counts[num] == 1]\n    \n    return unique_numbers\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(two_unique_nums([]))  # Expected output: []\n    print(two_unique_nums([1, 1, 2, 2, 3, 3]))  # Expected output: []\n    print(two_unique_nums([1, 2, 3, 4, 5]))  # Expected output: [1, 2, 3, 4, 5]\n    print(two_unique_nums([4, 5, 6, 7, 4, 5, 8]))  # Expected output: [6, 7, 8]\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef two_unique_nums(numbers: List[int]) -> List[int]:\n    \"\"\"Returns a list of numbers that appear only once in the input list.\n\n    This function takes a list of integers and returns a list of numbers\n    that appear exactly once in the input list. It uses the collections.Counter\n    to count occurrences of each number and filters out those that appear more\n    than once.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A list containing only the unique numbers from the input list.\n    \"\"\"\n    # Count occurrences of each number in the list\n    number_counts = Counter(numbers)\n    \n    # Filter numbers that appear exactly once\n    unique_numbers = [num for num, count in number_counts.items() if count == 1]\n    \n    return unique_numbers\n\n# Example usage:\n# print(two_unique_nums([1, 2, 2, 3, 4, 4, 5]))  # Output: [1, 3, 5]\n# print(two_unique_nums([]))  # Output: []\n# print(two_unique_nums([1, 1, 1, 1]))  # Output: []\n# print(two_unique_nums([1, 2, 3, 4, 5]))  # Output: [1, 2, 3, 4, 5]\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    \"\"\"Removes numbers that appear more than once in the list, maintaining the order of unique numbers.\n    \n    Parameters:\n    nums (List[int]): A list of integers.\n    \n    Returns:\n    List[int]: A list of integers with duplicates removed.\n    \"\"\"\n    # Count occurrences of each number in the list\n    num_counts = Counter(nums)\n    \n    # Filter numbers that appear exactly once\n    unique_nums = [num for num in nums if num_counts[num] == 1]\n    \n    return unique_nums\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(two_unique_nums([]))  # Expected output: []\n    print(two_unique_nums([1, 1, 2, 2, 3, 3]))  # Expected output: []\n    print(two_unique_nums([1, 2, 3, 4, 5]))  # Expected output: [1, 2, 3, 4, 5]\n    print(two_unique_nums([1, 2, 2, 3, 4, 4, 5]))  # Expected output: [1, 3, 5]\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef two_unique_nums(numbers: List[int]) -> List[int]:\n    \"\"\"\n    This function takes a list of integers and returns a list of integers that appear only once in the input list.\n    \n    Parameters:\n    numbers (List[int]): A list of integers which may contain duplicates.\n    \n    Returns:\n    List[int]: A list of integers that are unique in the input list.\n    \"\"\"\n    # Count occurrences of each number in the list\n    number_counts = Counter(numbers)\n    \n    # Filter numbers that appear only once\n    unique_numbers = [num for num, count in number_counts.items() if count == 1]\n    \n    return unique_numbers\n\n# Example usage:\n# print(two_unique_nums([1, 1, 2, 2, 3, 3]))  # Output: []\n# print(two_unique_nums([1, 2, 3, 4, 5]))    # Output: [1, 2, 3, 4, 5]\n# print(two_unique_nums([]))                 # Output: []\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef two_unique_nums(numbers: List[int]) -> List[int]:\n    \"\"\"Removes numbers that appear more than once in the list, maintaining the order of unique numbers.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A list of integers containing only unique numbers from the input list.\n    \"\"\"\n    # Count occurrences of each number in the list\n    number_counts = Counter(numbers)\n    \n    # Filter numbers that appear exactly once\n    unique_numbers = [num for num in numbers if number_counts[num] == 1]\n    \n    return unique_numbers\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(two_unique_nums([1, 1, 2, 3, 3, 4]))  # Output: [2, 4]\n    print(two_unique_nums([5, 5, 5, 5]))        # Output: []\n    print(two_unique_nums([]))                  # Output: []\n    print(two_unique_nums([1, 2, 3, 2, 3, 4, 5]))  # Output: [1, 4, 5]\n", "from typing import List\n## main.py\n\ndef two_unique_nums(numbers: list) -> list:\n    \"\"\"\n    Removes redundant numbers from the list, returning only unique numbers in the order of their first appearance.\n    \n    Parameters:\n    numbers (list): A list of numbers from which duplicates need to be removed.\n    \n    Returns:\n    list: A list containing only the unique numbers in their first occurrence order.\n    \"\"\"\n    # Step 1: Create a dictionary to count the frequency of each number in the list.\n    frequency = {}\n    \n    # Step 2: Iterate through the list and update the frequency in the dictionary.\n    for number in numbers:\n        if number in frequency:\n            frequency[number] += 1\n        else:\n            frequency[number] = 1\n    \n    # Step 3: Use a list comprehension to filter out numbers that appear exactly once.\n    unique_numbers = [number for number in numbers if frequency[number] == 1]\n    \n    # Step 4: Return the filtered list.\n    return unique_numbers\n\n# Example usage:\n# print(two_unique_nums([1, 1, 2, 2, 3, 3]))  # Output: []\n# print(two_unique_nums([1, 2, 3, 4, 5]))    # Output: [1, 2, 3, 4, 5]\n# print(two_unique_nums([]))                 # Output: []\n", "from typing import List\n## main.py\n\nfrom collections import Counter\n\ndef two_unique_nums(numbers: list) -> list:\n    \"\"\"\n    This function takes a list of numbers and returns a list of numbers that appear exactly once.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A list of integers that are unique in the input list.\n    \"\"\"\n    # Count occurrences of each number using collections.Counter\n    number_counts = Counter(numbers)\n    \n    # Filter numbers that appear exactly once\n    unique_numbers = [num for num, count in number_counts.items() if count == 1]\n    \n    return unique_numbers\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [1, 2, 3, 2, 3, 4, 5]\n    print(two_unique_nums(example_list))  # Output: [1, 4, 5]\n", "from typing import List\n## main.py\n\nfrom collections import Counter\n\ndef two_unique_nums(numbers: list) -> list:\n    \"\"\"\n    This function takes a list of numbers and returns a list of numbers that appear only once,\n    maintaining the order of their first appearance.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A list of integers that appear only once in the input list.\n\n    Example:\n    >>> two_unique_nums([1, 2, 3, 2, 3, 4, 5])\n    [1, 4, 5]\n    \"\"\"\n    # Count occurrences of each number in the list\n    number_counts = Counter(numbers)\n    \n    # Filter numbers that appear only once and maintain their order\n    unique_numbers = [num for num in numbers if number_counts[num] == 1]\n    \n    return unique_numbers\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [1, 2, 3, 2, 3, 4, 5]\n    print(two_unique_nums(example_list))  # Output: [1, 4, 5]\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef two_unique_nums(numbers: List[int]) -> List[int]:\n    \"\"\"Returns a list of numbers that appear only once in the input list, maintaining their order of first occurrence.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A list of integers that are unique in the input list.\n    \"\"\"\n    # Count occurrences of each number in the list\n    number_counts = Counter(numbers)\n    \n    # Filter numbers that appear exactly once and maintain their order\n    unique_numbers = [num for num in numbers if number_counts[num] == 1]\n    \n    return unique_numbers\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(two_unique_nums([]))  # Expected output: []\n    print(two_unique_nums([1, 1, 2, 2, 3, 3]))  # Expected output: []\n    print(two_unique_nums([1, 2, 3, 4, 5]))  # Expected output: [1, 2, 3, 4, 5]\n    print(two_unique_nums([4, 5, 6, 7, 4, 5]))  # Expected output: [6, 7]\n"], "plans": ["requirement analysis:\nThe function should efficiently remove duplicate numbers from a list while maintaining the order of first occurrences. It should be easy to use and integrate into existing Python projects without requiring additional dependencies.\nrequirement pool:\n- The function must efficiently remove duplicates while preserving order.\n- The function should be compatible with Python 3.x versions.\n- Provide clear documentation and usage examples.\n- Ensure the function can handle large lists without performance degradation.\n- Consider edge cases such as empty lists or lists with all unique elements.\nWe will implement a function that efficiently removes duplicate numbers from a list while preserving the order of their first occurrences. The function will be compatible with Python 3.x versions and will not require any additional libraries, ensuring ease of integration into existing projects. We will use a dictionary to track occurrences, which provides an efficient way to maintain order and uniqueness.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'eliminate redundant numbers'\n    Explanation: The requirement is to remove numbers that appear more than once in the list, leaving only those that appear exactly once.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize an empty dictionary to keep track of the frequency of each number in the list.\n    2. Iterate through the list and update the frequency of each number in the dictionary.\n    3. Create a new list to store numbers that appear exactly once.\n    4. Iterate through the original list again, and for each number, check its frequency in the dictionary.\n    5. If the frequency is 1, add the number to the new list.\n    6. Return the new list containing only unique numbers.\n\n# [edge case] \n    two_unique_nums([]) = []\n    Explanation: An empty list has no numbers, so the expected output is also an empty list.\n    \n    two_unique_nums([1,1,2,2,3,3]) = []\n    Explanation: All numbers appear more than once, so no number is unique, resulting in an empty list.\n    \n    two_unique_nums([1,2,3,4,5]) = [1,2,3,4,5]\n    Explanation: All numbers appear exactly once, so the output is the same as the input list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking frequency and filtering based on it will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently remove duplicate numbers while preserving the order of first occurrences. It should be easy to use and integrate into existing Python projects without additional dependencies.\nrequirement pool:\n- The function should remove duplicates and preserve order\n- The function should handle large lists efficiently\n- The function should be compatible with Python 3.x\n- Provide examples and documentation\n- Ensure the function is easy to integrate\nWe will implement a function using collections.Counter to efficiently count occurrences of each number and then filter out numbers that appear more than once, preserving the order of their first appearance. This approach is efficient for large datasets and does not require additional dependencies beyond the standard library.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'eliminate redundant numbers'\n    Explanation: The requirement is to remove numbers that appear more than once in the list, leaving only unique numbers.\n\n# [phrase showing quantity relationship]\n    'more than once': This indicates that numbers appearing more than one time should be removed from the list.\n    Implementation: Use a counter to count occurrences and filter out numbers with a count greater than one.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Use collections.Counter to count occurrences of each number in the list.\n    2. Iterate through the list and check the count of each number.\n    3. If a number's count is equal to one, add it to the result list.\n    4. Return the result list containing only unique numbers.\n\n# [edge case] \n    two_unique_nums([]) = []\n    Explanation: An empty list has no numbers, so the expected output is an empty list.\n    \n    two_unique_nums([1, 1, 2, 2, 3, 3]) = []\n    Explanation: All numbers appear more than once, so the expected output is an empty list.\n    \n    two_unique_nums([1, 2, 3, 4, 5]) = [1, 2, 3, 4, 5]\n    Explanation: All numbers are unique, so the expected output is the same as the input list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of using collections.Counter and filtering based on count will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently remove duplicate numbers from a list, returning only unique numbers. It should handle various input sizes and types, ensuring compatibility with different Python versions.\nrequirement pool:\n- The function must correctly identify and return unique numbers from the input list.\n- The function should be optimized for performance with large datasets.\n- Documentation should be clear and provide examples of usage.\n- The function should maintain compatibility with Python 3.x versions.\n- Consider edge cases such as empty lists or lists with all identical elements.\nWe will implement a function called two_unique_nums that utilizes Python's built-in collections.Counter to efficiently count occurrences of each number in the list. This approach is chosen for its simplicity and efficiency, especially with large datasets. The function will then filter out numbers that appear more than once, returning only those that are unique. This method ensures compatibility with Python 3.x versions and handles edge cases like empty lists or lists with all identical elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique'\n    Explanation: In the requirement, 'unique' refers to numbers that appear exactly once in the list, meaning they are not repeated.\n\n# [phrase showing quantity relationship]\n    'more than once': means that numbers appearing more than once should be eliminated from the list.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Use collections.Counter to count occurrences of each number in the list.\n    2. Iterate through the counted numbers and filter out those with a count greater than one.\n    3. Return a list of numbers that appear exactly once.\n\n# [edge case] \n    two_unique_nums([]) = []\n    Explanation: An empty list has no numbers, so the expected output is an empty list.\n    \n    two_unique_nums([1, 1, 1, 1]) = []\n    Explanation: All numbers are identical and appear more than once, so the expected output is an empty list.\n    \n    two_unique_nums([1, 2, 3, 4, 5]) = [1, 2, 3, 4, 5]\n    Explanation: All numbers are unique and appear exactly once, so the expected output is the same list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of using collections.Counter and filtering based on count naturally handles these scenarios.\n", "requirement analysis:\nThe function should efficiently remove duplicate numbers from a list while maintaining the order of unique numbers. It should handle large datasets without significant performance degradation.\nrequirement pool:\n- The function must remove all duplicate numbers from the list.\n- The function should maintain the order of unique numbers.\n- The function should be optimized for performance with large datasets.\n- The function should include documentation explaining its usage.\n- The function should handle edge cases, such as empty lists.\nWe will use Python's collections module, specifically the Counter class, to efficiently count occurrences of each number in the list. This allows us to identify and remove duplicates while maintaining the order of unique numbers. The Counter class is well-suited for this task as it provides a straightforward way to count elements and filter based on their count.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique'\n    Explanation: In the requirement, 'unique' means that numbers should appear only once in the list. Any number that appears more than once should be removed.\n\n# [phrase showing quantity relationship]\n    'more than once': means that any number appearing more than one time should be removed from the list.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Use the Counter class from the collections module to count occurrences of each number in the list.\n    2. Iterate through the list and check the count of each number.\n    3. If a number appears exactly once, add it to the result list.\n    4. Return the result list containing only unique numbers.\n\n# [edge case] \n    two_unique_nums([]) = []\n    Explanation: An empty list has no numbers, so the expected output is an empty list.\n    \n    two_unique_nums([1, 1, 2, 2, 3, 3]) = []\n    Explanation: All numbers appear more than once, so none are unique, resulting in an empty list.\n    \n    two_unique_nums([1, 2, 3, 4, 5]) = [1, 2, 3, 4, 5]\n    Explanation: All numbers appear exactly once, so they are all unique and included in the result.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using Counter will naturally handle these cases by filtering out numbers that do not appear exactly once.\n", "requirement analysis:\nThe function should efficiently remove redundant numbers from a list, ensuring only unique numbers remain. It should handle various list sizes and provide a straightforward interface for users.\nrequirement pool:\n- The function must remove all duplicate numbers from the list.\n- The function should handle large lists efficiently.\n- The function should be easy to understand and use.\n- The function should provide clear output.\n- The function should maintain simplicity in design.\nWe will use Python's collections module, specifically the Counter class, to efficiently count occurrences of each number in the list. This will allow us to filter out numbers that appear more than once, ensuring only unique numbers remain. This approach is efficient and straightforward, making it suitable for handling large lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique': In the requirement, it means that the numbers should appear only once in the list to be considered unique.\n\n    'redundant': Refers to numbers that appear more than once in the list and should be removed.\n\n# [phrase showing quantity relationship]\n    'more than once': This indicates that any number appearing two or more times should be removed from the list.\n    Implementation: Use a counter to track occurrences and filter out numbers with a count greater than one.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the Counter class from the collections module.\n    2. Use Counter to count occurrences of each number in the list.\n    3. Iterate through the counted numbers and filter out those with a count of 1.\n    4. Return the filtered list containing only unique numbers.\n\n# [edge case] \n    two_unique_nums([1, 1, 2, 2, 3, 3]) = []\n    Explanation: All numbers appear more than once, so the result is an empty list.\n    \n    two_unique_nums([1, 2, 3, 4, 5]) = [1, 2, 3, 4, 5]\n    Explanation: All numbers are unique and appear only once, so the result is the same as the input list.\n    \n    two_unique_nums([]) = []\n    Explanation: An empty list has no numbers, so the result is also an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using Counter and filtering based on count will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently remove duplicate numbers from a list while maintaining the order of unique numbers. It should be easy to integrate into existing Python projects and should not require external libraries.\nrequirement pool:\n- The function should remove all duplicate numbers from the list.\n- The function should maintain the order of the original list.\n- The function should handle large lists efficiently.\n- The function should be compatible with Python 3.x versions.\n- The function should include documentation for user guidance.\nWe will implement a function using Python's built-in collections module to efficiently count occurrences of numbers and filter out duplicates while maintaining the order of unique numbers. This approach avoids external dependencies and is compatible with Python 3.x versions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique': means that the numbers should appear only once in the list.\n    'redundant': refers to numbers that appear more than once and should be removed.\n\n# [phrase showing quantity relationship]\n    'more than once': means that any number appearing more than one time should be removed from the list.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Use Python's collections module to count the occurrences of each number in the list.\n    2. Iterate through the list and check the count of each number.\n    3. If a number appears exactly once, add it to the result list.\n    4. Return the result list containing only unique numbers.\n\n# [edge case] \n    two_unique_nums([1, 1, 2, 3, 3, 4]) = [2, 4]\n    Explanation: Numbers 1 and 3 appear more than once and are removed, leaving only 2 and 4.\n    \n    two_unique_nums([5, 5, 5, 5]) = []\n    Explanation: All numbers are redundant as they appear more than once, resulting in an empty list.\n    \n    two_unique_nums([]) = []\n    Explanation: An empty input list results in an empty output list as there are no numbers to process.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of counting occurrences and filtering based on the count will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently remove duplicates from a list while maintaining the order of first occurrences of unique elements. It should handle various data types and edge cases, such as empty lists or lists with all identical elements.\nrequirement pool:\n- Implement the core functionality to remove duplicates\n- Optimize the function for performance with large datasets\n- Ensure compatibility with Python 3.x versions\n- Provide comprehensive documentation and examples\n- Include unit tests to verify functionality\nWe will use Python's built-in set to efficiently identify unique elements and list comprehension to maintain the order of first occurrences. This approach is simple, effective, and compatible with various Python versions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique': means that we need to find numbers that appear exactly once in the list\n\n    'eliminate redundant numbers': means removing numbers that appear more than once\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Create a dictionary to count the frequency of each number in the list.\n    2. Iterate through the list and update the frequency in the dictionary.\n    3. Use a list comprehension to filter out numbers that appear exactly once.\n    4. Return the filtered list.\n\n# [edge case] \n    two_unique_nums([1,1,2,2,3,3]) = []\n    Explanation: All numbers appear more than once, so the expected output is an empty list.\n    \n    two_unique_nums([1,2,3,4,5]) = [1,2,3,4,5]\n    Explanation: All numbers appear exactly once, so the expected output is the same list.\n    \n    two_unique_nums([]) = []\n    Explanation: The input list is empty, so the expected output is also an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of filtering numbers based on their frequency will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently identify and return unique numbers from a list, excluding any duplicates. It should handle various list sizes and types, ensuring performance and memory optimization.\nrequirement pool:\n- The function must return a list of unique numbers\n- The function should handle large lists efficiently\n- The function should be easy to integrate into existing projects\n- The function should include documentation and examples\n- The function should handle edge cases gracefully\nWe will use the collections.Counter from Python's standard library to efficiently count the occurrences of each number in the list. This will allow us to identify numbers that appear exactly once, which are the unique numbers we need. This approach is efficient for large lists and does not require any additional libraries, ensuring easy integration and minimal memory usage.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'eliminate redundant numbers'\n    Explanation: This means removing numbers that appear more than once in the list, leaving only those that appear exactly once.\n\n    'unique numbers'\n    Explanation: In this context, unique numbers are those that appear exactly once in the list.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n    1. Use `collections.Counter` to count the occurrences of each number in the list.\n    2. Iterate through the counter to identify numbers that appear exactly once.\n    3. Collect these numbers into a new list.\n    4. Return the list of unique numbers.\n\n# [edge case] \n    two_unique_nums([]) = []\n    Explanation: An empty list has no numbers, so the result is also an empty list.\n    \n    two_unique_nums([1, 1, 2, 2, 3, 3]) = []\n    Explanation: All numbers appear more than once, so there are no unique numbers.\n    \n    two_unique_nums([1, 2, 3, 4, 5]) = [1, 2, 3, 4, 5]\n    Explanation: All numbers appear exactly once, so they are all unique.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic using `collections.Counter` naturally handles these scenarios by counting occurrences and filtering for those that appear exactly once.\n", "requirement analysis:\nThe function should efficiently identify and return numbers that appear only once in the input list, maintaining the order of their first appearance. It should handle edge cases such as empty lists and lists with all duplicate numbers.\nrequirement pool:\n- The function must return a list of numbers that appear only once in the input list.\n- The function should maintain the order of first appearance of unique numbers.\n- The function should handle large input lists efficiently.\n- The function should include comprehensive documentation and examples.\n- The function should be compatible with Python 3.x versions.\nWe will implement a function named two_unique_nums that utilizes the collections.Counter from Python's standard library to efficiently count occurrences of each number in the list. This will allow us to identify numbers that appear only once. We will then filter these numbers while maintaining their order of first appearance. The function will be designed to handle large datasets efficiently and will include comprehensive documentation and examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique'\n    Explanation: In the requirement, 'unique' refers to numbers that appear only once in the list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Use collections.Counter to count occurrences of each number in the list.\n    2. Iterate through the list and filter out numbers that appear only once.\n    3. Maintain the order of first appearance for these unique numbers.\n    4. Return the filtered list.\n\n# [edge case] \n    two_unique_nums([]) = []\n    Explanation: An empty list has no numbers, so the expected output is an empty list.\n    \n    two_unique_nums([1, 1, 2, 2, 3, 3]) = []\n    Explanation: All numbers appear more than once, so there are no unique numbers, resulting in an empty list.\n    \n    two_unique_nums([1, 2, 3, 4, 5]) = [1, 2, 3, 4, 5]\n    Explanation: All numbers appear only once, so the output is the same as the input list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using collections.Counter and filtering based on count will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently remove duplicate numbers from a list while maintaining the order of first occurrences. It should be optimized for performance and easy to use in various Python environments.\nrequirement pool:\n- The function must remove duplicates and return a list of unique numbers.\n- The function should maintain the order of first occurrences of numbers.\n- The function should handle large datasets efficiently.\n- Provide clear documentation and examples for users.\n- Ensure compatibility with Python 3.x versions.\nWe will implement a function called two_unique_nums that takes a flat list of numbers as input and returns a list of numbers that appear only once, maintaining their order of first occurrence. We will use Python's collections module to efficiently count occurrences and filter out non-unique numbers. This approach ensures compatibility with Python 3.x and handles large datasets efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'eliminate redundant numbers'\n    Explanation: This means removing numbers that appear more than once in the list, leaving only those that appear exactly once.\n\n    'specified collection of lists'\n    Explanation: This refers to the input being a single list of numbers, not multiple lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Import the `Counter` class from the `collections` module to count occurrences of each number in the list.\n    2. Create a `Counter` object from the input list to get a dictionary-like object where keys are list elements and values are their counts.\n    3. Iterate through the original list and select numbers that have a count of exactly one in the `Counter` object.\n    4. Return a new list containing only these unique numbers, maintaining their original order.\n\n# [edge case] \n    two_unique_nums([]) = []\n    Explanation: An empty list has no numbers, so the result is also an empty list.\n    \n    two_unique_nums([1, 1, 2, 2, 3, 3]) = []\n    Explanation: All numbers appear more than once, so no number is unique, resulting in an empty list.\n    \n    two_unique_nums([1, 2, 3, 4, 5]) = [1, 2, 3, 4, 5]\n    Explanation: All numbers appear exactly once, so the result is the same as the input list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of counting occurrences and filtering based on count naturally handles these cases.\n"], "test": ["def check(two_unique_nums):\n\tassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 5, 3, 2, 1, 5]) == [3]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 6, 2, 4, 2, 1, 10]) == [6, 4, 1, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 4, 7, 2, 8, 3]) == [1, 4, 7, 8, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 3, 7, 6, 4, 8]) == [1, 3, 7, 4, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 5, 5, 1, 7, 4, 5]) == [2, 1, 7, 4]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 7, 4, 1, 5, 5, 3]) == [2, 7, 4, 1, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 5, 2, 1, 3, 4, 8]) == [5, 1, 3, 4, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 5, 4, 6, 3, 10]) == [1, 5, 4, 3, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 7, 3, 4, 6, 2, 10]) == [7, 3, 6, 2, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 7, 2, 2, 6, 9, 10]) == [3, 7, 6, 9, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 1, 5, 4, 3, 2, 1]) == [4, 3, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 5, 3, 5, 1, 2, 3]) == [1, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 5, 1, 2, 4, 2, 6]) == [5, 1, 4, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 2, 7, 6, 2, 7, 5]) == [6]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 2, 5, 7, 7, 5]) == [4, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 2, 7, 1, 5, 8, 5]) == [3, 2, 7, 1, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 6, 8, 2, 1, 7, 1]) == [5, 6, 8, 2, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 6, 1, 1, 5, 8, 10]) == [6, 8, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 5, 8, 3, 6, 4, 6]) == [5, 8, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 7, 7, 7, 8, 5, 10]) == [4, 8, 5, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 6, 5, 7, 3, 7, 10]) == [4, 6, 5, 3, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 3, 7, 6, 6, 7, 8]) == [2, 3, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 2, 1, 4, 4, 8, 4]) == [5, 2, 1, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 1, 4, 6, 3, 4, 2]) == [1, 6, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 2, 3, 5, 7, 5, 2]) == [3, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 1, 5, 4, 4, 9, 1]) == [5, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 6, 1, 6, 2, 4, 10]) == [5, 1, 2, 4, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 3, 2, 6, 2, 4, 9]) == [5, 3, 6, 4, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 3, 3, 4, 4, 5, 8]) == [1, 5, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 6, 8, 5, 2, 4, 3]) == [6, 8, 5, 2, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 7, 2, 7, 7, 7, 2]) == [3]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 7, 7, 4, 4, 6, 5]) == [5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 4, 8, 2, 6, 9, 2]) == [1, 4, 8, 6, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 7, 4, 4, 9, 8]) == [2, 7, 9, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 5, 4, 1, 6, 10]) == [5, 1, 6, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 3, 7, 1, 6, 9]) == [4, 3, 7, 1, 6, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 1, 2, 7, 1, 1]) == [2, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 1, 5, 2, 1]) == [4, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 6, 3, 3, 5]) == [1, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 2, 8, 4, 1, 9]) == [6, 2, 8, 4, 1, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 5, 7, 5, 9, 7]) == [4, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 4, 7, 2, 4, 9]) == [1, 7, 2, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 6, 7, 8, 5]) == [1, 2, 6, 7, 8, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 3, 6, 7, 8, 3]) == [6, 7, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 6, 1, 2, 9, 2]) == [6, 1, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 4, 8, 5, 7, 8]) == [2, 4, 5, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 7, 5, 1, 9, 9]) == [6, 7, 5, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 1, 1, 6, 4, 7]) == [6, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 2, 2, 6, 2]) == [5, 4, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 1, 3, 2, 8, 6]) == [5, 1, 3, 2, 8, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 3, 4, 4, 1, 6]) == [3, 1, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 2, 4, 6, 4, 3]) == [2, 6, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 5, 1, 7, 6, 7]) == [5, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 2, 1, 4, 3, 7]) == [2, 1, 3, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 5, 3, 2, 9, 6]) == [5, 3, 9, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 4, 4, 2, 5, 1]) == [2, 5, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 5, 1, 3, 1]) == [4, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 2, 1, 3, 9, 5]) == [6, 2, 1, 3, 9, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 4, 8, 7, 4, 9]) == [2, 8, 7, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 6, 6, 1, 1, 5]) == [5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 6, 4, 9, 4]) == [1, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 3, 6, 5, 5, 3]) == []", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 1, 7, 2, 8, 8]) == [3, 1, 7, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 2, 5, 8, 2]) == [1, 6, 5, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 7, 4, 6, 7, 1]) == [2, 4, 6, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 7, 3, 2, 2]) == [5, 4, 7, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 6, 8, 8, 10]) == [2, 6, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 5, 3, 3, 6]) == [5, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 1, 4, 9, 4]) == [2, 1, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 3, 3, 7, 7]) == [6]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 5, 6, 4, 9]) == [1, 5, 6, 4, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 6, 6, 4, 6]) == [4]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 1, 6, 6]) == []", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 3, 8, 3, 8]) == [4]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 5, 3, 1]) == [4, 3, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 7, 3, 9, 5]) == [2, 7, 3, 9, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 7, 3, 1]) == [2, 7, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 7, 1, 9, 2]) == [7, 9, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 1, 3, 4, 5]) == [1, 3, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 3, 2, 5]) == [1, 6, 3, 2, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 3, 2, 5, 7]) == [3, 2, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 7, 6, 8, 2]) == [5, 7, 6, 8, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 2, 8, 4]) == [5, 2, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 7, 8, 5, 9]) == [4, 7, 8, 5, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 4, 7, 8, 4]) == [3, 7, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 7, 7, 5]) == [4]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 6, 8, 6, 5]) == [8, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 7, 8, 3, 6]) == [4, 7, 8, 3, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 7, 7, 3, 1]) == [6, 3, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 6, 4, 6, 10]) == [10]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 1, 3, 6, 1]) == [3, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 7, 6, 3, 6]) == [7, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 1, 7, 5]) == [2, 7, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 7, 4, 2]) == [1, 7, 4]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 3, 2, 8, 3]) == [2, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 6, 3, 4, 3]) == [6]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 6, 1, 6, 4]) == [2, 1, 4]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 1, 1, 2, 8]) == [5, 2, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 4, 8, 4, 9]) == [2, 8, 9]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef two_unique_nums(numbers: List[int]) -> List[int]:\n    \"\"\"Returns a list of numbers that appear only once in the input list, maintaining their order of first occurrence.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A list of integers that are unique in the input list.\n    \"\"\"\n    # Count occurrences of each number in the list\n    number_counts = Counter(numbers)\n    \n    # Filter numbers that appear exactly once and maintain their order\n    unique_numbers = [num for num in numbers if number_counts[num] == 1]\n    \n    return unique_numbers\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(two_unique_nums([]))  # Expected output: []\n    print(two_unique_nums([1, 1, 2, 2, 3, 3]))  # Expected output: []\n    print(two_unique_nums([1, 2, 3, 4, 5]))  # Expected output: [1, 2, 3, 4, 5]\n    print(two_unique_nums([4, 5, 6, 7, 4, 5]))  # Expected output: [6, 7]\n", "passed": true, "pass": true, "pass_num": 10, "round": 282, "mutate_method": "rephrase_one", "parent_index": 282}
