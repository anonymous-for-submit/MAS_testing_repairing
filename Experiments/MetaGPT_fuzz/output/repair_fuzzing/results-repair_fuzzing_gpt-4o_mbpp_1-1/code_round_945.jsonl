{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 567, "prompt": "Write a function to check whether a specified list is sorted or not. You need to determine whether the items in the list are in a particular order or sequence. This involves verifying if they follow a certain arrangement. The order can be either ascending or descending.", "code": "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result", "test_imports": [], "test_list": ["assert issort_list([1,2,4,6,8,10,12,14,16,17])==True", "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False", "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False", "assert issort_list([3, 4, 5, 6, 5, 5, 17, 13, 13, 20]) == False", "assert issort_list([3, 5, 1, 11, 12, 13, 12, 16, 18, 16]) == False", "assert issort_list([1, 2, 9, 2, 7, 9, 12, 10, 21, 21]) == False", "assert issort_list([1, 7, 1, 10, 8, 11, 10, 11, 15, 18]) == False", "assert issort_list([4, 4, 4, 6, 7, 8, 9, 17, 15, 22]) == False", "assert issort_list([2, 6, 2, 1, 6, 11, 14, 15, 19, 16]) == False", "assert issort_list([5, 5, 9, 3, 7, 9, 7, 19, 18, 16]) == False", "assert issort_list([5, 3, 2, 8, 11, 13, 8, 13, 18, 16]) == False", "assert issort_list([1, 6, 9, 7, 4, 10, 8, 15, 16, 17]) == False", "assert issort_list([4, 6, 8, 6, 12, 7, 14, 10, 20, 16]) == False", "assert issort_list([4, 1, 2, 5, 7, 10, 9, 17, 14, 13]) == False", "assert issort_list([5, 6, 7, 3, 13, 12, 11, 10, 12, 22]) == False", "assert issort_list([5, 3, 4, 7, 4, 10, 11, 11, 15, 13]) == False", "assert issort_list([6, 3, 7, 9, 10, 11, 16, 13, 13, 17]) == False", "assert issort_list([5, 3, 4, 10, 10, 12, 14, 17, 17, 18]) == False", "assert issort_list([3, 3, 2, 3, 5, 13, 8, 13, 17, 15]) == False", "assert issort_list([2, 3, 5, 1, 6, 6, 12, 16, 11, 15]) == False", "assert issort_list([2, 2, 8, 4, 7, 12, 15, 9, 19, 19]) == False", "assert issort_list([1, 4, 6, 10, 12, 10, 8, 12, 19, 19]) == False", "assert issort_list([2, 7, 8, 11, 3, 9, 10, 15, 15, 21]) == False", "assert issort_list([5, 1, 9, 1, 10, 14, 8, 15, 19, 12]) == False", "assert issort_list([5, 4, 6, 8, 11, 14, 16, 11, 19, 15]) == False", "assert issort_list([3, 3, 5, 3, 5, 14, 13, 12, 13, 19]) == False", "assert issort_list([3, 3, 5, 4, 10, 12, 8, 15, 11, 12]) == False", "assert issort_list([4, 1, 9, 8, 13, 13, 10, 15, 17, 22]) == False", "assert issort_list([2, 6, 7, 2, 7, 9, 11, 16, 13, 16]) == False", "assert issort_list([3, 2, 2, 8, 9, 10, 9, 19, 17, 13]) == False", "assert issort_list([4, 3, 8, 6, 11, 7, 8, 10, 11, 16]) == False", "assert issort_list([1, 7, 1, 5, 11, 13, 14, 17, 20, 15]) == False", "assert issort_list([1, 7, 8, 2, 13, 8, 7, 12, 12, 18]) == False", "assert issort_list([5, 2, 5, 2, 11, 13, 11, 18, 17, 15]) == False", "assert issort_list([2, 1, 9, 7, 5, 12, 12, 19, 11, 13]) == False", "assert issort_list([3, 6, 8, 2, 8, 10, 13, 11, 19, 15]) == False", "assert issort_list([1, 2, 2, 10, 10, 14, 13, 18, 20, 13]) == False", "assert issort_list([3, 2, 7, 2, 6, 10, 9, 17, 21, 22]) == False", "assert issort_list([5, 6, 7, 7, 12, 6, 15, 10, 21, 20]) == False", "assert issort_list([3, 3, 3, 2, 11, 15, 14, 16, 23, 22]) == False", "assert issort_list([6, 2, 9, 1, 13, 12, 11, 9, 20, 17]) == False", "assert issort_list([1, 7, 1, 7, 13, 12, 16, 12, 22, 22]) == False", "assert issort_list([1, 4, 2, 7, 5, 8, 12, 11, 24, 21]) == False", "assert issort_list([6, 4, 1, 11, 3, 9, 9, 17, 23, 19]) == False", "assert issort_list([4, 7, 4, 2, 12, 7, 9, 13, 15, 12]) == False", "assert issort_list([6, 1, 1, 7, 3, 12, 12, 10, 18, 19]) == False", "assert issort_list([4, 4, 5, 11, 9, 10, 9, 17, 15, 15]) == False", "assert issort_list([6, 6, 7, 1, 9, 14, 14, 17, 15, 21]) == False", "assert issort_list([4, 5, 6, 3, 6, 7, 14, 12, 17, 15]) == False", "assert issort_list([5, 6, 8, 4, 10, 8, 9, 10, 22, 18]) == False", "assert issort_list([2, 6, 2, 10, 3, 13, 15, 10, 17, 12]) == False", "assert issort_list([2, 1, 2, 1, 10, 14, 10, 12, 19, 17]) == False", "assert issort_list([1, 4, 9, 3, 8, 14, 10, 9, 18, 15]) == False", "assert issort_list([2, 2, 4, 5, 13, 12, 7, 15, 25, 15]) == False", "assert issort_list([1, 2, 7, 9, 3, 15, 13, 11, 17, 18]) == False", "assert issort_list([2, 4, 7, 1, 11, 5, 14, 9, 22, 21]) == False", "assert issort_list([4, 6, 9, 10, 11, 11, 12, 12, 20, 21]) == True", "assert issort_list([1, 4, 6, 11, 12, 7, 11, 15, 15, 21]) == False", "assert issort_list([2, 1, 8, 9, 10, 5, 16, 12, 20, 17]) == False", "assert issort_list([4, 3, 3, 10, 12, 14, 9, 17, 17, 21]) == False", "assert issort_list([2, 6, 1, 10, 3, 11, 16, 18, 20, 21]) == False", "assert issort_list([3, 4, 9, 1, 4, 12, 17, 19, 25, 12]) == False", "assert issort_list([5, 7, 7, 6, 3, 11, 16, 17, 21, 12]) == False", "assert issort_list([2, 4, 9, 4, 4, 11, 7, 19, 24, 15]) == False", "assert issort_list([2, 6, 3, 10, 6, 11, 15, 9, 19, 19]) == False", "assert issort_list([3, 5, 1, 11, 4, 15, 8, 15, 17, 19]) == False", "assert issort_list([1, 7, 4, 7, 13, 5, 13, 11, 23, 19]) == False", "assert issort_list([5, 7, 8, 4, 11, 15, 17, 12, 20, 19]) == False", "assert issort_list([3, 1, 3, 2, 7, 12, 9, 17, 19, 20]) == False", "assert issort_list([3, 4, 2, 7, 11, 15, 20, 16, 16]) == False", "assert issort_list([5, 4, 2, 10, 3, 15, 14, 11, 21]) == False", "assert issort_list([6, 7, 2, 3, 7, 6, 13, 9, 25]) == False", "assert issort_list([5, 1, 3, 4, 11, 9, 12, 13, 23]) == False", "assert issort_list([4, 1, 5, 4, 7, 6, 11, 14, 16]) == False", "assert issort_list([3, 5, 4, 1, 10, 7, 18, 16, 22]) == False", "assert issort_list([3, 7, 9, 9, 4, 14, 19, 13, 19]) == False", "assert issort_list([5, 4, 5, 7, 13, 11, 10, 9, 23]) == False", "assert issort_list([6, 1, 8, 4, 13, 12, 19, 13, 19]) == False", "assert issort_list([6, 3, 9, 9, 9, 12, 15, 13, 23]) == False", "assert issort_list([5, 4, 4, 6, 7, 10, 11, 14, 23]) == False", "assert issort_list([4, 6, 6, 6, 3, 7, 18, 17, 23]) == False", "assert issort_list([6, 7, 1, 2, 9, 8, 20, 16, 16]) == False", "assert issort_list([2, 6, 9, 1, 4, 13, 17, 18, 21]) == False", "assert issort_list([6, 4, 8, 4, 6, 7, 16, 9, 17]) == False", "assert issort_list([1, 6, 2, 5, 8, 5, 13, 17, 25]) == False", "assert issort_list([5, 3, 8, 5, 7, 11, 15, 11, 22]) == False", "assert issort_list([5, 3, 5, 10, 8, 11, 17, 11, 24]) == False", "assert issort_list([2, 5, 4, 7, 3, 7, 15, 19, 25]) == False", "assert issort_list([5, 4, 9, 5, 8, 15, 16, 19, 15]) == False", "assert issort_list([4, 5, 8, 6, 6, 7, 20, 11, 16]) == False", "assert issort_list([6, 6, 9, 1, 12, 5, 11, 18, 19]) == False", "assert issort_list([4, 4, 5, 4, 3, 14, 13, 14, 19]) == False", "assert issort_list([2, 1, 6, 3, 4, 10, 11, 15, 23]) == False", "assert issort_list([4, 4, 7, 4, 12, 14, 10, 12, 20]) == False", "assert issort_list([4, 2, 1, 8, 11, 6, 11, 9, 25]) == False", "assert issort_list([2, 1, 3, 1, 9, 7, 15, 18, 17]) == False", "assert issort_list([4, 6, 9, 4, 4, 14, 11, 19, 19]) == False", "assert issort_list([5, 5, 6, 6, 6, 15, 10, 11, 23]) == False", "assert issort_list([3, 2, 8, 2, 13, 10, 11, 15, 18]) == False", "assert issort_list([4, 3, 6, 10, 4, 7, 12, 17, 21]) == False", "assert issort_list([5, 1, 8, 2, 4, 14, 12, 16, 16]) == False", "assert issort_list([5, 2, 5, 1, 10, 7, 20, 11, 15]) == False"], "entry_point": "issort_list", "repair_prompt": ["Write a function issort_list to check whether a specified list is sorted or not. You need to determine whether the items in the list are in a particular order or sequence. This involves verifying if they follow a certain arrangement. The order can be either ascending or descending.\nissort_list([1,2,4,6,8,10,12,14,16,17])==True\n", "Write a function issort_list to check whether a specified list is sorted or not. You need to determine whether the items in the list are in a particular order or sequence. This means you have to check if the list items are organized in a specific way. It involves verifying if they follow a certain arrangement. The order can be either ascending or descending.\nissort_list([1,2,4,6,8,10,12,14,16,17])==True\n", "Write a function issort_list to check whether a specified list is sorted or not. You need to determine whether the items in the list are in a particular order or sequence, verifying if they follow a certain arrangement. The order can be either ascending or descending.\nissort_list([1,2,4,6,8,10,12,14,16,17])==True\n"], "completions": ["from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n\n    Args:\n        lst: List of comparable elements.\n\n    Returns:\n        True if the list is sorted, False otherwise.\n    \"\"\"\n    # Check for empty list or single element list\n    if len(lst) <= 1:\n        return True\n\n    # Initialize flags for ascending and descending order\n    is_ascending = True\n    is_descending = True\n\n    # Iterate through the list to determine order\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            is_ascending = False\n        if lst[i] > lst[i - 1]:\n            is_descending = False\n\n    # Return True if the list is sorted in either order\n    return is_ascending or is_descending\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Handle edge cases: empty list or single-element list\n    if len(lst) <= 1:\n        return True\n\n    # Initialize flags for ascending and descending order\n    is_ascending = True\n    is_descending = True\n\n    # Iterate through the list to check order\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            is_ascending = False\n        if lst[i] > lst[i - 1]:\n            is_descending = False\n\n    # Return True if either ascending or descending flag is True\n    return is_ascending or is_descending\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n\n    # Initialize flags for ascending and descending order\n    is_ascending = False\n    is_descending = False\n\n    # Iterate through the list and compare each element with the next\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            is_ascending = True\n        elif lst[i] > lst[i + 1]:\n            is_descending = True\n\n        # If both flags are True, the list is not sorted in a single order\n        if is_ascending and is_descending:\n            return False\n\n    # If only one flag is True, the list is sorted in that order\n    return True\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the given list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted in ascending or descending order, False otherwise.\n    \"\"\"\n    if not lst:\n        return True\n    return lst == sorted(lst) or lst == sorted(lst, reverse=True)\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> str:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n    \n    Args:\n        lst (list): A list of comparable elements.\n        \n    Returns:\n        str: A string indicating the sorting status ('ascending', 'descending', 'not sorted').\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return 'ascending'  # An empty list or a single-element list is considered sorted\n\n    # Check for ascending order\n    is_ascending = True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            is_ascending = False\n            break\n\n    # Check for descending order\n    is_descending = True\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            is_descending = False\n            break\n\n    # Determine the sorting status\n    if is_ascending:\n        return 'ascending'\n    elif is_descending:\n        return 'descending'\n    else:\n        return 'not sorted'\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted in ascending or descending order, False otherwise.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    is_ascending = True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            is_ascending = False\n            break\n\n    # If the list is sorted in ascending order, return True\n    if is_ascending:\n        return True\n\n    # Check if the list is sorted in descending order\n    is_descending = True\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            is_descending = False\n            break\n\n    # If the list is sorted in descending order, return True\n    if is_descending:\n        return True\n\n    # If the list is neither sorted in ascending nor descending order, return False\n    return False\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the given list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n\n    # Initialize flags for ascending and descending order\n    is_ascending = True\n    is_descending = True\n\n    # Iterate through the list and compare each element with the next\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            is_ascending = False\n        if lst[i] < lst[i + 1]:\n            is_descending = False\n\n    # Return True if either ascending or descending flag remains True\n    return is_ascending or is_descending\n\n# Unit tests to verify the function works as expected\ndef test_issort_list():\n    assert issort_list([]) == True, \"Test case 1 failed\"\n    assert issort_list([5]) == True, \"Test case 2 failed\"\n    assert issort_list([3, 3, 3]) == True, \"Test case 3 failed\"\n    assert issort_list([1, 2, 3, 4, 5]) == True, \"Test case 4 failed\"\n    assert issort_list([5, 4, 3, 2, 1]) == True, \"Test case 5 failed\"\n    assert issort_list([1, 3, 2, 4, 5]) == False, \"Test case 6 failed\"\n    assert issort_list([5, 3, 4, 2, 1]) == False, \"Test case 7 failed\"\n    print(\"All test cases passed!\")\n\n# Run unit tests\nif __name__ == \"__main__\":\n    test_issort_list()\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Handle edge cases: empty list or list with a single element\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    is_ascending = True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            is_ascending = False\n            break\n\n    # If the list is sorted in ascending order, return True\n    if is_ascending:\n        return True\n\n    # Check if the list is sorted in descending order\n    is_descending = True\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            is_descending = False\n            break\n\n    # Return True if the list is sorted in descending order, otherwise False\n    return is_descending\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n\n    # Check for ascending order\n    is_ascending = True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            is_ascending = False\n            break\n\n    # Check for descending order\n    is_descending = True\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            is_descending = False\n            break\n\n    # Return True if either ascending or descending order is confirmed\n    return is_ascending or is_descending\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Handle edge cases: empty list or list with a single element\n    if len(lst) <= 1:\n        return True\n\n    # Check for ascending order\n    is_ascending = True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            is_ascending = False\n            break\n\n    # If the list is sorted in ascending order, return True\n    if is_ascending:\n        return True\n\n    # Check for descending order\n    is_descending = True\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            is_descending = False\n            break\n\n    # If the list is sorted in descending order, return True\n    if is_descending:\n        return True\n\n    # If neither ascending nor descending, return False\n    return False\n"], "plans": ["requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It should handle edge cases such as empty lists and lists with duplicate elements. The implementation should be straightforward and not rely on external libraries.\nrequirement pool:\n- The function must correctly identify sorted lists in both ascending and descending order.\n- The function should handle edge cases like empty lists and lists with one element.\n- The function should be optimized for performance with large lists.\n- Provide comprehensive documentation and examples for users.\n- Ensure compatibility with Python 3.x versions.\nWe will implement a simple function that iterates through the list to check if it is sorted in either ascending or descending order. This approach will ensure efficiency and compatibility with different Python versions without relying on external libraries. The function will handle edge cases such as empty lists and lists with one element.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, 'sorted' means that the elements in the list follow a specific order, either ascending (each element is greater than or equal to the previous one) or descending (each element is less than or equal to the previous one).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element; if so, return True as it is trivially sorted.\n    2. Iterate through the list and check if each element is greater than or equal to the previous one for ascending order.\n    3. Alternatively, check if each element is less than or equal to the previous one for descending order.\n    4. If either condition holds for the entire list, return True; otherwise, return False.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by definition.\n    \n    issort_list([5]) = True\n    Explanation: A list with a single element is considered sorted by definition.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: All elements are equal, which satisfies both ascending and descending order conditions.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the length of the list and comparing adjacent elements.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It should handle edge cases such as empty lists and lists with duplicate elements. The function should be easy to use and integrate into existing Python projects.\nrequirement pool:\n- The function must correctly identify sorted lists in both ascending and descending order.\n- The function should handle edge cases like empty lists and lists with identical elements.\n- The function should be optimized for performance with large datasets.\n- The function should be compatible with Python 3.x versions.\n- The function should include comprehensive documentation and examples.\nWe will implement a function named `issort_list` that checks if a list is sorted in either ascending or descending order. The function will iterate through the list once to check for both conditions, ensuring efficiency. We will use Python's built-in capabilities to handle this task without any additional libraries, as this will keep the function lightweight and compatible with various Python versions. The function will also handle edge cases such as empty lists and lists with identical elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, it means that the list elements are arranged in a specific order, either increasing (ascending) or decreasing (descending).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are trivially sorted.\n    2. Initialize two flags: one for checking ascending order and another for descending order.\n    3. Iterate through the list:\n       - For each pair of consecutive elements, check if they are in ascending order. If any pair is not, set the ascending flag to False.\n       - Similarly, check if they are in descending order. If any pair is not, set the descending flag to False.\n    4. After the loop, if either the ascending or descending flag is still True, return True. Otherwise, return False.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by definition.\n    \n    issort_list([5]) = True\n    Explanation: A single-element list is trivially sorted.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: A list with all identical elements is considered sorted in both ascending and descending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the length of the list and handling identical elements naturally.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It should handle edge cases such as empty lists and lists with identical elements. The implementation should be straightforward and not rely on external libraries.\nrequirement pool:\n- Implement the issort_list function to check list order.\n- Optimize the function for performance with large lists.\n- Include comprehensive documentation and examples.\n- Ensure compatibility with Python 3.x versions.\n- Add unit tests to verify function correctness.\nWe will implement a simple function called issort_list that checks if a list is sorted in either ascending or descending order. The function will iterate through the list and compare each element with the next one to determine the order. This approach is efficient and does not require any external libraries, making it compatible with various Python versions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, 'sorted' means that the elements in the list follow a specific order, either ascending (each element is less than or equal to the next) or descending (each element is greater than or equal to the next).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element; if so, return True as it is trivially sorted.\n    2. Initialize two flags: one for ascending order and one for descending order.\n    3. Iterate through the list and compare each element with the next one:\n        - If an element is greater than the next, set the descending flag to True.\n        - If an element is less than the next, set the ascending flag to True.\n    4. If both flags are True, return False as the list is not sorted in a single order.\n    5. Otherwise, return True.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by default.\n    \n    issort_list([5]) = True\n    Explanation: A list with a single element is considered sorted by default.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: A list where all elements are equal is considered sorted in both ascending and descending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the length of the list and handling cases where all elements are equal.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It should handle edge cases such as empty lists and lists with duplicate elements. The function should be easy to use and integrate into existing Python projects.\nrequirement pool:\n- The function must check for both ascending and descending order.\n- The function should handle edge cases like empty lists.\n- The function should be optimized for performance with large lists.\n- The function should include comprehensive documentation.\n- The function should be compatible with Python 3.x.\nWe will implement a simple Python function named `issort_list` that checks if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and lists with duplicate elements. We will use Python's built-in capabilities to ensure compatibility with Python 3.x and optimize for performance. The function will include comprehensive documentation in the form of docstrings.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, \"sorted\" means that the elements in the list are arranged in a specific order, either ascending (from smallest to largest) or descending (from largest to smallest).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are trivially sorted.\n    2. Compare each element with the next one to determine if the list is sorted in ascending order.\n    3. If the list is not sorted in ascending order, check if it is sorted in descending order by comparing each element with the next one.\n    4. If the list is sorted in either ascending or descending order, return True; otherwise, return False.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by definition.\n    \n    issort_list([5]) = True\n    Explanation: A single-element list is considered sorted by definition.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: A list with all identical elements is considered sorted in both ascending and descending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as sorted.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It must handle edge cases such as empty lists and lists with identical elements. The solution should be optimized for performance, especially for large datasets.\nrequirement pool:\n- Implement the main function to check list sorting\n- Optimize for performance with large lists\n- Handle edge cases like empty lists\n- Provide user feedback on sorting status\n- Ensure compatibility with different data types\nWe will implement a function named issort_list that checks if a list is sorted in either ascending or descending order. We will use Python's built-in capabilities to compare elements efficiently. The function will handle edge cases such as empty lists and lists with identical elements, considering them sorted. We will ensure compatibility with different data types by using Python's dynamic typing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, \"sorted\" means that the elements in the list are arranged in a specific order, either ascending (from smallest to largest) or descending (from largest to smallest).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are considered sorted.\n    2. Iterate through the list and check if each element is less than or equal to the next element. If this condition holds for all elements, the list is sorted in ascending order.\n    3. Alternatively, check if each element is greater than or equal to the next element. If this condition holds for all elements, the list is sorted in descending order.\n    4. If neither condition is met, return False.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by definition.\n    \n    issort_list([5]) = True\n    Explanation: A list with a single element is considered sorted.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered sorted in both ascending and descending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as sorted.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It must handle edge cases such as empty lists and lists with identical elements. The output should be a boolean indicating the sorted status.\nrequirement pool:\n- Implement the main function to check list sorting\n- Optimize for performance with large datasets\n- Handle edge cases like empty lists\n- Provide detailed error messages for invalid inputs\n- Ensure compatibility with different data types\nWe will implement a function named issort_list that checks if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and lists with identical elements. We will use Python's built-in capabilities to efficiently determine the sorted status without requiring additional libraries, ensuring optimal performance for large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, \"sorted\" means that the elements in the list are arranged in a specific order, either ascending (from smallest to largest) or descending (from largest to smallest).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are trivially sorted.\n    2. Compare each element with the next one to determine if the list is sorted in ascending order.\n    3. If the list is not sorted in ascending order, check if it is sorted in descending order by comparing each element with the next one.\n    4. If the list is sorted in either ascending or descending order, return True; otherwise, return False.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by definition.\n    \n    issort_list([5]) = True\n    Explanation: A single-element list is trivially sorted.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered sorted in both ascending and descending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as sorted.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It should handle edge cases such as empty lists and lists with duplicate elements. The implementation should be straightforward and not rely on external libraries.\nrequirement pool:\n- Implement the main function to check list order\n- Optimize for performance with large lists\n- Include comprehensive documentation\n- Ensure compatibility with Python 3.x\n- Add unit tests for various scenarios\nWe will implement a simple function that checks if a list is sorted in either ascending or descending order. The function will iterate through the list and compare each element with the next one to determine the order. This approach is efficient and does not require any external libraries, making it compatible with different Python versions. We will also include comprehensive documentation and unit tests to ensure the function handles various scenarios, including empty lists and lists with duplicate elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, it means that the list should be in a specific order, either ascending or descending.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element, in which case it is considered sorted.\n    2. Initialize two flags: one for checking ascending order and another for descending order.\n    3. Iterate through the list and compare each element with the next one.\n    4. If an element is greater than the next one, set the ascending flag to False.\n    5. If an element is less than the next one, set the descending flag to False.\n    6. After the iteration, if either flag remains True, the list is sorted; otherwise, it is not.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by definition.\n    \n    issort_list([5]) = True\n    Explanation: A single-element list is considered sorted by definition.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: A list with all identical elements is considered sorted in both ascending and descending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the length of the list and handling comparisons appropriately.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It must handle edge cases such as empty lists and lists with identical elements. Performance should be optimized for large datasets.\nrequirement pool:\n- Implement the main function to check sorting order.\n- Optimize for performance with large lists.\n- Handle edge cases like empty lists and identical elements.\n- Provide clear error messages for invalid inputs.\n- Ensure compatibility with different data types.\nWe will implement a function named `issort_list` that checks if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and lists with identical elements. We will use Python's built-in capabilities to efficiently determine the sorting order without converting the list to other data structures, ensuring optimal performance for large lists. The function will also include error handling for invalid inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, 'sorted' means that the elements in the list are arranged in a specific order, either ascending (from smallest to largest) or descending (from largest to smallest).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or contains only one element; if so, return True as it is trivially sorted.\n    2. Iterate through the list and compare each element with the next one to determine if the list is sorted in ascending order.\n    3. If the list is not sorted in ascending order, check if it is sorted in descending order by comparing each element with the next one.\n    4. Return True if the list is sorted in either ascending or descending order; otherwise, return False.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by definition.\n    \n    issort_list([5]) = True\n    Explanation: A list with a single element is considered sorted by definition.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered sorted as there is no change in order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking both ascending and descending order inherently handles these cases.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It must handle edge cases such as empty lists and lists with identical elements. Performance should be optimized for large datasets.\nrequirement pool:\n- Implement the main sorting check function\n- Optimize for performance with large lists\n- Handle edge cases like empty lists\n- Provide documentation and examples\n- Ensure compatibility with different data types\nWe will implement a function called issort_list that checks if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and lists with identical elements. We will use Python's built-in capabilities to efficiently determine the order of the list. The function will be optimized for performance with large lists by minimizing unnecessary comparisons.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, 'sorted' means that the elements in the list are arranged in a specific order, either ascending (from smallest to largest) or descending (from largest to smallest).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element; if so, return True as it is trivially sorted.\n    2. Compare each element with the next one to determine if the list is sorted in ascending order.\n    3. Compare each element with the next one to determine if the list is sorted in descending order.\n    4. If either ascending or descending order is confirmed, return True; otherwise, return False.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by definition.\n    \n    issort_list([5]) = True\n    Explanation: A list with a single element is considered sorted by definition.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered sorted as there is no change in order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking for empty lists and lists with identical elements.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It must handle edge cases such as empty lists and lists with identical elements. Performance should be optimized for large datasets.\nrequirement pool:\n- Implement the main function to check list sorting\n- Optimize for performance with large lists\n- Handle edge cases like empty lists\n- Provide comprehensive documentation\n- Include unit tests for various scenarios\nWe will implement a function named issort_list that checks if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and lists with identical elements, considering them as sorted. We will use Python's built-in capabilities to ensure optimal performance for large lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: In the requirement, \"sorted\" means that the elements in the list are arranged in a specific order, either ascending (from smallest to largest) or descending (from largest to smallest).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are considered sorted.\n    2. Compare each element with the next one to determine if the list is sorted in ascending order.\n    3. If the list is not sorted in ascending order, check if it is sorted in descending order by comparing each element with the next one.\n    4. If the list is sorted in either ascending or descending order, return True; otherwise, return False.\n\n# [edge case] \n    issort_list([]) = True\n    Explanation: An empty list is considered sorted by definition.\n    \n    issort_list([5]) = True\n    Explanation: A list with a single element is considered sorted.\n    \n    issort_list([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered sorted.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as sorted.\n"], "test": ["def check(issort_list):\n\tassert issort_list([1,2,4,6,8,10,12,14,16,17])==True", "def check(issort_list):\n\tassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False", "def check(issort_list):\n\tassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False", "def check(issort_list):\n\tassert issort_list([3, 4, 5, 6, 5, 5, 17, 13, 13, 20]) == False", "def check(issort_list):\n\tassert issort_list([3, 5, 1, 11, 12, 13, 12, 16, 18, 16]) == False", "def check(issort_list):\n\tassert issort_list([1, 2, 9, 2, 7, 9, 12, 10, 21, 21]) == False", "def check(issort_list):\n\tassert issort_list([1, 7, 1, 10, 8, 11, 10, 11, 15, 18]) == False", "def check(issort_list):\n\tassert issort_list([4, 4, 4, 6, 7, 8, 9, 17, 15, 22]) == False", "def check(issort_list):\n\tassert issort_list([2, 6, 2, 1, 6, 11, 14, 15, 19, 16]) == False", "def check(issort_list):\n\tassert issort_list([5, 5, 9, 3, 7, 9, 7, 19, 18, 16]) == False", "def check(issort_list):\n\tassert issort_list([5, 3, 2, 8, 11, 13, 8, 13, 18, 16]) == False", "def check(issort_list):\n\tassert issort_list([1, 6, 9, 7, 4, 10, 8, 15, 16, 17]) == False", "def check(issort_list):\n\tassert issort_list([4, 6, 8, 6, 12, 7, 14, 10, 20, 16]) == False", "def check(issort_list):\n\tassert issort_list([4, 1, 2, 5, 7, 10, 9, 17, 14, 13]) == False", "def check(issort_list):\n\tassert issort_list([5, 6, 7, 3, 13, 12, 11, 10, 12, 22]) == False", "def check(issort_list):\n\tassert issort_list([5, 3, 4, 7, 4, 10, 11, 11, 15, 13]) == False", "def check(issort_list):\n\tassert issort_list([6, 3, 7, 9, 10, 11, 16, 13, 13, 17]) == False", "def check(issort_list):\n\tassert issort_list([5, 3, 4, 10, 10, 12, 14, 17, 17, 18]) == False", "def check(issort_list):\n\tassert issort_list([3, 3, 2, 3, 5, 13, 8, 13, 17, 15]) == False", "def check(issort_list):\n\tassert issort_list([2, 3, 5, 1, 6, 6, 12, 16, 11, 15]) == False", "def check(issort_list):\n\tassert issort_list([2, 2, 8, 4, 7, 12, 15, 9, 19, 19]) == False", "def check(issort_list):\n\tassert issort_list([1, 4, 6, 10, 12, 10, 8, 12, 19, 19]) == False", "def check(issort_list):\n\tassert issort_list([2, 7, 8, 11, 3, 9, 10, 15, 15, 21]) == False", "def check(issort_list):\n\tassert issort_list([5, 1, 9, 1, 10, 14, 8, 15, 19, 12]) == False", "def check(issort_list):\n\tassert issort_list([5, 4, 6, 8, 11, 14, 16, 11, 19, 15]) == False", "def check(issort_list):\n\tassert issort_list([3, 3, 5, 3, 5, 14, 13, 12, 13, 19]) == False", "def check(issort_list):\n\tassert issort_list([3, 3, 5, 4, 10, 12, 8, 15, 11, 12]) == False", "def check(issort_list):\n\tassert issort_list([4, 1, 9, 8, 13, 13, 10, 15, 17, 22]) == False", "def check(issort_list):\n\tassert issort_list([2, 6, 7, 2, 7, 9, 11, 16, 13, 16]) == False", "def check(issort_list):\n\tassert issort_list([3, 2, 2, 8, 9, 10, 9, 19, 17, 13]) == False", "def check(issort_list):\n\tassert issort_list([4, 3, 8, 6, 11, 7, 8, 10, 11, 16]) == False", "def check(issort_list):\n\tassert issort_list([1, 7, 1, 5, 11, 13, 14, 17, 20, 15]) == False", "def check(issort_list):\n\tassert issort_list([1, 7, 8, 2, 13, 8, 7, 12, 12, 18]) == False", "def check(issort_list):\n\tassert issort_list([5, 2, 5, 2, 11, 13, 11, 18, 17, 15]) == False", "def check(issort_list):\n\tassert issort_list([2, 1, 9, 7, 5, 12, 12, 19, 11, 13]) == False", "def check(issort_list):\n\tassert issort_list([3, 6, 8, 2, 8, 10, 13, 11, 19, 15]) == False", "def check(issort_list):\n\tassert issort_list([1, 2, 2, 10, 10, 14, 13, 18, 20, 13]) == False", "def check(issort_list):\n\tassert issort_list([3, 2, 7, 2, 6, 10, 9, 17, 21, 22]) == False", "def check(issort_list):\n\tassert issort_list([5, 6, 7, 7, 12, 6, 15, 10, 21, 20]) == False", "def check(issort_list):\n\tassert issort_list([3, 3, 3, 2, 11, 15, 14, 16, 23, 22]) == False", "def check(issort_list):\n\tassert issort_list([6, 2, 9, 1, 13, 12, 11, 9, 20, 17]) == False", "def check(issort_list):\n\tassert issort_list([1, 7, 1, 7, 13, 12, 16, 12, 22, 22]) == False", "def check(issort_list):\n\tassert issort_list([1, 4, 2, 7, 5, 8, 12, 11, 24, 21]) == False", "def check(issort_list):\n\tassert issort_list([6, 4, 1, 11, 3, 9, 9, 17, 23, 19]) == False", "def check(issort_list):\n\tassert issort_list([4, 7, 4, 2, 12, 7, 9, 13, 15, 12]) == False", "def check(issort_list):\n\tassert issort_list([6, 1, 1, 7, 3, 12, 12, 10, 18, 19]) == False", "def check(issort_list):\n\tassert issort_list([4, 4, 5, 11, 9, 10, 9, 17, 15, 15]) == False", "def check(issort_list):\n\tassert issort_list([6, 6, 7, 1, 9, 14, 14, 17, 15, 21]) == False", "def check(issort_list):\n\tassert issort_list([4, 5, 6, 3, 6, 7, 14, 12, 17, 15]) == False", "def check(issort_list):\n\tassert issort_list([5, 6, 8, 4, 10, 8, 9, 10, 22, 18]) == False", "def check(issort_list):\n\tassert issort_list([2, 6, 2, 10, 3, 13, 15, 10, 17, 12]) == False", "def check(issort_list):\n\tassert issort_list([2, 1, 2, 1, 10, 14, 10, 12, 19, 17]) == False", "def check(issort_list):\n\tassert issort_list([1, 4, 9, 3, 8, 14, 10, 9, 18, 15]) == False", "def check(issort_list):\n\tassert issort_list([2, 2, 4, 5, 13, 12, 7, 15, 25, 15]) == False", "def check(issort_list):\n\tassert issort_list([1, 2, 7, 9, 3, 15, 13, 11, 17, 18]) == False", "def check(issort_list):\n\tassert issort_list([2, 4, 7, 1, 11, 5, 14, 9, 22, 21]) == False", "def check(issort_list):\n\tassert issort_list([4, 6, 9, 10, 11, 11, 12, 12, 20, 21]) == True", "def check(issort_list):\n\tassert issort_list([1, 4, 6, 11, 12, 7, 11, 15, 15, 21]) == False", "def check(issort_list):\n\tassert issort_list([2, 1, 8, 9, 10, 5, 16, 12, 20, 17]) == False", "def check(issort_list):\n\tassert issort_list([4, 3, 3, 10, 12, 14, 9, 17, 17, 21]) == False", "def check(issort_list):\n\tassert issort_list([2, 6, 1, 10, 3, 11, 16, 18, 20, 21]) == False", "def check(issort_list):\n\tassert issort_list([3, 4, 9, 1, 4, 12, 17, 19, 25, 12]) == False", "def check(issort_list):\n\tassert issort_list([5, 7, 7, 6, 3, 11, 16, 17, 21, 12]) == False", "def check(issort_list):\n\tassert issort_list([2, 4, 9, 4, 4, 11, 7, 19, 24, 15]) == False", "def check(issort_list):\n\tassert issort_list([2, 6, 3, 10, 6, 11, 15, 9, 19, 19]) == False", "def check(issort_list):\n\tassert issort_list([3, 5, 1, 11, 4, 15, 8, 15, 17, 19]) == False", "def check(issort_list):\n\tassert issort_list([1, 7, 4, 7, 13, 5, 13, 11, 23, 19]) == False", "def check(issort_list):\n\tassert issort_list([5, 7, 8, 4, 11, 15, 17, 12, 20, 19]) == False", "def check(issort_list):\n\tassert issort_list([3, 1, 3, 2, 7, 12, 9, 17, 19, 20]) == False", "def check(issort_list):\n\tassert issort_list([3, 4, 2, 7, 11, 15, 20, 16, 16]) == False", "def check(issort_list):\n\tassert issort_list([5, 4, 2, 10, 3, 15, 14, 11, 21]) == False", "def check(issort_list):\n\tassert issort_list([6, 7, 2, 3, 7, 6, 13, 9, 25]) == False", "def check(issort_list):\n\tassert issort_list([5, 1, 3, 4, 11, 9, 12, 13, 23]) == False", "def check(issort_list):\n\tassert issort_list([4, 1, 5, 4, 7, 6, 11, 14, 16]) == False", "def check(issort_list):\n\tassert issort_list([3, 5, 4, 1, 10, 7, 18, 16, 22]) == False", "def check(issort_list):\n\tassert issort_list([3, 7, 9, 9, 4, 14, 19, 13, 19]) == False", "def check(issort_list):\n\tassert issort_list([5, 4, 5, 7, 13, 11, 10, 9, 23]) == False", "def check(issort_list):\n\tassert issort_list([6, 1, 8, 4, 13, 12, 19, 13, 19]) == False", "def check(issort_list):\n\tassert issort_list([6, 3, 9, 9, 9, 12, 15, 13, 23]) == False", "def check(issort_list):\n\tassert issort_list([5, 4, 4, 6, 7, 10, 11, 14, 23]) == False", "def check(issort_list):\n\tassert issort_list([4, 6, 6, 6, 3, 7, 18, 17, 23]) == False", "def check(issort_list):\n\tassert issort_list([6, 7, 1, 2, 9, 8, 20, 16, 16]) == False", "def check(issort_list):\n\tassert issort_list([2, 6, 9, 1, 4, 13, 17, 18, 21]) == False", "def check(issort_list):\n\tassert issort_list([6, 4, 8, 4, 6, 7, 16, 9, 17]) == False", "def check(issort_list):\n\tassert issort_list([1, 6, 2, 5, 8, 5, 13, 17, 25]) == False", "def check(issort_list):\n\tassert issort_list([5, 3, 8, 5, 7, 11, 15, 11, 22]) == False", "def check(issort_list):\n\tassert issort_list([5, 3, 5, 10, 8, 11, 17, 11, 24]) == False", "def check(issort_list):\n\tassert issort_list([2, 5, 4, 7, 3, 7, 15, 19, 25]) == False", "def check(issort_list):\n\tassert issort_list([5, 4, 9, 5, 8, 15, 16, 19, 15]) == False", "def check(issort_list):\n\tassert issort_list([4, 5, 8, 6, 6, 7, 20, 11, 16]) == False", "def check(issort_list):\n\tassert issort_list([6, 6, 9, 1, 12, 5, 11, 18, 19]) == False", "def check(issort_list):\n\tassert issort_list([4, 4, 5, 4, 3, 14, 13, 14, 19]) == False", "def check(issort_list):\n\tassert issort_list([2, 1, 6, 3, 4, 10, 11, 15, 23]) == False", "def check(issort_list):\n\tassert issort_list([4, 4, 7, 4, 12, 14, 10, 12, 20]) == False", "def check(issort_list):\n\tassert issort_list([4, 2, 1, 8, 11, 6, 11, 9, 25]) == False", "def check(issort_list):\n\tassert issort_list([2, 1, 3, 1, 9, 7, 15, 18, 17]) == False", "def check(issort_list):\n\tassert issort_list([4, 6, 9, 4, 4, 14, 11, 19, 19]) == False", "def check(issort_list):\n\tassert issort_list([5, 5, 6, 6, 6, 15, 10, 11, 23]) == False", "def check(issort_list):\n\tassert issort_list([3, 2, 8, 2, 13, 10, 11, 15, 18]) == False", "def check(issort_list):\n\tassert issort_list([4, 3, 6, 10, 4, 7, 12, 17, 21]) == False", "def check(issort_list):\n\tassert issort_list([5, 1, 8, 2, 4, 14, 12, 16, 16]) == False", "def check(issort_list):\n\tassert issort_list([5, 2, 5, 1, 10, 7, 20, 11, 15]) == False"], "scores": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, false, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 0, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    # Handle edge cases: empty list or list with a single element\n    if len(lst) <= 1:\n        return True\n\n    # Check for ascending order\n    is_ascending = True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            is_ascending = False\n            break\n\n    # If the list is sorted in ascending order, return True\n    if is_ascending:\n        return True\n\n    # Check for descending order\n    is_descending = True\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            is_descending = False\n            break\n\n    # If the list is sorted in descending order, return True\n    if is_descending:\n        return True\n\n    # If neither ascending nor descending, return False\n    return False\n", "passed": true, "pass": true, "pass_num": 9, "round": 945, "mutate_method": "expand_one2two", "parent_index": 443}
