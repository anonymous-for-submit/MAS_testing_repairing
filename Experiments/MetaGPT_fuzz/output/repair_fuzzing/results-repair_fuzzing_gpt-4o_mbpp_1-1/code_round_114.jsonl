{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 284, "prompt": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element. Ensure your function handles edge cases such as empty lists efficiently.", "code": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element", "test_imports": [], "test_list": ["assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "assert check_element([1,2,3,4],7)==False", "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True", "assert check_element(['kjtnbmhr', 'kokjyadgh', 'diyb', 'dlkvo'], 'fcebhgy') == False", "assert check_element(['dhexfu', 'btazydt', 'mtjn', 'gtc'], 'dpuils') == False", "assert check_element(['pzt', 'qoqwfbzp', 'xuzbx', 'ddkgikkfc'], 'zcd') == False", "assert check_element(['iumv', 'xtbnw', 'fyrxdd', 'zzzesud'], 'pkwbnc') == False", "assert check_element(['hflevlxr', 'srqsg', 'wlyjdl', 'gymwa'], 'blm') == False", "assert check_element(['dicp', 'winwrlp', 'ugwwtw', 'ufd'], 'cflzrk') == False", "assert check_element(['ucnzz', 'yyqptfx', 'sch', 'ybljkmyt'], 'kikexsyw') == False", "assert check_element(['cym', 'gkt', 'kwaxysw', 'upevwnx'], 'kibfjjkbp') == False", "assert check_element(['qypbx', 'jlgdzkf', 'oabirph', 'mwpodi'], 'drbubj') == False", "assert check_element(['kbd', 'cvpmamqmu', 'mraa', 'ssmtueyvn'], 'tra') == False", "assert check_element(['dbvq', 'fedbgfc', 'ewnojm', 'thql'], 'bkqqgd') == False", "assert check_element(['jyu', 'jfcbreyl', 'ihkssi', 'eilxlczs'], 'imumoxw') == False", "assert check_element(['gcaujsnkq', 'lpgjftst', 'byhzmyl', 'bzu'], 'aausq') == False", "assert check_element(['cxneblxvx', 'zoiuqdcvtngk', 'eonz', 'bdhrt'], 'fynahaqj') == False", "assert check_element(['nntv', 'cdizmbvyx', 'aqn', 'bsmyxi'], 'vdtksmum') == False", "assert check_element(['ioatt', 'eeeyuw', 'qzjb', 'iffwgp'], 'qvlt') == False", "assert check_element(['ufubrzgil', 'trkuttd', 'ubho', 'axaihiun'], 'yktimilj') == False", "assert check_element(['fzggrf', 'stxzervqca', 'dfwtakg', 'bubq'], 'saydq') == False", "assert check_element(['jpxhqe', 'nibhm', 'ooffq', 'uij'], 'leaduhoow') == False", "assert check_element(['qtcab', 'jldjkortnga', 'jpbfp', 'onokdlejs'], 'ygidpmkyz') == False", "assert check_element(['ajlmcvqbm', 'csjteybvfpd', 'yckfkfw', 'axvey'], 'sivja') == False", "assert check_element(['htouzb', 'eoru', 'vuzcw', 'dbg'], 'yuhyfsl') == False", "assert check_element(['ybfnngiy', 'qqaqcmxypnyt', 'hikkidiit', 'uoleamw'], 'eeswyhk') == False", "assert check_element(['kektkv', 'ofv', 'qyjjjvw', 'ojhcoc'], 'lkyapr') == False", "assert check_element(['ksyjya', 'ufzcf', 'jbpkm', 'sjaj'], 'rpqxyw') == False", "assert check_element(['jhogyc', 'tcdrhpz', 'kkjv', 'lamgpxk'], 'qxhp') == False", "assert check_element(['nocvt', 'eyubihywmro', 'ipteixxxo', 'gbbdl'], 'sfxt') == False", "assert check_element(['rkqm', 'gwrqv', 'rff', 'hizd'], 'pfqxgdm') == False", "assert check_element(['rndi', 'bfecc', 'qmtd', 'hoqamvz'], 'ieldvm') == False", "assert check_element(['ocdlqnhq', 'ooe', 'viatabsvb', 'cmpkaan'], 'untjyj') == False", "assert check_element(['uaegwul', 'hgkep', 'xvu', 'pkmbvlhvz'], 'pmhdzbtik') == False", "assert check_element(['qucz', 'ujwiyvpamphu', 'cdjtoycq', 'akjaubuzq'], 'qir') == False", "assert check_element(['rpxvklhs', 'lwhvgv', 'gmo', 'mbnczebo'], 'spwxteizw') == False", "assert check_element([6, 6, 5, 8], 9) == False", "assert check_element([3, 7, 3, 8], 5) == False", "assert check_element([2, 4, 2, 3], 2) == False", "assert check_element([5, 5, 6, 7], 10) == False", "assert check_element([3, 6, 1, 3], 12) == False", "assert check_element([2, 1, 6, 8], 4) == False", "assert check_element([4, 6, 5, 3], 7) == False", "assert check_element([5, 1, 4, 3], 2) == False", "assert check_element([6, 1, 4, 8], 4) == False", "assert check_element([5, 5, 7, 9], 2) == False", "assert check_element([3, 1, 2, 8], 5) == False", "assert check_element([2, 1, 3, 5], 12) == False", "assert check_element([6, 4, 3, 9], 10) == False", "assert check_element([1, 6, 2, 2], 11) == False", "assert check_element([3, 7, 7, 9], 3) == False", "assert check_element([6, 1, 1, 7], 7) == False", "assert check_element([2, 5, 4, 9], 10) == False", "assert check_element([5, 6, 7, 3], 9) == False", "assert check_element([6, 4, 5, 6], 4) == False", "assert check_element([1, 2, 5, 6], 11) == False", "assert check_element([5, 7, 5, 5], 5) == False", "assert check_element([6, 5, 3, 9], 8) == False", "assert check_element([2, 1, 6, 7], 12) == False", "assert check_element([2, 3, 1, 9], 2) == False", "assert check_element([5, 4, 4, 3], 4) == False", "assert check_element([2, 4, 1, 1], 3) == False", "assert check_element([3, 4, 2, 2], 10) == False", "assert check_element([3, 1, 5, 4], 2) == False", "assert check_element([5, 6, 2, 7], 4) == False", "assert check_element([1, 2, 7, 3], 12) == False", "assert check_element([4, 6, 1, 8], 10) == False", "assert check_element([3, 3, 8, 4], 11) == False", "assert check_element([2, 1, 3, 4], 9) == False", "assert check_element(['twxgyyvy', 'nbotihav', 'eyx', 'pqthuxh'], 'fue') == False", "assert check_element(['rbjrzjhvm', 'tphcjlahp', 'klujjx', 'rmrjoet'], 'imtitayfb') == False", "assert check_element(['gacsl', 'nmuwr', 'jrylm', 'tljtd'], 'gglbhwrq') == False", "assert check_element(['shh', 'bsgupw', 'fnzbuobn', 'xsyxp'], 'gvv') == False", "assert check_element(['bybqbq', 'yqfarwzt', 'wlhjg', 'furwg'], 'rndiv') == False", "assert check_element(['wnllzt', 'reiuyv', 'vuioj', 'kbbbna'], 'lhlnyhlxs') == False", "assert check_element(['wvz', 'ucpfmzep', 'nzt', 'jctttjb'], 'aclnn') == False", "assert check_element(['cwwdzh', 'oadwwaf', 'oeljcsin', 'lnrerjf'], 'msld') == False", "assert check_element(['tvdd', 'ejfmfb', 'vgpamj', 'qeyujydc'], 'vuiuso') == False", "assert check_element(['nrjty', 'qmd', 'lptpgj', 'fir'], 'mtaqgwh') == False", "assert check_element(['dzv', 'izc', 'yzj', 'yaoc'], 'vkwbk') == False", "assert check_element(['wci', 'qbsxierh', 'lsnom', 'mqmnfxfmo'], 'zbvxeo') == False", "assert check_element(['inly', 'huuy', 'izjt', 'pskj'], 'zeei') == False", "assert check_element(['wvyiembfl', 'aqawt', 'hbwkgj', 'igrvy'], 'gffxi') == False", "assert check_element(['znvxy', 'nck', 'uwqnckvj', 'vhrstfofy'], 'kgbt') == False", "assert check_element(['lufyesid', 'wykb', 'uwv', 'buo'], 'amhyjmygp') == False", "assert check_element(['corckyd', 'agoivl', 'xkkdhbhec', 'yjottc'], 'bomgv') == False", "assert check_element(['wejjjguc', 'srglrq', 'nkuilzmzo', 'lkhzxt'], 'adi') == False", "assert check_element(['ghnmsg', 'anrvphr', 'ojyb', 'ujfvkwtej'], 'kbhipuo') == False", "assert check_element(['kirp', 'gchvjmakk', 'lwu', 'dzmgu'], 'xrujixxyn') == False", "assert check_element(['cca', 'tufalq', 'mtmmvnwvh', 'yvm'], 'whgqcomzr') == False", "assert check_element(['mxo', 'vzfymij', 'apftwk', 'tfhndxe'], 'shbhvrw') == False", "assert check_element(['iylr', 'qbaggndx', 'kshgf', 'usrisohn'], 'eawk') == False", "assert check_element(['rjbvoga', 'xaxs', 'lkhbg', 'edea'], 'yqecdinr') == False", "assert check_element(['jyl', 'ckfxl', 'roszyhvr', 'gtvufyn'], 'ugovkk') == False", "assert check_element(['kwcle', 'vou', 'vkupqz', 'uycuemmxp'], 'meuex') == False", "assert check_element(['qpxubn', 'gscj', 'ltyqkavi', 'tbzq'], 'jast') == False", "assert check_element(['fomuzfac', 'vzmhaixs', 'jdohtr', 'mxmbutpvi'], 'phx') == False", "assert check_element(['jiifmliv', 'rbcr', 'zhfsgqrp', 'ejitlh'], 'mqiz') == False", "assert check_element(['nmbdehbx', 'noanqi', 'byixwf', 'vscuiv'], 'azr') == False", "assert check_element(['nwlkov', 'ysg', 'wcxqlqxti', 'fdrtzk'], 'ahtgyqa') == False", "assert check_element(['ojavf', 'ovndofiqd', 'ynjrpqijl', 'gbyfvnkmn'], 'ofkeoatq') == False", "assert check_element(['hiqzqqyh', 'ueapyxb', 'toqg', 'sxmgw'], 'dumihpsyd') == False"], "entry_point": "check_element", "repair_prompt": ["Write a function check_element that takes in a list and element and checks whether all items in the list are equal to the given element. Ensure your function handles edge cases such as empty lists efficiently.\ncheck_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n", "Write a function check_element that takes in a list and element and checks whether all items in the list are equal to the given element. It is important for your function to be able to handle edge cases, such as empty lists, in an efficient manner. Make sure to implement an optimized solution.\ncheck_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n", "Write a function check_element that takes in a list and element and checks whether all items in the list are equal to the given element, and ensure your function handles edge cases such as empty lists efficiently.\ncheck_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n"], "completions": ["from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    '''\n    Check if all elements in the list are equal to the specified element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the specified element, False otherwise.\n\n    Example:\n    >>> check_element(['green', 'orange', 'black', 'white'], 'blue')\n    False\n    >>> check_element([], 'blue')\n    True\n    >>> check_element(['blue'], 'blue')\n    True\n    >>> check_element(['blue', 'green'], 'blue')\n    False\n    '''\n    # Use Python's built-in `all()` function with a generator expression\n    return all(x == element for x in lst)\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Check if all elements in the list are equal to the specified element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the specified element, False otherwise.\n    \"\"\"\n    return all(x == element for x in lst)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(check_element([], 'blue'))  # Expected output: True\n    print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Expected output: True\n    print(check_element(['blue', 'green', 'blue'], 'blue'))  # Expected output: False\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Check if all elements in the list are equal to the specified element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the specified element, False otherwise.\n    \"\"\"\n    return all(x == element for x in lst)\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Checks if all elements in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    # Check if the list is empty. If it is, return False immediately.\n    if not lst:\n        return False\n    \n    # Use Python's built-in `all()` function with a generator expression to iterate over each item in the list.\n    # For each item, check if it is equal to the given element.\n    return all(item == element for item in lst)\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Check if all elements in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    # Return False immediately if the list is empty\n    if not lst:\n        return False\n    \n    # Use all() with a generator expression to check if all elements are equal to the given element\n    return all(item == element for item in lst)\n\n# Example usage:\n# print(check_element([], 'blue'))  # Expected output: False\n# print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Expected output: True\n# print(check_element(['green', 'orange', 'black'], 'blue'))  # Expected output: False\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Check if all elements in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(x == element for x in lst)\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    '''\n    Checks if all elements in the list are equal to the specified element.\n    \n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n    \n    Returns:\n    bool: True if all elements in the list are equal to the specified element, False otherwise.\n    \n    Edge Cases:\n    - Returns True for an empty list.\n    '''\n    return all(x == element for x in lst)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(check_element([], 'blue'))  # Expected output: True\n    print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Expected output: True\n    print(check_element(['blue', 'green', 'blue'], 'blue'))  # Expected output: False\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Checks if all elements in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        return False\n\n    # Iterate through each item in the list\n    for item in lst:\n        # Compare each item with the given element\n        if item != element:\n            return False\n\n    # If all items match, return True\n    return True\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Checks if all elements in the list are equal to the specified element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the specified element, False otherwise.\n    \"\"\"\n    # Check if the list is empty\n    if not lst:\n        return False\n    \n    # Use the all() function to check if all elements are equal to the specified element\n    return all(item == element for item in lst)\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Checks if all elements in the list are equal to the specified element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the specified element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(check_element([], 'blue'))  # Expected output: True\n    print(check_element(['blue', 'blue'], 'blue'))  # Expected output: True\n    print(check_element(['blue', 'green'], 'blue'))  # Expected output: False\n"], "plans": ["requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, including handling empty lists without errors. The implementation should be simple, readable, and well-documented.\nrequirement pool:\n- The function must handle empty lists without errors.\n- The function should return a boolean indicating if all elements match the given element.\n- The function should be efficient for large lists.\n- The function should be easy to integrate into other projects.\n- The function should include comprehensive documentation.\nWe will implement a simple function using Python's built-in all() function combined with a generator expression to efficiently check if all elements in the list are equal to the specified element. This approach is efficient and handles edge cases like empty lists gracefully. The function will be documented with examples and edge case handling in the comments.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'equal'\n    Explanation: The requirement is to check if all elements in the list are equal to the specified element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Use Python's built-in `all()` function to iterate over the list.\n    - Use a generator expression to compare each element in the list with the specified element.\n    - Return `True` if all elements match, otherwise return `False`.\n\n# [edge case] \n    check_element([], 'blue') = True\n    Explanation: An empty list has no elements that contradict the condition, so it is vacuously true that all elements (none) are equal to 'blue'.\n    \n    check_element(['blue'], 'blue') = True\n    Explanation: The list contains only one element which matches the specified element, so the function returns True.\n    \n    check_element(['blue', 'green'], 'blue') = False\n    Explanation: Not all elements in the list are equal to 'blue', so the function returns False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `all()` with a generator expression naturally handles empty lists and other edge cases efficiently.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, handling edge cases like empty lists without errors. It should be optimized for performance, especially with large lists, and provide clear documentation for ease of use.\nrequirement pool:\n- Efficiently handle empty lists\n- Check all elements against a specified value\n- Optimize performance for large lists\n- Provide clear function documentation\n- Ensure compatibility with different data types\nWe will implement a simple function using Python's built-in all() function combined with a generator expression to efficiently check if all elements in a list are equal to a specified element. This approach is both efficient and easy to use, handling edge cases like empty lists without errors. The function will be optimized for performance, especially with large lists, and will include clear documentation for ease of use.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: The requirement is to check if every element in the list matches the specified element. If all elements match, the function should return True; otherwise, it should return False.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'all': means every single item in the list must be equal to the given element for the function to return True.\n\n# [code logic]\n    1. Define the function `check_element` that takes a list and an element as arguments.\n    2. Use Python's built-in `all()` function with a generator expression to iterate over each item in the list.\n    3. For each item, check if it is equal to the given element.\n    4. If all items are equal, `all()` will return True; otherwise, it will return False.\n    5. Return the result of the `all()` function.\n\n# [edge case] \n    check_element([], 'blue') = True\n    Explanation: An empty list technically satisfies the condition that all elements (none in this case) are equal to 'blue', so it should return True.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the function should return True.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements are equal to 'blue', so the function should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `all()` naturally handles empty lists and other cases efficiently.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, including handling edge cases like empty lists. The function should return a boolean value indicating the result.\nrequirement pool:\n- The function must handle empty lists without errors.\n- The function should return True if all elements match the specified element.\n- The function should be optimized for performance with large lists.\n- The function should have clear and concise documentation.\n- The function should maintain high readability and simplicity.\nWe will implement a simple Python function using list comprehension combined with the built-in all() function to efficiently check if all elements in a list are equal to a specified element. This approach is chosen for its high efficiency and readability, and it handles edge cases like empty lists gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'equal'\n    Explanation: The requirement is to check if all elements in the list are equal to the specified element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Use the built-in `all()` function to check if all elements in the list are equal to the specified element.\n    - Utilize list comprehension to iterate over each element in the list and compare it to the given element.\n    - Return `True` if all elements match, otherwise return `False`.\n\n# [edge case] \n    check_element([], 'blue') = True\n    Explanation: An empty list has no elements that contradict the condition, so it is considered as all elements being equal to 'blue'.\n    \n    check_element(['blue'], 'blue') = True\n    Explanation: The list contains only one element which is equal to 'blue', so the expected output is True.\n    \n    check_element(['green', 'green', 'green'], 'green') = True\n    Explanation: All elements in the list are equal to 'green', so the expected output is True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `all()` function inherently handles empty lists and single-element lists efficiently.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a given element, handling edge cases like empty lists. It should be optimized for performance, especially with large datasets, and provide clear documentation for ease of use.\nrequirement pool:\n- The function must handle empty lists without errors.\n- The function should be optimized for performance with large lists.\n- The function should provide clear documentation.\n- The function should be easy to integrate into existing projects.\n- The function should include examples of usage in the documentation.\nWe will implement a function using Python's built-in all() function combined with a generator expression. This approach is efficient and handles edge cases like empty lists gracefully. The function will return False for empty lists, as there are no elements to compare against the given element. This method is optimized for performance, especially with large datasets, as it avoids unnecessary list creation and leverages short-circuit evaluation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: This means that every single item in the list should match the specified element for the function to return True.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty. If it is, return False immediately since there are no elements to compare.\n    2. Use Python's built-in `all()` function with a generator expression to iterate over each item in the list.\n    3. For each item, check if it is equal to the given element.\n    4. If all items match the given element, `all()` will return True; otherwise, it will return False.\n\n# [edge case] \n    check_element([], 'blue') = False\n    Explanation: The list is empty, so there are no elements to compare against 'blue', resulting in a return value of False.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are 'blue', which matches the given element, so the function returns True.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements in the list are 'blue', so the function returns False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `all()` with a generator expression inherently handles empty lists and mismatches efficiently.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a given element, handling edge cases like empty lists. The solution should be optimized for performance and easy to use.\nrequirement pool:\n- The function must handle empty lists without errors.\n- The function should return a boolean indicating if all elements match the given element.\n- The function should be optimized for performance with large datasets.\n- The function should have clear documentation for ease of use.\n- The function should be easy to integrate into existing projects.\nWe will implement a function named check_element that efficiently checks if all elements in a list are equal to a given element. The function will handle edge cases such as empty lists by returning False immediately. We will use Python's built-in all() function for its efficiency and simplicity, combined with a generator expression to iterate over the list. This approach ensures that the function is optimized for performance, especially with large datasets, and is easy to integrate into existing projects.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'equal'\n    Explanation: The requirement is to check if all elements in the list are equal to the given element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Check if the list is empty. If it is, return False immediately.\n    - Use Python's built-in `all()` function combined with a generator expression to iterate over the list.\n    - The generator expression will check if each element in the list is equal to the given element.\n    - If all elements match, `all()` will return True; otherwise, it will return False.\n\n# [edge case] \n    check_element([], 'blue') = False\n    Explanation: An empty list cannot have all elements equal to 'blue', so the expected output is False.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the expected output is True.\n    \n    check_element(['green', 'orange', 'black'], 'blue') = False\n    Explanation: None of the elements in the list are equal to 'blue', so the expected output is False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using `all()` and checking for an empty list covers these scenarios efficiently.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a given element. It must handle edge cases like empty lists and be optimized for performance. The solution should be easy to understand and integrate.\nrequirement pool:\n- The function must handle empty lists without errors.\n- The function should efficiently check all elements against the given element.\n- The function should be optimized for large datasets.\n- The function should have clear documentation.\n- The function should be easy to integrate into existing projects.\nWe will use Python's built-in all() function combined with a generator expression to efficiently check if all elements in the list are equal to the given element. This approach is simple, effective, and handles edge cases like empty lists without errors. It avoids unnecessary dependencies and is optimized for performance with large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: The requirement is to check if every element in the list matches the specified element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Use Python's built-in `all()` function to iterate over the list.\n    2. Use a generator expression to compare each item in the list with the given element.\n    3. If all comparisons return True, `all()` will return True; otherwise, it will return False.\n    4. Handle the edge case of an empty list by returning True, as all elements (none) trivially satisfy the condition.\n\n# [edge case] \n    check_element([], 'blue') = True\n    Explanation: An empty list has no elements that violate the condition, so it trivially satisfies the requirement.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the function should return True.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements in the list are equal to 'blue', so the function should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `all()` with a generator expression naturally handles both non-empty and empty lists efficiently.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, handling edge cases like empty lists without errors. It should be optimized for performance and provide clear documentation for ease of use.\nrequirement pool:\n- Efficiently handle empty lists without errors.\n- Check if all elements in the list match the specified element.\n- Optimize performance for large lists.\n- Provide clear and concise documentation.\n- Ensure compatibility with various data types.\nWe will use Python's built-in all() function combined with a generator expression to efficiently check if all elements in the list match the specified element. This approach is both efficient and concise, handling edge cases like empty lists naturally. The function will be documented to ensure clarity and ease of use.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: The requirement is to check if every single item in the list matches the specified element. If even one item does not match, the function should return False.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'all': This indicates that every item in the list must be equal to the given element for the function to return True.\n\n# [code logic]\n    1. Define the function `check_element` that takes a list and an element as arguments.\n    2. Use Python's built-in `all()` function with a generator expression to iterate over each item in the list.\n    3. For each item, check if it is equal to the given element.\n    4. If all items are equal, `all()` will return True; otherwise, it will return False.\n    5. Return the result of the `all()` function.\n\n# [edge case] \n    check_element([], 'blue') = True\n    Explanation: An empty list technically satisfies the condition that all elements (of which there are none) are equal to 'blue'.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the function should return True.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements are equal to 'blue', so the function should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `all()` naturally handles empty lists and checks each element efficiently.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list match a given element, including handling empty lists without errors. It should be simple to use and integrate into existing projects.\nrequirement pool:\n- The function must handle empty lists without errors.\n- The function should return a boolean indicating if all elements match the given element.\n- The function should be optimized for performance with large lists.\n- The function should have clear and concise documentation.\n- The function should maintain high readability and simplicity.\nWe will implement a simple function using Python's built-in capabilities to check if all elements in a list are equal to a given element. The function will handle edge cases such as empty lists by returning False, as there are no elements to compare. This approach ensures high efficiency and usability, aligning with the competitive analysis and requirement pool.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: This means that every single item in the list should match the specified element for the function to return True.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty. If it is, return False immediately since there are no elements to compare.\n    2. Iterate through each item in the list.\n    3. Compare each item with the given element.\n    4. If any item does not match the given element, return False.\n    5. If all items match, return True.\n\n# [edge case] \n    check_element([], 'blue') = False\n    Explanation: The list is empty, so there are no elements to compare with 'blue', thus returning False.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are 'blue', which matches the given element, so the function returns True.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements in the list are 'blue', so the function returns False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for empty lists and mismatched elements.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, including handling edge cases like empty lists. It should return a boolean value.\nrequirement pool:\n- The function must handle empty lists without errors.\n- The function should return a boolean indicating if all elements match the given element.\n- The function should be optimized for performance with large lists.\n- The function should have clear and concise documentation.\n- The function should maintain high readability and simplicity.\nWe will implement a simple Python function using built-in list operations to check if all elements in a list are equal to a specified element. The function will handle edge cases such as empty lists efficiently by returning False, as there are no elements to compare. We will ensure the function is optimized for performance by using list comprehension and the all() function, which is efficient for large lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'equal to the given element'\n    Explanation: The requirement is to check if every item in the list matches the specified element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Check if the list is empty. If it is, return False immediately since there are no elements to compare.\n    - Use the `all()` function to iterate through the list and check if each element is equal to the specified element.\n    - Return the result of the `all()` function.\n\n# [edge case] \n    check_element([], 'blue') = False\n    Explanation: The list is empty, so there are no elements to compare with 'blue', resulting in False.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the function returns True.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements in the list are equal to 'blue', so the function returns False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the list is empty and using `all()` handles these cases efficiently.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, handling edge cases like empty lists without errors. It should be optimized for performance and provide clear documentation for ease of use.\nrequirement pool:\n- Efficiently check if all elements in a list match a given element\n- Handle empty lists without errors\n- Optimize performance for large lists\n- Provide clear and concise documentation\n- Ensure compatibility with different data types\nWe will implement a simple function using Python's built-in all() function to efficiently check if all elements in a list match a given element. This approach is both efficient and easy to use, and it handles edge cases like empty lists by returning True, as there are no elements that do not match the given element. This solution is optimized for performance, even with large lists, due to the efficiency of the all() function.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: This means that every element in the list should be exactly the same as the specified element for the function to return True.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `check_element` that takes a list and an element as arguments.\n    2. Use Python's built-in `all()` function to check if all elements in the list are equal to the given element.\n    3. Return the result of the `all()` function.\n\n# [edge case] \n    check_element([], 'blue') = True\n    Explanation: An empty list has no elements that do not match 'blue', so it should return True.\n    check_element(['blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are 'blue', which matches the given element, so it should return True.\n    check_element(['blue', 'green'], 'blue') = False\n    Explanation: Not all elements in the list are 'blue', so it should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of the `all()` function inherently handles empty lists by returning True, as there are no elements that do not match the given element.\n"], "test": ["def check(check_element):\n\tassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "def check(check_element):\n\tassert check_element([1,2,3,4],7)==False", "def check(check_element):\n\tassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True", "def check(check_element):\n\tassert check_element(['kjtnbmhr', 'kokjyadgh', 'diyb', 'dlkvo'], 'fcebhgy') == False", "def check(check_element):\n\tassert check_element(['dhexfu', 'btazydt', 'mtjn', 'gtc'], 'dpuils') == False", "def check(check_element):\n\tassert check_element(['pzt', 'qoqwfbzp', 'xuzbx', 'ddkgikkfc'], 'zcd') == False", "def check(check_element):\n\tassert check_element(['iumv', 'xtbnw', 'fyrxdd', 'zzzesud'], 'pkwbnc') == False", "def check(check_element):\n\tassert check_element(['hflevlxr', 'srqsg', 'wlyjdl', 'gymwa'], 'blm') == False", "def check(check_element):\n\tassert check_element(['dicp', 'winwrlp', 'ugwwtw', 'ufd'], 'cflzrk') == False", "def check(check_element):\n\tassert check_element(['ucnzz', 'yyqptfx', 'sch', 'ybljkmyt'], 'kikexsyw') == False", "def check(check_element):\n\tassert check_element(['cym', 'gkt', 'kwaxysw', 'upevwnx'], 'kibfjjkbp') == False", "def check(check_element):\n\tassert check_element(['qypbx', 'jlgdzkf', 'oabirph', 'mwpodi'], 'drbubj') == False", "def check(check_element):\n\tassert check_element(['kbd', 'cvpmamqmu', 'mraa', 'ssmtueyvn'], 'tra') == False", "def check(check_element):\n\tassert check_element(['dbvq', 'fedbgfc', 'ewnojm', 'thql'], 'bkqqgd') == False", "def check(check_element):\n\tassert check_element(['jyu', 'jfcbreyl', 'ihkssi', 'eilxlczs'], 'imumoxw') == False", "def check(check_element):\n\tassert check_element(['gcaujsnkq', 'lpgjftst', 'byhzmyl', 'bzu'], 'aausq') == False", "def check(check_element):\n\tassert check_element(['cxneblxvx', 'zoiuqdcvtngk', 'eonz', 'bdhrt'], 'fynahaqj') == False", "def check(check_element):\n\tassert check_element(['nntv', 'cdizmbvyx', 'aqn', 'bsmyxi'], 'vdtksmum') == False", "def check(check_element):\n\tassert check_element(['ioatt', 'eeeyuw', 'qzjb', 'iffwgp'], 'qvlt') == False", "def check(check_element):\n\tassert check_element(['ufubrzgil', 'trkuttd', 'ubho', 'axaihiun'], 'yktimilj') == False", "def check(check_element):\n\tassert check_element(['fzggrf', 'stxzervqca', 'dfwtakg', 'bubq'], 'saydq') == False", "def check(check_element):\n\tassert check_element(['jpxhqe', 'nibhm', 'ooffq', 'uij'], 'leaduhoow') == False", "def check(check_element):\n\tassert check_element(['qtcab', 'jldjkortnga', 'jpbfp', 'onokdlejs'], 'ygidpmkyz') == False", "def check(check_element):\n\tassert check_element(['ajlmcvqbm', 'csjteybvfpd', 'yckfkfw', 'axvey'], 'sivja') == False", "def check(check_element):\n\tassert check_element(['htouzb', 'eoru', 'vuzcw', 'dbg'], 'yuhyfsl') == False", "def check(check_element):\n\tassert check_element(['ybfnngiy', 'qqaqcmxypnyt', 'hikkidiit', 'uoleamw'], 'eeswyhk') == False", "def check(check_element):\n\tassert check_element(['kektkv', 'ofv', 'qyjjjvw', 'ojhcoc'], 'lkyapr') == False", "def check(check_element):\n\tassert check_element(['ksyjya', 'ufzcf', 'jbpkm', 'sjaj'], 'rpqxyw') == False", "def check(check_element):\n\tassert check_element(['jhogyc', 'tcdrhpz', 'kkjv', 'lamgpxk'], 'qxhp') == False", "def check(check_element):\n\tassert check_element(['nocvt', 'eyubihywmro', 'ipteixxxo', 'gbbdl'], 'sfxt') == False", "def check(check_element):\n\tassert check_element(['rkqm', 'gwrqv', 'rff', 'hizd'], 'pfqxgdm') == False", "def check(check_element):\n\tassert check_element(['rndi', 'bfecc', 'qmtd', 'hoqamvz'], 'ieldvm') == False", "def check(check_element):\n\tassert check_element(['ocdlqnhq', 'ooe', 'viatabsvb', 'cmpkaan'], 'untjyj') == False", "def check(check_element):\n\tassert check_element(['uaegwul', 'hgkep', 'xvu', 'pkmbvlhvz'], 'pmhdzbtik') == False", "def check(check_element):\n\tassert check_element(['qucz', 'ujwiyvpamphu', 'cdjtoycq', 'akjaubuzq'], 'qir') == False", "def check(check_element):\n\tassert check_element(['rpxvklhs', 'lwhvgv', 'gmo', 'mbnczebo'], 'spwxteizw') == False", "def check(check_element):\n\tassert check_element([6, 6, 5, 8], 9) == False", "def check(check_element):\n\tassert check_element([3, 7, 3, 8], 5) == False", "def check(check_element):\n\tassert check_element([2, 4, 2, 3], 2) == False", "def check(check_element):\n\tassert check_element([5, 5, 6, 7], 10) == False", "def check(check_element):\n\tassert check_element([3, 6, 1, 3], 12) == False", "def check(check_element):\n\tassert check_element([2, 1, 6, 8], 4) == False", "def check(check_element):\n\tassert check_element([4, 6, 5, 3], 7) == False", "def check(check_element):\n\tassert check_element([5, 1, 4, 3], 2) == False", "def check(check_element):\n\tassert check_element([6, 1, 4, 8], 4) == False", "def check(check_element):\n\tassert check_element([5, 5, 7, 9], 2) == False", "def check(check_element):\n\tassert check_element([3, 1, 2, 8], 5) == False", "def check(check_element):\n\tassert check_element([2, 1, 3, 5], 12) == False", "def check(check_element):\n\tassert check_element([6, 4, 3, 9], 10) == False", "def check(check_element):\n\tassert check_element([1, 6, 2, 2], 11) == False", "def check(check_element):\n\tassert check_element([3, 7, 7, 9], 3) == False", "def check(check_element):\n\tassert check_element([6, 1, 1, 7], 7) == False", "def check(check_element):\n\tassert check_element([2, 5, 4, 9], 10) == False", "def check(check_element):\n\tassert check_element([5, 6, 7, 3], 9) == False", "def check(check_element):\n\tassert check_element([6, 4, 5, 6], 4) == False", "def check(check_element):\n\tassert check_element([1, 2, 5, 6], 11) == False", "def check(check_element):\n\tassert check_element([5, 7, 5, 5], 5) == False", "def check(check_element):\n\tassert check_element([6, 5, 3, 9], 8) == False", "def check(check_element):\n\tassert check_element([2, 1, 6, 7], 12) == False", "def check(check_element):\n\tassert check_element([2, 3, 1, 9], 2) == False", "def check(check_element):\n\tassert check_element([5, 4, 4, 3], 4) == False", "def check(check_element):\n\tassert check_element([2, 4, 1, 1], 3) == False", "def check(check_element):\n\tassert check_element([3, 4, 2, 2], 10) == False", "def check(check_element):\n\tassert check_element([3, 1, 5, 4], 2) == False", "def check(check_element):\n\tassert check_element([5, 6, 2, 7], 4) == False", "def check(check_element):\n\tassert check_element([1, 2, 7, 3], 12) == False", "def check(check_element):\n\tassert check_element([4, 6, 1, 8], 10) == False", "def check(check_element):\n\tassert check_element([3, 3, 8, 4], 11) == False", "def check(check_element):\n\tassert check_element([2, 1, 3, 4], 9) == False", "def check(check_element):\n\tassert check_element(['twxgyyvy', 'nbotihav', 'eyx', 'pqthuxh'], 'fue') == False", "def check(check_element):\n\tassert check_element(['rbjrzjhvm', 'tphcjlahp', 'klujjx', 'rmrjoet'], 'imtitayfb') == False", "def check(check_element):\n\tassert check_element(['gacsl', 'nmuwr', 'jrylm', 'tljtd'], 'gglbhwrq') == False", "def check(check_element):\n\tassert check_element(['shh', 'bsgupw', 'fnzbuobn', 'xsyxp'], 'gvv') == False", "def check(check_element):\n\tassert check_element(['bybqbq', 'yqfarwzt', 'wlhjg', 'furwg'], 'rndiv') == False", "def check(check_element):\n\tassert check_element(['wnllzt', 'reiuyv', 'vuioj', 'kbbbna'], 'lhlnyhlxs') == False", "def check(check_element):\n\tassert check_element(['wvz', 'ucpfmzep', 'nzt', 'jctttjb'], 'aclnn') == False", "def check(check_element):\n\tassert check_element(['cwwdzh', 'oadwwaf', 'oeljcsin', 'lnrerjf'], 'msld') == False", "def check(check_element):\n\tassert check_element(['tvdd', 'ejfmfb', 'vgpamj', 'qeyujydc'], 'vuiuso') == False", "def check(check_element):\n\tassert check_element(['nrjty', 'qmd', 'lptpgj', 'fir'], 'mtaqgwh') == False", "def check(check_element):\n\tassert check_element(['dzv', 'izc', 'yzj', 'yaoc'], 'vkwbk') == False", "def check(check_element):\n\tassert check_element(['wci', 'qbsxierh', 'lsnom', 'mqmnfxfmo'], 'zbvxeo') == False", "def check(check_element):\n\tassert check_element(['inly', 'huuy', 'izjt', 'pskj'], 'zeei') == False", "def check(check_element):\n\tassert check_element(['wvyiembfl', 'aqawt', 'hbwkgj', 'igrvy'], 'gffxi') == False", "def check(check_element):\n\tassert check_element(['znvxy', 'nck', 'uwqnckvj', 'vhrstfofy'], 'kgbt') == False", "def check(check_element):\n\tassert check_element(['lufyesid', 'wykb', 'uwv', 'buo'], 'amhyjmygp') == False", "def check(check_element):\n\tassert check_element(['corckyd', 'agoivl', 'xkkdhbhec', 'yjottc'], 'bomgv') == False", "def check(check_element):\n\tassert check_element(['wejjjguc', 'srglrq', 'nkuilzmzo', 'lkhzxt'], 'adi') == False", "def check(check_element):\n\tassert check_element(['ghnmsg', 'anrvphr', 'ojyb', 'ujfvkwtej'], 'kbhipuo') == False", "def check(check_element):\n\tassert check_element(['kirp', 'gchvjmakk', 'lwu', 'dzmgu'], 'xrujixxyn') == False", "def check(check_element):\n\tassert check_element(['cca', 'tufalq', 'mtmmvnwvh', 'yvm'], 'whgqcomzr') == False", "def check(check_element):\n\tassert check_element(['mxo', 'vzfymij', 'apftwk', 'tfhndxe'], 'shbhvrw') == False", "def check(check_element):\n\tassert check_element(['iylr', 'qbaggndx', 'kshgf', 'usrisohn'], 'eawk') == False", "def check(check_element):\n\tassert check_element(['rjbvoga', 'xaxs', 'lkhbg', 'edea'], 'yqecdinr') == False", "def check(check_element):\n\tassert check_element(['jyl', 'ckfxl', 'roszyhvr', 'gtvufyn'], 'ugovkk') == False", "def check(check_element):\n\tassert check_element(['kwcle', 'vou', 'vkupqz', 'uycuemmxp'], 'meuex') == False", "def check(check_element):\n\tassert check_element(['qpxubn', 'gscj', 'ltyqkavi', 'tbzq'], 'jast') == False", "def check(check_element):\n\tassert check_element(['fomuzfac', 'vzmhaixs', 'jdohtr', 'mxmbutpvi'], 'phx') == False", "def check(check_element):\n\tassert check_element(['jiifmliv', 'rbcr', 'zhfsgqrp', 'ejitlh'], 'mqiz') == False", "def check(check_element):\n\tassert check_element(['nmbdehbx', 'noanqi', 'byixwf', 'vscuiv'], 'azr') == False", "def check(check_element):\n\tassert check_element(['nwlkov', 'ysg', 'wcxqlqxti', 'fdrtzk'], 'ahtgyqa') == False", "def check(check_element):\n\tassert check_element(['ojavf', 'ovndofiqd', 'ynjrpqijl', 'gbyfvnkmn'], 'ofkeoatq') == False", "def check(check_element):\n\tassert check_element(['hiqzqqyh', 'ueapyxb', 'toqg', 'sxmgw'], 'dumihpsyd') == False"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Checks if all elements in the list are equal to the specified element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the specified element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(check_element([], 'blue'))  # Expected output: True\n    print(check_element(['blue', 'blue'], 'blue'))  # Expected output: True\n    print(check_element(['blue', 'green'], 'blue'))  # Expected output: False\n", "passed": true, "pass": true, "pass_num": 10, "round": 114, "mutate_method": "add_1_sentence_at_end", "parent_index": 114}
