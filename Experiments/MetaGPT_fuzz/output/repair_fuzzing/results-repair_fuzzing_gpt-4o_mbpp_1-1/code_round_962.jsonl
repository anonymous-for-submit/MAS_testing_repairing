{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 284, "prompt": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element. The function should return a boolean value indicating the result of this check.", "code": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element", "test_imports": [], "test_list": ["assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "assert check_element([1,2,3,4],7)==False", "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True", "assert check_element(['kjtnbmhr', 'kokjyadgh', 'diyb', 'dlkvo'], 'fcebhgy') == False", "assert check_element(['dhexfu', 'btazydt', 'mtjn', 'gtc'], 'dpuils') == False", "assert check_element(['pzt', 'qoqwfbzp', 'xuzbx', 'ddkgikkfc'], 'zcd') == False", "assert check_element(['iumv', 'xtbnw', 'fyrxdd', 'zzzesud'], 'pkwbnc') == False", "assert check_element(['hflevlxr', 'srqsg', 'wlyjdl', 'gymwa'], 'blm') == False", "assert check_element(['dicp', 'winwrlp', 'ugwwtw', 'ufd'], 'cflzrk') == False", "assert check_element(['ucnzz', 'yyqptfx', 'sch', 'ybljkmyt'], 'kikexsyw') == False", "assert check_element(['cym', 'gkt', 'kwaxysw', 'upevwnx'], 'kibfjjkbp') == False", "assert check_element(['qypbx', 'jlgdzkf', 'oabirph', 'mwpodi'], 'drbubj') == False", "assert check_element(['kbd', 'cvpmamqmu', 'mraa', 'ssmtueyvn'], 'tra') == False", "assert check_element(['dbvq', 'fedbgfc', 'ewnojm', 'thql'], 'bkqqgd') == False", "assert check_element(['jyu', 'jfcbreyl', 'ihkssi', 'eilxlczs'], 'imumoxw') == False", "assert check_element(['gcaujsnkq', 'lpgjftst', 'byhzmyl', 'bzu'], 'aausq') == False", "assert check_element(['cxneblxvx', 'zoiuqdcvtngk', 'eonz', 'bdhrt'], 'fynahaqj') == False", "assert check_element(['nntv', 'cdizmbvyx', 'aqn', 'bsmyxi'], 'vdtksmum') == False", "assert check_element(['ioatt', 'eeeyuw', 'qzjb', 'iffwgp'], 'qvlt') == False", "assert check_element(['ufubrzgil', 'trkuttd', 'ubho', 'axaihiun'], 'yktimilj') == False", "assert check_element(['fzggrf', 'stxzervqca', 'dfwtakg', 'bubq'], 'saydq') == False", "assert check_element(['jpxhqe', 'nibhm', 'ooffq', 'uij'], 'leaduhoow') == False", "assert check_element(['qtcab', 'jldjkortnga', 'jpbfp', 'onokdlejs'], 'ygidpmkyz') == False", "assert check_element(['ajlmcvqbm', 'csjteybvfpd', 'yckfkfw', 'axvey'], 'sivja') == False", "assert check_element(['htouzb', 'eoru', 'vuzcw', 'dbg'], 'yuhyfsl') == False", "assert check_element(['ybfnngiy', 'qqaqcmxypnyt', 'hikkidiit', 'uoleamw'], 'eeswyhk') == False", "assert check_element(['kektkv', 'ofv', 'qyjjjvw', 'ojhcoc'], 'lkyapr') == False", "assert check_element(['ksyjya', 'ufzcf', 'jbpkm', 'sjaj'], 'rpqxyw') == False", "assert check_element(['jhogyc', 'tcdrhpz', 'kkjv', 'lamgpxk'], 'qxhp') == False", "assert check_element(['nocvt', 'eyubihywmro', 'ipteixxxo', 'gbbdl'], 'sfxt') == False", "assert check_element(['rkqm', 'gwrqv', 'rff', 'hizd'], 'pfqxgdm') == False", "assert check_element(['rndi', 'bfecc', 'qmtd', 'hoqamvz'], 'ieldvm') == False", "assert check_element(['ocdlqnhq', 'ooe', 'viatabsvb', 'cmpkaan'], 'untjyj') == False", "assert check_element(['uaegwul', 'hgkep', 'xvu', 'pkmbvlhvz'], 'pmhdzbtik') == False", "assert check_element(['qucz', 'ujwiyvpamphu', 'cdjtoycq', 'akjaubuzq'], 'qir') == False", "assert check_element(['rpxvklhs', 'lwhvgv', 'gmo', 'mbnczebo'], 'spwxteizw') == False", "assert check_element([6, 6, 5, 8], 9) == False", "assert check_element([3, 7, 3, 8], 5) == False", "assert check_element([2, 4, 2, 3], 2) == False", "assert check_element([5, 5, 6, 7], 10) == False", "assert check_element([3, 6, 1, 3], 12) == False", "assert check_element([2, 1, 6, 8], 4) == False", "assert check_element([4, 6, 5, 3], 7) == False", "assert check_element([5, 1, 4, 3], 2) == False", "assert check_element([6, 1, 4, 8], 4) == False", "assert check_element([5, 5, 7, 9], 2) == False", "assert check_element([3, 1, 2, 8], 5) == False", "assert check_element([2, 1, 3, 5], 12) == False", "assert check_element([6, 4, 3, 9], 10) == False", "assert check_element([1, 6, 2, 2], 11) == False", "assert check_element([3, 7, 7, 9], 3) == False", "assert check_element([6, 1, 1, 7], 7) == False", "assert check_element([2, 5, 4, 9], 10) == False", "assert check_element([5, 6, 7, 3], 9) == False", "assert check_element([6, 4, 5, 6], 4) == False", "assert check_element([1, 2, 5, 6], 11) == False", "assert check_element([5, 7, 5, 5], 5) == False", "assert check_element([6, 5, 3, 9], 8) == False", "assert check_element([2, 1, 6, 7], 12) == False", "assert check_element([2, 3, 1, 9], 2) == False", "assert check_element([5, 4, 4, 3], 4) == False", "assert check_element([2, 4, 1, 1], 3) == False", "assert check_element([3, 4, 2, 2], 10) == False", "assert check_element([3, 1, 5, 4], 2) == False", "assert check_element([5, 6, 2, 7], 4) == False", "assert check_element([1, 2, 7, 3], 12) == False", "assert check_element([4, 6, 1, 8], 10) == False", "assert check_element([3, 3, 8, 4], 11) == False", "assert check_element([2, 1, 3, 4], 9) == False", "assert check_element(['twxgyyvy', 'nbotihav', 'eyx', 'pqthuxh'], 'fue') == False", "assert check_element(['rbjrzjhvm', 'tphcjlahp', 'klujjx', 'rmrjoet'], 'imtitayfb') == False", "assert check_element(['gacsl', 'nmuwr', 'jrylm', 'tljtd'], 'gglbhwrq') == False", "assert check_element(['shh', 'bsgupw', 'fnzbuobn', 'xsyxp'], 'gvv') == False", "assert check_element(['bybqbq', 'yqfarwzt', 'wlhjg', 'furwg'], 'rndiv') == False", "assert check_element(['wnllzt', 'reiuyv', 'vuioj', 'kbbbna'], 'lhlnyhlxs') == False", "assert check_element(['wvz', 'ucpfmzep', 'nzt', 'jctttjb'], 'aclnn') == False", "assert check_element(['cwwdzh', 'oadwwaf', 'oeljcsin', 'lnrerjf'], 'msld') == False", "assert check_element(['tvdd', 'ejfmfb', 'vgpamj', 'qeyujydc'], 'vuiuso') == False", "assert check_element(['nrjty', 'qmd', 'lptpgj', 'fir'], 'mtaqgwh') == False", "assert check_element(['dzv', 'izc', 'yzj', 'yaoc'], 'vkwbk') == False", "assert check_element(['wci', 'qbsxierh', 'lsnom', 'mqmnfxfmo'], 'zbvxeo') == False", "assert check_element(['inly', 'huuy', 'izjt', 'pskj'], 'zeei') == False", "assert check_element(['wvyiembfl', 'aqawt', 'hbwkgj', 'igrvy'], 'gffxi') == False", "assert check_element(['znvxy', 'nck', 'uwqnckvj', 'vhrstfofy'], 'kgbt') == False", "assert check_element(['lufyesid', 'wykb', 'uwv', 'buo'], 'amhyjmygp') == False", "assert check_element(['corckyd', 'agoivl', 'xkkdhbhec', 'yjottc'], 'bomgv') == False", "assert check_element(['wejjjguc', 'srglrq', 'nkuilzmzo', 'lkhzxt'], 'adi') == False", "assert check_element(['ghnmsg', 'anrvphr', 'ojyb', 'ujfvkwtej'], 'kbhipuo') == False", "assert check_element(['kirp', 'gchvjmakk', 'lwu', 'dzmgu'], 'xrujixxyn') == False", "assert check_element(['cca', 'tufalq', 'mtmmvnwvh', 'yvm'], 'whgqcomzr') == False", "assert check_element(['mxo', 'vzfymij', 'apftwk', 'tfhndxe'], 'shbhvrw') == False", "assert check_element(['iylr', 'qbaggndx', 'kshgf', 'usrisohn'], 'eawk') == False", "assert check_element(['rjbvoga', 'xaxs', 'lkhbg', 'edea'], 'yqecdinr') == False", "assert check_element(['jyl', 'ckfxl', 'roszyhvr', 'gtvufyn'], 'ugovkk') == False", "assert check_element(['kwcle', 'vou', 'vkupqz', 'uycuemmxp'], 'meuex') == False", "assert check_element(['qpxubn', 'gscj', 'ltyqkavi', 'tbzq'], 'jast') == False", "assert check_element(['fomuzfac', 'vzmhaixs', 'jdohtr', 'mxmbutpvi'], 'phx') == False", "assert check_element(['jiifmliv', 'rbcr', 'zhfsgqrp', 'ejitlh'], 'mqiz') == False", "assert check_element(['nmbdehbx', 'noanqi', 'byixwf', 'vscuiv'], 'azr') == False", "assert check_element(['nwlkov', 'ysg', 'wcxqlqxti', 'fdrtzk'], 'ahtgyqa') == False", "assert check_element(['ojavf', 'ovndofiqd', 'ynjrpqijl', 'gbyfvnkmn'], 'ofkeoatq') == False", "assert check_element(['hiqzqqyh', 'ueapyxb', 'toqg', 'sxmgw'], 'dumihpsyd') == False"], "entry_point": "check_element", "repair_prompt": ["Write a function check_element that takes in a list and element and checks whether all items in the list are equal to the given element. The function should return a boolean value indicating the result of this check.\ncheck_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n", "Write a function check_element that takes in a list and element and checks whether all items in the list are equal to the given element. The list should contain multiple elements that you want to compare to the given element. The function should return a boolean value indicating the result of this check.\ncheck_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n", "Write a function check_element that takes in a list and element, returning a boolean value indicating whether all items in the list are equal to the given element.\ncheck_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n"], "completions": ["from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Check if all elements in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Checks if all items in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    # Use Python's built-in all() function to check if all elements in the list are equal to the given element.\n    return all(x == element for x in lst)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(check_element([], 'blue'))  # Expected output: True\n    print(check_element(['blue'], 'blue'))  # Expected output: True\n    print(check_element(['blue', 'blue', 'green'], 'blue'))  # Expected output: False\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Check if all elements in the list are equal to the specified element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the specified element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)\n\n## Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(check_element([], 'blue'))  # Expected output: True\n    print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Expected output: True\n    print(check_element(['blue', 'green', 'blue'], 'blue'))  # Expected output: False\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Check if all elements in the list are equal to the specified element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the specified element, False otherwise.\n    \"\"\"\n    return all(x == element for x in lst)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(check_element([], 'blue'))  # Expected output: True\n    print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Expected output: True\n    print(check_element(['blue', 'green', 'blue'], 'blue'))  # Expected output: False\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    '''\n    Checks if all elements in the list are equal to the specified element.\n    \n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n    \n    Returns:\n    bool: True if all elements in the list are equal to the specified element, False otherwise.\n    '''\n    # Use Python's built-in `all()` function with a generator expression\n    return all(x == element for x in lst)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(check_element([], 'blue'))  # Expected output: True\n    print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Expected output: True\n    print(check_element(['blue', 'green', 'blue'], 'blue'))  # Expected output: False\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Check if all elements in the list are equal to the given element.\n\n    This function iterates over the provided list and checks if each element\n    is equal to the specified element. It returns True if all elements match\n    the given element, and False otherwise.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the given element, False otherwise.\n\n    Examples:\n    >>> check_element([], 'blue')\n    True\n    >>> check_element(['blue', 'blue', 'blue'], 'blue')\n    True\n    >>> check_element(['blue', 'green', 'blue'], 'blue')\n    False\n    \"\"\"\n    return all(item == element for item in lst)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(check_element([], 'blue'))  # Expected: True\n    print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Expected: True\n    print(check_element(['blue', 'green', 'blue'], 'blue'))  # Expected: False\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Check if all elements in the list are equal to the specified element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the specified element, False otherwise.\n    \"\"\"\n    for item in lst:\n        if item != element:\n            return False\n    return True\n\n# Example usage:\n# print(check_element([], 'blue'))  # Expected output: True\n# print(check_element(['blue'], 'blue'))  # Expected output: True\n# print(check_element(['blue', 'blue', 'green'], 'blue'))  # Expected output: False\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Check if all elements in the list are equal to the specified element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the specified element, False otherwise.\n    \"\"\"\n    for item in lst:\n        if item != element:\n            return False\n    return True\n\n# Example usage:\n# print(check_element(['green', 'orange', 'black', 'white'], 'blue'))  # Output: False\n# print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Output: True\n# print(check_element([], 'blue'))  # Output: True\n# print(check_element(['green', 'green', 'green'], 'green'))  # Output: True\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Check if all elements in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    for item in lst:\n        if item != element:\n            return False\n    return True\n\n# Example usage:\n# print(check_element([], 'blue'))  # Expected output: True\n# print(check_element(['blue'], 'blue'))  # Expected output: True\n# print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Expected output: True\n# print(check_element(['blue', 'red', 'blue'], 'blue'))  # Expected output: False\n", "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Checks if all items in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(x == element for x in lst)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(check_element([], 'blue'))  # Expected: True\n    print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Expected: True\n    print(check_element(['blue', 'green', 'blue'], 'blue'))  # Expected: False\n"], "plans": ["requirement analysis:\nThe function should iterate over the list and compare each element to the given element. If all elements match, return True; otherwise, return False. The function should handle edge cases such as empty lists and different data types.\nrequirement pool:\n- Implement the check_element function to compare list elements with a given value.\n- Optimize the function for performance with large lists.\n- Ensure compatibility with Python 3.x versions.\n- Provide comprehensive documentation and examples.\n- Include unit tests to verify function correctness.\nWe will implement the check_element function using Python's built-in all() function combined with a generator expression. This approach is efficient and concise, allowing us to iterate over the list and check if all elements match the given element. This method is compatible with Python 3.x versions and handles edge cases such as empty lists gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: This means that every single item in the list must match the specified element for the function to return True. If even one item does not match, the function should return False.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Use Python's built-in `all()` function to iterate over each item in the list.\n    2. For each item, check if it is equal to the given element.\n    3. If all items are equal to the element, `all()` will return True; otherwise, it will return False.\n\n# [edge case] \n    check_element([], 'blue') = True\n    Explanation: An empty list technically has no elements that contradict the condition, so it returns True.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the function returns True.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements are 'blue', so the function returns False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `all()` inherently handles empty lists and checks each element against the given element.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, returning a boolean result. It should handle lists of varying sizes and types, ensuring performance and accuracy.\nrequirement pool:\n- Implement the main function logic to check element equality\n- Optimize for performance with large lists\n- Ensure compatibility with different data types\n- Provide comprehensive documentation\n- Include unit tests for validation\nWe will implement a simple function using Python's built-in all() function to efficiently check if all elements in a list are equal to a specified element. This approach ensures optimal performance even for large lists and handles various data types seamlessly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: This means that every single item in the list should match the specified element for the function to return True.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `check_element` that takes a list and an element as arguments.\n    2. Use Python's built-in `all()` function to check if all elements in the list are equal to the given element.\n    3. Return the result of the `all()` function, which will be a boolean value.\n\n# [edge case] \n    check_element([], 'blue') = True\n    Explanation: An empty list technically satisfies the condition that all elements (none in this case) are equal to 'blue'.\n    \n    check_element(['blue'], 'blue') = True\n    Explanation: The list contains only one element, which matches the given element, so the function returns True.\n    \n    check_element(['blue', 'blue', 'green'], 'blue') = False\n    Explanation: Not all elements in the list are equal to 'blue', so the function returns False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `all()` inherently handles these scenarios correctly.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, returning a boolean result. It should handle lists of any size and provide clear documentation for ease of use.\nrequirement pool:\n- Implement the check_element function to meet the specified requirements\n- Optimize the function for performance with large lists\n- Ensure the function is easy to understand and use\n- Provide examples and documentation for user guidance\n- Test the function with various list sizes and elements\nWe will implement a simple and efficient function using Python's built-in all() function to check if all elements in a list are equal to a specified element. This approach is both efficient and easy to understand, making it suitable for handling lists of varying sizes. We will also provide clear documentation and examples to guide users.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'equal'\n    Explanation: The requirement is to check if all items in the list are equal to the given element, meaning each item in the list should match the specified element exactly.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Use Python's built-in `all()` function to iterate over the list.\n    - Compare each element in the list with the specified element.\n    - Return `True` if all elements match the specified element, otherwise return `False`.\n\n# [edge case] \n    check_element([], 'blue') = True\n    Explanation: An empty list has no elements that contradict the condition, so it trivially satisfies the requirement.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the function should return `True`.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements are equal to 'blue', so the function should return `False`.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `all()` inherently handles these cases by returning `True` for an empty list and correctly evaluating each element against the specified element.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, returning a boolean result. It should handle lists of various sizes and types, ensuring performance and accuracy.\nrequirement pool:\n- Implement the main function logic\n- Optimize for large list performance\n- Ensure compatibility with different data types\n- Provide comprehensive documentation\n- Include unit tests for validation\nWe will implement a simple function using Python's built-in all() function to efficiently check if all elements in a list are equal to a specified element. This approach ensures high performance and compatibility with different data types. We will also handle edge cases such as empty lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: This means that every single item in the list should match the specified element for the function to return True.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `check_element` that takes a list and an element as arguments.\n    2. Use Python's built-in `all()` function to check if all elements in the list are equal to the given element.\n    3. Return the result of the `all()` function, which will be a boolean value.\n\n# [edge case] \n    check_element([], 'blue') = True\n    Explanation: An empty list technically satisfies the condition that all elements (none in this case) are equal to 'blue'.\n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the function should return True.\n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements in the list are equal to 'blue', so the function should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of the `all()` function inherently handles these scenarios, including empty lists.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, returning a boolean result. It should handle lists of varying sizes and types, ensuring performance and accuracy.\nrequirement pool:\n- Implement the main function logic to check element equality.\n- Optimize the function for performance with large lists.\n- Provide comprehensive documentation for the function.\n- Include error handling for non-list inputs.\n- Test the function with various data types.\nWe will implement a simple function using Python's built-in all() function combined with a generator expression to efficiently check if all elements in the list are equal to the specified element. This approach ensures high performance even for large lists and maintains readability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: This means that the function should verify if every single item in the list matches the specified element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'all': This indicates that every item in the list must match the given element for the function to return True.\n\n# [code logic]\n    - Use Python's built-in `all()` function to iterate over the list.\n    - Use a generator expression to compare each item in the list to the given element.\n    - Return True if all comparisons are True, otherwise return False.\n\n# [edge case] \n    check_element([], 'blue') = True\n    Explanation: An empty list trivially satisfies the condition that all elements are equal to 'blue', as there are no elements to contradict this.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the function should return True.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements are equal to 'blue', so the function should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `all()` with a generator expression naturally handles these cases.\n", "requirement analysis:\nThe function should iterate over the list and compare each element to the given element. If all elements match, return True; otherwise, return False. The function should handle lists of varying lengths and types of elements.\nrequirement pool:\n- Implement the check_element function to compare list elements with a given element.\n- Optimize the function for performance with large lists.\n- Ensure the function is compatible with Python 3.x.\n- Provide comprehensive documentation and examples.\n- Include unit tests to verify function correctness.\nWe will implement a simple function named check_element that iterates over the list and compares each element to the given element. If all elements match, it returns True; otherwise, it returns False. We will use Python's built-in all() function to achieve this efficiently. The function will be compatible with Python 3.x and will include comprehensive documentation and examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: The requirement is to check if every item in the list matches the specified element, returning True if they do, and False otherwise.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function check_element that takes a list and an element as parameters.\n    2. Use the built-in all() function to iterate over the list and check if each item is equal to the given element.\n    3. Return True if all items match the element; otherwise, return False.\n\n# [edge case] \n    check_element([], 'blue') = True\n    Explanation: An empty list technically has no elements that contradict the condition, so it returns True.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the function returns True.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements in the list are equal to 'blue', so the function returns False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of all() inherently handles empty lists and checks each element against the given element.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, returning a boolean result. It should handle lists of any size and provide quick results.\nrequirement pool:\n- Implement the main function logic to check element equality.\n- Optimize the function for performance with large lists.\n- Document the function usage and edge cases.\n- Test the function with various list sizes and elements.\n- Consider edge cases like empty lists or non-comparable elements.\nWe will implement a simple function using Python's built-in capabilities to check if all elements in a list are equal to a specified element. The function will iterate through the list and compare each element to the given element, returning False immediately if a mismatch is found. This approach ensures efficiency, especially for large lists, as it stops processing as soon as a non-matching element is encountered.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'equal'\n    Explanation: In the requirement, 'equal' means that each item in the list should be exactly the same as the given element for the function to return True.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate through each item in the list.\n    2. Compare each item with the given element.\n    3. If any item does not match the given element, return False immediately.\n    4. If all items match, return True.\n\n# [edge case] \n    check_element([], 'blue') = True\n    Explanation: An empty list has no elements that can differ from 'blue', so it trivially satisfies the condition.\n    \n    check_element(['blue'], 'blue') = True\n    Explanation: The list contains only one element which matches the given element, so the function returns True.\n    \n    check_element(['blue', 'blue', 'green'], 'blue') = False\n    Explanation: The list contains an element ('green') that does not match the given element ('blue'), so the function returns False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through the list and checking each element against the given element will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, returning a boolean result. It should handle lists of any size and provide clear documentation for ease of use.\nrequirement pool:\n- Implement the main function logic to check list elements.\n- Optimize performance for large lists.\n- Provide examples and documentation.\n- Ensure compatibility with different data types.\n- Test the function with edge cases.\nWe will implement a simple function using built-in Python capabilities to check if all elements in a list are equal to a specified element. This approach ensures efficiency and simplicity, avoiding the overhead of external libraries like NumPy or Pandas, which are unnecessary for this task. The function will iterate through the list and compare each element to the specified value, returning False immediately if a mismatch is found, which optimizes performance for large lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: The requirement is to check if every element in the list matches the specified element, returning True if they do and False otherwise.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate through each item in the list.\n    2. Compare each item with the given element.\n    3. If any item does not match the given element, return False immediately.\n    4. If all items match, return True.\n\n# [edge case] \n    check_element([], 'blue') = True\n    Explanation: An empty list has no elements that can differ from 'blue', so it trivially satisfies the condition.\n    \n    check_element(['blue'], 'blue') = True\n    Explanation: The list contains only one element which matches the given element, so the function returns True.\n    \n    check_element(['green', 'green', 'green'], 'green') = True\n    Explanation: All elements in the list are equal to 'green', so the function returns True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through the list and checking each element against the given element will naturally handle these cases.\n", "requirement analysis:\nThe function should iterate over the list and compare each element to the given element, returning False immediately if a mismatch is found. It should handle lists of any data type and be optimized for performance.\nrequirement pool:\n- The function must return a boolean indicating if all elements match the given element.\n- The function should handle lists with mixed data types gracefully.\n- The function should be optimized for performance with large lists.\n- The function should include error handling for invalid inputs.\n- The function should be compatible with Python 3.x.\nWe will implement a simple function using built-in Python capabilities to iterate over the list and check if all elements match the given element. This approach ensures compatibility with Python 3.x and handles lists with mixed data types efficiently. We will avoid using external libraries to keep the function lightweight and easy to use.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'equal'\n    Explanation: In the requirement, 'equal' means that each item in the list should be exactly the same as the given element for the function to return True.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate over each item in the list.\n    2. Compare each item with the given element.\n    3. If any item is not equal to the element, return False.\n    4. If all items are equal to the element, return True.\n\n# [edge case] \n    check_element([], 'blue') = True\n    Explanation: An empty list has no elements that can be unequal to 'blue', so it trivially satisfies the condition.\n    \n    check_element(['blue'], 'blue') = True\n    Explanation: The list contains only one element which is equal to 'blue', so the function returns True.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the function returns True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through the list and checking equality will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently check if all elements in a list are equal to a specified element, returning a boolean result. It should handle lists of any size and provide clear documentation for users.\nrequirement pool:\n- Implement the main function logic to check list elements.\n- Optimize the function for performance with large lists.\n- Ensure the function handles edge cases, such as empty lists.\n- Provide comprehensive documentation for the function.\n- Include unit tests to verify functionality.\nWe will implement a simple function using Python's built-in all() function combined with a generator expression to efficiently check if all elements in a list are equal to a specified element. This approach is optimal for performance and readability, especially for large lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all items in the list are equal to the given element'\n    Explanation: This means that every single item in the list must match the specified element for the function to return True. If even one item does not match, the function should return False.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `check_element` that takes two parameters: a list and an element.\n    2. Use Python's built-in `all()` function combined with a generator expression to iterate over each item in the list.\n    3. For each item, check if it is equal to the given element.\n    4. If all items are equal to the element, `all()` will return True; otherwise, it will return False.\n    5. Return the result of the `all()` function.\n\n# [edge case] \n    check_element([], 'blue') = True\n    Explanation: An empty list technically satisfies the condition that all elements (none in this case) are equal to 'blue'.\n    \n    check_element(['blue', 'blue', 'blue'], 'blue') = True\n    Explanation: All elements in the list are equal to 'blue', so the function should return True.\n    \n    check_element(['blue', 'green', 'blue'], 'blue') = False\n    Explanation: Not all elements are equal to 'blue', so the function should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of `all()` naturally handles these scenarios, including empty lists.\n"], "test": ["def check(check_element):\n\tassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "def check(check_element):\n\tassert check_element([1,2,3,4],7)==False", "def check(check_element):\n\tassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True", "def check(check_element):\n\tassert check_element(['kjtnbmhr', 'kokjyadgh', 'diyb', 'dlkvo'], 'fcebhgy') == False", "def check(check_element):\n\tassert check_element(['dhexfu', 'btazydt', 'mtjn', 'gtc'], 'dpuils') == False", "def check(check_element):\n\tassert check_element(['pzt', 'qoqwfbzp', 'xuzbx', 'ddkgikkfc'], 'zcd') == False", "def check(check_element):\n\tassert check_element(['iumv', 'xtbnw', 'fyrxdd', 'zzzesud'], 'pkwbnc') == False", "def check(check_element):\n\tassert check_element(['hflevlxr', 'srqsg', 'wlyjdl', 'gymwa'], 'blm') == False", "def check(check_element):\n\tassert check_element(['dicp', 'winwrlp', 'ugwwtw', 'ufd'], 'cflzrk') == False", "def check(check_element):\n\tassert check_element(['ucnzz', 'yyqptfx', 'sch', 'ybljkmyt'], 'kikexsyw') == False", "def check(check_element):\n\tassert check_element(['cym', 'gkt', 'kwaxysw', 'upevwnx'], 'kibfjjkbp') == False", "def check(check_element):\n\tassert check_element(['qypbx', 'jlgdzkf', 'oabirph', 'mwpodi'], 'drbubj') == False", "def check(check_element):\n\tassert check_element(['kbd', 'cvpmamqmu', 'mraa', 'ssmtueyvn'], 'tra') == False", "def check(check_element):\n\tassert check_element(['dbvq', 'fedbgfc', 'ewnojm', 'thql'], 'bkqqgd') == False", "def check(check_element):\n\tassert check_element(['jyu', 'jfcbreyl', 'ihkssi', 'eilxlczs'], 'imumoxw') == False", "def check(check_element):\n\tassert check_element(['gcaujsnkq', 'lpgjftst', 'byhzmyl', 'bzu'], 'aausq') == False", "def check(check_element):\n\tassert check_element(['cxneblxvx', 'zoiuqdcvtngk', 'eonz', 'bdhrt'], 'fynahaqj') == False", "def check(check_element):\n\tassert check_element(['nntv', 'cdizmbvyx', 'aqn', 'bsmyxi'], 'vdtksmum') == False", "def check(check_element):\n\tassert check_element(['ioatt', 'eeeyuw', 'qzjb', 'iffwgp'], 'qvlt') == False", "def check(check_element):\n\tassert check_element(['ufubrzgil', 'trkuttd', 'ubho', 'axaihiun'], 'yktimilj') == False", "def check(check_element):\n\tassert check_element(['fzggrf', 'stxzervqca', 'dfwtakg', 'bubq'], 'saydq') == False", "def check(check_element):\n\tassert check_element(['jpxhqe', 'nibhm', 'ooffq', 'uij'], 'leaduhoow') == False", "def check(check_element):\n\tassert check_element(['qtcab', 'jldjkortnga', 'jpbfp', 'onokdlejs'], 'ygidpmkyz') == False", "def check(check_element):\n\tassert check_element(['ajlmcvqbm', 'csjteybvfpd', 'yckfkfw', 'axvey'], 'sivja') == False", "def check(check_element):\n\tassert check_element(['htouzb', 'eoru', 'vuzcw', 'dbg'], 'yuhyfsl') == False", "def check(check_element):\n\tassert check_element(['ybfnngiy', 'qqaqcmxypnyt', 'hikkidiit', 'uoleamw'], 'eeswyhk') == False", "def check(check_element):\n\tassert check_element(['kektkv', 'ofv', 'qyjjjvw', 'ojhcoc'], 'lkyapr') == False", "def check(check_element):\n\tassert check_element(['ksyjya', 'ufzcf', 'jbpkm', 'sjaj'], 'rpqxyw') == False", "def check(check_element):\n\tassert check_element(['jhogyc', 'tcdrhpz', 'kkjv', 'lamgpxk'], 'qxhp') == False", "def check(check_element):\n\tassert check_element(['nocvt', 'eyubihywmro', 'ipteixxxo', 'gbbdl'], 'sfxt') == False", "def check(check_element):\n\tassert check_element(['rkqm', 'gwrqv', 'rff', 'hizd'], 'pfqxgdm') == False", "def check(check_element):\n\tassert check_element(['rndi', 'bfecc', 'qmtd', 'hoqamvz'], 'ieldvm') == False", "def check(check_element):\n\tassert check_element(['ocdlqnhq', 'ooe', 'viatabsvb', 'cmpkaan'], 'untjyj') == False", "def check(check_element):\n\tassert check_element(['uaegwul', 'hgkep', 'xvu', 'pkmbvlhvz'], 'pmhdzbtik') == False", "def check(check_element):\n\tassert check_element(['qucz', 'ujwiyvpamphu', 'cdjtoycq', 'akjaubuzq'], 'qir') == False", "def check(check_element):\n\tassert check_element(['rpxvklhs', 'lwhvgv', 'gmo', 'mbnczebo'], 'spwxteizw') == False", "def check(check_element):\n\tassert check_element([6, 6, 5, 8], 9) == False", "def check(check_element):\n\tassert check_element([3, 7, 3, 8], 5) == False", "def check(check_element):\n\tassert check_element([2, 4, 2, 3], 2) == False", "def check(check_element):\n\tassert check_element([5, 5, 6, 7], 10) == False", "def check(check_element):\n\tassert check_element([3, 6, 1, 3], 12) == False", "def check(check_element):\n\tassert check_element([2, 1, 6, 8], 4) == False", "def check(check_element):\n\tassert check_element([4, 6, 5, 3], 7) == False", "def check(check_element):\n\tassert check_element([5, 1, 4, 3], 2) == False", "def check(check_element):\n\tassert check_element([6, 1, 4, 8], 4) == False", "def check(check_element):\n\tassert check_element([5, 5, 7, 9], 2) == False", "def check(check_element):\n\tassert check_element([3, 1, 2, 8], 5) == False", "def check(check_element):\n\tassert check_element([2, 1, 3, 5], 12) == False", "def check(check_element):\n\tassert check_element([6, 4, 3, 9], 10) == False", "def check(check_element):\n\tassert check_element([1, 6, 2, 2], 11) == False", "def check(check_element):\n\tassert check_element([3, 7, 7, 9], 3) == False", "def check(check_element):\n\tassert check_element([6, 1, 1, 7], 7) == False", "def check(check_element):\n\tassert check_element([2, 5, 4, 9], 10) == False", "def check(check_element):\n\tassert check_element([5, 6, 7, 3], 9) == False", "def check(check_element):\n\tassert check_element([6, 4, 5, 6], 4) == False", "def check(check_element):\n\tassert check_element([1, 2, 5, 6], 11) == False", "def check(check_element):\n\tassert check_element([5, 7, 5, 5], 5) == False", "def check(check_element):\n\tassert check_element([6, 5, 3, 9], 8) == False", "def check(check_element):\n\tassert check_element([2, 1, 6, 7], 12) == False", "def check(check_element):\n\tassert check_element([2, 3, 1, 9], 2) == False", "def check(check_element):\n\tassert check_element([5, 4, 4, 3], 4) == False", "def check(check_element):\n\tassert check_element([2, 4, 1, 1], 3) == False", "def check(check_element):\n\tassert check_element([3, 4, 2, 2], 10) == False", "def check(check_element):\n\tassert check_element([3, 1, 5, 4], 2) == False", "def check(check_element):\n\tassert check_element([5, 6, 2, 7], 4) == False", "def check(check_element):\n\tassert check_element([1, 2, 7, 3], 12) == False", "def check(check_element):\n\tassert check_element([4, 6, 1, 8], 10) == False", "def check(check_element):\n\tassert check_element([3, 3, 8, 4], 11) == False", "def check(check_element):\n\tassert check_element([2, 1, 3, 4], 9) == False", "def check(check_element):\n\tassert check_element(['twxgyyvy', 'nbotihav', 'eyx', 'pqthuxh'], 'fue') == False", "def check(check_element):\n\tassert check_element(['rbjrzjhvm', 'tphcjlahp', 'klujjx', 'rmrjoet'], 'imtitayfb') == False", "def check(check_element):\n\tassert check_element(['gacsl', 'nmuwr', 'jrylm', 'tljtd'], 'gglbhwrq') == False", "def check(check_element):\n\tassert check_element(['shh', 'bsgupw', 'fnzbuobn', 'xsyxp'], 'gvv') == False", "def check(check_element):\n\tassert check_element(['bybqbq', 'yqfarwzt', 'wlhjg', 'furwg'], 'rndiv') == False", "def check(check_element):\n\tassert check_element(['wnllzt', 'reiuyv', 'vuioj', 'kbbbna'], 'lhlnyhlxs') == False", "def check(check_element):\n\tassert check_element(['wvz', 'ucpfmzep', 'nzt', 'jctttjb'], 'aclnn') == False", "def check(check_element):\n\tassert check_element(['cwwdzh', 'oadwwaf', 'oeljcsin', 'lnrerjf'], 'msld') == False", "def check(check_element):\n\tassert check_element(['tvdd', 'ejfmfb', 'vgpamj', 'qeyujydc'], 'vuiuso') == False", "def check(check_element):\n\tassert check_element(['nrjty', 'qmd', 'lptpgj', 'fir'], 'mtaqgwh') == False", "def check(check_element):\n\tassert check_element(['dzv', 'izc', 'yzj', 'yaoc'], 'vkwbk') == False", "def check(check_element):\n\tassert check_element(['wci', 'qbsxierh', 'lsnom', 'mqmnfxfmo'], 'zbvxeo') == False", "def check(check_element):\n\tassert check_element(['inly', 'huuy', 'izjt', 'pskj'], 'zeei') == False", "def check(check_element):\n\tassert check_element(['wvyiembfl', 'aqawt', 'hbwkgj', 'igrvy'], 'gffxi') == False", "def check(check_element):\n\tassert check_element(['znvxy', 'nck', 'uwqnckvj', 'vhrstfofy'], 'kgbt') == False", "def check(check_element):\n\tassert check_element(['lufyesid', 'wykb', 'uwv', 'buo'], 'amhyjmygp') == False", "def check(check_element):\n\tassert check_element(['corckyd', 'agoivl', 'xkkdhbhec', 'yjottc'], 'bomgv') == False", "def check(check_element):\n\tassert check_element(['wejjjguc', 'srglrq', 'nkuilzmzo', 'lkhzxt'], 'adi') == False", "def check(check_element):\n\tassert check_element(['ghnmsg', 'anrvphr', 'ojyb', 'ujfvkwtej'], 'kbhipuo') == False", "def check(check_element):\n\tassert check_element(['kirp', 'gchvjmakk', 'lwu', 'dzmgu'], 'xrujixxyn') == False", "def check(check_element):\n\tassert check_element(['cca', 'tufalq', 'mtmmvnwvh', 'yvm'], 'whgqcomzr') == False", "def check(check_element):\n\tassert check_element(['mxo', 'vzfymij', 'apftwk', 'tfhndxe'], 'shbhvrw') == False", "def check(check_element):\n\tassert check_element(['iylr', 'qbaggndx', 'kshgf', 'usrisohn'], 'eawk') == False", "def check(check_element):\n\tassert check_element(['rjbvoga', 'xaxs', 'lkhbg', 'edea'], 'yqecdinr') == False", "def check(check_element):\n\tassert check_element(['jyl', 'ckfxl', 'roszyhvr', 'gtvufyn'], 'ugovkk') == False", "def check(check_element):\n\tassert check_element(['kwcle', 'vou', 'vkupqz', 'uycuemmxp'], 'meuex') == False", "def check(check_element):\n\tassert check_element(['qpxubn', 'gscj', 'ltyqkavi', 'tbzq'], 'jast') == False", "def check(check_element):\n\tassert check_element(['fomuzfac', 'vzmhaixs', 'jdohtr', 'mxmbutpvi'], 'phx') == False", "def check(check_element):\n\tassert check_element(['jiifmliv', 'rbcr', 'zhfsgqrp', 'ejitlh'], 'mqiz') == False", "def check(check_element):\n\tassert check_element(['nmbdehbx', 'noanqi', 'byixwf', 'vscuiv'], 'azr') == False", "def check(check_element):\n\tassert check_element(['nwlkov', 'ysg', 'wcxqlqxti', 'fdrtzk'], 'ahtgyqa') == False", "def check(check_element):\n\tassert check_element(['ojavf', 'ovndofiqd', 'ynjrpqijl', 'gbyfvnkmn'], 'ofkeoatq') == False", "def check(check_element):\n\tassert check_element(['hiqzqqyh', 'ueapyxb', 'toqg', 'sxmgw'], 'dumihpsyd') == False"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef check_element(lst: list, element: any) -> bool:\n    \"\"\"\n    Checks if all items in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list of elements to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(x == element for x in lst)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(check_element([], 'blue'))  # Expected: True\n    print(check_element(['blue', 'blue', 'blue'], 'blue'))  # Expected: True\n    print(check_element(['blue', 'green', 'blue'], 'blue'))  # Expected: False\n", "passed": true, "pass": true, "pass_num": 10, "round": 962, "mutate_method": "add_1_sentence_at_end", "parent_index": 114}
