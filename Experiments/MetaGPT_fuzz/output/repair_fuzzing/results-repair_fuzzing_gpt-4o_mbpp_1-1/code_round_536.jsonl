{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 728, "prompt": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n]. Ensure your function handles edge cases such as empty lists or varying list lengths gracefully.", "code": "def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list", "test_imports": [], "test_list": ["assert sum_list([10,20,30],[15,25,35])==[25,45,65]", "assert sum_list([1,2,3],[5,6,7])==[6,8,10]", "assert sum_list([15,20,30],[15,45,75])==[30,65,105]", "assert sum_list([11, 19, 31], [20, 29, 39]) == [31, 48, 70]", "assert sum_list([15, 19, 31], [18, 26, 30]) == [33, 45, 61]", "assert sum_list([11, 23, 29], [15, 20, 40]) == [26, 43, 69]", "assert sum_list([11, 25, 35], [13, 27, 32]) == [24, 52, 67]", "assert sum_list([6, 20, 25], [11, 29, 36]) == [17, 49, 61]", "assert sum_list([10, 18, 26], [11, 27, 30]) == [21, 45, 56]", "assert sum_list([6, 16, 31], [19, 21, 36]) == [25, 37, 67]", "assert sum_list([8, 17, 30], [17, 30, 40]) == [25, 47, 70]", "assert sum_list([12, 22, 26], [17, 27, 32]) == [29, 49, 58]", "assert sum_list([12, 20, 34], [14, 22, 37]) == [26, 42, 71]", "assert sum_list([8, 21, 26], [15, 23, 36]) == [23, 44, 62]", "assert sum_list([5, 19, 27], [13, 22, 39]) == [18, 41, 66]", "assert sum_list([6, 15, 25], [15, 28, 32]) == [21, 43, 57]", "assert sum_list([8, 22, 27], [11, 28, 35]) == [19, 50, 62]", "assert sum_list([5, 25, 33], [13, 30, 38]) == [18, 55, 71]", "assert sum_list([12, 18, 34], [17, 23, 36]) == [29, 41, 70]", "assert sum_list([5, 20, 30], [20, 28, 39]) == [25, 48, 69]", "assert sum_list([12, 21, 30], [15, 22, 36]) == [27, 43, 66]", "assert sum_list([14, 15, 27], [18, 25, 36]) == [32, 40, 63]", "assert sum_list([7, 15, 33], [16, 30, 35]) == [23, 45, 68]", "assert sum_list([7, 22, 33], [12, 27, 30]) == [19, 49, 63]", "assert sum_list([13, 25, 35], [18, 21, 35]) == [31, 46, 70]", "assert sum_list([9, 23, 35], [11, 28, 35]) == [20, 51, 70]", "assert sum_list([14, 24, 27], [11, 26, 37]) == [25, 50, 64]", "assert sum_list([9, 24, 34], [20, 23, 35]) == [29, 47, 69]", "assert sum_list([11, 24, 33], [14, 29, 31]) == [25, 53, 64]", "assert sum_list([13, 24, 28], [10, 25, 34]) == [23, 49, 62]", "assert sum_list([15, 21, 28], [10, 20, 30]) == [25, 41, 58]", "assert sum_list([9, 17, 28], [17, 22, 32]) == [26, 39, 60]", "assert sum_list([7, 25, 28], [13, 29, 31]) == [20, 54, 59]", "assert sum_list([6, 25, 26], [12, 26, 34]) == [18, 51, 60]", "assert sum_list([9, 21, 34], [10, 26, 40]) == [19, 47, 74]", "assert sum_list([13, 18, 25], [12, 26, 39]) == [25, 44, 64]", "assert sum_list([2, 1, 2], [10, 8, 6]) == [12, 9, 8]", "assert sum_list([1, 7, 5], [1, 9, 2]) == [2, 16, 7]", "assert sum_list([1, 2, 6], [4, 11, 2]) == [5, 13, 8]", "assert sum_list([4, 6, 4], [1, 6, 6]) == [5, 12, 10]", "assert sum_list([6, 3, 2], [3, 8, 7]) == [9, 11, 9]", "assert sum_list([5, 3, 2], [10, 4, 7]) == [15, 7, 9]", "assert sum_list([2, 5, 5], [7, 10, 3]) == [9, 15, 8]", "assert sum_list([6, 7, 4], [9, 5, 8]) == [15, 12, 12]", "assert sum_list([4, 3, 1], [8, 11, 7]) == [12, 14, 8]", "assert sum_list([1, 7, 8], [1, 10, 4]) == [2, 17, 12]", "assert sum_list([5, 2, 1], [2, 9, 9]) == [7, 11, 10]", "assert sum_list([1, 5, 2], [2, 4, 9]) == [3, 9, 11]", "assert sum_list([1, 4, 2], [8, 5, 7]) == [9, 9, 9]", "assert sum_list([4, 4, 1], [4, 5, 5]) == [8, 9, 6]", "assert sum_list([6, 2, 4], [5, 10, 12]) == [11, 12, 16]", "assert sum_list([3, 2, 6], [7, 1, 4]) == [10, 3, 10]", "assert sum_list([2, 7, 3], [9, 5, 2]) == [11, 12, 5]", "assert sum_list([2, 3, 4], [9, 6, 12]) == [11, 9, 16]", "assert sum_list([2, 6, 6], [1, 3, 10]) == [3, 9, 16]", "assert sum_list([4, 7, 7], [6, 7, 8]) == [10, 14, 15]", "assert sum_list([1, 3, 7], [10, 8, 6]) == [11, 11, 13]", "assert sum_list([1, 3, 6], [3, 1, 6]) == [4, 4, 12]", "assert sum_list([2, 7, 1], [9, 4, 4]) == [11, 11, 5]", "assert sum_list([4, 2, 1], [8, 2, 5]) == [12, 4, 6]", "assert sum_list([6, 2, 5], [3, 4, 10]) == [9, 6, 15]", "assert sum_list([5, 3, 2], [5, 1, 4]) == [10, 4, 6]", "assert sum_list([4, 5, 5], [9, 10, 8]) == [13, 15, 13]", "assert sum_list([3, 4, 3], [3, 5, 11]) == [6, 9, 14]", "assert sum_list([1, 5, 2], [5, 1, 11]) == [6, 6, 13]", "assert sum_list([2, 3, 8], [3, 7, 3]) == [5, 10, 11]", "assert sum_list([3, 5, 7], [5, 8, 8]) == [8, 13, 15]", "assert sum_list([4, 3, 6], [8, 11, 11]) == [12, 14, 17]", "assert sum_list([3, 7, 8], [6, 9, 2]) == [9, 16, 10]", "assert sum_list([14, 18, 32], [14, 49, 80]) == [28, 67, 112]", "assert sum_list([15, 21, 33], [13, 47, 78]) == [28, 68, 111]", "assert sum_list([14, 15, 27], [17, 49, 79]) == [31, 64, 106]", "assert sum_list([10, 20, 33], [19, 41, 75]) == [29, 61, 108]", "assert sum_list([19, 21, 32], [11, 48, 80]) == [30, 69, 112]", "assert sum_list([18, 18, 28], [10, 50, 76]) == [28, 68, 104]", "assert sum_list([19, 17, 25], [19, 44, 79]) == [38, 61, 104]", "assert sum_list([16, 21, 26], [15, 44, 72]) == [31, 65, 98]", "assert sum_list([11, 19, 32], [10, 44, 77]) == [21, 63, 109]", "assert sum_list([20, 21, 34], [14, 50, 74]) == [34, 71, 108]", "assert sum_list([18, 23, 34], [10, 41, 72]) == [28, 64, 106]", "assert sum_list([17, 23, 28], [20, 49, 71]) == [37, 72, 99]", "assert sum_list([16, 17, 33], [12, 41, 74]) == [28, 58, 107]", "assert sum_list([13, 16, 29], [19, 40, 70]) == [32, 56, 99]", "assert sum_list([19, 18, 29], [12, 46, 79]) == [31, 64, 108]", "assert sum_list([20, 16, 33], [13, 47, 80]) == [33, 63, 113]", "assert sum_list([16, 24, 34], [17, 41, 76]) == [33, 65, 110]", "assert sum_list([19, 24, 34], [11, 50, 80]) == [30, 74, 114]", "assert sum_list([14, 24, 28], [18, 43, 76]) == [32, 67, 104]", "assert sum_list([11, 15, 29], [19, 46, 80]) == [30, 61, 109]", "assert sum_list([14, 18, 31], [11, 41, 78]) == [25, 59, 109]", "assert sum_list([16, 18, 32], [13, 46, 72]) == [29, 64, 104]", "assert sum_list([13, 23, 30], [19, 41, 78]) == [32, 64, 108]", "assert sum_list([16, 18, 33], [17, 44, 80]) == [33, 62, 113]", "assert sum_list([13, 22, 33], [12, 48, 77]) == [25, 70, 110]", "assert sum_list([13, 18, 29], [14, 50, 76]) == [27, 68, 105]", "assert sum_list([15, 18, 29], [12, 43, 80]) == [27, 61, 109]", "assert sum_list([12, 16, 35], [11, 46, 74]) == [23, 62, 109]", "assert sum_list([14, 16, 32], [18, 40, 75]) == [32, 56, 107]", "assert sum_list([14, 21, 29], [10, 41, 80]) == [24, 62, 109]", "assert sum_list([13, 18, 25], [16, 45, 75]) == [29, 63, 100]", "assert sum_list([18, 25, 35], [19, 47, 79]) == [37, 72, 114]", "assert sum_list([18, 25, 29], [16, 48, 73]) == [34, 73, 102]"], "entry_point": "sum_list", "repair_prompt": ["Write a function sum_list takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n]. Ensure your function handles edge cases such as empty lists or varying list lengths gracefully.\nsum_list([10,20,30],[15,25,35])==[25,45,65]\n", "Write a function sum_list takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n]. Ensure your function handles edge cases such as empty lists properly. It should also manage varying list lengths gracefully.\nsum_list([10,20,30],[15,25,35])==[25,45,65]\n", "Write a function sum_list takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n]. Ensure your function handles edge cases such as empty lists or varying list lengths gracefully.\nsum_list([10,20,30],[15,25,35])==[25,45,65]\n"], "completions": ["from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Sums two lists element-wise, handling edge cases such as empty lists and varying lengths.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise sums of the input lists.\n\n    Raises:\n    TypeError: If inputs are not lists or contain non-numeric elements.\n    \"\"\"\n    # Validate inputs\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Both inputs must be lists.\")\n    \n    # Check for non-numeric elements in the lists\n    if any(not isinstance(x, (int, float)) for x in list1) or any(not isinstance(x, (int, float)) for x in list2):\n        raise TypeError(\"Lists must contain only numeric elements.\")\n    \n    # Determine the length of the longer list\n    max_length = max(len(list1), len(list2))\n    \n    # Pad the shorter list with zeros\n    list1.extend([0] * (max_length - len(list1)))\n    list2.extend([0] * (max_length - len(list2)))\n    \n    # Initialize the result list\n    result = []\n    \n    # Perform element-wise sum\n    for i in range(max_length):\n        result.append(list1[i] + list2[i])\n    \n    return result\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Sums corresponding elements of two lists up to the shortest list length.\n\n    Parameters:\n    list1 (list): First list of numbers.\n    list2 (list): Second list of numbers.\n\n    Returns:\n    list: A list containing the sum of corresponding elements.\n    \"\"\"\n    # Determine the length of the shorter list\n    min_length = min(len(list1), len(list2))\n    \n    # Use list comprehension to sum corresponding elements up to the shortest list length\n    result = [list1[i] + list2[i] for i in range(min_length)]\n    \n    return result\n\n# Example usage:\n# result = sum_list([10, 20, 30], [15, 25, 35])\n# print(result)  # Output: [25, 45, 65]\n", "from typing import List\n## main.py\n\nimport numpy as np\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Takes two lists of numbers and returns a list where each element is the sum of elements at the same position in the input lists.\n    Handles varying lengths by padding the shorter list with zeros.\n    Returns informative error messages for invalid inputs.\n\n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n\n    Returns:\n        list: A list containing the sum of corresponding elements from the input lists.\n    \"\"\"\n    # Validate inputs\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise ValueError(\"Both inputs must be lists.\")\n    \n    # Handle empty lists\n    if not list1 and not list2:\n        return []\n    elif not list1:\n        return list2\n    elif not list2:\n        return list1\n    \n    # Ensure both lists are of the same length\n    max_length = max(len(list1), len(list2))\n    if len(list1) < max_length:\n        list1.extend([0] * (max_length - len(list1)))\n    if len(list2) < max_length:\n        list2.extend([0] * (max_length - len(list2)))\n    \n    # Use NumPy for element-wise addition\n    return list(np.add(list1, list2))\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Sums two lists element-wise, treating missing elements as zero.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise sums.\n\n    Raises:\n    TypeError: If either input is not a list or contains non-numeric elements.\n    \"\"\"\n    # Validate inputs\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Both inputs must be lists.\")\n    \n    for item in list1 + list2:\n        if not isinstance(item, (int, float)):\n            raise TypeError(\"All elements in the lists must be numeric.\")\n\n    # Initialize the result list\n    result = []\n    \n    # Determine the maximum length of the two input lists\n    max_length = max(len(list1), len(list2))\n    \n    # Iterate over the range of the maximum length\n    for i in range(max_length):\n        # Get the element from list1 if it exists, otherwise use 0\n        a = list1[i] if i < len(list1) else 0\n        # Get the element from list2 if it exists, otherwise use 0\n        b = list2[i] if i < len(list2) else 0\n        # Append the sum of the elements to the result list\n        result.append(a + b)\n    \n    # Return the result list\n    return result\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Takes two lists of numbers and returns a new list with element-wise sums.\n    If lists are of different lengths, remaining elements of the longer list are appended.\n\n    Parameters:\n    list1 (list): First list of numbers.\n    list2 (list): Second list of numbers.\n\n    Returns:\n    list: A list containing the element-wise sum of the input lists.\n    \"\"\"\n    # Use zip to iterate over pairs of elements from both lists\n    summed_elements = [a + b for a, b in zip(list1, list2)]\n    \n    # Determine which list is longer and append the remaining elements\n    if len(list1) > len(list2):\n        summed_elements.extend(list1[len(list2):])\n    else:\n        summed_elements.extend(list2[len(list1):])\n    \n    return summed_elements\n\n# Example usage:\n# result = sum_list([10, 20, 30], [15, 25, 35])\n# print(result)  # Output: [25, 45, 65]\n", "from typing import List\n## main.py\nfrom itertools import zip_longest\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Takes two lists of numbers and returns a new list with the sum of corresponding elements.\n    If lists are of different lengths, the remaining elements of the longer list are appended.\n\n    Parameters:\n    list1 (list): First list of numbers.\n    list2 (list): Second list of numbers.\n\n    Returns:\n    list: A list containing the sum of corresponding elements from list1 and list2.\n    \"\"\"\n    # Use zip_longest to pair elements from both lists, filling missing values with 0\n    summed_list = [a + b for a, b in zip_longest(list1, list2, fillvalue=0)]\n    return summed_list\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(sum_list([10, 20, 30], [15, 25, 35]))  # Expected output: [25, 45, 65]\n    print(sum_list([], []))  # Expected output: []\n    print(sum_list([1, 2, 3], []))  # Expected output: [1, 2, 3]\n    print(sum_list([], [4, 5, 6]))  # Expected output: [4, 5, 6]\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Sums two lists element-wise up to the shortest list length.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise sums.\n\n    Raises:\n    ValueError: If either input is not a list or contains non-numeric elements.\n    \"\"\"\n    # Validate that both inputs are lists\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise ValueError(\"Both inputs must be lists.\")\n\n    # Validate that all elements in both lists are numeric\n    if any(not isinstance(x, (int, float)) for x in list1 + list2):\n        raise ValueError(\"All elements must be numeric.\")\n\n    # Determine the length of the shorter list\n    min_length = min(len(list1), len(list2))\n\n    # Sum corresponding elements from both lists up to the shortest list length\n    return [list1[i] + list2[i] for i in range(min_length)]\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Sums two lists element-wise, padding the shorter list with zeros if necessary.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A list containing the element-wise sums of the input lists.\n\n    Raises:\n    TypeError: If either input is not a list.\n    \"\"\"\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Both inputs must be lists.\")\n\n    max_length = max(len(list1), len(list2))\n    list1.extend([0] * (max_length - len(list1)))\n    list2.extend([0] * (max_length - len(list2)))\n\n    return [a + b for a, b in zip(list1, list2)]\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Sums two lists element-wise. \n    If lists are of different lengths, the shorter list is padded with zeros.\n    Returns a new list with summed elements.\n    Raises ValueError if inputs are not lists or contain non-numeric elements.\n\n    Args:\n        list1 (list): List of numbers.\n        list2 (list): List of numbers.\n\n    Returns:\n        list: List of numbers, where each element is the sum of corresponding elements from list1 and list2.\n\n    Raises:\n        ValueError: If inputs are not lists or contain non-numeric elements.\n    \"\"\"\n    # Validate inputs\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise ValueError(\"Both inputs must be lists.\")\n    \n    if not all(isinstance(x, (int, float)) for x in list1 + list2):\n        raise ValueError(\"All elements in the lists must be numbers.\")\n\n    # Determine the maximum length of the two lists\n    max_length = max(len(list1), len(list2))\n\n    # Pad the shorter list with zeros\n    padded_list1 = list1 + [0] * (max_length - len(list1))\n    padded_list2 = list2 + [0] * (max_length - len(list2))\n\n    # Sum the lists element-wise\n    result = [a + b for a, b in zip(padded_list1, padded_list2)]\n\n    return result\n", "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Takes two lists of numbers and returns a list with the sum of corresponding elements.\n    Handles edge cases such as empty lists and varying list lengths.\n    \n    Parameters:\n    list1 (list): First list of numbers.\n    list2 (list): Second list of numbers.\n    \n    Returns:\n    list: A list containing the sum of corresponding elements.\n    \n    Raises:\n    ValueError: If either of the inputs is not a list.\n    \"\"\"\n    # Validate that both inputs are lists\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise ValueError(\"Both inputs must be lists.\")\n    \n    # Determine the length of the shorter list\n    min_length = min(len(list1), len(list2))\n    \n    # Sum elements at each index from both lists\n    return [list1[i] + list2[i] for i in range(min_length)]\n\n# Example usage:\n# result = sum_list([1, 2, 3], [4, 5, 6])\n# print(result)  # Output: [5, 7, 9]\n"], "plans": ["requirement analysis:\nThe function should efficiently sum elements of two lists, handling edge cases like empty lists and varying lengths. It should provide clear error messages for invalid inputs.\nrequirement pool:\n- Handle empty lists gracefully\n- Sum lists of varying lengths\n- Optimize for large lists\n- Provide clear error messages\n- Ensure compatibility with different data types\nWe will implement a function that sums two lists element-wise. The function will handle edge cases such as empty lists and lists of varying lengths by padding the shorter list with zeros. It will also include error handling to provide informative messages for invalid inputs, such as non-list inputs or lists containing non-numeric elements. We will use Python's built-in capabilities to ensure efficient performance, even for large lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'element-wise sum'\n    Explanation: This means adding corresponding elements from two lists to produce a new list where each element is the sum of the elements at the same position in the input lists.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n    1. Check if both inputs are lists. If not, raise an error.\n    2. Determine the length of the longer list.\n    3. Pad the shorter list with zeros to match the length of the longer list.\n    4. Initialize an empty list to store the result.\n    5. Iterate over the range of the longer list's length.\n    6. For each index, add the elements from both lists and append the result to the result list.\n    7. Return the result list.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = [1, 2, 3]\n    Explanation: The second list is empty, so it is padded with zeros, resulting in [1+0, 2+0, 3+0] = [1, 2, 3].\n    \n    sum_list([], [4, 5, 6]) = [4, 5, 6]\n    Explanation: The first list is empty, so it is padded with zeros, resulting in [0+4, 0+5, 0+6] = [4, 5, 6].\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def sum_list(list1, list2):\n            if not isinstance(list1, list) or not isinstance(list2, list):\n                raise ValueError(\"Both inputs must be lists.\")\n            \n            max_length = max(len(list1), len(list2))\n            list1.extend([0] * (max_length - len(list1)))\n            list2.extend([0] * (max_length - len(list2)))\n            \n            result = []\n            for i in range(max_length):\n                result.append(list1[i] + list2[i])\n            \n            return result\n", "requirement analysis:\nThe function should efficiently sum corresponding elements of two lists, handling cases where lists are of different lengths by summing up to the shortest list. It should also handle empty lists gracefully, returning an empty list if both inputs are empty.\nrequirement pool:\n- The function must handle empty lists without errors.\n- The function must handle lists of different lengths by summing up to the shortest list.\n- The function should be optimized for performance with large lists.\n- The function should have clear and concise documentation.\n- The function should be easy to integrate into existing projects.\nWe will implement a function using Python's built-in capabilities to handle list operations. The function will use list comprehension to sum corresponding elements of two lists, handling cases where lists are of different lengths by summing up to the shortest list. This approach ensures simplicity and efficiency without requiring additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum corresponding elements'\n    Explanation: The requirement is to add elements from two lists at the same index and return a new list with these sums.\n\n# [phrase showing quantity relationship]\n    'two lists': Indicates that there are two input lists to be processed.\n    'corresponding elements': Refers to elements at the same index in both lists.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if both input lists are empty. If so, return an empty list.\n    2. Determine the length of the shorter list to avoid index errors.\n    3. Use list comprehension to iterate over the range of the shorter list's length.\n    4. For each index, sum the elements from both lists and store the result in a new list.\n    5. Return the new list containing the sums.\n\n# [edge case]\n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = []\n    Explanation: The second list is empty, so no corresponding elements can be summed, resulting in an empty list.\n    \n    sum_list([], [4, 5, 6]) = []\n    Explanation: The first list is empty, so no corresponding elements can be summed, resulting in an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of summing up to the shortest list length inherently handles cases where one or both lists are empty.\n", "requirement analysis:\nThe function should efficiently sum elements of two lists, handling edge cases such as empty lists and varying lengths. It should provide clear error messages for invalid inputs and maintain performance with large lists.\nrequirement pool:\n- Handle empty lists gracefully\n- Sum lists of varying lengths\n- Optimize performance for large lists\n- Provide clear error messages\n- Ensure compatibility with different data types\nWe will use the NumPy library to efficiently handle list operations, especially for large lists. NumPy provides robust handling of array operations and can handle varying list lengths by automatically broadcasting operations. We will ensure that the function handles empty lists gracefully and provides clear error messages for invalid inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of lists'\n    Explanation: The requirement is to sum corresponding elements from two lists and return a new list containing these sums.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n    1. Check if both lists are empty. If so, return an empty list.\n    2. If the lists are of different lengths, handle the discrepancy by either truncating the longer list or padding the shorter one with zeros.\n    3. Use NumPy to perform element-wise addition of the two lists.\n    4. Return the resulting list.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = [1, 2, 3]\n    Explanation: The second list is empty, so it is treated as [0, 0, 0], resulting in the same list as the first one.\n    \n    sum_list([], [4, 5, 6]) = [4, 5, 6]\n    Explanation: The first list is empty, so it is treated as [0, 0, 0], resulting in the same list as the second one.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    import numpy as np\n\n    def sum_list(list1, list2):\n        # Handle empty lists\n        if not list1 and not list2:\n            return []\n        elif not list1:\n            return list2\n        elif not list2:\n            return list1\n        \n        # Ensure both lists are of the same length\n        max_length = max(len(list1), len(list2))\n        if len(list1) < max_length:\n            list1.extend([0] * (max_length - len(list1)))\n        if len(list2) < max_length:\n            list2.extend([0] * (max_length - len(list2)))\n        \n        # Use NumPy for element-wise addition\n        return list(np.add(list1, list2))\n    ```\n", "requirement analysis:\nThe function should efficiently sum elements of two lists, handling edge cases such as empty lists and varying lengths. It should provide clear error messages for invalid inputs and optimize performance for large lists.\nrequirement pool:\n- Handle empty lists without errors\n- Manage lists of different lengths gracefully\n- Optimize performance for large lists\n- Provide clear error messages for invalid inputs\n- Ensure compatibility with various data types\nWe will implement a function named `sum_list` that takes two lists as input and returns a new list where each element is the sum of the corresponding elements from the input lists. If the lists are of different lengths, the function will treat missing elements as zero. We will use Python's built-in capabilities to handle list operations efficiently. The function will also include error handling to provide informative messages for invalid inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of corresponding elements'\n    Explanation: The requirement is to add elements from two lists at the same index positions and return a new list with these sums.\n\n# [phrase showing quantity relationship]\n    'varying list lengths': The requirement specifies that the lists may not be of the same length, and missing elements should be treated as zero.\n    Explanation: This means if one list is shorter, the missing elements are considered as zero during addition.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Initialize an empty list to store the result.\n    - Determine the maximum length of the two input lists.\n    - Iterate over the range of the maximum length.\n    - For each index, add the elements from both lists if they exist; otherwise, treat missing elements as zero.\n    - Append the sum to the result list.\n    - Return the result list.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2], []) = [1, 2]\n    Explanation: The second list is empty, so its elements are treated as zero. The result is [1+0, 2+0] = [1, 2].\n    \n    sum_list([], [3, 4]) = [3, 4]\n    Explanation: The first list is empty, so its elements are treated as zero. The result is [0+3, 0+4] = [3, 4].\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def sum_list(list1, list2):\n            result = []\n            max_length = max(len(list1), len(list2))\n            for i in range(max_length):\n                a = list1[i] if i < len(list1) else 0\n                b = list2[i] if i < len(list2) else 0\n                result.append(a + b)\n            return result\n", "requirement analysis:\nThe function should be able to handle two lists of potentially different lengths, summing corresponding elements where possible and handling any remaining elements appropriately. It should also handle cases where one or both lists are empty, returning an empty list or the non-empty list as appropriate.\nrequirement pool:\n- Implement the main function to sum two lists element-wise.\n- Ensure the function handles empty lists correctly.\n- Optimize the function for performance with large lists.\n- Provide comprehensive documentation and examples.\n- Include error handling for non-list inputs.\nWe will use native Python functions such as zip and list comprehension to efficiently sum two lists element-wise. The function will handle lists of different lengths by summing available elements and appending remaining elements from the longer list. This approach ensures simplicity and performance without the need for additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'element-wise sum'\n    Explanation: The requirement is to sum corresponding elements from two lists, which means adding the first element of the first list to the first element of the second list, and so on.\n\n# [phrase showing quantity relationship]\n    'varying list lengths': The requirement mentions handling lists of different lengths, which implies that if one list is longer, the remaining elements should be appended to the result after summing available elements.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Use the `zip` function to iterate over pairs of elements from both lists.\n    - Use list comprehension to sum each pair of elements.\n    - Determine which list is longer and append the remaining elements from the longer list to the result.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2], []) = [1, 2]\n    Explanation: The second list is empty, so the result is simply the first list.\n    \n    sum_list([], [3, 4]) = [3, 4]\n    Explanation: The first list is empty, so the result is simply the second list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of appending remaining elements from the longer list already handles these scenarios.\n", "requirement analysis:\nThe function should be able to handle two lists of potentially different lengths, summing corresponding elements where possible and handling any remaining elements appropriately. It should also handle cases where one or both lists are empty.\nrequirement pool:\n- Handle empty lists without errors.\n- Gracefully manage lists of different lengths.\n- Optimize performance for large lists.\n- Provide clear documentation and examples.\n- Include unit tests for various edge cases.\nWe will use native Python functions such as zip and map to efficiently handle the summation of elements from two lists. These functions are well-suited for handling lists of different lengths and can manage empty lists gracefully. We will also ensure that the function is optimized for performance with large lists by leveraging these built-in functions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of lists'\n    Explanation: The requirement is to sum corresponding elements from two lists and return a new list containing these sums.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship, but the concept of summing elements implies a one-to-one relationship between elements of the two lists.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Use the `zip` function to pair elements from both lists.\n    2. Use a list comprehension or `map` function to sum each pair of elements.\n    3. Handle cases where lists are of different lengths by using `zip_longest` from `itertools` with a fill value of 0.\n    4. Return the resulting list of sums.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = [1, 2, 3]\n    Explanation: The second list is empty, so the result is the first list itself.\n    \n    sum_list([], [4, 5, 6]) = [4, 5, 6]\n    Explanation: The first list is empty, so the result is the second list itself.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        from itertools import zip_longest\n        \n        def sum_list(list1, list2):\n            return [a + b for a, b in zip_longest(list1, list2, fillvalue=0)]\n", "requirement analysis:\nThe function should efficiently sum elements of two lists, handling cases where lists are of different lengths by summing up to the shortest list length and providing informative errors for invalid inputs.\nrequirement pool:\n- Handle lists of varying lengths gracefully\n- Provide clear error messages for invalid inputs\n- Optimize performance for large lists\n- Ensure robust handling of edge cases\n- Maintain simplicity in function design\nWe will implement a function that sums two lists element-wise. The function will handle lists of different lengths by summing up to the shortest list length. It will also provide clear error messages for invalid inputs such as non-list inputs or lists containing non-numeric elements. We will use Python's built-in capabilities to ensure simplicity and efficiency, especially for large lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'element-wise sum'\n    Explanation: This means adding corresponding elements from two lists to produce a new list of sums.\n\n# [phrase showing quantity relationship]\n    'two lists': Indicates that the function takes exactly two lists as input.\n    'element-wise': Implies that each element from the first list is added to the corresponding element from the second list.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if both inputs are lists and contain numeric elements.\n    2. Determine the length of the shorter list to avoid index errors.\n    3. Iterate through the range of the shorter list's length.\n    4. Sum corresponding elements from both lists and store them in a new list.\n    5. Return the new list of sums.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = []\n    Explanation: The second list is empty, so no element-wise addition can be performed, resulting in an empty list.\n    \n    sum_list([1, 2], [3, 4, 5]) = [4, 6]\n    Explanation: The function sums up to the length of the shorter list, so only the first two elements are summed.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not isinstance(list1, list) or not isinstance(list2, list):\n            raise ValueError(\"Both inputs must be lists.\")\n        if any(not isinstance(x, (int, float)) for x in list1 + list2):\n            raise ValueError(\"All elements must be numeric.\")\n        min_length = min(len(list1), len(list2))\n        return [list1[i] + list2[i] for i in range(min_length)]\n", "requirement analysis:\nThe function should efficiently sum elements of two lists, handling cases where lists are empty or of different lengths. It should return a list of summed elements, and provide error messages for invalid inputs.\nrequirement pool:\n- Handle empty lists gracefully\n- Sum elements of lists with different lengths\n- Provide error messages for non-list inputs\n- Optimize performance for large lists\n- Ensure compatibility with Python 3.x\nWe will implement a function that sums two lists element-wise. If the lists are of different lengths, the function will pad the shorter list with zeros to match the length of the longer list. This approach ensures that all elements are summed without truncation. We will use Python's built-in capabilities to handle list operations and error handling, ensuring compatibility with Python 3.x. The function will also include checks to ensure inputs are lists and provide clear error messages if they are not.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'element-wise sum'\n    Explanation: The requirement is to sum corresponding elements from two lists, meaning each element from the first list is added to the corresponding element from the second list.\n\n# [phrase showing quantity relationship]\n    'two lists': indicates that there are two separate lists involved in the operation.\n    'element-wise': implies that each element from one list is paired with an element from the other list for addition.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if both inputs are lists; if not, raise an error.\n    2. Determine the length of both lists.\n    3. Pad the shorter list with zeros to match the length of the longer list.\n    4. Iterate through both lists simultaneously, adding corresponding elements.\n    5. Return the resulting list.\n\n# [edge case]\n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2], []) = [1, 2]\n    Explanation: The second list is empty, so it is padded with zeros, resulting in [1+0, 2+0] = [1, 2].\n    \n    sum_list([], [3, 4]) = [3, 4]\n    Explanation: The first list is empty, so it is padded with zeros, resulting in [0+3, 0+4] = [3, 4].\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def sum_list(list1, list2):\n            if not isinstance(list1, list) or not isinstance(list2, list):\n                raise TypeError(\"Both inputs must be lists.\")\n            \n            max_length = max(len(list1), len(list2))\n            list1.extend([0] * (max_length - len(list1)))\n            list2.extend([0] * (max_length - len(list2)))\n            \n            return [a + b for a, b in zip(list1, list2)]\n", "requirement analysis:\nThe function should efficiently sum elements of two lists, handling edge cases such as empty lists or lists of different lengths. It should provide clear error messages for invalid inputs and optimize performance for large lists.\nrequirement pool:\n- Implement the main function to sum elements of two lists\n- Handle edge cases such as empty lists and varying lengths\n- Optimize performance for large lists\n- Provide clear error messages for invalid inputs\n- Ensure compatibility with other list operations\nWe will implement a function that sums two lists element-wise. To handle lists of different lengths, we will pad the shorter list with zeros to match the length of the longer list. We will use native Python features such as list comprehension and zip for simplicity and efficiency. The function will include error handling to provide informative messages for invalid inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'element-wise sum'\n    Explanation: The requirement specifies that each element from the first list should be added to the corresponding element from the second list, resulting in a new list of summed elements.\n\n# [phrase showing quantity relationship]\n    'two lists': indicates that there are two separate lists involved in the operation.\n    'element-wise': implies that each element from one list is paired with an element from the other list for addition.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if both lists are valid (i.e., they are lists and contain numeric elements).\n    2. Determine the length of both lists.\n    3. Pad the shorter list with zeros to match the length of the longer list.\n    4. Use list comprehension and zip to iterate over both lists simultaneously and sum corresponding elements.\n    5. Return the resulting list.\n\n# [edge case]\n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2], []) = [1, 2]\n    Explanation: The second list is empty, so it is padded with zeros, resulting in [1+0, 2+0] = [1, 2].\n    \n    sum_list([], [3, 4]) = [3, 4]\n    Explanation: The first list is empty, so it is padded with zeros, resulting in [0+3, 0+4] = [3, 4].\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def sum_list(list1, list2):\n            if not isinstance(list1, list) or not isinstance(list2, list):\n                raise ValueError(\"Both inputs must be lists.\")\n            max_length = max(len(list1), len(list2))\n            padded_list1 = list1 + [0] * (max_length - len(list1))\n            padded_list2 = list2 + [0] * (max_length - len(list2))\n            return [a + b for a, b in zip(padded_list1, padded_list2)]\n", "requirement analysis:\nThe function should efficiently sum elements of two lists, handling edge cases like empty lists and varying lengths. It should provide clear error messages for invalid inputs and optimize performance for large lists.\nrequirement pool:\n- Handle empty lists gracefully\n- Sum lists of varying lengths\n- Optimize performance for large lists\n- Provide clear error messages for invalid inputs\n- Ensure compatibility with other Python data structures\nWe will use Python's built-in capabilities to handle list operations. The function will iterate over the lists and sum corresponding elements. If the lists are of different lengths, the function will sum elements up to the length of the shorter list and ignore the rest. We will also include error handling to ensure inputs are valid lists and provide informative error messages.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum corresponding elements'\n    Explanation: The requirement is to sum elements from two lists at the same index positions.\n\n# [phrase showing quantity relationship]\n    'two lists': indicates that there are two lists involved in the operation.\n    'corresponding elements': means elements at the same index in both lists should be summed.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Validate that both inputs are lists.\n    - Determine the length of the shorter list.\n    - Iterate over the range of the shorter list's length.\n    - Sum elements at each index from both lists.\n    - Return the resulting list of sums.\n\n# [edge case] \n    sum_list([], []) = []\n    Explanation: Both lists are empty, so the result is an empty list.\n    \n    sum_list([1, 2, 3], []) = []\n    Explanation: The second list is empty, so no corresponding elements exist to sum, resulting in an empty list.\n    \n    sum_list([1, 2], [3, 4, 5]) = [4, 6]\n    Explanation: The first list is shorter, so only the first two elements are summed with the corresponding elements from the second list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not isinstance(lst1, list) or not isinstance(lst2, list):\n            raise ValueError(\"Both inputs must be lists.\")\n        min_length = min(len(lst1), len(lst2))\n        return [lst1[i] + lst2[i] for i in range(min_length)]\n"], "test": ["def check(sum_list):\n\tassert sum_list([10,20,30],[15,25,35])==[25,45,65]", "def check(sum_list):\n\tassert sum_list([1,2,3],[5,6,7])==[6,8,10]", "def check(sum_list):\n\tassert sum_list([15,20,30],[15,45,75])==[30,65,105]", "def check(sum_list):\n\tassert sum_list([11, 19, 31], [20, 29, 39]) == [31, 48, 70]", "def check(sum_list):\n\tassert sum_list([15, 19, 31], [18, 26, 30]) == [33, 45, 61]", "def check(sum_list):\n\tassert sum_list([11, 23, 29], [15, 20, 40]) == [26, 43, 69]", "def check(sum_list):\n\tassert sum_list([11, 25, 35], [13, 27, 32]) == [24, 52, 67]", "def check(sum_list):\n\tassert sum_list([6, 20, 25], [11, 29, 36]) == [17, 49, 61]", "def check(sum_list):\n\tassert sum_list([10, 18, 26], [11, 27, 30]) == [21, 45, 56]", "def check(sum_list):\n\tassert sum_list([6, 16, 31], [19, 21, 36]) == [25, 37, 67]", "def check(sum_list):\n\tassert sum_list([8, 17, 30], [17, 30, 40]) == [25, 47, 70]", "def check(sum_list):\n\tassert sum_list([12, 22, 26], [17, 27, 32]) == [29, 49, 58]", "def check(sum_list):\n\tassert sum_list([12, 20, 34], [14, 22, 37]) == [26, 42, 71]", "def check(sum_list):\n\tassert sum_list([8, 21, 26], [15, 23, 36]) == [23, 44, 62]", "def check(sum_list):\n\tassert sum_list([5, 19, 27], [13, 22, 39]) == [18, 41, 66]", "def check(sum_list):\n\tassert sum_list([6, 15, 25], [15, 28, 32]) == [21, 43, 57]", "def check(sum_list):\n\tassert sum_list([8, 22, 27], [11, 28, 35]) == [19, 50, 62]", "def check(sum_list):\n\tassert sum_list([5, 25, 33], [13, 30, 38]) == [18, 55, 71]", "def check(sum_list):\n\tassert sum_list([12, 18, 34], [17, 23, 36]) == [29, 41, 70]", "def check(sum_list):\n\tassert sum_list([5, 20, 30], [20, 28, 39]) == [25, 48, 69]", "def check(sum_list):\n\tassert sum_list([12, 21, 30], [15, 22, 36]) == [27, 43, 66]", "def check(sum_list):\n\tassert sum_list([14, 15, 27], [18, 25, 36]) == [32, 40, 63]", "def check(sum_list):\n\tassert sum_list([7, 15, 33], [16, 30, 35]) == [23, 45, 68]", "def check(sum_list):\n\tassert sum_list([7, 22, 33], [12, 27, 30]) == [19, 49, 63]", "def check(sum_list):\n\tassert sum_list([13, 25, 35], [18, 21, 35]) == [31, 46, 70]", "def check(sum_list):\n\tassert sum_list([9, 23, 35], [11, 28, 35]) == [20, 51, 70]", "def check(sum_list):\n\tassert sum_list([14, 24, 27], [11, 26, 37]) == [25, 50, 64]", "def check(sum_list):\n\tassert sum_list([9, 24, 34], [20, 23, 35]) == [29, 47, 69]", "def check(sum_list):\n\tassert sum_list([11, 24, 33], [14, 29, 31]) == [25, 53, 64]", "def check(sum_list):\n\tassert sum_list([13, 24, 28], [10, 25, 34]) == [23, 49, 62]", "def check(sum_list):\n\tassert sum_list([15, 21, 28], [10, 20, 30]) == [25, 41, 58]", "def check(sum_list):\n\tassert sum_list([9, 17, 28], [17, 22, 32]) == [26, 39, 60]", "def check(sum_list):\n\tassert sum_list([7, 25, 28], [13, 29, 31]) == [20, 54, 59]", "def check(sum_list):\n\tassert sum_list([6, 25, 26], [12, 26, 34]) == [18, 51, 60]", "def check(sum_list):\n\tassert sum_list([9, 21, 34], [10, 26, 40]) == [19, 47, 74]", "def check(sum_list):\n\tassert sum_list([13, 18, 25], [12, 26, 39]) == [25, 44, 64]", "def check(sum_list):\n\tassert sum_list([2, 1, 2], [10, 8, 6]) == [12, 9, 8]", "def check(sum_list):\n\tassert sum_list([1, 7, 5], [1, 9, 2]) == [2, 16, 7]", "def check(sum_list):\n\tassert sum_list([1, 2, 6], [4, 11, 2]) == [5, 13, 8]", "def check(sum_list):\n\tassert sum_list([4, 6, 4], [1, 6, 6]) == [5, 12, 10]", "def check(sum_list):\n\tassert sum_list([6, 3, 2], [3, 8, 7]) == [9, 11, 9]", "def check(sum_list):\n\tassert sum_list([5, 3, 2], [10, 4, 7]) == [15, 7, 9]", "def check(sum_list):\n\tassert sum_list([2, 5, 5], [7, 10, 3]) == [9, 15, 8]", "def check(sum_list):\n\tassert sum_list([6, 7, 4], [9, 5, 8]) == [15, 12, 12]", "def check(sum_list):\n\tassert sum_list([4, 3, 1], [8, 11, 7]) == [12, 14, 8]", "def check(sum_list):\n\tassert sum_list([1, 7, 8], [1, 10, 4]) == [2, 17, 12]", "def check(sum_list):\n\tassert sum_list([5, 2, 1], [2, 9, 9]) == [7, 11, 10]", "def check(sum_list):\n\tassert sum_list([1, 5, 2], [2, 4, 9]) == [3, 9, 11]", "def check(sum_list):\n\tassert sum_list([1, 4, 2], [8, 5, 7]) == [9, 9, 9]", "def check(sum_list):\n\tassert sum_list([4, 4, 1], [4, 5, 5]) == [8, 9, 6]", "def check(sum_list):\n\tassert sum_list([6, 2, 4], [5, 10, 12]) == [11, 12, 16]", "def check(sum_list):\n\tassert sum_list([3, 2, 6], [7, 1, 4]) == [10, 3, 10]", "def check(sum_list):\n\tassert sum_list([2, 7, 3], [9, 5, 2]) == [11, 12, 5]", "def check(sum_list):\n\tassert sum_list([2, 3, 4], [9, 6, 12]) == [11, 9, 16]", "def check(sum_list):\n\tassert sum_list([2, 6, 6], [1, 3, 10]) == [3, 9, 16]", "def check(sum_list):\n\tassert sum_list([4, 7, 7], [6, 7, 8]) == [10, 14, 15]", "def check(sum_list):\n\tassert sum_list([1, 3, 7], [10, 8, 6]) == [11, 11, 13]", "def check(sum_list):\n\tassert sum_list([1, 3, 6], [3, 1, 6]) == [4, 4, 12]", "def check(sum_list):\n\tassert sum_list([2, 7, 1], [9, 4, 4]) == [11, 11, 5]", "def check(sum_list):\n\tassert sum_list([4, 2, 1], [8, 2, 5]) == [12, 4, 6]", "def check(sum_list):\n\tassert sum_list([6, 2, 5], [3, 4, 10]) == [9, 6, 15]", "def check(sum_list):\n\tassert sum_list([5, 3, 2], [5, 1, 4]) == [10, 4, 6]", "def check(sum_list):\n\tassert sum_list([4, 5, 5], [9, 10, 8]) == [13, 15, 13]", "def check(sum_list):\n\tassert sum_list([3, 4, 3], [3, 5, 11]) == [6, 9, 14]", "def check(sum_list):\n\tassert sum_list([1, 5, 2], [5, 1, 11]) == [6, 6, 13]", "def check(sum_list):\n\tassert sum_list([2, 3, 8], [3, 7, 3]) == [5, 10, 11]", "def check(sum_list):\n\tassert sum_list([3, 5, 7], [5, 8, 8]) == [8, 13, 15]", "def check(sum_list):\n\tassert sum_list([4, 3, 6], [8, 11, 11]) == [12, 14, 17]", "def check(sum_list):\n\tassert sum_list([3, 7, 8], [6, 9, 2]) == [9, 16, 10]", "def check(sum_list):\n\tassert sum_list([14, 18, 32], [14, 49, 80]) == [28, 67, 112]", "def check(sum_list):\n\tassert sum_list([15, 21, 33], [13, 47, 78]) == [28, 68, 111]", "def check(sum_list):\n\tassert sum_list([14, 15, 27], [17, 49, 79]) == [31, 64, 106]", "def check(sum_list):\n\tassert sum_list([10, 20, 33], [19, 41, 75]) == [29, 61, 108]", "def check(sum_list):\n\tassert sum_list([19, 21, 32], [11, 48, 80]) == [30, 69, 112]", "def check(sum_list):\n\tassert sum_list([18, 18, 28], [10, 50, 76]) == [28, 68, 104]", "def check(sum_list):\n\tassert sum_list([19, 17, 25], [19, 44, 79]) == [38, 61, 104]", "def check(sum_list):\n\tassert sum_list([16, 21, 26], [15, 44, 72]) == [31, 65, 98]", "def check(sum_list):\n\tassert sum_list([11, 19, 32], [10, 44, 77]) == [21, 63, 109]", "def check(sum_list):\n\tassert sum_list([20, 21, 34], [14, 50, 74]) == [34, 71, 108]", "def check(sum_list):\n\tassert sum_list([18, 23, 34], [10, 41, 72]) == [28, 64, 106]", "def check(sum_list):\n\tassert sum_list([17, 23, 28], [20, 49, 71]) == [37, 72, 99]", "def check(sum_list):\n\tassert sum_list([16, 17, 33], [12, 41, 74]) == [28, 58, 107]", "def check(sum_list):\n\tassert sum_list([13, 16, 29], [19, 40, 70]) == [32, 56, 99]", "def check(sum_list):\n\tassert sum_list([19, 18, 29], [12, 46, 79]) == [31, 64, 108]", "def check(sum_list):\n\tassert sum_list([20, 16, 33], [13, 47, 80]) == [33, 63, 113]", "def check(sum_list):\n\tassert sum_list([16, 24, 34], [17, 41, 76]) == [33, 65, 110]", "def check(sum_list):\n\tassert sum_list([19, 24, 34], [11, 50, 80]) == [30, 74, 114]", "def check(sum_list):\n\tassert sum_list([14, 24, 28], [18, 43, 76]) == [32, 67, 104]", "def check(sum_list):\n\tassert sum_list([11, 15, 29], [19, 46, 80]) == [30, 61, 109]", "def check(sum_list):\n\tassert sum_list([14, 18, 31], [11, 41, 78]) == [25, 59, 109]", "def check(sum_list):\n\tassert sum_list([16, 18, 32], [13, 46, 72]) == [29, 64, 104]", "def check(sum_list):\n\tassert sum_list([13, 23, 30], [19, 41, 78]) == [32, 64, 108]", "def check(sum_list):\n\tassert sum_list([16, 18, 33], [17, 44, 80]) == [33, 62, 113]", "def check(sum_list):\n\tassert sum_list([13, 22, 33], [12, 48, 77]) == [25, 70, 110]", "def check(sum_list):\n\tassert sum_list([13, 18, 29], [14, 50, 76]) == [27, 68, 105]", "def check(sum_list):\n\tassert sum_list([15, 18, 29], [12, 43, 80]) == [27, 61, 109]", "def check(sum_list):\n\tassert sum_list([12, 16, 35], [11, 46, 74]) == [23, 62, 109]", "def check(sum_list):\n\tassert sum_list([14, 16, 32], [18, 40, 75]) == [32, 56, 107]", "def check(sum_list):\n\tassert sum_list([14, 21, 29], [10, 41, 80]) == [24, 62, 109]", "def check(sum_list):\n\tassert sum_list([13, 18, 25], [16, 45, 75]) == [29, 63, 100]", "def check(sum_list):\n\tassert sum_list([18, 25, 35], [19, 47, 79]) == [37, 72, 114]", "def check(sum_list):\n\tassert sum_list([18, 25, 29], [16, 48, 73]) == [34, 73, 102]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Takes two lists of numbers and returns a list with the sum of corresponding elements.\n    Handles edge cases such as empty lists and varying list lengths.\n    \n    Parameters:\n    list1 (list): First list of numbers.\n    list2 (list): Second list of numbers.\n    \n    Returns:\n    list: A list containing the sum of corresponding elements.\n    \n    Raises:\n    ValueError: If either of the inputs is not a list.\n    \"\"\"\n    # Validate that both inputs are lists\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise ValueError(\"Both inputs must be lists.\")\n    \n    # Determine the length of the shorter list\n    min_length = min(len(list1), len(list2))\n    \n    # Sum elements at each index from both lists\n    return [list1[i] + list2[i] for i in range(min_length)]\n\n# Example usage:\n# result = sum_list([1, 2, 3], [4, 5, 6])\n# print(result)  # Output: [5, 7, 9]\n", "passed": true, "pass": true, "pass_num": 10, "round": 536, "mutate_method": "add_1_sentence_at_end", "parent_index": 219}
