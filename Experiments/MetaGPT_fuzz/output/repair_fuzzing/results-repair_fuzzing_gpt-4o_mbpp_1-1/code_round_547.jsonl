{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 745, "prompt": "Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains. Make sure to handle edge cases where numbers contain the digit zero. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php", "code": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "test_imports": [], "test_list": ["assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(20,25)==[22, 24]", "assert divisible_by_digits(6, 20) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 22) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(5, 27) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 21) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 25) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 23) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(4, 25) == [4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 25) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 24) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 24) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 19) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 18) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 26) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 25) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(5, 25) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 19) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 26) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 26) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 23) == [6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 21) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 26) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(5, 22) == [5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1, 27) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 10) == [4, 5, 6, 7, 8, 9]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 11) == [4, 5, 6, 7, 8, 9, 11]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 15) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 18) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 17) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]", "assert divisible_by_digits(1, 14) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 17) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 15) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 12) == [5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 10) == [5, 6, 7, 8, 9]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 13) == [4, 5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 17) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 16) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 16) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 20) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 17) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 18) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 18) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(24, 30) == [24]", "assert divisible_by_digits(24, 30) == [24]", "assert divisible_by_digits(17, 24) == [22, 24]", "assert divisible_by_digits(23, 25) == [24]", "assert divisible_by_digits(25, 29) == []", "assert divisible_by_digits(25, 25) == []", "assert divisible_by_digits(25, 27) == []", "assert divisible_by_digits(18, 29) == [22, 24]", "assert divisible_by_digits(25, 21) == []", "assert divisible_by_digits(22, 28) == [22, 24]", "assert divisible_by_digits(22, 25) == [22, 24]", "assert divisible_by_digits(19, 26) == [22, 24]", "assert divisible_by_digits(15, 28) == [15, 22, 24]", "assert divisible_by_digits(20, 25) == [22, 24]", "assert divisible_by_digits(25, 26) == []", "assert divisible_by_digits(16, 20) == []", "assert divisible_by_digits(23, 20) == []", "assert divisible_by_digits(22, 23) == [22]", "assert divisible_by_digits(23, 25) == [24]", "assert divisible_by_digits(21, 23) == [22]", "assert divisible_by_digits(19, 24) == [22, 24]", "assert divisible_by_digits(20, 24) == [22, 24]", "assert divisible_by_digits(17, 22) == [22]", "assert divisible_by_digits(18, 26) == [22, 24]", "assert divisible_by_digits(23, 30) == [24]", "assert divisible_by_digits(25, 28) == []", "assert divisible_by_digits(15, 29) == [15, 22, 24]", "assert divisible_by_digits(20, 26) == [22, 24]", "assert divisible_by_digits(16, 23) == [22]", "assert divisible_by_digits(20, 21) == []", "assert divisible_by_digits(18, 22) == [22]", "assert divisible_by_digits(22, 22) == [22]", "assert divisible_by_digits(21, 21) == []"], "entry_point": "divisible_by_digits", "repair_prompt": ["Write a function divisible_by_digits to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains. Make sure to handle edge cases where numbers contain the digit zero. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndivisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "Write a function divisible_by_digits to find numbers within a given range from startnum to endnum. These numbers must be divisible by every digit they contain. Make sure to handle edge cases where numbers contain the digit zero. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndivisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n", "Write a function divisible_by_digits to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains, and ensure to handle edge cases where numbers contain the digit zero. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndivisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n"], "completions": ["from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Finds and returns a list of numbers within the range from startnum to endnum\n    where each number is divisible by every non-zero digit it contains.\n    \n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n    \n    Returns:\n    list[int]: A list of numbers satisfying the divisibility condition.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        # Skip numbers containing zero\n        if '0' in str_num:\n            continue\n        # Check if the number is divisible by all its non-zero digits\n        if all(num % int(digit) == 0 for digit in str_num if digit != '0'):\n            result.append(num)\n    return result\n\n# Example usage:\n# print(divisible_by_digits(10, 12))  # Output: [11, 12]\n# print(divisible_by_digits(0, 5))    # Output: [1, 2, 3, 4, 5]\n# print(divisible_by_digits(20, 22))  # Output: [22]\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    This function returns a list of numbers within the range from startnum to endnum\n    where each number is divisible by every non-zero digit it contains.\n    \n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n    \n    Returns:\n    list[int]: A list of numbers meeting the divisibility criteria.\n    \"\"\"\n    result = []\n    \n    for number in range(startnum, endnum + 1):\n        if is_divisible_by_its_digits(number):\n            result.append(number)\n    \n    return result\n\ndef is_divisible_by_its_digits(number: int) -> bool:\n    \"\"\"\n    Checks if a number is divisible by each of its non-zero digits.\n    \n    Parameters:\n    number (int): The number to check.\n    \n    Returns:\n    bool: True if the number is divisible by all its non-zero digits, False otherwise.\n    \"\"\"\n    str_number = str(number)\n    \n    for char in str_number:\n        digit = int(char)\n        if digit != 0 and number % digit != 0:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Finds and returns a list of numbers within the range from startnum to endnum\n    where each number is divisible by every non-zero digit it contains.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers satisfying the divisibility condition.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        # Skip numbers containing zero\n        if '0' in str_num:\n            continue\n        # Check if the number is divisible by all its non-zero digits\n        if all(num % int(digit) == 0 for digit in str_num if digit != '0'):\n            result.append(num)\n    return result\n\n# Example usage:\n# print(divisible_by_digits(10, 12))  # Output: [11, 12]\n# print(divisible_by_digits(0, 5))    # Output: [1, 2, 3, 4, 5]\n# print(divisible_by_digits(20, 22))  # Output: [22]\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list:\n    \"\"\"\n    Function to find numbers within a given range that are divisible by every digit they contain.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list: A list of numbers that are divisible by their digits.\n    \"\"\"\n    def is_divisible_by_digits(num: int) -> bool:\n        \"\"\"\n        Helper function to check if a number is divisible by each of its non-zero digits.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is divisible by all its non-zero digits, False otherwise.\n        \"\"\"\n        str_num = str(num)\n        if '0' in str_num:\n            return False\n        return all(num % int(digit) == 0 for digit in str_num if digit != '0')\n\n    # Validate inputs\n    if not isinstance(startnum, int) or not isinstance(endnum, int):\n        raise ValueError(\"Both startnum and endnum must be integers.\")\n\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum.\")\n\n    # Iterate through the range and check divisibility\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n\n    return result\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    This function takes two integers, startnum and endnum, and returns a list of integers within that range\n    that are divisible by each of their non-zero digits.\n\n    Args:\n        startnum (int): The starting number of the range.\n        endnum (int): The ending number of the range.\n\n    Returns:\n        list[int]: A list of integers that are divisible by each of their non-zero digits.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        # Skip numbers containing zero\n        if '0' in str_num:\n            continue\n        # Check divisibility by each non-zero digit\n        if all(num % int(digit) == 0 for digit in str_num if digit != '0'):\n            result.append(num)\n    return result\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Finds and returns a list of numbers within the range from startnum to endnum\n    that are divisible by each of their non-zero digits.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers that are divisible by their non-zero digits.\n    \"\"\"\n    result = []\n    \n    for number in range(startnum, endnum + 1):\n        # Convert the number to a string to iterate over its digits\n        str_number = str(number)\n        \n        # Check if the number contains zero\n        if '0' in str_number:\n            continue\n        \n        # Check divisibility by each non-zero digit\n        divisible = True\n        for digit in str_number:\n            if number % int(digit) != 0:\n                divisible = False\n                break\n        \n        # If divisible by all non-zero digits, add to result list\n        if divisible:\n            result.append(number)\n    \n    return result\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    This function returns a list of numbers within the range from startnum to endnum\n    where each number is divisible by every non-zero digit it contains.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers satisfying the divisibility condition.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"\n        Helper function to check if a number is divisible by all its non-zero digits.\n\n        Parameters:\n        number (int): The number to check.\n\n        Returns:\n        bool: True if the number is divisible by all its non-zero digits, False otherwise.\n        \"\"\"\n        str_number = str(number)\n        for digit in str_number:\n            digit_int = int(digit)\n            if digit_int == 0:\n                continue\n            if number % digit_int != 0:\n                return False\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n\n    return result\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Finds and returns a list of numbers within the range from startnum to endnum\n    where each number is divisible by every non-zero digit it contains.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers satisfying the divisibility condition.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"Checks if a number is divisible by all its non-zero digits.\"\"\"\n        str_number = str(number)\n        for digit_char in str_number:\n            digit = int(digit_char)\n            if digit == 0 or number % digit != 0:\n                return False\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n\n    return result\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Returns a list of numbers within the range from startnum to endnum\n    where each number is divisible by every non-zero digit it contains.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers satisfying the divisibility condition.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = str(num)\n        if '0' in digits:\n            continue\n        if all(num % int(digit) == 0 for digit in digits):\n            result.append(num)\n    return result\n\n# Example usage:\n# print(divisible_by_digits(10, 12))  # Output: [11, 12]\n# print(divisible_by_digits(20, 22))  # Output: [22]\n# print(divisible_by_digits(1, 9))    # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Returns a list of numbers within the range from startnum to endnum\n    where each number is divisible by every non-zero digit it contains.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers meeting the criteria.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"\n        Checks if a number is divisible by each of its non-zero digits.\n\n        Parameters:\n        number (int): The number to check.\n\n        Returns:\n        bool: True if the number is divisible by each of its non-zero digits, False otherwise.\n        \"\"\"\n        digits = str(number)\n        for digit in digits:\n            if digit == '0':\n                return False\n            if number % int(digit) != 0:\n                return False\n        return True\n\n    # List comprehension to collect numbers that meet the criteria\n    result = [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]\n    return result\n\n# Example usage:\n# print(divisible_by_digits(10, 12))  # Output: [11, 12]\n# print(divisible_by_digits(1, 9))    # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# print(divisible_by_digits(0, 0))    # Output: []\n"], "plans": ["requirement analysis:\nThe function needs to iterate over a range and check divisibility of each number by its digits. Special attention is required for numbers containing zero, as division by zero is undefined. The function should be optimized for performance, especially for large ranges.\nrequirement pool:\n- Implement the main function logic for divisibility checks\n- Handle edge cases where digits include zero\n- Optimize the function for performance\n- Ensure the function is easy to use and understand\n- Provide documentation and examples for usage\nWe will implement a function that iterates over each number in the given range and checks if the number is divisible by each of its non-zero digits. We will handle edge cases by skipping any digit that is zero to avoid division by zero errors. The function will be optimized for performance by using efficient iteration and condition checking.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit it contains'\n    Explanation: This means that for a number to be included in the result list, it must be divisible by each of its digits, excluding zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate over each number in the range from startnum to endnum.\n    2. For each number, convert it to a string to access its digits.\n    3. Check each digit to ensure it is non-zero and that the number is divisible by this digit.\n    4. If the number is divisible by all its non-zero digits, add it to the result list.\n    5. Return the result list.\n\n# [edge case] \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is skipped because it contains a zero. Number 11 is included because it is divisible by 1. Number 12 is included because it is divisible by both 1 and 2.\n    \n    divisible_by_digits(0, 5) = [1, 2, 3, 4, 5]\n    Explanation: Number 0 is skipped because it contains a zero. Numbers 1 through 5 are included because they are divisible by themselves.\n    \n    divisible_by_digits(20, 22) = [22]\n    Explanation: Number 20 is skipped because it contains a zero. Number 21 is skipped because it is not divisible by 2. Number 22 is included because it is divisible by both 2.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def divisible_by_digits(startnum, endnum):\n            result = []\n            for num in range(startnum, endnum + 1):\n                str_num = str(num)\n                if '0' in str_num:\n                    continue\n                if all(num % int(digit) == 0 for digit in str_num if digit != '0'):\n                    result.append(num)\n            return result\n", "requirement analysis:\nThe function needs to iterate over a range of numbers and check divisibility by each digit. Special attention is required for numbers containing zero, as division by zero is undefined. The output should be a list of numbers meeting the criteria.\nrequirement pool:\n- Implement the main function logic to check divisibility by digits\n- Handle edge cases where digits include zero\n- Optimize for performance within large ranges\n- Ensure the output format is user-friendly\n- Include error handling for invalid inputs\nWe will implement a function named `divisible_by_digits` that iterates over a range of numbers from `startnum` to `endnum`. For each number, it will check if the number is divisible by each of its non-zero digits. We will handle edge cases where the number contains the digit zero by skipping the division check for zero. The function will return a list of numbers that meet the criteria. We will use Python's built-in capabilities without any additional libraries, as they are sufficient for this task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit it contains'\n    Explanation: This means that for a number to be included in the result, it must be divisible by each of its digits, except zero. For example, the number 12 is divisible by 1 and 2, so it meets the criteria.\n\n# [phrase showing quantity relationship]\n    'within a given range from startnum to endnum': This indicates that the function should consider numbers starting from `startnum` and ending at `endnum`, inclusive.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize an empty list to store numbers that meet the criteria.\n    2. Iterate over each number in the range from `startnum` to `endnum`.\n    3. For each number, convert it to a string to iterate over its digits.\n    4. Check if each digit is non-zero and if the number is divisible by this digit.\n    5. If the number is divisible by all its non-zero digits, add it to the result list.\n    6. Return the list of numbers that meet the criteria.\n\n# [edge case] \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is not included because it contains a zero. Number 11 is included because it is divisible by 1. Number 12 is included because it is divisible by both 1 and 2.\n    \n    divisible_by_digits(0, 5) = [1, 2, 3, 4, 5]\n    Explanation: The range includes numbers from 0 to 5. Zero is not considered because it cannot be divided by any digit. Numbers 1 to 5 are included because they are divisible by themselves.\n\n    divisible_by_digits(21, 25) = [22, 24]\n    Explanation: Number 21 is not included because it is not divisible by 2. Number 22 is included because it is divisible by both digits (2). Number 23 is not included because it is not divisible by 3. Number 24 is included because it is divisible by both digits (2 and 4). Number 25 is not included because it is not divisible by 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers skipping division checks for zero and iterates through the specified range inclusively.\n", "requirement analysis:\nThe function needs to iterate over a range of numbers and check divisibility by each digit, excluding zero. It should handle edge cases like numbers containing zero and ensure performance is optimized for larger ranges.\nrequirement pool:\n- Handle numbers containing zero without errors\n- Optimize for performance with large ranges\n- Provide clear documentation and examples\n- Ensure compatibility with Python 3.x\n- Include unit tests for various edge cases\nWe will implement a function named 'divisible_by_digits' that iterates over a range of numbers and checks if each number is divisible by all its non-zero digits. We will use a simple loop and conditionals to achieve this, ensuring that the function handles numbers containing zero by skipping the zero digit in divisibility checks. The function will be optimized for performance by minimizing unnecessary computations and will be compatible with Python 3.x. We will also provide clear documentation and examples to facilitate integration into existing projects.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit it contains'\n    Explanation: This means that for a number to be included in the result list, it must be divisible by each of its digits, excluding zero.\n\n# [phrase showing quantity relationship]\n    'within a given range': This indicates that the function should check numbers starting from 'startnum' to 'endnum', inclusive.\n    'every number is divisible by every digit': This means that for each number in the range, it should be checked against each of its digits to ensure divisibility.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate over each number in the range from 'startnum' to 'endnum'.\n    2. For each number, convert it to a string to access individual digits.\n    3. Check if the number is divisible by each of its non-zero digits.\n    4. If the number is divisible by all its non-zero digits, add it to the result list.\n    5. Return the result list.\n\n# [edge case] \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is skipped because it contains a zero. Number 11 is divisible by 1, and number 12 is divisible by both 1 and 2.\n    \n    divisible_by_digits(0, 5) = [1, 2, 3, 4, 5]\n    Explanation: Number 0 is skipped because it cannot be divided by any digit. Numbers 1 to 5 are included because they are divisible by themselves.\n    \n    divisible_by_digits(20, 22) = [22]\n    Explanation: Number 20 is skipped because it contains a zero. Number 21 is not divisible by 2. Number 22 is divisible by both of its digits (2).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where numbers contain the digit zero.\n        def divisible_by_digits(startnum, endnum):\n            result = []\n            for num in range(startnum, endnum + 1):\n                str_num = str(num)\n                if '0' in str_num:\n                    continue\n                if all(num % int(digit) == 0 for digit in str_num if digit != '0'):\n                    result.append(num)\n            return result\n", "requirement analysis:\nThe function needs to efficiently check each number within the range for divisibility by its digits, handling edge cases like zero digits. It should provide accurate results and handle invalid inputs gracefully.\nrequirement pool:\n- Implement the main function logic to check divisibility by digits\n- Handle edge cases where digits include zero\n- Optimize for performance with large ranges\n- Provide clear error messages for invalid inputs\n- Ensure compatibility with different Python versions\nWe will implement a function that iterates through each number in the specified range and checks if the number is divisible by each of its non-zero digits. We will use Python's built-in capabilities for handling numbers and strings, ensuring that edge cases like numbers containing zero are handled gracefully. The function will also include error handling for invalid inputs, providing clear messages to the user.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit'\n    Explanation: This means that for a number to be included in the result, it must be divisible by each of its digits, excluding zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Iterate through each number in the range from startnum to endnum.\n    - For each number, convert it to a string to access its digits.\n    - Check if the number is divisible by each of its non-zero digits.\n    - If the number is divisible by all its non-zero digits, add it to the result list.\n    - Return the list of numbers that meet the criteria.\n\n# [edge case] \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is not included because it contains a zero. Number 11 is included because it is divisible by 1. Number 12 is included because it is divisible by both 1 and 2.\n    \n    divisible_by_digits(0, 5) = [1, 2, 3, 4, 5]\n    Explanation: Number 0 is not included because it cannot be divided by any digit. Numbers 1 to 5 are included because they are divisible by themselves.\n    \n    divisible_by_digits(20, 22) = [22]\n    Explanation: Number 20 is not included because it contains a zero. Number 21 is not included because it is not divisible by 2. Number 22 is included because it is divisible by both 2s.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def divisible_by_digits(startnum, endnum):\n            result = []\n            for num in range(startnum, endnum + 1):\n                str_num = str(num)\n                if '0' in str_num:\n                    continue\n                if all(num % int(digit) == 0 for digit in str_num if digit != '0'):\n                    result.append(num)\n            return result\n", "requirement analysis:\nThe function needs to iterate over a range and check divisibility by each digit, excluding zero. Edge cases include numbers with zero and ensuring no division by zero errors.\nrequirement pool:\n- Implement the main function logic for digit divisibility\n- Handle edge cases where digits include zero\n- Optimize for performance over large ranges\n- Provide user-friendly output format\n- Include error handling for invalid inputs\nWe will implement a function that iterates over each number in the given range and checks if the number is divisible by each of its non-zero digits. We will use Python's built-in capabilities for string manipulation and list comprehension to efficiently handle the digit extraction and divisibility check. Edge cases such as numbers containing zero will be handled by skipping zero during the divisibility check.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit they contain'\n    Explanation: This means that for a number to be included in the result, it must be divisible by each of its digits, excluding zero.\n\n# [phrase showing quantity relationship]\n    'within a given range from startnum to endnum': This indicates that the function should consider numbers starting from 'startnum' and ending at 'endnum', inclusive.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate over each number in the range from startnum to endnum.\n    2. For each number, convert it to a string to extract its digits.\n    3. Check if the number is divisible by each of its non-zero digits.\n    4. If it is divisible by all such digits, add it to the result list.\n    5. Return the list of numbers that meet the criteria.\n\n# [edge case] \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is skipped because it contains a zero. Number 11 is divisible by its digit 1, and number 12 is divisible by both 1 and 2.\n    \n    divisible_by_digits(0, 9) = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Explanation: Zero is not included in the range as it cannot be divisible by itself. All other single-digit numbers are divisible by themselves.\n\n    divisible_by_digits(20, 22) = [22]\n    Explanation: Number 20 is skipped because it contains a zero. Number 21 is not divisible by its digit 2. Number 22 is divisible by both of its digits (2).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n        def divisible_by_digits(startnum, endnum):\n            result = []\n            for num in range(startnum, endnum + 1):\n                str_num = str(num)\n                if '0' in str_num:\n                    continue\n                if all(num % int(digit) == 0 for digit in str_num if digit != '0'):\n                    result.append(num)\n            return result\n", "requirement analysis:\nThe function needs to iterate over a range of numbers and check each number for divisibility by its digits. Special care must be taken for numbers containing the digit zero, as division by zero is undefined. The function should be optimized for performance to handle large ranges efficiently.\nrequirement pool:\n- Implement the main function to check divisibility by digits.\n- Handle edge cases where numbers contain the digit zero.\n- Optimize the function for performance with large ranges.\n- Provide comprehensive documentation and examples.\n- Include unit tests to ensure function reliability.\nWe will implement a function that iterates over each number in the given range and checks if the number is divisible by each of its non-zero digits. We will handle edge cases by skipping numbers that contain the digit zero, as division by zero is undefined. The function will be optimized for performance by using efficient iteration and condition checking.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit they contain'\n    Explanation: This means that for a number to be included in the result, it must be divisible by each of its digits, excluding zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate over each number in the range from startnum to endnum.\n    2. For each number, convert it to a string to iterate over its digits.\n    3. Check if any digit is zero; if so, skip this number.\n    4. For non-zero digits, check if the number is divisible by each digit.\n    5. If the number is divisible by all its non-zero digits, add it to the result list.\n    6. Return the result list.\n\n# [edge case] \n    divisible_by_digits(1, 9) = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Explanation: All single-digit numbers are divisible by themselves.\n    \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is skipped because it contains a zero. Number 11 is divisible by 1, and number 12 is divisible by both 1 and 2.\n    \n    divisible_by_digits(20, 22) = [22]\n    Explanation: Number 20 is skipped because it contains a zero. Number 21 is not divisible by 2. Number 22 is divisible by both of its digits (2).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of skipping numbers with zero and checking divisibility handles these cases effectively.\n", "requirement analysis:\nThe function needs to iterate over a range of numbers and check divisibility by each digit, excluding zero. Edge cases such as numbers containing zero must be handled to avoid division errors.\nrequirement pool:\n- Implement the main function logic for divisibility checks\n- Handle edge cases where digits include zero\n- Optimize for performance with large ranges\n- Ensure output is formatted correctly\n- Include error handling for invalid inputs\nWe will implement a function that iterates over each number in the given range and checks if the number is divisible by each of its non-zero digits. We will handle edge cases by skipping any digit that is zero to avoid division errors. The function will return a list of numbers that meet the criteria.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit it contains'\n    Explanation: This means that for each number in the specified range, the number should be divisible by each of its digits, excluding zero to avoid division by zero errors.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate over each number from startnum to endnum.\n    2. For each number, convert it to a string to iterate over its digits.\n    3. Check if each digit is non-zero and if the number is divisible by this digit.\n    4. If the number is divisible by all its non-zero digits, add it to the result list.\n    5. Return the list of numbers that meet the criteria.\n\n# [edge case] \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is skipped because it contains a zero. Number 11 is divisible by its digit 1, and number 12 is divisible by both 1 and 2.\n    \n    divisible_by_digits(0, 9) = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Explanation: All single-digit numbers from 1 to 9 are divisible by themselves. Zero is not included as it cannot be divided by itself.\n\n    divisible_by_digits(20, 22) = [22]\n    Explanation: Number 20 is skipped because it contains a zero. Number 21 is not divisible by its digit 2. Number 22 is divisible by both of its digits (2).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of skipping zero digits and checking divisibility handles these cases effectively.\n", "requirement analysis:\nThe function needs to accurately identify numbers divisible by their digits within a specified range, while handling edge cases such as numbers containing zero. Performance optimization is crucial for handling large ranges efficiently.\nrequirement pool:\n- Implement the main function logic to check divisibility by digits\n- Handle edge cases where digits include zero\n- Optimize the function for performance with large ranges\n- Ensure the function returns results in a timely manner\n- Provide clear documentation and examples for users\nWe will implement a function that iterates through each number in the given range and checks if the number is divisible by each of its non-zero digits. We will handle edge cases by skipping any number that contains the digit zero, as division by zero is undefined. The function will be optimized for performance by using efficient iteration and condition checking.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit it contains'\n    Explanation: This means that for a number to be included in the result, each of its digits (except zero) must be a divisor of the number itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate through each number from startnum to endnum.\n    2. For each number, convert it to a string to iterate over its digits.\n    3. Check if any digit is zero; if so, skip this number.\n    4. For non-zero digits, check if the number is divisible by the digit.\n    5. If the number is divisible by all its non-zero digits, add it to the result list.\n    6. Return the result list.\n\n# [edge case] \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is skipped because it contains a zero. Number 11 is included because it is divisible by 1. Number 12 is included because it is divisible by both 1 and 2.\n    \n    divisible_by_digits(20, 22) = [22]\n    Explanation: Number 20 is skipped because it contains a zero. Number 21 is skipped because it is not divisible by 2. Number 22 is included because it is divisible by both 2s.\n\n    divisible_by_digits(1, 9) = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Explanation: All numbers from 1 to 9 are included because they are all divisible by themselves.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of skipping numbers with zero and checking divisibility handles these cases effectively.\n", "requirement analysis:\nThe function needs to efficiently check divisibility by digits, handle zero digits, and perform well across a range of numbers. Edge cases such as numbers containing zero must be addressed to prevent division errors.\nrequirement pool:\n- Implement the main function logic to check divisibility by digits.\n- Handle edge cases where numbers contain the digit zero.\n- Optimize the function for performance with large ranges.\n- Ensure the output is clear and matches expected results.\n- Provide documentation and examples for user understanding.\nWe will implement a function that iterates through each number in the given range and checks if the number is divisible by each of its non-zero digits. We will handle edge cases by skipping any number that contains the digit zero, as division by zero is undefined. The function will be optimized to handle large ranges efficiently by using list comprehensions and generator expressions where appropriate.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit it contains'\n    Explanation: This means that for a number to be included in the result list, it must be divisible by each of its digits individually, excluding zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate through each number in the range from startnum to endnum.\n    2. For each number, convert it to a string to access its digits.\n    3. Check if any digit is zero; if so, skip the number.\n    4. For non-zero digits, check if the number is divisible by each digit.\n    5. If the number is divisible by all its non-zero digits, add it to the result list.\n    6. Return the result list.\n\n# [edge case] \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is skipped because it contains zero. Number 11 is divisible by its digit 1, and number 12 is divisible by both digits 1 and 2.\n    \n    divisible_by_digits(20, 22) = [22]\n    Explanation: Number 20 is skipped because it contains zero. Number 21 is not divisible by its digit 2, but number 22 is divisible by both digits 2.\n\n    divisible_by_digits(1, 9) = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Explanation: All numbers from 1 to 9 are included because they are divisible by themselves.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where numbers contain the digit zero.\n        def divisible_by_digits(startnum, endnum):\n            result = []\n            for num in range(startnum, endnum + 1):\n                digits = str(num)\n                if '0' in digits:\n                    continue\n                if all(num % int(digit) == 0 for digit in digits):\n                    result.append(num)\n            return result\n", "requirement analysis:\nThe function needs to iterate over a range and check divisibility of each number by its digits. Special attention is required for numbers containing zero, as division by zero is undefined. The solution should be efficient to handle large ranges.\nrequirement pool:\n- Implement the main function to check divisibility by digits\n- Handle edge cases where digits include zero\n- Optimize the function for performance\n- Ensure the function is scalable for large ranges\n- Provide documentation and examples for user understanding\nWe will implement a function called divisible_by_digits that iterates over each number in the given range. For each number, it will check if the number is divisible by each of its non-zero digits. If a number contains the digit zero, it will be skipped as division by zero is undefined. The function will use list comprehension for concise and efficient iteration. The solution will be optimized for performance by minimizing unnecessary computations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'divisible by every digit it contains'\n    Explanation: This means that for each number in the specified range, the number should be divisible by each of its digits, excluding zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate over each number in the range from startnum to endnum.\n    2. For each number, convert it to a string to access its digits.\n    3. Check if the number is divisible by each of its non-zero digits.\n    4. If a number contains the digit zero, skip it.\n    5. Use list comprehension to collect all numbers that meet the criteria.\n\n# [edge case] \n    divisible_by_digits(0, 0) = []\n    Explanation: The range includes only the number 0, which contains the digit zero, so it is skipped.\n    \n    divisible_by_digits(10, 12) = [11, 12]\n    Explanation: Number 10 is skipped because it contains zero. Number 11 is divisible by its digit 1, and number 12 is divisible by both digits 1 and 2.\n\n    divisible_by_digits(1, 9) = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Explanation: All single-digit numbers are divisible by themselves.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of skipping numbers containing zero and checking divisibility by non-zero digits inherently handles these cases.\n"], "test": ["def check(divisible_by_digits):\n\tassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20,25)==[22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 20) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 22) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 27) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 21) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 25) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 23) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 25) == [4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 25) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 24) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 24) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 19) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 18) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 26) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 25) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 25) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 19) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 26) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 26) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 23) == [6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 21) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 26) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 22) == [5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 27) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 10) == [4, 5, 6, 7, 8, 9]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 11) == [4, 5, 6, 7, 8, 9, 11]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 15) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 18) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 17) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 14) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 17) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 15) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 12) == [5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 10) == [5, 6, 7, 8, 9]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 13) == [4, 5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 17) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 16) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 16) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 20) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 17) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 18) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 18) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(24, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(24, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(17, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 25) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 29) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 25) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 27) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 29) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 21) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 28) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 25) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(19, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(15, 28) == [15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 25) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 26) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(16, 20) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 20) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 25) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(21, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(19, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(17, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 28) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(15, 29) == [15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(16, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 21) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(21, 21) == []"], "scores": [1.0, 0.1471, 1.0, 0.9804, 1.0, 1.0, 0.1471, 1.0, 1.0, 1.0], "pass_results": [true, false, true, false, true, true, false, true, true, true], "pass_test_cases_num": [102, 15, 102, 100, 102, 102, 15, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Returns a list of numbers within the range from startnum to endnum\n    where each number is divisible by every non-zero digit it contains.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers meeting the criteria.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"\n        Checks if a number is divisible by each of its non-zero digits.\n\n        Parameters:\n        number (int): The number to check.\n\n        Returns:\n        bool: True if the number is divisible by each of its non-zero digits, False otherwise.\n        \"\"\"\n        digits = str(number)\n        for digit in digits:\n            if digit == '0':\n                return False\n            if number % int(digit) != 0:\n                return False\n        return True\n\n    # List comprehension to collect numbers that meet the criteria\n    result = [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]\n    return result\n\n# Example usage:\n# print(divisible_by_digits(10, 12))  # Output: [11, 12]\n# print(divisible_by_digits(1, 9))    # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# print(divisible_by_digits(0, 0))    # Output: []\n", "passed": true, "pass": true, "pass_num": 7, "round": 547, "mutate_method": "add_1_sentence_at_end", "parent_index": 233}
