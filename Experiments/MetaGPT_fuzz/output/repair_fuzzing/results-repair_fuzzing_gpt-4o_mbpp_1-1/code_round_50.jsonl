{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 120, "prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.", "code": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max", "test_imports": [], "test_list": ["assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200", "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484", "assert max_product_tuple([(5, 12), (2, 4), (1, 9), (6, 6)]) == 60", "assert max_product_tuple([(3, 9), (3, 4), (6, 5), (2, 4)]) == 30", "assert max_product_tuple([(2, 2), (3, 11), (2, 12), (4, 14)]) == 56", "assert max_product_tuple([(7, 10), (4, 5), (5, 12), (3, 12)]) == 70", "assert max_product_tuple([(3, 2), (1, 8), (4, 8), (8, 12)]) == 96", "assert max_product_tuple([(3, 6), (2, 9), (2, 3), (2, 10)]) == 20", "assert max_product_tuple([(7, 2), (1, 10), (1, 6), (5, 10)]) == 50", "assert max_product_tuple([(2, 6), (1, 8), (6, 4), (9, 4)]) == 36", "assert max_product_tuple([(2, 10), (5, 3), (6, 10), (7, 7)]) == 60", "assert max_product_tuple([(6, 7), (5, 2), (5, 12), (9, 14)]) == 126", "assert max_product_tuple([(1, 3), (2, 9), (3, 9), (2, 8)]) == 27", "assert max_product_tuple([(3, 3), (4, 5), (2, 5), (7, 10)]) == 70", "assert max_product_tuple([(2, 10), (3, 9), (6, 9), (7, 4)]) == 54", "assert max_product_tuple([(3, 7), (4, 8), (5, 13), (2, 7)]) == 65", "assert max_product_tuple([(7, 12), (4, 6), (3, 8), (6, 6)]) == 84", "assert max_product_tuple([(3, 3), (4, 5), (1, 9), (8, 7)]) == 56", "assert max_product_tuple([(3, 9), (6, 1), (3, 9), (3, 14)]) == 42", "assert max_product_tuple([(3, 9), (2, 4), (4, 6), (6, 11)]) == 66", "assert max_product_tuple([(2, 9), (3, 5), (1, 11), (6, 12)]) == 72", "assert max_product_tuple([(6, 10), (3, 1), (4, 12), (7, 9)]) == 63", "assert max_product_tuple([(2, 5), (4, 7), (2, 8), (5, 11)]) == 55", "assert max_product_tuple([(4, 8), (5, 9), (3, 7), (3, 6)]) == 45", "assert max_product_tuple([(5, 3), (2, 7), (5, 4), (5, 11)]) == 55", "assert max_product_tuple([(2, 3), (3, 8), (5, 7), (7, 12)]) == 84", "assert max_product_tuple([(6, 10), (4, 7), (4, 7), (1, 10)]) == 60", "assert max_product_tuple([(3, 12), (4, 3), (4, 8), (9, 7)]) == 63", "assert max_product_tuple([(7, 11), (6, 9), (1, 11), (5, 12)]) == 77", "assert max_product_tuple([(7, 6), (2, 8), (1, 12), (6, 14)]) == 84", "assert max_product_tuple([(7, 6), (6, 9), (2, 9), (9, 4)]) == 54", "assert max_product_tuple([(3, 10), (4, 8), (2, 5), (3, 4)]) == 32", "assert max_product_tuple([(2, 4), (2, 3), (1, 5), (8, 11)]) == 88", "assert max_product_tuple([(4, 11), (4, 11), (3, 3), (1, 9)]) == 44", "assert max_product_tuple([(4, 12), (1, 8), (4, 8), (5, 4)]) == 48", "assert max_product_tuple([(13, 15), (11, 5), (9, 6)]) == 195", "assert max_product_tuple([(9, 15), (17, 7), (1, 10)]) == 135", "assert max_product_tuple([(9, 18), (12, 5), (5, 14)]) == 162", "assert max_product_tuple([(15, 15), (15, 4), (10, 5)]) == 225", "assert max_product_tuple([(12, 17), (15, 1), (8, 6)]) == 204", "assert max_product_tuple([(13, 23), (15, 7), (2, 9)]) == 299", "assert max_product_tuple([(7, 19), (16, 7), (3, 9)]) == 133", "assert max_product_tuple([(14, 17), (20, 7), (5, 13)]) == 238", "assert max_product_tuple([(7, 25), (19, 1), (6, 5)]) == 175", "assert max_product_tuple([(7, 25), (11, 4), (2, 11)]) == 175", "assert max_product_tuple([(14, 18), (12, 4), (6, 14)]) == 252", "assert max_product_tuple([(13, 20), (14, 5), (4, 11)]) == 260", "assert max_product_tuple([(10, 20), (16, 2), (2, 7)]) == 200", "assert max_product_tuple([(7, 20), (18, 4), (2, 9)]) == 140", "assert max_product_tuple([(5, 18), (17, 2), (9, 11)]) == 99", "assert max_product_tuple([(14, 23), (13, 1), (5, 11)]) == 322", "assert max_product_tuple([(12, 23), (16, 6), (7, 7)]) == 276", "assert max_product_tuple([(10, 19), (12, 1), (7, 10)]) == 190", "assert max_product_tuple([(10, 20), (19, 6), (8, 10)]) == 200", "assert max_product_tuple([(15, 18), (12, 3), (10, 10)]) == 270", "assert max_product_tuple([(8, 24), (18, 3), (8, 11)]) == 192", "assert max_product_tuple([(10, 15), (17, 6), (3, 7)]) == 150", "assert max_product_tuple([(6, 25), (18, 5), (6, 10)]) == 150", "assert max_product_tuple([(15, 20), (13, 6), (10, 10)]) == 300", "assert max_product_tuple([(9, 22), (12, 2), (9, 11)]) == 198", "assert max_product_tuple([(5, 18), (13, 2), (7, 15)]) == 105", "assert max_product_tuple([(15, 24), (10, 7), (9, 11)]) == 360", "assert max_product_tuple([(8, 19), (12, 5), (3, 5)]) == 152", "assert max_product_tuple([(12, 18), (10, 1), (6, 7)]) == 216", "assert max_product_tuple([(14, 18), (16, 7), (6, 7)]) == 252", "assert max_product_tuple([(15, 24), (17, 3), (1, 15)]) == 360", "assert max_product_tuple([(5, 22), (11, 4), (4, 13)]) == 110", "assert max_product_tuple([(15, 21), (13, 6), (8, 11)]) == 315", "assert max_product_tuple([(10, 42), (13, 15), (25, 8), (8, 5)]) == 420", "assert max_product_tuple([(14, 45), (12, 10), (23, 8), (15, 5)]) == 630", "assert max_product_tuple([(16, 43), (14, 18), (20, 9), (12, 13)]) == 688", "assert max_product_tuple([(9, 46), (13, 16), (23, 2), (13, 9)]) == 414", "assert max_product_tuple([(6, 40), (8, 16), (21, 8), (7, 14)]) == 240", "assert max_product_tuple([(14, 46), (11, 15), (17, 4), (8, 11)]) == 644", "assert max_product_tuple([(15, 42), (9, 20), (17, 10), (10, 4)]) == 630", "assert max_product_tuple([(9, 43), (5, 15), (20, 3), (7, 6)]) == 387", "assert max_product_tuple([(14, 44), (15, 18), (20, 2), (11, 9)]) == 616", "assert max_product_tuple([(10, 43), (13, 11), (25, 3), (10, 6)]) == 430", "assert max_product_tuple([(14, 42), (11, 18), (19, 4), (10, 8)]) == 588", "assert max_product_tuple([(11, 46), (13, 11), (19, 1), (11, 10)]) == 506", "assert max_product_tuple([(14, 47), (14, 15), (17, 10), (10, 5)]) == 658", "assert max_product_tuple([(14, 40), (15, 17), (17, 10), (11, 7)]) == 560", "assert max_product_tuple([(8, 40), (8, 15), (25, 6), (8, 11)]) == 320", "assert max_product_tuple([(13, 40), (11, 11), (22, 8), (16, 7)]) == 520", "assert max_product_tuple([(13, 42), (13, 14), (25, 1), (13, 10)]) == 546", "assert max_product_tuple([(13, 45), (12, 15), (25, 6), (15, 5)]) == 585", "assert max_product_tuple([(7, 48), (12, 16), (16, 9), (14, 4)]) == 336", "assert max_product_tuple([(15, 44), (11, 16), (25, 1), (11, 14)]) == 660", "assert max_product_tuple([(13, 44), (8, 13), (18, 9), (13, 4)]) == 572", "assert max_product_tuple([(15, 45), (5, 18), (17, 6), (11, 14)]) == 675", "assert max_product_tuple([(10, 41), (14, 10), (21, 10), (11, 11)]) == 410", "assert max_product_tuple([(15, 45), (9, 18), (17, 7), (13, 6)]) == 675", "assert max_product_tuple([(10, 49), (10, 17), (15, 5), (16, 12)]) == 490", "assert max_product_tuple([(12, 48), (9, 16), (20, 6), (11, 14)]) == 576", "assert max_product_tuple([(9, 47), (9, 12), (23, 7), (16, 8)]) == 423", "assert max_product_tuple([(14, 44), (12, 19), (21, 1), (15, 12)]) == 616", "assert max_product_tuple([(12, 40), (5, 18), (23, 10), (10, 7)]) == 480", "assert max_product_tuple([(16, 40), (6, 20), (18, 3), (12, 5)]) == 640", "assert max_product_tuple([(6, 48), (13, 15), (16, 5), (10, 10)]) == 288", "assert max_product_tuple([(7, 44), (9, 20), (19, 8), (17, 5)]) == 308", "assert max_product_tuple([(13, 46), (14, 16), (25, 10), (9, 10)]) == 598"], "entry_point": "max_product_tuple", "repair_prompt": ["Write a function max_product_tuple to find the maximum absolute product between numbers in pairs of tuples within a given list.\nmax_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n", "Write a function max_product_tuple to find the maximum absolute product between numbers. It should specifically calculate this for pairs of tuples within a given list.\nmax_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n", "Write a function max_product_tuple to find the maximum absolute product between numbers in pairs of tuples within a given list.\nmax_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n"], "completions": ["from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product from pairs of numbers in tuples.\n\n    Parameters:\n    tuples (list of tuple of int): A list containing tuples of two integers.\n\n    Returns:\n    int: The maximum absolute product found among the tuples.\n    \"\"\"\n    # Initialize the maximum product with a very small number\n    max_product = float('-inf')\n\n    # Iterate through each tuple in the list\n    for pair in tuples:\n        # Calculate the product of the elements in the tuple\n        product = pair[0] * pair[1]\n        # Take the absolute value of the product\n        abs_product = abs(product)\n        # Update the maximum product if the current absolute product is greater\n        if abs_product > max_product:\n            max_product = abs_product\n\n    # Return the maximum absolute product found\n    return max_product\n\n# Example usage:\n# result = max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n# print(result)  # Output should be 36\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    '''\n    Calculate the maximum absolute product from pairs of numbers in tuples.\n    \n    Parameters:\n    tuples (list of tuple of int): A list containing tuples of two integers.\n    \n    Returns:\n    int: The maximum absolute product found among the tuples.\n    '''\n    # Initialize the maximum product with a very small number\n    max_product = float('-inf')\n    \n    # Iterate through each tuple in the list\n    for pair in tuples:\n        # Calculate the product of the elements in the tuple\n        product = pair[0] * pair[1]\n        \n        # Compare the absolute value of the product with the current maximum product\n        if abs(product) > max_product:\n            max_product = abs(product)\n    \n    # Return the maximum absolute product found\n    return max_product\n\n# Example usage:\n# print(max_product_tuple([(0, 0), (0, 0)]))  # Output: 0\n# print(max_product_tuple([(1, -1), (-1, 1)]))  # Output: 1\n# print(max_product_tuple([(1000, 0), (0, 1000)]))  # Output: 0\n", "from typing import List\n## main.py\n\ndef max_product_tuple(pairs: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product from pairs of tuples.\n\n    Parameters:\n    pairs (list of tuple of int): A list of tuples, each containing two integers.\n\n    Returns:\n    int: The maximum absolute product of any tuple in the list.\n    \"\"\"\n    # Initialize the maximum product with a very small number\n    max_product = float('-inf')\n\n    # Iterate through each tuple in the list\n    for pair in pairs:\n        # Calculate the product of the two numbers in the tuple\n        product = pair[0] * pair[1]\n        # Take the absolute value of the product\n        abs_product = abs(product)\n        # Update the maximum product if the current absolute product is larger\n        if abs_product > max_product:\n            max_product = abs_product\n\n    # Return the maximum absolute product found\n    return max_product\n\n# Example usage:\n# print(max_product_tuple([(0, 0), (0, 0)]))  # Output: 0\n# print(max_product_tuple([(-1, -1), (1, 1)]))  # Output: 1\n# print(max_product_tuple([(2, -3), (-4, -5)]))  # Output: 20\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuple_list: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of pairs of numbers in a list of tuples.\n\n    Parameters:\n    tuple_list (list of tuple of int): A list where each element is a tuple containing two integers.\n\n    Returns:\n    int: The maximum absolute product found among the tuples.\n\n    Raises:\n    ValueError: If the input is not a list of tuples or if any tuple does not contain exactly two integers.\n    \"\"\"\n    # Validate input\n    if not isinstance(tuple_list, list):\n        raise ValueError(\"Input must be a list of tuples.\")\n    \n    for item in tuple_list:\n        if not isinstance(item, tuple) or len(item) != 2:\n            raise ValueError(\"Each item in the list must be a tuple containing exactly two integers.\")\n        if not all(isinstance(x, int) for x in item):\n            raise ValueError(\"Each tuple must contain only integers.\")\n\n    # Initialize the maximum product with a very low value\n    max_product = float('-inf')\n\n    # Iterate through each tuple in the list\n    for a, b in tuple_list:\n        # Calculate the absolute product of the two numbers\n        product = abs(a * b)\n        # Update the maximum product if the current product is larger\n        if product > max_product:\n            max_product = product\n\n    return max_product\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of pairs of integers in a list of tuples.\n\n    Parameters:\n    tuples (list of tuple of int): A list where each element is a tuple containing two integers.\n\n    Returns:\n    int: The maximum absolute product of any tuple in the list. Returns None for an empty list.\n    \"\"\"\n    # Handle the edge case of an empty list\n    if not tuples:\n        return None\n\n    # Initialize the maximum product variable\n    max_product = None\n\n    # Iterate over each tuple in the list\n    for tup in tuples:\n        # Calculate the product of the elements in the tuple\n        product = abs(tup[0] * tup[1])\n\n        # Update the maximum product if the current product is larger\n        if max_product is None or product > max_product:\n            max_product = product\n\n    # Return the maximum absolute product found\n    return max_product\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of pairs of integers in a list of tuples.\n\n    Parameters:\n    tuples (list of tuple of int): A list containing tuples of two integers.\n\n    Returns:\n    int: The maximum absolute product found among the tuples.\n    \"\"\"\n    # Handle the edge case where the list is empty\n    if not tuples:\n        return 0\n\n    # Initialize the maximum product to zero\n    max_product = 0\n\n    # Iterate through each tuple in the list\n    for tup in tuples:\n        # Calculate the product of the elements in the tuple\n        product = abs(tup[0] * tup[1])\n        \n        # Update the maximum product if the current product is larger\n        if product > max_product:\n            max_product = product\n\n    return max_product\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of pairs in a list of tuples.\n\n    Parameters:\n    tuples (list of tuple of int): A list containing tuples of two integers.\n\n    Returns:\n    int: The maximum absolute product of any tuple pair, or None if the list is empty.\n    \"\"\"\n    # Handle the edge case where the list is empty\n    if not tuples:\n        return None\n\n    # Initialize the maximum product with a very small number\n    max_product = float('-inf')\n\n    # Iterate through each tuple in the list\n    for a, b in tuples:\n        # Calculate the absolute product of the two numbers in the tuple\n        product = abs(a * b)\n        \n        # Update the maximum product if the current product is larger\n        if product > max_product:\n            max_product = product\n\n    return max_product\n\n# Example usage:\n# result = max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n# print(result)  # Output should be 36\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of numbers in pairs of tuples.\n\n    Parameters:\n    tuples (list of tuple of int): A list of tuples, each containing two integers.\n\n    Returns:\n    int: The maximum absolute product of any tuple in the list.\n    \"\"\"\n    # Initialize the maximum absolute product with a very small number\n    max_abs_product = float('-inf')\n\n    # Iterate through each tuple in the list\n    for pair in tuples:\n        # Calculate the product of the two numbers in the tuple\n        product = pair[0] * pair[1]\n        # Calculate the absolute value of the product\n        abs_product = abs(product)\n        # Update the maximum absolute product if the current one is larger\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n\n    # Return the maximum absolute product found\n    return max_abs_product\n\n# Example usage:\n# print(max_product_tuple([(0, 0), (0, 0)]))  # Output: 0\n# print(max_product_tuple([(1, -1), (-1, 1)]))  # Output: 1\n# print(max_product_tuple([(2, -3), (-4, 5)]))  # Output: 20\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of pairs of numbers in the given list of tuples.\n\n    Parameters:\n    tuples (list of tuple of int): A list containing tuples of two integers.\n\n    Returns:\n    int: The maximum absolute product found among the tuples.\n    \"\"\"\n    # Handle the edge case where the list is empty\n    if not tuples:\n        return 0\n\n    # Initialize the maximum absolute product with a very small number\n    max_abs_product = float('-inf')\n\n    # Iterate through each tuple in the list\n    for a, b in tuples:\n        # Calculate the product of the two numbers in the tuple\n        product = a * b\n        # Compute the absolute value of the product\n        abs_product = abs(product)\n        # Update the maximum absolute product if the current one is larger\n        max_abs_product = max(max_abs_product, abs_product)\n\n    # Return the maximum absolute product found\n    return max_abs_product\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of numbers in pairs of tuples.\n\n    Parameters:\n    tuples (list of tuple of int): A list of tuples, each containing two integers.\n\n    Returns:\n    int: The maximum absolute product of any tuple in the list.\n\n    Raises:\n    ValueError: If the input list is empty or contains non-numeric values.\n    \"\"\"\n    if not tuples:\n        raise ValueError(\"Input list is empty.\")\n    \n    max_product = float('-inf')  # Initialize with negative infinity to ensure any product is larger\n\n    for pair in tuples:\n        if not all(isinstance(x, int) for x in pair):\n            raise ValueError(\"All elements in tuples must be integers.\")\n        \n        product = abs(pair[0] * pair[1])  # Calculate the absolute product\n        max_product = max(max_product, product)  # Update max_product if current product is larger\n\n    return max_product\n"], "plans": ["requirement analysis:\nThe function should efficiently compute the maximum absolute product from pairs of numbers in tuples. It must handle edge cases such as negative numbers and zero, ensuring accurate results.\nrequirement pool:\n- Implement the main function to calculate the maximum absolute product\n- Optimize the function for large datasets\n- Provide clear documentation on function usage\n- Include examples and edge case handling in documentation\n- Ensure compatibility with different Python versions\nWe will implement a function that iterates through each tuple in the list, calculates the absolute product of the numbers in the tuple, and keeps track of the maximum product found. We will use Python's built-in functions to ensure efficiency and simplicity. The function will handle negative numbers and zero by using the absolute value of the product.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum absolute product'\n    Explanation: This refers to finding the largest product value when considering the absolute values of numbers in each tuple. The absolute value ensures that negative numbers do not affect the product negatively.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': This indicates that we need to find the largest product value among all calculated products from the tuples.\n\n# [code logic]\n    1. Initialize a variable to store the maximum product, starting with a very small number or negative infinity.\n    2. Iterate through each tuple in the list.\n    3. For each tuple, calculate the product of its elements.\n    4. Take the absolute value of the product.\n    5. Compare this absolute product with the current maximum product and update the maximum if this one is larger.\n    6. After iterating through all tuples, return the maximum product found.\n\n# [edge case] \n    max_product_tuple([(0, 0), (0, 0)]) = 0\n    Explanation: All products are zero, so the maximum absolute product is zero.\n    \n    max_product_tuple([(-1, -1), (1, 1)]) = 1\n    Explanation: The absolute products are both 1, so the maximum is 1.\n    \n    max_product_tuple([(2, -3), (-4, -5)]) = 20\n    Explanation: The absolute products are 6 and 20, so the maximum is 20.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating absolute products and comparing them will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently compute the maximum absolute product from pairs of numbers in tuples. It must handle various input sizes and provide clear error messages for incorrect formats.\nrequirement pool:\n- Implement the main function to calculate the maximum absolute product.\n- Ensure the function handles large lists efficiently.\n- Provide error handling for incorrect input formats.\n- Optimize performance for larger datasets.\n- Enhance user documentation for better understanding.\nWe will implement a function that iterates through each tuple in the list, calculates the absolute product of the numbers in each tuple, and keeps track of the maximum product found. We will use Python's built-in capabilities for handling lists and tuples efficiently. Additionally, we will include error handling to ensure the input is a list of tuples with numeric values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum absolute product'\n    Explanation: This refers to the highest product value obtained by multiplying the numbers in each tuple, considering only the absolute values of the numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': This indicates that we need to find the largest product value among all the tuples.\n\n# [code logic]\n    1. Initialize a variable to store the maximum product, starting with a very small number (e.g., negative infinity).\n    2. Iterate through each tuple in the list.\n    3. For each tuple, calculate the product of its elements.\n    4. Compare the absolute value of this product with the current maximum product.\n    5. If the current product is greater, update the maximum product.\n    6. After iterating through all tuples, return the maximum product found.\n\n# [edge case] \n    max_product_tuple([(0, 0), (0, 0)]) = 0\n    Explanation: All products are zero, so the maximum absolute product is zero.\n    \n    max_product_tuple([(1, -1), (-1, 1)]) = 1\n    Explanation: The absolute products are all 1, so the maximum is 1.\n    \n    max_product_tuple([(1000, 0), (0, 1000)]) = 0\n    Explanation: The presence of zero in each tuple results in a product of zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating and comparing absolute products will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently compute the maximum absolute product from pairs of tuples, ensuring it handles edge cases such as negative numbers and zero values. It should be optimized for performance, especially when dealing with large lists.\nrequirement pool:\n- Implement the main function to calculate the maximum absolute product.\n- Ensure the function handles edge cases like negative numbers and zeros.\n- Optimize the function for performance with large datasets.\n- Provide documentation for easy integration.\n- Include test cases to validate functionality.\nWe will implement a function that iterates through each tuple in the list, calculates the absolute product of the two numbers in each tuple, and keeps track of the maximum product found. We will use Python's built-in functions to ensure simplicity and efficiency, as they are well-suited for this task. The function will handle edge cases such as negative numbers and zero values by using the absolute value of the product.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum absolute product'\n    Explanation: This refers to the highest product value obtained by multiplying two numbers from a tuple, considering the absolute value of the product.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': This indicates that we need to find the largest product value among all the tuples after considering the absolute value.\n\n# [code logic]\n    1. Initialize a variable to store the maximum product, starting with a very small number (e.g., negative infinity).\n    2. Iterate through each tuple in the list.\n    3. For each tuple, calculate the product of its two numbers.\n    4. Take the absolute value of the product.\n    5. Compare this absolute product with the current maximum product and update the maximum if this one is larger.\n    6. After iterating through all tuples, return the maximum product found.\n\n# [edge case] \n    max_product_tuple([(0, 0), (0, 0)]) = 0\n    Explanation: All products are zero, so the maximum absolute product is zero.\n    \n    max_product_tuple([(-1, -1), (1, 1)]) = 1\n    Explanation: The absolute products are both 1, so the maximum is 1.\n    \n    max_product_tuple([(2, -3), (-4, -5)]) = 20\n    Explanation: The absolute products are 6 and 20, so the maximum is 20.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the absolute product and comparing it with the current maximum will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently compute the maximum product from pairs of tuples, ensuring it handles edge cases such as negative numbers and zero. It should also provide clear feedback for invalid inputs.\nrequirement pool:\n- Implement the main function to calculate maximum product\n- Optimize the function for performance with large datasets\n- Include error handling for invalid inputs\n- Document the function usage and edge cases\n- Test the function with various input scenarios\nWe will implement a function that iterates through each tuple in the list, calculates the absolute product of the numbers in each tuple, and keeps track of the maximum product found. We will use Python's built-in capabilities for handling lists and tuples efficiently. Additionally, we will include error handling to ensure the input is valid, such as checking if the input is a list of tuples and if each tuple contains exactly two numbers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum absolute product'\n    Explanation: This refers to finding the largest product value when considering the absolute values of numbers within each tuple.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': means we need to find the largest product value among all tuples\n\n# [code logic]\n    1. Initialize a variable to keep track of the maximum product found, starting with a very low value.\n    2. Iterate through each tuple in the list.\n    3. For each tuple, calculate the absolute product of its two numbers.\n    4. Compare this product with the current maximum product and update if it's larger.\n    5. Return the maximum product found after iterating through all tuples.\n\n# [edge case] \n    max_product_tuple([(0, 0), (0, 1)]) = 0\n    Explanation: The product of (0, 0) is 0, and the product of (0, 1) is also 0. The maximum product is 0.\n    \n    max_product_tuple([(1, -1), (-1, 1)]) = 1\n    Explanation: The absolute product of both tuples is 1, which is the maximum product.\n    \n    max_product_tuple([(2, -3), (-2, 3)]) = 6\n    Explanation: The absolute product of both tuples is 6, which is the maximum product.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each tuple and calculating the absolute product will naturally handle these cases.\n", "requirement analysis:\nThe function should iterate over a list of tuples, calculate the product of each tuple, and return the maximum absolute product. It should handle both positive and negative numbers efficiently.\nrequirement pool:\n- Implement the main function to calculate maximum absolute product\n- Ensure the function handles edge cases like empty lists or tuples with zero\n- Optimize the function for performance with large datasets\n- Provide comprehensive documentation and examples\n- Include unit tests to verify function correctness\nWe will implement a function named max_product_tuple that iterates over a list of tuples, calculates the product of each tuple, and returns the maximum absolute product. The function will handle edge cases such as empty lists and tuples containing zero. We will use Python's built-in capabilities to ensure simplicity and efficiency, avoiding the need for external libraries given the straightforward nature of the task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum absolute product'\n    Explanation: This refers to finding the largest product value when considering the absolute values of numbers within pairs of tuples.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': means we need to find the largest product value among all pairs of tuples\n\n# [code logic]\n    1. Initialize a variable to store the maximum product, starting with a very small number or None.\n    2. Iterate over each tuple in the list.\n    3. For each tuple, calculate the product of its elements.\n    4. Compare the absolute value of this product with the current maximum product.\n    5. Update the maximum product if the current product is larger.\n    6. Return the maximum product after iterating through all tuples.\n\n# [edge case] \n    max_product_tuple([]) = None\n    Explanation: An empty list means there are no tuples to calculate a product from, so the expected output is None.\n    \n    max_product_tuple([(0, 5), (3, 0)]) = 0\n    Explanation: The product of any tuple containing zero will be zero, which is the maximum absolute product in this case.\n    \n    max_product_tuple([(1, -1), (-2, -3)]) = 6\n    Explanation: The absolute products are 1 and 6, respectively. The maximum absolute product is 6.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not lst:\n            return None\n        max_product = None\n        for tup in lst:\n            product = abs(tup[0] * tup[1])\n            if max_product is None or product > max_product:\n                max_product = product\n        return max_product\n", "requirement analysis:\nThe function should iterate through each tuple in the list, calculate the product of the two numbers, and keep track of the maximum product found. It should handle both positive and negative numbers to ensure the absolute maximum product is found.\nrequirement pool:\n- Implement the core function to calculate maximum absolute product\n- Ensure the function handles edge cases such as empty lists or tuples with zero\n- Write comprehensive documentation and examples\n- Optimize the function for performance with large datasets\n- Include unit tests to verify function correctness\nWe will implement a simple function using built-in Python functions to iterate through the list of tuples, calculate the product of each tuple, and track the maximum absolute product. This approach ensures efficiency and readability without over-engineering the solution. We will also handle edge cases such as empty lists and tuples containing zero.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum absolute product'\n    Explanation: This refers to finding the largest product value when considering the absolute values of numbers within pairs of tuples.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': means we need to find the largest product value among all pairs of tuples\n\n# [code logic]\n    - Initialize a variable to store the maximum product found, starting with a very small number or zero.\n    - Iterate through each tuple in the list.\n    - For each tuple, calculate the product of its elements.\n    - Compare the absolute value of this product with the current maximum product and update if it's larger.\n    - Return the maximum product found after iterating through all tuples.\n\n# [edge case] \n    max_product_tuple([]) = 0\n    Explanation: An empty list means there are no tuples to calculate a product from, so the expected output is 0.\n    \n    max_product_tuple([(0, 5), (3, 0)]) = 0\n    Explanation: Any tuple containing a zero will have a product of zero, so the maximum absolute product is 0.\n    \n    max_product_tuple([(1, -1), (-1, 1)]) = 1\n    Explanation: The absolute product of both tuples is 1, which is the maximum absolute product.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not lst:\n            return 0\n        max_product = 0\n        for tup in lst:\n            product = abs(tup[0] * tup[1])\n            if product > max_product:\n                max_product = product\n        return max_product\n", "requirement analysis:\nThe function should iterate through each tuple, calculate the product of the two numbers, and keep track of the maximum product found. It should handle negative numbers by considering the absolute value of the product.\nrequirement pool:\n- Implement the function to calculate the product of tuple pairs\n- Ensure the function returns the maximum absolute product\n- Optimize the function for performance with large lists\n- Include error handling for invalid inputs\n- Provide documentation and examples for usage\nWe will implement a function that iterates through each tuple in the list, calculates the absolute product of the two numbers in the tuple, and keeps track of the maximum absolute product found. We will use Python's built-in functions for simplicity and efficiency, ensuring the function handles large lists efficiently. We will also include error handling for invalid inputs such as empty lists or non-numeric values in tuples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum absolute product'\n    Explanation: This refers to the highest value obtained by multiplying the two numbers in each tuple, considering only the magnitude of the product (ignoring the sign).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': This indicates that we need to find the largest product value among all the tuples.\n\n# [code logic]\n    1. Initialize a variable to store the maximum product, starting with a very small number (e.g., negative infinity).\n    2. Iterate through each tuple in the list.\n    3. For each tuple, calculate the absolute product of its two numbers.\n    4. Compare this product with the current maximum product and update the maximum if this product is larger.\n    5. After iterating through all tuples, return the maximum product found.\n\n# [edge case] \n    max_product_tuple([]) = None\n    Explanation: An empty list has no tuples to calculate a product from, so the function should return None or handle it gracefully.\n    \n    max_product_tuple([(0, 0), (0, 0)]) = 0\n    Explanation: All products are zero, so the maximum absolute product is zero.\n    \n    max_product_tuple([(1, -1), (-1, 1)]) = 1\n    Explanation: The absolute products are all 1, so the maximum absolute product is 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not lst:\n            return None\n        max_product = float('-inf')\n        for a, b in lst:\n            product = abs(a * b)\n            if product > max_product:\n                max_product = product\n        return max_product\n", "requirement analysis:\nThe function should iterate through each tuple, calculate the product of the numbers, and track the maximum absolute product. It should handle edge cases such as negative numbers and zero.\nrequirement pool:\n- Implement the main function logic to calculate maximum absolute product\n- Include error handling for invalid inputs\n- Optimize the function for performance with large datasets\n- Provide comprehensive documentation and examples\n- Ensure compatibility with different Python versions\nWe will implement a function that iterates through each tuple in the list, calculates the product of the numbers in each tuple, and tracks the maximum absolute product. We will use Python's built-in functions to keep the implementation simple and efficient. The function will handle edge cases such as negative numbers and zero by using the absolute value of the product. We will also include error handling to manage invalid inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum absolute product'\n    Explanation: This refers to the highest value obtained by multiplying the numbers in each tuple, considering the absolute value of the product. This means that negative products are treated as positive when determining the maximum.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': This indicates that we need to find the highest absolute product among all the tuples.\n\n# [code logic]\n    1. Initialize a variable to store the maximum absolute product, starting with a very small number (e.g., negative infinity).\n    2. Iterate through each tuple in the list.\n    3. For each tuple, calculate the product of its two numbers.\n    4. Take the absolute value of the product.\n    5. Compare this absolute product with the current maximum and update the maximum if this product is larger.\n    6. After iterating through all tuples, return the maximum absolute product found.\n\n# [edge case] \n    max_product_tuple([(0, 0), (0, 0)]) = 0\n    Explanation: All products are zero, so the maximum absolute product is zero.\n    \n    max_product_tuple([(1, -1), (-1, 1)]) = 1\n    Explanation: The absolute products are all 1, so the maximum is 1.\n    \n    max_product_tuple([(2, -3), (-4, 5)]) = 20\n    Explanation: The products are -6 and -20, with absolute values 6 and 20, respectively. The maximum absolute product is 20.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of taking the absolute value and comparing it with the current maximum will naturally handle these cases.\n", "requirement analysis:\nThe function should iterate through each tuple, calculate the product of the numbers, and return the maximum absolute product found. It should handle both positive and negative numbers efficiently.\nrequirement pool:\n- Implement the main function to calculate maximum absolute product\n- Ensure the function handles edge cases like empty lists or single-element tuples\n- Optimize the function for performance with large lists\n- Provide documentation and examples for user understanding\n- Test the function with various datasets to ensure accuracy\nWe will implement a function that iterates through each tuple in the list, calculates the product of the numbers in the tuple, and keeps track of the maximum absolute product found. We will use Python's built-in functions to ensure efficiency and simplicity. The function will handle edge cases such as empty lists or tuples with zero or negative numbers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum absolute product'\n    Explanation: This refers to the largest product value obtained from multiplying the numbers in each tuple, considering the absolute value of the product. This means that even if the product is negative, its absolute value is considered for comparison.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': This indicates that we need to find the largest absolute product among all the tuples in the list.\n\n# [code logic]\n    1. Initialize a variable to store the maximum absolute product, starting with a very small number (e.g., negative infinity).\n    2. Iterate through each tuple in the list.\n    3. For each tuple, calculate the product of its two numbers.\n    4. Compute the absolute value of this product.\n    5. Compare this absolute value with the current maximum absolute product and update it if it's larger.\n    6. After iterating through all tuples, return the maximum absolute product found.\n\n# [edge case] \n    max_product_tuple([]) = 0\n    Explanation: An empty list means there are no tuples to calculate a product from, so the expected output is 0.\n    \n    max_product_tuple([(0, 0), (0, 1)]) = 0\n    Explanation: The products of these tuples are 0 and 0, respectively. The maximum absolute product is 0.\n    \n    max_product_tuple([(-1, -1), (1, 1)]) = 1\n    Explanation: The products are 1 and 1, respectively. The maximum absolute product is 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not lst:\n            return 0\n        max_abs_product = float('-inf')\n        for a, b in lst:\n            product = a * b\n            max_abs_product = max(max_abs_product, abs(product))\n        return max_abs_product\n", "requirement analysis:\nThe function should iterate through each tuple, calculate the product of the numbers, and keep track of the maximum product found. It should handle edge cases such as empty lists or tuples with non-numeric values.\nrequirement pool:\n- Implement the main function to calculate maximum product\n- Optimize the function for performance with large datasets\n- Add error handling for invalid inputs\n- Document the function usage and edge cases\n- Test the function with various input scenarios\nWe will implement a function that iterates through each tuple in the list, calculates the absolute product of the numbers in each tuple, and keeps track of the maximum product found. We will use error handling to manage invalid inputs such as non-numeric values or empty lists. The function will be optimized for performance by using efficient iteration and calculation methods.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum absolute product'\n    Explanation: This refers to finding the highest product value when multiplying the numbers in each tuple, considering the absolute values of the numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': This indicates that we need to find the highest product value among all the tuples.\n\n# [code logic]\n    1. Initialize a variable to store the maximum product, starting with a very low value (e.g., negative infinity).\n    2. Iterate through each tuple in the list.\n    3. For each tuple, calculate the product of its elements.\n    4. Take the absolute value of the product.\n    5. Compare this absolute product with the current maximum product and update the maximum if this one is larger.\n    6. Return the maximum product found.\n\n# [edge case] \n    max_product_tuple([(0, 0), (0, 1)]) = 0\n    Explanation: The product of any tuple containing zero will be zero, and since all products are zero, the maximum is zero.\n    \n    max_product_tuple([(1, -1), (-2, -3)]) = 6\n    Explanation: The absolute product of (1, -1) is 1, and for (-2, -3) it is 6. The maximum absolute product is 6.\n    \n    max_product_tuple([(2, 3), (3, 2), (2, -3)]) = 6\n    Explanation: The absolute products are 6 for (2, 3), 6 for (3, 2), and 6 for (2, -3). The maximum is 6.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the absolute product and comparing it with the current maximum will naturally handle these cases.\n"], "test": ["def check(max_product_tuple):\n\tassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "def check(max_product_tuple):\n\tassert max_product_tuple([(10,20), (15,2), (5,10)] )==200", "def check(max_product_tuple):\n\tassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 12), (2, 4), (1, 9), (6, 6)]) == 60", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 9), (3, 4), (6, 5), (2, 4)]) == 30", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 2), (3, 11), (2, 12), (4, 14)]) == 56", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 10), (4, 5), (5, 12), (3, 12)]) == 70", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 2), (1, 8), (4, 8), (8, 12)]) == 96", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 6), (2, 9), (2, 3), (2, 10)]) == 20", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 2), (1, 10), (1, 6), (5, 10)]) == 50", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 6), (1, 8), (6, 4), (9, 4)]) == 36", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 10), (5, 3), (6, 10), (7, 7)]) == 60", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 7), (5, 2), (5, 12), (9, 14)]) == 126", "def check(max_product_tuple):\n\tassert max_product_tuple([(1, 3), (2, 9), (3, 9), (2, 8)]) == 27", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 3), (4, 5), (2, 5), (7, 10)]) == 70", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 10), (3, 9), (6, 9), (7, 4)]) == 54", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 7), (4, 8), (5, 13), (2, 7)]) == 65", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 12), (4, 6), (3, 8), (6, 6)]) == 84", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 3), (4, 5), (1, 9), (8, 7)]) == 56", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 9), (6, 1), (3, 9), (3, 14)]) == 42", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 9), (2, 4), (4, 6), (6, 11)]) == 66", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 9), (3, 5), (1, 11), (6, 12)]) == 72", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 10), (3, 1), (4, 12), (7, 9)]) == 63", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 5), (4, 7), (2, 8), (5, 11)]) == 55", "def check(max_product_tuple):\n\tassert max_product_tuple([(4, 8), (5, 9), (3, 7), (3, 6)]) == 45", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 3), (2, 7), (5, 4), (5, 11)]) == 55", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 3), (3, 8), (5, 7), (7, 12)]) == 84", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 10), (4, 7), (4, 7), (1, 10)]) == 60", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 12), (4, 3), (4, 8), (9, 7)]) == 63", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 11), (6, 9), (1, 11), (5, 12)]) == 77", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 6), (2, 8), (1, 12), (6, 14)]) == 84", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 6), (6, 9), (2, 9), (9, 4)]) == 54", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 10), (4, 8), (2, 5), (3, 4)]) == 32", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 4), (2, 3), (1, 5), (8, 11)]) == 88", "def check(max_product_tuple):\n\tassert max_product_tuple([(4, 11), (4, 11), (3, 3), (1, 9)]) == 44", "def check(max_product_tuple):\n\tassert max_product_tuple([(4, 12), (1, 8), (4, 8), (5, 4)]) == 48", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 15), (11, 5), (9, 6)]) == 195", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 15), (17, 7), (1, 10)]) == 135", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 18), (12, 5), (5, 14)]) == 162", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 15), (15, 4), (10, 5)]) == 225", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 17), (15, 1), (8, 6)]) == 204", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 23), (15, 7), (2, 9)]) == 299", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 19), (16, 7), (3, 9)]) == 133", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 17), (20, 7), (5, 13)]) == 238", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 25), (19, 1), (6, 5)]) == 175", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 25), (11, 4), (2, 11)]) == 175", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 18), (12, 4), (6, 14)]) == 252", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 20), (14, 5), (4, 11)]) == 260", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 20), (16, 2), (2, 7)]) == 200", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 20), (18, 4), (2, 9)]) == 140", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 18), (17, 2), (9, 11)]) == 99", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 23), (13, 1), (5, 11)]) == 322", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 23), (16, 6), (7, 7)]) == 276", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 19), (12, 1), (7, 10)]) == 190", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 20), (19, 6), (8, 10)]) == 200", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 18), (12, 3), (10, 10)]) == 270", "def check(max_product_tuple):\n\tassert max_product_tuple([(8, 24), (18, 3), (8, 11)]) == 192", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 15), (17, 6), (3, 7)]) == 150", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 25), (18, 5), (6, 10)]) == 150", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 20), (13, 6), (10, 10)]) == 300", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 22), (12, 2), (9, 11)]) == 198", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 18), (13, 2), (7, 15)]) == 105", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 24), (10, 7), (9, 11)]) == 360", "def check(max_product_tuple):\n\tassert max_product_tuple([(8, 19), (12, 5), (3, 5)]) == 152", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 18), (10, 1), (6, 7)]) == 216", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 18), (16, 7), (6, 7)]) == 252", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 24), (17, 3), (1, 15)]) == 360", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 22), (11, 4), (4, 13)]) == 110", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 21), (13, 6), (8, 11)]) == 315", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 42), (13, 15), (25, 8), (8, 5)]) == 420", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 45), (12, 10), (23, 8), (15, 5)]) == 630", "def check(max_product_tuple):\n\tassert max_product_tuple([(16, 43), (14, 18), (20, 9), (12, 13)]) == 688", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 46), (13, 16), (23, 2), (13, 9)]) == 414", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 40), (8, 16), (21, 8), (7, 14)]) == 240", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 46), (11, 15), (17, 4), (8, 11)]) == 644", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 42), (9, 20), (17, 10), (10, 4)]) == 630", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 43), (5, 15), (20, 3), (7, 6)]) == 387", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 44), (15, 18), (20, 2), (11, 9)]) == 616", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 43), (13, 11), (25, 3), (10, 6)]) == 430", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 42), (11, 18), (19, 4), (10, 8)]) == 588", "def check(max_product_tuple):\n\tassert max_product_tuple([(11, 46), (13, 11), (19, 1), (11, 10)]) == 506", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 47), (14, 15), (17, 10), (10, 5)]) == 658", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 40), (15, 17), (17, 10), (11, 7)]) == 560", "def check(max_product_tuple):\n\tassert max_product_tuple([(8, 40), (8, 15), (25, 6), (8, 11)]) == 320", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 40), (11, 11), (22, 8), (16, 7)]) == 520", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 42), (13, 14), (25, 1), (13, 10)]) == 546", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 45), (12, 15), (25, 6), (15, 5)]) == 585", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 48), (12, 16), (16, 9), (14, 4)]) == 336", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 44), (11, 16), (25, 1), (11, 14)]) == 660", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 44), (8, 13), (18, 9), (13, 4)]) == 572", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 45), (5, 18), (17, 6), (11, 14)]) == 675", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 41), (14, 10), (21, 10), (11, 11)]) == 410", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 45), (9, 18), (17, 7), (13, 6)]) == 675", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 49), (10, 17), (15, 5), (16, 12)]) == 490", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 48), (9, 16), (20, 6), (11, 14)]) == 576", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 47), (9, 12), (23, 7), (16, 8)]) == 423", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 44), (12, 19), (21, 1), (15, 12)]) == 616", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 40), (5, 18), (23, 10), (10, 7)]) == 480", "def check(max_product_tuple):\n\tassert max_product_tuple([(16, 40), (6, 20), (18, 3), (12, 5)]) == 640", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 48), (13, 15), (16, 5), (10, 10)]) == 288", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 44), (9, 20), (19, 8), (17, 5)]) == 308", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 46), (14, 16), (25, 10), (9, 10)]) == 598"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of numbers in pairs of tuples.\n\n    Parameters:\n    tuples (list of tuple of int): A list of tuples, each containing two integers.\n\n    Returns:\n    int: The maximum absolute product of any tuple in the list.\n\n    Raises:\n    ValueError: If the input list is empty or contains non-numeric values.\n    \"\"\"\n    if not tuples:\n        raise ValueError(\"Input list is empty.\")\n    \n    max_product = float('-inf')  # Initialize with negative infinity to ensure any product is larger\n\n    for pair in tuples:\n        if not all(isinstance(x, int) for x in pair):\n            raise ValueError(\"All elements in tuples must be integers.\")\n        \n        product = abs(pair[0] * pair[1])  # Calculate the absolute product\n        max_product = max(max_product, product)  # Update max_product if current product is larger\n\n    return max_product\n", "passed": true, "pass": true, "pass_num": 10, "round": 50, "mutate_method": "condense_two2one", "parent_index": 50}
