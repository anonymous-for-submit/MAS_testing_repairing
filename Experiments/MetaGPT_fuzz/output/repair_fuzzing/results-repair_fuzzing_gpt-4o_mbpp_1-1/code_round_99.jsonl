{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 265, "prompt": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. Be sure to handle edge cases such as an empty list or a negative value for n in your implementation.", "code": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]", "test_imports": [], "test_list": ["assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ", "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ", "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ", "assert list_split(['j', 'q', 'l', 'd', 'n', 'j', 'm', 'j', 'b', 'w', 'v', 'u', 'q', 'z'], 6) == [['j', 'm', 'q'], ['q', 'j', 'z'], ['l', 'b'], ['d', 'w'], ['n', 'v'], ['j', 'u']]", "assert list_split(['j', 's', 'n', 'f', 's', 'q', 'f', 'v', 'k', 'd', 'q', 'm', 'c', 'q'], 2) == [['j', 'n', 's', 'f', 'k', 'q', 'c'], ['s', 'f', 'q', 'v', 'd', 'm', 'q']]", "assert list_split(['h', 'k', 't', 'a', 'b', 'p', 'h', 's', 'y', 'm', 'x', 'f', 'u', 'f'], 4) == [['h', 'b', 'y', 'u'], ['k', 'p', 'm', 'f'], ['t', 'h', 'x'], ['a', 's', 'f']]", "assert list_split(['x', 'j', 'w', 'x', 'b', 'x', 'w', 'm', 'b', 'b', 'y', 'p', 'g', 'o'], 6) == [['x', 'w', 'g'], ['j', 'm', 'o'], ['w', 'b'], ['x', 'b'], ['b', 'y'], ['x', 'p']]", "assert list_split(['u', 'j', 'm', 'i', 'h', 't', 'q', 'c', 'w', 'e', 'y', 'o', 'o', 'e'], 2) == [['u', 'm', 'h', 'q', 'w', 'y', 'o'], ['j', 'i', 't', 'c', 'e', 'o', 'e']]", "assert list_split(['s', 'z', 'j', 'y', 'c', 'p', 'i', 'd', 'l', 'v', 'o', 'k', 'y', 'a'], 3) == [['s', 'y', 'i', 'v', 'y'], ['z', 'c', 'd', 'o', 'a'], ['j', 'p', 'l', 'k']]", "assert list_split(['p', 'o', 'u', 'd', 'r', 'w', 'b', 'u', 'j', 't', 'a', 'v', 'c', 'b'], 8) == [['p', 'j'], ['o', 't'], ['u', 'a'], ['d', 'v'], ['r', 'c'], ['w', 'b'], ['b'], ['u']]", "assert list_split(['v', 'e', 'z', 'w', 'u', 'h', 'j', 'o', 'f', 'n', 't', 'p', 'u', 'k'], 6) == [['v', 'j', 'u'], ['e', 'o', 'k'], ['z', 'f'], ['w', 'n'], ['u', 't'], ['h', 'p']]", "assert list_split(['d', 'l', 'p', 'v', 'j', 'k', 'v', 'p', 'b', 'f', 'i', 'w', 'b', 'r'], 5) == [['d', 'k', 'i'], ['l', 'v', 'w'], ['p', 'p', 'b'], ['v', 'b', 'r'], ['j', 'f']]", "assert list_split(['k', 'u', 'c', 't', 'n', 'd', 'y', 'e', 'n', 'b', 'f', 'z', 'k', 'm'], 5) == [['k', 'd', 'f'], ['u', 'y', 'z'], ['c', 'e', 'k'], ['t', 'n', 'm'], ['n', 'b']]", "assert list_split(['b', 'm', 'f', 'p', 'p', 'v', 'p', 'n', 'v', 'h', 'g', 'h', 'h', 'l'], 7) == [['b', 'n'], ['m', 'v'], ['f', 'h'], ['p', 'g'], ['p', 'h'], ['v', 'h'], ['p', 'l']]", "assert list_split(['w', 'j', 'm', 'h', 'y', 'c', 'k', 'e', 'v', 's', 'f', 'q', 'l', 'p'], 8) == [['w', 'v'], ['j', 's'], ['m', 'f'], ['h', 'q'], ['y', 'l'], ['c', 'p'], ['k'], ['e']]", "assert list_split(['v', 'g', 'm', 'i', 'v', 'u', 'b', 'i', 'b', 'c', 'j', 'j', 's', 'z'], 5) == [['v', 'u', 'j'], ['g', 'b', 'j'], ['m', 'i', 's'], ['i', 'b', 'z'], ['v', 'c']]", "assert list_split(['z', 'm', 'x', 'r', 'i', 't', 'p', 'o', 'u', 'n', 'a', 'j', 'e', 'i'], 2) == [['z', 'x', 'i', 'p', 'u', 'a', 'e'], ['m', 'r', 't', 'o', 'n', 'j', 'i']]", "assert list_split(['q', 'p', 'l', 't', 'i', 'd', 'k', 'x', 'n', 'j', 'g', 'i', 'k', 'l'], 8) == [['q', 'n'], ['p', 'j'], ['l', 'g'], ['t', 'i'], ['i', 'k'], ['d', 'l'], ['k'], ['x']]", "assert list_split(['g', 'j', 'q', 'y', 's', 'g', 'l', 'x', 't', 't', 'c', 's', 'm', 'h'], 8) == [['g', 't'], ['j', 't'], ['q', 'c'], ['y', 's'], ['s', 'm'], ['g', 'h'], ['l'], ['x']]", "assert list_split(['d', 'i', 'b', 's', 'b', 'g', 'g', 'i', 'l', 'd', 'm', 'y', 'x', 'z'], 5) == [['d', 'g', 'm'], ['i', 'g', 'y'], ['b', 'i', 'x'], ['s', 'l', 'z'], ['b', 'd']]", "assert list_split(['p', 'l', 's', 'w', 'l', 'p', 'f', 'd', 'w', 'i', 'j', 'l', 'h', 'n'], 3) == [['p', 'w', 'f', 'i', 'h'], ['l', 'l', 'd', 'j', 'n'], ['s', 'p', 'w', 'l']]", "assert list_split(['m', 'n', 'b', 'b', 'k', 'g', 'u', 'n', 'q', 'q', 'd', 't', 'y', 'a'], 3) == [['m', 'b', 'u', 'q', 'y'], ['n', 'k', 'n', 'd', 'a'], ['b', 'g', 'q', 't']]", "assert list_split(['c', 'p', 'e', 't', 'q', 'o', 'o', 'i', 'p', 'x', 'r', 'y', 'y', 'j'], 2) == [['c', 'e', 'q', 'o', 'p', 'r', 'y'], ['p', 't', 'o', 'i', 'x', 'y', 'j']]", "assert list_split(['j', 'r', 'o', 'f', 'f', 'u', 'x', 't', 'p', 'o', 'c', 'f', 'x', 'f'], 8) == [['j', 'p'], ['r', 'o'], ['o', 'c'], ['f', 'f'], ['f', 'x'], ['u', 'f'], ['x'], ['t']]", "assert list_split(['b', 'j', 'a', 'u', 'q', 'c', 't', 'd', 'h', 'a', 'x', 'r', 'x', 'o'], 8) == [['b', 'h'], ['j', 'a'], ['a', 'x'], ['u', 'r'], ['q', 'x'], ['c', 'o'], ['t'], ['d']]", "assert list_split(['n', 'r', 'r', 'j', 'e', 't', 'f', 's', 'x', 'x', 'y', 'b', 'e', 'z'], 6) == [['n', 'f', 'e'], ['r', 's', 'z'], ['r', 'x'], ['j', 'x'], ['e', 'y'], ['t', 'b']]", "assert list_split(['b', 'w', 'u', 'r', 'f', 'h', 't', 'o', 'f', 'm', 'k', 'g', 'l', 'f'], 6) == [['b', 't', 'l'], ['w', 'o', 'f'], ['u', 'f'], ['r', 'm'], ['f', 'k'], ['h', 'g']]", "assert list_split(['y', 'j', 'o', 'd', 'f', 'x', 'n', 'p', 'd', 'a', 'a', 's', 'l', 't'], 2) == [['y', 'o', 'f', 'n', 'd', 'a', 'l'], ['j', 'd', 'x', 'p', 'a', 's', 't']]", "assert list_split(['f', 'v', 'h', 'k', 'c', 'x', 'r', 'l', 'z', 'x', 'j', 'r', 'f', 'l'], 5) == [['f', 'x', 'j'], ['v', 'r', 'r'], ['h', 'l', 'f'], ['k', 'z', 'l'], ['c', 'x']]", "assert list_split(['b', 'j', 'd', 'm', 'v', 't', 'g', 'o', 'q', 'd', 'l', 'p', 'b', 'w'], 5) == [['b', 't', 'l'], ['j', 'g', 'p'], ['d', 'o', 'b'], ['m', 'q', 'w'], ['v', 'd']]", "assert list_split(['y', 'y', 'i', 'q', 'x', 'w', 'r', 'o', 'i', 't', 'd', 't', 'k', 'f'], 6) == [['y', 'r', 'k'], ['y', 'o', 'f'], ['i', 'i'], ['q', 't'], ['x', 'd'], ['w', 't']]", "assert list_split(['q', 'j', 'i', 'c', 'u', 'v', 'd', 'l', 'v', 'r', 'k', 'k', 'u', 'c'], 1) == [['q', 'j', 'i', 'c', 'u', 'v', 'd', 'l', 'v', 'r', 'k', 'k', 'u', 'c']]", "assert list_split(['p', 't', 'c', 'h', 'b', 'y', 'n', 'z', 'k', 'p', 'z', 'f', 'w', 'z'], 6) == [['p', 'n', 'w'], ['t', 'z', 'z'], ['c', 'k'], ['h', 'p'], ['b', 'z'], ['y', 'f']]", "assert list_split(['h', 'n', 'a', 'p', 'n', 't', 'z', 'u', 'j', 'n', 'z', 'w', 'a', 'h'], 5) == [['h', 't', 'z'], ['n', 'z', 'w'], ['a', 'u', 'a'], ['p', 'j', 'h'], ['n', 'n']]", "assert list_split(['h', 'g', 'h', 'v', 'j', 'm', 'f', 'y', 'y', 'a', 'r', 'z', 'h', 'c'], 1) == [['h', 'g', 'h', 'v', 'j', 'm', 'f', 'y', 'y', 'a', 'r', 'z', 'h', 'c']]", "assert list_split(['p', 'b', 'e', 't', 'q', 'y', 'f', 'o', 'r', 'i', 'r', 'b', 's', 'r'], 4) == [['p', 'q', 'r', 's'], ['b', 'y', 'i', 'r'], ['e', 'f', 'r'], ['t', 'o', 'b']]", "assert list_split([1, 7, 6, 6, 6, 7, 2, 13, 14, 8, 7, 15, 11, 13], 8) == [[1, 14], [7, 8], [6, 7], [6, 15], [6, 11], [7, 13], [2], [13]]", "assert list_split([2, 1, 6, 6, 3, 2, 10, 5, 6, 8, 8, 14, 15, 18], 4) == [[2, 3, 6, 15], [1, 2, 8, 18], [6, 10, 8], [6, 5, 14]]", "assert list_split([3, 2, 3, 6, 4, 11, 9, 8, 13, 9, 7, 10, 10, 9], 6) == [[3, 9, 10], [2, 8, 9], [3, 13], [6, 9], [4, 7], [11, 10]]", "assert list_split([6, 3, 7, 9, 3, 5, 8, 4, 10, 12, 12, 15, 14, 13], 4) == [[6, 3, 10, 14], [3, 5, 12, 13], [7, 8, 12], [9, 4, 15]]", "assert list_split([1, 5, 4, 5, 7, 3, 8, 8, 12, 9, 15, 9, 18, 15], 4) == [[1, 7, 12, 18], [5, 3, 9, 15], [4, 8, 15], [5, 8, 9]]", "assert list_split([4, 6, 4, 5, 9, 2, 4, 4, 12, 15, 10, 15, 16, 13], 1) == [[4, 6, 4, 5, 9, 2, 4, 4, 12, 15, 10, 15, 16, 13]]", "assert list_split([4, 5, 5, 1, 3, 9, 5, 12, 14, 13, 13, 12, 12, 16], 1) == [[4, 5, 5, 1, 3, 9, 5, 12, 14, 13, 13, 12, 12, 16]]", "assert list_split([5, 2, 2, 4, 7, 11, 3, 3, 12, 5, 13, 14, 16, 16], 3) == [[5, 4, 3, 5, 16], [2, 7, 3, 13, 16], [2, 11, 12, 14]]", "assert list_split([3, 4, 8, 6, 10, 8, 8, 8, 10, 13, 7, 17, 17, 16], 4) == [[3, 10, 10, 17], [4, 8, 13, 16], [8, 8, 7], [6, 8, 17]]", "assert list_split([1, 7, 5, 4, 2, 3, 11, 10, 6, 11, 14, 11, 8, 12], 4) == [[1, 2, 6, 8], [7, 3, 11, 12], [5, 11, 14], [4, 10, 11]]", "assert list_split([2, 1, 4, 8, 6, 1, 3, 6, 11, 15, 8, 7, 8, 10], 4) == [[2, 6, 11, 8], [1, 1, 15, 10], [4, 3, 8], [8, 6, 7]]", "assert list_split([1, 5, 8, 4, 3, 5, 9, 3, 6, 12, 8, 13, 12, 9], 8) == [[1, 6], [5, 12], [8, 8], [4, 13], [3, 12], [5, 9], [9], [3]]", "assert list_split([6, 6, 8, 5, 2, 7, 8, 13, 14, 10, 6, 9, 14, 14], 5) == [[6, 7, 6], [6, 8, 9], [8, 13, 14], [5, 14, 14], [2, 10]]", "assert list_split([3, 4, 8, 9, 6, 11, 6, 9, 6, 12, 6, 17, 18, 17], 3) == [[3, 9, 6, 12, 18], [4, 6, 9, 6, 17], [8, 11, 6, 17]]", "assert list_split([4, 5, 4, 9, 10, 6, 12, 4, 10, 9, 16, 13, 17, 10], 8) == [[4, 10], [5, 9], [4, 16], [9, 13], [10, 17], [6, 10], [12], [4]]", "assert list_split([1, 5, 5, 3, 6, 10, 3, 10, 12, 15, 12, 10, 14, 16], 2) == [[1, 5, 6, 3, 12, 12, 14], [5, 3, 10, 10, 15, 10, 16]]", "assert list_split([5, 5, 8, 7, 3, 5, 9, 9, 5, 5, 9, 12, 11, 16], 3) == [[5, 7, 9, 5, 11], [5, 3, 9, 9, 16], [8, 5, 5, 12]]", "assert list_split([6, 3, 8, 2, 6, 3, 5, 7, 5, 6, 13, 17, 14, 17], 3) == [[6, 2, 5, 6, 14], [3, 6, 7, 13, 17], [8, 3, 5, 17]]", "assert list_split([5, 4, 6, 6, 8, 3, 4, 12, 6, 15, 12, 11, 9, 17], 2) == [[5, 6, 8, 4, 6, 12, 9], [4, 6, 3, 12, 15, 11, 17]]", "assert list_split([3, 1, 3, 9, 5, 6, 6, 4, 11, 11, 10, 14, 10, 17], 7) == [[3, 4], [1, 11], [3, 11], [9, 10], [5, 14], [6, 10], [6, 17]]", "assert list_split([4, 3, 1, 3, 7, 10, 10, 5, 5, 11, 11, 14, 17, 9], 4) == [[4, 7, 5, 17], [3, 10, 11, 9], [1, 10, 11], [3, 5, 14]]", "assert list_split([2, 3, 8, 9, 4, 9, 11, 12, 11, 15, 13, 10, 11, 17], 7) == [[2, 12], [3, 11], [8, 15], [9, 13], [4, 10], [9, 11], [11, 17]]", "assert list_split([2, 5, 3, 1, 5, 8, 3, 7, 10, 5, 14, 15, 14, 11], 4) == [[2, 5, 10, 14], [5, 8, 5, 11], [3, 3, 14], [1, 7, 15]]", "assert list_split([5, 7, 6, 6, 9, 9, 4, 10, 4, 11, 12, 15, 9, 11], 6) == [[5, 4, 9], [7, 10, 11], [6, 4], [6, 11], [9, 12], [9, 15]]", "assert list_split([5, 2, 7, 6, 5, 6, 5, 6, 5, 6, 13, 17, 12, 16], 7) == [[5, 6], [2, 5], [7, 6], [6, 13], [5, 17], [6, 12], [5, 16]]", "assert list_split([5, 2, 4, 4, 1, 10, 3, 13, 11, 8, 12, 14, 9, 13], 3) == [[5, 4, 3, 8, 9], [2, 1, 13, 12, 13], [4, 10, 11, 14]]", "assert list_split([1, 4, 7, 2, 7, 8, 12, 4, 12, 5, 12, 9, 9, 16], 7) == [[1, 4], [4, 12], [7, 5], [2, 12], [7, 9], [8, 9], [12, 16]]", "assert list_split([4, 5, 7, 5, 6, 7, 9, 6, 8, 11, 6, 15, 15, 18], 6) == [[4, 9, 15], [5, 6, 18], [7, 8], [5, 11], [6, 6], [7, 15]]", "assert list_split([6, 1, 1, 9, 8, 11, 10, 5, 10, 7, 7, 9, 13, 9], 3) == [[6, 9, 10, 7, 13], [1, 8, 5, 7, 9], [1, 11, 10, 9]]", "assert list_split([3, 5, 8, 1, 7, 3, 7, 13, 10, 15, 9, 12, 12, 14], 5) == [[3, 3, 9], [5, 7, 12], [8, 13, 12], [1, 10, 14], [7, 15]]", "assert list_split([5, 5, 4, 8, 9, 9, 8, 5, 7, 13, 6, 8, 17, 19], 3) == [[5, 8, 8, 13, 17], [5, 9, 5, 6, 19], [4, 9, 7, 8]]", "assert list_split([2, 4, 6, 5, 4, 5, 5, 13, 7, 7, 9, 16, 16, 10], 7) == [[2, 13], [4, 7], [6, 7], [5, 9], [4, 16], [5, 16], [5, 10]]", "assert list_split([3, 5, 5, 1, 5, 8, 5, 12, 14, 7, 10, 15, 12, 15], 4) == [[3, 5, 14, 12], [5, 8, 7, 15], [5, 5, 10], [1, 12, 15]]", "assert list_split(['mldawzqafgqy', 'hjxingcz', 'F', 'O<@YV>', 'WUOU', 'ASTU'], 2) == [['mldawzqafgqy', 'F', 'WUOU'], ['hjxingcz', 'O<@YV>', 'ASTU']]", "assert list_split(['jxwlgjrckp', 'ygn', 'W', 'TOSJ/JB~', 'TAM', 'ZPYWLK'], 4) == [['jxwlgjrckp', 'TAM'], ['ygn', 'ZPYWLK'], ['W'], ['TOSJ/JB~']]", "assert list_split(['zzczoyjvne', 'uyy', 'B', '*>C>', 'KETDI', 'PFDYPK'], 6) == [['zzczoyjvne'], ['uyy'], ['B'], ['*>C>'], ['KETDI'], ['PFDYPK']]", "assert list_split(['pflcapycprf', 'foz', 'P', '-$%PNP:', 'KKI', 'LJUQIH'], 5) == [['pflcapycprf', 'LJUQIH'], ['foz'], ['P'], ['-$%PNP:'], ['KKI']]", "assert list_split(['aqzshftajzav', 'sqlmrk', 'U', 'OO!KZTC', 'WRBM', 'ZGT'], 4) == [['aqzshftajzav', 'WRBM'], ['sqlmrk', 'ZGT'], ['U'], ['OO!KZTC']]", "assert list_split(['xnepknc', 'yvpjhfky', 'D', 'XCHE', 'VKH', 'VYY'], 1) == [['xnepknc', 'yvpjhfky', 'D', 'XCHE', 'VKH', 'VYY']]", "assert list_split(['rlbvnzwbbwg', 'yvd', 'B', 'HF<HC', 'PMRELUQ', 'UKEAHLH'], 4) == [['rlbvnzwbbwg', 'PMRELUQ'], ['yvd', 'UKEAHLH'], ['B'], ['HF<HC']]", "assert list_split(['wom', 'odh', 'M', '_ZVM', 'ONNGKAO', 'FGOHBQPK'], 7) == [['wom'], ['odh'], ['M'], ['_ZVM'], ['ONNGKAO'], ['FGOHBQPK'], []]", "assert list_split(['hcujy', 'ftu', 'T', '<LL>KJ', 'UGDLK', 'VEC'], 7) == [['hcujy'], ['ftu'], ['T'], ['<LL>KJ'], ['UGDLK'], ['VEC'], []]", "assert list_split(['rrhhrpcssoql', 'rqfjytod', 'I', 'YA&$R', 'NYV', 'LHVZWFPJA'], 3) == [['rrhhrpcssoql', 'YA&$R'], ['rqfjytod', 'NYV'], ['I', 'LHVZWFPJA']]", "assert list_split(['vgeciikehj', 'vsxucvfb', 'H', '>UA', 'AJFSSVKI', 'JZP'], 2) == [['vgeciikehj', 'H', 'AJFSSVKI'], ['vsxucvfb', '>UA', 'JZP']]", "assert list_split(['tpimgzkzrc', 'ytm', 'Y', 'B-+-SHJ', 'PKUN', 'GQBHT'], 5) == [['tpimgzkzrc', 'GQBHT'], ['ytm'], ['Y'], ['B-+-SHJ'], ['PKUN']]", "assert list_split(['zjdsfcnfs', 'pfnuxdal', 'I', '#S>^', 'CFFWC', 'AJGBG'], 2) == [['zjdsfcnfs', 'I', 'CFFWC'], ['pfnuxdal', '#S>^', 'AJGBG']]", "assert list_split(['huyb', 'wgvyu', 'E', 'L&P', 'YEDISE', 'RUJEDJ'], 3) == [['huyb', 'L&P'], ['wgvyu', 'YEDISE'], ['E', 'RUJEDJ']]", "assert list_split(['kuk', 'tactevqo', 'L', '>RU=E', 'DBIU', 'BRZ'], 6) == [['kuk'], ['tactevqo'], ['L'], ['>RU=E'], ['DBIU'], ['BRZ']]", "assert list_split(['qxqkppyenhqc', 'kackpnmg', 'U', '^<LZ/', 'PAH', 'IXWHEGL'], 3) == [['qxqkppyenhqc', '^<LZ/'], ['kackpnmg', 'PAH'], ['U', 'IXWHEGL']]", "assert list_split(['cgk', 'uzmezww', 'P', 'UFUZNT', 'WOEPJ', 'YHEXMO'], 7) == [['cgk'], ['uzmezww'], ['P'], ['UFUZNT'], ['WOEPJ'], ['YHEXMO'], []]", "assert list_split(['sckskgqqom', 'orbqe', 'J', 'J<+&', 'XEVBTEX', 'JTR'], 2) == [['sckskgqqom', 'J', 'XEVBTEX'], ['orbqe', 'J<+&', 'JTR']]", "assert list_split(['nkndpuyc', 'ufjv', 'D', '_/QNG>-', 'SZACNRA', 'VCSB'], 1) == [['nkndpuyc', 'ufjv', 'D', '_/QNG>-', 'SZACNRA', 'VCSB']]", "assert list_split(['eiqi', 'bpvkpkm', 'U', 'P*:D|JDEE', 'FLFEQADYF', 'SKI'], 5) == [['eiqi', 'SKI'], ['bpvkpkm'], ['U'], ['P*:D|JDEE'], ['FLFEQADYF']]", "assert list_split(['uqfbqo', 'ygyykebkp', 'G', 'D_JL/', 'BBHWSSTWN', 'KSLTRM'], 3) == [['uqfbqo', 'D_JL/'], ['ygyykebkp', 'BBHWSSTWN'], ['G', 'KSLTRM']]", "assert list_split(['ptkalnuif', 'frhje', 'E', 'JCSF<:B', 'YLHFRIVGN', 'FKM'], 2) == [['ptkalnuif', 'E', 'YLHFRIVGN'], ['frhje', 'JCSF<:B', 'FKM']]", "assert list_split(['fthdke', 'vczvnb', 'Y', 'V-H^N', 'OIQB', 'QOLQYGUY'], 3) == [['fthdke', 'V-H^N'], ['vczvnb', 'OIQB'], ['Y', 'QOLQYGUY']]", "assert list_split(['ccjtgkfqti', 'xqu', 'O', 'O<@D_W', 'TEHKWQPO', 'NVRTJ'], 2) == [['ccjtgkfqti', 'O', 'TEHKWQPO'], ['xqu', 'O<@D_W', 'NVRTJ']]", "assert list_split(['kjqifx', 'gnztfgx', 'C', '<%ZWTVI', 'QHV', 'WVAXRVY'], 3) == [['kjqifx', '<%ZWTVI'], ['gnztfgx', 'QHV'], ['C', 'WVAXRVY']]", "assert list_split(['mkrzv', 'okll', 'S', 'GXU^IH=Z', 'MAERAVIBB', 'CNTHT'], 1) == [['mkrzv', 'okll', 'S', 'GXU^IH=Z', 'MAERAVIBB', 'CNTHT']]", "assert list_split(['ykqmukk', 'sproluv', 'V', 'V=R@RY$/P', 'GKDNPCP', 'IIIJSOS'], 4) == [['ykqmukk', 'GKDNPCP'], ['sproluv', 'IIIJSOS'], ['V'], ['V=R@RY$/P']]", "assert list_split(['wmly', 'pgwkis', 'U', 'D>_JRTN%', 'KDLJL', 'SOAG'], 1) == [['wmly', 'pgwkis', 'U', 'D>_JRTN%', 'KDLJL', 'SOAG']]", "assert list_split(['glnxgopgguih', 'kzm', 'B', 'M>L', 'JAWI', 'HCRHSEGZK'], 4) == [['glnxgopgguih', 'JAWI'], ['kzm', 'HCRHSEGZK'], ['B'], ['M>L']]", "assert list_split(['lwxugh', 'yhaycqrm', 'U', 'VK:', 'IRU', 'NFTDBDIBN'], 4) == [['lwxugh', 'IRU'], ['yhaycqrm', 'NFTDBDIBN'], ['U'], ['VK:']]", "assert list_split(['mjtqyin', 'xzeiwcy', 'I', '*~$~', 'YJUUHQ', 'BJOQ'], 7) == [['mjtqyin'], ['xzeiwcy'], ['I'], ['*~$~'], ['YJUUHQ'], ['BJOQ'], []]", "assert list_split(['cjxznkyts', 'tdqih', 'X', '!J+L*', 'OIR', 'THFQX'], 1) == [['cjxznkyts', 'tdqih', 'X', '!J+L*', 'OIR', 'THFQX']]", "assert list_split(['vabqxvvhbbk', 'wxd', 'C', '&JVU', 'HIABYZ', 'BBLSXUFRY'], 1) == [['vabqxvvhbbk', 'wxd', 'C', '&JVU', 'HIABYZ', 'BBLSXUFRY']]"], "entry_point": "list_split", "repair_prompt": ["Write a function list_split that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. Be sure to handle edge cases such as an empty list or a negative value for n in your implementation.\nlist_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n", "Write a function list_split that takes in a list and an integer n and splits a list for every nth element. It should return a list of the resulting lists. Be sure to handle edge cases such as an empty list. You should also consider a negative value for n in your implementation.\nlist_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n", "Write a function list_split that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists. Handle edge cases such as an empty list or a negative value for n in your implementation.\nlist_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n"], "completions": ["from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input_list into sublists, each containing every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of sublists, each containing every nth element of the input_list.\n\n    Raises:\n    ValueError: If n is less than or equal to 0.\n    \"\"\"\n    # Check if the list is empty. If it is, return an empty list.\n    if not input_list:\n        return []\n\n    # Check if n is negative or zero. If it is, raise a ValueError.\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize an empty list to store the resulting sublists.\n    result = []\n\n    # Use a loop to iterate over the range of n.\n    for i in range(n):\n        # For each iteration, use slicing to collect every nth element starting from the current index.\n        sublist = input_list[i::n]\n        # Append this sublist to the result list.\n        result.append(sublist)\n\n    # Return the list of sublists.\n    return result\n", "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input list into sublists for every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of sublists split at every nth element.\n\n    Raises:\n    ValueError: If n is less than or equal to zero.\n    \"\"\"\n    # Check if the input list is empty\n    if not input_list:\n        return []\n\n    # Check if n is less than or equal to zero\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize an empty list to store the resulting sublists\n    result = []\n\n    # Use a loop to iterate over the range of n\n    for i in range(n):\n        # Use list slicing to collect every nth element starting from the current index\n        sublist = input_list[i::n]\n        # Append the resulting sublist to the main list of sublists\n        result.append(sublist)\n\n    # Return the list of sublists\n    return result\n\n# Example usage:\n# print(list_split(['a', 'b', 'c', 'd', 'e', 'f'], 2))\n# Output: [['a', 'c', 'e'], ['b', 'd', 'f']]\n", "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input list into sublists based on every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of sublists split at every nth element.\n\n    Raises:\n    ValueError: If n is negative or zero.\n    \"\"\"\n    # Handle edge cases\n    if not input_list:\n        return []\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the range of n to create sublists\n    for i in range(n):\n        # Create sublist by selecting elements at intervals of n starting from index i\n        sublist = input_list[i::n]\n        result.append(sublist)\n\n    return result\n", "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input list into sublists where each sublist contains every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of sublists split at every nth element.\n    \"\"\"\n    # Handle edge case for empty list\n    if not input_list:\n        return []\n\n    # Handle negative n by reversing the list and converting n to positive\n    if n < 0:\n        input_list = input_list[::-1]\n        n = abs(n)\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the range of n to create sublists\n    for i in range(n):\n        # Create sublist by selecting elements starting from index i with a step size of n\n        sublist = input_list[i::n]\n        result.append(sublist)\n\n    return result\n", "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input_list into sublists where each sublist contains every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval for splitting the list.\n\n    Returns:\n    list: A list of sublists containing every nth element.\n    \"\"\"\n    # Check if the input list is empty\n    if not input_list:\n        return []\n\n    # Handle negative n by reversing the list and using the absolute value of n\n    if n < 0:\n        input_list.reverse()\n        n = abs(n)\n\n    # Initialize the result list with empty sublists\n    result = [[] for _ in range(n)]\n\n    # Iterate over the range from 0 to n to create n sublists\n    for i in range(n):\n        # Collect elements spaced by n positions starting from the current index\n        result[i] = input_list[i::n]\n\n    return result\n", "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input_list into sublists, each containing every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval for splitting the list.\n\n    Returns:\n    list: A list of sublists, each containing every nth element.\n    \"\"\"\n    # Handle edge case for empty list\n    if not input_list:\n        return []\n\n    # Convert negative n to positive\n    if n < 0:\n        n = abs(n)\n\n    # Initialize result list with empty sublists\n    result = [[] for _ in range(n)]\n\n    # Iterate over the input list and distribute elements into sublists\n    for i in range(len(input_list)):\n        result[i % n].append(input_list[i])\n\n    return result\n\n# Example usage:\n# print(list_split(['a', 'b', 'c'], -2))  # Output: [['a', 'c'], ['b']]\n# print(list_split(['a', 'b', 'c', 'd'], 5))  # Output: [['a'], ['b'], ['c'], ['d']]\n# print(list_split([], 3))  # Output: []\n", "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    '''\n    Splits the input list into sublists for every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of sublists split at every nth element.\n\n    Example:\n    >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)\n    [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    '''\n    # Handle edge cases where the list is empty or n is less than or equal to zero\n    if not input_list or n <= 0:\n        return []\n\n    # Initialize the result list to store sublists\n    result = []\n\n    # Iterate over a range from 0 to n (exclusive) to create n sublists\n    for i in range(n):\n        # Create a sublist for the current index\n        sublist = []\n        # Iterate over the original list starting at the current index and incrementing by n\n        for j in range(i, len(input_list), n):\n            sublist.append(input_list[j])\n        # Append the sublist to the result list\n        result.append(sublist)\n\n    # Return the result list containing the sublists\n    return result\n", "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input list into sublists for every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of sublists split at every nth element.\n\n    Raises:\n    ValueError: If n is negative.\n    \"\"\"\n    # Handle edge case for empty list\n    if not input_list:\n        return []\n\n    # Handle edge case for negative n\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize the result list\n    result = []\n\n    # Use list comprehension to create sublists\n    for i in range(n):\n        sublist = input_list[i::n]\n        result.append(sublist)\n\n    return result\n", "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input list into sublists, each containing every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval for splitting the list.\n\n    Returns:\n    list: A list of sublists, each containing every nth element of the input list.\n    \"\"\"\n    # Handle edge cases\n    if not input_list:\n        return []\n    if n <= 0:\n        return \"Invalid input: n must be positive\"\n\n    # Initialize the list to store sublists\n    result = []\n\n    # Iterate over the range of n to create sublists\n    for i in range(n):\n        # Use list comprehension to collect every nth element starting from index i\n        sublist = [input_list[j] for j in range(i, len(input_list), n)]\n        result.append(sublist)\n\n    return result\n", "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input_list into sublists based on every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of sublists split at every nth element.\n\n    Raises:\n    ValueError: If n is negative or zero.\n    \"\"\"\n    # Check if the input list is empty\n    if not input_list:\n        return []\n\n    # Check if n is less than or equal to zero\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize an empty list to store the resulting sublists\n    result = []\n\n    # Use a loop to iterate over the range of n (0 to n-1)\n    for i in range(n):\n        # Create a sublist by selecting elements from the original list\n        # starting at the current index and taking every nth element\n        sublist = input_list[i::n]\n        # Append each sublist to the result list\n        result.append(sublist)\n\n    # Return the result list\n    return result\n\n# Example usage:\n# list_split(['a', 'b', 'c', 'd', 'e', 'f'], 2) should return [['a', 'c', 'e'], ['b', 'd', 'f']]\n# list_split([], 3) should return []\n# list_split(['a', 'b', 'c'], -1) should raise ValueError\n# list_split(['a', 'b', 'c'], 0) should raise ValueError\n"], "plans": ["requirement analysis:\nThe function should efficiently split a list into sublists based on every nth element. It must handle edge cases such as empty lists and negative values for n. The implementation should be optimized for performance and include clear documentation for ease of use.\nrequirement pool:\n- Implement the main list_split function\n- Handle edge cases like empty lists and negative n values\n- Optimize performance for large lists\n- Provide comprehensive documentation\n- Include examples and test cases in the documentation\nWe will implement the list_split function using basic Python list operations to ensure simplicity and efficiency. The function will handle edge cases such as empty lists by returning an empty list and negative values for n by raising a ValueError. This approach avoids unnecessary complexity and leverages Python's inherent list handling capabilities.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split for every nth element'\n    Explanation: This means dividing the list into sublists where each sublist contains elements that are spaced by n positions in the original list.\n\n# [phrase showing quantity relationship]\n    'every nth element': This indicates a regular interval or step size in the list, which can be implemented using slicing in Python.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty. If it is, return an empty list.\n    2. Check if n is negative. If it is, raise a ValueError.\n    3. Initialize an empty list to store the resulting sublists.\n    4. Use a loop to iterate over the range of n.\n    5. For each iteration, use slicing to collect every nth element starting from the current index and append this sublist to the result list.\n    6. Return the list of sublists.\n\n# [edge case] \n    list_split([], 3) = []\n    Explanation: The input list is empty, so the output should also be an empty list.\n    \n    list_split(['a', 'b', 'c'], -1) = ValueError\n    Explanation: A negative value for n is not valid for splitting, so a ValueError should be raised.\n    \n    list_split(['a', 'b', 'c'], 1) = [['a', 'b', 'c']]\n    Explanation: With n=1, each element is its own sublist, effectively returning the original list as a single sublist.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not lst:\n            return []\n        if n <= 0:\n            raise ValueError(\"n must be a positive integer\")\n        result = []\n        for i in range(n):\n            result.append(lst[i::n])\n        return result\n", "requirement analysis:\nThe function should efficiently split a list into sublists based on the nth element, handling edge cases such as empty lists and negative values for n. The implementation should be optimized for performance and include clear documentation.\nrequirement pool:\n- Implement list splitting functionality\n- Handle edge cases like empty lists and negative n values\n- Optimize performance for large lists\n- Provide clear documentation and examples\n- Include unit tests for various scenarios\nWe will implement a function using Python's built-in list manipulation techniques to efficiently split a list into sublists based on the nth element. We will handle edge cases such as empty lists and negative values for n by returning an empty list for empty input and raising a ValueError for negative n values. The function will be optimized for performance using list comprehension and will include clear documentation and examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split': The requirement is to divide the list into multiple sublists based on a specific pattern.\n    'nth element': This refers to selecting elements from the list at regular intervals defined by the integer n.\n\n# [phrase showing quantity relationship]\n    'every nth element': This means selecting elements at positions that are multiples of n (e.g., 3rd, 6th, 9th, etc.).\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if the input list is empty. If it is, return an empty list.\n    2. Check if n is less than or equal to zero. If it is, raise a ValueError.\n    3. Initialize an empty list to store the resulting sublists.\n    4. Use a loop to iterate over the range of n.\n    5. For each iteration, use list slicing to collect every nth element starting from the current index.\n    6. Append the resulting sublist to the main list of sublists.\n    7. Return the list of sublists.\n\n# [edge case]\n    list_split([], 3) = []\n    Explanation: An empty list should return an empty list as there are no elements to split.\n    \n    list_split(['a', 'b', 'c'], -1) = ValueError\n    Explanation: A negative value for n is invalid for splitting, so a ValueError should be raised.\n    \n    list_split(['a', 'b', 'c'], 0) = ValueError\n    Explanation: A zero value for n is invalid for splitting, so a ValueError should be raised.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not lst:\n            return []\n        if n <= 0:\n            raise ValueError(\"n must be a positive integer\")\n        (other code)\n", "requirement analysis:\nThe function should split a list into sublists based on every nth element. It must handle edge cases like empty lists and negative n values. The implementation should be efficient and easy to understand, with clear documentation.\nrequirement pool:\n- Implement the main list_split function.\n- Handle edge cases such as empty lists and negative n values.\n- Optimize the function for large lists.\n- Provide comprehensive documentation.\n- Include unit tests for various scenarios.\nWe will implement the list_split function using Python's built-in list operations to efficiently split the list into sublists based on every nth element. We will handle edge cases such as empty lists by returning an empty list and negative n values by raising a ValueError. The function will be optimized for large lists by using list comprehensions, which are both efficient and easy to understand. Comprehensive documentation will be provided to ensure ease of integration and understanding.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split': The requirement involves dividing a list into sublists based on a specified interval (n).\n\n# [phrase showing quantity relationship]\n    'every nth element': This indicates that the list should be split such that each sublist contains elements spaced by n positions from each other. For example, if n is 3, the first sublist will contain elements at positions 0, 3, 6, etc.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty; if so, return an empty list.\n    2. Check if n is negative; if so, raise a ValueError.\n    3. Initialize an empty list to store the resulting sublists.\n    4. Use a loop to iterate over the range of n.\n    5. For each iteration, create a sublist by selecting elements from the original list at intervals of n starting from the current index.\n    6. Append each sublist to the result list.\n    7. Return the result list.\n\n# [edge case]\n    list_split([], 3) = []\n    Explanation: An empty list should return an empty list as there are no elements to split.\n\n    list_split(['a', 'b', 'c'], -1) = ValueError\n    Explanation: A negative value for n is invalid for splitting and should raise an error.\n\n    list_split(['a', 'b', 'c'], 0) = ValueError\n    Explanation: A zero value for n is invalid for splitting and should raise an error.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not lst:\n            return []\n        if n <= 0:\n            raise ValueError(\"n must be a positive integer\")\n        (other code)\n", "requirement analysis:\nThe function should split a list into sublists based on every nth element. It must handle edge cases such as empty lists and negative values for n. The implementation should be efficient and easy to understand.\nrequirement pool:\n- Implement the main list_split function\n- Handle edge cases like empty lists\n- Support negative values for n\n- Optimize for performance with large lists\n- Provide comprehensive documentation\nWe will implement a function named list_split that takes a list and an integer n as inputs. The function will split the list into sublists where each sublist contains every nth element from the original list. We will handle edge cases such as an empty list by returning an empty list. For negative values of n, we will reverse the list and then apply the same logic as for positive n. This approach ensures that the function is efficient and easy to understand without requiring additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split': The requirement is to divide the list into sublists based on a specific pattern.\n    'nth element': Refers to selecting elements from the list at intervals of n.\n\n# [phrase showing quantity relationship]\n    'every nth element': This means selecting elements from the list at intervals of n. For example, if n is 3, select every third element.\n    Implementation: Iterate over the list using a step size of n to create sublists.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize an empty list to store the resulting sublists.\n    2. Handle the edge case where the input list is empty by returning an empty list.\n    3. If n is negative, reverse the list and convert n to positive.\n    4. Iterate over the range of n to create sublists:\n        - For each index i in range(n), create a sublist by selecting elements starting from index i with a step size of n.\n        - Append each sublist to the result list.\n    5. Return the list of sublists.\n\n# [edge case]\n    list_split([], 3) = []\n    Explanation: The input list is empty, so the expected output is an empty list.\n    \n    list_split(['a', 'b', 'c'], -1) = [['c'], ['b'], ['a']]\n    Explanation: With n as -1, the list is reversed and split into sublists containing single elements.\n\n    list_split(['a', 'b', 'c', 'd'], 5) = [['a'], ['b'], ['c'], ['d']]\n    Explanation: Since n is greater than the length of the list, each element forms its own sublist.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not lst:\n            return []\n        if n < 0:\n            lst = lst[::-1]\n            n = abs(n)\n        result = []\n        for i in range(n):\n            result.append(lst[i::n])\n        return result\n", "requirement analysis:\nThe function should split a list into sublists where each sublist contains every nth element from the original list. It must handle edge cases such as empty lists and negative values for n, which could imply a reverse order or other logical handling.\nrequirement pool:\n- Implement the main list_split function\n- Handle edge cases such as empty lists\n- Optimize for performance with large lists\n- Document the function with examples\n- Consider user feedback for further improvements\nWe will implement the list_split function using basic Python list operations to efficiently split the list into sublists containing every nth element. We will handle edge cases such as empty lists and negative values for n by reversing the list when n is negative.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split': The requirement is to divide the list into sublists based on a specific pattern.\n    'nth element': Refers to the position in the list that determines how the list is split.\n\n# [phrase showing quantity relationship]\n    'every nth element': This means that the list should be split such that each sublist contains elements that are spaced by n positions apart in the original list. For example, if n is 3, the first sublist will contain elements at positions 0, 3, 6, etc.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty; if so, return an empty list.\n    2. Initialize an empty list to store the resulting sublists.\n    3. Iterate over a range from 0 to n to create n sublists.\n    4. For each sublist, iterate over the original list starting at the current index and incrementing by n to collect elements.\n    5. Append each sublist to the result list.\n    6. If n is negative, reverse the list and apply the same logic.\n\n# [edge case]\n    list_split([], 3) = []\n    Explanation: An empty list should return an empty list as there are no elements to split.\n    \n    list_split(['a', 'b', 'c'], -1) = [['c'], ['b'], ['a']]\n    Explanation: With a negative n, the list is reversed and split into sublists containing single elements.\n\n    list_split(['a', 'b', 'c', 'd'], 5) = [['a'], ['b'], ['c'], ['d'], []]\n    Explanation: When n is greater than the length of the list, each sublist will contain one element until the end of the list.\n\n# [extra code for edge case]\n    We need extra code to handle negative values for n.\n        if not lst:\n            return []\n        if n < 0:\n            lst.reverse()\n            n = abs(n)\n        result = [[] for _ in range(n)]\n        for i in range(n):\n            result[i] = lst[i::n]\n        return result\n", "requirement analysis:\nThe function should efficiently split a list into sublists based on every nth element, handling both positive and negative values for n. Edge cases such as empty lists should be managed gracefully, ensuring the function is robust and reliable.\nrequirement pool:\n- Implement list splitting based on nth element\n- Handle edge cases like empty lists\n- Support negative values for n\n- Optimize for performance with large lists\n- Provide clear documentation and examples\nWe will implement a function named list_split that takes a list and an integer n as inputs. The function will split the list into sublists, where each sublist contains every nth element from the original list. We will handle edge cases such as an empty list by returning an empty list. For negative values of n, we will treat it as a positive value, as the behavior for negative n is not clearly defined. We will use list comprehension for efficient and concise implementation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split': The requirement involves dividing the list into sublists based on a specified interval.\n    'nth element': Refers to the position in the list that determines how the list is split.\n\n# [phrase showing quantity relationship]\n    'every nth element': This indicates that the list should be split at regular intervals defined by the integer n. In code, this can be implemented using slicing or iteration with a step size of n.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty; if so, return an empty list.\n    2. If n is negative, convert it to positive since negative n is treated as positive.\n    3. Initialize an empty list to store the resulting sublists.\n    4. Use a loop to iterate over the range of n, creating sublists by selecting every nth element starting from each index up to n.\n    5. Append each sublist to the result list.\n    6. Return the list of sublists.\n\n# [edge case]\n    list_split([], 3) = []\n    Explanation: The input list is empty, so the function should return an empty list.\n    \n    list_split(['a', 'b', 'c'], -2) = [['a', 'c'], ['b']]\n    Explanation: Negative n is treated as positive, so the function splits the list as if n were 2.\n\n    list_split(['a', 'b', 'c', 'd'], 5) = [['a'], ['b'], ['c'], ['d']]\n    Explanation: n is greater than the length of the list, so each element forms its own sublist.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not lst:\n            return []\n        if n < 0:\n            n = abs(n)\n        result = [[] for _ in range(n)]\n        for i in range(len(lst)):\n            result[i % n].append(lst[i])\n        return result\n", "requirement analysis:\nThe function should efficiently split a list into sublists based on the nth element, handling edge cases such as empty lists and negative values for n. The implementation should be intuitive and provide clear documentation for users.\nrequirement pool:\n- Implement list splitting functionality\n- Handle edge cases like empty lists and negative n values\n- Optimize performance for large lists\n- Provide clear documentation and usage examples\n- Ensure compatibility with different data types\nWe will implement a function list_split that efficiently splits a list into sublists based on the nth element. We will handle edge cases such as empty lists and negative values for n by returning an empty list if n is negative or zero, and by returning an empty list if the input list is empty. We will use Python's built-in list manipulation techniques to ensure simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split': The requirement involves dividing a list into multiple sublists based on a specified interval (n).\n\n# [phrase showing quantity relationship]\n    'every nth element': This indicates that the list should be split such that each sublist contains elements spaced by n positions from each other in the original list.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if the input list is empty or if n is less than or equal to zero. If either condition is true, return an empty list.\n    2. Initialize an empty list to store the resulting sublists.\n    3. Iterate over a range from 0 to n (exclusive) to create n sublists.\n    4. For each sublist, iterate over the original list starting at the current index and incrementing by n, appending each element to the sublist.\n    5. Append each sublist to the result list.\n    6. Return the result list.\n\n# [edge case]\n    list_split([], 3) = []\n    Explanation: The input list is empty, so there are no elements to split, resulting in an empty list.\n    \n    list_split(['a', 'b', 'c'], -1) = []\n    Explanation: A negative value for n is invalid for splitting, so the function returns an empty list.\n    \n    list_split(['a', 'b', 'c'], 0) = []\n    Explanation: A zero value for n is invalid for splitting, so the function returns an empty list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not lst or n <= 0:\n            return []\n        (other code)\n", "requirement analysis:\nThe function should efficiently split a list into sublists based on the nth element, handling edge cases such as empty lists and negative values for n. The implementation should be optimized for performance and include clear documentation for ease of use.\nrequirement pool:\n- Implement list splitting functionality\n- Handle edge cases like empty lists and negative n values\n- Optimize performance for large lists\n- Provide clear documentation\n- Include examples in documentation\nWe will implement a function using Python's list comprehension to efficiently split the list into sublists based on the nth element. We will handle edge cases such as empty lists and negative values for n by returning an empty list for empty input and raising a ValueError for negative n values. This approach ensures simplicity and performance without requiring additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split': The requirement is to divide the list into multiple sublists based on a specific pattern.\n    'nth element': Refers to selecting elements at regular intervals (every n-th position) from the list.\n\n# [phrase showing quantity relationship]\n    'every nth element': This means selecting elements at intervals of n. For example, if n=3, select every third element.\n    Implementation: Use a loop or list comprehension to iterate over the list with a step size of n.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if the input list is empty. If so, return an empty list.\n    2. Check if n is negative. If so, raise a ValueError.\n    3. Initialize an empty list to store the resulting sublists.\n    4. Use a loop or list comprehension to iterate over the range of n.\n    5. For each iteration, create a sublist by selecting elements from the original list starting at the current index and stepping by n.\n    6. Append each sublist to the result list.\n    7. Return the result list.\n\n# [edge case]\n    list_split([], 3) = []\n    Explanation: The input list is empty, so there are no elements to split, resulting in an empty list.\n\n    list_split(['a', 'b', 'c'], -1) = ValueError\n    Explanation: A negative value for n is not valid for splitting, so a ValueError should be raised.\n\n    list_split(['a', 'b', 'c'], 1) = [['a'], ['b'], ['c']]\n    Explanation: With n=1, each element becomes its own sublist.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not lst:\n            return []\n        if n <= 0:\n            raise ValueError(\"n must be a positive integer\")\n        (other code)\n", "requirement analysis:\nThe function should efficiently split a list into sublists based on the nth element, handling edge cases such as empty lists and negative integers. The implementation should be optimized for performance and include comprehensive documentation.\nrequirement pool:\n- Implement list splitting functionality\n- Handle edge cases like empty lists and negative integers\n- Optimize performance for large lists\n- Provide clear documentation and usage examples\n- Ensure compatibility with different Python versions\nWe will implement a function named list_split that takes a list and an integer n as inputs. The function will split the list into sublists, each containing every nth element. We will handle edge cases such as an empty list by returning an empty list, and for negative values of n, we will return an error message indicating invalid input. The function will be optimized for performance using list comprehensions, which are efficient for list operations in Python.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split': The requirement involves dividing a list into multiple sublists based on a specified interval (n).\n\n# [phrase showing quantity relationship]\n    'every nth element': This indicates that the list should be split such that each sublist contains elements spaced by n positions from each other in the original list.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty; if so, return an empty list.\n    2. Check if n is negative; if so, return an error message indicating invalid input.\n    3. Initialize an empty list to store the resulting sublists.\n    4. Use a loop to iterate over the range of n.\n    5. For each iteration, use a list comprehension to collect every nth element starting from the current index.\n    6. Append the resulting sublist to the main list.\n    7. Return the list of sublists.\n\n# [edge case]\n    list_split([], 3) = []\n    Explanation: An empty list should return an empty list as there are no elements to split.\n    \n    list_split(['a', 'b', 'c'], -1) = \"Invalid input: n must be positive\"\n    Explanation: A negative value for n is invalid, so the function should return an error message.\n\n    list_split(['a', 'b', 'c'], 0) = \"Invalid input: n must be positive\"\n    Explanation: A zero value for n is invalid, as it does not make sense to split a list every 0 elements.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not lst:\n            return []\n        if n <= 0:\n            return \"Invalid input: n must be positive\"\n        (other code)\n", "requirement analysis:\nThe function should split a list into sublists based on every nth element. It must handle edge cases such as empty lists and negative n values. The implementation should be efficient and easy to use, with clear documentation.\nrequirement pool:\n- Implement the main list_split function.\n- Handle edge cases such as empty lists and negative n values.\n- Optimize the function for performance with large lists.\n- Provide comprehensive documentation and examples.\n- Ensure compatibility with various Python versions.\nWe will implement a function named list_split that takes a list and an integer n as inputs. The function will split the list into sublists based on every nth element. We will handle edge cases such as empty lists by returning an empty list and negative n values by raising a ValueError. The implementation will be optimized for performance with large lists by using list comprehensions and will be documented with examples for ease of integration.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'split for every nth element'\n    Explanation: This means dividing the list into sublists where each sublist contains elements that are spaced n elements apart in the original list.\n\n# [phrase showing quantity relationship]\n    'every nth element': This indicates a regular interval of n elements. In code, this can be implemented using a loop with a step size of n or using list comprehensions with slicing.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if the input list is empty. If it is, return an empty list.\n    2. Check if n is less than or equal to zero. If it is, raise a ValueError.\n    3. Initialize an empty list to store the resulting sublists.\n    4. Use a loop to iterate over the range of n (0 to n-1).\n    5. For each iteration, create a sublist by selecting elements from the original list starting at the current index and taking every nth element.\n    6. Append each sublist to the result list.\n    7. Return the result list.\n\n# [edge case]\n    list_split([], 3) = []\n    Explanation: An empty list should return an empty list as there are no elements to split.\n    \n    list_split(['a', 'b', 'c'], -1) = ValueError\n    Explanation: A negative value for n is invalid, so a ValueError should be raised.\n    \n    list_split(['a', 'b', 'c'], 0) = ValueError\n    Explanation: A zero value for n is invalid, so a ValueError should be raised.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not lst:\n            return []\n        if n <= 0:\n            raise ValueError(\"n must be a positive integer\")\n        (other code)\n"], "test": ["def check(list_split):\n\tassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ", "def check(list_split):\n\tassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ", "def check(list_split):\n\tassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ", "def check(list_split):\n\tassert list_split(['j', 'q', 'l', 'd', 'n', 'j', 'm', 'j', 'b', 'w', 'v', 'u', 'q', 'z'], 6) == [['j', 'm', 'q'], ['q', 'j', 'z'], ['l', 'b'], ['d', 'w'], ['n', 'v'], ['j', 'u']]", "def check(list_split):\n\tassert list_split(['j', 's', 'n', 'f', 's', 'q', 'f', 'v', 'k', 'd', 'q', 'm', 'c', 'q'], 2) == [['j', 'n', 's', 'f', 'k', 'q', 'c'], ['s', 'f', 'q', 'v', 'd', 'm', 'q']]", "def check(list_split):\n\tassert list_split(['h', 'k', 't', 'a', 'b', 'p', 'h', 's', 'y', 'm', 'x', 'f', 'u', 'f'], 4) == [['h', 'b', 'y', 'u'], ['k', 'p', 'm', 'f'], ['t', 'h', 'x'], ['a', 's', 'f']]", "def check(list_split):\n\tassert list_split(['x', 'j', 'w', 'x', 'b', 'x', 'w', 'm', 'b', 'b', 'y', 'p', 'g', 'o'], 6) == [['x', 'w', 'g'], ['j', 'm', 'o'], ['w', 'b'], ['x', 'b'], ['b', 'y'], ['x', 'p']]", "def check(list_split):\n\tassert list_split(['u', 'j', 'm', 'i', 'h', 't', 'q', 'c', 'w', 'e', 'y', 'o', 'o', 'e'], 2) == [['u', 'm', 'h', 'q', 'w', 'y', 'o'], ['j', 'i', 't', 'c', 'e', 'o', 'e']]", "def check(list_split):\n\tassert list_split(['s', 'z', 'j', 'y', 'c', 'p', 'i', 'd', 'l', 'v', 'o', 'k', 'y', 'a'], 3) == [['s', 'y', 'i', 'v', 'y'], ['z', 'c', 'd', 'o', 'a'], ['j', 'p', 'l', 'k']]", "def check(list_split):\n\tassert list_split(['p', 'o', 'u', 'd', 'r', 'w', 'b', 'u', 'j', 't', 'a', 'v', 'c', 'b'], 8) == [['p', 'j'], ['o', 't'], ['u', 'a'], ['d', 'v'], ['r', 'c'], ['w', 'b'], ['b'], ['u']]", "def check(list_split):\n\tassert list_split(['v', 'e', 'z', 'w', 'u', 'h', 'j', 'o', 'f', 'n', 't', 'p', 'u', 'k'], 6) == [['v', 'j', 'u'], ['e', 'o', 'k'], ['z', 'f'], ['w', 'n'], ['u', 't'], ['h', 'p']]", "def check(list_split):\n\tassert list_split(['d', 'l', 'p', 'v', 'j', 'k', 'v', 'p', 'b', 'f', 'i', 'w', 'b', 'r'], 5) == [['d', 'k', 'i'], ['l', 'v', 'w'], ['p', 'p', 'b'], ['v', 'b', 'r'], ['j', 'f']]", "def check(list_split):\n\tassert list_split(['k', 'u', 'c', 't', 'n', 'd', 'y', 'e', 'n', 'b', 'f', 'z', 'k', 'm'], 5) == [['k', 'd', 'f'], ['u', 'y', 'z'], ['c', 'e', 'k'], ['t', 'n', 'm'], ['n', 'b']]", "def check(list_split):\n\tassert list_split(['b', 'm', 'f', 'p', 'p', 'v', 'p', 'n', 'v', 'h', 'g', 'h', 'h', 'l'], 7) == [['b', 'n'], ['m', 'v'], ['f', 'h'], ['p', 'g'], ['p', 'h'], ['v', 'h'], ['p', 'l']]", "def check(list_split):\n\tassert list_split(['w', 'j', 'm', 'h', 'y', 'c', 'k', 'e', 'v', 's', 'f', 'q', 'l', 'p'], 8) == [['w', 'v'], ['j', 's'], ['m', 'f'], ['h', 'q'], ['y', 'l'], ['c', 'p'], ['k'], ['e']]", "def check(list_split):\n\tassert list_split(['v', 'g', 'm', 'i', 'v', 'u', 'b', 'i', 'b', 'c', 'j', 'j', 's', 'z'], 5) == [['v', 'u', 'j'], ['g', 'b', 'j'], ['m', 'i', 's'], ['i', 'b', 'z'], ['v', 'c']]", "def check(list_split):\n\tassert list_split(['z', 'm', 'x', 'r', 'i', 't', 'p', 'o', 'u', 'n', 'a', 'j', 'e', 'i'], 2) == [['z', 'x', 'i', 'p', 'u', 'a', 'e'], ['m', 'r', 't', 'o', 'n', 'j', 'i']]", "def check(list_split):\n\tassert list_split(['q', 'p', 'l', 't', 'i', 'd', 'k', 'x', 'n', 'j', 'g', 'i', 'k', 'l'], 8) == [['q', 'n'], ['p', 'j'], ['l', 'g'], ['t', 'i'], ['i', 'k'], ['d', 'l'], ['k'], ['x']]", "def check(list_split):\n\tassert list_split(['g', 'j', 'q', 'y', 's', 'g', 'l', 'x', 't', 't', 'c', 's', 'm', 'h'], 8) == [['g', 't'], ['j', 't'], ['q', 'c'], ['y', 's'], ['s', 'm'], ['g', 'h'], ['l'], ['x']]", "def check(list_split):\n\tassert list_split(['d', 'i', 'b', 's', 'b', 'g', 'g', 'i', 'l', 'd', 'm', 'y', 'x', 'z'], 5) == [['d', 'g', 'm'], ['i', 'g', 'y'], ['b', 'i', 'x'], ['s', 'l', 'z'], ['b', 'd']]", "def check(list_split):\n\tassert list_split(['p', 'l', 's', 'w', 'l', 'p', 'f', 'd', 'w', 'i', 'j', 'l', 'h', 'n'], 3) == [['p', 'w', 'f', 'i', 'h'], ['l', 'l', 'd', 'j', 'n'], ['s', 'p', 'w', 'l']]", "def check(list_split):\n\tassert list_split(['m', 'n', 'b', 'b', 'k', 'g', 'u', 'n', 'q', 'q', 'd', 't', 'y', 'a'], 3) == [['m', 'b', 'u', 'q', 'y'], ['n', 'k', 'n', 'd', 'a'], ['b', 'g', 'q', 't']]", "def check(list_split):\n\tassert list_split(['c', 'p', 'e', 't', 'q', 'o', 'o', 'i', 'p', 'x', 'r', 'y', 'y', 'j'], 2) == [['c', 'e', 'q', 'o', 'p', 'r', 'y'], ['p', 't', 'o', 'i', 'x', 'y', 'j']]", "def check(list_split):\n\tassert list_split(['j', 'r', 'o', 'f', 'f', 'u', 'x', 't', 'p', 'o', 'c', 'f', 'x', 'f'], 8) == [['j', 'p'], ['r', 'o'], ['o', 'c'], ['f', 'f'], ['f', 'x'], ['u', 'f'], ['x'], ['t']]", "def check(list_split):\n\tassert list_split(['b', 'j', 'a', 'u', 'q', 'c', 't', 'd', 'h', 'a', 'x', 'r', 'x', 'o'], 8) == [['b', 'h'], ['j', 'a'], ['a', 'x'], ['u', 'r'], ['q', 'x'], ['c', 'o'], ['t'], ['d']]", "def check(list_split):\n\tassert list_split(['n', 'r', 'r', 'j', 'e', 't', 'f', 's', 'x', 'x', 'y', 'b', 'e', 'z'], 6) == [['n', 'f', 'e'], ['r', 's', 'z'], ['r', 'x'], ['j', 'x'], ['e', 'y'], ['t', 'b']]", "def check(list_split):\n\tassert list_split(['b', 'w', 'u', 'r', 'f', 'h', 't', 'o', 'f', 'm', 'k', 'g', 'l', 'f'], 6) == [['b', 't', 'l'], ['w', 'o', 'f'], ['u', 'f'], ['r', 'm'], ['f', 'k'], ['h', 'g']]", "def check(list_split):\n\tassert list_split(['y', 'j', 'o', 'd', 'f', 'x', 'n', 'p', 'd', 'a', 'a', 's', 'l', 't'], 2) == [['y', 'o', 'f', 'n', 'd', 'a', 'l'], ['j', 'd', 'x', 'p', 'a', 's', 't']]", "def check(list_split):\n\tassert list_split(['f', 'v', 'h', 'k', 'c', 'x', 'r', 'l', 'z', 'x', 'j', 'r', 'f', 'l'], 5) == [['f', 'x', 'j'], ['v', 'r', 'r'], ['h', 'l', 'f'], ['k', 'z', 'l'], ['c', 'x']]", "def check(list_split):\n\tassert list_split(['b', 'j', 'd', 'm', 'v', 't', 'g', 'o', 'q', 'd', 'l', 'p', 'b', 'w'], 5) == [['b', 't', 'l'], ['j', 'g', 'p'], ['d', 'o', 'b'], ['m', 'q', 'w'], ['v', 'd']]", "def check(list_split):\n\tassert list_split(['y', 'y', 'i', 'q', 'x', 'w', 'r', 'o', 'i', 't', 'd', 't', 'k', 'f'], 6) == [['y', 'r', 'k'], ['y', 'o', 'f'], ['i', 'i'], ['q', 't'], ['x', 'd'], ['w', 't']]", "def check(list_split):\n\tassert list_split(['q', 'j', 'i', 'c', 'u', 'v', 'd', 'l', 'v', 'r', 'k', 'k', 'u', 'c'], 1) == [['q', 'j', 'i', 'c', 'u', 'v', 'd', 'l', 'v', 'r', 'k', 'k', 'u', 'c']]", "def check(list_split):\n\tassert list_split(['p', 't', 'c', 'h', 'b', 'y', 'n', 'z', 'k', 'p', 'z', 'f', 'w', 'z'], 6) == [['p', 'n', 'w'], ['t', 'z', 'z'], ['c', 'k'], ['h', 'p'], ['b', 'z'], ['y', 'f']]", "def check(list_split):\n\tassert list_split(['h', 'n', 'a', 'p', 'n', 't', 'z', 'u', 'j', 'n', 'z', 'w', 'a', 'h'], 5) == [['h', 't', 'z'], ['n', 'z', 'w'], ['a', 'u', 'a'], ['p', 'j', 'h'], ['n', 'n']]", "def check(list_split):\n\tassert list_split(['h', 'g', 'h', 'v', 'j', 'm', 'f', 'y', 'y', 'a', 'r', 'z', 'h', 'c'], 1) == [['h', 'g', 'h', 'v', 'j', 'm', 'f', 'y', 'y', 'a', 'r', 'z', 'h', 'c']]", "def check(list_split):\n\tassert list_split(['p', 'b', 'e', 't', 'q', 'y', 'f', 'o', 'r', 'i', 'r', 'b', 's', 'r'], 4) == [['p', 'q', 'r', 's'], ['b', 'y', 'i', 'r'], ['e', 'f', 'r'], ['t', 'o', 'b']]", "def check(list_split):\n\tassert list_split([1, 7, 6, 6, 6, 7, 2, 13, 14, 8, 7, 15, 11, 13], 8) == [[1, 14], [7, 8], [6, 7], [6, 15], [6, 11], [7, 13], [2], [13]]", "def check(list_split):\n\tassert list_split([2, 1, 6, 6, 3, 2, 10, 5, 6, 8, 8, 14, 15, 18], 4) == [[2, 3, 6, 15], [1, 2, 8, 18], [6, 10, 8], [6, 5, 14]]", "def check(list_split):\n\tassert list_split([3, 2, 3, 6, 4, 11, 9, 8, 13, 9, 7, 10, 10, 9], 6) == [[3, 9, 10], [2, 8, 9], [3, 13], [6, 9], [4, 7], [11, 10]]", "def check(list_split):\n\tassert list_split([6, 3, 7, 9, 3, 5, 8, 4, 10, 12, 12, 15, 14, 13], 4) == [[6, 3, 10, 14], [3, 5, 12, 13], [7, 8, 12], [9, 4, 15]]", "def check(list_split):\n\tassert list_split([1, 5, 4, 5, 7, 3, 8, 8, 12, 9, 15, 9, 18, 15], 4) == [[1, 7, 12, 18], [5, 3, 9, 15], [4, 8, 15], [5, 8, 9]]", "def check(list_split):\n\tassert list_split([4, 6, 4, 5, 9, 2, 4, 4, 12, 15, 10, 15, 16, 13], 1) == [[4, 6, 4, 5, 9, 2, 4, 4, 12, 15, 10, 15, 16, 13]]", "def check(list_split):\n\tassert list_split([4, 5, 5, 1, 3, 9, 5, 12, 14, 13, 13, 12, 12, 16], 1) == [[4, 5, 5, 1, 3, 9, 5, 12, 14, 13, 13, 12, 12, 16]]", "def check(list_split):\n\tassert list_split([5, 2, 2, 4, 7, 11, 3, 3, 12, 5, 13, 14, 16, 16], 3) == [[5, 4, 3, 5, 16], [2, 7, 3, 13, 16], [2, 11, 12, 14]]", "def check(list_split):\n\tassert list_split([3, 4, 8, 6, 10, 8, 8, 8, 10, 13, 7, 17, 17, 16], 4) == [[3, 10, 10, 17], [4, 8, 13, 16], [8, 8, 7], [6, 8, 17]]", "def check(list_split):\n\tassert list_split([1, 7, 5, 4, 2, 3, 11, 10, 6, 11, 14, 11, 8, 12], 4) == [[1, 2, 6, 8], [7, 3, 11, 12], [5, 11, 14], [4, 10, 11]]", "def check(list_split):\n\tassert list_split([2, 1, 4, 8, 6, 1, 3, 6, 11, 15, 8, 7, 8, 10], 4) == [[2, 6, 11, 8], [1, 1, 15, 10], [4, 3, 8], [8, 6, 7]]", "def check(list_split):\n\tassert list_split([1, 5, 8, 4, 3, 5, 9, 3, 6, 12, 8, 13, 12, 9], 8) == [[1, 6], [5, 12], [8, 8], [4, 13], [3, 12], [5, 9], [9], [3]]", "def check(list_split):\n\tassert list_split([6, 6, 8, 5, 2, 7, 8, 13, 14, 10, 6, 9, 14, 14], 5) == [[6, 7, 6], [6, 8, 9], [8, 13, 14], [5, 14, 14], [2, 10]]", "def check(list_split):\n\tassert list_split([3, 4, 8, 9, 6, 11, 6, 9, 6, 12, 6, 17, 18, 17], 3) == [[3, 9, 6, 12, 18], [4, 6, 9, 6, 17], [8, 11, 6, 17]]", "def check(list_split):\n\tassert list_split([4, 5, 4, 9, 10, 6, 12, 4, 10, 9, 16, 13, 17, 10], 8) == [[4, 10], [5, 9], [4, 16], [9, 13], [10, 17], [6, 10], [12], [4]]", "def check(list_split):\n\tassert list_split([1, 5, 5, 3, 6, 10, 3, 10, 12, 15, 12, 10, 14, 16], 2) == [[1, 5, 6, 3, 12, 12, 14], [5, 3, 10, 10, 15, 10, 16]]", "def check(list_split):\n\tassert list_split([5, 5, 8, 7, 3, 5, 9, 9, 5, 5, 9, 12, 11, 16], 3) == [[5, 7, 9, 5, 11], [5, 3, 9, 9, 16], [8, 5, 5, 12]]", "def check(list_split):\n\tassert list_split([6, 3, 8, 2, 6, 3, 5, 7, 5, 6, 13, 17, 14, 17], 3) == [[6, 2, 5, 6, 14], [3, 6, 7, 13, 17], [8, 3, 5, 17]]", "def check(list_split):\n\tassert list_split([5, 4, 6, 6, 8, 3, 4, 12, 6, 15, 12, 11, 9, 17], 2) == [[5, 6, 8, 4, 6, 12, 9], [4, 6, 3, 12, 15, 11, 17]]", "def check(list_split):\n\tassert list_split([3, 1, 3, 9, 5, 6, 6, 4, 11, 11, 10, 14, 10, 17], 7) == [[3, 4], [1, 11], [3, 11], [9, 10], [5, 14], [6, 10], [6, 17]]", "def check(list_split):\n\tassert list_split([4, 3, 1, 3, 7, 10, 10, 5, 5, 11, 11, 14, 17, 9], 4) == [[4, 7, 5, 17], [3, 10, 11, 9], [1, 10, 11], [3, 5, 14]]", "def check(list_split):\n\tassert list_split([2, 3, 8, 9, 4, 9, 11, 12, 11, 15, 13, 10, 11, 17], 7) == [[2, 12], [3, 11], [8, 15], [9, 13], [4, 10], [9, 11], [11, 17]]", "def check(list_split):\n\tassert list_split([2, 5, 3, 1, 5, 8, 3, 7, 10, 5, 14, 15, 14, 11], 4) == [[2, 5, 10, 14], [5, 8, 5, 11], [3, 3, 14], [1, 7, 15]]", "def check(list_split):\n\tassert list_split([5, 7, 6, 6, 9, 9, 4, 10, 4, 11, 12, 15, 9, 11], 6) == [[5, 4, 9], [7, 10, 11], [6, 4], [6, 11], [9, 12], [9, 15]]", "def check(list_split):\n\tassert list_split([5, 2, 7, 6, 5, 6, 5, 6, 5, 6, 13, 17, 12, 16], 7) == [[5, 6], [2, 5], [7, 6], [6, 13], [5, 17], [6, 12], [5, 16]]", "def check(list_split):\n\tassert list_split([5, 2, 4, 4, 1, 10, 3, 13, 11, 8, 12, 14, 9, 13], 3) == [[5, 4, 3, 8, 9], [2, 1, 13, 12, 13], [4, 10, 11, 14]]", "def check(list_split):\n\tassert list_split([1, 4, 7, 2, 7, 8, 12, 4, 12, 5, 12, 9, 9, 16], 7) == [[1, 4], [4, 12], [7, 5], [2, 12], [7, 9], [8, 9], [12, 16]]", "def check(list_split):\n\tassert list_split([4, 5, 7, 5, 6, 7, 9, 6, 8, 11, 6, 15, 15, 18], 6) == [[4, 9, 15], [5, 6, 18], [7, 8], [5, 11], [6, 6], [7, 15]]", "def check(list_split):\n\tassert list_split([6, 1, 1, 9, 8, 11, 10, 5, 10, 7, 7, 9, 13, 9], 3) == [[6, 9, 10, 7, 13], [1, 8, 5, 7, 9], [1, 11, 10, 9]]", "def check(list_split):\n\tassert list_split([3, 5, 8, 1, 7, 3, 7, 13, 10, 15, 9, 12, 12, 14], 5) == [[3, 3, 9], [5, 7, 12], [8, 13, 12], [1, 10, 14], [7, 15]]", "def check(list_split):\n\tassert list_split([5, 5, 4, 8, 9, 9, 8, 5, 7, 13, 6, 8, 17, 19], 3) == [[5, 8, 8, 13, 17], [5, 9, 5, 6, 19], [4, 9, 7, 8]]", "def check(list_split):\n\tassert list_split([2, 4, 6, 5, 4, 5, 5, 13, 7, 7, 9, 16, 16, 10], 7) == [[2, 13], [4, 7], [6, 7], [5, 9], [4, 16], [5, 16], [5, 10]]", "def check(list_split):\n\tassert list_split([3, 5, 5, 1, 5, 8, 5, 12, 14, 7, 10, 15, 12, 15], 4) == [[3, 5, 14, 12], [5, 8, 7, 15], [5, 5, 10], [1, 12, 15]]", "def check(list_split):\n\tassert list_split(['mldawzqafgqy', 'hjxingcz', 'F', 'O<@YV>', 'WUOU', 'ASTU'], 2) == [['mldawzqafgqy', 'F', 'WUOU'], ['hjxingcz', 'O<@YV>', 'ASTU']]", "def check(list_split):\n\tassert list_split(['jxwlgjrckp', 'ygn', 'W', 'TOSJ/JB~', 'TAM', 'ZPYWLK'], 4) == [['jxwlgjrckp', 'TAM'], ['ygn', 'ZPYWLK'], ['W'], ['TOSJ/JB~']]", "def check(list_split):\n\tassert list_split(['zzczoyjvne', 'uyy', 'B', '*>C>', 'KETDI', 'PFDYPK'], 6) == [['zzczoyjvne'], ['uyy'], ['B'], ['*>C>'], ['KETDI'], ['PFDYPK']]", "def check(list_split):\n\tassert list_split(['pflcapycprf', 'foz', 'P', '-$%PNP:', 'KKI', 'LJUQIH'], 5) == [['pflcapycprf', 'LJUQIH'], ['foz'], ['P'], ['-$%PNP:'], ['KKI']]", "def check(list_split):\n\tassert list_split(['aqzshftajzav', 'sqlmrk', 'U', 'OO!KZTC', 'WRBM', 'ZGT'], 4) == [['aqzshftajzav', 'WRBM'], ['sqlmrk', 'ZGT'], ['U'], ['OO!KZTC']]", "def check(list_split):\n\tassert list_split(['xnepknc', 'yvpjhfky', 'D', 'XCHE', 'VKH', 'VYY'], 1) == [['xnepknc', 'yvpjhfky', 'D', 'XCHE', 'VKH', 'VYY']]", "def check(list_split):\n\tassert list_split(['rlbvnzwbbwg', 'yvd', 'B', 'HF<HC', 'PMRELUQ', 'UKEAHLH'], 4) == [['rlbvnzwbbwg', 'PMRELUQ'], ['yvd', 'UKEAHLH'], ['B'], ['HF<HC']]", "def check(list_split):\n\tassert list_split(['wom', 'odh', 'M', '_ZVM', 'ONNGKAO', 'FGOHBQPK'], 7) == [['wom'], ['odh'], ['M'], ['_ZVM'], ['ONNGKAO'], ['FGOHBQPK'], []]", "def check(list_split):\n\tassert list_split(['hcujy', 'ftu', 'T', '<LL>KJ', 'UGDLK', 'VEC'], 7) == [['hcujy'], ['ftu'], ['T'], ['<LL>KJ'], ['UGDLK'], ['VEC'], []]", "def check(list_split):\n\tassert list_split(['rrhhrpcssoql', 'rqfjytod', 'I', 'YA&$R', 'NYV', 'LHVZWFPJA'], 3) == [['rrhhrpcssoql', 'YA&$R'], ['rqfjytod', 'NYV'], ['I', 'LHVZWFPJA']]", "def check(list_split):\n\tassert list_split(['vgeciikehj', 'vsxucvfb', 'H', '>UA', 'AJFSSVKI', 'JZP'], 2) == [['vgeciikehj', 'H', 'AJFSSVKI'], ['vsxucvfb', '>UA', 'JZP']]", "def check(list_split):\n\tassert list_split(['tpimgzkzrc', 'ytm', 'Y', 'B-+-SHJ', 'PKUN', 'GQBHT'], 5) == [['tpimgzkzrc', 'GQBHT'], ['ytm'], ['Y'], ['B-+-SHJ'], ['PKUN']]", "def check(list_split):\n\tassert list_split(['zjdsfcnfs', 'pfnuxdal', 'I', '#S>^', 'CFFWC', 'AJGBG'], 2) == [['zjdsfcnfs', 'I', 'CFFWC'], ['pfnuxdal', '#S>^', 'AJGBG']]", "def check(list_split):\n\tassert list_split(['huyb', 'wgvyu', 'E', 'L&P', 'YEDISE', 'RUJEDJ'], 3) == [['huyb', 'L&P'], ['wgvyu', 'YEDISE'], ['E', 'RUJEDJ']]", "def check(list_split):\n\tassert list_split(['kuk', 'tactevqo', 'L', '>RU=E', 'DBIU', 'BRZ'], 6) == [['kuk'], ['tactevqo'], ['L'], ['>RU=E'], ['DBIU'], ['BRZ']]", "def check(list_split):\n\tassert list_split(['qxqkppyenhqc', 'kackpnmg', 'U', '^<LZ/', 'PAH', 'IXWHEGL'], 3) == [['qxqkppyenhqc', '^<LZ/'], ['kackpnmg', 'PAH'], ['U', 'IXWHEGL']]", "def check(list_split):\n\tassert list_split(['cgk', 'uzmezww', 'P', 'UFUZNT', 'WOEPJ', 'YHEXMO'], 7) == [['cgk'], ['uzmezww'], ['P'], ['UFUZNT'], ['WOEPJ'], ['YHEXMO'], []]", "def check(list_split):\n\tassert list_split(['sckskgqqom', 'orbqe', 'J', 'J<+&', 'XEVBTEX', 'JTR'], 2) == [['sckskgqqom', 'J', 'XEVBTEX'], ['orbqe', 'J<+&', 'JTR']]", "def check(list_split):\n\tassert list_split(['nkndpuyc', 'ufjv', 'D', '_/QNG>-', 'SZACNRA', 'VCSB'], 1) == [['nkndpuyc', 'ufjv', 'D', '_/QNG>-', 'SZACNRA', 'VCSB']]", "def check(list_split):\n\tassert list_split(['eiqi', 'bpvkpkm', 'U', 'P*:D|JDEE', 'FLFEQADYF', 'SKI'], 5) == [['eiqi', 'SKI'], ['bpvkpkm'], ['U'], ['P*:D|JDEE'], ['FLFEQADYF']]", "def check(list_split):\n\tassert list_split(['uqfbqo', 'ygyykebkp', 'G', 'D_JL/', 'BBHWSSTWN', 'KSLTRM'], 3) == [['uqfbqo', 'D_JL/'], ['ygyykebkp', 'BBHWSSTWN'], ['G', 'KSLTRM']]", "def check(list_split):\n\tassert list_split(['ptkalnuif', 'frhje', 'E', 'JCSF<:B', 'YLHFRIVGN', 'FKM'], 2) == [['ptkalnuif', 'E', 'YLHFRIVGN'], ['frhje', 'JCSF<:B', 'FKM']]", "def check(list_split):\n\tassert list_split(['fthdke', 'vczvnb', 'Y', 'V-H^N', 'OIQB', 'QOLQYGUY'], 3) == [['fthdke', 'V-H^N'], ['vczvnb', 'OIQB'], ['Y', 'QOLQYGUY']]", "def check(list_split):\n\tassert list_split(['ccjtgkfqti', 'xqu', 'O', 'O<@D_W', 'TEHKWQPO', 'NVRTJ'], 2) == [['ccjtgkfqti', 'O', 'TEHKWQPO'], ['xqu', 'O<@D_W', 'NVRTJ']]", "def check(list_split):\n\tassert list_split(['kjqifx', 'gnztfgx', 'C', '<%ZWTVI', 'QHV', 'WVAXRVY'], 3) == [['kjqifx', '<%ZWTVI'], ['gnztfgx', 'QHV'], ['C', 'WVAXRVY']]", "def check(list_split):\n\tassert list_split(['mkrzv', 'okll', 'S', 'GXU^IH=Z', 'MAERAVIBB', 'CNTHT'], 1) == [['mkrzv', 'okll', 'S', 'GXU^IH=Z', 'MAERAVIBB', 'CNTHT']]", "def check(list_split):\n\tassert list_split(['ykqmukk', 'sproluv', 'V', 'V=R@RY$/P', 'GKDNPCP', 'IIIJSOS'], 4) == [['ykqmukk', 'GKDNPCP'], ['sproluv', 'IIIJSOS'], ['V'], ['V=R@RY$/P']]", "def check(list_split):\n\tassert list_split(['wmly', 'pgwkis', 'U', 'D>_JRTN%', 'KDLJL', 'SOAG'], 1) == [['wmly', 'pgwkis', 'U', 'D>_JRTN%', 'KDLJL', 'SOAG']]", "def check(list_split):\n\tassert list_split(['glnxgopgguih', 'kzm', 'B', 'M>L', 'JAWI', 'HCRHSEGZK'], 4) == [['glnxgopgguih', 'JAWI'], ['kzm', 'HCRHSEGZK'], ['B'], ['M>L']]", "def check(list_split):\n\tassert list_split(['lwxugh', 'yhaycqrm', 'U', 'VK:', 'IRU', 'NFTDBDIBN'], 4) == [['lwxugh', 'IRU'], ['yhaycqrm', 'NFTDBDIBN'], ['U'], ['VK:']]", "def check(list_split):\n\tassert list_split(['mjtqyin', 'xzeiwcy', 'I', '*~$~', 'YJUUHQ', 'BJOQ'], 7) == [['mjtqyin'], ['xzeiwcy'], ['I'], ['*~$~'], ['YJUUHQ'], ['BJOQ'], []]", "def check(list_split):\n\tassert list_split(['cjxznkyts', 'tdqih', 'X', '!J+L*', 'OIR', 'THFQX'], 1) == [['cjxznkyts', 'tdqih', 'X', '!J+L*', 'OIR', 'THFQX']]", "def check(list_split):\n\tassert list_split(['vabqxvvhbbk', 'wxd', 'C', '&JVU', 'HIABYZ', 'BBLSXUFRY'], 1) == [['vabqxvvhbbk', 'wxd', 'C', '&JVU', 'HIABYZ', 'BBLSXUFRY']]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input_list into sublists based on every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of sublists split at every nth element.\n\n    Raises:\n    ValueError: If n is negative or zero.\n    \"\"\"\n    # Check if the input list is empty\n    if not input_list:\n        return []\n\n    # Check if n is less than or equal to zero\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize an empty list to store the resulting sublists\n    result = []\n\n    # Use a loop to iterate over the range of n (0 to n-1)\n    for i in range(n):\n        # Create a sublist by selecting elements from the original list\n        # starting at the current index and taking every nth element\n        sublist = input_list[i::n]\n        # Append each sublist to the result list\n        result.append(sublist)\n\n    # Return the result list\n    return result\n\n# Example usage:\n# list_split(['a', 'b', 'c', 'd', 'e', 'f'], 2) should return [['a', 'c', 'e'], ['b', 'd', 'f']]\n# list_split([], 3) should return []\n# list_split(['a', 'b', 'c'], -1) should raise ValueError\n# list_split(['a', 'b', 'c'], 0) should raise ValueError\n", "passed": true, "pass": true, "pass_num": 10, "round": 99, "mutate_method": "add_1_sentence_at_end", "parent_index": 99}
