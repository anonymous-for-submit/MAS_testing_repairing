{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 12, "prompt": "Write a function to sort a given matrix by arranging its rows in ascending order based on the sum of their elements.", "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "assert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "assert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "assert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "assert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "assert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "assert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "assert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "assert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "assert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "assert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "assert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "assert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "assert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "assert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "assert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "assert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "assert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "assert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "assert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "assert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "assert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "assert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "assert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "assert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "assert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "assert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "assert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "assert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "assert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "assert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "assert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "assert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "assert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "assert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "assert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "assert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "assert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "assert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "assert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "assert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "assert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "assert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "assert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "assert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "assert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "assert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "assert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "assert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "assert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "assert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "assert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "assert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "assert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "assert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "assert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "assert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "assert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "assert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "assert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "assert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "assert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "assert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "assert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "assert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "assert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "assert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "assert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "assert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "assert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "assert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "assert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "assert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "assert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "assert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "assert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "assert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "assert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "assert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "assert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "assert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "assert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "assert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "assert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "assert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "assert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "assert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "assert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "assert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "assert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "assert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "assert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "assert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "assert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "assert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "assert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "assert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "assert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "assert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "assert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "entry_point": "sort_matrix", "repair_prompt": ["Write a function sort_matrix to sort a given matrix by arranging its rows in ascending order based on the sum of their elements.\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "Write a function sort_matrix to sort a given matrix by arranging its rows in ascending order. The sorting should be based on the sum of their elements after calculation.\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "Write a function sort_matrix to sort a given matrix by arranging its rows in ascending order based on the sum of their elements.\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"], "completions": ["from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Sorts the rows of a matrix in ascending order based on the sum of their elements.\n    \n    Parameters:\n    matrix (list of list of int): A 2D list where each sublist represents a row of the matrix.\n    \n    Returns:\n    list of list of int: A new matrix with rows sorted by the sum of their elements.\n    \"\"\"\n    # Use the sorted function with a custom key to sort the rows by the sum of their elements\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(sort_matrix([]))  # Expected output: []\n    print(sort_matrix([[0, 0, 0], [1, -1, 0], [2, 2, -4]]))  # Expected output: [[1, -1, 0], [0, 0, 0], [2, 2, -4]]\n    print(sort_matrix([[1]]))  # Expected output: [[1]]\n", "from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Sorts the rows of the given matrix in ascending order based on the sum of their elements.\n\n    Parameters:\n    matrix (list of list of int): A 2D list where each sublist represents a row of the matrix.\n\n    Returns:\n    list of list of int: A new matrix with rows sorted by the sum of their elements.\n\n    Raises:\n    ValueError: If any row contains non-numeric elements or if the matrix is empty.\n    \"\"\"\n    if not matrix:\n        return []\n\n    try:\n        # Sort the matrix using the sum of each row as the key\n        sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n        return sorted_matrix\n    except TypeError:\n        raise ValueError(\"All elements in the matrix must be numeric.\")\n\n## Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    try:\n        print(sort_matrix([]))  # Expected output: []\n        print(sort_matrix([[1, 2], [3, 4], []]))  # Expected output: [[], [1, 2], [3, 4]]\n        print(sort_matrix([[1, 2], [2, 'a'], [3, 4]]))  # Expected to raise ValueError\n    except ValueError as e:\n        print(e)\n", "from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Sorts the rows of a matrix in ascending order based on the sum of their elements.\n    \n    Parameters:\n    matrix (list[list[int]]): A 2D list representing the matrix to be sorted.\n    \n    Returns:\n    list[list[int]]: A new matrix with rows sorted by the sum of their elements.\n    \"\"\"\n    # Use the sorted function with a key that calculates the sum of each row\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    example_matrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\n    sorted_example = sort_matrix(example_matrix)\n    print(\"Sorted Matrix:\", sorted_example)\n", "from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Sorts the rows of a given matrix based on the sum of their elements.\n\n    Parameters:\n    matrix (list of list of int): A 2D list where each sublist represents a row of the matrix.\n\n    Returns:\n    list of list of int: A new matrix with rows sorted in ascending order based on the sum of their elements.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix:\n        return []\n\n    # Sort the matrix rows based on the sum of their elements\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n\n    return sorted_matrix\n\n# Unit tests to verify the function works as expected\ndef test_sort_matrix():\n    # Test with an empty matrix\n    assert sort_matrix([]) == []\n\n    # Test with a matrix containing negative numbers\n    assert sort_matrix([[0, 0, 0], [1, -1, 0], [-1, -1, -1]]) == [[-1, -1, -1], [1, -1, 0], [0, 0, 0]]\n\n    # Test with a matrix where each row has a single element\n    assert sort_matrix([[5], [3], [4]]) == [[3], [4], [5]]\n\n    # Test with a typical matrix\n    assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\n    print(\"All tests passed.\")\n\n# Run the unit tests\nif __name__ == \"__main__\":\n    test_sort_matrix()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a given matrix by arranging its rows in ascending order based on the sum of their elements.\n\n    Parameters:\n    matrix (List[List[int]]): A 2D list representing the matrix to be sorted.\n\n    Returns:\n    List[List[int]]: A new matrix with rows sorted by the sum of their elements.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix:\n        return []\n\n    # Calculate the sum of elements for each row and sort the matrix based on these sums\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n\n    return sorted_matrix\n\n# Example usage:\n# sorted_matrix = sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n# print(sorted_matrix)  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    '''\n    Sorts a given matrix by arranging its rows in ascending order based on the sum of their elements.\n    \n    Parameters:\n    matrix (list[list[int]]): A list of lists where each sublist represents a row of the matrix.\n    \n    Returns:\n    list[list[int]]: A new matrix with rows sorted by the sum of their elements.\n    \n    Example:\n    >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n    [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    '''\n    # Check if the matrix is empty\n    if not matrix:\n        return []\n\n    # Sort the matrix rows based on the sum of their elements\n    sorted_matrix = sorted(matrix, key=sum)\n\n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    example_matrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\n    print(sort_matrix(example_matrix))\n", "from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Sorts the rows of a matrix in ascending order based on the sum of their elements.\n\n    Parameters:\n    matrix (list[list[int]]): A 2D list representing the matrix to be sorted.\n\n    Returns:\n    list[list[int]]: A new matrix with rows sorted by the sum of their elements.\n    \n    Raises:\n    ValueError: If any row contains non-numeric elements.\n    \"\"\"\n    # Validate matrix to ensure all elements are numeric\n    for row in matrix:\n        if not all(isinstance(element, (int, float)) for element in row):\n            raise ValueError(\"Matrix contains non-numeric elements.\")\n\n    # Sort the matrix rows based on the sum of their elements\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    \n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(sort_matrix([[0, 0, 0], [1, 1, 1], [2, 2, 2]]))  # Expected: [[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n    print(sort_matrix([[5], [3], [4]]))  # Expected: [[3], [4], [5]]\n    print(sort_matrix([[1, 2], [2, 1], [1, 1]]))  # Expected: [[1, 1], [1, 2], [2, 1]]\n", "from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Sorts the rows of a given matrix in ascending order based on the sum of their elements.\n\n    Parameters:\n    matrix (list of list of int): A 2D list where each sublist represents a row of the matrix.\n\n    Returns:\n    list of list of int: A new matrix with rows sorted by the sum of their elements.\n    \"\"\"\n    # Check if the matrix is empty\n    if not matrix:\n        return []\n\n    # Sort the matrix rows based on the sum of their elements\n    sorted_matrix = sorted(matrix, key=sum)\n\n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(sort_matrix([]))  # Expected output: []\n    print(sort_matrix([[0, 0, 0], [1, 1, 1], [2, 2, 2]]))  # Expected output: [[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n    print(sort_matrix([[5], [3], [4]]))  # Expected output: [[3], [4], [5]]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts the rows of a matrix based on the sum of their elements.\n\n    Parameters:\n    matrix (List[List[int]]): A 2D list representing the matrix.\n\n    Returns:\n    List[List[int]]: A new matrix with rows sorted in ascending order based on the sum of their elements.\n    \"\"\"\n    # Use the sorted function with a key that calculates the sum of each row\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(sort_matrix([]))  # Expected output: []\n    print(sort_matrix([[1, 1, 1], [1, 1, 1]]))  # Expected output: [[1, 1, 1], [1, 1, 1]]\n    print(sort_matrix([[0], [0, 0], [0, 0, 0]]))  # Expected output: [[0], [0, 0], [0, 0, 0]]\n    print(sort_matrix([[3, 2, 1], [1, 2, 3], [4, 5, 6]]))  # Expected output: [[1, 2, 3], [3, 2, 1], [4, 5, 6]]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    '''\n    Sorts a given matrix by arranging its rows in ascending order based on the sum of their elements.\n    \n    Parameters:\n    matrix (List[List[int]]): A 2D list representing the matrix to be sorted.\n    \n    Returns:\n    List[List[int]]: A new matrix with rows sorted by the sum of their elements.\n    '''\n    # Use Python's built-in sorted function with a custom key to sort rows based on the sum of their elements\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to verify the function works as expected\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Expected output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    print(sort_matrix([]))  # Expected output: []\n    print(sort_matrix([[0, 0, 0], [1, -1, 0], [2, 2, -4]]))  # Expected output: [[1, -1, 0], [0, 0, 0], [2, 2, -4]]\n    print(sort_matrix([[1]]))  # Expected output: [[1]]\n"], "plans": ["requirement analysis:\nThe function should efficiently sort matrix rows based on the sum of their elements, ensuring compatibility with Python 3.x and handling edge cases like empty matrices or matrices with negative numbers.\nrequirement pool:\n- Efficiently sort matrix rows based on the sum of their elements\n- Ensure compatibility with Python 3.x\n- Handle edge cases like empty matrices or matrices with negative numbers\n- Provide clear documentation and examples\n- Maintain compatibility with existing codebases\nWe will implement a simple Python function using built-in list operations to sort the rows of a matrix based on the sum of their elements. This approach ensures compatibility with Python 3.x and handles edge cases like empty matrices or matrices with negative numbers. We will avoid using complex libraries like NumPy or Pandas to keep the solution lightweight and easy to integrate.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    A matrix is a two-dimensional array of numbers, where each element is identified by two indices: the row number and the column number.\n\n    'sort'\n    Sorting refers to arranging data in a particular order. In this requirement, it means arranging the rows of the matrix based on the sum of their elements.\n\n# [phrase showing quantity relationship]\n    'ascending order': This means that the rows should be arranged from the smallest sum to the largest sum.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a function `sort_matrix` that takes a matrix (list of lists) as input.\n    2. Use the `sorted` function with a custom key to sort the rows of the matrix.\n    3. The custom key should be the sum of the elements in each row.\n    4. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty matrix as there are no rows to sort.\n    \n    sort_matrix([[0, 0, 0], [1, -1, 0], [2, 2, -4]]) = [[1, -1, 0], [0, 0, 0], [2, 2, -4]]\n    Explanation: The sums of the rows are 0, 0, and 0 respectively. The function should handle negative numbers and zero correctly.\n\n    sort_matrix([[1]]) = [[1]]\n    Explanation: A single-element matrix should return itself as there is only one row to sort.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using the `sorted` function with a custom key will naturally handle empty matrices and matrices with negative numbers or single elements.\n", "requirement analysis:\nThe function should efficiently sort matrix rows based on the sum of elements, ensuring compatibility with various Python environments and providing clear documentation for ease of use.\nrequirement pool:\n- Implement the matrix sorting function\n- Ensure the function handles edge cases\n- Provide documentation and examples\n- Optimize for large matrices\n- Maintain compatibility with Python versions\nWe will implement a function named sort_matrix that sorts the rows of a given matrix based on the sum of their elements. The function will utilize Python's built-in sorted function with a custom key to achieve this. This approach ensures compatibility with various Python versions and provides an efficient solution for sorting. We will also handle edge cases such as empty matrices or rows with non-numeric elements by raising appropriate exceptions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    A matrix is a two-dimensional array consisting of rows and columns. In this requirement, each row of the matrix is a list of numbers.\n\n    'sort'\n    Sorting refers to arranging elements in a particular order. Here, it means arranging the rows of the matrix based on the sum of their elements.\n\n# [phrase showing quantity relationship]\n    'ascending order'\n    This means arranging the rows such that the row with the smallest sum comes first, followed by rows with larger sums.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Define the function `sort_matrix` that takes a matrix as input.\n2. Use Python's built-in `sorted` function to sort the matrix.\n3. Provide a custom key function to `sorted` that calculates the sum of each row.\n4. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty matrix as there are no rows to sort.\n    \n    sort_matrix([[1, 2], [3, 4], []]) = [[], [1, 2], [3, 4]]\n    Explanation: An empty row has a sum of 0, so it should appear first in the sorted matrix.\n    \n    sort_matrix([[1, 2], [2, 'a'], [3, 4]]) = Exception\n    Explanation: A row with non-numeric elements should raise an exception as sums cannot be calculated.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    \n```python\ndef sort_matrix(matrix):\n    try:\n        return sorted(matrix, key=lambda row: sum(row))\n    except TypeError:\n        raise ValueError(\"All elements in the matrix must be numeric.\")\n```\n", "requirement analysis:\nThe function should efficiently sort rows of a matrix based on the sum of their elements. It should handle various matrix sizes and provide clear documentation for users.\nrequirement pool:\n- Implement the matrix sorting function\n- Ensure compatibility with Python 3.x\n- Provide examples and documentation\n- Optimize for large matrices\n- Handle edge cases gracefully\nWe will implement a simple Python function using built-in list operations to sort the matrix rows based on the sum of their elements. This approach ensures compatibility with Python 3.x and provides an efficient solution for sorting without the complexity of external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array consisting of rows and columns. In this requirement, each row is a list of integers.\n\n    'sort'\n    Explanation: Sorting refers to arranging elements in a particular order. Here, it means arranging the rows of the matrix based on the sum of their elements.\n\n# [phrase showing quantity relationship]\n    'ascending order': \n    Explanation: This means arranging the rows such that the row with the smallest sum comes first, and the row with the largest sum comes last. In code, this can be implemented using the `sorted()` function with a key that calculates the sum of each row.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `sort_matrix` that takes a matrix (list of lists) as input.\n    2. Use the `sorted()` function to sort the matrix.\n    3. Set the key for sorting as the sum of each row.\n    4. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) = [[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n    Explanation: The sums are already in ascending order (0, 3, 6), so the matrix remains unchanged.\n\n    sort_matrix([[5], [3], [4]]) = [[3], [4], [5]]\n    Explanation: Each row has only one element, so sorting is based on these single values.\n\n    sort_matrix([[1, -1], [0, 0], [-1, 1]]) = [[-1, 1], [0, 0], [1, -1]]\n    Explanation: All rows have a sum of zero; thus, they can appear in any order relative to each other.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using `sorted()` with a key function will naturally handle these cases correctly.\n", "requirement analysis:\nThe function should efficiently sort rows of a matrix based on the sum of their elements. It should handle various matrix sizes and edge cases, such as empty matrices or matrices with negative numbers.\nrequirement pool:\n- Implement the sorting algorithm based on row sums\n- Ensure compatibility with Python 3.x\n- Provide comprehensive documentation\n- Optimize for large matrices\n- Include unit tests for edge cases\nWe will implement a function using pure Python to sort the rows of a matrix based on the sum of their elements. This approach will ensure compatibility with Python 3.x and will be efficient for handling large matrices. We will also include comprehensive documentation and unit tests to handle edge cases such as empty matrices or matrices with negative numbers. We will not use any third-party libraries to keep the solution simple and easy to integrate.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array consisting of rows and columns. In this requirement, the matrix is a list of lists where each inner list represents a row.\n\n    'sum of elements'\n    Explanation: The sum of elements refers to the total obtained by adding all the numbers in a row of the matrix.\n\n# [phrase showing quantity relationship]\n    'ascending order': means arranging the rows such that the sum of elements in each row increases from the smallest to the largest.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `sort_matrix` that takes a matrix (list of lists) as input.\n    2. Calculate the sum of elements for each row in the matrix.\n    3. Sort the rows based on their calculated sums in ascending order.\n    4. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix has no rows to sort, so the expected output is an empty list.\n    \n    sort_matrix([[0, 0, 0], [1, -1, 0], [-1, -1, -1]]) = [[-1, -1, -1], [1, -1, 0], [0, 0, 0]]\n    Explanation: The sums are -3, 0, and 0 respectively. The row with sum -3 comes first, followed by rows with sum 0.\n\n    sort_matrix([[5], [3], [4]]) = [[3], [4], [5]]\n    Explanation: Each row has only one element. The rows are sorted based on these single elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting based on the sum of elements will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently sort matrices based on the sum of their rows. It must handle various matrix sizes and edge cases, such as empty matrices or matrices with negative numbers.\nrequirement pool:\n- Implement the matrix sorting function\n- Ensure compatibility with Python 3.x\n- Provide comprehensive documentation\n- Optimize for performance with large matrices\n- Include unit tests for edge cases\nWe will implement the matrix sorting function using pure Python to ensure simplicity and compatibility with Python 3.x. The function will sort the matrix rows based on the sum of their elements. We will handle edge cases such as empty matrices and matrices with negative numbers. For efficiency, we will use Python's built-in sorting capabilities.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix': A matrix is a two-dimensional array consisting of rows and columns.\n    'sort': Arrange the rows of the matrix in a specific order.\n    'sum of elements': The total obtained by adding all the elements in a row.\n\n# [phrase showing quantity relationship]\n    'ascending order': Means arranging from smallest to largest based on the sum of elements in each row.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Calculate the sum of elements for each row in the matrix.\n    2. Use Python's built-in sorting function to sort the rows based on their calculated sums.\n    3. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty matrix as there are no rows to sort.\n    \n    sort_matrix([[0, 0, 0], [1, -1, 0], [-1, -1, -1]]) = [[-1, -1, -1], [1, -1, 0], [0, 0, 0]]\n    Explanation: The sums are -3, 0, and 0 respectively. The row with the smallest sum (-3) should come first.\n    \n    sort_matrix([[5], [3], [4]]) = [[3], [4], [5]]\n    Explanation: Each row has only one element. Sorting is straightforward based on the single element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. Python's built-in sorting capabilities can handle empty matrices and matrices with negative numbers directly.\n", "requirement analysis:\nThe function should efficiently sort matrices by row sums, handle edge cases like empty matrices, and be easy to integrate into existing projects. Documentation and examples are crucial for user understanding.\nrequirement pool:\n- Efficient sorting algorithm for matrices\n- Handle edge cases like empty matrices\n- Provide clear documentation and examples\n- Ensure compatibility with existing codebases\n- Optimize for large matrices\nWe will implement a simple Python function using built-in functions to sort the matrix rows based on the sum of their elements. This approach ensures low complexity and high efficiency for small to medium-sized matrices. We will handle edge cases like empty matrices by returning an empty list. The function will be documented with examples to ensure clarity and ease of integration.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array of numbers arranged in rows and columns.\n\n    'sort by sum of elements'\n    Explanation: This means that each row of the matrix should be sorted based on the sum of its elements, and the rows should be ordered in ascending order of these sums.\n\n# [phrase showing quantity relationship]\n    'ascending order': This means that the rows should be arranged from the smallest sum to the largest sum.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a function `sort_matrix` that takes a matrix (list of lists) as input.\n    2. Check if the matrix is empty. If it is, return an empty list.\n    3. Use the built-in `sorted` function with a key that calculates the sum of each row.\n    4. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty list as there are no rows to sort.\n\n    sort_matrix([[0, 0, 0], [1, 1, 1], [0, 0, 0]]) = [[0, 0, 0], [0, 0, 0], [1, 1, 1]]\n    Explanation: Rows with equal sums should maintain their relative order (stable sort).\n\n    sort_matrix([[5], [3], [4]]) = [[3], [4], [5]]\n    Explanation: Single-element rows should be sorted based on their single value.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using the `sorted` function with a key for sum will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently sort matrix rows based on the sum of their elements, ensuring compatibility with various data structures and providing clear documentation for ease of use.\nrequirement pool:\n- Implement the matrix sorting function\n- Optimize for large matrices\n- Provide comprehensive documentation\n- Ensure compatibility with existing systems\n- Handle edge cases gracefully\nWe will use Python's built-in sorted function to sort the matrix rows based on the sum of their elements. This approach is simple and efficient for basic sorting needs, ensuring compatibility with existing systems and handling edge cases gracefully. We will also provide comprehensive documentation with examples to facilitate user understanding.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array consisting of rows and columns. In this requirement, each row is a list of integers.\n\n    'sum of elements'\n    Explanation: The sum of elements refers to the total obtained by adding all the integers in a row of the matrix.\n\n# [phrase showing quantity relationship]\n    'ascending order': means arranging the rows such that the sum of elements in each row increases from the smallest to the largest.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Calculate the sum of elements for each row in the matrix.\n    - Use Python's built-in sorted function to sort the rows based on their calculated sums.\n    - Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) = [[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n    Explanation: The sums are 0, 3, and 6 respectively. The rows are already in ascending order based on their sums.\n\n    sort_matrix([[5], [3], [4]]) = [[3], [4], [5]]\n    Explanation: Each row contains a single element. The function should sort them based on these single values.\n\n    sort_matrix([[1, 2], [2, 1], [1, 1]]) = [[1, 1], [1, 2], [2, 1]]\n    Explanation: The sums are 2, 3, and 3 respectively. The row with sum 2 comes first, followed by rows with sum 3 in their original order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of Python's sorted function inherently handles these scenarios by sorting based on the sum of elements in each row.\n", "requirement analysis:\nThe requirement is to create a function that sorts matrix rows based on the sum of their elements. The function should be efficient, easy to use, and compatible with existing Python systems.\nrequirement pool:\n- Implement the matrix sorting function\n- Ensure the function handles edge cases like empty matrices\n- Provide comprehensive documentation\n- Optimize for performance with large matrices\n- Test compatibility with various Python versions\nWe will implement a simple Python function that sorts the rows of a matrix based on the sum of their elements. The function will utilize Python's built-in sorting capabilities to ensure efficiency. We will handle edge cases such as empty matrices and provide comprehensive documentation with examples. The function will be compatible with Python 3.x versions to ensure broad compatibility.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sort': means arranging the rows in a specific order based on a criterion.\n    'matrix': refers to a 2D list or array where each sub-list represents a row.\n\n# [phrase showing quantity relationship]\n    'ascending order': means arranging from smallest to largest based on the sum of elements in each row.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Calculate the sum of elements for each row in the matrix.\n    2. Use Python's built-in sorting function to sort the rows based on their calculated sums.\n    3. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty matrix as there are no rows to sort.\n    \n    sort_matrix([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) = [[0, 0, 0], [1, 1, 1], [2, 2, 2]]\n    Explanation: The sums are 0, 3, and 6 respectively, so the rows are already in ascending order.\n    \n    sort_matrix([[5], [3], [4]]) = [[3], [4], [5]]\n    Explanation: Single-element rows should be sorted based on their single value.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting based on row sums will naturally handle these cases.\n", "requirement analysis:\nThe function should sort the rows of a matrix based on the sum of their elements. It should handle matrices of varying sizes and ensure that the output is consistent with the input format. Edge cases, such as empty matrices or rows with identical sums, should be considered.\nrequirement pool:\n- Implement the core sorting functionality\n- Handle edge cases like empty matrices\n- Optimize for performance with large matrices\n- Provide comprehensive documentation\n- Ensure compatibility with Python 3.x\nWe will use Python's built-in sorted() function to sort the matrix rows based on the sum of their elements. This approach is simple and efficient for the task at hand. We will ensure the function handles edge cases like empty matrices and rows with identical sums by maintaining their original order.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array consisting of rows and columns. In this requirement, each row is a list of integers.\n\n    'sum of elements'\n    Explanation: The sum of elements refers to the total obtained by adding all the integers in a row of the matrix.\n\n# [phrase showing quantity relationship]\n    'ascending order': means arranging the rows such that the sum of elements in each row increases from the first row to the last.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function sort_matrix that takes a matrix as input.\n    2. Use the sorted() function with a key parameter that calculates the sum of each row.\n    3. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix has no rows to sort, so the expected output is an empty list.\n    \n    sort_matrix([[1, 1, 1], [1, 1, 1]]) = [[1, 1, 1], [1, 1, 1]]\n    Explanation: All rows have identical sums, so they maintain their original order.\n    \n    sort_matrix([[0], [0, 0], [0, 0, 0]]) = [[0], [0, 0], [0, 0, 0]]\n    Explanation: The sums are equal (all zero), so the original order is preserved.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of sorted() with a key parameter naturally handles empty matrices and rows with identical sums by maintaining their original order.\n", "requirement analysis:\nThe function should efficiently sort rows of a matrix based on the sum of their elements. It should handle edge cases such as empty matrices and rows with negative numbers. The implementation should be straightforward, leveraging Python's built-in capabilities for sorting.\nrequirement pool:\n- Implement the core sorting functionality\n- Handle edge cases like empty matrices\n- Provide comprehensive documentation\n- Optimize for performance with large matrices\n- Ensure compatibility with Python 3.x\nWe will implement the function using Python's built-in sorting capabilities, specifically leveraging the 'sorted' function with a custom key to sort rows based on the sum of their elements. This approach ensures compatibility with Python 3.x and handles edge cases like empty matrices and rows with negative numbers efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array consisting of rows and columns. In this requirement, each row is a list of integers.\n\n    'sort'\n    Explanation: Sorting refers to arranging elements in a particular order. Here, it means arranging the rows of the matrix in ascending order based on the sum of their elements.\n\n# [phrase showing quantity relationship]\n    'ascending order': This means that the rows should be arranged from the smallest sum to the largest sum.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `sort_matrix` that takes a matrix (list of lists) as input.\n    2. Use Python's built-in `sorted` function to sort the matrix.\n    3. Set the `key` parameter of `sorted` to a lambda function that calculates the sum of each row.\n    4. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty matrix since there are no rows to sort.\n\n    sort_matrix([[0, 0, 0], [1, -1, 0], [2, 2, -4]]) = [[1, -1, 0], [0, 0, 0], [2, 2, -4]]\n    Explanation: The sums of the rows are 0, 0, and 0 respectively. The function should handle rows with zero and negative numbers correctly.\n\n    sort_matrix([[1]]) = [[1]]\n    Explanation: A single row matrix should return itself as there is nothing to sort.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of Python's `sorted` function with a custom key handles empty matrices and rows with negative numbers efficiently.\n"], "test": ["def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    '''\n    Sorts a given matrix by arranging its rows in ascending order based on the sum of their elements.\n    \n    Parameters:\n    matrix (List[List[int]]): A 2D list representing the matrix to be sorted.\n    \n    Returns:\n    List[List[int]]: A new matrix with rows sorted by the sum of their elements.\n    '''\n    # Use Python's built-in sorted function with a custom key to sort rows based on the sum of their elements\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to verify the function works as expected\n    print(sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]))  # Expected output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    print(sort_matrix([]))  # Expected output: []\n    print(sort_matrix([[0, 0, 0], [1, -1, 0], [2, 2, -4]]))  # Expected output: [[1, -1, 0], [0, 0, 0], [2, 2, -4]]\n    print(sort_matrix([[1]]))  # Expected output: [[1]]\n", "passed": true, "pass": true, "pass_num": 10, "round": 712, "mutate_method": "condense_two2one", "parent_index": 458}
