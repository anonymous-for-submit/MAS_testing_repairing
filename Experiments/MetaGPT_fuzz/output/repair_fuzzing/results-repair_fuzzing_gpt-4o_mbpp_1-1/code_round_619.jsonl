{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 619, "prompt": "Write a function to move all the numbers to the end of the given string. You have to make sure that the order of characters in the string remains unchanged. The characters should stay in their original sequence.", "code": "def move_num(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res += dig\n  return (res) ", "test_imports": [], "test_list": ["assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'", "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'", "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'", "assert move_num(\"0MqPTbuYAhCLx38OufA4ohURZi0wg9\") == \"MqPTbuYAhCLxOufAohURZiwg038409\"", "assert move_num(\"ZaQ87HhL91QfISbtO1iGwtR97Gv9\") == \"ZaQHhLQfISbtOiGwtRGv87911979\"", "assert move_num(\"7JQ3L3ZYHBIuop16oa0VSzff22W\") == \"JQLZYHBIuopoaVSzffW73316022\"", "assert move_num(\"wpT5isdDM322M2CCSNg5vKVcPzLQ4qPT\") == \"wpTisdDMMCCSNgvKVcPzLQqPT5322254\"", "assert move_num(\"Y7bOFB5y2pdNA5OfHS6I8ZL2rFMUcBl\") == \"YbOFBypdNAOfHSIZLrFMUcBl7525682\"", "assert move_num(\"CwyCOGY3ZtQAYkzw4b7Pm89QXOQrW4yQhl\") == \"CwyCOGYZtQAYkzwbPmQXOQrWyQhl347894\"", "assert move_num(\"v4WKvwsIrrZSAnTWy74y244ZdAzIDBRFb\") == \"vWKvwsIrrZSAnTWyyZdAzIDBRFb474244\"", "assert move_num(\"Lzoy3AVapmk5qg2S4CQW1uy9m1yS5MNhdsy\") == \"LzoyAVapmkqgSCQWuymySMNhdsy35241915\"", "assert move_num(\"rAZMmLF2R8D5VIhtcsYk8PzfuLZa7XQLZ5v\") == \"rAZMmLFRDVIhtcsYkPzfuLZaXQLZv285875\"", "assert move_num(\"V9tbm8WJQ1E4KTfLv9Pc6rI0DPIi\") == \"VtbmWJQEKTfLvPcrIDPIi9814960\"", "assert move_num(\"Qf45xE3GyFhYpnvwOfA6eVj6KBABliBBk\") == \"QfxEGyFhYpnvwOfAeVjKBABliBBk45366\"", "assert move_num(\"3w6ihktWpUp1lvtVlTev8JkCNJSOq1IKfaL\") == \"wihktWpUplvtVlTevJkCNJSOqIKfaL36181\"", "assert move_num(\"FshcDNHrHxbkbzztjEoVY10YZSZ\") == \"FshcDNHrHxbkbzztjEoVYYZSZ10\"", "assert move_num(\"eJxUIVKJdRZJHw7OLwrsPoNq91XGvFpMiG\") == \"eJxUIVKJdRZJHwOLwrsPoNqXGvFpMiG791\"", "assert move_num(\"6yWbIM4MqrGwWbYzlufVUzO1k5QZn\") == \"yWbIMMqrGwWbYzlufVUzOkQZn6415\"", "assert move_num(\"3sfYLKmHrBOtpnNB5dmcIZyEKFGUWd9hrX7k\") == \"sfYLKmHrBOtpnNBdmcIZyEKFGUWdhrXk3597\"", "assert move_num(\"Pcq0soWgZ1WzwRMrlkWPEuXkt7M7VZom819\") == \"PcqsoWgZWzwRMrlkWPEuXktMVZom0177819\"", "assert move_num(\"m6heUbY2i3YbUPIGcSvfSB6PeXy\") == \"mheUbYiYbUPIGcSvfSBPeXy6236\"", "assert move_num(\"hCUP2ByNuoojIbhCWQ6C7wY2uOx\") == \"hCUPByNuoojIbhCWQCwYuOx2672\"", "assert move_num(\"5FwdACHDJOfZZvUz2Dox1MktFYQn1\") == \"FwdACHDJOfZZvUzDoxMktFYQn5211\"", "assert move_num(\"5CEPt4QquUxewDOlYDFJdTvgq6yeEzGuUH\") == \"CEPtQquUxewDOlYDFJdTvgqyeEzGuUH546\"", "assert move_num(\"YoHkbZMUEH0qDdmfjvWSlHV2l2qZy\") == \"YoHkbZMUEHqDdmfjvWSlHVlqZy022\"", "assert move_num(\"K3XVCzcWKsv9HyTPrH4eeoJ5OkUVZ8Nk\") == \"KXVCzcWKsvHyTPrHeeoJOkUVZNk39458\"", "assert move_num(\"lxFOIPr5FZ00keZRFvfYEb36N1j1Q9\") == \"lxFOIPrFZkeZRFvfYEbNjQ50036119\"", "assert move_num(\"pqVx61Rq9SrLeVVLffH5TVRDpwZ\") == \"pqVxRqSrLeVVLffHTVRDpwZ6195\"", "assert move_num(\"yJWPoWEFf6GpjeMMgAbEeIc8cy69NIfHh\") == \"yJWPoWEFfGpjeMMgAbEeIccyNIfHh6869\"", "assert move_num(\"bCc14OliIjyopoiGwFNeQOW3ERc4FBr5vl\") == \"bCcOliIjyopoiGwFNeQOWERcFBrvl14345\"", "assert move_num(\"QfN78dg1gc4tkoI4z6OYOlg5dgr\") == \"QfNdggctkoIzOYOlgdgr7814465\"", "assert move_num(\"yTFn13ctWq171B2ofawLNDL60CPB\") == \"yTFnctWqBofawLNDLCPB13171260\"", "assert move_num(\"73BIGJsgHdUIcKympAXH9wHQgKgMtqPYvzNi\") == \"BIGJsgHdUIcKympAXHwHQgKgMtqPYvzNi739\"", "assert move_num(\"eLpZ2azQp5NKlVAfp5enqoVScf0sb8S\") == \"eLpZazQpNKlVAfpenqoVScfsbS25508\"", "assert move_num(\"Sgimco4CS8FUPN7nZnK9b97Aro3C3Yanscv\") == \"SgimcoCSFUPNnZnKbAroCYanscv48799733\"", "assert move_num(\"HlGO7nnRx0sqbH3orLd4C7WbfmyLTgpj\") == \"HlGOnnRxsqbHorLdCWbfmyLTgpj70347\"", "assert move_num(\"r7E7IcHDpGWvG2gBp1\") == \"rEIcHDpGWvGgBp7721\"", "assert move_num(\"FZux5Vw58vNwzRCP1\") == \"FZuxVwvNwzRCP5581\"", "assert move_num(\"Uh5xzipEPsUagO2Ng\") == \"UhxzipEPsUagONg52\"", "assert move_num(\"Yuo8FqwVIMbFoSqS1Zt\") == \"YuoFqwVIMbFoSqSZt81\"", "assert move_num(\"u6kYWNEKkewQe6S4olvwt\") == \"ukYWNEKkewQeSolvwt664\"", "assert move_num(\"KDUl4aOV23EWGZinH7hQK4Ti\") == \"KDUlaOVEWGZinHhQKTi42374\"", "assert move_num(\"VBHCcoNZsIJkxeY9ywoyQ\") == \"VBHCcoNZsIJkxeYywoyQ9\"", "assert move_num(\"2c9xSnLRyciwD8r\") == \"cxSnLRyciwDr298\"", "assert move_num(\"gJlZtWkHycAAo3750n\") == \"gJlZtWkHycAAon3750\"", "assert move_num(\"bhXvnofBsEjsiYop25x8cv\") == \"bhXvnofBsEjsiYopxcv258\"", "assert move_num(\"RErUI3QiHMCVI4zmtoyf\") == \"RErUIQiHMCVIzmtoyf34\"", "assert move_num(\"W9r5taSrqXi9TGRTp\") == \"WrtaSrqXiTGRTp959\"", "assert move_num(\"yNlXiym0Jk1mS0w\") == \"yNlXiymJkmSw010\"", "assert move_num(\"r1RKpK8LCdaEn60D2v\") == \"rRKpKLCdaEnDv18602\"", "assert move_num(\"AlSarlP0DmxKUEp3Mali13V\") == \"AlSarlPDmxKUEpMaliV0313\"", "assert move_num(\"ISbQmN7cR0OBS50KrsQnwemt\") == \"ISbQmNcROBSKrsQnwemt7050\"", "assert move_num(\"6iCD1Da0xCxPSZGp\") == \"iCDDaxCxPSZGp610\"", "assert move_num(\"QX9OjxtkVasSyvyeBQg\") == \"QXOjxtkVasSyvyeBQg9\"", "assert move_num(\"PB8wzPTUAuQOkFi6Aw\") == \"PBwzPTUAuQOkFiAw86\"", "assert move_num(\"ZrC2Q4JTZJYaxvV\") == \"ZrCQJTZJYaxvV24\"", "assert move_num(\"8PLtFeaNHqCceLjQzir\") == \"PLtFeaNHqCceLjQzir8\"", "assert move_num(\"eeOLzKCOgmM1JSvmACw8\") == \"eeOLzKCOgmMJSvmACw18\"", "assert move_num(\"RGmgqILYpijbgnnJ\") == \"RGmgqILYpijbgnnJ\"", "assert move_num(\"KyB0NC8tHrTLn0Lgl\") == \"KyBNCtHrTLnLgl080\"", "assert move_num(\"hvONQLtDqqYYVOGgiidyaeXm\") == \"hvONQLtDqqYYVOGgiidyaeXm\"", "assert move_num(\"R4hO8I6yXWZNsXoi\") == \"RhOIyXWZNsXoi486\"", "assert move_num(\"vwlWi1ArXWipznnw7jC3YNVC\") == \"vwlWiArXWipznnwjCYNVC173\"", "assert move_num(\"UitsYsazzqrRQQayBzmvLD\") == \"UitsYsazzqrRQQayBzmvLD\"", "assert move_num(\"vQlCxlSJW8TuRVAm7YMXb\") == \"vQlCxlSJWTuRVAmYMXb87\"", "assert move_num(\"t5XTijRWMc8WTE6BpwxDH\") == \"tXTijRWMcWTEBpwxDH586\"", "assert move_num(\"usXkCbHNPz8W5Jo\") == \"usXkCbHNPzWJo85\"", "assert move_num(\"r7bPZSP71EGM7Qd\") == \"rbPZSPEGMQd7717\"", "assert move_num(\"E8z3KyLXWxVN5TlsPvOCz\") == \"EzKyLXWxVNTlsPvOCz835\"", "assert move_num(\"mvFpRLaMHMReypdScG4OdSQ0mCvOPwty63ktDkA33TLPd\") == \"mvFpRLaMHMReypdScGOdSQmCvOPwtyktDkATLPd406333\"", "assert move_num(\"mw7tESfFEdyg8B909k4dG0e9fjAaz9BokeZxCkYhu3ZxX5C4\") == \"mwtESfFEdygBkdGefjAazBokeZxCkYhuZxXC789094099354\"", "assert move_num(\"oNsoNYbo214zqD7020kFjrZVQf7QeDYFWjNrMqMU\") == \"oNsoNYbozqDkFjrZVQfQeDYFWjNrMqMU21470207\"", "assert move_num(\"osZjvWGwemjcwb0RQ7bvM3oN2nt1qfMJA3XgBRT\") == \"osZjvWGwemjcwbRQbvMoNntqfMJAXgBRT073213\"", "assert move_num(\"UfEy2jQ8j46TsRu9OYdJCRduN56EikjMS0XLoTe\") == \"UfEyjQjTsRuOYdJCRduNEikjMSXLoTe28469560\"", "assert move_num(\"iXLXYf3KPgfWo4Ndn7yGlDQZ8zPW2tW8tShnZQbUmglPUR\") == \"iXLXYfKPgfWoNdnyGlDQZzPWtWtShnZQbUmglPUR347828\"", "assert move_num(\"9zEquUcErv9HzlqMkqoPB6vGEyeugckzRjjPXj0GPUwu2znc\") == \"zEquUcErvHzlqMkqoPBvGEyeugckzRjjPXjGPUwuznc99602\"", "assert move_num(\"2rNAJcEwXPOR9SNY9MkAteOhr6gOjaeDpao68WsvVXBYt8c\") == \"rNAJcEwXPORSNYMkAteOhrgOjaeDpaoWsvVXBYtc2996688\"", "assert move_num(\"tDr0lWnNBz43a2hc5ss2QbN7DO8oESwc0AaVcwS0HRd3c\") == \"tDrlWnNBzahcssQbNDOoESwcAaVcwSHRdc04325278003\"", "assert move_num(\"sslsSJvlO44iGhR4Mvm29hudOhVFRzJonNcQFGfQ2LB7\") == \"sslsSJvlOiGhRMvmhudOhVFRzJonNcQFGfQLB4442927\"", "assert move_num(\"7OKi7325qGsDrOI5JE3xNId34LKxExet9V7AhVvQ\") == \"OKiqGsDrOIJExNIdLKxExetVAhVvQ77325533497\"", "assert move_num(\"iJqDo6KvVCBDOqirfBZRDx8WfLqt58efl73s0MytE1eGj\") == \"iJqDoKvVCBDOqirfBZRDxWfLqteflsMytEeGj68587301\"", "assert move_num(\"fTQqLfNDNK6ymR15emZrTEJrQ2wBOFoVQwFqAdOv\") == \"fTQqLfNDNKymRemZrTEJrQwBOFoVQwFqAdOv6152\"", "assert move_num(\"aUWaabR2BHhAk6gzP3c24USyAInWRe1wPwPDkRxXOUdi5y\") == \"aUWaabRBHhAkgzPcUSyAInWRewPwPDkRxXOUdiy2632415\"", "assert move_num(\"dpELXxI7svwSLpwtPPO56ukOcSikdWOrw8vukz445Afly\") == \"dpELXxIsvwSLpwtPPOukOcSikdWOrwvukzAfly7568445\"", "assert move_num(\"bVWuh2qmzpxf7txC44FBvkQwcZn5rHMIh9O3wi0EKMqKqd\") == \"bVWuhqmzpxftxCFBvkQwcZnrHMIhOwiEKMqKqd27445930\"", "assert move_num(\"Gh61j8MUYmNglFyMzuFpMtqDYcfnVIAz6l2uopGmmg9\") == \"GhjMUYmNglFyMzuFpMtqDYcfnVIAzluopGmmg618629\"", "assert move_num(\"cDl6fuKtqcH5K6ogngeCcaoyHT60DAS7ZW3uyCWwm2L3x\") == \"cDlfuKtqcHKogngeCcaoyHTDASZWuyCWwmLx656607323\"", "assert move_num(\"A03gjGtwd0t6DIAFovgU9C9dkcV5Xova0YqHApG6D9pnF\") == \"AgjGtwdtDIAFovgUCdkcVXovaYqHApGDpnF0306995069\"", "assert move_num(\"oWoK5Ytq75QjxGP85a2HfVthhFwEqmI60QbkKgH\") == \"oWoKYtqQjxGPaHfVthhFwEqmIQbkKgH57585260\"", "assert move_num(\"cArIiPPqDZHn315l76vb5wlmmFHhdJpWBPiKYN9n\") == \"cArIiPPqDZHnlvbwlmmFHhdJpWBPiKYNn3157659\"", "assert move_num(\"YRkSZMPSrBHjn8sznHr9kCxdhkoGvCRSW2cMgGc\") == \"YRkSZMPSrBHjnsznHrkCxdhkoGvCRSWcMgGc892\"", "assert move_num(\"XxDUXquH4bnAdW8X1MuhDP1fkMyLqmAsVjjbIQz\") == \"XxDUXquHbnAdWXMuhDPfkMyLqmAsVjjbIQz4811\"", "assert move_num(\"Dy72lTQM7aAS63mnc2iSd3VgxADpztYfeEAaNGbjzOzYRw\") == \"DylTQMaASmnciSdVgxADpztYfeEAaNGbjzOzYRw7276323\"", "assert move_num(\"46ynVgVSC3aIUzThZDdz6jmvuaf2rq8Rx3OJvEYce\") == \"ynVgVSCaIUzThZDdzjmvuafrqRxOJvEYce4636283\"", "assert move_num(\"9HTnkGtcIhiEIUfAWHd3bXNr39GYQwQRKxYPbjD\") == \"HTnkGtcIhiEIUfAWHdbXNrGYQwQRKxYPbjD9339\"", "assert move_num(\"jNVMIarai9aRyyF6rgWq7ryfLyAfO96DYdcj5KwodCB\") == \"jNVMIaraiaRyyFrgWqryfLyAfODYdcjKwodCB967965\"", "assert move_num(\"j97bMpYHheIwrzaZv7jWaNGrqTJ7naZLmk44aEotKmEHP\") == \"jbMpYHheIwrzaZvjWaNGrqTJnaZLmkaEotKmEHP977744\"", "assert move_num(\"CcWcCeaw7bn3HY5F5PmyFJtkHYm1BkukG608ZlyfTE\") == \"CcWcCeawbnHYFPmyFJtkHYmBkukGZlyfTE73551608\"", "assert move_num(\"uE4mpGgsx3UZxLwP7ED4TdrRO1LRZ8VH8kwiWXHYXSE1SM8\") == \"uEmpGgsxUZxLwPEDTdrROLRZVHkwiWXHYXSESM437418818\"", "assert move_num(\"On1tvNsDxa0aiow0OQvtRak4vrBPm3xbvaSEmJn\") == \"OntvNsDxaaiowOQvtRakvrBPmxbvaSEmJn10043\"", "assert move_num(\"SVv525b5SZwfMwDN5apKTHZM5nWZ1DN8i8PB5jiPi3fNET\") == \"SVvbSZwfMwDNapKTHZMnWZDNiPBjiPifNET52555518853\"", "assert move_num(\"xYnZkbe2Z7U6CTLgpsUliXE5STaLglzJ8NZWIkXh5R\") == \"xYnZkbeZUCTLgpsUliXESTaLglzJNZWIkXhR276585\""], "entry_point": "move_num", "repair_prompt": ["Write a function move_num to move all the numbers to the end of the given string. You have to make sure that the order of characters in the string remains unchanged. The characters should stay in their original sequence.\nmove_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n", "Write a function move_num to move all the numbers to the end of the given string. You have to ensure that the sequence of characters remains unchanged. The original order must be maintained. The characters should stay in their original sequence.\nmove_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n", "Write a function move_num to move all the numbers to the end of the given string. You have to make sure that the order of characters in the string remains unchanged and stay in their original sequence.\nmove_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n"], "completions": ["from typing import List\n## main.py\n\ndef move_num(input_string: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a new string with all numbers moved to the end.\n\n    Parameters:\n    input_string (str): The original string containing mixed characters and numbers.\n\n    Returns:\n    str: A new string with numbers moved to the end, maintaining the order of non-numeric characters.\n    \"\"\"\n    # Initialize lists to hold characters and numbers separately\n    characters = []\n    numbers = []\n\n    # Iterate through each character in the input string\n    for char in input_string:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Append to numbers list if it is a digit\n            numbers.append(char)\n        else:\n            # Append to characters list if it is not a digit\n            characters.append(char)\n\n    # Concatenate characters and numbers lists to form the final string\n    result_string = ''.join(characters) + ''.join(numbers)\n\n    # Return the concatenated string\n    return result_string\n\n# Example usage:\n# print(move_num('123abc'))  # Output: 'abc123'\n# print(move_num(''))        # Output: ''\n# print(move_num('abc'))     # Output: 'abc'\n", "from typing import List\n## main.py\n\nimport re\n\ndef move_num(input_string: str) -> str:\n    \"\"\"Rearranges the input string by moving all numeric characters to the end.\n\n    Args:\n        input_string (str): The string to be processed.\n\n    Returns:\n        str: A new string with all numbers moved to the end, maintaining the order of non-numeric characters.\n    \"\"\"\n    # Regular expression to match numeric characters\n    numeric_pattern = re.compile(r'\\d')\n    \n    # Lists to hold non-numeric and numeric characters\n    non_numeric_chars = []\n    numeric_chars = []\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        if numeric_pattern.match(char):\n            numeric_chars.append(char)\n        else:\n            non_numeric_chars.append(char)\n    \n    # Concatenate non-numeric characters with numeric characters\n    result_string = ''.join(non_numeric_chars) + ''.join(numeric_chars)\n    \n    return result_string\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(move_num('123abc'))  # Expected output: 'abc123'\n    print(move_num('abc'))     # Expected output: 'abc'\n    print(move_num(''))        # Expected output: ''\n", "from typing import List\n## main.py\n\ndef move_num(input_string: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a new string with all numbers moved to the end.\n\n    Parameters:\n    input_string (str): The string to process.\n\n    Returns:\n    str: A new string with numbers moved to the end, maintaining the order of non-numeric characters.\n    \"\"\"\n    alphabetic_chars = \"\"\n    numeric_chars = \"\"\n\n    for char in input_string:\n        if char.isalpha():\n            alphabetic_chars += char\n        elif char.isdigit():\n            numeric_chars += char\n        # Special characters and spaces are ignored as per the clarification needed.\n\n    return alphabetic_chars + numeric_chars\n\n# Example usage:\n# print(move_num('123abc'))  # Output: 'abc123'\n# print(move_num('abc'))     # Output: 'abc'\n# print(move_num(''))        # Output: ''\n", "from typing import List\n## main.py\n\ndef move_num(input_string: str) -> str:\n    \"\"\"\n    Moves all numbers in the input string to the end while maintaining the order of characters and numbers.\n\n    Parameters:\n    input_string (str): The string containing both characters and numbers.\n\n    Returns:\n    str: A new string with all numbers moved to the end.\n    \"\"\"\n    # Initialize lists to store characters and numbers separately\n    characters = []\n    numbers = []\n\n    # Iterate through each character in the input string\n    for char in input_string:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Append digit to numbers list\n            numbers.append(char)\n        else:\n            # Append non-digit character to characters list\n            characters.append(char)\n\n    # Concatenate characters and numbers lists to form the final string\n    result_string = ''.join(characters) + ''.join(numbers)\n\n    # Return the concatenated string\n    return result_string\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(move_num('123abc'))  # Expected output: 'abc123'\n    print(move_num('abc'))     # Expected output: 'abc'\n    print(move_num(''))        # Expected output: ''\n", "from typing import List\n## main.py\n\ndef move_num(input_string: str) -> str:\n    \"\"\"\n    Moves all numbers in the input string to the end while maintaining the order of characters.\n    \n    Parameters:\n    input_string (str): The string containing mixed characters and numbers.\n    \n    Returns:\n    str: A new string with all numbers moved to the end.\n    \"\"\"\n    # Initialize lists to separate characters and numbers\n    characters = []\n    numbers = []\n    \n    # Iterate through each character in the input string\n    for char in input_string:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Append to numbers list if it is a digit\n            numbers.append(char)\n        else:\n            # Append to characters list if it is not a digit\n            characters.append(char)\n    \n    # Concatenate characters and numbers lists to form the final output string\n    result = ''.join(characters) + ''.join(numbers)\n    \n    # Return the concatenated string\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(move_num('I1love143you55three3000thousand'))  # Expected: 'Iloveyouthreethousand1143553000'\n    print(move_num('123abc'))  # Expected: 'abc123'\n    print(move_num('abc'))     # Expected: 'abc'\n    print(move_num(''))        # Expected: ''\n", "from typing import List\n## main.py\n\ndef move_num(input_string: str) -> str:\n    \"\"\"\n    This function takes a string as input and returns a new string with all numbers moved to the end,\n    maintaining the original order of characters and numbers.\n\n    Parameters:\n    input_string (str): The input string containing alphanumeric characters.\n\n    Returns:\n    str: A string with numbers moved to the end.\n    \"\"\"\n    # Initialize lists to separate non-numeric and numeric characters\n    non_numeric_chars = []\n    numeric_chars = []\n\n    # Iterate through each character in the input string\n    for char in input_string:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Append to numeric list if it is a digit\n            numeric_chars.append(char)\n        else:\n            # Append to non-numeric list if it is not a digit\n            non_numeric_chars.append(char)\n\n    # Concatenate non-numeric characters with numeric characters\n    result = ''.join(non_numeric_chars) + ''.join(numeric_chars)\n\n    # Return the concatenated result\n    return result\n\n# Example usage:\n# print(move_num('123abc'))  # Output: 'abc123'\n# print(move_num('abc'))     # Output: 'abc'\n# print(move_num(''))        # Output: ''\n", "from typing import List\n## main.py\n\ndef move_num(input_string: str) -> str:\n    \"\"\"\n    Moves all numbers in the input string to the end while maintaining the order of non-numeric characters.\n    \n    Parameters:\n    input_string (str): The string to be processed.\n    \n    Returns:\n    str: A new string with numbers moved to the end.\n    \"\"\"\n    # Initialize lists to hold non-numeric and numeric characters\n    non_numeric_chars = []\n    numeric_chars = []\n\n    # Iterate through each character in the input string\n    for char in input_string:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Append to numeric characters list\n            numeric_chars.append(char)\n        else:\n            # Append to non-numeric characters list\n            non_numeric_chars.append(char)\n\n    # Concatenate non-numeric characters with numeric characters\n    result = ''.join(non_numeric_chars) + ''.join(numeric_chars)\n\n    # Return the concatenated result\n    return result\n\n# Example usage:\n# print(move_num('123abc'))  # Output: 'abc123'\n# print(move_num('abc'))     # Output: 'abc'\n# print(move_num(''))        # Output: ''\n", "from typing import List\n## main.py\n\ndef move_num(input_string: str) -> str:\n    \"\"\"\n    Moves all numbers in the input string to the end while maintaining the order of non-numeric characters.\n\n    Parameters:\n    input_string (str): The string to process.\n\n    Returns:\n    str: A new string with all numbers moved to the end.\n    \"\"\"\n    # Initialize lists to separate numeric and non-numeric characters\n    non_numeric_chars = []\n    numeric_chars = []\n\n    # Iterate through each character in the input string\n    for char in input_string:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Append to numeric list if it is a digit\n            numeric_chars.append(char)\n        else:\n            # Append to non-numeric list if it is not a digit\n            non_numeric_chars.append(char)\n\n    # Concatenate non-numeric characters with numeric characters\n    result = ''.join(non_numeric_chars) + ''.join(numeric_chars)\n\n    # Return the concatenated result\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to illustrate the function usage\n    print(move_num(\"\"))  # Output: ''\n    print(move_num(\"abc\"))  # Output: 'abc'\n    print(move_num(\"123\"))  # Output: '123'\n    print(move_num(\"a1b2c3\"))  # Output: 'abc123'\n    print(move_num(\"a!@#1 2b3\"))  # Output: 'a!@# b123'\n", "from typing import List\n## main.py\n\ndef move_num(input_string: str) -> str:\n    \"\"\"\n    Moves all numeric characters to the end of the string while maintaining the order of non-numeric characters.\n\n    Parameters:\n    input_string (str): The input string containing alphanumeric characters.\n\n    Returns:\n    str: A new string with all numbers moved to the end.\n    \"\"\"\n    # Initialize lists to hold non-numeric and numeric characters\n    non_numeric_chars = []\n    numeric_chars = []\n\n    # Iterate through each character in the input string\n    for char in input_string:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Append to numeric characters list\n            numeric_chars.append(char)\n        else:\n            # Append to non-numeric characters list\n            non_numeric_chars.append(char)\n\n    # Concatenate non-numeric and numeric characters\n    result = ''.join(non_numeric_chars) + ''.join(numeric_chars)\n\n    # Return the final result\n    return result\n\n# Example usage:\n# print(move_num(\"a1b2c3\"))  # Output: \"abc123\"\n# print(move_num(\"abc\"))     # Output: \"abc\"\n# print(move_num(\"123\"))     # Output: \"123\"\n# print(move_num(\"\"))        # Output: \"\"\n", "from typing import List\n## main.py\n\ndef move_num(input_string: str) -> str:\n    \"\"\"\n    Moves all numbers in the input string to the end while maintaining the order of non-numeric characters.\n    \n    Parameters:\n    input_string (str): The string to process.\n    \n    Returns:\n    str: A new string with all numbers moved to the end.\n    \"\"\"\n    # Initialize lists to separate non-numeric and numeric characters\n    non_numeric_chars = []\n    numeric_chars = []\n\n    # Iterate over each character in the input string\n    for char in input_string:\n        # Check if the character is numeric\n        if char.isdigit():\n            # Append numeric characters to the numeric list\n            numeric_chars.append(char)\n        else:\n            # Append non-numeric characters to the non-numeric list\n            non_numeric_chars.append(char)\n\n    # Concatenate the non-numeric list with the numeric list\n    result = ''.join(non_numeric_chars) + ''.join(numeric_chars)\n\n    # Return the concatenated result\n    return result\n\n# Example usage:\n# print(move_num('123abc'))  # Output: 'abc123'\n# print(move_num('abc'))     # Output: 'abc'\n# print(move_num(''))        # Output: ''\n"], "plans": ["requirement analysis:\nThe function should efficiently separate numbers from characters in a string, maintaining the order of characters and appending numbers at the end. It should handle edge cases like strings with no numbers or all numbers.\nrequirement pool:\n- The function must maintain the order of non-numeric characters.\n- The function should append all numbers at the end of the string.\n- The function should handle large strings efficiently.\n- The function should be easy to integrate into existing projects.\n- Provide comprehensive documentation and examples.\nWe will implement a function that iterates through the string, separating characters and numbers into two lists. The function will then concatenate these lists, ensuring the order of characters is maintained and numbers are appended at the end. We will use Python's built-in capabilities for string manipulation, which are efficient and suitable for handling large strings.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'move numbers to the end'\n    Explanation: The requirement is to rearrange the string such that all numeric characters are moved to the end while maintaining the order of non-numeric characters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize two empty lists: one for characters and one for numbers.\n    2. Iterate through each character in the string.\n    3. Check if the character is a digit using the `isdigit()` method.\n    4. If it is a digit, append it to the numbers list; otherwise, append it to the characters list.\n    5. Concatenate the characters list with the numbers list to form the final string.\n    6. Return the concatenated string.\n\n# [edge case] \n    move_num('123abc') = 'abc123'\n    Explanation: The numbers '123' are moved to the end, and 'abc' remains at the start.\n    \n    move_num('') = ''\n    Explanation: An empty string should return an empty string as there are no characters or numbers to move.\n    \n    move_num('abc') = 'abc'\n    Explanation: There are no numbers in the string, so the output remains unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of separating characters and numbers into two lists and concatenating them handles all edge cases effectively.\n", "requirement analysis:\nThe function should efficiently separate numbers from characters, maintaining the order of characters and appending numbers at the end. It should handle edge cases like strings with no numbers or all numbers.\nrequirement pool:\n- The function must separate numbers and characters efficiently.\n- The function should handle edge cases gracefully.\n- The function should be easy to integrate into existing projects.\n- The function should include comprehensive documentation.\n- The function should be optimized for performance.\nWe will use Python's built-in string methods and regular expressions to efficiently separate numbers from characters. The re module will help identify numeric characters, and list comprehensions will maintain the order of non-numeric characters while appending numbers at the end.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'move all the numbers to the end'\n    Explanation: The requirement is to rearrange the string such that all numeric characters are moved to the end of the string while maintaining the order of non-numeric characters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Use regular expressions to identify and separate numeric characters from non-numeric characters in the string.\n    2. Iterate through the string and collect all non-numeric characters in one list and numeric characters in another.\n    3. Concatenate the list of non-numeric characters with the list of numeric characters to form the final string.\n    4. Return the concatenated string.\n\n# [edge case] \n    move_num('123abc') = 'abc123'\n    Explanation: The numbers '123' are moved to the end, resulting in 'abc123'.\n    \n    move_num('abc') = 'abc'\n    Explanation: There are no numbers to move, so the string remains unchanged.\n    \n    move_num('') = ''\n    Explanation: An empty string remains unchanged as there are no characters to process.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of separating and concatenating characters will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently separate numbers from characters in a string, maintaining the order of characters and appending numbers at the end. It should handle edge cases like strings without numbers or characters.\nrequirement pool:\n- The function must maintain the order of non-numeric characters.\n- The function should append all numbers at the end of the string.\n- The function should handle strings of varying lengths efficiently.\n- The function should be easy to integrate into existing projects.\n- The function should include comprehensive documentation.\nWe will implement a function named move_num that iterates through the input string, separating alphabetic characters and numeric characters. The function will maintain the order of alphabetic characters and append all numeric characters at the end. We will use Python's built-in string methods for simplicity and efficiency, avoiding any unnecessary dependencies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'move all the numbers to the end'\n    Explanation: The requirement is to rearrange the string such that all numeric characters are moved to the end while maintaining the order of alphabetic characters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize two empty strings: one for alphabetic characters and one for numeric characters.\n    2. Iterate through each character in the input string.\n    3. Check if the character is alphabetic; if so, append it to the alphabetic string.\n    4. If the character is numeric, append it to the numeric string.\n    5. Concatenate the alphabetic string with the numeric string and return the result.\n\n# [edge case] \n    move_num('123abc') = 'abc123'\n    Explanation: The input string starts with numbers followed by letters. The function should move all numbers to the end, resulting in 'abc123'.\n    \n    move_num('abc') = 'abc'\n    Explanation: The input string contains only alphabetic characters, so the output remains unchanged as 'abc'.\n    \n    move_num('') = ''\n    Explanation: An empty string should return an empty string as there are no characters to rearrange.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of separating alphabetic and numeric characters and then concatenating them handles these cases naturally.\n", "requirement analysis:\nThe function should efficiently separate characters and numbers, maintaining their original order. It should handle strings of varying lengths and complexities, ensuring that the output is always correct and predictable.\nrequirement pool:\n- The function must separate characters and numbers correctly.\n- The function should handle edge cases, such as strings with no numbers or all numbers.\n- The function should be optimized for performance with large strings.\n- Provide clear documentation and usage examples.\n- Ensure compatibility with different Python versions.\nWe will use Python's built-in string manipulation capabilities along with regular expressions from the 're' module to efficiently separate characters and numbers. The function will iterate through the string, collecting characters and numbers separately, and then concatenate them to form the final result. This approach ensures that the original order of characters and numbers is maintained.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'move numbers to the end'\n    Explanation: The requirement is to rearrange the string such that all numeric characters are moved to the end while maintaining the order of non-numeric characters and numbers separately.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize two empty lists: one for storing characters and another for storing numbers.\n    2. Iterate through each character in the input string.\n    3. Check if the character is a digit using the `isdigit()` method.\n    4. If it is a digit, append it to the numbers list.\n    5. If it is not a digit, append it to the characters list.\n    6. Concatenate the characters list and numbers list to form the final string.\n    7. Return the concatenated string.\n\n# [edge case] \n    move_num('123abc') = 'abc123'\n    Explanation: All numbers are moved to the end, maintaining the order of 'abc'.\n    \n    move_num('abc') = 'abc'\n    Explanation: There are no numbers to move, so the string remains unchanged.\n    \n    move_num('') = ''\n    Explanation: An empty string should return an empty string as there are no characters or numbers to rearrange.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of separating characters and numbers and then concatenating them handles these cases naturally.\n", "requirement analysis:\nThe function should efficiently separate numbers from characters while maintaining the original order of characters. It should be optimized for performance and provide clear documentation for ease of use.\nrequirement pool:\n- The function must maintain the original sequence of characters.\n- The function should move all numbers to the end of the string.\n- Optimize the function for performance with large strings.\n- Provide clear documentation and examples for user understanding.\n- Ensure compatibility with different Python versions.\nWe will use Python's built-in string methods to efficiently separate numbers from characters. The function will iterate through the string, collecting characters and numbers separately, and then concatenate them to form the desired output. This approach ensures simplicity and performance without the need for complex libraries or regex.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'move all the numbers to the end'\n    Explanation: The requirement specifies that all numeric characters should be moved to the end of the string while maintaining the order of non-numeric characters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize two empty lists: one for characters and one for numbers.\n    2. Iterate through each character in the input string.\n    3. Check if the character is a digit using the `isdigit()` method.\n    4. If it is a digit, append it to the numbers list; otherwise, append it to the characters list.\n    5. Concatenate the characters list and numbers list to form the final output string.\n    6. Return the concatenated string.\n\n# [edge case] \n    move_num('123abc') = 'abc123'\n    Explanation: The numbers '123' are moved to the end, and 'abc' remains at the start.\n    \n    move_num('abc') = 'abc'\n    Explanation: There are no numbers to move, so the string remains unchanged.\n    \n    move_num('') = ''\n    Explanation: An empty string should return an empty string as there are no characters or numbers to process.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles empty strings and strings without numbers naturally.\n", "requirement analysis:\nThe function should efficiently separate characters and numbers, maintaining their original order. It should be robust enough to handle various string lengths and compositions.\nrequirement pool:\n- The function must maintain the order of characters and numbers.\n- The function should handle strings of varying lengths efficiently.\n- The function should be easy to integrate into other projects.\n- Provide clear documentation and usage examples.\n- Optimize for performance with large input strings.\nWe will use Python's built-in string methods and regular expressions to efficiently separate characters and numbers while maintaining their original order. The function will iterate through the string once, collecting characters and numbers separately, and then concatenate them at the end.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'move numbers to the end'\n    Explanation: The requirement is to rearrange the string such that all numeric characters are moved to the end, while maintaining the order of non-numeric characters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize two empty lists: one for storing non-numeric characters and another for numeric characters.\n    2. Iterate through each character in the input string.\n    3. Check if the character is a digit using the `isdigit()` method.\n    4. If it is a digit, append it to the numeric list; otherwise, append it to the non-numeric list.\n    5. Concatenate the non-numeric list with the numeric list to form the final string.\n    6. Return the concatenated string.\n\n# [edge case] \n    move_num('123abc') = 'abc123'\n    Explanation: The numbers '123' are moved to the end, and 'abc' remains in its original order.\n    \n    move_num('abc') = 'abc'\n    Explanation: There are no numbers in the string, so the output remains unchanged.\n    \n    move_num('') = ''\n    Explanation: The input string is empty, so the output is also an empty string.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of separating characters and numbers and then concatenating them handles all edge cases effectively.\n", "requirement analysis:\nThe function should efficiently separate numeric and non-numeric characters, maintaining the order of non-numeric characters while appending numbers at the end. It should handle various edge cases, such as strings with no numbers or all numbers.\nrequirement pool:\n- The function must maintain the order of non-numeric characters.\n- The function should append all numbers at the end of the string.\n- The function should handle edge cases like empty strings or strings with no numbers.\n- The function should be optimized for performance with large strings.\n- The function should include comprehensive documentation and examples.\nWe will use Python's built-in string manipulation capabilities to efficiently separate numeric and non-numeric characters. The function will iterate through the string once, collecting non-numeric characters and numeric characters separately, and then concatenate them to form the desired output. This approach ensures that the function is both efficient and easy to integrate into existing projects.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'move numbers to the end'\n    Explanation: The requirement is to rearrange the string such that all numeric characters are moved to the end while maintaining the order of non-numeric characters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize two empty lists: one for non-numeric characters and another for numeric characters.\n    2. Iterate through each character in the input string.\n    3. Check if the character is a digit using the `isdigit()` method.\n    4. If it is a digit, append it to the numeric list; otherwise, append it to the non-numeric list.\n    5. Concatenate the non-numeric list with the numeric list to form the final string.\n    6. Return the concatenated string.\n\n# [edge case] \n    move_num('123abc') = 'abc123'\n    Explanation: The numbers '123' are moved to the end, and 'abc' remains in its original order.\n    \n    move_num('abc') = 'abc'\n    Explanation: There are no numbers in the string, so the output remains unchanged.\n    \n    move_num('') = ''\n    Explanation: The input is an empty string, so the output is also an empty string.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles empty strings and strings without numbers naturally.\n", "requirement analysis:\nThe function should efficiently separate numbers from non-numeric characters, maintaining the original order of non-numeric characters while appending numbers at the end. It should handle edge cases like empty strings and strings without numbers.\nrequirement pool:\n- The function must move all numbers to the end of the string\n- The function should maintain the order of non-numeric characters\n- The function should handle edge cases gracefully\n- The function should be optimized for performance\n- The function should include clear documentation\nWe will implement a function named move_num that iterates through the input string, separating numeric characters from non-numeric characters. The function will use Python's built-in string methods for efficient processing. We will ensure that the function handles edge cases such as empty strings and strings without numbers. The function will be documented with examples to illustrate its usage.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'move all the numbers to the end'\n    Explanation: This means that all numeric characters in the string should be relocated to the end of the string while maintaining their order relative to each other.\n\n    'order of characters remains unchanged'\n    Explanation: The non-numeric characters should stay in their original sequence in the string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize two empty lists: one for storing non-numeric characters and another for numeric characters.\n    2. Iterate through each character in the input string.\n    3. Check if the character is a digit using the `isdigit()` method.\n    4. If it is a digit, append it to the numeric list; otherwise, append it to the non-numeric list.\n    5. Concatenate the non-numeric list with the numeric list to form the final string.\n    6. Return the concatenated string.\n\n# [edge case] \n    move_num('') = ''\n    Explanation: An empty string has no characters to move, so the output remains an empty string.\n\n    move_num('abc') = 'abc'\n    Explanation: A string with no numeric characters should remain unchanged.\n\n    move_num('123') = '123'\n    Explanation: A string with only numeric characters should remain unchanged as they are already at the end.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of separating and concatenating characters will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently separate numeric and non-numeric characters, maintaining the order of non-numeric characters while appending numbers at the end. It should handle edge cases like empty strings and strings without numbers.\nrequirement pool:\n- The function must maintain the order of non-numeric characters.\n- The function must move all numeric characters to the end of the string.\n- The function should handle edge cases like empty strings.\n- The function should be efficient with large input strings.\n- The function should be easy to integrate into existing projects.\nWe will use Python's built-in string methods to efficiently separate numeric and non-numeric characters. The function will iterate through the string once, collecting non-numeric characters and numeric characters separately, and then concatenate them to form the final result. This approach ensures that the function is efficient and handles large strings effectively. We will also handle edge cases like empty strings and strings without numbers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'move all the numbers to the end'\n    Explanation: This means that all numeric characters in the string should be relocated to the end of the string, while maintaining the order of non-numeric characters.\n\n    'order of characters remains unchanged'\n    Explanation: The sequence of non-numeric characters should not be altered; they should appear in the same order as they do in the original string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize two empty lists: one for non-numeric characters and one for numeric characters.\n    2. Iterate through each character in the input string.\n    3. Check if the character is a digit using the `isdigit()` method.\n    4. If it is a digit, append it to the numeric list; otherwise, append it to the non-numeric list.\n    5. Concatenate the non-numeric list and numeric list to form the final string.\n    6. Return the concatenated string.\n\n# [edge case] \n    move_num('') = ''\n    Explanation: An empty string has no characters to move, so the output is also an empty string.\n\n    move_num('abc') = 'abc'\n    Explanation: A string with no numeric characters remains unchanged.\n\n    move_num('123') = '123'\n    Explanation: A string with only numeric characters remains unchanged as they are already at the end.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of separating numeric and non-numeric characters and then concatenating them handles these cases naturally.\n", "requirement analysis:\nThe function should efficiently separate numbers from characters in a string, maintaining the order of characters and appending numbers at the end. It should handle edge cases like strings with no numbers or all numbers.\nrequirement pool:\n- The function must separate numbers and characters efficiently.\n- The function should handle strings of varying lengths.\n- The function should maintain the order of non-numeric characters.\n- The function should be easy to integrate into existing projects.\n- The function should include clear documentation and examples.\nWe will implement a function named `move_num` that processes the input string by iterating through each character. We will separate non-numeric characters and numeric characters into two different lists. After processing the entire string, we will concatenate the non-numeric characters list with the numeric characters list to form the final result. This approach ensures that the order of characters is maintained and the function is efficient even for large strings. We will use Python's built-in capabilities to achieve this without any third-party libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'move all the numbers to the end'\n    Explanation: The requirement is to rearrange the string such that all numeric characters are moved to the end while maintaining the order of non-numeric characters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize two lists: one for non-numeric characters and another for numeric characters.\n    2. Iterate through each character in the input string.\n    3. Check if the character is numeric using the `isdigit()` method.\n    4. Append numeric characters to the numeric list and non-numeric characters to the non-numeric list.\n    5. Concatenate the non-numeric list with the numeric list to form the final result.\n    6. Return the concatenated result.\n\n# [edge case] \n    move_num('123abc') = 'abc123'\n    Explanation: All numbers are moved to the end, maintaining the order of non-numeric characters.\n    \n    move_num('abc') = 'abc'\n    Explanation: There are no numeric characters, so the string remains unchanged.\n    \n    move_num('') = ''\n    Explanation: The input string is empty, so the output is also an empty string.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles empty strings and strings without numeric characters naturally.\n"], "test": ["def check(move_num):\n\tassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'", "def check(move_num):\n\tassert move_num('Avengers124Assemble') == 'AvengersAssemble124'", "def check(move_num):\n\tassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'", "def check(move_num):\n\tassert move_num(\"0MqPTbuYAhCLx38OufA4ohURZi0wg9\") == \"MqPTbuYAhCLxOufAohURZiwg038409\"", "def check(move_num):\n\tassert move_num(\"ZaQ87HhL91QfISbtO1iGwtR97Gv9\") == \"ZaQHhLQfISbtOiGwtRGv87911979\"", "def check(move_num):\n\tassert move_num(\"7JQ3L3ZYHBIuop16oa0VSzff22W\") == \"JQLZYHBIuopoaVSzffW73316022\"", "def check(move_num):\n\tassert move_num(\"wpT5isdDM322M2CCSNg5vKVcPzLQ4qPT\") == \"wpTisdDMMCCSNgvKVcPzLQqPT5322254\"", "def check(move_num):\n\tassert move_num(\"Y7bOFB5y2pdNA5OfHS6I8ZL2rFMUcBl\") == \"YbOFBypdNAOfHSIZLrFMUcBl7525682\"", "def check(move_num):\n\tassert move_num(\"CwyCOGY3ZtQAYkzw4b7Pm89QXOQrW4yQhl\") == \"CwyCOGYZtQAYkzwbPmQXOQrWyQhl347894\"", "def check(move_num):\n\tassert move_num(\"v4WKvwsIrrZSAnTWy74y244ZdAzIDBRFb\") == \"vWKvwsIrrZSAnTWyyZdAzIDBRFb474244\"", "def check(move_num):\n\tassert move_num(\"Lzoy3AVapmk5qg2S4CQW1uy9m1yS5MNhdsy\") == \"LzoyAVapmkqgSCQWuymySMNhdsy35241915\"", "def check(move_num):\n\tassert move_num(\"rAZMmLF2R8D5VIhtcsYk8PzfuLZa7XQLZ5v\") == \"rAZMmLFRDVIhtcsYkPzfuLZaXQLZv285875\"", "def check(move_num):\n\tassert move_num(\"V9tbm8WJQ1E4KTfLv9Pc6rI0DPIi\") == \"VtbmWJQEKTfLvPcrIDPIi9814960\"", "def check(move_num):\n\tassert move_num(\"Qf45xE3GyFhYpnvwOfA6eVj6KBABliBBk\") == \"QfxEGyFhYpnvwOfAeVjKBABliBBk45366\"", "def check(move_num):\n\tassert move_num(\"3w6ihktWpUp1lvtVlTev8JkCNJSOq1IKfaL\") == \"wihktWpUplvtVlTevJkCNJSOqIKfaL36181\"", "def check(move_num):\n\tassert move_num(\"FshcDNHrHxbkbzztjEoVY10YZSZ\") == \"FshcDNHrHxbkbzztjEoVYYZSZ10\"", "def check(move_num):\n\tassert move_num(\"eJxUIVKJdRZJHw7OLwrsPoNq91XGvFpMiG\") == \"eJxUIVKJdRZJHwOLwrsPoNqXGvFpMiG791\"", "def check(move_num):\n\tassert move_num(\"6yWbIM4MqrGwWbYzlufVUzO1k5QZn\") == \"yWbIMMqrGwWbYzlufVUzOkQZn6415\"", "def check(move_num):\n\tassert move_num(\"3sfYLKmHrBOtpnNB5dmcIZyEKFGUWd9hrX7k\") == \"sfYLKmHrBOtpnNBdmcIZyEKFGUWdhrXk3597\"", "def check(move_num):\n\tassert move_num(\"Pcq0soWgZ1WzwRMrlkWPEuXkt7M7VZom819\") == \"PcqsoWgZWzwRMrlkWPEuXktMVZom0177819\"", "def check(move_num):\n\tassert move_num(\"m6heUbY2i3YbUPIGcSvfSB6PeXy\") == \"mheUbYiYbUPIGcSvfSBPeXy6236\"", "def check(move_num):\n\tassert move_num(\"hCUP2ByNuoojIbhCWQ6C7wY2uOx\") == \"hCUPByNuoojIbhCWQCwYuOx2672\"", "def check(move_num):\n\tassert move_num(\"5FwdACHDJOfZZvUz2Dox1MktFYQn1\") == \"FwdACHDJOfZZvUzDoxMktFYQn5211\"", "def check(move_num):\n\tassert move_num(\"5CEPt4QquUxewDOlYDFJdTvgq6yeEzGuUH\") == \"CEPtQquUxewDOlYDFJdTvgqyeEzGuUH546\"", "def check(move_num):\n\tassert move_num(\"YoHkbZMUEH0qDdmfjvWSlHV2l2qZy\") == \"YoHkbZMUEHqDdmfjvWSlHVlqZy022\"", "def check(move_num):\n\tassert move_num(\"K3XVCzcWKsv9HyTPrH4eeoJ5OkUVZ8Nk\") == \"KXVCzcWKsvHyTPrHeeoJOkUVZNk39458\"", "def check(move_num):\n\tassert move_num(\"lxFOIPr5FZ00keZRFvfYEb36N1j1Q9\") == \"lxFOIPrFZkeZRFvfYEbNjQ50036119\"", "def check(move_num):\n\tassert move_num(\"pqVx61Rq9SrLeVVLffH5TVRDpwZ\") == \"pqVxRqSrLeVVLffHTVRDpwZ6195\"", "def check(move_num):\n\tassert move_num(\"yJWPoWEFf6GpjeMMgAbEeIc8cy69NIfHh\") == \"yJWPoWEFfGpjeMMgAbEeIccyNIfHh6869\"", "def check(move_num):\n\tassert move_num(\"bCc14OliIjyopoiGwFNeQOW3ERc4FBr5vl\") == \"bCcOliIjyopoiGwFNeQOWERcFBrvl14345\"", "def check(move_num):\n\tassert move_num(\"QfN78dg1gc4tkoI4z6OYOlg5dgr\") == \"QfNdggctkoIzOYOlgdgr7814465\"", "def check(move_num):\n\tassert move_num(\"yTFn13ctWq171B2ofawLNDL60CPB\") == \"yTFnctWqBofawLNDLCPB13171260\"", "def check(move_num):\n\tassert move_num(\"73BIGJsgHdUIcKympAXH9wHQgKgMtqPYvzNi\") == \"BIGJsgHdUIcKympAXHwHQgKgMtqPYvzNi739\"", "def check(move_num):\n\tassert move_num(\"eLpZ2azQp5NKlVAfp5enqoVScf0sb8S\") == \"eLpZazQpNKlVAfpenqoVScfsbS25508\"", "def check(move_num):\n\tassert move_num(\"Sgimco4CS8FUPN7nZnK9b97Aro3C3Yanscv\") == \"SgimcoCSFUPNnZnKbAroCYanscv48799733\"", "def check(move_num):\n\tassert move_num(\"HlGO7nnRx0sqbH3orLd4C7WbfmyLTgpj\") == \"HlGOnnRxsqbHorLdCWbfmyLTgpj70347\"", "def check(move_num):\n\tassert move_num(\"r7E7IcHDpGWvG2gBp1\") == \"rEIcHDpGWvGgBp7721\"", "def check(move_num):\n\tassert move_num(\"FZux5Vw58vNwzRCP1\") == \"FZuxVwvNwzRCP5581\"", "def check(move_num):\n\tassert move_num(\"Uh5xzipEPsUagO2Ng\") == \"UhxzipEPsUagONg52\"", "def check(move_num):\n\tassert move_num(\"Yuo8FqwVIMbFoSqS1Zt\") == \"YuoFqwVIMbFoSqSZt81\"", "def check(move_num):\n\tassert move_num(\"u6kYWNEKkewQe6S4olvwt\") == \"ukYWNEKkewQeSolvwt664\"", "def check(move_num):\n\tassert move_num(\"KDUl4aOV23EWGZinH7hQK4Ti\") == \"KDUlaOVEWGZinHhQKTi42374\"", "def check(move_num):\n\tassert move_num(\"VBHCcoNZsIJkxeY9ywoyQ\") == \"VBHCcoNZsIJkxeYywoyQ9\"", "def check(move_num):\n\tassert move_num(\"2c9xSnLRyciwD8r\") == \"cxSnLRyciwDr298\"", "def check(move_num):\n\tassert move_num(\"gJlZtWkHycAAo3750n\") == \"gJlZtWkHycAAon3750\"", "def check(move_num):\n\tassert move_num(\"bhXvnofBsEjsiYop25x8cv\") == \"bhXvnofBsEjsiYopxcv258\"", "def check(move_num):\n\tassert move_num(\"RErUI3QiHMCVI4zmtoyf\") == \"RErUIQiHMCVIzmtoyf34\"", "def check(move_num):\n\tassert move_num(\"W9r5taSrqXi9TGRTp\") == \"WrtaSrqXiTGRTp959\"", "def check(move_num):\n\tassert move_num(\"yNlXiym0Jk1mS0w\") == \"yNlXiymJkmSw010\"", "def check(move_num):\n\tassert move_num(\"r1RKpK8LCdaEn60D2v\") == \"rRKpKLCdaEnDv18602\"", "def check(move_num):\n\tassert move_num(\"AlSarlP0DmxKUEp3Mali13V\") == \"AlSarlPDmxKUEpMaliV0313\"", "def check(move_num):\n\tassert move_num(\"ISbQmN7cR0OBS50KrsQnwemt\") == \"ISbQmNcROBSKrsQnwemt7050\"", "def check(move_num):\n\tassert move_num(\"6iCD1Da0xCxPSZGp\") == \"iCDDaxCxPSZGp610\"", "def check(move_num):\n\tassert move_num(\"QX9OjxtkVasSyvyeBQg\") == \"QXOjxtkVasSyvyeBQg9\"", "def check(move_num):\n\tassert move_num(\"PB8wzPTUAuQOkFi6Aw\") == \"PBwzPTUAuQOkFiAw86\"", "def check(move_num):\n\tassert move_num(\"ZrC2Q4JTZJYaxvV\") == \"ZrCQJTZJYaxvV24\"", "def check(move_num):\n\tassert move_num(\"8PLtFeaNHqCceLjQzir\") == \"PLtFeaNHqCceLjQzir8\"", "def check(move_num):\n\tassert move_num(\"eeOLzKCOgmM1JSvmACw8\") == \"eeOLzKCOgmMJSvmACw18\"", "def check(move_num):\n\tassert move_num(\"RGmgqILYpijbgnnJ\") == \"RGmgqILYpijbgnnJ\"", "def check(move_num):\n\tassert move_num(\"KyB0NC8tHrTLn0Lgl\") == \"KyBNCtHrTLnLgl080\"", "def check(move_num):\n\tassert move_num(\"hvONQLtDqqYYVOGgiidyaeXm\") == \"hvONQLtDqqYYVOGgiidyaeXm\"", "def check(move_num):\n\tassert move_num(\"R4hO8I6yXWZNsXoi\") == \"RhOIyXWZNsXoi486\"", "def check(move_num):\n\tassert move_num(\"vwlWi1ArXWipznnw7jC3YNVC\") == \"vwlWiArXWipznnwjCYNVC173\"", "def check(move_num):\n\tassert move_num(\"UitsYsazzqrRQQayBzmvLD\") == \"UitsYsazzqrRQQayBzmvLD\"", "def check(move_num):\n\tassert move_num(\"vQlCxlSJW8TuRVAm7YMXb\") == \"vQlCxlSJWTuRVAmYMXb87\"", "def check(move_num):\n\tassert move_num(\"t5XTijRWMc8WTE6BpwxDH\") == \"tXTijRWMcWTEBpwxDH586\"", "def check(move_num):\n\tassert move_num(\"usXkCbHNPz8W5Jo\") == \"usXkCbHNPzWJo85\"", "def check(move_num):\n\tassert move_num(\"r7bPZSP71EGM7Qd\") == \"rbPZSPEGMQd7717\"", "def check(move_num):\n\tassert move_num(\"E8z3KyLXWxVN5TlsPvOCz\") == \"EzKyLXWxVNTlsPvOCz835\"", "def check(move_num):\n\tassert move_num(\"mvFpRLaMHMReypdScG4OdSQ0mCvOPwty63ktDkA33TLPd\") == \"mvFpRLaMHMReypdScGOdSQmCvOPwtyktDkATLPd406333\"", "def check(move_num):\n\tassert move_num(\"mw7tESfFEdyg8B909k4dG0e9fjAaz9BokeZxCkYhu3ZxX5C4\") == \"mwtESfFEdygBkdGefjAazBokeZxCkYhuZxXC789094099354\"", "def check(move_num):\n\tassert move_num(\"oNsoNYbo214zqD7020kFjrZVQf7QeDYFWjNrMqMU\") == \"oNsoNYbozqDkFjrZVQfQeDYFWjNrMqMU21470207\"", "def check(move_num):\n\tassert move_num(\"osZjvWGwemjcwb0RQ7bvM3oN2nt1qfMJA3XgBRT\") == \"osZjvWGwemjcwbRQbvMoNntqfMJAXgBRT073213\"", "def check(move_num):\n\tassert move_num(\"UfEy2jQ8j46TsRu9OYdJCRduN56EikjMS0XLoTe\") == \"UfEyjQjTsRuOYdJCRduNEikjMSXLoTe28469560\"", "def check(move_num):\n\tassert move_num(\"iXLXYf3KPgfWo4Ndn7yGlDQZ8zPW2tW8tShnZQbUmglPUR\") == \"iXLXYfKPgfWoNdnyGlDQZzPWtWtShnZQbUmglPUR347828\"", "def check(move_num):\n\tassert move_num(\"9zEquUcErv9HzlqMkqoPB6vGEyeugckzRjjPXj0GPUwu2znc\") == \"zEquUcErvHzlqMkqoPBvGEyeugckzRjjPXjGPUwuznc99602\"", "def check(move_num):\n\tassert move_num(\"2rNAJcEwXPOR9SNY9MkAteOhr6gOjaeDpao68WsvVXBYt8c\") == \"rNAJcEwXPORSNYMkAteOhrgOjaeDpaoWsvVXBYtc2996688\"", "def check(move_num):\n\tassert move_num(\"tDr0lWnNBz43a2hc5ss2QbN7DO8oESwc0AaVcwS0HRd3c\") == \"tDrlWnNBzahcssQbNDOoESwcAaVcwSHRdc04325278003\"", "def check(move_num):\n\tassert move_num(\"sslsSJvlO44iGhR4Mvm29hudOhVFRzJonNcQFGfQ2LB7\") == \"sslsSJvlOiGhRMvmhudOhVFRzJonNcQFGfQLB4442927\"", "def check(move_num):\n\tassert move_num(\"7OKi7325qGsDrOI5JE3xNId34LKxExet9V7AhVvQ\") == \"OKiqGsDrOIJExNIdLKxExetVAhVvQ77325533497\"", "def check(move_num):\n\tassert move_num(\"iJqDo6KvVCBDOqirfBZRDx8WfLqt58efl73s0MytE1eGj\") == \"iJqDoKvVCBDOqirfBZRDxWfLqteflsMytEeGj68587301\"", "def check(move_num):\n\tassert move_num(\"fTQqLfNDNK6ymR15emZrTEJrQ2wBOFoVQwFqAdOv\") == \"fTQqLfNDNKymRemZrTEJrQwBOFoVQwFqAdOv6152\"", "def check(move_num):\n\tassert move_num(\"aUWaabR2BHhAk6gzP3c24USyAInWRe1wPwPDkRxXOUdi5y\") == \"aUWaabRBHhAkgzPcUSyAInWRewPwPDkRxXOUdiy2632415\"", "def check(move_num):\n\tassert move_num(\"dpELXxI7svwSLpwtPPO56ukOcSikdWOrw8vukz445Afly\") == \"dpELXxIsvwSLpwtPPOukOcSikdWOrwvukzAfly7568445\"", "def check(move_num):\n\tassert move_num(\"bVWuh2qmzpxf7txC44FBvkQwcZn5rHMIh9O3wi0EKMqKqd\") == \"bVWuhqmzpxftxCFBvkQwcZnrHMIhOwiEKMqKqd27445930\"", "def check(move_num):\n\tassert move_num(\"Gh61j8MUYmNglFyMzuFpMtqDYcfnVIAz6l2uopGmmg9\") == \"GhjMUYmNglFyMzuFpMtqDYcfnVIAzluopGmmg618629\"", "def check(move_num):\n\tassert move_num(\"cDl6fuKtqcH5K6ogngeCcaoyHT60DAS7ZW3uyCWwm2L3x\") == \"cDlfuKtqcHKogngeCcaoyHTDASZWuyCWwmLx656607323\"", "def check(move_num):\n\tassert move_num(\"A03gjGtwd0t6DIAFovgU9C9dkcV5Xova0YqHApG6D9pnF\") == \"AgjGtwdtDIAFovgUCdkcVXovaYqHApGDpnF0306995069\"", "def check(move_num):\n\tassert move_num(\"oWoK5Ytq75QjxGP85a2HfVthhFwEqmI60QbkKgH\") == \"oWoKYtqQjxGPaHfVthhFwEqmIQbkKgH57585260\"", "def check(move_num):\n\tassert move_num(\"cArIiPPqDZHn315l76vb5wlmmFHhdJpWBPiKYN9n\") == \"cArIiPPqDZHnlvbwlmmFHhdJpWBPiKYNn3157659\"", "def check(move_num):\n\tassert move_num(\"YRkSZMPSrBHjn8sznHr9kCxdhkoGvCRSW2cMgGc\") == \"YRkSZMPSrBHjnsznHrkCxdhkoGvCRSWcMgGc892\"", "def check(move_num):\n\tassert move_num(\"XxDUXquH4bnAdW8X1MuhDP1fkMyLqmAsVjjbIQz\") == \"XxDUXquHbnAdWXMuhDPfkMyLqmAsVjjbIQz4811\"", "def check(move_num):\n\tassert move_num(\"Dy72lTQM7aAS63mnc2iSd3VgxADpztYfeEAaNGbjzOzYRw\") == \"DylTQMaASmnciSdVgxADpztYfeEAaNGbjzOzYRw7276323\"", "def check(move_num):\n\tassert move_num(\"46ynVgVSC3aIUzThZDdz6jmvuaf2rq8Rx3OJvEYce\") == \"ynVgVSCaIUzThZDdzjmvuafrqRxOJvEYce4636283\"", "def check(move_num):\n\tassert move_num(\"9HTnkGtcIhiEIUfAWHd3bXNr39GYQwQRKxYPbjD\") == \"HTnkGtcIhiEIUfAWHdbXNrGYQwQRKxYPbjD9339\"", "def check(move_num):\n\tassert move_num(\"jNVMIarai9aRyyF6rgWq7ryfLyAfO96DYdcj5KwodCB\") == \"jNVMIaraiaRyyFrgWqryfLyAfODYdcjKwodCB967965\"", "def check(move_num):\n\tassert move_num(\"j97bMpYHheIwrzaZv7jWaNGrqTJ7naZLmk44aEotKmEHP\") == \"jbMpYHheIwrzaZvjWaNGrqTJnaZLmkaEotKmEHP977744\"", "def check(move_num):\n\tassert move_num(\"CcWcCeaw7bn3HY5F5PmyFJtkHYm1BkukG608ZlyfTE\") == \"CcWcCeawbnHYFPmyFJtkHYmBkukGZlyfTE73551608\"", "def check(move_num):\n\tassert move_num(\"uE4mpGgsx3UZxLwP7ED4TdrRO1LRZ8VH8kwiWXHYXSE1SM8\") == \"uEmpGgsxUZxLwPEDTdrROLRZVHkwiWXHYXSESM437418818\"", "def check(move_num):\n\tassert move_num(\"On1tvNsDxa0aiow0OQvtRak4vrBPm3xbvaSEmJn\") == \"OntvNsDxaaiowOQvtRakvrBPmxbvaSEmJn10043\"", "def check(move_num):\n\tassert move_num(\"SVv525b5SZwfMwDN5apKTHZM5nWZ1DN8i8PB5jiPi3fNET\") == \"SVvbSZwfMwDNapKTHZMnWZDNiPBjiPifNET52555518853\"", "def check(move_num):\n\tassert move_num(\"xYnZkbe2Z7U6CTLgpsUliXE5STaLglzJ8NZWIkXh5R\") == \"xYnZkbeZUCTLgpsUliXESTaLglzJNZWIkXhR276585\""], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef move_num(input_string: str) -> str:\n    \"\"\"\n    Moves all numbers in the input string to the end while maintaining the order of non-numeric characters.\n    \n    Parameters:\n    input_string (str): The string to process.\n    \n    Returns:\n    str: A new string with all numbers moved to the end.\n    \"\"\"\n    # Initialize lists to separate non-numeric and numeric characters\n    non_numeric_chars = []\n    numeric_chars = []\n\n    # Iterate over each character in the input string\n    for char in input_string:\n        # Check if the character is numeric\n        if char.isdigit():\n            # Append numeric characters to the numeric list\n            numeric_chars.append(char)\n        else:\n            # Append non-numeric characters to the non-numeric list\n            non_numeric_chars.append(char)\n\n    # Concatenate the non-numeric list with the numeric list\n    result = ''.join(non_numeric_chars) + ''.join(numeric_chars)\n\n    # Return the concatenated result\n    return result\n\n# Example usage:\n# print(move_num('123abc'))  # Output: 'abc123'\n# print(move_num('abc'))     # Output: 'abc'\n# print(move_num(''))        # Output: ''\n", "passed": true, "pass": true, "pass_num": 10, "round": 619, "mutate_method": "rephrase_one", "parent_index": 439}
