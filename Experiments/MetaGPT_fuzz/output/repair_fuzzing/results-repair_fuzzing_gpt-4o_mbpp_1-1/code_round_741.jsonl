{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 68, "prompt": "Write a python function to check whether the given array is monotonic or not. Monotonic means the array is entirely non-increasing or non-decreasing.", "code": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "test_imports": [], "test_list": ["assert is_Monotonic([6, 5, 4, 4]) == True", "assert is_Monotonic([1, 2, 2, 3]) == True", "assert is_Monotonic([1, 3, 2]) == False", "assert is_Monotonic([3, 10, 7, 7]) == False", "assert is_Monotonic([9, 4, 4, 2]) == True", "assert is_Monotonic([4, 2, 8, 8]) == False", "assert is_Monotonic([11, 1, 1, 3]) == False", "assert is_Monotonic([2, 5, 4, 9]) == False", "assert is_Monotonic([5, 1, 8, 7]) == False", "assert is_Monotonic([5, 3, 7, 7]) == False", "assert is_Monotonic([6, 10, 9, 3]) == False", "assert is_Monotonic([6, 6, 1, 8]) == False", "assert is_Monotonic([6, 4, 3, 6]) == False", "assert is_Monotonic([7, 5, 4, 2]) == True", "assert is_Monotonic([7, 8, 5, 1]) == False", "assert is_Monotonic([8, 1, 7, 6]) == False", "assert is_Monotonic([8, 5, 6, 2]) == False", "assert is_Monotonic([5, 6, 6, 6]) == True", "assert is_Monotonic([11, 2, 3, 8]) == False", "assert is_Monotonic([9, 4, 7, 6]) == False", "assert is_Monotonic([3, 10, 9, 9]) == False", "assert is_Monotonic([7, 2, 2, 1]) == True", "assert is_Monotonic([11, 8, 3, 2]) == True", "assert is_Monotonic([10, 10, 5, 6]) == False", "assert is_Monotonic([6, 2, 8, 2]) == False", "assert is_Monotonic([1, 5, 5, 4]) == False", "assert is_Monotonic([10, 3, 4, 8]) == False", "assert is_Monotonic([8, 1, 6, 9]) == False", "assert is_Monotonic([10, 7, 8, 8]) == False", "assert is_Monotonic([6, 8, 7, 9]) == False", "assert is_Monotonic([7, 7, 2, 1]) == True", "assert is_Monotonic([5, 1, 5, 8]) == False", "assert is_Monotonic([3, 10, 4, 5]) == False", "assert is_Monotonic([3, 2, 2, 8]) == False", "assert is_Monotonic([1, 10, 4, 8]) == False", "assert is_Monotonic([5, 7, 3, 2]) == False", "assert is_Monotonic([6, 3, 6, 5]) == False", "assert is_Monotonic([6, 3, 4, 1]) == False", "assert is_Monotonic([6, 3, 2, 7]) == False", "assert is_Monotonic([2, 2, 6, 7]) == True", "assert is_Monotonic([1, 2, 3, 4]) == True", "assert is_Monotonic([2, 1, 1, 5]) == False", "assert is_Monotonic([3, 6, 1, 4]) == False", "assert is_Monotonic([5, 1, 5, 6]) == False", "assert is_Monotonic([2, 2, 6, 1]) == False", "assert is_Monotonic([2, 2, 6, 2]) == False", "assert is_Monotonic([3, 5, 4, 7]) == False", "assert is_Monotonic([4, 7, 1, 1]) == False", "assert is_Monotonic([4, 6, 5, 6]) == False", "assert is_Monotonic([6, 5, 3, 6]) == False", "assert is_Monotonic([6, 6, 2, 2]) == True", "assert is_Monotonic([1, 5, 1, 4]) == False", "assert is_Monotonic([4, 1, 3, 8]) == False", "assert is_Monotonic([4, 6, 7, 7]) == True", "assert is_Monotonic([3, 4, 6, 1]) == False", "assert is_Monotonic([3, 7, 7, 6]) == False", "assert is_Monotonic([4, 1, 1, 2]) == False", "assert is_Monotonic([4, 5, 1, 4]) == False", "assert is_Monotonic([3, 7, 6, 7]) == False", "assert is_Monotonic([5, 4, 3, 4]) == False", "assert is_Monotonic([6, 6, 7, 1]) == False", "assert is_Monotonic([2, 4, 7, 7]) == True", "assert is_Monotonic([6, 6, 3, 3]) == True", "assert is_Monotonic([3, 4, 5, 2]) == False", "assert is_Monotonic([6, 1, 6, 8]) == False", "assert is_Monotonic([3, 1, 2, 3]) == False", "assert is_Monotonic([3, 6, 7, 8]) == True", "assert is_Monotonic([1, 4, 3, 2]) == False", "assert is_Monotonic([5, 6, 6, 7]) == True", "assert is_Monotonic([4, 1, 2]) == False", "assert is_Monotonic([2, 2, 4]) == True", "assert is_Monotonic([1, 4, 4]) == True", "assert is_Monotonic([3, 2, 1]) == True", "assert is_Monotonic([3, 2, 3]) == False", "assert is_Monotonic([2, 1, 1]) == True", "assert is_Monotonic([3, 2, 4]) == False", "assert is_Monotonic([1, 5, 2]) == False", "assert is_Monotonic([3, 8, 6]) == False", "assert is_Monotonic([2, 8, 7]) == False", "assert is_Monotonic([6, 7, 4]) == False", "assert is_Monotonic([6, 6, 5]) == True", "assert is_Monotonic([1, 1, 5]) == True", "assert is_Monotonic([2, 5, 5]) == True", "assert is_Monotonic([3, 3, 6]) == True", "assert is_Monotonic([6, 5, 1]) == True", "assert is_Monotonic([6, 3, 4]) == False", "assert is_Monotonic([5, 2, 3]) == False", "assert is_Monotonic([5, 4, 3]) == True", "assert is_Monotonic([4, 7, 2]) == False", "assert is_Monotonic([6, 5, 4]) == True", "assert is_Monotonic([1, 4, 7]) == True", "assert is_Monotonic([3, 7, 7]) == True", "assert is_Monotonic([4, 1, 1]) == True", "assert is_Monotonic([2, 2, 3]) == True", "assert is_Monotonic([2, 2, 6]) == True", "assert is_Monotonic([5, 5, 1]) == True", "assert is_Monotonic([2, 3, 1]) == False", "assert is_Monotonic([4, 7, 5]) == False", "assert is_Monotonic([2, 1, 5]) == False", "assert is_Monotonic([5, 5, 3]) == True", "assert is_Monotonic([6, 5, 1]) == True", "assert is_Monotonic([2, 5, 3]) == False"], "entry_point": "is_Monotonic", "repair_prompt": ["Write a python function is_Monotonic to check whether the given array is monotonic or not. Monotonic means the array is entirely non-increasing or non-decreasing.\nis_Monotonic([6, 5, 4, 4]) == True\n", "Write a python function is_Monotonic to check whether the given array is monotonic or not. Monotonic refers to a sequence that consistently increases or maintains the same value without decreasing. Alternatively, it refers to a sequence that consistently decreases or maintains the same value without increasing.\nis_Monotonic([6, 5, 4, 4]) == True\n", "Write a python function is_Monotonic to check whether the given array is monotonic or not, meaning the array is entirely non-increasing or non-decreasing.\nis_Monotonic([6, 5, 4, 4]) == True\n"], "completions": ["from typing import List\n## main.py\n\ndef is_Monotonic(arr: list) -> bool:\n    \"\"\"\n    Check if the given array is monotonic.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    if len(arr) <= 1:\n        # An empty array or an array with a single element is trivially monotonic.\n        return True\n\n    # Initialize flags for non-decreasing and non-increasing sequences.\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            is_non_decreasing = False\n        if arr[i] < arr[i + 1]:\n            is_non_increasing = False\n\n    # If either flag remains True, the array is monotonic.\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef is_Monotonic(arr: list) -> bool:\n    \"\"\"\n    Check if the given array is monotonic.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    # Initialize two boolean variables to track monotonicity\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    # Iterate through the array to check monotonicity\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            is_non_decreasing = False\n        if arr[i] < arr[i + 1]:\n            is_non_increasing = False\n\n    # Return True if the array is either non-decreasing or non-increasing\n    return is_non_decreasing or is_non_increasing\n\n# Example usage:\n# print(is_Monotonic([6, 5, 4, 4]))  # Output: True\n# print(is_Monotonic([1, 2, 2, 3]))  # Output: True\n# print(is_Monotonic([1, 3, 2]))     # Output: False\n# print(is_Monotonic([1]))           # Output: True\n# print(is_Monotonic([]))            # Output: True\n", "from typing import List\n## main.py\n\ndef is_Monotonic(arr: list[int]) -> bool:\n    \"\"\"Check if the given array is monotonic.\n\n    A monotonic array is one that is either entirely non-increasing or non-decreasing.\n\n    Args:\n        arr: A list of integers.\n\n    Returns:\n        A boolean indicating whether the array is monotonic.\n    \"\"\"\n    if not arr:\n        # An empty array is trivially monotonic.\n        return True\n\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            is_non_decreasing = False\n        if arr[i] < arr[i + 1]:\n            is_non_increasing = False\n\n    return is_non_decreasing or is_non_increasing\n\n# Example usage:\n# print(is_Monotonic([1, 2, 2, 3]))  # Output: True\n# print(is_Monotonic([3, 3, 2, 1]))  # Output: True\n# print(is_Monotonic([1]))           # Output: True\n# print(is_Monotonic([]))            # Output: True\n# print(is_Monotonic([1, 3, 2]))     # Output: False\n", "from typing import List\n## main.py\n\ndef is_Monotonic(arr: list) -> bool:\n    \"\"\"\n    Check if the given array is monotonic.\n\n    A monotonic sequence is one that either consistently increases or remains the same without decreasing,\n    or consistently decreases or remains the same without increasing.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    if len(arr) <= 1:\n        # An empty array or a single-element array is trivially monotonic\n        return True\n\n    # Initialize flags for increasing and decreasing monotonicity\n    is_increasing = True\n    is_decreasing = True\n\n    # Iterate through the array to check monotonicity\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            is_decreasing = False\n        elif arr[i] < arr[i - 1]:\n            is_increasing = False\n\n    # The array is monotonic if it is either entirely non-decreasing or non-increasing\n    return is_increasing or is_decreasing\n\n# Example usage:\n# print(is_Monotonic([]))  # True\n# print(is_Monotonic([1]))  # True\n# print(is_Monotonic([1, 2, 2, 3]))  # True\n# print(is_Monotonic([3, 2, 1]))  # True\n# print(is_Monotonic([1, 3, 2]))  # False\n", "from typing import List\n## main.py\n\ndef is_Monotonic(arr: list) -> bool:\n    '''\n    Check if the given array is monotonic.\n\n    Parameters:\n    arr (list): A list of numeric elements.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    '''\n    # Initialize flags for increasing and decreasing sequences\n    increasing = True\n    decreasing = True\n\n    # Iterate through the array to check monotonicity\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            increasing = False\n        if arr[i] < arr[i + 1]:\n            decreasing = False\n\n    # Return True if the array is either non-decreasing or non-increasing\n    return increasing or decreasing\n\n# Example usage:\n# print(is_Monotonic([1, 2, 2, 3]))  # Expected output: True\n# print(is_Monotonic([3, 2, 1]))     # Expected output: True\n# print(is_Monotonic([1, 3, 2]))     # Expected output: False\n# print(is_Monotonic([1]))           # Expected output: True\n# print(is_Monotonic([1, 1, 1]))     # Expected output: True\n", "from typing import List\n## main.py\n\ndef is_Monotonic(arr: list) -> bool:\n    '''\n    Check if the given array is monotonic.\n\n    Parameters:\n    arr (list): A list of numeric values.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n\n    Raises:\n    ValueError: If the input contains non-numeric values.\n    '''\n    if not all(isinstance(x, (int, float)) for x in arr):\n        raise ValueError(\"All elements in the array must be numeric.\")\n\n    if len(arr) <= 1:\n        return True\n\n    increasing = decreasing = False\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            increasing = True\n        elif arr[i] < arr[i - 1]:\n            decreasing = True\n\n        if increasing and decreasing:\n            return False\n\n    return True\n\n# Example usage:\n# print(is_Monotonic([]))  # True\n# print(is_Monotonic([1]))  # True\n# print(is_Monotonic([1, 2, 2, 3]))  # True\n# print(is_Monotonic([3, 2, 1]))  # True\n# print(is_Monotonic([1, 3, 2]))  # False\n", "from typing import List\n## main.py\n\ndef is_Monotonic(arr: list) -> bool:\n    \"\"\"\n    Check if the given array is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    arr (list): A list of numbers to be checked.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n\n    Raises:\n    TypeError: If the input is not a list or contains non-numeric elements.\n    \"\"\"\n    # Validate input\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    for element in arr:\n        if not isinstance(element, (int, float)):\n            raise TypeError(\"List elements must be numeric.\")\n\n    # Edge case: An empty array or a single-element array is considered monotonic\n    if len(arr) <= 1:\n        return True\n\n    # Initialize flags for monotonicity\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    # Iterate through the array to check monotonicity\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            is_non_increasing = False\n        if arr[i] < arr[i - 1]:\n            is_non_decreasing = False\n\n    # Return True if the array is either non-decreasing or non-increasing\n    return is_non_decreasing or is_non_increasing\n\n# Usage examples\nif __name__ == \"__main__\":\n    print(is_Monotonic([]))  # True\n    print(is_Monotonic([1]))  # True\n    print(is_Monotonic([3, 3, 3]))  # True\n    print(is_Monotonic([1, 2, 3]))  # True\n    print(is_Monotonic([3, 2, 1]))  # True\n    print(is_Monotonic([1, 3, 2]))  # False\n", "from typing import List\n## main.py\n\ndef is_Monotonic(arr: list) -> bool:\n    \"\"\"\n    Check if the given array is monotonic.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    if len(arr) <= 1:\n        # An empty array or a single-element array is trivially monotonic\n        return True\n\n    # Initialize flags for non-decreasing and non-increasing\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    # Iterate through the array to check monotonicity\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            is_non_decreasing = False\n        if arr[i] > arr[i - 1]:\n            is_non_increasing = False\n\n    # The array is monotonic if it is either non-decreasing or non-increasing\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef is_Monotonic(arr: list) -> bool:\n    \"\"\"Determines if a given array is monotonic.\n\n    A monotonic array is one that is either entirely non-increasing or non-decreasing.\n    This function checks the array for monotonicity by iterating through the elements\n    and comparing each element with the previous one.\n\n    Args:\n        arr (list): A list of numbers.\n\n    Returns:\n        bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    # Check for trivial cases: empty array or single element array\n    if len(arr) <= 1:\n        return True\n\n    # Initialize flags for non-decreasing and non-increasing\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            is_non_decreasing = False\n        if arr[i] > arr[i - 1]:\n            is_non_increasing = False\n\n    # Return True if the array is either non-decreasing or non-increasing\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef is_Monotonic(arr: list) -> bool:\n    \"\"\"\n    Check if the given array is monotonic.\n\n    Parameters:\n    arr (list): A list of numbers.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    # Handle edge cases for empty array or single element array\n    if len(arr) <= 1:\n        return True\n\n    # Initialize flags for non-increasing and non-decreasing\n    is_non_increasing = True\n    is_non_decreasing = True\n\n    # Iterate through the array to check monotonicity\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            is_non_increasing = False\n        if arr[i] < arr[i - 1]:\n            is_non_decreasing = False\n\n    # Return True if either non-increasing or non-decreasing is True\n    return is_non_increasing or is_non_decreasing\n"], "plans": ["requirement analysis:\nThe function should accurately determine if an array is monotonic, handling both non-increasing and non-decreasing sequences. It should be efficient for large datasets and provide clear documentation for ease of use.\nrequirement pool:\n- Implement the monotonic check function\n- Optimize for performance with large arrays\n- Include comprehensive documentation\n- Handle edge cases such as empty arrays\n- Provide examples for user understanding\nWe will implement a simple Python function to check if an array is monotonic. The function will iterate through the array once to determine if it is non-increasing or non-decreasing. This approach ensures efficiency, even for large datasets. We will handle edge cases such as empty arrays and arrays with repeated elements by defining them as monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, monotonic means that the array is either entirely non-increasing or non-decreasing. This implies that the elements of the array should either consistently increase or decrease, or remain constant.\n\n# [phrase showing quantity relationship]\n    'non-increasing': means that each element is less than or equal to the previous element.\n    'non-decreasing': means that each element is greater than or equal to the previous element.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the array is empty or has only one element; if so, return True as it is trivially monotonic.\n    2. Initialize two flags: one for non-decreasing and one for non-increasing.\n    3. Iterate through the array:\n        - Compare each element with the next one.\n        - If an element is greater than the next, set the non-decreasing flag to False.\n        - If an element is less than the next, set the non-increasing flag to False.\n    4. After iteration, if either flag remains True, return True; otherwise, return False.\n\n# [edge case] \n    is_Monotonic([]) = True\n    Explanation: An empty array is considered monotonic by definition.\n    \n    is_Monotonic([1]) = True\n    Explanation: An array with a single element is trivially monotonic as there are no other elements to compare.\n    \n    is_Monotonic([1, 1, 1]) = True\n    Explanation: An array with all identical elements is both non-increasing and non-decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles these cases by checking the length of the array and comparing adjacent elements.\n", "requirement analysis:\nThe function should efficiently determine if an array is monotonic, handling both non-increasing and non-decreasing sequences. It should be optimized for performance and include comprehensive documentation.\nrequirement pool:\n- Implement the monotonic check function\n- Optimize for large datasets\n- Include edge case handling\n- Provide user documentation\n- Create example use cases\nWe will implement a simple Python function to check if an array is monotonic. The function will iterate through the array once to determine if it is non-increasing or non-decreasing. This approach ensures optimal performance for large datasets. We will handle edge cases such as arrays with repeated elements, single-element arrays, and empty arrays. We will not use any external libraries to keep the function lightweight and easy to integrate.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, monotonic means that the array is either entirely non-increasing or non-decreasing. This implies that the elements of the array should either consistently increase or decrease, or remain constant.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Initialize two boolean variables, `is_non_decreasing` and `is_non_increasing`, both set to True.\n    - Iterate through the array from the first element to the second-to-last element.\n    - For each element, compare it with the next element:\n        - If the current element is greater than the next element, set `is_non_decreasing` to False.\n        - If the current element is less than the next element, set `is_non_increasing` to False.\n    - After the loop, return True if either `is_non_decreasing` or `is_non_increasing` is True, indicating the array is monotonic.\n\n# [edge case] \n    is_Monotonic([]) = True\n    Explanation: An empty array is considered monotonic as there are no elements to contradict monotonicity.\n    \n    is_Monotonic([1]) = True\n    Explanation: A single-element array is considered monotonic as there are no other elements to compare against.\n    \n    is_Monotonic([1, 1, 1]) = True\n    Explanation: An array with all identical elements is considered monotonic as it neither increases nor decreases.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic naturally handles empty arrays and arrays with repeated or single elements.\n", "requirement analysis:\nThe function should accurately determine if an array is monotonic, handling both non-increasing and non-decreasing sequences. It should be optimized for performance, especially with large arrays, and include clear documentation for ease of use.\nrequirement pool:\n- Implement the monotonic check function\n- Optimize the function for large datasets\n- Provide comprehensive documentation\n- Ensure compatibility with existing Python projects\n- Include examples in the documentation\nWe will implement a simple Python function to check if an array is monotonic. The function will iterate through the array once to determine if it is non-increasing or non-decreasing. This approach ensures efficiency, especially for large datasets, by maintaining a time complexity of O(n). We will use Python's built-in capabilities to keep the solution lightweight and easy to integrate into existing projects.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the context of the requirement, a monotonic array is one that is either entirely non-increasing or non-decreasing. This means that the elements of the array do not change direction in terms of their order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'entirely': This means that the condition of being non-increasing or non-decreasing must hold for the entire array without exception.\n\n# [code logic]\n    1. Initialize two boolean variables, `is_non_decreasing` and `is_non_increasing`, to `True`.\n    2. Iterate through the array from the first element to the second-to-last element.\n    3. For each element, check if the next element is smaller. If it is, set `is_non_decreasing` to `False`.\n    4. Similarly, check if the next element is larger. If it is, set `is_non_increasing` to `False`.\n    5. After the loop, if either `is_non_decreasing` or `is_non_increasing` is still `True`, return `True`.\n    6. Otherwise, return `False`.\n\n# [edge case] \n    is_Monotonic([1]) = True\n    Explanation: A single-element array is trivially monotonic as it does not change direction.\n    \n    is_Monotonic([1, 2, 2, 3]) = True\n    Explanation: The array is non-decreasing as each subsequent element is greater than or equal to the previous one.\n    \n    is_Monotonic([3, 3, 2, 1]) = True\n    Explanation: The array is non-increasing as each subsequent element is less than or equal to the previous one.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for arrays of any length and handles both non-increasing and non-decreasing conditions.\n", "requirement analysis:\nThe function should efficiently determine if an array is monotonic, handling both increasing and decreasing sequences. It should be optimized for performance and include comprehensive documentation to aid user understanding.\nrequirement pool:\n- Implement the is_Monotonic function to check for monotonicity\n- Optimize the function for large datasets\n- Provide detailed documentation and examples\n- Ensure compatibility with Python 3.x versions\n- Include unit tests to verify function correctness\nWe will implement the is_Monotonic function using Python's built-in capabilities to efficiently check for monotonicity in arrays. The function will handle edge cases such as empty arrays and arrays with a single element. We will ensure compatibility with Python 3.x versions and provide comprehensive documentation and examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the context of the requirement, a monotonic sequence is one that either consistently increases or remains the same without decreasing, or consistently decreases or remains the same without increasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the array is empty or has only one element. If so, return True since such arrays are trivially monotonic.\n    2. Initialize two flags: one for checking increasing monotonicity and another for decreasing monotonicity.\n    3. Iterate through the array:\n       - For each pair of consecutive elements, update the flags based on whether the current element is greater than, less than, or equal to the next element.\n    4. If either flag remains True throughout the iteration, return True. Otherwise, return False.\n\n# [edge case] \n    is_Monotonic([]) = True\n    Explanation: An empty array is trivially monotonic as there are no elements to compare.\n    \n    is_Monotonic([1]) = True\n    Explanation: A single-element array is trivially monotonic as there are no other elements to compare against.\n    \n    is_Monotonic([1, 2, 2, 3]) = True\n    Explanation: The sequence is non-decreasing, hence it is monotonic.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty arrays and single-element arrays as monotonic by default.\n", "requirement analysis:\nThe requirement is to create a function that checks if an array is monotonic. This involves ensuring the array is either entirely non-increasing or non-decreasing. The function should handle edge cases such as empty arrays or arrays with a single element.\nrequirement pool:\n- Implement the is_Monotonic function to check for monotonicity\n- Optimize the function for performance with large datasets\n- Include comprehensive test cases to cover various scenarios\n- Provide detailed documentation and usage examples\n- Ensure compatibility with Python 3.x versions\nWe will implement a simple and efficient function to check if an array is monotonic. The function will iterate through the array once, checking for both non-decreasing and non-increasing conditions. This approach ensures that the function is efficient and can handle large datasets. We will use Python's built-in capabilities to keep the implementation straightforward and compatible with various Python 3.x versions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, monotonic refers to a sequence that either consistently increases or maintains the same value without decreasing, or consistently decreases or maintains the same value without increasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize two flags, `increasing` and `decreasing`, both set to `True`.\n    2. Iterate through the array from the first element to the second-to-last element.\n    3. For each element, compare it with the next element:\n        - If the current element is greater than the next element, set `increasing` to `False`.\n        - If the current element is less than the next element, set `decreasing` to `False`.\n    4. After the loop, return `True` if either `increasing` or `decreasing` is still `True`, indicating the array is monotonic. Otherwise, return `False`.\n\n# [edge case] \n    is_Monotonic([1]) = True\n    Explanation: A single-element array is trivially monotonic as it neither increases nor decreases.\n    \n    is_Monotonic([1, 1, 1]) = True\n    Explanation: An array where all elements are the same is monotonic as it maintains the same value throughout.\n    \n    is_Monotonic([1, 2, 3, 2]) = False\n    Explanation: The sequence increases from 1 to 3 but then decreases to 2, breaking monotonicity.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking both increasing and decreasing conditions simultaneously will naturally handle these cases.\n", "requirement analysis:\nThe function should accurately determine if an array is monotonic, handling both increasing and decreasing sequences. It should efficiently process large arrays and provide meaningful feedback for invalid inputs.\nrequirement pool:\n- Implement the monotonic check function\n- Optimize for performance with large datasets\n- Include error handling for invalid inputs\n- Document the function usage and examples\n- Test the function with various edge cases\nWe will implement a function using Python's built-in list methods to check if an array is monotonic. This approach is simple and efficient for most use cases, especially for large datasets. We will include error handling for invalid inputs, such as non-numeric values, and provide documentation with examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the context of the requirement, a monotonic sequence is one that either consistently increases or decreases, or remains constant without changing direction.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the array is empty or has only one element, in which case it is trivially monotonic.\n    2. Initialize two flags, `increasing` and `decreasing`, to track the direction of the sequence.\n    3. Iterate through the array:\n       - If an element is greater than the previous one, set `increasing` to True.\n       - If an element is less than the previous one, set `decreasing` to True.\n    4. If both flags are True, the sequence is not monotonic; otherwise, it is monotonic.\n    5. Return True if the sequence is monotonic, otherwise return False.\n\n# [edge case] \n    is_Monotonic([]) = True\n    Explanation: An empty array is considered monotonic as there are no elements to contradict the monotonic property.\n    \n    is_Monotonic([1]) = True\n    Explanation: A single-element array is trivially monotonic as there are no other elements to compare against.\n    \n    is_Monotonic([1, 2, 2, 3]) = True\n    Explanation: The sequence is non-decreasing, hence it is monotonic.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the length of the array and using flags to determine monotonicity.\n", "requirement analysis:\nThe function should accurately determine if an array is monotonic, handling both non-increasing and non-decreasing sequences. It should be efficient enough to process large arrays and provide meaningful feedback for invalid inputs.\nrequirement pool:\n- Implement the monotonic check function\n- Optimize for performance with large datasets\n- Include error handling for invalid inputs\n- Document the function usage and examples\n- Test the function with various edge cases\nWe will implement a simple function to check if an array is monotonic by iterating through the array once, checking for both non-increasing and non-decreasing conditions. We will use Python's built-in capabilities to ensure efficiency and simplicity. The function will include error handling for invalid inputs such as non-list inputs or lists containing non-numeric elements. We will also document the function with usage examples and edge case handling, such as arrays with all identical elements or empty arrays.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the context of arrays, monotonic means that the array is either entirely non-increasing or non-decreasing. A non-increasing array is one where each element is less than or equal to the previous element, while a non-decreasing array is one where each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize two flags, `is_non_decreasing` and `is_non_increasing`, both set to True.\n    2. Iterate through the array from the second element to the end.\n    3. For each element, check if it is greater than the previous element. If so, set `is_non_increasing` to False.\n    4. Check if it is less than the previous element. If so, set `is_non_decreasing` to False.\n    5. After the loop, return True if either `is_non_decreasing` or `is_non_increasing` is True; otherwise, return False.\n\n# [edge case] \n    is_Monotonic([]) = True\n    Explanation: An empty array can be considered monotonic as there are no elements to contradict monotonicity.\n    \n    is_Monotonic([1]) = True\n    Explanation: A single-element array is trivially monotonic as there are no other elements to compare.\n    \n    is_Monotonic([3, 3, 3]) = True\n    Explanation: An array with all identical elements is both non-increasing and non-decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic naturally handles these cases by considering arrays with zero or one element as monotonic and arrays with identical elements as both non-increasing and non-decreasing.\n", "requirement analysis:\nThe function should accurately determine if an array is monotonic, handling both non-increasing and non-decreasing sequences. It should be efficient for large datasets and provide clear output for user understanding.\nrequirement pool:\n- Implement the monotonic check function\n- Optimize for performance with large arrays\n- Include comprehensive documentation\n- Handle edge cases like empty arrays or arrays with one element\n- Provide examples for user understanding\nWe will implement a simple function using Python's built-in capabilities to check if an array is monotonic. The function will handle both non-increasing and non-decreasing sequences efficiently, including edge cases like empty arrays or arrays with one element. We will avoid over-engineering by not using external libraries, ensuring the solution is lightweight and easy to integrate.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, 'monotonic' means that the array is either entirely non-increasing or non-decreasing. A non-increasing array is one where each element is less than or equal to the previous element, while a non-decreasing array is one where each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the array is empty or has only one element, in which case it is trivially monotonic.\n    2. Initialize two flags: one for non-decreasing and one for non-increasing.\n    3. Iterate through the array and update the flags based on the comparison between consecutive elements.\n    4. If both flags remain true throughout the iteration, the array is monotonic.\n    5. Return True if either flag indicates monotonicity, otherwise return False.\n\n# [edge case] \n    is_Monotonic([]) = True\n    Explanation: An empty array is considered monotonic as there are no elements to violate monotonicity.\n    \n    is_Monotonic([1]) = True\n    Explanation: An array with a single element is trivially monotonic as there are no other elements to compare.\n    \n    is_Monotonic([1, 2, 2, 3]) = True\n    Explanation: The array is non-decreasing as each element is greater than or equal to the previous one.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty arrays and arrays with a single element as monotonic.\n", "requirement analysis:\nThe function should determine if an array is monotonic by checking if it is either entirely non-increasing or non-decreasing. It should handle arrays of varying sizes and types, including edge cases like empty arrays or arrays with all identical elements.\nrequirement pool:\n- Implement the is_Monotonic function to check for monotonicity\n- Optimize the function for performance with large arrays\n- Include comprehensive test cases to cover edge scenarios\n- Document the function usage and examples\n- Ensure compatibility with Python 3.x versions\nWe will implement a simple and efficient function using built-in Python capabilities to check if an array is monotonic. The function will iterate through the array once to determine if it is non-increasing or non-decreasing. This approach ensures compatibility with various Python versions and handles edge cases like empty arrays or arrays with all identical elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the context of the requirement, a monotonic array is one that is either entirely non-increasing or non-decreasing. This means that the elements of the array are either consistently increasing or consistently decreasing, or they remain constant.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the array is empty or has only one element. If so, return True because such arrays are trivially monotonic.\n    2. Initialize two boolean variables, `is_non_decreasing` and `is_non_increasing`, to True.\n    3. Iterate through the array from the second element to the end:\n        - If the current element is less than the previous element, set `is_non_decreasing` to False.\n        - If the current element is greater than the previous element, set `is_non_increasing` to False.\n    4. After the loop, if either `is_non_decreasing` or `is_non_increasing` is still True, return True. Otherwise, return False.\n\n# [edge case] \n    is_Monotonic([]) = True\n    Explanation: An empty array is trivially monotonic as there are no elements to compare.\n    \n    is_Monotonic([1]) = True\n    Explanation: An array with a single element is trivially monotonic as there are no other elements to compare it with.\n    \n    is_Monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are identical, so the array is both non-increasing and non-decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking for empty arrays and arrays with identical elements.\n", "requirement analysis:\nThe requirement is to create a function that checks if an array is monotonic, meaning it is either entirely non-increasing or non-decreasing. The function should handle various edge cases and be efficient for large datasets.\nrequirement pool:\n- Implement the is_Monotonic function to check for monotonicity.\n- Optimize the function for performance with large arrays.\n- Include comprehensive documentation and examples.\n- Ensure compatibility with different Python versions.\n- Handle edge cases such as empty arrays or arrays with a single element.\nWe will implement the is_Monotonic function using pure Python to ensure simplicity and compatibility across different Python versions. The function will efficiently check for monotonicity by iterating through the array once, making it suitable for large datasets. We will handle edge cases such as empty arrays and arrays with a single element by returning True, as they are trivially monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, 'monotonic' means that the array is either entirely non-increasing (each element is less than or equal to the previous one) or non-decreasing (each element is greater than or equal to the previous one).\n\n# [phrase showing quantity relationship]\n    'entirely non-increasing': means that for every pair of consecutive elements in the array, the latter is less than or equal to the former.\n    'entirely non-decreasing': means that for every pair of consecutive elements in the array, the latter is greater than or equal to the former.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the array is empty or has only one element. If so, return True as it is trivially monotonic.\n    2. Initialize two boolean variables, `is_non_increasing` and `is_non_decreasing`, to True.\n    3. Iterate through the array from the second element to the end:\n       - If the current element is greater than the previous one, set `is_non_increasing` to False.\n       - If the current element is less than the previous one, set `is_non_decreasing` to False.\n    4. After the loop, if either `is_non_increasing` or `is_non_decreasing` is still True, return True. Otherwise, return False.\n\n# [edge case] \n    is_Monotonic([]) = True\n    Explanation: An empty array is trivially monotonic as there are no elements to compare.\n    \n    is_Monotonic([1]) = True\n    Explanation: An array with a single element is trivially monotonic as there are no other elements to compare it with.\n    \n    is_Monotonic([1, 2, 2, 3]) = True\n    Explanation: The array is non-decreasing as each element is greater than or equal to the previous one.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty arrays and arrays with a single element as monotonic.\n"], "test": ["def check(is_Monotonic):\n\tassert is_Monotonic([6, 5, 4, 4]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 2, 2, 3]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 3, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 10, 7, 7]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([9, 4, 4, 2]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 2, 8, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([11, 1, 1, 3]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 5, 4, 9]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 1, 8, 7]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 3, 7, 7]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 10, 9, 3]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 6, 1, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 4, 3, 6]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([7, 5, 4, 2]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([7, 8, 5, 1]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([8, 1, 7, 6]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([8, 5, 6, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 6, 6, 6]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([11, 2, 3, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([9, 4, 7, 6]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 10, 9, 9]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([7, 2, 2, 1]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([11, 8, 3, 2]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([10, 10, 5, 6]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 2, 8, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 5, 5, 4]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([10, 3, 4, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([8, 1, 6, 9]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([10, 7, 8, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 8, 7, 9]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([7, 7, 2, 1]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 1, 5, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 10, 4, 5]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 2, 2, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 10, 4, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 7, 3, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 3, 6, 5]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 3, 4, 1]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 3, 2, 7]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 2, 6, 7]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 2, 3, 4]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 1, 1, 5]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 6, 1, 4]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 1, 5, 6]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 2, 6, 1]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 2, 6, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 5, 4, 7]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 7, 1, 1]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 6, 5, 6]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 5, 3, 6]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 6, 2, 2]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 5, 1, 4]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 1, 3, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 6, 7, 7]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 4, 6, 1]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 7, 7, 6]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 1, 1, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 5, 1, 4]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 7, 6, 7]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 4, 3, 4]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 6, 7, 1]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 4, 7, 7]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 6, 3, 3]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 4, 5, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 1, 6, 8]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 1, 2, 3]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 6, 7, 8]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 4, 3, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 6, 6, 7]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 1, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 2, 4]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 4, 4]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 2, 1]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 2, 3]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 1, 1]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 2, 4]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 5, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 8, 6]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 8, 7]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 7, 4]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 6, 5]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 1, 5]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 5, 5]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 3, 6]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 5, 1]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 3, 4]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 2, 3]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 4, 3]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 7, 2]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 5, 4]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([1, 4, 7]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([3, 7, 7]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 1, 1]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 2, 3]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 2, 6]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 5, 1]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 3, 1]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([4, 7, 5]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 1, 5]) == False", "def check(is_Monotonic):\n\tassert is_Monotonic([5, 5, 3]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([6, 5, 1]) == True", "def check(is_Monotonic):\n\tassert is_Monotonic([2, 5, 3]) == False"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef is_Monotonic(arr: list) -> bool:\n    \"\"\"\n    Check if the given array is monotonic.\n\n    Parameters:\n    arr (list): A list of numbers.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    # Handle edge cases for empty array or single element array\n    if len(arr) <= 1:\n        return True\n\n    # Initialize flags for non-increasing and non-decreasing\n    is_non_increasing = True\n    is_non_decreasing = True\n\n    # Iterate through the array to check monotonicity\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            is_non_increasing = False\n        if arr[i] < arr[i - 1]:\n            is_non_decreasing = False\n\n    # Return True if either non-increasing or non-decreasing is True\n    return is_non_increasing or is_non_decreasing\n", "passed": true, "pass": true, "pass_num": 10, "round": 741, "mutate_method": "add_1_sentence_at_end", "parent_index": 21}
