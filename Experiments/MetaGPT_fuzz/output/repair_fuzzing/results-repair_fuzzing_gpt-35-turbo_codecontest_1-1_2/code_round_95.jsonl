{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He has a songs that last one minute, b songs that last two minutes, and c songs that last three minutes, and he wants to distribute all songs into two concerts. Each concert should include every song in such a way that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider edge cases where there are significantly more songs of one duration than others.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He has a songs that last one minute, b songs that last two minutes, and c songs that last three minutes, and he wants to distribute all songs into two concerts. Each concert should include every song in such a way that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider edge cases where there are significantly more songs of one duration than others.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik wants to distribute all his songs into two concerts in a way that minimizes the absolute difference in durations. The difference in minutes between the concerts' durations should be as small as possible. He has a diverse mix of songs, some lasting one minute, some lasting two minutes, and some lasting three minutes. Let's help Luntik achieve his goal by finding the minimal possible difference in minutes between the concerts' durations, considering scenarios where there are significantly more songs of one duration than others.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik has songs that last one minute, two minutes, and three minutes, and he wants to distribute them into two concerts to minimize the absolute difference in duration between the concerts. Please find the minimal possible difference in minutes between the concerts durations, considering edge cases with significantly more songs of one duration than others.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    result = []\n    \n    for a, b, c in test_cases:\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        for i in range(a+1):\n            for j in range(b+1):\n                k = (total_duration - i - 2*j) // 3\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n        \n        result.append(min_diff)\n    \n    return result\n\n# Input interface using input()\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = min_duration_difference(t, test_cases)\n\n# Output interface using print()\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_min_difference(a: int, b: int, c: int) -> int:\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        for i in range(8):\n            concert1 = 0\n            concert2 = 0\n            if i & 1:\n                concert1 += a\n            else:\n                concert2 += a\n            if i & 2:\n                concert1 += b\n            else:\n                concert2 += b\n            if i & 4:\n                concert1 += c\n            else:\n                concert2 += c\n            \n            min_diff = min(min_diff, abs(concert1 - concert2))\n        \n        return min_diff\n    \n    result = []\n    for a, b, c in test_cases:\n        result.append(calculate_min_difference(a, b, c))\n    \n    return result\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = min_concert_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\ndef find_minimal_duration_difference(a: int, b: int, c: int) -> int:\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    min_diff = abs(half_duration - (a + 2*b))\n    return abs(total_duration - 2*min_diff)\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_duration_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom itertools import combinations\n\ndef calculate_duration_difference(combination: Tuple[int, int, int]) -> int:\n    total_duration = sum(combination)\n    half_duration = total_duration // 2\n    return abs(total_duration - 2 * half_duration)\n\ndef find_minimal_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    result = []\n    for test_case in test_cases:\n        durations = [1] * test_case[0] + [2] * test_case[1] + [3] * test_case[2]\n        min_diff = float('inf')\n        for comb in combinations(durations, len(durations)//2):\n            diff = calculate_duration_difference(comb)\n            min_diff = min(min_diff, diff)\n        result.append(min_diff)\n    return result\n\n# Input interface\n# t = int(input())\n# test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n# result = find_minimal_duration_difference(t, test_cases)\n# for res in result:\n#     print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_duration_difference(a: int, b: int, c: int) -> int:\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        for i in range(total_duration + 1):\n            for j in range(total_duration + 1):\n                k = total_duration - i - j\n                diff = abs(i - j) + abs(j - k) + abs(k - i)\n                min_diff = min(min_diff, diff)\n        \n        return min_diff\n    \n    result = []\n    for a, b, c in test_cases:\n        result.append(calculate_duration_difference(a, b, c))\n    \n    return result\n\n# Input interface\n\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        test_cases.append((a, b, c))\n\n    result = find_minimal_duration_difference(t, test_cases)\n    for res in result:\n        print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom itertools import combinations\n\ndef calculate_duration_difference(songs: List[int]) -> int:\n    total_duration = sum(songs)\n    half_duration = total_duration // 2\n    return abs(total_duration - 2 * sum(min(combo, half_duration) for combo in combinations(songs, len(songs) // 2 + 1)))\n\ndef minimal_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    results = []\n    for test_case in test_cases:\n        a, b, c = test_case\n        songs = [1] * a + [2] * b + [3] * c\n        results.append(calculate_duration_difference(songs))\n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = minimal_concert_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom itertools import combinations\n\ndef calculate_duration_difference(a: int, b: int, c: int) -> int:\n    concert1_duration = a * 1 + b * 2 + c * 3\n    concert2_duration = sum([1 * a, 2 * b, 3 * c]) - concert1_duration\n    return abs(concert1_duration - concert2_duration)\n\ndef minimal_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    results = []\n    \n    for test_case in test_cases:\n        a, b, c = test_case\n        \n        all_songs = [(1, a), (2, b), (3, c)]\n        total_songs = a + b + c\n        \n        min_diff = float('inf')\n        \n        for i in range(1, total_songs // 2 + 1):\n            for comb in combinations(all_songs, i):\n                concert1_duration = sum([x[0] * x[1] for x in comb])\n                concert2_duration = sum([(x[0] * x[1]) for x in all_songs if x not in comb])\n                \n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n        \n        results.append(min_diff)\n    \n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = minimal_concert_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_total_duration(a: int, b: int, c: int) -> int:\n        return a + 2*b + 3*c\n\n    def distribute_songs(a: int, b: int, c: int) -> int:\n        total_duration = calculate_total_duration(a, b, c)\n        min_diff = float('inf')\n\n        for i in range(a+1):\n            for j in range(b+1):\n                for k in range(c+1):\n                    concert1_duration = i + 2*j + 3*k\n                    concert2_duration = total_duration - concert1_duration\n                    diff = abs(concert1_duration - concert2_duration)\n                    min_diff = min(min_diff, diff)\n\n        return min_diff\n\n    results = []\n    for case in test_cases:\n        a, b, c = case\n        min_diff = distribute_songs(a, b, c)\n        results.append(min_diff)\n\n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = min_concert_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\ndef find_minimal_duration_difference(a: int, b: int, c: int) -> int:\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    min_diff = abs(half_duration - (a + 2*b))\n    return abs(total_duration - 2*min_diff)\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_duration_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_duration_difference(a: int, b: int, c: int) -> int:\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    min_diff = abs(half_duration - (a + 2*b))\n    return abs(total_duration - 2*min_diff)\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_duration_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement pool:\n- Help Luntik distribute songs into two concerts with minimal duration difference.\n- Consider edge cases where there are significantly more songs of one duration than others.\nWe will use Python and focus on creating a simple function to distribute songs into two concerts with minimal duration difference.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts with minimal duration difference'\n    Explanation: The core concept is to distribute songs into two concerts in a way that minimizes the absolute difference in duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic to implement the code would involve calculating the total duration of all songs, then trying different combinations of distributing songs into two concerts to find the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Case 1: t = 1, a = 10^9, b = 1, c = 1\n    Expected output: 1\n    Explanation: In this case, there are significantly more one-minute songs than the others. The minimal possible difference would be achieved by putting all one-minute songs in one concert and the other songs in the second concert.\n\n    Case 2: t = 1, a = 1, b = 10^9, c = 1\n    Expected output: 1\n    Explanation: Similar to Case 1, but with two-minute songs being significantly more. The minimal possible difference would be achieved by putting all two-minute songs in one concert and the other songs in the second concert.\n\n    Case 3: t = 1, a = 1, b = 1, c = 10^9\n    Expected output: 2\n    Explanation: In this case, there are significantly more three-minute songs. The minimal possible difference would be achieved by putting all three-minute songs in one concert and the other songs in the second concert.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on creating a simple function to distribute songs into two concerts with minimal possible difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts with minimal possible difference in durations'\n    Explanation: The core concept is to evenly distribute songs of different durations into two concerts to minimize the difference in total duration between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code logic:\n    1. Calculate the total duration of all songs.\n    2. Find the minimum possible difference by trying all possible combinations of distributing songs into two concerts.\n    3. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Edge cases:\n    Case 1: t = 1, a = 10^9, b = 1, c = 1\n    Expected output: 0\n    Explanation: In this case, there are significantly more one-minute songs than others. The optimal solution is to distribute all songs into one concert, resulting in a minimal possible difference of 0 minutes.\n    \n    Case 2: t = 1, a = 1, b = 10^9, c = 1\n    Expected output: 0\n    Explanation: In this case, there are significantly more two-minute songs than others. The optimal solution is to distribute all songs into one concert, resulting in a minimal possible difference of 0 minutes.\n    \n    Case 3: t = 1, a = 1, b = 1, c = 10^9\n    Expected output: 0\n    Explanation: In this case, there are significantly more three-minute songs than others. The optimal solution is to distribute all songs into one concert, resulting in a minimal possible difference of 0 minutes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on creating a simple function to distribute songs into two concerts with minimal possible difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts with minimal possible difference in durations'\n    Explanation: The core concept is to evenly distribute songs of different durations into two concerts to minimize the difference in total duration between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code logic:\n    1. Calculate the total duration of all songs.\n    2. Find the minimum possible difference by trying all combinations of distributing songs into two concerts.\n    3. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Edge cases:\n    Case 1: t = 1, a = 10^9, b = 1, c = 1\n    Expected output: 1\n    Explanation: In this case, there are significantly more one-minute songs than others. The minimal possible difference is achieved by distributing one-minute songs evenly between the two concerts.\n    \n    Case 2: t = 1, a = 1, b = 10^9, c = 1\n    Expected output: 1\n    Explanation: In this case, there are significantly more two-minute songs than others. The minimal possible difference is achieved by distributing two-minute songs evenly between the two concerts.\n    \n    Case 3: t = 1, a = 1, b = 1, c = 10^9\n    Expected output: 1\n    Explanation: In this case, there are significantly more three-minute songs than others. The minimal possible difference is achieved by distributing three-minute songs evenly between the two concerts.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)\n", "requirement pool:\n- Determine the minimal possible difference in minutes between the concerts' durations\n- Handle diverse mix of songs durations\n- Optimize the algorithm for efficiency\n- Ensure correct output format\n- Implement error handling for invalid inputs\nI will use Python and the built-in itertools library to generate all possible combinations of distributing the songs into two concerts. Then, I will calculate the total duration of each concert for each combination and find the one with the minimal absolute difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different parts or people\n    'minimizes the absolute difference': means to make the difference between two values as small as possible\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means the smallest or least possible\n\n# [code logic]\n    1. Generate all possible combinations of distributing the songs into two concerts using itertools.\n    2. Calculate the total duration of each concert for each combination.\n    3. Find the combination with the minimal absolute difference in durations.\n    4. Return the minimal possible difference in minutes between the concerts' durations.\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 0\n    Explanation: In this case, there is one song of each duration. The minimal possible difference in minutes between the concerts' durations is 0.\n\n    Test Case 2:\n    Input: 1\n           1000000000 1000000000 1000000000\n    Output: 0\n    Explanation: In this case, there are a significant number of songs for each duration. The minimal possible difference in minutes between the concerts' durations is 0.\n\n    Test Case 3:\n    Input: 1\n           2 4 6\n    Output: 0\n    Explanation: In this case, there are more three-minute songs than one-minute and two-minute songs. The minimal possible difference in minutes between the concerts' durations is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided can handle scenarios where there are significantly more songs of one duration than others.\n", "requirement pool:\n- Determine the minimal possible difference in minutes between the concerts' durations\n- Handle diverse mix of songs durations\n- Optimize the algorithm for efficiency\nWe will use Python and focus on designing a simple static function to determine the minimal possible difference in minutes between the concerts' durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference in durations'\n    Explanation: The goal is to distribute songs into two concerts in a way that the absolute difference in durations between the concerts is as small as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means finding the smallest possible difference in durations\n\n# [code logic]\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Initialize a variable min_diff with a large value\n    3. Iterate through all possible ways to split the songs into two concerts:\n        - Calculate the duration of concert 1 and concert 2\n        - Calculate the absolute difference in durations\n        - Update min_diff if the new difference is smaller\n    4. Return min_diff as the minimal possible difference in minutes between the concerts' durations\n\n# [edge case] \n    Test Case 1: t = 1, a = 1, b = 1, c = 1\n    Expected Output: 1\n    Explanation: In this case, we have one song of each duration. The minimal possible difference is 1 minute.\n    \n    Test Case 2: t = 1, a = 10^9, b = 10^9, c = 10^9\n    Expected Output: 0\n    Explanation: In this extreme case, where there are a large number of songs of each duration, the minimal possible difference is 0 minutes.\n    \n    Test Case 3: t = 1, a = 2, b = 3, c = 4\n    Expected Output: 1\n    Explanation: By distributing the songs optimally, we can achieve a minimal difference of 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios with different quantities of songs of each duration.\n", "requirement pool:\n- Determine the minimal possible difference in minutes between the concerts durations.\n- Handle edge cases with significantly more songs of one duration than others.\nWe will use Python and the built-in itertools library to generate all possible combinations of distributing the songs into two concerts. Then, we will calculate the absolute difference in duration between the concerts for each combination and return the minimal possible difference.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different options\n    'minimize the absolute difference': means to reduce the difference between two values to the smallest possible value\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means the smallest or least possible value\n\n# [code logic]\n    To implement the code logic:\n    1. Generate all possible combinations of distributing the songs into two concerts using itertools.\n    2. Calculate the total duration for each combination.\n    3. Find the absolute difference in duration between the two concerts.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Edge Case 1: t = 1, a = 1000, b = 1, c = 1\n    Expected Output: 0\n    Explanation: In this case, there is only one song of one-minute duration, so both concerts will have the same duration.\n\n    Edge Case 2: t = 1, a = 10^9, b = 10^9, c = 10^9\n    Expected Output: 0\n    Explanation: In this case, there are equal numbers of songs of each duration, so the difference in duration between the concerts will be minimized.\n\n    Edge Case 3: t = 1, a = 1, b = 10^9, c = 10^9\n    Expected Output: 1\n    Explanation: In this case, there are significantly more songs of two and three minutes duration compared to one minute, so to minimize the difference, one-minute songs should be distributed equally.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)\n", "requirement pool:\n- Determine the minimal possible difference in minutes between the concerts durations\n- Handle edge cases with significantly more songs of one duration than others\nWe will use Python and the built-in itertools library to generate all possible combinations of distributing the songs into two concerts. Then, we will calculate the absolute difference in duration between the concerts for each combination and return the minimal possible difference.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different options\n    'minimize the absolute difference': means to reduce the difference between two values to the smallest possible value\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means the smallest or least possible value\n\n# [code logic]\n    To implement the code logic:\n    1. Generate all possible combinations of distributing the songs into two concerts using itertools.\n    2. Calculate the total duration for each combination.\n    3. Find the absolute difference in duration between the two concerts.\n    4. Keep track of the minimal possible difference found.\n    5. Return the minimal possible difference.\n\n# [edge case] \n    Edge Case 1: t = 1, a = 1000, b = 1, c = 1\n    Expected Output: 0\n    Explanation: In this case, all songs are of one-minute duration, so distributing them equally results in 0 difference.\n    \n    Edge Case 2: t = 1, a = 999999999, b = 1, c = 1\n    Expected Output: 999999998\n    Explanation: In this case, there is a significantly more number of one-minute songs compared to others, resulting in a large difference.\n\n    Edge Case 3: t = 1, a = 500000000, b = 500000000, c = 500000000\n    Expected Output: 0\n    Explanation: In this case, an equal number of songs of each duration leads to an equal distribution and 0 difference.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on creating a simple function to distribute songs into two concerts with minimal possible difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts with minimal possible difference in durations'\n    Explanation: The core concept is to evenly distribute songs of different durations into two concerts to minimize the difference in total duration between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic to implement the code would involve calculating the total duration of all songs, then trying to distribute them evenly into two concerts while minimizing the difference in total duration between the concerts.\n\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Find the minimum difference by trying all possible combinations of distributing songs into two concerts.\n    3. Iterate through all possible combinations and calculate the difference in total duration between the two concerts.\n    4. Keep track of the minimum difference found.\n    5. Return the minimum possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Case 1: t = 1, a = 10^9, b = 1, c = 1\n    Expected output: 1\n    Explanation: In this case, there are significantly more one-minute songs than others. The optimal distribution would be to have all one-minute songs in one concert and the two and three-minute songs in the other concert, resulting in a difference of 1 minute.\n\n    Case 2: t = 1, a = 1, b = 10^9, c = 1\n    Expected output: 1\n    Explanation: In this case, there are significantly more two-minute songs than others. The optimal distribution would be to have all two-minute songs in one concert and the one and three-minute songs in the other concert, resulting in a difference of 1 minute.\n\n    Case 3: t = 1, a = 1, b = 1, c = 10^9\n    Expected output: 2\n    Explanation: In this case, there are significantly more three-minute songs than others. The optimal distribution would be to have all three-minute songs in one concert and the one and two-minute songs in the other concert, resulting in a difference of 2 minutes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on creating a simple function to distribute songs into two concerts with minimal possible difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts with minimal possible difference in durations'\n    Explanation: The core concept is to evenly distribute songs of different durations into two concerts to minimize the difference in total duration between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code logic:\n    1. Calculate the total duration of all songs.\n    2. Find the minimum possible difference by trying all combinations of distributing songs into two concerts.\n    3. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Edge cases:\n    Case 1: t = 1, a = 10^9, b = 1, c = 1\n    Expected output: 1\n    Explanation: In this case, there are significantly more one-minute songs than others. The minimal possible difference is achieved by distributing one-minute songs evenly between the two concerts.\n    \n    Case 2: t = 1, a = 1, b = 10^9, c = 1\n    Expected output: 1\n    Explanation: In this case, there are significantly more two-minute songs than others. The minimal possible difference is achieved by distributing two-minute songs evenly between the two concerts.\n    \n    Case 3: t = 1, a = 1, b = 1, c = 10^9\n    Expected output: 1\n    Explanation: In this case, there are significantly more three-minute songs than others. The minimal possible difference is achieved by distributing three-minute songs evenly between the two concerts.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on creating a simple function to distribute songs into two concerts with minimal possible difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts with minimal possible difference in durations'\n    Explanation: The core concept is to evenly distribute songs of different durations into two concerts to minimize the difference in total duration between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code logic:\n    1. Calculate the total duration of all songs.\n    2. Find the minimum possible difference by trying all combinations of distributing songs into two concerts.\n    3. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Edge cases:\n    Case 1: t = 1, a = 10^9, b = 1, c = 1\n    Expected output: 1\n    Explanation: In this case, there are significantly more one-minute songs than others. The minimal possible difference is achieved by distributing one-minute songs evenly between the two concerts.\n    \n    Case 2: t = 1, a = 1, b = 10^9, c = 1\n    Expected output: 1\n    Explanation: In this case, there are significantly more two-minute songs than others. The minimal possible difference is achieved by distributing two-minute songs evenly between the two concerts.\n    \n    Case 3: t = 1, a = 1, b = 1, c = 10^9\n    Expected output: 1\n    Explanation: In this case, there are significantly more three-minute songs than others. The minimal possible difference is achieved by distributing three-minute songs evenly between the two concerts.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)\n"], "scores": [], "pass_results": [false, false, false, false, false, false, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 95, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "condense_two2one", "parent_index": 75}
