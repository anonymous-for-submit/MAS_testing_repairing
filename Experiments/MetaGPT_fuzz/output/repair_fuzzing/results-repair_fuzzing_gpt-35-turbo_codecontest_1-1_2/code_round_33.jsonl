{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik wants to distribute his one-minute, two-minute, and three-minute songs into two concerts with the smallest possible difference in durations. Can you assist Luntik in finding the minimal possible difference in minutes between the concerts?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik has a one-minute, b two-minute, and c three-minute songs and wants to distribute them into two concerts with the smallest possible difference in their durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_duration_difference(a: int, b: int, c: int) -> int:\n        total_duration = a + 2*b + 3*c\n        target_duration = total_duration // 2\n        min_diff = float('inf')\n        \n        # Optimize the calculation of minimum absolute difference\n        for i in range(a+1):\n            for j in range(b+1):\n                k = (target_duration - i - 2*j) // 3\n                k = max(0, min(k, c))\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n        \n        return min_diff\n    \n    results = []\n    for a, b, c in test_cases:\n        min_diff = calculate_duration_difference(a, b, c)\n        results.append(min_diff)\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output interface\nresults = find_minimal_duration_difference(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    results = []\n    \n    for test_case in test_cases:\n        a, b, c = test_case\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        for i in range(1 << 3):\n            duration_concert1 = 0\n            duration_concert2 = 0\n            \n            for j in range(3):\n                if i & (1 << j):\n                    duration_concert1 += (j + 1) * test_case[j]\n                else:\n                    duration_concert2 += (j + 1) * test_case[j]\n            \n            min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n        \n        results.append(min_diff)\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output interface\nresults = find_minimal_duration_difference(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom itertools import combinations\n\ndef find_minimal_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_duration_difference(songs: Tuple[int, int, int]) -> int:\n        total_duration = sum(songs)\n        concert_duration = total_duration // 2\n        return abs(total_duration - 2 * concert_duration)\n\n    results = []\n    for test_case in test_cases:\n        all_songs = (1,) * test_case[0] + (2,) * test_case[1] + (3,) * test_case[2]\n        min_duration_diff = float('inf')\n        for combo in combinations(all_songs, len(all_songs) // 2):\n            duration_diff = calculate_duration_difference(combo)\n            min_duration_diff = min(min_duration_diff, duration_diff)\n        results.append(min_duration_diff)\n    \n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = find_minimal_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport itertools\n\ndef find_minimal_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_duration_difference(songs: Tuple[int, int, int]) -> int:\n        total_duration = sum(song * duration for song, duration in zip(songs, [1, 2, 3]))\n        return abs(total_duration - (sum(songs) // 2 * 6))\n    \n    minimal_differences = []\n    \n    for songs in test_cases:\n        all_combinations = itertools.combinations(songs, len(songs) // 2)\n        min_diff = float('inf')\n        \n        for comb in all_combinations:\n            diff = calculate_duration_difference(comb)\n            min_diff = min(min_diff, diff)\n        \n        minimal_differences.append(min_diff)\n    \n    return minimal_differences\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = find_minimal_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport itertools\n\ndef find_minimal_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_duration_difference(songs: Tuple[int, int, int]) -> int:\n        total_duration = sum(song * duration for song, duration in zip(songs, [1, 2, 3]))\n        return abs(total_duration - (sum(songs) // 2 * 6))\n    \n    results = []\n    \n    for songs in test_cases:\n        all_combinations = itertools.combinations(songs, len(songs) // 2)\n        min_diff = float('inf')\n        \n        for comb in all_combinations:\n            diff = calculate_duration_difference(comb)\n            min_diff = min(min_diff, diff)\n        \n        results.append(min_diff)\n    \n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresults = find_minimal_duration_difference(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    results = []\n    \n    for test_case in test_cases:\n        a, b, c = test_case\n        \n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        min_diff = abs(sum([a, b, c]) - half_duration)\n        results.append(min_diff)\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output interface\nresults = min_concert_duration_difference(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef distribute_songs(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    results = []\n    \n    for a, b, c in test_cases:\n        a, b, c = sorted([a, b, c])  # Sort the input values in ascending order\n        total_duration = a + 2*b + 3*c  # Calculate total duration of all songs\n        min_diff = float('inf')  # Initialize min_diff to a very large number\n        \n        for i in range(total_duration // 2 + 1):\n            duration_concert1 = i\n            duration_concert2 = total_duration - i\n            min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n        \n        results.append(min_diff)\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output interface\nresults = distribute_songs(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_min_difference(a: int, b: int, c: int) -> int:\n        durations = [a, b, c]\n        durations.sort(reverse=True)\n        \n        total_duration = sum(durations)\n        half_duration = total_duration // 2\n        \n        min_diff = float('inf')\n        \n        for i in range(2):\n            for j in range(2):\n                for k in range(2):\n                    concert1_duration = i * durations[0] + j * durations[1] + k * durations[2]\n                    concert2_duration = total_duration - concert1_duration\n                    diff = abs(concert1_duration - concert2_duration)\n                    min_diff = min(min_diff, diff)\n        \n        return min_diff\n    \n    results = []\n    for a, b, c in test_cases:\n        min_diff = calculate_min_difference(a, b, c)\n        results.append(min_diff)\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output interface\nresults = min_concert_duration_difference(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_duration(a: int, b: int, c: int) -> int:\n        return a + 2*b + 3*c\n\n    results = []\n    for test_case in test_cases:\n        a, b, c = test_case\n        total_duration = calculate_duration(a, b, c)\n        min_diff = float('inf')\n\n        for i in range(a+1):\n            for j in range(b+1):\n                for k in range(c+1):\n                    concert1_duration = calculate_duration(i, j, k)\n                    concert2_duration = total_duration - concert1_duration\n                    diff = abs(concert1_duration - concert2_duration)\n                    min_diff = min(min_diff, diff)\n\n        results.append(min_diff)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output interface\nresults = find_minimal_duration_difference(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_duration(a: int, b: int, c: int) -> int:\n        return a + 2*b + 3*c\n\n    results = []\n    for test_case in test_cases:\n        a, b, c = test_case\n        total_duration = calculate_duration(a, b, c)\n        min_diff = float('inf')\n\n        for i in range(a+1):\n            for j in range(b+1):\n                for k in range(c+1):\n                    concert1_duration = calculate_duration(i, j, k)\n                    concert2_duration = total_duration - concert1_duration\n                    diff = abs(concert1_duration - concert2_duration)\n                    min_diff = min(min_diff, diff)\n\n        results.append(min_diff)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output interface\nresults = find_minimal_duration_difference(t, test_cases)\nfor result in results:\n    print(result)\n"], "plans": ["requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on finding the optimal distribution of songs into two concerts to minimize the absolute difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different parts or people\n    'absolute difference': means the positive difference between two values without considering which one is larger\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means to minimize the absolute difference between the durations of the two concerts\n\n# [code logic]\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Calculate the target duration for each concert: target_duration = total_duration // 2\n    3. Initialize the minimum absolute difference as a large number: min_diff = float('inf')\n    4. Iterate through all possible combinations of distributing songs between two concerts:\n        - For each combination, calculate the duration of each concert\n        - Update the minimum absolute difference if a new minimum is found\n    5. Return the minimum absolute difference\n\n# [edge case] \n    t = 1, a = 1, b = 1, c = 1\n    Expected output: 0\n    Explanation: In this case, Luntik has one song of each duration. The optimal distribution is to have one song in each concert, resulting in an absolute difference of 0.\n\n    t = 1, a = 2, b = 3, c = 4\n    Expected output: 1\n    Explanation: In this case, Luntik has different numbers of songs for each duration. The optimal distribution is to have one one-minute song and one three-minute song in one concert, and all two-minute songs and two three-minute songs in the other concert, resulting in an absolute difference of 1.\n\n    t = 1, a = 5, b = 5, c = 5\n    Expected output: 0\n    Explanation: In this case, Luntik has the same number of songs for each duration. The optimal distribution is to have five one-minute songs in one concert and five two-minute songs and five three-minute songs in the other concert, resulting in an absolute difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios and calculates the optimal distribution to minimize the absolute difference.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on finding the optimal distribution of songs into two concerts to minimize the absolute difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts': Luntik needs to divide his songs into two concerts in a way that minimizes the absolute difference in durations between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Luntik wants to minimize the absolute difference in durations between the two concerts.\n\n# [code logic]\n    To implement the code logic:\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Initialize the minimum difference as infinity: min_diff = float('inf')\n    3. Iterate through all possible combinations of distributing songs into two concerts:\n        - Calculate the duration of concert 1 and concert 2 for each combination\n        - Update the minimum difference if the absolute difference between the two durations is smaller than the current minimum\n    4. Return the minimum absolute difference as the result\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Expected Output: 1\n    Explanation: In this case, Luntik has one song of each duration. The optimal distribution would be to have one song in each concert, resulting in a difference of 0 minutes. However, since he wants to distribute all songs, the minimal possible difference would be 1 minute.\n    \n    Test Case 2:\n    Input: 1\n           2 3 4\n    Expected Output: 1\n    Explanation: In this case, Luntik has more songs of different durations. The optimal distribution would be to have one song of each duration in one concert and the rest in the other concert, resulting in a difference of 1 minute.\n\n    Test Case 3:\n    Input: 1\n           5 5 5\n    Expected Output: 0\n    Explanation: In this case, Luntik has an equal number of songs of each duration. The optimal distribution would be to have an equal number of songs in each concert, resulting in a difference of 0 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers all scenarios and calculates the minimal possible difference between concert durations.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and the built-in itertools library to generate all possible combinations of distributing the songs into two concerts. Then, I will calculate the total duration of each concert and find the minimal possible difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different parts or people\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest possible': means the minimum or the least amount\n\n# [code logic]\n    To implement the code:\n    1. Generate all possible combinations of distributing the songs into two concerts using itertools.\n    2. Calculate the total duration of each concert for each combination.\n    3. Find the minimal possible difference in durations between the concerts.\n    \n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 1\n    Explanation: In this case, all songs have the same duration, so the minimal possible difference is 0.\n    \n    Test Case 2:\n    Input: 1\n           10 20 30\n    Output: 10\n    Explanation: One concert can have songs of durations 10 and 20, while the other concert can have songs of duration 30, resulting in a minimal difference of 10 minutes.\n    \n    Test Case 3:\n    Input: 1\n           5 5 5\n    Output: 0\n    Explanation: All songs have the same duration, so the minimal possible difference is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and the built-in itertools library to generate all possible combinations of distributing the songs into two concerts. Then, I will calculate the total duration of each concert and find the minimal possible difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide the songs into two concerts\n    'smallest possible difference': means to minimize the gap between the durations of the two concerts\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': means to find the minimum difference in durations\n\n# [code logic]\n    To implement the code logic:\n    1. Generate all possible combinations of distributing the songs into two concerts using itertools.\n    2. Calculate the total duration of each concert for every combination.\n    3. Find the minimal possible difference in durations between the concerts.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 0\n    Explanation: In this case, all songs have the same duration, so distributing them equally results in 0 difference in durations.\n\n    Test Case 2:\n    Input: 1\n           2 3 4\n    Output: 1\n    Explanation: One optimal way to distribute the songs is [2, 3] and [4], resulting in a difference of 1 minute between the concerts.\n\n    Test Case 3:\n    Input: 1\n           5 5 5\n    Output: 0\n    Explanation: All songs have the same duration, so distributing them equally results in 0 difference in durations.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios and calculates the minimal possible difference correctly.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and the built-in itertools library to generate all possible combinations of distributing the songs into two concerts. Then, I will calculate the total duration of each concert and find the minimal possible difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide the songs into two concerts\n    'smallest possible difference': means to minimize the gap between the durations of the two concerts\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': means to find the minimum difference in durations\n\n# [code logic]\n    To implement the code logic:\n    1. Generate all possible combinations of distributing the songs into two concerts using itertools.\n    2. Calculate the total duration of each concert for every combination.\n    3. Find the minimal possible difference in durations between the concerts.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 0\n    Explanation: In this case, all songs have the same duration, so distributing them equally results in 0 difference in durations.\n\n    Test Case 2:\n    Input: 1\n           2 3 4\n    Output: 1\n    Explanation: One optimal way to distribute the songs is [2, 3] and [4], resulting in a difference of 1 minute between the concerts.\n\n    Test Case 3:\n    Input: 1\n           5 5 5\n    Output: 0\n    Explanation: All songs have the same duration, so distributing them equally results in 0 difference in durations.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios and calculates the minimal possible difference correctly.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and focus on finding the optimal distribution of songs for each test case to minimize the difference in concert durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate the songs into two concerts in a way that minimizes the difference in their durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest possible': means finding the minimum difference in minutes between the concerts durations.\n\n# [code logic]\n    1. Read the number of test cases.\n    2. Iterate over each test case:\n        a. Read the number of one-minute, two-minute, and three-minute songs.\n        b. Calculate the total duration of all songs.\n        c. Calculate the minimum difference by distributing the songs as evenly as possible between two concerts.\n        d. Print the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Test Case 1: 1 1 1\n    Expected Output: 0\n    Explanation: Since all songs have the same duration, distributing them equally results in 0 difference.\n    \n    Test Case 2: 2 1 3\n    Expected Output: 1\n    Explanation: One way to distribute the songs is [2, 3] and [1], resulting in a difference of 1 minute.\n    \n    Test Case 3: 5 5 5\n    Expected Output: 0\n    Explanation: All songs have the same duration, so distributing them equally results in 0 difference.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers the distribution of songs to minimize the difference in concert durations.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python standard libraries to design a simple function to distribute songs into two concerts with the smallest possible difference in their durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs': means to allocate the songs into two concerts with the smallest possible difference in their durations\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest possible': means to minimize the difference in durations between the two concerts\n\n# [code logic]\n    1. Sort the input values a, b, c in ascending order.\n    2. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    3. Initialize a variable min_diff to store the minimum possible difference, initially set to a very large number.\n    4. Iterate through all possible split points i from 0 to total_duration//2:\n        - Calculate the duration of concert 1: duration_concert1 = i\n        - Calculate the duration of concert 2: duration_concert2 = total_duration - i\n        - Update min_diff to be the minimum of abs(duration_concert1 - duration_concert2) and min_diff\n    5. Return min_diff as the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Case 1: t = 1, a = 1, b = 1, c = 1\n    Expected output: 0\n    Explanation: In this case, all songs have the same duration, so distributing them equally results in 0 difference.\n    \n    Case 2: t = 1, a = 10^9, b = 10^9, c = 10^9\n    Expected output: 0\n    Explanation: In this case, all songs have different durations, but since they are all multiples of each other, they can be distributed equally resulting in 0 difference.\n    \n    Case 3: t = 1, a = 1, b = 2, c = 3\n    Expected output: 0\n    Explanation: In this case, the songs have increasing durations, so distributing them equally results in 0 difference.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers all scenarios and ensures the smallest possible difference in concert durations.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and focus on finding the optimal distribution of songs for each test case to minimize the difference in concert durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different parts or people\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest possible': means to minimize the difference in concert durations\n\n# [code logic]\n    To implement the code logic:\n    1. Sort the songs durations in descending order.\n    2. Calculate the total duration of all songs.\n    3. Calculate the sum of durations for each concert by trying different combinations.\n    4. Find the combination that minimizes the difference in concert durations.\n    5. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Edge cases:\n    Case 1: t = 1, a = 1, b = 1, c = 1\n    Expected output: 0\n    Explanation: All songs have the same duration, so the minimal possible difference is 0.\n\n    Case 2: t = 1, a = 10^9, b = 10^9, c = 10^9\n    Expected output: 0\n    Explanation: All songs have the same duration, so the minimal possible difference is 0.\n\n    Case 3: t = 1, a = 1, b = 10^9, c = 10^9\n    Expected output: 1\n    Explanation: One one-minute song and two three-minute songs can be distributed to minimize the difference.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided can handle all scenarios effectively.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on finding the optimal distribution of songs into two concerts to minimize the absolute difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different options\n    'absolute difference': means the positive difference between two values\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means to minimize the difference between two values\n\n# [code logic]\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Calculate the minimum possible difference by trying all possible combinations of distributing songs into two concerts:\n        - Calculate the sum of durations for each concert by iterating through all possible combinations of a, b, c\n        - Update the minimum difference if a new minimum is found\n    3. Return the minimum possible difference\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 1\n    Explanation: In this case, Luntik has one song of each duration. The optimal distribution would be to have one concert with all three songs, resulting in a duration of 6 minutes, and the other concert empty with a duration of 0 minutes. The absolute difference is |6-0| = 6.\n\n    Test Case 2:\n    Input: 1\n           2 2 2\n    Output: 0\n    Explanation: In this case, Luntik has two songs of each duration. The optimal distribution would be to have one concert with all six songs, resulting in a duration of 12 minutes for both concerts. The absolute difference is |12-12| = 0.\n\n    Test Case 3:\n    Input: 1\n           3 1 2\n    Output: 0\n    Explanation: In this case, Luntik has three one-minute songs, one two-minute song, and two three-minute songs. The optimal distribution would be to have one concert with all three one-minute songs and one three-minute song, resulting in a duration of 9 minutes, and the other concert with the remaining two three-minute songs, resulting in a duration of 6 minutes. The absolute difference is |9-6| = 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers all scenarios and finds the optimal distribution to minimize the absolute difference in durations.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on finding the optimal distribution of songs into two concerts to minimize the absolute difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different options\n    'absolute difference': means the positive difference between two values\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means to minimize the difference between two values\n\n# [code logic]\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Calculate the minimum possible difference by trying all possible combinations of distributing songs into two concerts:\n        - Calculate the sum of durations for each concert by iterating through all possible combinations of a, b, c\n        - Update the minimum difference if a new minimum is found\n    3. Return the minimum possible difference\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 1\n    Explanation: In this case, Luntik has one song of each duration. The optimal distribution would be to have one concert with all three songs, resulting in a duration of 6 minutes, and the other concert empty with a duration of 0 minutes. The absolute difference is |6-0| = 6.\n\n    Test Case 2:\n    Input: 1\n           2 2 2\n    Output: 0\n    Explanation: In this case, Luntik has two songs of each duration. The optimal distribution would be to have one concert with all six songs, resulting in a duration of 12 minutes for both concerts. The absolute difference is |12-12| = 0.\n\n    Test Case 3:\n    Input: 1\n           3 1 2\n    Output: 0\n    Explanation: In this case, Luntik has three one-minute songs, one two-minute song, and two three-minute songs. The optimal distribution would be to have one concert with all three one-minute songs and one three-minute song, resulting in a duration of 9 minutes, and the other concert with the remaining two three-minute songs, resulting in a duration of 6 minutes. The absolute difference is |9-6| = 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers all scenarios and finds the optimal distribution to minimize the absolute difference in durations.\n"], "scores": [], "pass_results": [false, true, false, false, true, false, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 33, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "expand_one2two", "parent_index": 36}
