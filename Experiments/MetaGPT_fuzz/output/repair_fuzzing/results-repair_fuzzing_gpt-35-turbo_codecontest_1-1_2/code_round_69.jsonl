{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He has a songs that last one minute, b songs that last two minutes, and c songs that last three minutes. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He has a songs that last one minute, b songs that last two minutes, and c songs that last three minutes. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik wants to make the absolute difference of durations of the concerts as small as possible in order to distribute his songs. The duration of the concert is the sum of durations of all songs in that concert, and he needs to find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik has decided to try singing and wants to make the absolute difference of durations of the concerts as small as possible by distributing songs into two concerts. He has a songs that last one minute, b songs that last two minutes, and c songs that last three minutes, and wants to find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1."], "completions": ["from typing import List\n## main.py\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a: int, number of one-minute songs\n        b: int, number of two-minute songs\n        c: int, number of three-minute songs\n        \n    Returns:\n        int, minimal possible difference in minutes between the concerts durations\n    \"\"\"\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    min_diff = abs(half_duration - (a + b + c))\n    return min_diff\n\nt = int(input())  # Number of test cases\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_duration(a: int, b: int, c: int, mask: int) -> int:\n        duration = 0\n        if mask & 1:\n            duration += a\n        if mask & 2:\n            duration += 2 * b\n        if mask & 4:\n            duration += 3 * c\n        return duration\n\n    results = []\n    for test_case in test_cases:\n        a, b, c = test_case\n        total_duration = a + 2 * b + 3 * c\n        min_diff = float('inf')\n        for mask in range(1, 8):\n            duration_concert1 = calculate_duration(a, b, c, mask)\n            duration_concert2 = total_duration - duration_concert1\n            abs_diff = abs(duration_concert1 - duration_concert2)\n            min_diff = min(min_diff, abs_diff)\n        results.append(min_diff)\n    \n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = minimal_concert_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_total_duration(a: int, b: int, c: int) -> int:\n        return a + 2*b + 3*c\n\n    def find_minimal_difference(total_duration: int) -> int:\n        half_duration = total_duration // 2\n        min_diff = abs(total_duration - 2*half_duration)\n        return min_diff\n\n    results = []\n    for test_case in test_cases:\n        a, b, c = test_case\n        total_duration = calculate_total_duration(a, b, c)\n        min_diff = find_minimal_difference(total_duration)\n        results.append(min_diff)\n\n    return results\n\n# Input interface using input()\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = min_concert_duration_difference(t, test_cases)\n\n# Output interface using print()\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_min_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    result = []\n    \n    for test_case in test_cases:\n        a, b, c = test_case\n        \n        total_duration_concert1 = a + 2*b + 3*c\n        total_duration_concert2 = 2*a + 2*b + 2*c\n        total_duration_concert3 = 3*a + 2*b + c\n        \n        min_duration = min(total_duration_concert1, total_duration_concert2, total_duration_concert3)\n        max_duration = max(total_duration_concert1, total_duration_concert2, total_duration_concert3)\n        \n        absolute_difference = max_duration - min_duration\n        result.append(absolute_difference)\n    \n    return result\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = calculate_min_difference(t, test_cases)\n\n# Output interface\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_min_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    results = []\n    \n    for test_case in test_cases:\n        a, b, c = test_case\n        \n        total_duration_1 = a + 2*b + 3*c\n        total_duration_2 = 2*a + 2*b + 2*c\n        total_duration_3 = 3*a + 2*b + c\n        \n        min_duration = min(total_duration_1, total_duration_2, total_duration_3)\n        max_duration = max(total_duration_1, total_duration_2, total_duration_3)\n        \n        min_difference = max_duration - min_duration\n        results.append(min_difference)\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = calculate_min_difference(t, test_cases)\n\n# Output interface\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_min_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    result = []\n    \n    for test_case in test_cases:\n        a, b, c = test_case\n        \n        durations = [a, b*2, c*3]\n        total_durations = sum(durations)\n        \n        absolute_diffs = []\n        for i in range(len(durations)):\n            for j in range(i+1, len(durations)):\n                absolute_diffs.append(abs(durations[i] - durations[j]))\n        \n        min_absolute_diff = min(absolute_diffs)\n        result.append(min_absolute_diff)\n    \n    return result\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = calculate_min_difference(t, test_cases)\n\n# Output interface\n\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    result = []\n    for i in range(t):\n        a, b, c = test_cases[i]\n        total_minutes = a + 2*b + 3*c\n        half_minutes = total_minutes // 2\n        if total_minutes % 2 == 0:\n            result.append(0)\n        else:\n            result.append(min(total_minutes - half_minutes, half_minutes))\n    return result\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output interface\n\nresult = find_minimal_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_min_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_duration(a: int, b: int, c: int) -> int:\n        return a + 2*b + 3*c\n    \n    def find_min_difference(a: int, b: int, c: int) -> int:\n        total_duration = calculate_duration(a, b, c)\n        min_diff = float('inf')\n        \n        for i in range(a+1):\n            for j in range(b+1):\n                for k in range(c+1):\n                    concert1_duration = calculate_duration(i, j, k)\n                    concert2_duration = total_duration - concert1_duration\n                    diff = abs(concert1_duration - concert2_duration)\n                    min_diff = min(min_diff, diff)\n        \n        return min_diff\n    \n    results = []\n    for case in test_cases:\n        a, b, c = case\n        min_diff = find_min_difference(a, b, c)\n        results.append(min_diff)\n    \n    return results\n\n# Input interface using input()\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output interface using print()\n\nresult = calculate_min_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    results = []\n    \n    for test_case in test_cases:\n        a, b, c = test_case\n        \n        total_duration = a + 2*b + 3*c\n        \n        min_diff = float('inf')\n        \n        for i in range(a+1):\n            for j in range(b+1):\n                k = (total_duration - i - 2*j) // 3\n                if k >= 0 and i + 2*j + 3*k == total_duration // 2:\n                    diff = abs((a-i) + 2*(b-j) + 3*(c-k) - total_duration // 2)\n                    min_diff = min(min_diff, diff)\n        \n        results.append(min_diff)\n    \n    return results\n\n# Input and Output interface\n\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        test_cases.append((a, b, c))\n\n    results = calculate_minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    total_duration = a + 2*b + 3*c\n    min_diff = float('inf')\n    \n    for i in range(8):\n        duration_concert1 = 0\n        duration_concert2 = 0\n        \n        if i & 1:\n            duration_concert1 += a\n        else:\n            duration_concert2 += a\n        \n        if i & 2:\n            duration_concert1 += b\n        else:\n            duration_concert2 += b\n        \n        if i & 4:\n            duration_concert1 += c\n        else:\n            duration_concert2 += c\n        \n        min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n    \n    return min_diff\n\n# Input interface using input()\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on designing a simple static function to distribute songs into two concerts with minimal possible difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts with minimal possible difference in durations'\n    Explanation: The core concept is to distribute the songs into two concerts in a way that minimizes the absolute difference in durations between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means that we need to minimize the absolute difference in durations between the two concerts\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Calculate all possible combinations of distributing songs into two concerts.\n    3. Find the combination that minimizes the absolute difference in durations.\n    4. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 1\n    Explanation: In this case, there is only one song of each duration, so the minimal possible difference is 1 minute.\n\n    Test Case 2:\n    Input: 1\n           5 5 5\n    Output: 0\n    Explanation: In this case, there are equal numbers of songs of each duration, so the durations of both concerts will be the same.\n\n    Test Case 3:\n    Input: 1\n           2 3 4\n    Output: 1\n    Explanation: One optimal way to distribute the songs is to have one concert with all one-minute and two-minute songs, and the other concert with three-minute songs. The absolute difference in durations is minimized to 1 minute.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- Determine the minimal possible difference in minutes between the concerts durations\n- Distribute all songs into two concerts ensuring each song is included in exactly one concert\nWe will use Python and focus on creating a simple function to distribute songs into two concerts with minimal possible difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts with minimal possible difference in durations'\n    Explanation: The core concept is to distribute the songs into two concerts in a way that minimizes the absolute difference in durations between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means that we need to minimize the absolute difference in durations between the two concerts\n\n# [code logic]\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Initialize a variable min_diff with a large value\n    3. Iterate through all possible ways to split the songs into two concerts:\n        - Calculate the duration of concert 1 and concert 2\n        - Calculate the absolute difference in durations: abs_diff = abs(duration_concert1 - duration_concert2)\n        - Update min_diff if abs_diff is smaller\n    4. Return min_diff as the minimal possible difference in minutes between the concerts durations\n\n# [edge case] \n    t = 1, a = 1, b = 1, c = 1\n    Expected output: 1\n    Explanation: In this case, there is only one song of each duration, so the minimal possible difference is 1 minute.\n\n    t = 2, a = 10^9, b = 10^9, c = 10^9\n    Expected output: 0\n    Explanation: In this case, there are a large number of songs of each duration, so it is possible to distribute them equally between two concerts resulting in 0 difference.\n\n    t = 3, a = 5, b = 3, c = 2\n    Expected output: 0\n    Explanation: In this case, it is possible to distribute the songs in a way that both concerts have equal durations resulting in 0 difference.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers all scenarios and will handle edge cases effectively.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and focus on creating a simple function to distribute songs into two concerts with minimal possible difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs': means allocating songs into two concerts\n    'minimal possible difference': means finding the smallest absolute difference between the durations of the two concerts\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means minimizing the absolute difference between the durations of the two concerts\n\n# [code logic]\n    To implement the code logic:\n    1. Calculate the total duration of all songs.\n    2. Calculate all possible combinations of distributing songs into two concerts.\n    3. Find the combination that minimizes the absolute difference in durations.\n    4. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Edge Case 1: t = 1, a = 1, b = 1, c = 1\n    Expected Output: 1\n    Explanation: In this case, there is only one song of each duration, so the minimal possible difference is 1 minute.\n\n    Edge Case 2: t = 1, a = 10^9, b = 10^9, c = 10^9\n    Expected Output: 0\n    Explanation: In this case, there are a large number of songs of each duration, so it is possible to distribute them equally between two concerts resulting in 0 difference.\n\n    Edge Case 3: t = 1, a = 2, b = 3, c = 4\n    Expected Output: 1\n    Explanation: In this case, there are different numbers of songs for each duration, and the optimal distribution would result in a minimal difference of 1 minute.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and focus on creating a simple function to calculate the minimal possible difference in minutes between concert durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The absolute difference refers to the positive difference between two values without considering their direction.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the need to minimize the difference between concert durations.\n\n# [code logic]\n    To implement the code:\n    1. Read the number of test cases.\n    2. Iterate through each test case:\n        a. Read the durations of one-minute, two-minute, and three-minute songs.\n        b. Calculate the total duration of each concert.\n        c. Find the minimum and maximum duration among the concerts.\n        d. Calculate the absolute difference between the durations.\n        e. Print the absolute difference.\n\n# [edge case] \n    Test Case 1: 1 1 1\n    Expected Output: 0\n    Explanation: All concerts have the same duration, so the absolute difference is 0.\n    \n    Test Case 2: 2 1 3\n    Expected Output: 1\n    Explanation: The durations are 6 and 7 for two concerts, resulting in an absolute difference of 1.\n    \n    Test Case 3: 5 5 5\n    Expected Output: 0\n    Explanation: All concerts have the same duration, so the absolute difference is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where the durations are equal or different.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and focus on creating a simple function to calculate the minimal possible difference in minutes between concert durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The absolute difference refers to the positive difference between two values without considering their direction.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the need to minimize the difference between concert durations.\n\n# [code logic]\n    To implement the code:\n    - Read the number of test cases 't'\n    - Iterate 't' times:\n        - Read the input values a, b, c\n        - Calculate the total duration for each concert\n        - Find the minimum and maximum total duration\n        - Calculate the minimal possible difference by subtracting the minimum from the maximum\n        - Print the minimal possible difference\n\n# [edge case] \n    Test Case 1: 1 1 1\n    Expected Output: 0\n    Explanation: All concerts have the same duration, so the minimal possible difference is 0.\n    \n    Test Case 2: 2 1 3\n    Expected Output: 1\n    Explanation: The total durations for the concerts are 6, 5, and 7. The minimal possible difference is 1.\n    \n    Test Case 3: 5 5 5\n    Expected Output: 0\n    Explanation: All concerts have the same duration, so the minimal possible difference is 0.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and focus on designing a simple function to calculate the minimal possible difference in minutes between concert durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The difference between two values without considering the direction of the difference.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the need to minimize the difference between concert durations.\n\n# [code logic]\n    1. Read the number of test cases, t.\n    2. Iterate t times:\n        a. Read the values of a, b, and c for each test case.\n        b. Calculate the total duration for each concert using the given formula.\n        c. Find all possible combinations of two concerts and calculate the absolute difference in durations.\n        d. Return the minimum absolute difference calculated.\n\n# [edge case] \n    Test Case 1: 1 1 1\n    Expected Output: 0\n    Explanation: All concerts have the same duration, so the absolute difference is 0.\n    \n    Test Case 2: 2 1 3\n    Expected Output: 1\n    Explanation: The durations are 6 and 5 for two concerts, resulting in an absolute difference of 1.\n    \n    Test Case 3: 5 5 5\n    Expected Output: 0\n    Explanation: All concerts have the same duration, so the absolute difference is 0.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios and calculates the minimum absolute difference correctly.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and the built-in functions to calculate the minimal possible difference in minutes between the concerts durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The absolute difference refers to the positive difference between two values without considering their direction.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the need to minimize the difference between concert durations.\n\n# [code logic]\n    To implement the code logic:\n    1. Read the number of test cases.\n    2. Iterate through each test case:\n        a. Read the number of one-minute, two-minute, and three-minute songs.\n        b. Calculate the total duration for each concert by multiplying the number of songs with their respective durations.\n        c. Find all possible combinations of distributing songs into two concerts.\n        d. Calculate the absolute difference in duration between the two concerts for each combination.\n        e. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    1 1 1 = 0\n    Explanation: With only one song of each duration, the minimal possible difference is 0 as they can be evenly distributed.\n    \n    2 1 3 = 1\n    Explanation: Distributing songs (1, 3) and (2) results in a minimal difference of 1 minute.\n    \n    5 5 5 = 0\n    Explanation: Equal number of songs of each duration results in a minimal difference of 0 minutes.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios and calculates the minimal possible difference accurately.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and the built-in libraries to design a simple function that calculates the minimal possible difference in minutes between two concerts durations based on the given input of the number of one-minute, two-minute, and three-minute songs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The difference between two values without considering the direction of the difference.\n    Explanation: Luntik wants to minimize the difference in duration between two concerts by distributing songs.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the need to minimize the difference in durations.\n    Explanation: We need to find the smallest possible difference between the durations of the two concerts.\n\n# [code logic]\n    To implement the code logic, we can follow these steps:\n    1. Read the number of test cases.\n    2. For each test case, read the number of one-minute, two-minute, and three-minute songs.\n    3. Calculate the total duration for each concert based on the given songs.\n    4. Find all possible combinations of distributing songs into two concerts.\n    5. Calculate the absolute difference in duration between the two concerts for each combination.\n    6. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    1 1 1\n    Expected Output: 0\n    Explanation: With only one song of each duration, the minimal possible difference is 0.\n    \n    2 1 3\n    Expected Output: 1\n    Explanation: Distributing songs (2, 1, 3) into two concerts results in durations (5, 4) with a minimal difference of 1.\n    \n    5 5 5\n    Expected Output: 0\n    Explanation: Equal number of songs of each duration results in equal concert durations, hence a difference of 0.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios effectively.\n", "requirement pool:\n- Create a function to calculate the minimal possible difference in minutes between concert durations\n- Handle multiple test cases efficiently\nWe will use Python and the built-in libraries to efficiently calculate the minimal possible difference in minutes between concert durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The absolute difference refers to the positive difference between two values without considering their direction.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code logic:\n    1. Read the number of test cases, t.\n    2. Iterate t times for each test case:\n        a. Read the values of a, b, and c.\n        b. Calculate the total duration for each concert by multiplying the number of songs with their respective durations.\n        c. Find all possible combinations of distributing songs into two concerts.\n        d. Calculate the absolute difference in duration between the two concerts for each combination.\n        e. Print the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    1 1 1\n    Expected output: 0\n    Explanation: Since there is only one song of each duration, the difference in concert durations will be 0.\n    \n    2 1 3\n    Expected output: 1\n    Explanation: One optimal way to distribute songs is [2, 1] and [3], resulting in a difference of 1 minute.\n    \n    5 5 5\n    Expected output: 0\n    Explanation: Equal number of songs of each duration, so the difference will be 0.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers all scenarios efficiently.\n", "requirement pool:\n- Determine the minimal possible difference in minutes between the concerts durations\n- Distribute all songs into two concerts ensuring each song is included in exactly one concert\n- Calculate the sum of durations of all songs in each concert\nWe will use Python and focus on designing a simple static function to solve the problem efficiently without the need for defining any classes. We will leverage basic arithmetic operations to calculate the minimal possible difference in minutes between the concerts durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts': Luntik needs to divide the songs into two concerts in such a way that each song is included in exactly one concert.\n\n    'absolute difference of durations of the concerts': The goal is to minimize the absolute difference in total duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the need to minimize the absolute difference in durations between the concerts.\n\n# [code logic]\n    To implement the code logic:\n    1. Calculate the total duration of all songs.\n    2. Calculate all possible combinations of distributing songs into two concerts.\n    3. Find the combination that minimizes the absolute difference in durations between the concerts.\n    4. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 1\n    Explanation: In this case, there is only one song of each duration. The minimal possible difference is achieved by having one concert with all songs (total duration = 6) and an empty concert (total duration = 0). The absolute difference is |6-0| = 6.\n\n    Test Case 2:\n    Input: 1\n           2 2 2\n    Output: 0\n    Explanation: In this case, there are two songs of each duration. The minimal possible difference is achieved by evenly distributing the songs between the two concerts (total duration = 9 each). The absolute difference is |9-9| = 0.\n\n    Test Case 3:\n    Input: 1\n           3 2 1\n    Output: 0\n    Explanation: In this case, there are different numbers of songs for each duration. The minimal possible difference is achieved by distributing the songs such that each concert has a total duration of 5. The absolute difference is |5-5| = 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided can handle all scenarios efficiently.\n"], "scores": [], "pass_results": [false, false, false, false, false, false, true, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 2, "round": 69, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "parent_index": 65}
