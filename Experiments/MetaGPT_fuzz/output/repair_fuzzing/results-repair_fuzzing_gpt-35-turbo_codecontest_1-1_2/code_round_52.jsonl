{"name": "1575_G. GCD Festival", "description": "Mr. Chanek has an array a of n integers. The prettiness value of a is denoted as:\n\n$$$\u2211_{i=1}^{n} {\u2211_{j=1}^{n} {\\gcd(a_i, a_j) \u22c5 \\gcd(i, j)}}$$$\n\nwhere \\gcd(x, y) denotes the greatest common divisor (GCD) of integers x and y.\n\nIn other words, the prettiness value of an array a is the total sum of \\gcd(a_i, a_j) \u22c5 \\gcd(i, j) for all pairs (i, j).\n\nHelp Mr. Chanek find the prettiness value of a, and output the result modulo 10^9 + 7!\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^5).\n\nOutput\n\nOutput an integer denoting the prettiness value of a modulo 10^9 + 7.\n\nExample\n\nInput\n\n\n5\n3 6 2 1 4\n\n\nOutput\n\n\n77", "tags": ["math", "number theory"], "difficulty": 13, "id": 1575, "sample_io": [{"input": "5\n3 6 2 1 4\n", "output": ["77\n"]}], "test_list": [{"input": "5\n54883 59286 71521 84428 60278\n", "output": ["1027150\n"]}, {"input": "2\n83160 83160\n", "output": ["415800\n"]}, {"input": "5\n54883 59286 14742 84428 60278\n", "output": ["856827\n"]}, {"input": "5\n3 3 2 1 4\n", "output": ["67\n"]}, {"input": "5\n54883 59286 17269 84428 60278\n", "output": ["864394\n"]}, {"input": "5\n54883 68768 17269 84428 60278\n", "output": ["883378\n"]}, {"input": "5\n3 5 1 1 4\n", "output": ["62\n"]}, {"input": "5\n54883 92651 71521 84428 60278\n", "output": ["1093874\n"]}, {"input": "2\n83160 1006\n", "output": ["85176\n"]}, {"input": "5\n3 11 2 1 4\n", "output": ["79\n"]}, {"input": "5\n54883 11471 14742 84428 60278\n", "output": ["761181\n"]}, {"input": "5\n3 2 2 1 4\n", "output": ["65\n"]}, {"input": "5\n54883 59286 18015 84428 60278\n", "output": ["866636\n"]}, {"input": "5\n6 5 2 1 4\n", "output": ["74\n"]}, {"input": "5\n54883 68768 17269 84428 20399\n", "output": ["683979\n"]}, {"input": "2\n83160 674\n", "output": ["84512\n"]}, {"input": "5\n58138 11471 14742 84428 60278\n", "output": ["764442\n"]}, {"input": "5\n3 2 2 2 4\n", "output": ["77\n"]}, {"input": "5\n54883 68768 17269 52463 20399\n", "output": ["556107\n"]}, {"input": "2\n83160 1153\n", "output": ["85468\n"]}, {"input": "5\n58138 11471 14742 91222 60278\n", "output": ["791618\n"]}, {"input": "5\n54883 133 17269 52463 20399\n", "output": ["418837\n"]}, {"input": "2\n83160 973\n", "output": ["85120\n"]}, {"input": "5\n58138 11471 2840 91222 60278\n", "output": ["755912\n"]}, {"input": "5\n99534 133 17269 52463 20399\n", "output": ["463488\n"]}, {"input": "2\n83160 1163\n", "output": ["85488\n"]}, {"input": "5\n99534 147 17269 52463 20399\n", "output": ["463520\n"]}, {"input": "2\n83160 1049\n", "output": ["85260\n"]}, {"input": "5\n99534 147 17269 52463 20125\n", "output": ["462218\n"]}, {"input": "2\n79842 1049\n", "output": ["81942\n"]}, {"input": "5\n99534 147 17269 58616 20125\n", "output": ["486788\n"]}, {"input": "2\n79842 214\n", "output": ["80274\n"]}, {"input": "5\n99534 147 17269 58616 3805\n", "output": ["405164\n"]}, {"input": "5\n99534 151 17269 58616 3805\n", "output": ["405156\n"]}, {"input": "5\n99534 151 27204 58616 3805\n", "output": ["434977\n"]}, {"input": "5\n99534 151 27204 58616 5917\n", "output": ["445537\n"]}, {"input": "5\n99534 151 27204 58616 10100\n", "output": ["466466\n"]}, {"input": "5\n99534 151 27204 37060 10100\n", "output": ["380274\n"]}, {"input": "5\n99534 151 37520 37060 10100\n", "output": ["411278\n"]}, {"input": "5\n99534 151 37520 37866 10100\n", "output": ["414438\n"]}, {"input": "5\n99534 151 37520 37866 10110\n", "output": ["414484\n"]}, {"input": "5\n99534 151 37520 19505 10110\n", "output": ["341034\n"]}, {"input": "5\n99534 63 37520 19505 10110\n", "output": ["340878\n"]}, {"input": "5\n99534 65 37520 19505 10110\n", "output": ["340894\n"]}, {"input": "5\n99534 57 37520 19505 10110\n", "output": ["340854\n"]}, {"input": "5\n99534 57 37520 19505 10100\n", "output": ["340812\n"]}, {"input": "5\n54245 57 37520 19505 10100\n", "output": ["295575\n"]}, {"input": "5\n54245 57 37520 19505 10101\n", "output": ["295542\n"]}, {"input": "5\n47612 57 37520 19505 10101\n", "output": ["288863\n"]}, {"input": "5\n47612 57 37520 19505 10100\n", "output": ["288894\n"]}, {"input": "5\n47612 57 33910 19505 10100\n", "output": ["278040\n"]}, {"input": "5\n47612 57 4731 19505 10100\n", "output": ["190751\n"]}, {"input": "5\n47612 57 3570 19505 10100\n", "output": ["187024\n"]}, {"input": "5\n49368 57 3570 19505 10100\n", "output": ["188984\n"]}, {"input": "5\n49368 57 3564 19505 10100\n", "output": ["189006\n"]}, {"input": "5\n49368 57 1389 19505 10100\n", "output": ["182217\n"]}, {"input": "5\n49368 57 816 19505 10100\n", "output": ["181314\n"]}, {"input": "5\n49368 57 816 9769 10100\n", "output": ["142362\n"]}, {"input": "5\n40531 59286 71521 84428 60278\n", "output": ["1012798\n"]}, {"input": "2\n83160 30588\n", "output": ["144360\n"]}, {"input": "5\n3 6 2 2 4\n", "output": ["89\n"]}, {"input": "5\n3 3 2 1 2\n", "output": ["57\n"]}, {"input": "5\n54883 59286 17269 18865 60278\n", "output": ["602148\n"]}, {"input": "5\n3 5 2 1 8\n", "output": ["87\n"]}, {"input": "5\n54883 68768 12907 84428 60278\n", "output": ["870280\n"]}, {"input": "5\n54883 92651 71521 41670 60278\n", "output": ["922842\n"]}, {"input": "2\n83160 1472\n", "output": ["86120\n"]}, {"input": "5\n3 4 2 1 4\n", "output": ["73\n"]}, {"input": "5\n54883 19021 14742 84428 60278\n", "output": ["776281\n"]}, {"input": "5\n3 1 2 1 4\n", "output": ["59\n"]}, {"input": "5\n54883 59286 18015 84428 41705\n", "output": ["773775\n"]}, {"input": "5\n54883 1289 17269 84428 20399\n", "output": ["548997\n"]}, {"input": "5\n54883 68768 30171 52463 20399\n", "output": ["594801\n"]}, {"input": "2\n62932 1153\n", "output": ["65240\n"]}, {"input": "5\n58138 11471 14742 91222 43001\n", "output": ["705239\n"]}, {"input": "5\n16135 133 17269 52463 20399\n", "output": ["380113\n"]}, {"input": "2\n83160 1103\n", "output": ["85368\n"]}, {"input": "5\n99534 133 21279 52463 20399\n", "output": ["475510\n"]}, {"input": "2\n83160 2042\n", "output": ["87248\n"]}, {"input": "5\n99534 147 17269 22062 20399\n", "output": ["341934\n"]}, {"input": "2\n79842 1488\n", "output": ["82830\n"]}, {"input": "5\n99534 147 17185 58616 3805\n", "output": ["404920\n"]}, {"input": "5\n99534 151 33935 58616 3805\n", "output": ["455162\n"]}, {"input": "5\n99534 151 27204 58616 3362\n", "output": ["432768\n"]}, {"input": "5\n99534 151 27204 85241 5917\n", "output": ["552029\n"]}, {"input": "5\n99534 151 1014 58616 10100\n", "output": ["387888\n"]}, {"input": "5\n99534 151 27204 12835 10100\n", "output": ["283936\n"]}, {"input": "5\n99534 151 37520 38479 10100\n", "output": ["416888\n"]}, {"input": "5\n99534 151 37520 25362 10100\n", "output": ["364422\n"]}, {"input": "5\n79997 151 37520 19505 10110\n", "output": ["321485\n"]}, {"input": "5\n99534 87 37520 19505 10110\n", "output": ["340914\n"]}, {"input": "5\n99534 57 71829 19505 10110\n", "output": ["443765\n"]}, {"input": "5\n99534 57 37520 5150 10100\n", "output": ["283494\n"]}, {"input": "5\n54245 57 2106 19505 10100\n", "output": ["189285\n"]}, {"input": "5\n54245 57 74457 19505 10101\n", "output": ["406333\n"]}, {"input": "5\n7132 57 37520 19505 10101\n", "output": ["248383\n"]}, {"input": "5\n47612 114 37520 19505 10100\n", "output": ["289014\n"]}, {"input": "5\n88338 57 33910 19505 10100\n", "output": ["318766\n"]}, {"input": "5\n80407 57 4731 19505 10100\n", "output": ["223540\n"]}, {"input": "5\n47612 47 3570 19505 10100\n", "output": ["187184\n"]}, {"input": "5\n49368 57 3570 19505 10101\n", "output": ["189005\n"]}, {"input": "5\n49368 57 3564 19505 10000\n", "output": ["188514\n"]}, {"input": "5\n49368 57 1389 29577 10100\n", "output": ["222513\n"]}, {"input": "5\n49368 23 816 19505 10100\n", "output": ["181238\n"]}, {"input": "5\n49368 8 816 9769 10100\n", "output": ["142290\n"]}, {"input": "5\n40531 59286 87177 84428 60278\n", "output": ["1059770\n"]}, {"input": "2\n83160 15866\n", "output": ["114896\n"]}, {"input": "5\n3 6 2 4 4\n", "output": ["101\n"]}, {"input": "5\n3 3 2 1 3\n", "output": ["68\n"]}, {"input": "5\n54883 59286 17269 18865 22967\n", "output": ["415615\n"]}, {"input": "5\n3 7 2 1 4\n", "output": ["71\n"]}, {"input": "5\n54883 68768 12907 84428 59145\n", "output": ["864611\n"]}, {"input": "5\n33608 92651 71521 41670 60278\n", "output": ["901571\n"]}, {"input": "5\n3 4 1 1 4\n", "output": ["66\n"]}, {"input": "5\n54883 19021 14742 84428 2563\n", "output": ["487702\n"]}, {"input": "5\n54883 59286 18015 84428 79925\n", "output": ["964875\n"]}, {"input": "5\n54883 1289 17269 84428 27581\n", "output": ["584907\n"]}, {"input": "5\n54883 68768 30171 52463 11349\n", "output": ["549555\n"]}, {"input": "2\n62932 1299\n", "output": ["65532\n"]}, {"input": "5\n58138 11471 14742 91222 49893\n", "output": ["739691\n"]}, {"input": "5\n16135 223 17269 52463 20399\n", "output": ["380269\n"]}, {"input": "2\n83160 1741\n", "output": ["86644\n"]}, {"input": "2\n6544 2042\n", "output": ["10632\n"]}, {"input": "5\n37726 147 17269 22062 20399\n", "output": ["280114\n"]}, {"input": "2\n57413 1488\n", "output": ["60391\n"]}, {"input": "5\n82514 147 17185 58616 3805\n", "output": ["387896\n"]}, {"input": "5\n99534 151 33935 58616 1780\n", "output": ["445045\n"]}, {"input": "5\n99534 151 27204 85241 4386\n", "output": ["544394\n"]}, {"input": "5\n99534 287 1014 58616 10100\n", "output": ["388160\n"]}, {"input": "5\n43041 151 27204 12835 10100\n", "output": ["227435\n"]}, {"input": "5\n99534 151 37520 74526 10100\n", "output": ["561078\n"]}, {"input": "5\n99534 151 37520 25362 11100\n", "output": ["369438\n"]}, {"input": "5\n79997 151 42796 19505 10110\n", "output": ["337289\n"]}, {"input": "5\n99534 87 37520 19505 10100\n", "output": ["340872\n"]}, {"input": "5\n99534 57 71829 8304 10110\n", "output": ["398985\n"]}, {"input": "5\n99534 30 37520 5150 10100\n", "output": ["283518\n"]}, {"input": "5\n54245 57 2106 20283 10100\n", "output": ["192393\n"]}, {"input": "5\n30546 57 74457 19505 10101\n", "output": ["382614\n"]}, {"input": "5\n7132 2 37520 19505 10101\n", "output": ["248273\n"]}, {"input": "5\n47612 114 37520 19505 10101\n", "output": ["288981\n"]}, {"input": "5\n88338 57 33910 19505 11100\n", "output": ["323778\n"]}, {"input": "5\n80407 57 4731 37120 10100\n", "output": ["293866\n"]}, {"input": "5\n47612 47 3570 14707 10100\n", "output": ["167804\n"]}, {"input": "5\n49368 57 3570 19505 11101\n", "output": ["194021\n"]}, {"input": "5\n49368 57 3564 19505 10010\n", "output": ["188628\n"]}, {"input": "5\n49368 105 1389 29577 10100\n", "output": ["222617\n"]}, {"input": "5\n49368 23 816 7771 10100\n", "output": ["134294\n"]}, {"input": "5\n49368 8 816 9769 10101\n", "output": ["142285\n"]}, {"input": "2\n83160 4632\n", "output": ["92472\n"]}, {"input": "5\n3 6 2 4 8\n", "output": ["121\n"]}, {"input": "5\n46756 59286 17269 18865 22967\n", "output": ["407490\n"]}, {"input": "5\n54883 11112 12907 84428 59145\n", "output": ["749303\n"]}, {"input": "5\n33608 20002 71521 41670 60278\n", "output": ["756281\n"]}, {"input": "5\n54883 19021 2640 84428 2563\n", "output": ["451420\n"]}, {"input": "5\n54883 59286 26328 84428 79925\n", "output": ["989818\n"]}, {"input": "5\n6 3 1 1 5\n", "output": ["70\n"]}, {"input": "5\n54883 1289 2325 84428 27581\n", "output": ["540075\n"]}, {"input": "5\n54883 68768 26666 52463 11349\n", "output": ["539038\n"]}, {"input": "2\n62932 2102\n", "output": ["67140\n"]}, {"input": "5\n58138 11471 14742 91222 87478\n", "output": ["927618\n"]}, {"input": "5\n10896 223 17269 52463 20399\n", "output": ["375018\n"]}, {"input": "2\n83160 2871\n", "output": ["89100\n"]}, {"input": "2\n3822 2042\n", "output": ["7910\n"]}, {"input": "5\n42322 147 17269 22062 20399\n", "output": ["284734\n"]}, {"input": "2\n57413 2443\n", "output": ["62301\n"]}, {"input": "5\n82514 240 17185 58616 3805\n", "output": ["388116\n"]}, {"input": "5\n99534 278 33935 58616 1780\n", "output": ["445307\n"]}, {"input": "5\n99534 151 27204 85241 4150\n", "output": ["543362\n"]}, {"input": "5\n99534 287 1127 58616 10100\n", "output": ["388497\n"]}, {"input": "5\n43041 151 27204 12835 10000\n", "output": ["226935\n"]}, {"input": "5\n99534 151 37520 13048 10100\n", "output": ["315270\n"]}, {"input": "5\n99534 151 37520 16767 11100\n", "output": ["335044\n"]}, {"input": "5\n87375 87 37520 19505 10100\n", "output": ["328773\n"]}, {"input": "5\n30546 25 74457 19505 10101\n", "output": ["382554\n"]}, {"input": "5\n4905 2 37520 19505 10101\n", "output": ["246058\n"]}, {"input": "5\n6731 114 37520 19505 10101\n", "output": ["248092\n"]}, {"input": "5\n80407 57 4731 2545 10100\n", "output": ["155536\n"]}, {"input": "5\n47612 47 3570 1504 10100\n", "output": ["115178\n"]}, {"input": "5\n49368 57 3570 33856 11101\n", "output": ["251433\n"]}, {"input": "5\n49368 57 3564 34542 10010\n", "output": ["249038\n"]}, {"input": "5\n93014 105 1389 29577 10100\n", "output": ["266247\n"]}, {"input": "5\n49368 23 816 7771 10110\n", "output": ["134352\n"]}, {"input": "5\n49368 8 816 8329 10101\n", "output": ["136525\n"]}, {"input": "5\n3 6 4 4 8\n", "output": ["135\n"]}, {"input": "5\n46756 59286 17269 18865 38821\n", "output": ["486736\n"]}, {"input": "5\n54883 11112 12907 84428 36812\n", "output": ["637646\n"]}, {"input": "5\n33608 20002 71521 41670 52727\n", "output": ["718520\n"]}, {"input": "5\n42107 19021 2640 84428 2563\n", "output": ["438644\n"]}, {"input": "5\n11997 59286 26328 84428 79925\n", "output": ["946940\n"]}, {"input": "5\n6 6 1 1 5\n", "output": ["82\n"]}, {"input": "5\n92694 1289 2325 84428 27581\n", "output": ["577892\n"]}, {"input": "5\n54883 20390 26666 52463 11349\n", "output": ["442282\n"]}, {"input": "2\n62932 1165\n", "output": ["65264\n"]}, {"input": "5\n7110 11471 14742 91222 87478\n", "output": ["876622\n"]}, {"input": "5\n10896 223 17269 52463 6753\n", "output": ["306792\n"]}, {"input": "2\n3822 409\n", "output": ["4642\n"]}, {"input": "5\n42322 147 17269 33420 20399\n", "output": ["330166\n"]}, {"input": "2\n57413 3595\n", "output": ["64605\n"]}, {"input": "5\n99534 278 33935 51005 1780\n", "output": ["414867\n"]}, {"input": "5\n99534 93 27204 85241 4150\n", "output": ["543254\n"]}, {"input": "5\n99534 287 1127 67249 10100\n", "output": ["423057\n"]}, {"input": "5\n43041 151 27204 9606 10000\n", "output": ["213427\n"]}], "task_id": "codecontest/6", "prompt": "Mr. Chanek owns an array a consisting of n integers. The prettiness value of a is denoted as:\n\n$$$\u2211_{i=1}^{n} {\u2211_{j=1}^{n} {\\gcd(a_i, a_j) \u22c5 \\gcd(i, j)}}$$$\n\nIn other words, the prettiness value of an array a is the cumulative sum of \\gcd(a_i, a_j) \u22c5 \\gcd(i, j) for all pairs (i, j).\n\nHelp Mr. Chanek determine the prettiness value of a modulo 10^9 + 7 and output the result!\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^5).\n\nOutput\n\nOutput an integer denoting the prettiness value of a modulo 10^9 + 7.\n\nExample\n\nInput\n\n\n5\n3 6 2 1 4\n\n\nOutput\n\n\n77", "repair_prompt": ["Mr. Chanek owns an array a consisting of n integers. The prettiness value of a is denoted as:\n\n$$$\u2211_{i=1}^{n} {\u2211_{j=1}^{n} {\\gcd(a_i, a_j) \u22c5 \\gcd(i, j)}}$$$\n\nIn other words, the prettiness value of an array a is the cumulative sum of \\gcd(a_i, a_j) \u22c5 \\gcd(i, j) for all pairs (i, j).\n\nHelp Mr. Chanek determine the prettiness value of a modulo 10^9 + 7 and output the result!\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^5).\n\nOutput\n\nOutput an integer denoting the prettiness value of a modulo 10^9 + 7.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n3 6 2 1 4\n\n\nOutput\n\n\n77", "Mr. Chanek needs assistance to calculate the prettiness value of array a, which involves finding the sum of \\gcd(a_i, a_j) \u22c5 \\gcd(i, j) for each pair (i, j), and then taking the sum modulo 10^9 + 7 before returning the result.\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^5).\n\nOutput\n\nOutput an integer denoting the prettiness value of a modulo 10^9 + 7.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n3 6 2 1 4\n\n\nOutput\n\n\n77", "Mr. Chanek needs help determining the prettiness value of array a modulo 10^9 + 7, which is the cumulative sum of \\gcd(a_i, a_j) \u22c5 \\gcd(i, j) for all pairs (i, j).\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^5).\n\nOutput\n\nOutput an integer denoting the prettiness value of a modulo 10^9 + 7.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n3 6 2 1 4\n\n\nOutput\n\n\n77"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\nimport math\n\ndef prettiness_value(n: int, a: List[int]) -> int:\n    MOD = 10**9 + 7\n    total_prettiness = 0\n    \n    for i in range(n):\n        for j in range(n):\n            gcd_ai_aj = math.gcd(a[i], a[j])\n            gcd_ij = math.gcd(i+1, j+1)\n            total_prettiness = (total_prettiness + (gcd_ai_aj * gcd_ij) % MOD) % MOD\n    \n    return total_prettiness\n\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport math\n\ndef calculate_prettiness_value(n: int, a: List[int]) -> int:\n    MOD = 10**9 + 7\n    total_prettiness = 0\n    \n    for i in range(n):\n        for j in range(n):\n            gcd_ai_aj = math.gcd(a[i], a[j])\n            gcd_ij = math.gcd(i+1, j+1)\n            total_prettiness = (total_prettiness + gcd_ai_aj * gcd_ij) % MOD\n    \n    return total_prettiness\n\n", "from typing import List\n## main.py\n\nimport math\nimport itertools\n\ndef calculate_prettiness_value(n: int, arr: list) -> int:\n    MOD = 10**9 + 7\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            result += math.gcd(arr[i], arr[j]) * math.gcd(i+1, j+1)\n    return result % MOD\n\n# Input interface\nn = int(input())\narr = list(map(int, input().split()))\nresult = calculate_prettiness_value(n, arr)\n\n# Output interface\nprint(result)\n", "from typing import List\n## main.py\n\nimport math\n\ndef calculate_prettiness(n: int, arr: List[int]) -> int:\n    result: int = 0\n    mod: int = 10**9 + 7\n    for i in range(n):\n        for j in range(i+1, n):\n            result += math.gcd(arr[i], arr[j]) * math.gcd(i+1, j+1)\n    return result % mod\n\n# Input interface\nn = int(input())\narr = list(map(int, input().split()))\n\n# Output interface\nresult = calculate_prettiness(n, arr)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_prettiness(n: int, a: List[int]) -> int:\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    result = 0\n    for i in range(n):\n        for j in range(n):\n            result += gcd(a[i], a[j]) * gcd(i+1, j+1)\n    \n    return result % (10**9 + 7)\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\n\n# Output interface\nresult = calculate_prettiness(n, a)\nprint(result)\n", "from typing import List\n## main.py\n\nimport math\n\ndef calculate_prettiness(n: int, arr: List[int]) -> int:\n    MOD = 10**9 + 7\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += math.gcd(arr[i], arr[j]) * math.gcd(i+1, j+1)\n    return result % MOD\n", "from typing import List\n## main.py\n\nimport math\n\ndef calculate_prettiness_value(n: int, a: list) -> int:\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    prettiness = 0\n    for i in range(n):\n        for j in range(i, n):  # Avoid unnecessary iterations by starting from i\n            prettiness += gcd(a[i], a[j]) * gcd(i+1, j+1)\n\n    return prettiness % (10**9 + 7)\n", "from typing import List\n## main.py\n\nimport math\n\ndef calculate_prettiness(n: int, a: List[int]) -> int:\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            result += math.gcd(a[i], a[j]) * math.gcd(i+1, j+1)\n    return result % (10**9 + 7)\n", "from typing import List\n## main.py\n\nimport math\nimport itertools\n\ndef calculate_prettiness_value(n: int, a: List[int]) -> int:\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = y, x % y\n        return x\n\n    prettiness_value = 0\n    for i, j in itertools.combinations(range(n), 2):\n        prettiness_value += gcd(a[i], a[j]) * gcd(i+1, j+1)\n\n    return prettiness_value % (10**9 + 7)\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport math\n\ndef calculate_prettiness_value(n: int, a: List[int]) -> int:\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = y, x % y\n        return x\n\n    prettiness_value = 0\n    for i in range(n):\n        for j in range(n):\n            prettiness_value += gcd(a[i], a[j]) * gcd(i+1, j+1)\n\n    return prettiness_value % (10**9 + 7)\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nresult = calculate_prettiness_value(n, a)\nprint(result)\n"], "plans": ["requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the math library in Python to calculate the greatest common divisor (gcd) and implement the prettiness value calculation based on the provided formula.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prettiness value'\n    Explanation: The prettiness value of an array is calculated based on the formula provided, which involves finding the greatest common divisor of elements in the array and their indices, then summing up the products of these gcd values.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic involves using the math library in Python to calculate the greatest common divisor (gcd) and then implementing the prettiness value calculation based on the provided formula.\n\n# [edge case] \n    Edge Case 1: n = 2, a = [1, 1]\n    Expected Output: 2\n    Explanation: The prettiness value in this case would be gcd(1, 1) * gcd(1, 1) + gcd(1, 2) * gcd(1, 2) = 1*1 + 1*1 = 2\n\n    Edge Case 2: n = 3, a = [2, 3, 5]\n    Expected Output: 15\n    Explanation: The prettiness value would be gcd(2, 2) * gcd(1, 1) + gcd(2, 3) * gcd(1, 2) + gcd(2, 5) * gcd(1, 3) + gcd(3, 2) * gcd(2, 1) + gcd(3, 3) * gcd(2, 2) + gcd(3, 5) * gcd(2, 3) + gcd(5, 2) * gcd(3, 1) + gcd(5, 3) * gcd(3, 2) + gcd(5, 5) * gcd(3, 3) = 15\n\n    Edge Case 3: n = 4, a = [4, 6, 8, 10]\n    Expected Output: 96\n    Explanation: The prettiness value calculation involves multiple gcd calculations for each pair of elements and their indices.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic should cover all scenarios.\n", "requirement pool:\n- Determine the prettiness value of an array modulo 10^9 + 7\n- Calculate the cumulative sum of gcd(a_i, a_j) * gcd(i, j) for all pairs (i, j)\nWe will use the math library in Python to calculate the greatest common divisor (gcd) and implement the prettiness value calculation based on the provided formula.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prettiness value'\n    Explanation: The prettiness value of an array is calculated based on the formula provided, which involves finding the greatest common divisor of elements in the array and their indices, and then summing up the products of these gcd values.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic involves using the math library in Python to calculate the greatest common divisor (gcd) and then implementing the prettiness value calculation based on the provided formula.\n\n# [edge case] \n    Edge Case 1: n = 2, a = [1, 1]\n    Expected Output: 2\n    Explanation: The gcd of 1 and 1 is 1, and the prettiness value is calculated as gcd(1, 1) * gcd(1, 1) = 1 * 1 = 1. The total prettiness value is 1 + 1 = 2.\n\n    Edge Case 2: n = 3, a = [2, 3, 5]\n    Expected Output: 15\n    Explanation: The gcd values for pairs (i, j) are as follows:\n    gcd(2, 2) * gcd(1, 1) = 2 * 1 = 2\n    gcd(2, 3) * gcd(1, 2) = 1 * 1 = 1\n    gcd(2, 5) * gcd(1, 3) = 1 * 1 = 1\n    gcd(3, 3) * gcd(2, 2) = 3 * 2 = 6\n    gcd(3, 5) * gcd(2, 3) = 1 * 1 = 1\n    gcd(5, 5) * gcd(3, 3) = 5 * 3 = 15\n    The total prettiness value is 2 + 1 + 1 + 6 + 1 + 15 = 26.\n\n    Edge Case 3: n = 4, a = [4, 4, 4, 4]\n    Expected Output: 64\n    Explanation: The gcd values for pairs (i, j) are all equal to the value of a_i which is 4. Therefore, the prettiness value for each pair is calculated as gcd(4, 4) * gcd(i, j) = 4 * i. The total prettiness value is calculated as (4*1 + 4*2 + 4*3 + 4*4) = 64.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic covers the calculation of the prettiness value based on the provided formula.\n", "requirement pool:\n- Efficiently calculate the prettiness value of the array modulo 10^9 + 7\n- Handle large arrays (up to 10^5 elements) with optimized performance\n- Ensure accurate modulo calculation for the prettiness value\nWe will utilize the math and itertools libraries in Python to efficiently calculate the prettiness value of the array modulo 10^9 + 7. The math library will help us with gcd calculations, and itertools will assist in generating pairs of indices for the array elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prettiness value'\n    Explanation: The prettiness value of an array is calculated based on the formula provided, which involves finding the greatest common divisor (gcd) of elements in the array and their indices, and then summing up the product of these gcd values.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using the math and itertools libraries to efficiently calculate the prettiness value. Here is a high-level logic to implement the code:\n    - Import the math and itertools libraries\n    - Read input values for n and the array a\n    - Initialize a variable to store the prettiness value\n    - Iterate through all pairs of indices (i, j) using itertools\n    - Calculate gcd(a[i], a[j]) and gcd(i, j) using math library\n    - Update the prettiness value by adding gcd(a[i], a[j]) * gcd(i, j)\n    - Output the prettiness value modulo 10^9 + 7\n\n# [edge case] \n    n = 2, a = [1, 2]\n    Expected output: 6\n    Explanation: For this edge case, we have n=2 and a=[1, 2]. The pairs are (1,1), (1,2), (2,1), (2,2). Calculating the prettiness value based on the formula gives us 6.\n\n    n = 3, a = [3, 5, 7]\n    Expected output: 42\n    Explanation: For n=3 and a=[3, 5, 7], the pairs are (1,1), (1,2), (1,3), (2,1), (2,2), (2,3), (3,1), (3,2), (3,3). Calculating the prettiness value based on the formula gives us 42.\n\n    n = 4, a = [4, 4, 4, 4]\n    Expected output: 64\n    Explanation: For n=4 and a=[4, 4, 4, 4], all elements are the same. The pairs are (1,1), (1,2), (1,3), (1,4), (2,1), (2,2), (2,3), (2,4), (3,1), (3,2), (3,3), (3,4), (4,1), (4,2), (4,3), (4,4). Calculating the prettiness value based on the formula gives us 64.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic covers all scenarios efficiently.\n", "requirement pool:\n- Efficiently calculate the prettiness value of the array\n- Ensure accurate modulo calculation\n- Optimize performance for large arrays\nWe will use the math library in Python to efficiently calculate the greatest common divisor (gcd) and perform modulo calculations. The goal is to optimize the performance for large arrays by implementing an algorithm that iterates through all pairs of elements in the array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'gcd': Greatest Common Divisor\n    Explanation: The core concept involves finding the greatest common divisor between two numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using the math library to calculate gcd and perform modulo calculations, the detailed logic can be implemented as follows:\n    - Import the math library\n    - Initialize a variable to store the prettiness value\n    - Iterate through all pairs of elements in the array\n    - Calculate gcd(a_i, a_j) and gcd(i, j) for each pair\n    - Multiply the two gcd values and add it to the prettiness value\n    - Take the sum modulo 10^9 + 7\n    - Return the final prettiness value\n\n# [edge case] \n    n = 2, a = [1, 1]\n    Expected output: 1\n    Explanation: There is only one pair (i, j) = (1, 2), gcd(1, 2) = 1, prettiness value = 1*1 = 1\n\n    n = 3, a = [2, 3, 4]\n    Expected output: 8\n    Explanation: Pairs are (1, 2), (1, 3), (2, 3), gcd values are 1, 1, 1 respectively. Prettiness value = (2*1 + 3*1 + 4*1) % (10^9 + 7) = 8\n\n    n = 4, a = [5, 6, 7, 8]\n    Expected output: 40\n    Explanation: Pairs are (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4), gcd values are 1, 1, 1, 1, 2, 1 respectively. Prettiness value = (5*1 + 6*1 + 7*1 + 8*1 + 6*2 + 7*1) % (10^9 + 7) = 40\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic covers all possible pairs and calculates the prettiness value accordingly.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the math library in Python to calculate the greatest common divisor (gcd) and implement the prettiness value calculation as described in the requirements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'gcd': Greatest Common Divisor\n    Explanation: The core concept involves finding the greatest common divisor between two numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using the math library to calculate gcd and implementing the prettiness value calculation, the following steps can be considered simultaneously:\n    1. Import the math library\n    2. Define a function to calculate the prettiness value based on the given formula\n    3. Iterate through all pairs (i, j) and calculate gcd(a_i, a_j) \u22c5 gcd(i, j)\n    4. Sum up all the calculated values\n    5. Take the sum modulo 10^9 + 7\n    6. Return the final prettiness value\n\n# [edge case] \n    n = 2, a = [1, 1]\n    Expected output: 2\n    Explanation: There is only one pair (i, j) = (1, 2), gcd(1, 2) = 1, so the prettiness value is 1 * 1 = 1 % (10^9 + 7) = 1\n\n    n = 3, a = [2, 3, 4]\n    Expected output: 8\n    Explanation: Pairs are (1, 2), (1, 3), (2, 3). Calculations are gcd(2, 3) * gcd(1, 2) = 1 * 1 = 1, gcd(2, 4) * gcd(1, 3) = 2 * 1 = 2, gcd(3, 4) * gcd(2, 3) = 1 * 1 = 1. Sum is 1 + 2 + 1 = 4 % (10^9 + 7) = 4\n\n    n = 4, a = [5, 6, 7, 8]\n    Expected output: 24\n    Explanation: Pairs are (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4). Calculations are gcd(5, 6) * gcd(1, 2) = 1 * 1 = 1, gcd(5, 7) * gcd(1, 3) = 1 * 1 = 1, gcd(5, 8) * gcd(1, 4) = 1 * 1 = 1, gcd(6, 7) * gcd(2, 3) = 1 * 1 = 1, gcd(6, 8) * gcd(2, 4) = 2 * 2 = 4, gcd(7, 8) * gcd(3, 4) = 1 * 1 = 1. Sum is 1 + 1 + 1 + 1 + 4 + 1 = 9 % (10^9 + 7) = 9\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic covers the calculation of prettiness value for all pairs.\n", "requirement pool:\n- Efficiently calculate the prettiness value of the array\n- Ensure accurate modulo calculation\n- Optimize performance for large arrays\nWe will use the math library in Python to efficiently calculate the greatest common divisor (gcd) and perform modulo calculations. We will iterate through all pairs of indices (i, j) to calculate the prettiness value of the array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'gcd': Greatest Common Divisor\n    Explanation: The core concept involves finding the greatest common divisor between two numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using the math library to calculate gcd and perform modulo calculations, the detailed logic can be implemented as follows:\n    \n    1. Import the math library.\n    2. Define a function to calculate the prettiness value of the array.\n    3. Iterate through all pairs of indices (i, j) in the array.\n    4. Calculate gcd(a_i, a_j) and gcd(i, j) for each pair.\n    5. Multiply the two gcd values together.\n    6. Keep a running sum of these products.\n    7. Take the sum modulo 10^9 + 7.\n    8. Return the final prettiness value.\n\n# [edge case] \n    n = 2, a = [1, 1]\n    Expected output: 1\n    Explanation: The only pair is (1, 1), gcd(1, 1) * gcd(1, 1) = 1 * 1 = 1.\n\n    n = 3, a = [2, 3, 4]\n    Expected output: 8\n    Explanation: Pairs are (2, 3), (2, 4), (3, 4). Calculating gcd values and summing them gives (1*1) + (1*2) + (1*1) = 4. Modulo 10^9 + 7 = 8.\n\n    n = 4, a = [5, 6, 7, 8]\n    Expected output: 24\n    Explanation: Pairs are (5, 6), (5, 7), (5, 8), (6, 7), (6, 8), (7, 8). Calculating gcd values and summing them gives (1*1) + (1*1) + (1*1) + (1*1) + (2*2) + (1*1) = 10. Modulo 10^9 + 7 = 24.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic covers all possible pairs and calculates the prettiness value accordingly.\n", "requirement pool:\n- Efficiently calculate the prettiness value\n- Ensure accurate modulo calculation\n- Optimize performance for large input sizes\nWe will use the math and itertools libraries in Python to efficiently calculate the prettiness value of the given array modulo 10^9 + 7.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cumulative sum of gcd(a_i, a_j) * gcd(i, j)'\n    Explanation: The core concept is to calculate the cumulative sum of the product of the greatest common divisor of elements in array a and their indices.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using math and itertools libraries, the code logic may involve:\n    - Calculating the greatest common divisor of elements in array a\n    - Calculating the product of gcd(a_i, a_j) * gcd(i, j) for all pairs (i, j)\n    - Summing up these products to get the prettiness value\n    - Taking the result modulo 10^9 + 7\n\n# [edge case] \n    n = 2, a = [1, 1]\n    Expected output: 2\n    Explanation: The only pair is (1, 1), gcd(1, 1) * gcd(1, 1) = 1 * 1 = 1. Cumulative sum = 1. Modulo 10^9 + 7 = 1.\n\n    n = 3, a = [2, 3, 4]\n    Expected output: 8\n    Explanation: Pairs are (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (4, 4). Calculating gcd and product for each pair and summing up gives 8.\n\n    n = 4, a = [5, 6, 7, 8]\n    Expected output: 32\n    Explanation: Pairs are (5, 5), (5, 6), (5, 7), (5, 8), (6, 6), (6, 7), (6, 8), (7, 7), (7, 8), (8, 8). Calculating gcd and product for each pair and summing up gives 32.\n\n# [extra code for edge case]\n    We may need extra code to handle edge cases related to handling large arrays efficiently or optimizing the gcd calculation for performance. This could involve implementing specific algorithms or optimizations for gcd calculations.\n", "requirement pool:\n- Efficiently calculate the prettiness value\n- Ensure accurate modulo calculation\n- Optimize performance for large input sizes\nWe will use the math and itertools libraries in Python to efficiently calculate the prettiness value of the given array. We will also utilize the modulo operator to ensure accurate modulo calculation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cumulative sum of gcd(a_i, a_j) * gcd(i, j)'\n    Explanation: The core concept is to calculate the cumulative sum of the greatest common divisor of elements in array a and their indices.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using math and itertools libraries, the code logic may involve:\n    - Calculating the greatest common divisor of elements in the array\n    - Calculating the cumulative sum of the product of gcd(a_i, a_j) and gcd(i, j)\n    - Utilizing modulo operator for accurate modulo calculation\n\n# [edge case] \n    Edge cases:\n    - n = 2, a = [1, 1]\n        Expected output: 2\n        Explanation: gcd(1, 1) * gcd(1, 1) + gcd(1, 1) * gcd(2, 2) = 1*1 + 1*1 = 2\n    - n = 3, a = [2, 3, 5]\n        Expected output: 6\n        Explanation: gcd(2, 2) * gcd(1, 1) + gcd(2, 3) * gcd(1, 2) + gcd(2, 5) * gcd(1, 3) + gcd(3, 3) * gcd(2, 2) + gcd(3, 5) * gcd(2, 3) + gcd(5, 5) * gcd(3, 3) = 2*1 + 1*2 + 1*3 + 1*2 + 1*3 + 5*3 = 6\n    - n = 4, a = [10, 15, 20, 25]\n        Expected output: 60\n        Explanation: gcd(10, 10) * gcd(1, 1) + ... + gcd(25, 25) * gcd(4, 4) = 10*1 + ... + 25*4 = 60\n\n# [extra code for edge case]\n    We may need extra code to handle edge cases where n is less than or equal to 2 to ensure correct calculation of the prettiness value. \n        if n <= 2:\n            return sum(a) % (10**9 + 7)\n        (other code for handling edge cases)\n", "requirement pool:\n- Efficiently calculate the prettiness value\n- Ensure accurate modulo calculation\n- Optimize performance for large input sizes\nWe will use the math and itertools libraries in Python to efficiently calculate the prettiness value of the given array modulo 10^9 + 7.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cumulative sum of gcd(a_i, a_j) \u22c5 gcd(i, j) for all pairs (i, j)'\n    Explanation: The core concept is to calculate the sum of the greatest common divisor of elements in array a and their indices, and then multiply these values together for all pairs of (i, j).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using math and itertools libraries, the code logic may involve functions like gcd() from math and combinations() from itertools to efficiently calculate the prettiness value.\n\n# [edge case] \n    n = 2, a = [1, 1]\n    Expected output: 2\n    Explanation: The gcd(1, 1) * gcd(1, 1) + gcd(1, 1) * gcd(2, 2) = 1*1 + 1*1 = 2\n    n = 3, a = [2, 3, 5]\n    Expected output: 6\n    Explanation: The gcd(2, 2) * gcd(1, 1) + gcd(2, 3) * gcd(1, 2) + gcd(2, 5) * gcd(1, 3) + gcd(3, 3) * gcd(2, 2) + gcd(3, 5) * gcd(2, 3) + gcd(5, 5) * gcd(3, 3) = 2*1 + 1*2 + 1*3 + 1*2 + 1*3 + 5*3 = 6\n    n = 4, a = [10, 15, 20, 25]\n    Expected output: 60\n    Explanation: The gcd(10, 10) * gcd(1, 1) + gcd(10, 15) * gcd(1, 2) + gcd(10, 20) * gcd(1, 3) + gcd(10, 25) * gcd(1, 4) + ... = 10*1 + 5*2 + 10*3 + 5*4 + ... = 60\n\n# [extra code for edge case]\n    We may need extra code to handle the edge cases efficiently by optimizing the calculation process.\n        (potential code optimization for handling edge cases)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the math library in Python to calculate the greatest common divisor (gcd) and implement the prettiness value calculation based on the provided formula.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prettiness value'\n    Explanation: The prettiness value of an array is calculated based on the formula provided, which involves finding the greatest common divisor of elements in the array and their indices, and then summing up the products of these gcd values.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using the math library to calculate gcd and implementing the prettiness value calculation based on the formula, the detailed logic can be implemented as follows:\n    \n    - Import the math library\n    - Define a function to calculate gcd of two numbers\n    - Read input values for n and the array a\n    - Initialize a variable to store the prettiness value\n    - Iterate through all pairs (i, j) in the array and calculate gcd(a[i], a[j]) * gcd(i, j)\n    - Sum up these values to get the prettiness value\n    - Output the prettiness value modulo 10^9 + 7\n\n# [edge case] \n    n = 2, a = [1, 2]\n    Expected output: 6\n    Explanation: \n    The prettiness value is calculated as gcd(1, 1) * gcd(1, 1) + gcd(1, 2) * gcd(1, 2) + gcd(2, 1) * gcd(2, 1) + gcd(2, 2) * gcd(2, 2) = 1*1 + 1*1 + 1*1 + 2*2 = 6\n\n    n = 3, a = [2, 3, 4]\n    Expected output: 24\n    Explanation:\n    The prettiness value is calculated as gcd(2, 2) * gcd(1, 1) + gcd(2, 3) * gcd(1, 2) + gcd(2, 4) * gcd(1, 3) + gcd(3, 2) * gcd(2, 1) + gcd(3, 3) * gcd(2, 2) + gcd(3, 4) * gcd(2, 3) + gcd(4, 2) * gcd(3, 1) + gcd(4, 3) * gcd(3, 2) + gcd(4, 4) * gcd(3, 3) = 4*1 + 1*2 + 2*1 + 1*2 + 1*1 + 1*1 + 2*3 + 1*2 + 4*1 = 24\n\n    n = 4, a = [5, 6, 7, 8]\n    Expected output: 120\n    Explanation:\n    The prettiness value is calculated similarly as above for n=3 but with additional pairs for n=4.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic covers all possible pairs and calculates the prettiness value correctly.\n"], "scores": [], "pass_results": [false, false, false, true, false, false, true, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 52, "examples": "\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^5).\n\nOutput\n\nOutput an integer denoting the prettiness value of a modulo 10^9 + 7.\n\nExample\n\nInput\n\n\n5\n3 6 2 1 4\n\n\nOutput\n\n\n77", "mutate_method": "rephrase_one", "parent_index": 52}
