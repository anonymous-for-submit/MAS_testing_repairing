{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has chosen to attempt singing. He has a total of one-minute songs denoted by a, two-minute songs denoted by b, and three-minute songs denoted by c. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider both even and odd values for the number of songs to find the optimal solution.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has chosen to attempt singing. He has a total of one-minute songs denoted by a, two-minute songs denoted by b, and three-minute songs denoted by c. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider both even and odd values for the number of songs to find the optimal solution.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik wants to distribute all songs into two concerts in a way that ensures every song is included in exactly one concert. He aims to minimize the absolute difference of durations between the two concerts by strategically allocating his one-minute, two-minute, and three-minute songs. Please help Luntik find the smallest possible gap in minutes between the durations of the two concerts, considering both even and odd values for the number of songs to achieve the best solution.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik wants to distribute all songs into two concerts such that every song should be included to exactly one concert, making the absolute difference of durations of the concerts as small as possible. Please find the minimal possible difference in minutes between the concerts durations considering both even and odd values for the number of songs to find the optimal solution.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_duration_difference(t: int, songs: List[Tuple[int, int, int]]) -> List[int]:\n    results = []\n    \n    for song in songs:\n        a, b, c = song\n        total_duration = a + b + c\n        min_diff = abs((max(a, b, c) * 2) - total_duration)\n        \n        results.append(min_diff)\n    \n    return results\n\n# Input interface\nsongs = []\nn = int(input())\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    songs.append((a, b, c))\n\nresults = find_minimal_duration_difference(n, songs)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_duration_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs\n        b (int): Number of two-minute songs\n        c (int): Number of three-minute songs\n        \n    Returns:\n        int: Minimal possible difference in minutes between the concerts durations\n    \"\"\"\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    min_diff = abs(half_duration - (a + b + c))\n    return min_diff\n\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_duration_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_duration_difference(t: int, songs: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_total_duration(song: Tuple[int, int, int]) -> int:\n        a, b, c = song\n        return a + 2*b + 3*c\n\n    def find_minimal_difference(songs: List[Tuple[int, int, int]]) -> int:\n        total_duration = sum(calculate_total_duration(song) for song in songs)\n        min_diff = float('inf')\n\n        for i in range(1 << len(songs)):\n            concert1 = []\n            concert2 = []\n            for j in range(len(songs)):\n                if i & (1 << j):\n                    concert1.append(songs[j])\n                else:\n                    concert2.append(songs[j])\n            \n            duration1 = sum(calculate_total_duration(song) for song in concert1)\n            duration2 = total_duration - duration1\n            diff = abs(duration1 - duration2)\n            min_diff = min(min_diff, diff)\n\n        return min_diff\n\n    return [find_minimal_difference(songs) for _ in range(t)]\n\n# Input interface\nt = int(input())\nsongs = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    songs.append((a, b, c))\n\n# Output interface\nresult = find_minimal_duration_difference(t, songs)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_total_duration(one_min: int, two_min: int, three_min: int) -> int:\n        return one_min + 2*two_min + 3*three_min\n\n    def find_all_combinations(one_min: int, two_min: int, three_min: int) -> List[Tuple[int, int]]:\n        combinations = []\n        for i in range(one_min + 1):\n            for j in range(two_min + 1):\n                combinations.append((i, j))\n        return combinations\n\n    def calculate_absolute_difference(combination: Tuple[int, int], one_min: int, two_min: int, three_min: int) -> int:\n        concert1_duration = combination[0] + 2*combination[1] + 3*(one_min - combination[0] - two_min - combination[1])\n        concert2_duration = calculate_total_duration(one_min, two_min, three_min) - concert1_duration\n        return abs(concert1_duration - concert2_duration)\n\n    results = []\n    for one_min, two_min, three_min in test_cases:\n        total_duration = calculate_total_duration(one_min, two_min, three_min)\n        if one_min == two_min == three_min:\n            results.append(0)\n        else:\n            combinations = find_all_combinations(one_min, two_min, three_min)\n            min_diff = float('inf')\n            for combination in combinations:\n                diff = calculate_absolute_difference(combination, one_min, two_min, three_min)\n                min_diff = min(min_diff, diff)\n            results.append(min_diff)\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = find_minimal_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport itertools\n\ndef find_min_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    # t: number of test cases\n    # test_cases: list of tuples containing the number of one-minute, two-minute, and three-minute songs for each test case\n    # Returns a list of minimal possible differences in minutes between the concerts durations for each test case\n    \n    def calculate_duration(songs: Tuple[int, int, int], permutation: Tuple[int, int]) -> int:\n        total_duration = 0\n        for i, num_songs in enumerate(songs):\n            total_duration += num_songs * permutation[i]\n        return total_duration\n    \n    result = []\n    \n    for songs in test_cases:\n        min_diff = float('inf')\n        for perm in itertools.permutations([1, 2, 3]):\n            duration_concert1 = calculate_duration(songs, perm)\n            duration_concert2 = sum(songs) - duration_concert1\n            min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n        result.append(min_diff)\n    \n    return result\n\n# Input\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output\nresult = find_min_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom itertools import permutations\n\ndef calculate_duration(songs: Tuple[int, int, int]) -> int:\n    return songs[0] + 2 * songs[1] + 3 * songs[2]\n\ndef find_min_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    results = []\n    \n    for case in test_cases:\n        a, b, c = case\n        \n        if a == b == c:\n            results.append(0)\n            continue\n        \n        songs = [(1, 0, 0), (0, 1, 0), (0, 0, 1)]\n        min_diff = float('inf')\n        \n        for perm in permutations(songs):\n            concert1 = calculate_duration(perm)\n            concert2 = calculate_duration((1, 1, 1)) - concert1\n            diff = abs(concert1 - concert2)\n            min_diff = min(min_diff, diff)\n        \n        results.append(min_diff)\n    \n    return results\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = find_min_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_minimal_difference(a: int, b: int, c: int) -> int:\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        for i in range(1 << 3):\n            sum_1 = 0\n            sum_2 = 0\n            for j in range(3):\n                if i & (1 << j):\n                    sum_1 += (j + 1)\n                else:\n                    sum_2 += (j + 1)\n            \n            diff = abs(sum_1 * a + sum_2 * b + sum_2 * c - total_duration)\n            min_diff = min(min_diff, diff)\n        \n        return min_diff\n    \n    results = []\n    for a, b, c in test_cases:\n        min_diff = calculate_minimal_difference(a, b, c)\n        results.append(min_diff)\n    \n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresults = find_minimal_difference(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_duration(a: int, b: int, c: int, mask: int) -> int:\n        duration = 0\n        if mask & 1:\n            duration += a\n        if mask & 2:\n            duration += 2 * b\n        if mask & 4:\n            duration += 3 * c\n        return duration\n\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a + 2 * b + 3 * c\n        min_diff = float('inf')\n        for mask in range(1, 8):\n            duration1 = calculate_duration(a, b, c, mask)\n            duration2 = total_duration - duration1\n            diff = abs(duration1 - duration2)\n            min_diff = min(min_diff, diff)\n        results.append(min_diff)\n    \n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = find_minimal_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_minimal_difference(a: int, b: int, c: int) -> int:\n        if a == b == c:\n            return a % 2\n        elif a == b == c == 1:\n            return 1\n        return 0\n\n    results = []\n    for a, b, c in test_cases:\n        minimal_difference = calculate_minimal_difference(a, b, c)\n        results.append(minimal_difference)\n\n    return results\n\n# Input interface\n\nt = int(input())\n\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Call the function and get the results\nresults = find_minimal_difference(t, test_cases)\n\n# Output interface\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_duration_difference(a: int, b: int, c: int) -> int:\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        for i in range(a+1):\n            for j in range(b+1):\n                for k in range(c+1):\n                    concert1_duration = i + 2*j + 3*k\n                    concert2_duration = total_duration - concert1_duration\n                    diff = abs(concert1_duration - concert2_duration)\n                    min_diff = min(min_diff, diff)\n        \n        return min_diff\n    \n    results = []\n    for a, b, c in test_cases:\n        min_diff = calculate_duration_difference(a, b, c)\n        results.append(min_diff)\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresults = find_minimal_duration_difference(t, test_cases)\nfor result in results:\n    print(result)\n"], "plans": ["requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on finding the optimal distribution of songs into two concerts to minimize the absolute difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts'\n    Explanation: The core concept is to distribute the songs into two concerts in a way that minimizes the absolute difference in durations between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means that we need to minimize the absolute difference in durations between the concerts\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Calculate the minimum possible difference by considering all possible combinations of distributing songs into two concerts.\n    3. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 1\n    Explanation: In this case, there is only one song of each duration. The minimal possible difference is 1 minute, as each concert will have one song.\n    \n    Test Case 2:\n    Input: 1\n           2 3 4\n    Output: 1\n    Explanation: In this case, there are multiple ways to distribute the songs, but the optimal solution is to have one concert with all one-minute and two-minute songs, and the other concert with three-minute songs. The minimal possible difference is 1 minute.\n\n    Test Case 3:\n    Input: 1\n           5 5 5\n    Output: 0\n    Explanation: In this case, there are equal numbers of each type of song. The optimal solution is to distribute them equally between the two concerts, resulting in a minimal possible difference of 0 minutes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on finding the optimal distribution of songs into two concerts to minimize the absolute difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'songs distribution'\n    Explanation: The core concept is to distribute one-minute, two-minute, and three-minute songs into two concerts to minimize the absolute difference in durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means that we need to minimize the absolute difference in durations\n\n# [code logic]\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Calculate the minimum possible difference by distributing the songs as evenly as possible:\n        - If total_duration is even, the difference will be 0 as we can evenly distribute the songs.\n        - If total_duration is odd, the difference will be 1 as we need to distribute the extra minute to one of the concerts.\n\n# [edge case] \n    Case 1: Songs evenly distributed\n    Input: a=2, b=3, c=4\n    Expected Output: 0\n    Explanation: Total duration = 2*1 + 3*2 + 4*3 = 20. Both concerts will have a total duration of 10 minutes each.\n    \n    Case 2: Extra minute needed for one concert\n    Input: a=1, b=2, c=3\n    Expected Output: 1\n    Explanation: Total duration = 1*1 + 2*2 + 3*3 = 14. One concert will have a total duration of 7 minutes, and the other will have 8 minutes.\n\n    Case 3: Large numbers with odd total duration\n    Input: a=1000000000, b=500000000, c=300000000\n    Expected Output: 1\n    Explanation: Total duration = 1000000000*1 + 500000000*2 + 300000000*3 = 2600000000. One concert will have a total duration of 1300000000 minutes, and the other will have 1300000001 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers both even and odd total durations for optimal distribution.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and analyze the requirements to design a simple function using basic arithmetic operations to distribute songs into two concerts with minimal possible difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts': Luntik needs to divide the songs into two groups for two concerts.\n    'absolute difference of durations': The goal is to minimize the absolute difference in total duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the need to minimize the difference in durations between the two concerts.\n\n# [code logic]\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Find the minimum difference by trying all possible combinations of distributing songs between two concerts.\n    3. Iterate through all possible combinations of distributing songs and calculate the absolute difference in durations.\n    4. Keep track of the minimum absolute difference found.\n    5. Return the minimum absolute difference as the result.\n\n# [edge case] \n    Case 1: t = 1, a = 1, b = 1, c = 1\n    Expected output: 1\n    Explanation: In this case, Luntik has one song of each duration. The optimal distribution would be to have one song in each concert, resulting in a minimal difference of 0 minutes. However, since Luntik wants to distribute all songs, the minimal possible difference would be 1 minute.\n    \n    Case 2: t = 1, a = 2, b = 3, c = 4\n    Expected output: 0\n    Explanation: In this case, Luntik has songs that can be evenly distributed between two concerts with equal durations, resulting in a minimal difference of 0 minutes.\n    \n    Case 3: t = 1, a = 5, b = 3, c = 2\n    Expected output: 1\n    Explanation: In this case, Luntik has more one-minute songs than two-minute and three-minute songs. The optimal distribution would be to have all one-minute songs in one concert and the rest in the other concert, resulting in a minimal difference of 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios and calculates the minimal possible difference accurately.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on designing a simple static function to solve the problem efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference of durations between the two concerts'\n    Explanation: The core concept is to allocate songs into two concerts in a way that minimizes the absolute difference in duration between them.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': means finding the minimum possible difference in minutes between the concerts durations\n\n# [code logic]\n    1. Calculate the total duration for each type of song (one-minute, two-minute, three-minute).\n    2. Calculate the total duration for all songs.\n    3. Find all possible combinations of distributing songs into two concerts.\n    4. Calculate the absolute difference in duration between the two concerts for each combination.\n    5. Return the minimum absolute difference as the result.\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 0\n    Explanation: In this case, there is only one song of each duration, so both concerts will have the same duration.\n\n    Test Case 2:\n    Input: 1\n           2 2 2\n    Output: 0\n    Explanation: In this case, there are two songs of each duration, so both concerts can have the same total duration.\n\n    Test Case 3:\n    Input: 1\n           3 3 3\n    Output: 0\n    Explanation: In this case, there are three songs of each duration, so both concerts can have the same total duration.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Check if all songs have the same duration, in which case the absolute difference will always be 0.\n        - Handle cases where the total number of songs is odd, as it may affect the distribution strategy.\n        - Consider cases where one type of song dominates the others in quantity, as it may impact the distribution for minimizing the difference.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use the itertools library in Python to generate all possible permutations of distributing the songs into two concerts. Then, I will calculate the total duration of each concert for each permutation and find the one with the smallest absolute difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference of durations between the two concerts'\n    Explanation: The core concept is to allocate songs into two concerts in a way that minimizes the absolute difference in duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': means finding the smallest possible gap in minutes between the durations of the two concerts\n\n# [code logic]\n    The plan provided by the analyst involves using the itertools library to generate all possible permutations of distributing songs into two concerts. Then, calculating the total duration of each concert for each permutation and finding the one with the smallest absolute difference in durations.\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 0\n    Explanation: In this case, there is only one song of each duration, so both concerts will have the same duration, resulting in a minimal possible difference of 0 minutes.\n    \n    Test Case 2:\n    Input: 1\n           2 3 4\n    Output: 1\n    Explanation: One optimal way to distribute the songs is Concert 1: 1-minute, 3-minute; Concert 2: 2-minute, 4-minute. The absolute difference in durations is |(1+3) - (2+4)| = 1 minute.\n    \n    Test Case 3:\n    Input: 1\n           5 5 5\n    Output: 0\n    Explanation: In this case, there are equal numbers of each duration of songs, so both concerts will have the same total duration, resulting in a minimal possible difference of 0 minutes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and the itertools library to generate all possible permutations of distributing the songs into two concerts. Then, I will calculate the total duration of each concert for each permutation and find the one with the smallest absolute difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate songs into two concerts\n    'minimize the absolute difference': means to find the smallest gap in minutes between the durations of the two concerts\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': means to find the minimum possible difference in minutes between the concerts durations\n\n# [code logic]\n    1. Generate all possible permutations of distributing the songs into two concerts using itertools.\n    2. Calculate the total duration of each concert for each permutation.\n    3. Find the permutation with the smallest absolute difference in durations.\n    4. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 0\n    Explanation: There is only one song of each duration, so both concerts will have the same duration.\n\n    Test Case 2:\n    Input: 1\n           2 2 2\n    Output: 0\n    Explanation: Each concert will have one song of each duration, resulting in the same duration for both concerts.\n\n    Test Case 3:\n    Input: 1\n           3 3 3\n    Output: 0\n    Explanation: Each concert will have two one-minute songs and one three-minute song, resulting in the same duration for both concerts.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Check if all songs have the same duration, return 0 immediately.\n        - Handle cases where the total number of songs is odd or even to ensure equal distribution.\n        - Consider both even and odd values for the number of songs to achieve the best solution.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and focus on finding the optimal solution for distributing songs into two concerts with minimal possible difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts with minimal possible difference in durations'\n    Explanation: The core concept is to divide the songs into two concerts in a way that minimizes the absolute difference in duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means finding the smallest possible difference in durations\n\n# [code logic]\n    The logic to implement the code would involve:\n    1. Calculate the total duration of all songs.\n    2. Try all possible combinations of distributing songs between two concerts.\n    3. Calculate the absolute difference in durations for each combination.\n    4. Keep track of the minimum absolute difference found.\n    5. Return the minimum absolute difference as the result.\n\n# [edge case] \n    Test Case 1: t = 1, a = 1, b = 1, c = 1\n    Expected Output: 1\n    Explanation: In this case, there is only one song of each duration, so the minimal possible difference is 1 minute.\n\n    Test Case 2: t = 1, a = 5, b = 3, c = 2\n    Expected Output: 0\n    Explanation: In this case, there are multiple ways to distribute the songs to achieve a difference of 0 minutes between the concerts.\n\n    Test Case 3: t = 1, a = 10^9, b = 10^9, c = 10^9\n    Expected Output: 0\n    Explanation: When all songs have the same duration, the minimal possible difference is always 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers all scenarios and will handle edge cases effectively.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and focus on finding the optimal solution for distributing songs into two concerts with minimal possible difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts with minimal possible difference in durations'\n    Explanation: The core concept is to divide songs into two concerts in a way that minimizes the absolute difference in duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means finding the smallest possible difference in durations\n\n# [code logic]\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Initialize min_diff as infinity\n    3. Iterate through all possible ways of dividing songs into two concerts:\n        - Calculate the duration of concert 1 and concert 2\n        - Calculate the absolute difference in durations\n        - Update min_diff if the new difference is smaller\n    4. Return min_diff as the minimal possible difference in minutes between the concerts durations\n\n# [edge case] \n    Case 1: t = 1, a = 1, b = 1, c = 1\n    Expected output: 1\n    Explanation: In this case, each concert will have one song, so the difference is 0. The smallest possible difference is 1 minute when one concert has one song and the other has two songs.\n    \n    Case 2: t = 1, a = 2, b = 3, c = 4\n    Expected output: 0\n    Explanation: In this case, the total duration is the same for both concerts, so the minimal possible difference is 0.\n\n    Case 3: t = 1, a = 5, b = 3, c = 2\n    Expected output: 1\n    Explanation: The optimal solution is to have one concert with all one-minute songs and the other with all two-minute and three-minute songs, resulting in a difference of 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios and calculates the minimal possible difference correctly.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and focus on finding the optimal solution for distributing songs into two concerts with minimal possible difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts'\n    Explanation: The core concept is to divide the songs into two concerts in a way that minimizes the absolute difference in duration between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means finding the smallest possible difference in durations\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    t = 1, a = 1, b = 1, c = 1\n    Expected output: 1\n    Explanation: In this case, there is only one song of each duration, so the minimal possible difference is 1 minute.\n    \n    t = 2, a = 2, b = 2, c = 2\n    Expected output: 0\n    Explanation: In this case, there are two songs of each duration, so they can be evenly distributed between the two concerts resulting in 0 difference.\n    \n    t = 3, a = 1, b = 2, c = 3\n    Expected output: 0\n    Explanation: In this case, there is one song of each duration, and they can be evenly distributed between the two concerts resulting in 0 difference.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == b == c:\n            return a % 2\n        elif a == b == c == 1:\n            return 1\n        (other code)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on finding the optimal distribution of songs into two concerts to minimize the absolute difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts': Luntik needs to divide the songs into two concerts in such a way that the absolute difference in durations of the concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Luntik wants to minimize the absolute difference in durations between the concerts.\n\n# [code logic]\n    To implement the code logic:\n    1. Calculate the total duration of all songs.\n    2. Find the minimum possible difference by trying all possible combinations of distributing songs between two concerts.\n    3. Iterate through all possible combinations and calculate the absolute difference in durations.\n    4. Keep track of the minimum absolute difference found.\n    5. Return the minimum absolute difference as the output.\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 1\n    Explanation: In this case, Luntik has one song of each duration. The optimal distribution would be to have one song in each concert, resulting in a minimal difference of 0 minutes.\n    \n    Test Case 2:\n    Input: 1\n           2 3 4\n    Output: 1\n    Explanation: Luntik has two one-minute songs, three two-minute songs, and four three-minute songs. The optimal distribution would be to have one one-minute song and three three-minute songs in one concert, and two two-minute songs in the other concert, resulting in a minimal difference of 1 minute.\n\n    Test Case 3:\n    Input: 1\n           5 5 5\n    Output: 0\n    Explanation: Luntik has five songs of each duration. The optimal distribution would be to have five songs of each duration in each concert, resulting in a minimal difference of 0 minutes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n"], "scores": [], "pass_results": [false, false, false, false, false, true, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 54, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "parent_index": 46}
