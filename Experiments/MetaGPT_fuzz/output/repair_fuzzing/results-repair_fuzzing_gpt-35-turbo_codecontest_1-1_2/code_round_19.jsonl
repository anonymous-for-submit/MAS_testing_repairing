{"name": "1607_E. Robot on the Board 1", "description": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "tags": ["implementation"], "difficulty": 11, "id": 1607, "sample_io": [{"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}], "test_list": [{"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n1 1\n3 4\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRUDLLLDU\n", "output": ["1 2\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n2 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n2 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 1\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n1 1\n4 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nLRDRUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 2\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n17 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 1\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 1\n3 1\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUURRDLLLDU\n", "output": ["1 1\n1 2\n2 1\n4 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n3 4\nDUULRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n2 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 2\nUULRRD\n6 2\nUULULDRRDULL\n", "output": ["1 1\n1 2\n3 2\n4 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n13 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n22 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n8 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n1 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n4 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRDRLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n10 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDUUL\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n6 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n11 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n3 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n12 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n2 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUULRRDLDLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n9 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRLLLDUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n5 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nDRRLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n5 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n12 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nUUULLDRRDULL\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 2\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n23 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n13 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n9 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n15 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLRUURDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n11 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUV\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n12 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRDR\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}], "task_id": "codecontest/102", "prompt": "The machine is situated on a checkered rectangular board with dimensions n \u00d7 m, where n represents rows and m represents columns. The rows in the board are assigned numbers from 1 to n starting at the top, and the columns \u2014 from 1 to m beginning at the left side.\n\nThe robot has the ability to transition from its current position to one of the four neighboring cells on the sides.\n\nThe sequence of orders s carried out by the robot is provided. Each order is symbolized by one of the letters 'L', 'R', 'D' or 'U'. These letters initiate the movement to the left, right, downward or upward, respectively.\n\nThe robot's movement can commence in any cell. The robot processes the orders beginning with the initial one, following the sequence they appear in s. If the robot travels past the boundaries of the board, it falls and sustains damage. An order that leads to the robot's damage is not deemed successfully completed.\n\nThe robot's mission is to carry out the maximum number of orders without departing from the board. For instance, on a 3 \u00d7 3 board, if the robot begins a set of operations s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the middle cell, the robot will execute one order before the subsequent command leads it off the boundary. If the robot commences movement from the cell (2, 1) (second row, first column) then every order will be successfully executed. It will conclude at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nAscertain the cell from which the robot should initiate its movement to carry out the maximum number of commands possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "repair_prompt": ["The machine is situated on a checkered rectangular board with dimensions n \u00d7 m, where n represents rows and m represents columns. The rows in the board are assigned numbers from 1 to n starting at the top, and the columns \u2014 from 1 to m beginning at the left side.\n\nThe robot has the ability to transition from its current position to one of the four neighboring cells on the sides.\n\nThe sequence of orders s carried out by the robot is provided. Each order is symbolized by one of the letters 'L', 'R', 'D' or 'U'. These letters initiate the movement to the left, right, downward or upward, respectively.\n\nThe robot's movement can commence in any cell. The robot processes the orders beginning with the initial one, following the sequence they appear in s. If the robot travels past the boundaries of the board, it falls and sustains damage. An order that leads to the robot's damage is not deemed successfully completed.\n\nThe robot's mission is to carry out the maximum number of orders without departing from the board. For instance, on a 3 \u00d7 3 board, if the robot begins a set of operations s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the middle cell, the robot will execute one order before the subsequent command leads it off the boundary. If the robot commences movement from the cell (2, 1) (second row, first column) then every order will be successfully executed. It will conclude at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nAscertain the cell from which the robot should initiate its movement to carry out the maximum number of commands possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "The robot's movement can commence in any cell; however, it must follow the sequence of orders provided without going past the boundaries of the board. Therefore, selecting the correct starting cell is crucial for the robot to successfully execute the maximum number of orders. \n\nThe machine is situated on a checkered rectangular board with dimensions n \u00d7 m, where n represents rows and m represents columns. The rows in the board are assigned numbers from 1 to n starting at the top, and the columns \u2014 from 1 to m beginning at the left side.\n\nThe robot has the ability to transition from its current position to one of the four neighboring cells on the sides.\n\nThe sequence of orders s carried out by the robot is provided. Each order is symbolized by one of the letters 'L', 'R', 'D' or 'U'. These letters initiate the movement to the left, right, downward or upward, respectively.\n\nThe robot's movement can commence in any cell. The robot processes the orders beginning with the initial one, following the sequence they appear in s. If the robot travels past the boundaries of the board, it falls and sustains damage. An order that leads to the robot's damage is not deemed successfully completed.\n\nThe robot's mission is to carry out the maximum number of orders without departing from the board. For instance, on a 3 \u00d7 3 board, if the robot begins a set of operations s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the middle cell, the robot will execute one order before the subsequent command leads it off the boundary. If the robot commences movement from the cell (2, 1) (second row, first column) then every order will be successfully executed. It will conclude at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nAscertain the cell from which the robot should initiate its movement to carry out the maximum number of commands possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "The machine is situated on a checkered rectangular board with dimensions n \u00d7 m, where n represents rows and m represents columns, and the robot has the ability to transition from its current position to one of the four neighboring cells on the sides.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_cell(t: int, test_cases: List[Tuple[Tuple[int, int], str]]) -> List[Tuple[int, int]]:\n    def is_valid_move(n: int, m: int, r: int, c: int, move: str) -> bool:\n        if move == 'L':\n            return c - 1 >= 1\n        elif move == 'R':\n            return c + 1 <= m\n        elif move == 'U':\n            return r - 1 >= 1\n        elif move == 'D':\n            return r + 1 <= n\n\n    def execute_commands(n: int, m: int, commands: str, start_r: int, start_c: int) -> int:\n        r, c = start_r, start_c\n        successful_commands = 0\n        for move in commands:\n            if is_valid_move(n, m, r, c, move):\n                if move == 'L':\n                    c -= 1\n                elif move == 'R':\n                    c += 1\n                elif move == 'U':\n                    r -= 1\n                elif move == 'D':\n                    r += 1\n                successful_commands += 1\n            else:\n                break\n        return successful_commands\n\n    results = []\n    for test_case in test_cases:\n        (n, m), commands = test_case\n        max_successful_commands = 0\n        best_starting_cell = (1, 1)  # Default value\n        for r in range(1, n + 1):\n            for c in range(1, m + 1):\n                successful_commands = execute_commands(n, m, commands, r, c)\n                if successful_commands > max_successful_commands:\n                    max_successful_commands = successful_commands\n                    best_starting_cell = (r, c)\n        results.append(best_starting_cell)\n\n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append(((n, m), s))\n\nresult = find_starting_cell(t, test_cases)\nfor r, c in result:\n    print(r, c)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_cell(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    def is_valid_move(n: int, m: int, r: int, c: int, move: str) -> bool:\n        if move == 'L':\n            return c - 1 >= 1\n        elif move == 'R':\n            return c + 1 <= m\n        elif move == 'U':\n            return r - 1 >= 1\n        elif move == 'D':\n            return r + 1 <= n\n\n    def execute_commands(n: int, m: int, s: str) -> Tuple[int, int]:\n        max_commands = 0\n        best_starting_cell = (1, 1)\n\n        for r in range(1, n + 1):\n            for c in range(1, m + 1):\n                current_r, current_c = r, c\n                commands_executed = 0\n\n                for move in s:\n                    if is_valid_move(n, m, current_r, current_c, move):\n                        if move == 'L':\n                            current_c -= 1\n                        elif move == 'R':\n                            current_c += 1\n                        elif move == 'U':\n                            current_r -= 1\n                        elif move == 'D':\n                            current_r += 1\n                        commands_executed += 1\n                    else:\n                        break\n\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_starting_cell = (r, c)\n\n        return best_starting_cell\n\n    result = []\n    for n, m, s in test_cases:\n        result.append(execute_commands(n, m, s))\n\n    return result\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append((n, m, s))\n\nresult = find_starting_cell(t, test_cases)\nfor r, c in result:\n    print(r, c)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_cell(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    def is_valid_move(n: int, m: int, r: int, c: int) -> bool:\n        return 1 <= r <= n and 1 <= c <= m\n\n    def count_valid_moves(n: int, m: int, r: int, c: int, s: str) -> int:\n        count = 0\n        for move in s:\n            if move == 'L':\n                c -= 1\n            elif move == 'R':\n                c += 1\n            elif move == 'U':\n                r -= 1\n            elif move == 'D':\n                r += 1\n\n            if is_valid_move(n, m, r, c):\n                count += 1\n            else:\n                break\n\n        return count\n\n    results = []\n    for n, m, s in test_cases:\n        max_count = 0\n        best_r, best_c = 1, 1\n\n        for r in range(1, n+1):\n            for c in range(1, m+1):\n                current_count = count_valid_moves(n, m, r, c, s)\n                if current_count > max_count:\n                    max_count = current_count\n                    best_r, best_c = r, c\n\n        results.append((best_r, best_c))\n\n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append((n, m, s))\n\nresult = find_starting_cell(t, test_cases)\nfor r, c in result:\n    print(r, c)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_cell(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    def is_valid_move(n: int, m: int, r: int, c: int, s: str) -> bool:\n        for move in s:\n            if move == 'L' and c > 1:\n                c -= 1\n            elif move == 'R' and c < m:\n                c += 1\n            elif move == 'U' and r > 1:\n                r -= 1\n            elif move == 'D' and r < n:\n                r += 1\n            \n            if r < 1 or r > n or c < 1 or c > m:\n                return False\n        \n        return True\n    \n    result = []\n    \n    for n, m, s in test_cases:\n        max_commands = 0\n        best_cell = (1, 1)\n        \n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                if is_valid_move(n, m, i, j, s) and len(s) > max_commands:\n                    max_commands = len(s)\n                    best_cell = (i, j)\n        \n        result.append(best_cell)\n    \n    return result\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append((n, m, s))\n\nresult = find_starting_cell(t, test_cases)\nfor r, c in result:\n    print(r, c)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_cell(t: int, test_cases: List[Tuple[Tuple[int, int], str]]) -> List[Tuple[int, int]]:\n    def is_valid_move(n: int, m: int, r: int, c: int, s: str) -> bool:\n        if r < 1 or r > n or c < 1 or c > m:\n            return False\n        \n        for move in s:\n            if move == 'L' and c > 1:\n                c -= 1\n            elif move == 'R' and c < m:\n                c += 1\n            elif move == 'U' and r > 1:\n                r -= 1\n            elif move == 'D' and r < n:\n                r += 1\n            \n            if r < 1 or r > n or c < 1 or c > m:\n                return False\n        \n        return True\n    \n    result = []\n    \n    for test_case in test_cases:\n        n, m = test_case[0]\n        s = test_case[1]\n        \n        max_commands = 0\n        best_cell = (1, 1)\n        \n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                if is_valid_move(n, m, i, j, s):\n                    commands = len(s)\n                    if commands > max_commands:\n                        max_commands = commands\n                        best_cell = (i, j)\n        \n        result.append(best_cell)\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_cell(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    def is_valid_move(n: int, m: int, r: int, c: int, s: str) -> bool:\n        for move in s:\n            if move == 'L' and c > 1:\n                c -= 1\n            elif move == 'R' and c < m:\n                c += 1\n            elif move == 'U' and r > 1:\n                r -= 1\n            elif move == 'D' and r < n:\n                r += 1\n            if r < 1 or r > n or c < 1 or c > m:\n                return False\n        return True\n\n    results = []\n    for n, m, s in test_cases:\n        center_r = (n + 1) // 2\n        center_c = (m + 1) // 2\n        for r in [center_r, center_r - 1, center_r + 1]:\n            for c in [center_c, center_c - 1, center_c + 1]:\n                if 1 <= r <= n and 1 <= c <= m and is_valid_move(n, m, r, c, s):\n                    results.append((r, c))\n                    break\n\n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append((n, m, s))\n\nresult = find_starting_cell(t, test_cases)\nfor r, c in result:\n    print(r, c)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_position(t: int, test_cases: List[Tuple[Tuple[int, int], str]]) -> List[Tuple[int, int]]:\n    def get_max_commands_position(n: int, m: int, commands: str) -> Tuple[int, int]:\n        max_commands = 0\n        max_position = (1, 1)\n        x, y = 1, 1\n\n        for command in commands:\n            if command == 'L':\n                y -= 1\n            elif command == 'R':\n                y += 1\n            elif command == 'U':\n                x -= 1\n            elif command == 'D':\n                x += 1\n\n            if 1 <= x <= n and 1 <= y <= m:\n                max_commands += 1\n            else:\n                break\n\n        return (x, y)\n\n    result = []\n    for test_case in test_cases:\n        n, m = test_case[0]\n        commands = test_case[1]\n        max_position = get_max_commands_position(n, m, commands)\n        result.append(max_position)\n\n    return result\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n    test_cases.append(((n, m), commands))\n\nresult = find_starting_position(t, test_cases)\nfor res in result:\n    print(res[0], res[1])\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_position(t: int, test_cases: List[Tuple[Tuple[int, int], str]]) -> List[Tuple[int, int]]:\n    def get_next_position(curr_pos: Tuple[int, int], command: str) -> Tuple[int, int]:\n        directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n        new_row = curr_pos[0] + directions[command][0]\n        new_col = curr_pos[1] + directions[command][1]\n        return new_row, new_col\n\n    def is_valid_position(row: int, col: int, n: int, m: int) -> bool:\n        return 1 <= row <= n and 1 <= col <= m\n\n    def execute_commands(n: int, m: int, commands: str) -> Tuple[int, int]:\n        max_steps = 0\n        starting_position = (1, 1)\n\n        for row in range(1, n + 1):\n            for col in range(1, m + 1):\n                curr_pos = (row, col)\n                steps = 0\n\n                for command in commands:\n                    new_row, new_col = get_next_position(curr_pos, command)\n                    if is_valid_position(new_row, new_col, n, m):\n                        curr_pos = (new_row, new_col)\n                        steps += 1\n                    else:\n                        break\n\n                if steps > max_steps:\n                    max_steps = steps\n                    starting_position = (row, col)\n\n        return starting_position\n\n    result = []\n    for test_case in test_cases:\n        n, m = test_case[0]\n        commands = test_case[1]\n        starting_position = execute_commands(n, m, commands)\n        result.append(starting_position)\n\n    return result\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n    test_cases.append(((n, m), commands))\n\nresult = find_starting_position(t, test_cases)\nfor res in result:\n    print(res[0], res[1])\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_position(t: int, test_cases: List[Tuple[Tuple[int, int], str]]) -> List[Tuple[int, int]]:\n    def get_next_position(curr_pos: Tuple[int, int], move: str) -> Tuple[int, int]:\n        directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n        new_pos = (curr_pos[0] + directions[move][0], curr_pos[1] + directions[move][1])\n        return new_pos\n\n    def is_valid_position(pos: Tuple[int, int], n: int, m: int) -> bool:\n        return 1 <= pos[0] <= n and 1 <= pos[1] <= m\n\n    def find_best_starting_position(n: int, m: int, commands: str) -> Tuple[int, int]:\n        max_steps = 0\n        best_starting_pos = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                curr_pos = (i, j)\n                steps = 0\n\n                for move in commands:\n                    new_pos = get_next_position(curr_pos, move)\n                    if is_valid_position(new_pos, n, m):\n                        steps += 1\n                        curr_pos = new_pos\n                    else:\n                        break\n\n                if steps > max_steps:\n                    max_steps = steps\n                    best_starting_pos = (i, j)\n\n        return best_starting_pos\n\n    result = []\n    for test_case in test_cases:\n        n, m = test_case[0]\n        commands = test_case[1]\n        best_starting_pos = find_best_starting_position(n, m, commands)\n        result.append(best_starting_pos)\n\n    return result\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n    test_cases.append(((n, m), commands))\n\nresult = find_starting_position(t, test_cases)\nfor res in result:\n    print(res[0], res[1])\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_cell(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    def is_valid_move(n: int, m: int, r: int, c: int) -> bool:\n        return 1 <= r <= n and 1 <= c <= m\n\n    def execute_commands(n: int, m: int, r: int, c: int, s: str) -> int:\n        commands_executed = 0\n        visited = set()\n        visited.add((r, c))\n\n        for move in s:\n            if move == 'L':\n                c -= 1\n            elif move == 'R':\n                c += 1\n            elif move == 'U':\n                r -= 1\n            elif move == 'D':\n                r += 1\n\n            if is_valid_move(n, m, r, c) and (r, c) not in visited:\n                commands_executed += 1\n                visited.add((r, c))\n            else:\n                break\n\n        return commands_executed\n\n    result = []\n    for n, m, s in test_cases:\n        max_commands = 0\n        best_starting_cell = (1, 1)\n\n        for r in range(1, n + 1):\n            for c in range(1, m + 1):\n                commands_executed = execute_commands(n, m, r, c, s)\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_starting_cell = (r, c)\n\n        result.append(best_starting_cell)\n\n    return result\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input()\n    test_cases.append((n, m, s))\n\nresult = find_starting_cell(t, test_cases)\nfor r, c in result:\n    print(r, c)\n"], "plans": ["requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will design a simple static Python function using basic data structures and logic to determine the starting cell for the robot to maximize the number of commands it can execute without falling off the board.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board': The board where the robot is situated has rows and columns, and the robot can move within these cells based on the given orders.\n\n    'sequence of orders': The robot receives a sequence of orders represented by letters 'L', 'R', 'D', or 'U' which correspond to left, right, down, and up movements respectively.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic to implement the code involves:\n    - Parsing the input for each test case\n    - Iterating through the sequence of commands for each test case\n    - Updating the robot's position based on the commands\n    - Checking if the new position is within the board boundaries\n    - Keeping track of the maximum number of successful commands executed\n    - Returning the starting cell coordinates that maximize the number of successful commands\n\n# [edge case] \n    Test Case 1:\n    Input: \n    1\n    3 3\n    RRDLUU\n    Output: \n    2 1\n    Explanation: \n    The robot starts from cell (2, 1) and executes all commands successfully, ending at cell (1, 2).\n\n    Test Case 2:\n    Input: \n    1\n    2 2\n    RLDU\n    Output: \n    1 1\n    Explanation: \n    The robot starts from cell (1, 1) and executes all commands successfully, staying within the board boundaries.\n\n    Test Case 3:\n    Input: \n    1\n    4 4\n    RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\n    Output: \n    1 1\n    Explanation: \n    The robot can start from any cell as all commands are 'R', so it will execute all commands successfully.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where the robot can execute all commands successfully.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will design a simple static Python function using basic data structures and logic to determine the starting cell for the robot to maximize the number of commands it can execute without falling off the board.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board': The board where the robot is situated has rows and columns, and the robot can move within these dimensions following the given orders.\n\n    'sequence of orders': The robot receives a sequence of commands represented by letters 'L', 'R', 'D', or 'U' to move left, right, down, or up respectively.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic to implement the code involves:\n    - Parsing the input for each test case\n    - Iterating through the sequence of commands for each test case\n    - Updating the robot's position based on the command\n    - Checking if the new position falls within the board boundaries\n    - Keeping track of the maximum number of successful commands executed\n    - Returning the starting cell coordinates that maximize the number of successful commands\n\n# [edge case] \n    Test Case 1:\n    Input: \n    1\n    3 3\n    RRDLUU\n    Output: \n    2 1\n    Explanation: \n    The robot starts from cell (2, 1) and executes all commands successfully without falling off the board.\n\n    Test Case 2:\n    Input: \n    1\n    2 2\n    RLDU\n    Output: \n    1 1\n    Explanation: \n    The robot starts from cell (1, 1) and executes all commands successfully without falling off the board.\n\n    Test Case 3:\n    Input: \n    1\n    4 4\n    RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\n    Output: \n    1 1\n    Explanation: \n    The robot can start from any cell as all commands are 'R', so it will execute all commands successfully.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where the robot can execute all commands successfully.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will design a simple static Python function using basic data structures and logic to determine the starting cell for the robot to maximize the number of commands it can execute without falling off the board.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board': The board where the robot is situated has rows and columns, and the robot can move within these cells based on the given orders.\n\n    'sequence of orders': The robot receives a sequence of orders represented by letters 'L', 'R', 'D', or 'U' to move left, right, down, or up respectively.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    Test Case 1:\n    Input: \n    1\n    3 3\n    RRDLUU\n    Output:\n    2 1\n    Explanation: \n    The robot should start from cell (2, 1) to maximize the number of commands it can execute without falling off the board.\n\n    Test Case 2:\n    Input:\n    1\n    2 2\n    LR\n    Output:\n    1 1\n    Explanation:\n    The robot can start from any cell as both cells allow it to execute all commands successfully.\n\n    Test Case 3:\n    Input:\n    1\n    4 4\n    RRRR\n    Output:\n    1 1\n    Explanation:\n    The robot should start from cell (1, 1) to execute all commands successfully.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will design a simple static Python function using appropriate open-source libraries to determine the starting cell for the robot to execute the maximum number of commands without going past the boundaries of the board.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement': refers to the movement of the robot on a rectangular board following a sequence of orders without going past the boundaries.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': indicates the highest number of orders that can be successfully executed without going past the boundaries.\n\n# [code logic]\n    The logic to implement the code would involve:\n    - Parsing the input for each test case\n    - Iterating through the sequence of commands while updating the robot's position\n    - Checking if the new position is within the boundaries of the board\n    - Keeping track of the maximum number of successful commands executed\n    - Returning the starting cell that allows for the maximum number of successful commands\n\n# [edge case] \n    Test Case 1:\n    Input: \n    1\n    3 3\n    RRDLUU\n    Output: \n    2 1\n    Explanation: \n    Starting from cell (2, 1), all orders can be successfully executed without going past the boundaries.\n    \n    Test Case 2:\n    Input: \n    1\n    2 2\n    LR\n    Output: \n    1 1\n    Explanation: \n    In this case, both starting cells (1, 1) and (2, 1) would allow for successful execution of all orders.\n\n    Test Case 3:\n    Input: \n    1\n    4 4\n    RRRR\n    Output: \n    1 1\n    Explanation: \n    Regardless of the starting cell, all orders can be successfully executed in this scenario.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios effectively.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will design a simple static Python function using appropriate open-source libraries to determine the starting cell for the robot to execute the maximum number of commands without going past the boundaries of the board.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement': The robot needs to follow a sequence of orders without going past the boundaries of the board to execute the maximum number of commands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': Indicates the robot needs to execute the highest number of commands possible without going past the board boundaries.\n\n# [code logic]\n    The logic to implement the code would involve:\n    - Parsing the input for each test case\n    - Iterating through the sequence of commands\n    - Updating the robot's position based on the command\n    - Checking if the new position is within the board boundaries\n    - Keeping track of the maximum number of successful commands executed\n    - Returning the starting cell that allows for the maximum number of successful commands\n\n# [edge case] \n    Test Case 1:\n    Input: \n    1\n    3 3\n    RRDLUU\n    Output: \n    2 1\n    Explanation: \n    Starting from cell (2, 1), the robot can successfully execute all commands without going past the boundaries.\n    \n    Test Case 2:\n    Input: \n    1\n    2 2\n    RLDU\n    Output: \n    1 1\n    Explanation: \n    Starting from cell (1, 1), the robot can successfully execute all commands without going past the boundaries.\n    \n    Test Case 3:\n    Input: \n    1\n    4 4\n    RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\n    Output: \n    1 1\n    Explanation: \n    In this extreme case, starting from any cell will result in executing all right commands and reaching the rightmost cell.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios effectively.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use a simple approach to determine the starting cell for the robot by analyzing the sequence of commands and the boundaries of the board.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sequence of orders'\n    Explanation: The sequence of commands provided to the robot to move on the board.\n\n    'boundaries of the board'\n    Explanation: The limits of the board where the robot should not go past.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum number'\n    Explanation: Indicates the goal of the robot to execute the maximum number of commands without going past the board boundaries.\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    Test Case 1:\n    Input: \n    1\n    3 3\n    RRDLUU\n    Output: \n    2 1\n    Explanation: Starting from cell (2, 1) allows the robot to execute all commands successfully.\n    \n    Test Case 2:\n    Input: \n    1\n    2 2\n    RLRL\n    Output: \n    1 1\n    Explanation: Starting from cell (1, 1) allows the robot to execute all commands successfully.\n    \n    Test Case 3:\n    Input: \n    1\n    4 4\n    RRRR\n    Output: \n    1 1\n    Explanation: Starting from cell (1, 1) allows the robot to execute all commands successfully.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use basic Python functions and libraries to design a simple static function that satisfies the user's requirements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board': It refers to a board with rows and columns where the robot can move in four directions - left, right, down, and up.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic should involve iterating through the commands in the string and updating the robot's position based on the command. The robot's starting position should be determined based on the maximum number of commands it can execute.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1\n    3 3\n    RRRU\n    Output:\n    3 3\n    Explanation: The robot can start at position (3, 3) and execute all 4 commands.\n    \n    Test Case 2:\n    Input:\n    1\n    2 2\n    LRLR\n    Output:\n    1 1\n    Explanation: The robot can start at position (1, 1) and execute all 4 commands.\n    \n    Test Case 3:\n    Input:\n    1\n    4 4\n    UUUUDDDD\n    Output:\n    1 1\n    Explanation: The robot can start at position (1, 1) and execute all 8 commands.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic should be able to handle finding the starting position based on the maximum number of commands that can be executed.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use basic Python functions and libraries to design a simple static function that satisfies the user's requirements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board': It refers to a board with rows and columns where the robot can move in four directions.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1\n    3 3\n    RRR\n    Output:\n    1 3\n    Explanation: The robot starts at cell (1, 3) and executes all commands to the right.\n    \n    Test Case 2:\n    Input:\n    1\n    2 2\n    UU\n    Output:\n    1 1\n    Explanation: The robot starts at cell (1, 1) and executes all commands upwards.\n    \n    Test Case 3:\n    Input:\n    2\n    2 3\n    LRL\n    3 3\n    UUU\n    Output:\n    1 3\n    3 1\n    Explanation: For the first test case, the robot can start at cell (1, 3) and execute Left, Right, Left commands. For the second test case, the robot can start at cell (3, 1) and execute Up, Up, Up commands.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use basic Python functions and libraries to design a simple static function that satisfies the user's requirements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board': It refers to a board with rows and columns where the robot can move in four directions.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1\n    3 3\n    RRR\n    Output:\n    1 3\n    Explanation: The robot starts at cell (1, 1) and moves right three times to reach cell (1, 3).\n\n    Test Case 2:\n    Input:\n    1\n    2 2\n    LR\n    Output:\n    1 1\n    Explanation: The robot can start at cell (1, 1) or (2, 2) to perform the commands.\n\n    Test Case 3:\n    Input:\n    2\n    4 4\n    UUDD\n    3 3\n    LRLR\n    Output:\n    2 2\n    3 3\n    Explanation: For the first test case, the robot can start at cell (2, 2) or (3, 3) to perform the commands. For the second test case, the robot starts at cell (3, 3) and moves left and right alternately.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will design a simple static Python function using basic data structures and logic to determine the starting cell for the robot to maximize the number of commands it can execute without falling off the board.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board': The board where the robot is situated has rows and columns, and the robot can move within these cells based on the given orders.\n\n    'transition': The robot can move from its current position to one of the four neighboring cells on the sides based on the given orders.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': The robot's mission is to carry out the maximum number of orders without departing from the board.\n\n# [code logic]\n    To implement the code logic:\n    - Parse the input for each test case (n, m, s)\n    - Iterate through all possible starting positions on the board\n    - Simulate the robot's movement based on the given orders\n    - Keep track of the maximum number of successful commands executed\n    - Return the coordinates of the cell from which the robot should start moving to perform as many commands as possible\n\n# [edge case] \n    Test Case 1:\n    Input: \n    1\n    3 3\n    RRDLUU\n    Output: \n    2 1\n    Explanation: \n    The robot starts from cell (2, 1) and executes all commands successfully.\n\n    Test Case 2:\n    Input: \n    1\n    2 2\n    LR\n    Output: \n    1 1\n    Explanation: \n    The robot starts from cell (1, 1) and executes both commands successfully.\n\n    Test Case 3:\n    Input: \n    1\n    4 4\n    RRRR\n    Output: \n    1 1\n    Explanation: \n    The robot starts from cell (1, 1) and executes all commands successfully.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios.\n"], "scores": [], "pass_results": [true, true, true, false, true, false, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 19, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "mutate_method": "expand_one2two", "parent_index": 19}
