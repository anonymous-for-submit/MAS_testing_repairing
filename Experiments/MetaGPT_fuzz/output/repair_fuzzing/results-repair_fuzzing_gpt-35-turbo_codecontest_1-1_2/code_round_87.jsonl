{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has chosen to attempt singing. He has a total of one-minute songs denoted by a, two-minute songs denoted by b, and three-minute songs denoted by c. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He desires to minimize the difference in lengths of the concerts as much as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider both even and odd values for the number of songs to find the optimal solution.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has chosen to attempt singing. He has a total of one-minute songs denoted by a, two-minute songs denoted by b, and three-minute songs denoted by c. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He desires to minimize the difference in lengths of the concerts as much as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider both even and odd values for the number of songs to find the optimal solution.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik desires to minimize the difference in lengths of the concerts by distributing his one-minute, two-minute, and three-minute songs into two concerts. The optimal solution should consider both even and odd values for the number of songs to find the minimal possible difference in minutes between the concerts durations. \nWhat is the minimal possible difference in minutes between the concerts durations after distributing the songs? Luntik needs your help!\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik wants to distribute all songs into two concerts such that every song should be included to exactly one concert, minimizing the difference in lengths of the concerts as much as possible.  He desires to find the minimal possible difference in minutes between the concerts durations. Consider both even and odd values for the number of songs to find the optimal solution.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_concert_duration_difference(t: int, songs: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_total_duration(song: Tuple[int, int, int]) -> int:\n        return sum(song)\n    \n    def find_minimal_difference(songs: List[Tuple[int, int, int]]) -> int:\n        total_duration = sum(map(calculate_total_duration, songs))\n        half_duration = total_duration // 2\n        \n        min_diff = float('inf')\n        for song in songs:\n            for i in range(3):\n                for j in range(3):\n                    if i != j:\n                        concert1_duration = song[i]\n                        concert2_duration = song[j]\n                        diff = abs(concert1_duration - concert2_duration)\n                        min_diff = min(min_diff, abs(half_duration - (concert1_duration + concert2_duration)))\n        \n        return min_diff\n    \n    results = []\n    for song in songs:\n        results.append(find_minimal_difference([song]))\n    \n    return results\n\n# Input interface\n\n# Read the number of test cases\nt = int(input())\n\n# Read the songs for each test case\nsongs = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    songs.append((a, b, c))\n\n# Call the function and get the results\nresults = find_minimal_concert_duration_difference(t, songs)\n\n# Output interface\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_minimal_difference(a: int, b: int, c: int) -> int:\n        total_duration = a + 2*b + 3*c\n        \n        if total_duration % 2 == 0:\n            return 0\n        else:\n            min_diff = min(abs((total_duration - x) - x) for x in range(total_duration//2 + 1))\n            return min_diff\n    \n    results = []\n    for a, b, c in test_cases:\n        min_diff = calculate_minimal_difference(a, b, c)\n        results.append(min_diff)\n    \n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresults = find_minimal_duration_difference(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    results = []\n    \n    for test_case in test_cases:\n        a, b, c = test_case\n        \n        total_duration = a + 2*b + 3*c\n        min_duration = total_duration // 2\n        difference = abs(total_duration - 2*min_duration)\n        \n        results.append(difference)\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = []\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresults = find_minimal_concert_duration_difference(n, test_cases)\n\n# Output interface\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nimport itertools\n\ndef minimal_concert_duration_difference(t: int, test_cases: list) -> list:\n    result = []\n    for case in test_cases:\n        a, b, c = case\n        durations = [1] * a + [2] * b + [3] * c\n        min_diff = float('inf')\n        for combo in itertools.combinations(durations, len(durations) // 2):\n            concert1 = sum(combo)\n            concert2 = sum(durations) - concert1\n            min_diff = min(min_diff, abs(concert1 - concert2))\n        result.append(min_diff)\n    return result\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output interface\nresults = minimal_concert_duration_difference(t, test_cases)\nfor res in results:\n    print(res)\n", "from typing import List\n## main.py\n\nimport itertools\n\ndef minimal_concert_duration_difference(t: int, test_cases: list) -> list:\n    result = []\n    for case in test_cases:\n        a, b, c = case\n        durations = [1] * a + [2] * b + [3] * c\n        min_diff = float('inf')\n        for combo in itertools.combinations(durations, len(durations) // 2):\n            concert1 = sum(combo)\n            concert2 = sum(durations) - concert1\n            min_diff = min(min_diff, abs(concert1 - concert2))\n        result.append(min_diff)\n    return result\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output interface\nresults = minimal_concert_duration_difference(t, test_cases)\nfor res in results:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport itertools\n\ndef calculate_concert_duration_difference(concert1: List[int], concert2: List[int]) -> int:\n    return abs(sum(concert1) - sum(concert2))\n\ndef minimal_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    result = []\n    \n    for test_case in test_cases:\n        a, b, c = test_case\n        \n        songs = [1] * a + [2] * b + [3] * c\n        min_diff = float('inf')\n        total_songs = len(songs)\n        \n        for i in range(1 << total_songs):\n            concert1 = [songs[j] for j in range(total_songs) if i & (1 << j)]\n            concert2 = [songs[j] for j in range(total_songs) if not i & (1 << j)]\n            diff = calculate_concert_duration_difference(concert1, concert2)\n            min_diff = min(min_diff, diff)\n        \n        result.append(min_diff)\n    \n    return result\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = minimal_concert_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_total_duration(a: int, b: int, c: int) -> int:\n        return a + 2*b + 3*c\n\n    def calculate_minimal_difference(total_duration: int) -> int:\n        target_duration = total_duration // 2\n        return abs(target_duration - (target_duration // 3) * 3)\n\n    results = []\n    for a, b, c in test_cases:\n        total_duration = calculate_total_duration(a, b, c)\n        min_diff = calculate_minimal_difference(total_duration)\n        results.append(min_diff)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output interface\nresults = minimal_concert_duration_difference(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    results = []\n    \n    for test_case in test_cases:\n        a, b, c = test_case\n        \n        total_duration = a + 2*b + 3*c\n        max_duration = total_duration // 2\n        min_duration = total_duration // 2 + total_duration % 2\n        min_diff = max_duration - min_duration\n        \n        results.append(abs(min_diff))\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output interface\nresults = minimal_concert_duration_difference(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nimport itertools\n\ndef minimal_concert_duration_difference(t: int, test_cases: list) -> list:\n    result = []\n    for case in test_cases:\n        a, b, c = case\n        songs = [1] * a + [2] * b + [3] * c\n        min_diff = float('inf')\n        for combo in itertools.combinations(songs, len(songs) // 2):\n            concert1 = sum(combo)\n            concert2 = sum(songs) - concert1\n            min_diff = min(min_diff, abs(concert1 - concert2))\n        result.append(min_diff)\n    return result\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output interface\nresults = minimal_concert_duration_difference(t, test_cases)\nfor res in results:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_total_duration(a: int, b: int, c: int) -> int:\n        return a + 2*b + 3*c\n\n    def distribute_songs(a: int, b: int, c: int) -> int:\n        total_duration = calculate_total_duration(a, b, c)\n        min_diff = float('inf')\n\n        for i in range(a+1):\n            for j in range(b+1):\n                k = (total_duration - i - 2*j) // 3\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n\n        return min_diff\n\n    results = []\n    for case in test_cases:\n        a, b, c = case\n        min_diff = distribute_songs(a, b, c)\n        results.append(min_diff)\n\n    return results\n\n# Input interface\nn = int(input())\ntest_cases = []\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresults = find_minimal_concert_duration_difference(n, test_cases)\n\n# Output interface\nfor result in results:\n    print(result)\n"], "plans": ["requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and focus on minimizing the difference in lengths of the concerts by distributing the songs optimally.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts': Luntik needs to divide the songs into two concerts in a way that minimizes the difference in lengths between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimize': Luntik wants to reduce the difference in lengths of the concerts as much as possible.\n\n# [code logic]\n    To implement the code logic:\n    - Calculate the total duration of all songs.\n    - Find the minimum possible difference by trying all possible combinations of distributing songs between two concerts.\n    - Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Edge cases:\n    Case 1: a=1, b=1, c=1\n    Expected output: 0\n    Explanation: In this case, all songs have the same duration, so the minimal possible difference is 0.\n    \n    Case 2: a=10^9, b=10^9, c=10^9\n    Expected output: 0\n    Explanation: When all songs have a very large number of durations, the minimal possible difference is still 0.\n    \n    Case 3: a=1, b=2, c=3\n    Expected output: 0\n    Explanation: Even though the durations are different, the optimal distribution can still result in a minimal difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to find the minimal possible difference covers all scenarios.\n", "requirement pool:\n- Help Luntik find the minimal possible difference in minutes between the concerts durations.\n- Distribute all songs into two concerts such that every song should be included to exactly one concert.\nI will use Python and analyze the requirements to design a simple static function without defining any class. I will use basic arithmetic operations to distribute the songs into two concerts and minimize the difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'songs distribution'\n    Explanation: The core concept is to distribute one-minute, two-minute, and three-minute songs into two concerts to minimize the difference in durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimize': means to reduce the difference in durations as much as possible\n\n# [code logic]\n    To implement the code logic:\n    - Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    - Find the minimum difference by distributing the songs into two concerts:\n        - If total_duration is even, divide it equally between two concerts: min_diff = 0\n        - If total_duration is odd, distribute the songs to minimize the difference:\n            - Calculate the minimum possible difference: min_diff = min(abs((total_duration - x) - x) for x in range(total_duration//2 + 1))\n    - Return the minimal possible difference min_diff\n\n# [edge case] \n    Edge cases:\n    Case 1: t = 1, a = 1, b = 1, c = 1\n    Expected output: 0\n    Explanation: All songs have the same duration, so the minimal difference is 0.\n\n    Case 2: t = 1, a = 2, b = 3, c = 4\n    Expected output: 1\n    Explanation: Distributing songs (2, 3, 4) and (1) results in a minimal difference of 1.\n\n    Case 3: t = 1, a = 5, b = 3, c = 2\n    Expected output: 0\n    Explanation: Distributing songs (5), (3, 2) results in a minimal difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers both even and odd values for the number of songs to find the optimal solution.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and focus on minimizing the difference in lengths of the concerts by distributing the songs optimally.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts': Luntik needs to divide the songs into two concerts in such a way that the difference in the total duration of the concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimize': Luntik wants to reduce the difference in lengths of the concerts as much as possible.\n\n# [code logic]\n    To implement the code logic:\n    1. Calculate the total duration of all songs.\n    2. Determine the minimum and maximum possible durations for each concert.\n    3. Calculate the difference between the maximum and minimum durations.\n    4. Return this difference as the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Edge cases:\n    Case 1: a = 1, b = 1, c = 1\n    Expected output: 1\n    Explanation: In this case, all songs have different durations, so one concert will have a duration of 1 minute and the other will have a duration of 2 minutes, resulting in a difference of 1 minute.\n    \n    Case 2: a = 5, b = 5, c = 5\n    Expected output: 0\n    Explanation: Each type of song has the same number of songs, so both concerts will have equal durations, resulting in a difference of 0 minutes.\n    \n    Case 3: a = 2, b = 3, c = 4\n    Expected output: 1\n    Explanation: The optimal distribution would be to have one concert with all three-minute songs and the other with one-minute and two-minute songs, resulting in a difference of 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers all scenarios and optimally distributes the songs to minimize the difference in concert durations.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and the itertools library to generate all possible combinations of distributing the songs into two concerts. Then, I will calculate the total duration of each concert for each combination and find the minimal possible difference in minutes between the concerts durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different parts or people\n\n    'minimal possible difference': means the smallest difference that can be achieved\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means the smallest or least possible\n\n# [code logic]\n    Since the plan already outlines the steps using itertools library to generate combinations and calculate total duration for each combination, the logic is well-defined.\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 0\n    Explanation: In this case, there is only one song of each duration, so the minimal possible difference in minutes between the concerts durations is 0.\n\n    Test Case 2:\n    Input: 1\n           2 2 2\n    Output: 0\n    Explanation: In this case, there are two songs of each duration, so the total duration for each concert will be the same, resulting in a minimal possible difference of 0.\n\n    Test Case 3:\n    Input: 1\n           3 3 3\n    Output: 0\n    Explanation: Similarly, with three songs of each duration, the total duration for each concert will be equal, leading to a minimal possible difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The plan already covers the logic to find the minimal possible difference in minutes between the concerts durations.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and the itertools library to generate all possible combinations of distributing the songs into two concerts. Then, I will calculate the total duration of each concert for each combination and find the minimal possible difference in minutes between the concerts durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide the songs into two concerts\n    'minimal possible difference': means to find the smallest gap in duration between the two concerts\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': indicates the smallest or least possible difference\n\n# [code logic]\n    To implement the code logic:\n    1. Generate all possible combinations of distributing the songs into two concerts using itertools.\n    2. Calculate the total duration of each concert for each combination.\n    3. Find the minimal possible difference in minutes between the concerts durations.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Edge Case 1: t = 1, a = 1, b = 1, c = 1\n    Expected Output: 0\n    Explanation: In this case, all songs are of different lengths, so distributing them equally between two concerts results in no difference in duration.\n\n    Edge Case 2: t = 2, a = 10^9, b = 10^9, c = 10^9\n    Expected Output: 0\n    Explanation: When all songs are of the same length and there are an odd number of songs, distributing them equally results in no difference in duration.\n\n    Edge Case 3: t = 3, a = 1, b = 2, c = 3\n    Expected Output: 0\n    Explanation: In this case, there is one song of each length, and distributing them equally results in no difference in duration.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Check if all songs have the same length, if so return 0.\n        - Check if there is only one song of each length, if so return 0.\n        - Handle cases where the total number of songs is odd to ensure equal distribution.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and the itertools library to generate all possible combinations of distributing the songs into two concerts. Then, I will calculate the total duration of each concert for each combination and find the minimal possible difference in minutes between the concerts durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide the songs into two concerts\n    'minimal possible difference': means to find the smallest gap in duration between the two concerts\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means to find the smallest possible difference\n\n# [code logic]\n    1. Generate all possible combinations of distributing the songs into two concerts using itertools.\n    2. Calculate the total duration of each concert for each combination.\n    3. Find the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 0\n    Explanation: Since all songs have the same duration, distributing them equally results in 0 difference in concert durations.\n\n    Test Case 2:\n    Input: 1\n           2 3 4\n    Output: 1\n    Explanation: One optimal distribution is [2, 4] and [3], resulting in a difference of 1 minute between the concerts.\n\n    Test Case 3:\n    Input: 1\n           5 5 5\n    Output: 0\n    Explanation: All songs have the same duration, so distributing them equally results in 0 difference in concert durations.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Check if all songs have the same duration, return 0 immediately.\n        - Consider both even and odd values for the number of songs to cover all possibilities.\n        - Handle cases where the total number of songs is odd by distributing them as evenly as possible.\n        - Implement logic to find the minimal possible difference in minutes between the concerts durations.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and focus on minimizing the difference in lengths of the concerts by distributing songs optimally.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimizing the difference in lengths of the concerts'\n    Explanation: Luntik wants to distribute songs into two concerts such that the difference in lengths of the concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means finding the smallest possible difference in lengths of the concerts\n\n# [code logic]\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Calculate the target duration for each concert: target_duration = total_duration // 2\n    3. Calculate the minimum difference by considering all possible combinations of songs for each concert.\n    4. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Case 1: t = 1, a = 1, b = 1, c = 1\n    Expected output: 0\n    Explanation: In this case, each concert can have one song of each duration, resulting in a minimal difference of 0 minutes.\n\n    Case 2: t = 1, a = 2, b = 3, c = 4\n    Expected output: 1\n    Explanation: One optimal solution is to have one concert with two 1-minute songs and one 3-minute song, and the other concert with one 2-minute song and one 4-minute song, resulting in a minimal difference of 1 minute.\n\n    Case 3: t = 1, a = 5, b = 5, c = 5\n    Expected output: 0\n    Explanation: In this case, each concert can have five 1-minute songs, resulting in an equal distribution and a minimal difference of 0 minutes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on designing a simple static function to solve the problem efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimizing the difference in lengths of the concerts as much as possible'\n    Explanation: The core concept is to distribute songs into two concerts in a way that the difference in duration between the two concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means finding the smallest possible difference in durations\n\n# [code logic]\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Calculate the maximum possible duration for one concert: max_duration = total_duration // 2\n    3. Calculate the minimum possible duration for one concert: min_duration = total_duration // 2 + total_duration % 2\n    4. Calculate the minimal possible difference in minutes between the concerts durations: min_diff = max_duration - min_duration\n    5. Return min_diff\n\n# [edge case] \n    t = 1, a = 1, b = 1, c = 1\n    Expected output: 0\n    Explanation: In this case, each concert will have one song of each duration, leading to an equal duration for both concerts.\n\n    t = 1, a = 2, b = 3, c = 4\n    Expected output: 0\n    Explanation: In this case, the total duration is 20 minutes. One concert can have songs of lengths 3, 3, and 3 minutes, while the other can have songs of lengths 4, 4, and 4 minutes, resulting in a minimal difference of 0 minutes.\n\n    t = 1, a = 5, b = 2, c = 1\n    Expected output: 1\n    Explanation: In this case, the total duration is 11 minutes. One concert can have songs of lengths 5 and 3 minutes, while the other can have songs of lengths 2 and 1 minute, resulting in a minimal difference of 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios and calculates the minimal possible difference correctly.\n", "requirement pool:\n- Determine the minimal possible difference in minutes between the concerts durations\n- Handle multiple test cases efficiently\nWe will use the built-in itertools library in Python to efficiently generate all possible combinations of songs for each test case. Then, we will calculate the total duration of each concert for every combination and find the minimal possible difference in minutes between the concerts durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimizing the difference in lengths of the concerts as much as possible'\n    Explanation: Luntik wants to distribute songs into two concerts in a way that the difference in duration between the two concerts is minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means finding the smallest possible difference in durations between the concerts\n\n# [code logic]\n    1. Import the itertools library\n    2. Iterate through all possible combinations of songs for each test case\n    3. Calculate the total duration of each concert for every combination\n    4. Find the minimal possible difference in minutes between the concerts durations\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 0\n    Explanation: With equal numbers of one-minute, two-minute, and three-minute songs, the minimal possible difference is 0.\n\n    Test Case 2:\n    Input: 1\n           2 3 4\n    Output: 1\n    Explanation: One optimal solution is to have one concert with all one-minute and two-minute songs (total duration = 5) and the other concert with all three-minute songs (total duration = 4), resulting in a minimal difference of 1 minute.\n\n    Test Case 3:\n    Input: 1\n           5 5 5\n    Output: 0\n    Explanation: With equal numbers of each type of song, the minimal possible difference is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios efficiently.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and focus on minimizing the difference in lengths of the concerts by distributing the songs optimally.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts': Luntik needs to divide the songs into two concerts in a way that minimizes the difference in lengths between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimize': Luntik wants to reduce the difference in lengths of the concerts as much as possible.\n\n# [code logic]\n    To implement the code logic:\n    1. Calculate the total duration of all songs.\n    2. Find the minimum possible difference between the two concerts by trying all possible combinations of distributing songs.\n    3. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Edge cases:\n    Case 1: a=1, b=1, c=1\n    Expected output: 1\n    Explanation: In this case, all songs have different durations, and the minimal possible difference is 1 minute.\n    \n    Case 2: a=5, b=5, c=5\n    Expected output: 0\n    Explanation: Each type of song has the same number of songs, so the concerts can have equal durations.\n    \n    Case 3: a=2, b=3, c=4\n    Expected output: 1\n    Explanation: The difference can be minimized by distributing the songs optimally.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge cases)\n"], "scores": [], "pass_results": [true, true, false, false, true, false, true, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 87, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "parent_index": 54}
