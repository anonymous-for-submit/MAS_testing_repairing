{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He possesses a songs that last one minute, b songs that last two minutes, and c songs that last three minutes. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He possesses a songs that last one minute, b songs that last two minutes, and c songs that last three minutes. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "He wants to make the absolute difference of durations of the concerts as small as possible, which means he needs to distribute the songs evenly between the two concerts. The duration of the concert is the sum of durations of all songs in that concert, so he needs to balance the durations to minimize the difference.  \n\nLuntik has decided to try singing. He possesses a songs that last one minute, b songs that last two minutes, and c songs that last three minutes. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik has decided to try singing and possesses songs that last one minute, b songs that last two minutes, and c songs that last three minutes, wanting to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_min_difference(a: int, b: int, c: int) -> int:\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        for i in range(a+1):\n            for j in range(b+1):\n                k = (total_duration - i - 2*j) // 3\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n        \n        return min_diff\n    \n    results = []\n    for a, b, c in test_cases:\n        min_diff = calculate_min_difference(a, b, c)\n        results.append(min_diff)\n    \n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = min_concert_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_duration_difference(a: int, b: int, c: int) -> int:\n        total_duration = a + 2*b + 3*c\n        target_duration = total_duration // 2\n        min_diff = float('inf')\n        \n        for i in range(a//2 + 1):\n            for j in range(min(b, (target_duration - 3*i) // 2) + 1):\n                k = (target_duration - 3*i - 2*j)\n                if k >= 0 and k <= c:\n                    concert1_duration = i + 2*j + 3*k\n                    concert2_duration = total_duration - concert1_duration\n                    diff = abs(concert1_duration - concert2_duration)\n                    min_diff = min(min_diff, diff)\n        \n        return min_diff\n    \n    results = []\n    for a, b, c in test_cases:\n        results.append(calculate_duration_difference(a, b, c))\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = []\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Function call\nresults = min_concert_duration_difference(n, test_cases)\n\n# Output interface\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef distribute_songs(t: int, songs: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_total_duration(a: int, b: int, c: int) -> int:\n        return a + 2*b + 3*c\n\n    def calculate_min_abs_diff(total_duration: int, songs: List[Tuple[int, int, int]]) -> int:\n        n = len(songs)\n        min_diff = float('inf')\n\n        for i in range(1 << n):\n            duration_1 = 0\n            duration_2 = 0\n\n            for j in range(n):\n                if i & (1 << j):\n                    duration_1 += calculate_total_duration(*songs[j])\n                else:\n                    duration_2 += calculate_total_duration(*songs[j])\n\n            min_diff = min(min_diff, abs(duration_1 - duration_2))\n\n        return min_diff\n\n    results = []\n    for song_set in songs:\n        total_duration = calculate_total_duration(*song_set)\n        target_duration = total_duration // 2\n        min_diff = calculate_min_abs_diff(total_duration, [song_set])  # Corrected to pass each song set separately\n        results.append(min_diff)\n\n    return results\n\n# Input interface using input()\n\nt = int(input())\nsongs = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    songs.append((a, b, c))\n\n# Output interface using print()\n\nresult = distribute_songs(t, songs)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_min_difference(a: int, b: int, c: int) -> int:\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        min_diff = float('inf')\n        \n        for i in range(a+1):\n            for j in range(b+1):\n                k = (half_duration - i - 2*j) // 3\n                k = min(k, c)\n                duration = i + 2*j + 3*k\n                min_diff = min(min_diff, abs(duration - half_duration))\n        \n        return min_diff\n    \n    result = []\n    for a, b, c in test_cases:\n        result.append(calculate_min_difference(a, b, c))\n    \n    return result\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = min_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a + 2*b + 3*c\n        half_total_duration = total_duration // 2\n        min_diff = abs(total_duration - half_total_duration * 2)\n        results.append(min_diff)\n    \n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresults = min_concert_duration_difference(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_min_diff(a: int, b: int, c: int) -> int:\n        total_duration = a + 2*b + 3*c\n        \n        if total_duration % 2 == 0:\n            return 0\n        else:\n            remainder = total_duration % 2\n            if remainder == 1:\n                if c % 2 == 1:\n                    c -= 1\n                    b += 2\n                else:\n                    c -= 2\n                    b += 1\n                \n            new_total_duration = a + 2*b + 3*c\n            new_min_diff = abs(new_total_duration - (total_duration - remainder))\n            \n            return new_min_diff\n    \n    result = []\n    for a, b, c in test_cases:\n        result.append(calculate_min_diff(a, b, c))\n    \n    return result\n\n# Input interface using input()\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = min_duration_difference(t, test_cases)\n\n# Output interface using print()\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_min_difference(a: int, b: int, c: int) -> int:\n        total_duration = a + 2*b + 3*c\n        target_duration = total_duration // 2\n        \n        if total_duration % 2 == 0:\n            return 0\n        else:\n            if a % 2 == b % 2 == c % 2:\n                return 1\n            else:\n                return 2\n    \n    return [calculate_min_difference(a, b, c) for a, b, c in test_cases]\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = min_concert_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_duration_difference(a: int, b: int, c: int) -> int:\n        total_duration = a + b + c\n        min_diff = float('inf')\n        \n        for i in range(8):\n            duration_concert1 = 0\n            duration_concert2 = 0\n            \n            if i & 1:\n                duration_concert1 += a\n            else:\n                duration_concert2 += a\n                \n            if i & 2:\n                duration_concert1 += b\n            else:\n                duration_concert2 += b\n                \n            if i & 4:\n                duration_concert1 += c\n            else:\n                duration_concert2 += c\n                \n            min_diff = min(min_diff, abs(duration_concert1 - duration_concert2))\n        \n        return min_diff\n    \n    result = []\n    for a, b, c in test_cases:\n        result.append(calculate_duration_difference(a, b, c))\n    \n    return result\n\n# Input interface using input() and output interface using print()\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = min_concert_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_duration_difference(a: int, b: int, c: int) -> int:\n        total_duration = a + 2*b + 3*c\n        target_duration = total_duration // 2\n        min_diff = float('inf')\n        \n        for a, b, c in test_cases:\n            for i in range(1 << 3):\n                concert1 = 0\n                concert2 = 0\n                for j in range(3):\n                    if i & (1 << j):\n                        concert1 += (j + 1) * a\n                    else:\n                        concert2 += (j + 1) * a\n                \n                min_diff = min(min_diff, abs(concert1 - concert2))\n        \n        return min_diff\n    \n    results = []\n    for a, b, c in test_cases:\n        results.append(calculate_duration_difference(a, b, c))\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = []\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresults = find_minimal_duration_difference(n, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\ndef minimal_duration_difference(a: int, b: int, c: int) -> int:\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    if total_duration % 2 == 0:\n        return 0\n    else:\n        return min(total_duration - 2*half_duration, 2*half_duration - total_duration)\n\n# Input interface\nn = int(input())\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    result = minimal_duration_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement pool:\n- Determine the minimal possible difference in minutes between the concerts durations\n- Ensure all songs are distributed into two concerts with minimal difference\nWe will use Python and focus on creating a simple function to determine the minimal possible difference in minutes between the concerts durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different options\n    'absolute difference': means the positive difference between two values\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means to minimize the difference between the durations of the two concerts\n\n# [code logic]\n    The logic to implement the code would involve calculating the total duration of all songs, then trying different combinations of distributing the songs into two concerts to find the minimal possible difference.\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 1\n    Explanation: In this case, there is one song of each duration. The minimal possible difference is when each concert has one song, resulting in a difference of 0 minutes.\n    \n    Test Case 2:\n    Input: 1\n           5 3 2\n    Output: 0\n    Explanation: In this case, there are multiple songs of different durations. By distributing them strategically, we can achieve a minimal possible difference of 0 minutes.\n\n    Test Case 3:\n    Input: 1\n           2 2 2\n    Output: 0\n    Explanation: In this case, there are equal numbers of songs of each duration. By distributing them equally, we can achieve a minimal possible difference of 0 minutes.\n\n# [extra code for edge case]\n    We may need extra code to handle edge cases where the number of songs of each duration is not balanced. By considering different distribution strategies, we can optimize the code to find the minimal possible difference.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on creating a simple function to distribute songs into two concerts with minimal possible difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts': Luntik wants to split the songs into two concerts in a way that minimizes the difference in total duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates that we need to minimize the absolute difference in durations between the two concerts.\n\n# [code logic]\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Calculate the target duration for each concert: target_duration = total_duration // 2\n    3. Initialize the minimum difference as a large number: min_diff = float('inf')\n    4. Iterate through all possible combinations of distributing songs:\n        - For each combination, calculate the difference in durations between the two concerts\n        - Update min_diff if the current difference is smaller\n    5. Return the minimum difference as the result\n\n# [edge case] \n    Test Case 1:\n    Input: a=1, b=1, c=1\n    Expected Output: 0\n    Explanation: In this case, each concert will have one song of each duration, resulting in an equal total duration for both concerts.\n\n    Test Case 2:\n    Input: a=5, b=3, c=2\n    Expected Output: 1\n    Explanation: One optimal way to distribute the songs is to have one concert with all one-minute songs and another concert with all two-minute and three-minute songs, resulting in a minimal difference of 1 minute.\n\n    Test Case 3:\n    Input: a=10^9, b=10^9, c=10^9\n    Expected Output: 0\n    Explanation: In this extreme case, where all song durations are equal, the minimal difference will be 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios and will handle edge cases effectively.\n", "requirement pool:\n- Determine the minimal possible difference in minutes between the concerts durations\n- Distribute songs into two concerts ensuring each song is included in exactly one concert\n- Calculate the sum of durations of all songs in each concert\nWe will use Python and focus on designing a simple static function to distribute songs into two concerts while minimizing the absolute difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts': Luntik wants to split the songs into two concerts in a way that minimizes the absolute difference in durations between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates that we need to minimize the absolute difference in durations between the two concerts.\n\n# [code logic]\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Calculate the target duration for each concert: target_duration = total_duration // 2\n    3. Calculate the minimum absolute difference by considering all possible combinations of songs for each concert.\n    4. Return the minimum absolute difference as the result.\n\n# [edge case] \n    Test Case 1:\n    Input: a=1, b=1, c=1\n    Expected Output: 0\n    Explanation: In this case, each concert can have one song of each duration, resulting in an equal duration for both concerts.\n\n    Test Case 2:\n    Input: a=2, b=3, c=4\n    Expected Output: 1\n    Explanation: One optimal way to distribute the songs is to have one concert with all one-minute songs and one concert with all two-minute and three-minute songs, resulting in a difference of 1 minute in durations.\n\n    Test Case 3:\n    Input: a=5, b=5, c=5\n    Expected Output: 0\n    Explanation: In this case, there are equal numbers of songs of each duration, so the concerts can have equal durations.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Consider sorting the songs by duration to optimize the distribution process.\n        - Handle cases where the total number of songs is odd to ensure an equal split between concerts.\n        - Implement logic to handle scenarios where one type of song dominates the distribution.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and the math library to calculate the minimal possible difference in minutes between the concerts durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference', 'distribute evenly'\n    Explanation: The core concept is to distribute songs into two concerts in a way that minimizes the absolute difference in duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference in duration between the two concerts\n\n# [code logic]\n    The logic to implement the code involves calculating the total duration of all songs, finding all possible combinations of distributing songs between two concerts, and then determining the combination that minimizes the absolute difference in duration between the two concerts.\n\n# [edge case] \n    Test Case 1: t = 1, a = 1, b = 1, c = 1\n    Expected Output: 1\n    Explanation: In this case, there is only one song of each duration, so the minimal possible difference is 1 minute.\n\n    Test Case 2: t = 1, a = 5, b = 3, c = 2\n    Expected Output: 0\n    Explanation: In this case, there are multiple songs of different durations that can be distributed evenly to minimize the absolute difference in duration between the two concerts.\n\n    Test Case 3: t = 1, a = 10^9, b = 10^9, c = 10^9\n    Expected Output: 0\n    Explanation: In this extreme case, where there are a large number of songs of each duration, it is still possible to distribute them evenly to achieve a minimal difference in duration.\n\n# [extra code for edge case]\n    We may need extra code to handle edge cases where the total number of songs is very large and may lead to memory or performance issues. It would be advisable to optimize the algorithm for such cases by considering efficient data structures or algorithms.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and the math library to calculate the minimal possible difference in minutes between the concerts durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference of durations': The difference between the total duration of songs in two concerts should be minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': Indicates the need to minimize the difference between the durations of the two concerts.\n\n# [code logic]\n    To implement the code logic:\n    - Calculate the total duration of all songs in both concerts.\n    - Find all possible combinations of distributing songs between two concerts.\n    - Calculate the difference in duration for each combination.\n    - Return the minimum difference found.\n\n# [edge case] \n    Test Case 1: 1 1 1\n    Expected Output: 0\n    Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The difference will be 0.\n    \n    Test Case 2: 2 1 3\n    Expected Output: 1\n    Explanation: Luntik can include two one-minute songs, a two-minute song, and a three-minute song into the first concert, and two three-minute songs into the second concert. The difference will be |7-6| = 1.\n\n    Test Case 3: 5 5 5\n    Expected Output: 0\n    Explanation: Luntik can distribute all songs evenly between the two concerts, resulting in an equal duration for both concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers all scenarios efficiently.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on creating a simple function to distribute songs evenly between two concerts to minimize the absolute difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference', 'distribute evenly'\n    Explanation: The core concept is to minimize the difference in durations between two concerts by evenly distributing the songs.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference in durations\n\n# [code logic]\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Calculate the minimum possible difference by distributing the songs evenly:\n        - If total_duration is divisible by 2, return 0\n        - Otherwise, calculate the closest even distribution by adjusting the number of three-minute songs:\n            - Calculate the remainder when total_duration is divided by 2: remainder = total_duration % 2\n            - If remainder is 1, adjust the number of three-minute songs to minimize the difference\n                - If c is odd, decrease c by 1 and increase b by 2\n                - If c is even, decrease c by 2 and increase b by 1\n            - Calculate the new total duration after adjustment: new_total_duration = a + 2*b + 3*c\n            - Calculate the new minimum possible difference: new_min_diff = abs(new_total_duration - (total_duration - remainder))\n            - Return new_min_diff\n\n# [edge case] \n    t = 1, a = 1, b = 1, c = 1\n    Expected output: 0\n    Explanation: In this case, all songs have different durations, so distributing them evenly between two concerts results in the same duration for both concerts.\n\n    t = 1, a = 2, b = 3, c = 4\n    Expected output: 0\n    Explanation: In this case, the total duration is already evenly divisible by 2, so the difference in durations between the concerts is minimized.\n\n    t = 1, a = 5, b = 3, c = 2\n    Expected output: 1\n    Explanation: In this case, adjusting the number of three-minute songs can minimize the absolute difference in durations between the concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios to minimize the absolute difference in durations.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on finding the optimal distribution of songs into two concerts to minimize the absolute difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different options\n    'absolute difference': means the positive difference between two values\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means to minimize the difference between two values\n\n# [code logic]\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Calculate the target duration for each concert: target_duration = total_duration // 2\n    3. Calculate the minimum possible difference by considering all possible combinations of distributing songs between two concerts:\n        - If total_duration is even, the minimum difference is 0 (both concerts have equal durations).\n        - If total_duration is odd, the minimum difference can be either 1 or 2.\n            - If a, b, and c are all odd or all even, the minimum difference is 1.\n            - If one of a, b, or c is odd and the others are even, the minimum difference is 2.\n    4. Return the minimum possible difference.\n\n# [edge case] \n    Case 1: t = 1, a = 1, b = 1, c = 1\n    Expected output: 0\n    Explanation: In this case, all songs have different durations, so the optimal distribution results in both concerts having equal durations.\n\n    Case 2: t = 1, a = 2, b = 3, c = 4\n    Expected output: 0\n    Explanation: In this case, the total duration is even, so both concerts can have equal durations resulting in a minimal difference of 0.\n\n    Case 3: t = 1, a = 3, b = 5, c = 7\n    Expected output: 1\n    Explanation: In this case, the total duration is odd and all song durations are odd, so the minimal difference is 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic covers all possible scenarios and calculates the minimal difference accordingly.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on designing a simple static function to solve the problem efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different parts or people\n    'absolute difference': means the positive difference between two values\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means to minimize the difference between the durations of the concerts\n\n# [code logic]\n    To implement the code, we can follow these steps:\n    1. Calculate the total duration of all songs in both concerts.\n    2. Calculate all possible combinations of distributing songs between two concerts.\n    3. Find the combination that minimizes the absolute difference in durations.\n    4. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 1\n    Explanation: In this case, there is only one song of each duration, so the minimal possible difference is 1 minute.\n\n    Test Case 2:\n    Input: 1\n           2 2 2\n    Output: 0\n    Explanation: In this case, there are two songs of each duration, so they can be evenly distributed between two concerts resulting in 0 difference.\n\n    Test Case 3:\n    Input: 1\n           3 3 3\n    Output: 0\n    Explanation: In this case, there are three songs of each duration, so they can be evenly distributed between two concerts resulting in 0 difference.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers all scenarios and efficiently finds the minimal possible difference between concert durations.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on finding the optimal distribution of songs into two concerts to minimize the absolute difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute': means to allocate or divide something among different options\n    'absolute difference': means the positive difference between two values\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means to minimize the difference between two values\n\n# [code logic]\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Calculate the target duration for each concert: target_duration = total_duration // 2\n    3. Calculate the minimum possible difference by considering all possible combinations of songs in each concert:\n        - Iterate through all possible combinations of distributing songs into two concerts\n        - Calculate the duration of each concert for each combination\n        - Update the minimum difference if a new minimum is found\n    4. Return the minimum possible difference\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 0\n    Explanation: In this case, Luntik has one song of each duration. The optimal distribution is to have one song in each concert, resulting in a difference of 0 minutes between the concerts durations.\n\n    Test Case 2:\n    Input: 1\n           2 2 2\n    Output: 0\n    Explanation: In this case, Luntik has two songs of each duration. The optimal distribution is to have two songs of each duration in each concert, resulting in a difference of 0 minutes between the concerts durations.\n\n    Test Case 3:\n    Input: 1\n           3 3 3\n    Output: 0\n    Explanation: In this case, Luntik has three songs of each duration. The optimal distribution is to have three songs of each duration in each concert, resulting in a difference of 0 minutes between the concerts durations.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios and calculates the minimum possible difference correctly.\n", "requirement pool:\n- Help Luntik distribute songs into two concerts with minimal duration difference\n- Calculate the minimal possible difference in minutes between the concerts durations\nWe will use Python and focus on creating a simple function to distribute songs into two concerts with minimal duration difference.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distribute songs into two concerts': Luntik needs to divide the songs into two groups for two concerts in a way that minimizes the difference in total duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Luntik wants to minimize the absolute difference in duration between the two concerts.\n\n# [code logic]\n    To implement the code logic:\n    1. Calculate the total duration of all songs.\n    2. Find all possible combinations of distributing songs into two concerts.\n    3. Calculate the difference in duration for each combination.\n    4. Return the minimal difference found.\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Expected Output: 1\n    Explanation: In this case, all songs have the same duration, so distributing them equally between two concerts results in a minimal difference of 1 minute.\n\n    Test Case 2:\n    Input: 1\n           5 3 2\n    Expected Output: 0\n    Explanation: Here, distributing songs as [5, 3] and [2] results in equal durations for both concerts, minimizing the difference.\n\n    Test Case 3:\n    Input: 1\n           2 4 6\n    Expected Output: 0\n    Explanation: By distributing songs as [2, 4] and [6], we achieve equal durations for both concerts, minimizing the difference.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the scenario of finding the minimal difference in concert durations effectively.\n"], "scores": [], "pass_results": [false, false, false, false, false, false, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 68, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "parent_index": 3}
