{"task_id": "HumanEval/117", "prompt": "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty, the function should return an empty list. Note: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": ["def check(select_words):\n\tassert select_words('eg aqk', 2) == ['aqk']", "def check(select_words):\n\tassert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "def check(select_words):\n\tassert select_words('syk', 6) == []", "def check(select_words):\n\tassert select_words('gw', 9) == []", "def check(select_words):\n\tassert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "def check(select_words):\n\tassert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "def check(select_words):\n\tassert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "def check(select_words):\n\tassert select_words('zGMhBC', 6) == ['zGMhBC']", "def check(select_words):\n\tassert select_words('kfohjsjunakqmmsx', 1) == []", "def check(select_words):\n\tassert select_words('KbpFfWgXZoVjXV', 1) == []", "def check(select_words):\n\tassert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "def check(select_words):\n\tassert select_words('kg', 1) == []", "def check(select_words):\n\tassert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "def check(select_words):\n\tassert select_words('xrbpxpncgqufqkq', 6) == []", "def check(select_words):\n\tassert select_words('sqgikswgssxsbwkl', 7) == []", "def check(select_words):\n\tassert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "def check(select_words):\n\tassert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "def check(select_words):\n\tassert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "def check(select_words):\n\tassert select_words('bnXA AjPVh', 5) == []", "def check(select_words):\n\tassert select_words('omnivbqgmavyqdgqssas', 6) == []", "def check(select_words):\n\tassert select_words('fmjizkhknnihqioic', 4) == []", "def check(select_words):\n\tassert select_words('lINKPOlFIImtg', 3) == []", "def check(select_words):\n\tassert select_words('nPxmyTd', 7) == ['nPxmyTd']", "def check(select_words):\n\tassert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "def check(select_words):\n\tassert select_words('mehochzpausf', 2) == []", "def check(select_words):\n\tassert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "def check(select_words):\n\tassert select_words('EGiDfM', 1) == []", "def check(select_words):\n\tassert select_words('mc', 7) == []", "def check(select_words):\n\tassert select_words('wzx', 5) == []", "def check(select_words):\n\tassert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "def check(select_words):\n\tassert select_words('xwkxcjffocow', 5) == []", "def check(select_words):\n\tassert select_words('dl', 5) == []", "def check(select_words):\n\tassert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "def check(select_words):\n\tassert select_words('ABIStgq', 5) == ['ABIStgq']", "def check(select_words):\n\tassert select_words('nb', 2) == ['nb']", "def check(select_words):\n\tassert select_words('ny', 2) == ['ny']", "def check(select_words):\n\tassert select_words('HWCLBC', 6) == ['HWCLBC']", "def check(select_words):\n\tassert select_words('uuh', 6) == []", "def check(select_words):\n\tassert select_words('uoubngttn', 3) == []", "def check(select_words):\n\tassert select_words('g', 5) == []", "def check(select_words):\n\tassert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "def check(select_words):\n\tassert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "def check(select_words):\n\tassert select_words('aztxoxesjkzqebhrfzw', 3) == []", "def check(select_words):\n\tassert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "def check(select_words):\n\tassert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "def check(select_words):\n\tassert select_words('tJzO PnCT', 3) == ['tJzO']", "def check(select_words):\n\tassert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "def check(select_words):\n\tassert select_words('qhwubvrfmwy', 2) == []", "def check(select_words):\n\tassert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "def check(select_words):\n\tassert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "def check(select_words):\n\tassert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "def check(select_words):\n\tassert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "def check(select_words):\n\tassert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "def check(select_words):\n\tassert select_words('r s rhhipmt', 6) == ['rhhipmt']", "def check(select_words):\n\tassert select_words('aDqyhePv', 6) == ['aDqyhePv']", "def check(select_words):\n\tassert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "def check(select_words):\n\tassert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "def check(select_words):\n\tassert select_words('aru', 5) == []", "def check(select_words):\n\tassert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "def check(select_words):\n\tassert select_words('SNeiILCez', 4) == []", "def check(select_words):\n\tassert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "def check(select_words):\n\tassert select_words('ySmjGAg', 6) == ['ySmjGAg']", "def check(select_words):\n\tassert select_words('bRJRZC', 3) == []", "def check(select_words):\n\tassert select_words('u', 1) == []", "def check(select_words):\n\tassert select_words('djucfuuizrjfvuzzo', 4) == []", "def check(select_words):\n\tassert select_words('dvYLMt', 6) == ['dvYLMt']", "def check(select_words):\n\tassert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "def check(select_words):\n\tassert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "def check(select_words):\n\tassert select_words('yp', 6) == []", "def check(select_words):\n\tassert select_words('v', 4) == []", "def check(select_words):\n\tassert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "def check(select_words):\n\tassert select_words('afrrguc', 5) == ['afrrguc']", "def check(select_words):\n\tassert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "def check(select_words):\n\tassert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "def check(select_words):\n\tassert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "def check(select_words):\n\tassert select_words('nh vu lcakrb', 1) == ['vu']", "def check(select_words):\n\tassert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "def check(select_words):\n\tassert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(select_words):\n\tassert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "def check(select_words):\n\tassert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "def check(select_words):\n\tassert select_words('MjRnAErHPguQC', 1) == []", "def check(select_words):\n\tassert select_words('tmchxmttrgfdanq', 3) == []", "def check(select_words):\n\tassert select_words('jezkeorvxnruwhhwzxm', 7) == []", "def check(select_words):\n\tassert select_words('caurfxlpkygqxoknil', 4) == []", "def check(select_words):\n\tassert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "def check(select_words):\n\tassert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "def check(select_words):\n\tassert select_words('NSjIbZV', 2) == []", "def check(select_words):\n\tassert select_words('rPKhzIot', 6) == ['rPKhzIot']", "def check(select_words):\n\tassert select_words('ASDVzOVVDEdj J', 1) == ['J']", "def check(select_words):\n\tassert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "def check(select_words):\n\tassert select_words(' siweqafqot', 5) == []", "def check(select_words):\n\tassert select_words('xdQgsAHI', 5) == []", "def check(select_words):\n\tassert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "def check(select_words):\n\tassert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "def check(select_words):\n\tassert select_words('hguHoJGaaNwX', 3) == []", "def check(select_words):\n\tassert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "def check(select_words):\n\tassert select_words('choounwx', 5) == ['choounwx']", "def check(select_words):\n\tassert select_words('yue', 2) == []", "def check(select_words):\n\tassert select_words('DDdrgPy', 4) == []", "def check(select_words):\n\tassert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "def check(select_words):\n\tassert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "def check(select_words):\n\tassert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "def check(select_words):\n\tassert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "def check(select_words):\n\tassert select_words('Reg MuZcF', 4) == ['MuZcF']", "def check(select_words):\n\tassert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "def check(select_words):\n\tassert select_words('sl', 6) == []", "def check(select_words):\n\tassert select_words('IFKqNq ', 5) == ['IFKqNq']", "def check(select_words):\n\tassert select_words('lfspeijyudniowk', 1) == []", "def check(select_words):\n\tassert select_words('kogmgdnk', 7) == ['kogmgdnk']", "def check(select_words):\n\tassert select_words('nnchatjackywoavfwfps', 5) == []", "def check(select_words):\n\tassert select_words('d', 2) == []", "def check(select_words):\n\tassert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "def check(select_words):\n\tassert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "def check(select_words):\n\tassert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "def check(select_words):\n\tassert select_words('jopfxbbvlslmluypcdt', 3) == []", "def check(select_words):\n\tassert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "def check(select_words):\n\tassert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "def check(select_words):\n\tassert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "def check(select_words):\n\tassert select_words('etdrxwybqi', 1) == []", "def check(select_words):\n\tassert select_words('aVCSziOkLCLGizHcmC', 2) == []", "def check(select_words):\n\tassert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "def check(select_words):\n\tassert select_words('txXxge', 4) == []", "def check(select_words):\n\tassert select_words('kcpieuVjAOaxdpB', 4) == []", "def check(select_words):\n\tassert select_words('oh', 8) == []", "def check(select_words):\n\tassert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "def check(select_words):\n\tassert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "def check(select_words):\n\tassert select_words('eywh qxreeexrrhyovpwl', 7) == []", "def check(select_words):\n\tassert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "def check(select_words):\n\tassert select_words('asfwxvbzdfsrymc', 3) == []", "def check(select_words):\n\tassert select_words('nBmjWxiPV', 3) == []", "def check(select_words):\n\tassert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "test_case_list": ["assert select_words('eg aqk', 2) == ['aqk']", "assert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "assert select_words('syk', 6) == []", "assert select_words('gw', 9) == []", "assert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "assert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "assert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "assert select_words('zGMhBC', 6) == ['zGMhBC']", "assert select_words('kfohjsjunakqmmsx', 1) == []", "assert select_words('KbpFfWgXZoVjXV', 1) == []", "assert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "assert select_words('kg', 1) == []", "assert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "assert select_words('xrbpxpncgqufqkq', 6) == []", "assert select_words('sqgikswgssxsbwkl', 7) == []", "assert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "assert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "assert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "assert select_words('bnXA AjPVh', 5) == []", "assert select_words('omnivbqgmavyqdgqssas', 6) == []", "assert select_words('fmjizkhknnihqioic', 4) == []", "assert select_words('lINKPOlFIImtg', 3) == []", "assert select_words('nPxmyTd', 7) == ['nPxmyTd']", "assert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "assert select_words('mehochzpausf', 2) == []", "assert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "assert select_words('EGiDfM', 1) == []", "assert select_words('mc', 7) == []", "assert select_words('wzx', 5) == []", "assert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "assert select_words('xwkxcjffocow', 5) == []", "assert select_words('dl', 5) == []", "assert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "assert select_words('ABIStgq', 5) == ['ABIStgq']", "assert select_words('nb', 2) == ['nb']", "assert select_words('ny', 2) == ['ny']", "assert select_words('HWCLBC', 6) == ['HWCLBC']", "assert select_words('uuh', 6) == []", "assert select_words('uoubngttn', 3) == []", "assert select_words('g', 5) == []", "assert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "assert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "assert select_words('aztxoxesjkzqebhrfzw', 3) == []", "assert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "assert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "assert select_words('tJzO PnCT', 3) == ['tJzO']", "assert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "assert select_words('qhwubvrfmwy', 2) == []", "assert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "assert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "assert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "assert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "assert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "assert select_words('r s rhhipmt', 6) == ['rhhipmt']", "assert select_words('aDqyhePv', 6) == ['aDqyhePv']", "assert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "assert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "assert select_words('aru', 5) == []", "assert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "assert select_words('SNeiILCez', 4) == []", "assert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "assert select_words('ySmjGAg', 6) == ['ySmjGAg']", "assert select_words('bRJRZC', 3) == []", "assert select_words('u', 1) == []", "assert select_words('djucfuuizrjfvuzzo', 4) == []", "assert select_words('dvYLMt', 6) == ['dvYLMt']", "assert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "assert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "assert select_words('yp', 6) == []", "assert select_words('v', 4) == []", "assert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "assert select_words('afrrguc', 5) == ['afrrguc']", "assert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "assert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "assert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "assert select_words('nh vu lcakrb', 1) == ['vu']", "assert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "assert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "assert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "assert select_words('MjRnAErHPguQC', 1) == []", "assert select_words('tmchxmttrgfdanq', 3) == []", "assert select_words('jezkeorvxnruwhhwzxm', 7) == []", "assert select_words('caurfxlpkygqxoknil', 4) == []", "assert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "assert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "assert select_words('NSjIbZV', 2) == []", "assert select_words('rPKhzIot', 6) == ['rPKhzIot']", "assert select_words('ASDVzOVVDEdj J', 1) == ['J']", "assert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "assert select_words(' siweqafqot', 5) == []", "assert select_words('xdQgsAHI', 5) == []", "assert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "assert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "assert select_words('hguHoJGaaNwX', 3) == []", "assert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "assert select_words('choounwx', 5) == ['choounwx']", "assert select_words('yue', 2) == []", "assert select_words('DDdrgPy', 4) == []", "assert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "assert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "assert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "assert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "assert select_words('Reg MuZcF', 4) == ['MuZcF']", "assert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "assert select_words('sl', 6) == []", "assert select_words('IFKqNq ', 5) == ['IFKqNq']", "assert select_words('lfspeijyudniowk', 1) == []", "assert select_words('kogmgdnk', 7) == ['kogmgdnk']", "assert select_words('nnchatjackywoavfwfps', 5) == []", "assert select_words('d', 2) == []", "assert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "assert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "assert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "assert select_words('jopfxbbvlslmluypcdt', 3) == []", "assert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "assert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "assert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "assert select_words('etdrxwybqi', 1) == []", "assert select_words('aVCSziOkLCLGizHcmC', 2) == []", "assert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "assert select_words('txXxge', 4) == []", "assert select_words('kcpieuVjAOaxdpB', 4) == []", "assert select_words('oh', 8) == []", "assert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "assert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "assert select_words('eywh qxreeexrrhyovpwl', 7) == []", "assert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "assert select_words('asfwxvbzdfsrymc', 3) == []", "assert select_words('nBmjWxiPV', 3) == []", "assert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "nl": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    ", "func": "def select_words(s, n):", "examples": "Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    ", "repair_prompt": ["def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty, the function should return an empty list. Note: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants. These words should be returned in the order they appear in the string s. If the string s is empty, the function should return an empty list. Note: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants in order these words appear in the string s. If the string s is empty, the function should return an empty list. Note: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Given a string s and a natural number n, returns a list of all words from string s that contain exactly n consonants.\n    \n    Parameters:\n    s (str): The input string containing words separated by spaces.\n    n (int): The number of consonants to filter words by.\n    \n    Returns:\n    list: A list of words with exactly n consonants.\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store words with exactly n consonants\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        \n        # If the count matches n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words with exactly n consonants\n    return result\n\n# Example usage:\n# print(select_words(\"xyz abc def\", 3))  # Output: [\"xyz\"]\n# print(select_words(\"a e i o u\", 0))    # Output: [\"a\", \"e\", \"i\", \"o\", \"u\"]\n# print(select_words(\"\", 3))             # Output: []\n", "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Given a string s and a natural number n, returns a list of all words from string s that contain exactly n consonants.\n\n    Parameters:\n    s (str): The input string containing words separated by spaces.\n    n (int): The number of consonants to filter words by.\n\n    Returns:\n    list: A list of words with exactly n consonants.\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store words with exactly n consonants\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        \n        # If the count equals n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the result list\n    return result\n\n# Example usage:\n# print(select_words(\"This is a test string\", 2))  # Example call to test the function\n", "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Given a string s and a natural number n, returns a list of all words from string s that contain exactly n consonants.\n    \n    Args:\n        s (str): Input string containing words separated by spaces.\n        n (int): Number of consonants to filter words by.\n    \n    Returns:\n        list: List of words with exactly n consonants.\n    \"\"\"\n    # Define a set of vowels for easy checking\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store words that meet the criteria\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        \n        # If the count of consonants equals n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words that have exactly n consonants\n    return result\n\n# Example usage:\n# print(select_words(\"a e i o u\", 0))  # Output: [\"a\", \"e\", \"i\", \"o\", \"u\"]\n# print(select_words(\"b c d f g\", 1))  # Output: [\"b\", \"c\", \"d\", \"f\", \"g\"]\n# print(select_words(\"\", 3))           # Output: []\n", "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Select words from the input string that contain exactly n consonants.\n\n    Parameters:\n    s (str): The input string containing words separated by spaces.\n    n (int): The exact number of consonants a word must have to be included in the result.\n\n    Returns:\n    list: A list of words from the input string that contain exactly n consonants, in the order they appear.\n    \"\"\"\n    # Define vowels for easy checking\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store words with exactly n consonants\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        \n        # If the count equals n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the result list\n    return result\n\n# Example usage:\n# print(select_words(\"hello world\", 3))  # Output: ['world']\n# print(select_words(\"a e i o u\", 0))    # Output: ['a', 'e', 'i', 'o', 'u']\n# print(select_words(\"b c d f g\", 1))    # Output: ['b', 'c', 'd', 'f', 'g']\n", "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Given a string s and a natural number n, returns a list of all words from string s that contain exactly n consonants.\n\n    Parameters:\n    s (str): The input string containing words separated by spaces.\n    n (int): The number of consonants to filter words by.\n\n    Returns:\n    list: A list of words with exactly n consonants, in the order they appear in the input string.\n    \"\"\"\n    # Define a set of vowels for easy checking\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize a list to store words with exactly n consonants\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Initialize a counter for consonants\n        consonant_count = 0\n        \n        # Iterate through each character in the word\n        for char in word:\n            # Check if the character is a letter and not a vowel\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        \n        # If the consonant count matches n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the result list\n    return result\n\n# Example usage:\n# print(select_words(\"This is a test string\", 2))  # Output: ['This', 'test']\n# print(select_words(\"b c d f g\", 1))  # Output: ['b', 'c', 'd', 'f', 'g']\n# print(select_words(\"a e i o u\", 0))  # Output: ['a', 'e', 'i', 'o', 'u']\n# print(select_words(\"\", 3))  # Output: []\n", "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Given a string s and a natural number n, returns a list of words from string s that contain exactly n consonants.\n\n    Parameters:\n    s (str): The input string containing words separated by spaces.\n    n (int): The number of consonants to filter words by.\n\n    Returns:\n    list: A list of words with exactly n consonants.\n    \"\"\"\n    # Define vowels for easy checking\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize a list to store words with exactly n consonants\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Initialize a counter for consonants\n        consonant_count = 0\n        \n        # Iterate through each character in the word\n        for char in word:\n            # Check if the character is a consonant\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        \n        # If the consonant count matches n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words with exactly n consonants\n    return result\n\n# Example usage:\n# print(select_words(\"This is a test string\", 2))  # Output: ['This', 'string']\n# print(select_words(\"b c d f g\", 1))  # Output: ['b', 'c', 'd', 'f', 'g']\n# print(select_words(\"a e i o u\", 0))  # Output: ['a', 'e', 'i', 'o', 'u']\n# print(select_words(\"\", 3))  # Output: []\n", "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Select words from the input string that contain exactly n consonants.\n\n    Args:\n        s (str): A string containing only letters and spaces.\n        n (int): An integer representing the number of consonants.\n\n    Returns:\n        list: A list of words from the string s that contain exactly n consonants.\n    \"\"\"\n    # Define vowels for easy checking\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize a list to store words with exactly n consonants\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Initialize consonant counter\n        consonant_count = 0\n        \n        # Iterate through each character in the word\n        for char in word:\n            # Check if the character is a consonant\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        \n        # If the word has exactly n consonants, add it to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words with exactly n consonants\n    return result\n\n# Example usage:\n# print(select_words(\"b c d f g\", 1))  # Output: [\"b\", \"c\", \"d\", \"f\", \"g\"]\n# print(select_words(\"a e i o u\", 1))  # Output: []\n# print(select_words(\"\", 3))           # Output: []\n", "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Select words from the input string that contain exactly n consonants.\n\n    Args:\n        s: A string containing words separated by spaces.\n        n: An integer representing the exact number of consonants a word must have to be selected.\n\n    Returns:\n        A list of words from the input string that contain exactly n consonants.\n    \"\"\"\n    # Define vowels for easy checking\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize a list to store words that meet the criteria\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Initialize a counter for consonants\n        consonant_count = 0\n        \n        # Iterate through each character in the word\n        for char in word:\n            # Check if the character is a consonant (not a vowel and is an alphabet letter)\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        \n        # If the counter equals n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the result list\n    return result\n\n# Example usage:\n# print(select_words('Mary had a little lamb', 4))  # Output: ['little']\n# print(select_words('Hello world', 4))             # Output: ['world']\n# print(select_words('', 3))                        # Output: []\n", "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Given a string s and a natural number n, returns a list of words from string s that contain exactly n consonants.\n    \n    Parameters:\n    s (str): The input string containing words separated by spaces.\n    n (int): The number of consonants to filter words by.\n    \n    Returns:\n    list: A list of words with exactly n consonants.\n    \"\"\"\n    # Define vowels for easy checking\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Initialize consonant counter\n        consonant_count = 0\n        \n        # Iterate over each character in the word\n        for char in word:\n            # Check if the character is a consonant\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        \n        # Check if the consonant count matches the required number\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words with exactly n consonants\n    return result\n\n# Example usage:\n# print(select_words(\"b c d f g\", 1))  # Output: [\"b\", \"c\", \"d\", \"f\", \"g\"]\n# print(select_words(\"a e i o u\", 0))  # Output: [\"a\", \"e\", \"i\", \"o\", \"u\"]\n# print(select_words(\"\", 3))           # Output: []\n", "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Given a string s and a natural number n, returns a list of all words from string s that contain exactly n consonants.\n    \n    Args:\n        s (str): Input string containing words separated by spaces.\n        n (int): Number of consonants to filter words by.\n    \n    Returns:\n        list: List of words with exactly n consonants.\n    \"\"\"\n    # Define vowels for easy checking\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store words with exactly n consonants\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        \n        # If the count equals n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words with exactly n consonants\n    return result\n\n# Example usage:\n# print(select_words(\"a e i o u\", 0))  # Output: [\"a\", \"e\", \"i\", \"o\", \"u\"]\n# print(select_words(\"bbbb cccc dddd\", 4))  # Output: [\"bbbb\", \"cccc\", \"dddd\"]\n# print(select_words(\"\", 3))  # Output: []\n"], "plans": ["requirement analysis:\nThe function should efficiently parse the input string, count consonants in each word, and return words with the exact number of consonants specified. It should handle edge cases like empty strings and ensure performance is optimized for large inputs.\nrequirement pool:\n- Implement the main function to select words based on consonant count.\n- Optimize the function for performance with large strings.\n- Ensure the function handles edge cases like empty strings.\n- Provide comprehensive documentation and examples.\n- Include unit tests to verify functionality.\nWe will implement a function that iterates over each word in the input string, counts the consonants, and returns a list of words with the exact number of consonants specified. We will use Python's built-in string manipulation capabilities to efficiently handle the input and optimize performance for large strings. The function will handle edge cases like empty strings gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (A, E, I, O, U). In this requirement, we need to count the number of consonants in each word.\n\n    'natural number'\n    Explanation: A natural number is a positive integer (1, 2, 3, ...). In this requirement, it specifies the exact number of consonants a word must have to be included in the result.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': means that we need to find words with a precise count of consonants equal to n.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Split the input string into individual words.\n    2. Initialize an empty list to store words with exactly n consonants.\n    3. Iterate over each word in the list:\n        - Count the number of consonants in the word.\n        - If the count matches n, add the word to the result list.\n    4. Return the list of words with exactly n consonants.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check for consonants. The expected output is an empty list.\n\n    select_words(\"a e i o u\", 0) = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    Explanation: Each word in the string is a vowel and contains zero consonants. Since n is 0, all these words should be included in the result.\n\n    select_words(\"xyz abc def\", 3) = [\"xyz\"]\n    Explanation: The word \"xyz\" contains exactly three consonants, while \"abc\" and \"def\" contain fewer. Therefore, only \"xyz\" should be included in the result.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for empty strings and words with zero consonants.\n", "requirement analysis:\nThe function should efficiently parse the input string, identify words, and count consonants. It must handle edge cases like empty strings and ensure performance is maintained with larger inputs. The function should be easy to understand and maintain.\nrequirement pool:\n- Implement the main function to select words based on consonant count.\n- Optimize the function for performance with large strings.\n- Ensure the function handles edge cases like empty strings.\n- Provide comprehensive documentation and examples.\n- Include unit tests to verify functionality.\nWe will implement a function that iterates over each word in the input string, counts the consonants in each word, and returns a list of words that have exactly the specified number of consonants. We will use Python's built-in string manipulation capabilities to achieve this efficiently. The function will handle edge cases such as empty strings by returning an empty list. We will ensure the function is optimized for performance by minimizing unnecessary operations and using efficient data structures.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'natural number n'\n    Explanation: A natural number is a positive integer (1, 2, 3, ...). In this context, it specifies the exact number of consonants a word must have to be included in the result.\n\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (i.e., not 'a', 'e', 'i', 'o', 'u'). The task is to count these in each word.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': This means that a word must have a precise number of consonants equal to n to be included in the result list.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Split the input string `s` into words.\n2. Initialize an empty list to store words with exactly `n` consonants.\n3. For each word in the list:\n   - Count the number of consonants.\n   - If the count equals `n`, add the word to the result list.\n4. Return the result list.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check, resulting in an empty list.\n\n    select_words(\"a e i o u\", 0) = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    Explanation: Each word (vowel) has 0 consonants, which matches the requirement of having exactly 0 consonants.\n\n    select_words(\"b c d f g\", 1) = [\"b\", \"c\", \"d\", \"f\", \"g\"]\n    Explanation: Each word (consonant) has exactly 1 consonant, which matches the requirement.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking the number of consonants in each word and returning an empty list if no words match the criteria.\n", "requirement analysis:\nThe function should efficiently parse the input string, identify words, and count consonants. It should handle edge cases like empty strings and ensure the output list maintains the order of words as they appear in the input.\nrequirement pool:\n- Implement the main function to select words based on consonant count.\n- Optimize the function for performance with large strings.\n- Ensure the function handles edge cases like empty strings.\n- Provide comprehensive documentation and examples.\n- Include unit tests to verify functionality.\nWe will implement a function that iterates over each word in the input string, counts the consonants in each word, and returns a list of words that have exactly the specified number of consonants. We will use Python's built-in string manipulation capabilities to achieve this efficiently. The function will handle edge cases such as empty strings by returning an empty list. We assume the input string contains only letters and spaces, so no special handling for punctuation or special characters is needed.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (a, e, i, o, u). In this requirement, we need to count the number of consonants in each word.\n\n    'natural number'\n    Explanation: A natural number is a positive integer (1, 2, 3, ...). In this context, it refers to the number of consonants we are looking for in each word.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': means that we need to find words with a precise count of consonants equal to n.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Split the input string `s` into individual words.\n2. Initialize an empty list to store words that meet the criteria.\n3. For each word in the list:\n   - Count the number of consonants by iterating through each character and checking if it is a consonant.\n   - If the count of consonants equals `n`, add the word to the result list.\n4. Return the list of words that have exactly `n` consonants.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check. The expected output is an empty list.\n\n    select_words(\"a e i o u\", 0) = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    Explanation: Each word (which is a single vowel) has 0 consonants, matching the requirement of exactly 0 consonants.\n\n    select_words(\"b c d f g\", 1) = [\"b\", \"c\", \"d\", \"f\", \"g\"]\n    Explanation: Each word (which is a single consonant) has exactly 1 consonant, matching the requirement.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for empty strings and words with varying numbers of consonants.\n", "requirement analysis:\nThe function should efficiently parse the input string, count consonants in each word, and return words with exactly n consonants. It should handle edge cases like empty strings and ensure the order of words is preserved.\nrequirement pool:\n- Implement the main function to count consonants in words\n- Optimize for performance with large input strings\n- Ensure code readability and maintainability\n- Handle edge cases such as empty strings\n- Preserve the order of words in the output\nWe will implement a function that splits the input string into words, counts the consonants in each word, and returns a list of words that have exactly the specified number of consonants. We will use Python's built-in string manipulation capabilities to achieve this. The function will handle edge cases such as empty strings and ensure the order of words is preserved.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'natural number'\n    Explanation: A natural number is a positive integer (1, 2, 3, ...). In this context, it means that the input number `n` will always be a positive integer.\n\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (a, e, i, o, u). The task is to count these consonants in each word.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': means that we need to find words that have a number of consonants equal to `n`.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Split the input string `s` into individual words.\n2. Initialize an empty list to store words with exactly `n` consonants.\n3. For each word in the list:\n   - Count the number of consonants in the word.\n   - If the count equals `n`, add the word to the result list.\n4. Return the result list.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check for consonants. The expected output is an empty list.\n\n    select_words(\"a e i o u\", 0) = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    Explanation: Each word is a single vowel with zero consonants, which matches the condition of having exactly 0 consonants.\n\n    select_words(\"b c d f g\", 1) = [\"b\", \"c\", \"d\", \"f\", \"g\"]\n    Explanation: Each word is a single consonant, which matches the condition of having exactly 1 consonant.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for empty strings and words with zero or one consonant.\n", "requirement analysis:\nThe function should accurately identify words with the specified number of consonants, handle edge cases like empty strings, and maintain the order of words as they appear in the input.\nrequirement pool:\n- Implement the main function to select words based on consonant count\n- Optimize the function for performance with large strings\n- Ensure the function handles empty strings correctly\n- Provide comprehensive documentation for the function\n- Include unit tests to verify functionality\nWe will implement a function that iterates over each word in the input string, counts the consonants in each word, and returns a list of words that have exactly the specified number of consonants. We will use Python's built-in string manipulation capabilities to achieve this. The function will handle edge cases such as empty strings and ensure that the words are returned in the order they appear in the input string.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'natural number n'\n    Explanation: A natural number is a positive integer (1, 2, 3, ...). In this context, it specifies the exact number of consonants a word must have to be included in the result.\n\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (i.e., not 'a', 'e', 'i', 'o', 'u'). The task is to count these in each word.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': This means that a word must have a precise number of consonants equal to n to be included in the result list.\n    Implementation: Use a counter to count consonants in each word and compare it to n.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Split the input string `s` into words.\n2. Initialize an empty list to store words with exactly `n` consonants.\n3. For each word in the list:\n   - Initialize a counter for consonants.\n   - Iterate through each character in the word.\n   - If the character is a consonant, increment the counter.\n   - After checking all characters, if the counter equals `n`, add the word to the result list.\n4. Return the result list.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check, resulting in an empty list.\n\n    select_words(\"a e i o u\", 0) = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    Explanation: Each word (vowel) has 0 consonants, which matches the requirement of having exactly 0 consonants.\n\n    select_words(\"b c d f g\", 1) = [\"b\", \"c\", \"d\", \"f\", \"g\"]\n    Explanation: Each word is a single consonant, so they all have exactly 1 consonant.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for empty strings and words with zero consonants.\n", "requirement analysis:\nThe function should efficiently parse the input string, count consonants in each word, and return words with the exact number of consonants specified. It should handle edge cases like empty strings and ensure performance is maintained for large inputs.\nrequirement pool:\n- Implement the main function to select words based on consonant count.\n- Optimize the function for performance with large strings.\n- Ensure the function handles edge cases like empty strings.\n- Provide comprehensive documentation and examples.\n- Include unit tests to verify functionality.\nWe will implement a function that iterates over each word in the input string, counts the consonants, and returns a list of words with the exact number of consonants specified. We will use Python's built-in string manipulation capabilities to efficiently handle the input. The function will be optimized for performance by minimizing unnecessary operations and will handle edge cases like empty strings gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'natural number'\n    Explanation: A natural number is a positive integer (1, 2, 3, ...). In this context, it means that the input number `n` will always be a positive integer.\n\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (a, e, i, o, u). In this context, the function needs to count only the consonant letters in each word.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': This means that the function should return words that have a number of consonants equal to `n`. In code, this can be implemented by counting the consonants in each word and checking if the count equals `n`.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Split the input string `s` into individual words.\n2. Initialize an empty list to store words with exactly `n` consonants.\n3. For each word in the list:\n   - Initialize a counter for consonants.\n   - Iterate through each character in the word.\n   - Check if the character is a consonant (not a vowel and is an alphabet letter).\n   - Increment the counter if it is a consonant.\n   - After checking all characters, if the counter equals `n`, add the word to the result list.\n4. Return the list of words with exactly `n` consonants.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check. The expected output is an empty list.\n\n    select_words(\"a e i o u\", 0) = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    Explanation: Each word is a vowel with 0 consonants, which matches the condition of having exactly 0 consonants.\n\n    select_words(\"b c d f g\", 1) = [\"b\", \"c\", \"d\", \"f\", \"g\"]\n    Explanation: Each word is a single consonant letter, which matches the condition of having exactly 1 consonant.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already handles empty strings and words with varying numbers of consonants correctly.\n", "requirement analysis:\nThe function should accurately count consonants in each word and return those with exactly n consonants. It should handle edge cases like empty strings and ensure performance efficiency.\nrequirement pool:\n- Implement consonant counting logic\n- Ensure function handles empty strings\n- Optimize for performance with large strings\n- Provide clear documentation and examples\n- Consider edge cases and input validation\nWe will implement a function that iterates over each word in the input string, counts the consonants, and returns a list of words with exactly n consonants. We will use Python's built-in string manipulation capabilities to efficiently handle the input and optimize performance for large strings.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (a, e, i, o, u). In this requirement, we need to count the number of consonants in each word of the string.\n\n    'natural number'\n    Explanation: A natural number is a positive integer (1, 2, 3, ...). In this requirement, it specifies the exact number of consonants a word must have to be included in the result.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': This means that a word must have a precise number of consonants equal to n to be included in the result list. In code, this can be implemented by counting the consonants in each word and checking if the count equals n.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Split the input string `s` into individual words.\n2. Initialize an empty list to store words that meet the criteria.\n3. For each word in the list:\n   - Initialize a counter for consonants.\n   - Iterate through each character in the word.\n   - Check if the character is a consonant (not a vowel and is an alphabet letter).\n   - Increment the counter for each consonant found.\n   - If the counter equals `n`, add the word to the result list.\n4. Return the list of words with exactly `n` consonants.\n\n# [edge case]\n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check. The function should return an empty list.\n\n    select_words(\"a e i o u\", 1) = []\n    Explanation: All words in the string are vowels with no consonants. Therefore, no word can have exactly 1 consonant.\n\n    select_words(\"b c d f g\", 1) = [\"b\", \"c\", \"d\", \"f\", \"g\"]\n    Explanation: Each word in the string is a single consonant, so they all meet the criteria of having exactly 1 consonant.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for empty strings and words with no consonants.\n", "requirement analysis:\nThe function should accurately identify words with the exact number of consonants specified by the user. It should handle edge cases such as empty strings and ensure performance efficiency for large inputs.\nrequirement pool:\n- Implement the main function to select words based on consonant count.\n- Optimize the function for performance with large strings.\n- Ensure the function handles empty strings correctly.\n- Provide clear documentation and examples for user understanding.\n- Consider edge cases and input validation.\nWe will implement a function that iterates over each word in the input string, counts the consonants in each word, and returns a list of words that have exactly the specified number of consonants. We will use Python's built-in string manipulation capabilities to achieve this efficiently. The function will handle empty strings by returning an empty list immediately.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (a, e, i, o, u). In this requirement, we need to count the number of consonants in each word of the string.\n\n    'natural number'\n    Explanation: A natural number is a positive integer (1, 2, 3, ...). In this context, it specifies the exact number of consonants a word must have to be included in the result.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': This means that a word must have a precise number of consonants equal to n to be included in the result list.\n    Implementation: Count the consonants in each word and check if it equals n.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Split the input string `s` into individual words.\n2. Initialize an empty list to store words that meet the criteria.\n3. For each word in the list:\n   - Initialize a counter for consonants.\n   - Iterate through each character in the word.\n   - Check if the character is a consonant (not a vowel and is an alphabet letter).\n   - Increment the counter for each consonant found.\n   - If the counter equals `n`, add the word to the result list.\n4. Return the result list.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check. The function should return an empty list.\n\n    select_words(\"a e i o u\", 1) = []\n    Explanation: All words in the string are vowels with no consonants, so none of them meet the criteria of having exactly 1 consonant.\n\n    select_words(\"b c d f g\", 1) = [\"b\", \"c\", \"d\", \"f\", \"g\"]\n    Explanation: Each word in the string is a single consonant, so they all meet the criteria of having exactly 1 consonant.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already handles empty strings and words with no consonants correctly.\n", "requirement analysis:\nThe function should accurately identify words with the specified number of consonants, handle edge cases like empty strings, and perform efficiently with large inputs. The input is assumed to be well-formed with only letters and spaces.\nrequirement pool:\n- Implement the main function to select words based on consonant count.\n- Optimize the function for performance with large strings.\n- Write comprehensive documentation and examples.\n- Ensure the function handles edge cases like empty strings.\n- Add unit tests to verify functionality.\nWe will implement a function that iterates over each word in the input string, counts the consonants in each word, and returns a list of words that match the specified consonant count. The function will handle edge cases like empty strings and optimize performance by using efficient string operations. We will use Python's built-in capabilities without any external libraries, as the task is straightforward and does not require complex operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (a, e, i, o, u). In this requirement, the task is to count the number of consonants in each word of the string.\n\n    'natural number'\n    Explanation: A natural number is a positive integer (1, 2, 3, ...). In this context, it specifies the exact number of consonants a word must have to be included in the result.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': This means that a word must have a precise number of consonants equal to n to be included in the result list.\n    Implementation: Count the consonants in each word and check if it equals n.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Split the input string `s` into individual words.\n2. Initialize an empty list to store words that meet the criteria.\n3. For each word in the list:\n   - Initialize a counter for consonants.\n   - Iterate through each character in the word.\n   - Check if the character is a consonant (not a vowel and is an alphabet letter).\n   - Increment the counter if it is a consonant.\n   - After checking all characters, compare the counter with `n`.\n   - If they match, add the word to the result list.\n4. Return the result list.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check. The expected output is an empty list.\n\n    select_words(\"a e i o u\", 0) = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    Explanation: Each word (vowel) has 0 consonants, which matches the requirement of exactly 0 consonants.\n\n    select_words(\"b c d f g\", 1) = [\"b\", \"c\", \"d\", \"f\", \"g\"]\n    Explanation: Each word consists of a single consonant, which matches the requirement of exactly 1 consonant.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for empty strings and words with varying numbers of consonants.\n", "requirement analysis:\nThe function should efficiently parse the input string, count consonants in each word, and return words with the exact number of consonants specified. It should handle edge cases like empty strings and ensure performance is optimized for longer inputs.\nrequirement pool:\n- Implement the main function to select words based on consonant count.\n- Optimize the function for performance with large input strings.\n- Ensure the function handles edge cases like empty strings.\n- Provide comprehensive documentation and examples.\n- Include unit tests to verify functionality.\nWe will implement a function that iterates over each word in the input string, counts the consonants in each word, and returns a list of words that have exactly the specified number of consonants. We will use Python's built-in string manipulation capabilities to achieve this efficiently. The function will handle edge cases such as empty strings by returning an empty list. We assume the input string contains only letters and spaces, so no special handling for punctuation or special characters is needed.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (A, E, I, O, U). In this requirement, we need to count the number of consonants in each word.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': means that we need to find words with a precise number of consonants equal to n.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Split the input string into individual words.\n    2. Initialize an empty list to store words with exactly n consonants.\n    3. Iterate over each word in the list:\n        a. Count the number of consonants in the word.\n        b. If the count equals n, add the word to the result list.\n    4. Return the list of words with exactly n consonants.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check for consonants. The expected output is an empty list.\n    \n    select_words(\"a e i o u\", 0) = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    Explanation: Each word in the string is a vowel and contains zero consonants, which matches the requirement of exactly 0 consonants.\n    \n    select_words(\"bbbb cccc dddd\", 4) = [\"bbbb\", \"cccc\", \"dddd\"]\n    Explanation: Each word contains exactly 4 consonants, which matches the requirement.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for empty strings and words with zero consonants.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [133, 133, 133, 133, 133, 133, 133, 133, 133, 133], "completion": "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Given a string s and a natural number n, returns a list of all words from string s that contain exactly n consonants.\n    \n    Args:\n        s (str): Input string containing words separated by spaces.\n        n (int): Number of consonants to filter words by.\n    \n    Returns:\n        list: List of words with exactly n consonants.\n    \"\"\"\n    # Define vowels for easy checking\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store words with exactly n consonants\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        \n        # If the count equals n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words with exactly n consonants\n    return result\n\n# Example usage:\n# print(select_words(\"a e i o u\", 0))  # Output: [\"a\", \"e\", \"i\", \"o\", \"u\"]\n# print(select_words(\"bbbb cccc dddd\", 4))  # Output: [\"bbbb\", \"cccc\", \"dddd\"]\n# print(select_words(\"\", 3))  # Output: []\n", "passed": true, "pass": true, "pass_num": 10, "round": 242, "mutate_method": "condense_two2one", "parent_index": 99}
