{"task_id": "HumanEval/81", "prompt": "def numerical_letter_grade(grades):\t\n'''It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She misplaced the code after creating it, and now it is nowhere to be found. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\nExample:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    '''", "entry_point": "numerical_letter_grade", "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "test": ["def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.367]) == ['A-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.709]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.501]) == ['C-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6.042, 3, 5.935, 5, 5.423]) == ['A', 'B', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.511]) == ['C-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6, 4.502, 2.77, 6.757, 4.66]) == ['A', 'A', 'B', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.309, 3, 3.031, 4, 3.721]) == ['A', 'B', 'B+', 'A+', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1, 1.067, 5.544, 2.104, 6.994]) == ['D', 'D+', 'A', 'C+', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3, 3.93, 1.74, 2.791, 2.576]) == ['B', 'A', 'C', 'B', 'B-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.799]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.104]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6, 2.642, 5.179, 5.542, 7.925]) == ['A', 'B-', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([7.75, 2, 6.21, 4, 7.481]) == ['A', 'C', 'A', 'A+', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3, 1.608, 4.584, 1.801, 5.528]) == ['B', 'C-', 'A', 'C', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.259]) == ['C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4, 2.626, 2.824, 7.424, 5.83]) == ['A+', 'B-', 'B', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.84, 4, 4.974, 6, 5.319]) == ['A', 'A+', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.033]) == ['C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.516]) == ['B-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([9.54, 5, 6.671, 1, 5.784]) == ['A', 'A', 'A', 'D', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1, 5.293, 4.749, 7.907, 5.656]) == ['D', 'A', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6.463, 2, 3.954, 5, 7.145]) == ['A', 'C', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.826]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3, 3.758, 2.783, 2.733, 7.605]) == ['B', 'A', 'B', 'B', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.597]) == ['B-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4, 1.435, 5.824, 1.539, 7.492]) == ['A+', 'C-', 'A', 'C-', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6.423]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.143]) == ['D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.891]) == ['C']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.065, 4, 5.911, 2, 4.43]) == ['A', 'A+', 'A', 'C', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.477, 7, 6.699, 6, 7.022]) == ['A', 'A', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5, 2.658, 2.151, 6.268, 5.527]) == ['A', 'B-', 'C+', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3, 4.558, 2.072, 3.712, 5.809]) == ['B', 'A', 'C+', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3, 4.425, 6.207, 4.631, 3.821]) == ['B', 'A', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.878]) == ['C']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.81]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.976, 4, 1.433, 7, 3.077]) == ['A', 'A+', 'C-', 'A', 'B+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.226]) == ['C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.364]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.946]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4, 3.251, 2.546, 1.98, 3.082]) == ['A+', 'B+', 'B-', 'C', 'B+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.189]) == ['B+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6.618]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.835]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.356]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.612]) == ['A-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.601]) == ['B-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.978]) == ['C']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5, 3.231, 4.961, 5.91, 4.348]) == ['A', 'B+', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([0.5]) == ['D-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.412]) == ['B-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.699]) == ['C-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([9.553, 3, 1.754, 7, 7.712]) == ['A', 'B', 'C', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.909, 4, 3.917, 4, 2.236]) == ['A', 'A+', 'A', 'A+', 'C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5, 4.675, 6.301, 3.928, 5.804]) == ['A', 'A', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.845]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.091]) == ['C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.822]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1, 1.556, 6.189, 3.588, 1.625]) == ['D', 'C-', 'A', 'A-', 'C-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6.134, 3, 6.155, 3, 2.084]) == ['A', 'B', 'A', 'B', 'C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5, 3.839, 3.698, 4.34, 1.955]) == ['A', 'A', 'A-', 'A', 'C']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.813]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.266, 7, 4.913, 2, 1.115]) == ['D+', 'A', 'A', 'C', 'D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.381]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.985]) == ['B']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.314]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([9.317, 8, 3.7, 6, 2.483]) == ['A', 'A', 'A-', 'A', 'B-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.169]) == ['C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.925]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.275]) == ['D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.076]) == ['D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.906]) == ['C']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6, 5.144, 4.622, 7.362, 8.196]) == ['A', 'A', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.778]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.012]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([0.0]) == ['E']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.873, 3, 2.438, 6, 5.365]) == ['A', 'B', 'B-', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.169]) == ['D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.454]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1, 1.181, 4.176, 7.002, 5.356]) == ['D', 'D+', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.412]) == ['C-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.054]) == ['B+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.401]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.559]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.454, 8, 1.163, 2, 3.831]) == ['B-', 'A', 'D+', 'C', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.288]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.516]) == ['A-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.111]) == ['B+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.411]) == ['A-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.415]) == ['C-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.682]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.152, 7, 2.102, 5, 8.879]) == ['A', 'A', 'C+', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6, 2.172, 3.849, 1.272, 6.298]) == ['A', 'C+', 'A', 'D+', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.697]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.86]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.2]) == ['D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6.363]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.886]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.202]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([8.911, 1, 5.562, 6, 1.001]) == ['A', 'D', 'A', 'A', 'D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.442]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.32, 8, 4.236, 1, 5.296]) == ['C-', 'A', 'A', 'D', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.058, 4, 5.349, 2, 4.304]) == ['D+', 'A+', 'A', 'C', 'A']"], "test_case_list": ["assert numerical_letter_grade([3.367]) == ['A-']", "assert numerical_letter_grade([3.709]) == ['A']", "assert numerical_letter_grade([1.501]) == ['C-']", "assert numerical_letter_grade([6.042, 3, 5.935, 5, 5.423]) == ['A', 'B', 'A', 'A', 'A']", "assert numerical_letter_grade([1.511]) == ['C-']", "assert numerical_letter_grade([6, 4.502, 2.77, 6.757, 4.66]) == ['A', 'A', 'B', 'A', 'A']", "assert numerical_letter_grade([5.309, 3, 3.031, 4, 3.721]) == ['A', 'B', 'B+', 'A+', 'A']", "assert numerical_letter_grade([1, 1.067, 5.544, 2.104, 6.994]) == ['D', 'D+', 'A', 'C+', 'A']", "assert numerical_letter_grade([3, 3.93, 1.74, 2.791, 2.576]) == ['B', 'A', 'C', 'B', 'B-']", "assert numerical_letter_grade([4.799]) == ['A']", "assert numerical_letter_grade([4.104]) == ['A']", "assert numerical_letter_grade([6, 2.642, 5.179, 5.542, 7.925]) == ['A', 'B-', 'A', 'A', 'A']", "assert numerical_letter_grade([7.75, 2, 6.21, 4, 7.481]) == ['A', 'C', 'A', 'A+', 'A']", "assert numerical_letter_grade([3, 1.608, 4.584, 1.801, 5.528]) == ['B', 'C-', 'A', 'C', 'A']", "assert numerical_letter_grade([2.259]) == ['C+']", "assert numerical_letter_grade([4, 2.626, 2.824, 7.424, 5.83]) == ['A+', 'B-', 'B', 'A', 'A']", "assert numerical_letter_grade([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.", "assert numerical_letter_grade([4.84, 4, 4.974, 6, 5.319]) == ['A', 'A+', 'A', 'A', 'A']", "assert numerical_letter_grade([2.033]) == ['C+']", "assert numerical_letter_grade([2.516]) == ['B-']", "assert numerical_letter_grade([9.54, 5, 6.671, 1, 5.784]) == ['A', 'A', 'A', 'D', 'A']", "assert numerical_letter_grade([1, 5.293, 4.749, 7.907, 5.656]) == ['D', 'A', 'A', 'A', 'A']", "assert numerical_letter_grade([6.463, 2, 3.954, 5, 7.145]) == ['A', 'C', 'A', 'A', 'A']", "assert numerical_letter_grade([3.826]) == ['A']", "assert numerical_letter_grade([3, 3.758, 2.783, 2.733, 7.605]) == ['B', 'A', 'B', 'B', 'A']", "assert numerical_letter_grade([2.597]) == ['B-']", "assert numerical_letter_grade([4, 1.435, 5.824, 1.539, 7.492]) == ['A+', 'C-', 'A', 'C-', 'A']", "assert numerical_letter_grade([6.423]) == ['A']", "assert numerical_letter_grade([1.143]) == ['D+']", "assert numerical_letter_grade([1.891]) == ['C']", "assert numerical_letter_grade([5.065, 4, 5.911, 2, 4.43]) == ['A', 'A+', 'A', 'C', 'A']", "assert numerical_letter_grade([4.477, 7, 6.699, 6, 7.022]) == ['A', 'A', 'A', 'A', 'A']", "assert numerical_letter_grade([5, 2.658, 2.151, 6.268, 5.527]) == ['A', 'B-', 'C+', 'A', 'A']", "assert numerical_letter_grade([3, 4.558, 2.072, 3.712, 5.809]) == ['B', 'A', 'C+', 'A', 'A']", "assert numerical_letter_grade([3, 4.425, 6.207, 4.631, 3.821]) == ['B', 'A', 'A', 'A', 'A']", "assert numerical_letter_grade([1.878]) == ['C']", "assert numerical_letter_grade([3.81]) == ['A']", "assert numerical_letter_grade([5.976, 4, 1.433, 7, 3.077]) == ['A', 'A+', 'C-', 'A', 'B+']", "assert numerical_letter_grade([2.226]) == ['C+']", "assert numerical_letter_grade([5.364]) == ['A']", "assert numerical_letter_grade([4.946]) == ['A']", "assert numerical_letter_grade([4, 3.251, 2.546, 1.98, 3.082]) == ['A+', 'B+', 'B-', 'C', 'B+']", "assert numerical_letter_grade([3.189]) == ['B+']", "assert numerical_letter_grade([6.618]) == ['A']", "assert numerical_letter_grade([4.835]) == ['A']", "assert numerical_letter_grade([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']", "assert numerical_letter_grade([5.356]) == ['A']", "assert numerical_letter_grade([3.612]) == ['A-']", "assert numerical_letter_grade([2.601]) == ['B-']", "assert numerical_letter_grade([1.978]) == ['C']", "assert numerical_letter_grade([5, 3.231, 4.961, 5.91, 4.348]) == ['A', 'B+', 'A', 'A', 'A']", "assert numerical_letter_grade([0.5]) == ['D-']", "assert numerical_letter_grade([2.412]) == ['B-']", "assert numerical_letter_grade([1.699]) == ['C-']", "assert numerical_letter_grade([9.553, 3, 1.754, 7, 7.712]) == ['A', 'B', 'C', 'A', 'A']", "assert numerical_letter_grade([5.909, 4, 3.917, 4, 2.236]) == ['A', 'A+', 'A', 'A+', 'C+']", "assert numerical_letter_grade([5, 4.675, 6.301, 3.928, 5.804]) == ['A', 'A', 'A', 'A', 'A']", "assert numerical_letter_grade([4.845]) == ['A']", "assert numerical_letter_grade([2.091]) == ['C+']", "assert numerical_letter_grade([4.822]) == ['A']", "assert numerical_letter_grade([1, 1.556, 6.189, 3.588, 1.625]) == ['D', 'C-', 'A', 'A-', 'C-']", "assert numerical_letter_grade([6.134, 3, 6.155, 3, 2.084]) == ['A', 'B', 'A', 'B', 'C+']", "assert numerical_letter_grade([5, 3.839, 3.698, 4.34, 1.955]) == ['A', 'A', 'A-', 'A', 'C']", "assert numerical_letter_grade([4.813]) == ['A']", "assert numerical_letter_grade([1.266, 7, 4.913, 2, 1.115]) == ['D+', 'A', 'A', 'C', 'D+']", "assert numerical_letter_grade([4.381]) == ['A']", "assert numerical_letter_grade([2.985]) == ['B']", "assert numerical_letter_grade([4.314]) == ['A']", "assert numerical_letter_grade([9.317, 8, 3.7, 6, 2.483]) == ['A', 'A', 'A-', 'A', 'B-']", "assert numerical_letter_grade([2.169]) == ['C+']", "assert numerical_letter_grade([3.925]) == ['A']", "assert numerical_letter_grade([1.275]) == ['D+']", "assert numerical_letter_grade([1.076]) == ['D+']", "assert numerical_letter_grade([1.906]) == ['C']", "assert numerical_letter_grade([6, 5.144, 4.622, 7.362, 8.196]) == ['A', 'A', 'A', 'A', 'A']", "assert numerical_letter_grade([5.778]) == ['A']", "assert numerical_letter_grade([5.012]) == ['A']", "assert numerical_letter_grade([0.0]) == ['E']", "assert numerical_letter_grade([4.873, 3, 2.438, 6, 5.365]) == ['A', 'B', 'B-', 'A', 'A']", "assert numerical_letter_grade([1.169]) == ['D+']", "assert numerical_letter_grade([4.454]) == ['A']", "assert numerical_letter_grade([1, 1.181, 4.176, 7.002, 5.356]) == ['D', 'D+', 'A', 'A', 'A']", "assert numerical_letter_grade([1.412]) == ['C-']", "assert numerical_letter_grade([3.054]) == ['B+']", "assert numerical_letter_grade([5.401]) == ['A']", "assert numerical_letter_grade([5.559]) == ['A']", "assert numerical_letter_grade([2.454, 8, 1.163, 2, 3.831]) == ['B-', 'A', 'D+', 'C', 'A']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([5.288]) == ['A']", "assert numerical_letter_grade([3.516]) == ['A-']", "assert numerical_letter_grade([3.111]) == ['B+']", "assert numerical_letter_grade([3.411]) == ['A-']", "assert numerical_letter_grade([1.415]) == ['C-']", "assert numerical_letter_grade([4.682]) == ['A']", "assert numerical_letter_grade([4.152, 7, 2.102, 5, 8.879]) == ['A', 'A', 'C+', 'A', 'A']", "assert numerical_letter_grade([6, 2.172, 3.849, 1.272, 6.298]) == ['A', 'C+', 'A', 'D+', 'A']", "assert numerical_letter_grade([4.697]) == ['A']", "assert numerical_letter_grade([4.86]) == ['A']", "assert numerical_letter_grade([1.2]) == ['D+']", "assert numerical_letter_grade([6.363]) == ['A']", "assert numerical_letter_grade([5.886]) == ['A']", "assert numerical_letter_grade([4.202]) == ['A']", "assert numerical_letter_grade([8.911, 1, 5.562, 6, 1.001]) == ['A', 'D', 'A', 'A', 'D+']", "assert numerical_letter_grade([5.442]) == ['A']", "assert numerical_letter_grade([1.32, 8, 4.236, 1, 5.296]) == ['C-', 'A', 'A', 'D', 'A']", "assert numerical_letter_grade([1.058, 4, 5.349, 2, 4.304]) == ['D+', 'A+', 'A', 'C', 'A']"], "nl": "It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    ", "func": "def numerical_letter_grade(grades):", "examples": "Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    ", "repair_prompt": ["def numerical_letter_grade(grades):\t\n'''It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She misplaced the code after creating it, and now it is nowhere to be found. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\nExample:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    '''", "def numerical_letter_grade(grades):\t\n    '''It is the last week of the semester and the teacher has to give the grades to students. The teacher has been developing her own algorithm for grading. There is only one problem. She has lost the code she used for grading. She misplaced the code after creating it, and now it is nowhere to be found. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\nExample:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    '''", "def numerical_letter_grade(grades):\t\n'''It is the last week of the semester and the teacher has to give the grades to students, but she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\nExample:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPAs to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the GPAs.\n    \"\"\"\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Determine the corresponding letter grade based on the provided table\n        if gpa == 4.0:\n            letter_grade = 'A+'\n        elif gpa > 3.7:\n            letter_grade = 'A'\n        elif gpa > 3.3:\n            letter_grade = 'A-'\n        elif gpa > 3.0:\n            letter_grade = 'B+'\n        elif gpa > 2.7:\n            letter_grade = 'B'\n        elif gpa > 2.3:\n            letter_grade = 'B-'\n        elif gpa > 2.0:\n            letter_grade = 'C+'\n        elif gpa > 1.7:\n            letter_grade = 'C'\n        elif gpa > 1.3:\n            letter_grade = 'C-'\n        elif gpa > 1.0:\n            letter_grade = 'D+'\n        elif gpa > 0.7:\n            letter_grade = 'D'\n        elif gpa > 0.0:\n            letter_grade = 'D-'\n        else:\n            letter_grade = 'E'  # Handle invalid GPA values\n\n        # Append the determined letter grade to the list\n        letter_grades.append(letter_grade)\n\n    # Return the list of letter grades\n    return letter_grades\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPA values to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the GPA values.\n    \"\"\"\n    # Initialize an empty list to store the corresponding letter grades\n    letter_grades = []\n\n    # Iterate through each GPA in the input list\n    for gpa in grades:\n        # Determine the letter grade based on the GPA value using conditional statements\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        elif gpa == 0.0:\n            letter_grades.append('E')\n        else:\n            # Handle invalid GPA values by appending 'Invalid'\n            letter_grades.append('Invalid')\n\n    # Return the list of letter grades\n    return letter_grades\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    \"\"\"\n    Convert a list of GPA values to their corresponding letter grades.\n\n    Parameters:\n    grades (List[float]): A list of GPA values.\n\n    Returns:\n    List[str]: A list of letter grades corresponding to the input GPAs.\n    \"\"\"\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa == 3.7:\n            letter_grades.append('A-')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa == 3.3:\n            letter_grades.append('B+')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa == 3.0:\n            letter_grades.append('B')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa == 2.7:\n            letter_grades.append('B-')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa == 2.3:\n            letter_grades.append('C+')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa == 2.0:\n            letter_grades.append('C')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa == 1.7:\n            letter_grades.append('C-')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa == 1.3:\n            letter_grades.append('D+')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa == 1.0:\n            letter_grades.append('D')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa == 0.7:\n            letter_grades.append('D-')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        elif gpa == 0.0:\n            letter_grades.append('E')\n        else:\n            # Handle unexpected negative GPA values\n            letter_grades.append('Invalid GPA')\n\n    return letter_grades\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPAs to a list of letter grades based on a predefined scale.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of corresponding letter grades.\n    \"\"\"\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Determine the corresponding letter grade based on the given table\n        if gpa == 4.0:\n            letter_grade = 'A+'\n        elif gpa > 3.7:\n            letter_grade = 'A'\n        elif gpa > 3.3:\n            letter_grade = 'A-'\n        elif gpa > 3.0:\n            letter_grade = 'B+'\n        elif gpa > 2.7:\n            letter_grade = 'B'\n        elif gpa > 2.3:\n            letter_grade = 'B-'\n        elif gpa > 2.0:\n            letter_grade = 'C+'\n        elif gpa > 1.7:\n            letter_grade = 'C'\n        elif gpa > 1.3:\n            letter_grade = 'C-'\n        elif gpa > 1.0:\n            letter_grade = 'D+'\n        elif gpa > 0.7:\n            letter_grade = 'D'\n        elif gpa > 0.0:\n            letter_grade = 'D-'\n        elif gpa == 0.0:\n            letter_grade = 'E'\n        else:\n            # Return a default grade for invalid inputs\n            letter_grade = 'Invalid GPA'\n\n        # Append the determined letter grade to the list\n        letter_grades.append(letter_grade)\n\n    # Return the list of letter grades\n    return letter_grades\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPA values to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the GPA values.\n    \"\"\"\n    result = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    \"\"\"\n    Convert a list of GPAs to their corresponding letter grades.\n\n    Parameters:\n    grades (List[float]): A list of GPA values.\n\n    Returns:\n    List[str]: A list of letter grades corresponding to the input GPAs.\n    \"\"\"\n    letter_grades = []\n    \n    for gpa in grades:\n        if gpa > 4.0 or gpa < 0.0:\n            raise ValueError(f\"Invalid GPA value: {gpa}. GPA must be between 0.0 and 4.0.\")\n        \n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa == 3.7:\n            letter_grades.append('A-')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa == 3.3:\n            letter_grades.append('B+')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa == 3.0:\n            letter_grades.append('B')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa == 2.7:\n            letter_grades.append('B-')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa == 2.3:\n            letter_grades.append('C+')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa == 2.0:\n            letter_grades.append('C')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa == 1.7:\n            letter_grades.append('C-')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa == 1.3:\n            letter_grades.append('D+')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa == 1.0:\n            letter_grades.append('D')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa == 0.7:\n            letter_grades.append('D-')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        elif gpa == 0.0:\n            letter_grades.append('E')\n    \n    return letter_grades\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPA scores to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA scores.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the GPA scores.\n    \"\"\"\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPA values to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the GPA values.\n    \"\"\"\n    # Define GPA thresholds and corresponding letter grades\n    gpa_to_grade = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-')\n    ]\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Check for invalid GPA values\n        if not isinstance(gpa, (int, float)) or gpa < 0.0 or gpa > 4.0:\n            result.append('Invalid GPA')\n            continue\n\n        # Determine the letter grade for the current GPA\n        for threshold, grade in gpa_to_grade:\n            if gpa >= threshold:\n                result.append(grade)\n                break\n        else:\n            # If no grade is found, it means the GPA is exactly 0.0\n            result.append('E')\n\n    return result\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPAs to letter grades based on a predefined scale.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of corresponding letter grades.\n    \"\"\"\n    # Predefined GPA to letter grade mapping\n    gpa_to_letter = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'E'\n    }\n\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Iterate through each GPA in the input list\n    for gpa in grades:\n        # Determine the letter grade using conditional statements\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n\n    # Return the list of letter grades\n    return letter_grades\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPAs to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the input GPAs.\n    \"\"\"\n    # Define the mapping of GPA ranges to letter grades\n    gpa_to_letter = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-'),\n    ]\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Determine the letter grade for the current GPA\n        for threshold, letter in gpa_to_letter:\n            if gpa >= threshold:\n                result.append(letter)\n                break\n        else:\n            # If GPA is less than 0.0, assign 'E'\n            result.append('E')\n\n    return result\n"], "plans": ["requirement analysis:\nThe function should accurately map GPAs to letter grades based on the provided table. It should handle edge cases such as exact GPA values and efficiently process large lists of GPAs.\nrequirement pool:\n- Implement GPA to letter grade conversion logic\n- Design a user-friendly interface for grade input\n- Optimize performance for processing large datasets\n- Include error handling for invalid GPA values\n- Provide documentation for the grading algorithm\nWe will implement a simple function to convert GPAs to letter grades using conditional statements. The function will iterate over the list of GPAs and map each GPA to its corresponding letter grade based on the provided table. We will use Python's built-in capabilities to handle the list processing efficiently, ensuring the function can handle large datasets. We will also include error handling for invalid GPA values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: GPA stands for Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically measured on a scale from 0.0 to 4.0.\n\n    'Letter grade'\n    Explanation: A letter grade is a traditional method of evaluating a student's performance, typically ranging from A+ to E, with A+ being the highest and E being the lowest.\n\n# [phrase showing quantity relationship]\n    '> 3.7': This means any GPA greater than 3.7 but not equal to 4.0 should be assigned an 'A'.\n    '> 3.3': This means any GPA greater than 3.3 but not equal to 3.7 should be assigned an 'A-'.\n    '> 3.0': This means any GPA greater than 3.0 but not equal to 3.3 should be assigned a 'B+'.\n    '> 2.7': This means any GPA greater than 2.7 but not equal to 3.0 should be assigned a 'B'.\n    '> 2.3': This means any GPA greater than 2.3 but not equal to 2.7 should be assigned a 'B-'.\n    '> 2.0': This means any GPA greater than 2.0 but not equal to 2.3 should be assigned a 'C+'.\n    '> 1.7': This means any GPA greater than 1.7 but not equal to 2.0 should be assigned a 'C'.\n    '> 1.3': This means any GPA greater than 1.3 but not equal to 1.7 should be assigned a 'C-'.\n    '> 1.0': This means any GPA greater than 1.0 but not equal to 1.3 should be assigned a 'D+'.\n    '> 0.7': This means any GPA greater than 0.7 but not equal to 1.0 should be assigned a 'D'.\n    '> 0.0': This means any GPA greater than 0.0 but not equal to 0.7 should be assigned a 'D-'.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Initialize an empty list to store the letter grades.\n    - Iterate over each GPA in the input list.\n    - Use conditional statements to determine the corresponding letter grade based on the provided table.\n    - Append the determined letter grade to the list.\n    - Return the list of letter grades.\n\n# [edge case] \n    numerical_letter_grade([4.0, 4.0, 4.0]) = ['A+', 'A+', 'A+']\n    Explanation: All GPAs are exactly 4.0, so each should receive an 'A+'.\n\n    numerical_letter_grade([0.0, 0.5, 0.9]) = ['E', 'D-', 'D-']\n    Explanation: A GPA of 0.0 receives an 'E', while GPAs between >0 and <=1 receive a 'D-'.\n\n    numerical_letter_grade([2.5, 2.5, 2.5]) = ['B-', 'B-', 'B-']\n    Explanation: All GPAs are greater than 2.3 and less than or equal to 2.7, so each should receive a 'B-'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the original logic using conditional statements for each range of GPA values.\n\n", "requirement analysis:\nThe function should accurately map GPA values to their corresponding letter grades based on the provided table. It should handle edge cases, such as exact GPA values and values that fall between defined ranges. The function should be efficient and easy to use, with clear input and output specifications.\nrequirement pool:\n- Implement the GPA to letter grade conversion function\n- Design a user-friendly interface for input and output\n- Ensure the function handles edge cases and is reliable\n- Optimize the function for performance\n- Provide documentation and examples for users\nWe will implement a simple function to convert GPA values to letter grades based on the provided table. The function will handle edge cases such as exact GPA values and values that fall between defined ranges. We will use Python's built-in capabilities without any additional libraries, as the task is straightforward and does not require complex data manipulation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: GPA stands for Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically on a scale from 0.0 to 4.0.\n\n    'Letter grade'\n    Explanation: Letter grades are a way of representing academic performance using letters, such as A+, A, B, etc., which correspond to specific GPA ranges.\n\n# [phrase showing quantity relationship]\n    '>': indicates that the GPA must be greater than the specified value to qualify for a certain letter grade.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Create a function that takes a list of GPAs as input.\n    2. Initialize an empty list to store the corresponding letter grades.\n    3. Iterate through each GPA in the input list.\n    4. Use conditional statements to determine the letter grade based on the GPA value:\n        - If GPA is 4.0, append 'A+' to the result list.\n        - If GPA is greater than 3.7, append 'A'.\n        - If GPA is greater than 3.3, append 'A-'.\n        - Continue this pattern for all GPA ranges down to 0.0.\n    5. Return the list of letter grades.\n\n# [edge case] \n    numerical_letter_grade([4.0]) = ['A+']\n    Explanation: The GPA is exactly 4.0, which corresponds to an 'A+' grade.\n\n    numerical_letter_grade([0.0]) = ['E']\n    Explanation: The GPA is exactly 0.0, which corresponds to an 'E' grade.\n\n    numerical_letter_grade([3.7]) = ['A-']\n    Explanation: The GPA is greater than 3.3 but not greater than 3.7, so it corresponds to an 'A-' grade.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using conditional statements will correctly handle exact and boundary GPA values.\n", "requirement analysis:\nThe function should accurately map GPA values to their corresponding letter grades based on the provided table. It should handle edge cases, such as exact GPA values at the boundary of two grades, and ensure performance efficiency for large input lists.\nrequirement pool:\n- Implement the GPA to letter grade conversion function.\n- Design a simple and intuitive user interface for input and output.\n- Optimize the function for performance with large datasets.\n- Provide detailed documentation and examples for users.\n- Include error handling for invalid GPA inputs.\nWe will implement a simple function to convert GPA values to letter grades using conditional statements. The function will iterate over the list of GPAs and map each GPA to its corresponding letter grade based on the provided table. We will use Python's built-in capabilities to handle large datasets efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically on a scale from 0.0 to 4.0.\n\n    'Letter grade'\n    Explanation: A system of grading students' academic performance using letters such as A, B, C, D, and E, with possible modifiers like + or -.\n\n# [phrase showing quantity relationship]\n    '> 3.7': This means any GPA greater than 3.7 but not equal to 4.0 should be assigned an 'A'.\n    '> 3.3': This means any GPA greater than 3.3 but not equal to 3.7 should be assigned an 'A-'.\n    '> 3.0': This means any GPA greater than 3.0 but not equal to 3.3 should be assigned a 'B+'.\n    '> 2.7': This means any GPA greater than 2.7 but not equal to 3.0 should be assigned a 'B'.\n    '> 2.3': This means any GPA greater than 2.3 but not equal to 2.7 should be assigned a 'B-'.\n    '> 2.0': This means any GPA greater than 2.0 but not equal to 2.3 should be assigned a 'C+'.\n    '> 1.7': This means any GPA greater than 1.7 but not equal to 2.0 should be assigned a 'C'.\n    '> 1.3': This means any GPA greater than 1.3 but not equal to 1.7 should be assigned a 'C-'.\n    '> 1.0': This means any GPA greater than 1.0 but not equal to 1.3 should be assigned a 'D+'.\n    '> 0.7': This means any GPA greater than 0.7 but not equal to 1.0 should be assigned a 'D'.\n    '> 0.0': This means any GPA greater than 0.0 but not equal to 0.7 should be assigned a 'D-'.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Initialize an empty list to store the letter grades.\n    - Iterate over each GPA in the input list.\n    - For each GPA, use conditional statements to determine the corresponding letter grade based on the provided table.\n    - Append the determined letter grade to the list of letter grades.\n    - Return the list of letter grades.\n\n# [edge case] \n    numerical_letter_grade([4.0]) = ['A+']\n    Explanation: A GPA of exactly 4.0 corresponds to an 'A+'.\n\n    numerical_letter_grade([0.0]) = ['E']\n    Explanation: A GPA of exactly 0.0 corresponds to an 'E'.\n\n    numerical_letter_grade([3.7]) = ['A-']\n    Explanation: A GPA of exactly 3.7 is greater than 3.3 but not greater than 3.7, so it corresponds to an 'A-'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the conditional logic in the original plan.\n\n", "requirement analysis:\nThe function should take a list of GPAs and return a list of corresponding letter grades based on a predefined scale. The function must handle edge cases such as exact GPA values and ensure that the output is consistent with the grading scale provided.\nrequirement pool:\n- Implement the main function to convert GPAs to letter grades.\n- Ensure the function handles edge cases and invalid inputs gracefully.\n- Optimize the function for performance with large lists of GPAs.\n- Document the function with clear usage examples.\n- Consider adding support for different grading scales in the future.\nWe will implement a simple function that maps GPA values to letter grades using conditional statements. The function will handle edge cases by checking exact GPA values and will return a default grade for invalid inputs. We will use Python's built-in capabilities without any external libraries, as the task is straightforward and does not require complex operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: GPA stands for Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically measured on a scale from 0.0 to 4.0.\n\n    'Letter grade'\n    Explanation: A letter grade is a traditional method of evaluating a student's performance, typically ranging from A+ to E, with A+ being the highest and E being the lowest.\n\n# [phrase showing quantity relationship]\n    '> 3.7': means any GPA greater than 3.7 but not equal to 4.0 should be graded as 'A'.\n    '> 3.3': means any GPA greater than 3.3 but less than or equal to 3.7 should be graded as 'A-'.\n    '> 3.0': means any GPA greater than 3.0 but less than or equal to 3.3 should be graded as 'B+'.\n    '> 2.7': means any GPA greater than 2.7 but less than or equal to 3.0 should be graded as 'B'.\n    '> 2.3': means any GPA greater than 2.3 but less than or equal to 2.7 should be graded as 'B-'.\n    '> 2.0': means any GPA greater than 2.0 but less than or equal to 2.3 should be graded as 'C+'.\n    '> 1.7': means any GPA greater than 1.7 but less than or equal to 2.0 should be graded as 'C'.\n    '> 1.3': means any GPA greater than 1.3 but less than or equal to 1.7 should be graded as 'C-'.\n    '> 1.0': means any GPA greater than 1.0 but less than or equal to 1.3 should be graded as 'D+'.\n    '> 0.7': means any GPA greater than 0.7 but less than or equal to 1.0 should be graded as 'D'.\n    '> 0.0': means any GPA greater than 0.0 but less than or equal to 0.7 should be graded as 'D-'.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Initialize an empty list to store the letter grades.\n    - Iterate over each GPA in the input list.\n    - Use conditional statements to determine the corresponding letter grade based on the given table.\n    - Append the determined letter grade to the list.\n    - Return the list of letter grades.\n\n# [edge case] \n    numerical_letter_grade([4.0, 0.0]) = ['A+', 'E']\n    Explanation: The GPA of 4.0 corresponds to an 'A+' and a GPA of 0.0 corresponds to an 'E'.\n\n    numerical_letter_grade([3.7, 2.7, 1.7]) = ['A-', 'B', 'C']\n    Explanation: The GPA of 3.7 is greater than 3.3 and less than or equal to 3.7, so it corresponds to an 'A-'. The GPA of 2.7 is greater than 2.3 and less than or equal to 2.7, so it corresponds to a 'B'. The GPA of 1.7 is greater than 1.3 and less than or equal to 1.7, so it corresponds to a 'C'.\n\n    numerical_letter_grade([2, 1, 0]) = ['C', 'D-', 'E']\n    Explanation: The GPA of 2 is greater than 1.7 and less than or equal to 2, so it corresponds to a 'C'. The GPA of 1 is greater than 0 and less than or equal to 1, so it corresponds to a 'D-'. The GPA of 0 corresponds directly to an 'E'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the original logic using conditional statements for each range of GPA values.\n\n", "requirement analysis:\nThe function needs to accurately map GPA values to letter grades based on the provided table. It should handle edge cases and be optimized for performance, especially with large datasets.\nrequirement pool:\n- Implement GPA to letter grade conversion logic\n- Ensure performance optimization for large datasets\n- Develop a user-friendly interface for input\n- Handle edge cases and exact GPA values\n- Provide detailed error messages for invalid inputs\nWe will implement a simple function to convert GPA values to letter grades based on the provided table. The function will handle edge cases by using conditional statements to check for exact GPA values. We will use Python's built-in capabilities to ensure the function is efficient and can handle large datasets. No third-party libraries are necessary for this straightforward conversion task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: GPA stands for Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically on a scale from 0.0 to 4.0.\n\n    'Letter grade'\n    Explanation: Letter grades are a way of representing academic performance, typically ranging from A+ to E, with A+ being the highest and E being the lowest.\n\n# [phrase showing quantity relationship]\n    '> 3.7': means GPA greater than 3.7 corresponds to an 'A' grade.\n    '> 3.3': means GPA greater than 3.3 corresponds to an 'A-' grade.\n    '> 3.0': means GPA greater than 3.0 corresponds to a 'B+' grade.\n    '> 2.7': means GPA greater than 2.7 corresponds to a 'B' grade.\n    '> 2.3': means GPA greater than 2.3 corresponds to a 'B-' grade.\n    '> 2.0': means GPA greater than 2.0 corresponds to a 'C+' grade.\n    '> 1.7': means GPA greater than 1.7 corresponds to a 'C' grade.\n    '> 1.3': means GPA greater than 1.3 corresponds to a 'C-' grade.\n    '> 1.0': means GPA greater than 1.0 corresponds to a 'D+' grade.\n    '> 0.7': means GPA greater than 0.7 corresponds to a 'D' grade.\n    '> 0.0': means GPA greater than 0.0 corresponds to a 'D-' grade.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Iterate through the list of GPAs.\n    - For each GPA, use conditional statements to determine the corresponding letter grade based on the provided table.\n    - Append the letter grade to a result list.\n    - Return the result list.\n\n# [edge case] \n    numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7]) = ['A+', 'A', 'A-', 'B+', 'B']\n    Explanation: Each GPA matches exactly with the boundary values for each letter grade.\n    \n    numerical_letter_grade([0.0, 0.5, 1.5, 2.5, 3.5]) = ['E', 'D-', 'C-', 'B-', 'A-']\n    Explanation: Each GPA falls between two boundary values and is correctly mapped to the lower letter grade.\n\n    numerical_letter_grade([4.0, 4.1, -1, 2, 3]) = ['A+', 'A+', 'E', 'C', 'B']\n    Explanation: GPA of 4.1 is treated as A+, negative GPA is treated as E (assuming invalid input defaults to E), and other GPAs are mapped correctly.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def numerical_letter_grade(grades):\n            result = []\n            for gpa in grades:\n                if gpa >= 4.0:\n                    result.append('A+')\n                elif gpa > 3.7:\n                    result.append('A')\n                elif gpa > 3.3:\n                    result.append('A-')\n                elif gpa > 3.0:\n                    result.append('B+')\n                elif gpa > 2.7:\n                    result.append('B')\n                elif gpa > 2.3:\n                    result.append('B-')\n                elif gpa > 2.0:\n                    result.append('C+')\n                elif gpa > 1.7:\n                    result.append('C')\n                elif gpa > 1.3:\n                    result.append('C-')\n                elif gpa > 1.0:\n                    result.append('D+')\n                elif gpa > 0.7:\n                    result.append('D')\n                elif gpa > 0.0:\n                    result.append('D-')\n                else:\n                    result.append('E')\n            return result\n", "requirement analysis:\nThe function needs to accurately map GPAs to letter grades based on the provided table. It should handle edge cases such as exact GPA values and efficiently process lists of varying lengths.\nrequirement pool:\n- Implement GPA to letter grade conversion logic\n- Design a user-friendly interface for input and output\n- Optimize the function for performance with large datasets\n- Include error handling for invalid GPA inputs\n- Provide documentation for the grading algorithm\nWe will implement a simple function to convert GPAs to letter grades using conditional statements. The function will iterate over the list of GPAs and map each GPA to its corresponding letter grade based on the provided table. We will use Python's built-in capabilities to handle the list processing efficiently, ensuring the function can handle large datasets. Additionally, we will include error handling for invalid GPA inputs and provide documentation for the grading algorithm.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: GPA stands for Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically measured on a scale from 0.0 to 4.0.\n\n    'Letter grade'\n    Explanation: A letter grade is a traditional method of evaluating a student's performance, typically ranging from A+ to E, with A+ being the highest and E being the lowest.\n\n# [phrase showing quantity relationship]\n    '> 3.7': means any GPA greater than 3.7 but less than or equal to 4.0 should be assigned an 'A'.\n    '> 3.3': means any GPA greater than 3.3 but less than or equal to 3.7 should be assigned an 'A-'.\n    '> 3.0': means any GPA greater than 3.0 but less than or equal to 3.3 should be assigned a 'B+'.\n    '> 2.7': means any GPA greater than 2.7 but less than or equal to 3.0 should be assigned a 'B'.\n    '> 2.3': means any GPA greater than 2.3 but less than or equal to 2.7 should be assigned a 'B-'.\n    '> 2.0': means any GPA greater than 2.0 but less than or equal to 2.3 should be assigned a 'C+'.\n    '> 1.7': means any GPA greater than 1.7 but less than or equal to 2.0 should be assigned a 'C'.\n    '> 1.3': means any GPA greater than 1.3 but less than or equal to 1.7 should be assigned a 'C-'.\n    '> 1.0': means any GPA greater than 1.0 but less than or equal to 1.3 should be assigned a 'D+'.\n    '> 0.7': means any GPA greater than 0.7 but less than or equal to 1.0 should be assigned a 'D'.\n    '> 0.0': means any GPA greater than 0.0 but less than or equal to 0.7 should be assigned a 'D-'.\n    '0.0': means a GPA of exactly 0.0 should be assigned an 'E'.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Iterate over each GPA in the list.\n    - For each GPA, use conditional statements to determine the corresponding letter grade based on the provided table.\n    - Append the determined letter grade to a new list.\n    - Return the list of letter grades.\n\n# [edge case] \n    numerical_letter_grade([4.0]) = ['A+']\n    Explanation: A GPA of exactly 4.0 corresponds to an 'A+'.\n\n    numerical_letter_grade([0.0]) = ['E']\n    Explanation: A GPA of exactly 0.0 corresponds to an 'E'.\n\n    numerical_letter_grade([3.7, 3.8]) = ['A-', 'A']\n    Explanation: A GPA of exactly 3.7 corresponds to an 'A-', while a GPA of 3.8 corresponds to an 'A'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the conditional statements in the original logic.\n\n", "requirement analysis:\nThe function should accurately map GPA scores to letter grades based on the provided table. It should handle edge cases such as exact GPA values and efficiently process large lists.\nrequirement pool:\n- Implement GPA to letter grade conversion function\n- Design a simple and intuitive user interface\n- Optimize performance for large datasets\n- Include error handling for invalid inputs\n- Provide documentation and examples for users\nWe will implement a function that maps GPA scores to letter grades using a simple if-elif-else structure. This approach ensures clarity and efficiency, especially for large lists. We will use Python's built-in capabilities without additional libraries, as the task is straightforward and does not require complex data processing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically measured on a scale of 0 to 4.0.\n\n    'Letter grade'\n    Explanation: A system of grading students' academic performance using letters (A, B, C, D, E) to represent different levels of achievement.\n\n# [phrase showing quantity relationship]\n    '> 3.7': means GPA greater than 3.7 corresponds to an 'A' grade.\n    '> 3.3': means GPA greater than 3.3 corresponds to an 'A-' grade.\n    '> 3.0': means GPA greater than 3.0 corresponds to a 'B+' grade.\n    '> 2.7': means GPA greater than 2.7 corresponds to a 'B' grade.\n    '> 2.3': means GPA greater than 2.3 corresponds to a 'B-' grade.\n    '> 2.0': means GPA greater than 2.0 corresponds to a 'C+' grade.\n    '> 1.7': means GPA greater than 1.7 corresponds to a 'C' grade.\n    '> 1.3': means GPA greater than 1.3 corresponds to a 'C-' grade.\n    '> 1.0': means GPA greater than 1.0 corresponds to a 'D+' grade.\n    '> 0.7': means GPA greater than 0.7 corresponds to a 'D' grade.\n    '> 0.0': means GPA greater than 0.0 corresponds to a 'D-' grade.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Initialize an empty list to store the letter grades.\n    - Iterate over each GPA in the input list.\n    - Use if-elif-else statements to determine the corresponding letter grade for each GPA based on the given table.\n    - Append the determined letter grade to the list of letter grades.\n    - Return the list of letter grades.\n\n# [edge case] \n    numerical_letter_grade([4.0]) = ['A+']\n    Explanation: A GPA of exactly 4.0 corresponds directly to an 'A+' grade.\n\n    numerical_letter_grade([0.0]) = ['E']\n    Explanation: A GPA of exactly 0.0 corresponds directly to an 'E' grade.\n\n    numerical_letter_grade([3.7]) = ['A-']\n    Explanation: A GPA of exactly 3.7 is greater than 3.3 but not greater than 3.7, so it corresponds to an 'A-' grade.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the if-elif-else structure in the original logic.\n", "requirement analysis:\nThe function should accurately map GPA values to letter grades based on the provided table. It should handle both exact and range-based GPA values efficiently. The function should be able to process a list of GPAs and return a corresponding list of letter grades.\nrequirement pool:\n- Implement the GPA to letter grade conversion function.\n- Design a user-friendly interface for inputting GPAs.\n- Ensure the function handles edge cases and exact GPA values.\n- Optimize the function for performance with large datasets.\n- Provide documentation and examples for users.\nWe will implement a simple Python function that maps GPA values to letter grades based on the provided table. The function will handle both exact and range-based GPA values efficiently. We will use a list of tuples to define the GPA thresholds and corresponding letter grades, which allows for easy iteration and comparison. The function will be optimized for performance to handle large datasets by using a straightforward loop and conditional checks.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA': Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically on a scale from 0.0 to 4.0.\n    'Letter grade': A representation of a student's performance, typically ranging from A+ to E, with A+ being the highest.\n\n# [phrase showing quantity relationship]\n    '> 3.7': GPA greater than 3.7 corresponds to an 'A' grade.\n    '> 3.3': GPA greater than 3.3 corresponds to an 'A-' grade.\n    '> 3.0': GPA greater than 3.0 corresponds to a 'B+' grade.\n    '> 2.7': GPA greater than 2.7 corresponds to a 'B' grade.\n    '> 2.3': GPA greater than 2.3 corresponds to a 'B-' grade.\n    '> 2.0': GPA greater than 2.0 corresponds to a 'C+' grade.\n    '> 1.7': GPA greater than 1.7 corresponds to a 'C' grade.\n    '> 1.3': GPA greater than 1.3 corresponds to a 'C-' grade.\n    '> 1.0': GPA greater than 1.0 corresponds to a 'D+' grade.\n    '> 0.7': GPA greater than 0.7 corresponds to a 'D' grade.\n    '> 0.0': GPA greater than 0.0 corresponds to a 'D-' grade.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Define a list of tuples where each tuple contains a GPA threshold and its corresponding letter grade.\n    - Iterate over the list of GPAs provided as input.\n    - For each GPA, iterate over the list of tuples and check which range the GPA falls into.\n    - Append the corresponding letter grade to the result list.\n    - Return the result list.\n\n# [edge case] \n    numerical_letter_grade([4.0, 0.0]) = ['A+', 'E']\n    Explanation: The GPA of 4.0 corresponds exactly to an 'A+', and the GPA of 0.0 corresponds exactly to an 'E'.\n    \n    numerical_letter_grade([3.7, 2.7, 1.7]) = ['A-', 'B', 'C']\n    Explanation: The GPA of 3.7 is greater than 3.3 but not greater than 3.7, so it corresponds to an 'A-'. Similarly, 2.7 corresponds to a 'B', and 1.7 corresponds to a 'C'.\n    \n    numerical_letter_grade([2.5, 1.5, 0.5]) = ['B-', 'C-', 'D']\n    Explanation: The GPA of 2.5 is greater than 2.3 but not greater than 2.7, so it corresponds to a 'B-'. Similarly, 1.5 corresponds to a 'C-', and 0.5 corresponds to a 'D'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the original logic using conditional checks for each range in the table.\n\n", "requirement analysis:\nThe function needs to map GPA values to corresponding letter grades based on a predefined scale. It should handle edge cases such as exact GPA values and ensure that the output is consistent with the grading table provided.\nrequirement pool:\n- Implement the GPA to letter grade conversion logic\n- Optimize the function for performance with large input lists\n- Provide clear documentation and examples\n- Include error handling for invalid GPA values\n- Ensure compatibility with different Python versions\nWe will implement a simple function that maps GPA values to letter grades using a predefined scale. The function will handle edge cases by using conditional statements to ensure accurate mapping. We will use Python's built-in capabilities for efficient list processing to optimize performance for large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA': Grade Point Average, a numerical representation of a student's academic performance.\n    'Letter grade': A symbolic representation of a student's performance, typically ranging from A+ to E.\n\n# [phrase showing quantity relationship]\n    '>': Indicates that the GPA must be greater than the specified value to qualify for a particular letter grade.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Create a function that takes a list of GPAs as input.\n    2. Initialize an empty list to store the corresponding letter grades.\n    3. Iterate through each GPA in the input list.\n    4. Use conditional statements to map each GPA to its corresponding letter grade based on the predefined scale.\n    5. Append the mapped letter grade to the list.\n    6. Return the list of letter grades.\n\n# [edge case] \n    numerical_letter_grade([4.0, 0.0]) = ['A+', 'E']\n    Explanation: GPA 4.0 maps to 'A+' and GPA 0.0 maps to 'E'.\n    \n    numerical_letter_grade([3.7, 3.3, 3.0]) = ['A', 'A-', 'B+']\n    Explanation: GPA 3.7 maps to 'A', GPA 3.3 maps to 'A-', and GPA 3.0 maps to 'B+'.\n    \n    numerical_letter_grade([2.7, 1.7, 0.7]) = ['B', 'C', 'D']\n    Explanation: GPA 2.7 maps to 'B', GPA 1.7 maps to 'C', and GPA 0.7 maps to 'D'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the conditional statements in the original logic.\n", "requirement analysis:\nThe function should accurately map GPAs to letter grades based on the provided table. It should handle edge cases such as exact GPA values and ensure performance efficiency for large input lists.\nrequirement pool:\n- Implement GPA to letter grade conversion function\n- Design a user-friendly interface for inputting GPAs\n- Optimize the function for performance with large datasets\n- Include error handling for invalid GPA inputs\n- Provide documentation and examples for users\nWe will implement a simple function to convert GPAs to letter grades based on the provided table. The function will iterate over the list of GPAs and map each GPA to its corresponding letter grade using conditional statements. We will use Python's built-in capabilities to ensure the function is efficient and can handle large lists of GPAs. The function will assume all inputs are valid GPAs as per the requirement analysis.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: GPA stands for Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically on a scale from 0.0 to 4.0.\n\n    'Letter grade'\n    Explanation: Letter grades are a way of representing academic performance, typically ranging from A+ to E, with A+ being the highest and E being the lowest.\n\n# [phrase showing quantity relationship]\n    '> 3.7': means GPA greater than 3.7 corresponds to a letter grade of 'A'.\n    '> 3.3': means GPA greater than 3.3 corresponds to a letter grade of 'A-'.\n    '> 3.0': means GPA greater than 3.0 corresponds to a letter grade of 'B+'.\n    '> 2.7': means GPA greater than 2.7 corresponds to a letter grade of 'B'.\n    '> 2.3': means GPA greater than 2.3 corresponds to a letter grade of 'B-'.\n    '> 2.0': means GPA greater than 2.0 corresponds to a letter grade of 'C+'.\n    '> 1.7': means GPA greater than 1.7 corresponds to a letter grade of 'C'.\n    '> 1.3': means GPA greater than 1.3 corresponds to a letter grade of 'C-'.\n    '> 1.0': means GPA greater than 1.0 corresponds to a letter grade of 'D+'.\n    '> 0.7': means GPA greater than 0.7 corresponds to a letter grade of 'D'.\n    '> 0.0': means GPA greater than 0.0 corresponds to a letter grade of 'D-'.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Iterate over each GPA in the list.\n    - Use conditional statements to map each GPA to its corresponding letter grade based on the provided table.\n    - Append the mapped letter grade to a result list.\n    - Return the result list containing all letter grades.\n\n# [edge case] \n    numerical_letter_grade([4.0, 0.0]) = ['A+', 'E']\n    Explanation: The GPA of 4.0 maps directly to 'A+', and the GPA of 0.0 maps directly to 'E'.\n\n    numerical_letter_grade([3.7, 2.7, 1.7]) = ['A', 'B', 'C']\n    Explanation: The GPA of 3.7 maps to 'A', the GPA of 2.7 maps to 'B', and the GPA of 1.7 maps to 'C'.\n\n    numerical_letter_grade([3.5, 2.5, 1.5]) = ['A-', 'B-', 'C-']\n    Explanation: The GPA of 3.5 maps to 'A-', the GPA of 2.5 maps to 'B-', and the GPA of 1.5 maps to 'C-'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the conditional logic mapping GPAs to letter grades directly based on the table provided.\n\n"], "scores": [1.0, 1.0, 1.0, 1.0, 0.3962, 0.3962, 0.7453, 0.3491, 0.3491, 0.3491], "pass_results": [true, true, true, true, false, false, false, false, false, false], "pass_test_cases_num": [106, 106, 106, 106, 42, 42, 79, 37, 37, 37], "completion": "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPAs to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the input GPAs.\n    \"\"\"\n    # Define the mapping of GPA ranges to letter grades\n    gpa_to_letter = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-'),\n    ]\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Determine the letter grade for the current GPA\n        for threshold, letter in gpa_to_letter:\n            if gpa >= threshold:\n                result.append(letter)\n                break\n        else:\n            # If GPA is less than 0.0, assign 'E'\n            result.append('E')\n\n    return result\n", "passed": true, "pass": true, "pass_num": 4, "round": 178, "mutate_method": "expand_one2two", "parent_index": 71}
