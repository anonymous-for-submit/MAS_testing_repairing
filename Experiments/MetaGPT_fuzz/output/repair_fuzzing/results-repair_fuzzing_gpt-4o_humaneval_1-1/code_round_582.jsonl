{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. These are the only acceptable words for numbers in the input string. Make sure that no other number words are included in the input string. Return the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": ["def check(sort_numbers):\n\tassert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one\") == 'one'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four three six\") == 'three four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one six four\") == 'one four six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two\") == 'one two'", "def check(sort_numbers):\n\tassert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four five five one one\") == 'one one four five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four zero two five\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight\") == 'eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six three\") == 'three six'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero\") == 'zero seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four three zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven\") == 'seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six nine three\") == 'three six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one nine three\") == 'one three four nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "def check(sort_numbers):\n\tassert sort_numbers('three five nine') == 'three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three\") == 'zero three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one seven\") == 'one four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six\") == 'six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"four two seven\") == 'two four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three four five\") == 'three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five four zero\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three seven two\") == 'two three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four six four one\") == 'one four four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight six three\") == 'three six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three five\") == 'three five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four\") == 'four'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero four one\") == 'zero one four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine\") == 'nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three\") == 'three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three four zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five\") == 'five'", "def check(sort_numbers):\n\tassert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers('three') == 'three'", "def check(sort_numbers):\n\tassert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six\") == 'six'", "def check(sort_numbers):\n\tassert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five\") == 'five eight'", "def check(sort_numbers):\n\tassert sort_numbers('') == ''", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine nine five\") == 'five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three\") == 'three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero\") == 'zero'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine zero\") == 'zero nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one six two seven\") == 'one two six seven'"], "test_case_list": ["assert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "assert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "assert sort_numbers(\"one\") == 'one'", "assert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "assert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "assert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "assert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "assert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "assert sort_numbers(\"four four three six\") == 'three four four six'", "assert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "assert sort_numbers(\"nine one six four\") == 'one four six nine'", "assert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "assert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "assert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "assert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "assert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "assert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "assert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "assert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "assert sort_numbers(\"one two\") == 'one two'", "assert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "assert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "assert sort_numbers(\"four five five one one\") == 'one one four five five'", "assert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "assert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "assert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "assert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "assert sort_numbers(\"four zero two five\") == 'zero two four five'", "assert sort_numbers(\"eight\") == 'eight'", "assert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "assert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "assert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "assert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "assert sort_numbers(\"six three\") == 'three six'", "assert sort_numbers(\"seven zero\") == 'zero seven'", "assert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "assert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "assert sort_numbers(\"four three zero\") == 'zero three four'", "assert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "assert sort_numbers(\"seven\") == 'seven'", "assert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "assert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "assert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "assert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "assert sort_numbers(\"six nine three\") == 'three six nine'", "assert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "assert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "assert sort_numbers(\"four one nine three\") == 'one three four nine'", "assert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "assert sort_numbers('three five nine') == 'three five nine'", "assert sort_numbers(\"zero three\") == 'zero three'", "assert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "assert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "assert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "assert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "assert sort_numbers(\"four one seven\") == 'one four seven'", "assert sort_numbers(\"seven six\") == 'six seven'", "assert sort_numbers(\"four two seven\") == 'two four seven'", "assert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "assert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "assert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "assert sort_numbers(\"nine three four five\") == 'three four five nine'", "assert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "assert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "assert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "assert sort_numbers(\"two five four zero\") == 'zero two four five'", "assert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "assert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "assert sort_numbers(\"three seven two\") == 'two three seven'", "assert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "assert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "assert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "assert sort_numbers(\"four four six four one\") == 'one four four four six'", "assert sort_numbers(\"eight six three\") == 'three six eight'", "assert sort_numbers(\"five three five\") == 'three five five'", "assert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "assert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "assert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "assert sort_numbers(\"four\") == 'four'", "assert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "assert sort_numbers(\"six zero four one\") == 'zero one four six'", "assert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "assert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "assert sort_numbers(\"nine\") == 'nine'", "assert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "assert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "assert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "assert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "assert sort_numbers(\"three\") == 'three'", "assert sort_numbers(\"three four zero\") == 'zero three four'", "assert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "assert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "assert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "assert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "assert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "assert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "assert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "assert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "assert sort_numbers(\"five\") == 'five'", "assert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "assert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "assert sort_numbers('three') == 'three'", "assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "assert sort_numbers(\"six\") == 'six'", "assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "assert sort_numbers(\"eight five\") == 'five eight'", "assert sort_numbers('') == ''", "assert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "assert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "assert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "assert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "assert sort_numbers(\"nine nine five\") == 'five nine nine'", "assert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "assert sort_numbers(\"seven three\") == 'three seven'", "assert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "assert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "assert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "assert sort_numbers(\"zero\") == 'zero'", "assert sort_numbers(\"nine zero\") == 'zero nine'", "assert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "assert sort_numbers(\"one six two seven\") == 'one two six seven'"], "nl": " Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    ", "func": "def sort_numbers(numbers: str) -> str:", "examples": ">>> sort_numbers('three one five')\n    'one three five'\n    ", "repair_prompt": ["def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. These are the only acceptable words for numbers in the input string. Make sure that no other number words are included in the input string. Return the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. These are valid options for input words. These are the only acceptable words for numbers in the input string. Make sure that no other number words are included in the input string. Return the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine', and valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. These are the only acceptable words for numbers in the input string. Make sure that no other number words are included in the input string. Return the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n    'one three five'\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of number words from 'zero' to 'nine'.\n\n    Args:\n        numbers (str): A space-delimited string of number words ('zero' to 'nine').\n\n    Returns:\n        str: A space-delimited string of sorted number words.\n\n    Raises:\n        ValueError: If the input contains invalid number words.\n    \"\"\"\n    # Edge case: If the input string is empty or only contains spaces, return an empty string.\n    if not numbers.strip():\n        return ''\n\n    # Define the set of valid number words.\n    valid_words = {'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'}\n\n    # Split the input string into a list of words.\n    words = numbers.split()\n\n    # Validate each word to ensure it is one of the accepted number words.\n    for word in words:\n        if word not in valid_words:\n            raise ValueError(f\"Invalid number word: {word}\")\n\n    # Map each word to its corresponding numerical value.\n    num_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Sort the list of words based on their numerical values.\n    sorted_numbers = sorted(words, key=lambda x: num_map[x])\n\n    # Join the sorted words into a space-delimited string and return it.\n    return ' '.join(sorted_numbers)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of number words in ascending order.\n    \n    Args:\n        numbers (str): A space-delimited string of number words.\n        \n    Returns:\n        str: A space-delimited string of sorted number words or an error message if invalid words are present.\n    \"\"\"\n    # Define a dictionary to map number words to their corresponding numeric values\n    valid_numbers = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Handle the edge case of an empty input string\n    if not numbers:\n        return ''\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Identify any invalid words in the input\n    invalid_words = [word for word in words if word not in valid_numbers]\n    \n    # If there are invalid words, return an error message\n    if invalid_words:\n        return f\"Invalid input: {' '.join(invalid_words)}\"\n    \n    # Convert the valid number words to their numeric values and sort them\n    sorted_numbers = sorted(words, key=lambda x: valid_numbers[x])\n    \n    # Join the sorted number words into a single string separated by spaces\n    return ' '.join(sorted_numbers)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of number words from 'zero' to 'nine'.\n    \n    Args:\n        numbers (str): A space-delimited string of number words from 'zero' to 'nine'.\n        \n    Returns:\n        str: A string with the number words sorted from smallest to largest.\n             Returns an error message if any invalid number words are detected.\n    \"\"\"\n    # Define a mapping from number words to their numerical values\n    valid_numbers = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Handle edge case for empty input\n    if not numbers.strip():\n        return ''\n    \n    # Split the input string into a list of words\n    words = numbers.split()\n    \n    # Validate each word to ensure it is a valid number word\n    if any(word not in valid_numbers for word in words):\n        return \"Error: Invalid number word detected.\"\n    \n    # Sort the list of words based on their numerical value\n    sorted_numbers = sorted(words, key=lambda x: valid_numbers[x])\n    \n    # Join the sorted words into a space-delimited string and return\n    return ' '.join(sorted_numbers)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of number words from 'zero' to 'nine' numerically.\n\n    Args:\n        numbers (str): A space-delimited string of number words.\n\n    Returns:\n        str: A space-delimited string of the same number words sorted numerically.\n    \"\"\"\n    # Mapping of number words to their numeric values\n    number_word_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Mapping of numeric values back to number words\n    value_to_number_word = {v: k for k, v in number_word_to_value.items()}\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Filter out invalid words and convert valid words to their numeric values\n    numeric_values = [number_word_to_value[word] for word in words if word in number_word_to_value]\n\n    # Sort the numeric values\n    sorted_numeric_values = sorted(numeric_values)\n\n    # Map the sorted numeric values back to their corresponding words\n    sorted_words = [value_to_number_word[value] for value in sorted_numeric_values]\n\n    # Join the sorted words into a space-delimited string and return it\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of number words from 'zero' to 'nine' in ascending order.\n    \n    Args:\n        numbers (str): A space-delimited string of number words.\n        \n    Returns:\n        str: A space-delimited string of sorted number words or an error message for invalid inputs.\n    \"\"\"\n    # Dictionary to map number words to their numeric values\n    valid_numbers = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Handle edge case for empty input\n    if not numbers.strip():\n        return ''\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Validate each word against the dictionary keys\n    numeric_values = []\n    for word in words:\n        if word not in valid_numbers:\n            return 'Error: Invalid input'\n        numeric_values.append(valid_numbers[word])\n    \n    # Sort the numeric values in ascending order\n    numeric_values.sort()\n    \n    # Map the sorted numeric values back to their corresponding number words\n    sorted_words = [list(valid_numbers.keys())[list(valid_numbers.values()).index(value)] for value in numeric_values]\n    \n    # Join the sorted number words into a space-delimited string and return it\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of number words ('zero' to 'nine') in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of number words.\n\n    Returns:\n        str: A space-delimited string of sorted number words.\n    \"\"\"\n    # Dictionary mapping number words to their numeric values\n    number_word_to_value = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Validate and filter the words to ensure they are valid number words\n    valid_words = [word for word in words if word in number_word_to_value]\n\n    # Convert each valid word to its numeric value\n    numeric_values = [number_word_to_value[word] for word in valid_words]\n\n    # Sort the numeric values\n    sorted_numeric_values = sorted(numeric_values)\n\n    # Convert the sorted numeric values back to their corresponding words\n    sorted_words = [list(number_word_to_value.keys())[list(number_word_to_value.values()).index(value)] for value in sorted_numeric_values]\n\n    # Join the sorted words into a single string separated by spaces\n    sorted_string = ' '.join(sorted_words)\n\n    return sorted_string\n\n# Example usage:\n# print(sort_numbers('zero nine eight'))  # Output: 'zero eight nine'\n# print(sort_numbers('five four three two one zero'))  # Output: 'zero one two three four five'\n# print(sort_numbers('nine nine nine'))  # Output: 'nine nine nine'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Sorts number words from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of number words from 'zero' to 'nine'.\n\n    Returns:\n        str: A space-delimited string of sorted number words. Returns an empty string for invalid inputs.\n    \"\"\"\n    # Dictionary mapping number words to their numeric values\n    num_dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Handle empty input string\n    if not numbers:\n        return ''\n\n    # Split the input string into a list of words\n    words = numbers.split()\n\n    # Validate that each word is a valid number word\n    if any(word not in num_dict for word in words):\n        return ''  # Return an empty string for invalid inputs\n\n    # Convert the list of words into a list of numeric values using the dictionary\n    numeric_values = [num_dict[word] for word in words]\n\n    # Sort the list of numeric values\n    sorted_numeric_values = sorted(numeric_values)\n\n    # Convert the sorted list of numeric values back into words using the dictionary\n    sorted_words = [list(num_dict.keys())[list(num_dict.values()).index(value)] for value in sorted_numeric_values]\n\n    # Join the sorted words into a single string separated by spaces and return it\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of number words ('zero' to 'nine') in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of number words.\n\n    Returns:\n        str: A space-delimited string of sorted number words.\n    \"\"\"\n    # Define a mapping from number words to their corresponding numerical values\n    number_word_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Define a reverse mapping from numerical values to number words\n    value_to_number_word = {v: k for k, v in number_word_to_value.items()}\n\n    # Split the input string into a list of words\n    words = numbers.split()\n\n    # Validate the input to ensure all words are valid number words\n    for word in words:\n        if word not in number_word_to_value:\n            raise ValueError(f\"Invalid input: '{word}' is not a valid number word.\")\n\n    # Map the words to their corresponding numerical values\n    numerical_values = [number_word_to_value[word] for word in words]\n\n    # Sort the numerical values\n    sorted_numerical_values = sorted(numerical_values)\n\n    # Map the sorted numerical values back to their word form\n    sorted_words = [value_to_number_word[value] for value in sorted_numerical_values]\n\n    # Join the sorted words into a space-delimited string\n    sorted_string = ' '.join(sorted_words)\n\n    return sorted_string\n\n# Example usage:\n# print(sort_numbers('nine eight seven six five four three two one zero'))\n# Output: 'zero one two three four five six seven eight nine'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of number words ('zero' to 'nine').\n\n    Args:\n        numbers (str): A space-delimited string of number words.\n\n    Returns:\n        str: A space-delimited string of sorted number words.\n    \"\"\"\n    # Mapping of number words to their corresponding numerical values\n    number_word_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Mapping of numerical values back to their corresponding number words\n    value_to_number_word = {v: k for k, v in number_word_to_value.items()}\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Validate the input to ensure it only contains acceptable number words\n    for word in words:\n        if word not in number_word_to_value:\n            raise ValueError(f\"Invalid input: '{word}' is not a valid number word.\")\n\n    # Convert the input words to their numerical values using the mapping\n    numerical_values = [number_word_to_value[word] for word in words]\n\n    # Sort the numerical values\n    sorted_values = sorted(numerical_values)\n\n    # Map the sorted numerical values back to their corresponding words\n    sorted_words = [value_to_number_word[value] for value in sorted_values]\n\n    # Return the sorted words as a space-delimited string\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Sorts a space-delimited string of number words from 'zero' to 'nine'.\n\n    Args:\n        numbers (str): A space-delimited string of number words.\n\n    Returns:\n        str: A space-delimited string of sorted number words.\n\n    Raises:\n        ValueError: If the input contains invalid number words.\n    \"\"\"\n    # Mapping of number words to their corresponding numeric values\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Set of valid number words\n    valid_words = set(number_map.keys())\n    \n    # Split the input string into a list of words\n    words = numbers.split()\n    \n    # Validate that each word in the list is a valid number word\n    if not all(word in valid_words for word in words):\n        raise ValueError('Input contains invalid number words.')\n    \n    # Sort the list of words based on their numeric values using the dictionary\n    sorted_words = sorted(words, key=lambda word: number_map[word])\n    \n    # Join the sorted list back into a space-delimited string\n    return ' '.join(sorted_words)\n"], "plans": ["requirement analysis:\nThe function should accurately sort number words from 'zero' to 'nine' in ascending order. It must handle only valid inputs and return sorted results efficiently. Invalid inputs should be managed gracefully, possibly with error messages or exceptions.\nrequirement pool:\n- Implement sorting logic for number words\n- Validate input to ensure only accepted number words are processed\n- Optimize performance for quick sorting\n- Develop error handling for invalid inputs\n- Enhance user interface for better experience\nWe will implement a function that sorts number words from 'zero' to 'nine'. The function will validate the input to ensure only accepted number words are processed. For invalid inputs, the function will raise a ValueError with a descriptive error message. We will use Python's built-in sorting capabilities for efficient sorting.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces, and each word represents a number from 'zero' to 'nine'.\n\n    'valid choices'\n    Explanation: The input string can only contain the words 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', and 'nine'. Any other words are considered invalid.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': means sorting the numbers in ascending order, starting from the lowest value.\n    \n    'largest': means sorting the numbers in ascending order, ending with the highest value.\n\n# [code logic]\n    1. Split the input string into a list of words.\n    2. Validate each word to ensure it is one of the accepted number words.\n    3. Convert each word to its corresponding numerical value using a dictionary mapping.\n    4. Sort the list of numerical values.\n    5. Convert the sorted numerical values back to their corresponding words.\n    6. Join the sorted words into a space-delimited string and return it.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string since there are no numbers to sort.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The input contains valid number words, and they should be sorted from smallest to largest.\n\n    sort_numbers('five four three two one zero') = 'zero one two three four five'\n    Explanation: The input contains all valid number words in reverse order, and they should be sorted from smallest to largest.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not numbers.strip():\n            return ''\n        valid_words = {'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'}\n        words = numbers.split()\n        for word in words:\n            if word not in valid_words:\n                raise ValueError(f\"Invalid number word: {word}\")\n        num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n        sorted_numbers = sorted(words, key=lambda x: num_map[x])\n        return ' '.join(sorted_numbers)\n", "requirement analysis:\nThe function should take a string of number words, validate them, and return them sorted. It must handle invalid inputs gracefully and ensure performance efficiency.\nrequirement pool:\n- Implement the main sorting functionality.\n- Validate input to ensure only valid number words are processed.\n- Optimize the function for performance.\n- Handle edge cases and provide meaningful error messages.\n- Design a simple and intuitive user interface for input.\nWe will implement a function that takes a string of number words, validates them against a predefined list of valid number words, and sorts them numerically. We will use Python's built-in sorting capabilities for performance efficiency. The function will handle invalid inputs by returning an error message indicating which words are invalid.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where each word is separated by a space, and each word represents a number from 'zero' to 'nine'.\n\n    'valid choices'\n    Explanation: The input string can only contain the words 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', and 'nine'. No other words are allowed.\n\n# [phrase showing quantity relationship]\n    'smallest to largest': This indicates that the numbers should be sorted in ascending order.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Define a dictionary to map number words to their corresponding numeric values.\n2. Split the input string into individual words.\n3. Validate each word against the predefined list of valid number words.\n4. Convert the valid number words to their numeric values using the dictionary.\n5. Sort the list of numeric values.\n6. Convert the sorted numeric values back to their corresponding number words.\n7. Join the sorted number words into a single string separated by spaces.\n8. Return the sorted string.\n\n# [edge case]\n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string since there are no numbers to sort.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The input contains valid number words, and they should be sorted in ascending order.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All words are the same, so the sorted order remains unchanged.\n\n# [extra code for edge case]\n    We need extra code to handle invalid inputs.\n        valid_numbers = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                         'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n        \n        def sort_numbers(numbers: str) -> str:\n            if not numbers:\n                return ''\n            \n            words = numbers.split()\n            invalid_words = [word for word in words if word not in valid_numbers]\n            \n            if invalid_words:\n                return f\"Invalid input: {' '.join(invalid_words)}\"\n            \n            sorted_numbers = sorted(words, key=lambda x: valid_numbers[x])\n            return ' '.join(sorted_numbers)\n", "requirement analysis:\nThe requirement is to develop a function that sorts a space-delimited string of number words from 'zero' to 'nine'. The function must ensure that only valid number words are processed and return them in numerical order.\nrequirement pool:\n- Implement the sorting logic for number words.\n- Validate input to ensure only valid number words are accepted.\n- Optimize the function for performance with large inputs.\n- Design a simple and intuitive user interface.\n- Provide error messages for invalid inputs.\nWe will implement a function that sorts a space-delimited string of number words from 'zero' to 'nine'. The function will validate the input to ensure only valid number words are processed. We will use Python's built-in sorting capabilities for efficient performance. The function will return an error message if any invalid number words are detected.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces.\n\n    'numberals from \"zero\" to \"nine\"'\n    Explanation: The input consists of words representing numbers from zero to nine.\n\n    'sorted from smallest to largest'\n    Explanation: The output should be the input numbers sorted in ascending order based on their numerical value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': means the lowest numerical value\n    'largest': means the highest numerical value\n\n# [code logic]\n    1. Split the input string into a list of words.\n    2. Validate each word to ensure it is a valid number word ('zero' to 'nine').\n    3. Map each word to its corresponding numerical value.\n    4. Sort the list of numerical values.\n    5. Map the sorted numerical values back to their corresponding words.\n    6. Join the sorted words into a space-delimited string and return.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The words 'zero', 'nine', and 'eight' are valid and should be sorted numerically.\n\n    sort_numbers('five four three two one zero') = 'zero one two three four five'\n    Explanation: All valid number words are present and should be sorted from smallest to largest.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not numbers.strip():\n            return ''\n        valid_numbers = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n        words = numbers.split()\n        if any(word not in valid_numbers for word in words):\n            return \"Error: Invalid number word detected.\"\n        sorted_numbers = sorted(words, key=lambda x: valid_numbers[x])\n        return ' '.join(sorted_numbers)\n", "requirement analysis:\nThe function should accurately sort number words from 'zero' to 'nine'. It must handle invalid inputs by either ignoring them or providing an error message. The sorting should be efficient to ensure quick processing.\nrequirement pool:\n- Implement the main sorting algorithm for number words.\n- Develop error handling for invalid inputs.\n- Optimize performance for faster sorting.\n- Enhance user interface for better experience.\n- Include comprehensive documentation for users.\nWe will implement a function that maps the number words to their corresponding numeric values, sort them, and then map them back to words. We will use a dictionary for mapping and handle invalid inputs by ignoring them, as this approach aligns with the requirement for efficient processing. The function will be simple and efficient, leveraging Python's built-in sorting capabilities.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces, and each word represents a number from 'zero' to 'nine'.\n\n    'valid choices'\n    Explanation: Only the words 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', and 'nine' are acceptable in the input string.\n\n# [phrase showing quantity relationship]\n    'smallest to largest'\n    Explanation: The numbers need to be sorted in ascending order based on their numeric value.\n\n# [degree adverb]\n    'smallest': Refers to the lowest numeric value in the list.\n    'largest': Refers to the highest numeric value in the list.\n\n# [code logic]\n    1. Create a dictionary to map number words to their numeric values.\n    2. Split the input string into individual words.\n    3. Filter out any invalid words that are not in the dictionary.\n    4. Convert valid words to their numeric values using the dictionary.\n    5. Sort the numeric values.\n    6. Map the sorted numeric values back to their corresponding words.\n    7. Join the sorted words into a space-delimited string and return it.\n\n# [edge case]\n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The words 'zero', 'nine', and 'eight' are valid and should be sorted numerically as 0, 8, 9.\n\n    sort_numbers('five four three two one zero') = 'zero one two three four five'\n    Explanation: All valid number words are present and should be sorted from smallest (0) to largest (5).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of filtering invalid inputs and sorting valid ones will naturally handle these cases.\n", "requirement analysis:\nThe function should accurately sort number words from 'zero' to 'nine'. It must handle only valid inputs and return sorted results efficiently. Invalid inputs should be managed gracefully.\nrequirement pool:\n- Implement sorting logic for number words\n- Handle invalid inputs gracefully\n- Optimize performance for quick processing\n- Enhance user experience with clear error messages\n- Ensure compatibility with various input formats\nWe will implement a function that maps the number words to their corresponding numeric values, sort them, and then map them back to words. We will use a dictionary for mapping and handle invalid inputs by checking against the valid keys in the dictionary. The function will return an error message if any invalid input is detected.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces, and each word represents a number from 'zero' to 'nine'.\n\n    'valid choices'\n    Explanation: The input string can only contain the words 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', and 'nine'. Any other words are considered invalid.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': means that the numbers should be sorted in ascending order, starting from the smallest value.\n    \n    'largest': means that the numbers should be sorted in ascending order, ending with the largest value.\n\n# [code logic]\n    1. Create a dictionary to map number words to their numeric values.\n    2. Split the input string into individual words.\n    3. Validate each word against the dictionary keys to ensure they are valid number words.\n    4. Convert valid number words to their numeric values using the dictionary.\n    5. Sort the numeric values in ascending order.\n    6. Map the sorted numeric values back to their corresponding number words using the dictionary.\n    7. Join the sorted number words into a space-delimited string and return it.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string since there are no numbers to sort.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The input contains valid number words, which should be sorted numerically from smallest to largest.\n\n    sort_numbers('ten') = 'Error: Invalid input'\n    Explanation: The word 'ten' is not a valid choice according to the requirement, so the function should return an error message.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not numbers.strip():\n            return ''\n        valid_numbers = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n        words = numbers.split()\n        for word in words:\n            if word not in valid_numbers:\n                return 'Error: Invalid input'\n        # (other code for sorting and mapping back)\n", "requirement analysis:\nThe function should accurately sort a space-delimited string of number words from 'zero' to 'nine'. It must handle only these specific words and return them in numerical order. The function should be robust against invalid inputs and ensure quick processing.\nrequirement pool:\n- Implement sorting logic for number words\n- Validate input to ensure only allowed number words are processed\n- Optimize performance for sorting\n- Handle invalid inputs gracefully\n- Enhance user experience with clear error messages\nWe will implement a function that maps number words to their corresponding numeric values using a dictionary. The function will validate the input to ensure only allowed number words are processed, sort them based on their numeric values, and return the sorted number words as a string. We will use Python's built-in sorting capabilities for efficient processing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces.\n\n    'numberals from \"zero\" to \"nine\"'\n    Explanation: The input consists of words representing numbers from zero to nine, and only these words are valid.\n\n# [phrase showing quantity relationship]\n    'smallest to largest': means sorting the numbers in ascending order based on their numeric value.\n\n# [degree adverb] \n    'smallest': means the lowest numeric value in the list.\n    'largest': means the highest numeric value in the list.\n\n# [code logic]\n    1. Create a dictionary mapping number words to their numeric values.\n    2. Split the input string into individual words.\n    3. Validate that each word is a valid number word.\n    4. Convert each word to its numeric value using the dictionary.\n    5. Sort the numeric values.\n    6. Convert the sorted numeric values back to their corresponding words.\n    7. Join the sorted words into a single string separated by spaces.\n    8. Return the sorted string.\n\n# [edge case] \n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The input contains valid number words, and they are sorted from smallest (zero) to largest (nine).\n\n    sort_numbers('five four three two one zero') = 'zero one two three four five'\n    Explanation: The input contains all valid number words, and they are sorted from smallest (zero) to largest (five).\n\n    sort_numbers('nine nine nine') = 'nine nine nine'\n    Explanation: All numbers are the same, so the sorted order remains unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of validating and sorting based on numeric values will handle these cases correctly.\n", "requirement analysis:\nThe function should accurately sort number words from 'zero' to 'nine' in ascending order. It must handle only valid inputs and return a sorted string. Invalid inputs should be managed gracefully, ensuring robustness and user satisfaction.\nrequirement pool:\n- Implement the main sorting algorithm for number words.\n- Develop input validation to ensure only valid number words are processed.\n- Optimize the function for performance to handle large inputs efficiently.\n- Create a user-friendly interface for input and output display.\n- Implement error handling for invalid inputs.\nWe will implement a function that sorts number words from 'zero' to 'nine'. The function will validate inputs to ensure only valid number words are processed. We will use a dictionary to map number words to their numeric values for sorting. The function will handle invalid inputs gracefully by returning an error message or an empty string.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces.\n\n    'numberals from \"zero\" to \"nine\"'\n    Explanation: The input string consists of words representing numbers from zero to nine.\n\n    'sorted from smallest to largest'\n    Explanation: The output should be the input words sorted based on their numeric value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest to largest': means that the numbers should be sorted in ascending order based on their numeric value.\n\n# [code logic]\n1. Create a dictionary mapping each number word ('zero' to 'nine') to its corresponding numeric value (0 to 9).\n2. Split the input string into a list of words.\n3. Validate that each word in the list is a valid number word.\n4. Convert the list of words into a list of numeric values using the dictionary.\n5. Sort the list of numeric values.\n6. Convert the sorted list of numeric values back into words using the dictionary.\n7. Join the sorted words into a single string separated by spaces and return it.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string.\n\n    sort_numbers('zero nine eight') = 'eight nine zero'\n    Explanation: The words should be sorted based on their numeric values, resulting in 'zero eight nine'.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All words are the same, so the sorted order is the same as the input.\n\n# [extra code for edge case]\n    We need extra code to handle invalid inputs.\n        def sort_numbers(numbers: str) -> str:\n            num_dict = {\n                'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n            }\n            if not numbers:\n                return ''\n            words = numbers.split()\n            if any(word not in num_dict for word in words):\n                return ''  # or raise an error\n            sorted_numbers = sorted(words, key=lambda x: num_dict[x])\n            return ' '.join(sorted_numbers)\n", "requirement analysis:\nThe function should take a string of number words, validate them against a predefined list, and return them sorted. The focus is on ensuring input validity and efficient sorting.\nrequirement pool:\n- Implement sorting algorithm for number words\n- Validate input against allowed number words\n- Optimize performance for large inputs\n- Design intuitive user interface\n- Provide error messages for invalid inputs\nWe will implement a function that first validates the input string to ensure it contains only the allowed number words. Then, we will map these words to their corresponding numerical values, sort them, and map them back to their word form for output. We will use Python's built-in sorting capabilities for efficient performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces, and each word represents a number from 'zero' to 'nine'.\n\n    'valid choices'\n    Explanation: The input string can only contain the words 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', and 'nine'. No other words are allowed.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': means sorting the numbers in ascending order based on their numerical value.\n    \n    'largest': means sorting the numbers in ascending order, so the largest number will be at the end of the sorted list.\n\n# [code logic]\n    1. Validate the input string to ensure it contains only the allowed number words.\n    2. Map each word to its corresponding numerical value using a dictionary.\n    3. Sort the numerical values.\n    4. Map the sorted numerical values back to their word form.\n    5. Return the sorted words as a space-delimited string.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string since there are no numbers to sort.\n\n    sort_numbers('zero zero zero') = 'zero zero zero'\n    Explanation: All numbers are the same, so sorting does not change the order.\n\n    sort_numbers('nine eight seven six five four three two one zero') = 'zero one two three four five six seven eight nine'\n    Explanation: The input is in reverse order, and sorting will rearrange it to ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of validating input and sorting will naturally handle these cases.\n", "requirement analysis:\nThe function should accurately sort number words from 'zero' to 'nine'. It must validate the input to ensure only acceptable words are included. The output should be a space-delimited string of sorted number words.\nrequirement pool:\n- Implement sorting logic for number words\n- Validate input for correct number words\n- Optimize performance for sorting\n- Design intuitive user interface\n- Provide error messages for invalid input\nWe will implement a function that first validates the input to ensure it only contains acceptable number words ('zero' to 'nine'). Then, it will map these words to their corresponding numerical values, sort them, and map them back to words for the output. We will use Python's built-in sorting capabilities for efficiency.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The input string can only contain these specific words representing numbers.\n\n    'sorted from smallest to largest'\n    Explanation: The output should be the words arranged in order of their numerical value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': means the word representing the lowest numerical value should appear first in the sorted output.\n    \n    'largest': means the word representing the highest numerical value should appear last in the sorted output.\n\n# [code logic]\n1. Validate the input string to ensure it only contains acceptable number words ('zero' to 'nine').\n2. Create a mapping of these words to their corresponding numerical values.\n3. Convert the input words to their numerical values using the mapping.\n4. Sort the numerical values.\n5. Map the sorted numerical values back to their corresponding words.\n6. Return the sorted words as a space-delimited string.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string since there are no numbers to sort.\n\n    sort_numbers('zero zero zero') = 'zero zero zero'\n    Explanation: All numbers are the same, so sorting does not change their order.\n\n    sort_numbers('nine eight seven six five four three two one zero') = 'zero one two three four five six seven eight nine'\n    Explanation: The input contains all valid number words in reverse order, so sorting them results in ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of validating input and sorting will naturally handle these scenarios.\n", "requirement analysis:\nThe function should accurately sort number words from 'zero' to 'nine'. It must validate the input to ensure only acceptable words are included. The output should be a space-delimited string of sorted number words.\nrequirement pool:\n- Implement sorting logic for number words\n- Validate input for correct number words\n- Optimize performance for sorting\n- Design intuitive user interface\n- Ensure compatibility with various input formats\nWe will implement a function that sorts number words from 'zero' to 'nine'. The function will first validate the input to ensure only acceptable words are included. We will use a dictionary to map number words to their numeric values for sorting purposes. The sorted result will be converted back to number words and returned as a space-delimited string. The implementation will be simple and efficient, leveraging Python's built-in sorting capabilities.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces.\n\n    'numberals from \"zero\" to \"nine\"'\n    Explanation: The input string consists of words representing numbers from zero to nine.\n\n    'sorted from smallest to largest'\n    Explanation: The output should be the input words sorted based on their numeric value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest to largest': means sorting the numbers in ascending order based on their numeric value.\n\n# [code logic]\n1. Create a dictionary to map number words to their corresponding numeric values.\n2. Split the input string into a list of words.\n3. Validate that each word in the list is a valid number word.\n4. Sort the list of words based on their numeric values using the dictionary.\n5. Join the sorted list back into a space-delimited string.\n6. Return the sorted string.\n\n# [edge case] \n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The words are sorted based on their numeric values: 0, 8, 9.\n\n    sort_numbers('five four three two one zero') = 'zero one two three four five'\n    Explanation: The words are sorted in ascending order from 0 to 5.\n\n    sort_numbers('nine nine nine') = 'nine nine nine'\n    Explanation: All words are the same, so the order remains unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting based on numeric values will handle these cases correctly.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [121, 121, 121, 121, 121, 121, 121, 121, 121, 121], "completion": "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Sorts a space-delimited string of number words from 'zero' to 'nine'.\n\n    Args:\n        numbers (str): A space-delimited string of number words.\n\n    Returns:\n        str: A space-delimited string of sorted number words.\n\n    Raises:\n        ValueError: If the input contains invalid number words.\n    \"\"\"\n    # Mapping of number words to their corresponding numeric values\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Set of valid number words\n    valid_words = set(number_map.keys())\n    \n    # Split the input string into a list of words\n    words = numbers.split()\n    \n    # Validate that each word in the list is a valid number word\n    if not all(word in valid_words for word in words):\n        raise ValueError('Input contains invalid number words.')\n    \n    # Sort the list of words based on their numeric values using the dictionary\n    sorted_words = sorted(words, key=lambda word: number_map[word])\n    \n    # Join the sorted list back into a space-delimited string\n    return ' '.join(sorted_words)\n", "passed": true, "pass": true, "pass_num": 10, "round": 582, "mutate_method": "expand_one2two", "parent_index": 139}
