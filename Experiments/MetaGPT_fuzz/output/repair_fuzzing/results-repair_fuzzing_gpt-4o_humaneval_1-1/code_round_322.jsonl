{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain given substring. Ensure the function returns a new list with only the strings that include the specified substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "entry_point": "filter_by_substring", "canonical_solution": "    return [x for x in strings if substring in x]\n", "test": ["def check(filter_by_substring):\n\tassert filter_by_substring(['ugk', 'lxpl', 'dofffwbjmkjs', 'dakolixjey', 'EKbFGGOve', 'jcu'], 'ak') == ['dakolixjey']", "def check(filter_by_substring):\n\tassert filter_by_substring(['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj'], '') == ['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej'], '') == ['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn'], '') == ['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq'], '') == ['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp'], '') == ['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vuk', 'miq', 'lpogymr', 'dwxkxx', 'zpZrzWLRQz', 'iygu'], 'yg') == ['iygu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn'], '') == ['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kdtqsykk', 'bgykpzt', 'tkht', 'bgr'], 't') == ['kdtqsykk', 'bgykpzt', 'tkht']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg'], '') == ['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oni', 'zleaohlkif', 'grzeqgllx', 'xsavijydab'], 'sa') == ['xsavijydab']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kqox', 'knr', 'qlaaxt', 'pst', 'XduWEmb', 'egaqop'], 'ps') == ['pst']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rdce', 'pepwrjoo', 'ozdnanxsiqj', ' jclyvgb', 'sfsgenBWtFR', 'ozpzyu'], 's') == ['ozdnanxsiqj', 'sfsgenBWtFR']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fot', 'eum', 'pxgsbphx', 'gzaorjz', 'KFVOhWwpoC', 'leht'], 'le') == ['leht']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tconue', 'mlney', 'akxtnzl', 'edrad'], 'on') == ['tconue']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'john') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje'], '') == ['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje']", "def check(filter_by_substring):\n\tassert filter_by_substring(['eilf', 'mpj', 'nhqktxlz', 'tafvngt', 'rgP', 'lqedsgz'], 'h') == ['nhqktxlz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "def check(filter_by_substring):\n\tassert filter_by_substring(['exkbpmyod', 'wafdw', 'essen', 'gycuxrrp'], 'af') == ['wafdw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['sxivcdjg', 'npgx', 'inpeumlqwmth', 'fckeci', 'LsDtYSsBmG', 'qicaol'], 'c') == ['sxivcdjg', 'fckeci', 'qicaol']", "def check(filter_by_substring):\n\tassert filter_by_substring(['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw'], '') == ['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd'], '') == ['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rei', 'lfmvyvcl', 'uodn', 'bwbaijeudy'], 'od') == ['uodn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh'], '') == ['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh']", "def check(filter_by_substring):\n\tassert filter_by_substring(['usqvhbm', 'igpyd', 'gszactxzm', 'vqiyslsqnfe', 'vOhpjWbUu', 'awuwl'], 'w') == ['awuwl']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig'], '') == ['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rzlmq', 'nypmkzsg', 'aqngjmg', 'hldubutw', 'ZoTIDt', 'fgohcqf'], 'zl') == ['rzlmq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['puma', 'ahtk', 'glkv', 'vkdc'], 'um') == ['puma']", "def check(filter_by_substring):\n\tassert filter_by_substring(['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb'], 's') == ['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb']", "def check(filter_by_substring):\n\tassert filter_by_substring(['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf'], '') == ['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fekndc', 'bey', 'xhysf', 'pwobsqo l', 'OSx', 'ftpidu'], 'p') == ['pwobsqo l', 'ftpidu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tjbhxevmk', 'lutcztrn', 'vzwocf', 'lxmhqfqzcidl'], 'zw') == ['vzwocf']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'agw') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr'], '') == ['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jfrgxtn', 'emgcjlv', 'kzfda', 'wsgvtzsoe', 'ALCGgsNR', 'ryv'], 'e') == ['emgcjlv', 'wsgvtzsoe']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'y') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['btfesq', 'rkagnsvsnzrs', 'eubbokyrm', 'gaxepuosip'], 'ga') == ['gaxepuosip']", "def check(filter_by_substring):\n\tassert filter_by_substring(['zupqmk', 'rwsqpdth', 'nlocbgvg', 'icfuzakjtknb', 'hyo', 'bqtjtn'], 'oc') == ['nlocbgvg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['shxzctwmk', 'sdwufvy', 'olicmd', ' qjur', 'zTRvOovqTV', 'ehumiisy'], 'ol') == ['olicmd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz'], '') == ['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jfgi', 'exrlzppdsje', 'tdpgsobl', 'yjok'], 't') == ['tdpgsobl']", "def check(filter_by_substring):\n\tassert filter_by_substring(['gfikjrgy', 'onqcptegu', 'eyzyby', 'wbixoc ym', 'FHqsfXhbS', 'ark'], 'yz') == ['eyzyby']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'ii') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['augunz', 'fsyn', 'rzbjmi', 'nesckl', 'oCjPtbazAEsA', 'eyxtyx'], 'b') == ['rzbjmi', 'oCjPtbazAEsA']", "def check(filter_by_substring):\n\tassert filter_by_substring(['scuasnve', 'yydy', 'fbjkc', 'syqw', 'zvO', 'pdlry'], 'y') == ['yydy', 'syqw', 'pdlry']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xjp', 'mpsdixcyw', 'mfqlwxatj', 'fiorka', 'kJUIVY', 'dekjfnmm'], 'ek') == ['dekjfnmm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq'], '') == ['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'hm') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag'], '') == ['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag']", "def check(filter_by_substring):\n\tassert filter_by_substring(['onw', 'vxqogmm', 'igoksz', 'sug xjoxjadz', 'PDxYMxKzL', 'caez'], 'P') == ['PDxYMxKzL']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oxmaldkqp', 'oksz', 'mjo', 'hlyomadtjj'], 'ma') == ['oxmaldkqp', 'hlyomadtjj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq'], '') == ['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['avdkvxgq', 'tcln', 'vvvmj', 'hgidnvs'], 'v') == ['avdkvxgq', 'vvvmj', 'hgidnvs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fjtbhk', 'zagej', 'ecstspbf', 'dpftwhjpsdon', 'RcVDi', 'mmrqfzoed'], 'ag') == ['zagej']", "def check(filter_by_substring):\n\tassert filter_by_substring(['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt'], '') == ['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'u') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo'], '') == ['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vlzqs', 'vaa', 'jyokyuek', 'blq'], 'va') == ['vaa']", "def check(filter_by_substring):\n\tassert filter_by_substring(['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym'], '') == ['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym']", "def check(filter_by_substring):\n\tassert filter_by_substring(['yrbqlzt', 'yoljy', 'hgnst', 'egwkaepxkr', 'pHPzwAlLi', 'jnzsvjnqd'], 'j') == ['yoljy', 'jnzsvjnqd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf'], '') == ['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['eqthk', 'hnfe', 'ywjz', 'pntutudpdu', 'yJmt', 'eufmcif'], 'nf') == ['hnfe']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jwzdw', 'cft', 'tvleiwn', 'wnbp', 'yQfFUrje', 'uhg'], 'bp') == ['wnbp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj'], '') == ['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jmftlg', 'svpf', 'ahstcm', 'ulxugoklqs'], 's') == ['svpf', 'ahstcm', 'ulxugoklqs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['wfvacvya', 'rrz', 'vgsagcsb', 'mvn', 'aDs', 'mphoywuq'], 'fv') == ['wfvacvya']", "def check(filter_by_substring):\n\tassert filter_by_substring(['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv'], '') == ['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']", "def check(filter_by_substring):\n\tassert filter_by_substring(['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg'], '') == ['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['potgjni', 'snwj', 'pzzoklax', 'wnxdznip', 'JTlXExklWu', 'wgb'], 'n') == ['potgjni', 'snwj', 'wnxdznip']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'p') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']", "def check(filter_by_substring):\n\tassert filter_by_substring(['usmxmm', 'lewsordxonk', 'ozdow', 'fgacbnf'], 'u') == ['usmxmm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ysuub', 'ebnfgbery', 'scgbpwkjl', 'adenslpxeqwf'], 'u') == ['ysuub']", "def check(filter_by_substring):\n\tassert filter_by_substring(['sftm', 'dioyco', 'iuuqfi', 'rbqlkpykbbzf', 'bWJjEcloelv', 'bfbjmgjql'], 'W') == ['bWJjEcloelv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oqoinujt', 'rkikbewjm', 'zpgfpdmyn', 'dmwxjss', 'qcgDNg', 'rmpqswrd'], 'ki') == ['rkikbewjm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['gnu', 'qounpksy', 'atrzxeqfp', 'lurboel', 'RjIGVEs', 'nwiq'], 'qo') == ['qounpksy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dkgduwon', 'gxku', 'dou', 'yuidgjkbxe'], 'id') == ['yuidgjkbxe']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jaqamxam', 'racvaeu', 'gpshdiwef', 'gmcaonpp'], 'ps') == ['gpshdiwef']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dgscqyaz', 'dykyill', 'lvher', 'ibqz', 'SmsHmLTEgw', 'keisthr'], 'e') == ['lvher', 'keisthr']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jqbhage', 'ydq', 'ddcagpb', 'edvnjuevted', 'DZcBCg', 'hyrsi'], 'q') == ['jqbhage', 'ydq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dhpuhk', 'cmayyfjgv', 'grutd', ' tu hovh', 'QGCCvFPAXHHQ', 'mbxovs'], 'm') == ['cmayyfjgv', 'mbxovs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp'], '') == ['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz'], '') == ['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ffq', 'ymkokonn', 'vtu', 'nzghjgyk'], 'm') == ['ymkokonn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qsut', 'igzl', 'zpaen', 'yphoctvqw'], 'yp') == ['yphoctvqw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd'], '') == ['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ntbtue', 'xfmvt', 'wtrzaz', 'wuyjr ldgwwm', 'RxIxdKCol', 'hmt'], 'xf') == ['xfmvt']", "def check(filter_by_substring):\n\tassert filter_by_substring(['hvoihyj', 'ulmqpwdl', 'crhrgo', 'ukcsrdksd', 'jsNWfXSsxHE', 'mla'], 'a') == ['mla']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy'], '') == ['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fimum', 'xmnmw', 'chbdrhlkt', 'difxuhc', 'gTlhU', 'qdikcnl'], 'im') == ['fimum']", "def check(filter_by_substring):\n\tassert filter_by_substring(['cst', 'akmh', 'lva', 'fpy fm', 'gfqijgxkhm', 'jkriy'], 'k') == ['akmh', 'gfqijgxkhm', 'jkriy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk'], '') == ['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qaplgtthu', 'ylkvtgeipq', 'qseb', 'ghigzmkfxss'], 'qa') == ['qaplgtthu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['smcse', 'gxzwz', 'olbea', 'yukag', 'JaDjvdHbtfLM', 'kncvrbzg'], 'yu') == ['yukag']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mskf', 'qltsxwf', 'vuxg', 'jty', 'rnyqYyDjQ', 'opmcslazf'], 'pm') == ['opmcslazf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ygndao', 'umazijg', 'ujv', 'i kyrfjq', 'nyXNlvWstDr', 'kioxvagx'], 'u') == ['umazijg', 'ujv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dmnu', 'snp', 'khydvutwhm', 'cgv', 'LClfX', 'wihfwkg'], 'ih') == ['wihfwkg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq'], '') == ['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tbbahnqmx', 'yaw', 'upedb', 'bwz', 'xptoH', 'wxhm'], 'pe') == ['upedb']", "def check(filter_by_substring):\n\tassert filter_by_substring(['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg'], '') == ['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['nkvfmcpka', 'iugtl', 'tvjvei', 'vnhwdmwc i', 'ZzXH', 'bbh'], 'n') == ['nkvfmcpka', 'vnhwdmwc i']", "def check(filter_by_substring):\n\tassert filter_by_substring(['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh'], '') == ['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tcvb', 'idguap', 'ukgtnfzqj', 'vfwmburpzqgg', 'jDFfcfd', 'cfbauoso'], 'c') == ['tcvb', 'jDFfcfd', 'cfbauoso']", "def check(filter_by_substring):\n\tassert filter_by_substring(['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx'], '') == ['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx']"], "test_case_list": ["assert filter_by_substring(['ugk', 'lxpl', 'dofffwbjmkjs', 'dakolixjey', 'EKbFGGOve', 'jcu'], 'ak') == ['dakolixjey']", "assert filter_by_substring(['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj'], '') == ['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj']", "assert filter_by_substring(['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej'], '') == ['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej']", "assert filter_by_substring(['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn'], '') == ['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn']", "assert filter_by_substring(['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq'], '') == ['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq']", "assert filter_by_substring(['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp'], '') == ['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp']", "assert filter_by_substring(['vuk', 'miq', 'lpogymr', 'dwxkxx', 'zpZrzWLRQz', 'iygu'], 'yg') == ['iygu']", "assert filter_by_substring(['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn'], '') == ['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn']", "assert filter_by_substring(['kdtqsykk', 'bgykpzt', 'tkht', 'bgr'], 't') == ['kdtqsykk', 'bgykpzt', 'tkht']", "assert filter_by_substring(['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg'], '') == ['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg']", "assert filter_by_substring(['oni', 'zleaohlkif', 'grzeqgllx', 'xsavijydab'], 'sa') == ['xsavijydab']", "assert filter_by_substring(['kqox', 'knr', 'qlaaxt', 'pst', 'XduWEmb', 'egaqop'], 'ps') == ['pst']", "assert filter_by_substring(['rdce', 'pepwrjoo', 'ozdnanxsiqj', ' jclyvgb', 'sfsgenBWtFR', 'ozpzyu'], 's') == ['ozdnanxsiqj', 'sfsgenBWtFR']", "assert filter_by_substring(['fot', 'eum', 'pxgsbphx', 'gzaorjz', 'KFVOhWwpoC', 'leht'], 'le') == ['leht']", "assert filter_by_substring(['tconue', 'mlney', 'akxtnzl', 'edrad'], 'on') == ['tconue']", "assert filter_by_substring([], 'john') == []", "assert filter_by_substring(['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje'], '') == ['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje']", "assert filter_by_substring(['eilf', 'mpj', 'nhqktxlz', 'tafvngt', 'rgP', 'lqedsgz'], 'h') == ['nhqktxlz']", "assert filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "assert filter_by_substring(['exkbpmyod', 'wafdw', 'essen', 'gycuxrrp'], 'af') == ['wafdw']", "assert filter_by_substring(['sxivcdjg', 'npgx', 'inpeumlqwmth', 'fckeci', 'LsDtYSsBmG', 'qicaol'], 'c') == ['sxivcdjg', 'fckeci', 'qicaol']", "assert filter_by_substring(['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw'], '') == ['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw']", "assert filter_by_substring(['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd'], '') == ['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd']", "assert filter_by_substring(['rei', 'lfmvyvcl', 'uodn', 'bwbaijeudy'], 'od') == ['uodn']", "assert filter_by_substring(['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh'], '') == ['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh']", "assert filter_by_substring(['usqvhbm', 'igpyd', 'gszactxzm', 'vqiyslsqnfe', 'vOhpjWbUu', 'awuwl'], 'w') == ['awuwl']", "assert filter_by_substring(['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig'], '') == ['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig']", "assert filter_by_substring(['rzlmq', 'nypmkzsg', 'aqngjmg', 'hldubutw', 'ZoTIDt', 'fgohcqf'], 'zl') == ['rzlmq']", "assert filter_by_substring(['puma', 'ahtk', 'glkv', 'vkdc'], 'um') == ['puma']", "assert filter_by_substring(['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb'], 's') == ['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb']", "assert filter_by_substring(['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf'], '') == ['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf']", "assert filter_by_substring(['fekndc', 'bey', 'xhysf', 'pwobsqo l', 'OSx', 'ftpidu'], 'p') == ['pwobsqo l', 'ftpidu']", "assert filter_by_substring(['tjbhxevmk', 'lutcztrn', 'vzwocf', 'lxmhqfqzcidl'], 'zw') == ['vzwocf']", "assert filter_by_substring([], 'agw') == []", "assert filter_by_substring(['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr'], '') == ['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr']", "assert filter_by_substring(['jfrgxtn', 'emgcjlv', 'kzfda', 'wsgvtzsoe', 'ALCGgsNR', 'ryv'], 'e') == ['emgcjlv', 'wsgvtzsoe']", "assert filter_by_substring([], 'y') == []", "assert filter_by_substring(['btfesq', 'rkagnsvsnzrs', 'eubbokyrm', 'gaxepuosip'], 'ga') == ['gaxepuosip']", "assert filter_by_substring(['zupqmk', 'rwsqpdth', 'nlocbgvg', 'icfuzakjtknb', 'hyo', 'bqtjtn'], 'oc') == ['nlocbgvg']", "assert filter_by_substring(['shxzctwmk', 'sdwufvy', 'olicmd', ' qjur', 'zTRvOovqTV', 'ehumiisy'], 'ol') == ['olicmd']", "assert filter_by_substring(['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz'], '') == ['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz']", "assert filter_by_substring(['jfgi', 'exrlzppdsje', 'tdpgsobl', 'yjok'], 't') == ['tdpgsobl']", "assert filter_by_substring(['gfikjrgy', 'onqcptegu', 'eyzyby', 'wbixoc ym', 'FHqsfXhbS', 'ark'], 'yz') == ['eyzyby']", "assert filter_by_substring([], 'ii') == []", "assert filter_by_substring(['augunz', 'fsyn', 'rzbjmi', 'nesckl', 'oCjPtbazAEsA', 'eyxtyx'], 'b') == ['rzbjmi', 'oCjPtbazAEsA']", "assert filter_by_substring(['scuasnve', 'yydy', 'fbjkc', 'syqw', 'zvO', 'pdlry'], 'y') == ['yydy', 'syqw', 'pdlry']", "assert filter_by_substring(['xjp', 'mpsdixcyw', 'mfqlwxatj', 'fiorka', 'kJUIVY', 'dekjfnmm'], 'ek') == ['dekjfnmm']", "assert filter_by_substring(['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq'], '') == ['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq']", "assert filter_by_substring([], 'hm') == []", "assert filter_by_substring(['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag'], '') == ['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag']", "assert filter_by_substring(['onw', 'vxqogmm', 'igoksz', 'sug xjoxjadz', 'PDxYMxKzL', 'caez'], 'P') == ['PDxYMxKzL']", "assert filter_by_substring(['oxmaldkqp', 'oksz', 'mjo', 'hlyomadtjj'], 'ma') == ['oxmaldkqp', 'hlyomadtjj']", "assert filter_by_substring(['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq'], '') == ['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq']", "assert filter_by_substring(['avdkvxgq', 'tcln', 'vvvmj', 'hgidnvs'], 'v') == ['avdkvxgq', 'vvvmj', 'hgidnvs']", "assert filter_by_substring(['fjtbhk', 'zagej', 'ecstspbf', 'dpftwhjpsdon', 'RcVDi', 'mmrqfzoed'], 'ag') == ['zagej']", "assert filter_by_substring(['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt'], '') == ['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt']", "assert filter_by_substring([], 'u') == []", "assert filter_by_substring(['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo'], '') == ['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo']", "assert filter_by_substring(['vlzqs', 'vaa', 'jyokyuek', 'blq'], 'va') == ['vaa']", "assert filter_by_substring(['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym'], '') == ['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym']", "assert filter_by_substring(['yrbqlzt', 'yoljy', 'hgnst', 'egwkaepxkr', 'pHPzwAlLi', 'jnzsvjnqd'], 'j') == ['yoljy', 'jnzsvjnqd']", "assert filter_by_substring(['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf'], '') == ['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf']", "assert filter_by_substring(['eqthk', 'hnfe', 'ywjz', 'pntutudpdu', 'yJmt', 'eufmcif'], 'nf') == ['hnfe']", "assert filter_by_substring(['jwzdw', 'cft', 'tvleiwn', 'wnbp', 'yQfFUrje', 'uhg'], 'bp') == ['wnbp']", "assert filter_by_substring(['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj'], '') == ['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj']", "assert filter_by_substring(['jmftlg', 'svpf', 'ahstcm', 'ulxugoklqs'], 's') == ['svpf', 'ahstcm', 'ulxugoklqs']", "assert filter_by_substring(['wfvacvya', 'rrz', 'vgsagcsb', 'mvn', 'aDs', 'mphoywuq'], 'fv') == ['wfvacvya']", "assert filter_by_substring(['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv'], '') == ['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv']", "assert filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']", "assert filter_by_substring(['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg'], '') == ['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg']", "assert filter_by_substring(['potgjni', 'snwj', 'pzzoklax', 'wnxdznip', 'JTlXExklWu', 'wgb'], 'n') == ['potgjni', 'snwj', 'wnxdznip']", "assert filter_by_substring([], 'p') == []", "assert filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']", "assert filter_by_substring(['usmxmm', 'lewsordxonk', 'ozdow', 'fgacbnf'], 'u') == ['usmxmm']", "assert filter_by_substring(['ysuub', 'ebnfgbery', 'scgbpwkjl', 'adenslpxeqwf'], 'u') == ['ysuub']", "assert filter_by_substring(['sftm', 'dioyco', 'iuuqfi', 'rbqlkpykbbzf', 'bWJjEcloelv', 'bfbjmgjql'], 'W') == ['bWJjEcloelv']", "assert filter_by_substring(['oqoinujt', 'rkikbewjm', 'zpgfpdmyn', 'dmwxjss', 'qcgDNg', 'rmpqswrd'], 'ki') == ['rkikbewjm']", "assert filter_by_substring(['gnu', 'qounpksy', 'atrzxeqfp', 'lurboel', 'RjIGVEs', 'nwiq'], 'qo') == ['qounpksy']", "assert filter_by_substring(['dkgduwon', 'gxku', 'dou', 'yuidgjkbxe'], 'id') == ['yuidgjkbxe']", "assert filter_by_substring(['jaqamxam', 'racvaeu', 'gpshdiwef', 'gmcaonpp'], 'ps') == ['gpshdiwef']", "assert filter_by_substring(['dgscqyaz', 'dykyill', 'lvher', 'ibqz', 'SmsHmLTEgw', 'keisthr'], 'e') == ['lvher', 'keisthr']", "assert filter_by_substring(['jqbhage', 'ydq', 'ddcagpb', 'edvnjuevted', 'DZcBCg', 'hyrsi'], 'q') == ['jqbhage', 'ydq']", "assert filter_by_substring(['dhpuhk', 'cmayyfjgv', 'grutd', ' tu hovh', 'QGCCvFPAXHHQ', 'mbxovs'], 'm') == ['cmayyfjgv', 'mbxovs']", "assert filter_by_substring(['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp'], '') == ['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp']", "assert filter_by_substring(['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz'], '') == ['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz']", "assert filter_by_substring(['ffq', 'ymkokonn', 'vtu', 'nzghjgyk'], 'm') == ['ymkokonn']", "assert filter_by_substring(['qsut', 'igzl', 'zpaen', 'yphoctvqw'], 'yp') == ['yphoctvqw']", "assert filter_by_substring(['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd'], '') == ['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd']", "assert filter_by_substring(['ntbtue', 'xfmvt', 'wtrzaz', 'wuyjr ldgwwm', 'RxIxdKCol', 'hmt'], 'xf') == ['xfmvt']", "assert filter_by_substring(['hvoihyj', 'ulmqpwdl', 'crhrgo', 'ukcsrdksd', 'jsNWfXSsxHE', 'mla'], 'a') == ['mla']", "assert filter_by_substring(['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy'], '') == ['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy']", "assert filter_by_substring(['fimum', 'xmnmw', 'chbdrhlkt', 'difxuhc', 'gTlhU', 'qdikcnl'], 'im') == ['fimum']", "assert filter_by_substring(['cst', 'akmh', 'lva', 'fpy fm', 'gfqijgxkhm', 'jkriy'], 'k') == ['akmh', 'gfqijgxkhm', 'jkriy']", "assert filter_by_substring(['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk'], '') == ['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk']", "assert filter_by_substring(['qaplgtthu', 'ylkvtgeipq', 'qseb', 'ghigzmkfxss'], 'qa') == ['qaplgtthu']", "assert filter_by_substring(['smcse', 'gxzwz', 'olbea', 'yukag', 'JaDjvdHbtfLM', 'kncvrbzg'], 'yu') == ['yukag']", "assert filter_by_substring(['mskf', 'qltsxwf', 'vuxg', 'jty', 'rnyqYyDjQ', 'opmcslazf'], 'pm') == ['opmcslazf']", "assert filter_by_substring(['ygndao', 'umazijg', 'ujv', 'i kyrfjq', 'nyXNlvWstDr', 'kioxvagx'], 'u') == ['umazijg', 'ujv']", "assert filter_by_substring(['dmnu', 'snp', 'khydvutwhm', 'cgv', 'LClfX', 'wihfwkg'], 'ih') == ['wihfwkg']", "assert filter_by_substring(['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq'], '') == ['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq']", "assert filter_by_substring(['tbbahnqmx', 'yaw', 'upedb', 'bwz', 'xptoH', 'wxhm'], 'pe') == ['upedb']", "assert filter_by_substring(['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg'], '') == ['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg']", "assert filter_by_substring(['nkvfmcpka', 'iugtl', 'tvjvei', 'vnhwdmwc i', 'ZzXH', 'bbh'], 'n') == ['nkvfmcpka', 'vnhwdmwc i']", "assert filter_by_substring(['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh'], '') == ['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh']", "assert filter_by_substring(['tcvb', 'idguap', 'ukgtnfzqj', 'vfwmburpzqgg', 'jDFfcfd', 'cfbauoso'], 'c') == ['tcvb', 'jDFfcfd', 'cfbauoso']", "assert filter_by_substring(['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx'], '') == ['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx']"], "nl": " Filter an input list of strings only for ones that contain given substring\n    ", "func": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:", "examples": ">>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    ", "repair_prompt": ["def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain given substring. Ensure the function returns a new list with only the strings that include the specified substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain given substring. Make sure that you carefully process each string. Ensure the function returns a new list with only the strings that include the specified substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain given substring, ensuring the function returns a new list with only the strings that include the specified substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filters an input list of strings to return a new list containing only the strings that include the specified substring.\n    \n    Parameters:\n    strings (List[str]): The list of strings to filter.\n    substring (str): The substring to search for within each string.\n    \n    Returns:\n    List[str]: A list of strings containing the specified substring.\n    \"\"\"\n    # Initialize an empty list to store the filtered strings\n    filtered_strings = []\n\n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the specified substring is present in the current string\n        if substring in string:\n            # If the substring is found, add the string to the filtered list\n            filtered_strings.append(string)\n\n    # Return the filtered list\n    return filtered_strings\n\n# Example usage:\n# result = filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# print(result)  # Output: ['abc', 'bacd', 'array']\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain the given substring.\n\n    Args:\n        strings: List of strings to be filtered.\n        substring: Substring to search for within each string.\n\n    Returns:\n        A new list with only the strings that include the specified substring.\n    \"\"\"\n    # Initialize an empty list to store the filtered results\n    filtered_results = []\n\n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the current string contains the specified substring\n        if substring in string:\n            # If it does, append the string to the filtered results list\n            filtered_results.append(string)\n\n    # Return the filtered results list\n    return filtered_results\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain the given substring.\n\n    Args:\n        strings (List[str]): A list of strings to be filtered.\n        substring (str): The substring to filter the strings by.\n\n    Returns:\n        List[str]: A new list containing only the strings that include the specified substring.\n    \"\"\"\n    # Use list comprehension to filter strings containing the substring\n    return [string for string in strings if substring in string]\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(filter_by_substring([], 'a'))  # Expected output: []\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], ''))  # Expected output: ['abc', 'bacd', 'cde', 'array']\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'z'))  # Expected output: []\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))  # Expected output: ['abc', 'bacd', 'array']\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain the given substring.\n\n    Args:\n        strings (List[str]): The list of strings to be filtered.\n        substring (str): The substring to search for within each string.\n\n    Returns:\n        List[str]: A new list containing only the strings that include the specified substring.\n    \"\"\"\n    # Initialize an empty list to store the filtered results\n    filtered_results = []\n\n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the current string contains the specified substring\n        if substring in string:\n            # If it does, append the string to the results list\n            filtered_results.append(string)\n\n    # Return the results list\n    return filtered_results\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filters an input list of strings, returning a new list containing only those strings that include the specified substring.\n    \n    Args:\n        strings (List[str]): The list of strings to filter.\n        substring (str): The substring to search for within each string.\n    \n    Returns:\n        List[str]: A new list containing only the strings that include the specified substring.\n    \n    Examples:\n        >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], '')\n        ['abc', 'bacd', 'cde', 'array']\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'z')\n        []\n    \"\"\"\n    return [s for s in strings if substring in s]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain the given substring.\n\n    Args:\n        strings (List[str]): The list of strings to be filtered.\n        substring (str): The substring to search for within each string.\n\n    Returns:\n        List[str]: A new list containing only the strings that include the specified substring.\n\n    Examples:\n        >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], '')\n        ['abc', 'bacd', 'cde', 'array']\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'z')\n        []\n    \"\"\"\n    # Using list comprehension to filter strings containing the substring\n    return [string for string in strings if substring in string]\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(filter_by_substring([], 'a'))  # Expected output: []\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))  # Expected output: ['abc', 'bacd', 'array']\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], ''))  # Expected output: ['abc', 'bacd', 'cde', 'array']\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'z'))  # Expected output: []\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain the given substring.\n\n    Parameters:\n    strings (List[str]): The list of strings to be filtered.\n    substring (str): The substring to search for within each string.\n\n    Returns:\n    List[str]: A new list containing only the strings that include the specified substring.\n    \"\"\"\n    # Using list comprehension to filter strings containing the substring\n    return [string for string in strings if substring in string]\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(filter_by_substring([], 'a'))  # Expected output: []\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], ''))  # Expected output: ['abc', 'bacd', 'cde', 'array']\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'z'))  # Expected output: []\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))  # Expected output: ['abc', 'bacd', 'array']\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain the given substring.\n\n    Args:\n        strings (List[str]): The list of strings to be filtered.\n        substring (str): The substring to filter by.\n\n    Returns:\n        List[str]: A new list containing only the strings that include the specified substring.\n    \"\"\"\n    # Initialize an empty list to store the filtered results\n    filtered_results = []\n\n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the specified substring is present in the current string\n        if substring in string:\n            # If the substring is found, add the string to the results list\n            filtered_results.append(string)\n\n    # Return the results list\n    return filtered_results\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to demonstrate the function's behavior\n    print(filter_by_substring([], 'a'))  # Expected output: []\n    print(filter_by_substring(['', 'a', 'b'], 'a'))  # Expected output: ['a']\n    print(filter_by_substring(['abc', 'def', 'ghi'], ''))  # Expected output: ['abc', 'def', 'ghi']\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filters a list of strings, returning a new list containing only the strings that include the specified substring.\n    \n    Parameters:\n    strings (List[str]): The list of strings to filter.\n    substring (str): The substring to search for within each string.\n    \n    Returns:\n    List[str]: A list of strings containing the specified substring.\n    \n    Example:\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n# Example usage\nif __name__ == \"__main__\":\n    example_strings = ['abc', 'bacd', 'cde', 'array']\n    example_substring = 'a'\n    filtered_strings = filter_by_substring(example_strings, example_substring)\n    print(filtered_strings)  # Output: ['abc', 'bacd', 'array']\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str, case_insensitive: bool = False) -> List[str]:\n    '''\n    Filter an input list of strings for ones that contain the given substring.\n    If case_insensitive is True, the filtering is case-insensitive.\n    \n    Parameters:\n    strings (List[str]): The list of strings to filter.\n    substring (str): The substring to search for within each string.\n    case_insensitive (bool): Optional; if True, perform case-insensitive filtering.\n    \n    Returns:\n    List[str]: A new list with only the strings that include the specified substring.\n    '''\n    if case_insensitive:\n        substring = substring.lower()\n        filtered_strings = [s for s in strings if substring in s.lower()]\n    else:\n        filtered_strings = [s for s in strings if substring in s]\n    \n    return filtered_strings\n"], "plans": ["requirement analysis:\nThe function should efficiently filter strings containing a specified substring, handle empty lists, and perform well with large datasets. It should be easy to use and integrate into existing systems.\nrequirement pool:\n- Implement the main filtering function.\n- Optimize performance for large datasets.\n- Ensure compatibility with various input sizes.\n- Provide a simple and intuitive interface.\n- Include comprehensive documentation and examples.\nWe will implement a simple function using Python's built-in list comprehension to filter strings containing a specified substring. This approach ensures high performance and efficiency, especially with large datasets, while maintaining a simple and intuitive interface. We will use the 'in' keyword for substring checking, which is efficient and straightforward.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'filter': means to select only those elements from a list that meet a certain condition.\n    'substring': a sequence of characters that is contained within another string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize an empty list to store the filtered strings.\n    2. Iterate over each string in the input list.\n    3. For each string, check if the specified substring is present using the 'in' keyword.\n    4. If the substring is found, add the string to the filtered list.\n    5. Return the filtered list.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: The input list is empty, so there are no strings to filter, resulting in an empty list.\n    \n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], '') = ['abc', 'bacd', 'cde', 'array']\n    Explanation: An empty substring is technically present in every string, so all strings are included in the result.\n\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'z') = []\n    Explanation: The substring 'z' is not present in any of the strings, so the result is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using list comprehension and the 'in' keyword naturally handles these cases.\n", "requirement analysis:\nThe function should efficiently filter a list of strings based on the presence of a specified substring. It must handle edge cases such as empty lists and ensure compatibility across different Python versions. Performance and usability are key considerations.\nrequirement pool:\n- Implement the main filtering function\n- Ensure compatibility with various Python versions\n- Optimize performance for large lists\n- Provide comprehensive documentation\n- Include error handling for invalid inputs\nWe will implement a simple function using Python's built-in capabilities to filter a list of strings based on the presence of a specified substring. The function will be designed to handle edge cases such as empty lists and ensure compatibility across different Python versions. We will focus on optimizing performance for large lists by leveraging list comprehensions, which are efficient and Pythonic. Comprehensive documentation will be provided to enhance usability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'filter'\n    Explanation: The requirement is to filter a list of strings, meaning we need to select only those strings that contain the specified substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize an empty list to store the filtered results.\n    2. Iterate through each string in the input list.\n    3. Check if the current string contains the specified substring.\n    4. If it does, append the string to the filtered results list.\n    5. Return the filtered results list.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: The input list is empty, so there are no strings to filter, resulting in an empty list as output.\n    \n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], '') = ['abc', 'bacd', 'cde', 'array']\n    Explanation: An empty substring means every string contains it, so all strings are included in the output list.\n    \n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'z') = []\n    Explanation: None of the strings contain the substring 'z', so the output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic naturally handles these scenarios by iterating through the list and checking for substring presence.\n", "requirement analysis:\nThe function should efficiently filter strings based on the presence of a specified substring, handling edge cases such as empty lists and ensuring compatibility with various Python versions. It should be intuitive for users and developers alike, with minimal setup required.\nrequirement pool:\n- Implement the main filtering logic\n- Ensure compatibility with Python 3.x\n- Optimize for performance with large datasets\n- Handle edge cases like empty input lists\n- Provide clear documentation and examples\nWe will implement a simple function using Python's built-in list comprehension to filter strings based on the presence of a specified substring. This approach ensures high performance and reliability while maintaining simplicity and clarity in design. The function will handle edge cases like empty input lists and will be compatible with Python 3.x versions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'filter': means to select only those elements from the list that meet a certain condition.\n    'substring': refers to a sequence of characters that is contained within another string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Use list comprehension to iterate over each string in the input list.\n    2. Check if the substring is present in each string.\n    3. Collect all strings that contain the substring into a new list.\n    4. Return the new list.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: The input list is empty, so there are no strings to filter, resulting in an empty list.\n    \n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], '') = ['abc', 'bacd', 'cde', 'array']\n    Explanation: An empty substring is considered to be present in every string, so all strings are included in the result.\n    \n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'z') = []\n    Explanation: The substring 'z' is not present in any of the strings, so the result is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using list comprehension naturally handles these scenarios.\n", "requirement analysis:\nThe function should efficiently filter strings containing a specified substring, handle edge cases like empty lists, and maintain performance with large datasets.\nrequirement pool:\n- Implement the main filtering function\n- Optimize for performance with large datasets\n- Ensure compatibility with various input types\n- Develop a user-friendly interface for input\n- Include comprehensive error handling\nWe will implement a simple function using Python's built-in capabilities to filter strings based on a given substring. The function will handle empty lists gracefully and will be optimized for performance by using list comprehensions, which are efficient for iterating over large datasets. We will ensure the function is case-sensitive by default, but this can be adjusted based on user requirements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'filter'\n    Explanation: The requirement is to filter the input list of strings, meaning we need to select only those strings that contain the specified substring.\n\n    'substring'\n    Explanation: A substring is a sequence of characters that appears within another string. The task is to check if each string in the list contains this sequence.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize an empty list to store the filtered results.\n    2. Iterate over each string in the input list.\n    3. Check if the current string contains the specified substring using the 'in' keyword.\n    4. If it does, append the string to the results list.\n    5. Return the results list.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: The input list is empty, so there are no strings to filter, resulting in an empty list as output.\n\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], '') = ['abc', 'bacd', 'cde', 'array']\n    Explanation: An empty substring means every string contains it, so all strings are included in the output.\n\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'z') = []\n    Explanation: None of the strings contain the substring 'z', so the output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through the list and checking for substring presence naturally handles these cases.\n", "requirement analysis:\nThe function should efficiently filter strings containing a specified substring, handle empty lists, and provide clear examples for user understanding.\nrequirement pool:\n- Implement efficient string filtering\n- Handle edge cases such as empty lists\n- Provide clear documentation and examples\n- Optimize performance for large datasets\n- Ensure compatibility with different Python versions\nWe will implement a simple function using Python's built-in capabilities to filter a list of strings based on the presence of a specified substring. The function will handle edge cases such as empty lists and will be optimized for performance by using list comprehensions, which are efficient for this type of operation. We will provide clear documentation and examples to ensure usability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'filter'\n    Explanation: In the requirement, 'filter' means to select only those strings from the list that contain the specified substring.\n\n    'substring'\n    Explanation: A substring is a sequence of characters that appears within another string. The task is to check if this sequence is present in each string of the list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define the function `filter_by_substring` with parameters `strings` (a list of strings) and `substring` (the substring to filter by).\n    2. Use a list comprehension to iterate over each string in `strings`.\n    3. For each string, check if `substring` is present using the `in` keyword.\n    4. Collect all strings that contain `substring` into a new list.\n    5. Return the new list.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: The input list is empty, so there are no strings to filter, resulting in an empty list.\n\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], '') = ['abc', 'bacd', 'cde', 'array']\n    Explanation: An empty substring is considered to be present in every string, so all strings are included in the result.\n\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'z') = []\n    Explanation: The substring 'z' does not appear in any of the strings, so the result is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using list comprehension naturally handles these scenarios.\n", "requirement analysis:\nThe function should efficiently filter strings containing a specified substring, handle empty lists, and provide clear examples for user understanding.\nrequirement pool:\n- Implement the main filtering function\n- Optimize for performance with large datasets\n- Ensure clear documentation and examples\n- Handle edge cases such as empty lists\n- Provide user-friendly error messages\nWe will implement a simple function using Python's built-in capabilities to filter strings containing a specified substring. The function will handle edge cases such as empty lists and provide clear documentation with examples. We will ensure the function is optimized for performance by using list comprehensions, which are efficient for iterating over lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'filter'\n    Explanation: In the requirement, 'filter' means to select only those strings from the list that contain the specified substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function should iterate over each string in the input list and check if the substring is present. If it is, the string should be included in the output list. This can be efficiently implemented using a list comprehension.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: The input list is empty, so there are no strings to filter, resulting in an empty list.\n    \n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], '') = ['abc', 'bacd', 'cde', 'array']\n    Explanation: An empty substring is technically present in every string, so all strings are included in the output list.\n    \n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'z') = []\n    Explanation: None of the strings contain the substring 'z', so the output list is empty.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using list comprehension naturally handles these cases by checking for substring presence in each string.\n", "requirement analysis:\nThe function should efficiently filter strings based on the presence of a specified substring, ensuring it returns a new list without altering the original. It should handle edge cases like empty lists and strings without the substring.\nrequirement pool:\n- Implement the main filtering logic\n- Ensure the function returns a new list\n- Handle empty input lists gracefully\n- Optimize performance for large lists\n- Include error handling for invalid inputs\nWe will implement a simple function using Python's built-in list comprehension to filter strings based on the presence of a specified substring. This approach ensures high performance and reliability by leveraging Python's efficient list operations. The function will handle empty lists gracefully and return a new list without modifying the original list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'filter'\n    Explanation: The requirement is to filter the input list of strings, meaning we need to select only those strings that contain the specified substring.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Use list comprehension to iterate over each string in the input list.\n    2. Check if the substring is present in each string.\n    3. Collect strings that contain the substring into a new list.\n    4. Return the new list.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: The input list is empty, so there are no strings to filter, resulting in an empty list.\n    \n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], '') = ['abc', 'bacd', 'cde', 'array']\n    Explanation: An empty substring means every string contains it, so all strings are included in the result.\n\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'z') = []\n    Explanation: None of the strings contain the substring 'z', so the result is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using list comprehension naturally handles these scenarios.\n", "requirement analysis:\nThe function should efficiently filter a list of strings based on the presence of a specified substring. It should handle edge cases such as empty lists and ensure that the output is a new list containing only the strings that include the substring.\nrequirement pool:\n- Implement the main filtering function\n- Optimize for performance with large datasets\n- Ensure comprehensive test coverage\n- Provide detailed documentation\n- Handle special characters in substrings\nWe will implement a simple function using Python's built-in capabilities to filter a list of strings based on the presence of a specified substring. The function will handle edge cases like empty lists gracefully and will be optimized for performance using list comprehensions, which are efficient for this type of operation. We will ensure the function is easy to understand and maintain by providing clear documentation and examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'filter': means to select only those elements from a list that meet a certain condition.\n    'substring': a sequence of characters that is contained within another string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize an empty list to store the filtered results.\n    2. Iterate over each string in the input list.\n    3. For each string, check if the specified substring is present.\n    4. If the substring is found, add the string to the results list.\n    5. Return the results list.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: The input list is empty, so there are no strings to filter, resulting in an empty list.\n    \n    filter_by_substring(['', 'a', 'b'], 'a') = ['a']\n    Explanation: The only string containing the substring 'a' is 'a' itself, so it is included in the result.\n\n    filter_by_substring(['abc', 'def', 'ghi'], '') = ['abc', 'def', 'ghi']\n    Explanation: An empty substring is considered to be present in every string, so all strings are included in the result.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking for substring presence will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently filter strings containing a specified substring, handle edge cases like empty lists, and be easy to integrate into existing codebases. Documentation should be clear to facilitate user understanding.\nrequirement pool:\n- Implement the main filtering function\n- Ensure the function handles edge cases\n- Provide comprehensive documentation\n- Optimize for performance\n- Maintain compatibility with existing systems\nWe will implement a simple function using Python's built-in list comprehension to filter strings based on the presence of a substring. This approach is efficient and easy to understand, ensuring compatibility with existing systems. We will also provide comprehensive documentation with examples to handle edge cases like empty lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'filter'\n    Explanation: In the requirement, 'filter' means to select only those elements from the input list that meet a specific condition, which in this case is containing the given substring.\n\n    'substring'\n    Explanation: A substring is a contiguous sequence of characters within a string. The task is to check if each string in the list contains this sequence.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize an empty list to store the filtered results.\n    2. Iterate over each string in the input list.\n    3. For each string, check if the given substring is present.\n    4. If the substring is found, add the string to the results list.\n    5. Return the results list.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: The input list is empty, so there are no strings to filter. The expected output is an empty list.\n\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], '') = ['abc', 'bacd', 'cde', 'array']\n    Explanation: An empty substring is considered to be present in every string, so all strings in the list are included in the output.\n\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'z') = []\n    Explanation: The substring 'z' is not present in any of the strings, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through the list and checking for substring presence inherently handles these cases.\n", "requirement analysis:\nThe function should efficiently filter a list of strings based on the presence of a specified substring. It should handle edge cases such as empty lists and ensure performance is maintained with larger datasets.\nrequirement pool:\n- Implement the main filtering function\n- Optimize for performance with large datasets\n- Ensure compatibility with various input types\n- Add support for case-insensitive filtering\n- Include comprehensive test cases\nWe will implement a simple function using Python's built-in list comprehension to filter strings containing a specified substring. This approach ensures high performance and reliability, especially with large datasets. We will use the 'in' keyword for substring checking, which is efficient and straightforward. Additionally, we will consider adding an optional parameter for case-insensitive filtering if required.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'filter': means to select only those elements from a list that meet a certain condition.\n    'substring': a sequence of characters that is contained within another string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize an empty list to store the filtered strings.\n    2. Iterate over each string in the input list.\n    3. For each string, check if the specified substring is present using the 'in' keyword.\n    4. If the substring is found, add the string to the filtered list.\n    5. Return the filtered list.\n\n# [edge case] \n    filter_by_substring([], 'a') = []\n    Explanation: The input list is empty, so there are no strings to filter, resulting in an empty list.\n    \n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], '') = ['abc', 'bacd', 'cde', 'array']\n    Explanation: An empty substring is considered to be present in every string, so all strings are included in the result.\n\n    filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'z') = []\n    Explanation: The substring 'z' is not present in any of the strings, so the result is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if a substring is present using the 'in' keyword naturally handles these cases.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [106, 106, 106, 106, 106, 106, 106, 106, 106, 106], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str, case_insensitive: bool = False) -> List[str]:\n    '''\n    Filter an input list of strings for ones that contain the given substring.\n    If case_insensitive is True, the filtering is case-insensitive.\n    \n    Parameters:\n    strings (List[str]): The list of strings to filter.\n    substring (str): The substring to search for within each string.\n    case_insensitive (bool): Optional; if True, perform case-insensitive filtering.\n    \n    Returns:\n    List[str]: A new list with only the strings that include the specified substring.\n    '''\n    if case_insensitive:\n        substring = substring.lower()\n        filtered_strings = [s for s in strings if substring in s.lower()]\n    else:\n        filtered_strings = [s for s in strings if substring in s]\n    \n    return filtered_strings\n", "passed": true, "pass": true, "pass_num": 10, "round": 322, "mutate_method": "add_1_sentence_at_end", "parent_index": 6}
