{"task_id": "HumanEval/117", "prompt": "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \na function that returns a list of all words from string s that contain exactly \nn consonants. These words should be returned in the order they appear in the string s.  \nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": ["def check(select_words):\n\tassert select_words('eg aqk', 2) == ['aqk']", "def check(select_words):\n\tassert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "def check(select_words):\n\tassert select_words('syk', 6) == []", "def check(select_words):\n\tassert select_words('gw', 9) == []", "def check(select_words):\n\tassert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "def check(select_words):\n\tassert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "def check(select_words):\n\tassert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "def check(select_words):\n\tassert select_words('zGMhBC', 6) == ['zGMhBC']", "def check(select_words):\n\tassert select_words('kfohjsjunakqmmsx', 1) == []", "def check(select_words):\n\tassert select_words('KbpFfWgXZoVjXV', 1) == []", "def check(select_words):\n\tassert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "def check(select_words):\n\tassert select_words('kg', 1) == []", "def check(select_words):\n\tassert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "def check(select_words):\n\tassert select_words('xrbpxpncgqufqkq', 6) == []", "def check(select_words):\n\tassert select_words('sqgikswgssxsbwkl', 7) == []", "def check(select_words):\n\tassert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "def check(select_words):\n\tassert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "def check(select_words):\n\tassert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "def check(select_words):\n\tassert select_words('bnXA AjPVh', 5) == []", "def check(select_words):\n\tassert select_words('omnivbqgmavyqdgqssas', 6) == []", "def check(select_words):\n\tassert select_words('fmjizkhknnihqioic', 4) == []", "def check(select_words):\n\tassert select_words('lINKPOlFIImtg', 3) == []", "def check(select_words):\n\tassert select_words('nPxmyTd', 7) == ['nPxmyTd']", "def check(select_words):\n\tassert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "def check(select_words):\n\tassert select_words('mehochzpausf', 2) == []", "def check(select_words):\n\tassert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "def check(select_words):\n\tassert select_words('EGiDfM', 1) == []", "def check(select_words):\n\tassert select_words('mc', 7) == []", "def check(select_words):\n\tassert select_words('wzx', 5) == []", "def check(select_words):\n\tassert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "def check(select_words):\n\tassert select_words('xwkxcjffocow', 5) == []", "def check(select_words):\n\tassert select_words('dl', 5) == []", "def check(select_words):\n\tassert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "def check(select_words):\n\tassert select_words('ABIStgq', 5) == ['ABIStgq']", "def check(select_words):\n\tassert select_words('nb', 2) == ['nb']", "def check(select_words):\n\tassert select_words('ny', 2) == ['ny']", "def check(select_words):\n\tassert select_words('HWCLBC', 6) == ['HWCLBC']", "def check(select_words):\n\tassert select_words('uuh', 6) == []", "def check(select_words):\n\tassert select_words('uoubngttn', 3) == []", "def check(select_words):\n\tassert select_words('g', 5) == []", "def check(select_words):\n\tassert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "def check(select_words):\n\tassert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "def check(select_words):\n\tassert select_words('aztxoxesjkzqebhrfzw', 3) == []", "def check(select_words):\n\tassert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "def check(select_words):\n\tassert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "def check(select_words):\n\tassert select_words('tJzO PnCT', 3) == ['tJzO']", "def check(select_words):\n\tassert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "def check(select_words):\n\tassert select_words('qhwubvrfmwy', 2) == []", "def check(select_words):\n\tassert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "def check(select_words):\n\tassert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "def check(select_words):\n\tassert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "def check(select_words):\n\tassert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "def check(select_words):\n\tassert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "def check(select_words):\n\tassert select_words('r s rhhipmt', 6) == ['rhhipmt']", "def check(select_words):\n\tassert select_words('aDqyhePv', 6) == ['aDqyhePv']", "def check(select_words):\n\tassert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "def check(select_words):\n\tassert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "def check(select_words):\n\tassert select_words('aru', 5) == []", "def check(select_words):\n\tassert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "def check(select_words):\n\tassert select_words('SNeiILCez', 4) == []", "def check(select_words):\n\tassert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "def check(select_words):\n\tassert select_words('ySmjGAg', 6) == ['ySmjGAg']", "def check(select_words):\n\tassert select_words('bRJRZC', 3) == []", "def check(select_words):\n\tassert select_words('u', 1) == []", "def check(select_words):\n\tassert select_words('djucfuuizrjfvuzzo', 4) == []", "def check(select_words):\n\tassert select_words('dvYLMt', 6) == ['dvYLMt']", "def check(select_words):\n\tassert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "def check(select_words):\n\tassert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "def check(select_words):\n\tassert select_words('yp', 6) == []", "def check(select_words):\n\tassert select_words('v', 4) == []", "def check(select_words):\n\tassert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "def check(select_words):\n\tassert select_words('afrrguc', 5) == ['afrrguc']", "def check(select_words):\n\tassert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "def check(select_words):\n\tassert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "def check(select_words):\n\tassert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "def check(select_words):\n\tassert select_words('nh vu lcakrb', 1) == ['vu']", "def check(select_words):\n\tassert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "def check(select_words):\n\tassert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(select_words):\n\tassert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "def check(select_words):\n\tassert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "def check(select_words):\n\tassert select_words('MjRnAErHPguQC', 1) == []", "def check(select_words):\n\tassert select_words('tmchxmttrgfdanq', 3) == []", "def check(select_words):\n\tassert select_words('jezkeorvxnruwhhwzxm', 7) == []", "def check(select_words):\n\tassert select_words('caurfxlpkygqxoknil', 4) == []", "def check(select_words):\n\tassert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "def check(select_words):\n\tassert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "def check(select_words):\n\tassert select_words('NSjIbZV', 2) == []", "def check(select_words):\n\tassert select_words('rPKhzIot', 6) == ['rPKhzIot']", "def check(select_words):\n\tassert select_words('ASDVzOVVDEdj J', 1) == ['J']", "def check(select_words):\n\tassert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "def check(select_words):\n\tassert select_words(' siweqafqot', 5) == []", "def check(select_words):\n\tassert select_words('xdQgsAHI', 5) == []", "def check(select_words):\n\tassert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "def check(select_words):\n\tassert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "def check(select_words):\n\tassert select_words('hguHoJGaaNwX', 3) == []", "def check(select_words):\n\tassert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "def check(select_words):\n\tassert select_words('choounwx', 5) == ['choounwx']", "def check(select_words):\n\tassert select_words('yue', 2) == []", "def check(select_words):\n\tassert select_words('DDdrgPy', 4) == []", "def check(select_words):\n\tassert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "def check(select_words):\n\tassert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "def check(select_words):\n\tassert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "def check(select_words):\n\tassert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "def check(select_words):\n\tassert select_words('Reg MuZcF', 4) == ['MuZcF']", "def check(select_words):\n\tassert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "def check(select_words):\n\tassert select_words('sl', 6) == []", "def check(select_words):\n\tassert select_words('IFKqNq ', 5) == ['IFKqNq']", "def check(select_words):\n\tassert select_words('lfspeijyudniowk', 1) == []", "def check(select_words):\n\tassert select_words('kogmgdnk', 7) == ['kogmgdnk']", "def check(select_words):\n\tassert select_words('nnchatjackywoavfwfps', 5) == []", "def check(select_words):\n\tassert select_words('d', 2) == []", "def check(select_words):\n\tassert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "def check(select_words):\n\tassert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "def check(select_words):\n\tassert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "def check(select_words):\n\tassert select_words('jopfxbbvlslmluypcdt', 3) == []", "def check(select_words):\n\tassert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "def check(select_words):\n\tassert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "def check(select_words):\n\tassert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "def check(select_words):\n\tassert select_words('etdrxwybqi', 1) == []", "def check(select_words):\n\tassert select_words('aVCSziOkLCLGizHcmC', 2) == []", "def check(select_words):\n\tassert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "def check(select_words):\n\tassert select_words('txXxge', 4) == []", "def check(select_words):\n\tassert select_words('kcpieuVjAOaxdpB', 4) == []", "def check(select_words):\n\tassert select_words('oh', 8) == []", "def check(select_words):\n\tassert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "def check(select_words):\n\tassert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "def check(select_words):\n\tassert select_words('eywh qxreeexrrhyovpwl', 7) == []", "def check(select_words):\n\tassert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "def check(select_words):\n\tassert select_words('asfwxvbzdfsrymc', 3) == []", "def check(select_words):\n\tassert select_words('nBmjWxiPV', 3) == []", "def check(select_words):\n\tassert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "test_case_list": ["assert select_words('eg aqk', 2) == ['aqk']", "assert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "assert select_words('syk', 6) == []", "assert select_words('gw', 9) == []", "assert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "assert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "assert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "assert select_words('zGMhBC', 6) == ['zGMhBC']", "assert select_words('kfohjsjunakqmmsx', 1) == []", "assert select_words('KbpFfWgXZoVjXV', 1) == []", "assert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "assert select_words('kg', 1) == []", "assert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "assert select_words('xrbpxpncgqufqkq', 6) == []", "assert select_words('sqgikswgssxsbwkl', 7) == []", "assert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "assert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "assert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "assert select_words('bnXA AjPVh', 5) == []", "assert select_words('omnivbqgmavyqdgqssas', 6) == []", "assert select_words('fmjizkhknnihqioic', 4) == []", "assert select_words('lINKPOlFIImtg', 3) == []", "assert select_words('nPxmyTd', 7) == ['nPxmyTd']", "assert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "assert select_words('mehochzpausf', 2) == []", "assert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "assert select_words('EGiDfM', 1) == []", "assert select_words('mc', 7) == []", "assert select_words('wzx', 5) == []", "assert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "assert select_words('xwkxcjffocow', 5) == []", "assert select_words('dl', 5) == []", "assert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "assert select_words('ABIStgq', 5) == ['ABIStgq']", "assert select_words('nb', 2) == ['nb']", "assert select_words('ny', 2) == ['ny']", "assert select_words('HWCLBC', 6) == ['HWCLBC']", "assert select_words('uuh', 6) == []", "assert select_words('uoubngttn', 3) == []", "assert select_words('g', 5) == []", "assert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "assert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "assert select_words('aztxoxesjkzqebhrfzw', 3) == []", "assert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "assert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "assert select_words('tJzO PnCT', 3) == ['tJzO']", "assert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "assert select_words('qhwubvrfmwy', 2) == []", "assert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "assert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "assert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "assert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "assert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "assert select_words('r s rhhipmt', 6) == ['rhhipmt']", "assert select_words('aDqyhePv', 6) == ['aDqyhePv']", "assert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "assert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "assert select_words('aru', 5) == []", "assert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "assert select_words('SNeiILCez', 4) == []", "assert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "assert select_words('ySmjGAg', 6) == ['ySmjGAg']", "assert select_words('bRJRZC', 3) == []", "assert select_words('u', 1) == []", "assert select_words('djucfuuizrjfvuzzo', 4) == []", "assert select_words('dvYLMt', 6) == ['dvYLMt']", "assert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "assert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "assert select_words('yp', 6) == []", "assert select_words('v', 4) == []", "assert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "assert select_words('afrrguc', 5) == ['afrrguc']", "assert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "assert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "assert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "assert select_words('nh vu lcakrb', 1) == ['vu']", "assert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "assert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "assert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "assert select_words('MjRnAErHPguQC', 1) == []", "assert select_words('tmchxmttrgfdanq', 3) == []", "assert select_words('jezkeorvxnruwhhwzxm', 7) == []", "assert select_words('caurfxlpkygqxoknil', 4) == []", "assert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "assert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "assert select_words('NSjIbZV', 2) == []", "assert select_words('rPKhzIot', 6) == ['rPKhzIot']", "assert select_words('ASDVzOVVDEdj J', 1) == ['J']", "assert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "assert select_words(' siweqafqot', 5) == []", "assert select_words('xdQgsAHI', 5) == []", "assert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "assert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "assert select_words('hguHoJGaaNwX', 3) == []", "assert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "assert select_words('choounwx', 5) == ['choounwx']", "assert select_words('yue', 2) == []", "assert select_words('DDdrgPy', 4) == []", "assert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "assert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "assert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "assert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "assert select_words('Reg MuZcF', 4) == ['MuZcF']", "assert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "assert select_words('sl', 6) == []", "assert select_words('IFKqNq ', 5) == ['IFKqNq']", "assert select_words('lfspeijyudniowk', 1) == []", "assert select_words('kogmgdnk', 7) == ['kogmgdnk']", "assert select_words('nnchatjackywoavfwfps', 5) == []", "assert select_words('d', 2) == []", "assert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "assert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "assert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "assert select_words('jopfxbbvlslmluypcdt', 3) == []", "assert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "assert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "assert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "assert select_words('etdrxwybqi', 1) == []", "assert select_words('aVCSziOkLCLGizHcmC', 2) == []", "assert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "assert select_words('txXxge', 4) == []", "assert select_words('kcpieuVjAOaxdpB', 4) == []", "assert select_words('oh', 8) == []", "assert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "assert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "assert select_words('eywh qxreeexrrhyovpwl', 7) == []", "assert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "assert select_words('asfwxvbzdfsrymc', 3) == []", "assert select_words('nBmjWxiPV', 3) == []", "assert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "nl": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    ", "func": "def select_words(s, n):", "examples": "Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    ", "repair_prompt": ["def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \na function that returns a list of all words from string s that contain exactly \nn consonants. These words should be returned in the order they appear in the string s.  \nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "```python\ndef select_words(s, n):\t\n    '''Given a string s and a natural number n, your task is to implement a \n    function that returns a list of all words from string s that contain exactly \n    n consonants. These words should be returned in sequence, preserving their original order of appearance in the string s.  \n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n        select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n        select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n        select_words(\"simple white space\", 2) ==> []\n        select_words(\"Hello world\", 4) ==> [\"world\"]\n        select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''\n```", "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \na function that returns a list of all words from string s that contain exactly \nn consonants in the order they appear in the string s. If the string s is empty then \nthe function should return an empty list. Note: you may assume the input string contains \nonly letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Given a string s and a natural number n, returns a list of words from s that contain exactly n consonants.\n\n    Parameters:\n    s (str): The input string containing words separated by spaces.\n    n (int): The number of consonants to match in each word.\n\n    Returns:\n    list: A list of words with exactly n consonants.\n    \"\"\"\n    # Define vowels for easy checking\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store words with exactly n consonants\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        \n        # If the count matches n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the result list\n    return result\n\n# Example usage:\n# print(select_words(\"This is a test string\", 2))  # Output: ['This', 'test']\n# print(select_words(\"a e i o u\", 0))  # Output: ['a', 'e', 'i', 'o', 'u']\n# print(select_words(\"bcdfg\", 5))  # Output: ['bcdfg']\n# print(select_words(\"\", 3))  # Output: []\n", "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Filters words from the input string `s` that contain exactly `n` consonants.\n\n    Args:\n        s (str): A string containing words separated by spaces.\n        n (int): An integer representing the number of consonants to filter words by.\n\n    Returns:\n        list: A list of words from the string `s` that contain exactly `n` consonants.\n    \"\"\"\n    # Define vowels for easy checking\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize a list to store words that meet the criteria\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Initialize a counter for consonants\n        consonant_count = 0\n        \n        # Iterate through each character in the word\n        for char in word:\n            # Check if the character is a consonant\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        \n        # Check if the consonant count matches the specified number `n`\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the result list\n    return result\n\n# Example usage:\n# print(select_words(\"This is a test string\", 2))  # Output: ['This', 'test']\n", "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Filters words from the input string that contain exactly n consonants.\n\n    Args:\n        s: A string containing words separated by spaces.\n        n: An integer representing the number of consonants to filter words by.\n\n    Returns:\n        A list of words from the input string that contain exactly n consonants.\n    \"\"\"\n    # Define vowels for reference\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store words with exactly n consonants\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Initialize a counter for consonants\n        consonant_count = 0\n        \n        # Iterate through each character in the word\n        for char in word:\n            # Check if the character is a consonant (not a vowel and is an alphabet letter)\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        \n        # If the consonant count equals n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the result list\n    return result\n", "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Select words from the input string that contain exactly n consonants.\n\n    Args:\n        s: A string containing words separated by spaces.\n        n: An integer representing the number of consonants to match.\n\n    Returns:\n        A list of words from the input string that contain exactly n consonants.\n    \"\"\"\n    # Define a set of vowels for easy checking\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize a list to store words with exactly n consonants\n    result = []\n    \n    # Iterate over each word in the list of words\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        \n        # If the count of consonants equals n, append the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words with exactly n consonants\n    return result\n\n# Example usage:\n# print(select_words(\"a e i o u\", 0))  # Output: [\"a\", \"e\", \"i\", \"o\", \"u\"]\n# print(select_words(\"b c d f g\", 1))  # Output: [\"b\", \"c\", \"d\", \"f\", \"g\"]\n# print(select_words(\"\", 3))           # Output: []\n", "from typing import List\n## main.py\n\nimport re\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"\n    Select words from the input string that contain exactly n consonants.\n\n    Args:\n        s: A string containing words separated by spaces.\n        n: An integer representing the number of consonants to match.\n\n    Returns:\n        A list of words from the string s that contain exactly n consonants.\n    \"\"\"\n    # Define a regular expression pattern to match consonants\n    consonant_pattern = re.compile(r'[^aeiouAEIOU\\s]')\n\n    # Split the input string into words\n    words = s.split()\n\n    # Initialize a list to store words with exactly n consonants\n    matching_words = []\n\n    # Iterate over each word in the list\n    for word in words:\n        # Find all consonants in the word using the regex pattern\n        consonants = consonant_pattern.findall(word)\n\n        # Check if the number of consonants matches n\n        if len(consonants) == n:\n            # Add the word to the list of matching words\n            matching_words.append(word)\n\n    # Return the list of words with exactly n consonants\n    return matching_words\n", "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Select words from the input string that contain exactly 'n' consonants.\n\n    Args:\n        s (str): A string containing words separated by spaces.\n        n (int): An integer representing the number of consonants to match.\n\n    Returns:\n        list: A list of words from the string 's' that contain exactly 'n' consonants.\n    \"\"\"\n    # Define vowels for easy checking\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize a list to store words with exactly 'n' consonants\n    result = []\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        \n        # If the count equals 'n', add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words with exactly 'n' consonants\n    return result\n\n# Example usage:\n# print(select_words(\"b c d f g\", 1))  # Output: [\"b\", \"c\", \"d\", \"f\", \"g\"]\n# print(select_words(\"a e i o u\", 1))  # Output: []\n# print(select_words(\"\", 3))           # Output: []\n", "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Select words with exactly n consonants from a given string.\n\n    Args:\n        s: A string containing words separated by spaces.\n        n: An integer representing the exact number of consonants to look for in each word.\n\n    Returns:\n        A list of words from the string s that contain exactly n consonants.\n    \"\"\"\n    # Define vowels for easy checking\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize a list to store words with exactly n consonants\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Initialize consonant counter\n        consonant_count = 0\n        \n        # Iterate over each character in the word\n        for char in word:\n            # Check if the character is a consonant\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        \n        # Check if the consonant count matches n\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words with exactly n consonants\n    return result\n\n# Example usage:\n# print(select_words(\"b c d f g\", 1))  # Output: [\"b\", \"c\", \"d\", \"f\", \"g\"]\n# print(select_words(\"a e i o u\", 1))  # Output: []\n# print(select_words(\"\", 3))           # Output: []\n", "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Given a string s and a natural number n, returns a list of all words from string s that contain exactly n consonants.\n\n    Parameters:\n    s (str): The input string containing words separated by spaces.\n    n (int): The number of consonants to match in each word.\n\n    Returns:\n    list: A list of words with exactly n consonants.\n    \"\"\"\n    # Define vowels for reference\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store words with exactly n consonants\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Initialize a counter for consonants\n        consonant_count = 0\n        \n        # Iterate through each character in the word\n        for char in word:\n            # Check if the character is a consonant (not a vowel and is an alphabet letter)\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        \n        # If the counter equals n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words with exactly n consonants\n    return result\n\n# Example usage:\n# print(select_words(\"b c d f g\", 1))  # Output: [\"b\", \"c\", \"d\", \"f\", \"g\"]\n# print(select_words(\"a e i o u\", 1))  # Output: []\n# print(select_words(\"\", 3))           # Output: []\n", "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Select words from the input string that contain exactly n consonants.\n\n    Args:\n        s (str): A string containing words separated by spaces.\n        n (int): An integer representing the exact number of consonants to match.\n\n    Returns:\n        list: A list of words from the input string that contain exactly n consonants.\n    \"\"\"\n    # Define vowels for reference\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store words with exactly n consonants\n    result = []\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        \n        # If the count equals n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the list of words with exactly n consonants\n    return result\n\n# Example usage:\n# print(select_words(\"a e i o u\", 0))  # Output: [\"a\", \"e\", \"i\", \"o\", \"u\"]\n# print(select_words(\"bbbb cccc dddd\", 4))  # Output: [\"bbbb\", \"cccc\", \"dddd\"]\n# print(select_words(\"\", 3))  # Output: []\n", "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Select words from the input string that contain exactly n consonants.\n\n    Args:\n        s: A string containing words separated by spaces.\n        n: An integer representing the exact number of consonants a word must have.\n\n    Returns:\n        A list of words from the input string that contain exactly n consonants.\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store words with exactly n consonants\n    result = []\n    \n    # Iterate over each word in the list of words\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        \n        # If the count equals n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the result list\n    return result\n\n# Example usage:\n# print(select_words(\"b c d f g\", 1))  # Output: [\"b\", \"c\", \"d\", \"f\", \"g\"]\n# print(select_words(\"a e i o u\", 1))  # Output: []\n# print(select_words(\"\", 3))           # Output: []\n"], "plans": ["requirement analysis:\nThe function should efficiently parse the input string, count consonants in each word, and return words with the exact number of consonants specified. It should handle edge cases like empty strings and ensure the order of words is preserved.\nrequirement pool:\n- Implement the main function to select words based on consonant count.\n- Optimize the function for performance with large strings.\n- Ensure the function handles edge cases like empty strings.\n- Add comprehensive test cases for various input scenarios.\n- Document the function usage and edge cases.\nWe will implement a function that iterates over each word in the input string, counts the consonants, and checks if the count matches the specified number. The function will use Python's built-in string methods for simplicity and efficiency. We will assume the input contains only letters and spaces, as specified.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (A, E, I, O, U). In this requirement, we need to count the number of consonants in each word.\n\n    'natural number'\n    Explanation: A natural number is a positive integer (1, 2, 3, ...). In this requirement, it specifies the exact number of consonants a word must have to be included in the result.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': means that a word must contain precisely n consonants to be included in the result list.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Split the input string into words.\n    2. Initialize an empty list to store words with exactly n consonants.\n    3. Iterate over each word in the list.\n    4. For each word, count the number of consonants.\n    5. If the count matches n, add the word to the result list.\n    6. Return the result list.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check for consonants. The expected output is an empty list.\n\n    select_words(\"a e i o u\", 0) = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    Explanation: Each word in the string is a vowel and contains zero consonants. Since we are looking for words with exactly 0 consonants, all words are included in the result.\n\n    select_words(\"bcdfg\", 5) = [\"bcdfg\"]\n    Explanation: The word \"bcdfg\" contains exactly 5 consonants, which matches the requirement. Therefore, it is included in the result.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking the number of consonants in each word and returning an empty list if the input string is empty.\n", "requirement analysis:\nThe function needs to accurately identify words with a specified number of consonants, ensuring it handles edge cases like empty strings and varying word lengths. Performance optimization is crucial for handling large strings efficiently.\nrequirement pool:\n- Implement function to select words based on consonant count\n- Optimize function for performance with large strings\n- Ensure function handles edge cases like empty strings\n- Maintain simplicity and clarity in code implementation\n- Provide comprehensive test cases for validation\nWe will implement a function that iterates over each word in the input string, counts the consonants, and checks if the count matches the specified number. The function will handle edge cases like empty strings and will be optimized for performance by using efficient string operations. We will use Python's built-in capabilities without additional libraries, as they are sufficient for this task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'natural number'\n    Explanation: A natural number is a positive integer (1, 2, 3, ...). In this context, it means that the input number `n` will always be a positive integer.\n\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (a, e, i, o, u). The task is to count these consonants in each word of the string.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': This means that we need to find words where the number of consonants is equal to the given number `n`. In code, this can be implemented by counting the consonants in each word and checking if the count equals `n`.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Split the input string `s` into words.\n2. Initialize an empty list to store words that meet the criteria.\n3. For each word in the list:\n   - Initialize a counter for consonants.\n   - Iterate through each character in the word.\n   - Check if the character is a consonant (not a vowel and is an alphabet letter).\n   - Increment the counter if it is a consonant.\n   - After checking all characters in the word, compare the counter with `n`.\n   - If they are equal, add the word to the result list.\n4. Return the result list.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check. The function should return an empty list.\n\n    select_words(\"a e i o u\", 0) = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    Explanation: Each word is a single vowel with no consonants. Since `n` is 0, all these words meet the criteria.\n\n    select_words(\"b c d f g\", 1) = [\"b\", \"c\", \"d\", \"f\", \"g\"]\n    Explanation: Each word is a single consonant. Since `n` is 1, all these words meet the criteria.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for empty strings and words with zero or more consonants.\n", "requirement analysis:\nThe function should efficiently parse the input string, identify words, and count consonants. It must handle edge cases such as empty strings and ensure the output list is ordered as per the input string.\nrequirement pool:\n- Implement the main function to select words based on consonant count.\n- Optimize the function for performance with large strings.\n- Ensure the function handles edge cases like empty strings.\n- Provide clear documentation and examples for user understanding.\n- Consider additional features like vowel count or word length filtering.\nWe will implement a function that iterates over each word in the input string, counts the consonants, and returns a list of words with exactly the specified number of consonants. We will use Python's built-in string manipulation capabilities to efficiently parse and process the input string.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (a, e, i, o, u). In this requirement, we need to count the number of consonants in each word of the string.\n\n    'natural number'\n    Explanation: A natural number is a positive integer (1, 2, 3, ...). In this requirement, it specifies the exact number of consonants a word must have to be included in the result.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': This means that a word must have a precise number of consonants equal to n to be included in the result list.\n    Implementation: Count the consonants in each word and check if it equals n.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Split the input string `s` into words.\n2. Initialize an empty list to store words with exactly `n` consonants.\n3. For each word in the list:\n   - Initialize a counter for consonants.\n   - Iterate through each character in the word.\n   - Check if the character is a consonant (not a vowel and is an alphabet letter).\n   - Increment the counter if it is a consonant.\n   - After checking all characters, if the counter equals `n`, add the word to the result list.\n4. Return the result list.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check. The expected output is an empty list.\n\n    select_words(\"a e i o u\", 0) = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    Explanation: Each word (vowel) has 0 consonants, which matches the requirement of having exactly 0 consonants.\n\n    select_words(\"b c d f g\", 1) = [\"b\", \"c\", \"d\", \"f\", \"g\"]\n    Explanation: Each word consists of a single consonant, which matches the requirement of having exactly 1 consonant.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking each word's consonant count against `n`.\n", "requirement analysis:\nThe function should accurately count consonants in each word and return words with exactly n consonants. It should handle edge cases such as empty strings and words with no consonants.\nrequirement pool:\n- Implement the main function logic\n- Optimize for performance with large strings\n- Ensure accurate consonant counting\n- Handle edge cases like empty strings\n- Maintain code readability\nWe will implement a function that splits the input string into words, counts the consonants in each word, and returns a list of words that have exactly n consonants. We will use Python's built-in string methods for splitting and iterating over the words. The function will handle edge cases such as empty strings by returning an empty list. The function will be optimized for performance by using efficient string operations and will maintain readability by using clear and concise code.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (A, E, I, O, U). In this requirement, the task is to count the number of consonants in each word.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': means that we need to find words with a precise number of consonants equal to n.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Split the input string `s` into individual words using the `split()` method.\n    2. Initialize an empty list to store words with exactly `n` consonants.\n    3. Iterate over each word in the list of words.\n    4. For each word, count the number of consonants by iterating over each character and checking if it is a consonant.\n    5. If the count of consonants in a word equals `n`, append the word to the result list.\n    6. Return the list of words with exactly `n` consonants.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check for consonants. The expected output is an empty list.\n    \n    select_words(\"a e i o u\", 0) = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    Explanation: All words in the string are vowels and contain zero consonants, which matches the requirement of having exactly 0 consonants.\n    \n    select_words(\"b c d f g\", 1) = [\"b\", \"c\", \"d\", \"f\", \"g\"]\n    Explanation: Each word in the string is a single consonant, which matches the requirement of having exactly 1 consonant.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already handles cases such as empty strings and words with zero or one consonant correctly.\n", "requirement analysis:\nThe function should accurately count consonants in each word and return those with exactly n consonants, maintaining the original order. It should handle edge cases like empty strings and ensure performance efficiency.\nrequirement pool:\n- Implement consonant counting logic\n- Preserve original word order in output\n- Handle empty string input gracefully\n- Optimize performance for large strings\n- Consider additional features like vowel counting\nWe will implement a function that splits the input string into words, counts the consonants in each word, and returns those with exactly n consonants. We will use Python's built-in string methods and regular expressions to efficiently handle the string operations and consonant counting.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (a, e, i, o, u). The requirement is to count these letters in each word.\n\n    'natural number'\n    Explanation: A natural number is a positive integer (1, 2, 3, ...). The requirement specifies that the number of consonants to match is a natural number.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': means that we need to find words with a precise count of consonants equal to n.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Split the input string `s` into individual words.\n    2. Initialize an empty list to store words with exactly `n` consonants.\n    3. For each word, count the number of consonants.\n    4. If the count of consonants in a word is equal to `n`, add the word to the list.\n    5. Return the list of words.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check for consonants. The expected output is an empty list.\n\n    select_words(\"a e i o u\", 1) = []\n    Explanation: All words in the string are vowels, so none contain consonants. The expected output is an empty list.\n\n    select_words(\"b c d f g\", 1) = [\"b\", \"c\", \"d\", \"f\", \"g\"]\n    Explanation: Each word contains exactly one consonant, matching the requirement of `n = 1`. The expected output is a list of all words.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles empty strings and words without consonants naturally.\n", "requirement analysis:\nThe function should accurately count consonants in each word and return those with exactly 'n' consonants, maintaining the original order. It should handle edge cases like empty strings and ensure performance efficiency.\nrequirement pool:\n- Implement consonant counting logic\n- Preserve original word order in output\n- Optimize for performance\n- Handle empty string input gracefully\n- Consider edge cases with special characters\nWe will implement a function that splits the input string into words, counts the consonants in each word, and returns those with exactly 'n' consonants. We will use Python's built-in string manipulation capabilities to achieve this efficiently. The function will handle empty strings gracefully by returning an empty list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (i.e., not 'a', 'e', 'i', 'o', 'u'). The requirement is to count these consonants in each word.\n\n    'natural number'\n    Explanation: A natural number is a positive integer (1, 2, 3, ...). The requirement specifies that 'n' will be a natural number, meaning it will always be positive.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': means that we need to find words with a precise count of consonants equal to 'n'.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Split the input string 's' into individual words.\n    2. Initialize an empty list to store words with exactly 'n' consonants.\n    3. Iterate through each word in the list:\n        - Count the number of consonants in the word.\n        - If the count equals 'n', add the word to the result list.\n    4. Return the list of words with exactly 'n' consonants.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check for consonants. The expected output is an empty list.\n\n    select_words(\"a e i o u\", 1) = []\n    Explanation: All words in the string are vowels, and none contain consonants. Therefore, no word can have exactly 1 consonant.\n\n    select_words(\"b c d f g\", 1) = [\"b\", \"c\", \"d\", \"f\", \"g\"]\n    Explanation: Each word in the string is a single consonant, so they all meet the requirement of having exactly 1 consonant.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles empty strings and checks each word for the exact number of consonants.\n", "requirement analysis:\nThe function should accurately count consonants in each word and return those with exactly n consonants. It should handle edge cases like empty strings and ensure performance efficiency.\nrequirement pool:\n- Implement consonant counting logic\n- Handle empty string input\n- Optimize for large input strings\n- Ensure output is in the order of appearance\n- Provide user-friendly error messages\nWe will implement a function that iterates over each word in the input string, counts the consonants, and returns a list of words with exactly n consonants. We will use Python's built-in string methods and list comprehensions for efficient processing. The function will handle empty strings gracefully by returning an empty list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (a, e, i, o, u). In this requirement, we need to count the number of consonants in each word of the string.\n\n    'natural number'\n    Explanation: A natural number is a positive integer (1, 2, 3, ...). The requirement specifies that n is a natural number, meaning it will always be a positive integer.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': This means that we need to find words in the string that have a precise number of consonants equal to n. In code, this can be implemented by counting the consonants in each word and checking if the count equals n.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Split the input string s into individual words.\n2. Initialize an empty list to store words with exactly n consonants.\n3. For each word in the list of words:\n   - Initialize a counter for consonants.\n   - Iterate through each character in the word.\n   - Check if the character is a consonant (not a vowel and is an alphabet letter).\n   - Increment the consonant counter if it is a consonant.\n   - After iterating through the word, check if the consonant counter equals n.\n   - If it does, append the word to the result list.\n4. Return the result list.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check for consonants. The expected output is an empty list.\n\n    select_words(\"a e i o u\", 1) = []\n    Explanation: All words in the string are vowels with no consonants. Therefore, no word has exactly 1 consonant, resulting in an empty list.\n\n    select_words(\"b c d f g\", 1) = [\"b\", \"c\", \"d\", \"f\", \"g\"]\n    Explanation: Each word in the string is a single consonant letter. Since n is 1, each word meets the requirement and is included in the output list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already handles empty strings and words with no consonants appropriately.\n", "requirement analysis:\nThe function should accurately identify words with the specified number of consonants, handle edge cases like empty strings, and perform efficiently. It should be easy to integrate and use in various applications.\nrequirement pool:\n- Implement the main function to select words based on consonant count.\n- Optimize the function for performance with large strings.\n- Ensure the function handles edge cases like empty strings.\n- Provide comprehensive documentation and examples.\n- Include a suite of test cases for validation.\nWe will implement a function that iterates over each word in the input string, counts the consonants, and checks if the count matches the specified number. We will use Python's built-in string methods for efficient string manipulation and processing. The function will handle edge cases like empty strings gracefully by returning an empty list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'natural number'\n    Explanation: A natural number is a positive integer (1, 2, 3, ...). In this context, it means that the input number `n` will always be a positive integer.\n\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (a, e, i, o, u). The task is to count these consonants in each word of the string.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': means that we need to find words that have a number of consonants equal to `n`.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Split the input string `s` into words.\n2. Initialize an empty list to store words with exactly `n` consonants.\n3. For each word in the list:\n   - Initialize a counter for consonants.\n   - Iterate through each character in the word.\n   - Check if the character is a consonant (not a vowel and is an alphabet letter).\n   - Increment the counter if it is a consonant.\n   - If the counter equals `n`, add the word to the result list.\n4. Return the list of words with exactly `n` consonants.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check. The expected output is an empty list.\n\n    select_words(\"a e i o u\", 1) = []\n    Explanation: All words in the string are vowels, so none of them contain any consonants. The expected output is an empty list.\n\n    select_words(\"b c d f g\", 1) = [\"b\", \"c\", \"d\", \"f\", \"g\"]\n    Explanation: Each word in the string is a single consonant, so they all have exactly 1 consonant. The expected output is a list of all these words.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already handles cases like empty strings and words with no consonants by returning an empty list when no words meet the criteria.\n", "requirement analysis:\nThe function should accurately count consonants in each word and return those with exactly n consonants. It should handle edge cases like empty strings and ensure performance is optimized for large inputs.\nrequirement pool:\n- Implement consonant counting logic\n- Handle empty string input\n- Optimize for performance with large strings\n- Ensure output is clear and concise\n- Consider edge cases and error handling\nWe will implement a function that splits the input string into words, counts the consonants in each word, and returns a list of words with exactly n consonants. We will use Python's built-in string manipulation capabilities to achieve this efficiently. The function will handle empty strings by returning an empty list. We will ensure the function is optimized for performance by using efficient string operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (a, e, i, o, u). The requirement specifies counting these in each word.\n\n    'natural number'\n    Explanation: A natural number is a positive integer (1, 2, 3, ...). The requirement specifies using this number to determine how many consonants a word must have.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': means that we need to find words with a precise number of consonants equal to n.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Split the input string `s` into individual words.\n    2. Initialize an empty list to store words with exactly `n` consonants.\n    3. Iterate through each word in the list:\n        - Count the number of consonants in the word.\n        - If the count equals `n`, add the word to the result list.\n    4. Return the list of words with exactly `n` consonants.\n    5. If the input string `s` is empty, return an empty list immediately.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check for consonants. The expected output is an empty list.\n\n    select_words(\"a e i o u\", 0) = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    Explanation: Each word has zero consonants, which matches the requirement of having exactly 0 consonants.\n\n    select_words(\"bbbb cccc dddd\", 4) = [\"bbbb\", \"cccc\", \"dddd\"]\n    Explanation: Each word has exactly 4 consonants, which matches the requirement.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for empty strings and checks for exact consonant counts.\n", "requirement analysis:\nThe function should efficiently count consonants in each word and return those with exactly n consonants. It should handle edge cases like empty strings and ensure performance is optimized for large inputs.\nrequirement pool:\n- Implement consonant counting logic\n- Optimize for performance with large strings\n- Handle edge cases like empty strings\n- Ensure code readability and simplicity\n- Provide detailed error messages for invalid inputs\nWe will implement a function that iterates over each word in the input string, counts the consonants in each word, and returns a list of words that have exactly the specified number of consonants. The function will handle edge cases such as empty strings and will be optimized for performance by using efficient string operations. We will use Python's built-in string methods and list comprehensions to maintain simplicity and readability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'natural number'\n    Explanation: A natural number is a positive integer (1, 2, 3, ...). In this context, it means that the input number `n` will always be a positive integer.\n\n    'consonants'\n    Explanation: Consonants are letters in the alphabet that are not vowels (a, e, i, o, u). The task is to count these consonants in each word.\n\n# [phrase showing quantity relationship]\n    'exactly n consonants': means that we need to find words with a number of consonants equal to `n`.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Split the input string `s` into words.\n    2. Initialize an empty list to store words with exactly `n` consonants.\n    3. For each word in the list of words:\n        a. Count the number of consonants in the word.\n        b. If the count equals `n`, add the word to the result list.\n    4. Return the result list.\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: The input string is empty, so there are no words to check for consonants.\n\n    select_words(\"a e i o u\", 1) = []\n    Explanation: All words are vowels only, so none have consonants.\n\n    select_words(\"b c d f g\", 1) = [\"b\", \"c\", \"d\", \"f\", \"g\"]\n    Explanation: Each word is a single consonant, matching the requirement of exactly 1 consonant.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already handles empty strings and words without consonants correctly.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [133, 133, 133, 133, 133, 133, 133, 133, 133, 133], "completion": "from typing import List\n## main.py\n\ndef select_words(s: str, n: int) -> list:\n    \"\"\"\n    Select words from the input string that contain exactly n consonants.\n\n    Args:\n        s: A string containing words separated by spaces.\n        n: An integer representing the exact number of consonants a word must have.\n\n    Returns:\n        A list of words from the input string that contain exactly n consonants.\n    \"\"\"\n    # Define a set of vowels for easy lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store words with exactly n consonants\n    result = []\n    \n    # Iterate over each word in the list of words\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        \n        # If the count equals n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the result list\n    return result\n\n# Example usage:\n# print(select_words(\"b c d f g\", 1))  # Output: [\"b\", \"c\", \"d\", \"f\", \"g\"]\n# print(select_words(\"a e i o u\", 1))  # Output: []\n# print(select_words(\"\", 3))           # Output: []\n", "passed": true, "pass": true, "pass_num": 10, "round": 511, "mutate_method": "expand_one2two", "parent_index": 99}
