{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing. Also return True if list elements are monotonically decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing; otherwise, return False.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(l) <= 1:\n        return True\n\n    # Initialize flags for increasing and decreasing\n    increasing = True\n    decreasing = True\n\n    # Iterate through the list and compare each element with the next\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    # Return True if the list is either non-decreasing or non-increasing\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements (e.g., numbers).\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = False\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            increasing = True\n        elif l[i] < l[i - 1]:\n            decreasing = True\n\n        if increasing and decreasing:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonically increasing or decreasing.\n\n    Args:\n        l (list): A list of comparable elements.\n\n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(l) <= 1:\n        return True\n\n    # Initialize flags for increasing and decreasing\n    is_increasing = True\n    is_decreasing = True\n\n    # Iterate through the list from the second element to the end\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            is_decreasing = False\n        elif l[i] < l[i - 1]:\n            is_increasing = False\n\n    # Return True if the list is either increasing or decreasing\n    return is_increasing or is_decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either increasing or decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([])\n    True\n    >>> monotonic([3, 3, 3])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            decreasing = False\n        if l[i] > l[i + 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Determine if the list is monotonic (either increasing or decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    '''\n    # Check if the list is empty or has only one element\n    if len(l) <= 1:\n        return True\n\n    # Initialize flags for increasing and decreasing\n    is_increasing = True\n    is_decreasing = True\n\n    # Iterate through the list to check for monotonicity\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            is_decreasing = False\n        elif l[i] < l[i - 1]:\n            is_increasing = False\n\n    # Return True if the list is either increasing or decreasing\n    return is_increasing or is_decreasing\n\n# Example usage:\n# print(monotonic([]))  # True\n# print(monotonic([5]))  # True\n# print(monotonic([3, 3, 3]))  # True\n# print(monotonic([1, 2, 3]))  # True\n# print(monotonic([3, 2, 1]))  # True\n# print(monotonic([1, 3, 2]))  # False\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonically increasing or decreasing.\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonically increasing or decreasing, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([1])\n    True\n    >>> monotonic([1, 1, 1])\n    True\n    >>> monotonic([])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonically increasing or decreasing.\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        # An empty list or a list with a single element is trivially monotonic\n        return True\n\n    increasing = decreasing = False\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            increasing = True\n        elif l[i] < l[i - 1]:\n            decreasing = True\n\n        # If both increasing and decreasing flags are True, the list is not monotonic\n        if increasing and decreasing:\n            return False\n\n    # If the loop completes without both flags being True, the list is monotonic\n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements (e.g., numbers).\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Check for edge cases: empty list or single-element list\n    if len(l) <= 1:\n        return True\n\n    # Initialize flags for increasing and decreasing\n    increasing = decreasing = False\n\n    # Iterate through the list from the second element to the end\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            increasing = True\n        elif l[i] < l[i - 1]:\n            decreasing = True\n\n        # If both flags are True, the list is not monotonic\n        if increasing and decreasing:\n            return False\n\n    # If only one of the flags is True, the list is monotonic\n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            is_decreasing = False\n        if l[i] < l[i - 1]:\n            is_increasing = False\n\n        # If both flags are false, the list is neither non-increasing nor non-decreasing\n        if not is_increasing and not is_decreasing:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Check if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing\n"], "plans": ["requirement analysis:\nThe function should determine if a list is either entirely non-increasing or non-decreasing. It should handle edge cases such as empty lists or lists with a single element. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the monotonicity check function\n- Optimize the function for large lists\n- Handle edge cases like empty or single-element lists\n- Provide comprehensive documentation and examples\n- Conduct performance benchmarking against competitors\nWe will implement a simple function to check if a list is monotonic by iterating through the list and comparing each element with the next one. We will use Python's built-in capabilities to ensure efficiency and handle edge cases like empty lists or lists with a single element. No additional libraries are required for this basic functionality.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: This means that the list elements should either be in a non-decreasing order (each element is greater than or equal to the previous one) or in a non-increasing order (each element is less than or equal to the previous one).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element, return True as it is trivially monotonic.\n    2. Initialize two flags, `increasing` and `decreasing`, to True.\n    3. Iterate through the list from the first element to the second last element.\n    4. Compare each element with the next one:\n        - If any element is greater than the next, set `increasing` to False.\n        - If any element is less than the next, set `decreasing` to False.\n    5. Return True if either `increasing` or `decreasing` is True, otherwise return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A list with a single element is trivially monotonic as there are no other elements to compare.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: All elements are equal, so the list is both non-decreasing and non-increasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with a single element.\n", "requirement analysis:\nThe function should determine if a list is either entirely non-increasing or non-decreasing. It should handle edge cases such as empty lists or lists with a single element. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the monotonic function to check for increasing or decreasing order.\n- Optimize the function for performance with large lists.\n- Include comprehensive test cases to cover edge cases.\n- Document the function usage and examples clearly.\n- Ensure compatibility with different Python versions.\nWe will implement a simple Python function to determine if a list is monotonic. The function will handle edge cases such as empty lists and single-element lists. We will use pure Python to keep the implementation lightweight and efficient. The function will be optimized for performance with large lists by iterating through the list only once.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: This means that the list elements should either consistently increase or consistently decrease. A list is monotonically increasing if each element is greater than or equal to the previous one, and monotonically decreasing if each element is less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are trivially monotonic.\n    2. Initialize two flags: `increasing` and `decreasing`.\n    3. Iterate through the list from the second element to the end:\n       - If the current element is greater than the previous one, set `increasing` to True.\n       - If the current element is less than the previous one, set `decreasing` to True.\n    4. After the loop, if both `increasing` and `decreasing` are True, return False (the list is not monotonic). Otherwise, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic as there are no elements to violate monotonicity.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare.\n    \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are equal, so the list is both monotonically increasing and decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and single-element lists as monotonic.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists and lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic function to check list order\n- Optimize for performance with large lists\n- Include comprehensive documentation and examples\n- Handle edge cases like empty lists and identical elements\n- Ensure compatibility with Python's list data structure\nWe will implement a function named 'monotonic' that checks if a list is either monotonically increasing or decreasing. The function will handle edge cases such as empty lists and lists with identical elements by returning True for these cases, as they can be considered trivially monotonic. We will use Python's built-in capabilities to ensure compatibility and optimize performance for large lists by minimizing unnecessary operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: This means that the list elements should either consistently increase or consistently decrease. A list is monotonically increasing if each element is greater than or equal to the previous one, and monotonically decreasing if each element is less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True as it is trivially monotonic.\n    2. Initialize two flags: one for checking increasing order and another for decreasing order.\n    3. Iterate through the list from the second element to the end.\n    4. For each element, compare it with the previous one:\n       - If the current element is greater than the previous, set the decreasing flag to False.\n       - If the current element is less than the previous, set the increasing flag to False.\n    5. After iterating through the list, return True if either the increasing or decreasing flag is still True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list can be considered trivially monotonic.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: All elements are identical, so the list can be considered both increasing and decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking for empty lists and lists with identical elements.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists or lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic function to check list order\n- Optimize for performance with large lists\n- Include comprehensive documentation with examples\n- Handle edge cases like empty lists\n- Ensure compatibility with Python 3.x\nWe will implement a function named 'monotonic' that checks if a list is either monotonically increasing or decreasing. The function will handle edge cases such as empty lists and lists with identical elements by returning True, as these can be considered trivially monotonic. We will use Python's built-in capabilities to ensure simplicity and efficiency, avoiding the need for additional libraries. The function will be optimized for performance by using a single pass through the list to determine monotonicity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing' and 'monotonically decreasing'\n    Explanation: Monotonically increasing means each element in the list is greater than or equal to the previous element. Monotonically decreasing means each element is less than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element; return True as it is trivially monotonic.\n    2. Initialize two flags: one for increasing and one for decreasing.\n    3. Iterate through the list and compare each element with the next one.\n    4. If an element is greater than the next, set the decreasing flag to False.\n    5. If an element is less than the next, set the increasing flag to False.\n    6. After iteration, return True if either flag remains True, indicating monotonicity.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered monotonically increasing and decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by returning True for empty or single-element lists and lists with identical elements.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists or lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic function to check increasing or decreasing sequences\n- Optimize function for performance with large lists\n- Include comprehensive documentation with examples\n- Handle edge cases like empty lists or lists with identical elements\n- Ensure compatibility with Python's list data structure\nWe will implement a simple function using Python's built-in capabilities to check if a list is monotonic. The function will iterate through the list to determine if it is either monotonically increasing or decreasing. We will optimize the function to handle large lists efficiently by minimizing the number of comparisons. Additionally, we will include comprehensive documentation with examples to ensure ease of understanding and usage.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing' and 'monotonically decreasing'\n    Explanation: A list is monotonically increasing if each element is greater than or equal to the previous element. A list is monotonically decreasing if each element is less than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element, return True as it is trivially monotonic.\n    2. Initialize two flags: one for increasing and one for decreasing.\n    3. Iterate through the list:\n        - Compare each element with the next one.\n        - If an element is greater than the next, set the decreasing flag to True.\n        - If an element is less than the next, set the increasing flag to True.\n    4. Return True if either the increasing or decreasing flag is True, but not both.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: All elements are equal, so the list is both monotonically increasing and decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the length of the list and handling cases where all elements are equal.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonically increasing or decreasing. It should handle edge cases such as empty lists or lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic function to check increasing or decreasing sequences\n- Optimize function for performance with large lists\n- Include comprehensive documentation with examples\n- Handle edge cases like empty lists or lists with identical elements\n- Ensure compatibility with Python's list data structure\nWe will implement a simple function using Python's built-in capabilities to check if a list is monotonically increasing or decreasing. The function will iterate through the list and compare each element with the next one to determine the monotonicity. This approach ensures compatibility with Python's list data structure and optimizes performance for large lists by minimizing operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing' and 'monotonically decreasing'\n    Explanation: Monotonically increasing means each element in the list is greater than or equal to the previous element. Monotonically decreasing means each element in the list is less than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize two flags, `increasing` and `decreasing`, both set to True.\n    2. Iterate through the list from the first element to the second-to-last element.\n    3. For each element, compare it with the next element:\n        - If the current element is greater than the next, set `increasing` to False.\n        - If the current element is less than the next, set `decreasing` to False.\n    4. After the loop, return True if either `increasing` or `decreasing` is True.\n\n# [edge case] \n    monotonic([1]) = True\n    Explanation: A single-element list is trivially monotonic as it does not change.\n    \n    monotonic([1, 1, 1]) = True\n    Explanation: All elements are equal, satisfying both increasing and decreasing conditions.\n    \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic as there are no elements to compare.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic naturally handles single-element and empty lists by returning True.\n", "requirement analysis:\nThe function should efficiently determine if a list is monotonic, either increasing or decreasing, without requiring additional libraries. It should handle edge cases such as empty lists or lists with identical elements.\nrequirement pool:\n- Implement the monotonic function to check for increasing or decreasing order\n- Optimize the function for large lists\n- Include comprehensive test cases\n- Provide detailed documentation and examples\n- Ensure compatibility with Python's list data structure\nWe will implement a function named 'monotonic' that checks if a list is either monotonically increasing or decreasing. The function will iterate through the list once, making it efficient for large lists. We will handle edge cases such as empty lists and lists with identical elements by considering them as monotonic. This approach avoids the need for additional libraries, keeping the solution simple and compatible with Python's list data structure.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: This means that the elements of the list should either consistently increase or consistently decrease. In a monotonically increasing list, each element is greater than or equal to the previous one. In a monotonically decreasing list, each element is less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element; if so, return True as it is trivially monotonic.\n    2. Initialize two flags: one for increasing and one for decreasing.\n    3. Iterate through the list and compare each element with the next one.\n    4. If an element is greater than the next, set the decreasing flag to True.\n    5. If an element is less than the next, set the increasing flag to True.\n    6. If both flags are True at any point, return False as the list is not monotonic.\n    7. If the iteration completes without both flags being True, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic by definition.\n    \n    monotonic([5]) = True\n    Explanation: A list with a single element is trivially monotonic.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered monotonic as it neither increases nor decreases.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as monotonic.\n", "requirement analysis:\nThe function should determine if a list is monotonic, meaning it is either entirely non-increasing or non-decreasing. It should handle edge cases such as empty lists or lists with a single element. The implementation should be efficient, especially for large lists, and the documentation should provide clear examples.\nrequirement pool:\n- Implement the monotonic function to check for non-increasing or non-decreasing order.\n- Optimize the function for performance with large lists.\n- Include comprehensive documentation with examples.\n- Ensure compatibility with different Python versions.\n- Add unit tests to verify function correctness.\nWe will implement a function named 'monotonic' that checks if a list is either entirely non-increasing or non-decreasing. The function will handle edge cases such as empty lists or lists with a single element. We will use Python's built-in capabilities to ensure efficiency, especially for large lists. The function will be documented with clear examples, and we will ensure compatibility with different Python versions. We will not use any external libraries as the task is simple enough to be handled with basic Python constructs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: This means that the list elements should either consistently increase or consistently decrease. A list is monotonically increasing if each element is greater than or equal to the previous one, and monotonically decreasing if each element is less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are trivially monotonic.\n    2. Initialize two flags: `increasing` and `decreasing`.\n    3. Iterate through the list from the second element to the end.\n    4. For each element, compare it with the previous one:\n       - If the current element is greater than the previous, set `increasing` to True.\n       - If the current element is less than the previous, set `decreasing` to True.\n    5. After the loop, if both `increasing` and `decreasing` are True, return False (the list is not monotonic).\n    6. Otherwise, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic.\n    \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are equal, so the list is both non-increasing and non-decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking for empty lists and single-element lists at the beginning of the function.\n", "requirement analysis:\nThe function should efficiently determine if a list is monotonic, handling both increasing and decreasing sequences. It should be optimized for performance and include comprehensive documentation with examples.\nrequirement pool:\n- Implement the monotonic function to check for increasing or decreasing order.\n- Optimize the function for large lists.\n- Include detailed documentation and examples.\n- Ensure compatibility with Python 3.x.\n- Test the function with edge cases.\nWe will implement a simple Python function to check if a list is monotonic, meaning it is either entirely non-increasing or non-decreasing. The function will iterate through the list once, making it efficient for large lists. We will use Python's built-in capabilities without any external libraries to keep it lightweight and compatible with Python 3.x. The function will include comprehensive documentation with examples to ensure clarity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: This means that the list elements should either consistently increase or consistently decrease. A monotonically increasing list has elements that do not decrease as you move from left to right, while a monotonically decreasing list has elements that do not increase.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code, we need to:\n    1. Check if the list is empty or has only one element, in which case it is trivially monotonic.\n    2. Initialize two flags: one for checking increasing order and another for decreasing order.\n    3. Iterate through the list and update the flags based on the comparison of consecutive elements.\n    4. If both flags are true at any point, return False.\n    5. If the iteration completes without both flags being true simultaneously, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic because there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic because there are no other elements to compare it with.\n    \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are equal, so the list is both non-increasing and non-decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can handle these cases by checking the length of the list and comparing consecutive elements.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists or lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic function to check increasing or decreasing sequences\n- Optimize function for performance with large lists\n- Include comprehensive documentation with examples\n- Handle edge cases like empty lists or identical elements\n- Ensure compatibility with Python's list data structure\nWe will implement a simple function to check if a list is monotonic by iterating through the list once, comparing each element with the next. This approach ensures O(n) time complexity, which is efficient for large lists. We will use Python's built-in capabilities to keep the implementation straightforward and avoid unnecessary dependencies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: This means that the list elements should either consistently increase or consistently decrease. In a monotonically increasing list, each element is greater than or equal to the previous one. In a monotonically decreasing list, each element is less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because a single element or empty list is trivially monotonic.\n    2. Initialize two flags: `increasing` and `decreasing` to True.\n    3. Iterate through the list from the first to the second-to-last element.\n    4. For each element, compare it with the next one:\n       - If the current element is greater than the next, set `increasing` to False.\n       - If the current element is less than the next, set `decreasing` to False.\n    5. After the loop, if either `increasing` or `decreasing` is still True, return True. Otherwise, return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic as there are no elements to violate monotonicity.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare.\n    \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are equal, so the list is both monotonically increasing and decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking for empty or single-element lists and handling lists with equal elements correctly.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "completion": "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Check if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "passed": true, "pass": true, "pass_num": 10, "round": 348, "mutate_method": "condense_two2one", "parent_index": 48}
