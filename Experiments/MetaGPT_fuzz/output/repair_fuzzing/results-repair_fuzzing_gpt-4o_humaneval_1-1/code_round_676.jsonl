{"task_id": "HumanEval/95", "prompt": "def check_dict_case(dict):\t\n'''    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    Ensure that the dictionary does not contain any non-string keys.\nExamples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    '''", "entry_point": "check_dict_case", "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "test": ["def check(check_dict_case):\n\tassert check_dict_case({'o': 'oop', 5: 'jcdvmy'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'c': 'tiuegeqq', 9: 'cpfxzgkgirje', 'q': 'vrueasg'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'vdk': 'MepbyhEjC', 'tdiernvi': 'LfqIO'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'j': 'kllixbfik', 7: 'qge', 'y': 'qdhfvkvd'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'qgt': 'rCmkqP', 'dvdmod': 'nMGgkaLu'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'g': 'xopdadefplk', 5: 'awdkxulto', 'v': 'rfl'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(check_dict_case({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))", "def check(check_dict_case):\n\tassert check_dict_case({'CNPlUyKIA': 'PYEe', 'NuCOYaAJz': '867846', 'inWSe': 'dxeqPgMIdB'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'v': 'doephj', 6: 'ywyax', 'o': 'ncaz'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'pKs': 'xVF', 'JuXee': '085', 'EXXukTz': 'Byik'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'PFHKF': 'UZVY', 'KXCCX': '31603'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'f': 'ddkomprr', 2: 'whev', 'k': 'xzdw'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'b': 'zgfpqzqgchia', 't': 'vwrphb'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'x': 'kqnfkdowweb', 'E': 'xzenelobbp', 'N': 'owrxqsq'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'m': 'avbvoxk', 10: 'xfiao', 'd': 'nji'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'VApyOCO': 'qeVr', 'SJzTNH': '679047', 'Jvwh': 'RvfMcp'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'UvtMlty': 'nVGDmDrCJ', 'BePcz': '374227', 'ZXEl': 'fKPqJsOvjbeo'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'w': 'mvnibigx', 'j': 'ijosvsbswe'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'VYA': 'TBCF', 'HDHYKLPTN': '12914'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'vTKV': 'vfcSoY', 'MqbjHgS': '9138', 'cGkgssLVr': 'yIuvFksPqM'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'bTDgmKv': 'rVwBHUauC', 'cWYzfZw': '934', 'TtWunxv': 'TvklwNHxNs'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'l': 'vnqfwvujzwfwyj', 'B': 'oqutyhqli', 'X': 'iajwq'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'z': 'ybgxprswhqgh', 'D': 'zhkwzgd', 'B': 'bwcgnexhx'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'MEIDTL': 'VRDKN', 'FZZWX': '1407'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'u': 'bftlcu', 'F': 'hxeag', 'Q': 'uzfnw'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(check_dict_case({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))", "def check(check_dict_case):\n\tassert check_dict_case({'KZLZ': 'SFT', 'KKFRSLKIY': '02303705'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'g': 'xlzmrlvob', 'H': 'vhpyporwr', 'W': 'ligdfquvi'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'pyuocwi': 'ACWLpFml', 'nbnak': 'nfhBi'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'BHmT': 'irq', 'uHvyEu': '8647', 'RrUKbfpO': 'zgJmtsWM'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'XYJC': 'jNuzHbk', 'zEx': '4860', 'zdFwlW': 'ZSxwsjPwxXtL'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'ilioz': 'uPobK', 'wfvwx': 'FTy'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'hnexdzem': 'DPAbnQw', 'dxljjrw': 'nLzTAmBzF'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'BMEOMSJDJ': 'FGQWI', 'SBBPXXNJ': '9993484'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'a': 'jzwwvdupalxyi', 'q': 'edvtpkwxm'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'n': 'tffsua', 'W': 'xldwoonez'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'v': 'dfbbgvzdscrv', 'E': 'sxencbvlia', 'L': 'twtxnlavj'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'m': 'hbbijvhbbrba', 'D': 'mxxkdqgu', 'K': 'raxko'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'VCOKEHUZW': 'TQJ', 'ROMV': '3254'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'m': 'mqrzjw', 'T': 'sikpsucfl', 'E': 'cbgmxxnmdrxg'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'x': 'rpaqitm', 'u': 'rtdwwvdybsic'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'j': 'fcgyragevddkvk', 'X': 'myasjlwty', 'E': 'wkjgzzoosgpi'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'n': 'qjkmwxqngd', 'w': 'iiuqsmtwe'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'j': 'parojmcxtaz', 8: 'iepc', 'w': 'guplmpum'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'CJSRG': 'ZQGTSH', 'RQOC': '7511'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'o': 'cmssdkn', 'E': 'recynfrwfua', 'L': 'pbhzdabxdqf'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'wKxGuyq': 'HrrH', 'VFiUO': '3154', 'kxO': 'pRiJqhnNOvYp'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'MEUHYJ': 'TEM', 'NYK': '34633713'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'n': 'wdjmxjjdc', 'l': 'nvvdrvkpm'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'mlm': 'zOhHfD', 'xtzf': 'uJsuR'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'b': 'tzyaufsrkaffc', 'm': 'atgbi'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'gbd': 'KLgAIXqIZfV', 'gdgfpyf': 'RNQJX'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'gfxnbl': 'AWZf', 'wbptpnqg': 'KRbNA'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'MBJMTMK': 'KNH', 'INKZWO': '89852'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'a': 'ynlnmxsajad', 'O': 'hspyi', 'Y': 'euhm'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(check_dict_case({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(check_dict_case):\n\tassert check_dict_case({'luo': 'zzh', 'EhEH': '148', 'idVMULBj': 'BOIcgZHT'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'SBVUBTB': 'DIGG', 'BGMCYFGS': '105758'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'o': 'vqgkfowerkxp', 's': 'gfxx'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'prpw': 'WDf', 'onoscuy': 'uzybSwqZ'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}))", "def check(check_dict_case):\n\tassert check_dict_case({'zszouxi': 'yeMsjaF', 'sks': 'cBSJXJwX'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'k': 'rsepwmm'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'g': 'gybkdjrhp', 5: 'wzmbwr'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'l': 'tzovbnefdft', 4: 'pjztyrhmutrk', 'q': 'dhwxpbwsp'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'KEBnAZ': 'qhsnjgSnS', 'PefJT': '34073', 'JtVAjuodw': 'KaPSDGEJ'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'OPHYC': 'DZJLL', 'XHO': '4958528'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'DAL': 'KEWRR', 'SHIFWEEMW': '58926385'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'n': 'xahbfntlzktuzug', 8: 'jctakc', 'm': 'skml'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'vdoj': 'foQoqjSYT', 'vlvrbtrxt': 'haVFtae'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'ceugtmuz': 'TmP', 'stmg': 'BLl'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'m': 'zoykqipp', 'N': 'kmsnbylkc', 'B': 'ccpy'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'u': 'bvnywqo', 'f': 'lflfulzuds'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'s': 'jnuocmugsgrxukh', 10: 'qvwwhlo', 't': 'ohcjmtlzc'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'e': 'filcbtnfjni', 3: 'jnqosqrgmny', 'b': 'pfdi'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'AXMaj': 'YMhfFKO', 'xLUFwrhU': '99507', 'LCZ': 'OvkprKzu'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'OGCTqCm': 'HReaO', 'yQPf': '6207', 'LmegQqnKv': 'GWSx'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'TVMBVK': 'JVCDMR', 'JZGPKVLPN': '14605'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'m': 'sezrcoqwvnr', 'n': 'ldlxrkiot'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'n': 'dnukqzbtoup', 'D': 'oohaoy', 'V': 'vsapzys'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'pva': 'gdt', 'tqwqjnm': 'rFtgEIIfU'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'r': 'dyywxj', 'e': 'jyn'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'ISymfszDc': 'TfMacT', 'GuNgc': '50057', 'kAP': 'osNWsqkQ'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))", "def check(check_dict_case):\n\tassert check_dict_case({'ZGZGV': 'EFPM', 'WUIX': '668604994'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'l': 'eaufkyaebdl', 'h': 'sbi'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'k': 'fscjjnkxljechg', 1: 'wnzjtm', 'u': 'mnkqnqkin'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'p': 'irxohxlzzyvw', 8: 'awlrbu', 'w': 'ctdentj'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'i': 'kombtwcenp', 'l': 'umxhlr'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'c': 'eexvfiew', 'C': 'xopcqmg', 'G': 'kbwypgf'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'WUF': 'qMfFM', 'NtYD': '832', 'oKskZGfDX': 'WUvQyjc'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'RWETIY': 'YCDPL', 'GNTE': '451020125'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'y': 'juyddabdrnlrn', 'T': 'cazvvctpga', 'B': 'dbg'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'w': 'vmnvozhiocvkqh', 2: 'wgrteaeecuez', 'g': 'fxyzqtmxa'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'aohHoCn': 'rxNzkmv', 'BTGHom': '963', 'aRySCQA': 'IGu'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'bddotika': 'nRFb', 'jwprcqddz': 'bBR'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({}) == False, \"1st edge test error: \" + str(check_dict_case({}))", "def check(check_dict_case):\n\tassert check_dict_case({'h': 'zprecd', 'y': 'afv'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'YNBEJI': 'SGLU', 'INYRRDKZ': '571'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'zdyouS': 'LOwog', 'dpnawfDD': '981962', 'DcXeOlW': 'imL'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'c': 'exhkugly', 'H': 'hxljxqntbie', 'N': 'puptvlju'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'w': 'iduoimnfubqlxbq', 'R': 'ovifuvem', 'D': 'klw'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'l': 'btvngk', 'h': 'ongztnabsigc'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'f': 'exlzue', 'i': 'yrewpjx'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'kdmdoymmf': 'sdvwzSyPe', 'cvtnh': 'air'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))", "def check(check_dict_case):\n\tassert check_dict_case({'n': 'wdjvdltslua', 'i': 'peurlqybqvct'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'d': 'tahdnaz', 10: 'icakelzp', 'y': 'hawbuz'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'LSTAF': 'UAZSVT', 'XIS': '713'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'vymrps': 'tRQlVfOy', 'xgn': 'LBJtlb'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'qhskalyon': 'jTkUuceZR', 'ypyvn': 'CoCbYQ'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'WEJAX': 'YWBJXH', 'HLZLLV': '7304084'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'duase': 'StBcsYaUZFV', 'mbnuc': 'SDGj'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'w': 'ypghvpfdrq', 6: 'fyzqdslgte', 'e': 'hboeipeq'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'CuYwc': 'rAdthhp', 'XzJaxnpP': '332954', 'kTf': 'vGasJU'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({}) == False"], "test_case_list": ["assert check_dict_case({'o': 'oop', 5: 'jcdvmy'}) == False", "assert check_dict_case({'c': 'tiuegeqq', 9: 'cpfxzgkgirje', 'q': 'vrueasg'}) == False", "assert check_dict_case({'vdk': 'MepbyhEjC', 'tdiernvi': 'LfqIO'}) == True", "assert check_dict_case({'j': 'kllixbfik', 7: 'qge', 'y': 'qdhfvkvd'}) == False", "assert check_dict_case({'qgt': 'rCmkqP', 'dvdmod': 'nMGgkaLu'}) == True", "assert check_dict_case({'g': 'xopdadefplk', 5: 'awdkxulto', 'v': 'rfl'}) == False", "assert check_dict_case({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(check_dict_case({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))", "assert check_dict_case({'CNPlUyKIA': 'PYEe', 'NuCOYaAJz': '867846', 'inWSe': 'dxeqPgMIdB'}) == False", "assert check_dict_case({'v': 'doephj', 6: 'ywyax', 'o': 'ncaz'}) == False", "assert check_dict_case({'pKs': 'xVF', 'JuXee': '085', 'EXXukTz': 'Byik'}) == False", "assert check_dict_case({'PFHKF': 'UZVY', 'KXCCX': '31603'}) == True", "assert check_dict_case({'f': 'ddkomprr', 2: 'whev', 'k': 'xzdw'}) == False", "assert check_dict_case({'b': 'zgfpqzqgchia', 't': 'vwrphb'}) == True", "assert check_dict_case({'x': 'kqnfkdowweb', 'E': 'xzenelobbp', 'N': 'owrxqsq'}) == False", "assert check_dict_case({'m': 'avbvoxk', 10: 'xfiao', 'd': 'nji'}) == False", "assert check_dict_case({'VApyOCO': 'qeVr', 'SJzTNH': '679047', 'Jvwh': 'RvfMcp'}) == False", "assert check_dict_case({'UvtMlty': 'nVGDmDrCJ', 'BePcz': '374227', 'ZXEl': 'fKPqJsOvjbeo'}) == False", "assert check_dict_case({'w': 'mvnibigx', 'j': 'ijosvsbswe'}) == True", "assert check_dict_case({'VYA': 'TBCF', 'HDHYKLPTN': '12914'}) == True", "assert check_dict_case({'vTKV': 'vfcSoY', 'MqbjHgS': '9138', 'cGkgssLVr': 'yIuvFksPqM'}) == False", "assert check_dict_case({'bTDgmKv': 'rVwBHUauC', 'cWYzfZw': '934', 'TtWunxv': 'TvklwNHxNs'}) == False", "assert check_dict_case({'l': 'vnqfwvujzwfwyj', 'B': 'oqutyhqli', 'X': 'iajwq'}) == False", "assert check_dict_case({'z': 'ybgxprswhqgh', 'D': 'zhkwzgd', 'B': 'bwcgnexhx'}) == False", "assert check_dict_case({'MEIDTL': 'VRDKN', 'FZZWX': '1407'}) == True", "assert check_dict_case({'u': 'bftlcu', 'F': 'hxeag', 'Q': 'uzfnw'}) == False", "assert check_dict_case({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(check_dict_case({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))", "assert check_dict_case({'KZLZ': 'SFT', 'KKFRSLKIY': '02303705'}) == True", "assert check_dict_case({'g': 'xlzmrlvob', 'H': 'vhpyporwr', 'W': 'ligdfquvi'}) == False", "assert check_dict_case({'pyuocwi': 'ACWLpFml', 'nbnak': 'nfhBi'}) == True", "assert check_dict_case({'BHmT': 'irq', 'uHvyEu': '8647', 'RrUKbfpO': 'zgJmtsWM'}) == False", "assert check_dict_case({'XYJC': 'jNuzHbk', 'zEx': '4860', 'zdFwlW': 'ZSxwsjPwxXtL'}) == False", "assert check_dict_case({'ilioz': 'uPobK', 'wfvwx': 'FTy'}) == True", "assert check_dict_case({'hnexdzem': 'DPAbnQw', 'dxljjrw': 'nLzTAmBzF'}) == True", "assert check_dict_case({'BMEOMSJDJ': 'FGQWI', 'SBBPXXNJ': '9993484'}) == True", "assert check_dict_case({'a': 'jzwwvdupalxyi', 'q': 'edvtpkwxm'}) == True", "assert check_dict_case({'n': 'tffsua', 'W': 'xldwoonez'}) == False", "assert check_dict_case({'v': 'dfbbgvzdscrv', 'E': 'sxencbvlia', 'L': 'twtxnlavj'}) == False", "assert check_dict_case({'m': 'hbbijvhbbrba', 'D': 'mxxkdqgu', 'K': 'raxko'}) == False", "assert check_dict_case({'VCOKEHUZW': 'TQJ', 'ROMV': '3254'}) == True", "assert check_dict_case({'m': 'mqrzjw', 'T': 'sikpsucfl', 'E': 'cbgmxxnmdrxg'}) == False", "assert check_dict_case({'x': 'rpaqitm', 'u': 'rtdwwvdybsic'}) == True", "assert check_dict_case({'j': 'fcgyragevddkvk', 'X': 'myasjlwty', 'E': 'wkjgzzoosgpi'}) == False", "assert check_dict_case({'n': 'qjkmwxqngd', 'w': 'iiuqsmtwe'}) == True", "assert check_dict_case({'j': 'parojmcxtaz', 8: 'iepc', 'w': 'guplmpum'}) == False", "assert check_dict_case({'CJSRG': 'ZQGTSH', 'RQOC': '7511'}) == True", "assert check_dict_case({'o': 'cmssdkn', 'E': 'recynfrwfua', 'L': 'pbhzdabxdqf'}) == False", "assert check_dict_case({'wKxGuyq': 'HrrH', 'VFiUO': '3154', 'kxO': 'pRiJqhnNOvYp'}) == False", "assert check_dict_case({'MEUHYJ': 'TEM', 'NYK': '34633713'}) == True", "assert check_dict_case({'n': 'wdjmxjjdc', 'l': 'nvvdrvkpm'}) == True", "assert check_dict_case({'mlm': 'zOhHfD', 'xtzf': 'uJsuR'}) == True", "assert check_dict_case({'b': 'tzyaufsrkaffc', 'm': 'atgbi'}) == True", "assert check_dict_case({'gbd': 'KLgAIXqIZfV', 'gdgfpyf': 'RNQJX'}) == True", "assert check_dict_case({'gfxnbl': 'AWZf', 'wbptpnqg': 'KRbNA'}) == True", "assert check_dict_case({'MBJMTMK': 'KNH', 'INKZWO': '89852'}) == True", "assert check_dict_case({'a': 'ynlnmxsajad', 'O': 'hspyi', 'Y': 'euhm'}) == False", "assert check_dict_case({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(check_dict_case({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.", "assert check_dict_case({'luo': 'zzh', 'EhEH': '148', 'idVMULBj': 'BOIcgZHT'}) == False", "assert check_dict_case({'SBVUBTB': 'DIGG', 'BGMCYFGS': '105758'}) == True", "assert check_dict_case({'o': 'vqgkfowerkxp', 's': 'gfxx'}) == True", "assert check_dict_case({'prpw': 'WDf', 'onoscuy': 'uzybSwqZ'}) == True", "assert check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}))", "assert check_dict_case({'zszouxi': 'yeMsjaF', 'sks': 'cBSJXJwX'}) == True", "assert check_dict_case({'k': 'rsepwmm'}) == True", "assert check_dict_case({'g': 'gybkdjrhp', 5: 'wzmbwr'}) == False", "assert check_dict_case({'l': 'tzovbnefdft', 4: 'pjztyrhmutrk', 'q': 'dhwxpbwsp'}) == False", "assert check_dict_case({'KEBnAZ': 'qhsnjgSnS', 'PefJT': '34073', 'JtVAjuodw': 'KaPSDGEJ'}) == False", "assert check_dict_case({'OPHYC': 'DZJLL', 'XHO': '4958528'}) == True", "assert check_dict_case({'DAL': 'KEWRR', 'SHIFWEEMW': '58926385'}) == True", "assert check_dict_case({'n': 'xahbfntlzktuzug', 8: 'jctakc', 'm': 'skml'}) == False", "assert check_dict_case({'vdoj': 'foQoqjSYT', 'vlvrbtrxt': 'haVFtae'}) == True", "assert check_dict_case({'ceugtmuz': 'TmP', 'stmg': 'BLl'}) == True", "assert check_dict_case({'m': 'zoykqipp', 'N': 'kmsnbylkc', 'B': 'ccpy'}) == False", "assert check_dict_case({'u': 'bvnywqo', 'f': 'lflfulzuds'}) == True", "assert check_dict_case({'s': 'jnuocmugsgrxukh', 10: 'qvwwhlo', 't': 'ohcjmtlzc'}) == False", "assert check_dict_case({'e': 'filcbtnfjni', 3: 'jnqosqrgmny', 'b': 'pfdi'}) == False", "assert check_dict_case({'AXMaj': 'YMhfFKO', 'xLUFwrhU': '99507', 'LCZ': 'OvkprKzu'}) == False", "assert check_dict_case({'OGCTqCm': 'HReaO', 'yQPf': '6207', 'LmegQqnKv': 'GWSx'}) == False", "assert check_dict_case({'TVMBVK': 'JVCDMR', 'JZGPKVLPN': '14605'}) == True", "assert check_dict_case({'m': 'sezrcoqwvnr', 'n': 'ldlxrkiot'}) == True", "assert check_dict_case({'n': 'dnukqzbtoup', 'D': 'oohaoy', 'V': 'vsapzys'}) == False", "assert check_dict_case({'pva': 'gdt', 'tqwqjnm': 'rFtgEIIfU'}) == True", "assert check_dict_case({'r': 'dyywxj', 'e': 'jyn'}) == True", "assert check_dict_case({'ISymfszDc': 'TfMacT', 'GuNgc': '50057', 'kAP': 'osNWsqkQ'}) == False", "assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))", "assert check_dict_case({'ZGZGV': 'EFPM', 'WUIX': '668604994'}) == True", "assert check_dict_case({'l': 'eaufkyaebdl', 'h': 'sbi'}) == True", "assert check_dict_case({'k': 'fscjjnkxljechg', 1: 'wnzjtm', 'u': 'mnkqnqkin'}) == False", "assert check_dict_case({'p': 'irxohxlzzyvw', 8: 'awlrbu', 'w': 'ctdentj'}) == False", "assert check_dict_case({'i': 'kombtwcenp', 'l': 'umxhlr'}) == True", "assert check_dict_case({'c': 'eexvfiew', 'C': 'xopcqmg', 'G': 'kbwypgf'}) == False", "assert check_dict_case({'WUF': 'qMfFM', 'NtYD': '832', 'oKskZGfDX': 'WUvQyjc'}) == False", "assert check_dict_case({'RWETIY': 'YCDPL', 'GNTE': '451020125'}) == True", "assert check_dict_case({'y': 'juyddabdrnlrn', 'T': 'cazvvctpga', 'B': 'dbg'}) == False", "assert check_dict_case({'w': 'vmnvozhiocvkqh', 2: 'wgrteaeecuez', 'g': 'fxyzqtmxa'}) == False", "assert check_dict_case({'aohHoCn': 'rxNzkmv', 'BTGHom': '963', 'aRySCQA': 'IGu'}) == False", "assert check_dict_case({'bddotika': 'nRFb', 'jwprcqddz': 'bBR'}) == True", "assert check_dict_case({}) == False, \"1st edge test error: \" + str(check_dict_case({}))", "assert check_dict_case({'h': 'zprecd', 'y': 'afv'}) == True", "assert check_dict_case({'YNBEJI': 'SGLU', 'INYRRDKZ': '571'}) == True", "assert check_dict_case({'zdyouS': 'LOwog', 'dpnawfDD': '981962', 'DcXeOlW': 'imL'}) == False", "assert check_dict_case({'c': 'exhkugly', 'H': 'hxljxqntbie', 'N': 'puptvlju'}) == False", "assert check_dict_case({'w': 'iduoimnfubqlxbq', 'R': 'ovifuvem', 'D': 'klw'}) == False", "assert check_dict_case({'l': 'btvngk', 'h': 'ongztnabsigc'}) == True", "assert check_dict_case({'f': 'exlzue', 'i': 'yrewpjx'}) == True", "assert check_dict_case({'kdmdoymmf': 'sdvwzSyPe', 'cvtnh': 'air'}) == True", "assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))", "assert check_dict_case({'n': 'wdjvdltslua', 'i': 'peurlqybqvct'}) == True", "assert check_dict_case({'d': 'tahdnaz', 10: 'icakelzp', 'y': 'hawbuz'}) == False", "assert check_dict_case({'LSTAF': 'UAZSVT', 'XIS': '713'}) == True", "assert check_dict_case({'vymrps': 'tRQlVfOy', 'xgn': 'LBJtlb'}) == True", "assert check_dict_case({'qhskalyon': 'jTkUuceZR', 'ypyvn': 'CoCbYQ'}) == True", "assert check_dict_case({'WEJAX': 'YWBJXH', 'HLZLLV': '7304084'}) == True", "assert check_dict_case({'duase': 'StBcsYaUZFV', 'mbnuc': 'SDGj'}) == True", "assert check_dict_case({'w': 'ypghvpfdrq', 6: 'fyzqdslgte', 'e': 'hboeipeq'}) == False", "assert check_dict_case({'CuYwc': 'rAdthhp', 'XzJaxnpP': '332954', 'kTf': 'vGasJU'}) == False", "assert check_dict_case({}) == False"], "nl": "\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    ", "func": "def check_dict_case(dict):", "examples": "Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    ", "repair_prompt": ["def check_dict_case(dict):\t\n'''    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    Ensure that the dictionary does not contain any non-string keys.\nExamples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    '''", "def check_dict_case(dict):\t\n'''    Given a dictionary, you need to return True if all keys are strings in lower \n    case. Return True also if all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    Ensure that the dictionary does not contain any non-string keys.\nExamples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    '''", "def check_dict_case(dict):\t\n'''    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False, and\n    the function should return False if the given dictionary is empty.\n    Ensure that the dictionary does not contain any non-string keys.\nExamples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    \"\"\"Check if all keys in the dictionary are strings in the same case.\n\n    This function checks if all keys in the given dictionary are strings and\n    are either all lowercase or all uppercase. If the dictionary is empty or\n    contains any non-string keys, the function returns False.\n\n    Args:\n        input_dict (dict): The dictionary to check.\n\n    Returns:\n        bool: True if all keys are strings in the same case (all lower or all upper),\n              False otherwise.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n\n    # Check if all keys are strings\n    if not all(isinstance(k, str) for k in input_dict.keys()):\n        return False\n\n    # Check if all keys are lowercase\n    all_lower = all(k.islower() for k in input_dict.keys())\n    # Check if all keys are uppercase\n    all_upper = all(k.isupper() for k in input_dict.keys())\n\n    # Return True if all keys are either all lowercase or all uppercase\n    return all_lower or all_upper\n", "from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    \"\"\"\n    Checks if all keys in a dictionary are either all lowercase or all uppercase strings.\n\n    Parameters:\n    input_dict (dict): The dictionary to check.\n\n    Returns:\n    bool: True if all keys are strings in lower case or all keys are strings in upper case, else False.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n\n    # Validate all keys are strings\n    if not all(isinstance(key, str) for key in input_dict.keys()):\n        return False\n\n    # Extract keys from the dictionary\n    keys = list(input_dict.keys())\n\n    # Check if all keys are lowercase\n    if all(key.islower() for key in keys):\n        return True\n\n    # Check if all keys are uppercase\n    if all(key.isupper() for key in keys):\n        return True\n\n    # If keys are mixed case, return False\n    return False\n", "from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    \"\"\"\n    Checks if all keys in a dictionary are either in lower case or upper case.\n\n    Parameters:\n    input_dict (dict): The dictionary to check.\n\n    Returns:\n    bool: True if all keys are strings in lower case or all keys are strings in upper case, False otherwise.\n\n    Raises:\n    ValueError: If any key in the dictionary is not a string.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n\n    # Validate that all keys are strings\n    for key in input_dict:\n        if not isinstance(key, str):\n            raise ValueError(\"Dictionary contains non-string keys\")\n\n    # Check if all keys are in lower case\n    lower_case = all(key.islower() for key in input_dict)\n    # Check if all keys are in upper case\n    upper_case = all(key.isupper() for key in input_dict)\n\n    # Return True if all keys are consistent in case, otherwise return False\n    return lower_case or upper_case\n", "from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    '''\n    Checks if all keys in the dictionary are either all lowercase or all uppercase strings.\n    Returns False if the dictionary is empty or contains any non-string keys.\n    \n    Parameters:\n    input_dict (dict): The dictionary to check.\n    \n    Returns:\n    bool: True if all keys are lowercase or all uppercase strings, False otherwise.\n    '''\n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n    \n    # Check if all keys are strings\n    if any(not isinstance(key, str) for key in input_dict.keys()):\n        return False\n    \n    # Check if all keys are lowercase\n    all_lower = all(key.islower() for key in input_dict.keys())\n    \n    # Check if all keys are uppercase\n    all_upper = all(key.isupper() for key in input_dict.keys())\n    \n    # Return True if all keys are either all lowercase or all uppercase\n    return all_lower or all_upper\n", "from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    \"\"\"\n    Checks if all keys in the dictionary are either in lower case or upper case.\n    Returns False if the dictionary is empty or contains non-string keys.\n\n    Parameters:\n    input_dict (dict): The dictionary to check.\n\n    Returns:\n    bool: True if all keys are in the same case, False otherwise.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n\n    # Initialize flags for case checking\n    all_lower = True\n    all_upper = True\n\n    # Iterate over the keys in the dictionary\n    for key in input_dict:\n        # Check if the key is a string\n        if not isinstance(key, str):\n            return False\n\n        # Update flags based on the case of the key\n        if not key.islower():\n            all_lower = False\n        if not key.isupper():\n            all_upper = False\n\n    # Return True if all keys are in the same case, otherwise False\n    return all_lower or all_upper\n", "from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case.\n    Return False if the dictionary is empty or contains non-string keys.\n    \n    Parameters:\n    input_dict (dict): The dictionary to check.\n    \n    Returns:\n    bool: True if all keys are in the same case and are strings, False otherwise.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n\n    # Initialize flags for lowercase and uppercase\n    all_lowercase = True\n    all_uppercase = True\n\n    # Iterate over the keys of the dictionary\n    for key in input_dict.keys():\n        # Check if the key is a string\n        if not isinstance(key, str):\n            return False\n\n        # Check if the key is lowercase\n        if not key.islower():\n            all_lowercase = False\n\n        # Check if the key is uppercase\n        if not key.isupper():\n            all_uppercase = False\n\n    # Return True if all keys are either lowercase or uppercase\n    return all_lowercase or all_uppercase\n", "from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    \"\"\"\n    Checks if all keys in the dictionary are either in lower case or upper case.\n    \n    Parameters:\n    input_dict (dict): The dictionary to check.\n\n    Returns:\n    bool: True if all keys are strings in lower case or all keys are strings in upper case, False otherwise.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n\n    # Validate that all keys are strings\n    if not all(isinstance(k, str) for k in input_dict.keys()):\n        return False\n\n    # Check if all keys are in lower case\n    all_lower = all(k.islower() for k in input_dict.keys())\n    # Check if all keys are in upper case\n    all_upper = all(k.isupper() for k in input_dict.keys())\n\n    # Return True if either all keys are lower case or all are upper case\n    return all_lower or all_upper\n", "from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False, and\n    the function should return False if the given dictionary is empty.\n    Ensure that the dictionary does not contain any non-string keys.\n    \n    Parameters:\n    input_dict (dict): The dictionary to check.\n    \n    Returns:\n    bool: True if all keys are consistently cased, False otherwise.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n\n    # Initialize flags to check for all lowercase or all uppercase keys\n    all_lower = True\n    all_upper = True\n\n    # Iterate through the keys of the dictionary\n    for key in input_dict:\n        # Check if the key is a string\n        if not isinstance(key, str):\n            return False\n        # Check if the key is not lowercase\n        if not key.islower():\n            all_lower = False\n        # Check if the key is not uppercase\n        if not key.isupper():\n            all_upper = False\n\n    # Return True if all keys are either lowercase or uppercase\n    return all_lower or all_upper\n", "from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    '''\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False, and\n    the function should return False if the given dictionary is empty.\n    Ensure that the dictionary does not contain any non-string keys.\n\n    Parameters:\n    input_dict (dict): The dictionary to check.\n\n    Returns:\n    bool: True if all keys are consistently cased, False otherwise.\n    '''\n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n\n    # Check if all keys are strings\n    if not all(isinstance(k, str) for k in input_dict.keys()):\n        return False\n\n    # Check if all keys are lowercase\n    all_lower = all(k.islower() for k in input_dict.keys())\n\n    # Check if all keys are uppercase\n    all_upper = all(k.isupper() for k in input_dict.keys())\n\n    # Return True if either all keys are lowercase or all are uppercase\n    return all_lower or all_upper\n", "from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    \"\"\"\n    Checks if all keys in the dictionary are either all lower case or all upper case.\n    Returns False if the dictionary is empty or contains non-string keys.\n    \n    Parameters:\n    input_dict (dict): The dictionary to check.\n    \n    Returns:\n    bool: True if all keys are in the same case, False otherwise.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n\n    # Iterate over the keys to ensure they are all strings\n    for key in input_dict:\n        if not isinstance(key, str):\n            return False\n\n    # Check if all keys are in lower case\n    lower_case = all(key.islower() for key in input_dict)\n    # Check if all keys are in upper case\n    upper_case = all(key.isupper() for key in input_dict)\n\n    # Return True if all keys are in the same case, otherwise False\n    return lower_case or upper_case\n"], "plans": ["requirement analysis:\nThe function must accurately determine if all keys in a dictionary are either all lowercase or all uppercase strings. It should return False for empty dictionaries and handle non-string keys by returning False. The implementation should prioritize performance and error handling.\nrequirement pool:\n- Implement function to check dictionary key case consistency\n- Ensure function returns False for empty dictionaries\n- Handle non-string keys gracefully\n- Optimize performance for large dictionaries\n- Provide detailed error messages for invalid inputs\nWe will implement a function that iterates over the dictionary keys to check if they are all strings and either all lowercase or all uppercase. The function will return False if the dictionary is empty or contains any non-string keys. We will use Python's built-in functions to ensure optimal performance and simplicity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all keys are strings in lower case or all keys are strings in upper case'\n    Explanation: This means that for the function to return True, every key in the dictionary must be either entirely lowercase or entirely uppercase. If there is a mix of cases, the function should return False.\n\n    'dictionary does not contain any non-string keys'\n    Explanation: This means that the function should first check if all keys in the dictionary are strings. If any key is not a string, the function should return False.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'all': This indicates that every single key in the dictionary must meet the specified condition (either all lowercase or all uppercase) for the function to return True.\n\n# [code logic]\n1. Check if the dictionary is empty. If it is, return False.\n2. Iterate over the keys of the dictionary to ensure all are strings. If any key is not a string, return False.\n3. Check if all keys are lowercase or all keys are uppercase.\n4. Return True if all keys meet one of these conditions; otherwise, return False.\n\n# [edge case] \n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so according to the requirement, the function should return False.\n\n    check_dict_case({\"a\": \"apple\", \"A\": \"banana\"}) = False\n    Explanation: The keys are not consistently in one case (mixed case), so the function should return False.\n\n    check_dict_case({\"A\": \"apple\", 1: \"banana\"}) = False\n    Explanation: The dictionary contains a non-string key (1), so the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n```python\ndef check_dict_case(d):\n    if not d:\n        return False\n    if not all(isinstance(k, str) for k in d.keys()):\n        return False\n    all_lower = all(k.islower() for k in d.keys())\n    all_upper = all(k.isupper() for k in d.keys())\n    return all_lower or all_upper\n```\n", "requirement analysis:\nThe function must accurately determine if all keys in a dictionary are either all lowercase or all uppercase strings. It should return False for empty dictionaries and ensure no non-string keys are present. Performance optimization is crucial for handling large dictionaries efficiently.\nrequirement pool:\n- Implement accurate case checking for dictionary keys\n- Ensure error handling for non-string keys\n- Optimize performance for large dictionaries\n- Return False for empty dictionaries\n- Provide user-friendly documentation\nWe will implement a function that checks if all keys in a dictionary are either all lowercase or all uppercase strings. The function will return False for empty dictionaries and will ensure no non-string keys are present. We will use Python's built-in capabilities to handle string operations efficiently, ensuring performance optimization for large dictionaries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lower case' and 'upper case'\n    Explanation: The requirement specifies that all keys in the dictionary should either be entirely in lowercase or entirely in uppercase. This means that the function should check the case of each key and ensure consistency across all keys.\n\n    'non-string keys'\n    Explanation: The requirement states that the dictionary should not contain any keys that are not strings. This means the function should verify that all keys are of string type.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'all': means every key in the dictionary must meet the specified condition (either all lowercase or all uppercase).\n\n# [code logic]\n1. Check if the dictionary is empty. If it is, return False.\n2. Iterate through the keys of the dictionary to ensure all are strings. If any key is not a string, return False.\n3. Check if all keys are in lowercase or all are in uppercase:\n   - Use a flag to determine if the first key is lowercase or uppercase.\n   - Iterate through the rest of the keys to ensure they match the case of the first key.\n4. Return True if all keys match the case condition, otherwise return False.\n\n# [edge case] \n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so according to the requirement, it should return False.\n\n    check_dict_case({\"a\": \"apple\", \"A\": \"banana\"}) = False\n    Explanation: The keys are not consistent in case (one is lowercase, one is uppercase), so it should return False.\n\n    check_dict_case({\"a\": \"apple\", 8: \"banana\"}) = False\n    Explanation: There is a non-string key (8), so it should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n```python\ndef check_dict_case(d):\n    if not d:\n        return False\n    if not all(isinstance(k, str) for k in d.keys()):\n        return False\n    keys = list(d.keys())\n    if all(k.islower() for k in keys):\n        return True\n    if all(k.isupper() for k in keys):\n        return True\n    return False\n```\n", "requirement analysis:\nThe function must accurately determine if all keys in a dictionary are either in lower case or upper case. It should return False for empty dictionaries and reject any dictionaries containing non-string keys. The solution should be efficient and handle large dictionaries without performance degradation.\nrequirement pool:\n- Implement function to check if all dictionary keys are in the same case.\n- Ensure function returns False for empty dictionaries.\n- Add validation to reject dictionaries with non-string keys.\n- Optimize function for performance with large dictionaries.\n- Provide detailed error messages for invalid inputs.\nWe will implement a function that checks if all keys in a dictionary are either in lower case or upper case. The function will return False for empty dictionaries and will raise a ValueError if any non-string keys are present. We will use Python's built-in capabilities to efficiently handle large dictionaries without performance degradation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lower case' and 'upper case'\n    Explanation: The requirement specifies that all keys in the dictionary should either be in lower case or upper case. This means that the function should check the case of each key and ensure consistency across all keys.\n\n    'non-string keys'\n    Explanation: The requirement states that the dictionary should not contain any non-string keys. This implies that the function should validate the type of each key and ensure they are all strings.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'all': means that every key in the dictionary must meet the specified condition (either all lower case or all upper case).\n\n# [code logic]\n    1. Check if the dictionary is empty. If it is, return False.\n    2. Iterate through the keys of the dictionary to ensure they are all strings. If any key is not a string, raise a ValueError.\n    3. Determine if all keys are in lower case or all are in upper case.\n    4. Return True if all keys are consistent in case, otherwise return False.\n\n# [edge case] \n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so according to the requirement, the function should return False.\n\n    check_dict_case({\"a\": \"apple\", \"A\": \"banana\"}) = False\n    Explanation: The keys are not consistent in case (mixed lower and upper), so the function should return False.\n\n    check_dict_case({\"a\": \"apple\", 8: \"banana\"}) = False\n    Explanation: The dictionary contains a non-string key (8), so the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not dict:\n            return False\n        for key in dict:\n            if not isinstance(key, str):\n                raise ValueError(\"Dictionary contains non-string keys\")\n        lower_case = all(key.islower() for key in dict)\n        upper_case = all(key.isupper() for key in dict)\n        return lower_case or upper_case\n", "requirement analysis:\nThe function must accurately determine if all keys in a dictionary are either all lowercase or all uppercase strings. It should handle edge cases such as empty dictionaries and non-string keys, returning False in these scenarios.\nrequirement pool:\n- The function should return True if all keys are lowercase strings.\n- The function should return True if all keys are uppercase strings.\n- The function should return False if the dictionary is empty.\n- The function should return False if any key is not a string.\n- Optimize the function for performance with large dictionaries.\nWe will implement a function that iterates over the dictionary keys to check if they are all lowercase or all uppercase strings. The function will first check if the dictionary is empty or contains any non-string keys, returning False in these cases. We will use Python's built-in string methods to check the case of the keys. This approach ensures simplicity and leverages Python's efficient string handling capabilities.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lower case', 'upper case'\n    Explanation: The requirement specifies that the function should return True if all keys are either in lower case or upper case. It also mentions that the dictionary should not contain any non-string keys.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the dictionary is empty. If it is, return False.\n    2. Iterate over the dictionary keys to ensure all are strings.\n    3. Use string methods to check if all keys are either lower case or upper case.\n    4. Return True if all keys are in one case, otherwise return False.\n\n# [edge case] \n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so the function should return False.\n    \n    check_dict_case({\"a\": \"apple\", \"A\": \"banana\"}) = False\n    Explanation: The keys are mixed case, so the function should return False.\n    \n    check_dict_case({\"a\": \"apple\", 8: \"banana\"}) = False\n    Explanation: The dictionary contains a non-string key, so the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not dict:\n            return False\n        if any(not isinstance(key, str) for key in dict.keys()):\n            return False\n        all_lower = all(key.islower() for key in dict.keys())\n        all_upper = all(key.isupper() for key in dict.keys())\n        return all_lower or all_upper\n", "requirement analysis:\nThe function should accurately determine if all keys in a dictionary are either in lower case or upper case. It must return False for empty dictionaries and those containing non-string keys. Performance optimization is crucial for handling large dictionaries efficiently.\nrequirement pool:\n- Implement accurate case checking for dictionary keys\n- Ensure error handling for non-string keys\n- Optimize performance for large dictionaries\n- Provide detailed error messages\n- Include comprehensive documentation\nWe will implement a function that iterates over the dictionary keys to check if they are all in lower case or upper case. The function will first check if the dictionary is empty and return False if so. It will also ensure that all keys are strings, returning False if any non-string key is found. For performance optimization, the function will use efficient iteration and early exits to handle large dictionaries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all keys are strings in lower case': This means that every key in the dictionary should be a string and should be in lowercase.\n    'all keys are strings in upper case': This means that every key in the dictionary should be a string and should be in uppercase.\n    'dictionary is empty': This means that if the dictionary has no key-value pairs, the function should return False.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'all': This indicates that every key in the dictionary must meet the specified condition (either all lowercase or all uppercase).\n\n# [code logic]\n1. Check if the dictionary is empty. If it is, return False.\n2. Iterate over the keys of the dictionary.\n3. Check if all keys are strings. If any key is not a string, return False.\n4. Check if all keys are in lowercase or all keys are in uppercase.\n5. If all keys are in lowercase, return True.\n6. If all keys are in uppercase, return True.\n7. If neither condition is met, return False.\n\n# [edge case] \n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so the function should return False.\n\n    check_dict_case({\"a\": \"apple\", \"A\": \"banana\"}) = False\n    Explanation: The keys are not consistently in lower or upper case.\n\n    check_dict_case({\"a\": \"apple\", 8: \"banana\"}) = False\n    Explanation: There is a non-string key (8), so the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n```python\ndef check_dict_case(d):\n    if not d:\n        return False\n    all_lower = all(isinstance(k, str) and k.islower() for k in d)\n    all_upper = all(isinstance(k, str) and k.isupper() for k in d)\n    return all_lower or all_upper\n```\n", "requirement analysis:\nThe function must accurately determine if all keys in a dictionary are either all lowercase or all uppercase strings. It should return False for empty dictionaries and those containing non-string keys. The function should be efficient and easy to understand.\nrequirement pool:\n- The function should return True if all keys are lowercase strings.\n- The function should return True if all keys are uppercase strings.\n- The function should return False if the dictionary is empty.\n- The function should return False if any key is not a string.\n- Optimize the function for performance with large dictionaries.\nWe will implement a function that iterates over the dictionary keys to check their case. The function will first check if the dictionary is empty and return False if it is. Then, it will verify that all keys are strings. If any key is not a string, it will return False. Finally, it will check if all keys are either lowercase or uppercase and return True accordingly. We will use Python's built-in string methods to perform these checks efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all keys are strings in lower case' and 'all keys are strings in upper case'\n    Explanation: The requirement is to check the case of all keys in the dictionary. If all keys are lowercase or all are uppercase, the function should return True. If there is a mix of cases or any non-string key, it should return False.\n\n    'dictionary is empty'\n    Explanation: If the dictionary has no elements, the function should return False.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'all': means every key in the dictionary must meet the condition (either all lowercase or all uppercase).\n\n# [code logic]\n1. Check if the dictionary is empty. If it is, return False.\n2. Iterate over the keys of the dictionary.\n3. Check if all keys are strings. If any key is not a string, return False.\n4. Check if all keys are lowercase or all are uppercase.\n5. If all keys are lowercase, return True.\n6. If all keys are uppercase, return True.\n7. If neither condition is met, return False.\n\n# [edge case] \n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so the function should return False.\n\n    check_dict_case({\"a\": \"apple\", \"A\": \"banana\"}) = False\n    Explanation: The keys have mixed cases, so the function should return False.\n\n    check_dict_case({\"A\": \"apple\", \"B\": \"banana\"}) = True\n    Explanation: All keys are uppercase, so the function should return True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking for an empty dictionary and ensuring all keys are strings and either all lowercase or all uppercase.\n", "requirement analysis:\nThe function should accurately determine if all keys in a dictionary are either in lower case or upper case. It must handle empty dictionaries by returning False and ensure no non-string keys are present. Performance optimization is crucial for handling large dictionaries efficiently.\nrequirement pool:\n- Implement function to check dictionary key case consistency\n- Optimize performance for large dictionaries\n- Implement error handling for non-string keys\n- Provide detailed documentation and examples\n- Ensure compatibility with different Python versions\nWe will implement a function that checks the case consistency of dictionary keys. The function will ensure all keys are either in lower case or upper case, return False for empty dictionaries, and handle non-string keys by returning False. We will use Python's built-in capabilities for string manipulation and dictionary operations to optimize performance for large dictionaries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lower case' and 'upper case'\n    Explanation: The requirement specifies that all keys in the dictionary should either be in lower case or upper case. This means that the function should check the case of each key and ensure consistency across all keys.\n\n    'non-string keys'\n    Explanation: The requirement states that the dictionary should not contain any non-string keys. This means the function should verify that all keys are strings.\n\n# [phrase showing quantity relationship]\n    'all keys': This indicates that the condition must be true for every key in the dictionary, without exception.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Check if the dictionary is empty. If it is, return False.\n2. Iterate through the keys of the dictionary to ensure all are strings.\n3. Determine if all keys are in lower case or all are in upper case.\n4. Return True if either condition is met; otherwise, return False.\n\n# [edge case]\n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so according to the requirement, the function should return False.\n\n    check_dict_case({\"a\": \"apple\", \"A\": \"banana\"}) = False\n    Explanation: The keys are not consistent in case (one is lower case, one is upper case), so the function should return False.\n\n    check_dict_case({\"a\": \"apple\", 8: \"banana\"}) = False\n    Explanation: There is a non-string key (8), so the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n```python\ndef check_dict_case(d):\n    if not d:\n        return False\n    if not all(isinstance(k, str) for k in d.keys()):\n        return False\n    all_lower = all(k.islower() for k in d.keys())\n    all_upper = all(k.isupper() for k in d.keys())\n    return all_lower or all_upper\n```\n", "requirement analysis:\nThe function should accurately determine if all keys in a dictionary are either all lowercase or all uppercase strings. It must return False for empty dictionaries and those containing non-string keys. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement function to check dictionary key case consistency\n- Ensure function returns False for non-string keys\n- Optimize function for large dictionary performance\n- Provide detailed error messages for invalid inputs\n- Include comprehensive test cases for various scenarios\nWe will implement a function that checks if all keys in a dictionary are either all lowercase or all uppercase strings. The function will return False for empty dictionaries and those containing non-string keys. We will use Python's built-in capabilities to efficiently handle large dictionaries and ensure accurate functionality. The function will iterate over the keys, checking their type and case, and will return appropriate error messages for invalid inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lower case' and 'upper case'\n    Explanation: The requirement specifies that all keys in the dictionary should either be in lowercase or uppercase. This means that the function should check the case of each key and ensure consistency across all keys.\n\n    'non-string keys'\n    Explanation: The requirement states that the dictionary should not contain any non-string keys. This means the function should verify that all keys are strings.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'all': means every key in the dictionary must meet the specified condition (either all lowercase or all uppercase).\n\n# [code logic]\n1. Check if the dictionary is empty. If it is, return False.\n2. Iterate through the keys of the dictionary.\n3. Check if each key is a string. If any key is not a string, return False.\n4. Determine if all keys are lowercase or all keys are uppercase.\n5. If all keys are either lowercase or uppercase, return True; otherwise, return False.\n\n# [edge case] \n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so according to the requirement, the function should return False.\n\n    check_dict_case({\"a\": \"apple\", \"A\": \"banana\"}) = False\n    Explanation: The keys are not consistently in one case (mixed case), so the function should return False.\n\n    check_dict_case({\"a\": \"apple\", 8: \"banana\"}) = False\n    Explanation: There is a non-string key (8), so the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n```python\ndef check_dict_case(d):\n    if not d:\n        return False\n    all_lower = all_upper = True\n    for key in d:\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            all_lower = False\n        if not key.isupper():\n            all_upper = False\n    return all_lower or all_upper\n```\n", "requirement analysis:\nThe function should accurately determine if all keys in a dictionary are either all lowercase or all uppercase strings. It must return False for empty dictionaries and those containing non-string keys. Performance optimization is crucial for handling large datasets.\nrequirement pool:\n- Implement key case consistency check\n- Validate presence of non-string keys\n- Optimize for large dictionary performance\n- Provide detailed error messages\n- Enhance documentation for user understanding\nWe will implement a function that checks if all keys in a dictionary are either all lowercase or all uppercase strings. The function will return False for empty dictionaries and those containing non-string keys. We will use Python's built-in capabilities to efficiently handle large dictionaries and ensure accurate functionality. The function will also provide clear error handling for non-string keys.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lower case' and 'upper case'\n    Explanation: The requirement specifies that all keys in the dictionary should either be in lowercase or uppercase. This means that the function should check the case of each key and ensure consistency across all keys.\n\n    'non-string keys'\n    Explanation: The requirement states that the dictionary should not contain any keys that are not strings. This means the function should verify that all keys are strings before proceeding with other checks.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'all': means every key in the dictionary must meet the specified condition (either all lowercase or all uppercase).\n\n# [code logic]\n1. Check if the dictionary is empty. If it is, return False.\n2. Iterate through the keys of the dictionary to ensure all are strings. If any key is not a string, return False.\n3. Check if all keys are in lowercase:\n   - Use a generator expression to check if each key is equal to its lowercase version.\n4. Check if all keys are in uppercase:\n   - Use a generator expression to check if each key is equal to its uppercase version.\n5. Return True if either all keys are lowercase or all are uppercase; otherwise, return False.\n\n# [edge case] \n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so according to the requirement, the function should return False.\n\n    check_dict_case({\"a\": \"apple\", 8: \"banana\"}) = False\n    Explanation: The dictionary contains a non-string key (8), so the function should return False.\n\n    check_dict_case({\"A\": \"apple\", \"B\": \"banana\", \"C\": \"cherry\"}) = True\n    Explanation: All keys are uppercase strings, so the function should return True.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n```python\ndef check_dict_case(d):\n    if not d:\n        return False\n    if not all(isinstance(k, str) for k in d.keys()):\n        return False\n    all_lower = all(k.islower() for k in d.keys())\n    all_upper = all(k.isupper() for k in d.keys())\n    return all_lower or all_upper\n```\n", "requirement analysis:\nThe function must accurately determine if all keys in a dictionary are either in lower case or upper case. It should return False for empty dictionaries and handle non-string keys by returning False. Performance optimization is crucial for handling large dictionaries efficiently.\nrequirement pool:\n- Implement function to check dictionary key case consistency\n- Ensure function returns False for empty dictionaries\n- Provide error handling for non-string keys\n- Optimize performance for large dictionaries\n- Include detailed error messages for user feedback\nWe will implement a function that iterates over the dictionary keys to check if they are all in lower case or all in upper case. The function will first check if the dictionary is empty and return False if it is. It will also ensure that all keys are strings, returning False if any non-string key is found. The function will be optimized for performance by using efficient iteration and built-in Python methods.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lower case' and 'upper case'\n    Explanation: The requirement specifies that all keys in the dictionary should either be in lower case or upper case. This means that the function should check the case of each key and ensure uniformity across all keys.\n\n    'non-string keys'\n    Explanation: The requirement states that the dictionary should not contain any non-string keys. This means the function should verify that all keys are strings before proceeding with the case check.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'all': means that every key in the dictionary must meet the specified condition (either all lower case or all upper case).\n\n# [code logic]\n    1. Check if the dictionary is empty. If it is, return False.\n    2. Iterate over the keys of the dictionary to ensure they are all strings. If any key is not a string, return False.\n    3. Check if all keys are in lower case or all keys are in upper case.\n    4. Return True if all keys meet one of the case conditions, otherwise return False.\n\n# [edge case] \n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so the function should return False as specified in the requirement.\n    \n    check_dict_case({\"a\": \"apple\", \"A\": \"banana\"}) = False\n    Explanation: The keys are not uniformly in lower case or upper case, so the function should return False.\n    \n    check_dict_case({\"a\": \"apple\", 8: \"banana\"}) = False\n    Explanation: There is a non-string key (8), so the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not dict:\n            return False\n        for key in dict:\n            if not isinstance(key, str):\n                return False\n        lower_case = all(key.islower() for key in dict)\n        upper_case = all(key.isupper() for key in dict)\n        return lower_case or upper_case\n"], "scores": [1.0, 1.0, 0.8362, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, false, true, true, true, true, true, true, true], "pass_test_cases_num": [116, 116, 97, 116, 116, 116, 116, 116, 116, 116], "completion": "from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    \"\"\"\n    Checks if all keys in the dictionary are either all lower case or all upper case.\n    Returns False if the dictionary is empty or contains non-string keys.\n    \n    Parameters:\n    input_dict (dict): The dictionary to check.\n    \n    Returns:\n    bool: True if all keys are in the same case, False otherwise.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n\n    # Iterate over the keys to ensure they are all strings\n    for key in input_dict:\n        if not isinstance(key, str):\n            return False\n\n    # Check if all keys are in lower case\n    lower_case = all(key.islower() for key in input_dict)\n    # Check if all keys are in upper case\n    upper_case = all(key.isupper() for key in input_dict)\n\n    # Return True if all keys are in the same case, otherwise False\n    return lower_case or upper_case\n", "passed": true, "pass": true, "pass_num": 9, "round": 676, "mutate_method": "add_1_sentence_at_end", "parent_index": 80}
