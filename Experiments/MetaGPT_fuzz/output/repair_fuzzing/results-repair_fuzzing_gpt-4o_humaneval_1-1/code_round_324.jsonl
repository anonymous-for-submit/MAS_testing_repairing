{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. This function should handle both positive and negative integers correctly.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "entry_point": "greatest_common_divisor", "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n", "test": ["def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 16) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(47, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(45, 15) == 15", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 6) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(53, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 9) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 12) == 12", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 63) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 12) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 18) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 12) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 64) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 2) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(53, 14) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 62) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 4) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 63) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(149, 64) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 2) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 58) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 12) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 12) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(13, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(10, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 5) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 18) == 6", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 12) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 12) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(54, 9) == 9", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 57) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 16) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(145, 63) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 62) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(140, 65) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(145, 55) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 3) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 20) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(7, 10) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(51, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 16) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 3) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(14, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(10, 15) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 20) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 4) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(13, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(139, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 58) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 64) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(52, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 10) == 10", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 62) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 60) == 12", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 14) == 7", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(143, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 4) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 60) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 16) == 8", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(54, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 9) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(146, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(139, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 10) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(143, 62) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(140, 63) == 7", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 18) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 6) == 6", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 15) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(14, 20) == 2"], "test_case_list": ["assert greatest_common_divisor(6, 16) == 2", "assert greatest_common_divisor(47, 19) == 1", "assert greatest_common_divisor(141, 65) == 1", "assert greatest_common_divisor(45, 15) == 15", "assert greatest_common_divisor(1, 6) == 1", "assert greatest_common_divisor(50, 14) == 2", "assert greatest_common_divisor(53, 16) == 1", "assert greatest_common_divisor(3, 9) == 3", "assert greatest_common_divisor(50, 11) == 1", "assert greatest_common_divisor(48, 12) == 12", "assert greatest_common_divisor(49, 9) == 1", "assert greatest_common_divisor(6, 14) == 2", "assert greatest_common_divisor(141, 63) == 3", "assert greatest_common_divisor(5, 11) == 1", "assert greatest_common_divisor(11, 12) == 1", "assert greatest_common_divisor(12, 13) == 1", "assert greatest_common_divisor(15, 19) == 1", "assert greatest_common_divisor(46, 18) == 2", "assert greatest_common_divisor(4, 12) == 4", "assert greatest_common_divisor(46, 13) == 1", "assert greatest_common_divisor(12, 11) == 1", "assert greatest_common_divisor(11, 17) == 1", "assert greatest_common_divisor(148, 64) == 4", "assert greatest_common_divisor(5, 9) == 1", "assert greatest_common_divisor(5, 2) == 1", "assert greatest_common_divisor(1, 11) == 1", "assert greatest_common_divisor(141, 61) == 1", "assert greatest_common_divisor(53, 14) == 1", "assert greatest_common_divisor(12, 10) == 2", "assert greatest_common_divisor(147, 62) == 1", "assert greatest_common_divisor(2, 4) == 2", "assert greatest_common_divisor(142, 63) == 1", "assert greatest_common_divisor(4, 6) == 2", "assert greatest_common_divisor(149, 64) == 1", "assert greatest_common_divisor(6, 2) == 2", "assert greatest_common_divisor(5, 13) == 1", "assert greatest_common_divisor(148, 58) == 2", "assert greatest_common_divisor(46, 10) == 2", "assert greatest_common_divisor(44, 12) == 4", "assert greatest_common_divisor(5, 12) == 1", "assert greatest_common_divisor(13, 15) == 1", "assert greatest_common_divisor(10, 17) == 1", "assert greatest_common_divisor(2, 7) == 1", "assert greatest_common_divisor(5, 5) == 5", "assert greatest_common_divisor(1, 7) == 1", "assert greatest_common_divisor(48, 18) == 6", "assert greatest_common_divisor(46, 12) == 2", "assert greatest_common_divisor(3, 12) == 3", "assert greatest_common_divisor(54, 9) == 9", "assert greatest_common_divisor(142, 57) == 1", "assert greatest_common_divisor(5, 16) == 1", "assert greatest_common_divisor(142, 55) == 1", "assert greatest_common_divisor(44, 16) == 4", "assert greatest_common_divisor(145, 63) == 1", "assert greatest_common_divisor(144, 59) == 1", "assert greatest_common_divisor(8, 9) == 1", "assert greatest_common_divisor(148, 62) == 2", "assert greatest_common_divisor(49, 16) == 1", "assert greatest_common_divisor(140, 65) == 5", "assert greatest_common_divisor(145, 55) == 5", "assert greatest_common_divisor(1, 3) == 1", "assert greatest_common_divisor(12, 20) == 4", "assert greatest_common_divisor(6, 13) == 1", "assert greatest_common_divisor(141, 59) == 1", "assert greatest_common_divisor(7, 10) == 1", "assert greatest_common_divisor(51, 11) == 1", "assert greatest_common_divisor(12, 16) == 4", "assert greatest_common_divisor(46, 14) == 2", "assert greatest_common_divisor(6, 3) == 3", "assert greatest_common_divisor(14, 13) == 1", "assert greatest_common_divisor(10, 15) == 5", "assert greatest_common_divisor(15, 20) == 5", "assert greatest_common_divisor(6, 17) == 1", "assert greatest_common_divisor(147, 61) == 1", "assert greatest_common_divisor(4, 4) == 4", "assert greatest_common_divisor(1, 9) == 1", "assert greatest_common_divisor(13, 17) == 1", "assert greatest_common_divisor(139, 65) == 1", "assert greatest_common_divisor(144, 58) == 2", "assert greatest_common_divisor(147, 64) == 1", "assert greatest_common_divisor(3, 7) == 1", "assert greatest_common_divisor(52, 19) == 1", "assert greatest_common_divisor(50, 10) == 10", "assert greatest_common_divisor(2, 9) == 1", "assert greatest_common_divisor(44, 10) == 2", "assert greatest_common_divisor(144, 62) == 2", "assert greatest_common_divisor(148, 55) == 1", "assert greatest_common_divisor(144, 60) == 12", "assert greatest_common_divisor(49, 14) == 7", "assert greatest_common_divisor(143, 59) == 1", "assert greatest_common_divisor(6, 4) == 2", "assert greatest_common_divisor(148, 60) == 4", "assert greatest_common_divisor(11, 19) == 1", "assert greatest_common_divisor(4, 7) == 1", "assert greatest_common_divisor(15, 16) == 1", "assert greatest_common_divisor(49, 13) == 1", "assert greatest_common_divisor(8, 16) == 8", "assert greatest_common_divisor(54, 19) == 1", "assert greatest_common_divisor(8, 11) == 1", "assert greatest_common_divisor(8, 6) == 2", "assert greatest_common_divisor(6, 9) == 3", "assert greatest_common_divisor(12, 14) == 2", "assert greatest_common_divisor(146, 55) == 1", "assert greatest_common_divisor(139, 61) == 1", "assert greatest_common_divisor(147, 65) == 1", "assert greatest_common_divisor(11, 10) == 1", "assert greatest_common_divisor(143, 62) == 1", "assert greatest_common_divisor(140, 63) == 7", "assert greatest_common_divisor(49, 15) == 1", "assert greatest_common_divisor(44, 15) == 1", "assert greatest_common_divisor(2, 6) == 2", "assert greatest_common_divisor(8, 18) == 2", "assert greatest_common_divisor(6, 6) == 6", "assert greatest_common_divisor(48, 15) == 3", "assert greatest_common_divisor(44, 9) == 1", "assert greatest_common_divisor(14, 20) == 2"], "nl": " Return a greatest common divisor of two integers a and b\n    ", "func": "def greatest_common_divisor(a: int, b: int) -> int:", "examples": ">>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    ", "repair_prompt": ["def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. This function should handle both positive and negative integers correctly.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. The gcd is the largest positive integer that divides both a and b without leaving a remainder. This function should handle both positive and negative integers correctly.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b, handling both positive and negative integers correctly.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers.\n\n    Parameters:\n    a (int): First integer, can be positive or negative.\n    b (int): Second integer, can be positive or negative.\n\n    Returns:\n    int: The greatest common divisor of a and b.\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, -15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    \"\"\"\n    import math\n    return math.gcd(a, b)\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First integer, can be positive or negative.\n    b (int): Second integer, can be positive or negative.\n    \n    Returns:\n    int: The greatest common divisor of a and b.\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, -15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    \"\"\"\n    # Handle the edge case where both numbers are zero\n    if a == 0 and b == 0:\n        return 0\n    \n    # Take the absolute values to handle negative numbers\n    a = abs(a)\n    b = abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer, can be positive or negative.\n    b (int): Second integer, can be positive or negative.\n\n    Returns:\n    int: The greatest common divisor of a and b.\n    \"\"\"\n    # Ensure the function handles both positive and negative integers correctly\n    a = abs(a)\n    b = abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to verify the function works correctly\n    print(greatest_common_divisor(0, 5))  # Expected output: 5\n    print(greatest_common_divisor(0, 0))  # Expected output: 0\n    print(greatest_common_divisor(-25, 15))  # Expected output: 5\n    print(greatest_common_divisor(48, 18))  # Expected output: 6\n", "from typing import List\n## main.py\n\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Calculate the greatest common divisor (GCD) of two integers.\n\n    This function uses the math.gcd function from the Python standard library\n    to compute the GCD, which is the largest positive integer that divides both\n    numbers without leaving a remainder.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The greatest common divisor of the two integers.\n\n    Examples:\n        >>> greatest_common_divisor(48, 18)\n        6\n        >>> greatest_common_divisor(0, 5)\n        5\n        >>> greatest_common_divisor(-3, -9)\n        3\n        >>> greatest_common_divisor(0, 0)\n        0\n    \"\"\"\n    return math.gcd(a, b)\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers a and b using the Euclidean algorithm.\n    Handles both positive and negative integers.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, -15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    \"\"\"\n    # Take the absolute value of both integers to handle negative inputs\n    a = abs(a)\n    b = abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    # Return the GCD\n    return a\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Calculate the greatest common divisor (GCD) of two integers using the Euclidean algorithm.\n\n    Args:\n        a (int): First integer.\n        b (int): Second integer.\n\n    Returns:\n        int: The greatest common divisor of a and b.\n\n    Examples:\n        >>> greatest_common_divisor(48, 18)\n        6\n        >>> greatest_common_divisor(0, 5)\n        5\n        >>> greatest_common_divisor(-25, 15)\n        5\n        >>> greatest_common_divisor(0, 0)\n        0\n    \"\"\"\n    if a == 0:\n        return abs(b)\n    if b == 0:\n        return abs(a)\n    \n    while b != 0:\n        a, b = b, a % b\n    \n    return abs(a)\n\ndef main():\n    \"\"\"Main function to demonstrate the usage of greatest_common_divisor.\"\"\"\n    test_cases = [\n        (48, 18),\n        (0, 5),\n        (-25, 15),\n        (0, 0)\n    ]\n    \n    for a, b in test_cases:\n        gcd = greatest_common_divisor(a, b)\n        print(f\"The GCD of {a} and {b} is {gcd}\")\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    Handles both positive and negative integers.\n    \n    Args:\n        a (int): First integer\n        b (int): Second integer\n    \n    Returns:\n        int: Greatest common divisor of a and b\n    \n    Raises:\n        ValueError: If either a or b is not an integer\n    \"\"\"\n    # Validate inputs\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers.\")\n    \n    # Handle edge case where both numbers are zero\n    if a == 0 and b == 0:\n        return 0\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return abs(a)\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        print(greatest_common_divisor(48, 18))  # Expected output: 6\n        print(greatest_common_divisor(0, 5))    # Expected output: 5\n        print(greatest_common_divisor(-25, -15)) # Expected output: 5\n        print(greatest_common_divisor(0, 0))    # Expected output: 0\n    except ValueError as e:\n        print(e)\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Compute the greatest common divisor of two integers a and b.\n    Handles both positive and negative integers.\n    Returns the absolute value of the GCD.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, -15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    \"\"\"\n    # Handle edge cases where one or both numbers are zero\n    if a == 0 and b == 0:\n        return 0\n    elif a == 0:\n        return abs(b)\n    elif b == 0:\n        return abs(a)\n    \n    # Use the Euclidean algorithm to find the GCD\n    a, b = abs(a), abs(b)\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n", "from typing import List\n## main.py\n\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers, handling both positive and negative values.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Example:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    \"\"\"\n    if a == 0 and b == 0:\n        return 0\n    return math.gcd(abs(a), abs(b))\n", "from typing import List\n## main.py\n\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Calculate the greatest common divisor (GCD) of two integers using the Euclidean method.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The greatest common divisor of the two integers.\n\n    Raises:\n        ValueError: If non-integer inputs are provided.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Inputs must be integers.\")\n\n    # Handle edge case where both numbers are zero\n    if a == 0 and b == 0:\n        return 0\n\n    # Use Python's built-in math.gcd function for efficient computation\n    return abs(math.gcd(a, b))\n\n# Example usage:\n# result = greatest_common_divisor(48, 18)\n# print(result)  # Output: 6\n"], "plans": ["requirement analysis:\nThe function must accurately compute the greatest common divisor for any pair of integers, including negative values. It should be optimized for performance, especially with large integers, and provide clear documentation for users.\nrequirement pool:\n- Accurate GCD calculation for all integer inputs\n- Handle negative integers correctly\n- Optimize performance for large integers\n- Provide clear documentation\n- Include examples in documentation\nWe will use the built-in Python library 'math' which provides a gcd function that is efficient and handles both positive and negative integers. This will ensure accurate and optimized performance for large integers. We will wrap this in our own function to provide additional documentation and examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. It is a fundamental concept in number theory.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': This indicates that we need to find the largest integer that divides both input integers without a remainder.\n\n# [code logic]\n    1. Import the 'math' library which contains the gcd function.\n    2. Define the function greatest_common_divisor(a, b).\n    3. Use math.gcd(a, b) to calculate the GCD of the two integers.\n    4. Return the result from math.gcd(a, b).\n\n# [edge case] \n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of 0 and 0 is undefined in mathematics, but by convention, it is often set to 0.\n    greatest_common_divisor(0, 5) = 5\n    Explanation: Any number is a divisor of 0, so the GCD of 0 and any non-zero number is the non-zero number itself.\n    greatest_common_divisor(-25, -15) = 5\n    Explanation: The GCD function should handle negative numbers by returning the positive GCD.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The math.gcd function in Python already handles these cases correctly.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor for any pair of integers, including negative values. It should be efficient and easy to use, with clear documentation and examples.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm\n- Ensure the function handles negative integers correctly\n- Provide usage examples in the documentation\n- Optimize the function for performance\n- Create a simple UI for user interaction\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and straightforward. The function will handle both positive and negative integers by taking the absolute values before computation. We will provide clear documentation and examples to ensure usability. The function will be implemented in a single Python file, and we will use the built-in 'math' library for simplicity and reliability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. It is a fundamental concept in number theory.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest possible divisor that can divide both integers without a remainder.\n\n# [code logic]\n    1. Take the absolute values of both integers to handle negative numbers.\n    2. Implement the Euclidean algorithm:\n        - While the second number is not zero, replace the first number with the second number and the second number with the remainder of the division of the first number by the second number.\n    3. When the second number becomes zero, the first number is the GCD.\n    4. Return the GCD.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and zero is the non-zero number itself.\n    \n    greatest_common_divisor(-25, -15) = 5\n    Explanation: The function should handle negative numbers by taking their absolute values, so it calculates the GCD of 25 and 15, which is 5.\n    \n    greatest_common_divisor(0, 0) = 0\n    Explanation: By convention, the GCD of zero and zero is undefined, but it can be considered as zero for practical purposes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where both numbers are zero.\n        if a == 0 and b == 0:\n            return 0\n        (other code using Euclidean algorithm)\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor for any pair of integers, including negative values. It should be optimized for performance and provide a simple interface for user interaction.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm.\n- Ensure the function handles both positive and negative integers.\n- Optimize the function for performance to handle large integers.\n- Design a simple user interface for input and output.\n- Include error handling for invalid inputs.\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and handles both positive and negative integers. The function will be optimized for performance to handle large integers quickly. We will use Python's built-in capabilities to ensure accurate computations without the need for additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. The Euclidean algorithm is a method for finding the GCD by repeatedly applying the division process.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both a and b without leaving a remainder\n\n# [code logic]\n    1. Implement the Euclidean algorithm:\n        - If b is zero, return the absolute value of a as the GCD.\n        - Otherwise, recursively call the function with b and the remainder of a divided by b.\n    2. Ensure the function handles both positive and negative integers correctly by using absolute values.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of 0 and any non-zero integer is the absolute value of the non-zero integer.\n    \n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of two zeros is conventionally defined as zero.\n    \n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The GCD should be positive, even if one or both numbers are negative.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The Euclidean algorithm inherently handles these cases correctly by using absolute values and checking for zero.\n", "requirement analysis:\nThe function must accurately compute the greatest common divisor for any pair of integers, including negative values. It should be optimized for performance, especially with large integers, and provide clear documentation for users.\nrequirement pool:\n- Accurate GCD calculation for all integer inputs\n- Handle negative integers correctly\n- Optimize performance for large integer values\n- Provide clear documentation\n- Include examples in documentation\nWe will use the Python standard library function math.gcd, which is efficient and handles negative numbers correctly. This approach ensures accurate calculation of the GCD for all integer inputs, including negative values, and optimizes performance for large integers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. It is a fundamental concept in number theory.\n\n# [phrase showing quantity relationship]\n    'largest positive integer': This indicates that the GCD is the maximum integer greater than zero that divides both numbers without a remainder.\n\n# [degree adverb] \n    'greatest': This refers to the largest value in terms of magnitude that satisfies the condition of being a divisor of both integers.\n\n# [code logic]\n    1. Import the `math` module to use the `math.gcd` function.\n    2. Use `math.gcd(a, b)` to calculate the greatest common divisor of `a` and `b`.\n    3. Return the result from `math.gcd`.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of 0 and any non-zero integer is the absolute value of the non-zero integer.\n    \n    greatest_common_divisor(-3, -9) = 3\n    Explanation: The GCD should be positive, even if both inputs are negative. The GCD of 3 and 9 is 3.\n    \n    greatest_common_divisor(0, 0) = 0\n    Explanation: By convention, the GCD of 0 and 0 is defined as 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The `math.gcd` function in Python handles these cases correctly by definition.\n", "requirement analysis:\nThe function must accurately compute the greatest common divisor for any pair of integers, including negative values. It should be efficient and easy to use, with clear documentation to guide users.\nrequirement pool:\n- Implement the GCD algorithm using the Euclidean method\n- Ensure the function handles both positive and negative integers\n- Optimize the function for performance\n- Provide comprehensive documentation and examples\n- Include edge case testing\nWe will implement the GCD function using the Euclidean algorithm, which is efficient and straightforward. The function will handle both positive and negative integers by taking the absolute value of the inputs. We will use Python's built-in capabilities without additional libraries to ensure simplicity and performance. The function will also handle zero as an input, returning the absolute value of the non-zero number or zero if both inputs are zero.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) is the largest positive integer that divides two numbers without leaving a remainder. It is a fundamental concept in number theory and is used to simplify fractions and solve problems involving divisibility.\n\n# [phrase showing quantity relationship]\n    'largest positive integer': This indicates that the GCD is the maximum integer that can divide both numbers without a remainder.\n    Implementation: Use the Euclidean algorithm, which repeatedly applies the division process to find the GCD.\n\n# [degree adverb]\n    'greatest': This refers to finding the largest integer that divides both numbers.\n    Implementation: The Euclidean algorithm inherently finds the greatest divisor by iteratively reducing the problem size.\n\n# [code logic]\n    1. Take the absolute value of both integers to handle negative inputs.\n    2. Implement the Euclidean algorithm:\n        - While b is not zero, set a to b and b to a % b.\n        - When b becomes zero, a contains the GCD.\n    3. Return the GCD.\n\n# [edge case]\n    greatest_common_divisor(0, 0) = 0\n    Explanation: Both numbers are zero, so the GCD is defined as zero.\n    \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of zero and any non-zero number is the absolute value of the non-zero number.\n    \n    greatest_common_divisor(-25, -15) = 5\n    Explanation: The function should handle negative numbers by taking their absolute values, resulting in a GCD of 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using absolute values and the Euclidean algorithm naturally handles these cases.\n", "requirement analysis:\nThe function should correctly compute the greatest common divisor for both positive and negative integers. It should be optimized for performance and provide clear documentation for ease of integration.\nrequirement pool:\n- Implement the GCD function to handle both positive and negative integers\n- Optimize the function for performance\n- Provide comprehensive documentation and examples\n- Ensure compatibility with existing Python projects\n- Include unit tests for various edge cases\nWe will implement the GCD function using the Euclidean algorithm, which is efficient and handles both positive and negative integers. We will utilize the built-in Python capabilities to ensure performance optimization. The function will be documented clearly with examples, and we will include unit tests to cover various edge cases, including zero as an input.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. It is a fundamental concept in number theory.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'largest': Refers to the greatest integer that can divide both numbers without leaving a remainder.\n\n# [code logic]\n    1. Implement the Euclidean algorithm:\n        - If either number is zero, return the absolute value of the other number as the GCD.\n        - Otherwise, repeatedly replace the larger number by its remainder when divided by the smaller number until one of the numbers becomes zero.\n        - The non-zero number at this point is the GCD.\n    2. Ensure the function handles both positive and negative integers correctly by using absolute values.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of 0 and any non-zero integer is the absolute value of the non-zero integer.\n    \n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of 0 and 0 is conventionally defined as 0.\n    \n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The function should handle negative integers correctly, and the GCD is always positive.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    def greatest_common_divisor(a: int, b: int) -> int:\n        if a == 0:\n            return abs(b)\n        if b == 0:\n            return abs(a)\n        while b != 0:\n            a, b = b, a % b\n        return abs(a)\n    ```\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor (GCD) for any two integers, including negative values. It should be efficient and handle edge cases such as zero inputs.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm.\n- Ensure the function handles both positive and negative integers.\n- Optimize the function for performance.\n- Create a simple user interface for input and output.\n- Include error handling for invalid inputs.\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and handles both positive and negative integers. We will use Python's built-in capabilities to ensure performance optimization. The function will include error handling for invalid inputs, such as non-integer values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. It is a fundamental concept in number theory.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both a and b without leaving a remainder\n\n# [code logic]\n    1. Validate the inputs to ensure they are integers.\n    2. Implement the Euclidean algorithm:\n        - If b is zero, return the absolute value of a as the GCD.\n        - Otherwise, recursively call the function with b and a % b until b becomes zero.\n    3. Return the absolute value of the result to handle negative integers correctly.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of 0 and any non-zero integer is the absolute value of the non-zero integer.\n    \n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of two zeros is undefined, but conventionally it is considered as 0.\n    \n    greatest_common_divisor(-25, -15) = 5\n    Explanation: The GCD should be positive, even if both numbers are negative.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0:\n            return 0\n        return abs(a) if b == 0 else greatest_common_divisor(b, a % b)\n", "requirement analysis:\nThe function should compute the greatest common divisor (GCD) of two integers, including handling negative values correctly. It should be efficient and easy to use, with clear documentation and examples.\nrequirement pool:\n- Implement the GCD function to handle both positive and negative integers.\n- Ensure the function is efficient and accurate.\n- Provide comprehensive documentation and examples.\n- Test the function with edge cases, including zero and negative numbers.\n- Optimize for performance with large integers.\nWe will implement the GCD function using the Euclidean algorithm, which is efficient and handles both positive and negative integers. The function will be designed to handle edge cases such as zero inputs by returning the absolute value of the non-zero number, or zero if both inputs are zero. We will use Python's built-in capabilities without additional libraries to keep the implementation simple and efficient.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. It is a fundamental concept in number theory.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest possible integer that divides both numbers without a remainder.\n\n# [code logic]\n    1. Implement the Euclidean algorithm to find the GCD:\n       - If either `a` or `b` is zero, return the absolute value of the non-zero number.\n       - If both are zero, return zero.\n       - Otherwise, repeatedly replace the larger number by its remainder when divided by the smaller number until one of them becomes zero. The non-zero number at this point is the GCD.\n    2. Handle both positive and negative integers by using absolute values.\n\n# [edge case] \n    greatest_common_divisor(0, 0) = 0\n    Explanation: Both numbers are zero, so the GCD is defined as zero.\n    \n    greatest_common_divisor(0, 5) = 5\n    Explanation: One number is zero, so the GCD is the absolute value of the non-zero number.\n    \n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The GCD should be positive, and it is calculated using absolute values.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0:\n            return 0\n        elif a == 0:\n            return abs(b)\n        elif b == 0:\n            return abs(a)\n        (other code using Euclidean algorithm)\n", "requirement analysis:\nThe function must accurately compute the GCD for both positive and negative integers, ensuring compatibility with existing Python standards. It should be optimized for performance, especially with large integers, and provide clear documentation for ease of use.\nrequirement pool:\n- Accurate computation of GCD for all integer inputs\n- Handle both positive and negative integers\n- Optimize performance for large integer values\n- Provide clear and concise documentation\n- Ensure easy integration into larger projects\nWe will use Python's built-in math.gcd function as a base for efficiency and modify it to handle negative integers correctly. This approach ensures high performance and accuracy while maintaining simplicity. The function will be documented clearly to facilitate easy integration into larger projects.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. It is a fundamental concept in number theory.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both numbers without leaving a remainder\n\n# [code logic]\n    - Use Python's built-in `math.gcd` function to calculate the GCD of two integers.\n    - Ensure the function handles negative integers correctly by taking the absolute value of the inputs before passing them to `math.gcd`.\n    - Return the result from `math.gcd`.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of 0 and any non-zero integer is the non-zero integer itself.\n    greatest_common_divisor(-3, -9) = 3\n    Explanation: The GCD should be positive, even if both inputs are negative.\n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of 0 and 0 is conventionally defined as 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        import math\n        \n        def greatest_common_divisor(a: int, b: int) -> int:\n            if a == 0 and b == 0:\n                return 0\n            return math.gcd(abs(a), abs(b))\n", "requirement analysis:\nThe function must accurately compute the greatest common divisor for any pair of integers, including negative values. It should be optimized for performance to handle large numbers efficiently.\nrequirement pool:\n- Implement the GCD algorithm using the Euclidean method.\n- Ensure the function handles negative integers correctly.\n- Optimize the function for performance with large integers.\n- Include comprehensive test cases for various integer inputs.\n- Document the function usage and edge cases.\nWe will implement the GCD algorithm using the Euclidean method, which is efficient and handles both positive and negative integers correctly. The Python standard library provides a function in the math module that can be used to compute the GCD efficiently, ensuring quick calculations even for large numbers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. It is a fundamental concept in number theory.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both numbers without leaving a remainder\n\n# [code logic]\n    - Use the Euclidean algorithm to find the GCD:\n      1. If b is 0, return a as the GCD.\n      2. Otherwise, recursively call the function with parameters (b, a % b).\n    - Alternatively, use Python's built-in `math.gcd` function for efficient computation.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and 0 is the number itself, as any number divides 0.\n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The GCD should handle negative numbers correctly, and the result should be positive.\n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of 0 and 0 is undefined, but conventionally it is considered as 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0:\n            return 0\n        return abs(math.gcd(a, b))\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [116, 116, 116, 116, 116, 116, 116, 116, 116, 116], "completion": "from typing import List\n## main.py\n\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Calculate the greatest common divisor (GCD) of two integers using the Euclidean method.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The greatest common divisor of the two integers.\n\n    Raises:\n        ValueError: If non-integer inputs are provided.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Inputs must be integers.\")\n\n    # Handle edge case where both numbers are zero\n    if a == 0 and b == 0:\n        return 0\n\n    # Use Python's built-in math.gcd function for efficient computation\n    return abs(math.gcd(a, b))\n\n# Example usage:\n# result = greatest_common_divisor(48, 18)\n# print(result)  # Output: 6\n", "passed": true, "pass": true, "pass_num": 10, "round": 324, "mutate_method": "add_1_sentence_at_end", "parent_index": 9}
