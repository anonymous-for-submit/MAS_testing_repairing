{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return the greatest common divisor of two integers a and b.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "entry_point": "greatest_common_divisor", "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n", "test": ["def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 16) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(47, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(45, 15) == 15", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 6) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(53, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 9) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 12) == 12", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 63) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 12) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 18) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 12) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 64) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 2) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(53, 14) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 62) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 4) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 63) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(149, 64) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 2) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 58) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 12) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 12) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(13, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(10, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 5) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 18) == 6", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 12) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 12) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(54, 9) == 9", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 57) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 16) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(145, 63) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 62) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(140, 65) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(145, 55) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 3) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 20) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(7, 10) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(51, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 16) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 3) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(14, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(10, 15) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 20) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 4) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(13, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(139, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 58) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 64) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(52, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 10) == 10", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 62) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 60) == 12", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 14) == 7", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(143, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 4) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 60) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 16) == 8", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(54, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 9) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(146, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(139, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 10) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(143, 62) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(140, 63) == 7", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 18) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 6) == 6", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 15) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(14, 20) == 2"], "test_case_list": ["assert greatest_common_divisor(6, 16) == 2", "assert greatest_common_divisor(47, 19) == 1", "assert greatest_common_divisor(141, 65) == 1", "assert greatest_common_divisor(45, 15) == 15", "assert greatest_common_divisor(1, 6) == 1", "assert greatest_common_divisor(50, 14) == 2", "assert greatest_common_divisor(53, 16) == 1", "assert greatest_common_divisor(3, 9) == 3", "assert greatest_common_divisor(50, 11) == 1", "assert greatest_common_divisor(48, 12) == 12", "assert greatest_common_divisor(49, 9) == 1", "assert greatest_common_divisor(6, 14) == 2", "assert greatest_common_divisor(141, 63) == 3", "assert greatest_common_divisor(5, 11) == 1", "assert greatest_common_divisor(11, 12) == 1", "assert greatest_common_divisor(12, 13) == 1", "assert greatest_common_divisor(15, 19) == 1", "assert greatest_common_divisor(46, 18) == 2", "assert greatest_common_divisor(4, 12) == 4", "assert greatest_common_divisor(46, 13) == 1", "assert greatest_common_divisor(12, 11) == 1", "assert greatest_common_divisor(11, 17) == 1", "assert greatest_common_divisor(148, 64) == 4", "assert greatest_common_divisor(5, 9) == 1", "assert greatest_common_divisor(5, 2) == 1", "assert greatest_common_divisor(1, 11) == 1", "assert greatest_common_divisor(141, 61) == 1", "assert greatest_common_divisor(53, 14) == 1", "assert greatest_common_divisor(12, 10) == 2", "assert greatest_common_divisor(147, 62) == 1", "assert greatest_common_divisor(2, 4) == 2", "assert greatest_common_divisor(142, 63) == 1", "assert greatest_common_divisor(4, 6) == 2", "assert greatest_common_divisor(149, 64) == 1", "assert greatest_common_divisor(6, 2) == 2", "assert greatest_common_divisor(5, 13) == 1", "assert greatest_common_divisor(148, 58) == 2", "assert greatest_common_divisor(46, 10) == 2", "assert greatest_common_divisor(44, 12) == 4", "assert greatest_common_divisor(5, 12) == 1", "assert greatest_common_divisor(13, 15) == 1", "assert greatest_common_divisor(10, 17) == 1", "assert greatest_common_divisor(2, 7) == 1", "assert greatest_common_divisor(5, 5) == 5", "assert greatest_common_divisor(1, 7) == 1", "assert greatest_common_divisor(48, 18) == 6", "assert greatest_common_divisor(46, 12) == 2", "assert greatest_common_divisor(3, 12) == 3", "assert greatest_common_divisor(54, 9) == 9", "assert greatest_common_divisor(142, 57) == 1", "assert greatest_common_divisor(5, 16) == 1", "assert greatest_common_divisor(142, 55) == 1", "assert greatest_common_divisor(44, 16) == 4", "assert greatest_common_divisor(145, 63) == 1", "assert greatest_common_divisor(144, 59) == 1", "assert greatest_common_divisor(8, 9) == 1", "assert greatest_common_divisor(148, 62) == 2", "assert greatest_common_divisor(49, 16) == 1", "assert greatest_common_divisor(140, 65) == 5", "assert greatest_common_divisor(145, 55) == 5", "assert greatest_common_divisor(1, 3) == 1", "assert greatest_common_divisor(12, 20) == 4", "assert greatest_common_divisor(6, 13) == 1", "assert greatest_common_divisor(141, 59) == 1", "assert greatest_common_divisor(7, 10) == 1", "assert greatest_common_divisor(51, 11) == 1", "assert greatest_common_divisor(12, 16) == 4", "assert greatest_common_divisor(46, 14) == 2", "assert greatest_common_divisor(6, 3) == 3", "assert greatest_common_divisor(14, 13) == 1", "assert greatest_common_divisor(10, 15) == 5", "assert greatest_common_divisor(15, 20) == 5", "assert greatest_common_divisor(6, 17) == 1", "assert greatest_common_divisor(147, 61) == 1", "assert greatest_common_divisor(4, 4) == 4", "assert greatest_common_divisor(1, 9) == 1", "assert greatest_common_divisor(13, 17) == 1", "assert greatest_common_divisor(139, 65) == 1", "assert greatest_common_divisor(144, 58) == 2", "assert greatest_common_divisor(147, 64) == 1", "assert greatest_common_divisor(3, 7) == 1", "assert greatest_common_divisor(52, 19) == 1", "assert greatest_common_divisor(50, 10) == 10", "assert greatest_common_divisor(2, 9) == 1", "assert greatest_common_divisor(44, 10) == 2", "assert greatest_common_divisor(144, 62) == 2", "assert greatest_common_divisor(148, 55) == 1", "assert greatest_common_divisor(144, 60) == 12", "assert greatest_common_divisor(49, 14) == 7", "assert greatest_common_divisor(143, 59) == 1", "assert greatest_common_divisor(6, 4) == 2", "assert greatest_common_divisor(148, 60) == 4", "assert greatest_common_divisor(11, 19) == 1", "assert greatest_common_divisor(4, 7) == 1", "assert greatest_common_divisor(15, 16) == 1", "assert greatest_common_divisor(49, 13) == 1", "assert greatest_common_divisor(8, 16) == 8", "assert greatest_common_divisor(54, 19) == 1", "assert greatest_common_divisor(8, 11) == 1", "assert greatest_common_divisor(8, 6) == 2", "assert greatest_common_divisor(6, 9) == 3", "assert greatest_common_divisor(12, 14) == 2", "assert greatest_common_divisor(146, 55) == 1", "assert greatest_common_divisor(139, 61) == 1", "assert greatest_common_divisor(147, 65) == 1", "assert greatest_common_divisor(11, 10) == 1", "assert greatest_common_divisor(143, 62) == 1", "assert greatest_common_divisor(140, 63) == 7", "assert greatest_common_divisor(49, 15) == 1", "assert greatest_common_divisor(44, 15) == 1", "assert greatest_common_divisor(2, 6) == 2", "assert greatest_common_divisor(8, 18) == 2", "assert greatest_common_divisor(6, 6) == 6", "assert greatest_common_divisor(48, 15) == 3", "assert greatest_common_divisor(44, 9) == 1", "assert greatest_common_divisor(14, 20) == 2"], "nl": " Return a greatest common divisor of two integers a and b\n    ", "func": "def greatest_common_divisor(a: int, b: int) -> int:", "examples": ">>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    ", "repair_prompt": ["def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return the greatest common divisor of two integers a and b.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "def greatest_common_divisor(a: int, b: int) -> int:\n'''Return the greatest common divisor of two integers a and b. The greatest common divisor is the largest positive integer that divides both a and b without leaving a remainder.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return the greatest common divisor of two integers a and b, as demonstrated in the following test cases.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    >>> greatest_common_divisor(-25, 15)\n    5\n    \"\"\"\n    # Ensure the GCD is always positive\n    a, b = abs(a), abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n", "from typing import List\n## main.py\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the greatest common divisor of two integers a and b.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Raises:\n    ValueError: If either a or b is not an integer\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    >>> greatest_common_divisor(-25, 15)\n    5\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers\")\n\n    return math.gcd(a, b)\n", "from typing import List\n## main.py\n\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return the greatest common divisor of two integers a and b.\n    \n    Handles edge cases such as zero and negative inputs.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    \"\"\"\n    # Use the absolute values to ensure the GCD is always positive\n    return math.gcd(abs(a), abs(b))\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(greatest_common_divisor(3, 5))  # Output: 1\n    print(greatest_common_divisor(25, 15))  # Output: 5\n    print(greatest_common_divisor(0, 5))  # Output: 5\n    print(greatest_common_divisor(-25, 15))  # Output: 5\n    print(greatest_common_divisor(0, 0))  # Output: 0\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Args:\n        a (int): First integer\n        b (int): Second integer\n\n    Returns:\n        int: The greatest common divisor of a and b\n    \"\"\"\n    # Handle edge case where both numbers are zero\n    if a == 0 and b == 0:\n        return 0\n    \n    # Handle negative integers by converting them to positive\n    a = abs(a)\n    b = abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(greatest_common_divisor(48, 18))  # Expected output: 6\n    print(greatest_common_divisor(0, 5))    # Expected output: 5\n    print(greatest_common_divisor(0, 0))    # Expected output: 0\n    print(greatest_common_divisor(1, 1))    # Expected output: 1\n    print(greatest_common_divisor(-48, 18)) # Expected output: 6\n    print(greatest_common_divisor(48, -18)) # Expected output: 6\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    \"\"\"\n    # Handle edge cases where either a or b is zero\n    if a == 0:\n        return abs(b)\n    elif b == 0:\n        return abs(a)\n\n    # Ensure both numbers are positive for the Euclidean algorithm\n    a, b = abs(a), abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n", "from typing import List\n## main.py\n\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the greatest common divisor of two integers a and b.\n    The greatest common divisor is the largest positive integer that divides both a and b without leaving a remainder.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    >>> greatest_common_divisor(1, 1)\n    1\n    \"\"\"\n    # Handle edge cases where one or both numbers are zero\n    if a == 0 and b == 0:\n        return 0\n    elif a == 0:\n        return b\n    elif b == 0:\n        return a\n    \n    # Use math.gcd for efficient computation\n    return math.gcd(a, b)\n", "from typing import List\n## main.py\n\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the greatest common divisor of two integers a and b.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    >>> greatest_common_divisor(1, 1)\n    1\n    >>> greatest_common_divisor(-25, 15)\n    5\n    >>> greatest_common_divisor(-25, -15)\n    5\n    \"\"\"\n    # Using Python's built-in math.gcd function for simplicity and reliability\n    return math.gcd(a, b)\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n    \"\"\"\n    # Handle edge cases where one or both numbers are zero\n    if a == 0:\n        return abs(b)\n    elif b == 0:\n        return abs(a)\n\n    # Use the Euclidean algorithm to compute the GCD\n    while b != 0:\n        a, b = b, a % b\n\n    return abs(a)\n\n# Example usage:\n# print(greatest_common_divisor(48, 18))  # Output: 6\n# print(greatest_common_divisor(0, 5))    # Output: 5\n# print(greatest_common_divisor(-25, -15)) # Output: 5\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    \"\"\"\n    # Take the absolute values to handle negative numbers\n    a, b = abs(a), abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Args:\n        a (int): First integer\n        b (int): Second integer\n    \n    Returns:\n        int: The greatest common divisor of a and b\n    \"\"\"\n    # Handle edge cases where one or both numbers are zero\n    if a == 0:\n        return abs(b)\n    elif b == 0:\n        return abs(a)\n    \n    # Ensure both numbers are positive for the calculation\n    a, b = abs(a), abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n"], "plans": ["requirement analysis:\nThe function should efficiently compute the greatest common divisor of two integers using a well-known algorithm like the Euclidean algorithm. It should be easy to use and understand, with clear documentation and examples.\nrequirement pool:\n- Implement the Euclidean algorithm for GCD calculation.\n- Provide detailed documentation with examples.\n- Optimize for performance with large integers.\n- Include error handling for invalid inputs.\n- Add educational content explaining the GCD concept.\nWe will implement the Euclidean algorithm for calculating the greatest common divisor (GCD) of two integers. This algorithm is efficient and well-suited for this task. We will use Python's standard library to handle any potential edge cases, such as negative integers and zero. The function will include detailed documentation and examples to enhance user understanding.\nPlease read and understand the following inteperation before coding\n## Answer 3:\n\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both a and b without leaving a remainder\n\n# [code logic]\n    - Implement the Euclidean algorithm:\n      1. If b is zero, return a as the GCD.\n      2. Otherwise, recursively call the function with parameters (b, a % b).\n    - Use Python's standard library to handle edge cases like negative integers and zero.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and zero is the number itself.\n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of zero and zero is undefined, but conventionally considered as zero.\n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The GCD is always positive, even if one or both numbers are negative.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The Euclidean algorithm inherently handles these cases by its recursive nature and the use of modulus operation.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor of two integers, handling both positive and negative values. It should be efficient and easy to use, with clear documentation and examples.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm.\n- Provide clear documentation and examples for users.\n- Optimize the function for performance with large integers.\n- Ensure compatibility with different Python versions.\n- Include error handling for invalid inputs.\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and widely used for this purpose. We will utilize Python's standard library function `math.gcd` for optimal performance and reliability. The function will handle both positive and negative integers and will include error handling for non-integer inputs. Documentation and examples will be provided to ensure usability.\nPlease read and understand the following inteperation before coding\n## Answer 3:\n\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both a and b without leaving a remainder\n\n# [code logic]\n    - Use the Euclidean algorithm to find the GCD:\n      - If b is 0, return a as the GCD.\n      - Otherwise, recursively call the function with parameters (b, a % b).\n    - Alternatively, use Python's `math.gcd` function for optimal performance.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of 0 and any non-zero integer is the non-zero integer itself.\n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of 0 and 0 is undefined, but conventionally considered as 0.\n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The GCD function should handle negative integers and return the positive GCD.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The Euclidean algorithm naturally handles these cases, and Python's `math.gcd` function is robust enough to manage them directly.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor using an efficient algorithm, such as the Euclidean method. It should handle edge cases like zero inputs and negative numbers, and provide clear documentation for users.\nrequirement pool:\n- Implement the Euclidean algorithm for GCD\n- Handle edge cases such as zero and negative inputs\n- Optimize for performance with large integers\n- Provide comprehensive documentation\n- Include examples and test cases\nWe will implement the Euclidean algorithm for computing the greatest common divisor (GCD) of two integers. This algorithm is efficient and widely used for GCD calculations. We will handle edge cases such as zero and negative inputs by ensuring the function can return correct results for these scenarios. The Python standard library's math module provides a gcd function, which is optimized for performance and can handle large integers efficiently. We will use this function to ensure our implementation is both accurate and performant. Comprehensive documentation will be provided, including examples and test cases to demonstrate usage.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both a and b without leaving a remainder\n\n# [code logic]\n    - Implement the Euclidean algorithm:\n      1. If b is zero, return a as the GCD.\n      2. Otherwise, recursively call the function with parameters (b, a % b).\n    - Handle edge cases such as zero and negative inputs:\n      1. Ensure the function can return correct results for these scenarios.\n    - Use Python's math.gcd function for optimized performance.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and zero is the number itself.\n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of zero and zero is undefined, but conventionally returned as zero.\n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The GCD is always positive, even if one or both numbers are negative.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The Euclidean algorithm inherently handles these cases correctly.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor (GCD) of two integers. The function should be efficient, especially for large numbers, and provide accurate results. User interaction should be straightforward, with clear instructions and a simple interface.\nrequirement pool:\n- Implement the GCD calculation function\n- Optimize the function for large integer inputs\n- Design a user-friendly interface for input\n- Provide detailed usage instructions\n- Ensure cross-platform compatibility\nWe will use the Euclidean algorithm to efficiently compute the greatest common divisor (GCD) of two integers. This algorithm is well-suited for handling large numbers and is implemented in Python's standard library, which ensures both accuracy and performance. We will provide a simple function interface for user input and output.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    'largest': Refers to the greatest positive integer that divides both a and b without leaving a remainder.\n\n# [degree adverb] \n    'greatest': Indicates the need to find the maximum integer that can divide both numbers without a remainder.\n\n# [code logic]\n    1. Implement the Euclidean algorithm:\n        - If b is 0, return a as the GCD.\n        - Otherwise, recursively call the function with b and a % b.\n    2. Return the result of the recursive call as the GCD.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of 0 and any non-zero number is the non-zero number itself.\n    \n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of 0 and 0 is undefined, but for practical purposes, it can be considered as 0.\n    \n    greatest_common_divisor(1, 1) = 1\n    Explanation: The GCD of two identical numbers is the number itself.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    def greatest_common_divisor(a: int, b: int) -> int:\n        if a == 0 and b == 0:\n            return 0\n        if b == 0:\n            return a\n        return greatest_common_divisor(b, a % b)\n    ```\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor using an efficient algorithm, such as the Euclidean algorithm. It should handle edge cases like zero inputs and negative numbers, and provide clear documentation for users.\nrequirement pool:\n- Implement the Euclidean algorithm for GCD\n- Handle edge cases like zero and negative inputs\n- Optimize for performance with large integers\n- Provide comprehensive documentation and examples\n- Ensure compatibility with different Python versions\nWe will implement the Euclidean algorithm for computing the greatest common divisor (GCD) as it is efficient and widely used. We will handle edge cases such as zero and negative inputs by defining clear rules: the GCD of any number and zero is the number itself, and the GCD should always be a non-negative integer. We will use Python's built-in capabilities to ensure compatibility across different versions and optimize for performance with large integers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) is the largest positive integer that divides two given integers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    'largest': Refers to the maximum value that divides both integers without a remainder.\n\n# [degree adverb] \n    'greatest': Indicates the highest value among all possible divisors of the two integers.\n\n# [code logic]\n    1. Implement the Euclidean algorithm:\n        - If b is 0, return a as the GCD.\n        - Otherwise, recursively call the function with parameters (b, a % b).\n    2. Handle edge cases:\n        - If either a or b is zero, return the non-zero number as the GCD.\n        - Ensure the GCD is always non-negative.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and zero is the number itself.\n    \n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of zero and zero is defined as zero.\n    \n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The GCD should be a non-negative integer, and the GCD of 25 and 15 is 5.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0:\n            return abs(b)\n        elif b == 0:\n            return abs(a)\n        (other code for Euclidean algorithm)\n", "requirement analysis:\nThe requirement is to implement a function that calculates the greatest common divisor (GCD) of two integers. The function should be efficient and easy to understand, with clear documentation and examples to aid user comprehension.\nrequirement pool:\n- Implement the GCD calculation function\n- Provide detailed documentation and examples\n- Optimize the function for performance\n- Include educational content on GCD\n- Develop a user interface for input and output\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and widely used for this purpose. We will utilize the math.gcd function from Python's standard library to ensure accuracy and performance. The function will be documented with examples to enhance user understanding.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) is the largest positive integer that divides two given integers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest positive integer that divides both a and b without leaving a remainder\n\n# [code logic]\n    1. Use the Euclidean algorithm to find the GCD of two integers.\n    2. Alternatively, use Python's built-in `math.gcd` function for efficient computation.\n    3. Return the result.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and 0 is the number itself, so the expected output is 5.\n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of 0 and 0 is undefined, but conventionally it is considered as 0.\n    greatest_common_divisor(1, 1) = 1\n    Explanation: The GCD of two identical numbers is the number itself, so the expected output is 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0:\n            return 0\n        elif a == 0:\n            return b\n        elif b == 0:\n            return a\n        (other code using math.gcd or Euclidean algorithm)\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor of two integers using a reliable algorithm. It should be easy to understand and integrate into other projects, with clear documentation and examples provided.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm.\n- Provide comprehensive test cases to validate the function.\n- Ensure the function handles edge cases, such as zero inputs.\n- Optimize the function for performance with large integers.\n- Include detailed documentation and usage examples.\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and widely used for this purpose. We will utilize Python's standard library function math.gcd for simplicity and reliability, ensuring accurate computation. The function will be documented with examples to enhance user understanding.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest possible divisor that can divide both integers without a remainder.\n\n# [code logic]\n    1. Use the Euclidean algorithm to find the GCD of two numbers:\n       - If b is 0, return a as the GCD.\n       - Otherwise, set a to b and b to a % b, and repeat the process.\n    2. Alternatively, use Python's built-in `math.gcd` function to compute the GCD directly.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of 0 and any non-zero number is the non-zero number itself.\n    \n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of 0 and 0 is conventionally defined as 0.\n\n    greatest_common_divisor(1, 1) = 1\n    Explanation: The GCD of two identical numbers is the number itself.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The Euclidean algorithm inherently handles these cases correctly.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor for any pair of integers, including edge cases such as zero or negative values. It should be optimized for performance, especially when dealing with large integers, and should be easy to integrate into existing projects.\nrequirement pool:\n- Implement the GCD algorithm using Euclidean method\n- Handle edge cases like zero and negative numbers\n- Optimize for performance with large integers\n- Provide comprehensive test cases\n- Document the function usage and examples\nWe will implement the GCD function using the Euclidean algorithm, which is efficient and widely used for computing the greatest common divisor. We will handle edge cases such as zero and negative numbers by ensuring the function can process these inputs correctly. For performance optimization, especially with large integers, we will utilize Python's built-in capabilities without additional dependencies, as Python's math.gcd is highly optimized for such operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both a and b without leaving a remainder\n\n# [code logic]\n    - Use the Euclidean algorithm to compute the GCD:\n      - If b is 0, return a as the GCD.\n      - Otherwise, recursively call the function with parameters (b, a % b) until b becomes 0.\n    - Handle edge cases such as zero and negative numbers by ensuring the function can process these inputs correctly.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and 0 is the number itself, so the expected output is 5.\n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of 0 and 0 is undefined, but conventionally it is considered as 0.\n    greatest_common_divisor(-25, -15) = 5\n    Explanation: The GCD is always positive, so even if both numbers are negative, the GCD is 5.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0:\n            return abs(b)\n        elif b == 0:\n            return abs(a)\n        return math.gcd(abs(a), abs(b))\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor using an efficient algorithm, such as the Euclidean method. It should handle edge cases, including zero and negative inputs, and provide clear documentation for ease of use.\nrequirement pool:\n- Implement the Euclidean algorithm for GCD calculation\n- Ensure the function handles edge cases like zero and negative numbers\n- Optimize the function for performance with large integers\n- Provide comprehensive documentation and examples\n- Include unit tests for various scenarios\nWe will implement the Euclidean algorithm for calculating the greatest common divisor (GCD) of two integers. This algorithm is efficient and widely used for GCD calculations. We will handle edge cases such as zero and negative numbers by ensuring the function can process these inputs correctly. The function will be documented with clear examples, and we will use Python's built-in capabilities to optimize performance for large integers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both a and b without leaving a remainder\n\n# [code logic]\n    1. Implement the Euclidean algorithm:\n        - If b is 0, return a as the GCD.\n        - Otherwise, recursively call the function with parameters (b, a % b).\n    2. Handle edge cases such as zero and negative numbers:\n        - Ensure the function can process these inputs correctly by taking the absolute value of a and b.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of 0 and any non-zero integer is the non-zero integer itself.\n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of 0 and 0 is undefined, but conventionally considered as 0.\n    greatest_common_divisor(-25, -15) = 5\n    Explanation: The GCD should be calculated using the absolute values of the integers.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def greatest_common_divisor(a: int, b: int) -> int:\n            a, b = abs(a), abs(b)\n            if b == 0:\n                return a\n            return greatest_common_divisor(b, a % b)\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor (GCD) of two integers. The function should handle both positive and negative integers and return the correct GCD. It should also be optimized for performance to handle large integers efficiently.\nrequirement pool:\n- Implement the GCD calculation function\n- Ensure the function handles edge cases like zero or negative numbers\n- Optimize the function for performance with large inputs\n- Develop a user-friendly interface for input\n- Provide detailed error messages for invalid inputs\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for handling both small and large integers. The function will be designed to handle edge cases such as zero and negative numbers. We will use Python's built-in capabilities to ensure performance and simplicity.\nPlease read and understand the following inteperation before coding\n## Answer 3:\n\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both a and b without leaving a remainder\n\n# [code logic]\n    The Euclidean algorithm can be used to find the GCD:\n    1. If b is 0, return a as the GCD.\n    2. Otherwise, recursively call the function with parameters (b, a % b) until b becomes 0.\n    3. The final value of a when b is 0 is the GCD.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and 0 is the number itself.\n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of 0 and 0 is undefined, but conventionally it is considered as 0.\n    greatest_common_divisor(-25, -15) = 5\n    Explanation: The GCD is always positive, even if both numbers are negative.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0:\n            return abs(b)\n        elif b == 0:\n            return abs(a)\n        (other code using Euclidean algorithm)\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [116, 116, 116, 116, 116, 116, 116, 116, 116, 116], "completion": "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Args:\n        a (int): First integer\n        b (int): Second integer\n    \n    Returns:\n        int: The greatest common divisor of a and b\n    \"\"\"\n    # Handle edge cases where one or both numbers are zero\n    if a == 0:\n        return abs(b)\n    elif b == 0:\n        return abs(a)\n    \n    # Ensure both numbers are positive for the calculation\n    a, b = abs(a), abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n", "passed": true, "pass": true, "pass_num": 10, "round": 965, "mutate_method": "condense_two2one", "parent_index": 268}
