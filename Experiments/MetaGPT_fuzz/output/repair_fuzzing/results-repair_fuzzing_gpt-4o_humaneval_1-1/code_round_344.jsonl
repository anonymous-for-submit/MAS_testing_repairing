{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Return the median of items within the list l.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "entry_point": "median", "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "test": ["def check(median):\n\tassert median([-6, 3, 8, 1002, 14, 16]) == 11.0", "def check(median):\n\tassert median([2, 10]) == 6.0", "def check(median):\n\tassert median([12, 3, 5, 11, 7, 4, 5]) == 5", "def check(median):\n\tassert median([-15, 4, 5, 1001, 15, 23]) == 10.0", "def check(median):\n\tassert median([-15, 3, 4, 1000, 13, 23]) == 8.5", "def check(median):\n\tassert median([-5, 9, 2, 996, 15, 22]) == 12.0", "def check(median):\n\tassert median([6, 2, 1, 8, 1]) == 2", "def check(median):\n\tassert median([7, 7]) == 7.0", "def check(median):\n\tassert median([4, 2, 2, 12, 10, 4, 10]) == 4", "def check(median):\n\tassert median([-12, 8, 9, 997, 14, 17]) == 11.5", "def check(median):\n\tassert median([1, 1, 3, 1, 10]) == 1", "def check(median):\n\tassert median([-8, 4, 8, 997, 15, 20]) == 11.5", "def check(median):\n\tassert median([8]) == 8", "def check(median):\n\tassert median([5]) == 5", "def check(median):\n\tassert median([8, 3, 2, 9, 6, 5, 2]) == 5", "def check(median):\n\tassert median([-15, 8, 4, 997, 7, 19]) == 7.5", "def check(median):\n\tassert median([-7, 4, 10, 998, 10, 22]) == 10.0", "def check(median):\n\tassert median([10]) == 10", "def check(median):\n\tassert median([5, 4]) == 4.5", "def check(median):\n\tassert median([3, 6, 6, 2, 6]) == 6", "def check(median):\n\tassert median([1, 8]) == 4.5", "def check(median):\n\tassert median([12, 1, 6, 11, 13, 6, 6]) == 6", "def check(median):\n\tassert median([8, 5, 7, 6, 3]) == 6", "def check(median):\n\tassert median([6, 2, 7, 8, 8, 5, 4]) == 6", "def check(median):\n\tassert median([7, 4]) == 5.5", "def check(median):\n\tassert median([-7, 6, 6, 996, 6, 15]) == 6.0", "def check(median):\n\tassert median([-15, 8, 1, 1004, 6, 19]) == 7.0", "def check(median):\n\tassert median([5, 5, 5, 7, 3]) == 5", "def check(median):\n\tassert median([6, 6, 2, 7, 6]) == 6", "def check(median):\n\tassert median([-10, 4, 6, 1000, 10, 20]) == 8.0", "def check(median):\n\tassert median([4]) == 4", "def check(median):\n\tassert median([11, 2]) == 6.5", "def check(median):\n\tassert median([1, 3, 6, 4, 10]) == 4", "def check(median):\n\tassert median([-5, 9, 10, 1000, 12, 18]) == 11.0", "def check(median):\n\tassert median([10, 6, 4, 8, 4, 3, 11]) == 6", "def check(median):\n\tassert median([6, 5]) == 5.5", "def check(median):\n\tassert median([6, 6, 6, 9, 7, 4, 10]) == 6", "def check(median):\n\tassert median([6, 5, 5, 7, 10, 6, 8]) == 6", "def check(median):\n\tassert median([7, 4, 7, 1, 7]) == 7", "def check(median):\n\tassert median([-6, 9, 6, 997, 14, 25]) == 11.5", "def check(median):\n\tassert median([7, 8]) == 7.5", "def check(median):\n\tassert median([3, 1, 2, 4, 5]) == 3", "def check(median):\n\tassert median([-11, 3, 10, 1005, 10, 22]) == 10.0", "def check(median):\n\tassert median([6, 9]) == 7.5", "def check(median):\n\tassert median([11, 3, 6, 13, 6, 4, 9]) == 6", "def check(median):\n\tassert median([-10, 3, 3, 997, 15, 22]) == 9.0", "def check(median):\n\tassert median([-8, 5, 4, 1001, 14, 22]) == 9.5", "def check(median):\n\tassert median([11, 3, 1, 8, 5, 1, 8]) == 5", "def check(median):\n\tassert median([-15, 3, 2, 1002, 8, 22]) == 5.5", "def check(median):\n\tassert median([8, 5, 3, 2, 10]) == 5", "def check(median):\n\tassert median([11, 1, 3, 8, 13, 2, 7]) == 7", "def check(median):\n\tassert median([3, 6, 1, 4, 3]) == 3", "def check(median):\n\tassert median([10, 10]) == 10.0", "def check(median):\n\tassert median([1]) == 1", "def check(median):\n\tassert median([11, 6, 7, 6, 6, 1, 12]) == 6", "def check(median):\n\tassert median([1, 5, 6, 6, 3]) == 5", "def check(median):\n\tassert median([2, 6, 6, 7, 3]) == 6", "def check(median):\n\tassert median([3, 10]) == 6.5", "def check(median):\n\tassert median([-11, 5, 11, 1002, 10, 20]) == 10.5", "def check(median):\n\tassert median([6, 6, 6, 7, 10]) == 6", "def check(median):\n\tassert median([3, 5, 7, 4, 8]) == 5", "def check(median):\n\tassert median([13, 5, 6, 7, 14, 7, 9]) == 7", "def check(median):\n\tassert median([6, 4, 4, 11, 11, 2, 2]) == 4", "def check(median):\n\tassert median([12, 2, 2, 11, 11, 4, 2]) == 4", "def check(median):\n\tassert median([3, 9]) == 6.0", "def check(median):\n\tassert median([5, 6, 6, 7, 5, 2, 9]) == 6", "def check(median):\n\tassert median([4, 6]) == 5.0", "def check(median):\n\tassert median([1, 2]) == 1.5", "def check(median):\n\tassert median([3, 4, 5, 9, 7, 2, 3]) == 4", "def check(median):\n\tassert median([10, 4, 7, 11, 11, 3, 3]) == 7", "def check(median):\n\tassert median([6, 10]) == 8.0", "def check(median):\n\tassert median([-6, 6, 9, 1005, 8, 25]) == 8.5", "def check(median):\n\tassert median([8, 5, 5, 7, 10]) == 7", "def check(median):\n\tassert median([-13, 8, 6, 998, 13, 19]) == 10.5", "def check(median):\n\tassert median([7, 2, 7, 6, 6]) == 6", "def check(median):\n\tassert median([9]) == 9", "def check(median):\n\tassert median([7]) == 7", "def check(median):\n\tassert median([8, 1, 3, 9, 3]) == 3", "def check(median):\n\tassert median([8, 1, 3, 9, 9, 2, 7]) == 7", "def check(median):\n\tassert median([-9, 4, 2, 1002, 6, 23]) == 5.0", "def check(median):\n\tassert median([8, 2, 7, 6, 7]) == 7", "def check(median):\n\tassert median([1, 6, 7, 5, 4]) == 5", "def check(median):\n\tassert median([2, 2]) == 2.0", "def check(median):\n\tassert median([6]) == 6", "def check(median):\n\tassert median([-7, 7, 8, 1000, 13, 25]) == 10.5", "def check(median):\n\tassert median([-5, 1, 10, 1003, 10, 25]) == 10.0", "def check(median):\n\tassert median([9, 2]) == 5.5", "def check(median):\n\tassert median([3]) == 3", "def check(median):\n\tassert median([6, 1, 5, 7, 11, 6, 5]) == 6", "def check(median):\n\tassert median([7, 3, 6, 5, 2]) == 5", "def check(median):\n\tassert median([-11, 3, 3, 998, 15, 15]) == 9.0", "def check(median):\n\tassert median([5, 5]) == 5.0", "def check(median):\n\tassert median([9, 5, 2, 6, 13, 7, 2]) == 6", "def check(median):\n\tassert median([8, 6, 3, 5, 12, 5, 5]) == 5", "def check(median):\n\tassert median([11, 3]) == 7.0", "def check(median):\n\tassert median([3, 6, 5, 11, 5, 4, 6]) == 5", "def check(median):\n\tassert median([5, 1]) == 3.0", "def check(median):\n\tassert median([8, 8]) == 8.0", "def check(median):\n\tassert median([7, 2, 7, 1, 4]) == 4", "def check(median):\n\tassert median([9, 9]) == 9.0", "def check(median):\n\tassert median([3, 6, 2, 6, 9]) == 6", "def check(median):\n\tassert median([-11, 1, 3, 1004, 12, 17]) == 7.5", "def check(median):\n\tassert median([5, 2, 3, 9, 5, 7, 7]) == 5", "def check(median):\n\tassert median([6, 2, 4, 2, 6]) == 4", "def check(median):\n\tassert median([3, 1, 7, 4, 3]) == 3", "def check(median):\n\tassert median([5, 2, 2, 5, 6, 1, 3]) == 3", "def check(median):\n\tassert median([-15, 8, 4, 1000, 6, 16]) == 7.0", "def check(median):\n\tassert median([1, 6]) == 3.5", "def check(median):\n\tassert median([3, 2, 7, 8, 11, 5, 12]) == 7", "def check(median):\n\tassert median([8, 3, 5, 9, 10]) == 8", "def check(median):\n\tassert median([2, 9]) == 5.5"], "test_case_list": ["assert median([-6, 3, 8, 1002, 14, 16]) == 11.0", "assert median([2, 10]) == 6.0", "assert median([12, 3, 5, 11, 7, 4, 5]) == 5", "assert median([-15, 4, 5, 1001, 15, 23]) == 10.0", "assert median([-15, 3, 4, 1000, 13, 23]) == 8.5", "assert median([-5, 9, 2, 996, 15, 22]) == 12.0", "assert median([6, 2, 1, 8, 1]) == 2", "assert median([7, 7]) == 7.0", "assert median([4, 2, 2, 12, 10, 4, 10]) == 4", "assert median([-12, 8, 9, 997, 14, 17]) == 11.5", "assert median([1, 1, 3, 1, 10]) == 1", "assert median([-8, 4, 8, 997, 15, 20]) == 11.5", "assert median([8]) == 8", "assert median([5]) == 5", "assert median([8, 3, 2, 9, 6, 5, 2]) == 5", "assert median([-15, 8, 4, 997, 7, 19]) == 7.5", "assert median([-7, 4, 10, 998, 10, 22]) == 10.0", "assert median([10]) == 10", "assert median([5, 4]) == 4.5", "assert median([3, 6, 6, 2, 6]) == 6", "assert median([1, 8]) == 4.5", "assert median([12, 1, 6, 11, 13, 6, 6]) == 6", "assert median([8, 5, 7, 6, 3]) == 6", "assert median([6, 2, 7, 8, 8, 5, 4]) == 6", "assert median([7, 4]) == 5.5", "assert median([-7, 6, 6, 996, 6, 15]) == 6.0", "assert median([-15, 8, 1, 1004, 6, 19]) == 7.0", "assert median([5, 5, 5, 7, 3]) == 5", "assert median([6, 6, 2, 7, 6]) == 6", "assert median([-10, 4, 6, 1000, 10, 20]) == 8.0", "assert median([4]) == 4", "assert median([11, 2]) == 6.5", "assert median([1, 3, 6, 4, 10]) == 4", "assert median([-5, 9, 10, 1000, 12, 18]) == 11.0", "assert median([10, 6, 4, 8, 4, 3, 11]) == 6", "assert median([6, 5]) == 5.5", "assert median([6, 6, 6, 9, 7, 4, 10]) == 6", "assert median([6, 5, 5, 7, 10, 6, 8]) == 6", "assert median([7, 4, 7, 1, 7]) == 7", "assert median([-6, 9, 6, 997, 14, 25]) == 11.5", "assert median([7, 8]) == 7.5", "assert median([3, 1, 2, 4, 5]) == 3", "assert median([-11, 3, 10, 1005, 10, 22]) == 10.0", "assert median([6, 9]) == 7.5", "assert median([11, 3, 6, 13, 6, 4, 9]) == 6", "assert median([-10, 3, 3, 997, 15, 22]) == 9.0", "assert median([-8, 5, 4, 1001, 14, 22]) == 9.5", "assert median([11, 3, 1, 8, 5, 1, 8]) == 5", "assert median([-15, 3, 2, 1002, 8, 22]) == 5.5", "assert median([8, 5, 3, 2, 10]) == 5", "assert median([11, 1, 3, 8, 13, 2, 7]) == 7", "assert median([3, 6, 1, 4, 3]) == 3", "assert median([10, 10]) == 10.0", "assert median([1]) == 1", "assert median([11, 6, 7, 6, 6, 1, 12]) == 6", "assert median([1, 5, 6, 6, 3]) == 5", "assert median([2, 6, 6, 7, 3]) == 6", "assert median([3, 10]) == 6.5", "assert median([-11, 5, 11, 1002, 10, 20]) == 10.5", "assert median([6, 6, 6, 7, 10]) == 6", "assert median([3, 5, 7, 4, 8]) == 5", "assert median([13, 5, 6, 7, 14, 7, 9]) == 7", "assert median([6, 4, 4, 11, 11, 2, 2]) == 4", "assert median([12, 2, 2, 11, 11, 4, 2]) == 4", "assert median([3, 9]) == 6.0", "assert median([5, 6, 6, 7, 5, 2, 9]) == 6", "assert median([4, 6]) == 5.0", "assert median([1, 2]) == 1.5", "assert median([3, 4, 5, 9, 7, 2, 3]) == 4", "assert median([10, 4, 7, 11, 11, 3, 3]) == 7", "assert median([6, 10]) == 8.0", "assert median([-6, 6, 9, 1005, 8, 25]) == 8.5", "assert median([8, 5, 5, 7, 10]) == 7", "assert median([-13, 8, 6, 998, 13, 19]) == 10.5", "assert median([7, 2, 7, 6, 6]) == 6", "assert median([9]) == 9", "assert median([7]) == 7", "assert median([8, 1, 3, 9, 3]) == 3", "assert median([8, 1, 3, 9, 9, 2, 7]) == 7", "assert median([-9, 4, 2, 1002, 6, 23]) == 5.0", "assert median([8, 2, 7, 6, 7]) == 7", "assert median([1, 6, 7, 5, 4]) == 5", "assert median([2, 2]) == 2.0", "assert median([6]) == 6", "assert median([-7, 7, 8, 1000, 13, 25]) == 10.5", "assert median([-5, 1, 10, 1003, 10, 25]) == 10.0", "assert median([9, 2]) == 5.5", "assert median([3]) == 3", "assert median([6, 1, 5, 7, 11, 6, 5]) == 6", "assert median([7, 3, 6, 5, 2]) == 5", "assert median([-11, 3, 3, 998, 15, 15]) == 9.0", "assert median([5, 5]) == 5.0", "assert median([9, 5, 2, 6, 13, 7, 2]) == 6", "assert median([8, 6, 3, 5, 12, 5, 5]) == 5", "assert median([11, 3]) == 7.0", "assert median([3, 6, 5, 11, 5, 4, 6]) == 5", "assert median([5, 1]) == 3.0", "assert median([8, 8]) == 8.0", "assert median([7, 2, 7, 1, 4]) == 4", "assert median([9, 9]) == 9.0", "assert median([3, 6, 2, 6, 9]) == 6", "assert median([-11, 1, 3, 1004, 12, 17]) == 7.5", "assert median([5, 2, 3, 9, 5, 7, 7]) == 5", "assert median([6, 2, 4, 2, 6]) == 4", "assert median([3, 1, 7, 4, 3]) == 3", "assert median([5, 2, 2, 5, 6, 1, 3]) == 3", "assert median([-15, 8, 4, 1000, 6, 16]) == 7.0", "assert median([1, 6]) == 3.5", "assert median([3, 2, 7, 8, 11, 5, 12]) == 7", "assert median([8, 3, 5, 9, 10]) == 8", "assert median([2, 9]) == 5.5"], "nl": "Return median of elements in the list l.\n    ", "func": "def median(l: list):", "examples": ">>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    ", "repair_prompt": ["def median(l: list):\t\n'''Return the median of items within the list l.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "def median(l: list):\t\n'''Return the median of items within the list l. The median is the middle value of a sorted list of numbers when the list size is odd. It is the average of the two central numbers when the list size is even.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "def median(l: list):\t\n'''Return the median of items within the list l. If the number of elements is odd, return the middle element; if even, return the average of the two middle elements.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''"], "completions": ["from typing import List\n## main.py\nimport numpy as np\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers, filtering out non-numeric values and handling edge cases like empty lists.\n    \n    Args:\n        l (list): List of numbers.\n        \n    Returns:\n        float: Median value or None if the list is empty.\n    \"\"\"\n    # Filter out non-numeric values\n    numeric_values = [x for x in l if isinstance(x, (int, float))]\n    \n    # Handle edge case for empty list\n    if not numeric_values:\n        return None\n    \n    # Sort the list\n    numeric_values.sort()\n    \n    # Calculate the median\n    n = len(numeric_values)\n    if n % 2 == 1:\n        # Odd number of elements, return the middle element\n        return numeric_values[n // 2]\n    else:\n        # Even number of elements, return the average of the two middle elements\n        return (numeric_values[n // 2 - 1] + numeric_values[n // 2]) / 2\n", "from typing import List\n## main.py\n\nimport statistics\n\ndef median(l: list) -> float:\n    '''\n    Calculate the median of a list of numbers.\n    \n    Args:\n        l: List of numbers (integers or floats).\n        \n    Returns:\n        The median value as a float.\n        \n    Raises:\n        ValueError: If the list contains non-numeric data or is empty.\n    '''\n    # Validate input list\n    if not l:\n        raise ValueError(\"List is empty\")\n    \n    # Check for non-numeric data\n    if not all(isinstance(item, (int, float)) for item in l):\n        raise ValueError(\"List contains non-numeric data\")\n    \n    # Calculate median using statistics module\n    return statistics.median(l)\n", "from typing import List\n## main.py\n\nimport statistics\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n    \n    Args:\n        l: List of numbers (integers or floats)\n        \n    Returns:\n        Median value as a float\n        \n    Raises:\n        ValueError: If the list is empty or contains non-numeric values\n    \"\"\"\n    if not l:\n        raise ValueError(\"List is empty\")\n    \n    # Check for non-numeric values\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"List contains non-numeric values\")\n    \n    # Sort the list to arrange the numbers in ascending order\n    sorted_list = sorted(l)\n    \n    # Calculate and return the median using the statistics module\n    return statistics.median(sorted_list)\n", "from typing import List\n## main.py\n\nimport numpy as np\n\ndef median(l: list) -> float:\n    '''\n    Calculate the median of a list of numbers.\n    \n    Args:\n        l: List of numbers\n    \n    Returns:\n        Median value\n    \n    Raises:\n        ValueError: If the list contains non-numeric values or is empty\n    '''\n    if not l:\n        raise ValueError(\"The list is empty.\")\n    \n    # Validate that all elements are numeric\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"The list contains non-numeric values.\")\n    \n    # Sort the list\n    sorted_list = np.sort(l)\n    \n    # Calculate the median\n    n = len(sorted_list)\n    mid = n // 2\n    \n    if n % 2 == 0:\n        # If even, return the average of the two middle numbers\n        median_value = (sorted_list[mid - 1] + sorted_list[mid]) / 2.0\n    else:\n        # If odd, return the middle number\n        median_value = sorted_list[mid]\n    \n    return median_value\n", "from typing import List\n## main.py\n\nimport statistics\nfrom typing import List\n\ndef median(l: List[float]) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Args:\n        l: List of numbers (integers or floats).\n\n    Returns:\n        Median value as a float.\n\n    Raises:\n        ValueError: If the list is empty or contains non-numeric values.\n    \"\"\"\n    # Check if the list is empty\n    if not l:\n        raise ValueError(\"List must contain at least one number\")\n\n    # Validate that all elements in the list are numeric\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"List must contain only numeric values\")\n\n    # Sort the list\n    sorted_list = sorted(l)\n\n    # Calculate and return the median\n    return statistics.median(sorted_list)\n", "from typing import List\n## main.py\nimport statistics\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n    \n    Args:\n        l: List of numbers (integers or floats)\n        \n    Returns:\n        Median value as a float\n        \n    Raises:\n        ValueError: If the list is empty or contains non-numeric values\n    \"\"\"\n    # Check for empty list\n    if not l:\n        raise ValueError(\"List must contain at least one number\")\n    \n    # Validate all elements are numeric\n    for element in l:\n        if not isinstance(element, (int, float)):\n            raise ValueError(\"List must contain only numeric values\")\n    \n    # Calculate and return the median using the statistics module\n    return statistics.median(l)\n", "from typing import List\n## main.py\nimport statistics\n\ndef median(l: list) -> float:\n    '''\n    Calculate the median of a list of numbers.\n    \n    Args:\n        l: List of numbers\n    \n    Returns:\n        Median value\n    \n    Raises:\n        ValueError: If the list contains non-numeric data or is empty\n    '''\n    # Validate input: Check if the list is empty\n    if not l:\n        raise ValueError(\"List must contain at least one number\")\n    \n    # Validate input: Check for non-numeric data\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"List must contain only numeric data\")\n    \n    # Sort the list to arrange elements in ascending order\n    sorted_list = sorted(l)\n    \n    # Calculate and return the median using the statistics module\n    return statistics.median(sorted_list)\n", "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Args:\n        l (list): List of numeric values.\n\n    Returns:\n        float: Median value as a float.\n\n    Raises:\n        ValueError: If the list contains non-numeric data or is empty.\n    \"\"\"\n    # Check if the list is empty\n    if not l:\n        raise ValueError(\"List must contain at least one numeric element\")\n\n    # Validate that all elements are numeric\n    for element in l:\n        if not isinstance(element, (int, float)):\n            raise ValueError(\"List must contain only numeric elements\")\n\n    # Sort the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n\n    # Calculate the median\n    if n % 2 == 1:\n        # If the number of elements is odd, return the middle element\n        return float(sorted_list[n // 2])\n    else:\n        # If the number of elements is even, return the average of the two middle elements\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2.0\n\n# Example usage:\n# print(median([1, 3, 2]))  # Output: 2.0\n# print(median([1, 2, 3, 4]))  # Output: 2.5\n# print(median([1]))  # Output: 1.0\n# print(median([]))  # Raises ValueError\n# print(median([1, 'a', 3]))  # Raises ValueError\n", "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Args:\n        l (list): A list of numeric values.\n\n    Returns:\n        float: The median value, or None if the list is empty.\n\n    Raises:\n        ValueError: If the list contains non-numeric values.\n\n    Examples:\n        >>> median([3, 1, 2, 4, 5])\n        3\n        >>> median([-10, 4, 6, 1000, 10, 20])\n        15.0\n    \"\"\"\n    if not l:\n        return None\n\n    # Validate that all elements are numeric\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"List contains non-numeric values.\")\n\n    l.sort()\n    n = len(l)\n\n    if n % 2 == 1:\n        # Odd number of elements, return the middle element\n        return l[n // 2]\n    else:\n        # Even number of elements, return the average of the two middle elements\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n", "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Parameters:\n    l (list): A list of numeric values.\n\n    Returns:\n    float: The median value of the list. Returns None if the list is empty.\n\n    Examples:\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    >>> median([])\n    None\n    \"\"\"\n    # Check if the list is empty\n    if not l:\n        return None\n\n    # Sort the list\n    sorted_list = sorted(l)\n\n    # Determine the length of the list\n    n = len(sorted_list)\n\n    # Calculate the median\n    if n % 2 == 1:\n        # If the length is odd, return the middle element\n        return float(sorted_list[n // 2])\n    else:\n        # If the length is even, return the average of the two middle elements\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2.0\n\n# Example usage\nif __name__ == \"__main__\":\n    print(median([3, 1, 2, 4, 5]))  # Output: 3\n    print(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0\n    print(median([]))  # Output: None\n"], "plans": ["requirement analysis:\nThe function should accurately compute the median for both odd and even-length lists. It should handle edge cases such as empty lists or lists with non-numeric values gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the median calculation function\n- Optimize the function for performance with large datasets\n- Include error handling for invalid inputs\n- Provide detailed documentation and examples\n- Create unit tests to ensure function reliability\nWe will implement a simple function to calculate the median using Python's built-in capabilities. For performance optimization, especially with large datasets, we will utilize NumPy, which is highly efficient for numerical operations. The function will handle non-numeric values by ignoring them, ensuring robustness and reliability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is the middle value in a list of numbers. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Sort the list to arrange the numbers in ascending order.\n    2. Determine the length of the list.\n    3. If the length is odd, return the middle element.\n    4. If the length is even, return the average of the two middle elements.\n\n# [edge case] \n    median([1]) = 1\n    Explanation: With only one element, that element is the median.\n    \n    median([1, 2]) = 1.5\n    Explanation: The list has two elements, so the median is the average of 1 and 2, which is 1.5.\n    \n    median([]) = None\n    Explanation: An empty list has no median, so the function should return None or handle this case appropriately.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not l:\n            return None\n        l.sort()\n        n = len(l)\n        if n % 2 == 1:\n            return l[n // 2]\n        else:\n            return (l[n // 2 - 1] + l[n // 2]) / 2\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even-length lists. It should handle edge cases such as empty lists or lists with non-numeric data gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the median calculation for odd and even-length lists.\n- Optimize the function for performance with large datasets.\n- Include error handling for non-numeric data.\n- Provide detailed documentation and examples.\n- Ensure compatibility with Python's built-in data structures.\nWe will implement a function to calculate the median of a list using Python's built-in capabilities. The function will handle both odd and even-length lists and will include error handling for non-numeric data by raising a ValueError. We will use the 'statistics' module for simplicity and performance optimization, as it is part of Python's standard library and is efficient for large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is the middle value in a list of numbers. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Sort the list to arrange the numbers in ascending order.\n    2. Check if the length of the list is odd or even.\n    3. If odd, return the middle element.\n    4. If even, return the average of the two middle elements.\n\n# [edge case] \n    median([1]) = 1\n    Explanation: The list contains only one element, so the median is that element itself.\n    \n    median([1, 2]) = 1.5\n    Explanation: The list has two elements, so the median is the average of these two numbers.\n    \n    median([]) = ValueError\n    Explanation: An empty list does not have a median, so a ValueError should be raised.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not l:\n            raise ValueError(\"List is empty\")\n        (other code for calculating median)\n", "requirement analysis:\nThe function should accurately compute the median of a list of numbers, handling both odd and even-length lists. It should be efficient and easy to integrate into larger systems.\nrequirement pool:\n- Implement the median calculation function\n- Optimize the function for performance with large datasets\n- Ensure the function handles edge cases, such as empty lists\n- Provide comprehensive documentation and examples\n- Include unit tests to verify function accuracy\nWe will implement a function to calculate the median of a list using Python's built-in capabilities. The function will handle both odd and even-length lists and will include error handling for empty lists. We will use the 'statistics' module from Python's standard library, which provides a simple and efficient way to calculate the median. This approach ensures ease of use and integration into larger systems.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is the middle value in a list of numbers. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty; if so, raise an error or return a specific value indicating invalid input.\n    2. Sort the list to arrange the numbers in ascending order.\n    3. Determine the length of the list.\n    4. If the length is odd, return the middle element.\n    5. If the length is even, calculate and return the average of the two middle elements.\n\n# [edge case] \n    median([]) = Error or specific invalid value\n    Explanation: An empty list does not have a median, so the function should handle this case appropriately.\n    \n    median([1]) = 1\n    Explanation: A single-element list has its only element as the median.\n    \n    median([1, 2]) = 1.5\n    Explanation: For a two-element list, the median is the average of both elements.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not l:\n            raise ValueError(\"List is empty\")\n        (other code)\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even-sized lists. It should handle edge cases such as empty lists or lists with non-numeric values gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the median calculation function\n- Optimize the function for performance with large datasets\n- Include error handling for invalid inputs\n- Provide detailed documentation and examples\n- Create unit tests to ensure function reliability\nWe will implement a function to calculate the median using Python's built-in capabilities. For performance optimization, especially with large datasets, we will utilize the NumPy library, which is efficient for numerical operations. The function will handle non-numeric values by raising an error, ensuring data integrity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is a statistical measure that represents the middle value of a sorted list of numbers. If the list size is odd, the median is the middle number. If the list size is even, the median is the average of the two central numbers.\n\n# [phrase showing quantity relationship]\n    'middle value': Refers to the central number in a sorted list when the list size is odd.\n    'average of the two central numbers': Refers to the mean of the two middle numbers in a sorted list when the list size is even.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Sort the list `l`.\n2. Determine the length of the list.\n3. If the length is odd, return the middle element.\n4. If the length is even, calculate and return the average of the two middle elements.\n\n# [edge case]\n    median([1]) = 1\n    Explanation: The list contains only one element, so it is both the middle and only value.\n    \n    median([1, 2]) = 1.5\n    Explanation: The list has two elements, so the median is the average of 1 and 2, which is 1.5.\n    \n    median([3, 3, 3]) = 3\n    Explanation: All elements are the same, so the median is that repeated value.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and then checking for odd or even length will naturally handle these cases.\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even-sized lists. It should handle edge cases such as empty lists or lists with non-numeric values gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the median calculation function\n- Optimize the function for performance with large datasets\n- Include error handling for invalid inputs\n- Provide comprehensive documentation and examples\n- Ensure compatibility with different Python versions\nWe will implement a function to calculate the median of a list of numbers using Python's built-in capabilities. The function will sort the list and then determine the median based on the list's length. We will use the 'statistics' module for simplicity and reliability, as it is part of Python's standard library and provides a straightforward median calculation. The function will include error handling to manage non-numeric values by raising an appropriate error. This approach ensures compatibility with different Python versions and optimizes performance for large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is a statistical measure representing the middle value in a sorted list of numbers. If the list size is odd, the median is the central number. If the list size is even, the median is the average of the two central numbers.\n\n# [phrase showing quantity relationship]\n    'middle value': Refers to the central number in a sorted list when the list size is odd.\n    'average of the two central numbers': Refers to the calculation needed when the list size is even, which involves summing the two central numbers and dividing by two.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Sort the list of numbers.\n    2. Determine the length of the list.\n    3. If the length is odd, return the middle element.\n    4. If the length is even, calculate the average of the two middle elements and return it.\n\n# [edge case]\n    median([1]) = 1\n    Explanation: With only one element, it is both the first and middle element, so the median is 1.\n    \n    median([1, 2]) = 1.5\n    Explanation: The list has two elements, so the median is the average of 1 and 2, which is 1.5.\n    \n    median([]) = Error\n    Explanation: An empty list has no elements to calculate a median, so an error should be raised.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not l:\n            raise ValueError(\"List must contain at least one number\")\n        (other code for calculating median)\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even-sized lists. It should handle edge cases such as empty lists or lists with non-numeric values gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the median calculation function\n- Optimize the function for performance with large datasets\n- Include error handling for invalid inputs\n- Provide comprehensive documentation and examples\n- Create unit tests to ensure function reliability\nWe will implement a function to calculate the median of a list using Python's built-in capabilities. The function will sort the list and then determine the median based on the list's length. We will use the 'statistics' module for simplicity and reliability, which is optimized for performance and handles edge cases like empty lists. For non-numeric values, the function will raise a ValueError to ensure data integrity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is a measure of central tendency that represents the middle value in a sorted list of numbers. If the list size is odd, the median is the middle number. If the list size is even, the median is the average of the two central numbers.\n\n# [phrase showing quantity relationship]\n    'middle value': Refers to the central number in a sorted list when the list size is odd.\n    'average of the two central numbers': Refers to the calculation needed when the list size is even, which involves summing the two middle numbers and dividing by two.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Sort the list.\n    2. Determine the length of the list.\n    3. If the length is odd, return the middle element.\n    4. If the length is even, calculate and return the average of the two middle elements.\n\n# [edge case]\n    median([1]) = 1\n    Explanation: With only one element, it is both the median and the only value.\n    \n    median([1, 2]) = 1.5\n    Explanation: The list has two elements, so the median is the average of 1 and 2.\n    \n    median([]) = ValueError\n    Explanation: An empty list does not have a median, so a ValueError should be raised.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not l:\n            raise ValueError(\"List must contain at least one number\")\n        (other code for sorting and calculating median)\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even-length lists. It should handle edge cases, such as empty lists or lists with non-numeric data, gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the median calculation function\n- Optimize the function for performance with large datasets\n- Include error handling for invalid inputs\n- Provide comprehensive documentation and examples\n- Ensure compatibility with Python's standard library\nWe will implement a function to calculate the median using Python's built-in capabilities, ensuring it handles both odd and even-length lists correctly. We will use the 'statistics' module for simplicity and performance optimization. The function will include error handling for non-numeric data, raising an appropriate error message.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is the value separating the higher half from the lower half of a data sample. For a list with an odd number of elements, it is the middle element when sorted. For a list with an even number of elements, it is the average of the two middle elements when sorted.\n\n# [phrase showing quantity relationship]\n    'average of the two middle elements': This means that for an even number of elements, you need to sum the two middle elements and divide by two to get the median.\n\n# [degree adverb] \n    'middle': Refers to the central element(s) in a sorted list, which is crucial for determining the median.\n\n# [code logic]\n    1. Sort the list to arrange elements in ascending order.\n    2. Determine the length of the list.\n    3. If the length is odd, return the middle element.\n    4. If the length is even, calculate the average of the two middle elements and return it.\n\n# [edge case] \n    median([1]) = 1\n    Explanation: With only one element, it is both the first and middle element, so the median is 1.\n    \n    median([1, 2]) = 1.5\n    Explanation: With two elements, both are considered middle elements, so their average (1+2)/2 = 1.5 is returned.\n    \n    median([]) = Error\n    Explanation: An empty list has no elements to determine a median, so an error should be raised.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not l:\n            raise ValueError(\"List must contain at least one number\")\n        (other code)\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even-length lists. It should handle edge cases such as empty lists or lists with non-numeric data gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the median calculation function.\n- Optimize the function for performance with large datasets.\n- Include error handling for non-numeric data.\n- Provide detailed documentation and examples.\n- Create unit tests to ensure function reliability.\nWe will implement a function to calculate the median of a list using Python's standard library. The function will sort the list and then determine the median based on the number of elements. For performance optimization, we will use the built-in sorted function, which is efficient for large datasets. We will handle non-numeric data by raising a ValueError, ensuring the function only processes numeric lists. Detailed documentation and examples will be provided, along with unit tests to ensure reliability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is a measure of central tendency that represents the middle value in a sorted list of numbers. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements.\n\n# [phrase showing quantity relationship]\n    'average of the two middle elements': This means that when the list has an even number of elements, you need to calculate the average (sum divided by two) of the two middle elements to find the median.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Sort the list to arrange the elements in ascending order.\n    2. Determine the number of elements in the list.\n    3. If the number of elements is odd, return the middle element.\n    4. If the number of elements is even, calculate and return the average of the two middle elements.\n\n# [edge case]\n    median([1]) = 1\n    Explanation: The list contains only one element, so the median is that element itself.\n    \n    median([1, 2]) = 1.5\n    Explanation: The list has two elements, so the median is the average of these two numbers: (1 + 2) / 2 = 1.5.\n    \n    median([]) = ValueError\n    Explanation: An empty list does not have a median, so a ValueError should be raised.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not l:\n            raise ValueError(\"List must contain at least one numeric element\")\n        (other code for handling single element and calculating average for two elements)\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even number of elements in a list. It should handle edge cases such as empty lists and non-numeric values gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Accurate median calculation for odd and even number of elements\n- Handle edge cases like empty lists\n- Optimize performance for large datasets\n- Provide clear documentation and examples\n- Ensure compatibility with other data processing libraries\nWe will use the built-in Python statistics module to calculate the median efficiently. This module is optimized for performance and handles large datasets well. We will ensure the function handles empty lists by returning None and will raise an error for non-numeric values to maintain data integrity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is the middle value in a list of numbers. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements.\n\n# [phrase showing quantity relationship]\n    'odd': Refers to a list with an odd number of elements, where the median is the middle element.\n    'even': Refers to a list with an even number of elements, where the median is the average of the two middle elements.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Check if the list is empty. If it is, return None.\n2. Sort the list to arrange the elements in order.\n3. Determine the number of elements in the list.\n4. If the number of elements is odd, return the middle element.\n5. If the number of elements is even, calculate and return the average of the two middle elements.\n\n# [edge case] \n    median([]) = None\n    Explanation: The list is empty, so there is no median to calculate.\n    \n    median([1]) = 1\n    Explanation: The list has only one element, so that element is the median.\n    \n    median([1, 2]) = 1.5\n    Explanation: The list has two elements, so the median is the average of these two numbers.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    if not l:\n        return None\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    ```\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even-length lists, handle edge cases like empty lists, and be optimized for performance with large datasets.\nrequirement pool:\n- Accurate median calculation for odd and even-length lists\n- Handle edge cases such as empty lists\n- Optimize performance for large datasets\n- Provide clear documentation and examples\n- Ensure compatibility with existing Python projects\nWe will implement a function to calculate the median of a list using Python's built-in capabilities. The function will handle both odd and even-length lists, and will return None for empty lists. We will use the 'sorted' function to sort the list, which is efficient for most use cases. The function will be simple to integrate into existing projects and will include clear documentation and examples. We will not use any external libraries to keep the solution lightweight and easy to use.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is the middle value in a list of numbers. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty. If it is, return None.\n    2. Sort the list using Python's built-in `sorted` function.\n    3. Determine the length of the list.\n    4. If the length is odd, return the middle element.\n    5. If the length is even, return the average of the two middle elements.\n\n# [edge case] \n    median([]) = None\n    Explanation: The list is empty, so there is no median to calculate.\n    \n    median([1]) = 1\n    Explanation: The list contains only one element, so that element is the median.\n    \n    median([1, 2, 3, 4]) = 2.5\n    Explanation: The list has an even number of elements, so the median is the average of the two middle elements (2 and 3).\n\n# [extra code for edge case]\n    We need extra code to handle the edge case of an empty list.\n        if not l:\n            return None\n        (other code)\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [111, 111, 111, 111, 111, 111, 111, 111, 111, 111], "completion": "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Parameters:\n    l (list): A list of numeric values.\n\n    Returns:\n    float: The median value of the list. Returns None if the list is empty.\n\n    Examples:\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    >>> median([])\n    None\n    \"\"\"\n    # Check if the list is empty\n    if not l:\n        return None\n\n    # Sort the list\n    sorted_list = sorted(l)\n\n    # Determine the length of the list\n    n = len(sorted_list)\n\n    # Calculate the median\n    if n % 2 == 1:\n        # If the length is odd, return the middle element\n        return float(sorted_list[n // 2])\n    else:\n        # If the length is even, return the average of the two middle elements\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2.0\n\n# Example usage\nif __name__ == \"__main__\":\n    print(median([3, 1, 2, 4, 5]))  # Output: 3\n    print(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0\n    print(median([]))  # Output: None\n", "passed": true, "pass": true, "pass_num": 10, "round": 344, "mutate_method": "rephrase_one", "parent_index": 41}
