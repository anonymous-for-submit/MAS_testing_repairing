{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Return the middle value of the elements present in the list l.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "entry_point": "median", "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "test": ["def check(median):\n\tassert median([-6, 3, 8, 1002, 14, 16]) == 11.0", "def check(median):\n\tassert median([2, 10]) == 6.0", "def check(median):\n\tassert median([12, 3, 5, 11, 7, 4, 5]) == 5", "def check(median):\n\tassert median([-15, 4, 5, 1001, 15, 23]) == 10.0", "def check(median):\n\tassert median([-15, 3, 4, 1000, 13, 23]) == 8.5", "def check(median):\n\tassert median([-5, 9, 2, 996, 15, 22]) == 12.0", "def check(median):\n\tassert median([6, 2, 1, 8, 1]) == 2", "def check(median):\n\tassert median([7, 7]) == 7.0", "def check(median):\n\tassert median([4, 2, 2, 12, 10, 4, 10]) == 4", "def check(median):\n\tassert median([-12, 8, 9, 997, 14, 17]) == 11.5", "def check(median):\n\tassert median([1, 1, 3, 1, 10]) == 1", "def check(median):\n\tassert median([-8, 4, 8, 997, 15, 20]) == 11.5", "def check(median):\n\tassert median([8]) == 8", "def check(median):\n\tassert median([5]) == 5", "def check(median):\n\tassert median([8, 3, 2, 9, 6, 5, 2]) == 5", "def check(median):\n\tassert median([-15, 8, 4, 997, 7, 19]) == 7.5", "def check(median):\n\tassert median([-7, 4, 10, 998, 10, 22]) == 10.0", "def check(median):\n\tassert median([10]) == 10", "def check(median):\n\tassert median([5, 4]) == 4.5", "def check(median):\n\tassert median([3, 6, 6, 2, 6]) == 6", "def check(median):\n\tassert median([1, 8]) == 4.5", "def check(median):\n\tassert median([12, 1, 6, 11, 13, 6, 6]) == 6", "def check(median):\n\tassert median([8, 5, 7, 6, 3]) == 6", "def check(median):\n\tassert median([6, 2, 7, 8, 8, 5, 4]) == 6", "def check(median):\n\tassert median([7, 4]) == 5.5", "def check(median):\n\tassert median([-7, 6, 6, 996, 6, 15]) == 6.0", "def check(median):\n\tassert median([-15, 8, 1, 1004, 6, 19]) == 7.0", "def check(median):\n\tassert median([5, 5, 5, 7, 3]) == 5", "def check(median):\n\tassert median([6, 6, 2, 7, 6]) == 6", "def check(median):\n\tassert median([-10, 4, 6, 1000, 10, 20]) == 8.0", "def check(median):\n\tassert median([4]) == 4", "def check(median):\n\tassert median([11, 2]) == 6.5", "def check(median):\n\tassert median([1, 3, 6, 4, 10]) == 4", "def check(median):\n\tassert median([-5, 9, 10, 1000, 12, 18]) == 11.0", "def check(median):\n\tassert median([10, 6, 4, 8, 4, 3, 11]) == 6", "def check(median):\n\tassert median([6, 5]) == 5.5", "def check(median):\n\tassert median([6, 6, 6, 9, 7, 4, 10]) == 6", "def check(median):\n\tassert median([6, 5, 5, 7, 10, 6, 8]) == 6", "def check(median):\n\tassert median([7, 4, 7, 1, 7]) == 7", "def check(median):\n\tassert median([-6, 9, 6, 997, 14, 25]) == 11.5", "def check(median):\n\tassert median([7, 8]) == 7.5", "def check(median):\n\tassert median([3, 1, 2, 4, 5]) == 3", "def check(median):\n\tassert median([-11, 3, 10, 1005, 10, 22]) == 10.0", "def check(median):\n\tassert median([6, 9]) == 7.5", "def check(median):\n\tassert median([11, 3, 6, 13, 6, 4, 9]) == 6", "def check(median):\n\tassert median([-10, 3, 3, 997, 15, 22]) == 9.0", "def check(median):\n\tassert median([-8, 5, 4, 1001, 14, 22]) == 9.5", "def check(median):\n\tassert median([11, 3, 1, 8, 5, 1, 8]) == 5", "def check(median):\n\tassert median([-15, 3, 2, 1002, 8, 22]) == 5.5", "def check(median):\n\tassert median([8, 5, 3, 2, 10]) == 5", "def check(median):\n\tassert median([11, 1, 3, 8, 13, 2, 7]) == 7", "def check(median):\n\tassert median([3, 6, 1, 4, 3]) == 3", "def check(median):\n\tassert median([10, 10]) == 10.0", "def check(median):\n\tassert median([1]) == 1", "def check(median):\n\tassert median([11, 6, 7, 6, 6, 1, 12]) == 6", "def check(median):\n\tassert median([1, 5, 6, 6, 3]) == 5", "def check(median):\n\tassert median([2, 6, 6, 7, 3]) == 6", "def check(median):\n\tassert median([3, 10]) == 6.5", "def check(median):\n\tassert median([-11, 5, 11, 1002, 10, 20]) == 10.5", "def check(median):\n\tassert median([6, 6, 6, 7, 10]) == 6", "def check(median):\n\tassert median([3, 5, 7, 4, 8]) == 5", "def check(median):\n\tassert median([13, 5, 6, 7, 14, 7, 9]) == 7", "def check(median):\n\tassert median([6, 4, 4, 11, 11, 2, 2]) == 4", "def check(median):\n\tassert median([12, 2, 2, 11, 11, 4, 2]) == 4", "def check(median):\n\tassert median([3, 9]) == 6.0", "def check(median):\n\tassert median([5, 6, 6, 7, 5, 2, 9]) == 6", "def check(median):\n\tassert median([4, 6]) == 5.0", "def check(median):\n\tassert median([1, 2]) == 1.5", "def check(median):\n\tassert median([3, 4, 5, 9, 7, 2, 3]) == 4", "def check(median):\n\tassert median([10, 4, 7, 11, 11, 3, 3]) == 7", "def check(median):\n\tassert median([6, 10]) == 8.0", "def check(median):\n\tassert median([-6, 6, 9, 1005, 8, 25]) == 8.5", "def check(median):\n\tassert median([8, 5, 5, 7, 10]) == 7", "def check(median):\n\tassert median([-13, 8, 6, 998, 13, 19]) == 10.5", "def check(median):\n\tassert median([7, 2, 7, 6, 6]) == 6", "def check(median):\n\tassert median([9]) == 9", "def check(median):\n\tassert median([7]) == 7", "def check(median):\n\tassert median([8, 1, 3, 9, 3]) == 3", "def check(median):\n\tassert median([8, 1, 3, 9, 9, 2, 7]) == 7", "def check(median):\n\tassert median([-9, 4, 2, 1002, 6, 23]) == 5.0", "def check(median):\n\tassert median([8, 2, 7, 6, 7]) == 7", "def check(median):\n\tassert median([1, 6, 7, 5, 4]) == 5", "def check(median):\n\tassert median([2, 2]) == 2.0", "def check(median):\n\tassert median([6]) == 6", "def check(median):\n\tassert median([-7, 7, 8, 1000, 13, 25]) == 10.5", "def check(median):\n\tassert median([-5, 1, 10, 1003, 10, 25]) == 10.0", "def check(median):\n\tassert median([9, 2]) == 5.5", "def check(median):\n\tassert median([3]) == 3", "def check(median):\n\tassert median([6, 1, 5, 7, 11, 6, 5]) == 6", "def check(median):\n\tassert median([7, 3, 6, 5, 2]) == 5", "def check(median):\n\tassert median([-11, 3, 3, 998, 15, 15]) == 9.0", "def check(median):\n\tassert median([5, 5]) == 5.0", "def check(median):\n\tassert median([9, 5, 2, 6, 13, 7, 2]) == 6", "def check(median):\n\tassert median([8, 6, 3, 5, 12, 5, 5]) == 5", "def check(median):\n\tassert median([11, 3]) == 7.0", "def check(median):\n\tassert median([3, 6, 5, 11, 5, 4, 6]) == 5", "def check(median):\n\tassert median([5, 1]) == 3.0", "def check(median):\n\tassert median([8, 8]) == 8.0", "def check(median):\n\tassert median([7, 2, 7, 1, 4]) == 4", "def check(median):\n\tassert median([9, 9]) == 9.0", "def check(median):\n\tassert median([3, 6, 2, 6, 9]) == 6", "def check(median):\n\tassert median([-11, 1, 3, 1004, 12, 17]) == 7.5", "def check(median):\n\tassert median([5, 2, 3, 9, 5, 7, 7]) == 5", "def check(median):\n\tassert median([6, 2, 4, 2, 6]) == 4", "def check(median):\n\tassert median([3, 1, 7, 4, 3]) == 3", "def check(median):\n\tassert median([5, 2, 2, 5, 6, 1, 3]) == 3", "def check(median):\n\tassert median([-15, 8, 4, 1000, 6, 16]) == 7.0", "def check(median):\n\tassert median([1, 6]) == 3.5", "def check(median):\n\tassert median([3, 2, 7, 8, 11, 5, 12]) == 7", "def check(median):\n\tassert median([8, 3, 5, 9, 10]) == 8", "def check(median):\n\tassert median([2, 9]) == 5.5"], "test_case_list": ["assert median([-6, 3, 8, 1002, 14, 16]) == 11.0", "assert median([2, 10]) == 6.0", "assert median([12, 3, 5, 11, 7, 4, 5]) == 5", "assert median([-15, 4, 5, 1001, 15, 23]) == 10.0", "assert median([-15, 3, 4, 1000, 13, 23]) == 8.5", "assert median([-5, 9, 2, 996, 15, 22]) == 12.0", "assert median([6, 2, 1, 8, 1]) == 2", "assert median([7, 7]) == 7.0", "assert median([4, 2, 2, 12, 10, 4, 10]) == 4", "assert median([-12, 8, 9, 997, 14, 17]) == 11.5", "assert median([1, 1, 3, 1, 10]) == 1", "assert median([-8, 4, 8, 997, 15, 20]) == 11.5", "assert median([8]) == 8", "assert median([5]) == 5", "assert median([8, 3, 2, 9, 6, 5, 2]) == 5", "assert median([-15, 8, 4, 997, 7, 19]) == 7.5", "assert median([-7, 4, 10, 998, 10, 22]) == 10.0", "assert median([10]) == 10", "assert median([5, 4]) == 4.5", "assert median([3, 6, 6, 2, 6]) == 6", "assert median([1, 8]) == 4.5", "assert median([12, 1, 6, 11, 13, 6, 6]) == 6", "assert median([8, 5, 7, 6, 3]) == 6", "assert median([6, 2, 7, 8, 8, 5, 4]) == 6", "assert median([7, 4]) == 5.5", "assert median([-7, 6, 6, 996, 6, 15]) == 6.0", "assert median([-15, 8, 1, 1004, 6, 19]) == 7.0", "assert median([5, 5, 5, 7, 3]) == 5", "assert median([6, 6, 2, 7, 6]) == 6", "assert median([-10, 4, 6, 1000, 10, 20]) == 8.0", "assert median([4]) == 4", "assert median([11, 2]) == 6.5", "assert median([1, 3, 6, 4, 10]) == 4", "assert median([-5, 9, 10, 1000, 12, 18]) == 11.0", "assert median([10, 6, 4, 8, 4, 3, 11]) == 6", "assert median([6, 5]) == 5.5", "assert median([6, 6, 6, 9, 7, 4, 10]) == 6", "assert median([6, 5, 5, 7, 10, 6, 8]) == 6", "assert median([7, 4, 7, 1, 7]) == 7", "assert median([-6, 9, 6, 997, 14, 25]) == 11.5", "assert median([7, 8]) == 7.5", "assert median([3, 1, 2, 4, 5]) == 3", "assert median([-11, 3, 10, 1005, 10, 22]) == 10.0", "assert median([6, 9]) == 7.5", "assert median([11, 3, 6, 13, 6, 4, 9]) == 6", "assert median([-10, 3, 3, 997, 15, 22]) == 9.0", "assert median([-8, 5, 4, 1001, 14, 22]) == 9.5", "assert median([11, 3, 1, 8, 5, 1, 8]) == 5", "assert median([-15, 3, 2, 1002, 8, 22]) == 5.5", "assert median([8, 5, 3, 2, 10]) == 5", "assert median([11, 1, 3, 8, 13, 2, 7]) == 7", "assert median([3, 6, 1, 4, 3]) == 3", "assert median([10, 10]) == 10.0", "assert median([1]) == 1", "assert median([11, 6, 7, 6, 6, 1, 12]) == 6", "assert median([1, 5, 6, 6, 3]) == 5", "assert median([2, 6, 6, 7, 3]) == 6", "assert median([3, 10]) == 6.5", "assert median([-11, 5, 11, 1002, 10, 20]) == 10.5", "assert median([6, 6, 6, 7, 10]) == 6", "assert median([3, 5, 7, 4, 8]) == 5", "assert median([13, 5, 6, 7, 14, 7, 9]) == 7", "assert median([6, 4, 4, 11, 11, 2, 2]) == 4", "assert median([12, 2, 2, 11, 11, 4, 2]) == 4", "assert median([3, 9]) == 6.0", "assert median([5, 6, 6, 7, 5, 2, 9]) == 6", "assert median([4, 6]) == 5.0", "assert median([1, 2]) == 1.5", "assert median([3, 4, 5, 9, 7, 2, 3]) == 4", "assert median([10, 4, 7, 11, 11, 3, 3]) == 7", "assert median([6, 10]) == 8.0", "assert median([-6, 6, 9, 1005, 8, 25]) == 8.5", "assert median([8, 5, 5, 7, 10]) == 7", "assert median([-13, 8, 6, 998, 13, 19]) == 10.5", "assert median([7, 2, 7, 6, 6]) == 6", "assert median([9]) == 9", "assert median([7]) == 7", "assert median([8, 1, 3, 9, 3]) == 3", "assert median([8, 1, 3, 9, 9, 2, 7]) == 7", "assert median([-9, 4, 2, 1002, 6, 23]) == 5.0", "assert median([8, 2, 7, 6, 7]) == 7", "assert median([1, 6, 7, 5, 4]) == 5", "assert median([2, 2]) == 2.0", "assert median([6]) == 6", "assert median([-7, 7, 8, 1000, 13, 25]) == 10.5", "assert median([-5, 1, 10, 1003, 10, 25]) == 10.0", "assert median([9, 2]) == 5.5", "assert median([3]) == 3", "assert median([6, 1, 5, 7, 11, 6, 5]) == 6", "assert median([7, 3, 6, 5, 2]) == 5", "assert median([-11, 3, 3, 998, 15, 15]) == 9.0", "assert median([5, 5]) == 5.0", "assert median([9, 5, 2, 6, 13, 7, 2]) == 6", "assert median([8, 6, 3, 5, 12, 5, 5]) == 5", "assert median([11, 3]) == 7.0", "assert median([3, 6, 5, 11, 5, 4, 6]) == 5", "assert median([5, 1]) == 3.0", "assert median([8, 8]) == 8.0", "assert median([7, 2, 7, 1, 4]) == 4", "assert median([9, 9]) == 9.0", "assert median([3, 6, 2, 6, 9]) == 6", "assert median([-11, 1, 3, 1004, 12, 17]) == 7.5", "assert median([5, 2, 3, 9, 5, 7, 7]) == 5", "assert median([6, 2, 4, 2, 6]) == 4", "assert median([3, 1, 7, 4, 3]) == 3", "assert median([5, 2, 2, 5, 6, 1, 3]) == 3", "assert median([-15, 8, 4, 1000, 6, 16]) == 7.0", "assert median([1, 6]) == 3.5", "assert median([3, 2, 7, 8, 11, 5, 12]) == 7", "assert median([8, 3, 5, 9, 10]) == 8", "assert median([2, 9]) == 5.5"], "nl": "Return median of elements in the list l.\n    ", "func": "def median(l: list):", "examples": ">>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    ", "repair_prompt": ["def median(l: list):\t\n'''Return the middle value of the elements present in the list l.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "def median(l: list):\t\n'''Return the middle value of the elements present in the list l. The list will be sorted in ascending order first. Then, the median will be determined from the sorted list.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "def median(l: list):\n'''Return the middle value from the sorted list of elements present in the list l.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Parameters:\n    l (list): A list of numerical values.\n\n    Returns:\n    float: The median value of the list. Returns None for an empty list.\n\n    Examples:\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    >>> median([])\n    None\n    >>> median([7])\n    7\n    \"\"\"\n    # Handle edge case for empty list\n    if not l:\n        return None\n    \n    # Handle edge case for single-element list\n    if len(l) == 1:\n        return l[0]\n    \n    # Sort the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    # Calculate median based on the length of the list\n    if n % 2 == 1:\n        # Odd number of elements, return the middle element\n        return sorted_list[n // 2]\n    else:\n        # Even number of elements, return the average of the two middle elements\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2.0\n", "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n\n    Args:\n        l (list): List of numeric elements.\n\n    Returns:\n        float: Median value as a float, or None if the list is empty.\n    \"\"\"\n    # Handle edge case for empty list\n    if not l:\n        return None\n\n    # Handle edge case for single-element list\n    if len(l) == 1:\n        return float(l[0])\n\n    # Sort the list to arrange elements in ascending order\n    l_sorted = sorted(l)\n    mid = len(l_sorted) // 2\n\n    # Check if the list length is odd or even\n    if len(l_sorted) % 2 == 0:\n        # Even length: return the average of the two middle elements\n        return (l_sorted[mid - 1] + l_sorted[mid]) / 2.0\n    else:\n        # Odd length: return the middle element\n        return float(l_sorted[mid])\n", "from typing import List\n## main.py\n\nimport statistics\nfrom typing import List, Optional\n\ndef median(l: List[float]) -> Optional[float]:\n    \"\"\"\n    Calculate the median of a list of numbers.\n    \n    Args:\n        l: List of numbers (integers or floats).\n        \n    Returns:\n        Median value as a float, or None if the list is empty.\n    \"\"\"\n    if not l:\n        return None\n    \n    # Sort the list to arrange elements in ascending order\n    l.sort()\n    \n    # Determine the length of the list\n    n = len(l)\n    \n    # If the length is odd, return the middle element\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        # If the length is even, return the average of the two middle elements\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\n# Example usage:\n# print(median([1, 3, 2]))  # Output: 2\n# print(median([1, 2, 3, 4]))  # Output: 2.5\n# print(median([1]))  # Output: 1\n# print(median([]))  # Output: None\n", "from typing import List\n## main.py\n\nimport numpy as np\nfrom typing import List, Union\n\ndef median(l: List[Union[int, float]]) -> Union[float, None]:\n    \"\"\"\n    Calculate the median of a list of numbers.\n    \n    Args:\n        l: List of numbers (integers or floats).\n        \n    Returns:\n        Median value as a float, or None if the list is empty.\n        \n    Raises:\n        ValueError: If the list contains non-numeric values.\n    \"\"\"\n    # Check if the list is empty\n    if not l:\n        return None\n    \n    # Validate that all elements are numeric\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"List must contain only numeric values.\")\n    \n    # Use NumPy to calculate the median for performance optimization\n    return float(np.median(l))\n\n# Example usage:\n# print(median([1, 2, 3]))  # Output: 2.0\n# print(median([1, 2, 3, 4]))  # Output: 2.5\n# print(median([]))  # Output: None\n# print(median([1]))  # Output: 1.0\n", "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n    \n    Args:\n        l (list): List of numbers (integers or floats).\n        \n    Returns:\n        float: The median value as a float. Returns None for an empty list.\n    \"\"\"\n    # Check if the list is empty; if so, return None.\n    if not l:\n        return None\n    \n    # Sort the list in ascending order.\n    sorted_list = sorted(l)\n    \n    # Determine the length of the list.\n    n = len(sorted_list)\n    \n    # If the length is odd, return the middle element.\n    if n % 2 == 1:\n        return float(sorted_list[n // 2])\n    \n    # If the length is even, return the average of the two middle elements.\n    else:\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2.0\n", "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list.\n\n    Parameters:\n    l (list): A list of numerical values.\n\n    Returns:\n    float: The median value of the list. Returns None for empty lists.\n    \"\"\"\n    # Check if the list is empty\n    if not l:\n        return None\n\n    # Sort the list in ascending order\n    sorted_list = sorted(l)\n\n    # Determine the length of the list\n    n = len(sorted_list)\n\n    # Calculate the median based on the length of the list\n    if n % 2 == 1:\n        # If the length is odd, return the middle element\n        return float(sorted_list[n // 2])\n    else:\n        # If the length is even, return the average of the two middle elements\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2.0\n", "from typing import List\n## main.py\n\nimport numpy as np\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n    \n    Args:\n        l: List of numbers (integers or floats).\n        \n    Returns:\n        Median value as a float.\n        \n    Raises:\n        ValueError: If the list is empty or contains non-numeric data.\n    \"\"\"\n    if not l:\n        raise ValueError(\"List is empty\")\n    \n    # Check for non-numeric data\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"List contains non-numeric data\")\n    \n    # Sort the list using NumPy for performance optimization\n    sorted_list = np.sort(l)\n    n = len(sorted_list)\n    mid = n // 2\n    \n    if n % 2 == 0:\n        # Even number of elements, return the average of the two middle elements\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2.0\n    else:\n        # Odd number of elements, return the middle element\n        return float(sorted_list[mid])\n", "from typing import List\n## main.py\n\nimport numpy as np\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n    \n    This function uses NumPy for efficient sorting and median calculation.\n    It handles edge cases such as empty lists by returning None.\n    \n    Args:\n        l: List of numerical values.\n        \n    Returns:\n        Median value as a float, or None if the list is empty.\n        \n    Raises:\n        ValueError: If the list contains non-numeric values.\n    \"\"\"\n    if not l:\n        return None\n    \n    # Check for non-numeric values\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"List contains non-numeric values.\")\n    \n    # Use NumPy to sort and calculate the median\n    sorted_list = np.sort(l)\n    n = len(sorted_list)\n    \n    if n % 2 == 1:\n        return float(sorted_list[n // 2])\n    else:\n        return float((sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2)\n\n# Example usage:\n# median([]) should return None\n# median([1]) should return 1.0\n# median([1, 2]) should return 1.5\n# median([1, 2, 3]) should return 2.0\n", "from typing import List\n## main.py\n\nimport numpy as np\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n    \n    Args:\n        l (list): List of numbers.\n        \n    Returns:\n        float: Median value.\n        \n    Raises:\n        ValueError: If the list contains non-numeric values.\n    \"\"\"\n    # Validate input: Ensure all elements are numeric\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise ValueError(\"List must contain only numeric values.\")\n    \n    # Sort the list\n    sorted_list = sorted(l)\n    \n    # Calculate the median\n    n = len(sorted_list)\n    if n == 0:\n        raise ValueError(\"List is empty, cannot compute median.\")\n    \n    mid = n // 2\n    if n % 2 == 0:\n        # Even number of elements: average the two middle elements\n        median_value = (sorted_list[mid - 1] + sorted_list[mid]) / 2.0\n    else:\n        # Odd number of elements: return the middle element\n        median_value = sorted_list[mid]\n    \n    return median_value\n", "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n    \n    Args:\n        l: List of numeric values.\n        \n    Returns:\n        Median value as a float.\n        \n    Raises:\n        ValueError: If the list is empty or contains non-numeric values.\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty\")\n    \n    # Check for non-numeric values\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"The list contains non-numeric values\")\n    \n    l.sort()\n    n = len(l)\n    \n    if n % 2 == 1:\n        return float(l[n // 2])\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0\n"], "plans": ["requirement analysis:\nThe function should accurately compute the median for both odd and even-length lists. It should handle edge cases like empty lists gracefully, possibly by returning None or raising an exception. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Accurate median calculation for odd and even-length lists\n- Handle edge cases such as empty lists or single-element lists\n- Optimize performance for large datasets\n- Provide clear documentation and examples\n- Ensure compatibility with Python's built-in list type\nWe will implement a function to calculate the median of a list using Python's built-in capabilities. The function will handle edge cases such as empty lists by returning None and single-element lists by returning the element itself. We will use the 'sorted' function to sort the list, which is efficient for most use cases. The function will be optimized for performance by minimizing unnecessary operations and will include clear documentation with examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is the middle value in a list of numbers. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'middle': refers to the central value in a sorted list, which is crucial for determining the median.\n\n# [code logic]\n    1. Check if the list is empty; if so, return None.\n    2. Sort the list using Python's built-in 'sorted' function.\n    3. Determine the length of the list.\n    4. If the length is odd, return the middle element.\n    5. If the length is even, return the average of the two middle elements.\n\n# [edge case] \n    median([]) = None\n    Explanation: The list is empty, so there is no median value.\n    \n    median([5]) = 5\n    Explanation: The list contains only one element, so the median is that element itself.\n    \n    median([1, 2, 3, 4]) = 2.5\n    Explanation: The list has an even number of elements, so the median is the average of the two middle elements (2 and 3).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not l:\n            return None\n        elif len(l) == 1:\n            return l[0]\n        (other code for sorting and finding median)\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even number of elements in a list. It should handle edge cases such as empty lists and lists with a single element. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Accurate median calculation for odd and even lists\n- Handle edge cases like empty lists and single-element lists\n- Optimize performance for large datasets\n- Provide clear documentation and examples\n- Ensure compatibility with different Python versions\nWe will implement a function to calculate the median of a list using Python's built-in capabilities. The function will handle edge cases such as empty lists and single-element lists. For performance optimization, we will use the 'sorted' function which is efficient for large datasets. We will ensure the function is compatible with different Python versions by avoiding version-specific features.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is the middle value in a list of numbers. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'middle': refers to the central value in a sorted list. For an odd-length list, it's the exact middle element; for an even-length list, it's the average of the two central elements.\n\n# [code logic]\n    1. Sort the list to arrange elements in ascending order.\n    2. Check if the list length is odd or even.\n    3. If odd, return the middle element.\n    4. If even, calculate and return the average of the two middle elements.\n\n# [edge case] \n    median([]) = None\n    Explanation: An empty list has no elements, so there is no median value.\n    \n    median([5]) = 5\n    Explanation: A single-element list has its only element as the median.\n    \n    median([1, 2, 3, 4]) = 2.5\n    Explanation: The list has an even number of elements, so the median is the average of the two middle elements (2 and 3).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not l:\n            return None\n        elif len(l) == 1:\n            return l[0]\n        else:\n            l_sorted = sorted(l)\n            mid = len(l_sorted) // 2\n            if len(l_sorted) % 2 == 0:\n                return (l_sorted[mid - 1] + l_sorted[mid]) / 2\n            else:\n                return l_sorted[mid]\n", "requirement analysis:\nThe requirement is to develop a function that calculates the median of a list of numbers. The function should handle both odd and even numbers of elements, returning the middle value or the average of the two middle values, respectively. The function should be efficient and easy to use, with clear documentation and examples.\nrequirement pool:\n- Implement the median calculation function.\n- Ensure the function handles both odd and even number of elements.\n- Optimize the function for performance with large datasets.\n- Provide a user-friendly interface for inputting lists.\n- Include documentation and examples for user guidance.\nWe will implement a simple function using Python's built-in capabilities to calculate the median of a list. The function will handle both odd and even numbers of elements efficiently. For performance optimization, we will use the 'statistics' module, which is part of Python's standard library and provides a median function that is both efficient and easy to use. This approach ensures that the function is user-friendly and performs well even with large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is the middle value in a list of numbers. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'middle': Refers to the central value in a sorted list. For odd-length lists, it's the single middle element; for even-length lists, it's the average of the two central elements.\n\n# [code logic]\n    1. Sort the list to arrange elements in ascending order.\n    2. Determine the length of the list.\n    3. If the length is odd, return the middle element.\n    4. If the length is even, return the average of the two middle elements.\n\n# [edge case] \n    median([1]) = 1\n    Explanation: With only one element, that element is the median.\n    \n    median([1, 2]) = 1.5\n    Explanation: With two elements, the median is the average of both elements.\n    \n    median([]) = None\n    Explanation: An empty list has no elements, so there is no median.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not l:\n            return None\n        l.sort()\n        n = len(l)\n        if n % 2 == 1:\n            return l[n // 2]\n        else:\n            return (l[n // 2 - 1] + l[n // 2]) / 2\n", "requirement analysis:\nThe function should accurately compute the median of a list of numbers. It must handle both odd and even numbers of elements, returning a float for even numbers. The function should be optimized for performance, especially with large datasets, and include clear documentation for ease of use.\nrequirement pool:\n- Implement the median calculation function.\n- Optimize the function for large datasets.\n- Ensure the function handles both odd and even number of elements.\n- Provide comprehensive documentation and examples.\n- Include error handling for invalid inputs.\nWe will implement a function to calculate the median of a list using Python's built-in capabilities. For performance optimization, especially with large datasets, we will utilize the NumPy library, which is highly efficient for numerical operations. The function will handle both odd and even numbers of elements and include error handling for invalid inputs such as empty lists or non-numeric values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is the middle value in a list of numbers. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'middle': refers to the central value in a sorted list, which is crucial for determining the median.\n\n# [code logic]\n    1. Sort the list in ascending order.\n    2. Determine the length of the list.\n    3. If the length is odd, return the middle element.\n    4. If the length is even, return the average of the two middle elements.\n\n# [edge case] \n    median([1]) = 1\n    Explanation: The list contains only one element, so the median is that element itself.\n    \n    median([1, 2]) = 1.5\n    Explanation: The list has two elements, so the median is the average of these two numbers.\n    \n    median([]) = Error or None\n    Explanation: An empty list does not have a median, so the function should handle this case appropriately.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not l:\n            return None  # or raise an error\n        l.sort()\n        n = len(l)\n        if n % 2 == 1:\n            return l[n // 2]\n        else:\n            return (l[n // 2 - 1] + l[n // 2]) / 2\n", "requirement analysis:\nThe function should accurately compute the median of a list by first sorting the list and then finding the middle value. It should handle both odd and even number of elements and return a float for even cases.\nrequirement pool:\n- Implement median calculation with sorting\n- Handle empty list gracefully\n- Optimize for large datasets\n- Provide clear documentation\n- Include examples in documentation\nWe will implement a function to calculate the median by first sorting the list and then determining the middle value. For an odd number of elements, the middle element will be returned. For an even number of elements, the average of the two middle elements will be returned. The function will handle empty lists by returning None, as this is a common approach for handling such cases. We will use Python's built-in sorting capabilities to ensure efficiency and simplicity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is the middle value in a list of numbers. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'middle': Refers to the central value(s) in a sorted list. For an odd-length list, it's the single middle element. For an even-length list, it's the average of the two central elements.\n\n# [code logic]\n    1. Check if the list is empty; if so, return None.\n    2. Sort the list in ascending order.\n    3. Determine the length of the list.\n    4. If the length is odd, return the middle element.\n    5. If the length is even, return the average of the two middle elements.\n\n# [edge case] \n    median([]) = None\n    Explanation: The list is empty, so there is no median value to return.\n    \n    median([1]) = 1\n    Explanation: The list contains only one element, so that element is the median.\n    \n    median([1, 2]) = 1.5\n    Explanation: The list has two elements, so the median is the average of these two numbers.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case of an empty list.\n        if not l:\n            return None\n        (other code)\n", "requirement analysis:\nThe function should sort the list and then calculate the median. It must handle both odd and even number of elements, returning a float for even counts. Edge cases like empty lists should be managed gracefully.\nrequirement pool:\n- Implement median calculation for sorted lists\n- Optimize sorting for performance\n- Handle edge cases like empty lists\n- Provide detailed documentation\n- Ensure compatibility with Python 3.x\nWe will implement a function to calculate the median of a list by first sorting the list and then determining the median value. For performance optimization, we will use Python's built-in sorting method, which is efficient for large datasets. The function will handle edge cases like empty lists by returning None, as this is a common practice for indicating the absence of a value. We will provide clear documentation and ensure compatibility with Python 3.x.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is the middle value in a list of numbers. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'middle': Refers to the central value(s) in a sorted list. For an odd-length list, it's the single middle element; for an even-length list, it's the average of the two central elements.\n\n# [code logic]\n1. Check if the list is empty. If it is, return None.\n2. Sort the list in ascending order.\n3. Determine the length of the list.\n4. If the length is odd, return the middle element.\n5. If the length is even, return the average of the two middle elements.\n\n# [edge case] \n    median([]) = None\n    Explanation: The list is empty, so there is no median value to return.\n    \n    median([1]) = 1\n    Explanation: The list contains only one element, so that element is the median.\n    \n    median([1, 2, 3, 4]) = 2.5\n    Explanation: The sorted list is [1, 2, 3, 4]. The two middle elements are 2 and 3, and their average is 2.5.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case of an empty list.\n        if not l:\n            return None\n        (other code)\n", "requirement analysis:\nThe function should accurately compute the median of a list, handling both odd and even numbers of elements. It should be efficient and easy to integrate into other systems.\nrequirement pool:\n- Accurate median calculation for odd and even length lists\n- Performance optimization for large datasets\n- Clear documentation and examples\n- Compatibility with existing data processing libraries\n- User-friendly error handling\nWe will implement a simple function to calculate the median of a list using Python's built-in capabilities. For performance optimization, especially with large datasets, we will utilize the NumPy library, which is known for its efficient array operations. The function will handle both odd and even numbers of elements and include error handling for empty lists and non-numeric data.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is the middle value in a list of numbers. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'middle': Refers to the central value(s) in a sorted list. For an odd-length list, it's the single middle element. For an even-length list, it's the average of the two central elements.\n\n# [code logic]\n1. Sort the list.\n2. Check if the list is empty; if so, raise an error or return a specific value indicating invalid input.\n3. Determine the length of the list.\n4. If the length is odd, return the middle element.\n5. If the length is even, calculate and return the average of the two middle elements.\n\n# [edge case] \n    median([]) = Error or specific invalid value\n    Explanation: An empty list does not have a median, so an error should be raised or a specific value should be returned to indicate invalid input.\n    \n    median([1]) = 1\n    Explanation: A single-element list has that element as its median.\n    \n    median([1, 2, 3, 4]) = 2.5\n    Explanation: The list has an even number of elements, so the median is the average of the two middle elements (2 and 3).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n```python\ndef median(l: list):\n    if not l:\n        raise ValueError(\"List is empty\")\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]\n```\n", "requirement analysis:\nThe function should accurately compute the median of a list, handling both odd and even numbers of elements. It should be efficient and easy to integrate into larger systems. Documentation should be clear to facilitate user understanding.\nrequirement pool:\n- Implement the median calculation function\n- Optimize the function for performance with large datasets\n- Ensure the function handles edge cases, such as empty lists\n- Provide comprehensive documentation and examples\n- Include unit tests to verify function accuracy\nWe will implement a simple function to calculate the median of a list using Python's built-in capabilities. For performance optimization, especially with large datasets, we will utilize the NumPy library, which is well-suited for numerical operations and provides efficient sorting and median calculation. The function will handle edge cases such as empty lists by returning None and will include comprehensive documentation and examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is the middle value in a list when the list is sorted. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'middle': refers to the central value in a sorted list, which is crucial for determining the median.\n\n# [code logic]\n    1. Sort the list.\n    2. Check if the list is empty; if so, return None.\n    3. Determine the length of the list.\n    4. If the length is odd, return the middle element.\n    5. If the length is even, return the average of the two middle elements.\n\n# [edge case] \n    median([]) = None\n    Explanation: The list is empty, so there is no median value to return.\n    \n    median([1]) = 1\n    Explanation: The list contains only one element, so that element is the median.\n    \n    median([1, 2]) = 1.5\n    Explanation: The list has two elements, so the median is the average of these two elements.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not l:\n            return None\n        l.sort()\n        n = len(l)\n        if n % 2 == 1:\n            return l[n // 2]\n        else:\n            return (l[n // 2 - 1] + l[n // 2]) / 2\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even-length lists. It should handle edge cases such as empty lists or lists with non-numeric values gracefully.\nrequirement pool:\n- Implement the median calculation function\n- Optimize the function for performance with large datasets\n- Include error handling for invalid inputs\n- Provide detailed documentation and examples\n- Ensure compatibility with Python 3.x\nWe will implement a simple function using Python's built-in capabilities to calculate the median. For performance optimization, we will use the 'numpy' library, which is well-suited for handling large datasets efficiently. The function will raise an error for non-numeric values to ensure data integrity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is the middle value in a list of numbers. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'middle': Refers to the central value(s) in a sorted list. For an odd-length list, it's the single middle element; for an even-length list, it's the average of the two central elements.\n\n# [code logic]\n    1. Sort the list.\n    2. Determine if the length of the list is odd or even.\n    3. If odd, return the middle element.\n    4. If even, return the average of the two middle elements.\n\n# [edge case] \n    median([1]) = 1\n    Explanation: A single-element list has that element as its median.\n    \n    median([1, 2]) = 1.5\n    Explanation: For a two-element list, the median is the average of both elements.\n    \n    median([1, 2, 3, 4]) = 2.5\n    Explanation: The list has an even number of elements, so the median is the average of the two middle elements (2 and 3).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for calculating the median inherently handles lists of any length, including those with one or two elements.\n", "requirement analysis:\nThe function should accurately compute the median for both odd and even-length lists. It should handle edge cases such as empty lists or lists with non-numeric values gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the median calculation for odd-length lists.\n- Implement the median calculation for even-length lists.\n- Optimize the function for performance with large datasets.\n- Handle edge cases such as empty lists or non-numeric values.\n- Provide comprehensive documentation and examples.\nWe will implement a function to calculate the median of a list using Python's built-in capabilities. The function will handle both odd and even-length lists and will raise an error for non-numeric values. We will use the 'statistics' module for simplicity and performance optimization. The function will also handle empty lists by raising a ValueError.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'median'\n    Explanation: The median is the middle value in a list of numbers. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'middle': Refers to the central value in a sorted list of numbers. For an odd-length list, it's the single middle element. For an even-length list, it's the average of the two central elements.\n\n# [code logic]\n    1. Check if the list is empty. If it is, raise a ValueError.\n    2. Sort the list.\n    3. Determine the length of the list.\n    4. If the length is odd, return the middle element.\n    5. If the length is even, return the average of the two middle elements.\n\n# [edge case] \n    median([]) = ValueError\n    Explanation: An empty list does not have a median, so a ValueError should be raised.\n    \n    median([1]) = 1\n    Explanation: A single-element list has that element as its median.\n    \n    median([1, 2, 3, 4]) = 2.5\n    Explanation: The list has an even number of elements, so the median is the average of the two middle elements (2 and 3).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not l:\n            raise ValueError(\"The list is empty\")\n        l.sort()\n        n = len(l)\n        if n % 2 == 1:\n            return l[n // 2]\n        else:\n            return (l[n // 2 - 1] + l[n // 2]) / 2\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [111, 111, 111, 111, 111, 111, 111, 111, 111, 111], "completion": "from typing import List\n## main.py\n\ndef median(l: list) -> float:\n    \"\"\"\n    Calculate the median of a list of numbers.\n    \n    Args:\n        l: List of numeric values.\n        \n    Returns:\n        Median value as a float.\n        \n    Raises:\n        ValueError: If the list is empty or contains non-numeric values.\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty\")\n    \n    # Check for non-numeric values\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"The list contains non-numeric values\")\n    \n    l.sort()\n    n = len(l)\n    \n    if n % 2 == 1:\n        return float(l[n // 2])\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0\n", "passed": true, "pass": true, "pass_num": 10, "round": 775, "mutate_method": "rephrase_one", "parent_index": 41}
