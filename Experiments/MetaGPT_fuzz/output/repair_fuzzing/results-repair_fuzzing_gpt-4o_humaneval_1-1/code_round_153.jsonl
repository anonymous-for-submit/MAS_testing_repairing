{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''\nCreate a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases. Make sure to handle edge cases where the input numbers might be negative, zero, or very large.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "entry_point": "any_int", "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "test": ["def check(any_int):\n\tassert any_int(8, 19, 11) == True", "def check(any_int):\n\tassert any_int(7.307, 7.071, 5.088) == False", "def check(any_int):\n\tassert any_int(6, 12, 6) == True", "def check(any_int):\n\tassert any_int(6.511, 2, 3) == False", "def check(any_int):\n\tassert any_int(12, 6, 6) == True", "def check(any_int):\n\tassert any_int(2, 2, 4) == True", "def check(any_int):\n\tassert any_int(5.114, 5, 4) == False", "def check(any_int):\n\tassert any_int(3.376, 6.953, 2.111) == False", "def check(any_int):\n\tassert any_int(2, 3, 1)==True", "def check(any_int):\n\tassert any_int(2, 5, 4) == False", "def check(any_int):\n\tassert any_int(7.194, 1.302, 7.462) == False", "def check(any_int):\n\tassert any_int(1, 7, 8) == True", "def check(any_int):\n\tassert any_int(5, 8, 3) == True", "def check(any_int):\n\tassert any_int(2.389, 9, 10) == False", "def check(any_int):\n\tassert any_int(-1, 0, 1) == True", "def check(any_int):\n\tassert any_int(9, 6, 3) == True", "def check(any_int):\n\tassert any_int(4.38, 6, 1) == False", "def check(any_int):\n\tassert any_int(3.785, 6.308, 7.367) == False", "def check(any_int):\n\tassert any_int(6, 10, 4) == True", "def check(any_int):\n\tassert any_int(1.705, 2, 6.616) == False", "def check(any_int):\n\tassert any_int(6, 4, 2) == True", "def check(any_int):\n\tassert any_int(4, 2, 2)==True", "def check(any_int):\n\tassert any_int(3.692, 2, 7.2) == False", "def check(any_int):\n\tassert any_int(2.5, 2, 3)==False", "def check(any_int):\n\tassert any_int(5, 6, 1) == True", "def check(any_int):\n\tassert any_int(1, 3, 2) == True", "def check(any_int):\n\tassert any_int(3,4,7)==True", "def check(any_int):\n\tassert any_int(6, 10, 1) == False", "def check(any_int):\n\tassert any_int(6, 2, 4) == True", "def check(any_int):\n\tassert any_int(6.155, 2.926, 1.672) == False", "def check(any_int):\n\tassert any_int(5, 2, 3) == True", "def check(any_int):\n\tassert any_int(7.829, 2, 9) == False", "def check(any_int):\n\tassert any_int(4, 6, 3) == False", "def check(any_int):\n\tassert any_int(2.583, 3.749, 4.738) == False", "def check(any_int):\n\tassert any_int(12, 11, 1) == True", "def check(any_int):\n\tassert any_int(3.211, 4, 3) == False", "def check(any_int):\n\tassert any_int(1, 1, 7) == False", "def check(any_int):\n\tassert any_int(0, 3, 3) == True", "def check(any_int):\n\tassert any_int(1.157, 8, 2) == False", "def check(any_int):\n\tassert any_int(3, 3, 6) == True", "def check(any_int):\n\tassert any_int(4.272, 6.612, 6.663) == False", "def check(any_int):\n\tassert any_int(1, 1, 2) == True", "def check(any_int):\n\tassert any_int(2.2, 2.2, 2.2)==False", "def check(any_int):\n\tassert any_int(3.158, 8, 6.135) == False", "def check(any_int):\n\tassert any_int(1.346, 5, 6) == False", "def check(any_int):\n\tassert any_int(15, 9, 6) == True", "def check(any_int):\n\tassert any_int(1, 4, 5) == True", "def check(any_int):\n\tassert any_int(7.656, 1, 7) == False", "def check(any_int):\n\tassert any_int(3.599, 5, 1) == False", "def check(any_int):\n\tassert any_int(3, 1, 2) == True", "def check(any_int):\n\tassert any_int(-3, 2, 5) == True", "def check(any_int):\n\tassert any_int(4, 11, 5) == False", "def check(any_int):\n\tassert any_int(10, 7, 3) == True", "def check(any_int):\n\tassert any_int(7, 3, 10) == True", "def check(any_int):\n\tassert any_int(3, 4, 1) == True", "def check(any_int):\n\tassert any_int(3.103, 3, 10) == False", "def check(any_int):\n\tassert any_int(6, 16, 10) == True", "def check(any_int):\n\tassert any_int(1.812, 6.567, 7.145) == False", "def check(any_int):\n\tassert any_int(6, 6, 12) == True", "def check(any_int):\n\tassert any_int(1, 7, 2) == False", "def check(any_int):\n\tassert any_int(7, 6, 1) == True", "def check(any_int):\n\tassert any_int(4, 3, 7) == True", "def check(any_int):\n\tassert any_int(4, 6, 2) == True", "def check(any_int):\n\tassert any_int(2.007, 9, 7.198) == False", "def check(any_int):\n\tassert any_int(2, 3, 5) == True", "def check(any_int):\n\tassert any_int(6.086, 4, 4) == False", "def check(any_int):\n\tassert any_int(3.754, 6, 5.044) == False", "def check(any_int):\n\tassert any_int(8, 10, 2) == True", "def check(any_int):\n\tassert any_int(7.73, 5.041, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 6, 2)==False", "def check(any_int):\n\tassert any_int(3.683, 8, 1.193) == False", "def check(any_int):\n\tassert any_int(-4, 6, 2)==True", "def check(any_int):\n\tassert any_int(7, 13, 6) == True", "def check(any_int):\n\tassert any_int(2.003, 3, 11) == False", "def check(any_int):\n\tassert any_int(3.357, 7, 8.074) == False", "def check(any_int):\n\tassert any_int(3.621, 6.679, 2.542) == False", "def check(any_int):\n\tassert any_int(12, 3, 9) == True", "def check(any_int):\n\tassert any_int(7.797, 7, 4) == False", "def check(any_int):\n\tassert any_int(7, 1, 8) == True", "def check(any_int):\n\tassert any_int(5, 3, 8) == True", "def check(any_int):\n\tassert any_int(5, 7, 2) == True", "def check(any_int):\n\tassert any_int(5, 6, 11) == True", "def check(any_int):\n\tassert any_int(6.681, 8, 4.747) == False", "def check(any_int):\n\tassert any_int(3, 2, 5) == True", "def check(any_int):\n\tassert any_int(3.0,4,7)==False", "def check(any_int):\n\tassert any_int(9, 1, 10) == True", "def check(any_int):\n\tassert any_int(1.5, 5, 3.5)==False", "def check(any_int):\n\tassert any_int(2.834, 7, 9) == False", "def check(any_int):\n\tassert any_int(2, 6, 4) == True", "def check(any_int):\n\tassert any_int(6.068, 1, 3.454) == False", "def check(any_int):\n\tassert any_int(1.834, 7.255, 6.304) == False", "def check(any_int):\n\tassert any_int(1.726, 3, 1) == False", "def check(any_int):\n\tassert any_int(13, 7, 6) == True", "def check(any_int):\n\tassert any_int(6.9, 4, 12) == False", "def check(any_int):\n\tassert any_int(4.039, 5, 5.992) == False", "def check(any_int):\n\tassert any_int(4, 5, 9) == True", "def check(any_int):\n\tassert any_int(6, 2, 7) == False", "def check(any_int):\n\tassert any_int(3, 10, 7) == True", "def check(any_int):\n\tassert any_int(5.586, 1, 2) == False", "def check(any_int):\n\tassert any_int(12, 8, 4) == True", "def check(any_int):\n\tassert any_int(2.459, 5, 11) == False", "def check(any_int):\n\tassert any_int(0, 2, 2) == True", "def check(any_int):\n\tassert any_int(6.175, 9, 4) == False", "def check(any_int):\n\tassert any_int(12, 5, 7) == True", "def check(any_int):\n\tassert any_int(8.854, 2, 8) == False", "def check(any_int):\n\tassert any_int(2.858, 1, 2) == False", "def check(any_int):\n\tassert any_int(4, 3, 1) == True", "def check(any_int):\n\tassert any_int(4, 11, 1) == False", "def check(any_int):\n\tassert any_int(5, 5, 10) == True", "def check(any_int):\n\tassert any_int(10, 5, 5) == True", "def check(any_int):\n\tassert any_int(3.228, 6, 6) == False", "def check(any_int):\n\tassert any_int(2.805, 3, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 1, 1) == True", "def check(any_int):\n\tassert any_int(6, 3, 3) == True", "def check(any_int):\n\tassert any_int(7, 5, 12) == True", "def check(any_int):\n\tassert any_int(-4, 11, 7) == True", "def check(any_int):\n\tassert any_int(2,1,1)==True", "def check(any_int):\n\tassert any_int(7, 2, 9) == True", "def check(any_int):\n\tassert any_int(3.445, 2, 2) == False", "def check(any_int):\n\tassert any_int(2, 7, 5) == True", "def check(any_int):\n\tassert any_int(6.254, 6, 7) == False", "def check(any_int):\n\tassert any_int(3.685, 2, 6) == False", "def check(any_int):\n\tassert any_int(5, 9, 5) == False", "def check(any_int):\n\tassert any_int(5.408, 8, 3.454) == False", "def check(any_int):\n\tassert any_int(-7, 5, -2) == True", "def check(any_int):\n\tassert any_int(4, 8, 4) == True", "def check(any_int):\n\tassert any_int(12, 7, 5) == True", "def check(any_int):\n\tassert any_int(4, 7, 3) == True", "def check(any_int):\n\tassert any_int(6.61, 1.687, 2.647) == False", "def check(any_int):\n\tassert any_int(3.033, 6.554, 7.391) == False", "def check(any_int):\n\tassert any_int(2.08, 7, 1.239) == False"], "test_case_list": ["assert any_int(8, 19, 11) == True", "assert any_int(7.307, 7.071, 5.088) == False", "assert any_int(6, 12, 6) == True", "assert any_int(6.511, 2, 3) == False", "assert any_int(12, 6, 6) == True", "assert any_int(2, 2, 4) == True", "assert any_int(5.114, 5, 4) == False", "assert any_int(3.376, 6.953, 2.111) == False", "assert any_int(2, 3, 1)==True", "assert any_int(2, 5, 4) == False", "assert any_int(7.194, 1.302, 7.462) == False", "assert any_int(1, 7, 8) == True", "assert any_int(5, 8, 3) == True", "assert any_int(2.389, 9, 10) == False", "assert any_int(-1, 0, 1) == True", "assert any_int(9, 6, 3) == True", "assert any_int(4.38, 6, 1) == False", "assert any_int(3.785, 6.308, 7.367) == False", "assert any_int(6, 10, 4) == True", "assert any_int(1.705, 2, 6.616) == False", "assert any_int(6, 4, 2) == True", "assert any_int(4, 2, 2)==True", "assert any_int(3.692, 2, 7.2) == False", "assert any_int(2.5, 2, 3)==False", "assert any_int(5, 6, 1) == True", "assert any_int(1, 3, 2) == True", "assert any_int(3,4,7)==True", "assert any_int(6, 10, 1) == False", "assert any_int(6, 2, 4) == True", "assert any_int(6.155, 2.926, 1.672) == False", "assert any_int(5, 2, 3) == True", "assert any_int(7.829, 2, 9) == False", "assert any_int(4, 6, 3) == False", "assert any_int(2.583, 3.749, 4.738) == False", "assert any_int(12, 11, 1) == True", "assert any_int(3.211, 4, 3) == False", "assert any_int(1, 1, 7) == False", "assert any_int(0, 3, 3) == True", "assert any_int(1.157, 8, 2) == False", "assert any_int(3, 3, 6) == True", "assert any_int(4.272, 6.612, 6.663) == False", "assert any_int(1, 1, 2) == True", "assert any_int(2.2, 2.2, 2.2)==False", "assert any_int(3.158, 8, 6.135) == False", "assert any_int(1.346, 5, 6) == False", "assert any_int(15, 9, 6) == True", "assert any_int(1, 4, 5) == True", "assert any_int(7.656, 1, 7) == False", "assert any_int(3.599, 5, 1) == False", "assert any_int(3, 1, 2) == True", "assert any_int(-3, 2, 5) == True", "assert any_int(4, 11, 5) == False", "assert any_int(10, 7, 3) == True", "assert any_int(7, 3, 10) == True", "assert any_int(3, 4, 1) == True", "assert any_int(3.103, 3, 10) == False", "assert any_int(6, 16, 10) == True", "assert any_int(1.812, 6.567, 7.145) == False", "assert any_int(6, 6, 12) == True", "assert any_int(1, 7, 2) == False", "assert any_int(7, 6, 1) == True", "assert any_int(4, 3, 7) == True", "assert any_int(4, 6, 2) == True", "assert any_int(2.007, 9, 7.198) == False", "assert any_int(2, 3, 5) == True", "assert any_int(6.086, 4, 4) == False", "assert any_int(3.754, 6, 5.044) == False", "assert any_int(8, 10, 2) == True", "assert any_int(7.73, 5.041, 6.418) == False", "assert any_int(2, 6, 2)==False", "assert any_int(3.683, 8, 1.193) == False", "assert any_int(-4, 6, 2)==True", "assert any_int(7, 13, 6) == True", "assert any_int(2.003, 3, 11) == False", "assert any_int(3.357, 7, 8.074) == False", "assert any_int(3.621, 6.679, 2.542) == False", "assert any_int(12, 3, 9) == True", "assert any_int(7.797, 7, 4) == False", "assert any_int(7, 1, 8) == True", "assert any_int(5, 3, 8) == True", "assert any_int(5, 7, 2) == True", "assert any_int(5, 6, 11) == True", "assert any_int(6.681, 8, 4.747) == False", "assert any_int(3, 2, 5) == True", "assert any_int(3.0,4,7)==False", "assert any_int(9, 1, 10) == True", "assert any_int(1.5, 5, 3.5)==False", "assert any_int(2.834, 7, 9) == False", "assert any_int(2, 6, 4) == True", "assert any_int(6.068, 1, 3.454) == False", "assert any_int(1.834, 7.255, 6.304) == False", "assert any_int(1.726, 3, 1) == False", "assert any_int(13, 7, 6) == True", "assert any_int(6.9, 4, 12) == False", "assert any_int(4.039, 5, 5.992) == False", "assert any_int(4, 5, 9) == True", "assert any_int(6, 2, 7) == False", "assert any_int(3, 10, 7) == True", "assert any_int(5.586, 1, 2) == False", "assert any_int(12, 8, 4) == True", "assert any_int(2.459, 5, 11) == False", "assert any_int(0, 2, 2) == True", "assert any_int(6.175, 9, 4) == False", "assert any_int(12, 5, 7) == True", "assert any_int(8.854, 2, 8) == False", "assert any_int(2.858, 1, 2) == False", "assert any_int(4, 3, 1) == True", "assert any_int(4, 11, 1) == False", "assert any_int(5, 5, 10) == True", "assert any_int(10, 5, 5) == True", "assert any_int(3.228, 6, 6) == False", "assert any_int(2.805, 3, 6.418) == False", "assert any_int(2, 1, 1) == True", "assert any_int(6, 3, 3) == True", "assert any_int(7, 5, 12) == True", "assert any_int(-4, 11, 7) == True", "assert any_int(2,1,1)==True", "assert any_int(7, 2, 9) == True", "assert any_int(3.445, 2, 2) == False", "assert any_int(2, 7, 5) == True", "assert any_int(6.254, 6, 7) == False", "assert any_int(3.685, 2, 6) == False", "assert any_int(5, 9, 5) == False", "assert any_int(5.408, 8, 3.454) == False", "assert any_int(-7, 5, -2) == True", "assert any_int(4, 8, 4) == True", "assert any_int(12, 7, 5) == True", "assert any_int(4, 7, 3) == True", "assert any_int(6.61, 1.687, 2.647) == False", "assert any_int(3.033, 6.554, 7.391) == False", "assert any_int(2.08, 7, 1.239) == False"], "nl": "\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    ", "func": "def any_int(x, y, z):", "examples": "Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    ", "repair_prompt": ["def any_int(x, y, z):\t\n'''\nCreate a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases. Make sure to handle edge cases where the input numbers might be negative, zero, or very large.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "def any_int(x, y, z):\t\n'''\nCreate a function that takes 3 numbers. It should return true if one of the numbers is equal to the sum of the other two. Also, all numbers must be integers. Returns false in any other cases. Make sure to handle edge cases where the input numbers might be negative, zero, or very large.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "def any_int(x, y, z):\t\n'''\nCreate a function that takes 3 numbers and returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases. Make sure to handle edge cases where the input numbers might be negative, zero, or very large.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''"], "completions": ["from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three numbers and returns True if one of the numbers is equal to the sum of the other two, \n    and all numbers are integers. Returns False in any other cases.\n    \n    Parameters:\n    x (int): First number\n    y (int): Second number\n    z (int): Third number\n    \n    Returns:\n    bool: True if one number equals the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n    \n    # Check if any one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three integers and returns True if one of the numbers is equal to the sum of the other two.\n    Returns False if any input is not an integer or if no such condition is met.\n\n    Args:\n        x (int): First integer.\n        y (int): Second integer.\n        z (int): Third integer.\n\n    Returns:\n        bool: True if one number is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three integers and returns True if one of the numbers is equal to the sum of the other two.\n    Returns False if any input is not an integer or if no such condition is met.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    bool: True if one number is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n    \n    # Check if any of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three integers and returns True if one of them is equal to the sum of the other two.\n    Returns False if any input is not an integer or if the condition is not met.\n    \n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n    \n    Returns:\n        bool: True if one of the integers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n    \n    # Check if any one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three integers and returns True if one of the numbers is equal to the sum of the other two.\n    Returns False for non-integer inputs or if the condition is not met.\n\n    Args:\n        x (int): First integer.\n        y (int): Second integer.\n        z (int): Third integer.\n\n    Returns:\n        bool: True if one of the numbers is equal to the sum of the other two, otherwise False.\n    \"\"\"\n    # Validate inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any number equals the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three integers and returns True if one of the numbers is equal to the sum of the other two.\n    Returns False if any input is not an integer or if no such condition is met.\n\n    Args:\n        x (int): First integer.\n        y (int): Second integer.\n        z (int): Third integer.\n\n    Returns:\n        bool: True if one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n\n    # Check if any number is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three integers and returns True if one of the numbers is equal to the sum of the other two.\n    Returns False for non-integer inputs or if the condition is not met.\n\n    Args:\n        x (int): First integer input.\n        y (int): Second integer input.\n        z (int): Third integer input.\n\n    Returns:\n        bool: True if one number equals the sum of the other two, False otherwise.\n    \"\"\"\n    # Validate inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any number equals the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three integers and returns True if one of the numbers is equal to the sum of the other two.\n    Returns False if any input is not an integer or if no such condition is met.\n\n    Args:\n        x (int): First integer.\n        y (int): Second integer.\n        z (int): Third integer.\n\n    Returns:\n        bool: True if one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n\n# Example usage:\n# print(any_int(0, 0, 0))  # Expected: True\n# print(any_int(-1, -1, -2))  # Expected: True\n# print(any_int(1000000000, 500000000, 500000000))  # Expected: True\n# print(any_int(1, 2, 3))  # Expected: False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if one of the three integers is equal to the sum of the other two.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Validate that all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n\n# Example usage:\n# print(any_int(0, 0, 0))  # Expected: True\n# print(any_int(-1, -1, -2))  # Expected: True\n# print(any_int(1000000000, 500000000, 500000000))  # Expected: True\n# print(any_int(1, 2, 3))  # Expected: True\n# print(any_int(1, 2, 4))  # Expected: False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three integers and returns True if one of the numbers is equal to the sum of the other two.\n    Returns False if any input is not an integer or if no such condition is met.\n\n    Args:\n        x (int): First integer.\n        y (int): Second integer.\n        z (int): Third integer.\n\n    Returns:\n        bool: True if one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Validate inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n\n    # Check if any number equals the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n\n# Example usage:\n# print(any_int(0, 0, 0))  # Expected output: True\n# print(any_int(-1, -1, -2))  # Expected output: True\n# print(any_int(1000000000, 500000000, 500000000))  # Expected output: True\n# print(any_int(1, 2, 3))  # Expected output: False\n"], "plans": ["requirement analysis:\nThe function must accurately determine if one of the three integer inputs is equal to the sum of the other two. It should reject non-integer inputs and handle edge cases such as negative numbers, zero, and large values efficiently.\nrequirement pool:\n- Implement integer validation for inputs.\n- Ensure correct sum comparison logic.\n- Handle edge cases like negative and zero values.\n- Optimize performance for large numbers.\n- Provide comprehensive documentation.\nWe will implement a simple function that checks if the inputs are integers and then verifies if one of the numbers is equal to the sum of the other two. The function will return false for non-integer inputs without raising an error, as per the competitive analysis and requirement pool. We will use Python's built-in capabilities to handle integer validation and arithmetic operations efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integer'\n    Explanation: The requirement specifies that all numbers must be integers for the function to return true. This means the function should first check if all inputs are integers.\n\n    'equal to the sum of the other two'\n    Explanation: This means that for any of the three numbers, it should be checked if it is equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    'equal to': This indicates a condition where one number must be exactly the same as the sum of the other two numbers. In code, this can be implemented using the equality operator (==).\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Check if all inputs are integers.\n2. If not, return False.\n3. Check if any one of the numbers is equal to the sum of the other two.\n4. Return True if such a condition is met, otherwise return False.\n\n# [edge case]\n    any_int(0, 0, 0) = True\n    Explanation: 0 is equal to the sum of 0 and 0, so the function should return True.\n\n    any_int(-1, -1, -2) = True\n    Explanation: -2 is equal to the sum of -1 and -1, so the function should return True.\n\n    any_int(1000000000, 500000000, 500000000) = True\n    Explanation: 1000000000 is equal to the sum of 500000000 and 500000000, so the function should return True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers all possible combinations of sums and checks for integer types.\n", "requirement analysis:\nThe function must accurately determine if any of the three integers is the sum of the other two. It should handle edge cases such as negative numbers, zero, and very large integers. Non-integer inputs should be rejected.\nrequirement pool:\n- The function must return True if one number is the sum of the other two.\n- The function must handle negative, zero, and large integer inputs.\n- The function should reject non-integer inputs.\n- Optimize for performance with large integers.\n- Maintain code simplicity and readability.\nWe will implement a simple Python function that checks if any of the three input numbers is the sum of the other two. The function will first verify that all inputs are integers, returning False if any input is not an integer. It will then check the sum condition for each number. The function will handle edge cases such as negative numbers, zero, and very large integers by leveraging Python's inherent support for arbitrary-precision integers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of the other two'\n    Explanation: This means that for any of the three numbers, it should be equal to the sum of the other two numbers.\n\n    'all numbers are integers'\n    Explanation: This means that the function should only return True if all inputs are integers, otherwise it should return False.\n\n# [phrase showing quantity relationship]\n    'equal to': This indicates that one of the numbers should be exactly the sum of the other two numbers. In code, this can be implemented using the equality operator (==).\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers. If not, return False.\n    2. Check if any of the three numbers is equal to the sum of the other two:\n       - Check if x == y + z\n       - Check if y == x + z\n       - Check if z == x + y\n    3. If any of these conditions are true, return True.\n    4. If none of these conditions are true, return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are zero, and each number is equal to the sum of the other two (0 = 0 + 0).\n\n    any_int(-5, -3, -8) = True\n    Explanation: -5 is equal to the sum of -3 and -8 (-5 = -3 + (-8)).\n\n    any_int(1000000000, 500000000, 500000000) = True\n    Explanation: The first number is equal to the sum of the other two (1000000000 = 500000000 + 500000000).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers all possible scenarios including negative numbers, zero, and very large integers.\n", "requirement analysis:\nThe function must accurately determine if any of the three input numbers is equal to the sum of the other two, ensuring all inputs are integers. It should handle edge cases such as negative numbers, zero, and very large integers. Non-integer inputs should result in a false return value.\nrequirement pool:\n- The function must return true if one number is the sum of the other two.\n- The function must handle negative, zero, and large integer inputs.\n- The function should reject non-integer inputs.\n- The function should be optimized for performance with large numbers.\n- The function should have clear documentation and examples.\nWe will implement a simple function that checks if any of the three input numbers is equal to the sum of the other two. The function will first verify that all inputs are integers, returning false if any input is not an integer. It will then check the condition for each number being the sum of the other two. The function will handle edge cases such as negative numbers, zero, and very large integers efficiently by leveraging Python's inherent support for arbitrary-precision integers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of the other two'\n    Explanation: This means that for any of the three numbers, it should be equal to the sum of the other two numbers.\n\n    'all numbers are integers'\n    Explanation: This means that the function should only return true if all inputs are integers, otherwise it should return false.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers. If not, return False.\n    2. Check if any of the three numbers is equal to the sum of the other two:\n       - Check if x == y + z\n       - Check if y == x + z\n       - Check if z == x + y\n    3. If any of these conditions are true, return True.\n    4. If none of these conditions are true, return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: 0 is equal to the sum of the other two zeros.\n    \n    any_int(1000000000, 500000000, 500000000) = True\n    Explanation: The first number is equal to the sum of the other two large numbers.\n    \n    any_int(-5, -3, -2) = True\n    Explanation: -5 is equal to the sum of -3 and -2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers all possible combinations and checks for integer type.\n", "requirement analysis:\nThe function must accurately determine if one of the three integer inputs is equal to the sum of the other two. It should reject non-integer inputs and handle edge cases such as negative numbers, zero, and very large integers efficiently.\nrequirement pool:\n- Implement integer validation for inputs\n- Ensure correct sum comparison logic\n- Handle edge cases for negative and zero values\n- Optimize performance for large integers\n- Provide user-friendly error messages for invalid inputs\nWe will implement a simple function using Python's built-in capabilities to check if one of the three integer inputs is equal to the sum of the other two. We will ensure that the inputs are integers and handle edge cases such as negative numbers, zero, and very large integers efficiently. The function will return False for non-integer inputs without providing error messages, as per the requirement analysis.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integer'\n    Explanation: The requirement specifies that all numbers must be integers, meaning they should not have any fractional or decimal component.\n\n    'sum of the other two'\n    Explanation: The function should check if any one of the three numbers is equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    'equal to': This indicates a condition where one number should be exactly the same as the sum of the other two numbers. In code, this can be implemented using the equality operator (==).\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers.\n    2. If any input is not an integer, return False.\n    3. Check if any one of the numbers is equal to the sum of the other two numbers.\n    4. Return True if the condition is met, otherwise return False.\n\n# [edge case]\n    any_int(0, 0, 0) = True\n    Explanation: Zero is an integer, and 0 + 0 = 0, so the function should return True.\n\n    any_int(-1, -1, -2) = True\n    Explanation: Negative numbers are valid integers, and -1 + (-1) = -2, so the function should return True.\n\n    any_int(1000000000, 500000000, 500000000) = True\n    Explanation: Very large integers are valid inputs, and 500000000 + 500000000 = 1000000000, so the function should return True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers integer validation and checks for equality among the sum of two numbers and the third number.\n", "requirement analysis:\nThe function must strictly check for integer inputs and return true only when one of the numbers equals the sum of the other two. It should handle edge cases such as negative numbers, zero, and large integers, ensuring robust performance across all scenarios.\nrequirement pool:\n- Implement integer validation for inputs.\n- Ensure correct sum comparison logic.\n- Handle edge cases like negative and large integers.\n- Return false for non-integer inputs.\n- Optimize for performance with large numbers.\nWe will implement a simple function using Python's built-in capabilities to check for integer inputs and perform the sum comparison. The function will strictly reject non-integer inputs and handle edge cases such as negative numbers, zero, and large integers without using any external libraries, ensuring efficient performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integer'\n    Explanation: The requirement specifies that all numbers must be integers, meaning they should not have any fractional component.\n\n    'sum of the other two'\n    Explanation: The requirement is to check if any one of the three numbers is equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    'equal to': This indicates a comparison where one number should be exactly the same as the sum of the other two numbers.\n    Implementation: Use the equality operator (==) to compare the sum of two numbers with the third number.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers.\n    2. Compare each number with the sum of the other two numbers.\n    3. Return True if any comparison is true; otherwise, return False.\n\n# [edge case]\n    any_int(0, 0, 0) = True\n    Explanation: Zero is an integer, and 0 + 0 = 0, so the function should return True.\n    \n    any_int(-1, -1, -2) = True\n    Explanation: Negative numbers are valid integers, and -1 + -1 = -2, so the function should return True.\n    \n    any_int(1000000000, 500000000, 500000000) = True\n    Explanation: Large integers are valid, and 500000000 + 500000000 = 1000000000, so the function should return True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers integer validation and sum comparison.\n", "requirement analysis:\nThe function must accurately determine if one of the three integer inputs equals the sum of the other two. It should return false for non-integer inputs and handle edge cases such as negative, zero, and very large numbers.\nrequirement pool:\n- Implement integer validation for inputs.\n- Ensure correct sum comparison logic.\n- Handle edge cases including negative and large numbers.\n- Return false for non-integer inputs.\n- Optimize performance for large number inputs.\nWe will implement a simple function that checks if any of the three input numbers is equal to the sum of the other two. The function will first validate that all inputs are integers. If any input is not an integer, the function will return false. This approach ensures that we handle edge cases such as negative numbers, zero, and very large numbers effectively. We will not use any external libraries as the task is straightforward and can be handled with basic Python operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integer'\n    Explanation: The requirement specifies that all numbers must be integers, meaning they should not have any decimal or fractional part.\n\n    'equal to the sum'\n    Explanation: This means that one of the numbers should be exactly equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    'equal to': This indicates a condition where one number must be exactly the same as the sum of the other two numbers. In code, this can be implemented using the equality operator `==`.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers. If not, return False.\n    2. Check if any of the three numbers is equal to the sum of the other two:\n       - Check if x == y + z\n       - Check if y == x + z\n       - Check if z == x + y\n    3. If any of these conditions are true, return True.\n    4. If none of these conditions are true, return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are zero, and 0 is equal to 0 + 0.\n\n    any_int(-1, -1, -2) = True\n    Explanation: -1 is equal to -1 + (-2).\n\n    any_int(1000000000, 500000000, 500000000) = True\n    Explanation: 1000000000 is equal to 500000000 + 500000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers all possible combinations and checks for integer inputs.\n", "requirement analysis:\nThe function must accurately determine if one of the three integer inputs equals the sum of the other two. It should return false for non-integer inputs and handle edge cases such as negative numbers, zero, and very large values efficiently.\nrequirement pool:\n- Implement integer validation for inputs.\n- Ensure correct sum condition checking.\n- Optimize performance for large numbers.\n- Handle edge cases like negative and zero values.\n- Provide clear error messages for invalid inputs.\nWe will implement a simple function using Python's built-in capabilities to check if one of the three integer inputs equals the sum of the other two. The function will validate that all inputs are integers and handle edge cases such as negative numbers, zero, and very large values efficiently. We will avoid using external libraries to keep the implementation straightforward and efficient.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integer'\n    Explanation: The requirement specifies that all numbers must be integers, meaning they should not have any fractional or decimal part.\n\n    'sum of the other two'\n    Explanation: This means that for any three numbers, one of them should be equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    'equal to': This indicates a condition where one number must be exactly the same as the sum of the other two numbers. In code, this can be implemented using the equality operator (==).\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers.\n    2. Verify if any one of the three numbers is equal to the sum of the other two.\n    3. Return True if such a condition is met, otherwise return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: 0 is equal to the sum of 0 and 0.\n    \n    any_int(-1, -1, -2) = True\n    Explanation: -2 is equal to the sum of -1 and -1.\n    \n    any_int(1000000000, 500000000, 500000000) = True\n    Explanation: 1000000000 is equal to the sum of 500000000 and 500000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers all possible combinations of sums and checks for integer types.\n", "requirement analysis:\nThe function must accurately determine if one of the three integers is equal to the sum of the other two, while handling edge cases such as negative numbers, zero, and very large integers. Non-integer inputs should return false.\nrequirement pool:\n- Accurate sum comparison for integer inputs\n- Handle edge cases including negative and zero values\n- Optimize performance for large numbers\n- Return false for non-integer inputs\n- Ensure code readability and maintainability\nWe will implement a simple function that checks if any of the three input numbers is equal to the sum of the other two. The function will first verify that all inputs are integers, returning false if any input is not an integer. It will then check the sum conditions. The function will handle edge cases such as negative numbers, zero, and very large integers by leveraging Python's inherent ability to manage large integers without overflow issues.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integer'\n    Explanation: The requirement specifies that all numbers must be integers, meaning they should not have any fractional or decimal component.\n\n    'sum of the other two'\n    Explanation: This means that for any of the three numbers, it should be equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    'equal to': This indicates a condition where one number must be exactly the sum of the other two numbers. In code, this can be implemented using the equality operator (==).\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers.\n    2. If any input is not an integer, return False.\n    3. Check if any of the three numbers is equal to the sum of the other two.\n    4. Return True if any such condition is met; otherwise, return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are zero, and each number is equal to the sum of the other two (0 + 0 = 0).\n\n    any_int(-1, -1, -2) = True\n    Explanation: -1 + -1 equals -2, so one number is equal to the sum of the other two.\n\n    any_int(1000000000, 500000000, 500000000) = True\n    Explanation: The sum of 500000000 and 500000000 equals 1000000000, so one number is equal to the sum of the other two.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers negative numbers, zero, and very large integers.\n", "requirement analysis:\nThe function must accurately determine if one of the three integer inputs is equal to the sum of the other two. It should handle edge cases such as negative numbers, zero, and large integers, while rejecting non-integer inputs.\nrequirement pool:\n- Accurate integer sum comparison\n- Edge case handling for negative and zero values\n- Performance optimization for large numbers\n- Rejection of non-integer inputs\n- User-friendly error messages\nWe will implement a simple function that checks if one of the three input numbers is equal to the sum of the other two. The function will first validate that all inputs are integers, and then perform the necessary arithmetic checks. We will use Python's built-in capabilities to handle large integers and ensure that the function is efficient. Edge cases such as negative numbers and zero will be naturally handled by the arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of the other two'\n    Explanation: This means that for any given three numbers, we need to check if one of them is equal to the sum of the other two numbers.\n\n    'integers'\n    Explanation: The requirement specifies that all numbers must be integers, meaning they should not have any fractional or decimal parts.\n\n# [phrase showing quantity relationship]\n    'equal to': This indicates that we need to check if one number is exactly the same as the sum of the other two numbers.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Validate that all inputs are integers.\n    2. Check if any of the three numbers is equal to the sum of the other two numbers.\n    3. Return True if the condition is met, otherwise return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: Zero is an integer, and 0 + 0 = 0, so the function should return True.\n    \n    any_int(-1, -1, -2) = True\n    Explanation: Negative numbers are integers, and -1 + (-1) = -2, so the function should return True.\n    \n    any_int(1000000000, 500000000, 500000000) = True\n    Explanation: Large integers are handled by Python, and 500000000 + 500000000 = 1000000000, so the function should return True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic naturally handles cases with zero, negative numbers, and large integers.\n", "requirement analysis:\nThe function must accurately determine if one of the three integer inputs is equal to the sum of the other two. It should return false for non-integer inputs and handle edge cases such as negative, zero, and very large numbers.\nrequirement pool:\n- Implement integer validation for inputs.\n- Ensure correct sum comparison logic.\n- Handle edge cases including negative and large numbers.\n- Return false for non-integer inputs.\n- Optimize for performance with large numbers.\nWe will implement a simple function that checks if any of the three input numbers is equal to the sum of the other two. The function will first validate that all inputs are integers. If any input is not an integer, the function will return false. The function will handle edge cases such as negative numbers, zero, and very large numbers by leveraging Python's inherent ability to handle large integers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integer'\n    Explanation: The requirement specifies that all numbers must be integers, meaning they should be whole numbers without any fractional or decimal part.\n\n    'sum of the other two'\n    Explanation: This means that for any of the three numbers, it should be equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    'equal to': This indicates a condition where one number must be exactly the same as the sum of the other two numbers. In code, this can be implemented using the equality operator (==).\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers.\n    2. If any input is not an integer, return False.\n    3. Check if any of the three numbers is equal to the sum of the other two.\n    4. Return True if the condition is met, otherwise return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are zero, and 0 is equal to the sum of 0 and 0.\n    \n    any_int(-1, -1, -2) = True\n    Explanation: -2 is equal to the sum of -1 and -1.\n    \n    any_int(1000000000, 500000000, 500000000) = True\n    Explanation: 1000000000 is equal to the sum of 500000000 and 500000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers negative numbers, zero, and very large numbers by checking integer type and using equality comparison.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [131, 131, 131, 131, 131, 131, 131, 131, 131, 131], "completion": "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three integers and returns True if one of the numbers is equal to the sum of the other two.\n    Returns False if any input is not an integer or if no such condition is met.\n\n    Args:\n        x (int): First integer.\n        y (int): Second integer.\n        z (int): Third integer.\n\n    Returns:\n        bool: True if one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Validate inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n\n    # Check if any number equals the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n\n# Example usage:\n# print(any_int(0, 0, 0))  # Expected output: True\n# print(any_int(-1, -1, -2))  # Expected output: True\n# print(any_int(1000000000, 500000000, 500000000))  # Expected output: True\n# print(any_int(1, 2, 3))  # Expected output: False\n", "passed": true, "pass": true, "pass_num": 10, "round": 153, "mutate_method": "add_1_sentence_at_end", "parent_index": 161}
