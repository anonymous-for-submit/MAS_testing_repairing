{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine', and return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": ["def check(sort_numbers):\n\tassert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one\") == 'one'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four three six\") == 'three four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one six four\") == 'one four six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two\") == 'one two'", "def check(sort_numbers):\n\tassert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four five five one one\") == 'one one four five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four zero two five\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight\") == 'eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six three\") == 'three six'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero\") == 'zero seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four three zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven\") == 'seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six nine three\") == 'three six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one nine three\") == 'one three four nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "def check(sort_numbers):\n\tassert sort_numbers('three five nine') == 'three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three\") == 'zero three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one seven\") == 'one four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six\") == 'six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"four two seven\") == 'two four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three four five\") == 'three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five four zero\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three seven two\") == 'two three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four six four one\") == 'one four four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight six three\") == 'three six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three five\") == 'three five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four\") == 'four'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero four one\") == 'zero one four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine\") == 'nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three\") == 'three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three four zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five\") == 'five'", "def check(sort_numbers):\n\tassert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers('three') == 'three'", "def check(sort_numbers):\n\tassert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six\") == 'six'", "def check(sort_numbers):\n\tassert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five\") == 'five eight'", "def check(sort_numbers):\n\tassert sort_numbers('') == ''", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine nine five\") == 'five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three\") == 'three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero\") == 'zero'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine zero\") == 'zero nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one six two seven\") == 'one two six seven'"], "test_case_list": ["assert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "assert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "assert sort_numbers(\"one\") == 'one'", "assert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "assert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "assert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "assert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "assert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "assert sort_numbers(\"four four three six\") == 'three four four six'", "assert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "assert sort_numbers(\"nine one six four\") == 'one four six nine'", "assert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "assert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "assert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "assert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "assert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "assert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "assert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "assert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "assert sort_numbers(\"one two\") == 'one two'", "assert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "assert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "assert sort_numbers(\"four five five one one\") == 'one one four five five'", "assert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "assert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "assert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "assert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "assert sort_numbers(\"four zero two five\") == 'zero two four five'", "assert sort_numbers(\"eight\") == 'eight'", "assert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "assert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "assert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "assert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "assert sort_numbers(\"six three\") == 'three six'", "assert sort_numbers(\"seven zero\") == 'zero seven'", "assert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "assert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "assert sort_numbers(\"four three zero\") == 'zero three four'", "assert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "assert sort_numbers(\"seven\") == 'seven'", "assert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "assert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "assert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "assert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "assert sort_numbers(\"six nine three\") == 'three six nine'", "assert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "assert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "assert sort_numbers(\"four one nine three\") == 'one three four nine'", "assert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "assert sort_numbers('three five nine') == 'three five nine'", "assert sort_numbers(\"zero three\") == 'zero three'", "assert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "assert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "assert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "assert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "assert sort_numbers(\"four one seven\") == 'one four seven'", "assert sort_numbers(\"seven six\") == 'six seven'", "assert sort_numbers(\"four two seven\") == 'two four seven'", "assert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "assert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "assert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "assert sort_numbers(\"nine three four five\") == 'three four five nine'", "assert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "assert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "assert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "assert sort_numbers(\"two five four zero\") == 'zero two four five'", "assert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "assert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "assert sort_numbers(\"three seven two\") == 'two three seven'", "assert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "assert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "assert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "assert sort_numbers(\"four four six four one\") == 'one four four four six'", "assert sort_numbers(\"eight six three\") == 'three six eight'", "assert sort_numbers(\"five three five\") == 'three five five'", "assert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "assert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "assert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "assert sort_numbers(\"four\") == 'four'", "assert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "assert sort_numbers(\"six zero four one\") == 'zero one four six'", "assert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "assert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "assert sort_numbers(\"nine\") == 'nine'", "assert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "assert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "assert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "assert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "assert sort_numbers(\"three\") == 'three'", "assert sort_numbers(\"three four zero\") == 'zero three four'", "assert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "assert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "assert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "assert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "assert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "assert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "assert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "assert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "assert sort_numbers(\"five\") == 'five'", "assert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "assert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "assert sort_numbers('three') == 'three'", "assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "assert sort_numbers(\"six\") == 'six'", "assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "assert sort_numbers(\"eight five\") == 'five eight'", "assert sort_numbers('') == ''", "assert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "assert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "assert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "assert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "assert sort_numbers(\"nine nine five\") == 'five nine nine'", "assert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "assert sort_numbers(\"seven three\") == 'three seven'", "assert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "assert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "assert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "assert sort_numbers(\"zero\") == 'zero'", "assert sort_numbers(\"nine zero\") == 'zero nine'", "assert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "assert sort_numbers(\"one six two seven\") == 'one two six seven'"], "nl": " Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    ", "func": "def sort_numbers(numbers: str) -> str:", "examples": ">>> sort_numbers('three one five')\n    'one three five'\n    ", "repair_prompt": ["def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine', and return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid options that can be chosen are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. You should return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "def sort_numbers(numbers: str) -> str:\n'''Input is a space-delimited string of numerals from 'zero' to 'nine', return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Sorts a space-delimited string of numerals from 'zero' to 'nine'.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A space-delimited string of numerals sorted from smallest to largest.\n             Returns an error message for invalid inputs.\n    \"\"\"\n    # Mapping of number words to their numerical values\n    number_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Reverse mapping of numerical values to their word representation\n    reverse_map = {v: k for k, v in number_map.items()}\n    \n    # Handle empty input case\n    if not numbers.strip():\n        return ''\n    \n    try:\n        # Convert words to numerical values\n        number_list = [number_map[word] for word in numbers.split()]\n        \n        # Sort the numerical values\n        sorted_numbers = sorted(number_list)\n        \n        # Convert sorted numerical values back to words\n        return ' '.join(reverse_map[num] for num in sorted_numbers)\n    \n    except KeyError:\n        # Handle invalid input case\n        return 'Invalid input: Please use numbers from zero to nine only.'\n    \n    except Exception as e:\n        # Handle any other unexpected errors\n        return f'Error: {str(e)}'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Sorts a space-delimited string of numerical words from 'zero' to 'nine'.\n\n    Args:\n        numbers (str): A space-delimited string of numerical words.\n\n    Returns:\n        str: A space-delimited string of sorted numerical words, or an error message if input is invalid.\n    \"\"\"\n    # Mapping of numerical words to their corresponding integer values\n    numerical_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Reverse mapping from integer values back to numerical words\n    reverse_map = {v: k for k, v in numerical_map.items()}\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Handle the case of an empty input string\n    if not words:\n        return ''\n\n    try:\n        # Convert words to their corresponding integer values\n        num_list = [numerical_map[word] for word in words]\n\n        # Sort the list of integers\n        sorted_nums = sorted(num_list)\n\n        # Convert the sorted integers back to their word form\n        sorted_words = [reverse_map[num] for num in sorted_nums]\n\n        # Join the sorted words into a single string separated by spaces\n        return ' '.join(sorted_words)\n\n    except KeyError:\n        # Return an error message if any word is not a valid numerical word\n        return \"Error: Invalid input detected.\"\n\n# Example usage:\n# print(sort_numbers('three one five'))  # Output: 'one three five'\n# print(sort_numbers('zero nine eight'))  # Output: 'zero eight nine'\n# print(sort_numbers('five five five'))  # Output: 'five five five'\n# print(sort_numbers('invalid input'))  # Output: 'Error: Invalid input detected.'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A string with numbers sorted from smallest to largest.\n    \"\"\"\n    # Mapping of word-based numbers to their numeric equivalents\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of numeric values back to word-based numbers\n    number_to_word = {v: k for k, v in word_to_number.items()}\n\n    # Handle empty input string\n    if not numbers.strip():\n        return ''\n\n    # Split the input string into a list of words\n    words = numbers.split()\n\n    # Convert each word to its numeric equivalent\n    try:\n        numeric_values = [word_to_number[word] for word in words]\n    except KeyError:\n        raise ValueError(\"Input contains invalid words. Only 'zero' to 'nine' are allowed.\")\n\n    # Sort the list of numeric values\n    numeric_values.sort()\n\n    # Convert the sorted numeric values back to their word form\n    sorted_words = [number_to_word[num] for num in numeric_values]\n\n    # Join the sorted words into a single string separated by spaces\n    sorted_string = ' '.join(sorted_words)\n\n    return sorted_string\n\n# Example usage:\n# print(sort_numbers('zero nine eight'))  # Output: 'zero eight nine'\n# print(sort_numbers('five five five'))   # Output: 'five five five'\n# print(sort_numbers(''))                 # Output: ''\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numeral words ('zero' to 'nine') from smallest to largest.\n\n    Args:\n        numbers (str): A space-delimited string of numeral words.\n\n    Returns:\n        str: A space-delimited string of sorted numeral words.\n    \"\"\"\n    # Mapping of numeral words to their corresponding numeric values\n    numeral_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Reverse mapping from numeric values to numeral words\n    value_to_numeral = {v: k for k, v in numeral_to_value.items()}\n\n    # Handle edge case for empty input\n    if not numbers.strip():\n        return ''\n\n    # Split the input string into individual numeral words\n    numeral_words = numbers.split()\n\n    # Convert numeral words to numeric values, handling invalid inputs\n    try:\n        numeric_values = [numeral_to_value[word] for word in numeral_words]\n    except KeyError:\n        return \"Error: Input contains invalid numeral words.\"\n\n    # Sort the numeric values\n    sorted_values = sorted(numeric_values)\n\n    # Convert sorted numeric values back to numeral words\n    sorted_numeral_words = [value_to_numeral[value] for value in sorted_values]\n\n    # Join the sorted numeral words into a space-delimited string\n    return ' '.join(sorted_numeral_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerical words ('zero' to 'nine') in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerical words.\n\n    Returns:\n        str: A space-delimited string of sorted numerical words.\n    \"\"\"\n    # Mapping of number words to their corresponding integer values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Mapping of integer values back to their corresponding number words\n    number_to_word = {v: k for k, v in word_to_number.items()}\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Handle edge case for empty input\n    if not words:\n        return ''\n\n    # Convert each word to its corresponding integer using the mapping\n    try:\n        number_list = [word_to_number[word] for word in words]\n    except KeyError:\n        # Return an error message if any word is not a valid number word\n        return \"Error: Input contains invalid words.\"\n\n    # Sort the list of integers\n    number_list.sort()\n\n    # Convert the sorted integers back to their word form using the mapping\n    sorted_words = [number_to_word[number] for number in number_list]\n\n    # Join the sorted words into a single string separated by spaces\n    sorted_string = ' '.join(sorted_words)\n\n    return sorted_string\n\n# Example usage:\n# print(sort_numbers('zero nine eight'))  # Output: 'zero eight nine'\n# print(sort_numbers('five five five'))  # Output: 'five five five'\n# print(sort_numbers(''))  # Output: ''\n# print(sort_numbers('ten'))  # Output: 'Error: Input contains invalid words.'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerical words ('zero' to 'nine') in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerical words.\n\n    Returns:\n        str: A space-delimited string of sorted numerical words.\n    \"\"\"\n    # Dictionary to map number words to their corresponding integer values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Dictionary to map numbers back to their word form\n    number_to_word = {v: k for k, v in word_to_number.items()}\n\n    # Handle edge case for empty input\n    if not numbers:\n        return ''\n\n    # Split the input string into a list of words\n    words = numbers.split()\n\n    # Convert each word to its corresponding integer using the dictionary\n    # Ignore words that are not valid number words\n    number_list = []\n    for word in words:\n        if word in word_to_number:\n            number_list.append(word_to_number[word])\n\n    # Sort the list of integers\n    number_list.sort()\n\n    # Convert the sorted integers back to their word form using the dictionary\n    sorted_words = [number_to_word[number] for number in number_list]\n\n    # Join the sorted words into a single string separated by spaces\n    sorted_string = ' '.join(sorted_words)\n\n    return sorted_string\n\n# Example usage:\n# print(sort_numbers('zero nine eight'))  # Output: 'zero eight nine'\n# print(sort_numbers('five five five'))   # Output: 'five five five'\n# print(sort_numbers(''))                 # Output: ''\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numeral words from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numeral words.\n\n    Returns:\n        str: A space-delimited string of numeral words sorted in ascending order.\n    \"\"\"\n    # Dictionary mapping numeral words to their corresponding numeric values\n    numeral_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Reverse dictionary mapping numeric values back to numeral words\n    number_to_numeral = {v: k for k, v in numeral_to_number.items()}\n    \n    # Handle edge case for empty input\n    if not numbers:\n        return ''\n    \n    # Split the input string into individual numeral words\n    numeral_words = numbers.split()\n    \n    # Convert numeral words to numeric values, ignoring invalid words\n    numeric_values = []\n    for word in numeral_words:\n        if word in numeral_to_number:\n            numeric_values.append(numeral_to_number[word])\n        else:\n            return f\"Error: Invalid numeral word '{word}' found in input.\"\n    \n    # Sort the numeric values\n    numeric_values.sort()\n    \n    # Map sorted numeric values back to numeral words\n    sorted_numeral_words = [number_to_numeral[value] for value in numeric_values]\n    \n    # Join the sorted numeral words into a space-delimited string and return it\n    return ' '.join(sorted_numeral_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n    \n    Parameters:\n    numbers (str): A space-delimited string of numerals.\n    \n    Returns:\n    str: A space-delimited string of numerals sorted in ascending order.\n    \"\"\"\n    # Mapping of word-based numerals to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Reverse mapping from integer values to word-based numerals\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Convert each word to its corresponding integer using the mapping\n    try:\n        integer_values = [numeral_to_int[word] for word in words]\n    except KeyError as e:\n        raise ValueError(f\"Invalid numeral '{e.args[0]}' found. Only numerals from 'zero' to 'nine' are allowed.\")\n    \n    # Sort the list of integers\n    integer_values.sort()\n    \n    # Convert the sorted integers back to their word representation using the mapping\n    sorted_words = [int_to_numeral[num] for num in integer_values]\n    \n    # Join the sorted words into a single string separated by spaces\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n\n# Example usage:\n# print(sort_numbers('three one five'))  # Output: 'one three five'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Sorts a space-delimited string of numeral words from 'zero' to 'nine'.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A string with numbers sorted from smallest to largest.\n    \"\"\"\n    # Mapping numeral words to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3,\n        'four': 4, 'five': 5, 'six': 6, 'seven': 7,\n        'eight': 8, 'nine': 9\n    }\n    \n    # Reverse mapping from integer values to numeral words\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n\n    # Handle edge case for empty input string\n    if not numbers.strip():\n        return ''\n\n    try:\n        # Split the input string into a list of numeral words\n        num_list = numbers.split()\n        \n        # Convert each numeral word to its corresponding integer\n        int_list = [numeral_to_int[num] for num in num_list]\n        \n        # Sort the list of integers\n        int_list.sort()\n        \n        # Convert the sorted integers back to their corresponding numeral words\n        sorted_numerals = [int_to_numeral[i] for i in int_list]\n        \n        # Join the sorted numeral words into a single space-delimited string\n        return ' '.join(sorted_numerals)\n    except KeyError:\n        # Return an error message for invalid inputs\n        return \"Invalid input\"\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A space-delimited string with numbers sorted from smallest to largest.\n             Returns an error message if invalid input is detected.\n    \"\"\"\n    # Mapping of word-based numbers to their numeric equivalents\n    num_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Handle the edge case of an empty input string\n    if not numbers:\n        return ''\n    \n    try:\n        # Split the input string into individual words\n        words = numbers.split()\n        \n        # Convert each word to its numeric equivalent using the dictionary\n        num_list = [num_map[word] for word in words]\n        \n        # Sort the list of numeric values\n        num_list.sort()\n        \n        # Convert the sorted numeric values back to their word form\n        sorted_words = [list(num_map.keys())[list(num_map.values()).index(num)] for num in num_list]\n        \n        # Join the sorted words into a single string separated by spaces\n        return ' '.join(sorted_words)\n    \n    except KeyError:\n        # Return an error message if any word is not a valid number\n        return \"Error: Invalid input detected.\"\n"], "plans": ["requirement analysis:\nThe function should accurately interpret the input string of number words and sort them based on their numerical value. It should handle invalid inputs gracefully and return a sorted string in a readable format.\nrequirement pool:\n- Implement the main sorting logic for number words.\n- Handle edge cases such as empty strings or invalid inputs.\n- Optimize the function for performance.\n- Ensure the output format is user-friendly.\n- Include error handling for unsupported inputs.\nWe will implement a function that maps the input number words to their corresponding numerical values, sort these values, and then map them back to their word representation. We will use a dictionary for the mapping and handle edge cases such as empty strings or invalid inputs by returning an appropriate message.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where each word is separated by a space, representing numbers in word form.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The input consists of words that represent numbers from 0 to 9.\n\n    'sorted from smallest to largest'\n    Explanation: The output should be the input numbers sorted in ascending order based on their numerical value.\n\n# [phrase showing quantity relationship]\n    'smallest to largest': This indicates an ascending order sort based on numerical values.\n\n# [degree adverb] \n    'smallest': Refers to the lowest numerical value in the list.\n    'largest': Refers to the highest numerical value in the list.\n\n# [code logic]\n1. Create a dictionary to map number words ('zero' to 'nine') to their corresponding numerical values (0 to 9).\n2. Split the input string into a list of words.\n3. Convert each word in the list to its corresponding numerical value using the dictionary.\n4. Sort the list of numerical values.\n5. Convert the sorted numerical values back to their word representation using the dictionary.\n6. Join the sorted words into a single string separated by spaces and return it.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty string as there are no numbers to sort.\n\n    sort_numbers('zero nine eight') = 'eight nine zero'\n    Explanation: The words 'zero', 'nine', and 'eight' should be sorted numerically as 0, 8, and 9, resulting in 'zero eight nine'.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All numbers are the same, so the sorted order remains unchanged.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases such as empty strings or invalid inputs.\n    \n```python\ndef sort_numbers(numbers: str) -> str:\n    num_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    word_map = {v: k for k, v in num_map.items()}\n    \n    if not numbers.strip():\n        return ''\n    \n    try:\n        num_list = [num_map[word] for word in numbers.split()]\n        num_list.sort()\n        return ' '.join(word_map[num] for num in num_list)\n    except KeyError:\n        return \"Invalid input\"\n```\n", "requirement analysis:\nThe function should accurately sort a space-delimited string of numerical words from 'zero' to 'nine'. It must handle all valid inputs and return a correctly ordered string. Edge cases such as empty strings or invalid words should be managed gracefully.\nrequirement pool:\n- Implement the main sorting algorithm for numerical words.\n- Ensure the function handles edge cases like empty strings.\n- Optimize performance for quick processing.\n- Enhance user experience with clear error messages.\n- Provide comprehensive documentation for the function.\nWe will implement a function that maps numerical words to their corresponding integer values, sorts them, and then maps them back to words. We will use a dictionary for mapping and Python's built-in sorting capabilities for performance optimization. The function will handle edge cases like empty strings and invalid words by returning an appropriate error message.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces, representing numbers in word form.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The valid inputs are words representing numbers from zero to nine, which need to be converted to integers for sorting.\n\n# [phrase showing quantity relationship]\n    'smallest to largest'\n    Explanation: The requirement specifies sorting the numbers in ascending order, from the smallest numerical value to the largest.\n\n# [degree adverb]\n    'smallest': Refers to the lowest numerical value in the list.\n    'largest': Refers to the highest numerical value in the list.\n\n# [code logic]\n    1. Create a dictionary mapping each word ('zero' to 'nine') to its corresponding integer value.\n    2. Split the input string into individual words.\n    3. Convert each word to its integer value using the dictionary.\n    4. Sort the list of integers.\n    5. Convert the sorted integers back to their word form using the dictionary.\n    6. Join the sorted words into a single string separated by spaces and return it.\n\n# [edge case]\n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string as there are no numbers to sort.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The words 'zero', 'nine', and 'eight' are converted to integers 0, 9, and 8 respectively, sorted as 0, 8, 9, and then converted back to words.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All words are the same, so sorting does not change the order.\n\n# [extra code for edge case]\n    We need extra code to handle invalid words.\n        def sort_numbers(numbers: str) -> str:\n            num_map = {\n                'zero': 0, 'one': 1, 'two': 2, 'three': 3,\n                'four': 4, 'five': 5, 'six': 6, 'seven': 7,\n                'eight': 8, 'nine': 9\n            }\n            if not numbers:\n                return ''\n            try:\n                num_list = [num_map[word] for word in numbers.split()]\n                sorted_nums = sorted(num_list)\n                sorted_words = [list(num_map.keys())[list(num_map.values()).index(num)] for num in sorted_nums]\n                return ' '.join(sorted_words)\n            except KeyError:\n                return \"Invalid input: contains words outside 'zero' to 'nine'\"\n", "requirement analysis:\nThe function should accurately convert word-based numbers to their numeric equivalents, sort them, and return the sorted list in word form. It should handle edge cases such as invalid inputs and provide meaningful error messages.\nrequirement pool:\n- Implement the main sorting logic for word-based numbers.\n- Develop error handling for invalid inputs.\n- Optimize the function for performance.\n- Enhance the user interface for better usability.\n- Add support for additional languages.\nWe will implement a function that maps word-based numbers to their numeric equivalents using a dictionary, sort them numerically, and then convert them back to word form. We will use Python's built-in sorting capabilities for performance optimization. Error handling will be implemented to manage invalid inputs gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces, each representing a number from 'zero' to 'nine'.\n\n    'sort from smallest to largest'\n    Explanation: The task is to order the numbers in ascending order based on their numeric value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': means the lowest numeric value in the list.\n    'largest': means the highest numeric value in the list.\n\n# [code logic]\n1. Create a dictionary to map word-based numbers to their numeric equivalents (e.g., 'zero' -> 0, 'one' -> 1, etc.).\n2. Split the input string into a list of words.\n3. Convert each word to its numeric equivalent using the dictionary.\n4. Sort the list of numeric values.\n5. Convert the sorted numeric values back to their word form using the dictionary.\n6. Join the sorted words into a single string separated by spaces.\n7. Return the resulting string.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string since there are no numbers to sort.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The words 'zero', 'nine', and 'eight' are converted to 0, 9, and 8 respectively, sorted as 0, 8, 9, and then converted back to 'zero', 'eight', 'nine'.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All numbers are the same, so sorting does not change the order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of converting, sorting, and converting back handles these cases naturally.\n", "requirement analysis:\nThe function should accurately interpret and sort a space-delimited string of numeral words from 'zero' to 'nine'. It must handle edge cases such as empty strings or invalid inputs gracefully, ensuring a robust user experience.\nrequirement pool:\n- Implement numeral word sorting functionality\n- Handle invalid inputs gracefully\n- Optimize performance for quick processing\n- Provide clear error messages for invalid inputs\n- Ensure compatibility with various input formats\nWe will implement a function that maps numeral words to their corresponding numeric values, sorts them, and then maps them back to numeral words. We will use Python's built-in sorting capabilities for efficient performance. The function will handle invalid inputs by returning a clear error message.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where each numeral word is separated by a space.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The valid inputs are the words representing numbers from 0 to 9.\n\n# [phrase showing quantity relationship]\n    'smallest to largest'\n    Explanation: The requirement specifies sorting the numeral words based on their numeric values, from the smallest number (zero) to the largest number (nine).\n\n# [degree adverb]\n    'smallest': Refers to the numeral word representing the lowest numeric value, which is \"zero\".\n    'largest': Refers to the numeral word representing the highest numeric value, which is \"nine\".\n\n# [code logic]\n1. Create a mapping of numeral words to their corresponding numeric values.\n2. Split the input string into individual numeral words.\n3. Convert each numeral word to its numeric value using the mapping.\n4. Sort the numeric values.\n5. Convert the sorted numeric values back to numeral words using the reverse mapping.\n6. Join the sorted numeral words into a space-delimited string and return it.\n\n# [edge case]\n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string as there are no numbers to sort.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The input contains the smallest and largest possible numeral words, and they should be sorted accordingly.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All numeral words are the same, so the sorted output remains unchanged.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not numbers.strip():\n            return ''\n        (other code)\n", "requirement analysis:\nThe function should accurately sort numerical words from 'zero' to 'nine'. It must handle edge cases such as empty strings and invalid inputs gracefully. Performance optimization is crucial for quick processing.\nrequirement pool:\n- Implement the main sorting algorithm for numerical words.\n- Handle edge cases like empty strings and invalid inputs.\n- Optimize performance for quick processing.\n- Enhance user experience with clear error messages.\n- Ensure compatibility with various input formats.\nWe will implement a function that maps numerical words to their corresponding integer values, sort these integers, and then map them back to their respective words. We will use Python's built-in sorting capabilities for efficient processing. The function will handle edge cases such as empty strings and invalid inputs by returning appropriate error messages or an empty string.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces, representing numbers in word form.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The valid inputs are words representing numbers from 0 to 9.\n\n# [phrase showing quantity relationship]\n    'smallest to largest'\n    Explanation: The requirement is to sort the numbers in ascending order based on their numerical value.\n\n# [degree adverb]\n    'smallest': Refers to the lowest numerical value in the list.\n    'largest': Refers to the highest numerical value in the list.\n\n# [code logic]\n    1. Create a mapping of number words to their corresponding integer values.\n    2. Split the input string into individual words.\n    3. Convert each word to its corresponding integer using the mapping.\n    4. Sort the list of integers.\n    5. Convert the sorted integers back to their word form using the mapping.\n    6. Join the sorted words into a single string separated by spaces.\n    7. Return the sorted string.\n\n# [edge case]\n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string as there are no numbers to sort.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The words 'zero', 'nine', and 'eight' should be sorted based on their numerical values (0, 9, 8), resulting in 'zero eight nine'.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All words are the same, so sorting does not change the order.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not numbers:\n            return ''\n        # Additional code for handling invalid inputs can be added here if necessary.\n        (other code)\n", "requirement analysis:\nThe function should accurately sort numerical words from 'zero' to 'nine'. It must handle edge cases such as empty strings and invalid inputs gracefully, ensuring a seamless user experience. Performance optimization is crucial for quick processing.\nrequirement pool:\n- Accurate sorting of numerical words\n- Graceful handling of edge cases\n- Optimized performance for quick processing\n- User-friendly error messages for invalid inputs\n- Support for large input strings\nWe will implement a function that maps numerical words to their corresponding integer values, sort them, and then map them back to words. We will use a dictionary for mapping and handle edge cases such as empty strings and invalid inputs by returning an appropriate error message or ignoring invalid inputs. The function will be optimized for quick processing using Python's built-in sorting capabilities.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where each word is separated by a space, representing numbers in word form.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The valid inputs are words representing numbers from 0 to 9.\n\n    'sorted from smallest to largest'\n    Explanation: The output should be the input words rearranged in order of their numerical value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest to largest': means that the numbers should be sorted in ascending order.\n\n# [code logic]\n1. Create a dictionary to map number words to their corresponding integer values.\n2. Split the input string into a list of words.\n3. Convert each word to its corresponding integer using the dictionary.\n4. Sort the list of integers.\n5. Convert the sorted integers back to their word form using the dictionary.\n6. Join the sorted words into a single string separated by spaces.\n7. Return the sorted string.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The words 'zero', 'nine', and 'eight' should be sorted numerically as 0, 8, 9.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All words are the same, so the output remains unchanged.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not numbers:\n            return ''\n        (other code)\n", "requirement analysis:\nThe requirement is to develop a function that sorts a space-delimited string of numeral words from 'zero' to 'nine'. The function should handle typical edge cases and provide a user-friendly experience.\nrequirement pool:\n- Implement the main sorting function for numeral words.\n- Handle edge cases such as empty strings or invalid inputs.\n- Optimize the function for performance with longer strings.\n- Provide clear error messages for invalid inputs.\n- Ensure compatibility with various input formats.\nWe will implement a function that maps numeral words to their corresponding numeric values using a dictionary. The function will sort these numeric values and then map them back to numeral words for the output. We will use Python's built-in sorting capabilities for efficiency. The function will handle edge cases such as empty strings and invalid inputs by returning appropriate error messages.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces, representing numbers in word form.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The input consists of words that represent numbers from 0 to 9.\n\n# [phrase showing quantity relationship]\n    'smallest to largest'\n    Explanation: The requirement is to sort the numbers in ascending order based on their numeric value.\n\n# [degree adverb]\n    'smallest': Refers to the lowest numeric value in the list.\n    'largest': Refers to the highest numeric value in the list.\n\n# [code logic]\n1. Create a dictionary mapping numeral words to their corresponding numeric values.\n2. Split the input string into individual numeral words.\n3. Convert each numeral word to its numeric value using the dictionary.\n4. Sort the numeric values.\n5. Map the sorted numeric values back to numeral words using the dictionary.\n6. Join the sorted numeral words into a space-delimited string and return it.\n\n# [edge case]\n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The words \"zero\", \"nine\", and \"eight\" are sorted based on their numeric values (0, 9, 8) resulting in 'zero eight nine'.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All words are the same, so the sorted output is identical to the input.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not numbers:\n            return ''\n        (other code)\n", "requirement analysis:\nThe function should accurately interpret and sort word-based numerals from 'zero' to 'nine'. It must handle edge cases such as empty strings or invalid inputs gracefully, ensuring a robust user experience.\nrequirement pool:\n- Implement the main sorting algorithm for word-based numerals.\n- Handle edge cases like empty strings or invalid inputs.\n- Optimize performance for large input strings.\n- Ensure compatibility with different Python versions.\n- Provide comprehensive documentation and examples.\nWe will implement a function that maps word-based numerals to their corresponding integer values, sort these integers, and then map them back to their word representation. This approach ensures accurate sorting and handles edge cases by checking for valid inputs. We will use Python's built-in sorting capabilities for optimal performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces, representing numbers in word form.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The input consists of words that represent numbers from 0 to 9.\n\n# [phrase showing quantity relationship]\n    'smallest to largest': means sorting the numbers in ascending order.\n\n# [degree adverb] \n    'smallest': means the lowest numerical value.\n    'largest': means the highest numerical value.\n\n# [code logic]\n    1. Create a mapping of word-based numerals to their corresponding integer values.\n    2. Split the input string into individual words.\n    3. Convert each word to its corresponding integer using the mapping.\n    4. Sort the list of integers.\n    5. Convert the sorted integers back to their word representation using the mapping.\n    6. Join the sorted words into a single string separated by spaces.\n    7. Return the sorted string.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string as there are no numbers to sort.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The words 'zero', 'nine', and 'eight' are sorted based on their numerical values (0, 9, 8), resulting in 'zero eight nine'.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All words are the same, so the sorted output is identical to the input.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles empty strings and repeated numbers naturally through sorting and mapping.\n", "requirement analysis:\nThe requirement is to develop a function that sorts a space-delimited string of numerals from 'zero' to 'nine'. The function should handle various input scenarios, including empty strings and invalid inputs, and return a correctly sorted string.\nrequirement pool:\n- Implement the main sorting function for numeral strings.\n- Handle edge cases such as empty strings and invalid inputs.\n- Optimize the function for performance.\n- Develop a user-friendly interface for input and output.\n- Ensure compatibility with various input formats.\nWe will implement a function that maps numeral words to their corresponding integer values, sorts these integers, and then maps them back to numeral words. We will use a dictionary for mapping and handle edge cases such as empty strings and invalid inputs by returning an appropriate message or an empty string. The function will be optimized for performance by using efficient sorting algorithms.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces, each representing a numeral from 'zero' to 'nine'.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The input consists of words that represent numbers from 0 to 9.\n\n    'sorted from smallest to largest'\n    Explanation: The output should be the input numerals arranged in ascending order based on their numeric value.\n\n# [phrase showing quantity relationship]\n    'smallest to largest': This indicates an ascending order sort based on numeric values.\n\n# [degree adverb] \n    'smallest': Refers to the lowest numeric value in the list.\n    'largest': Refers to the highest numeric value in the list.\n\n# [code logic]\n1. Create a dictionary to map numeral words ('zero' to 'nine') to their corresponding integer values.\n2. Split the input string into a list of numeral words.\n3. Convert each numeral word to its corresponding integer using the dictionary.\n4. Sort the list of integers.\n5. Convert the sorted integers back to their corresponding numeral words using the dictionary.\n6. Join the sorted numeral words into a single space-delimited string and return it.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty string as there are no numerals to sort.\n\n    sort_numbers('zero nine eight') = 'eight nine zero'\n    Explanation: The numerals 'zero', 'nine', and 'eight' correspond to 0, 9, and 8 respectively. Sorted, they become 0, 8, 9, which map back to 'zero', 'eight', 'nine'.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All numerals are the same, so sorting does not change the order.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n```python\ndef sort_numbers(numbers: str) -> str:\n    numeral_to_int = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3,\n        'four': 4, 'five': 5, 'six': 6, 'seven': 7,\n        'eight': 8, 'nine': 9\n    }\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n\n    if not numbers.strip():\n        return ''\n\n    try:\n        num_list = numbers.split()\n        int_list = [numeral_to_int[num] for num in num_list]\n        int_list.sort()\n        sorted_numerals = [int_to_numeral[i] for i in int_list]\n        return ' '.join(sorted_numerals)\n    except KeyError:\n        return \"Invalid input\"\n```\nThis code handles empty strings and invalid inputs by returning an appropriate message or an empty string.\n", "requirement analysis:\nThe function should take a string of numbers in word form, validate the input, and return a sorted string. It should handle errors gracefully and provide clear output.\nrequirement pool:\n- Implement the main sorting functionality.\n- Add input validation to handle invalid words.\n- Optimize the function for performance.\n- Enhance the user interface for better usability.\n- Include comprehensive error messages.\nWe will implement a function that maps word-based numbers to their numeric equivalents, sorts them, and then maps them back to their word form. We'll use a dictionary for mapping and handle invalid inputs by returning an error message. The function will be optimized for performance by using Python's built-in sorting capabilities.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces, representing numbers in word form.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The valid inputs are words representing numbers from zero to nine.\n\n# [phrase showing quantity relationship]\n    'smallest to largest': This indicates the need to sort the numbers in ascending order.\n\n# [degree adverb]\n    'smallest': Refers to the lowest numerical value in the list.\n    'largest': Refers to the highest numerical value in the list.\n\n# [code logic]\n1. Create a dictionary mapping word-based numbers to their numeric equivalents.\n2. Split the input string into individual words.\n3. Convert each word to its numeric equivalent using the dictionary.\n4. Sort the list of numeric values.\n5. Convert the sorted numeric values back to their word form using the dictionary.\n6. Join the sorted words into a single string separated by spaces.\n7. Return the sorted string.\n\n# [edge case]\n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The words 'zero', 'nine', and 'eight' should be sorted numerically as 0, 8, 9, and then converted back to 'zero', 'eight', 'nine'.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All words are the same, so sorting does not change the order.\n\n# [extra code for edge case]\n    We need extra code to handle invalid inputs.\n        def sort_numbers(numbers: str) -> str:\n            num_map = {\n                'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n            }\n            if not numbers:\n                return ''\n            try:\n                num_list = [num_map[word] for word in numbers.split()]\n                num_list.sort()\n                sorted_words = [list(num_map.keys())[list(num_map.values()).index(num)] for num in num_list]\n                return ' '.join(sorted_words)\n            except KeyError:\n                return \"Error: Invalid input detected.\"\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [121, 121, 121, 121, 121, 121, 121, 121, 121, 121], "completion": "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A space-delimited string with numbers sorted from smallest to largest.\n             Returns an error message if invalid input is detected.\n    \"\"\"\n    # Mapping of word-based numbers to their numeric equivalents\n    num_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Handle the edge case of an empty input string\n    if not numbers:\n        return ''\n    \n    try:\n        # Split the input string into individual words\n        words = numbers.split()\n        \n        # Convert each word to its numeric equivalent using the dictionary\n        num_list = [num_map[word] for word in words]\n        \n        # Sort the list of numeric values\n        num_list.sort()\n        \n        # Convert the sorted numeric values back to their word form\n        sorted_words = [list(num_map.keys())[list(num_map.values()).index(num)] for num in num_list]\n        \n        # Join the sorted words into a single string separated by spaces\n        return ' '.join(sorted_words)\n    \n    except KeyError:\n        # Return an error message if any word is not a valid number\n        return \"Error: Invalid input detected.\"\n", "passed": true, "pass": true, "pass_num": 10, "round": 689, "mutate_method": "condense_two2one", "parent_index": 362}
