{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a provided string, switch lowercase letters to uppercase, and uppercase letters to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "entry_point": "flip_case", "canonical_solution": "    return string.swapcase()\n", "test": ["def check(flip_case):\n\tassert flip_case(\"=Uft>^xAJt~M\") == '=uFT>^XajT~m'", "def check(flip_case):\n\tassert flip_case(\"CsgXBCATeQmYHhTMBoGuEM dGUDqazbndCFMtLL vmY\") == 'cSGxbcatEqMyhHtmbOgUem DgudQAZBNDcfmTll VMy'", "def check(flip_case):\n\tassert flip_case(\"w\") == 'W'", "def check(flip_case):\n\tassert flip_case(\"eIgaNO JtyWwkDSdVTrVoqClhNFrHNqDBl UInCVrviH\") == 'EiGAno jTYwWKdsDvtRvOQcLHnfRhnQdbL uiNcvRVIh'", "def check(flip_case):\n\tassert flip_case(\"FdR\") == 'fDr'", "def check(flip_case):\n\tassert flip_case(\"tR#Et^#\") == 'Tr#eT^#'", "def check(flip_case):\n\tassert flip_case(\"L@j:tM-_?Fgc\") == 'l@J:Tm-_?fGC'", "def check(flip_case):\n\tassert flip_case(\"ez\") == 'EZ'", "def check(flip_case):\n\tassert flip_case(\"F_LHcfxbO\") == 'f_lhCFXBo'", "def check(flip_case):\n\tassert flip_case(\"xDFZwXjexGGcNsQGWKFfWrVIoHZYFFhWCRQJpnfL\") == 'XdfzWxJEXggCnSqgwkfFwRviOhzyffHwcrqjPNFl'", "def check(flip_case):\n\tassert flip_case(\"CnpipxUmlSdCSmHdbyDoMlbssWpLHcyKnJlsulPxWNPHi\") == 'cNPIPXuMLsDcsMhDBYdOmLBSSwPlhCYkNjLSULpXwnphI'", "def check(flip_case):\n\tassert flip_case(\"vqp\") == 'VQP'", "def check(flip_case):\n\tassert flip_case(\"f<SH\") == 'F<sh'", "def check(flip_case):\n\tassert flip_case(\"tBDUC ZKFZKtFVvqmhzUltjFzOWNXldpEHOAKJIp\") == 'Tbduc zkfzkTfvVQMHZuLTJfZownxLDPehoakjiP'", "def check(flip_case):\n\tassert flip_case(\"+>gY~\") == '+>Gy~'", "def check(flip_case):\n\tassert flip_case(\"BlmIOOJIkOnKWOtKuudPt  sUUPPNZZbQKiIHsNzFe\") == 'bLMioojiKoNkwoTkUUDpT  SuuppnzzBqkIihSnZfE'", "def check(flip_case):\n\tassert flip_case(\"JXCxNsvL\") == 'jxcXnSVl'", "def check(flip_case):\n\tassert flip_case(\"gq\") == 'GQ'", "def check(flip_case):\n\tassert flip_case(\"v\") == 'V'", "def check(flip_case):\n\tassert flip_case(\"RkocroIYw pMJxfpXxLucXAIvDjwlkIeJBCXJsxMAH\") == 'rKOCROiyW PmjXFPxXlUCxaiVdJWLKiEjbcxjSXmah'", "def check(flip_case):\n\tassert flip_case(\"JVKSQnhMMEPEXaJBBgEbTmkMCSWcebmFckHoj\") == 'jvksqNHmmepexAjbbGeBtMKmcswCEBMfCKhOJ'", "def check(flip_case):\n\tassert flip_case(\"gif\") == 'GIF'", "def check(flip_case):\n\tassert flip_case(\"g gCvDFeq NvBvqUNjjIldrkmFZCCTkJACipqozhZZ\") == 'G GcVdfEQ nVbVQunJJiLDRKMfzcctKjacIPQOZHzz'", "def check(flip_case):\n\tassert flip_case(\"rPxMsdbinpIxuZkSMNhmkYSJ DaYPCubXFgtuGbdtUXBR\") == 'RpXmSDBINPiXUzKsmnHMKysj dAypcUBxfGTUgBDTuxbr'", "def check(flip_case):\n\tassert flip_case(\"vzhEUikjmBtxkJcpaTRiuEurpoJXgLCmmSGttGsfOv\") == 'VZHeuIKJMbTXKjCPAtrIUeURPOjxGlcMMsgTTgSFoV'", "def check(flip_case):\n\tassert flip_case(\"ishBtMJcStzZVLuiiCdRPaVgPIsPMZkvSjJna\") == 'ISHbTmjCsTZzvlUIIcDrpAvGpiSpmzKVsJjNA'", "def check(flip_case):\n\tassert flip_case(\"qn\") == 'QN'", "def check(flip_case):\n\tassert flip_case(\"pCKgJaaQZHzRwxdwpqCZvoRlbvqLfrtdHlSrrqyl\") == 'PckGjAAqzhZrWXDWPQczVOrLBVQlFRTDhLsRRQYL'", "def check(flip_case):\n\tassert flip_case(\"k\") == 'K'", "def check(flip_case):\n\tassert flip_case(\"xOEweGnFamRzetSvZkSCZbKrjxTcGdWzTWBsbETPk auL\") == 'XoeWEgNfAMrZETsVzKsczBkRJXtCgDwZtwbSBetpK AUl'", "def check(flip_case):\n\tassert flip_case(\"WVlvlJraPwOUwyOOhbDSADCInroOCMzpaSnUubOH\") == 'wvLVLjRApWouWYooHBdsadciNROocmZPAsNuUBoh'", "def check(flip_case):\n\tassert flip_case(\"lb\") == 'LB'", "def check(flip_case):\n\tassert flip_case(\"AjUCdQIZXemhRaQZOkgJVvpYPUDPNmjKIPhQzZmAQIX\") == 'aJucDqizxEMHrAqzoKGjvVPypudpnMJkipHqZzMaqix'", "def check(flip_case):\n\tassert flip_case(\"~S*VzmzMvqpR\") == '~s*vZMZmVQPr'", "def check(flip_case):\n\tassert flip_case(\"BBx~!|/^\") == 'bbX~!|/^'", "def check(flip_case):\n\tassert flip_case(\"zg\") == 'ZG'", "def check(flip_case):\n\tassert flip_case(\"kydGvfiOVOgOxStzNHakGRVZUzaeQtEDgWqRJJpfe\") == 'KYDgVFIovoGoXsTZnhAKgrvzuZAEqTedGwQrjjPFE'", "def check(flip_case):\n\tassert flip_case(\"lhp\") == 'LHP'", "def check(flip_case):\n\tassert flip_case(\"jfu\") == 'JFU'", "def check(flip_case):\n\tassert flip_case(\"jbTsYZxZTBwOTezydywllWFUrvTWBHXpvMsIY\") == 'JBtSyzXztbWotEZYDYWLLwfuRVtwbhxPVmSiy'", "def check(flip_case):\n\tassert flip_case(\"vVvmxSIyqihZXowcxzQxqSKxpnCpSSkCXeRBXTHyMl\") == 'VvVMXsiYQIHzxOWCXZqXQskXPNcPssKcxErbxthYmL'", "def check(flip_case):\n\tassert flip_case(\"QwnaAlMgJSZcTaBgprrbFezVmYCdMsWyxskaPqenOH\") == 'qWNAaLmGjszCtAbGPRRBfEZvMycDmSwYXSKApQENoh'", "def check(flip_case):\n\tassert flip_case(\"o=c_/?QU~q\") == 'O=C_/?qu~Q'", "def check(flip_case):\n\tassert flip_case(\"ds\") == 'DS'", "def check(flip_case):\n\tassert flip_case(\"zdp\") == 'ZDP'", "def check(flip_case):\n\tassert flip_case(\"hd\") == 'HD'", "def check(flip_case):\n\tassert flip_case(\"jBVXuMXKDuzctqITdcXyikINVSCmKdXbcxhnT\") == 'JbvxUmxkdUZCTQitDCxYIKinvscMkDxBCXHNt'", "def check(flip_case):\n\tassert flip_case(\"ugd\") == 'UGD'", "def check(flip_case):\n\tassert flip_case(\"LAszIcfMteqqYNwFzpJQolmECkmMmMLiyWgtidbdJUaaA\") == 'laSZiCFmTEQQynWfZPjqOLMecKMmMmlIYwGTIDBDjuAAa'", "def check(flip_case):\n\tassert flip_case(\"RbUFL/M\") == 'rBufl/m'", "def check(flip_case):\n\tassert flip_case('Hello!') == 'hELLO!'", "def check(flip_case):\n\tassert flip_case(\"n\") == 'N'", "def check(flip_case):\n\tassert flip_case(\"WF~h/oG^\") == 'wf~H/Og^'", "def check(flip_case):\n\tassert flip_case(\"pzp\") == 'PZP'", "def check(flip_case):\n\tassert flip_case(\"+K|eG\") == '+k|Eg'", "def check(flip_case):\n\tassert flip_case(\"dzpm pZUpHNjdpIMw BmQd otqoasshKCFtpf\") == 'DZPM PzuPhnJDPimW bMqD OTQOASSHkcfTPF'", "def check(flip_case):\n\tassert flip_case(\"xmx\") == 'XMX'", "def check(flip_case):\n\tassert flip_case(\"*~=I\") == '*~=i'", "def check(flip_case):\n\tassert flip_case(\"d!C&e?Gl\") == 'D!c&E?gL'", "def check(flip_case):\n\tassert flip_case(\"QNANcSJRDzmQFD RdGOsUHyADvXPqBWXQQuDzqlQkYucV\") == 'qnanCsjrdZMqfd rDgoSuhYadVxpQbwxqqUdZQLqKyUCv'", "def check(flip_case):\n\tassert flip_case(\"#QSfHF:$&%\") == '#qsFhf:$&%'", "def check(flip_case):\n\tassert flip_case(\"?fTt><k\") == '?FtT><K'", "def check(flip_case):\n\tassert flip_case(\"rpd\") == 'RPD'", "def check(flip_case):\n\tassert flip_case(\"PnHqJfQuNAYhthlFbMAQuoFHTWWNssJuqEsyxCgEkcDUh\") == 'pNhQjFqUnayHTHLfBmaqUOfhtwwnSSjUQeSYXcGeKCduH'", "def check(flip_case):\n\tassert flip_case(\"j\") == 'J'", "def check(flip_case):\n\tassert flip_case(\"n|gOUwY~ruFD\") == 'N|GouWy~RUfd'", "def check(flip_case):\n\tassert flip_case(\"q\") == 'Q'", "def check(flip_case):\n\tassert flip_case(\"EELIBxoyBKMKLqdqCoaxKsaHDhVSyVFZKwIUD\") == 'eelibXOYbkmklQDQcOAXkSAhdHvsYvfzkWiud'", "def check(flip_case):\n\tassert flip_case(\"bRIcNFlGQxbUHHeXuOVT ZqmqxQEmgBrvEWGTokoHY\") == 'BriCnfLgqXBuhhExUovt zQMQXqeMGbRVewgtOKOhy'", "def check(flip_case):\n\tassert flip_case(\"a\") == 'A'", "def check(flip_case):\n\tassert flip_case(\"pez\") == 'PEZ'", "def check(flip_case):\n\tassert flip_case(\" rWGZAlqccMZVGnZysgdSulExviJwKbbHiwV\") == ' RwgzaLQCCmzvgNzYSGDsULeXVIjWkBBhIWv'", "def check(flip_case):\n\tassert flip_case(\"SURWTdsMjFvXSnFJFytHymfgEiDcmZREKgXr\") == 'surwtDSmJfVxsNfjfYThYMFGeIdCMzrekGxR'", "def check(flip_case):\n\tassert flip_case(\"u\") == 'U'", "def check(flip_case):\n\tassert flip_case(\"~zUkkeFy\") == '~ZuKKEfY'", "def check(flip_case):\n\tassert flip_case(\"h*U*\") == 'H*u*'", "def check(flip_case):\n\tassert flip_case(\"yr\") == 'YR'", "def check(flip_case):\n\tassert flip_case(\"agwaVXOuq\") == 'AGWAvxoUQ'", "def check(flip_case):\n\tassert flip_case(\"p AAnXuPeBbeTnNHDDLhugfDzDoSnd KMLFYIppPFKSX\") == 'P aaNxUpEbBEtNnhddlHUGFdZdOsND kmlfyiPPpfksx'", "def check(flip_case):\n\tassert flip_case(\"d<gG\") == 'D<Gg'", "def check(flip_case):\n\tassert flip_case(\"oz\") == 'OZ'", "def check(flip_case):\n\tassert flip_case(\"fbc\") == 'FBC'", "def check(flip_case):\n\tassert flip_case(\"tu\") == 'TU'", "def check(flip_case):\n\tassert flip_case(\"NyMDTZqvnnQa TTfqNoInjRIaYeFtiLyYLvQJ\") == 'nYmdtzQVNNqA ttFQnOiNJriAyEfTIlYylVqj'", "def check(flip_case):\n\tassert flip_case(\"x\") == 'X'", "def check(flip_case):\n\tassert flip_case(\"RvQa%\") == 'rVqA%'", "def check(flip_case):\n\tassert flip_case(\"YpaJZKDmVIGTvH MGarufiqirhCbiKMToFjBUzotRH\") == 'yPAjzkdMvigtVh mgARUFIQIRHcBIkmtOfJbuZOTrh'", "def check(flip_case):\n\tassert flip_case(\"u=>c\") == 'U=>C'", "def check(flip_case):\n\tassert flip_case(\"&b_H\") == '&B_h'", "def check(flip_case):\n\tassert flip_case(\"$<y+\") == '$<Y+'", "def check(flip_case):\n\tassert flip_case(\"dWqb\") == 'DwQB'", "def check(flip_case):\n\tassert flip_case(\"xv\") == 'XV'", "def check(flip_case):\n\tassert flip_case(\"/zl\") == '/ZL'", "def check(flip_case):\n\tassert flip_case('') == ''", "def check(flip_case):\n\tassert flip_case(\"lif\") == 'LIF'", "def check(flip_case):\n\tassert flip_case(\"pgj\") == 'PGJ'", "def check(flip_case):\n\tassert flip_case(\"DyMMLvwZlYNhTOjDhnsHoTNqrTRWSrFYFWaoimDxFFaiM\") == 'dYmmlVWzLynHtoJdHNShOtnQRtrwsRfyfwAOIMdXffAIm'", "def check(flip_case):\n\tassert flip_case(\"v*qeoJBLg<t&\") == 'V*QEOjblG<T&'", "def check(flip_case):\n\tassert flip_case(\"nVVa|^lsy\") == 'NvvA|^LSY'", "def check(flip_case):\n\tassert flip_case(\"MBsxRCmHzEltumRjfTmdmbspQjxySYLAQNAZPRyV\") == 'mbSXrcMhZeLTUMrJFtMDMBSPqJXYsylaqnazprYv'", "def check(flip_case):\n\tassert flip_case(\"NpFjCypU YkPuBLEfXMThREegzPXXT IgBpeyz \") == 'nPfJcYPu yKpUbleFxmtHreEGZpxxt iGbPEYZ '", "def check(flip_case):\n\tassert flip_case(\"pG<wNz>Y/\") == 'Pg<WnZ>y/'", "def check(flip_case):\n\tassert flip_case(\"uRCphX cuIYmaTkfFCGBJrVUsjMustykG WqKcSc\") == 'UrcPHx CUiyMAtKFfcgbjRvuSJmUSTYKg wQkCsC'", "def check(flip_case):\n\tassert flip_case(\"haP!tD\") == 'HAp!Td'", "def check(flip_case):\n\tassert flip_case(\"NwHrkzMqZmOzyNBPhYuSIdBfm CjlBUkCXIeiH\") == 'nWhRKZmQzMoZYnbpHyUsiDbFM cJLbuKcxiEIh'", "def check(flip_case):\n\tassert flip_case(\"|l&:hE%&\") == '|L&:He%&'", "def check(flip_case):\n\tassert flip_case(\"wdWVLKaFVwzCSyfAbTLGDiVKlkTUSWhVBTcWaNoUaq\") == 'WDwvlkAfvWZcsYFaBtlgdIvkLKtuswHvbtCwAnOuAQ'", "def check(flip_case):\n\tassert flip_case(\"+$#d\") == '+$#D'", "def check(flip_case):\n\tassert flip_case(\"bq\") == 'BQ'", "def check(flip_case):\n\tassert flip_case('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'", "def check(flip_case):\n\tassert flip_case(\"d\") == 'D'", "def check(flip_case):\n\tassert flip_case(\"rZLVWNROgXWjbDAxzXaGYLOqVnpKiMJLXAKpM\") == 'RzlvwnroGxwJBdaXZxAgyloQvNPkImjlxakPm'", "def check(flip_case):\n\tassert flip_case(\"r\") == 'R'", "def check(flip_case):\n\tassert flip_case(\"mka\") == 'MKA'", "def check(flip_case):\n\tassert flip_case(\"dTpPnvaddXtfDXGDaEPDaGkpESXxOLdIKySLcPdpU\") == 'DtPpNVADDxTFdxgdAepdAgKPesxXolDikYslCpDPu'", "def check(flip_case):\n\tassert flip_case(\"fy\") == 'FY'", "def check(flip_case):\n\tassert flip_case(\"lW|tBEn~^ri<\") == 'Lw|TbeN~^RI<'", "def check(flip_case):\n\tassert flip_case(\"qnwYFneaoNWuSxNXocoMEXDwcqVoGZdRInOEbC\") == 'QNWyfNEAOnwUsXnxOCOmexdWCQvOgzDriNoeBc'", "def check(flip_case):\n\tassert flip_case(\"hzy\") == 'HZY'", "def check(flip_case):\n\tassert flip_case(\"sqopQROxzNCHvAlaUuwHvOMsScjnCpmswtyi\") == 'SQOPqroXZnchVaLAuUWhVomSsCJNcPMSWTYI'", "def check(flip_case):\n\tassert flip_case(\"&Py@\") == '&pY@'", "def check(flip_case):\n\tassert flip_case(\"Q<x\") == 'q<X'", "def check(flip_case):\n\tassert flip_case(\"&|EuiuG\") == '&|eUIUg'", "def check(flip_case):\n\tassert flip_case(\"gO#yDMhnV\") == 'Go#YdmHNv'", "def check(flip_case):\n\tassert flip_case(\"GRb|DCu\") == 'grB|dcU'", "def check(flip_case):\n\tassert flip_case(\"pFEAIYkn|\") == 'PfeaiyKN|'"], "test_case_list": ["assert flip_case(\"=Uft>^xAJt~M\") == '=uFT>^XajT~m'", "assert flip_case(\"CsgXBCATeQmYHhTMBoGuEM dGUDqazbndCFMtLL vmY\") == 'cSGxbcatEqMyhHtmbOgUem DgudQAZBNDcfmTll VMy'", "assert flip_case(\"w\") == 'W'", "assert flip_case(\"eIgaNO JtyWwkDSdVTrVoqClhNFrHNqDBl UInCVrviH\") == 'EiGAno jTYwWKdsDvtRvOQcLHnfRhnQdbL uiNcvRVIh'", "assert flip_case(\"FdR\") == 'fDr'", "assert flip_case(\"tR#Et^#\") == 'Tr#eT^#'", "assert flip_case(\"L@j:tM-_?Fgc\") == 'l@J:Tm-_?fGC'", "assert flip_case(\"ez\") == 'EZ'", "assert flip_case(\"F_LHcfxbO\") == 'f_lhCFXBo'", "assert flip_case(\"xDFZwXjexGGcNsQGWKFfWrVIoHZYFFhWCRQJpnfL\") == 'XdfzWxJEXggCnSqgwkfFwRviOhzyffHwcrqjPNFl'", "assert flip_case(\"CnpipxUmlSdCSmHdbyDoMlbssWpLHcyKnJlsulPxWNPHi\") == 'cNPIPXuMLsDcsMhDBYdOmLBSSwPlhCYkNjLSULpXwnphI'", "assert flip_case(\"vqp\") == 'VQP'", "assert flip_case(\"f<SH\") == 'F<sh'", "assert flip_case(\"tBDUC ZKFZKtFVvqmhzUltjFzOWNXldpEHOAKJIp\") == 'Tbduc zkfzkTfvVQMHZuLTJfZownxLDPehoakjiP'", "assert flip_case(\"+>gY~\") == '+>Gy~'", "assert flip_case(\"BlmIOOJIkOnKWOtKuudPt  sUUPPNZZbQKiIHsNzFe\") == 'bLMioojiKoNkwoTkUUDpT  SuuppnzzBqkIihSnZfE'", "assert flip_case(\"JXCxNsvL\") == 'jxcXnSVl'", "assert flip_case(\"gq\") == 'GQ'", "assert flip_case(\"v\") == 'V'", "assert flip_case(\"RkocroIYw pMJxfpXxLucXAIvDjwlkIeJBCXJsxMAH\") == 'rKOCROiyW PmjXFPxXlUCxaiVdJWLKiEjbcxjSXmah'", "assert flip_case(\"JVKSQnhMMEPEXaJBBgEbTmkMCSWcebmFckHoj\") == 'jvksqNHmmepexAjbbGeBtMKmcswCEBMfCKhOJ'", "assert flip_case(\"gif\") == 'GIF'", "assert flip_case(\"g gCvDFeq NvBvqUNjjIldrkmFZCCTkJACipqozhZZ\") == 'G GcVdfEQ nVbVQunJJiLDRKMfzcctKjacIPQOZHzz'", "assert flip_case(\"rPxMsdbinpIxuZkSMNhmkYSJ DaYPCubXFgtuGbdtUXBR\") == 'RpXmSDBINPiXUzKsmnHMKysj dAypcUBxfGTUgBDTuxbr'", "assert flip_case(\"vzhEUikjmBtxkJcpaTRiuEurpoJXgLCmmSGttGsfOv\") == 'VZHeuIKJMbTXKjCPAtrIUeURPOjxGlcMMsgTTgSFoV'", "assert flip_case(\"ishBtMJcStzZVLuiiCdRPaVgPIsPMZkvSjJna\") == 'ISHbTmjCsTZzvlUIIcDrpAvGpiSpmzKVsJjNA'", "assert flip_case(\"qn\") == 'QN'", "assert flip_case(\"pCKgJaaQZHzRwxdwpqCZvoRlbvqLfrtdHlSrrqyl\") == 'PckGjAAqzhZrWXDWPQczVOrLBVQlFRTDhLsRRQYL'", "assert flip_case(\"k\") == 'K'", "assert flip_case(\"xOEweGnFamRzetSvZkSCZbKrjxTcGdWzTWBsbETPk auL\") == 'XoeWEgNfAMrZETsVzKsczBkRJXtCgDwZtwbSBetpK AUl'", "assert flip_case(\"WVlvlJraPwOUwyOOhbDSADCInroOCMzpaSnUubOH\") == 'wvLVLjRApWouWYooHBdsadciNROocmZPAsNuUBoh'", "assert flip_case(\"lb\") == 'LB'", "assert flip_case(\"AjUCdQIZXemhRaQZOkgJVvpYPUDPNmjKIPhQzZmAQIX\") == 'aJucDqizxEMHrAqzoKGjvVPypudpnMJkipHqZzMaqix'", "assert flip_case(\"~S*VzmzMvqpR\") == '~s*vZMZmVQPr'", "assert flip_case(\"BBx~!|/^\") == 'bbX~!|/^'", "assert flip_case(\"zg\") == 'ZG'", "assert flip_case(\"kydGvfiOVOgOxStzNHakGRVZUzaeQtEDgWqRJJpfe\") == 'KYDgVFIovoGoXsTZnhAKgrvzuZAEqTedGwQrjjPFE'", "assert flip_case(\"lhp\") == 'LHP'", "assert flip_case(\"jfu\") == 'JFU'", "assert flip_case(\"jbTsYZxZTBwOTezydywllWFUrvTWBHXpvMsIY\") == 'JBtSyzXztbWotEZYDYWLLwfuRVtwbhxPVmSiy'", "assert flip_case(\"vVvmxSIyqihZXowcxzQxqSKxpnCpSSkCXeRBXTHyMl\") == 'VvVMXsiYQIHzxOWCXZqXQskXPNcPssKcxErbxthYmL'", "assert flip_case(\"QwnaAlMgJSZcTaBgprrbFezVmYCdMsWyxskaPqenOH\") == 'qWNAaLmGjszCtAbGPRRBfEZvMycDmSwYXSKApQENoh'", "assert flip_case(\"o=c_/?QU~q\") == 'O=C_/?qu~Q'", "assert flip_case(\"ds\") == 'DS'", "assert flip_case(\"zdp\") == 'ZDP'", "assert flip_case(\"hd\") == 'HD'", "assert flip_case(\"jBVXuMXKDuzctqITdcXyikINVSCmKdXbcxhnT\") == 'JbvxUmxkdUZCTQitDCxYIKinvscMkDxBCXHNt'", "assert flip_case(\"ugd\") == 'UGD'", "assert flip_case(\"LAszIcfMteqqYNwFzpJQolmECkmMmMLiyWgtidbdJUaaA\") == 'laSZiCFmTEQQynWfZPjqOLMecKMmMmlIYwGTIDBDjuAAa'", "assert flip_case(\"RbUFL/M\") == 'rBufl/m'", "assert flip_case('Hello!') == 'hELLO!'", "assert flip_case(\"n\") == 'N'", "assert flip_case(\"WF~h/oG^\") == 'wf~H/Og^'", "assert flip_case(\"pzp\") == 'PZP'", "assert flip_case(\"+K|eG\") == '+k|Eg'", "assert flip_case(\"dzpm pZUpHNjdpIMw BmQd otqoasshKCFtpf\") == 'DZPM PzuPhnJDPimW bMqD OTQOASSHkcfTPF'", "assert flip_case(\"xmx\") == 'XMX'", "assert flip_case(\"*~=I\") == '*~=i'", "assert flip_case(\"d!C&e?Gl\") == 'D!c&E?gL'", "assert flip_case(\"QNANcSJRDzmQFD RdGOsUHyADvXPqBWXQQuDzqlQkYucV\") == 'qnanCsjrdZMqfd rDgoSuhYadVxpQbwxqqUdZQLqKyUCv'", "assert flip_case(\"#QSfHF:$&%\") == '#qsFhf:$&%'", "assert flip_case(\"?fTt><k\") == '?FtT><K'", "assert flip_case(\"rpd\") == 'RPD'", "assert flip_case(\"PnHqJfQuNAYhthlFbMAQuoFHTWWNssJuqEsyxCgEkcDUh\") == 'pNhQjFqUnayHTHLfBmaqUOfhtwwnSSjUQeSYXcGeKCduH'", "assert flip_case(\"j\") == 'J'", "assert flip_case(\"n|gOUwY~ruFD\") == 'N|GouWy~RUfd'", "assert flip_case(\"q\") == 'Q'", "assert flip_case(\"EELIBxoyBKMKLqdqCoaxKsaHDhVSyVFZKwIUD\") == 'eelibXOYbkmklQDQcOAXkSAhdHvsYvfzkWiud'", "assert flip_case(\"bRIcNFlGQxbUHHeXuOVT ZqmqxQEmgBrvEWGTokoHY\") == 'BriCnfLgqXBuhhExUovt zQMQXqeMGbRVewgtOKOhy'", "assert flip_case(\"a\") == 'A'", "assert flip_case(\"pez\") == 'PEZ'", "assert flip_case(\" rWGZAlqccMZVGnZysgdSulExviJwKbbHiwV\") == ' RwgzaLQCCmzvgNzYSGDsULeXVIjWkBBhIWv'", "assert flip_case(\"SURWTdsMjFvXSnFJFytHymfgEiDcmZREKgXr\") == 'surwtDSmJfVxsNfjfYThYMFGeIdCMzrekGxR'", "assert flip_case(\"u\") == 'U'", "assert flip_case(\"~zUkkeFy\") == '~ZuKKEfY'", "assert flip_case(\"h*U*\") == 'H*u*'", "assert flip_case(\"yr\") == 'YR'", "assert flip_case(\"agwaVXOuq\") == 'AGWAvxoUQ'", "assert flip_case(\"p AAnXuPeBbeTnNHDDLhugfDzDoSnd KMLFYIppPFKSX\") == 'P aaNxUpEbBEtNnhddlHUGFdZdOsND kmlfyiPPpfksx'", "assert flip_case(\"d<gG\") == 'D<Gg'", "assert flip_case(\"oz\") == 'OZ'", "assert flip_case(\"fbc\") == 'FBC'", "assert flip_case(\"tu\") == 'TU'", "assert flip_case(\"NyMDTZqvnnQa TTfqNoInjRIaYeFtiLyYLvQJ\") == 'nYmdtzQVNNqA ttFQnOiNJriAyEfTIlYylVqj'", "assert flip_case(\"x\") == 'X'", "assert flip_case(\"RvQa%\") == 'rVqA%'", "assert flip_case(\"YpaJZKDmVIGTvH MGarufiqirhCbiKMToFjBUzotRH\") == 'yPAjzkdMvigtVh mgARUFIQIRHcBIkmtOfJbuZOTrh'", "assert flip_case(\"u=>c\") == 'U=>C'", "assert flip_case(\"&b_H\") == '&B_h'", "assert flip_case(\"$<y+\") == '$<Y+'", "assert flip_case(\"dWqb\") == 'DwQB'", "assert flip_case(\"xv\") == 'XV'", "assert flip_case(\"/zl\") == '/ZL'", "assert flip_case('') == ''", "assert flip_case(\"lif\") == 'LIF'", "assert flip_case(\"pgj\") == 'PGJ'", "assert flip_case(\"DyMMLvwZlYNhTOjDhnsHoTNqrTRWSrFYFWaoimDxFFaiM\") == 'dYmmlVWzLynHtoJdHNShOtnQRtrwsRfyfwAOIMdXffAIm'", "assert flip_case(\"v*qeoJBLg<t&\") == 'V*QEOjblG<T&'", "assert flip_case(\"nVVa|^lsy\") == 'NvvA|^LSY'", "assert flip_case(\"MBsxRCmHzEltumRjfTmdmbspQjxySYLAQNAZPRyV\") == 'mbSXrcMhZeLTUMrJFtMDMBSPqJXYsylaqnazprYv'", "assert flip_case(\"NpFjCypU YkPuBLEfXMThREegzPXXT IgBpeyz \") == 'nPfJcYPu yKpUbleFxmtHreEGZpxxt iGbPEYZ '", "assert flip_case(\"pG<wNz>Y/\") == 'Pg<WnZ>y/'", "assert flip_case(\"uRCphX cuIYmaTkfFCGBJrVUsjMustykG WqKcSc\") == 'UrcPHx CUiyMAtKFfcgbjRvuSJmUSTYKg wQkCsC'", "assert flip_case(\"haP!tD\") == 'HAp!Td'", "assert flip_case(\"NwHrkzMqZmOzyNBPhYuSIdBfm CjlBUkCXIeiH\") == 'nWhRKZmQzMoZYnbpHyUsiDbFM cJLbuKcxiEIh'", "assert flip_case(\"|l&:hE%&\") == '|L&:He%&'", "assert flip_case(\"wdWVLKaFVwzCSyfAbTLGDiVKlkTUSWhVBTcWaNoUaq\") == 'WDwvlkAfvWZcsYFaBtlgdIvkLKtuswHvbtCwAnOuAQ'", "assert flip_case(\"+$#d\") == '+$#D'", "assert flip_case(\"bq\") == 'BQ'", "assert flip_case('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'", "assert flip_case(\"d\") == 'D'", "assert flip_case(\"rZLVWNROgXWjbDAxzXaGYLOqVnpKiMJLXAKpM\") == 'RzlvwnroGxwJBdaXZxAgyloQvNPkImjlxakPm'", "assert flip_case(\"r\") == 'R'", "assert flip_case(\"mka\") == 'MKA'", "assert flip_case(\"dTpPnvaddXtfDXGDaEPDaGkpESXxOLdIKySLcPdpU\") == 'DtPpNVADDxTFdxgdAepdAgKPesxXolDikYslCpDPu'", "assert flip_case(\"fy\") == 'FY'", "assert flip_case(\"lW|tBEn~^ri<\") == 'Lw|TbeN~^RI<'", "assert flip_case(\"qnwYFneaoNWuSxNXocoMEXDwcqVoGZdRInOEbC\") == 'QNWyfNEAOnwUsXnxOCOmexdWCQvOgzDriNoeBc'", "assert flip_case(\"hzy\") == 'HZY'", "assert flip_case(\"sqopQROxzNCHvAlaUuwHvOMsScjnCpmswtyi\") == 'SQOPqroXZnchVaLAuUWhVomSsCJNcPMSWTYI'", "assert flip_case(\"&Py@\") == '&pY@'", "assert flip_case(\"Q<x\") == 'q<X'", "assert flip_case(\"&|EuiuG\") == '&|eUIUg'", "assert flip_case(\"gO#yDMhnV\") == 'Go#YdmHNv'", "assert flip_case(\"GRb|DCu\") == 'grB|dcU'", "assert flip_case(\"pFEAIYkn|\") == 'PfeaiyKN|'"], "nl": " For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    ", "func": "def flip_case(string: str) -> str:", "examples": ">>> flip_case('Hello')\n    'hELLO'\n    ", "repair_prompt": ["def flip_case(string: str) -> str:\t\n'''For a provided string, switch lowercase letters to uppercase, and uppercase letters to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "def flip_case(string: str) -> str:\t\n'''For a provided string, switch lowercase letters to uppercase, and uppercase letters to lowercase. This operation includes changing each letter of the alphabet based on its current case. After flipping, the overall characters of the string remain the same, but their cases are altered.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "def flip_case(string: str) -> str:\t\n'''For a given string, change lowercase letters to uppercase, and uppercase letters to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"Flips the case of each character in the input string.\n\n    Args:\n        string (str): The input string whose characters' cases need to be flipped.\n\n    Returns:\n        str: A new string with the case of each character flipped.\n    \n    Example:\n        flip_case('Hello World') -> 'hELLO wORLD'\n        flip_case('123') -> '123'\n        flip_case('!@#') -> '!@#'\n        flip_case('') -> ''\n    \"\"\"\n    return string.swapcase()\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    For a provided string, switch lowercase letters to uppercase, and uppercase letters to lowercase.\n    \n    Args:\n        string (str): The input string to flip the case.\n    \n    Returns:\n        str: A new string with the case of each letter flipped.\n    \n    Examples:\n        >>> flip_case('Hello')\n        'hELLO'\n        >>> flip_case('')\n        ''\n        >>> flip_case('123')\n        '123'\n    \"\"\"\n    return string.swapcase()\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    For a provided string, switch lowercase letters to uppercase, and uppercase letters to lowercase.\n    Non-alphabetic characters remain unchanged.\n    \n    Parameters:\n    string (str): The input string to flip the case.\n    \n    Returns:\n    str: The string with flipped case.\n    \"\"\"\n    return string.swapcase()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(flip_case(\"Hello World\"))  # Output: \"hELLO wORLD\"\n    print(flip_case(\"1234\"))         # Output: \"1234\"\n    print(flip_case(\"!@#$\"))         # Output: \"!@#$\"\n    print(flip_case(\"\"))             # Output: \"\"\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"Flips the case of each alphabetic character in the input string.\n\n    Args:\n        string (str): The input string whose alphabetic characters' cases are to be flipped.\n\n    Returns:\n        str: A new string with the case of each alphabetic character flipped. Non-alphabetic characters remain unchanged.\n    \"\"\"\n    # Initialize an empty list to store the modified characters\n    flipped_characters = []\n\n    # Iterate through each character in the input string\n    for char in string:\n        # Check if the character is lowercase and convert it to uppercase\n        if char.islower():\n            flipped_characters.append(char.upper())\n        # Check if the character is uppercase and convert it to lowercase\n        elif char.isupper():\n            flipped_characters.append(char.lower())\n        # If the character is non-alphabetic, append it unchanged\n        else:\n            flipped_characters.append(char)\n\n    # Join the list of characters into a new string and return it\n    return ''.join(flipped_characters)\n\n# Example usage:\n# print(flip_case('aBcDeF'))  # Output: 'AbCdEf'\n# print(flip_case('123'))    # Output: '123'\n# print(flip_case(''))       # Output: ''\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    '''\n    For a provided string, switch lowercase letters to uppercase, and uppercase letters to lowercase.\n    This operation includes changing each letter of the alphabet based on its current case.\n    After flipping, the overall characters of the string remain the same, but their cases are altered.\n    \n    Parameters:\n    string (str): The input string whose case needs to be flipped.\n    \n    Returns:\n    str: A new string with the case of each letter flipped.\n    \n    Examples:\n    >>> flip_case('Hello')\n    'hELLO'\n    >>> flip_case('')\n    ''\n    >>> flip_case('123')\n    '123'\n    '''\n    return string.swapcase()\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"Flips the case of each alphabetic character in the input string.\n\n    This function takes a string as input and returns a new string where\n    each alphabetic character's case is flipped. Non-alphabetic characters\n    remain unchanged.\n\n    Args:\n        string (str): The input string whose characters' cases are to be flipped.\n\n    Returns:\n        str: A new string with the case of each alphabetic character flipped.\n    \"\"\"\n    # Using the built-in str.swapcase() method to flip the case of each character\n    return string.swapcase()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases to demonstrate the functionality of flip_case\n    print(flip_case(''))  # Expected output: ''\n    print(flip_case('123'))  # Expected output: '123'\n    print(flip_case('HELLO world!'))  # Expected output: 'hello WORLD!'\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"Flips the case of each alphabetic character in the input string.\n\n    Args:\n        string (str): The input string containing alphabetic and non-alphabetic characters.\n\n    Returns:\n        str: A new string with the case of each alphabetic character flipped.\n             Non-alphabetic characters remain unchanged.\n    \"\"\"\n    flipped_string = []  # Initialize an empty list to store the flipped characters\n\n    for char in string:\n        if char.islower():\n            flipped_string.append(char.upper())  # Convert lowercase to uppercase\n        elif char.isupper():\n            flipped_string.append(char.lower())  # Convert uppercase to lowercase\n        else:\n            flipped_string.append(char)  # Non-alphabetic characters remain unchanged\n\n    return ''.join(flipped_string)  # Join the list into a string and return\n\n# Example usage:\n# print(flip_case(\"Hello World!\"))  # Output: \"hELLO wORLD!\"\n# print(flip_case(\"123\"))           # Output: \"123\"\n# print(flip_case(\"!@#\"))           # Output: \"!@#\"\n# print(flip_case(\"\"))              # Output: \"\"\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, change lowercase letters to uppercase, and uppercase letters to lowercase.\n    \n    Args:\n        string (str): The input string to flip the case.\n    \n    Returns:\n        str: A new string with the case of each character flipped.\n    \n    Examples:\n        >>> flip_case('Hello')\n        'hELLO'\n        >>> flip_case('')\n        ''\n        >>> flip_case('123')\n        '123'\n    \"\"\"\n    return string.swapcase()\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"Flips the case of each alphabetic character in the input string.\n\n    Args:\n        string (str): The input string whose alphabetic characters' case needs to be flipped.\n\n    Returns:\n        str: A new string with the case of all alphabetic characters flipped. Non-alphabetic characters remain unchanged.\n    \"\"\"\n    # Use Python's built-in str.swapcase() method to flip the case of each character in the string.\n    return string.swapcase()\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases to demonstrate the functionality of flip_case function\n    print(flip_case('Hello'))  # Expected output: 'hELLO'\n    print(flip_case('123!@#'))  # Expected output: '123!@#'\n    print(flip_case(''))  # Expected output: ''\n    print(flip_case('Python3.8'))  # Expected output: 'pYTHON3.8'\n    print(flip_case('!@#$%'))  # Expected output: '!@#$%'\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of each character in the provided string. \n    Lowercase letters are converted to uppercase and vice versa.\n    \n    Parameters:\n    string (str): The input string whose characters' cases are to be flipped.\n    \n    Returns:\n    str: A new string with the cases of the characters flipped.\n    \n    Examples:\n    >>> flip_case('Hello')\n    'hELLO'\n    >>> flip_case('')\n    ''\n    >>> flip_case('123')\n    '123'\n    \"\"\"\n    return string.swapcase()\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(flip_case('Hello'))  # Expected output: 'hELLO'\n    print(flip_case(''))       # Expected output: ''\n    print(flip_case('123'))    # Expected output: '123'\n    print(flip_case('HELLO world!'))  # Expected output: 'hello WORLD!'\n"], "plans": ["requirement analysis:\nThe function should efficiently flip the case of each character in the string, ensuring compatibility with various character sets and maintaining performance across different platforms.\nrequirement pool:\n- Implement case flipping functionality\n- Optimize for large string inputs\n- Ensure compatibility with special characters\n- Design intuitive user interface\n- Support both desktop and mobile platforms\nWe will implement a simple function using Python's built-in string methods to flip the case of each character in the input string. This approach ensures compatibility with special characters and maintains performance across different platforms. We will use the 'swapcase()' method, which is optimized for performance and handles all character sets correctly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: The requirement is to change each lowercase letter to uppercase and each uppercase letter to lowercase in the given string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic is straightforward as the requirement can be implemented using Python's built-in `swapcase()` method, which automatically flips the case of each character in the string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string has no characters to flip, so the expected output is an empty string.\n    \n    flip_case('123') = '123'\n    Explanation: Numbers do not have a case, so they remain unchanged.\n    \n    flip_case('!@#') = '!@#'\n    Explanation: Special characters do not have a case, so they remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The `swapcase()` method inherently handles all types of characters, including empty strings, numbers, and special characters.\n", "requirement analysis:\nThe function should efficiently flip the case of each character in the input string. It must handle edge cases such as empty strings and strings with no alphabetic characters. The implementation should be straightforward and well-documented to ensure ease of understanding and maintenance.\nrequirement pool:\n- Implement the main function to flip case\n- Handle edge cases like empty strings\n- Provide comprehensive documentation\n- Ensure compatibility with older Python versions\n- Optimize for performance with large strings\nWe will implement a simple function using Python's built-in string method `swapcase()`, which efficiently flips the case of each character in the string. This method is optimal for performance and handles edge cases like empty strings and strings with no alphabetic characters naturally. The function will include comprehensive documentation to ensure clarity and maintainability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: The requirement is to change each lowercase letter to uppercase and each uppercase letter to lowercase in the given string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic is straightforward as it utilizes Python's built-in `swapcase()` method, which automatically handles the conversion of each character's case in the string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string has no characters to flip, so the expected output is an empty string.\n    flip_case('123') = '123'\n    Explanation: The string contains no alphabetic characters, so the output remains unchanged.\n    flip_case('HELLO world!') = 'hello WORLD!'\n    Explanation: The function should correctly flip the case of each alphabetic character, resulting in 'hello WORLD!'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The `swapcase()` method naturally handles empty strings and strings with non-alphabetic characters.\n", "requirement analysis:\nThe function should accurately flip the case of each character in the string, including handling special characters and spaces without altering them. Performance optimization is crucial for handling large strings efficiently.\nrequirement pool:\n- Implement accurate case flipping for all characters\n- Optimize performance for large strings\n- Ensure compatibility with special characters\n- Design intuitive UI for user interaction\n- Test across multiple devices for responsiveness\nWe will implement a function that flips the case of each character in a string using Python's built-in string methods. The function will handle both alphabetic and non-alphabetic characters, ensuring that non-alphabetic characters remain unchanged. We will use the 'str.swapcase()' method for efficient case flipping, which is optimized for performance and handles large strings well.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: This means changing each lowercase letter in the string to uppercase and each uppercase letter to lowercase.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Use Python's built-in `str.swapcase()` method to flip the case of each character in the string.\n    2. Return the modified string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string should return an empty string since there are no characters to flip.\n    \n    flip_case('1234') = '1234'\n    Explanation: A string with only numbers should return the same string since there are no alphabetic characters to flip.\n    \n    flip_case('!@#$') = '!@#$'\n    Explanation: A string with only special characters should return the same string since there are no alphabetic characters to flip.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The `str.swapcase()` method inherently handles these cases by leaving non-alphabetic characters unchanged and returning an empty string when given an empty input.\n", "requirement analysis:\nThe function should accurately flip the case of each letter in the input string, maintaining the original order of characters. It should handle edge cases such as empty strings and non-alphabetic characters gracefully, ensuring no errors occur during execution.\nrequirement pool:\n- Implement the main case flipping logic\n- Optimize performance for large input strings\n- Handle edge cases like empty strings and non-alphabetic characters\n- Ensure compatibility with different Python versions\n- Provide comprehensive documentation and examples\nWe will implement a simple function using Python's built-in string methods to flip the case of each letter in the input string. Non-alphabetic characters will remain unchanged, ensuring the function handles edge cases like empty strings gracefully. The function will be optimized for performance by leveraging efficient string operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: The requirement is to change each letter's case in the string, converting lowercase letters to uppercase and vice versa.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate through each character in the input string.\n    2. Check if the character is an alphabetic letter.\n    3. If the character is lowercase, convert it to uppercase.\n    4. If the character is uppercase, convert it to lowercase.\n    5. Non-alphabetic characters remain unchanged.\n    6. Return the modified string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string has no characters to flip, so the expected output is an empty string.\n    \n    flip_case('123') = '123'\n    Explanation: The string contains only non-alphabetic characters, so they remain unchanged.\n    \n    flip_case('aBcDeF') = 'AbCdEf'\n    Explanation: Each letter's case is flipped, resulting in 'AbCdEf'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles empty strings and non-alphabetic characters naturally.\n", "requirement analysis:\nThe function should efficiently switch the case of each letter in a string, handling both uppercase and lowercase letters. It should be robust enough to handle edge cases such as empty strings and strings with no alphabetic characters.\nrequirement pool:\n- Implement the main function to flip case of each letter\n- Ensure the function handles empty strings gracefully\n- Include comprehensive test cases\n- Optimize for performance with large strings\n- Provide detailed documentation and examples\nWe will implement a simple function using Python's built-in string method `swapcase()`, which efficiently flips the case of each letter in a string. This method is optimal for our needs as it handles both uppercase and lowercase letters, and it naturally preserves non-alphabetic characters. The function will also handle edge cases such as empty strings gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: The requirement is to change each letter's case in the string, converting lowercase letters to uppercase and vice versa.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic is straightforward as it utilizes Python's built-in `swapcase()` method, which automatically flips the case of each letter in the string. This method is efficient and handles all edge cases, including non-alphabetic characters and empty strings.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string has no characters to flip, so the output remains an empty string.\n    flip_case('123') = '123'\n    Explanation: The string contains no alphabetic characters, so the output remains unchanged.\n    flip_case('aBcD') = 'AbCd'\n    Explanation: Each letter's case is flipped, resulting in 'AbCd'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The `swapcase()` method naturally handles all edge cases, including empty strings and strings without alphabetic characters.\n", "requirement analysis:\nThe requirement is to develop a function that accurately flips the case of each letter in a given string. The function should handle both uppercase and lowercase letters and return the modified string. Performance optimization is crucial for handling large strings efficiently.\nrequirement pool:\n- Implement the flip_case function to accurately flip letter cases\n- Optimize the function for performance with large strings\n- Design a user-friendly interface for input and output\n- Ensure compatibility with various string formats\n- Provide documentation and examples for user guidance\nWe will implement a simple function using Python's built-in string methods to flip the case of each letter in the input string. The function will iterate over each character in the string, using the str.swapcase() method, which is optimized for performance and handles both uppercase and lowercase letters efficiently. Non-alphabetic characters will remain unchanged, as the swapcase method only affects alphabetic characters.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: The requirement is to change each letter's case in the string, converting lowercase letters to uppercase and vice versa.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic is straightforward: iterate over each character in the string and use the `str.swapcase()` method to flip its case. This method automatically handles both uppercase and lowercase letters efficiently, leaving non-alphabetic characters unchanged.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string has no characters to flip, so the expected output is an empty string.\n    \n    flip_case('123') = '123'\n    Explanation: Since '123' contains no alphabetic characters, the output remains unchanged.\n    \n    flip_case('HELLO world!') = 'hello WORLD!'\n    Explanation: The uppercase letters 'HELLO' are converted to lowercase, and the lowercase letters 'world' are converted to uppercase. Non-alphabetic characters like '!' remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The `str.swapcase()` method inherently handles all cases, including empty strings and strings with non-alphabetic characters.\n", "requirement analysis:\nThe function should accurately flip the case of each character in the input string, ensuring that lowercase letters become uppercase and vice versa. It should handle strings of varying lengths and compositions, including special characters and numbers, without altering non-alphabetic characters.\nrequirement pool:\n- Implement the main case flipping functionality\n- Optimize performance for handling large strings\n- Ensure compatibility with special characters and numbers\n- Develop intuitive error handling for invalid inputs\n- Create comprehensive documentation for user guidance\nWe will implement a simple function using Python's built-in string methods to flip the case of each character in the input string. This approach ensures compatibility with special characters and numbers, as these will remain unchanged. The function will be optimized for performance by leveraging Python's efficient string handling capabilities.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'flip case'\n    Explanation: The requirement is to change each lowercase letter to uppercase and each uppercase letter to lowercase in the given string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate through each character in the input string.\n    2. Check if the character is lowercase; if so, convert it to uppercase.\n    3. Check if the character is uppercase; if so, convert it to lowercase.\n    4. Append the converted character to a new string.\n    5. Return the new string with flipped cases.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string has no characters to flip, so the expected output is an empty string.\n    \n    flip_case('123') = '123'\n    Explanation: Numbers do not have cases, so they remain unchanged in the output.\n    \n    flip_case('!@#') = '!@#'\n    Explanation: Special characters do not have cases, so they remain unchanged in the output.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each character and flipping its case will naturally handle these scenarios correctly.\n", "requirement analysis:\nThe function should efficiently flip the case of each character in the string. It should handle edge cases such as empty strings and strings with no alphabetic characters. The implementation should be straightforward and maintainable.\nrequirement pool:\n- Implement the main function to flip case\n- Handle edge cases like empty strings\n- Ensure compatibility with different Python versions\n- Provide comprehensive documentation\n- Optimize for performance\nWe will implement a simple function using Python's built-in string method `swapcase()`, which efficiently flips the case of each character in the string. This method is compatible with different Python versions and handles edge cases like empty strings and strings with no alphabetic characters naturally. We will provide comprehensive documentation to ensure usability and integration into existing codebases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: The requirement is to change lowercase letters to uppercase and vice versa for each character in the given string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic is straightforward as it utilizes Python's built-in `swapcase()` method, which automatically handles the conversion of each character's case in the string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string has no characters to flip, so the expected output is an empty string.\n    \n    flip_case('123') = '123'\n    Explanation: The string contains no alphabetic characters, so the output remains unchanged.\n    \n    flip_case('HELLO world!') = 'hello WORLD!'\n    Explanation: The function should correctly flip the case of each alphabetic character, resulting in lowercase for 'HELLO' and uppercase for 'world'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The `swapcase()` method naturally handles empty strings and strings with non-alphabetic characters.\n", "requirement analysis:\nThe function should efficiently flip the case of each character in a string, handling both uppercase and lowercase letters, while ignoring non-alphabetic characters.\nrequirement pool:\n- The function must correctly flip the case of all alphabetic characters.\n- The function should handle empty strings without errors.\n- The function should maintain the position of non-alphabetic characters.\n- The function should be optimized for performance with large strings.\n- The function should include comprehensive test cases.\nWe will implement a simple function using Python's built-in capabilities to flip the case of alphabetic characters efficiently. The function will handle edge cases such as empty strings and strings with special characters by maintaining their positions and ignoring non-alphabetic characters. We will use Python's built-in str.swapcase() method for simplicity and efficiency, ensuring compatibility across different Python versions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: This means changing each lowercase letter in the string to its corresponding uppercase letter and vice versa.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Use Python's built-in `str.swapcase()` method to flip the case of each character in the string.\n    2. Return the modified string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string should return an empty string since there are no characters to flip.\n    \n    flip_case('12345') = '12345'\n    Explanation: A string with only numbers should return the same string since there are no alphabetic characters to flip.\n    \n    flip_case('!@#$%') = '!@#$%'\n    Explanation: A string with only special characters should return the same string since there are no alphabetic characters to flip.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The `str.swapcase()` method inherently handles these cases by leaving non-alphabetic characters unchanged and returning an empty string when given an empty input.\n", "requirement analysis:\nThe function should efficiently flip the case of each character in a string. It must handle edge cases such as empty strings and strings without alphabetic characters. The implementation should be straightforward and compatible with different Python versions.\nrequirement pool:\n- Implement the main function to flip case\n- Handle edge cases like empty strings\n- Ensure compatibility with Python 3.x\n- Provide comprehensive documentation\n- Optimize for performance\nWe will implement a simple function using Python's built-in string method `swapcase()`, which efficiently flips the case of each character in a string. This method is highly efficient and compatible with all Python 3.x versions. The function will handle edge cases such as empty strings and strings without alphabetic characters by simply returning them unchanged. Comprehensive documentation will be provided to ensure ease of integration and understanding.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: In the requirement, \"flip case\" means to change each lowercase letter in the string to uppercase and each uppercase letter to lowercase.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic is straightforward due to the use of Python's built-in `swapcase()` method:\n    1. Receive the input string.\n    2. Apply the `swapcase()` method to the string, which automatically flips the case of each character.\n    3. Return the modified string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string has no characters to flip, so it should return an empty string.\n    \n    flip_case('12345') = '12345'\n    Explanation: A string with no alphabetic characters remains unchanged, as there are no cases to flip.\n    \n    flip_case('HELLO world!') = 'hello WORLD!'\n    Explanation: The uppercase letters 'HELLO' are flipped to lowercase, and the lowercase letters 'world' are flipped to uppercase, while non-alphabetic characters remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The `swapcase()` method inherently handles empty strings and strings without alphabetic characters by returning them unchanged.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [126, 126, 126, 126, 126, 126, 126, 126, 126, 126], "completion": "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of each character in the provided string. \n    Lowercase letters are converted to uppercase and vice versa.\n    \n    Parameters:\n    string (str): The input string whose characters' cases are to be flipped.\n    \n    Returns:\n    str: A new string with the cases of the characters flipped.\n    \n    Examples:\n    >>> flip_case('Hello')\n    'hELLO'\n    >>> flip_case('')\n    ''\n    >>> flip_case('123')\n    '123'\n    \"\"\"\n    return string.swapcase()\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(flip_case('Hello'))  # Expected output: 'hELLO'\n    print(flip_case(''))       # Expected output: ''\n    print(flip_case('123'))    # Expected output: '123'\n    print(flip_case('HELLO world!'))  # Expected output: 'hello WORLD!'\n", "passed": true, "pass": true, "pass_num": 10, "round": 970, "mutate_method": "rephrase_one", "parent_index": 412}
