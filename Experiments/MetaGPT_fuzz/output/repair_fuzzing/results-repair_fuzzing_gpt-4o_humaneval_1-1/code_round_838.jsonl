{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. Ensure that your solution handles both positive and negative integers.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "entry_point": "greatest_common_divisor", "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n", "test": ["def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 16) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(47, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(45, 15) == 15", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 6) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(53, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 9) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 12) == 12", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 63) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 12) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 18) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 12) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 64) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 2) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(53, 14) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 62) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 4) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 63) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(149, 64) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 2) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 58) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 12) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 12) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(13, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(10, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 5) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 18) == 6", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 12) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 12) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(54, 9) == 9", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 57) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 16) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(145, 63) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 62) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(140, 65) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(145, 55) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 3) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 20) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(7, 10) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(51, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 16) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 3) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(14, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(10, 15) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 20) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 4) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(13, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(139, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 58) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 64) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(52, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 10) == 10", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 62) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 60) == 12", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 14) == 7", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(143, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 4) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 60) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 16) == 8", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(54, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 9) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(146, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(139, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 10) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(143, 62) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(140, 63) == 7", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 18) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 6) == 6", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 15) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(14, 20) == 2"], "test_case_list": ["assert greatest_common_divisor(6, 16) == 2", "assert greatest_common_divisor(47, 19) == 1", "assert greatest_common_divisor(141, 65) == 1", "assert greatest_common_divisor(45, 15) == 15", "assert greatest_common_divisor(1, 6) == 1", "assert greatest_common_divisor(50, 14) == 2", "assert greatest_common_divisor(53, 16) == 1", "assert greatest_common_divisor(3, 9) == 3", "assert greatest_common_divisor(50, 11) == 1", "assert greatest_common_divisor(48, 12) == 12", "assert greatest_common_divisor(49, 9) == 1", "assert greatest_common_divisor(6, 14) == 2", "assert greatest_common_divisor(141, 63) == 3", "assert greatest_common_divisor(5, 11) == 1", "assert greatest_common_divisor(11, 12) == 1", "assert greatest_common_divisor(12, 13) == 1", "assert greatest_common_divisor(15, 19) == 1", "assert greatest_common_divisor(46, 18) == 2", "assert greatest_common_divisor(4, 12) == 4", "assert greatest_common_divisor(46, 13) == 1", "assert greatest_common_divisor(12, 11) == 1", "assert greatest_common_divisor(11, 17) == 1", "assert greatest_common_divisor(148, 64) == 4", "assert greatest_common_divisor(5, 9) == 1", "assert greatest_common_divisor(5, 2) == 1", "assert greatest_common_divisor(1, 11) == 1", "assert greatest_common_divisor(141, 61) == 1", "assert greatest_common_divisor(53, 14) == 1", "assert greatest_common_divisor(12, 10) == 2", "assert greatest_common_divisor(147, 62) == 1", "assert greatest_common_divisor(2, 4) == 2", "assert greatest_common_divisor(142, 63) == 1", "assert greatest_common_divisor(4, 6) == 2", "assert greatest_common_divisor(149, 64) == 1", "assert greatest_common_divisor(6, 2) == 2", "assert greatest_common_divisor(5, 13) == 1", "assert greatest_common_divisor(148, 58) == 2", "assert greatest_common_divisor(46, 10) == 2", "assert greatest_common_divisor(44, 12) == 4", "assert greatest_common_divisor(5, 12) == 1", "assert greatest_common_divisor(13, 15) == 1", "assert greatest_common_divisor(10, 17) == 1", "assert greatest_common_divisor(2, 7) == 1", "assert greatest_common_divisor(5, 5) == 5", "assert greatest_common_divisor(1, 7) == 1", "assert greatest_common_divisor(48, 18) == 6", "assert greatest_common_divisor(46, 12) == 2", "assert greatest_common_divisor(3, 12) == 3", "assert greatest_common_divisor(54, 9) == 9", "assert greatest_common_divisor(142, 57) == 1", "assert greatest_common_divisor(5, 16) == 1", "assert greatest_common_divisor(142, 55) == 1", "assert greatest_common_divisor(44, 16) == 4", "assert greatest_common_divisor(145, 63) == 1", "assert greatest_common_divisor(144, 59) == 1", "assert greatest_common_divisor(8, 9) == 1", "assert greatest_common_divisor(148, 62) == 2", "assert greatest_common_divisor(49, 16) == 1", "assert greatest_common_divisor(140, 65) == 5", "assert greatest_common_divisor(145, 55) == 5", "assert greatest_common_divisor(1, 3) == 1", "assert greatest_common_divisor(12, 20) == 4", "assert greatest_common_divisor(6, 13) == 1", "assert greatest_common_divisor(141, 59) == 1", "assert greatest_common_divisor(7, 10) == 1", "assert greatest_common_divisor(51, 11) == 1", "assert greatest_common_divisor(12, 16) == 4", "assert greatest_common_divisor(46, 14) == 2", "assert greatest_common_divisor(6, 3) == 3", "assert greatest_common_divisor(14, 13) == 1", "assert greatest_common_divisor(10, 15) == 5", "assert greatest_common_divisor(15, 20) == 5", "assert greatest_common_divisor(6, 17) == 1", "assert greatest_common_divisor(147, 61) == 1", "assert greatest_common_divisor(4, 4) == 4", "assert greatest_common_divisor(1, 9) == 1", "assert greatest_common_divisor(13, 17) == 1", "assert greatest_common_divisor(139, 65) == 1", "assert greatest_common_divisor(144, 58) == 2", "assert greatest_common_divisor(147, 64) == 1", "assert greatest_common_divisor(3, 7) == 1", "assert greatest_common_divisor(52, 19) == 1", "assert greatest_common_divisor(50, 10) == 10", "assert greatest_common_divisor(2, 9) == 1", "assert greatest_common_divisor(44, 10) == 2", "assert greatest_common_divisor(144, 62) == 2", "assert greatest_common_divisor(148, 55) == 1", "assert greatest_common_divisor(144, 60) == 12", "assert greatest_common_divisor(49, 14) == 7", "assert greatest_common_divisor(143, 59) == 1", "assert greatest_common_divisor(6, 4) == 2", "assert greatest_common_divisor(148, 60) == 4", "assert greatest_common_divisor(11, 19) == 1", "assert greatest_common_divisor(4, 7) == 1", "assert greatest_common_divisor(15, 16) == 1", "assert greatest_common_divisor(49, 13) == 1", "assert greatest_common_divisor(8, 16) == 8", "assert greatest_common_divisor(54, 19) == 1", "assert greatest_common_divisor(8, 11) == 1", "assert greatest_common_divisor(8, 6) == 2", "assert greatest_common_divisor(6, 9) == 3", "assert greatest_common_divisor(12, 14) == 2", "assert greatest_common_divisor(146, 55) == 1", "assert greatest_common_divisor(139, 61) == 1", "assert greatest_common_divisor(147, 65) == 1", "assert greatest_common_divisor(11, 10) == 1", "assert greatest_common_divisor(143, 62) == 1", "assert greatest_common_divisor(140, 63) == 7", "assert greatest_common_divisor(49, 15) == 1", "assert greatest_common_divisor(44, 15) == 1", "assert greatest_common_divisor(2, 6) == 2", "assert greatest_common_divisor(8, 18) == 2", "assert greatest_common_divisor(6, 6) == 6", "assert greatest_common_divisor(48, 15) == 3", "assert greatest_common_divisor(44, 9) == 1", "assert greatest_common_divisor(14, 20) == 2"], "nl": " Return a greatest common divisor of two integers a and b\n    ", "func": "def greatest_common_divisor(a: int, b: int) -> int:", "examples": ">>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    ", "repair_prompt": ["def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. Ensure that your solution handles both positive and negative integers.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. Make sure that you correctly identify the greatest common divisor. Ensure that your solution handles both positive and negative integers.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b, ensuring that your solution handles both positive and negative integers.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers a and b using the Euclidean algorithm.\n    Handles both positive and negative integers.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, -15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    \"\"\"\n    # Handle the edge case where both a and b are zero\n    if a == 0 and b == 0:\n        return 0\n    \n    # Use absolute values to handle negative integers\n    a, b = abs(a), abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers a and b.\n    Handles both positive and negative integers.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, -15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    \"\"\"\n    if a == 0 and b == 0:\n        return 0\n    a, b = abs(a), abs(b)\n    while b != 0:\n        a, b = b, a % b\n    return a\n", "from typing import List\n## main.py\n\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers, a and b.\n    Handles both positive and negative integers.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n    \"\"\"\n    return math.gcd(a, b)\n\ndef main():\n    \"\"\"\n    Main function to demonstrate the usage of greatest_common_divisor function.\n    It takes user input, computes the GCD, and displays the result.\n    \"\"\"\n    try:\n        # Input two integers from the user\n        a = int(input())\n        b = int(input())\n        \n        # Compute the GCD using the greatest_common_divisor function\n        gcd_result = greatest_common_divisor(a, b)\n        \n        # Display the result\n        print(f\"The greatest common divisor of {a} and {b} is: {gcd_result}\")\n    \n    except ValueError:\n        print(\"Invalid input. Please enter valid integers.\")\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers a and b.\n    Handles both positive and negative integers.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, -15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    \"\"\"\n    if a == 0 and b == 0:\n        return 0\n    a, b = abs(a), abs(b)\n    while b != 0:\n        a, b = b, a % b\n    return a\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer, can be positive or negative.\n    b (int): Second integer, can be positive or negative.\n\n    Returns:\n    int: The greatest common divisor of a and b.\n    \"\"\"\n    # Handle the edge case where both numbers are zero\n    if a == 0 and b == 0:\n        return 0\n    \n    # Convert both numbers to their absolute values to handle negative integers\n    a, b = abs(a), abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Example usage:\n# print(greatest_common_divisor(0, 5))  # Output: 5\n# print(greatest_common_divisor(-25, 15))  # Output: 5\n# print(greatest_common_divisor(0, 0))  # Output: 0\n", "from typing import List\n## main.py\n\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the greatest common divisor of two integers a and b.\n    This function handles both positive and negative integers.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, -15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(-3, 9)\n    3\n    >>> greatest_common_divisor(0, 0)\n    0\n    \"\"\"\n    # Use the math.gcd function to compute the GCD of the two integers\n    return math.gcd(a, b)\n", "from typing import List\n## main.py\n\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers a and b.\n    Handles both positive and negative integers.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    \"\"\"\n    # Handle edge case where both inputs are zero\n    if a == 0 and b == 0:\n        return 0\n    \n    # Use the Euclidean algorithm to find the GCD\n    return abs(math.gcd(a, b))\n\nif __name__ == \"__main__\":\n    # Example usage\n    print(greatest_common_divisor(3, 5))  # Output: 1\n    print(greatest_common_divisor(25, 15))  # Output: 5\n    print(greatest_common_divisor(-25, 15))  # Output: 5\n    print(greatest_common_divisor(0, 5))  # Output: 5\n    print(greatest_common_divisor(0, 0))  # Output: 0\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First integer, can be positive or negative.\n    b (int): Second integer, can be positive or negative.\n    \n    Returns:\n    int: The greatest common divisor of a and b.\n    \n    Example:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # Handle the edge case where both a and b are zero\n    if a == 0 and b == 0:\n        return 0\n    \n    # If b is zero, return the absolute value of a\n    if b == 0:\n        return abs(a)\n    \n    # Use the Euclidean algorithm to find the GCD\n    return greatest_common_divisor(b, a % b)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(greatest_common_divisor(3, 5))  # Output: 1\n    print(greatest_common_divisor(25, 15))  # Output: 5\n    print(greatest_common_divisor(0, 5))  # Output: 5\n    print(greatest_common_divisor(-25, 15))  # Output: 5\n    print(greatest_common_divisor(0, 0))  # Output: 0\n", "from typing import List\n## main.py\n\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers a and b.\n    Handles both positive and negative integers.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    \"\"\"\n    # Handle the edge case where both a and b are zero\n    if a == 0 and b == 0:\n        return 0\n    \n    # Use the built-in math.gcd function and return the absolute value\n    return abs(math.gcd(a, b))\n\n# Example usage\nif __name__ == \"__main__\":\n    print(greatest_common_divisor(3, 5))  # Output: 1\n    print(greatest_common_divisor(25, 15))  # Output: 5\n    print(greatest_common_divisor(-25, 15))  # Output: 5\n    print(greatest_common_divisor(0, 5))  # Output: 5\n    print(greatest_common_divisor(0, 0))  # Output: 0\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer, can be positive or negative.\n    b (int): Second integer, can be positive or negative.\n\n    Returns:\n    int: The greatest common divisor of a and b.\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, -15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    \"\"\"\n    # Ensure the function handles both positive and negative integers\n    a = abs(a)\n    b = abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n"], "plans": ["requirement analysis:\nThe function should accurately compute the greatest common divisor for both positive and negative integers, ensuring robustness and efficiency. It should handle edge cases such as zero and negative values gracefully.\nrequirement pool:\n- Implement the GCD algorithm using Euclidean method\n- Ensure compatibility with negative integers\n- Optimize for large integer inputs\n- Provide comprehensive documentation\n- Include example usage in the docstring\nWe will implement the GCD algorithm using the Euclidean method, which is efficient for both small and large integers. The Python standard library's math module provides a gcd function that handles positive integers efficiently, but we will extend this to handle negative integers as well. The Euclidean algorithm is inherently robust for negative values, as it relies on the remainder operation, which is well-defined for negative numbers in Python.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. It is a fundamental concept in number theory.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest possible integer that divides both numbers without a remainder.\n\n# [code logic]\n    1. Use the Euclidean algorithm to find the GCD:\n        - If b is 0, return the absolute value of a as the GCD.\n        - Otherwise, recursively call the function with b and a % b.\n    2. Ensure the function handles both positive and negative integers by taking the absolute value of inputs.\n\n# [edge case] \n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of 0 and 0 is undefined, but by convention, it can be considered as 0.\n    \n    greatest_common_divisor(0, 5) = 5\n    Explanation: Any number is a divisor of 0, so the GCD of 0 and any non-zero number is the non-zero number itself.\n    \n    greatest_common_divisor(-25, -15) = 5\n    Explanation: The GCD should be positive, and the GCD of 25 and 15 is 5, which remains the same for their negative counterparts.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The Euclidean algorithm inherently handles these cases correctly by using absolute values and checking for zero.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor for both positive and negative integers, ensuring robustness and efficiency. It should be easy to understand and use, with clear documentation and examples.\nrequirement pool:\n- Implement GCD calculation for positive and negative integers\n- Optimize performance for large integer inputs\n- Provide comprehensive documentation and examples\n- Ensure compatibility with existing Python libraries\n- Include error handling for non-integer inputs\nWe will use the Euclidean algorithm to compute the greatest common divisor (GCD) of two integers, which is efficient and handles both positive and negative integers. The function will be optimized for large integer inputs by leveraging Python's inherent support for arbitrary-precision integers. We will provide comprehensive documentation and examples to ensure usability and understanding.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. It is a fundamental concept in number theory.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': This refers to the largest integer that can divide both input integers without leaving a remainder.\n\n# [code logic]\n    1. Implement the Euclidean algorithm, which involves repeatedly replacing the larger number by the remainder of the division of the two numbers until one of them becomes zero.\n    2. The non-zero number at this point will be the GCD.\n    3. Ensure that the algorithm handles both positive and negative integers by taking the absolute value of the inputs.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and zero is the absolute value of the non-zero number.\n    \n    greatest_common_divisor(-25, -15) = 5\n    Explanation: The GCD should be positive, even if both inputs are negative.\n\n    greatest_common_divisor(0, 0) = 0\n    Explanation: By convention, the GCD of zero and zero is undefined, but it can be considered as zero for practical purposes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    def greatest_common_divisor(a: int, b: int) -> int:\n        if a == 0 and b == 0:\n            return 0\n        a, b = abs(a), abs(b)\n        while b != 0:\n            a, b = b, a % b\n        return a\n    ```\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor (GCD) of two integers, including handling both positive and negative values. The function should be efficient and user-friendly, with a focus on accuracy and ease of use.\nrequirement pool:\n- Implement the GCD calculation function\n- Ensure the function handles negative integers\n- Design a simple user interface for input and output\n- Optimize the function for performance\n- Provide detailed documentation and examples\nWe will use the built-in Python library 'math' which provides a gcd function that efficiently computes the greatest common divisor of two numbers. This function handles both positive and negative integers, ensuring accurate results. We will wrap this functionality in a custom function to meet the user requirements and provide a simple interface for input and output.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. It is a fundamental concept in number theory.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': This refers to the largest possible integer that can divide both input integers without leaving a remainder.\n\n# [code logic]\n    1. Import the 'math' library which contains the gcd function.\n    2. Define a function 'greatest_common_divisor' that takes two integers as input.\n    3. Use the 'math.gcd' function to compute the GCD of the two input integers.\n    4. Return the result from the 'math.gcd' function.\n\n# [edge case] \n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of 0 and 0 is undefined, but mathematically it is often considered as 0 for practical purposes.\n    \n    greatest_common_divisor(-3, -9) = 3\n    Explanation: The GCD should be positive, even if both numbers are negative. The GCD of -3 and -9 is 3.\n    \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and 0 is the absolute value of the non-zero number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The 'math.gcd' function in Python handles these cases correctly by design.\n", "requirement analysis:\nThe function must accurately compute the greatest common divisor for any pair of integers, including negative values. It should be optimized for performance, especially with large integers, and provide clear documentation for ease of use.\nrequirement pool:\n- Accurate GCD calculation for all integer inputs\n- Handle both positive and negative integers\n- Optimize performance for large integer values\n- Provide clear documentation and examples\n- Include edge case handling for zero values\nWe will use the built-in Python library 'math' to leverage its gcd function, which is optimized for performance. However, since it does not handle negative integers, we will implement a custom function that uses the Euclidean algorithm, which efficiently computes the GCD for both positive and negative integers. This approach ensures accurate calculation and performance optimization for large integer values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. It is a fundamental concept in number theory.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest possible integer that divides both numbers without a remainder.\n\n# [code logic]\n    1. Implement the Euclidean algorithm to find the GCD:\n       - If either number is negative, convert it to positive since GCD is always positive.\n       - Use a loop or recursion to apply the Euclidean algorithm: \n         - Replace the larger number with the remainder of dividing the larger number by the smaller number.\n         - Continue until one of the numbers becomes zero.\n       - The non-zero number at this point is the GCD.\n    2. Return the GCD.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and zero is the non-zero number itself.\n    \n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The GCD should be positive, and it is calculated as if both numbers were positive.\n\n    greatest_common_divisor(0, 0) = 0\n    Explanation: By convention, the GCD of zero and zero is undefined, but it can be considered as zero for practical purposes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    def greatest_common_divisor(a: int, b: int) -> int:\n        if a == 0 and b == 0:\n            return 0\n        a, b = abs(a), abs(b)\n        while b != 0:\n            a, b = b, a % b\n        return a\n    ```\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor (GCD) of two integers, including handling both positive and negative values. The function should be efficient and accurate, providing correct results for all integer inputs.\nrequirement pool:\n- Implement the GCD calculation function\n- Ensure the function handles negative integers\n- Optimize the function for performance\n- Create a user-friendly interface for input and output\n- Include error handling for non-integer inputs\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and handles both positive and negative integers seamlessly. We will use Python's built-in math library to ensure accuracy and performance. The function will strictly enforce integer-only inputs to maintain simplicity and reliability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. It is a fundamental concept in number theory.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest possible divisor that can divide both integers without leaving a remainder.\n\n# [code logic]\n    1. Use the Euclidean algorithm to find the GCD:\n        - If either number is zero, the GCD is the absolute value of the other number.\n        - Otherwise, repeatedly replace the larger number by its remainder when divided by the smaller number until one of the numbers becomes zero.\n        - The non-zero number at this point is the GCD.\n    2. Ensure that the function handles both positive and negative integers by taking the absolute value of inputs.\n    3. Return the GCD.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of 0 and any non-zero integer is the absolute value of the non-zero integer.\n    \n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The GCD should be positive, and it is calculated as if both numbers were positive.\n\n    greatest_common_divisor(0, 0) = 0\n    Explanation: By convention, the GCD of 0 and 0 is defined as 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    def greatest_common_divisor(a: int, b: int) -> int:\n        if a == 0 and b == 0:\n            return 0\n        a, b = abs(a), abs(b)\n        while b != 0:\n            a, b = b, a % b\n        return a\n    ```\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor for any pair of integers, including negative values. It should be optimized for performance and provide clear documentation for ease of use.\nrequirement pool:\n- Accurate computation of GCD for all integer inputs\n- Handle both positive and negative integers\n- Optimize performance for large integer values\n- Provide clear documentation and examples\n- Ensure compatibility with existing Python libraries\nWe will use Python's built-in math library, which provides an efficient gcd function that handles both positive and negative integers. This will ensure accurate computation and optimized performance for large integer values. We will wrap this functionality in a custom function to handle any additional requirements, such as documentation and examples.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. It is a fundamental concept in number theory.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both numbers without leaving a remainder\n\n# [code logic]\n    - Import the math library to use the gcd function.\n    - Define the function greatest_common_divisor(a, b).\n    - Use math.gcd(a, b) to compute the GCD of the two integers.\n    - Return the result.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and 0 is the number itself, as 0 does not affect divisibility.\n    \n    greatest_common_divisor(-3, 9) = 3\n    Explanation: The GCD function should handle negative numbers correctly, returning the positive GCD.\n    \n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of 0 and 0 is undefined, but conventionally it is considered as 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The math.gcd function in Python handles these cases correctly by default.\n", "requirement analysis:\nThe function must accurately compute the GCD for both positive and negative integers, ensuring robustness and efficiency. It should be easy to understand and use, with clear documentation and examples provided.\nrequirement pool:\n- Implement GCD calculation for positive and negative integers\n- Optimize performance for large integer inputs\n- Provide comprehensive documentation and examples\n- Ensure compatibility with existing Python libraries\n- Include error handling for non-integer inputs\nWe will implement the GCD calculation using the Euclidean algorithm, which efficiently computes the GCD for both positive and negative integers. We will utilize the built-in math library for handling positive integers and extend its functionality to support negative integers. The function will be optimized for large integer inputs by leveraging the iterative approach of the Euclidean algorithm. Comprehensive documentation and examples will be provided to ensure usability and understanding.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. The Euclidean algorithm is a common method for finding the GCD.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both a and b without leaving a remainder\n\n# [code logic]\n    1. Implement the Euclidean algorithm to find the GCD.\n    2. Use the modulo operation to iteratively reduce the problem size.\n    3. Handle both positive and negative integers by taking absolute values.\n    4. Return the final result as the GCD.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and zero is the number itself, so the expected output is 5.\n    greatest_common_divisor(-25, -15) = 5\n    Explanation: The GCD should be positive, even if both inputs are negative, so the expected output is 5.\n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of zero and zero is undefined, but conventionally handled as zero in programming.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0:\n            return 0\n        return abs(math.gcd(a, b))\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor for any pair of integers, including negative values. It should be optimized for performance, especially with large numbers, and be easy to use and understand.\nrequirement pool:\n- Implement the GCD function to handle both positive and negative integers.\n- Optimize the function for performance with large integers.\n- Ensure the function is well-documented and easy to understand.\n- Test the function with a variety of integer inputs.\n- Consider edge cases and error handling.\nWe will implement the GCD function using the Euclidean algorithm, which is efficient for computing the greatest common divisor of two integers. This algorithm works well with both positive and negative integers and is optimized for performance with large numbers. We will use Python's built-in capabilities without relying on external libraries, ensuring simplicity and ease of understanding.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. It applies to both positive and negative integers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both a and b without leaving a remainder\n\n# [code logic]\n    - Use the Euclidean algorithm to find the GCD:\n      - If b is zero, return the absolute value of a as the GCD.\n      - Otherwise, recursively call the function with b and the remainder of a divided by b until b becomes zero.\n    - Ensure the function handles both positive and negative integers by using absolute values.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of 0 and any non-zero integer is the absolute value of the non-zero integer.\n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The GCD should be positive, even if one or both numbers are negative.\n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of two zeros is undefined, but conventionally returned as 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0:\n            return 0\n        return abs(a) if b == 0 else greatest_common_divisor(b, a % b)\n", "requirement analysis:\nThe function should accurately compute the GCD for both positive and negative integers, ensuring robustness and efficiency. It should be well-documented with examples to aid understanding.\nrequirement pool:\n- Implement GCD function handling both positive and negative integers\n- Optimize performance for large integer inputs\n- Provide comprehensive documentation and examples\n- Ensure compatibility with existing Python libraries\n- Test extensively for edge cases\nWe will implement a function to compute the greatest common divisor (GCD) of two integers, handling both positive and negative values. We will use the Euclidean algorithm, which is efficient and well-suited for this task. The function will be optimized for performance with large integers and will include comprehensive documentation and examples. We will use the built-in Python library 'math' for simplicity and reliability, but we will extend its functionality to handle negative integers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. It is a fundamental concept in number theory.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both a and b without leaving a remainder\n\n# [code logic]\n    1. Use the Euclidean algorithm to find the GCD:\n        - If b is zero, return the absolute value of a as the GCD.\n        - Otherwise, recursively apply the Euclidean algorithm: gcd(a, b) = gcd(b, a % b).\n    2. Ensure the function handles both positive and negative integers by using absolute values.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of 0 and any non-zero integer is the absolute value of the non-zero integer.\n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The GCD should be positive, even if one or both integers are negative.\n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of two zeros is undefined, but conventionally handled as 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0:\n            return 0\n        return abs(math.gcd(a, b))\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor for any pair of integers, including negative values. It should be optimized for performance, especially with large integers, and be well-documented for ease of use.\nrequirement pool:\n- Implement the GCD function to handle both positive and negative integers.\n- Optimize the function for performance with large integers.\n- Ensure the function is well-documented and easy to understand.\n- Test the function with a wide range of integer inputs.\n- Consider edge cases and error handling for non-integer inputs.\nWe will implement the GCD function using the Euclidean algorithm, which is efficient for large integers and handles both positive and negative values. We will use Python's built-in capabilities to ensure optimal performance without requiring additional libraries. The function will be documented with clear examples to demonstrate its usage.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder. It is a fundamental concept in number theory.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both a and b without leaving a remainder\n\n# [code logic]\n    1. Implement the Euclidean algorithm to find the GCD:\n        - If b is zero, return the absolute value of a as the GCD.\n        - Otherwise, recursively call the function with parameters (b, a % b) until b becomes zero.\n    2. Ensure the function handles both positive and negative integers by using absolute values.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of 0 and any non-zero integer is the absolute value of the non-zero integer.\n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of two zeros is undefined, but conventionally it is considered as 0.\n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The GCD should be positive, even if one or both numbers are negative.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The Euclidean algorithm inherently handles these cases by using absolute values and checking for zero.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [116, 116, 116, 116, 116, 116, 116, 116, 116, 116], "completion": "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer, can be positive or negative.\n    b (int): Second integer, can be positive or negative.\n\n    Returns:\n    int: The greatest common divisor of a and b.\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, -15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    \"\"\"\n    # Ensure the function handles both positive and negative integers\n    a = abs(a)\n    b = abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n", "passed": true, "pass": true, "pass_num": 10, "round": 838, "mutate_method": "add_1_sentence_at_end", "parent_index": 414}
