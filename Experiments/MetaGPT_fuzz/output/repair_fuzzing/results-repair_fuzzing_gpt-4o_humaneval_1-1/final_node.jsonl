{"task_id": "HumanEval/0", "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/1", "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/4", "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/5", "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/6", "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/7", "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/8", "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/9", "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/13", "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/14", "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/10", "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/12", "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/15", "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/16", "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/17", "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/18", "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/19", "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/20", "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/21", "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/22", "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/23", "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/24", "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/25", "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/26", "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/27", "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/28", "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/29", "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/30", "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/31", "prompt": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/33", "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/34", "prompt": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/35", "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/36", "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/37", "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/39", "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/40", "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/41", "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/42", "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/43", "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/46", "prompt": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/47", "prompt": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/48", "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/49", "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/51", "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/52", "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/54", "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/55", "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/57", "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/58", "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/59", "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/60", "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/61", "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/62", "prompt": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/63", "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/64", "prompt": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/65", "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/66", "prompt": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/67", "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/68", "prompt": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/69", "prompt": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/70", "prompt": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/71", "prompt": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/72", "prompt": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/73", "prompt": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/74", "prompt": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/76", "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/77", "prompt": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/78", "prompt": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/79", "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/80", "prompt": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/81", "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/82", "prompt": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/85", "prompt": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/86", "prompt": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/87", "prompt": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/89", "prompt": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/90", "prompt": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/92", "prompt": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/93", "prompt": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/95", "prompt": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/96", "prompt": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/98", "prompt": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/99", "prompt": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/100", "prompt": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/101", "prompt": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/102", "prompt": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/104", "prompt": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/105", "prompt": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/106", "prompt": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/107", "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/108", "prompt": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/109", "prompt": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/110", "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/112", "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/113", "prompt": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/114", "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/115", "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/116", "prompt": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/117", "prompt": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/118", "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/119", "prompt": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/120", "prompt": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/121", "prompt": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/122", "prompt": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/123", "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/124", "prompt": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/126", "prompt": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/127", "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/128", "prompt": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/131", "prompt": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/135", "prompt": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/136", "prompt": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/137", "prompt": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/138", "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/139", "prompt": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/143", "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/144", "prompt": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/146", "prompt": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/148", "prompt": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/149", "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/150", "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/152", "prompt": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/153", "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/154", "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/155", "prompt": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/156", "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/157", "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/158", "prompt": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/159", "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/160", "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/161", "prompt": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/162", "prompt": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero, and at that point function should return True. Otherwise it should return False. Make sure to consider edge cases such as no operations or all operations resulting in a non-negative balance.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function is a string represented multiple groups for nested parentheses separated by spaces. Each group in the string can be nested to a certain depth. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/8", "prompt": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\t\n'''For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0 and empty product should be equal to 1. Ensure your solution efficiently handles large lists and avoids overflow errors.\n>>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/17", "prompt": "def parse_music(music_string: str) -> List[int]:\t\n'''Input to this function is a string representing musical notes in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beats does each note last.\n\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quarter note, lasts one beat\n\nYour solution should efficiently handle strings containing millions of notes.\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/18", "prompt": "def how_many_times(string: str, substring: str) -> int:\t\n'''Find how many times a given substring can be found in the original string. Count overlapping cases. Make sure your solution efficiently handles large input strings.\n>>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure the input does not contain any invalid numerals before processing.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n'''Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appears in factorization, and the input number should be equal to the product of all factors.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/26", "prompt": "def remove_duplicates(numbers: List[int]) -> List[int]:\t\n'''From a list of integers, remove all elements that occur more than once. Keep order of elements left the same as in the input. Ensure your solution has an optimal time complexity.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/29", "prompt": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\t\n''' Filter an input list of strings only for ones that start with a given prefix. Ensure that your solution handles both uppercase and lowercase variations of the prefix correctly.\n>>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/31", "prompt": "def is_prime(n):\t\n'''Return true if a given number is prime, and false otherwise. Ensure to optimize the solution for large inputs to handle millions efficiently.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/35", "prompt": "def max_element(l: list):\t\n'''Return maximum element in the list. Please ensure the function handles both negative and positive numbers accurately.\n>>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input. It returns True if there are two distinct elements in the list. These elements when added together must sum to zero. It returns False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/48", "prompt": "def is_palindrome(text: str):\t\n'''Checks if given string is a palindrome. A palindrome is a string that reads the same forward and backward. We need to determine if the given input string satisfies this condition.\n>>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return the value of 2 raised to the power of n, then take the result modulo p (pay attention to numerics).\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/54", "prompt": "def same_chars(s0: str, s1: str):\t\n'''Check if two words have the same characters. Ensure that each character's frequency in both words is also identical.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a string of \"(\" and \")\". It can consist of zero or more pairs of opening and closing brackets. \n\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/62", "prompt": "def derivative(xs: list):\t\n'''xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form. \n    Additionally, ensure the resulting polynomial is simplified by removing zero coefficients wherever possible.\n>>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/65", "prompt": "def circular_shift(x, shift):\t\n'''Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    Ensure that the function correctly handles negative integers as input.\n>>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/68", "prompt": "def pluck(arr):\t\n'''\n\"Given an array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return [].\n\nEnsure that the algorithm efficiently handles large inputs to maintain optimal performance.\"\nExample 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/72", "prompt": "def will_it_fly(q,w):\t\n'''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w. Ensure that the function handles edge cases effectively.\nExample:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/74", "prompt": "def total_match(lst1, lst2):\t\n'''Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list. To clarify, the function should calculate the sum of characters across all strings in each list. The list with the smaller sum should be returned.\n\nif the two lists have the same number of chars, return the first list.\nExamples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/76", "prompt": "def is_simple_power(x, n):\t\n'''Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if n**int=x. Ensure your solution handles large values of x and n efficiently.\nFor example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/77", "prompt": "def iscube(a):\t\n'''Write a function that takes an integer a and returns True if this integer is a cube of some integer value. Note: you may assume the input is always valid.\nExamples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/81", "prompt": "def numerical_letter_grade(grades):\t\n'''It is the last week of the semester and the teacher has to give the grades to students but she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\nExample:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst. add the even elements that are at odd indices. Ensure your solution efficiently handles lists with a large number of elements.\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/86", "prompt": "def anti_shuffle(s):\t\n'''Write a function that takes a string and returns an ordered version of it. Ordered version of string, is a string where every word (separated by space) is substituted by a new word with all the letters organized in ascending order according to ascii value. Note: You should keep the order of words and blank spaces in the sentence.\nFor example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/89", "prompt": "def encrypt(s):\t\n'''Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being rotated. The alphabet should be rotated in a manner such that the letters shift down by two places. The shift is performed by multiplying the positions by two and then adjusting accordingly.\nFor example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that accepts three numbers. Returns true if one of the numbers is identical to the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/93", "prompt": "def encode(message):\t\n'''Write a function that accepts a message and encodes it by swapping the case of all letters, and replacing each vowel in the message with the letter located 2 positions ahead in the English alphabet. Assume only letters.\nExamples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/95", "prompt": "def check_dict_case(dict):\t\n'''Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False. The function should return False. This happens when the given dictionary is empty.\nExamples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/101", "prompt": "def words_string(s):\t\n'''You will be given a string of words separated by commas or spaces. Your task is to split the string into individual words. You need to then return an array of the words.\nFor example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/102", "prompt": "def choose_num(x, y):\t\n'''This function takes two positive numbers x and y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number in the range, then the function should return -1. The function needs to handle cases where only odd numbers are present in the given range.\nFor example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/104", "prompt": "def unique_digits(x):\t\n'''Given a list of positive integers x, return a sorted list of all elements that haven't any even digit in increasing order.\nFor example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/105", "prompt": "def by_length(arr):\t\n'''Given an array of integers, sort the integers that are between 1 and 9 inclusive. After sorting, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/106", "prompt": "def f(n):\t\n'''Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the aggregate of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\n    f(5) == [1, 2, 6, 24, 15]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/110", "prompt": "def exchange(lst1, lst2):\t\n'''In this problem, you will implement a function that takes two lists of numbers, and decides if an exchange of elements between them can make lst1 consist solely of even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".\nFor example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/113", "prompt": "def odd_count(lst):\t\n'''Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the number of odd elements in the string i of the input.\" In this context, you should count how many odd digits are present in the i'th string of the input. All the i's should be replaced by the number of odd digits in the i'th string of the input.\n>>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/116", "prompt": "def sort_array(arr):\t\n'''\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \n    Make sure to handle edge cases where the array might be empty.\n\n    It must be implemented like this:\n    \n>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/119", "prompt": "def match_parens(lst):\t\n'''You are given a list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only. Your task is to determine whether it is feasible to concatenate the two strings in any sequence. It is your job to check if it is possible to concatenate the two strings in some order, that the resulting string will be good. A string S is considered to be good if and only if all parentheses in S are balanced. For example: the string '(())()' is good, while the string '())' is not. Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\nExamples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/121", "prompt": "def solution(lst):\t\n'''Given a non-empty list of integers, return the sum of all of the odd elements. These elements should be located in even positions within the list.\nExamples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/126", "prompt": "def is_sorted(lst):\t\n'''Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, then return False. You should ensure that the list does not contain more than one duplicate of any number. Assume no negative numbers and only integers.\nExamples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/127", "prompt": "def intersection(interval1, interval2):\t\n'''You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end. This means the interval covers all numbers between start and end inclusive. \n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output]\nsamples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\t\n'''Evaluate whether the number provided, n, can be expressed as the addition of precisely four positive even numbers.\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will leave unchanged the entries in the list whose indexes aren't multiples of 3 or 4. The function shall then return the sum of all entries.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/144", "prompt": "def simplify(x, n):\t\n'''Your task is to implement a function that will simplify the expression x * n. The function will return True if the product of x and n evaluates to an integer and False in other cases. Both x and n are string representations of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/150", "prompt": "def x_or_y(n, x, y):\t\n'''A simple program which should return the value of x if n is a prime number and should return the value of y otherwise. Ensure that your solution is optimized for efficiency, particularly when checking if n is a prime number.\nExamples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/152", "prompt": "def compare(game,guess):\t\n'''I think we all remember that feeling when the result of some long-awaited event is finally known, and the feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/153", "prompt": "def Strongest_Extension(class_name, extensions):\t\n'''You will be given the name of a class (a string) and a list of extensions. The extensions are to be used to load additional classes to the class. The strength of the extension is as follows: Let CAP be the number of the uppercase letters in the extension's name, and let SM be the number of lowercase letters in the extension's name, the strength is given by the fraction CAP - SM. You should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there are two or more extensions with the same strength, you should choose the one that comes first in the list. For example, if you are given \"Slices\" as the class and a list of the extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension (its strength is -1). Ensure your solution is efficient in terms of time complexity.\nExample:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/154", "prompt": "def cycpattern_check(a , b):\t\n'''You have two words. Return True if the second word or any rotated form of it can be found as a substring within the first word.\ncycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/159", "prompt": "def eat(number, need, remaining):\t\n'''You're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to eat more carrots to complete the day's meals. You should return an array of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\nExample:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/160", "prompt": "def do_algebra(operator, operand):\t\n'''Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebric expression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\n\nEnsure that the evaluation respects the order of operations as dictated by standard mathematical precedence rules.\nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/76", "prompt": "def is_simple_power(x, n):\t\n'''Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if it meets a certain mathematical condition. Specifically, x is a simple power of n if n**int=x.\nFor example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/101", "prompt": "def words_string(s):\t\n'''\nYou will be given a string of words separated by commas or spaces. Your task is to split the string into words and return an array of the words. Ensure that all punctuation marks are removed from the words before adding them to the array.\nFor example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n''' Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors.\n    Ensure your function handles edge cases such as numbers with no prime factors correctly.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/77", "prompt": "def iscube(a):\t\n'''Write a function that takes an integer a and returns True if this integer is a cube of some integer number. Note: you may assume the input is always valid.\nExamples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/95", "prompt": "def check_dict_case(dict):\t\n'''Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False. The function should return False if the given dictionary does not contain any elements. This means that an empty dictionary would lead to a False return value.\nExamples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/159", "prompt": "def eat(number, need, remaining):\t\n'''You're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to eat more carrots to complete the day's meals. You should return an array of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry. Make sure your solution efficiently handles large input values.\nExample:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/65", "prompt": "def circular_shift(x, shift):\t\n'''Shift the digits to the right by the value of shift for the integer x and provide the outcome as a string.  \nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/31", "prompt": "def is_prime(n):\t\n'''Return true if a given number is prime, and false otherwise.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'; return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/86", "prompt": "def anti_shuffle(s):\t\n'''Write a function that takes a string and returns an ordered version of it. In an ordered version of a string, all words (separated by space) are replaced by a new word. This new word is one where all the characters are arranged in ascending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence.\nFor example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\t\n'''Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers. Ensure that all four numbers are positive. Additionally, verify that each number added to reach n is even.\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/110", "prompt": "def exchange(lst1, lst2):\t\n'''In this problem, you will implement a function that takes two lists of numbers. These lists will be used to evaluate the possibility of exchanging elements. Your task is to determine whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".\nFor example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/154", "prompt": "def cycpattern_check(a , b):\t\n'''You are given 2 words. You have to determine whether the second word or any of its rotations is a substring in the first word. You need to return True if the condition is met.\ncycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/105", "prompt": "def by_length(arr):\t\n'''Given an array of integers, organize the digits within the range of 1 to 9, \nreverse the resulting array, and then replace each digit by its corresponding name from \n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/106", "prompt": "def f(n):\t\n'''Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i). Ensure the function handles edge cases where n is less than or equal to zero efficiently.\nExample:\n    f(5) == [1, 2, 6, 24, 15]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''\nCreate a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases. Make sure to handle edge cases where the input numbers might be negative, zero, or very large.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/26", "prompt": "def remove_duplicates(numbers: List[int]) -> List[int]:\t\n'''From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input. Make sure to use efficient solutions to handle large inputs effectively.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/68", "prompt": "def pluck(arr):\t\n'''Given an array representing a branch of a tree that has non-negative integer nodes, your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value, and if multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [ smallest_value, its index ], and if there are no even values or the given array is empty, return [].\nExample 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/72", "prompt": "def will_it_fly(q,w):\t\n'''Write a function that returns True if the object q will fly, and False otherwise. The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w. The function should efficiently assess both conditions to determine the flight status of the object.\nExample:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n''' brackets is a sequence composed of \"(\" and \")\" characters.\n    return True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/104", "prompt": "def unique_digits(x):\t\n'''Given a list of positive integers x, return a sorted list of all elements that hasn't any even digit, and note that the returned list should be sorted in increasing order.\nFor example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst, add the even elements that are at odd indices.\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''\nThis function will accept a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/160", "prompt": "def do_algebra(operator, operand):\t\n'''Given two lists called operator and operand. The first list contains basic algebra operations, and the second list is composed of integers. Construct an algebraic expression using these two lists and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input. It processes the list to find specific pairs of numbers. It returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/35", "prompt": "def max_element(l: list):\t\n'''Find the largest element in the list.\n>>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/150", "prompt": "def x_or_y(n, x, y):\t\n'''A simple program which should return the value of x if n is a prime number. The program should handle only valid integer inputs. It should return the value of y otherwise.\nExamples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/153", "prompt": "def Strongest_Extension(class_name, extensions):\t\n'''You will be given the name of a class (a string) and a list of extensions. The strength of the extension is as follows: Let CAP be the number of the uppercase letters in the extension's name, and let SM be the number of lowercase letters in the extension's name, the strength is given by the fraction CAP - SM. You should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there are two or more extensions with the same strength, you should choose the one that comes first in the list. For example, if you are given \"Slices\" as the class and a list of the extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension (its strength is -1).\nExample:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/113", "prompt": "def odd_count(lst):\t\n'''Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the count of odd numbers in the string i of the input.\" where all the i's should be replaced by the number of odd digits in the i'th string of the input.\n>>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/121", "prompt": "def solution(lst):\t\n'''Given a non-empty list of integers, identify all of the odd elements that are in even positions and return their sum.\nExamples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n''' You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False. Assume each operation is a valid integer and the list can contain at least one operation.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/93", "prompt": "def encode(message):\t\n'''Write a function that takes a message, and encodes in such a way that it swaps case of all letters, substitutes every vowel in the message with the letter that comes two positions later in the English alphabet. Assume only letters.\nExamples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/116", "prompt": "def sort_array(arr):\t\n'''In this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order. You will need to analyze each number by converting it to its binary representation first. From there, count the number of ones present in each binary representation.\n\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/18", "prompt": "def how_many_times(string: str, substring: str) -> int:\t\n'''Find how many times a given substring can be found in the original string, including overlapping cases.\n>>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/17", "prompt": "def parse_music(music_string: str) -> List[int]:\t\n'''Input for this function is a string that signifies musical notes in a unique ASCII format.  \nYour task is to parse this string and return list of integers corresponding to how many beats does each not last.\n\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/152", "prompt": "def compare(game,guess):\t\n'''I believe we all recall the sensation when the outcome of a long-anticipated event becomes known. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/48", "prompt": "def is_palindrome(text: str):\t\n'''Checks if given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward or forward. Such sequences need to be identical even when reversed.\n>>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/119", "prompt": "def match_parens(lst):\t\n'''Two strings are provided to you, consisting solely of open '(' or close ')' parentheses.\nExamples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/0", "prompt": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\t\n'''Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/1", "prompt": "def separate_paren_groups(paren_string: str) -> List[str]:\t\n''' Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    Ensure that the resulting list maintains the order of groups as they appear in the original string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/20", "prompt": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\t\n'''From a supplied list of numbers (of length at least two), select and return two that are the closest to each other in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/23", "prompt": "def strlen(string: str) -> int:\t\n''' Return length of given string. The length of the string is determined by counting the number of characters. Each character, including spaces and punctuation marks, is considered in the count.\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/28", "prompt": "def concatenate(strings: List[str]) -> str:\t\n'''Concatenate list of strings into a single string Description: Write a function that takes a list of strings as an argument and returns a single string that is the concatenation of all the strings in the list. Ensure that the function efficiently handles large lists and correctly processes elements even if they are empty strings.\n>>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/120", "prompt": "def maximum(arr, k):\t\n'''Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr. Ensure that the solution can handle edge cases, such as when k is greater than the length of arr.\nExample 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/122", "prompt": "def add_elements(arr, k):\t\n'''Given a non-empty array of integers arr and an integer k, return the sum of the elements. The elements should have at most two digits. This should be from the first k elements of arr.\nExample:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/128", "prompt": "def prod_signs(arr):\t\n'''\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n    Consider edge cases where the array contains zero, as this affects the product of signs.\nExample:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/131", "prompt": "def digits(n):\t\n'''Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even. Ensure the solution handles edge cases where n is a single digit.\nFor example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/135", "prompt": "def can_arrange(arr):\t\n'''Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values. Ensure that your solution efficiently handles arrays of any size.\nExamples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/76", "prompt": "def is_simple_power(x, n):\t\n'''Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    Make sure your function handles a range of edge cases, including negative numbers and zero.\nFor example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/101", "prompt": "def words_string(s):\t\n'''    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    Make sure to handle any leading or trailing spaces or commas in the input string.\nFor example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n'''Return list of prime factors of given integer in the order from smallest to largest. Input number should be equal to the product of all factors showing each of the factors listed number of times corresponding to how many times it appears in factorization.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    Ensure that the input string contains at least one numeral.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/65", "prompt": "def circular_shift(x, shift):\t\n'''Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    This operation should preserve the leading zeros in the input number if there are any.\n>>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/26", "prompt": "def remove_duplicates(numbers: List[int]) -> List[int]:\t\n'''From a list of integers, remove all elements that occur more than once. Keep order of elements left the same as in the input. Ensure the solution has optimal time complexity for processing large lists.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/31", "prompt": "def is_prime(n):\t\n'''Return true if a given number is prime, and false otherwise. Ensure your solution is optimized for large numbers.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/110", "prompt": "def exchange(lst1, lst2):\t\n'''In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers. Performing an exchange of elements refers to transferring numbers from one list to the other. This ensures that lst1 can be transformed into a list containing only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".\nFor example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/86", "prompt": "def anti_shuffle(s):\t\n'''Write a function that takes a string and returns an ordered version of it. Ordered form of the string is created by substituting each word (separated by space) with a new word where all characters are sorted in ascending order according to their ascii value. Note: You should keep the order of words and blank spaces in the sentence.\nFor example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/105", "prompt": "def by_length(arr):\t\n'''Given an array of integers, arrange the numbers that fall between 1 and 9 inclusive, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a sequence of \"(\" and \")\". \n    return True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three. Ensure that your solution efficiently handles multiple groups in a single input string.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/93", "prompt": "def encode(message):\t\n'''Write a function that accepts a message and encodes it in a manner that it swaps the case of every letter, changes all vowels in the message with the letter located 2 spots forward of that vowel in the alphabet. Assume only letters.\nExamples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/106", "prompt": "def f(n):\t\n'''Implement the function f that takes n as a parameter, and returns a list of size n, so that at index i, the value of the element is the factorial of i when i is even or otherwise the sum of numbers from 1 to i. i starts from 1. The factorial of i means multiplying the numbers from 1 to i (1 * 2 * ... * i).\nExample:\n    f(5) == [1, 2, 6, 24, 15]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Calculate 2^n mod p (pay attention to numerical values).\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/72", "prompt": "def will_it_fly(q,w):\t\n'''Write a function that returns True if the object q will fly, and False otherwise. The object q will take off if it is a palindromic array and its elements' sum is not greater than the highest allowable weight w.\nExample:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input, and returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/104", "prompt": "def unique_digits(x):\t\n'''Given a list of positive integers x, return a sorted list of all elements that hasn't any even digit, and the returned list should be sorted in increasing order.\nFor example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3. It will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst. add the even elements that are at odd indices. Ensure your solution handles large lists efficiently and consider edge cases where the list may have varying patterns of even numbers and indices.\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. These numbers could be any integers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/150", "prompt": "def x_or_y(n, x, y):\t\n'''A simple program which should return the value of x if n is a prime number and should return the value of y otherwise.\nExamples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/1", "prompt": "def separate_paren_groups(paren_string: str) -> List[str]:\t\n'''Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other. Ignore any spaces in the input string. Ensure that the implementation efficiently handles different levels of nested parentheses.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/160", "prompt": "def do_algebra(operator, operand):\t\n'''Given two lists operator, and operand. The first list has basic algebra operations, while the second list is a list of integers. Use the two given lists to build the algebric expression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/152", "prompt": "def compare(game,guess):\t\n'''I think we all remember that feeling when the result of some long-awaited event is finally known. That moment can be quite intense. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n''' You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your objective is to determine if the account balance ever drops below zero, and if it does, the function should return True. Otherwise, it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/121", "prompt": "def solution(lst):\t\n'''For a non-empty list of integers, provide the sum of all odd numbers located at even indices.\nExamples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/113", "prompt": "def odd_count(lst):\t\n'''Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the number of odd elements in the string i of the input.\" where all the i's should be replaced by the number of odd digits in the i'th string of the input. Ensure your solution is efficient in terms of both time and space complexity to cater to large input sizes.\n>>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/23", "prompt": "def strlen(string: str) -> int:\t\n'''Return the length of the given string. The string is a sequence of characters. Compute the number of characters it contains. Make sure to count all characters correctly.\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/122", "prompt": "def add_elements(arr, k):\t\n'''Given a non-empty array of integers arr and an integer k, return the sum of the elements that have at most two digits from the first k elements of arr. The array arr will contain multiple integers, and the value of k will determine how many initial elements you should consider calculating the sum.\nExample:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/8", "prompt": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\t\n'''For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.  \nA sum that is empty should be equal to 0 and an empty product should be equal to 1.\n>>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/144", "prompt": "def simplify(x, n):\t\n'''Your task is to create a function to simplify the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise. Both x and n are string representations of a fraction, formatted as <numerator>/<denominator> where both the numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/135", "prompt": "def can_arrange(arr):\t\n'''Create a function which returns the largest index of an element which is not greater than or equal to the element immediately preceding it. If no such element exists, you need to return -1. The given array will not contain duplicate values.\nExamples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/120", "prompt": "def maximum(arr, k):\t\n'''Given an array arr of integers and a positive integer k, return a sorted list of k elements containing the largest k numbers in arr.\nExample 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. This function should handle both positive and negative integers correctly.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/15", "prompt": "def string_sequence(n: int) -> str:\t\n'''Return a string containing space-delimited numbers starting from 0 up to n inclusive. Ensure that the function handles edge cases gracefully, such as when n is 0 or a negative number.\n>>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/24", "prompt": "def largest_divisor(n: int) -> int:\t\n'''For a given number n, find the largest number less than n that divides n evenly.\n>>> largest_divisor(15)\n    5\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/30", "prompt": "def get_positive(l: list):\t\n'''Provide solely non-negative integers present within the array.\n>>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/39", "prompt": "def prime_fib(n: int):\t\n'''\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime. This function should be efficient in identifying such numbers.\n\n>>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/40", "prompt": "def triples_sum_to_zero(l: list):\t\n'''    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    Ensure to handle cases with varying list sizes for accurate results.\n>>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/42", "prompt": "def incr_list(l: list):\t\n'''Return an array with items increased by 1.\n>>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/69", "prompt": "def search(lst):\t\n'''You are given a non-empty list of positive integers. Return the largest integer that is above zero and has a count that is at least its own value. The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.\nExamples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. Strange sorting involves starting with the minimum value followed by the maximum of the remaining integers, and then alternating between minimum and maximum values.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/107", "prompt": "def even_odd_palindrome(n):\t\n'''Given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive. Ensure that the function handles edge cases gracefully, such as when n is 1 or when the range includes negative numbers inadvertently.\nExample 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/108", "prompt": "def count_nums(arr):\t\n'''Write a function count_nums which takes an array of integers and returns the count of integers whose sum of digits is greater than zero. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/161", "prompt": "def solve(s):\t\n'''You are given a string s. if s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is. If the string contains no letters, reverse the string. The function should return the resulted string. Make sure to handle edge cases where the string may be empty or contain special characters.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/159", "prompt": "def eat(number, need, remaining):\t\n'''\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Consider edge cases where the remaining carrots are zero or negative.\nExample:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n'''Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appears in factorization. Input number should be equal to the product of all factors. Ensure to handle edge cases such as inputs of 0, 1, or negative numbers appropriately.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/31", "prompt": "def is_prime(n):\t\n'''Return true if a specified number is prime, and false if it is not.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine', and return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/105", "prompt": "def by_length(arr):\t\n'''Given an array of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nEnsure the solution is implemented efficiently in terms of both time and space complexity.\nFor example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/65", "prompt": "def circular_shift(x, shift):\t\n'''Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    Ensure that the integer x is positive before processing.\n>>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/26", "prompt": "def remove_duplicates(numbers: List[int]) -> List[int]:\t\n'''From a list of integers, remove all elements that occur more than once. Keep order of these elements left the same as in the input. Ensure that the sequence of remaining elements does not change from how they appeared originally.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/110", "prompt": "def exchange(lst1, lst2):\t\n'''In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\". Consider edge cases where one or both lists might be empty.\nFor example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/86", "prompt": "def anti_shuffle(s):\t\n'''Write a function that takes a string and returns an ordered version of it. Ordered version of string, is a string where every word (separated by space) is substituted with a new word where all the characters are organized in increasing order according to ascii value. Note: You should keep the order of words and blank spaces in the sentence.\nFor example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/1", "prompt": "def separate_paren_groups(paren_string: str) -> List[str]:\t\n'''Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those groups into separate strings. You need to return the list of those strings. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/161", "prompt": "def solve(s):\t\n'''You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Note: You must handle both uppercase and lowercase letters efficiently.\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/95", "prompt": "def check_dict_case(dict):\t\n'''Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False. The function should return False if the given dictionary is empty. If the dictionary has no elements, the function should return False.\nExamples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/154", "prompt": "def cycpattern_check(a , b):\t\n'''You are given 2 words. You must return True if the second word or any of its rotations appears as a substring in the first word.\ncycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/72", "prompt": "def will_it_fly(q,w):\t\n'''Write a function that returns True if the object q will fly, and False otherwise. The object q will take flight if it is balanced (meaning it is a list structured as a palindrome) and the total of its elements does not exceed the maximum allowable weight w.\nExample:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/106", "prompt": "def f(n):\t\n'''Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. The factorial of i is the multiplication of the numbers from 1 to i. Multiplication of the numbers from 1 to i is represented as 1 * 2 * ... * i.\nExample:\n    f(5) == [1, 2, 6, 24, 15]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your job is to determine if there is any time the account balance drops below zero, and at that moment the function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3. It will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/104", "prompt": "def unique_digits(x):\t\n'''Given a list of positive integers x, return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order. \n    Consider edge cases such as when the list is empty or contains only even digits.\nFor example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst. add the even elements that are at odd indices. Ensure that your solution is efficient and handles large input sizes gracefully.\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input and returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/39", "prompt": "def prime_fib(n: int):\t\n'''prime_fib returns the n-th Fibonacci number that is also a prime.\n>>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/150", "prompt": "def x_or_y(n, x, y):\t\n'''A simple program which should return the value of x if n is a prime number. The program should return the value of y otherwise.\nExamples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/152", "prompt": "def compare(game,guess):\t\n'''I think we all remember that feeling when the result of some long-awaited event is finally known. The emotions and contemplations you experience at that instant are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/113", "prompt": "def odd_count(lst):\t\n'''Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the number of odd elements in the string i of the input.\" It should count how many of the digits are odd numbers in the i'th string. Where all the i's should be replaced by the number of odd digits in the i'th string of the input.\n>>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/122", "prompt": "def add_elements(arr, k):\t\n'''Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr. The integers in the array are provided, and they form a sequence. You need to consider only the specified number of elements from this sequence.\nExample:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/68", "prompt": "def pluck(arr):\t\n'''Given an array representing a branch of a tree that has non-negative integer nodes your task is to remove one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe extracted node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return [].\nExample 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/144", "prompt": "def simplify(x, n):\t\n'''Your task is to implement a function that will simplify the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise, where both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/120", "prompt": "def maximum(arr, k):\t\n'''Given an array arr of integers and a positive integer k, return an arranged listing of length k containing the largest k numbers from arr.\nExample 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/35", "prompt": "def max_element(l: list):\t\n'''Return maximum element in the list. Make sure to handle cases where the list is empty.\n>>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/116", "prompt": "def sort_array(arr):\t\n'''In this Kata, you have to sort an array of non-negative integers according to number of ones in their binary representation in ascending order. For similar number of ones, sort based on decimal value. Be mindful of performance considerations for large arrays.\n>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/48", "prompt": "def is_palindrome(text: str):\t\n'''Checks if given string is a palindrome. Ensure that the comparison accounts for case sensitivity and ignores non-alphanumeric characters.\n>>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/15", "prompt": "def string_sequence(n: int) -> str:\t\n'''Return a string with space-separated numbers beginning at 0 and going up to n, including n.\n>>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/42", "prompt": "def incr_list(l: list):\t\n'''Return list with elements incremented by 1. Ensure all elements are integers before performing the increment operation.\n>>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. Ensure that your function handles both positive and negative integers efficiently.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on. Ensure your solution handles edge cases such as lists with duplicate values or lists with a single element.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/131", "prompt": "def digits(n):\t\n'''Given a positive integer n, send back the result of multiplying the odd digits. Return 0 if all digits are even.\nFor example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/159", "prompt": "def eat(number, need, remaining):\t\n'''You're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to eat more carrots to fulfill your meal requirements for the day. you should return an array of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\nExample:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/101", "prompt": "def words_string(s):\t\n'''You will receive a string consisting of words divided by commas or spaces. Your task is to split the string into words and return an array of the words.\nFor example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/120", "prompt": "def maximum(arr, k):\t\n'''Given an array arr of integers and a positive integer k, return a sorted list of length k. This list should contain the maximum k numbers in arr.\nExample 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n'''Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appears in factorization. The input number should be equal to the product of all factors. The number you provide must multiply all the factors together to match the input number.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/10", "prompt": "def make_palindrome(string: str) -> str:\t\n'''Find the shortest palindrome that begins with a supplied string. Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome, then append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a specified string, switch lowercase letters to uppercase and uppercase letters to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/36", "prompt": "def fizz_buzz(n: int):\t\n'''Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13. If there are integers that are exactly equal to n, they should not be considered in this count. Only integers that are strictly less than n should be evaluated for divisibility.\n>>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/52", "prompt": "def below_threshold(l: list, t: int):\t\n'''Return True if all numbers in the list l are below threshold t. Ensure that the function handles edge cases, such as when the list is empty or when all numbers are equal to the threshold.\n>>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/78", "prompt": "def hex_key(num):\t\n'''You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits include the following: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase.\nExamples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/87", "prompt": "def get_row(lst, x):\t\n'''You are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order. Ensure that the solution efficiently handles the case where x is not present in any row.\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/96", "prompt": "def count_up_to(n):\t\n'''Implement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n. Make sure your solution is efficient for large input values.\nfor example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/100", "prompt": "def make_a_pile(n):\t\n'''Given a positive integer n, you have to make a pile of n levels of stones. The first level has n stones. The number of stones in the next level is: - the next odd number if n is odd. Odd numbers are those integers which are not divisible evenly by 2. - the next even number if n is even. Return the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).\nExamples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/148", "prompt": "def bf(planet1, planet2):\t\n'''```\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a tuple containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names. \nConsider edge cases where the planets are the same or consecutive in orbit.\n```\nExamples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-separated string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', and 'nine'. Return the string with numbers arranged in order from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/105", "prompt": "def by_length(arr):\t\n'''Given an array of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\". Ensure that the program handles input arrays of varying lengths gracefully.\nFor example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/65", "prompt": "def circular_shift(x, shift):\t\n'''Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    Make sure to handle negative shift values appropriately.\n>>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\t\n'''Determine if the provided integer n can be expressed as the sum of precisely 4 positive even integers.\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/101", "prompt": "def words_string(s):\t\n'''You will be given a string of words separated by commas or spaces, and your task is to split the string into words and return an array of the words.\nFor example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/86", "prompt": "def anti_shuffle(s):\t\n'''Write a function that takes a string and returns an ordered version of it. Ordered version of string, is a string where every word (separated by space) is replaced by a new word where all the characters arranged in ascending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence.\nFor example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/160", "prompt": "def do_algebra(operator, operand):\t\n'''Given two lists operator, and operand. The first list has basic algebra operations, and the second list consists of integers used to build the algebraic expression whose evaluation should be returned.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** )\nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/110", "prompt": "def exchange(lst1, lst2):\t\n'''In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    \n    Consider edge cases such as when one or both lists are empty or already fulfill the condition.\nFor example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/26", "prompt": "def remove_duplicates(numbers: List[int]) -> List[int]:\t\n'''From a list of integers, remove all elements that occur more than once. If an integer appears multiple times in the list, it should be eliminated completely. Keep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/1", "prompt": "def separate_paren_groups(paren_string: str) -> List[str]:\t\n'''Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Separate groups are balanced, where each open brace is properly closed. They are not nested within each other. Ignore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/161", "prompt": "def solve(s):\t\n'''You are given a string s.  \n    if s[i] is a letter, reverse its case from lower to upper or vise versa,  \n    otherwise keep it as it is.  \n    If the string contains no letters, reverse the string.  \n    The function should return the resulted string.  \n    Consider edge cases where the string might be entirely composed of non-letter characters.  \nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/154", "prompt": "def cycpattern_check(a , b):\t\n'''You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word. Consider edge cases such as empty strings and overlaps.\ncycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/106", "prompt": "def f(n):\t\n'''Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. Here, i starts from 1. The factorial of i is the multiplication of the numbers from 1 to i. It is represented by the product 1 * 2 * ... * i.\nExample:\n    f(5) == [1, 2, 6, 24, 15]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/150", "prompt": "def x_or_y(n, x, y):\t\n'''A simple program that returns the value of x if n is a prime number and y otherwise.\nExamples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/113", "prompt": "def odd_count(lst):\t\n'''Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the number of odd elements in the string i of the input.\" Each string may contain several odd digits. The number of odd digits in the i'th string of the input should replace all the i's.\n>>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n''' You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    Ensure that the function efficiently handles large lists and performs with an optimal time complexity.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3; the function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/104", "prompt": "def unique_digits(x):\t\n'''Given a list of positive integers x, return a sorted list of all elements that hasn't any even digit.\n\nNote: Returned list should be sorted in increasing order.\n\nPlease ensure that your solution handles edge cases without alterations to the original list.\nFor example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/39", "prompt": "def prime_fib(n: int):\t\n'''prime_fib returns n-th number that is a Fibonacci number and it's also prime. Make sure to handle large values of n efficiently.\n>>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst, sum the even elements located at odd indices.\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/93", "prompt": "def encode(message):\t\n'''Write a function that receives a message, and encodes in such a way that it swaps case of all letters, replaces all vowels in the message with the letter that appears 2 positions ahead of that vowel in the english alphabet. Assume only letters.\nExamples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/152", "prompt": "def compare(game,guess):\t\n'''I think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are definitely worth noting down. It can be interesting when you start comparing them with others. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n''' brackets is a string consisting only of the characters \"(\" and \")\". These characters represent opening and closing brackets respectively.\n    return True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return 2^n modulo p. Ensure that you are aware of the numerics involved in this calculation.\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/68", "prompt": "def pluck(arr):\t\n'''Given an array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The node that should be plucked needs to have the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [ smalest_value, its index ]. If there are no even values or the given array is empty, return [].\nExample 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/35", "prompt": "def max_element(l: list):\t\n'''Bring back the largest item in the array.\n>>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/122", "prompt": "def add_elements(arr, k):\t\n'''Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr. Ensure your solution handles edge cases such as negative numbers and arrays of varying lengths.\nExample:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases. Ensure your solution handles negative numbers correctly.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/121", "prompt": "def solution(lst):\t\n'''Given a non-empty list of integers, return the sum of all odd elements located at even positions.\nExamples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/42", "prompt": "def incr_list(l: list):\t\n'''Return list with elements incremented by 1. In this problem, you will be given a list of integers. Your task is to iterate through each element in the list and increase its value by 1.\n>>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/131", "prompt": "def digits(n):\t\n'''Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even. If n consists entirely of digits that are even, return 0.\nFor example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/78", "prompt": "def hex_key(num):\t\n'''You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Ensure your function handles both lowercase and uppercase letters seamlessly to maintain robustness.\nExamples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/18", "prompt": "def how_many_times(string: str, substring: str) -> int:\t\n'''Find how many times a specified substring appears in the initial string. Include overlapping instances.\n>>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. These are the only acceptable words for numbers in the input string. Make sure that no other number words are included in the input string. Return the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/76", "prompt": "def is_simple_power(x, n):\t\n'''Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. The number x is considered a simple power of n. This happens if n**int=x.\nFor example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n'''Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appears in factorization. The input number should be equal to the product of all factors. The integer is factored into its prime components, and then the product of these factors must match the original input number exactly.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/105", "prompt": "def by_length(arr):\t\n'''Given an array of integers, sort the integers that are between 1 and 9 inclusive. After sorting, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/65", "prompt": "def circular_shift(x, shift):\t\n'''Circularly rotate the digits of integer x, move the digits to the right by shift, and return the outcome as a string.  \nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/87", "prompt": "def get_row(lst, x):\t\n'''You are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order. Ensure the solution handles edge cases where x is not present in any row or the list is empty.\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a given string, flip lowercase characters to uppercase. Change uppercase characters to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/96", "prompt": "def count_up_to(n):\t\n'''Implement a function that takes a non-negative integer and returns an array of the first n integers. These integers should be prime numbers and less than n.\nfor example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/128", "prompt": "def prod_signs(arr):\t\n'''You are provided with an array arr of integers and you need to return\nthe sum of the absolute values of integers multiplied by the product of all the signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return None for empty arr.\nExample:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/69", "prompt": "def search(lst):\t\n'''You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1. Consider edge cases where the list might contain a wide range of integer values.\nExamples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/81", "prompt": "def numerical_letter_grade(grades):\t\n'''It's the final week of the term and the instructor needs to assign grades to the students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\nExample:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/100", "prompt": "def make_a_pile(n):\t\n'''Given a positive integer n, you have to make a pile of n levels of stones. The first level contains n stones. The count of stones in the subsequent level is: - the next odd number if n is odd. - the next even number if n is even. Return the number of stones in each level in a list, where element at index i represents the number of stones in the level (i+1).\nExamples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\t\n'''Evaluate whether the given number n can be expressed as the sum of 4 positive even numbers.\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/31", "prompt": "def is_prime(n):\t\n'''Return true if a given number is prime, and false otherwise. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/86", "prompt": "def anti_shuffle(s):\t\n'''Write a function that takes a string and returns an ordered version of it. Ordered version of string is a string where all words (separated by space) are replaced by a new word with characters arranged in ascending order based on ascii value. Note: You should keep the order of words and blank spaces in the sentence.\nFor example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/110", "prompt": "def exchange(lst1, lst2):\t\n'''In this problem, you are tasked with creating a function that accepts two lists of numbers and determines whether a swap of elements between them can be carried out to transform lst1 into a list comprised solely of even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".\nFor example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/26", "prompt": "def remove_duplicates(numbers: List[int]) -> List[int]:\t\n'''From a list of integers, delete all elements that appear more than once. Keep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero. When this happens, the function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/106", "prompt": "def f(n):\t\n'''Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i). Ensure your solution handles edge cases, such as when n is zero or negative, gracefully.\nExample:\n    f(5) == [1, 2, 6, 24, 15]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/150", "prompt": "def x_or_y(n, x, y):\t\n'''A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise. Ensure your solution can handle large values of n efficiently.\nExamples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/77", "prompt": "def iscube(a):\t\n'''Write a function that takes an integer a and returns True if this integer is a cube of some integer number, noting that you may assume the input is always valid.\nExamples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/33", "prompt": "def sort_third(l: list):\t\n'''This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    Ensure the solution handles edge cases like empty lists or lists with fewer than three elements efficiently.\n>>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/34", "prompt": "def unique(l: list):\t\n'''Return sorted unique elements in a list. You need to identify all the unique elements within the list provided. After identifying these unique elements, sort them in ascending order.\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return ordered distinct common elements from both lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/90", "prompt": "def next_smallest(lst):\t\n'''\n    You are given a list of integers.\n    Write a function that sorts the list in ascending order.\nnext_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/112", "prompt": "def reverse_delete(s,c):\t\n'''Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Consider edge cases where the string s is empty or contains only characters found in c.\nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/118", "prompt": "def get_closest_vowel(word):\t\n'''You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Consider edge cases where no consonants exist or all vowels are at the start and end.\nExample:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/137", "prompt": "def compare_one(a, b):\t\n'''Create a function that takes integers, floats, or strings representing real numbers, and returns the larger variable in its given variable type. Return None if the values are equal. Note: If a real number is represented as a string, the floating point might be . or , Be sure to handle cases with negative numbers correctly.\ncompare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/154", "prompt": "def cycpattern_check(a , b):\t\n'''You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word. Consider edge cases such as empty strings or words containing spaces.\ncycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/104", "prompt": "def unique_digits(x):\t\n'''Given a list of positive integers x, return a sorted list of all elements that hasn't any even digit. Note: Returned list should be sorted in increasing order.\nFor example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will receive a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not alter the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/39", "prompt": "def prime_fib(n: int):\t\n'''prime_fib returns the n-th Fibonacci number that is also a prime.\n>>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/152", "prompt": "def compare(game,guess):\t\n'''I think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are intense. They are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/95", "prompt": "def check_dict_case(dict):\t\n'''    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    Ensure that the dictionary does not contain any non-string keys.\nExamples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst, add the even elements that are at odd indices.\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a string of \"(\" and \")\"; return True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/68", "prompt": "def pluck(arr):\t\n'''Given an array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found, you should return the node that has the smallest index. The plucked node should be returned in a list, [ smalest_value, its index ]. If there are no even values or the given array is empty, return [].\nExample 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return 2^n modulo p (be aware of numerics). Make sure to consider the properties of modulo operations while implementing your solution.\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function is a string represented multiple groups for nested parentheses separated by spaces. In each group, there can be multiple levels of nested parentheses. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/126", "prompt": "def is_sorted(lst):\t\n'''Given a list of numbers, return whether or not they are sorted in ascending order. If list contains more than one duplicate of the same number, return False. Assume no negative numbers and only integers.\nExamples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine', and return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/42", "prompt": "def incr_list(l: list):\t\n'''Return list with elements incremented by 1. Ensure your solution efficiently handles large lists as well.\n>>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/122", "prompt": "def add_elements(arr, k):\t\n'''\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr. Consider cases where k is greater than the length of the array.\nExample:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that requires 3 numbers.\nReturns true if one of the numbers matches the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/121", "prompt": "def solution(lst):\t\n'''Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions. Ensure your solution efficiently handles large lists.\nExamples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/110", "prompt": "def exchange(lst1, lst2):\t\n'''In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    Assume that both lists have at least one element.\nFor example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/105", "prompt": "def by_length(arr):\t\n'''Given an array of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n'''Return list of prime factors of given integer in the order from smallest to largest. Each factor must be repeated in the list as many times as it occurs in the factorization process. Input number should be equal to the product of all factors.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/48", "prompt": "def is_palindrome(text: str):\t\n'''Checks if the given string is a palindrome. A string is considered a palindrome if it reads the same backward as forward. This means that the sequence of characters should remain unchanged when reversed.\n>>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/154", "prompt": "def cycpattern_check(a , b):\t\n'''You are given 2 words. You must return True if the second word or any rotated versions of it are present as a substring within the first word.\ncycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a specified string, convert lowercase letters to uppercase and uppercase letters to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/120", "prompt": "def maximum(arr, k):\t\n'''Given an array arr of integers and a positive integer k, return a sorted list of length k with the largest k numbers in arr.\nExample 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return the greatest common divisor of two integers a and b. You need to write a function to calculate this value. The greatest common divisor, or GCD, is the largest positive integer that divides both a and b without leaving a remainder.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/135", "prompt": "def can_arrange(arr):\t\n'''Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values. Ensure your solution handles both positive and negative integers efficiently.\nExamples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/90", "prompt": "def next_smallest(lst):\t\n'''You are provided with a collection of integer numbers.  \nWrite a function\nnext_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/31", "prompt": "def is_prime(n):\t\n'''Return true if a given number is prime. If the number is not prime, return false.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/86", "prompt": "def anti_shuffle(s):\t\n'''Write a function that takes a string and returns an ordered version of it. An ordered version of a string is created by substituting each word with a new word, in which all the characters are sorted in ascending order according to their ASCII values. Note: You should keep the order of words and blank spaces in the sentence.\nFor example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/106", "prompt": "def f(n):\t\n'''Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1, and the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\n    f(5) == [1, 2, 6, 24, 15]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero. If the balance does fall below zero at any point, then the function should return True. Otherwise, it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/26", "prompt": "def remove_duplicates(numbers: List[int]) -> List[int]:\t\n'''From a list of integers, eliminate any elements that appear more than once. Keep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/150", "prompt": "def x_or_y(n, x, y):\t\n'''A simple program which should return the value of x if n is a prime number. It should return the value of y otherwise.\nExamples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/104", "prompt": "def unique_digits(x):\t\n'''Given a list of positive integers x, return a sorted list of all elements that hasn't any even digit. Note: Returned list should be sorted in increasing order.\nFor example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/108", "prompt": "def count_nums(arr):\t\n'''Write a function count_nums which takes an array of integers and returns the count of elements where the sum of the digits is greater than 0. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/137", "prompt": "def compare_one(a, b):\t\n'''Create a function that accepts integers, floats, or strings depicting real numbers, and outputs the bigger variable according to its variable type. Return None if the values are equal. Note: If a real number is represented as a string, the floating point might be . or ,\ncompare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/148", "prompt": "def bf(planet1, planet2):\t\n'''```\nThere are eight planets in our solar system: the closest to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune. \nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a tuple containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty tuple if planet1 or planet2 \nare not correct planet names. \nConsider edge cases such as repeated planet names or planets being in the wrong order. \n```\nExamples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/52", "prompt": "def below_threshold(l: list, t: int):\t\n'''Return True if all numbers in the list l are below threshold t. Each number in the list must be individually assessed. The assessment ensures that no number exceeds the specified threshold.\n>>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/1", "prompt": "def separate_paren_groups(paren_string: str) -> List[str]:\t\n'''Input to this function is a string that includes numerous sets of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Distinct groups are balanced (each open brace is properly closed) and not nested within each other. Disregard any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a sequence consisting of \"(\" and \")\".  \nreturn True if each open bracket has a matching close bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3. If the index is a multiple of 3, then the integer entry is squared. It will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst. add the even elements that are at odd indices. \nConsider edge cases such as the smallest possible list and varying step sizes in index selection.\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine', and return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/113", "prompt": "def odd_count(lst):\t\n'''Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the number of odd elements in the string i of the input,\" where all the i's should be replaced by the number of odd digits in the i'th string of the input.\n>>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/110", "prompt": "def exchange(lst1, lst2):\t\n'''In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2, so if it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".\nFor example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function is a string represented multiple groups for nested parentheses separated by spaces. Each group within the string is treated as a separate entity that contains nested parentheses. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/5", "prompt": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\t\n'''Insert a number 'delimeter' between every two consecutive elements of input list `numbers'. Ensure that your solution efficiently handles large lists with minimal performance overhead.\n>>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/9", "prompt": "def rolling_max(numbers: List[int]) -> List[int]:\t\n'''From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence. Ensure that the solution efficiently handles large lists without exceeding time complexity constraints.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/64", "prompt": "def vowels_count(s):\t\n'''Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    Ensure your function works efficiently even for longer strings.\nExample:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/146", "prompt": "def specialFilter(nums):\t\n'''Write a function that takes an array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/149", "prompt": "def sorted_list_sum(lst):\t\n'''Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order. The list is always a list of strings. The list is never an array of numbers, and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will have the same length.\nFor example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/105", "prompt": "def by_length(arr):\t\n'''Given an array of integers, sort the integers that are within the range of 1 to 9 inclusive, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/126", "prompt": "def is_sorted(lst):\t\n'''Given a list of numbers, return whether or not they are sorted in increasing order. If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers.\nExamples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return the remainder when 2 raised to the power n is divided by p (keep numerics in mind).\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/72", "prompt": "def will_it_fly(q,w):\t\n'''Write a function that returns True if the object q will fly, and False otherwise. The object q will fly if it is balanced (it is a list that reads the same forwards and backwards) and the sum of its elements is less than or equal to the maximum weight w.\nExample:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/42", "prompt": "def incr_list(l: list):\t\n'''Return list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/101", "prompt": "def words_string(s):\t\n'''You will receive a string comprising words divided by commas or spaces. Your task is to split the string into words and return an array of the words.\nFor example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/65", "prompt": "def circular_shift(x, shift):\t\n'''Circular shift the digits of the integer x, shift the digits right by shift and return the result as a string. If shift > number of digits, return digits, but these digits should be reversed.\n>>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/101", "prompt": "def words_string(s):\t\n'''You will be given a string of words separated by commas or spaces. Your task is to split the string into words. Then, return an array of the words.\nFor example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\t\n'''Evaluate whether the given number n can be expressed as the sum of exactly 4 positive even numbers. Your task is to determine if n can be broken down into four distinct positive even integers, and if so, provide an example. If it is not possible, return false or indicate the impossibility.\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/120", "prompt": "def maximum(arr, k):\t\n'''Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr. Ensure your solution is optimized for large input sizes.\nExample 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that accepts three numbers. Returns true if one of the numbers equals the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/121", "prompt": "def solution(lst):\t\n'''Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions. Consider positions starting at 0 for the purpose of determining even positions.\nExamples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input. it returns True if there are two distinct elements in the list that sum to zero, and False otherwise. Ensure that your implementation considers both positive and negative integers.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/34", "prompt": "def unique(l: list):\t\n'''Return sorted and unique elements in a list.\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/150", "prompt": "def x_or_y(n, x, y):\t\n'''A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \n    Your task is to implement a function that efficiently determines if n is a prime number and returns the appropriate value based on this check.\nExamples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/154", "prompt": "def cycpattern_check(a , b):\t\n'''You are given 2 words. You must return True if the second word or any version of it rotated is contained in the first word as a substring.\ncycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/76", "prompt": "def is_simple_power(x, n):\t\n'''Your task is to write a function that returns true if a number x is a simple power of n and false in other cases. x is a simple power of n if the condition n**int is equal to x. In this case, the number x represents the power of n.\nFor example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/15", "prompt": "def string_sequence(n: int) -> str:\t\n'''Return a string containing space-delimited numbers starting from 0 upto n inclusive. Consider edge cases such as when n is negative or equal to zero.\n>>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/110", "prompt": "def exchange(lst1, lst2):\t\n'''In this problem, you will implement a function that takes two lists of numbers, and determines whether it is feasible to swap elements between them to make lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".\nFor example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/122", "prompt": "def add_elements(arr, k):\t\n'''Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits. This sum is calculated from the first k elements of arr.\nExample:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. Ensure that your solution handles both positive and negative integers.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/31", "prompt": "def is_prime(n):\t\n'''Return true if a given number is prime, and false in other cases.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/144", "prompt": "def simplify(x, n):\t\n'''Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n    \n    Additionally, the function should handle large numerators and denominators efficiently, ensuring performance remains optimal.\nsimplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to determine if at any moment the account balance drops below zero, and at that point the function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/116", "prompt": "def sort_array(arr):\t\n'''In this Kata, you need to arrange an array of non-negative integers based on the count of ones in their binary form in increasing order.  \nFor similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/26", "prompt": "def remove_duplicates(numbers: List[int]) -> List[int]:\t\n'''From a list of integers, remove all elements that occur more than once. The elements should be compared based on their values. If any element appears more than once, all its occurrences must be removed from the list. Keep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/113", "prompt": "def odd_count(lst):\t\n'''Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the number of odd elements in the string i of the input.\" where all the i's should be replaced. They should be replaced by the number of odd digits in the i'th string of the input.\n>>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/104", "prompt": "def unique_digits(x):\t\n'''Given a list of positive integers x. give back a sorted list containing all numbers that do not possess any even digits.\n\nNote: Returned list should be sorted in increasing order.\nFor example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/77", "prompt": "def iscube(a):\t\n'''Write a function that takes an integer a and returns True if this integer is a cube of some integer number, and you may assume the input is always valid.\nExamples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/1", "prompt": "def separate_paren_groups(paren_string: str) -> List[str]:\t\n'''Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate these groups so that each is in its own string. Then return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other. Ignore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a string of \"(\" and \")\"; return True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a string of numerals separated by spaces ranging from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/108", "prompt": "def count_nums(arr):\t\n'''Write a function count_nums which accepts an array of integers and returns the count of elements where the sum of digits is greater than zero. If a number is negative, then its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/128", "prompt": "def prod_signs(arr):\t\n'''You are given an array arr of integers and need to return the sum of magnitudes of integers multiplied by the product of all signs of each number in the array, represented by 1, -1 or 0. Note: return None for empty arr.\nExample:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on. Ensure that the solution handles both positive and negative integers effectively.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/137", "prompt": "def compare_one(a, b):\t\n'''Create a function that takes integers, floats, or strings representing real numbers, and returns the larger variable in its given variable type. Return None if the values are equal. Note: If a real number is represented as a string, the floating point might be represented in different formats. It might be a period(.) or a comma(,).\ncompare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/148", "prompt": "def bf(planet1, planet2):\t\n'''There are eight planets in our solar system: the closest to the Sun is Mercury, followed by Venus, Earth, Mars, Jupiter, Saturn, Uranus, and Neptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty tuple if planet1 or planet2 are not correct planet names.\nExamples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/17", "prompt": "def parse_music(music_string: str) -> List[int]:\t\n'''Input to this function is a string that depicts musical notes in a unique ASCII format. Your task is to parse this string and return list of integers corresponding to how many beats does each not last.\n\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst. Sum the even numbers located at odd positions in the list.\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/105", "prompt": "def by_length(arr):\t\n'''Given an array of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\". Replace each digit in the sorted and reversed array with its corresponding name. For instance, a digit like 1 would be replaced with \"One\".\nFor example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Compute 2 raised to the power of n, then find the result modulo p (pay attention to numerical calculations).\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    Ensure to handle both positive and negative integers effectively.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/152", "prompt": "def compare(game,guess):\t\n'''I think we all remember that feeling when the result of some long-awaited event is finally known, and the feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/120", "prompt": "def maximum(arr, k):\t\n'''Given an array arr of integers and a positive integer k, return a sorted list consisting of the top k largest numbers in arr.\nExample 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/5", "prompt": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\t\n'''Insert a number 'delimiter' between every two consecutive elements of input list `numbers'.\n>>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/65", "prompt": "def circular_shift(x, shift):\t\n'''Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    The input will always be a non-negative integer and a non-negative shift value.\n>>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/10", "prompt": "def make_palindrome(string: str) -> str:\t\n'''Find the shortest palindrome that begins with a supplied string. Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. It is important to locate this longest palindromic postfix. Identifying it is key to the solution. - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/72", "prompt": "def will_it_fly(q,w):\t\n'''Write a function that returns True if the object q will fly, and False otherwise. The object q will take flight if it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\nExample:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\nEnsure that the solution efficiently handles both positive and negative integers.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/121", "prompt": "def solution(lst):\t\n'''Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions. Ensure that your solution efficiently handles lists of varying lengths.\nExamples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input. It returns True if there are two distinct elements in the list that sum to zero, and False otherwise. Make sure to consider all possible pairs in the list.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/110", "prompt": "def exchange(lst1, lst2):\t\n'''In this problem, you will implement a function that takes two lists of numbers, and determines whether it is possible to perform an exchange of elements between them to make lst1 a list of only even numbers. You can exchange as many elements between lst1 and lst2 as you want. There is no limit on the number of exchanged elements between lst1 and lst2. If it is possible to exchange elements between the lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".\nFor example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/34", "prompt": "def unique(l: list):\t\n'''Return sorted unique elements in a list\n\nDescription:\nYou are given a list of integers, and your task is to write a function that returns a list of sorted unique elements from the given list. The function should eliminate any duplicates and sort the remaining elements in ascending order. To achieve this, you'll need to ensure efficiency in both the processing and the sorting of the unique elements.\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n''' Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n    Ensure to handle edge cases like 1 and 0 appropriately.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/60", "prompt": "def sum_to_n(n: int):\t\n'''sum_to_n is a function that sums numbers from 1 to n. Ensure your implementation handles edge cases such as when n is zero.\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/79", "prompt": "def decimal_to_binary(decimal):\t\n'''You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Ensure that the conversion logic correctly handles edge cases such as zero or negative numbers.\nExamples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, find the minimum sum. You need to find the minimum sum of any non-empty sub-array of nums.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/155", "prompt": "def even_odd_count(num):\t\n'''Given an integer, return a tuple that has the number of even and odd digits respectively. Ensure your solution accounts for any non-numeric characters in the input string.\nExample:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/76", "prompt": "def is_simple_power(x, n):\t\n'''Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is considered a simple power of n if n**int equals x. In other words, this happens when raising n to some integer exponent results in the number x.\nFor example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/154", "prompt": "def cycpattern_check(a , b):\t\n'''You are given 2 words. You need to return True if the second word is a substring in the first word, or any of its rotations is a substring in the first word. This means that you must check for the presence of the second word and all its rotated versions within the first word.\ncycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero, and at that point function should return True. Otherwise it should return False. Consider edge cases where there might be no operations or where operations have a net zero effect on the balance.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/122", "prompt": "def add_elements(arr, k):\t\n'''Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr. Ensure that k does not exceed the length of the array.\nExample:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/101", "prompt": "def words_string(s):\t\n'''You will be given a string of words separated by commas or spaces, and your task is to split the string into words and return an array of the words.\nFor example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/120", "prompt": "def maximum(arr, k):\t\n'''Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr. Ensure your solution efficiently handles large input sizes.\nExample 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return the greatest common divisor of two integers a and b.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/104", "prompt": "def unique_digits(x):\t\n'''Given a list of positive integers x, return a sorted list of all elements that haven't any even digit. Note: Returned list should be sorted in increasing order.\nFor example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a provided string, switch lowercase letters to uppercase, and uppercase letters to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/113", "prompt": "def odd_count(lst):\t\n'''Given a list of strings, where each string consists of only digits, return a list. Each element i of the output should be \"the number of odd elements in the string i of the input,\" where all the i's should be replaced by the number of odd digits in the i'th string of the input.\n>>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/105", "prompt": "def by_length(arr):\t\n'''Given an array of integers, sort the integers that are between 1 and 9 inclusive, reverse the resulting array, and then replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\". Ensure that the replacement maintains the order of digits after sorting and reversing.\nFor example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/106", "prompt": "def f(n):\t\n'''Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the total of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\n    f(5) == [1, 2, 6, 24, 15]\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a string of \"(\" and \")\". Return True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure the output maintains the number names in their original word form.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/77", "prompt": "def iscube(a):\t\n'''Write a function that takes an integer a and returns True if this integer is a cube. The cube should be of some integer number. Note: you may assume the input is always valid.\nExamples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/1", "prompt": "def separate_paren_groups(paren_string: str) -> List[str]:\t\n'''Input to this function is a string containing several collections of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return 2^n modulo p (be aware of numerics). Ensure that your solution is efficient for large values of n.\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/135", "prompt": "def can_arrange(arr):\t\n'''Create a function which returns the largest index of an element which is smaller than the element just before it. If no such element exists then return -1. The given array will not contain duplicate values.\nExamples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value, then move to the maximum of the remaining integers. Then you select the minimum again and continue the sequence.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst. add the even elements that are at odd indices. Make sure to handle cases where there are no even elements at odd indices.\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/148", "prompt": "def bf(planet1, planet2):\t\n'''There are eight planets in our solar system: the closest to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty tuple if planet1 or planet2 are not correct planet names. Ensure that the function is case-insensitive when checking planet names.\nExamples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/148", "prompt": "def bf(planet1, planet2):\t\n'''There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty tuple if planet1 or planet2 are not correct planet names. Ensure that the input planet names are case-insensitive.\nExamples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/148", "prompt": "def bf(planet1, planet2):\t\n'''There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2. These planets should be sorted by the proximity to the sun. The function should return an empty tuple if planet1 or planet2 are not correct planet names.\nExamples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/148", "prompt": "def bf(planet1, planet2):\t\n'''There are eight planets in our solar system: the closest to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2 and return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty tuple if planet1 or planet2 are not correct planet names.\nExamples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/65", "prompt": "def circular_shift(x, shift):\t\n'''Circular shift the digits of the integer x, shift the digits right by shift and return the result as a string. If shift is greater than the number of digits, then return the digits reversed instead. In cases where shift exceeds the total number of digits, the digits should be reversed for the final output.\n>>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/152", "prompt": "def compare(game,guess):\t\n'''I believe we all recall that sensation when the outcome of a much-anticipated event becomes known. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/106", "prompt": "def f(n):\t\n'''Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i begins from 1. The factorial of i is the product of all numbers from 1 to i (1 * 2 * ... * i).\nExample:\n    f(5) == [1, 2, 6, 24, 15]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    Ensure to handle lists of varying lengths, including empty lists, accurately.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 10}
