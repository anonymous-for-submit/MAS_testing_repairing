{"task_id": "HumanEval/80", "prompt": "def is_happy(s):\t\n'''You are given a string s.  \nYour task is to verify if the string is happy or not.  \nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\nFor example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    '''", "entry_point": "is_happy", "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "test": ["def check(is_happy):\n\tassert is_happy(\"vjbekznsr\") == True", "def check(is_happy):\n\tassert is_happy(\"adktufdnx\") == True", "def check(is_happy):\n\tassert is_happy(\"ekzerpbq\") == True", "def check(is_happy):\n\tassert is_happy(\"nkoeh\") == True", "def check(is_happy):\n\tassert is_happy(\"kjba\") == True", "def check(is_happy):\n\tassert is_happy(\"swh\") == True", "def check(is_happy):\n\tassert is_happy(\"ykq\") == True", "def check(is_happy):\n\tassert is_happy(\"mwi\") == True", "def check(is_happy):\n\tassert is_happy(\"dmseyemg\") == False", "def check(is_happy):\n\tassert is_happy(\"lmsegi\") == True", "def check(is_happy):\n\tassert is_happy(\"aa\") == False , \"aa\"", "def check(is_happy):\n\tassert is_happy(\"osfqkfsjs\") == False", "def check(is_happy):\n\tassert is_happy(\"pnglo\") == True", "def check(is_happy):\n\tassert is_happy(\"hne\") == True", "def check(is_happy):\n\tassert is_happy(\"ihhyzk\") == False", "def check(is_happy):\n\tassert is_happy(\"sda\") == True", "def check(is_happy):\n\tassert is_happy(\"hoijog\") == True", "def check(is_happy):\n\tassert is_happy(\"vskqbz\") == True", "def check(is_happy):\n\tassert is_happy(\"edbikgtricp\") == True", "def check(is_happy):\n\tassert is_happy(\"jllyluo\") == False", "def check(is_happy):\n\tassert is_happy(\"freva\") == True", "def check(is_happy):\n\tassert is_happy(\"gxts\") == True", "def check(is_happy):\n\tassert is_happy(\"yygnlyoas\") == False", "def check(is_happy):\n\tassert is_happy(\"cdlq\") == True", "def check(is_happy):\n\tassert is_happy(\"qylehtb\") == True", "def check(is_happy):\n\tassert is_happy(\"xpm\") == True", "def check(is_happy):\n\tassert is_happy(\"tcnk\") == True", "def check(is_happy):\n\tassert is_happy(\"p\") == False", "def check(is_happy):\n\tassert is_happy(\"tskgwrb\") == True", "def check(is_happy):\n\tassert is_happy(\"gnntvon\") == False", "def check(is_happy):\n\tassert is_happy(\"qwbjwaiu\") == True", "def check(is_happy):\n\tassert is_happy(\"pgmq\") == True", "def check(is_happy):\n\tassert is_happy(\"b\") == False", "def check(is_happy):\n\tassert is_happy(\"kjcceshvfwai\") == False", "def check(is_happy):\n\tassert is_happy(\"qmxibr\") == True", "def check(is_happy):\n\tassert is_happy(\"pzofkfvtw\") == False", "def check(is_happy):\n\tassert is_happy(\"cpbecycwj\") == False", "def check(is_happy):\n\tassert is_happy(\"ldi\") == True", "def check(is_happy):\n\tassert is_happy(\"ydkfa\") == True", "def check(is_happy):\n\tassert is_happy(\"s\") == False", "def check(is_happy):\n\tassert is_happy(\"xyy\") == False , \"xyy\"", "def check(is_happy):\n\tassert is_happy(\"aabb\") == False , \"aabb\"", "def check(is_happy):\n\tassert is_happy(\"ccnybors\") == False", "def check(is_happy):\n\tassert is_happy(\"cyqfh\") == True", "def check(is_happy):\n\tassert is_happy(\"v\") == False", "def check(is_happy):\n\tassert is_happy(\"pqftbntafqcl\") == True", "def check(is_happy):\n\tassert is_happy(\"abcd\") == True , \"abcd\"", "def check(is_happy):\n\tassert is_happy(\"imc\") == True", "def check(is_happy):\n\tassert is_happy(\"bldcxi\") == True", "def check(is_happy):\n\tassert is_happy(\"syvkwfj\") == True", "def check(is_happy):\n\tassert is_happy(\"mkbrgekb\") == True", "def check(is_happy):\n\tassert is_happy(\"asszruuw\") == False", "def check(is_happy):\n\tassert is_happy(\"xivc\") == True", "def check(is_happy):\n\tassert is_happy(\"eovqv\") == False", "def check(is_happy):\n\tassert is_happy(\"qcrtlo\") == True", "def check(is_happy):\n\tassert is_happy(\"khapsq\") == True", "def check(is_happy):\n\tassert is_happy(\"w\") == False", "def check(is_happy):\n\tassert is_happy(\"ryrr\") == False", "def check(is_happy):\n\tassert is_happy(\"adb\") == True , \"adb\"", "def check(is_happy):\n\tassert is_happy(\"mdg\") == True", "def check(is_happy):\n\tassert is_happy(\"f\") == False", "def check(is_happy):\n\tassert is_happy(\"vmxdsmtbksb\") == True", "def check(is_happy):\n\tassert is_happy(\"ajtrhb\") == True", "def check(is_happy):\n\tassert is_happy(\"hgfqilrj\") == True", "def check(is_happy):\n\tassert is_happy(\"wioqbm\") == True", "def check(is_happy):\n\tassert is_happy(\"lwpm\") == True", "def check(is_happy):\n\tassert is_happy(\"ishkix\") == True", "def check(is_happy):\n\tassert is_happy(\"uxgftzdyg\") == True", "def check(is_happy):\n\tassert is_happy(\"tgglbg\") == False", "def check(is_happy):\n\tassert is_happy(\"fyewnyygb\") == False", "def check(is_happy):\n\tassert is_happy(\"vsgjt\") == True", "def check(is_happy):\n\tassert is_happy(\"jsfnqiht\") == True", "def check(is_happy):\n\tassert is_happy(\"ujeo\") == True", "def check(is_happy):\n\tassert is_happy(\"znngeaumx\") == False", "def check(is_happy):\n\tassert is_happy(\"h\") == False", "def check(is_happy):\n\tassert is_happy(\"rjqhznla\") == True", "def check(is_happy):\n\tassert is_happy(\"mpiumqqx\") == False", "def check(is_happy):\n\tassert is_happy(\"a\") == False , \"a\"", "def check(is_happy):\n\tassert is_happy(\"vdxot\") == True", "def check(is_happy):\n\tassert is_happy(\"dyoywxi\") == False", "def check(is_happy):\n\tassert is_happy(\"gylbrpyqiuw\") == True", "def check(is_happy):\n\tassert is_happy(\"yauwdcsfcwr\") == True", "def check(is_happy):\n\tassert is_happy(\"xzyzwrab\") == False", "def check(is_happy):\n\tassert is_happy(\"bhkokspiry\") == False", "def check(is_happy):\n\tassert is_happy(\"ipjy\") == True", "def check(is_happy):\n\tassert is_happy(\"dpvxqd\") == True", "def check(is_happy):\n\tassert is_happy(\"mckptsntv\") == True", "def check(is_happy):\n\tassert is_happy(\"gitokkmmex\") == False", "def check(is_happy):\n\tassert is_happy(\"uimsvgvy\") == False", "def check(is_happy):\n\tassert is_happy(\"xckdiwjz\") == True", "def check(is_happy):\n\tassert is_happy(\"dktydg\") == True", "def check(is_happy):\n\tassert is_happy(\"jjzdrfcxx\") == False", "def check(is_happy):\n\tassert is_happy(\"rajomlaz\") == True", "def check(is_happy):\n\tassert is_happy(\"zrqkybwt\") == True", "def check(is_happy):\n\tassert is_happy(\"hcp\") == True", "def check(is_happy):\n\tassert is_happy(\"jgrvcizhi\") == True", "def check(is_happy):\n\tassert is_happy(\"d\") == False", "def check(is_happy):\n\tassert is_happy(\"iopaxioi\") == False , \"iopaxioi\"", "def check(is_happy):\n\tassert is_happy(\"y\") == False", "def check(is_happy):\n\tassert is_happy(\"lsm\") == True", "def check(is_happy):\n\tassert is_happy(\"iopaxpoi\") == True , \"iopaxpoi\"", "def check(is_happy):\n\tassert is_happy(\"n\") == False", "def check(is_happy):\n\tassert is_happy(\"ioruvha\") == True", "def check(is_happy):\n\tassert is_happy(\"hevkrepn\") == True", "def check(is_happy):\n\tassert is_happy(\"g\") == False", "def check(is_happy):\n\tassert is_happy(\"i\") == False", "def check(is_happy):\n\tassert is_happy(\"kxqis\") == True", "def check(is_happy):\n\tassert is_happy(\"xrc\") == True", "def check(is_happy):\n\tassert is_happy(\"qfychpkht\") == True", "def check(is_happy):\n\tassert is_happy(\"vorlwobo\") == False"], "test_case_list": ["assert is_happy(\"vjbekznsr\") == True", "assert is_happy(\"adktufdnx\") == True", "assert is_happy(\"ekzerpbq\") == True", "assert is_happy(\"nkoeh\") == True", "assert is_happy(\"kjba\") == True", "assert is_happy(\"swh\") == True", "assert is_happy(\"ykq\") == True", "assert is_happy(\"mwi\") == True", "assert is_happy(\"dmseyemg\") == False", "assert is_happy(\"lmsegi\") == True", "assert is_happy(\"aa\") == False , \"aa\"", "assert is_happy(\"osfqkfsjs\") == False", "assert is_happy(\"pnglo\") == True", "assert is_happy(\"hne\") == True", "assert is_happy(\"ihhyzk\") == False", "assert is_happy(\"sda\") == True", "assert is_happy(\"hoijog\") == True", "assert is_happy(\"vskqbz\") == True", "assert is_happy(\"edbikgtricp\") == True", "assert is_happy(\"jllyluo\") == False", "assert is_happy(\"freva\") == True", "assert is_happy(\"gxts\") == True", "assert is_happy(\"yygnlyoas\") == False", "assert is_happy(\"cdlq\") == True", "assert is_happy(\"qylehtb\") == True", "assert is_happy(\"xpm\") == True", "assert is_happy(\"tcnk\") == True", "assert is_happy(\"p\") == False", "assert is_happy(\"tskgwrb\") == True", "assert is_happy(\"gnntvon\") == False", "assert is_happy(\"qwbjwaiu\") == True", "assert is_happy(\"pgmq\") == True", "assert is_happy(\"b\") == False", "assert is_happy(\"kjcceshvfwai\") == False", "assert is_happy(\"qmxibr\") == True", "assert is_happy(\"pzofkfvtw\") == False", "assert is_happy(\"cpbecycwj\") == False", "assert is_happy(\"ldi\") == True", "assert is_happy(\"ydkfa\") == True", "assert is_happy(\"s\") == False", "assert is_happy(\"xyy\") == False , \"xyy\"", "assert is_happy(\"aabb\") == False , \"aabb\"", "assert is_happy(\"ccnybors\") == False", "assert is_happy(\"cyqfh\") == True", "assert is_happy(\"v\") == False", "assert is_happy(\"pqftbntafqcl\") == True", "assert is_happy(\"abcd\") == True , \"abcd\"", "assert is_happy(\"imc\") == True", "assert is_happy(\"bldcxi\") == True", "assert is_happy(\"syvkwfj\") == True", "assert is_happy(\"mkbrgekb\") == True", "assert is_happy(\"asszruuw\") == False", "assert is_happy(\"xivc\") == True", "assert is_happy(\"eovqv\") == False", "assert is_happy(\"qcrtlo\") == True", "assert is_happy(\"khapsq\") == True", "assert is_happy(\"w\") == False", "assert is_happy(\"ryrr\") == False", "assert is_happy(\"adb\") == True , \"adb\"", "assert is_happy(\"mdg\") == True", "assert is_happy(\"f\") == False", "assert is_happy(\"vmxdsmtbksb\") == True", "assert is_happy(\"ajtrhb\") == True", "assert is_happy(\"hgfqilrj\") == True", "assert is_happy(\"wioqbm\") == True", "assert is_happy(\"lwpm\") == True", "assert is_happy(\"ishkix\") == True", "assert is_happy(\"uxgftzdyg\") == True", "assert is_happy(\"tgglbg\") == False", "assert is_happy(\"fyewnyygb\") == False", "assert is_happy(\"vsgjt\") == True", "assert is_happy(\"jsfnqiht\") == True", "assert is_happy(\"ujeo\") == True", "assert is_happy(\"znngeaumx\") == False", "assert is_happy(\"h\") == False", "assert is_happy(\"rjqhznla\") == True", "assert is_happy(\"mpiumqqx\") == False", "assert is_happy(\"a\") == False , \"a\"", "assert is_happy(\"vdxot\") == True", "assert is_happy(\"dyoywxi\") == False", "assert is_happy(\"gylbrpyqiuw\") == True", "assert is_happy(\"yauwdcsfcwr\") == True", "assert is_happy(\"xzyzwrab\") == False", "assert is_happy(\"bhkokspiry\") == False", "assert is_happy(\"ipjy\") == True", "assert is_happy(\"dpvxqd\") == True", "assert is_happy(\"mckptsntv\") == True", "assert is_happy(\"gitokkmmex\") == False", "assert is_happy(\"uimsvgvy\") == False", "assert is_happy(\"xckdiwjz\") == True", "assert is_happy(\"dktydg\") == True", "assert is_happy(\"jjzdrfcxx\") == False", "assert is_happy(\"rajomlaz\") == True", "assert is_happy(\"zrqkybwt\") == True", "assert is_happy(\"hcp\") == True", "assert is_happy(\"jgrvcizhi\") == True", "assert is_happy(\"d\") == False", "assert is_happy(\"iopaxioi\") == False , \"iopaxioi\"", "assert is_happy(\"y\") == False", "assert is_happy(\"lsm\") == True", "assert is_happy(\"iopaxpoi\") == True , \"iopaxpoi\"", "assert is_happy(\"n\") == False", "assert is_happy(\"ioruvha\") == True", "assert is_happy(\"hevkrepn\") == True", "assert is_happy(\"g\") == False", "assert is_happy(\"i\") == False", "assert is_happy(\"kxqis\") == True", "assert is_happy(\"xrc\") == True", "assert is_happy(\"qfychpkht\") == True", "assert is_happy(\"vorlwobo\") == False"], "nl": "You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    ", "func": "def is_happy(s):", "examples": "For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    ", "repair_prompt": ["def is_happy(s):\t\n'''You are given a string s.  \nYour task is to verify if the string is happy or not.  \nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\nFor example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    '''", "```python\ndef is_happy(s):\t\n'''You are given a string s.  \nYour task is to verify if the string is happy or not.  \nA string is happy if its length is at least 3. Additionally, every 3 consecutive letters in the string should be distinct to satisfy the condition.\nFor example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    '''\n```", "def is_happy(s):\t\n'''You are given a string s, and your task is to verify if the string is happy or not.  \nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\nFor example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Determines if the string is happy.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \n    Parameters:\n    s (str): The input string to be evaluated.\n    \n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \n    Raises:\n    ValueError: If the input is not a valid string or is too short.\n    \"\"\"\n    # Validate input\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Check if the string is too short to be happy\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string with a sliding window of size 3\n    for i in range(len(s) - 2):\n        # Extract the current set of 3 consecutive characters\n        current_set = s[i:i+3]\n        \n        # Check if all characters in the current set are distinct\n        if len(set(current_set)) != 3:\n            return False\n    \n    # If all sets of 3 consecutive characters are distinct, the string is happy\n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    '''\n    Determines if a string is happy.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \n    Parameters:\n    s (str): The input string to be checked.\n    \n    Returns:\n    bool: True if the string is happy, False otherwise.\n    '''\n    # Check if the string length is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string and check every set of three consecutive characters\n    for i in range(len(s) - 2):\n        # Extract the current set of three consecutive characters\n        current_set = s[i:i+3]\n        \n        # Check if all characters in the current set are distinct\n        if len(set(current_set)) != 3:\n            return False\n    \n    # If all sets of three consecutive characters are distinct, return True\n    return True\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(is_happy(\"\"))        # Expected output: False\n    print(is_happy(\"ab\"))      # Expected output: False\n    print(is_happy(\"aaa\"))     # Expected output: False\n    print(is_happy(\"abc\"))     # Expected output: True\n    print(is_happy(\"abcd\"))    # Expected output: True\n    print(is_happy(\"aabbcc\"))  # Expected output: False\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    '''\n    Checks if the string is happy.\n    \n    A string is considered \"happy\" if its length is at least 3 and every set of three consecutive characters are distinct.\n    \n    Parameters:\n    s (str): The input string to be checked.\n    \n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \n    Raises:\n    ValueError: If the input is not a valid string.\n    '''\n    # Validate input\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a valid string.\")\n    \n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string and check every set of three consecutive characters\n    for i in range(len(s) - 2):\n        # Extract the set of three consecutive characters\n        triplet = s[i:i+3]\n        \n        # Check if all characters in the triplet are distinct\n        if len(set(triplet)) != 3:\n            return False\n    \n    # If all sets of three consecutive characters are distinct, return True\n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Determines if the string is happy.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \n    Parameters:\n    s (str): The input string to be checked.\n    \n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \"\"\"\n    # Check if the string length is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate over the string with a sliding window of size 3\n    for i in range(len(s) - 2):\n        # Extract the current window of 3 characters\n        window = s[i:i+3]\n        \n        # Check if all characters in the window are distinct\n        if len(set(window)) != 3:\n            return False\n    \n    # If all windows have distinct characters, return True\n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Determines if a string is happy.\n    A string is happy if its length is at least 3 and every 3 consecutive characters are distinct.\n\n    Parameters:\n    s (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \"\"\"\n    # Check if the string length is at least 3\n    if len(s) < 3:\n        return False\n\n    # Iterate through the string, checking each set of three consecutive characters\n    for i in range(len(s) - 2):\n        # Extract the set of three consecutive characters\n        triplet = s[i:i+3]\n        # Check if all characters in the triplet are distinct\n        if len(set(triplet)) != 3:\n            return False\n\n    # If all sets of three consecutive characters are distinct, return True\n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Determines if a string is happy. A string is considered happy if its length is at least 3 and every set of three consecutive characters are distinct.\n\n    Parameters:\n    s (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \"\"\"\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n\n    # Iterate through the string using a sliding window approach\n    for i in range(len(s) - 2):\n        # Extract the triplet of characters\n        triplet = s[i:i+3]\n        \n        # Check if all characters in the triplet are distinct\n        if len(set(triplet)) != 3:\n            return False\n\n    # If all triplets are distinct, return True\n    return True\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(is_happy(\"\"))        # Expected output: False\n    print(is_happy(\"ab\"))      # Expected output: False\n    print(is_happy(\"abc\"))     # Expected output: True\n    print(is_happy(\"aabbcc\"))  # Expected output: False\n    print(is_happy(\"abcdef\"))  # Expected output: True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Determines if a string is happy.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \n    Parameters:\n    s (str): The input string to be checked.\n    \n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \"\"\"\n    # Check if the string length is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string with a sliding window of size 3\n    for i in range(len(s) - 2):\n        # Extract the current window of 3 characters\n        window = s[i:i+3]\n        \n        # Check if all characters in the window are distinct\n        if len(set(window)) != 3:\n            return False\n    \n    # If all windows have distinct characters, return True\n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Determines if a string is happy. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \n    Args:\n        s (str): The input string to be evaluated.\n        \n    Returns:\n        bool: True if the string is happy, False otherwise.\n        \n    Raises:\n        ValueError: If the input is not a valid string.\n    \"\"\"\n    # Check if the input is a valid string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string using a sliding window approach\n    for i in range(len(s) - 2):\n        # Extract a set of 3 consecutive characters\n        triplet = s[i:i+3]\n        \n        # Check if all characters in the triplet are distinct\n        if len(set(triplet)) != 3:\n            return False\n    \n    # If all sets of 3 consecutive characters are distinct, return True\n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Checks if the string is happy.\n\n    A string is considered \"happy\" if its length is at least 3 and every set of 3 consecutive characters are distinct.\n\n    Parameters:\n    s (str): The input string to be evaluated.\n\n    Returns:\n    bool: True if the string is happy, False otherwise.\n\n    Raises:\n    ValueError: If the input is not a valid string.\n    \"\"\"\n    # Validate input\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n\n    # Check if the string length is less than 3\n    if len(s) < 3:\n        return False\n\n    # Iterate through the string, checking each set of 3 consecutive characters\n    for i in range(len(s) - 2):\n        # Extract the set of 3 consecutive characters\n        triplet = s[i:i+3]\n        # Check if all characters in the triplet are distinct\n        if len(set(triplet)) != 3:\n            return False\n\n    # If all sets of 3 consecutive characters are distinct, return True\n    return True\n\n# Example usage:\n# print(is_happy(\"abcabcabc\"))  # Expected output: True\n# print(is_happy(\"ab\"))         # Expected output: False\n# print(is_happy(\"aabbcc\"))     # Expected output: False\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Determines if a string is happy.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \n    Parameters:\n    s (str): The string to be checked.\n    \n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \n    Examples:\n    >>> is_happy('a')\n    False\n    >>> is_happy('aa')\n    False\n    >>> is_happy('abcd')\n    True\n    >>> is_happy('aabb')\n    False\n    >>> is_happy('adb')\n    True\n    >>> is_happy('xyy')\n    False\n    \"\"\"\n    # Check if the string length is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string, checking each set of three consecutive characters\n    for i in range(len(s) - 2):\n        # Extract the three consecutive characters\n        first_char = s[i]\n        second_char = s[i + 1]\n        third_char = s[i + 2]\n        \n        # Check if all three characters are distinct\n        if first_char == second_char or second_char == third_char or first_char == third_char:\n            return False\n    \n    # If all sets of three consecutive characters are distinct, return True\n    return True\n"], "plans": ["requirement analysis:\nThe function should efficiently determine if a string is happy by checking every set of three consecutive characters for distinctness. It should handle strings of varying lengths and provide feedback for invalid inputs.\nrequirement pool:\n- Implement the main function to check string happiness\n- Optimize the function for performance with large strings\n- Include error handling for invalid inputs\n- Provide detailed feedback on why a string is not happy\n- Ensure compatibility with different Python versions\nWe will implement a function that checks if a string is happy by iterating through the string and checking every set of three consecutive characters for distinctness. We will use Python's built-in capabilities for string manipulation to ensure performance and simplicity. Additionally, we will include error handling to manage invalid inputs such as non-string types or empty strings, and provide detailed feedback for non-happy strings.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the requirement, a string is considered \"happy\" if its length is at least 3 and every set of 3 consecutive letters are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': means the string must have a minimum length of 3 to be considered for happiness.\n    Implementation: Check if the length of the string is greater than or equal to 3.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if the length of the string is less than 3. If so, return False.\n    2. Iterate through the string using a sliding window approach to check every set of 3 consecutive characters.\n    3. For each set, check if all characters are distinct.\n    4. If any set of 3 consecutive characters are not distinct, return False.\n    5. If all sets are distinct, return True.\n\n# [edge case]\n    is_happy('') = False\n    Explanation: The string is empty, so it cannot be happy as it does not meet the minimum length requirement.\n    \n    is_happy('ab') = False\n    Explanation: The string length is less than 3, so it cannot be happy.\n    \n    is_happy('aaa') = False\n    Explanation: The string has a length of 3, but all characters are the same, so it is not happy.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n", "requirement analysis:\nThe function should efficiently determine if a string is 'happy' by checking that every set of three consecutive characters are distinct. It should handle edge cases such as strings shorter than three characters and provide clear examples for user understanding.\nrequirement pool:\n- Implement the main function to check if a string is happy\n- Optimize the function for performance with large input strings\n- Provide comprehensive documentation and examples\n- Create a user-friendly interface for testing the function\n- Include additional string validation features\nWe will implement a function that checks if a string is 'happy' by ensuring every set of three consecutive characters are distinct. We will use Python's built-in capabilities for string manipulation to optimize performance, especially for large strings. The function will handle edge cases such as strings shorter than three characters and provide clear examples for user understanding. We will assume the function only needs to handle alphabetic characters, as non-alphabetic character handling was not specified.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the context of this requirement, a string is considered \"happy\" if its length is at least 3 and every set of three consecutive characters are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': This means the string must have a minimum length of 3 characters to be considered for further checks.\n    Implementation: Check if `len(s) >= 3`.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the length of the string `s` is less than 3. If so, return `False` because it cannot be \"happy\".\n    2. Iterate through the string using a loop that checks every set of three consecutive characters.\n    3. For each set of three characters, check if all characters are distinct.\n    4. If any set of three consecutive characters is not distinct, return `False`.\n    5. If all sets of three consecutive characters are distinct, return `True`.\n\n# [edge case] \n    is_happy('') = False\n    Explanation: The string is empty, so it does not meet the minimum length requirement of 3.\n    \n    is_happy('ab') = False\n    Explanation: The string length is less than 3, so it cannot be \"happy\".\n    \n    is_happy('aaa') = False\n    Explanation: The string has a length of 3, but all characters are the same, so they are not distinct.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already handles strings shorter than 3 and checks for distinct characters in sets of three.\n", "requirement analysis:\nThe function should efficiently determine if a string is happy by checking every set of three consecutive characters for distinctness. It should handle strings of varying lengths and provide feedback for invalid inputs.\nrequirement pool:\n- Implement the main function to check string happiness\n- Optimize the function for performance with large strings\n- Include error handling for invalid inputs\n- Provide detailed feedback on why a string is not happy\n- Ensure compatibility with different Python versions\nWe will implement a function that checks if a string is happy by verifying that every set of three consecutive characters are distinct. We will use Python's built-in capabilities to efficiently iterate over the string and check the conditions. Additionally, we will handle invalid inputs by providing clear error messages. For performance optimization, especially with large strings, we will ensure the function operates in linear time complexity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the context of the requirement, a string is considered \"happy\" if its length is at least 3 and every set of three consecutive characters are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': This means the string must have a minimum length of 3 characters to be considered for further checks.\n    Implementation: Check if `len(s) >= 3`.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Check if the length of the string `s` is less than 3. If so, return `False` immediately.\n2. Iterate through the string using a loop that checks every set of three consecutive characters.\n3. For each set of three characters, check if all characters are distinct.\n4. If any set of three consecutive characters is not distinct, return `False`.\n5. If all sets of three consecutive characters are distinct, return `True`.\n\n# [edge case]\n    is_happy('') = False\n    Explanation: The string is empty, so it does not meet the minimum length requirement of 3.\n    \n    is_happy('ab') = False\n    Explanation: The string length is less than 3, so it cannot be happy.\n    \n    is_happy('aaa') = False\n    Explanation: The string has a length of 3, but all characters are the same, so they are not distinct.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already handles strings with lengths less than 3 and checks for distinct characters in sets of three.\n", "requirement analysis:\nThe function should efficiently check if a string is happy by ensuring every three consecutive characters are distinct. It should handle edge cases like strings shorter than three characters and provide clear feedback on the result.\nrequirement pool:\n- Implement the main function to check string happiness\n- Optimize for performance with large strings\n- Include comprehensive documentation and examples\n- Provide integration guidelines for developers\n- Develop a suite of test cases for validation\nWe will implement a function that checks if a string is happy by ensuring every three consecutive characters are distinct. The function will handle edge cases like strings shorter than three characters and provide clear feedback on the result. We will use Python's built-in capabilities for string manipulation, which are efficient and sufficient for this task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the requirement, a string is considered \"happy\" if its length is at least 3 and every 3 consecutive letters in the string are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': means the string must have a minimum length of 3 to be considered for happiness.\n    Implementation: Check if the length of the string is greater than or equal to 3.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the length of the string is less than 3. If so, return False.\n    2. Iterate through the string using a sliding window of size 3.\n    3. For each window, check if all three characters are distinct.\n    4. If any window does not have distinct characters, return False.\n    5. If all windows have distinct characters, return True.\n\n# [edge case] \n    is_happy('') = False\n    Explanation: The string is empty, so it does not meet the minimum length requirement of 3.\n    \n    is_happy('ab') = False\n    Explanation: The string length is less than 3, so it cannot be happy.\n    \n    is_happy('abc') = True\n    Explanation: The string length is exactly 3, and all characters are distinct.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for the minimum length and distinctness of characters in windows of size 3.\n", "requirement analysis:\nThe function should efficiently determine if a string is happy by checking if every set of three consecutive characters are distinct. It should handle edge cases such as strings shorter than three characters and provide clear examples for users.\nrequirement pool:\n- Implement the main function to check for happy strings\n- Optimize the function for performance with large input strings\n- Provide comprehensive documentation and examples\n- Ensure compatibility with various Python versions\n- Include unit tests for different scenarios\nWe will implement a function that checks if a string is happy by ensuring its length is at least 3 and every set of three consecutive characters are distinct. We will use Python's built-in capabilities for string manipulation to achieve this efficiently. The function will handle both alphabetic and non-alphabetic characters, as the requirement does not specify any limitations on character types.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the requirement, a string is considered \"happy\" if its length is at least 3 and every set of three consecutive characters are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': This means the length of the string should be greater than or equal to 3. In code, this can be checked using `len(s) >= 3`.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the length of the string `s` is at least 3.\n    2. Iterate through the string, checking each set of three consecutive characters.\n    3. For each set, verify that all three characters are distinct.\n    4. If any set of three consecutive characters is not distinct, return False.\n    5. If all sets are distinct, return True.\n\n# [edge case] \n    is_happy('') = False\n    Explanation: The string is empty, so it does not meet the minimum length requirement of 3.\n    \n    is_happy('ab') = False\n    Explanation: The string length is less than 3, so it cannot be happy.\n    \n    is_happy('abc') = True\n    Explanation: The string length is exactly 3, and all characters are distinct.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for the minimum length and distinctness of characters in sets of three.\n", "requirement analysis:\nThe function should efficiently determine if a string is happy by checking that every set of three consecutive characters are distinct. It should handle edge cases such as strings shorter than three characters and provide accurate results for longer strings.\nrequirement pool:\n- Implement the main function to check for happy strings.\n- Optimize the function for performance with large input strings.\n- Write comprehensive documentation for the function.\n- Create unit tests to ensure function accuracy.\n- Consider edge cases and handle them appropriately.\nWe will implement a function that iterates through the string, checking every set of three consecutive characters to ensure they are distinct. The function will be optimized for performance by using a sliding window approach, which allows us to check each triplet in constant time. We will use Python's built-in capabilities to handle string operations efficiently. The function will also include comprehensive documentation and examples to ensure clarity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the context of the requirement, a string is considered \"happy\" if its length is at least 3 and every set of three consecutive characters in the string are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': This means the length of the string should be greater than or equal to 3. In code, this can be checked using `len(s) >= 3`.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Check if the length of the string `s` is less than 3. If so, return `False` because it cannot be \"happy\".\n2. Iterate through the string using a sliding window approach, checking each set of three consecutive characters.\n3. For each triplet, check if all three characters are distinct.\n4. If any triplet is not distinct, return `False`.\n5. If all triplets are distinct, return `True`.\n\n# [edge case] \n    is_happy('') = False\n    Explanation: The string is empty, so it does not meet the minimum length requirement of 3.\n    \n    is_happy('ab') = False\n    Explanation: The string length is less than 3, so it cannot be \"happy\".\n    \n    is_happy('abc') = True\n    Explanation: The string length is exactly 3, and all characters are distinct.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for the minimum length and distinctness of triplets.\n", "requirement analysis:\nThe function needs to efficiently determine if a string is happy by checking every set of three consecutive characters for uniqueness. It should handle edge cases like strings shorter than three characters and provide clear documentation and examples.\nrequirement pool:\n- Implement the main function to check for happy strings\n- Optimize the function for performance with large strings\n- Provide comprehensive documentation and examples\n- Create a user-friendly interface for testing the function\n- Ensure compatibility with various Python versions\nWe will implement a function that checks if a string is happy by ensuring every set of three consecutive characters are distinct. The function will handle strings of any length and will be optimized for performance using efficient iteration techniques. We will use Python's built-in capabilities to achieve this without additional libraries, ensuring compatibility across various Python versions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the requirement, a string is considered \"happy\" if its length is at least 3 and every set of 3 consecutive letters are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': means the string must have a minimum length of 3 to be considered for happiness.\n    Implementation: Check if the length of the string is greater than or equal to 3.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the length of the string is less than 3. If so, return False.\n    2. Iterate through the string using a sliding window of size 3.\n    3. For each window, check if all three characters are distinct.\n    4. If any window does not have distinct characters, return False.\n    5. If all windows have distinct characters, return True.\n\n# [edge case] \n    is_happy('') = False\n    Explanation: The string is empty, so it does not meet the minimum length requirement.\n    \n    is_happy('ab') = False\n    Explanation: The string length is less than 3, so it cannot be happy.\n    \n    is_happy('aaa') = False\n    Explanation: The string has a length of 3, but all characters are the same, so it is not happy.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for the minimum length and distinctness of characters in sets of three.\n", "requirement analysis:\nThe function should efficiently determine if a string is happy by checking every set of three consecutive characters for distinctness. It should handle strings of varying lengths and provide feedback for invalid inputs.\nrequirement pool:\n- Implement the main function to check string happiness\n- Optimize the function for performance with large strings\n- Include error handling for invalid inputs\n- Provide detailed feedback on why a string is not happy\n- Ensure compatibility with different string formats\nWe will implement a function that iterates through the string, checking every set of three consecutive characters to ensure they are distinct. The function will handle edge cases such as strings shorter than three characters and provide detailed feedback on why a string is not happy. We will use Python's built-in capabilities for string manipulation to ensure optimal performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the requirement, a string is considered \"happy\" if its length is at least 3 and every set of 3 consecutive letters are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': means the string must have a minimum length of 3 to be considered for happiness.\n    Implementation: Check if the length of the string is greater than or equal to 3.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the length of the string is less than 3. If so, return False.\n    2. Iterate through the string using a sliding window approach, checking every set of 3 consecutive characters.\n    3. For each set, check if all characters are distinct.\n    4. If any set of 3 consecutive characters are not distinct, return False.\n    5. If all sets are distinct, return True.\n\n# [edge case] \n    is_happy('a') = False\n    Explanation: The string length is less than 3, so it cannot be happy.\n    \n    is_happy('abc') = True\n    Explanation: The string length is exactly 3, and all characters are distinct.\n    \n    is_happy('aaa') = False\n    Explanation: The string length is 3, but all characters are the same, so they are not distinct.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers strings shorter than 3 characters and checks for distinct sets of 3 consecutive characters.\n", "requirement analysis:\nThe function should efficiently determine if a string is happy by checking every set of three consecutive characters for distinctness. It should handle strings of varying lengths and provide feedback for invalid inputs.\nrequirement pool:\n- Implement the main function to check string happiness\n- Optimize the function for performance with large strings\n- Include error handling for invalid inputs\n- Provide detailed feedback for non-happy strings\n- Ensure compatibility with different Python versions\nWe will implement a function `is_happy` that checks if a string is happy by ensuring every set of three consecutive characters are distinct. The function will handle edge cases such as strings shorter than three characters and provide detailed feedback for non-happy strings. We will use Python's built-in capabilities for string manipulation to ensure performance and simplicity. Error handling will be included to manage invalid inputs, such as non-string types.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the requirement, a string is considered \"happy\" if its length is at least 3 and every set of 3 consecutive letters are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': means the string must have a minimum length of 3 to be considered for happiness.\n    'every 3 consecutive letters': means we need to check each group of 3 letters in the string to ensure they are distinct.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the length of the string is less than 3. If so, return False.\n    2. Iterate through the string, checking each set of 3 consecutive characters.\n    3. For each set, verify if all characters are distinct.\n    4. If any set of 3 consecutive characters are not distinct, return False.\n    5. If all sets are distinct, return True.\n\n# [edge case] \n    is_happy('') = False\n    Explanation: The string is empty, so it does not meet the minimum length requirement of 3.\n    \n    is_happy('ab') = False\n    Explanation: The string length is less than 3, so it cannot be happy.\n    \n    is_happy('abcabcabc') = True\n    Explanation: Every set of 3 consecutive characters ('abc', 'bca', 'cab', etc.) are distinct.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for the minimum length and distinctness of consecutive characters.\n", "requirement analysis:\nThe function needs to efficiently check if a string is happy by ensuring every three consecutive characters are distinct. It should handle edge cases like strings shorter than three characters and provide clear documentation and examples.\nrequirement pool:\n- Implement the main function to check for happy strings\n- Optimize the function for performance with large strings\n- Provide detailed documentation and examples\n- Create a user-friendly interface for testing the function\n- Include additional string validation features\nWe will implement a function that checks if a string is happy by iterating through the string and checking every set of three consecutive characters to ensure they are distinct. We will use Python's built-in capabilities for string manipulation to keep the implementation simple and efficient. The function will handle edge cases such as strings shorter than three characters by immediately returning False. We will also provide clear documentation and examples to ensure usability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the context of this requirement, a string is considered \"happy\" if its length is at least 3 and every set of 3 consecutive characters in the string are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': This means the length of the string must be greater than or equal to 3 for it to be considered for further checks.\n    Implementation: Check if `len(s) >= 3`.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Check if the length of the string `s` is less than 3. If so, return `False`.\n2. Iterate through the string from the start to `len(s) - 2`.\n3. For each position `i`, check if the characters `s[i]`, `s[i+1]`, and `s[i+2]` are distinct.\n4. If any set of three consecutive characters are not distinct, return `False`.\n5. If all sets of three consecutive characters are distinct, return `True`.\n\n# [edge case] \n    is_happy('') = False\n    Explanation: The string is empty, so it does not meet the minimum length requirement of 3.\n    \n    is_happy('ab') = False\n    Explanation: The string length is less than 3, so it cannot be happy.\n    \n    is_happy('aaa') = False\n    Explanation: The string has a length of 3, but all characters are the same, so they are not distinct.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already handles strings shorter than 3 by returning `False` immediately.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [110, 110, 110, 110, 110, 110, 110, 110, 110, 110], "completion": "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Determines if a string is happy.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \n    Parameters:\n    s (str): The string to be checked.\n    \n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \n    Examples:\n    >>> is_happy('a')\n    False\n    >>> is_happy('aa')\n    False\n    >>> is_happy('abcd')\n    True\n    >>> is_happy('aabb')\n    False\n    >>> is_happy('adb')\n    True\n    >>> is_happy('xyy')\n    False\n    \"\"\"\n    # Check if the string length is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string, checking each set of three consecutive characters\n    for i in range(len(s) - 2):\n        # Extract the three consecutive characters\n        first_char = s[i]\n        second_char = s[i + 1]\n        third_char = s[i + 2]\n        \n        # Check if all three characters are distinct\n        if first_char == second_char or second_char == third_char or first_char == third_char:\n            return False\n    \n    # If all sets of three consecutive characters are distinct, return True\n    return True\n", "passed": true, "pass": true, "pass_num": 10, "round": 228, "mutate_method": "rephrase_one", "parent_index": 70}
