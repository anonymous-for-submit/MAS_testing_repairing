{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a given string, flip lowercase characters to uppercase. Change uppercase characters to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "entry_point": "flip_case", "canonical_solution": "    return string.swapcase()\n", "test": ["def check(flip_case):\n\tassert flip_case(\"=Uft>^xAJt~M\") == '=uFT>^XajT~m'", "def check(flip_case):\n\tassert flip_case(\"CsgXBCATeQmYHhTMBoGuEM dGUDqazbndCFMtLL vmY\") == 'cSGxbcatEqMyhHtmbOgUem DgudQAZBNDcfmTll VMy'", "def check(flip_case):\n\tassert flip_case(\"w\") == 'W'", "def check(flip_case):\n\tassert flip_case(\"eIgaNO JtyWwkDSdVTrVoqClhNFrHNqDBl UInCVrviH\") == 'EiGAno jTYwWKdsDvtRvOQcLHnfRhnQdbL uiNcvRVIh'", "def check(flip_case):\n\tassert flip_case(\"FdR\") == 'fDr'", "def check(flip_case):\n\tassert flip_case(\"tR#Et^#\") == 'Tr#eT^#'", "def check(flip_case):\n\tassert flip_case(\"L@j:tM-_?Fgc\") == 'l@J:Tm-_?fGC'", "def check(flip_case):\n\tassert flip_case(\"ez\") == 'EZ'", "def check(flip_case):\n\tassert flip_case(\"F_LHcfxbO\") == 'f_lhCFXBo'", "def check(flip_case):\n\tassert flip_case(\"xDFZwXjexGGcNsQGWKFfWrVIoHZYFFhWCRQJpnfL\") == 'XdfzWxJEXggCnSqgwkfFwRviOhzyffHwcrqjPNFl'", "def check(flip_case):\n\tassert flip_case(\"CnpipxUmlSdCSmHdbyDoMlbssWpLHcyKnJlsulPxWNPHi\") == 'cNPIPXuMLsDcsMhDBYdOmLBSSwPlhCYkNjLSULpXwnphI'", "def check(flip_case):\n\tassert flip_case(\"vqp\") == 'VQP'", "def check(flip_case):\n\tassert flip_case(\"f<SH\") == 'F<sh'", "def check(flip_case):\n\tassert flip_case(\"tBDUC ZKFZKtFVvqmhzUltjFzOWNXldpEHOAKJIp\") == 'Tbduc zkfzkTfvVQMHZuLTJfZownxLDPehoakjiP'", "def check(flip_case):\n\tassert flip_case(\"+>gY~\") == '+>Gy~'", "def check(flip_case):\n\tassert flip_case(\"BlmIOOJIkOnKWOtKuudPt  sUUPPNZZbQKiIHsNzFe\") == 'bLMioojiKoNkwoTkUUDpT  SuuppnzzBqkIihSnZfE'", "def check(flip_case):\n\tassert flip_case(\"JXCxNsvL\") == 'jxcXnSVl'", "def check(flip_case):\n\tassert flip_case(\"gq\") == 'GQ'", "def check(flip_case):\n\tassert flip_case(\"v\") == 'V'", "def check(flip_case):\n\tassert flip_case(\"RkocroIYw pMJxfpXxLucXAIvDjwlkIeJBCXJsxMAH\") == 'rKOCROiyW PmjXFPxXlUCxaiVdJWLKiEjbcxjSXmah'", "def check(flip_case):\n\tassert flip_case(\"JVKSQnhMMEPEXaJBBgEbTmkMCSWcebmFckHoj\") == 'jvksqNHmmepexAjbbGeBtMKmcswCEBMfCKhOJ'", "def check(flip_case):\n\tassert flip_case(\"gif\") == 'GIF'", "def check(flip_case):\n\tassert flip_case(\"g gCvDFeq NvBvqUNjjIldrkmFZCCTkJACipqozhZZ\") == 'G GcVdfEQ nVbVQunJJiLDRKMfzcctKjacIPQOZHzz'", "def check(flip_case):\n\tassert flip_case(\"rPxMsdbinpIxuZkSMNhmkYSJ DaYPCubXFgtuGbdtUXBR\") == 'RpXmSDBINPiXUzKsmnHMKysj dAypcUBxfGTUgBDTuxbr'", "def check(flip_case):\n\tassert flip_case(\"vzhEUikjmBtxkJcpaTRiuEurpoJXgLCmmSGttGsfOv\") == 'VZHeuIKJMbTXKjCPAtrIUeURPOjxGlcMMsgTTgSFoV'", "def check(flip_case):\n\tassert flip_case(\"ishBtMJcStzZVLuiiCdRPaVgPIsPMZkvSjJna\") == 'ISHbTmjCsTZzvlUIIcDrpAvGpiSpmzKVsJjNA'", "def check(flip_case):\n\tassert flip_case(\"qn\") == 'QN'", "def check(flip_case):\n\tassert flip_case(\"pCKgJaaQZHzRwxdwpqCZvoRlbvqLfrtdHlSrrqyl\") == 'PckGjAAqzhZrWXDWPQczVOrLBVQlFRTDhLsRRQYL'", "def check(flip_case):\n\tassert flip_case(\"k\") == 'K'", "def check(flip_case):\n\tassert flip_case(\"xOEweGnFamRzetSvZkSCZbKrjxTcGdWzTWBsbETPk auL\") == 'XoeWEgNfAMrZETsVzKsczBkRJXtCgDwZtwbSBetpK AUl'", "def check(flip_case):\n\tassert flip_case(\"WVlvlJraPwOUwyOOhbDSADCInroOCMzpaSnUubOH\") == 'wvLVLjRApWouWYooHBdsadciNROocmZPAsNuUBoh'", "def check(flip_case):\n\tassert flip_case(\"lb\") == 'LB'", "def check(flip_case):\n\tassert flip_case(\"AjUCdQIZXemhRaQZOkgJVvpYPUDPNmjKIPhQzZmAQIX\") == 'aJucDqizxEMHrAqzoKGjvVPypudpnMJkipHqZzMaqix'", "def check(flip_case):\n\tassert flip_case(\"~S*VzmzMvqpR\") == '~s*vZMZmVQPr'", "def check(flip_case):\n\tassert flip_case(\"BBx~!|/^\") == 'bbX~!|/^'", "def check(flip_case):\n\tassert flip_case(\"zg\") == 'ZG'", "def check(flip_case):\n\tassert flip_case(\"kydGvfiOVOgOxStzNHakGRVZUzaeQtEDgWqRJJpfe\") == 'KYDgVFIovoGoXsTZnhAKgrvzuZAEqTedGwQrjjPFE'", "def check(flip_case):\n\tassert flip_case(\"lhp\") == 'LHP'", "def check(flip_case):\n\tassert flip_case(\"jfu\") == 'JFU'", "def check(flip_case):\n\tassert flip_case(\"jbTsYZxZTBwOTezydywllWFUrvTWBHXpvMsIY\") == 'JBtSyzXztbWotEZYDYWLLwfuRVtwbhxPVmSiy'", "def check(flip_case):\n\tassert flip_case(\"vVvmxSIyqihZXowcxzQxqSKxpnCpSSkCXeRBXTHyMl\") == 'VvVMXsiYQIHzxOWCXZqXQskXPNcPssKcxErbxthYmL'", "def check(flip_case):\n\tassert flip_case(\"QwnaAlMgJSZcTaBgprrbFezVmYCdMsWyxskaPqenOH\") == 'qWNAaLmGjszCtAbGPRRBfEZvMycDmSwYXSKApQENoh'", "def check(flip_case):\n\tassert flip_case(\"o=c_/?QU~q\") == 'O=C_/?qu~Q'", "def check(flip_case):\n\tassert flip_case(\"ds\") == 'DS'", "def check(flip_case):\n\tassert flip_case(\"zdp\") == 'ZDP'", "def check(flip_case):\n\tassert flip_case(\"hd\") == 'HD'", "def check(flip_case):\n\tassert flip_case(\"jBVXuMXKDuzctqITdcXyikINVSCmKdXbcxhnT\") == 'JbvxUmxkdUZCTQitDCxYIKinvscMkDxBCXHNt'", "def check(flip_case):\n\tassert flip_case(\"ugd\") == 'UGD'", "def check(flip_case):\n\tassert flip_case(\"LAszIcfMteqqYNwFzpJQolmECkmMmMLiyWgtidbdJUaaA\") == 'laSZiCFmTEQQynWfZPjqOLMecKMmMmlIYwGTIDBDjuAAa'", "def check(flip_case):\n\tassert flip_case(\"RbUFL/M\") == 'rBufl/m'", "def check(flip_case):\n\tassert flip_case('Hello!') == 'hELLO!'", "def check(flip_case):\n\tassert flip_case(\"n\") == 'N'", "def check(flip_case):\n\tassert flip_case(\"WF~h/oG^\") == 'wf~H/Og^'", "def check(flip_case):\n\tassert flip_case(\"pzp\") == 'PZP'", "def check(flip_case):\n\tassert flip_case(\"+K|eG\") == '+k|Eg'", "def check(flip_case):\n\tassert flip_case(\"dzpm pZUpHNjdpIMw BmQd otqoasshKCFtpf\") == 'DZPM PzuPhnJDPimW bMqD OTQOASSHkcfTPF'", "def check(flip_case):\n\tassert flip_case(\"xmx\") == 'XMX'", "def check(flip_case):\n\tassert flip_case(\"*~=I\") == '*~=i'", "def check(flip_case):\n\tassert flip_case(\"d!C&e?Gl\") == 'D!c&E?gL'", "def check(flip_case):\n\tassert flip_case(\"QNANcSJRDzmQFD RdGOsUHyADvXPqBWXQQuDzqlQkYucV\") == 'qnanCsjrdZMqfd rDgoSuhYadVxpQbwxqqUdZQLqKyUCv'", "def check(flip_case):\n\tassert flip_case(\"#QSfHF:$&%\") == '#qsFhf:$&%'", "def check(flip_case):\n\tassert flip_case(\"?fTt><k\") == '?FtT><K'", "def check(flip_case):\n\tassert flip_case(\"rpd\") == 'RPD'", "def check(flip_case):\n\tassert flip_case(\"PnHqJfQuNAYhthlFbMAQuoFHTWWNssJuqEsyxCgEkcDUh\") == 'pNhQjFqUnayHTHLfBmaqUOfhtwwnSSjUQeSYXcGeKCduH'", "def check(flip_case):\n\tassert flip_case(\"j\") == 'J'", "def check(flip_case):\n\tassert flip_case(\"n|gOUwY~ruFD\") == 'N|GouWy~RUfd'", "def check(flip_case):\n\tassert flip_case(\"q\") == 'Q'", "def check(flip_case):\n\tassert flip_case(\"EELIBxoyBKMKLqdqCoaxKsaHDhVSyVFZKwIUD\") == 'eelibXOYbkmklQDQcOAXkSAhdHvsYvfzkWiud'", "def check(flip_case):\n\tassert flip_case(\"bRIcNFlGQxbUHHeXuOVT ZqmqxQEmgBrvEWGTokoHY\") == 'BriCnfLgqXBuhhExUovt zQMQXqeMGbRVewgtOKOhy'", "def check(flip_case):\n\tassert flip_case(\"a\") == 'A'", "def check(flip_case):\n\tassert flip_case(\"pez\") == 'PEZ'", "def check(flip_case):\n\tassert flip_case(\" rWGZAlqccMZVGnZysgdSulExviJwKbbHiwV\") == ' RwgzaLQCCmzvgNzYSGDsULeXVIjWkBBhIWv'", "def check(flip_case):\n\tassert flip_case(\"SURWTdsMjFvXSnFJFytHymfgEiDcmZREKgXr\") == 'surwtDSmJfVxsNfjfYThYMFGeIdCMzrekGxR'", "def check(flip_case):\n\tassert flip_case(\"u\") == 'U'", "def check(flip_case):\n\tassert flip_case(\"~zUkkeFy\") == '~ZuKKEfY'", "def check(flip_case):\n\tassert flip_case(\"h*U*\") == 'H*u*'", "def check(flip_case):\n\tassert flip_case(\"yr\") == 'YR'", "def check(flip_case):\n\tassert flip_case(\"agwaVXOuq\") == 'AGWAvxoUQ'", "def check(flip_case):\n\tassert flip_case(\"p AAnXuPeBbeTnNHDDLhugfDzDoSnd KMLFYIppPFKSX\") == 'P aaNxUpEbBEtNnhddlHUGFdZdOsND kmlfyiPPpfksx'", "def check(flip_case):\n\tassert flip_case(\"d<gG\") == 'D<Gg'", "def check(flip_case):\n\tassert flip_case(\"oz\") == 'OZ'", "def check(flip_case):\n\tassert flip_case(\"fbc\") == 'FBC'", "def check(flip_case):\n\tassert flip_case(\"tu\") == 'TU'", "def check(flip_case):\n\tassert flip_case(\"NyMDTZqvnnQa TTfqNoInjRIaYeFtiLyYLvQJ\") == 'nYmdtzQVNNqA ttFQnOiNJriAyEfTIlYylVqj'", "def check(flip_case):\n\tassert flip_case(\"x\") == 'X'", "def check(flip_case):\n\tassert flip_case(\"RvQa%\") == 'rVqA%'", "def check(flip_case):\n\tassert flip_case(\"YpaJZKDmVIGTvH MGarufiqirhCbiKMToFjBUzotRH\") == 'yPAjzkdMvigtVh mgARUFIQIRHcBIkmtOfJbuZOTrh'", "def check(flip_case):\n\tassert flip_case(\"u=>c\") == 'U=>C'", "def check(flip_case):\n\tassert flip_case(\"&b_H\") == '&B_h'", "def check(flip_case):\n\tassert flip_case(\"$<y+\") == '$<Y+'", "def check(flip_case):\n\tassert flip_case(\"dWqb\") == 'DwQB'", "def check(flip_case):\n\tassert flip_case(\"xv\") == 'XV'", "def check(flip_case):\n\tassert flip_case(\"/zl\") == '/ZL'", "def check(flip_case):\n\tassert flip_case('') == ''", "def check(flip_case):\n\tassert flip_case(\"lif\") == 'LIF'", "def check(flip_case):\n\tassert flip_case(\"pgj\") == 'PGJ'", "def check(flip_case):\n\tassert flip_case(\"DyMMLvwZlYNhTOjDhnsHoTNqrTRWSrFYFWaoimDxFFaiM\") == 'dYmmlVWzLynHtoJdHNShOtnQRtrwsRfyfwAOIMdXffAIm'", "def check(flip_case):\n\tassert flip_case(\"v*qeoJBLg<t&\") == 'V*QEOjblG<T&'", "def check(flip_case):\n\tassert flip_case(\"nVVa|^lsy\") == 'NvvA|^LSY'", "def check(flip_case):\n\tassert flip_case(\"MBsxRCmHzEltumRjfTmdmbspQjxySYLAQNAZPRyV\") == 'mbSXrcMhZeLTUMrJFtMDMBSPqJXYsylaqnazprYv'", "def check(flip_case):\n\tassert flip_case(\"NpFjCypU YkPuBLEfXMThREegzPXXT IgBpeyz \") == 'nPfJcYPu yKpUbleFxmtHreEGZpxxt iGbPEYZ '", "def check(flip_case):\n\tassert flip_case(\"pG<wNz>Y/\") == 'Pg<WnZ>y/'", "def check(flip_case):\n\tassert flip_case(\"uRCphX cuIYmaTkfFCGBJrVUsjMustykG WqKcSc\") == 'UrcPHx CUiyMAtKFfcgbjRvuSJmUSTYKg wQkCsC'", "def check(flip_case):\n\tassert flip_case(\"haP!tD\") == 'HAp!Td'", "def check(flip_case):\n\tassert flip_case(\"NwHrkzMqZmOzyNBPhYuSIdBfm CjlBUkCXIeiH\") == 'nWhRKZmQzMoZYnbpHyUsiDbFM cJLbuKcxiEIh'", "def check(flip_case):\n\tassert flip_case(\"|l&:hE%&\") == '|L&:He%&'", "def check(flip_case):\n\tassert flip_case(\"wdWVLKaFVwzCSyfAbTLGDiVKlkTUSWhVBTcWaNoUaq\") == 'WDwvlkAfvWZcsYFaBtlgdIvkLKtuswHvbtCwAnOuAQ'", "def check(flip_case):\n\tassert flip_case(\"+$#d\") == '+$#D'", "def check(flip_case):\n\tassert flip_case(\"bq\") == 'BQ'", "def check(flip_case):\n\tassert flip_case('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'", "def check(flip_case):\n\tassert flip_case(\"d\") == 'D'", "def check(flip_case):\n\tassert flip_case(\"rZLVWNROgXWjbDAxzXaGYLOqVnpKiMJLXAKpM\") == 'RzlvwnroGxwJBdaXZxAgyloQvNPkImjlxakPm'", "def check(flip_case):\n\tassert flip_case(\"r\") == 'R'", "def check(flip_case):\n\tassert flip_case(\"mka\") == 'MKA'", "def check(flip_case):\n\tassert flip_case(\"dTpPnvaddXtfDXGDaEPDaGkpESXxOLdIKySLcPdpU\") == 'DtPpNVADDxTFdxgdAepdAgKPesxXolDikYslCpDPu'", "def check(flip_case):\n\tassert flip_case(\"fy\") == 'FY'", "def check(flip_case):\n\tassert flip_case(\"lW|tBEn~^ri<\") == 'Lw|TbeN~^RI<'", "def check(flip_case):\n\tassert flip_case(\"qnwYFneaoNWuSxNXocoMEXDwcqVoGZdRInOEbC\") == 'QNWyfNEAOnwUsXnxOCOmexdWCQvOgzDriNoeBc'", "def check(flip_case):\n\tassert flip_case(\"hzy\") == 'HZY'", "def check(flip_case):\n\tassert flip_case(\"sqopQROxzNCHvAlaUuwHvOMsScjnCpmswtyi\") == 'SQOPqroXZnchVaLAuUWhVomSsCJNcPMSWTYI'", "def check(flip_case):\n\tassert flip_case(\"&Py@\") == '&pY@'", "def check(flip_case):\n\tassert flip_case(\"Q<x\") == 'q<X'", "def check(flip_case):\n\tassert flip_case(\"&|EuiuG\") == '&|eUIUg'", "def check(flip_case):\n\tassert flip_case(\"gO#yDMhnV\") == 'Go#YdmHNv'", "def check(flip_case):\n\tassert flip_case(\"GRb|DCu\") == 'grB|dcU'", "def check(flip_case):\n\tassert flip_case(\"pFEAIYkn|\") == 'PfeaiyKN|'"], "test_case_list": ["assert flip_case(\"=Uft>^xAJt~M\") == '=uFT>^XajT~m'", "assert flip_case(\"CsgXBCATeQmYHhTMBoGuEM dGUDqazbndCFMtLL vmY\") == 'cSGxbcatEqMyhHtmbOgUem DgudQAZBNDcfmTll VMy'", "assert flip_case(\"w\") == 'W'", "assert flip_case(\"eIgaNO JtyWwkDSdVTrVoqClhNFrHNqDBl UInCVrviH\") == 'EiGAno jTYwWKdsDvtRvOQcLHnfRhnQdbL uiNcvRVIh'", "assert flip_case(\"FdR\") == 'fDr'", "assert flip_case(\"tR#Et^#\") == 'Tr#eT^#'", "assert flip_case(\"L@j:tM-_?Fgc\") == 'l@J:Tm-_?fGC'", "assert flip_case(\"ez\") == 'EZ'", "assert flip_case(\"F_LHcfxbO\") == 'f_lhCFXBo'", "assert flip_case(\"xDFZwXjexGGcNsQGWKFfWrVIoHZYFFhWCRQJpnfL\") == 'XdfzWxJEXggCnSqgwkfFwRviOhzyffHwcrqjPNFl'", "assert flip_case(\"CnpipxUmlSdCSmHdbyDoMlbssWpLHcyKnJlsulPxWNPHi\") == 'cNPIPXuMLsDcsMhDBYdOmLBSSwPlhCYkNjLSULpXwnphI'", "assert flip_case(\"vqp\") == 'VQP'", "assert flip_case(\"f<SH\") == 'F<sh'", "assert flip_case(\"tBDUC ZKFZKtFVvqmhzUltjFzOWNXldpEHOAKJIp\") == 'Tbduc zkfzkTfvVQMHZuLTJfZownxLDPehoakjiP'", "assert flip_case(\"+>gY~\") == '+>Gy~'", "assert flip_case(\"BlmIOOJIkOnKWOtKuudPt  sUUPPNZZbQKiIHsNzFe\") == 'bLMioojiKoNkwoTkUUDpT  SuuppnzzBqkIihSnZfE'", "assert flip_case(\"JXCxNsvL\") == 'jxcXnSVl'", "assert flip_case(\"gq\") == 'GQ'", "assert flip_case(\"v\") == 'V'", "assert flip_case(\"RkocroIYw pMJxfpXxLucXAIvDjwlkIeJBCXJsxMAH\") == 'rKOCROiyW PmjXFPxXlUCxaiVdJWLKiEjbcxjSXmah'", "assert flip_case(\"JVKSQnhMMEPEXaJBBgEbTmkMCSWcebmFckHoj\") == 'jvksqNHmmepexAjbbGeBtMKmcswCEBMfCKhOJ'", "assert flip_case(\"gif\") == 'GIF'", "assert flip_case(\"g gCvDFeq NvBvqUNjjIldrkmFZCCTkJACipqozhZZ\") == 'G GcVdfEQ nVbVQunJJiLDRKMfzcctKjacIPQOZHzz'", "assert flip_case(\"rPxMsdbinpIxuZkSMNhmkYSJ DaYPCubXFgtuGbdtUXBR\") == 'RpXmSDBINPiXUzKsmnHMKysj dAypcUBxfGTUgBDTuxbr'", "assert flip_case(\"vzhEUikjmBtxkJcpaTRiuEurpoJXgLCmmSGttGsfOv\") == 'VZHeuIKJMbTXKjCPAtrIUeURPOjxGlcMMsgTTgSFoV'", "assert flip_case(\"ishBtMJcStzZVLuiiCdRPaVgPIsPMZkvSjJna\") == 'ISHbTmjCsTZzvlUIIcDrpAvGpiSpmzKVsJjNA'", "assert flip_case(\"qn\") == 'QN'", "assert flip_case(\"pCKgJaaQZHzRwxdwpqCZvoRlbvqLfrtdHlSrrqyl\") == 'PckGjAAqzhZrWXDWPQczVOrLBVQlFRTDhLsRRQYL'", "assert flip_case(\"k\") == 'K'", "assert flip_case(\"xOEweGnFamRzetSvZkSCZbKrjxTcGdWzTWBsbETPk auL\") == 'XoeWEgNfAMrZETsVzKsczBkRJXtCgDwZtwbSBetpK AUl'", "assert flip_case(\"WVlvlJraPwOUwyOOhbDSADCInroOCMzpaSnUubOH\") == 'wvLVLjRApWouWYooHBdsadciNROocmZPAsNuUBoh'", "assert flip_case(\"lb\") == 'LB'", "assert flip_case(\"AjUCdQIZXemhRaQZOkgJVvpYPUDPNmjKIPhQzZmAQIX\") == 'aJucDqizxEMHrAqzoKGjvVPypudpnMJkipHqZzMaqix'", "assert flip_case(\"~S*VzmzMvqpR\") == '~s*vZMZmVQPr'", "assert flip_case(\"BBx~!|/^\") == 'bbX~!|/^'", "assert flip_case(\"zg\") == 'ZG'", "assert flip_case(\"kydGvfiOVOgOxStzNHakGRVZUzaeQtEDgWqRJJpfe\") == 'KYDgVFIovoGoXsTZnhAKgrvzuZAEqTedGwQrjjPFE'", "assert flip_case(\"lhp\") == 'LHP'", "assert flip_case(\"jfu\") == 'JFU'", "assert flip_case(\"jbTsYZxZTBwOTezydywllWFUrvTWBHXpvMsIY\") == 'JBtSyzXztbWotEZYDYWLLwfuRVtwbhxPVmSiy'", "assert flip_case(\"vVvmxSIyqihZXowcxzQxqSKxpnCpSSkCXeRBXTHyMl\") == 'VvVMXsiYQIHzxOWCXZqXQskXPNcPssKcxErbxthYmL'", "assert flip_case(\"QwnaAlMgJSZcTaBgprrbFezVmYCdMsWyxskaPqenOH\") == 'qWNAaLmGjszCtAbGPRRBfEZvMycDmSwYXSKApQENoh'", "assert flip_case(\"o=c_/?QU~q\") == 'O=C_/?qu~Q'", "assert flip_case(\"ds\") == 'DS'", "assert flip_case(\"zdp\") == 'ZDP'", "assert flip_case(\"hd\") == 'HD'", "assert flip_case(\"jBVXuMXKDuzctqITdcXyikINVSCmKdXbcxhnT\") == 'JbvxUmxkdUZCTQitDCxYIKinvscMkDxBCXHNt'", "assert flip_case(\"ugd\") == 'UGD'", "assert flip_case(\"LAszIcfMteqqYNwFzpJQolmECkmMmMLiyWgtidbdJUaaA\") == 'laSZiCFmTEQQynWfZPjqOLMecKMmMmlIYwGTIDBDjuAAa'", "assert flip_case(\"RbUFL/M\") == 'rBufl/m'", "assert flip_case('Hello!') == 'hELLO!'", "assert flip_case(\"n\") == 'N'", "assert flip_case(\"WF~h/oG^\") == 'wf~H/Og^'", "assert flip_case(\"pzp\") == 'PZP'", "assert flip_case(\"+K|eG\") == '+k|Eg'", "assert flip_case(\"dzpm pZUpHNjdpIMw BmQd otqoasshKCFtpf\") == 'DZPM PzuPhnJDPimW bMqD OTQOASSHkcfTPF'", "assert flip_case(\"xmx\") == 'XMX'", "assert flip_case(\"*~=I\") == '*~=i'", "assert flip_case(\"d!C&e?Gl\") == 'D!c&E?gL'", "assert flip_case(\"QNANcSJRDzmQFD RdGOsUHyADvXPqBWXQQuDzqlQkYucV\") == 'qnanCsjrdZMqfd rDgoSuhYadVxpQbwxqqUdZQLqKyUCv'", "assert flip_case(\"#QSfHF:$&%\") == '#qsFhf:$&%'", "assert flip_case(\"?fTt><k\") == '?FtT><K'", "assert flip_case(\"rpd\") == 'RPD'", "assert flip_case(\"PnHqJfQuNAYhthlFbMAQuoFHTWWNssJuqEsyxCgEkcDUh\") == 'pNhQjFqUnayHTHLfBmaqUOfhtwwnSSjUQeSYXcGeKCduH'", "assert flip_case(\"j\") == 'J'", "assert flip_case(\"n|gOUwY~ruFD\") == 'N|GouWy~RUfd'", "assert flip_case(\"q\") == 'Q'", "assert flip_case(\"EELIBxoyBKMKLqdqCoaxKsaHDhVSyVFZKwIUD\") == 'eelibXOYbkmklQDQcOAXkSAhdHvsYvfzkWiud'", "assert flip_case(\"bRIcNFlGQxbUHHeXuOVT ZqmqxQEmgBrvEWGTokoHY\") == 'BriCnfLgqXBuhhExUovt zQMQXqeMGbRVewgtOKOhy'", "assert flip_case(\"a\") == 'A'", "assert flip_case(\"pez\") == 'PEZ'", "assert flip_case(\" rWGZAlqccMZVGnZysgdSulExviJwKbbHiwV\") == ' RwgzaLQCCmzvgNzYSGDsULeXVIjWkBBhIWv'", "assert flip_case(\"SURWTdsMjFvXSnFJFytHymfgEiDcmZREKgXr\") == 'surwtDSmJfVxsNfjfYThYMFGeIdCMzrekGxR'", "assert flip_case(\"u\") == 'U'", "assert flip_case(\"~zUkkeFy\") == '~ZuKKEfY'", "assert flip_case(\"h*U*\") == 'H*u*'", "assert flip_case(\"yr\") == 'YR'", "assert flip_case(\"agwaVXOuq\") == 'AGWAvxoUQ'", "assert flip_case(\"p AAnXuPeBbeTnNHDDLhugfDzDoSnd KMLFYIppPFKSX\") == 'P aaNxUpEbBEtNnhddlHUGFdZdOsND kmlfyiPPpfksx'", "assert flip_case(\"d<gG\") == 'D<Gg'", "assert flip_case(\"oz\") == 'OZ'", "assert flip_case(\"fbc\") == 'FBC'", "assert flip_case(\"tu\") == 'TU'", "assert flip_case(\"NyMDTZqvnnQa TTfqNoInjRIaYeFtiLyYLvQJ\") == 'nYmdtzQVNNqA ttFQnOiNJriAyEfTIlYylVqj'", "assert flip_case(\"x\") == 'X'", "assert flip_case(\"RvQa%\") == 'rVqA%'", "assert flip_case(\"YpaJZKDmVIGTvH MGarufiqirhCbiKMToFjBUzotRH\") == 'yPAjzkdMvigtVh mgARUFIQIRHcBIkmtOfJbuZOTrh'", "assert flip_case(\"u=>c\") == 'U=>C'", "assert flip_case(\"&b_H\") == '&B_h'", "assert flip_case(\"$<y+\") == '$<Y+'", "assert flip_case(\"dWqb\") == 'DwQB'", "assert flip_case(\"xv\") == 'XV'", "assert flip_case(\"/zl\") == '/ZL'", "assert flip_case('') == ''", "assert flip_case(\"lif\") == 'LIF'", "assert flip_case(\"pgj\") == 'PGJ'", "assert flip_case(\"DyMMLvwZlYNhTOjDhnsHoTNqrTRWSrFYFWaoimDxFFaiM\") == 'dYmmlVWzLynHtoJdHNShOtnQRtrwsRfyfwAOIMdXffAIm'", "assert flip_case(\"v*qeoJBLg<t&\") == 'V*QEOjblG<T&'", "assert flip_case(\"nVVa|^lsy\") == 'NvvA|^LSY'", "assert flip_case(\"MBsxRCmHzEltumRjfTmdmbspQjxySYLAQNAZPRyV\") == 'mbSXrcMhZeLTUMrJFtMDMBSPqJXYsylaqnazprYv'", "assert flip_case(\"NpFjCypU YkPuBLEfXMThREegzPXXT IgBpeyz \") == 'nPfJcYPu yKpUbleFxmtHreEGZpxxt iGbPEYZ '", "assert flip_case(\"pG<wNz>Y/\") == 'Pg<WnZ>y/'", "assert flip_case(\"uRCphX cuIYmaTkfFCGBJrVUsjMustykG WqKcSc\") == 'UrcPHx CUiyMAtKFfcgbjRvuSJmUSTYKg wQkCsC'", "assert flip_case(\"haP!tD\") == 'HAp!Td'", "assert flip_case(\"NwHrkzMqZmOzyNBPhYuSIdBfm CjlBUkCXIeiH\") == 'nWhRKZmQzMoZYnbpHyUsiDbFM cJLbuKcxiEIh'", "assert flip_case(\"|l&:hE%&\") == '|L&:He%&'", "assert flip_case(\"wdWVLKaFVwzCSyfAbTLGDiVKlkTUSWhVBTcWaNoUaq\") == 'WDwvlkAfvWZcsYFaBtlgdIvkLKtuswHvbtCwAnOuAQ'", "assert flip_case(\"+$#d\") == '+$#D'", "assert flip_case(\"bq\") == 'BQ'", "assert flip_case('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'", "assert flip_case(\"d\") == 'D'", "assert flip_case(\"rZLVWNROgXWjbDAxzXaGYLOqVnpKiMJLXAKpM\") == 'RzlvwnroGxwJBdaXZxAgyloQvNPkImjlxakPm'", "assert flip_case(\"r\") == 'R'", "assert flip_case(\"mka\") == 'MKA'", "assert flip_case(\"dTpPnvaddXtfDXGDaEPDaGkpESXxOLdIKySLcPdpU\") == 'DtPpNVADDxTFdxgdAepdAgKPesxXolDikYslCpDPu'", "assert flip_case(\"fy\") == 'FY'", "assert flip_case(\"lW|tBEn~^ri<\") == 'Lw|TbeN~^RI<'", "assert flip_case(\"qnwYFneaoNWuSxNXocoMEXDwcqVoGZdRInOEbC\") == 'QNWyfNEAOnwUsXnxOCOmexdWCQvOgzDriNoeBc'", "assert flip_case(\"hzy\") == 'HZY'", "assert flip_case(\"sqopQROxzNCHvAlaUuwHvOMsScjnCpmswtyi\") == 'SQOPqroXZnchVaLAuUWhVomSsCJNcPMSWTYI'", "assert flip_case(\"&Py@\") == '&pY@'", "assert flip_case(\"Q<x\") == 'q<X'", "assert flip_case(\"&|EuiuG\") == '&|eUIUg'", "assert flip_case(\"gO#yDMhnV\") == 'Go#YdmHNv'", "assert flip_case(\"GRb|DCu\") == 'grB|dcU'", "assert flip_case(\"pFEAIYkn|\") == 'PfeaiyKN|'"], "nl": " For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    ", "func": "def flip_case(string: str) -> str:", "examples": ">>> flip_case('Hello')\n    'hELLO'\n    ", "repair_prompt": ["def flip_case(string: str) -> str:\t\n'''For a given string, flip lowercase characters to uppercase. Change uppercase characters to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "def flip_case(string: str) -> str:\t\n'''For a given string, flip lowercase characters to uppercase. You also need to change the uppercase characters to lowercase. This transformation should apply to each character in the string.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "def flip_case(string: str) -> str:\t\n'''For a given string, flip lowercase characters to uppercase and change uppercase characters to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and vice versa.\n    Non-alphabetic characters remain unchanged.\n\n    Parameters:\n    string (str): The input string to be processed.\n\n    Returns:\n    str: The string with flipped case.\n    \"\"\"\n    return string.swapcase()\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of each character in the input string.\n\n    Args:\n        string (str): A string containing characters whose case needs to be flipped.\n\n    Returns:\n        str: A new string with each character's case flipped.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Iterate over each character in the input string\n    for char in string:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Convert to lowercase and append to result\n            result += char.lower()\n        else:\n            # Convert to uppercase and append to result\n            result += char.upper()\n\n    # Return the result string after processing all characters\n    return result\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"Flips the case of each alphabetic character in the input string.\n\n    Args:\n        string (str): The input string whose characters' cases are to be flipped.\n\n    Returns:\n        str: A new string with the case of each alphabetic character flipped.\n             Non-alphabetic characters remain unchanged.\n    \"\"\"\n    # Initialize an empty list to store the result characters\n    result = []\n\n    # Iterate through each character in the input string\n    for char in string:\n        # Check if the character is lowercase\n        if char.islower():\n            # Convert to uppercase and append to the result list\n            result.append(char.upper())\n        # Check if the character is uppercase\n        elif char.isupper():\n            # Convert to lowercase and append to the result list\n            result.append(char.lower())\n        else:\n            # Non-alphabetic characters are appended unchanged\n            result.append(char)\n\n    # Join the list into a string and return\n    return ''.join(result)\n\n# Example usage:\n# print(flip_case('Hello'))  # Output: 'hELLO'\n# print(flip_case('123!@#'))  # Output: '123!@#'\n# print(flip_case('aBcDeFg'))  # Output: 'AbCdEfG'\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of each character in the input string.\n\n    Parameters:\n    string (str): The input string whose characters' cases are to be flipped.\n\n    Returns:\n    str: A new string with each character's case flipped.\n\n    Example:\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(flip_case('Hello'))  # Expected output: 'hELLO'\n    print(flip_case('WORLD'))  # Expected output: 'world'\n    print(flip_case('123'))    # Expected output: '123'\n    print(flip_case('!@#'))    # Expected output: '!@#'\n    print(flip_case(''))       # Expected output: ''\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of each character in the input string.\n\n    Parameters:\n    string (str): The input string to transform.\n\n    Returns:\n    str: A new string with the case of each character flipped.\n\n    Example:\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    # Using Python's built-in str.swapcase() method to flip the case of each character\n    return string.swapcase()\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to demonstrate functionality\n    print(flip_case('Hello'))  # Expected output: 'hELLO'\n    print(flip_case(''))       # Expected output: ''\n    print(flip_case('123'))    # Expected output: '123'\n    print(flip_case('aBcD'))   # Expected output: 'AbCd'\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    Flips the case of each character in the input string.\n    Lowercase characters are converted to uppercase and vice versa.\n    Non-alphabetic characters remain unchanged.\n\n    Parameters:\n    string (str): The input string to transform.\n\n    Returns:\n    str: A new string with the case of each character flipped.\n\n    Example:\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and change uppercase characters to lowercase.\n    Non-alphabetic characters remain unchanged.\n    \n    Parameters:\n    string (str): The input string to be processed.\n    \n    Returns:\n    str: The string with flipped case.\n    \n    Example:\n    >>> flip_case('Hello123')\n    'hELLO123'\n    \"\"\"\n    # Initialize an empty result string\n    result = []\n    \n    # Iterate over each character in the input string\n    for char in string:\n        # Check if the character is alphabetic\n        if char.isalpha():\n            # Flip the case of the character\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            # Non-alphabetic characters remain unchanged\n            result.append(char)\n    \n    # Join the list into a string and return\n    return ''.join(result)\n\n# Example usage\nif __name__ == \"__main__\":\n    example_string = \"Hello123\"\n    flipped_string = flip_case(example_string)\n    print(flipped_string)  # Output: hELLO123\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    '''\n    Flips lowercase characters to uppercase and changes uppercase characters to lowercase.\n    Non-alphabetic characters remain unchanged.\n    \n    Args:\n        string (str): The input string to flip the case.\n    \n    Returns:\n        str: The string with flipped case.\n    \n    Example:\n        >>> flip_case('Hello')\n        'hELLO'\n    '''\n    return string.swapcase()\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"Flips the case of each alphabetic character in the input string.\n\n    Args:\n        string (str): The input string containing characters to flip.\n\n    Returns:\n        str: A new string with each alphabetic character's case flipped.\n             Non-alphabetic characters remain unchanged.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Iterate over each character in the input string\n    for char in string:\n        # Check if the character is lowercase\n        if char.islower():\n            # Convert lowercase to uppercase and append to result\n            result += char.upper()\n        else:\n            # Convert uppercase to lowercase and append to result\n            result += char.lower()\n\n    # Return the result string\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(flip_case(\"\"))  # Expected output: ''\n    print(flip_case(\"123\"))  # Expected output: '123'\n    print(flip_case(\"aBcDeF\"))  # Expected output: 'AbCdEf'\n", "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"Flips the case of each alphabetic character in the input string.\n\n    Args:\n        string (str): The input string whose characters' cases are to be flipped.\n\n    Returns:\n        str: A new string with the case of each alphabetic character flipped.\n             Non-alphabetic characters remain unchanged.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Iterate through each character in the input string\n    for char in string:\n        # Check if the character is lowercase\n        if char.islower():\n            # Convert to uppercase and append to result\n            result += char.upper()\n        else:\n            # Convert to lowercase and append to result\n            result += char.lower()\n\n    # Return the result string after processing all characters\n    return result\n\n# Example usage:\n# print(flip_case(\"Hello World!\"))  # Output: \"hELLO wORLD!\"\n# print(flip_case(\"123\"))           # Output: \"123\"\n# print(flip_case(\"!@#\"))           # Output: \"!@#\"\n# print(flip_case(\"\"))              # Output: \"\"\n"], "plans": ["requirement analysis:\nThe function should accurately flip the case of each character in the string, ensuring that lowercase characters become uppercase and vice versa. It should handle strings of varying lengths efficiently.\nrequirement pool:\n- Implement the main case flipping functionality\n- Optimize performance for large strings\n- Ensure compatibility with different character sets\n- Provide clear documentation for user understanding\n- Consider additional string manipulation features\nWe will implement a simple function using Python's built-in string methods to flip the case of each character. The function will iterate over each character in the string and use the str.swapcase() method, which is optimized for performance and handles large strings efficiently. This approach ensures compatibility with different character sets and maintains non-alphabetic characters unchanged.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: The requirement is to change lowercase characters to uppercase and vice versa for each character in the string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic involves iterating over each character in the string and using the `str.swapcase()` method to flip the case of each character. This method automatically handles the conversion of lowercase to uppercase and vice versa.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string has no characters to flip, so the expected output is an empty string.\n    \n    flip_case('123') = '123'\n    Explanation: Since '123' contains no alphabetic characters, the output remains unchanged.\n    \n    flip_case('HELLO world!') = 'hello WORLD!'\n    Explanation: The uppercase 'HELLO' is converted to lowercase, and the lowercase 'world' is converted to uppercase. Non-alphabetic characters like '!' remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The `str.swapcase()` method inherently handles all cases, including empty strings and strings with non-alphabetic characters.\n", "requirement analysis:\nThe requirement is to develop a function that accurately flips the case of each character in a given string. The function should handle both uppercase and lowercase characters and return the modified string. Performance optimization is crucial for handling large strings efficiently.\nrequirement pool:\n- Implement the main function to flip case of characters\n- Optimize performance for large strings\n- Design a user-friendly interface for input and output\n- Ensure compatibility with various input formats\n- Provide documentation and examples for user guidance\nWe will implement a simple function using Python's built-in string methods to flip the case of each character in the input string. The function will iterate over each character, checking if it is uppercase or lowercase, and then convert it to the opposite case. This approach ensures efficient handling of large strings without the need for additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: This means changing each lowercase character in the string to uppercase and each uppercase character to lowercase.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize an empty string to store the result.\n    2. Iterate over each character in the input string.\n    3. For each character, check if it is uppercase using the `isupper()` method.\n    4. If it is uppercase, convert it to lowercase using the `lower()` method and append it to the result string.\n    5. If it is not uppercase (i.e., it is lowercase), convert it to uppercase using the `upper()` method and append it to the result string.\n    6. Return the result string after processing all characters.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string should return an empty string since there are no characters to flip.\n    \n    flip_case('123') = '123'\n    Explanation: Numbers do not have a case, so they remain unchanged in the output.\n    \n    flip_case('!@#') = '!@#'\n    Explanation: Special characters do not have a case, so they remain unchanged in the output.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each character and flipping its case (or leaving it unchanged if it's not a letter) will naturally handle these cases.\n", "requirement analysis:\nThe function should accurately flip the case of each character in the string, ensuring that special characters remain unchanged. Performance optimization is crucial for handling large strings efficiently.\nrequirement pool:\n- Implement accurate case flipping for all characters\n- Optimize performance for large strings\n- Ensure compatibility with special characters\n- Provide clear documentation for user understanding\n- Include error handling for invalid inputs\nWe will implement a simple function using Python's built-in string methods to flip the case of each character in the input string. This approach ensures compatibility with special characters and optimizes performance for large strings by leveraging efficient native operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: In the requirement, \"flip case\" means to change each lowercase character in the string to uppercase and each uppercase character to lowercase.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize an empty string to store the result.\n    2. Iterate through each character in the input string.\n    3. For each character, check if it is lowercase using the `islower()` method.\n    4. If it is lowercase, convert it to uppercase using the `upper()` method and append it to the result string.\n    5. If it is not lowercase (i.e., it is uppercase), convert it to lowercase using the `lower()` method and append it to the result string.\n    6. Return the result string after processing all characters.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string should return an empty string since there are no characters to flip.\n    \n    flip_case('123') = '123'\n    Explanation: Numbers do not have a case, so they remain unchanged in the output.\n    \n    flip_case('!@#') = '!@#'\n    Explanation: Special characters do not have a case, so they remain unchanged in the output.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each character and flipping its case (or leaving it unchanged if it's not a letter) will naturally handle these cases.\n", "requirement analysis:\nThe function should efficiently flip the case of each character in a string, ensuring compatibility with Python 3.x. It should handle edge cases such as empty strings and strings with special characters.\nrequirement pool:\n- Implement the main function to flip case of characters\n- Ensure compatibility with Python 3.x\n- Handle edge cases like empty strings\n- Provide comprehensive documentation\n- Optimize for performance with long strings\nWe will use Python's built-in string method 'swapcase()' which efficiently flips the case of each character in a string. This method is compatible with Python 3.x and handles edge cases like empty strings and special characters by leaving non-alphabetic characters unchanged.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: The requirement is to change each lowercase character in the string to uppercase and each uppercase character to lowercase.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic is straightforward as we can utilize Python's built-in `swapcase()` method, which automatically flips the case of each character in the string. This method handles all characters in the string, including edge cases like empty strings and non-alphabetic characters.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string remains unchanged as there are no characters to flip.\n    \n    flip_case('123') = '123'\n    Explanation: Numeric characters are not affected by case changes, so they remain unchanged.\n    \n    flip_case('!@#') = '!@#'\n    Explanation: Special characters do not have a case, so they remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The `swapcase()` method inherently handles these cases by leaving non-alphabetic characters unchanged and returning an empty string if the input is empty.\n", "requirement analysis:\nThe function should efficiently flip the case of each character in a string, handling both uppercase and lowercase letters. It should be robust enough to manage edge cases such as empty strings and strings with non-alphabetic characters.\nrequirement pool:\n- Implement the main function to flip case of characters.\n- Ensure the function handles edge cases like empty strings.\n- Include comprehensive documentation and examples.\n- Optimize for performance with large strings.\n- Test compatibility with different Python versions.\nWe will implement a simple function using Python's built-in capabilities to flip the case of each character in a string. The function will handle edge cases such as empty strings and strings with non-alphabetic characters by leaving non-alphabetic characters unchanged. We will use Python's built-in str.swapcase() method for efficiency and simplicity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: The requirement is to change each lowercase character to uppercase and each uppercase character to lowercase in the given string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic is straightforward as it involves using Python's built-in `str.swapcase()` method, which automatically flips the case of each character in the string. This method handles all edge cases, including empty strings and non-alphabetic characters, by leaving non-alphabetic characters unchanged.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string has no characters to flip, so the expected output is an empty string.\n    \n    flip_case('123') = '123'\n    Explanation: The string contains only non-alphabetic characters, so they remain unchanged.\n    \n    flip_case('aBcD') = 'AbCd'\n    Explanation: Each character's case is flipped: 'a' to 'A', 'B' to 'b', 'c' to 'C', and 'D' to 'd'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The `str.swapcase()` method inherently handles all edge cases, including empty strings and strings with non-alphabetic characters.\n", "requirement analysis:\nThe function should efficiently flip the case of each character in a string, handling both uppercase and lowercase letters. It should be robust enough to handle edge cases such as empty strings and strings with non-alphabetic characters.\nrequirement pool:\n- Implement the main function to flip case of characters.\n- Ensure the function handles edge cases like empty strings.\n- Include comprehensive test cases for validation.\n- Optimize for performance with large strings.\n- Provide detailed documentation and examples.\nWe will implement a simple function using Python's built-in string method `swapcase()`, which efficiently flips the case of each character in a string. This method is optimal for our needs as it handles both uppercase and lowercase transformations and is highly efficient. Non-alphabetic characters will remain unchanged, as this is the standard behavior of `swapcase()`. This approach ensures compatibility with Python 3.x and handles edge cases like empty strings naturally.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: The requirement is to change each lowercase character to uppercase and each uppercase character to lowercase in the given string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The requirement can be implemented using Python's built-in `swapcase()` method, which automatically flips the case of each character in a string. This method is efficient and handles both uppercase and lowercase transformations seamlessly.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string has no characters to flip, so the expected output is an empty string.\n    flip_case('123') = '123'\n    Explanation: The string '123' contains no alphabetic characters, so the output remains unchanged.\n    flip_case('HELLO world!') = 'hello WORLD!'\n    Explanation: The uppercase characters 'HELLO' are flipped to lowercase, and the lowercase characters 'world' are flipped to uppercase. Non-alphabetic characters like '!' remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The `swapcase()` method naturally handles empty strings and non-alphabetic characters without requiring additional logic.\n", "requirement analysis:\nThe requirement is to develop a function that accurately flips the case of each character in a given string. The function should handle both uppercase and lowercase characters and return the modified string. Performance optimization is crucial for handling large strings efficiently.\nrequirement pool:\n- Implement the main function to flip case\n- Optimize performance for large strings\n- Ensure consistent and reliable output\n- Enhance user satisfaction with intuitive results\n- Provide clear documentation and examples\nWe will implement a simple function using Python's built-in string methods to flip the case of each character in the input string. The function will iterate over each character, checking if it is alphabetic, and flip its case accordingly. Non-alphabetic characters will remain unchanged. This approach ensures performance optimization for large strings by leveraging efficient native operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: The requirement is to change lowercase characters to uppercase and vice versa for each character in the string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize an empty result string.\n    2. Iterate over each character in the input string.\n    3. Check if the character is alphabetic.\n    4. If the character is lowercase, convert it to uppercase; if it is uppercase, convert it to lowercase.\n    5. Append the converted character to the result string.\n    6. Return the result string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string has no characters to flip, so the expected output is an empty string.\n    \n    flip_case('123') = '123'\n    Explanation: The string contains only non-alphabetic characters, so they remain unchanged.\n    \n    flip_case('aBcD') = 'AbCd'\n    Explanation: Each character's case is flipped: 'a' to 'A', 'B' to 'b', 'c' to 'C', and 'D' to 'd'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each character and flipping its case handles all edge cases naturally.\n", "requirement analysis:\nThe function should accurately flip the case of each character in the input string, handling both uppercase and lowercase letters. It should be efficient and able to process large strings without significant performance degradation.\nrequirement pool:\n- Implement the main case flipping logic\n- Optimize for performance with large strings\n- Ensure compatibility with different Python versions\n- Handle edge cases like empty strings or non-alphabetic characters\n- Provide clear documentation and examples\nWe will use Python's built-in string method 'swapcase()' which efficiently flips the case of each character in a string. This method is optimized for performance and handles large strings well. It also automatically handles non-alphabetic characters by leaving them unchanged, which aligns with typical expectations for case flipping functionality.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: The requirement is to change lowercase characters to uppercase and vice versa in the given string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using Python's built-in `swapcase()` method, which automatically flips the case of each character in the string. This method is efficient and handles non-alphabetic characters by leaving them unchanged.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string has no characters to flip, so the expected output is an empty string.\n    \n    flip_case('123') = '123'\n    Explanation: Since '123' contains no alphabetic characters, the output remains unchanged.\n    \n    flip_case('HELLO world!') = 'hello WORLD!'\n    Explanation: The uppercase letters 'HELLO' are flipped to lowercase, and the lowercase letters 'world' are flipped to uppercase. Non-alphabetic characters like '!' remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The `swapcase()` method inherently handles these scenarios correctly.\n", "requirement analysis:\nThe function should accurately flip the case of each character in the string, handling both uppercase and lowercase letters. It should be efficient and intuitive, providing immediate results for user input.\nrequirement pool:\n- Implement the main function to flip case accurately\n- Optimize performance for handling large strings\n- Ensure compatibility with various string inputs\n- Provide comprehensive error handling for invalid inputs\n- Document the function usage and edge cases\nWe will implement a simple function using Python's built-in string methods to flip the case of each character in the input string. This approach ensures high performance and usability, as it leverages efficient native operations. Non-alphabetic characters will remain unchanged, as the requirement does not specify any special handling for them.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: This means to change each lowercase letter to uppercase and each uppercase letter to lowercase in the given string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize an empty string to store the result.\n    2. Iterate over each character in the input string.\n    3. For each character, check if it is lowercase using the `islower()` method.\n        - If it is lowercase, convert it to uppercase using the `upper()` method and append it to the result string.\n        - If it is not lowercase, convert it to lowercase using the `lower()` method and append it to the result string.\n    4. Return the result string.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string should return an empty string since there are no characters to flip.\n    \n    flip_case('123') = '123'\n    Explanation: Non-alphabetic characters remain unchanged, so the output is the same as the input.\n    \n    flip_case('aBcDeF') = 'AbCdEf'\n    Explanation: Each character's case is flipped, resulting in 'AbCdEf'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles empty strings and non-alphabetic characters correctly by default.\n", "requirement analysis:\nThe function should accurately flip the case of each character in the string, ensuring that special characters remain unchanged. Performance optimization is crucial for handling large strings efficiently.\nrequirement pool:\n- Implement accurate case flipping for all characters\n- Optimize performance for large strings\n- Ensure compatibility with mobile devices\n- Maintain special character integrity\n- Provide a user-friendly interface\nWe will implement a simple function using Python's built-in string methods to flip the case of each character in the input string. This approach ensures that the function is efficient and can handle large strings. Special characters will remain unchanged as they do not have a case to flip. The function will be designed to be compatible with mobile devices by keeping it lightweight and efficient.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flip case'\n    Explanation: This means changing each lowercase character in the string to uppercase and each uppercase character to lowercase.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize an empty string to store the result.\n    2. Iterate through each character in the input string.\n    3. For each character, check if it is lowercase using the `islower()` method.\n    4. If it is lowercase, convert it to uppercase using the `upper()` method and append it to the result string.\n    5. If it is not lowercase, convert it to lowercase using the `lower()` method and append it to the result string.\n    6. Return the result string after processing all characters.\n\n# [edge case] \n    flip_case('') = ''\n    Explanation: An empty string should return an empty string since there are no characters to flip.\n    \n    flip_case('123') = '123'\n    Explanation: Numbers do not have a case, so they remain unchanged.\n    \n    flip_case('!@#') = '!@#'\n    Explanation: Special characters do not have a case, so they remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each character and flipping its case (or leaving it unchanged if it's not a letter) will naturally handle these cases.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [126, 126, 126, 126, 126, 126, 126, 126, 126, 126], "completion": "from typing import List\n## main.py\n\ndef flip_case(string: str) -> str:\n    \"\"\"Flips the case of each alphabetic character in the input string.\n\n    Args:\n        string (str): The input string whose characters' cases are to be flipped.\n\n    Returns:\n        str: A new string with the case of each alphabetic character flipped.\n             Non-alphabetic characters remain unchanged.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Iterate through each character in the input string\n    for char in string:\n        # Check if the character is lowercase\n        if char.islower():\n            # Convert to uppercase and append to result\n            result += char.upper()\n        else:\n            # Convert to lowercase and append to result\n            result += char.lower()\n\n    # Return the result string after processing all characters\n    return result\n\n# Example usage:\n# print(flip_case(\"Hello World!\"))  # Output: \"hELLO wORLD!\"\n# print(flip_case(\"123\"))           # Output: \"123\"\n# print(flip_case(\"!@#\"))           # Output: \"!@#\"\n# print(flip_case(\"\"))              # Output: \"\"\n", "passed": true, "pass": true, "pass_num": 10, "round": 589, "mutate_method": "expand_one2two", "parent_index": 321}
