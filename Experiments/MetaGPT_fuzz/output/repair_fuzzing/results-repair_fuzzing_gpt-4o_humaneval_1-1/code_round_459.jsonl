{"task_id": "HumanEval/81", "prompt": "def numerical_letter_grade(grades):\t\n'''It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading, but the only problem is, she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table: GPA       |    Letter grade 4.0                A+ > 3.7                A > 3.3                A- > 3.0                B+ > 2.7                B > 2.3                B- > 2.0                C+ > 1.7                C > 1.3                C- > 1.0                D+ > 0.7                D > 0.0                D- 0.0                E\nExample:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    '''", "entry_point": "numerical_letter_grade", "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "test": ["def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.367]) == ['A-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.709]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.501]) == ['C-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6.042, 3, 5.935, 5, 5.423]) == ['A', 'B', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.511]) == ['C-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6, 4.502, 2.77, 6.757, 4.66]) == ['A', 'A', 'B', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.309, 3, 3.031, 4, 3.721]) == ['A', 'B', 'B+', 'A+', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1, 1.067, 5.544, 2.104, 6.994]) == ['D', 'D+', 'A', 'C+', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3, 3.93, 1.74, 2.791, 2.576]) == ['B', 'A', 'C', 'B', 'B-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.799]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.104]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6, 2.642, 5.179, 5.542, 7.925]) == ['A', 'B-', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([7.75, 2, 6.21, 4, 7.481]) == ['A', 'C', 'A', 'A+', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3, 1.608, 4.584, 1.801, 5.528]) == ['B', 'C-', 'A', 'C', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.259]) == ['C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4, 2.626, 2.824, 7.424, 5.83]) == ['A+', 'B-', 'B', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.84, 4, 4.974, 6, 5.319]) == ['A', 'A+', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.033]) == ['C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.516]) == ['B-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([9.54, 5, 6.671, 1, 5.784]) == ['A', 'A', 'A', 'D', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1, 5.293, 4.749, 7.907, 5.656]) == ['D', 'A', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6.463, 2, 3.954, 5, 7.145]) == ['A', 'C', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.826]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3, 3.758, 2.783, 2.733, 7.605]) == ['B', 'A', 'B', 'B', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.597]) == ['B-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4, 1.435, 5.824, 1.539, 7.492]) == ['A+', 'C-', 'A', 'C-', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6.423]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.143]) == ['D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.891]) == ['C']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.065, 4, 5.911, 2, 4.43]) == ['A', 'A+', 'A', 'C', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.477, 7, 6.699, 6, 7.022]) == ['A', 'A', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5, 2.658, 2.151, 6.268, 5.527]) == ['A', 'B-', 'C+', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3, 4.558, 2.072, 3.712, 5.809]) == ['B', 'A', 'C+', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3, 4.425, 6.207, 4.631, 3.821]) == ['B', 'A', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.878]) == ['C']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.81]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.976, 4, 1.433, 7, 3.077]) == ['A', 'A+', 'C-', 'A', 'B+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.226]) == ['C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.364]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.946]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4, 3.251, 2.546, 1.98, 3.082]) == ['A+', 'B+', 'B-', 'C', 'B+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.189]) == ['B+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6.618]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.835]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.356]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.612]) == ['A-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.601]) == ['B-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.978]) == ['C']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5, 3.231, 4.961, 5.91, 4.348]) == ['A', 'B+', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([0.5]) == ['D-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.412]) == ['B-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.699]) == ['C-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([9.553, 3, 1.754, 7, 7.712]) == ['A', 'B', 'C', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.909, 4, 3.917, 4, 2.236]) == ['A', 'A+', 'A', 'A+', 'C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5, 4.675, 6.301, 3.928, 5.804]) == ['A', 'A', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.845]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.091]) == ['C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.822]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1, 1.556, 6.189, 3.588, 1.625]) == ['D', 'C-', 'A', 'A-', 'C-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6.134, 3, 6.155, 3, 2.084]) == ['A', 'B', 'A', 'B', 'C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5, 3.839, 3.698, 4.34, 1.955]) == ['A', 'A', 'A-', 'A', 'C']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.813]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.266, 7, 4.913, 2, 1.115]) == ['D+', 'A', 'A', 'C', 'D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.381]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.985]) == ['B']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.314]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([9.317, 8, 3.7, 6, 2.483]) == ['A', 'A', 'A-', 'A', 'B-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.169]) == ['C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.925]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.275]) == ['D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.076]) == ['D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.906]) == ['C']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6, 5.144, 4.622, 7.362, 8.196]) == ['A', 'A', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.778]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.012]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([0.0]) == ['E']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.873, 3, 2.438, 6, 5.365]) == ['A', 'B', 'B-', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.169]) == ['D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.454]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1, 1.181, 4.176, 7.002, 5.356]) == ['D', 'D+', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.412]) == ['C-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.054]) == ['B+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.401]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.559]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.454, 8, 1.163, 2, 3.831]) == ['B-', 'A', 'D+', 'C', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.288]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.516]) == ['A-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.111]) == ['B+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.411]) == ['A-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.415]) == ['C-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.682]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.152, 7, 2.102, 5, 8.879]) == ['A', 'A', 'C+', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6, 2.172, 3.849, 1.272, 6.298]) == ['A', 'C+', 'A', 'D+', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.697]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.86]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.2]) == ['D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6.363]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.886]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.202]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([8.911, 1, 5.562, 6, 1.001]) == ['A', 'D', 'A', 'A', 'D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.442]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.32, 8, 4.236, 1, 5.296]) == ['C-', 'A', 'A', 'D', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.058, 4, 5.349, 2, 4.304]) == ['D+', 'A+', 'A', 'C', 'A']"], "test_case_list": ["assert numerical_letter_grade([3.367]) == ['A-']", "assert numerical_letter_grade([3.709]) == ['A']", "assert numerical_letter_grade([1.501]) == ['C-']", "assert numerical_letter_grade([6.042, 3, 5.935, 5, 5.423]) == ['A', 'B', 'A', 'A', 'A']", "assert numerical_letter_grade([1.511]) == ['C-']", "assert numerical_letter_grade([6, 4.502, 2.77, 6.757, 4.66]) == ['A', 'A', 'B', 'A', 'A']", "assert numerical_letter_grade([5.309, 3, 3.031, 4, 3.721]) == ['A', 'B', 'B+', 'A+', 'A']", "assert numerical_letter_grade([1, 1.067, 5.544, 2.104, 6.994]) == ['D', 'D+', 'A', 'C+', 'A']", "assert numerical_letter_grade([3, 3.93, 1.74, 2.791, 2.576]) == ['B', 'A', 'C', 'B', 'B-']", "assert numerical_letter_grade([4.799]) == ['A']", "assert numerical_letter_grade([4.104]) == ['A']", "assert numerical_letter_grade([6, 2.642, 5.179, 5.542, 7.925]) == ['A', 'B-', 'A', 'A', 'A']", "assert numerical_letter_grade([7.75, 2, 6.21, 4, 7.481]) == ['A', 'C', 'A', 'A+', 'A']", "assert numerical_letter_grade([3, 1.608, 4.584, 1.801, 5.528]) == ['B', 'C-', 'A', 'C', 'A']", "assert numerical_letter_grade([2.259]) == ['C+']", "assert numerical_letter_grade([4, 2.626, 2.824, 7.424, 5.83]) == ['A+', 'B-', 'B', 'A', 'A']", "assert numerical_letter_grade([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.", "assert numerical_letter_grade([4.84, 4, 4.974, 6, 5.319]) == ['A', 'A+', 'A', 'A', 'A']", "assert numerical_letter_grade([2.033]) == ['C+']", "assert numerical_letter_grade([2.516]) == ['B-']", "assert numerical_letter_grade([9.54, 5, 6.671, 1, 5.784]) == ['A', 'A', 'A', 'D', 'A']", "assert numerical_letter_grade([1, 5.293, 4.749, 7.907, 5.656]) == ['D', 'A', 'A', 'A', 'A']", "assert numerical_letter_grade([6.463, 2, 3.954, 5, 7.145]) == ['A', 'C', 'A', 'A', 'A']", "assert numerical_letter_grade([3.826]) == ['A']", "assert numerical_letter_grade([3, 3.758, 2.783, 2.733, 7.605]) == ['B', 'A', 'B', 'B', 'A']", "assert numerical_letter_grade([2.597]) == ['B-']", "assert numerical_letter_grade([4, 1.435, 5.824, 1.539, 7.492]) == ['A+', 'C-', 'A', 'C-', 'A']", "assert numerical_letter_grade([6.423]) == ['A']", "assert numerical_letter_grade([1.143]) == ['D+']", "assert numerical_letter_grade([1.891]) == ['C']", "assert numerical_letter_grade([5.065, 4, 5.911, 2, 4.43]) == ['A', 'A+', 'A', 'C', 'A']", "assert numerical_letter_grade([4.477, 7, 6.699, 6, 7.022]) == ['A', 'A', 'A', 'A', 'A']", "assert numerical_letter_grade([5, 2.658, 2.151, 6.268, 5.527]) == ['A', 'B-', 'C+', 'A', 'A']", "assert numerical_letter_grade([3, 4.558, 2.072, 3.712, 5.809]) == ['B', 'A', 'C+', 'A', 'A']", "assert numerical_letter_grade([3, 4.425, 6.207, 4.631, 3.821]) == ['B', 'A', 'A', 'A', 'A']", "assert numerical_letter_grade([1.878]) == ['C']", "assert numerical_letter_grade([3.81]) == ['A']", "assert numerical_letter_grade([5.976, 4, 1.433, 7, 3.077]) == ['A', 'A+', 'C-', 'A', 'B+']", "assert numerical_letter_grade([2.226]) == ['C+']", "assert numerical_letter_grade([5.364]) == ['A']", "assert numerical_letter_grade([4.946]) == ['A']", "assert numerical_letter_grade([4, 3.251, 2.546, 1.98, 3.082]) == ['A+', 'B+', 'B-', 'C', 'B+']", "assert numerical_letter_grade([3.189]) == ['B+']", "assert numerical_letter_grade([6.618]) == ['A']", "assert numerical_letter_grade([4.835]) == ['A']", "assert numerical_letter_grade([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']", "assert numerical_letter_grade([5.356]) == ['A']", "assert numerical_letter_grade([3.612]) == ['A-']", "assert numerical_letter_grade([2.601]) == ['B-']", "assert numerical_letter_grade([1.978]) == ['C']", "assert numerical_letter_grade([5, 3.231, 4.961, 5.91, 4.348]) == ['A', 'B+', 'A', 'A', 'A']", "assert numerical_letter_grade([0.5]) == ['D-']", "assert numerical_letter_grade([2.412]) == ['B-']", "assert numerical_letter_grade([1.699]) == ['C-']", "assert numerical_letter_grade([9.553, 3, 1.754, 7, 7.712]) == ['A', 'B', 'C', 'A', 'A']", "assert numerical_letter_grade([5.909, 4, 3.917, 4, 2.236]) == ['A', 'A+', 'A', 'A+', 'C+']", "assert numerical_letter_grade([5, 4.675, 6.301, 3.928, 5.804]) == ['A', 'A', 'A', 'A', 'A']", "assert numerical_letter_grade([4.845]) == ['A']", "assert numerical_letter_grade([2.091]) == ['C+']", "assert numerical_letter_grade([4.822]) == ['A']", "assert numerical_letter_grade([1, 1.556, 6.189, 3.588, 1.625]) == ['D', 'C-', 'A', 'A-', 'C-']", "assert numerical_letter_grade([6.134, 3, 6.155, 3, 2.084]) == ['A', 'B', 'A', 'B', 'C+']", "assert numerical_letter_grade([5, 3.839, 3.698, 4.34, 1.955]) == ['A', 'A', 'A-', 'A', 'C']", "assert numerical_letter_grade([4.813]) == ['A']", "assert numerical_letter_grade([1.266, 7, 4.913, 2, 1.115]) == ['D+', 'A', 'A', 'C', 'D+']", "assert numerical_letter_grade([4.381]) == ['A']", "assert numerical_letter_grade([2.985]) == ['B']", "assert numerical_letter_grade([4.314]) == ['A']", "assert numerical_letter_grade([9.317, 8, 3.7, 6, 2.483]) == ['A', 'A', 'A-', 'A', 'B-']", "assert numerical_letter_grade([2.169]) == ['C+']", "assert numerical_letter_grade([3.925]) == ['A']", "assert numerical_letter_grade([1.275]) == ['D+']", "assert numerical_letter_grade([1.076]) == ['D+']", "assert numerical_letter_grade([1.906]) == ['C']", "assert numerical_letter_grade([6, 5.144, 4.622, 7.362, 8.196]) == ['A', 'A', 'A', 'A', 'A']", "assert numerical_letter_grade([5.778]) == ['A']", "assert numerical_letter_grade([5.012]) == ['A']", "assert numerical_letter_grade([0.0]) == ['E']", "assert numerical_letter_grade([4.873, 3, 2.438, 6, 5.365]) == ['A', 'B', 'B-', 'A', 'A']", "assert numerical_letter_grade([1.169]) == ['D+']", "assert numerical_letter_grade([4.454]) == ['A']", "assert numerical_letter_grade([1, 1.181, 4.176, 7.002, 5.356]) == ['D', 'D+', 'A', 'A', 'A']", "assert numerical_letter_grade([1.412]) == ['C-']", "assert numerical_letter_grade([3.054]) == ['B+']", "assert numerical_letter_grade([5.401]) == ['A']", "assert numerical_letter_grade([5.559]) == ['A']", "assert numerical_letter_grade([2.454, 8, 1.163, 2, 3.831]) == ['B-', 'A', 'D+', 'C', 'A']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([5.288]) == ['A']", "assert numerical_letter_grade([3.516]) == ['A-']", "assert numerical_letter_grade([3.111]) == ['B+']", "assert numerical_letter_grade([3.411]) == ['A-']", "assert numerical_letter_grade([1.415]) == ['C-']", "assert numerical_letter_grade([4.682]) == ['A']", "assert numerical_letter_grade([4.152, 7, 2.102, 5, 8.879]) == ['A', 'A', 'C+', 'A', 'A']", "assert numerical_letter_grade([6, 2.172, 3.849, 1.272, 6.298]) == ['A', 'C+', 'A', 'D+', 'A']", "assert numerical_letter_grade([4.697]) == ['A']", "assert numerical_letter_grade([4.86]) == ['A']", "assert numerical_letter_grade([1.2]) == ['D+']", "assert numerical_letter_grade([6.363]) == ['A']", "assert numerical_letter_grade([5.886]) == ['A']", "assert numerical_letter_grade([4.202]) == ['A']", "assert numerical_letter_grade([8.911, 1, 5.562, 6, 1.001]) == ['A', 'D', 'A', 'A', 'D+']", "assert numerical_letter_grade([5.442]) == ['A']", "assert numerical_letter_grade([1.32, 8, 4.236, 1, 5.296]) == ['C-', 'A', 'A', 'D', 'A']", "assert numerical_letter_grade([1.058, 4, 5.349, 2, 4.304]) == ['D+', 'A+', 'A', 'C', 'A']"], "nl": "It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    ", "func": "def numerical_letter_grade(grades):", "examples": "Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    ", "repair_prompt": ["def numerical_letter_grade(grades):\t\n'''It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading, but the only problem is, she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table: GPA       |    Letter grade 4.0                A+ > 3.7                A > 3.3                A- > 3.0                B+ > 2.7                B > 2.3                B- > 2.0                C+ > 1.7                C > 1.3                C- > 1.0                D+ > 0.7                D > 0.0                D- 0.0                E\nExample:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    '''", "```python\ndef numerical_letter_grade(grades):\t\n    '''It is the last week of the semester and the teacher has to give the grades to students. She has to make sure all students receive their rightful grades for their hard work. The teacher has been making her own algorithm for grading, but the only problem is, she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table: GPA       |    Letter grade 4.0                A+ > 3.7                A > 3.3                A- > 3.0                B+ > 2.7                B > 2.3                B- > 2.0                C+ > 1.7                C > 1.3                C- > 1.0                D+ > 0.7                D > 0.0                D- 0.0                E\nExample:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    '''\n```", "```python\ndef numerical_letter_grade(grades):\t\n'''It is the last week of the semester and the teacher has to give the grades to students, but the only problem is, she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table: GPA       |    Letter grade 4.0                A+ > 3.7                A > 3.3                A- > 3.0                B+ > 2.7                B > 2.3                B- > 2.0                C+ > 1.7                C > 1.3                C- > 1.0                D+ > 0.7                D > 0.0                D- 0.0                E\nExample:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    '''\n```"], "completions": ["from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPAs to a list of letter grades based on a predefined scale.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of corresponding letter grades.\n    \"\"\"\n    # Define the mapping of GPA ranges to letter grades\n    grade_scale = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n    }\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Determine the corresponding letter grade using conditional statements\n        if gpa >= 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')  # Handle edge case for GPA of exactly 0.0\n\n    # Return the result list\n    return result\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPAs to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the input GPAs.\n    \"\"\"\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Determine the corresponding letter grade for each GPA based on the given table\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    # Return the list of letter grades\n    return letter_grades\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPA values to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the GPA values.\n    \"\"\"\n    # Define the conversion table for GPA to letter grades\n    conversion_table = [\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-')\n    ]\n\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Iterate through each GPA in the input list\n    for gpa in grades:\n        # Check for the highest grade 'A+'\n        if gpa > 3.7:\n            letter_grades.append('A+')\n        else:\n            # Map each GPA to its corresponding letter grade based on the conversion table\n            for threshold, grade in conversion_table:\n                if gpa > threshold:\n                    letter_grades.append(grade)\n                    break\n            else:\n                # If GPA is exactly 0.0, assign 'E'\n                letter_grades.append('E')\n\n    # Return the list of letter grades\n    return letter_grades\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPAs to their corresponding letter grades.\n\n    Parameters:\n    grades (list[float]): A list of GPA values.\n\n    Returns:\n    list[str]: A list of letter grades corresponding to the input GPAs.\n    \"\"\"\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Determine the letter grade based on the GPA thresholds\n        if gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    # Return the list of letter grades\n    return letter_grades\n\n# Example usage:\n# grades = [4.0, 3.7, 2.5, 0.0]\n# print(numerical_letter_grade(grades))\n# Output: ['A+', 'A-', 'B', 'E']\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPAs to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the input GPAs.\n    \"\"\"\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPAs to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the input GPAs.\n    \"\"\"\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        elif gpa == 0.0:\n            letter_grades.append('E')\n        else:\n            raise ValueError(f\"Invalid GPA value: {gpa}\")\n\n    return letter_grades\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPA values to their corresponding letter grades.\n\n    Parameters:\n    grades (list[float]): A list of GPA values.\n\n    Returns:\n    list[str]: A list of letter grades corresponding to the GPA values.\n    \"\"\"\n    # Mapping of GPA ranges to letter grades\n    gpa_to_letter = {\n        (4.0, float('inf')): 'A+',\n        (3.7, 4.0): 'A',\n        (3.3, 3.7): 'A-',\n        (3.0, 3.3): 'B+',\n        (2.7, 3.0): 'B',\n        (2.3, 2.7): 'B-',\n        (2.0, 2.3): 'C+',\n        (1.7, 2.0): 'C',\n        (1.3, 1.7): 'C-',\n        (1.0, 1.3): 'D+',\n        (0.7, 1.0): 'D',\n        (0.0, 0.7): 'D-',\n        (-float('inf'), 0.0): 'E'\n    }\n\n    result = []\n    for gpa in grades:\n        if gpa < 0 or gpa > 4:\n            result.append('Invalid GPA')\n        else:\n            for range, letter in gpa_to_letter.items():\n                if range[0] <= gpa < range[1]:\n                    result.append(letter)\n                    break\n    return result\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPAs to a list of letter grades based on a predefined scale.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of corresponding letter grades.\n    \"\"\"\n    # Define the mapping of GPA ranges to letter grades\n    grade_scale = [\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-')\n    ]\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over each GPA in the grades list\n    for gpa in grades:\n        # Determine the letter grade using conditional statements\n        if gpa > 3.7:\n            result.append('A+')\n        else:\n            for threshold, letter in grade_scale:\n                if gpa > threshold:\n                    result.append(letter)\n                    break\n            else:\n                result.append('E')  # If GPA is 0.0, append 'E'\n\n    # Return the list of letter grades\n    return result\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPA values to corresponding letter grades.\n\n    Parameters:\n    grades (list[float]): A list of GPA values.\n\n    Returns:\n    list[str]: A list of letter grades corresponding to the GPA values.\n    \"\"\"\n    # Define the mapping of GPA ranges to letter grades\n    gpa_to_letter = [\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-')\n    ]\n\n    # Initialize the result list\n    letter_grades = []\n\n    # Iterate through each GPA in the input list\n    for gpa in grades:\n        # Determine the letter grade for the current GPA\n        for threshold, letter in gpa_to_letter:\n            if gpa >= threshold:\n                letter_grades.append(letter)\n                break\n        else:\n            # If GPA is exactly 0.0, assign 'E'\n            letter_grades.append('E')\n\n    return letter_grades\n\n# Example usage:\n# grades = [4.0, 3.7, 3.3, 3.0, 2.7]\n# print(numerical_letter_grade(grades))  # Output: ['A+', 'A', 'A-', 'B+', 'B']\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPA scores to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA scores.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the GPA scores.\n    \"\"\"\n    # Define the mapping of GPA to letter grades\n    grade_mapping = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-')\n    ]\n\n    # Initialize an empty list to store letter grades\n    letter_grades = []\n\n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Check for invalid input\n        if gpa < 0.0 or gpa > 4.0:\n            raise ValueError(\"GPA must be between 0.0 and 4.0\")\n\n        # Determine the letter grade using the predefined scale\n        for boundary, letter in grade_mapping:\n            if gpa >= boundary:\n                letter_grades.append(letter)\n                break\n        else:\n            # If no valid grade is found, assign 'E' for error\n            letter_grades.append('E')\n\n    # Return the list of letter grades\n    return letter_grades\n"], "plans": ["requirement analysis:\nThe function should take a list of GPAs and return a list of corresponding letter grades based on a predefined scale. It should handle edge cases such as exact GPA values at the boundary of two grades and ensure the output is in the same order as the input.\nrequirement pool:\n- Implement the main function to convert GPAs to letter grades\n- Ensure the function handles edge cases correctly\n- Provide clear documentation and examples\n- Optimize for performance with large lists\n- Include unit tests for validation\nWe will implement a simple function that maps GPA values to letter grades using a predefined scale. The function will handle edge cases by using conditional statements to ensure that GPAs exactly on the boundary are correctly assigned to the higher grade. We will use Python's built-in capabilities without any additional libraries, as the task is straightforward and does not require complex data manipulation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA': Grade Point Average, a numerical representation of a student's academic performance.\n    'Letter grade': A symbolic representation of a student's performance, typically ranging from A+ to E.\n\n# [phrase showing quantity relationship]\n    '> 3.7': GPA greater than 3.7 corresponds to an 'A' grade.\n    '> 3.3': GPA greater than 3.3 corresponds to an 'A-' grade.\n    '> 3.0': GPA greater than 3.0 corresponds to a 'B+' grade.\n    '> 2.7': GPA greater than 2.7 corresponds to a 'B' grade.\n    '> 2.3': GPA greater than 2.3 corresponds to a 'B-' grade.\n    '> 2.0': GPA greater than 2.0 corresponds to a 'C+' grade.\n    '> 1.7': GPA greater than 1.7 corresponds to a 'C' grade.\n    '> 1.3': GPA greater than 1.3 corresponds to a 'C-' grade.\n    '> 1.0': GPA greater than 1.0 corresponds to a 'D+' grade.\n    '> 0.7': GPA greater than 0.7 corresponds to a 'D' grade.\n    '> 0.0': GPA greater than 0.0 corresponds to a 'D-' grade.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Define a function `numerical_letter_grade(grades)`.\n    - Create a list or dictionary mapping GPA ranges to letter grades.\n    - Iterate over each GPA in the input list.\n    - Use conditional statements to determine the corresponding letter grade for each GPA based on the predefined scale.\n    - Append the letter grade to a result list.\n    - Return the result list.\n\n# [edge case] \n    numerical_letter_grade([4.0]) = ['A+']\n    Explanation: A GPA of exactly 4.0 should map to an 'A+' grade.\n    \n    numerical_letter_grade([0.0]) = ['E']\n    Explanation: A GPA of exactly 0.0 should map to an 'E' grade.\n\n    numerical_letter_grade([3.7]) = ['A-']\n    Explanation: A GPA of exactly 3.7 should map to an 'A-' grade, as it is not greater than 3.7.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases, as the original logic using conditional statements will correctly handle GPAs on the boundary by assigning them to the appropriate lower grade if they are not strictly greater than the threshold for the higher grade.\n", "requirement analysis:\nThe function needs to accurately map GPA values to their corresponding letter grades based on the provided scale. It should handle edge cases such as exact GPA values at the boundary of two grades and provide a clear output format.\nrequirement pool:\n- Implement the main function to convert GPA to letter grades.\n- Ensure the function handles edge cases and invalid inputs.\n- Provide documentation and examples for users.\n- Optimize the function for performance with large input lists.\n- Consider additional grading scales for future versions.\nWe will implement a simple function that maps GPA values to their corresponding letter grades using a series of conditional checks. The function will handle edge cases by using inclusive and exclusive comparisons where necessary. We will use Python's built-in capabilities without any additional libraries, as the task is straightforward and does not require complex data manipulation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA': Grade Point Average, a numerical representation of a student's academic performance.\n    'Letter grade': A symbolic representation of a student's performance, typically ranging from A+ to E.\n\n# [phrase showing quantity relationship]\n    '> 3.7': GPA greater than 3.7 corresponds to an 'A' grade.\n    '> 3.3': GPA greater than 3.3 corresponds to an 'A-' grade.\n    '> 3.0': GPA greater than 3.0 corresponds to a 'B+' grade.\n    '> 2.7': GPA greater than 2.7 corresponds to a 'B' grade.\n    '> 2.3': GPA greater than 2.3 corresponds to a 'B-' grade.\n    '> 2.0': GPA greater than 2.0 corresponds to a 'C+' grade.\n    '> 1.7': GPA greater than 1.7 corresponds to a 'C' grade.\n    '> 1.3': GPA greater than 1.3 corresponds to a 'C-' grade.\n    '> 1.0': GPA greater than 1.0 corresponds to a 'D+' grade.\n    '> 0.7': GPA greater than 0.7 corresponds to a 'D' grade.\n    '> 0.0': GPA greater than 0.0 corresponds to a 'D-' grade.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Initialize an empty list to store the letter grades.\n    - Iterate over each GPA in the input list.\n    - Use conditional statements to determine the corresponding letter grade for each GPA based on the given table.\n    - Append the determined letter grade to the list.\n    - Return the list of letter grades.\n\n# [edge case] \n    numerical_letter_grade([4.0]) = ['A+']\n    Explanation: A GPA of exactly 4.0 corresponds directly to an 'A+' grade.\n    \n    numerical_letter_grade([0.0]) = ['E']\n    Explanation: A GPA of exactly 0.0 corresponds directly to an 'E' grade.\n\n    numerical_letter_grade([3.7]) = ['A-']\n    Explanation: A GPA of exactly 3.7 is greater than 3.3 but not greater than 3.7, so it corresponds to an 'A-' grade.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the original logic using conditional checks will cover these scenarios effectively.\n", "requirement analysis:\nThe function needs to accurately map GPA values to letter grades based on a predefined table. It should handle edge cases such as exact GPA values at the boundary of grade categories. The function should be efficient and easy to use, with clear documentation for users.\nrequirement pool:\n- Implement the GPA to letter grade conversion function.\n- Create a user-friendly interface for inputting GPAs.\n- Ensure the function handles edge cases correctly.\n- Optimize the function for large datasets.\n- Provide detailed documentation and examples.\nWe will implement a simple Python function to convert GPA values to letter grades based on the provided conversion table. The function will handle edge cases by using conditional statements to ensure accurate mapping. We will use Python's built-in capabilities without any additional libraries, as the task is straightforward and does not require complex data processing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA': Grade Point Average, a numerical representation of a student's academic performance.\n    'Letter grade': A symbolic representation of a student's performance, typically ranging from A+ to E.\n\n# [phrase showing quantity relationship]\n    '> 3.7': GPA greater than 3.7 corresponds to letter grade 'A'.\n    '> 3.3': GPA greater than 3.3 corresponds to letter grade 'A-'.\n    '> 3.0': GPA greater than 3.0 corresponds to letter grade 'B+'.\n    '> 2.7': GPA greater than 2.7 corresponds to letter grade 'B'.\n    '> 2.3': GPA greater than 2.3 corresponds to letter grade 'B-'.\n    '> 2.0': GPA greater than 2.0 corresponds to letter grade 'C+'.\n    '> 1.7': GPA greater than 1.7 corresponds to letter grade 'C'.\n    '> 1.3': GPA greater than 1.3 corresponds to letter grade 'C-'.\n    '> 1.0': GPA greater than 1.0 corresponds to letter grade 'D+'.\n    '> 0.7': GPA greater than 0.7 corresponds to letter grade 'D'.\n    '> 0.0': GPA greater than 0.0 corresponds to letter grade 'D-'.\n    '0.0': GPA equal to 0.0 corresponds to letter grade 'E'.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Initialize an empty list to store the letter grades.\n    - Iterate through each GPA in the input list.\n    - Use conditional statements to map each GPA to its corresponding letter grade based on the provided table.\n    - Append the mapped letter grade to the list.\n    - Return the list of letter grades.\n\n# [edge case] \n    numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7]) = ['A+', 'A', 'A-', 'B+', 'B']\n    Explanation: Each GPA is mapped directly according to the table without ambiguity.\n    \n    numerical_letter_grade([0.0, 0.5, 1.5, 2.5, 3.5]) = ['E', 'D-', 'C-', 'B-', 'A-']\n    Explanation: Each GPA is mapped directly according to the table without ambiguity.\n    \n    numerical_letter_grade([4.0, 4.0, 4.0]) = ['A+', 'A+', 'A+']\n    Explanation: All GPAs are at the highest level, resulting in the highest letter grade.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the conditional statements mapping GPAs to letter grades directly according to the table provided in the requirement.\n", "requirement analysis:\nThe function should accurately convert GPAs to letter grades based on the provided scale. It should handle edge cases such as exact GPA values and ensure performance efficiency for large input lists.\nrequirement pool:\n- Implement GPA to letter grade conversion logic\n- Design a user-friendly interface for input and output\n- Optimize the function for handling large datasets\n- Include error handling for invalid GPA values\n- Provide documentation for the grading scale\nWe will implement a simple function to convert GPAs to letter grades using a predefined mapping. The function will iterate over the list of GPAs and use conditional statements to determine the corresponding letter grade. We will use Python's built-in capabilities to handle the conversion efficiently, ensuring the function can process large datasets quickly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA': Grade Point Average, a numerical representation of a student's average performance across all their classes.\n    'Letter grade': A standardized way of representing a student's performance, typically ranging from A+ to E.\n\n# [phrase showing quantity relationship]\n    '> 3.7': Indicates that a GPA greater than 3.7 corresponds to an 'A' grade.\n    '> 3.3': Indicates that a GPA greater than 3.3 corresponds to an 'A-' grade.\n    '> 3.0': Indicates that a GPA greater than 3.0 corresponds to a 'B+' grade.\n    '> 2.7': Indicates that a GPA greater than 2.7 corresponds to a 'B' grade.\n    '> 2.3': Indicates that a GPA greater than 2.3 corresponds to a 'B-' grade.\n    '> 2.0': Indicates that a GPA greater than 2.0 corresponds to a 'C+' grade.\n    '> 1.7': Indicates that a GPA greater than 1.7 corresponds to a 'C' grade.\n    '> 1.3': Indicates that a GPA greater than 1.3 corresponds to a 'C-' grade.\n    '> 1.0': Indicates that a GPA greater than 1.0 corresponds to a 'D+' grade.\n    '> 0.7': Indicates that a GPA greater than 0.7 corresponds to a 'D' grade.\n    '> 0.0': Indicates that a GPA greater than 0.0 corresponds to a 'D-' grade.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Create a function `numerical_letter_grade` that takes a list of GPAs as input.\n    - Initialize an empty list `letter_grades` to store the corresponding letter grades.\n    - Iterate over each GPA in the input list:\n        - Use conditional statements to determine the letter grade based on the given GPA thresholds.\n        - Append the corresponding letter grade to the `letter_grades` list.\n    - Return the `letter_grades` list.\n\n# [edge case] \n    numerical_letter_grade([4.0]) = ['A+']\n    Explanation: A GPA of exactly 4.0 corresponds to an 'A+' grade.\n    \n    numerical_letter_grade([0.0]) = ['E']\n    Explanation: A GPA of exactly 0.0 corresponds to an 'E' grade.\n\n    numerical_letter_grade([3.7]) = ['A-']\n    Explanation: A GPA of exactly 3.7 is greater than 3.3 but not greater than 3.7, so it corresponds to an 'A-' grade.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases, as the original logic using conditional statements will correctly handle these scenarios based on the given thresholds.\n", "requirement analysis:\nThe function should accurately map GPAs to letter grades based on the provided scale. It should handle edge cases, such as exact GPA values at the boundary of two grades, and ensure the output is in the same order as the input.\nrequirement pool:\n- Implement GPA to letter grade conversion function\n- Create a user-friendly interface for input\n- Ensure the function handles edge cases correctly\n- Optimize the function for performance\n- Provide detailed documentation for users\nWe will implement a simple Python function to convert GPAs to letter grades based on the provided scale. The function will handle edge cases by using conditional statements to ensure accurate mapping. We will use Python's built-in capabilities without any additional libraries, as the task is straightforward and does not require complex data manipulation or external dependencies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA': Grade Point Average, a numerical representation of a student's academic performance.\n    'Letter grade': A symbolic representation of a student's performance, typically ranging from A+ to E.\n\n# [phrase showing quantity relationship]\n    '> 3.7': GPA greater than 3.7 corresponds to an 'A' grade.\n    '> 3.3': GPA greater than 3.3 corresponds to an 'A-' grade.\n    '> 3.0': GPA greater than 3.0 corresponds to a 'B+' grade.\n    '> 2.7': GPA greater than 2.7 corresponds to a 'B' grade.\n    '> 2.3': GPA greater than 2.3 corresponds to a 'B-' grade.\n    '> 2.0': GPA greater than 2.0 corresponds to a 'C+' grade.\n    '> 1.7': GPA greater than 1.7 corresponds to a 'C' grade.\n    '> 1.3': GPA greater than 1.3 corresponds to a 'C-' grade.\n    '> 1.0': GPA greater than 1.0 corresponds to a 'D+' grade.\n    '> 0.7': GPA greater than 0.7 corresponds to a 'D' grade.\n    '> 0.0': GPA greater than 0.0 corresponds to a 'D-' grade.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Define a function `numerical_letter_grade(grades)` that takes a list of GPAs as input.\n    - Initialize an empty list `letter_grades` to store the corresponding letter grades.\n    - Iterate over each GPA in the input list:\n        - Use conditional statements to determine the letter grade based on the provided scale.\n        - Append the determined letter grade to the `letter_grades` list.\n    - Return the `letter_grades` list.\n\n# [edge case] \n    numerical_letter_grade([4.0, 0.0]) = ['A+', 'E']\n    Explanation: A GPA of 4.0 corresponds to an 'A+' and a GPA of 0.0 corresponds to an 'E'.\n    \n    numerical_letter_grade([3.7, 2.3, 1.0]) = ['A', 'B-', 'D+']\n    Explanation: A GPA of 3.7 corresponds to an 'A', 2.3 corresponds to a 'B-', and 1.0 corresponds to a 'D+'.\n\n    numerical_letter_grade([2.9, 1.5, 0.5]) = ['B+', 'C-', 'D-']\n    Explanation: A GPA of 2.9 corresponds to a 'B+', 1.5 corresponds to a 'C-', and 0.5 corresponds to a 'D-'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the conditional statements cover all possible GPA values and their corresponding letter grades based on the provided scale.\n\n", "requirement analysis:\nThe function should accurately map GPAs to letter grades based on the provided scale. It should handle edge cases such as exact GPA values and ensure performance efficiency for large datasets.\nrequirement pool:\n- Implement GPA to letter grade conversion logic\n- Design a user-friendly interface for input\n- Optimize performance for handling large lists\n- Include error handling for invalid inputs\n- Provide documentation for usage\nWe will implement a simple function to convert GPAs to letter grades based on the provided scale. The function will use a series of conditional checks to map each GPA to its corresponding letter grade. We will ensure the function is efficient to handle large lists by using a straightforward iteration over the input list. We will also include basic error handling to manage invalid inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: GPA stands for Grade Point Average, which is a standard way of measuring academic achievement in the U.S. It is typically on a scale from 0.0 to 4.0.\n\n    'Letter grade'\n    Explanation: Letter grades are a way of representing academic performance, typically ranging from A+ to E, with A+ being the highest and E being the lowest.\n\n# [phrase showing quantity relationship]\n    '> 3.7': means that any GPA greater than 3.7 will be assigned an 'A'.\n    '> 3.3': means that any GPA greater than 3.3 will be assigned an 'A-'.\n    '> 3.0': means that any GPA greater than 3.0 will be assigned a 'B+'.\n    '> 2.7': means that any GPA greater than 2.7 will be assigned a 'B'.\n    '> 2.3': means that any GPA greater than 2.3 will be assigned a 'B-'.\n    '> 2.0': means that any GPA greater than 2.0 will be assigned a 'C+'.\n    '> 1.7': means that any GPA greater than 1.7 will be assigned a 'C'.\n    '> 1.3': means that any GPA greater than 1.3 will be assigned a 'C-'.\n    '> 1.0': means that any GPA greater than 1.0 will be assigned a 'D+'.\n    '> 0.7': means that any GPA greater than 0.7 will be assigned a 'D'.\n    '> 0.0': means that any GPA greater than 0.0 will be assigned a 'D-'.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Define a function `numerical_letter_grade(grades)`.\n2. Create an empty list `letter_grades` to store the results.\n3. Iterate over each `gpa` in the `grades` list.\n4. Use conditional statements to check the range of each `gpa` and append the corresponding letter grade to `letter_grades`.\n5. Return the `letter_grades` list.\n\n# [edge case] \n    numerical_letter_grade([4.0]) = ['A+']\n    Explanation: A GPA of exactly 4.0 corresponds to an 'A+'.\n\n    numerical_letter_grade([0.0]) = ['E']\n    Explanation: A GPA of exactly 0.0 corresponds to an 'E'.\n\n    numerical_letter_grade([3.7]) = ['A']\n    Explanation: A GPA of exactly 3.7 is greater than 3.3 but not greater than 3.7, so it corresponds to an 'A'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the original logic with conditional checks covers all possible scenarios based on the given grading scale.\n\n", "requirement analysis:\nThe function should accurately map GPA values to their corresponding letter grades based on the provided table. It should handle a list of GPAs and return a list of letter grades. The function must be efficient to handle large datasets and user-friendly for easy integration into existing systems.\nrequirement pool:\n- Implement GPA to letter grade conversion function\n- Design a user-friendly interface for input\n- Optimize performance for large datasets\n- Provide detailed error messages for invalid inputs\n- Include documentation for integration\nWe will implement a simple function to convert GPA values to letter grades using a predefined mapping table. The function will iterate over a list of GPAs and map each GPA to its corresponding letter grade. We will use Python's built-in capabilities to handle the list processing efficiently. The function will also include basic validation to handle invalid GPA values, such as negative numbers or values above 4.0, by returning an error message or skipping those values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA': Grade Point Average, a numerical representation of a student's academic performance.\n    'Letter grade': A symbolic representation of a student's performance, typically ranging from A+ to E.\n\n# [phrase showing quantity relationship]\n    '> 3.7': GPA greater than 3.7 corresponds to an 'A' grade.\n    '> 3.3': GPA greater than 3.3 corresponds to an 'A-' grade.\n    '> 3.0': GPA greater than 3.0 corresponds to a 'B+' grade.\n    '> 2.7': GPA greater than 2.7 corresponds to a 'B' grade.\n    '> 2.3': GPA greater than 2.3 corresponds to a 'B-' grade.\n    '> 2.0': GPA greater than 2.0 corresponds to a 'C+' grade.\n    '> 1.7': GPA greater than 1.7 corresponds to a 'C' grade.\n    '> 1.3': GPA greater than 1.3 corresponds to a 'C-' grade.\n    '> 1.0': GPA greater than 1.0 corresponds to a 'D+' grade.\n    '> 0.7': GPA greater than 0.7 corresponds to a 'D' grade.\n    '> 0.0': GPA greater than 0.0 corresponds to a 'D-' grade.\n    '0.0': GPA equal to 0.0 corresponds to an 'E' grade.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Create a mapping of GPA ranges to letter grades.\n    - Iterate over the list of GPAs.\n    - For each GPA, determine the corresponding letter grade using the mapping.\n    - Handle invalid GPAs by either skipping them or returning an error message.\n\n# [edge case] \n    numerical_letter_grade([4.5, -1, 2.5]) = ['Invalid GPA', 'Invalid GPA', 'B-']\n    Explanation: GPA values above 4.0 or negative are invalid and should be handled accordingly.\n    \n    numerical_letter_grade([0.0, 4.0]) = ['E', 'A+']\n    Explanation: The edge case where the lowest and highest possible GPAs are present.\n\n    numerical_letter_grade([3.7, 3.3, 3.0]) = ['A', 'A-', 'B+']\n    Explanation: Testing boundary values for letter grades.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def numerical_letter_grade(grades):\n            gpa_to_letter = {\n                (4.0, float('inf')): 'A+',\n                (3.7, 4.0): 'A',\n                (3.3, 3.7): 'A-',\n                (3.0, 3.3): 'B+',\n                (2.7, 3.0): 'B',\n                (2.3, 2.7): 'B-',\n                (2.0, 2.3): 'C+',\n                (1.7, 2.0): 'C',\n                (1.3, 1.7): 'C-',\n                (1.0, 1.3): 'D+',\n                (0.7, 1.0): 'D',\n                (0.0, 0.7): 'D-',\n                (-float('inf'), 0.0): 'E'\n            }\n            result = []\n            for gpa in grades:\n                if gpa < 0 or gpa > 4:\n                    result.append('Invalid GPA')\n                else:\n                    for range, letter in gpa_to_letter.items():\n                        if range[0] <= gpa < range[1]:\n                            result.append(letter)\n                            break\n            return result\n", "requirement analysis:\nThe function should take a list of GPAs and return a corresponding list of letter grades based on a predefined scale. The conversion should be accurate and the function should handle edge cases, such as GPAs exactly on the boundary between two grades.\nrequirement pool:\n- Implement the GPA to letter grade conversion function\n- Ensure the function handles edge cases correctly\n- Provide clear documentation and examples\n- Optimize the function for performance\n- Include additional grading scales if needed\nWe will implement a simple function that maps GPA values to letter grades using a predefined scale. The function will iterate over the list of GPAs and use conditional statements to determine the corresponding letter grade for each GPA. This approach ensures clarity and ease of use, aligning with the product goals of accuracy and simplicity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA': Grade Point Average, a numerical representation of a student's academic performance.\n    'Letter grade': A symbolic representation of a student's performance, typically ranging from A+ to E.\n\n# [phrase showing quantity relationship]\n    '> 3.7': GPA greater than 3.7 corresponds to an 'A' grade.\n    '> 3.3': GPA greater than 3.3 corresponds to an 'A-' grade.\n    '> 3.0': GPA greater than 3.0 corresponds to a 'B+' grade.\n    '> 2.7': GPA greater than 2.7 corresponds to a 'B' grade.\n    '> 2.3': GPA greater than 2.3 corresponds to a 'B-' grade.\n    '> 2.0': GPA greater than 2.0 corresponds to a 'C+' grade.\n    '> 1.7': GPA greater than 1.7 corresponds to a 'C' grade.\n    '> 1.3': GPA greater than 1.3 corresponds to a 'C-' grade.\n    '> 1.0': GPA greater than 1.0 corresponds to a 'D+' grade.\n    '> 0.7': GPA greater than 0.7 corresponds to a 'D' grade.\n    '> 0.0': GPA greater than 0.0 corresponds to a 'D-' grade.\n    '0.0': GPA equal to 0.0 corresponds to an 'E' grade.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Iterate over the list of GPAs.\n    - For each GPA, use conditional statements to determine the corresponding letter grade based on the predefined scale.\n    - Append the letter grade to the result list.\n    - Return the result list.\n\n# [edge case] \n    numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7]) = ['A+', 'A', 'A-', 'B+', 'B']\n    Explanation: Each GPA is at the boundary of its respective letter grade category.\n    \n    numerical_letter_grade([0.0, 0.1, 0.6, 0.7, 1.0]) = ['E', 'D-', 'D-', 'D', 'D+']\n    Explanation: The GPAs are at the lower end of the scale, testing the transition from E to D- and D+.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the original logic using conditional statements covers all possible GPA values and their corresponding letter grades effectively.\n", "requirement analysis:\nThe function needs to accurately map GPA values to letter grades based on the provided scale. It should handle edge cases such as exact GPA values and efficiently process large lists of grades.\nrequirement pool:\n- Implement GPA to letter grade conversion logic\n- Design a user-friendly interface for grade input\n- Optimize performance for processing large lists\n- Include error handling for invalid GPA values\n- Provide detailed documentation for users\nWe will implement a simple function to convert GPA values to letter grades using a predefined mapping. The function will handle edge cases such as exact GPA values and efficiently process large lists of grades. We will use Python's built-in capabilities to ensure optimal performance without the need for additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA': Grade Point Average, a numerical representation of a student's academic performance.\n    'Letter grade': A symbolic representation of a student's academic performance, typically ranging from A+ to E.\n\n# [phrase showing quantity relationship]\n    '> 3.7': GPA greater than 3.7 corresponds to a letter grade of 'A'.\n    '> 3.3': GPA greater than 3.3 corresponds to a letter grade of 'A-'.\n    '> 3.0': GPA greater than 3.0 corresponds to a letter grade of 'B+'.\n    '> 2.7': GPA greater than 2.7 corresponds to a letter grade of 'B'.\n    '> 2.3': GPA greater than 2.3 corresponds to a letter grade of 'B-'.\n    '> 2.0': GPA greater than 2.0 corresponds to a letter grade of 'C+'.\n    '> 1.7': GPA greater than 1.7 corresponds to a letter grade of 'C'.\n    '> 1.3': GPA greater than 1.3 corresponds to a letter grade of 'C-'.\n    '> 1.0': GPA greater than 1.0 corresponds to a letter grade of 'D+'.\n    '> 0.7': GPA greater than 0.7 corresponds to a letter grade of 'D'.\n    '> 0.0': GPA greater than 0.0 corresponds to a letter grade of 'D-'.\n    '0.0': GPA equal to 0.0 corresponds to a letter grade of 'E'.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Create a mapping of GPA ranges to letter grades.\n    - Iterate through the list of GPAs.\n    - For each GPA, determine the corresponding letter grade using the mapping.\n    - Return the list of letter grades.\n\n# [edge case] \n    numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7]) = ['A+', 'A', 'A-', 'B+', 'B']\n    Explanation: Each GPA falls exactly on the boundary or within the range for its respective letter grade.\n    \n    numerical_letter_grade([0.0, 0.1, 0.5, 0.9]) = ['E', 'D-', 'D-', 'D']\n    Explanation: GPAs less than or equal to 0.0 are graded as 'E', and those slightly above are graded as 'D-' or 'D'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the mapping logic inherently handles all possible GPA values within the specified ranges.\n\n", "requirement analysis:\nThe function needs to accurately map GPA scores to letter grades based on a predefined scale. It should handle edge cases such as exact boundary values and provide a user-friendly interface for input and output.\nrequirement pool:\n- Implement the main conversion logic for GPA to letter grades.\n- Ensure the function handles edge cases and boundary values.\n- Optimize the function for performance and efficiency.\n- Provide detailed documentation and examples for users.\n- Include error handling for invalid inputs.\nWe will implement a simple function that maps GPA scores to letter grades using a predefined scale. The function will handle edge cases by using conditional statements to check for exact boundary values. We will ensure the function is efficient by using a straightforward if-elif-else structure. The function will also include basic error handling to manage invalid inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: GPA stands for Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically on a scale from 0.0 to 4.0.\n\n    'Letter grade'\n    Explanation: Letter grades are a way of representing academic performance using letters, such as A+, A, B, etc., which correspond to specific GPA ranges.\n\n# [phrase showing quantity relationship]\n    '> 3.7': means GPA greater than 3.7 corresponds to an 'A' grade.\n    '> 3.3': means GPA greater than 3.3 corresponds to an 'A-' grade.\n    '> 3.0': means GPA greater than 3.0 corresponds to a 'B+' grade.\n    '> 2.7': means GPA greater than 2.7 corresponds to a 'B' grade.\n    '> 2.3': means GPA greater than 2.3 corresponds to a 'B-' grade.\n    '> 2.0': means GPA greater than 2.0 corresponds to a 'C+' grade.\n    '> 1.7': means GPA greater than 1.7 corresponds to a 'C' grade.\n    '> 1.3': means GPA greater than 1.3 corresponds to a 'C-' grade.\n    '> 1.0': means GPA greater than 1.0 corresponds to a 'D+' grade.\n    '> 0.7': means GPA greater than 0.7 corresponds to a 'D' grade.\n    '> 0.0': means GPA greater than 0.0 corresponds to a 'D-' grade.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Initialize an empty list to store letter grades.\n    - Iterate over each GPA in the input list.\n    - Use if-elif-else statements to map each GPA to the corresponding letter grade based on the predefined scale.\n    - Append the letter grade to the list.\n    - Return the list of letter grades.\n\n# [edge case] \n    numerical_letter_grade([4.0]) = ['A+']\n    Explanation: A GPA of exactly 4.0 corresponds to an 'A+' grade.\n\n    numerical_letter_grade([0.0]) = ['E']\n    Explanation: A GPA of exactly 0.0 corresponds to an 'E' grade.\n\n    numerical_letter_grade([3.7]) = ['A-']\n    Explanation: A GPA of exactly 3.7 is greater than 3.3 but not greater than 3.7, so it corresponds to an 'A-' grade.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the conditional logic in the original plan using if-elif-else statements for exact boundary values.\n"], "scores": [0.3962, 0.3962, 0.3491, 0.8962, 0.8962, 1.0, 0.3491, 0.3491, 0.6792, 0.3491], "pass_results": [false, false, false, false, false, true, false, false, false, false], "pass_test_cases_num": [42, 42, 37, 95, 95, 106, 37, 37, 72, 37], "completion": "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPA scores to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA scores.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the GPA scores.\n    \"\"\"\n    # Define the mapping of GPA to letter grades\n    grade_mapping = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-')\n    ]\n\n    # Initialize an empty list to store letter grades\n    letter_grades = []\n\n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Check for invalid input\n        if gpa < 0.0 or gpa > 4.0:\n            raise ValueError(\"GPA must be between 0.0 and 4.0\")\n\n        # Determine the letter grade using the predefined scale\n        for boundary, letter in grade_mapping:\n            if gpa >= boundary:\n                letter_grades.append(letter)\n                break\n        else:\n            # If no valid grade is found, assign 'E' for error\n            letter_grades.append('E')\n\n    # Return the list of letter grades\n    return letter_grades\n", "passed": true, "pass": true, "pass_num": 1, "round": 459, "mutate_method": "condense_two2one", "parent_index": 157}
