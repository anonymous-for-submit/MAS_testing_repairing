{"task_id": "HumanEval/80", "prompt": "def is_happy(s):\t\n'''You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3. Additionally, every 3 consecutive letters must be distinct.\nFor example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    '''", "entry_point": "is_happy", "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "test": ["def check(is_happy):\n\tassert is_happy(\"vjbekznsr\") == True", "def check(is_happy):\n\tassert is_happy(\"adktufdnx\") == True", "def check(is_happy):\n\tassert is_happy(\"ekzerpbq\") == True", "def check(is_happy):\n\tassert is_happy(\"nkoeh\") == True", "def check(is_happy):\n\tassert is_happy(\"kjba\") == True", "def check(is_happy):\n\tassert is_happy(\"swh\") == True", "def check(is_happy):\n\tassert is_happy(\"ykq\") == True", "def check(is_happy):\n\tassert is_happy(\"mwi\") == True", "def check(is_happy):\n\tassert is_happy(\"dmseyemg\") == False", "def check(is_happy):\n\tassert is_happy(\"lmsegi\") == True", "def check(is_happy):\n\tassert is_happy(\"aa\") == False , \"aa\"", "def check(is_happy):\n\tassert is_happy(\"osfqkfsjs\") == False", "def check(is_happy):\n\tassert is_happy(\"pnglo\") == True", "def check(is_happy):\n\tassert is_happy(\"hne\") == True", "def check(is_happy):\n\tassert is_happy(\"ihhyzk\") == False", "def check(is_happy):\n\tassert is_happy(\"sda\") == True", "def check(is_happy):\n\tassert is_happy(\"hoijog\") == True", "def check(is_happy):\n\tassert is_happy(\"vskqbz\") == True", "def check(is_happy):\n\tassert is_happy(\"edbikgtricp\") == True", "def check(is_happy):\n\tassert is_happy(\"jllyluo\") == False", "def check(is_happy):\n\tassert is_happy(\"freva\") == True", "def check(is_happy):\n\tassert is_happy(\"gxts\") == True", "def check(is_happy):\n\tassert is_happy(\"yygnlyoas\") == False", "def check(is_happy):\n\tassert is_happy(\"cdlq\") == True", "def check(is_happy):\n\tassert is_happy(\"qylehtb\") == True", "def check(is_happy):\n\tassert is_happy(\"xpm\") == True", "def check(is_happy):\n\tassert is_happy(\"tcnk\") == True", "def check(is_happy):\n\tassert is_happy(\"p\") == False", "def check(is_happy):\n\tassert is_happy(\"tskgwrb\") == True", "def check(is_happy):\n\tassert is_happy(\"gnntvon\") == False", "def check(is_happy):\n\tassert is_happy(\"qwbjwaiu\") == True", "def check(is_happy):\n\tassert is_happy(\"pgmq\") == True", "def check(is_happy):\n\tassert is_happy(\"b\") == False", "def check(is_happy):\n\tassert is_happy(\"kjcceshvfwai\") == False", "def check(is_happy):\n\tassert is_happy(\"qmxibr\") == True", "def check(is_happy):\n\tassert is_happy(\"pzofkfvtw\") == False", "def check(is_happy):\n\tassert is_happy(\"cpbecycwj\") == False", "def check(is_happy):\n\tassert is_happy(\"ldi\") == True", "def check(is_happy):\n\tassert is_happy(\"ydkfa\") == True", "def check(is_happy):\n\tassert is_happy(\"s\") == False", "def check(is_happy):\n\tassert is_happy(\"xyy\") == False , \"xyy\"", "def check(is_happy):\n\tassert is_happy(\"aabb\") == False , \"aabb\"", "def check(is_happy):\n\tassert is_happy(\"ccnybors\") == False", "def check(is_happy):\n\tassert is_happy(\"cyqfh\") == True", "def check(is_happy):\n\tassert is_happy(\"v\") == False", "def check(is_happy):\n\tassert is_happy(\"pqftbntafqcl\") == True", "def check(is_happy):\n\tassert is_happy(\"abcd\") == True , \"abcd\"", "def check(is_happy):\n\tassert is_happy(\"imc\") == True", "def check(is_happy):\n\tassert is_happy(\"bldcxi\") == True", "def check(is_happy):\n\tassert is_happy(\"syvkwfj\") == True", "def check(is_happy):\n\tassert is_happy(\"mkbrgekb\") == True", "def check(is_happy):\n\tassert is_happy(\"asszruuw\") == False", "def check(is_happy):\n\tassert is_happy(\"xivc\") == True", "def check(is_happy):\n\tassert is_happy(\"eovqv\") == False", "def check(is_happy):\n\tassert is_happy(\"qcrtlo\") == True", "def check(is_happy):\n\tassert is_happy(\"khapsq\") == True", "def check(is_happy):\n\tassert is_happy(\"w\") == False", "def check(is_happy):\n\tassert is_happy(\"ryrr\") == False", "def check(is_happy):\n\tassert is_happy(\"adb\") == True , \"adb\"", "def check(is_happy):\n\tassert is_happy(\"mdg\") == True", "def check(is_happy):\n\tassert is_happy(\"f\") == False", "def check(is_happy):\n\tassert is_happy(\"vmxdsmtbksb\") == True", "def check(is_happy):\n\tassert is_happy(\"ajtrhb\") == True", "def check(is_happy):\n\tassert is_happy(\"hgfqilrj\") == True", "def check(is_happy):\n\tassert is_happy(\"wioqbm\") == True", "def check(is_happy):\n\tassert is_happy(\"lwpm\") == True", "def check(is_happy):\n\tassert is_happy(\"ishkix\") == True", "def check(is_happy):\n\tassert is_happy(\"uxgftzdyg\") == True", "def check(is_happy):\n\tassert is_happy(\"tgglbg\") == False", "def check(is_happy):\n\tassert is_happy(\"fyewnyygb\") == False", "def check(is_happy):\n\tassert is_happy(\"vsgjt\") == True", "def check(is_happy):\n\tassert is_happy(\"jsfnqiht\") == True", "def check(is_happy):\n\tassert is_happy(\"ujeo\") == True", "def check(is_happy):\n\tassert is_happy(\"znngeaumx\") == False", "def check(is_happy):\n\tassert is_happy(\"h\") == False", "def check(is_happy):\n\tassert is_happy(\"rjqhznla\") == True", "def check(is_happy):\n\tassert is_happy(\"mpiumqqx\") == False", "def check(is_happy):\n\tassert is_happy(\"a\") == False , \"a\"", "def check(is_happy):\n\tassert is_happy(\"vdxot\") == True", "def check(is_happy):\n\tassert is_happy(\"dyoywxi\") == False", "def check(is_happy):\n\tassert is_happy(\"gylbrpyqiuw\") == True", "def check(is_happy):\n\tassert is_happy(\"yauwdcsfcwr\") == True", "def check(is_happy):\n\tassert is_happy(\"xzyzwrab\") == False", "def check(is_happy):\n\tassert is_happy(\"bhkokspiry\") == False", "def check(is_happy):\n\tassert is_happy(\"ipjy\") == True", "def check(is_happy):\n\tassert is_happy(\"dpvxqd\") == True", "def check(is_happy):\n\tassert is_happy(\"mckptsntv\") == True", "def check(is_happy):\n\tassert is_happy(\"gitokkmmex\") == False", "def check(is_happy):\n\tassert is_happy(\"uimsvgvy\") == False", "def check(is_happy):\n\tassert is_happy(\"xckdiwjz\") == True", "def check(is_happy):\n\tassert is_happy(\"dktydg\") == True", "def check(is_happy):\n\tassert is_happy(\"jjzdrfcxx\") == False", "def check(is_happy):\n\tassert is_happy(\"rajomlaz\") == True", "def check(is_happy):\n\tassert is_happy(\"zrqkybwt\") == True", "def check(is_happy):\n\tassert is_happy(\"hcp\") == True", "def check(is_happy):\n\tassert is_happy(\"jgrvcizhi\") == True", "def check(is_happy):\n\tassert is_happy(\"d\") == False", "def check(is_happy):\n\tassert is_happy(\"iopaxioi\") == False , \"iopaxioi\"", "def check(is_happy):\n\tassert is_happy(\"y\") == False", "def check(is_happy):\n\tassert is_happy(\"lsm\") == True", "def check(is_happy):\n\tassert is_happy(\"iopaxpoi\") == True , \"iopaxpoi\"", "def check(is_happy):\n\tassert is_happy(\"n\") == False", "def check(is_happy):\n\tassert is_happy(\"ioruvha\") == True", "def check(is_happy):\n\tassert is_happy(\"hevkrepn\") == True", "def check(is_happy):\n\tassert is_happy(\"g\") == False", "def check(is_happy):\n\tassert is_happy(\"i\") == False", "def check(is_happy):\n\tassert is_happy(\"kxqis\") == True", "def check(is_happy):\n\tassert is_happy(\"xrc\") == True", "def check(is_happy):\n\tassert is_happy(\"qfychpkht\") == True", "def check(is_happy):\n\tassert is_happy(\"vorlwobo\") == False"], "test_case_list": ["assert is_happy(\"vjbekznsr\") == True", "assert is_happy(\"adktufdnx\") == True", "assert is_happy(\"ekzerpbq\") == True", "assert is_happy(\"nkoeh\") == True", "assert is_happy(\"kjba\") == True", "assert is_happy(\"swh\") == True", "assert is_happy(\"ykq\") == True", "assert is_happy(\"mwi\") == True", "assert is_happy(\"dmseyemg\") == False", "assert is_happy(\"lmsegi\") == True", "assert is_happy(\"aa\") == False , \"aa\"", "assert is_happy(\"osfqkfsjs\") == False", "assert is_happy(\"pnglo\") == True", "assert is_happy(\"hne\") == True", "assert is_happy(\"ihhyzk\") == False", "assert is_happy(\"sda\") == True", "assert is_happy(\"hoijog\") == True", "assert is_happy(\"vskqbz\") == True", "assert is_happy(\"edbikgtricp\") == True", "assert is_happy(\"jllyluo\") == False", "assert is_happy(\"freva\") == True", "assert is_happy(\"gxts\") == True", "assert is_happy(\"yygnlyoas\") == False", "assert is_happy(\"cdlq\") == True", "assert is_happy(\"qylehtb\") == True", "assert is_happy(\"xpm\") == True", "assert is_happy(\"tcnk\") == True", "assert is_happy(\"p\") == False", "assert is_happy(\"tskgwrb\") == True", "assert is_happy(\"gnntvon\") == False", "assert is_happy(\"qwbjwaiu\") == True", "assert is_happy(\"pgmq\") == True", "assert is_happy(\"b\") == False", "assert is_happy(\"kjcceshvfwai\") == False", "assert is_happy(\"qmxibr\") == True", "assert is_happy(\"pzofkfvtw\") == False", "assert is_happy(\"cpbecycwj\") == False", "assert is_happy(\"ldi\") == True", "assert is_happy(\"ydkfa\") == True", "assert is_happy(\"s\") == False", "assert is_happy(\"xyy\") == False , \"xyy\"", "assert is_happy(\"aabb\") == False , \"aabb\"", "assert is_happy(\"ccnybors\") == False", "assert is_happy(\"cyqfh\") == True", "assert is_happy(\"v\") == False", "assert is_happy(\"pqftbntafqcl\") == True", "assert is_happy(\"abcd\") == True , \"abcd\"", "assert is_happy(\"imc\") == True", "assert is_happy(\"bldcxi\") == True", "assert is_happy(\"syvkwfj\") == True", "assert is_happy(\"mkbrgekb\") == True", "assert is_happy(\"asszruuw\") == False", "assert is_happy(\"xivc\") == True", "assert is_happy(\"eovqv\") == False", "assert is_happy(\"qcrtlo\") == True", "assert is_happy(\"khapsq\") == True", "assert is_happy(\"w\") == False", "assert is_happy(\"ryrr\") == False", "assert is_happy(\"adb\") == True , \"adb\"", "assert is_happy(\"mdg\") == True", "assert is_happy(\"f\") == False", "assert is_happy(\"vmxdsmtbksb\") == True", "assert is_happy(\"ajtrhb\") == True", "assert is_happy(\"hgfqilrj\") == True", "assert is_happy(\"wioqbm\") == True", "assert is_happy(\"lwpm\") == True", "assert is_happy(\"ishkix\") == True", "assert is_happy(\"uxgftzdyg\") == True", "assert is_happy(\"tgglbg\") == False", "assert is_happy(\"fyewnyygb\") == False", "assert is_happy(\"vsgjt\") == True", "assert is_happy(\"jsfnqiht\") == True", "assert is_happy(\"ujeo\") == True", "assert is_happy(\"znngeaumx\") == False", "assert is_happy(\"h\") == False", "assert is_happy(\"rjqhznla\") == True", "assert is_happy(\"mpiumqqx\") == False", "assert is_happy(\"a\") == False , \"a\"", "assert is_happy(\"vdxot\") == True", "assert is_happy(\"dyoywxi\") == False", "assert is_happy(\"gylbrpyqiuw\") == True", "assert is_happy(\"yauwdcsfcwr\") == True", "assert is_happy(\"xzyzwrab\") == False", "assert is_happy(\"bhkokspiry\") == False", "assert is_happy(\"ipjy\") == True", "assert is_happy(\"dpvxqd\") == True", "assert is_happy(\"mckptsntv\") == True", "assert is_happy(\"gitokkmmex\") == False", "assert is_happy(\"uimsvgvy\") == False", "assert is_happy(\"xckdiwjz\") == True", "assert is_happy(\"dktydg\") == True", "assert is_happy(\"jjzdrfcxx\") == False", "assert is_happy(\"rajomlaz\") == True", "assert is_happy(\"zrqkybwt\") == True", "assert is_happy(\"hcp\") == True", "assert is_happy(\"jgrvcizhi\") == True", "assert is_happy(\"d\") == False", "assert is_happy(\"iopaxioi\") == False , \"iopaxioi\"", "assert is_happy(\"y\") == False", "assert is_happy(\"lsm\") == True", "assert is_happy(\"iopaxpoi\") == True , \"iopaxpoi\"", "assert is_happy(\"n\") == False", "assert is_happy(\"ioruvha\") == True", "assert is_happy(\"hevkrepn\") == True", "assert is_happy(\"g\") == False", "assert is_happy(\"i\") == False", "assert is_happy(\"kxqis\") == True", "assert is_happy(\"xrc\") == True", "assert is_happy(\"qfychpkht\") == True", "assert is_happy(\"vorlwobo\") == False"], "nl": "You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    ", "func": "def is_happy(s):", "examples": "For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    ", "repair_prompt": ["def is_happy(s):\t\n'''You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3. Additionally, every 3 consecutive letters must be distinct.\nFor example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    '''", "def is_happy(s):\t\n'''You are given a string s.\n    Your task is to check if the string is happy or not. This means determining if the string follows a specific rule.\n    A string is happy if its length is at least 3. Additionally, every 3 consecutive letters must be distinct.\nFor example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    '''", "def is_happy(s):\t\n'''You are given a string s, and your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3, and every 3 consecutive letters must be distinct.\nFor example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if the string is happy.\n\n    A string is considered \"happy\" if its length is at least 3 and every 3 consecutive letters are distinct.\n\n    Parameters:\n    s (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string is happy, False otherwise.\n\n    Raises:\n    ValueError: If the input is not a valid string.\n    \"\"\"\n    # Validate input\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n\n    # Check if the string length is at least 3\n    if len(s) < 3:\n        return False\n\n    # Iterate through the string using a sliding window of size 3\n    for i in range(len(s) - 2):\n        # Extract the current window of 3 characters\n        window = s[i:i+3]\n        # Check if all characters in the window are distinct\n        if len(set(window)) != 3:\n            return False\n\n    # If all windows have distinct characters, return True\n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Determines if a string is happy.\n    A string is happy if its length is at least 3 and every 3 consecutive characters are distinct.\n\n    Parameters:\n    s (str): The input string to check.\n\n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \"\"\"\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n\n    # Iterate through the string using a sliding window of size 3\n    for i in range(len(s) - 2):\n        # Extract the current window of 3 characters\n        window = s[i:i+3]\n        \n        # Check if all characters in the window are distinct\n        if len(set(window)) != 3:\n            return False\n\n    # If all windows pass the distinct check, return True\n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Checks if the string is happy.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n\n    Parameters:\n    s (str): The string to be checked.\n\n    Returns:\n    bool: True if the string is happy, False otherwise.\n\n    Raises:\n    ValueError: If the input is not a string.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n\n    # Iterate through the string, checking every set of 3 consecutive characters\n    for i in range(len(s) - 2):\n        # Extract the current set of 3 consecutive characters\n        current_set = s[i:i+3]\n        # Check if all characters in the current set are distinct\n        if len(set(current_set)) != 3:\n            return False\n\n    # If all sets of 3 consecutive characters are distinct, return True\n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Determines if a string is happy. A string is considered happy if its length is at least 3 \n    and every 3 consecutive characters are distinct.\n\n    Parameters:\n    s (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \"\"\"\n    # Check if the string length is less than 3\n    if len(s) < 3:\n        return False\n\n    # Iterate through the string, checking every set of 3 consecutive characters\n    for i in range(len(s) - 2):\n        # Extract the current set of 3 consecutive characters\n        triplet = s[i:i+3]\n        # Check if all characters in the triplet are distinct\n        if len(set(triplet)) != 3:\n            return False\n\n    # If all sets of 3 consecutive characters are distinct, return True\n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    '''\n    Checks if the string is happy.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \n    Parameters:\n    s (str): The string to be checked.\n    \n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \n    Raises:\n    ValueError: If the input is not a valid string or contains invalid characters.\n    '''\n    # Validate input\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    if any(char in s for char in \" \\t\\n\\r\\x0b\\x0c\"):\n        raise ValueError(\"String contains invalid characters or spaces.\")\n    \n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string using a sliding window of size 3\n    for i in range(len(s) - 2):\n        # Check if all three characters in the current window are distinct\n        if len(set(s[i:i+3])) != 3:\n            return False\n    \n    # If all windows have distinct characters, return True\n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Checks if the string is happy.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \n    Parameters:\n    s (str): The input string to be checked.\n    \n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \"\"\"\n    # Check if the string length is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate over the string with a sliding window of size 3\n    for i in range(len(s) - 2):\n        # Extract the current window of 3 characters\n        window = s[i:i+3]\n        \n        # Check if all characters in the window are distinct\n        if len(set(window)) != 3:\n            return False\n    \n    # If all windows have distinct characters, return True\n    return True\n\n# Example usage:\n# print(is_happy(\"abc\"))  # Expected output: True\n# print(is_happy(\"aab\"))  # Expected output: False\n# print(is_happy(\"abca\")) # Expected output: True\n# print(is_happy(\"ab\"))   # Expected output: False\n# print(is_happy(\"\"))     # Expected output: False\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Determines if a string is happy.\n    A string is happy if its length is at least 3, and every 3 consecutive letters must be distinct.\n    \n    Parameters:\n    s (str): The input string to be checked.\n    \n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \"\"\"\n    # Check if the string length is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string, checking each set of 3 consecutive characters\n    for i in range(len(s) - 2):\n        # Extract the current set of 3 consecutive characters\n        triplet = s[i:i+3]\n        \n        # Check if all characters in the triplet are distinct\n        if len(set(triplet)) != 3:\n            return False\n    \n    # If all sets of 3 consecutive characters are distinct, return True\n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Determines if a string is happy.\n    A string is happy if its length is at least 3, and every 3 consecutive letters are distinct.\n\n    Parameters:\n    s (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \"\"\"\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n\n    # Iterate through the string from the start to len(s) - 2\n    for i in range(len(s) - 2):\n        # Check if the characters s[i], s[i+1], and s[i+2] are all distinct\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    # If the loop completes without returning False, return True\n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    '''\n    Check if the string is happy.\n    A string is happy if its length is at least 3, and every 3 consecutive letters are distinct.\n    \n    Parameters:\n    s (str): The input string to be evaluated.\n    \n    Returns:\n    bool: True if the string is happy, False otherwise.\n    '''\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string, checking each set of 3 consecutive characters\n    for i in range(len(s) - 2):\n        # Extract the current set of 3 consecutive characters\n        current_set = s[i:i+3]\n        \n        # Check if all characters in the current set are distinct\n        if len(set(current_set)) != 3:\n            return False\n    \n    # If all sets of 3 consecutive characters are distinct, return True\n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if the string is happy.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n\n    Parameters:\n    s (str): The input string to check.\n\n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \"\"\"\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n\n    # Iterate through the string and check every set of 3 consecutive characters\n    for i in range(len(s) - 2):\n        # Extract the current set of 3 consecutive characters\n        current_set = s[i:i+3]\n        \n        # Check if all characters in the current set are distinct\n        if len(set(current_set)) != 3:\n            return False\n\n    # If all sets of 3 consecutive characters are distinct, return True\n    return True\n"], "plans": ["requirement analysis:\nThe function should efficiently determine if a string is happy by checking the length and ensuring every three consecutive characters are distinct. It should handle edge cases like short strings and provide informative feedback for invalid inputs.\nrequirement pool:\n- Implement the main function to check string happiness\n- Optimize the function for performance with large strings\n- Develop error handling for invalid inputs\n- Create comprehensive documentation for the function\n- Design user-friendly error messages\nWe will implement a function that checks if a string is happy by ensuring its length is at least 3 and every 3 consecutive characters are distinct. We will use Python's built-in capabilities for string manipulation and error handling to optimize performance and provide clear error messages.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the requirement, a string is considered \"happy\" if its length is at least 3 and every 3 consecutive letters are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': means the minimum length of the string should be 3 for it to be considered for further checks.\n    Implementation: Check if the length of the string is greater than or equal to 3.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the length of the string is at least 3.\n    2. Iterate through the string using a sliding window of size 3.\n    3. For each window, check if all three characters are distinct.\n    4. If any window does not have distinct characters, return False.\n    5. If all windows have distinct characters, return True.\n\n# [edge case] \n    is_happy('') = False\n    Explanation: The string is empty, so it does not meet the minimum length requirement of 3.\n    \n    is_happy('ab') = False\n    Explanation: The string length is less than 3, so it cannot be considered happy.\n    \n    is_happy('aaa') = False\n    Explanation: The string length is 3, but all characters are the same, failing the distinct character requirement.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for minimum length and distinct characters in consecutive windows.\n", "requirement analysis:\nThe function should efficiently determine if a string is happy by checking that every three consecutive characters are distinct. It should handle edge cases such as strings shorter than three characters and provide clear documentation and examples.\nrequirement pool:\n- Implement the main function to check if a string is happy\n- Optimize the function for performance with large strings\n- Provide detailed documentation and examples\n- Create a user-friendly interface for testing the function\n- Ensure compatibility with various Python versions\nWe will implement a function that checks if a string is happy by ensuring every three consecutive characters are distinct. We will use Python's built-in capabilities for string manipulation to optimize performance, especially for large strings. The function will handle both alphabetic and non-alphabetic characters, treating them equally in the distinct check.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the requirement, a string is considered \"happy\" if its length is at least 3 and every 3 consecutive letters are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': means the string must have a minimum length of 3 to be considered for happiness.\n    Implementation: Check if the length of the string is greater than or equal to 3.\n\n# [degree adverb] \n    'distinct': means that every group of 3 consecutive characters in the string must be different from each other.\n    Implementation: Iterate through the string and check if each set of 3 consecutive characters are unique.\n\n# [code logic]\n    - Check if the length of the string is less than 3; if so, return False.\n    - Iterate through the string using a sliding window of size 3.\n    - For each window, check if all characters are distinct.\n    - If any window fails the distinct check, return False.\n    - If all windows pass, return True.\n\n# [edge case] \n    is_happy('') = False\n    Explanation: The string is empty, so it does not meet the minimum length requirement.\n    \n    is_happy('ab') = False\n    Explanation: The string length is less than 3, so it cannot be happy.\n    \n    is_happy('abcabcabc') = True\n    Explanation: Every set of 3 consecutive characters ('abc', 'bca', 'cab', etc.) are distinct.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for length and distinctness, which covers these cases.\n", "requirement analysis:\nThe function should efficiently determine if a string is happy by checking its length and ensuring every three consecutive characters are distinct. It should handle edge cases like strings shorter than three characters and provide meaningful feedback.\nrequirement pool:\n- Implement the main function to check string happiness\n- Optimize the function for performance with large strings\n- Include error handling for invalid inputs\n- Provide detailed documentation and examples\n- Develop a user-friendly interface for testing strings\nWe will implement a function to check if a string is happy by ensuring its length is at least 3 and every three consecutive characters are distinct. We will use Python's built-in capabilities for string manipulation to achieve this efficiently. The function will also include error handling for invalid inputs, such as non-string types, and provide meaningful feedback. Special characters and numbers will be considered as valid characters in the string and will be included in the happiness check.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the requirement, a string is considered \"happy\" if its length is at least 3 and every 3 consecutive letters are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': means the length of the string must be greater than or equal to 3 for it to be considered happy.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the length of the string is less than 3. If so, return False.\n    2. Iterate through the string, checking every set of 3 consecutive characters.\n    3. If any set of 3 consecutive characters are not distinct, return False.\n    4. If all sets of 3 consecutive characters are distinct, return True.\n\n# [edge case] \n    is_happy('') = False\n    Explanation: The string is empty, so it does not meet the minimum length requirement.\n    \n    is_happy('ab') = False\n    Explanation: The string length is less than 3, so it cannot be happy.\n    \n    is_happy('abc') = True\n    Explanation: The string length is exactly 3, and all characters are distinct.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for the minimum length and distinctness of characters.\n", "requirement analysis:\nThe function needs to efficiently check if a string is happy by ensuring every three consecutive characters are distinct. It should handle edge cases like strings shorter than three characters and provide meaningful feedback for non-happy strings.\nrequirement pool:\n- Implement the main function to check string happiness\n- Optimize the function for performance\n- Include detailed documentation and examples\n- Create a suite of test cases for validation\n- Provide user feedback for non-happy strings\nWe will implement a function that checks if a string is 'happy' by ensuring every three consecutive characters are distinct. The function will handle edge cases such as strings shorter than three characters and provide feedback for non-happy strings. We will use Python's built-in capabilities for string manipulation to keep the implementation simple and efficient.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the requirement, a string is considered 'happy' if its length is at least 3 and every 3 consecutive letters are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': means the string must have a minimum length of 3 to be considered for checking if it is happy.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the length of the string is less than 3. If so, return False.\n    2. Iterate through the string, checking every set of 3 consecutive characters.\n    3. For each set, check if all characters are distinct.\n    4. If any set of 3 consecutive characters is not distinct, return False.\n    5. If all sets are distinct, return True.\n\n# [edge case] \n    is_happy('') = False\n    Explanation: The string is empty, so it does not meet the minimum length requirement of 3.\n    \n    is_happy('ab') = False\n    Explanation: The string length is less than 3, so it cannot be happy.\n    \n    is_happy('abc') = True\n    Explanation: The string length is exactly 3, and all characters are distinct.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers strings shorter than 3 characters by returning False immediately.\n", "requirement analysis:\nThe function should efficiently determine if a string is happy by checking the length and ensuring every three consecutive characters are distinct. It should handle edge cases like strings shorter than three characters and provide feedback for invalid inputs.\nrequirement pool:\n- Implement the main function to check string happiness\n- Optimize the function for performance with large strings\n- Include error handling for invalid inputs\n- Provide detailed documentation\n- Develop a user-friendly interface for testing\nWe will implement a function named `is_happy` that checks if a string is happy by ensuring its length is at least 3 and every 3 consecutive characters are distinct. We will use Python's built-in capabilities for string manipulation to achieve this efficiently. The function will also include error handling to provide clear messages for invalid inputs, such as non-string types or strings with special characters and spaces.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the requirement, a string is considered \"happy\" if its length is at least 3 and every 3 consecutive letters are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': means the string must have a minimum length of 3 characters to be considered for the \"happy\" condition.\n    Implementation: Check if the length of the string is greater than or equal to 3.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if the length of the string is less than 3. If so, return False.\n    2. Iterate through the string using a sliding window of size 3.\n    3. For each window, check if all three characters are distinct.\n    4. If any window does not have distinct characters, return False.\n    5. If all windows have distinct characters, return True.\n\n# [edge case]\n    is_happy('') = False\n    Explanation: The string is empty, so it does not meet the minimum length requirement of 3.\n    \n    is_happy('ab') = False\n    Explanation: The string length is less than 3, so it cannot be \"happy\".\n    \n    is_happy('abcabcabc') = True\n    Explanation: The string has a length greater than 3, and every set of 3 consecutive characters are distinct.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers strings with lengths less than 3 and checks for distinct characters in consecutive sets of three.\n", "requirement analysis:\nThe function should efficiently determine if a string is happy by checking its length and ensuring every three consecutive characters are distinct. It should handle edge cases like strings shorter than three characters and provide meaningful feedback.\nrequirement pool:\n- Implement the main function to check string happiness\n- Optimize the function for performance with large strings\n- Provide detailed error messages for invalid strings\n- Create comprehensive documentation for developers\n- Develop a user-friendly interface for string input\nWe will implement a function that checks if a string is happy by ensuring its length is at least 3 and every 3 consecutive characters are distinct. We will use Python's built-in capabilities to efficiently iterate over the string and check the conditions. The function will also provide detailed error messages for invalid strings.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the requirement, a string is considered \"happy\" if its length is at least 3 and every 3 consecutive letters are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': means the length of the string must be greater than or equal to 3.\n    Implementation: Check if `len(s) >= 3`.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the length of the string is at least 3.\n    2. Iterate through the string using a sliding window of size 3.\n    3. For each window, check if all three characters are distinct.\n    4. If any window does not have distinct characters, return False.\n    5. If all windows have distinct characters, return True.\n\n# [edge case] \n    is_happy('') = False\n    Explanation: The string is empty, so it does not meet the length requirement of at least 3.\n    \n    is_happy('ab') = False\n    Explanation: The string length is less than 3, so it cannot be happy.\n    \n    is_happy('abc') = True\n    Explanation: The string length is exactly 3, and all characters are distinct.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for the length and distinctness of characters.\n", "requirement analysis:\nThe function should efficiently determine if a string is happy by checking that every set of three consecutive characters are distinct. It should handle edge cases such as strings shorter than three characters and provide clear feedback.\nrequirement pool:\n- Implement the main function to check if a string is happy\n- Optimize the function for performance with large strings\n- Create comprehensive test cases to validate the function\n- Document the function usage and examples\n- Ensure compatibility with different Python versions\nWe will implement a function that checks if a string is happy by ensuring every set of three consecutive characters are distinct. We will use Python's built-in capabilities for string manipulation to achieve this efficiently. The function will handle both alphabetic and non-alphabetic characters, as the requirement does not specify any limitations on character types.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the requirement, a string is considered \"happy\" if its length is at least 3 and every set of 3 consecutive characters are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': means the minimum length of the string should be 3 for it to be considered for checking happiness.\n    Implementation: Check if the length of the string is greater than or equal to 3.\n\n# [degree adverb] \n    'distinct': means that each set of 3 consecutive characters must be different from each other.\n    Implementation: Iterate through the string and check if each set of 3 consecutive characters are unique.\n\n# [code logic]\n    - Check if the length of the string is less than 3, return False immediately.\n    - Iterate through the string using a loop, checking each set of 3 consecutive characters.\n    - If any set of 3 consecutive characters are not distinct, return False.\n    - If all sets are distinct, return True.\n\n# [edge case] \n    is_happy('') = False\n    Explanation: The string is empty, so it cannot be happy as it does not meet the minimum length requirement.\n    \n    is_happy('ab') = False\n    Explanation: The string length is less than 3, so it cannot be happy.\n    \n    is_happy('abc') = True\n    Explanation: The string length is exactly 3, and all characters are distinct, so it is happy.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for the minimum length and distinctness of characters.\n", "requirement analysis:\nThe function must efficiently determine if a string is happy by checking that every set of three consecutive characters are distinct. It should handle edge cases such as strings shorter than three characters and provide clear documentation and examples.\nrequirement pool:\n- Implement the main function to check for happy strings\n- Optimize the function for performance with large strings\n- Provide detailed documentation and examples\n- Include error handling for non-string inputs\n- Create unit tests to ensure function accuracy\nWe will implement a function that checks if a string is happy by ensuring every set of three consecutive characters are distinct. We will use Python's built-in capabilities for string manipulation to achieve this efficiently. The function will assume valid string input, as handling non-string inputs is not specified as a priority.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the requirement, a string is considered \"happy\" if its length is at least 3 and every set of three consecutive letters are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': This means the string must have a minimum length of 3 characters to be considered for further checks.\n    Implementation: Check if `len(s) >= 3`.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the length of the string `s` is less than 3. If so, return `False` immediately.\n    2. Iterate through the string from the start to `len(s) - 2`.\n    3. For each position `i`, check if the characters `s[i]`, `s[i+1]`, and `s[i+2]` are all distinct.\n    4. If any set of three consecutive characters are not distinct, return `False`.\n    5. If the loop completes without returning `False`, return `True`.\n\n# [edge case] \n    is_happy('') = False\n    Explanation: The string is empty, so it does not meet the minimum length requirement of 3.\n    \n    is_happy('ab') = False\n    Explanation: The string length is less than 3, so it cannot be happy.\n    \n    is_happy('abcabcabc') = True\n    Explanation: Every set of three consecutive characters ('abc', 'bca', 'cab', etc.) are distinct.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already handles strings with lengths less than 3 by returning `False` immediately.\n", "requirement analysis:\nThe function should efficiently determine if a string is happy by checking every set of three consecutive characters for distinctness. It should handle edge cases like strings shorter than three characters and provide meaningful feedback.\nrequirement pool:\n- Implement the main function to check string happiness\n- Optimize the function for performance with large strings\n- Include error handling for invalid inputs\n- Provide detailed documentation and examples\n- Enhance user feedback for non-happy strings\nWe will implement a function that iterates through the string, checking every set of three consecutive characters to ensure they are distinct. The function will handle edge cases such as strings shorter than three characters by returning False immediately. We will use Python's built-in capabilities for string manipulation to ensure optimal performance. Additionally, we will include error handling to provide clear feedback for invalid inputs, such as non-string types.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the requirement, a string is considered \"happy\" if its length is at least 3 and every set of 3 consecutive letters are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': This means the string must have a minimum length of 3 characters to be considered for further checks.\n    Implementation: Check if `len(s) >= 3`.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the length of the string `s` is less than 3. If so, return False immediately.\n    2. Iterate through the string using a loop, checking each set of 3 consecutive characters.\n    3. For each set, check if all three characters are distinct.\n    4. If any set of 3 consecutive characters is not distinct, return False.\n    5. If all sets of 3 consecutive characters are distinct, return True.\n\n# [edge case] \n    is_happy('a') = False\n    Explanation: The string length is less than 3, so it cannot be happy.\n    \n    is_happy('abc') = True\n    Explanation: The string length is exactly 3, and all characters are distinct.\n    \n    is_happy('aaa') = False\n    Explanation: The string length is 3, but all characters are the same, so they are not distinct.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already handles strings shorter than 3 by returning False immediately and checks for distinct characters in sets of 3.\n", "requirement analysis:\nThe function should efficiently determine if a string is happy by checking its length and ensuring every three consecutive characters are distinct. It should handle edge cases like strings shorter than three characters and provide meaningful feedback.\nrequirement pool:\n- Implement the main function to check happy strings\n- Optimize for performance with large strings\n- Provide detailed error messages for invalid inputs\n- Create comprehensive documentation\n- Develop test cases for various string scenarios\nWe will implement a function named `is_happy` that checks if a string is happy by ensuring its length is at least 3 and every three consecutive characters are distinct. We will use Python's built-in capabilities for string manipulation to achieve this efficiently. The function will also provide detailed error messages for invalid inputs, such as strings shorter than three characters. We will not use any third-party libraries as the task can be efficiently handled with native Python features.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'happy'\n    Explanation: In the requirement, a string is considered \"happy\" if its length is at least 3 and every 3 consecutive letters are distinct.\n\n# [phrase showing quantity relationship]\n    'at least 3': means the string must have a minimum length of 3 characters to be considered for further checks.\n    Implementation: Check if the length of the string is greater than or equal to 3.\n\n# [degree adverb] \n    'distinct': means that every group of 3 consecutive characters in the string must be different from each other.\n    Implementation: Iterate through the string and check if each set of 3 consecutive characters are unique.\n\n# [code logic]\n    - Check if the length of the string is less than 3; if so, return False.\n    - Iterate through the string using a loop that checks every set of 3 consecutive characters.\n    - For each set, check if all characters are distinct.\n    - If any set of 3 consecutive characters are not distinct, return False.\n    - If all sets are distinct, return True.\n\n# [edge case] \n    is_happy('') = False\n    Explanation: The string is empty, so it does not meet the minimum length requirement.\n    \n    is_happy('ab') = False\n    Explanation: The string length is less than 3, so it does not meet the minimum length requirement.\n    \n    is_happy('abcabc') = True\n    Explanation: The string length is greater than or equal to 3, and all sets of 3 consecutive characters are distinct.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for the minimum length and distinctness of consecutive characters.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [110, 110, 110, 110, 110, 110, 110, 110, 110, 110], "completion": "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if the string is happy.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n\n    Parameters:\n    s (str): The input string to check.\n\n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \"\"\"\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n\n    # Iterate through the string and check every set of 3 consecutive characters\n    for i in range(len(s) - 2):\n        # Extract the current set of 3 consecutive characters\n        current_set = s[i:i+3]\n        \n        # Check if all characters in the current set are distinct\n        if len(set(current_set)) != 3:\n            return False\n\n    # If all sets of 3 consecutive characters are distinct, return True\n    return True\n", "passed": true, "pass": true, "pass_num": 10, "round": 935, "mutate_method": "expand_one2two", "parent_index": 70}
