{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if the items in the list are in a monotonic increasing or decreasing order.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if the items in the list are in a monotonic increasing or decreasing order.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "def monotonic(l: list):\t\n'''Return True if the items in the list are in a monotonic increasing or decreasing order.\nIf the elements increase continuously or decrease continuously, we call it monotonic. \nIf they don't follow any of these orders, it's not monotonic.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "def monotonic(l: list):\t\n'''Return True if the items in the list are either entirely non-increasing or non-decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of numeric elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(l) <= 1:\n        return True\n\n    # Initialize flags for increasing and decreasing order\n    is_increasing = False\n    is_decreasing = False\n\n    # Iterate through the list to check the order\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            is_increasing = True\n        elif l[i] > l[i + 1]:\n            is_decreasing = True\n\n        # If both flags are True, the list is not monotonic\n        if is_increasing and is_decreasing:\n            return False\n\n    # If only one flag is True, the list is monotonic\n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n    \n    Parameters:\n    l (list): A list of numeric elements.\n    \n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = False\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            increasing = True\n        elif l[i] < l[i - 1]:\n            decreasing = True\n\n        if increasing and decreasing:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of numeric elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n\n    increasing = decreasing = False\n\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            increasing = True\n        elif l[i] > l[i + 1]:\n            decreasing = True\n\n        if increasing and decreasing:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic.\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        # An empty list or a single-element list is trivially monotonic\n        return True\n\n    # Initialize flags for non-decreasing and non-increasing sequences\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    # Iterate through the list to check monotonicity\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            is_non_increasing = False\n        if l[i] < l[i - 1]:\n            is_non_decreasing = False\n\n    # If either flag is True, the list is monotonic\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        # An empty list or a list with a single element is trivially monotonic\n        return True\n\n    # Initialize flags for non-decreasing and non-increasing\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    # Iterate through the list and compare each element with the next one\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            is_non_decreasing = False\n        if l[i] > l[i - 1]:\n            is_non_increasing = False\n\n    # If either flag remains True, the list is monotonic\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determines if a list is monotonic.\n\n    A list is considered monotonic if it is either entirely non-increasing or non-decreasing.\n\n    Args:\n        l (list): A list of comparable elements.\n\n    Returns:\n        bool: Returns True if the list is monotonic, otherwise False.\n    \"\"\"\n    if len(l) <= 1:\n        # An empty list or a list with a single element is trivially monotonic\n        return True\n\n    increasing = decreasing = False\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            increasing = True\n        elif l[i] < l[i - 1]:\n            decreasing = True\n\n        # If both increasing and decreasing flags are True, the list is not monotonic\n        if increasing and decreasing:\n            return False\n\n    # If only one of the flags is True, the list is monotonic\n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([])\n    True\n    >>> monotonic([5, 5, 5])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            is_non_increasing = False\n        if l[i] < l[i - 1]:\n            is_non_decreasing = False\n\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n    \n    Parameters:\n    l (list): A list of comparable elements (e.g., numbers).\n    \n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    # Check for trivial cases: empty list or single-element list\n    if len(l) <= 1:\n        return True\n    \n    # Initialize flags for monotonicity\n    is_non_decreasing = True\n    is_non_increasing = True\n    \n    # Iterate through the list to check monotonicity\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            is_non_decreasing = False\n        if l[i] > l[i - 1]:\n            is_non_increasing = False\n    \n    # Return True if the list is either non-decreasing or non-increasing\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of numerical values.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            is_non_decreasing = False\n        if l[i] > l[i - 1]:\n            is_non_increasing = False\n\n        # If both flags are False, the list is not monotonic\n        if not is_non_decreasing and not is_non_increasing:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([3, 3, 3])\n    True\n    >>> monotonic([])\n    True\n    >>> monotonic([5])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            is_decreasing = False\n        if l[i] < l[i - 1]:\n            is_increasing = False\n\n        # If both flags are False, the list is not monotonic\n        if not is_increasing and not is_decreasing:\n            return False\n\n    return True\n"], "plans": ["requirement analysis:\nThe function should efficiently determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists or lists with a single element. The implementation should be straightforward and leverage Python's native capabilities.\nrequirement pool:\n- Implement the monotonic function to check list order.\n- Optimize the function for large datasets.\n- Include comprehensive test cases.\n- Provide detailed documentation and examples.\n- Ensure compatibility with different Python versions.\nWe will implement a simple function using native Python capabilities to check if a list is monotonic. The function will handle edge cases such as empty lists and lists with a single element. It will be optimized for efficiency by iterating through the list only once.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, 'monotonic' refers to a sequence that is either entirely non-increasing or non-decreasing. A list is monotonic if its elements are in increasing order or decreasing order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element; if so, return True as it is trivially monotonic.\n    2. Initialize two flags: one for increasing order and one for decreasing order.\n    3. Iterate through the list and compare each element with the next one:\n        - If an element is greater than the next, set the decreasing flag to True.\n        - If an element is less than the next, set the increasing flag to True.\n    4. If both flags are True, return False as the list is not monotonic.\n    5. Otherwise, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A list with a single element is trivially monotonic as there are no other elements to compare.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list where all elements are the same is monotonic as it does not increase or decrease.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the length of the list and comparing adjacent elements.\n", "requirement analysis:\nThe function should efficiently determine if a list is monotonic, handling both increasing and decreasing sequences. It should be optimized for performance and include comprehensive documentation with examples.\nrequirement pool:\n- Implement the monotonic function to check for increasing or decreasing order.\n- Optimize the function for performance with large lists.\n- Include detailed documentation and examples.\n- Ensure compatibility with Python 3.x.\n- Test the function with edge cases and various data types.\nWe will implement a function named 'monotonic' that checks if a list is either entirely non-increasing or non-decreasing. The function will iterate through the list once, making it efficient for large lists. We will use Python's built-in capabilities to ensure compatibility with Python 3.x. The function will handle numeric data types, and we will include comprehensive documentation with examples to demonstrate usage.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the context of the requirement, a monotonic sequence is one that is either entirely non-increasing or non-decreasing. This means that the elements in the list should either consistently increase or consistently decrease.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element, in which case it is trivially monotonic.\n    2. Initialize two flags: `increasing` and `decreasing`.\n    3. Iterate through the list from the second element to the end:\n        - If the current element is greater than the previous one, set `increasing` to True.\n        - If the current element is less than the previous one, set `decreasing` to True.\n    4. After the loop, if both `increasing` and `decreasing` are True, return False (the list is not monotonic).\n    5. Otherwise, return True (the list is monotonic).\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare against.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list where all elements are the same is considered monotonic as it does not increase or decrease.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking for empty or single-element lists and handling lists with identical elements.\n", "requirement analysis:\nThe function should efficiently determine if a list is monotonic, handling both increasing and decreasing sequences. It should be easy to use and integrate into existing Python projects, with clear documentation and examples.\nrequirement pool:\n- Implement the monotonic function to check for increasing or decreasing order.\n- Optimize the function for performance with large lists.\n- Provide comprehensive documentation with examples.\n- Ensure compatibility with Python 3.x.\n- Include edge case handling in the function.\nWe will implement a simple Python function to check if a list is monotonic, meaning it is either entirely non-increasing or non-decreasing. The function will iterate through the list once, making it efficient for large lists. We will use Python's built-in capabilities without additional libraries to keep it lightweight and compatible with Python 3.x. The function will handle numeric lists, as the requirement for non-numeric lists is unclear.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, 'monotonic' refers to a sequence that is either entirely non-increasing or non-decreasing. This means that the elements in the list should either consistently increase or consistently decrease.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize two boolean variables, `increasing` and `decreasing`, to track the monotonic nature of the list.\n    2. Iterate through the list from the first element to the second-to-last element.\n    3. Compare each element with the next one:\n        - If the current element is less than the next, set `increasing` to True.\n        - If the current element is greater than the next, set `decreasing` to True.\n    4. After iterating, check if either `increasing` or `decreasing` is True, but not both. If so, return True; otherwise, return False.\n\n# [edge case] \n    monotonic([1]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare.\n    \n    monotonic([1, 1, 1]) = True\n    Explanation: A list where all elements are equal is considered monotonic as it does not violate increasing or decreasing order.\n    \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic as there are no elements to compare.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic naturally handles single-element and empty lists as monotonic.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic by checking if it is either entirely non-increasing or non-decreasing. It should handle edge cases such as empty lists and lists with identical elements efficiently.\nrequirement pool:\n- Implement monotonic function to check list order\n- Optimize for performance with large datasets\n- Include comprehensive test cases\n- Provide detailed documentation and examples\n- Ensure compatibility with different Python versions\nWe will implement a simple function to check if a list is monotonic by iterating through the list once to determine if it is non-increasing or non-decreasing. We will use Python's built-in capabilities to ensure compatibility and efficiency. The function will handle edge cases such as empty lists and lists with identical elements by considering them as monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, \"monotonic\" refers to a sequence that is either entirely non-increasing or non-decreasing. This means that the elements in the list should either continuously increase or decrease without any fluctuations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are trivially monotonic.\n    2. Initialize two flags: one for checking non-decreasing order and another for non-increasing order.\n    3. Iterate through the list from the second element to the end:\n        - Compare each element with the previous one.\n        - If an element is greater than the previous one, set the non-increasing flag to False.\n        - If an element is less than the previous one, set the non-decreasing flag to False.\n    4. After the loop, if either flag remains True, return True (indicating the list is monotonic). Otherwise, return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic as there are no elements to violate the order.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: All elements are identical, so the list is both non-increasing and non-decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as monotonic.\n", "requirement analysis:\nThe function should determine if a list is monotonic by checking if it is either entirely non-increasing or non-decreasing. It should handle edge cases such as empty lists or lists with a single element. Performance should be considered for large datasets.\nrequirement pool:\n- Implement the monotonic function to check for non-increasing or non-decreasing order.\n- Optimize the function for performance with large lists.\n- Include comprehensive test cases to cover various scenarios.\n- Provide detailed documentation and examples.\n- Ensure compatibility with different Python versions.\nWe will implement a simple Python function to determine if a list is monotonic by checking if it is either entirely non-increasing or non-decreasing. We will use pure Python to maintain simplicity and avoid unnecessary dependencies. The function will be optimized for performance by iterating through the list only once, which is efficient for large datasets. We will also handle edge cases such as empty lists or lists with a single element.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, monotonic refers to a sequence that is either entirely non-increasing or non-decreasing. This means the elements in the list should either continuously increase or continuously decrease.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element; if so, return True as it is trivially monotonic.\n    2. Initialize two flags: one for checking non-decreasing order and another for non-increasing order.\n    3. Iterate through the list and compare each element with the next one:\n        - If an element is greater than the next, set the non-decreasing flag to False.\n        - If an element is less than the next, set the non-increasing flag to False.\n    4. After iterating, if either flag remains True, return True; otherwise, return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A list with a single element is trivially monotonic as there are no other elements to compare.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list where all elements are equal is considered monotonic as it does not violate either increasing or decreasing order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the length of the list and comparing adjacent elements.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists or lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonicity check for lists\n- Optimize for large list performance\n- Include comprehensive test cases\n- Provide detailed documentation\n- Ensure compatibility with Python 3.x\nWe will implement a function to check if a list is monotonic by iterating through the list and comparing each element with the next one. We will use Python's built-in capabilities to ensure simplicity and efficiency. The function will handle edge cases such as empty lists and lists with identical elements, considering them as monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, 'monotonic' refers to a sequence that is either entirely non-increasing or non-decreasing. A list is considered monotonic if its elements consistently increase or decrease.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element; if so, return True as it is trivially monotonic.\n    2. Initialize two flags: one for increasing order and one for decreasing order.\n    3. Iterate through the list and compare each element with the next one.\n    4. If an element is greater than the next, set the decreasing flag to True.\n    5. If an element is less than the next, set the increasing flag to True.\n    6. If both flags are True, return False as the list is not monotonic.\n    7. If only one flag is True, return True as the list is monotonic.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic by definition.\n    \n    monotonic([5]) = True\n    Explanation: A list with a single element is trivially monotonic.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered monotonic as it neither increases nor decreases.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as monotonic.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, handling both non-increasing and non-decreasing sequences. It should be optimized for performance, especially with large datasets, and include clear documentation with examples.\nrequirement pool:\n- Implement monotonic function to check list sequences\n- Optimize function for performance with large lists\n- Provide comprehensive documentation with examples\n- Ensure compatibility with various Python versions\n- Include error handling for invalid inputs\nWe will implement a function named 'monotonic' that checks if a list is either entirely non-increasing or non-decreasing. The function will be optimized for performance by using a single pass through the list to determine its monotonicity. We will use Python's built-in capabilities to ensure compatibility and efficiency. The function will handle edge cases such as empty lists and lists with identical elements by returning True, as these can be considered trivially monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the context of the requirement, 'monotonic' refers to a sequence that is either entirely non-increasing or non-decreasing. A non-decreasing sequence means each element is greater than or equal to the previous one, while a non-increasing sequence means each element is less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element; if so, return True as it is trivially monotonic.\n    2. Initialize two flags: one for non-decreasing and one for non-increasing.\n    3. Iterate through the list from the second element to the end:\n        - Compare each element with the previous one.\n        - If an element is greater than the previous, set the non-increasing flag to False.\n        - If an element is less than the previous, set the non-decreasing flag to False.\n    4. After the iteration, return True if either flag remains True, indicating monotonicity.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list can be considered trivially monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A list with a single element is trivially monotonic as there are no other elements to compare it with.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list where all elements are identical is both non-increasing and non-decreasing, hence monotonic.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking for empty lists and lists with identical elements.\n", "requirement analysis:\nThe function should efficiently determine if a list is monotonic, meaning it is either entirely non-increasing or non-decreasing. It should handle edge cases such as empty lists or lists with a single element. The implementation should be straightforward and not rely on external libraries to maintain simplicity and ease of use.\nrequirement pool:\n- Implement the monotonic function to check for non-increasing or non-decreasing order\n- Optimize the function for large lists\n- Include comprehensive test cases\n- Provide detailed documentation and examples\n- Ensure compatibility with Python's list data structure\nWe will implement a simple Python function to check if a list is monotonic, meaning it is either entirely non-increasing or non-decreasing. The function will iterate through the list once to determine the monotonicity, ensuring efficiency even for large lists. We will handle edge cases such as empty lists or lists with a single element. The implementation will not rely on external libraries to maintain simplicity and ease of use.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the context of the requirement, a monotonic list is one where the elements are either entirely non-increasing or non-decreasing. This means that as you move through the list, the values either consistently increase or stay the same, or they consistently decrease or stay the same.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'entirely': This means that the condition of being non-increasing or non-decreasing must hold for the entire list without exception.\n\n# [code logic]\n1. Check if the list is empty or has only one element. If so, return True because such lists are trivially monotonic.\n2. Initialize two flags: `is_non_decreasing` and `is_non_increasing` to True.\n3. Iterate through the list from the second element to the end:\n   - If any element is less than the previous one, set `is_non_decreasing` to False.\n   - If any element is greater than the previous one, set `is_non_increasing` to False.\n4. After the loop, return True if either `is_non_decreasing` or `is_non_increasing` is still True, indicating that the list is monotonic.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare it with.\n    \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are equal, so the list is both non-increasing and non-decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking for empty lists and single-element lists at the beginning of the function.\n", "requirement analysis:\nThe function should efficiently determine if a list is monotonic, handling both non-increasing and non-decreasing sequences. It should be easy to use and integrate into existing Python projects without additional dependencies.\nrequirement pool:\n- Implement the monotonic function to check list order\n- Optimize the function for large lists\n- Provide comprehensive documentation with examples\n- Include edge case handling for empty and single-element lists\n- Ensure compatibility with Python's list data structure\nWe will implement a simple Python function that checks if a list is monotonic by iterating through the list once, comparing each element with the next. This approach ensures efficiency, especially for large lists, and handles edge cases like empty or single-element lists. We will not use any additional libraries to maintain simplicity and compatibility with Python's list data structure.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the context of the requirement, monotonic means that the list is either entirely non-increasing (each element is less than or equal to the previous one) or non-decreasing (each element is greater than or equal to the previous one).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'entirely': means that the list must be completely non-increasing or non-decreasing without any exceptions.\n\n# [code logic]\n    1. Check if the list is empty or has only one element, return True as it is trivially monotonic.\n    2. Initialize two flags: one for non-decreasing and one for non-increasing.\n    3. Iterate through the list, comparing each element with the next.\n    4. Update the flags based on comparisons.\n    5. If both flags are True at any point, return False.\n    6. If the iteration completes without both flags being True simultaneously, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic as there are no elements to compare.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: All elements are equal, satisfying both non-increasing and non-decreasing conditions.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty and single-element lists as monotonic by default.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists or lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic function to check increasing or decreasing order\n- Optimize function for performance with large lists\n- Include comprehensive test cases for edge scenarios\n- Provide detailed documentation and examples\n- Ensure compatibility with Python's list data structure\nWe will implement a function to check if a list is monotonic using Python's built-in capabilities. The function will handle edge cases such as empty lists and lists with identical elements. We will optimize the function for performance by minimizing the number of comparisons needed to determine monotonicity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, monotonic refers to a sequence that is either entirely non-increasing or non-decreasing. A list is monotonic if its elements are consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element, return True as it is trivially monotonic.\n    2. Initialize two flags: one for increasing order and one for decreasing order.\n    3. Iterate through the list and compare each pair of consecutive elements.\n    4. Update the flags based on the comparison results.\n    5. If both flags are True at any point, return False as the list is not monotonic.\n    6. If the iteration completes without both flags being True, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic as there are no elements to contradict monotonicity.\n    \n    monotonic([5]) = True\n    Explanation: A list with a single element is trivially monotonic as there are no other elements to compare.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered monotonic as it does not change in value.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the length of the list and handling lists with identical elements.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "completion": "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([3, 3, 3])\n    True\n    >>> monotonic([])\n    True\n    >>> monotonic([5])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            is_decreasing = False\n        if l[i] < l[i - 1]:\n            is_increasing = False\n\n        # If both flags are False, the list is not monotonic\n        if not is_increasing and not is_decreasing:\n            return False\n\n    return True\n", "passed": true, "pass": true, "pass_num": 10, "round": 635, "mutate_method": "rephrase_one", "parent_index": 48}
