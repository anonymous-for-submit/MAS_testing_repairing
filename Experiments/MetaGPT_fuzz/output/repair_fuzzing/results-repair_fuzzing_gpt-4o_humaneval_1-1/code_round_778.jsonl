{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True is list elements are monotonically increasing. They can also be monotonically decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "repair_prompt": ["def monotonic(l: list):\t\n'''Return True is list elements are monotonically increasing. They can also be monotonically decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "def monotonic(l: list):\t\n'''Return True is list elements are monotonically increasing. They can also be monotonically decreasing. A sequence that is either purely non-increasing or non-decreasing is considered monotonic.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or monotonically decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either increasing or decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        # An empty list or a single-element list is trivially monotonic\n        return True\n\n    # Initialize flags for increasing and decreasing\n    is_increasing = False\n    is_decreasing = False\n\n    # Traverse the list from the second element to the end\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            is_increasing = True\n        elif l[i] < l[i - 1]:\n            is_decreasing = True\n\n        # If both flags are True, the list is not monotonic\n        if is_increasing and is_decreasing:\n            return False\n\n    # If only one of the flags is True, the list is monotonic\n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonically increasing or decreasing.\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonically increasing or decreasing, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([])\n    True\n    >>> monotonic([3, 3, 3])\n    True\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(l) <= 1:\n        return True\n\n    # Initialize flags for increasing and decreasing order\n    is_increasing = True\n    is_decreasing = True\n\n    # Iterate through the list and compare each element with the next one\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            is_increasing = False\n        if l[i] < l[i + 1]:\n            is_decreasing = False\n\n    # Return True if either flag remains True, indicating monotonicity\n    return is_increasing or is_decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([])\n    True\n    >>> monotonic([3, 3, 3])\n    True\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(l) <= 1:\n        return True\n\n    # Initialize flags for increasing and decreasing sequences\n    increasing = True\n    decreasing = True\n\n    # Iterate through the list from the second element to the end\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    # Return True if either increasing or decreasing is still True\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determines if a list is monotonic, meaning it is either non-decreasing or non-increasing.\n\n    Args:\n        l (list): A list of comparable elements.\n\n    Returns:\n        bool: True if the list is monotonic, otherwise False.\n    \"\"\"\n    if len(l) <= 1:\n        # An empty list or a list with a single element is trivially monotonic\n        return True\n\n    # Initialize flags for non-decreasing and non-increasing\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    # Iterate through the list and update flags based on comparisons\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            is_non_decreasing = False\n        if l[i] > l[i - 1]:\n            is_non_increasing = False\n\n    # If either flag remains true, the list is monotonic\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Args:\n        l (list): List of comparable elements (e.g., numbers).\n\n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if not l:\n        # An empty list is trivially monotonic\n        return True\n\n    # Initialize flags for non-decreasing and non-increasing\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    # Iterate through the list, comparing each element with the next\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            is_non_decreasing = False\n        if l[i] < l[i + 1]:\n            is_non_increasing = False\n\n    # The list is monotonic if it is either non-decreasing or non-increasing\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Determine if the list is monotonic (either non-increasing or non-decreasing).\n\n    Args:\n        l (list): A list of numeric elements.\n\n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n        >>> monotonic([1, 2, 4, 20])\n        True\n        >>> monotonic([1, 20, 4, 10])\n        False\n        >>> monotonic([4, 1, 0, -10])\n        True\n    '''\n    if len(l) <= 1:\n        return True\n\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            is_non_decreasing = False\n        if l[i] > l[i - 1]:\n            is_non_increasing = False\n\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Check if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        # An empty list or a single-element list is trivially monotonic\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            is_decreasing = False\n        if l[i] < l[i - 1]:\n            is_increasing = False\n\n    return is_increasing or is_decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Determine if the list is monotonically increasing or decreasing.\n    \n    Parameters:\n    l (list): A list of comparable elements (e.g., numbers).\n    \n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n    \n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            is_increasing = False\n        if l[i] > l[i - 1]:\n            is_decreasing = False\n    \n    return is_increasing or is_decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either increasing or decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([])\n    True\n    >>> monotonic([5, 5, 5])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            is_increasing = False\n        if l[i] < l[i + 1]:\n            is_decreasing = False\n\n    return is_increasing or is_decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonically increasing or decreasing.\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonically increasing or decreasing, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Check if the list is empty or has only one element; return True as it is trivially monotonic.\n    if len(l) <= 1:\n        return True\n\n    # Initialize flags for increasing and decreasing\n    is_increasing = True\n    is_decreasing = True\n\n    # Iterate through the list, comparing each element with the next\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            is_decreasing = False\n        elif l[i] > l[i + 1]:\n            is_increasing = False\n\n    # Return True if either flag remains True, indicating monotonicity\n    return is_increasing or is_decreasing\n"], "plans": ["requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists or lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic function to check list order\n- Optimize for performance with large lists\n- Provide comprehensive documentation\n- Include edge case handling\n- Offer examples for user understanding\nWe will implement a simple function using Python's built-in capabilities to check if a list is monotonic. The function will handle edge cases such as empty lists and lists with identical elements. We will optimize performance by using efficient list traversal techniques.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing' and 'monotonically decreasing'\n    Explanation: A list is monotonically increasing if each element is greater than or equal to the previous element. Similarly, a list is monotonically decreasing if each element is less than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Check if the list is empty or has only one element; in both cases, return True as they are trivially monotonic.\n    - Initialize two flags: one for increasing and one for decreasing.\n    - Traverse the list from the second element to the end:\n        - If an element is greater than the previous one, set the increasing flag to True.\n        - If an element is less than the previous one, set the decreasing flag to True.\n    - If both flags are True, return False (the list is not monotonic).\n    - Otherwise, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list with identical elements is both monotonically increasing and decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the length of the list and handling identical elements.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonically increasing or decreasing. It should handle edge cases such as empty lists and lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic function to check list order\n- Optimize function for large list performance\n- Include comprehensive documentation with examples\n- Handle edge cases like empty lists\n- Ensure compatibility with Python 3.x\nWe will implement a function named 'monotonic' that checks if a list is monotonically increasing or decreasing. The function will handle edge cases such as empty lists and lists with identical elements, considering them as monotonic. We will use Python's built-in capabilities to ensure simplicity and efficiency, avoiding the overhead of external libraries. The function will be optimized for performance to handle large lists efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing': A sequence is monotonically increasing if each element is greater than or equal to the previous one.\n    'monotonically decreasing': A sequence is monotonically decreasing if each element is less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True since such lists are considered monotonic.\n    2. Initialize two flags: one for checking increasing order and another for decreasing order.\n    3. Iterate through the list and compare each element with the next one:\n       - If an element is greater than the next, set the increasing flag to False.\n       - If an element is less than the next, set the decreasing flag to False.\n    4. After the loop, if either flag remains True, return True. Otherwise, return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic by definition.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is considered monotonic since there are no other elements to compare.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list with all identical elements is considered monotonic as it neither increases nor decreases.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as monotonic.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists or lists with identical elements efficiently.\nrequirement pool:\n- Implement monotonic function to check list trends\n- Optimize for performance with large datasets\n- Ensure compatibility with Python's list data type\n- Provide detailed documentation and examples\n- Include error handling for invalid inputs\nWe will implement a simple function to check if a list is monotonic, either increasing or decreasing. The function will handle edge cases such as empty lists and lists with identical elements by considering them as monotonic. We will use Python's built-in capabilities to ensure compatibility and optimize for performance with large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing': A sequence is monotonically increasing if each element is greater than or equal to the previous one.\n    'monotonically decreasing': A sequence is monotonically decreasing if each element is less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True as it is trivially monotonic.\n    2. Initialize two flags, `increasing` and `decreasing`, to True.\n    3. Iterate through the list from the second element to the end:\n        - If the current element is greater than the previous one, set `decreasing` to False.\n        - If the current element is less than the previous one, set `increasing` to False.\n    4. After the loop, return True if either `increasing` or `decreasing` is still True, indicating the list is monotonic.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic by definition.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list with all identical elements is considered monotonic as it does not violate increasing or decreasing conditions.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as monotonic.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists or lists with identical elements efficiently.\nrequirement pool:\n- Implement monotonic function to check list sequences\n- Optimize for performance with large datasets\n- Include comprehensive test cases\n- Provide detailed documentation and examples\n- Ensure compatibility with existing Python data structures\nWe will implement a simple function using Python's built-in capabilities to check if a list is monotonic. The function will iterate through the list to determine if it is either non-decreasing or non-increasing. We will ensure the function handles edge cases such as empty lists and lists with identical elements efficiently. For performance optimization, we will avoid unnecessary computations and use efficient iteration techniques.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing' and 'monotonically decreasing'\n    Explanation: A sequence is monotonically increasing if each element is greater than or equal to the previous one. Similarly, a sequence is monotonically decreasing if each element is less than or equal to the previous one. A sequence that is either purely non-increasing or non-decreasing is considered monotonic.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element, in which case it is trivially monotonic.\n    2. Initialize two flags: one for non-decreasing and one for non-increasing.\n    3. Iterate through the list:\n        - Compare each element with the next one.\n        - Update the flags based on the comparison.\n    4. If either flag remains true throughout the iteration, return True.\n    5. Otherwise, return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic by definition.\n    \n    monotonic([5]) = True\n    Explanation: A list with a single element is trivially monotonic.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered monotonic as it is both non-increasing and non-decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the length of the list and handling lists with identical elements.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists or lists with a single element. Performance is crucial for large datasets, and the function should be easy to understand and use.\nrequirement pool:\n- Implement the main function to check for monotonicity\n- Optimize the function for performance with large lists\n- Include comprehensive test cases\n- Provide detailed documentation and examples\n- Ensure compatibility with different Python versions\nWe will implement a function to check if a list is monotonic by iterating through the list once, comparing each element with the next. This approach ensures optimal performance for large datasets. We will use Python's built-in capabilities to keep the solution simple and efficient, avoiding the need for additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing' and 'monotonically decreasing'\n    Explanation: A sequence is monotonically increasing if each element is greater than or equal to the previous one. Similarly, a sequence is monotonically decreasing if each element is less than or equal to the previous one. A sequence that is either purely non-increasing or non-decreasing is considered monotonic.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'purely': means that the sequence must consistently follow the non-increasing or non-decreasing pattern without any deviation.\n\n# [code logic]\n    1. Initialize two flags, one for checking non-decreasing and another for checking non-increasing.\n    2. Iterate through the list from the first element to the second-to-last element.\n    3. Compare each element with the next one:\n        - If the current element is greater than the next, set the non-decreasing flag to False.\n        - If the current element is less than the next, set the non-increasing flag to False.\n    4. After iterating, if either flag remains True, return True (indicating the list is monotonic).\n    5. If both flags are False, return False.\n\n# [edge case] \n    monotonic([1]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare.\n    \n    monotonic([1, 1, 1]) = True\n    Explanation: All elements are equal, satisfying both non-increasing and non-decreasing conditions.\n    \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: The sequence is non-decreasing as each element is greater than or equal to the previous one.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking both non-decreasing and non-increasing conditions will naturally handle these cases.\n", "requirement analysis:\nThe function should determine if a list is either entirely non-increasing or non-decreasing. It should handle edge cases such as empty lists or lists with a single element. Performance is crucial for large datasets, and the function should be easy to understand and use.\nrequirement pool:\n- Implement the monotonic function to check for non-increasing or non-decreasing sequences.\n- Optimize the function for performance with large lists.\n- Provide comprehensive documentation and examples.\n- Include edge case handling for empty or single-element lists.\n- Ensure compatibility with Python's built-in list type.\nWe will implement a simple Python function to check if a list is monotonic, meaning it is either entirely non-increasing or non-decreasing. We will use built-in Python capabilities to ensure compatibility and optimize for performance with large lists. The function will handle edge cases such as empty lists or lists with a single element. Comprehensive documentation and examples will be provided to ensure usability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing' and 'monotonically decreasing'\n    Explanation: A sequence is monotonically increasing if each element is greater than or equal to the previous one. Similarly, a sequence is monotonically decreasing if each element is less than or equal to the previous one. A sequence that is either purely non-increasing or non-decreasing is considered monotonic.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element, return True as it is trivially monotonic.\n    2. Initialize two flags: one for checking non-decreasing order and another for non-increasing order.\n    3. Iterate through the list and compare each element with the next one.\n    4. Update the flags based on the comparison results.\n    5. If either flag remains True throughout the iteration, return True; otherwise, return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A list with a single element is trivially monotonic as there are no elements to compare.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: All elements are equal, so the list is both non-increasing and non-decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the length of the list at the beginning.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists or lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic function to check list order\n- Optimize function for performance with large lists\n- Provide comprehensive documentation\n- Include edge case handling for empty or identical element lists\n- Ensure compatibility with Python's list data structure\nWe will implement a function that checks if a list is monotonic by iterating through the list once, comparing each element with the next. This approach ensures optimal performance, even for large datasets. We will handle edge cases such as empty lists and lists with identical elements. The function will be simple and efficient, leveraging Python's built-in capabilities without requiring additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing' and 'monotonically decreasing'\n    Explanation: A list is monotonically increasing if each element is greater than or equal to the previous element. A list is monotonically decreasing if each element is less than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element, in which case it is trivially monotonic.\n    2. Initialize two flags: one for increasing and one for decreasing.\n    3. Iterate through the list, comparing each element with the next.\n    4. Update the flags based on the comparison results.\n    5. If both flags are true, return False; otherwise, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A list with a single element is trivially monotonic.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered monotonic as it does not violate increasing or decreasing order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the length of the list and handling lists with identical elements.\n", "requirement analysis:\nThe function should determine if a list is either entirely non-increasing or non-decreasing. It should handle edge cases such as empty lists or lists with a single element. Performance is crucial for large datasets, and the function should be easy to use and understand.\nrequirement pool:\n- Implement the monotonic function to check for increasing or decreasing order.\n- Optimize the function for performance with large lists.\n- Include comprehensive test cases to cover edge cases.\n- Document the function with examples and usage notes.\n- Ensure compatibility with Python 3.x.\nWe will implement a function named 'monotonic' that checks if a list is either monotonically increasing or decreasing. The function will handle edge cases such as empty lists and single-element lists. We will use Python's built-in capabilities to ensure optimal performance for large datasets. The function will be documented with examples and usage notes to ensure clarity and usability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing' and 'monotonically decreasing'\n    Explanation: A list is monotonically increasing if each element is greater than or equal to the previous element. A list is monotonically decreasing if each element is less than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element; if so, return True.\n    2. Iterate through the list and check if each element is greater than or equal to the previous one for increasing order.\n    3. Iterate through the list and check if each element is less than or equal to the previous one for decreasing order.\n    4. Return True if either condition is met, otherwise return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonically increasing and decreasing by default.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is considered monotonically increasing and decreasing by default.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: All elements are equal, so the list is both monotonically increasing and decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the length of the list and comparing elements appropriately.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists and lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic function to check list order\n- Optimize for performance with large lists\n- Include comprehensive documentation with examples\n- Handle edge cases like empty lists\n- Ensure compatibility with Python's list data type\nWe will implement a function to check if a list is monotonic by iterating through the list and comparing each element with the next one. We will use Python's built-in capabilities to ensure compatibility and optimize performance. The function will handle edge cases such as empty lists and lists with identical elements, considering them as monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing' and 'monotonically decreasing'\n    Explanation: A list is monotonically increasing if each element is greater than or equal to the previous element. Similarly, a list is monotonically decreasing if each element is less than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element; return True as it is trivially monotonic.\n    2. Initialize two flags: one for increasing and one for decreasing.\n    3. Iterate through the list and compare each element with the next one.\n    4. If an element is greater than the next, set the decreasing flag to False.\n    5. If an element is less than the next, set the increasing flag to False.\n    6. Return True if either flag remains True after the iteration.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic by definition.\n    \n    monotonic([5]) = True\n    Explanation: A list with a single element is considered monotonic by definition.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered monotonic as it does not violate increasing or decreasing conditions.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as monotonic.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonically increasing or decreasing. It should handle edge cases such as empty lists and lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic function to check increasing or decreasing sequences\n- Optimize function for performance with large lists\n- Include comprehensive documentation with examples\n- Handle edge cases like empty lists and identical elements\n- Ensure compatibility with Python's list data structure\nWe will implement a function that checks if a list is monotonically increasing or decreasing by iterating through the list once, comparing each element with the next. This approach ensures optimal performance even for large lists. We will handle edge cases such as empty lists and lists with identical elements by returning True, as they can be considered trivially monotonic. We will use Python's built-in capabilities to keep the solution simple and efficient.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing' and 'monotonically decreasing'\n    Explanation: A list is monotonically increasing if each element is greater than or equal to the previous one, and monotonically decreasing if each element is less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element; return True as it is trivially monotonic.\n    2. Initialize two flags: one for increasing and one for decreasing.\n    3. Iterate through the list, comparing each element with the next.\n    4. If an element is greater than the next, set the decreasing flag to False.\n    5. If an element is less than the next, set the increasing flag to False.\n    6. After iteration, return True if either flag remains True, indicating monotonicity.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list can be considered trivially monotonic.\n    \n    monotonic([5]) = True\n    Explanation: A list with a single element is trivially monotonic.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered monotonic as it does not violate increasing or decreasing conditions.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by returning True for empty or single-element lists and lists with identical elements.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "completion": "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonically increasing or decreasing.\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonically increasing or decreasing, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Check if the list is empty or has only one element; return True as it is trivially monotonic.\n    if len(l) <= 1:\n        return True\n\n    # Initialize flags for increasing and decreasing\n    is_increasing = True\n    is_decreasing = True\n\n    # Iterate through the list, comparing each element with the next\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            is_decreasing = False\n        elif l[i] > l[i + 1]:\n            is_increasing = False\n\n    # Return True if either flag remains True, indicating monotonicity\n    return is_increasing or is_decreasing\n", "passed": true, "pass": true, "pass_num": 10, "round": 778, "mutate_method": "expand_one2two", "parent_index": 48}
