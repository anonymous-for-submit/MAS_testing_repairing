{"task_id": "HumanEval/81", "prompt": "def numerical_letter_grade(grades):\t\n'''It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She had a specific method in place. Unfortunately, she no longer has access to that code. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B- \n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\nExample:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    '''", "entry_point": "numerical_letter_grade", "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "test": ["def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.367]) == ['A-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.709]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.501]) == ['C-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6.042, 3, 5.935, 5, 5.423]) == ['A', 'B', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.511]) == ['C-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6, 4.502, 2.77, 6.757, 4.66]) == ['A', 'A', 'B', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.309, 3, 3.031, 4, 3.721]) == ['A', 'B', 'B+', 'A+', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1, 1.067, 5.544, 2.104, 6.994]) == ['D', 'D+', 'A', 'C+', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3, 3.93, 1.74, 2.791, 2.576]) == ['B', 'A', 'C', 'B', 'B-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.799]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.104]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6, 2.642, 5.179, 5.542, 7.925]) == ['A', 'B-', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([7.75, 2, 6.21, 4, 7.481]) == ['A', 'C', 'A', 'A+', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3, 1.608, 4.584, 1.801, 5.528]) == ['B', 'C-', 'A', 'C', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.259]) == ['C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4, 2.626, 2.824, 7.424, 5.83]) == ['A+', 'B-', 'B', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.84, 4, 4.974, 6, 5.319]) == ['A', 'A+', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.033]) == ['C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.516]) == ['B-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([9.54, 5, 6.671, 1, 5.784]) == ['A', 'A', 'A', 'D', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1, 5.293, 4.749, 7.907, 5.656]) == ['D', 'A', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6.463, 2, 3.954, 5, 7.145]) == ['A', 'C', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.826]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3, 3.758, 2.783, 2.733, 7.605]) == ['B', 'A', 'B', 'B', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.597]) == ['B-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4, 1.435, 5.824, 1.539, 7.492]) == ['A+', 'C-', 'A', 'C-', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6.423]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.143]) == ['D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.891]) == ['C']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.065, 4, 5.911, 2, 4.43]) == ['A', 'A+', 'A', 'C', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.477, 7, 6.699, 6, 7.022]) == ['A', 'A', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5, 2.658, 2.151, 6.268, 5.527]) == ['A', 'B-', 'C+', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3, 4.558, 2.072, 3.712, 5.809]) == ['B', 'A', 'C+', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3, 4.425, 6.207, 4.631, 3.821]) == ['B', 'A', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.878]) == ['C']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.81]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.976, 4, 1.433, 7, 3.077]) == ['A', 'A+', 'C-', 'A', 'B+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.226]) == ['C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.364]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.946]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4, 3.251, 2.546, 1.98, 3.082]) == ['A+', 'B+', 'B-', 'C', 'B+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.189]) == ['B+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6.618]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.835]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.356]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.612]) == ['A-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.601]) == ['B-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.978]) == ['C']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5, 3.231, 4.961, 5.91, 4.348]) == ['A', 'B+', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([0.5]) == ['D-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.412]) == ['B-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.699]) == ['C-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([9.553, 3, 1.754, 7, 7.712]) == ['A', 'B', 'C', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.909, 4, 3.917, 4, 2.236]) == ['A', 'A+', 'A', 'A+', 'C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5, 4.675, 6.301, 3.928, 5.804]) == ['A', 'A', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.845]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.091]) == ['C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.822]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1, 1.556, 6.189, 3.588, 1.625]) == ['D', 'C-', 'A', 'A-', 'C-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6.134, 3, 6.155, 3, 2.084]) == ['A', 'B', 'A', 'B', 'C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5, 3.839, 3.698, 4.34, 1.955]) == ['A', 'A', 'A-', 'A', 'C']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.813]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.266, 7, 4.913, 2, 1.115]) == ['D+', 'A', 'A', 'C', 'D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.381]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.985]) == ['B']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.314]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([9.317, 8, 3.7, 6, 2.483]) == ['A', 'A', 'A-', 'A', 'B-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.169]) == ['C+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.925]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.275]) == ['D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.076]) == ['D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.906]) == ['C']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6, 5.144, 4.622, 7.362, 8.196]) == ['A', 'A', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.778]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.012]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([0.0]) == ['E']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.873, 3, 2.438, 6, 5.365]) == ['A', 'B', 'B-', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.169]) == ['D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.454]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1, 1.181, 4.176, 7.002, 5.356]) == ['D', 'D+', 'A', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.412]) == ['C-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.054]) == ['B+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.401]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.559]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([2.454, 8, 1.163, 2, 3.831]) == ['B-', 'A', 'D+', 'C', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.288]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.516]) == ['A-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.111]) == ['B+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([3.411]) == ['A-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.415]) == ['C-']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.682]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.152, 7, 2.102, 5, 8.879]) == ['A', 'A', 'C+', 'A', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6, 2.172, 3.849, 1.272, 6.298]) == ['A', 'C+', 'A', 'D+', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.697]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.86]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.2]) == ['D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([6.363]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.886]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([4.202]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([8.911, 1, 5.562, 6, 1.001]) == ['A', 'D', 'A', 'A', 'D+']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([5.442]) == ['A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.32, 8, 4.236, 1, 5.296]) == ['C-', 'A', 'A', 'D', 'A']", "def check(numerical_letter_grade):\n\tassert numerical_letter_grade([1.058, 4, 5.349, 2, 4.304]) == ['D+', 'A+', 'A', 'C', 'A']"], "test_case_list": ["assert numerical_letter_grade([3.367]) == ['A-']", "assert numerical_letter_grade([3.709]) == ['A']", "assert numerical_letter_grade([1.501]) == ['C-']", "assert numerical_letter_grade([6.042, 3, 5.935, 5, 5.423]) == ['A', 'B', 'A', 'A', 'A']", "assert numerical_letter_grade([1.511]) == ['C-']", "assert numerical_letter_grade([6, 4.502, 2.77, 6.757, 4.66]) == ['A', 'A', 'B', 'A', 'A']", "assert numerical_letter_grade([5.309, 3, 3.031, 4, 3.721]) == ['A', 'B', 'B+', 'A+', 'A']", "assert numerical_letter_grade([1, 1.067, 5.544, 2.104, 6.994]) == ['D', 'D+', 'A', 'C+', 'A']", "assert numerical_letter_grade([3, 3.93, 1.74, 2.791, 2.576]) == ['B', 'A', 'C', 'B', 'B-']", "assert numerical_letter_grade([4.799]) == ['A']", "assert numerical_letter_grade([4.104]) == ['A']", "assert numerical_letter_grade([6, 2.642, 5.179, 5.542, 7.925]) == ['A', 'B-', 'A', 'A', 'A']", "assert numerical_letter_grade([7.75, 2, 6.21, 4, 7.481]) == ['A', 'C', 'A', 'A+', 'A']", "assert numerical_letter_grade([3, 1.608, 4.584, 1.801, 5.528]) == ['B', 'C-', 'A', 'C', 'A']", "assert numerical_letter_grade([2.259]) == ['C+']", "assert numerical_letter_grade([4, 2.626, 2.824, 7.424, 5.83]) == ['A+', 'B-', 'B', 'A', 'A']", "assert numerical_letter_grade([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.", "assert numerical_letter_grade([4.84, 4, 4.974, 6, 5.319]) == ['A', 'A+', 'A', 'A', 'A']", "assert numerical_letter_grade([2.033]) == ['C+']", "assert numerical_letter_grade([2.516]) == ['B-']", "assert numerical_letter_grade([9.54, 5, 6.671, 1, 5.784]) == ['A', 'A', 'A', 'D', 'A']", "assert numerical_letter_grade([1, 5.293, 4.749, 7.907, 5.656]) == ['D', 'A', 'A', 'A', 'A']", "assert numerical_letter_grade([6.463, 2, 3.954, 5, 7.145]) == ['A', 'C', 'A', 'A', 'A']", "assert numerical_letter_grade([3.826]) == ['A']", "assert numerical_letter_grade([3, 3.758, 2.783, 2.733, 7.605]) == ['B', 'A', 'B', 'B', 'A']", "assert numerical_letter_grade([2.597]) == ['B-']", "assert numerical_letter_grade([4, 1.435, 5.824, 1.539, 7.492]) == ['A+', 'C-', 'A', 'C-', 'A']", "assert numerical_letter_grade([6.423]) == ['A']", "assert numerical_letter_grade([1.143]) == ['D+']", "assert numerical_letter_grade([1.891]) == ['C']", "assert numerical_letter_grade([5.065, 4, 5.911, 2, 4.43]) == ['A', 'A+', 'A', 'C', 'A']", "assert numerical_letter_grade([4.477, 7, 6.699, 6, 7.022]) == ['A', 'A', 'A', 'A', 'A']", "assert numerical_letter_grade([5, 2.658, 2.151, 6.268, 5.527]) == ['A', 'B-', 'C+', 'A', 'A']", "assert numerical_letter_grade([3, 4.558, 2.072, 3.712, 5.809]) == ['B', 'A', 'C+', 'A', 'A']", "assert numerical_letter_grade([3, 4.425, 6.207, 4.631, 3.821]) == ['B', 'A', 'A', 'A', 'A']", "assert numerical_letter_grade([1.878]) == ['C']", "assert numerical_letter_grade([3.81]) == ['A']", "assert numerical_letter_grade([5.976, 4, 1.433, 7, 3.077]) == ['A', 'A+', 'C-', 'A', 'B+']", "assert numerical_letter_grade([2.226]) == ['C+']", "assert numerical_letter_grade([5.364]) == ['A']", "assert numerical_letter_grade([4.946]) == ['A']", "assert numerical_letter_grade([4, 3.251, 2.546, 1.98, 3.082]) == ['A+', 'B+', 'B-', 'C', 'B+']", "assert numerical_letter_grade([3.189]) == ['B+']", "assert numerical_letter_grade([6.618]) == ['A']", "assert numerical_letter_grade([4.835]) == ['A']", "assert numerical_letter_grade([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']", "assert numerical_letter_grade([5.356]) == ['A']", "assert numerical_letter_grade([3.612]) == ['A-']", "assert numerical_letter_grade([2.601]) == ['B-']", "assert numerical_letter_grade([1.978]) == ['C']", "assert numerical_letter_grade([5, 3.231, 4.961, 5.91, 4.348]) == ['A', 'B+', 'A', 'A', 'A']", "assert numerical_letter_grade([0.5]) == ['D-']", "assert numerical_letter_grade([2.412]) == ['B-']", "assert numerical_letter_grade([1.699]) == ['C-']", "assert numerical_letter_grade([9.553, 3, 1.754, 7, 7.712]) == ['A', 'B', 'C', 'A', 'A']", "assert numerical_letter_grade([5.909, 4, 3.917, 4, 2.236]) == ['A', 'A+', 'A', 'A+', 'C+']", "assert numerical_letter_grade([5, 4.675, 6.301, 3.928, 5.804]) == ['A', 'A', 'A', 'A', 'A']", "assert numerical_letter_grade([4.845]) == ['A']", "assert numerical_letter_grade([2.091]) == ['C+']", "assert numerical_letter_grade([4.822]) == ['A']", "assert numerical_letter_grade([1, 1.556, 6.189, 3.588, 1.625]) == ['D', 'C-', 'A', 'A-', 'C-']", "assert numerical_letter_grade([6.134, 3, 6.155, 3, 2.084]) == ['A', 'B', 'A', 'B', 'C+']", "assert numerical_letter_grade([5, 3.839, 3.698, 4.34, 1.955]) == ['A', 'A', 'A-', 'A', 'C']", "assert numerical_letter_grade([4.813]) == ['A']", "assert numerical_letter_grade([1.266, 7, 4.913, 2, 1.115]) == ['D+', 'A', 'A', 'C', 'D+']", "assert numerical_letter_grade([4.381]) == ['A']", "assert numerical_letter_grade([2.985]) == ['B']", "assert numerical_letter_grade([4.314]) == ['A']", "assert numerical_letter_grade([9.317, 8, 3.7, 6, 2.483]) == ['A', 'A', 'A-', 'A', 'B-']", "assert numerical_letter_grade([2.169]) == ['C+']", "assert numerical_letter_grade([3.925]) == ['A']", "assert numerical_letter_grade([1.275]) == ['D+']", "assert numerical_letter_grade([1.076]) == ['D+']", "assert numerical_letter_grade([1.906]) == ['C']", "assert numerical_letter_grade([6, 5.144, 4.622, 7.362, 8.196]) == ['A', 'A', 'A', 'A', 'A']", "assert numerical_letter_grade([5.778]) == ['A']", "assert numerical_letter_grade([5.012]) == ['A']", "assert numerical_letter_grade([0.0]) == ['E']", "assert numerical_letter_grade([4.873, 3, 2.438, 6, 5.365]) == ['A', 'B', 'B-', 'A', 'A']", "assert numerical_letter_grade([1.169]) == ['D+']", "assert numerical_letter_grade([4.454]) == ['A']", "assert numerical_letter_grade([1, 1.181, 4.176, 7.002, 5.356]) == ['D', 'D+', 'A', 'A', 'A']", "assert numerical_letter_grade([1.412]) == ['C-']", "assert numerical_letter_grade([3.054]) == ['B+']", "assert numerical_letter_grade([5.401]) == ['A']", "assert numerical_letter_grade([5.559]) == ['A']", "assert numerical_letter_grade([2.454, 8, 1.163, 2, 3.831]) == ['B-', 'A', 'D+', 'C', 'A']", "assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']", "assert numerical_letter_grade([5.288]) == ['A']", "assert numerical_letter_grade([3.516]) == ['A-']", "assert numerical_letter_grade([3.111]) == ['B+']", "assert numerical_letter_grade([3.411]) == ['A-']", "assert numerical_letter_grade([1.415]) == ['C-']", "assert numerical_letter_grade([4.682]) == ['A']", "assert numerical_letter_grade([4.152, 7, 2.102, 5, 8.879]) == ['A', 'A', 'C+', 'A', 'A']", "assert numerical_letter_grade([6, 2.172, 3.849, 1.272, 6.298]) == ['A', 'C+', 'A', 'D+', 'A']", "assert numerical_letter_grade([4.697]) == ['A']", "assert numerical_letter_grade([4.86]) == ['A']", "assert numerical_letter_grade([1.2]) == ['D+']", "assert numerical_letter_grade([6.363]) == ['A']", "assert numerical_letter_grade([5.886]) == ['A']", "assert numerical_letter_grade([4.202]) == ['A']", "assert numerical_letter_grade([8.911, 1, 5.562, 6, 1.001]) == ['A', 'D', 'A', 'A', 'D+']", "assert numerical_letter_grade([5.442]) == ['A']", "assert numerical_letter_grade([1.32, 8, 4.236, 1, 5.296]) == ['C-', 'A', 'A', 'D', 'A']", "assert numerical_letter_grade([1.058, 4, 5.349, 2, 4.304]) == ['D+', 'A+', 'A', 'C', 'A']"], "nl": "It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    ", "func": "def numerical_letter_grade(grades):", "examples": "Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    ", "repair_prompt": ["def numerical_letter_grade(grades):\t\n'''It is the last week of the semester and the teacher has to give the grades to students. The teacher has been making her own algorithm for grading. The only problem is, she has lost the code she used for grading. She had a specific method in place. Unfortunately, she no longer has access to that code. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B- \n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\nExample:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    '''", "```python\ndef numerical_letter_grade(grades):\t\n    '''It is the last week of the semester and the teacher has to give the grades to students. The teacher has devoted a lot of time and effort to creating her own algorithm for grading over the weeks. The only problem is, she has lost the code she used for grading. She had a specific method in place. Unfortunately, she no longer has access to that code. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B- \n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\nExample:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    '''\n```", "def numerical_letter_grade(grades):\n'''It is the last week of the semester, and the teacher has to give the grades to students but has been making her own algorithm for grading and lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B- \n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\nExample:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPA values to corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the GPA values.\n    \"\"\"\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa == 3.7:\n            letter_grades.append('A-')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        elif gpa == 0.0:\n            letter_grades.append('E')\n        else:\n            # Handle any unexpected negative GPA values\n            letter_grades.append('Invalid GPA')\n\n    return letter_grades\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPAs to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the input GPAs.\n    \"\"\"\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPA values to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the GPA values.\n    \"\"\"\n    # Define the GPA thresholds and corresponding letter grades\n    gpa_to_letter = [\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-')\n    ]\n\n    # Initialize the list to store the letter grades\n    letter_grades = []\n\n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Handle edge cases for exact GPA values\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa == 0.0:\n            letter_grades.append('E')\n        else:\n            # Find the first tuple where the GPA is greater than the threshold\n            for threshold, letter in gpa_to_letter:\n                if gpa > threshold:\n                    letter_grades.append(letter)\n                    break\n\n    # Return the list of letter grades\n    return letter_grades\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list) -> list:\n    \"\"\"\n    Convert a list of GPAs to corresponding letter grades.\n\n    Parameters:\n    grades (list): A list of GPA values (float or int).\n\n    Returns:\n    list: A list of letter grades corresponding to the input GPAs.\n    \"\"\"\n    # Define the mapping of GPA ranges to letter grades\n    gpa_to_letter = {\n        (3.7, 4.0): 'A',\n        (3.3, 3.7): 'A-',\n        (3.0, 3.3): 'B+',\n        (2.7, 3.0): 'B',\n        (2.3, 2.7): 'B-',\n        (2.0, 2.3): 'C+',\n        (1.7, 2.0): 'C',\n        (1.3, 1.7): 'C-',\n        (1.0, 1.3): 'D+',\n        (0.7, 1.0): 'D',\n        (0.0, 0.7): 'E'\n    }\n\n    # Initialize the list to store letter grades\n    letter_grades = []\n\n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Check if the input is a valid number\n        if not isinstance(gpa, (int, float)):\n            return [\"Error: Non-numeric input detected\"]\n\n        # Check if the GPA is within the valid range\n        if gpa < 0.0 or gpa > 4.0:\n            return [\"Error: Invalid GPA value detected\"]\n\n        # Determine the letter grade based on the GPA\n        for (lower_bound, upper_bound), letter in gpa_to_letter.items():\n            if lower_bound < gpa <= upper_bound:\n                letter_grades.append(letter)\n                break\n        else:\n            # Handle the edge case where GPA is exactly 4.0\n            if gpa == 4.0:\n                letter_grades.append('A+')\n\n    return letter_grades\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPAs to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the input GPAs.\n    \"\"\"\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n\n    return letter_grades\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPAs to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the input GPAs.\n    \"\"\"\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa == 3.7:\n            letter_grades.append('A-')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa == 3.3:\n            letter_grades.append('B+')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa == 3.0:\n            letter_grades.append('B')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa == 2.7:\n            letter_grades.append('B-')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa == 2.3:\n            letter_grades.append('C+')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa == 2.0:\n            letter_grades.append('C')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa == 1.7:\n            letter_grades.append('C-')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa == 1.3:\n            letter_grades.append('D+')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa == 1.0:\n            letter_grades.append('D')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa == 0.7:\n            letter_grades.append('D-')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        elif gpa == 0.0:\n            letter_grades.append('E')\n        else:\n            letter_grades.append('Invalid GPA')\n\n    return letter_grades\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPA values to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the GPA values.\n    \"\"\"\n    letter_grades = []\n\n    for gpa in grades:\n        if not isinstance(gpa, (int, float)):\n            letter_grades.append(\"Invalid GPA\")\n            continue\n\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        elif gpa == 0.0:\n            letter_grades.append('E')\n        else:\n            letter_grades.append(\"Invalid GPA\")\n\n    return letter_grades\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPAs to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the input GPAs.\n    \"\"\"\n    # Define the mapping of GPA ranges to letter grades\n    grade_mapping = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-')\n    ]\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Check for the exact case of 4.0 and 0.0\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa == 0.0:\n            result.append('E')\n        else:\n            # Iterate over the grade mapping to find the correct letter grade\n            for threshold, letter_grade in grade_mapping:\n                if gpa >= threshold:\n                    result.append(letter_grade)\n                    break\n\n    return result\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPAs to their corresponding letter grades.\n\n    Args:\n        grades (list[float]): A list of GPA values.\n\n    Returns:\n        list[str]: A list of letter grades corresponding to the GPAs.\n    \"\"\"\n    # Define the GPA thresholds and corresponding letter grades\n    gpa_to_letter = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-'),\n    ]\n\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Determine the corresponding letter grade for each GPA\n        for threshold, letter in gpa_to_letter:\n            if gpa >= threshold:\n                letter_grades.append(letter)\n                break\n        else:\n            # If GPA is less than 0, assign 'E' grade\n            letter_grades.append('E')\n\n    return letter_grades\n", "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPA values to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the GPA values.\n    \"\"\"\n    letter_grades = []\n    \n    for gpa in grades:\n        if gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades\n"], "plans": ["requirement analysis:\nThe function should accurately map GPA values to letter grades based on the provided table. It should handle edge cases and ensure consistent output. The interface should be intuitive for teachers to input grades and receive results efficiently.\nrequirement pool:\n- Implement GPA to letter grade conversion logic\n- Design a user-friendly interface for grade input\n- Optimize performance for processing large lists\n- Ensure system reliability and consistency\n- Handle edge cases in GPA values\nWe will implement a simple function to convert GPA values to letter grades using conditional statements. The function will handle edge cases by checking exact GPA values and ensuring consistent output. We will use Python's built-in capabilities without any third-party libraries, as the task is straightforward and does not require complex operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically measured on a scale of 0 to 4.0.\n\n    'Letter grade'\n    Explanation: A system of grading students' academic performance using letters such as A, B, C, D, and E, with possible modifiers like + or -.\n\n# [phrase showing quantity relationship]\n    '> 3.7': This means any GPA greater than 3.7 but not equal to 4.0 should be assigned an 'A'.\n    '> 3.3': This means any GPA greater than 3.3 but less than or equal to 3.7 should be assigned an 'A-'.\n    '> 3.0': This means any GPA greater than 3.0 but less than or equal to 3.3 should be assigned a 'B+'.\n    '> 2.7': This means any GPA greater than 2.7 but less than or equal to 3.0 should be assigned a 'B'.\n    '> 2.3': This means any GPA greater than 2.3 but less than or equal to 2.7 should be assigned a 'B-'.\n    '> 2.0': This means any GPA greater than 2.0 but less than or equal to 2.3 should be assigned a 'C+'.\n    '> 1.7': This means any GPA greater than 1.7 but less than or equal to 2.0 should be assigned a 'C'.\n    '> 1.3': This means any GPA greater than 1.3 but less than or equal to 1.7 should be assigned a 'C-'.\n    '> 1.0': This means any GPA greater than 1.0 but less than or equal to 1.3 should be assigned a 'D+'.\n    '> 0.7': This means any GPA greater than 0.7 but less than or equal to 1.0 should be assigned a 'D'.\n    '> 0.0': This means any GPA greater than 0.0 but less than or equal to 0.7 should be assigned a 'D-'.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Initialize an empty list to store the letter grades.\n    - Iterate over each GPA in the input list.\n    - Use conditional statements to determine the corresponding letter grade based on the given table.\n    - Append the determined letter grade to the list.\n    - Return the list of letter grades.\n\n# [edge case] \n    numerical_letter_grade([4.0]) = ['A+']\n    Explanation: A GPA of exactly 4.0 corresponds to an 'A+' grade.\n\n    numerical_letter_grade([0.0]) = ['E']\n    Explanation: A GPA of exactly 0.0 corresponds to an 'E' grade.\n\n    numerical_letter_grade([3.7]) = ['A-']\n    Explanation: A GPA of exactly 3.7 falls into the range for an 'A-' grade.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the conditional logic in the original plan.\n\n", "requirement analysis:\nThe function should accurately map GPAs to letter grades based on the provided table. It should handle edge cases such as exact GPA values and ensure the output is consistent with the example provided.\nrequirement pool:\n- Implement GPA to letter grade conversion logic\n- Ensure the function handles edge cases correctly\n- Optimize for performance with large datasets\n- Design a user-friendly interface for input and output\n- Provide documentation for the grading system\nWe will implement a simple function to convert GPAs to letter grades based on the provided table. The function will use a series of conditional checks to map each GPA to its corresponding letter grade. This approach ensures clarity and reliability. We will use Python's built-in capabilities without any additional libraries, as the task is straightforward and does not require complex data manipulation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically on a scale from 0.0 to 4.0.\n\n    'Letter grade'\n    Explanation: A system of grading students' academic performance using letters (A, B, C, D, E) with possible pluses and minuses to indicate variations within each grade.\n\n# [phrase showing quantity relationship]\n    '> 3.7': means GPA greater than 3.7 corresponds to an 'A' grade.\n    '> 3.3': means GPA greater than 3.3 corresponds to an 'A-' grade.\n    '> 3.0': means GPA greater than 3.0 corresponds to a 'B+' grade.\n    '> 2.7': means GPA greater than 2.7 corresponds to a 'B' grade.\n    '> 2.3': means GPA greater than 2.3 corresponds to a 'B-' grade.\n    '> 2.0': means GPA greater than 2.0 corresponds to a 'C+' grade.\n    '> 1.7': means GPA greater than 1.7 corresponds to a 'C' grade.\n    '> 1.3': means GPA greater than 1.3 corresponds to a 'C-' grade.\n    '> 1.0': means GPA greater than 1.0 corresponds to a 'D+' grade.\n    '> 0.7': means GPA greater than 0.7 corresponds to a 'D' grade.\n    '> 0.0': means GPA greater than 0.0 corresponds to a 'D-' grade.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Define a function `numerical_letter_grade(grades)`.\n    - Initialize an empty list `letter_grades` to store the results.\n    - Iterate over each `gpa` in the `grades` list.\n    - Use a series of conditional checks (if-elif-else) to determine the letter grade based on the provided table:\n        - If `gpa` is equal to 4.0, append 'A+' to `letter_grades`.\n        - If `gpa` is greater than 3.7, append 'A'.\n        - If `gpa` is greater than 3.3, append 'A-'.\n        - If `gpa` is greater than 3.0, append 'B+'.\n        - If `gpa` is greater than 2.7, append 'B'.\n        - If `gpa` is greater than 2.3, append 'B-'.\n        - If `gpa` is greater than 2.0, append 'C+'.\n        - If `gpa` is greater than 1.7, append 'C'.\n        - If `gpa` is greater than 1.3, append 'C-'.\n        - If `gpa` is greater than 1.0, append 'D+'.\n        - If `gpa` is greater than 0.7, append 'D'.\n        - If `gpa` is greater than 0.0, append 'D-'.\n        - Otherwise, append 'E'.\n    - Return the `letter_grades` list.\n\n# [edge case] \n    numerical_letter_grade([4.0]) = ['A+']\n    Explanation: A GPA of exactly 4.0 corresponds directly to an 'A+' grade.\n\n    numerical_letter_grade([0.0]) = ['E']\n    Explanation: A GPA of exactly 0.0 corresponds directly to an 'E' grade.\n\n    numerical_letter_grade([3.85]) = ['A']\n    Explanation: A GPA of 3.85 is greater than 3.7 but less than or equal to 4.0, so it corresponds to an 'A' grade.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the original logic using conditional checks for each range of GPA values.\n\n", "requirement analysis:\nThe function should accurately map GPA values to their corresponding letter grades based on the provided table. It should handle edge cases and ensure that the output is consistent with the grading scale. The function should be efficient and able to process large lists of GPAs quickly.\nrequirement pool:\n- Implement the GPA to letter grade conversion function\n- Ensure the function handles edge cases correctly\n- Optimize the function for performance\n- Develop a user-friendly interface for input\n- Provide detailed documentation for the function\nWe will implement a simple function using Python that maps GPA values to their corresponding letter grades based on the provided table. The function will handle edge cases efficiently and ensure consistent output. We will use Python's built-in capabilities without any third-party libraries, as the task is straightforward and does not require complex operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: GPA stands for Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically measured on a scale from 0.0 to 4.0.\n\n    'Letter grade'\n    Explanation: A letter grade is a traditional method of evaluating a student's performance, typically ranging from A+ (highest) to E (lowest) in this context.\n\n# [phrase showing quantity relationship]\n    '> 3.7': This means any GPA greater than 3.7 should be assigned an 'A'.\n    '> 3.3': This means any GPA greater than 3.3 should be assigned an 'A-'.\n    '> 3.0': This means any GPA greater than 3.0 should be assigned a 'B+'.\n    '> 2.7': This means any GPA greater than 2.7 should be assigned a 'B'.\n    '> 2.3': This means any GPA greater than 2.3 should be assigned a 'B-'.\n    '> 2.0': This means any GPA greater than 2.0 should be assigned a 'C+'.\n    '> 1.7': This means any GPA greater than 1.7 should be assigned a 'C'.\n    '> 1.3': This means any GPA greater than 1.3 should be assigned a 'C-'.\n    '> 1.0': This means any GPA greater than 1.0 should be assigned a 'D+'.\n    '> 0.7': This means any GPA greater than 0.7 should be assigned a 'D'.\n    '> 0.0': This means any GPA greater than 0.0 should be assigned a 'D-'.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Create a function `numerical_letter_grade` that takes a list of GPAs as input.\n2. Define a list of tuples where each tuple contains the GPA threshold and the corresponding letter grade.\n3. Initialize an empty list to store the letter grades.\n4. Iterate over each GPA in the input list.\n5. For each GPA, iterate over the list of tuples and find the first tuple where the GPA is greater than the threshold.\n6. Append the corresponding letter grade to the list of letter grades.\n7. Return the list of letter grades.\n\n# [edge case] \n    numerical_letter_grade([4.0]) = ['A+']\n    Explanation: A GPA of exactly 4.0 corresponds to an 'A+' grade.\n\n    numerical_letter_grade([0.0]) = ['E']\n    Explanation: A GPA of exactly 0.0 corresponds to an 'E' grade.\n\n    numerical_letter_grade([3.7, 3.3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) = ['A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'E']\n    Explanation: Each GPA corresponds to its respective letter grade based on the provided table.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the original logic using the threshold comparison in the tuples list.\n\n", "requirement analysis:\nThe function should accurately map GPAs to letter grades based on the provided table. It should handle edge cases such as exact GPA values and efficiently process large lists of GPAs.\nrequirement pool:\n- Implement GPA to letter grade conversion logic\n- Design a user-friendly interface for input and output\n- Optimize the function for performance with large datasets\n- Include error handling for invalid GPA values\n- Provide detailed documentation for users\nWe will implement a simple function to convert GPAs to letter grades using conditional statements. The function will handle large lists efficiently by iterating through the list once and using a dictionary for mapping. We will use Python's built-in capabilities to ensure performance and simplicity. Error handling will be included for non-numeric inputs and invalid GPA values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: GPA stands for Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically measured on a scale from 0.0 to 4.0.\n\n    'Letter grade'\n    Explanation: A letter grade is a traditional method of evaluating a student's performance, typically ranging from A+ to E, with A+ being the highest and E being the lowest.\n\n# [phrase showing quantity relationship]\n    '> 3.7': This means any GPA greater than 3.7 should be assigned an 'A'.\n    '> 3.3': This means any GPA greater than 3.3 but less than or equal to 3.7 should be assigned an 'A-'.\n    '> 3.0': This means any GPA greater than 3.0 but less than or equal to 3.3 should be assigned a 'B+'.\n    (Continue similarly for other GPA ranges)\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Create a function `numerical_letter_grade(grades)` that takes a list of GPAs as input.\n2. Initialize an empty list `letter_grades` to store the corresponding letter grades.\n3. Iterate over each GPA in the input list `grades`.\n4. For each GPA, use conditional statements to determine the corresponding letter grade based on the provided table.\n5. Append the determined letter grade to the `letter_grades` list.\n6. Return the `letter_grades` list after processing all GPAs.\n\n# [edge case] \n    numerical_letter_grade([4.0]) = ['A+']\n    Explanation: A GPA of 4.0 directly maps to an 'A+' according to the table.\n    \n    numerical_letter_grade([0.0]) = ['E']\n    Explanation: A GPA of 0.0 directly maps to an 'E' according to the table.\n    \n    numerical_letter_grade([2.5, 3.8, 1.2]) = ['B-', 'A', 'D+']\n    Explanation: Each GPA is mapped to its respective letter grade based on the table.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the conditional statements in the original logic.\n", "requirement analysis:\nThe function needs to accurately map GPAs to letter grades based on the provided scale. It should handle edge cases such as exact GPA values and efficiently process large lists of grades.\nrequirement pool:\n- Implement GPA to letter grade conversion logic\n- Design a user-friendly interface for grade input\n- Optimize performance for processing large datasets\n- Include error handling for invalid GPA values\n- Provide documentation for the grading scale\nWe will implement a function that maps GPAs to letter grades using a simple if-elif-else structure. This approach ensures clarity and efficiency, especially for large datasets. We will use Python's built-in capabilities without additional libraries, as the task is straightforward and does not require complex data manipulation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: GPA stands for Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically calculated on a scale from 0.0 to 4.0.\n\n    'Letter grade'\n    Explanation: A letter grade is a traditional method of evaluating a student's performance, typically ranging from A+ to E, with A+ being the highest and E being the lowest.\n\n# [phrase showing quantity relationship]\n    '> 3.7': This means any GPA greater than 3.7 but not equal to 4.0 should be assigned an 'A'.\n    '> 3.3': This means any GPA greater than 3.3 but less than or equal to 3.7 should be assigned an 'A-'.\n    '> 3.0': This means any GPA greater than 3.0 but less than or equal to 3.3 should be assigned a 'B+'.\n    '> 2.7': This means any GPA greater than 2.7 but less than or equal to 3.0 should be assigned a 'B'.\n    '> 2.3': This means any GPA greater than 2.3 but less than or equal to 2.7 should be assigned a 'B-'.\n    '> 2.0': This means any GPA greater than 2.0 but less than or equal to 2.3 should be assigned a 'C+'.\n    '> 1.7': This means any GPA greater than 1.7 but less than or equal to 2.0 should be assigned a 'C'.\n    '> 1.3': This means any GPA greater than 1.3 but less than or equal to 1.7 should be assigned a 'C-'.\n    '> 1.0': This means any GPA greater than 1.0 but less than or equal to 1.3 should be assigned a 'D+'.\n    '> 0.7': This means any GPA greater than 0.7 but less than or equal to 1.0 should be assigned a 'D'.\n    '> 0.0': This means any GPA greater than 0.0 but less than or equal to 0.7 should be assigned a 'D-'.\n    '0.0': This means a GPA of exactly 0.0 should be assigned an 'E'.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Define a function `numerical_letter_grade` that takes a list of GPAs as input.\n    - Initialize an empty list `letter_grades` to store the corresponding letter grades.\n    - Iterate over each GPA in the input list.\n        - Use if-elif-else statements to determine the letter grade based on the given GPA ranges.\n        - Append the corresponding letter grade to the `letter_grades` list.\n    - Return the `letter_grades` list.\n\n# [edge case] \n    numerical_letter_grade([4.0]) = ['A+']\n    Explanation: A GPA of exactly 4.0 corresponds to an 'A+'.\n\n    numerical_letter_grade([0.0]) = ['E']\n    Explanation: A GPA of exactly 0.0 corresponds to an 'E'.\n\n    numerical_letter_grade([2.35]) = ['B-']\n    Explanation: A GPA of 2.35 falls in the range >2.3 and <=2.7, which corresponds to a 'B-'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the if-elif-else structure in the original logic.\n\n", "requirement analysis:\nThe function should accurately map GPAs to letter grades based on the provided table. It should handle edge cases such as exact GPA values and efficiently process large lists of grades.\nrequirement pool:\n- Implement GPA to letter grade conversion logic\n- Design a user-friendly interface for input and output\n- Optimize performance for large datasets\n- Include error handling for invalid GPA values\n- Provide documentation for usage\nWe will implement a function that maps GPAs to letter grades using a simple if-elif structure. This approach is straightforward and efficient for processing large lists. We will use Python's built-in capabilities without any additional libraries, as the task is simple and does not require complex data processing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: GPA stands for Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically measured on a scale from 0.0 to 4.0.\n\n    'Letter grade'\n    Explanation: A letter grade is a traditional method of evaluating a student's performance, typically ranging from A+ to E, with A+ being the highest and E being the lowest.\n\n# [phrase showing quantity relationship]\n    '> 3.7': This means any GPA greater than 3.7 but not equal to 4.0 should be assigned an 'A'.\n    '> 3.3': This means any GPA greater than 3.3 but not equal to 3.7 should be assigned an 'A-'.\n    '> 3.0': This means any GPA greater than 3.0 but not equal to 3.3 should be assigned a 'B+'.\n    '> 2.7': This means any GPA greater than 2.7 but not equal to 3.0 should be assigned a 'B'.\n    '> 2.3': This means any GPA greater than 2.3 but not equal to 2.7 should be assigned a 'B-'.\n    '> 2.0': This means any GPA greater than 2.0 but not equal to 2.3 should be assigned a 'C+'.\n    '> 1.7': This means any GPA greater than 1.7 but not equal to 2.0 should be assigned a 'C'.\n    '> 1.3': This means any GPA greater than 1.3 but not equal to 1.7 should be assigned a 'C-'.\n    '> 1.0': This means any GPA greater than 1.0 but not equal to 1.3 should be assigned a 'D+'.\n    '> 0.7': This means any GPA greater than 0.7 but not equal to 1.0 should be assigned a 'D'.\n    '> 0.0': This means any GPA greater than 0.0 but not equal to 0.7 should be assigned a 'D-'.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Initialize an empty list to store the letter grades.\n    - Iterate over each GPA in the input list.\n    - Use a series of if-elif statements to determine the corresponding letter grade based on the given table.\n    - Append the determined letter grade to the list.\n    - Return the list of letter grades.\n\n# [edge case] \n    numerical_letter_grade([4.0]) = ['A+']\n    Explanation: A GPA of exactly 4.0 corresponds to an 'A+'.\n\n    numerical_letter_grade([0.0]) = ['E']\n    Explanation: A GPA of exactly 0.0 corresponds to an 'E'.\n\n    numerical_letter_grade([3.7, 3.8]) = ['A-', 'A']\n    Explanation: A GPA of exactly 3.7 corresponds to an 'A-', while a GPA of 3.8 corresponds to an 'A'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the if-elif structure in the original logic.\n\n", "requirement analysis:\nThe function must accurately map GPA values to their corresponding letter grades based on the provided table. It should handle edge cases, such as exact GPA values at the boundary of two grades, and ensure the output is consistent with the example provided.\nrequirement pool:\n- Implement the GPA to letter grade conversion function.\n- Create a user interface for inputting GPAs.\n- Optimize the function for performance with large datasets.\n- Ensure the function handles edge cases correctly.\n- Provide documentation and examples for users.\nWe will implement a simple function to convert GPA values to letter grades based on the provided table. The function will iterate over the list of GPAs and map each GPA to its corresponding letter grade using conditional statements. We will ensure that the function handles edge cases, such as exact GPA values at the boundary of two grades, and invalid inputs by returning an error message or skipping them.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically on a scale from 0.0 to 4.0.\n\n    'Letter grade'\n    Explanation: A system of grading students' academic performance using letters (A, B, C, D, E) with possible pluses and minuses to indicate variations within each grade.\n\n# [phrase showing quantity relationship]\n    '> 3.7': means GPA greater than 3.7 corresponds to an 'A' grade.\n    '> 3.3': means GPA greater than 3.3 corresponds to an 'A-' grade.\n    '> 3.0': means GPA greater than 3.0 corresponds to a 'B+' grade.\n    '> 2.7': means GPA greater than 2.7 corresponds to a 'B' grade.\n    '> 2.3': means GPA greater than 2.3 corresponds to a 'B-' grade.\n    '> 2.0': means GPA greater than 2.0 corresponds to a 'C+' grade.\n    '> 1.7': means GPA greater than 1.7 corresponds to a 'C' grade.\n    '> 1.3': means GPA greater than 1.3 corresponds to a 'C-' grade.\n    '> 1.0': means GPA greater than 1.0 corresponds to a 'D+' grade.\n    '> 0.7': means GPA greater than 0.7 corresponds to a 'D' grade.\n    '> 0.0': means GPA greater than 0.0 corresponds to a 'D-' grade.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Create a function `numerical_letter_grade` that takes a list of GPAs as input.\n2. Initialize an empty list `letter_grades` to store the corresponding letter grades.\n3. Iterate over each GPA in the input list:\n   - Use conditional statements to determine the letter grade based on the provided table.\n   - Append the corresponding letter grade to the `letter_grades` list.\n4. Return the `letter_grades` list.\n\n# [edge case] \n    numerical_letter_grade([4.0]) = ['A+']\n    Explanation: A GPA of exactly 4.0 corresponds to an 'A+' grade.\n\n    numerical_letter_grade([0.0]) = ['E']\n    Explanation: A GPA of exactly 0.0 corresponds to an 'E' grade.\n\n    numerical_letter_grade([3.7]) = ['A-']\n    Explanation: A GPA of exactly 3.7 is greater than 3.3 but not greater than 3.7, so it corresponds to an 'A-' grade.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the conditional statements in the original logic.\n\n", "requirement analysis:\nThe requirement is to develop a function that converts a list of GPAs into corresponding letter grades based on a predefined grading scale. The function should be efficient and handle edge cases, such as GPAs exactly on the boundary of two grades.\nrequirement pool:\n- Implement the GPA to letter grade conversion function.\n- Design a user-friendly interface for input and output.\n- Ensure the function handles large datasets efficiently.\n- Include error handling for invalid GPA inputs.\n- Provide documentation and examples for users.\nWe will implement a simple Python function that maps GPA values to letter grades using a predefined grading scale. The function will iterate over the list of GPAs and use conditional statements to determine the corresponding letter grade for each GPA. We will ensure the function is efficient and can handle large datasets by using a straightforward loop and conditional checks. We will also include basic error handling to manage any non-numeric inputs, assuming that all inputs should be valid GPAs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA': Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically on a scale from 0.0 to 4.0.\n    'Letter grade': A representation of a student's performance, typically ranging from A+ to E, with A+ being the highest.\n\n# [phrase showing quantity relationship]\n    '> 3.7': GPA greater than 3.7 corresponds to an 'A' grade.\n    '> 3.3': GPA greater than 3.3 corresponds to an 'A-' grade.\n    '> 3.0': GPA greater than 3.0 corresponds to a 'B+' grade.\n    '> 2.7': GPA greater than 2.7 corresponds to a 'B' grade.\n    '> 2.3': GPA greater than 2.3 corresponds to a 'B-' grade.\n    '> 2.0': GPA greater than 2.0 corresponds to a 'C+' grade.\n    '> 1.7': GPA greater than 1.7 corresponds to a 'C' grade.\n    '> 1.3': GPA greater than 1.3 corresponds to a 'C-' grade.\n    '> 1.0': GPA greater than 1.0 corresponds to a 'D+' grade.\n    '> 0.7': GPA greater than 0.7 corresponds to a 'D' grade.\n    '> 0.0': GPA greater than 0.0 corresponds to a 'D-' grade.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Iterate over each GPA in the list.\n    - Use conditional statements to map each GPA to its corresponding letter grade based on the predefined grading scale.\n    - Handle the case where GPA is exactly 4.0 or 0.0 separately as they correspond directly to 'A+' and 'E' respectively.\n    - Return the list of letter grades.\n\n# [edge case]\n    numerical_letter_grade([4.0, 0.0]) = ['A+', 'E']\n    Explanation: GPA of 4.0 directly maps to 'A+' and GPA of 0.0 directly maps to 'E'.\n    \n    numerical_letter_grade([3.7, 3.3, 2.7]) = ['A', 'A-', 'B']\n    Explanation: Each GPA falls into its respective range according to the grading scale.\n\n    numerical_letter_grade([1.5, 2.5, 3.5]) = ['C-', 'B-', 'A-']\n    Explanation: Each GPA falls into its respective range according to the grading scale.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the conditional logic in the original plan.\n\n", "requirement analysis:\nThe function needs to accurately map GPA values to letter grades based on the provided table. It should handle edge cases, such as exact GPA values at the boundary of two grades, and be efficient enough to process a large list of GPAs.\nrequirement pool:\n- Implement the GPA to letter grade conversion function.\n- Design a simple UI for inputting GPAs.\n- Ensure the function handles large datasets efficiently.\n- Add error handling for invalid GPA inputs.\n- Provide documentation for the grading scale.\nWe will implement a simple function to convert GPAs to letter grades using a predefined mapping table. The function will iterate over the list of GPAs and use conditional statements to determine the corresponding letter grade for each GPA. We will use Python's built-in capabilities to handle the list processing efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically measured on a scale of 0 to 4.0.\n\n    'Letter grade'\n    Explanation: A system of grading students' academic performance using letters (A, B, C, D, E) to represent different levels of achievement.\n\n# [phrase showing quantity relationship]\n    '> 3.7': means GPA greater than 3.7 corresponds to an 'A' grade.\n    '> 3.3': means GPA greater than 3.3 corresponds to an 'A-' grade.\n    '> 3.0': means GPA greater than 3.0 corresponds to a 'B+' grade.\n    '> 2.7': means GPA greater than 2.7 corresponds to a 'B' grade.\n    '> 2.3': means GPA greater than 2.3 corresponds to a 'B-' grade.\n    '> 2.0': means GPA greater than 2.0 corresponds to a 'C+' grade.\n    '> 1.7': means GPA greater than 1.7 corresponds to a 'C' grade.\n    '> 1.3': means GPA greater than 1.3 corresponds to a 'C-' grade.\n    '> 1.0': means GPA greater than 1.0 corresponds to a 'D+' grade.\n    '> 0.7': means GPA greater than 0.7 corresponds to a 'D' grade.\n    '> 0.0': means GPA greater than 0.0 corresponds to a 'D-' grade.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Create a function `numerical_letter_grade` that takes a list of GPAs as input.\n2. Define a list of tuples representing the GPA thresholds and their corresponding letter grades in descending order.\n3. Initialize an empty list `letter_grades` to store the results.\n4. Iterate over each GPA in the input list:\n   - For each GPA, iterate over the list of tuples:\n     - If the GPA is greater than the threshold, append the corresponding letter grade to `letter_grades` and break the loop.\n5. Return the `letter_grades` list.\n\n# [edge case] \n    numerical_letter_grade([4.0]) = ['A+']\n    Explanation: A GPA of exactly 4.0 corresponds to an 'A+' grade.\n\n    numerical_letter_grade([0.0]) = ['E']\n    Explanation: A GPA of exactly 0.0 corresponds to an 'E' grade.\n\n    numerical_letter_grade([2.35]) = ['B-']\n    Explanation: A GPA of 2.35 is greater than 2.3 but less than or equal to 2.7, so it corresponds to a 'B-' grade.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as they are covered by the original logic using conditional checks for each GPA threshold in descending order.\n", "requirement analysis:\nThe function needs to accurately map GPA values to letter grades based on the provided table. It should handle edge cases such as exact GPA values and efficiently process large lists.\nrequirement pool:\n- Implement GPA to letter grade conversion logic\n- Optimize for performance with large datasets\n- Design a user-friendly interface for input and output\n- Include error handling for invalid GPA values\n- Provide documentation for usage\nWe will implement a simple function to convert GPA values to letter grades based on the provided table. The function will iterate over the list of GPAs and map each GPA to its corresponding letter grade using conditional statements. We will ensure the function handles edge cases, such as exact GPA values, and efficiently processes large lists. We will use Python's built-in capabilities without additional libraries, as the task is straightforward and does not require complex data processing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'GPA'\n    Explanation: GPA stands for Grade Point Average, a standard way of measuring academic achievement in the U.S. It is typically on a scale from 0.0 to 4.0.\n\n    'Letter grade'\n    Explanation: Letter grades are a way of representing academic performance, typically ranging from A+ (highest) to E (lowest).\n\n# [phrase showing quantity relationship]\n    '> 3.7': means GPA greater than 3.7 corresponds to an 'A' grade.\n    '> 3.3': means GPA greater than 3.3 corresponds to an 'A-' grade.\n    '> 3.0': means GPA greater than 3.0 corresponds to a 'B+' grade.\n    '> 2.7': means GPA greater than 2.7 corresponds to a 'B' grade.\n    '> 2.3': means GPA greater than 2.3 corresponds to a 'B-' grade.\n    '> 2.0': means GPA greater than 2.0 corresponds to a 'C+' grade.\n    '> 1.7': means GPA greater than 1.7 corresponds to a 'C' grade.\n    '> 1.3': means GPA greater than 1.3 corresponds to a 'C-' grade.\n    '> 1.0': means GPA greater than 1.0 corresponds to a 'D+' grade.\n    '> 0.7': means GPA greater than 0.7 corresponds to a 'D' grade.\n    '> 0.0': means GPA greater than 0.0 corresponds to a 'D-' grade.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Iterate over each GPA in the list.\n    - Use conditional statements to map each GPA to its corresponding letter grade based on the provided table.\n    - Return the list of letter grades.\n\n# [edge case] \n    numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7]) = ['A+', 'A', 'A-', 'B+', 'B']\n    Explanation: Each GPA exactly matches the boundary conditions for the respective letter grades.\n\n    numerical_letter_grade([0.0, 0.1, 0.5, 0.9]) = ['E', 'D-', 'D-', 'D-']\n    Explanation: GPAs less than or equal to 0 are graded as 'E', and those greater than 0 but less than or equal to 1 are graded as 'D-'.\n\n    numerical_letter_grade([2.5, 2.8, 3.5, 3.9]) = ['B-', 'B', 'A-', 'A']\n    Explanation: Each GPA falls within the range for its respective letter grade.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the conditional logic inherently handles all possible GPA values within the specified ranges.\n\n"], "scores": [1.0, 1.0, 1.0, 0.3396, 1.0, 1.0, 1.0, 0.3585, 0.3491, 0.8962], "pass_results": [true, true, true, false, true, true, true, false, false, false], "pass_test_cases_num": [106, 106, 106, 36, 106, 106, 106, 38, 37, 95], "completion": "from typing import List\n## main.py\n\ndef numerical_letter_grade(grades: list[float]) -> list[str]:\n    \"\"\"\n    Convert a list of GPA values to their corresponding letter grades.\n\n    Parameters:\n    grades (list of float): A list of GPA values.\n\n    Returns:\n    list of str: A list of letter grades corresponding to the GPA values.\n    \"\"\"\n    letter_grades = []\n    \n    for gpa in grades:\n        if gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades\n", "passed": true, "pass": true, "pass_num": 6, "round": 318, "mutate_method": "expand_one2two", "parent_index": 157}
