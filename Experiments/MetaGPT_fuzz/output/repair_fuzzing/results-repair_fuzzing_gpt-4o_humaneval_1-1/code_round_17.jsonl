{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure the input does not contain any invalid numerals before processing.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": ["def check(sort_numbers):\n\tassert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one\") == 'one'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four three six\") == 'three four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one six four\") == 'one four six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two\") == 'one two'", "def check(sort_numbers):\n\tassert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four five five one one\") == 'one one four five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four zero two five\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight\") == 'eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six three\") == 'three six'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero\") == 'zero seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four three zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven\") == 'seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six nine three\") == 'three six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one nine three\") == 'one three four nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "def check(sort_numbers):\n\tassert sort_numbers('three five nine') == 'three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three\") == 'zero three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one seven\") == 'one four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six\") == 'six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"four two seven\") == 'two four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three four five\") == 'three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five four zero\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three seven two\") == 'two three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four six four one\") == 'one four four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight six three\") == 'three six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three five\") == 'three five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four\") == 'four'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero four one\") == 'zero one four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine\") == 'nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three\") == 'three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three four zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five\") == 'five'", "def check(sort_numbers):\n\tassert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers('three') == 'three'", "def check(sort_numbers):\n\tassert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six\") == 'six'", "def check(sort_numbers):\n\tassert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five\") == 'five eight'", "def check(sort_numbers):\n\tassert sort_numbers('') == ''", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine nine five\") == 'five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three\") == 'three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero\") == 'zero'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine zero\") == 'zero nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one six two seven\") == 'one two six seven'"], "test_case_list": ["assert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "assert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "assert sort_numbers(\"one\") == 'one'", "assert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "assert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "assert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "assert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "assert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "assert sort_numbers(\"four four three six\") == 'three four four six'", "assert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "assert sort_numbers(\"nine one six four\") == 'one four six nine'", "assert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "assert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "assert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "assert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "assert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "assert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "assert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "assert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "assert sort_numbers(\"one two\") == 'one two'", "assert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "assert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "assert sort_numbers(\"four five five one one\") == 'one one four five five'", "assert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "assert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "assert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "assert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "assert sort_numbers(\"four zero two five\") == 'zero two four five'", "assert sort_numbers(\"eight\") == 'eight'", "assert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "assert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "assert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "assert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "assert sort_numbers(\"six three\") == 'three six'", "assert sort_numbers(\"seven zero\") == 'zero seven'", "assert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "assert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "assert sort_numbers(\"four three zero\") == 'zero three four'", "assert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "assert sort_numbers(\"seven\") == 'seven'", "assert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "assert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "assert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "assert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "assert sort_numbers(\"six nine three\") == 'three six nine'", "assert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "assert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "assert sort_numbers(\"four one nine three\") == 'one three four nine'", "assert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "assert sort_numbers('three five nine') == 'three five nine'", "assert sort_numbers(\"zero three\") == 'zero three'", "assert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "assert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "assert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "assert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "assert sort_numbers(\"four one seven\") == 'one four seven'", "assert sort_numbers(\"seven six\") == 'six seven'", "assert sort_numbers(\"four two seven\") == 'two four seven'", "assert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "assert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "assert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "assert sort_numbers(\"nine three four five\") == 'three four five nine'", "assert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "assert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "assert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "assert sort_numbers(\"two five four zero\") == 'zero two four five'", "assert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "assert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "assert sort_numbers(\"three seven two\") == 'two three seven'", "assert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "assert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "assert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "assert sort_numbers(\"four four six four one\") == 'one four four four six'", "assert sort_numbers(\"eight six three\") == 'three six eight'", "assert sort_numbers(\"five three five\") == 'three five five'", "assert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "assert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "assert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "assert sort_numbers(\"four\") == 'four'", "assert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "assert sort_numbers(\"six zero four one\") == 'zero one four six'", "assert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "assert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "assert sort_numbers(\"nine\") == 'nine'", "assert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "assert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "assert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "assert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "assert sort_numbers(\"three\") == 'three'", "assert sort_numbers(\"three four zero\") == 'zero three four'", "assert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "assert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "assert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "assert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "assert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "assert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "assert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "assert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "assert sort_numbers(\"five\") == 'five'", "assert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "assert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "assert sort_numbers('three') == 'three'", "assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "assert sort_numbers(\"six\") == 'six'", "assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "assert sort_numbers(\"eight five\") == 'five eight'", "assert sort_numbers('') == ''", "assert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "assert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "assert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "assert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "assert sort_numbers(\"nine nine five\") == 'five nine nine'", "assert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "assert sort_numbers(\"seven three\") == 'three seven'", "assert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "assert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "assert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "assert sort_numbers(\"zero\") == 'zero'", "assert sort_numbers(\"nine zero\") == 'zero nine'", "assert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "assert sort_numbers(\"one six two seven\") == 'one two six seven'"], "nl": " Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    ", "func": "def sort_numbers(numbers: str) -> str:", "examples": ">>> sort_numbers('three one five')\n    'one three five'\n    ", "repair_prompt": ["def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure the input does not contain any invalid numerals before processing.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. All of these choices are considered acceptable input values for this function. Return the string with numbers sorted from smallest to largest. Ensure the input does not contain any invalid numerals before processing.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'; valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure the input does not contain any invalid numerals before processing.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A space-delimited string of numerals sorted from smallest to largest.\n             Returns an error message if any invalid numeral is found.\n    \"\"\"\n    # Edge case: If the input string is empty, return an empty string\n    if not numbers.strip():\n        return ''\n\n    # Mapping of numeral words to their corresponding integer values\n    valid_numerals = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Validate each word to ensure it is a valid numeral\n    for word in words:\n        if word not in valid_numerals:\n            return \"Error: Invalid numeral found\"\n\n    # Map each valid numeral to its corresponding integer value\n    integer_values = [valid_numerals[word] for word in words]\n\n    # Sort the list of integers\n    integer_values.sort()\n\n    # Map the sorted integers back to their numeral string representation\n    sorted_numerals = [list(valid_numerals.keys())[list(valid_numerals.values()).index(value)] for value in integer_values]\n\n    # Join the sorted numeral strings into a single space-delimited string\n    sorted_string = ' '.join(sorted_numerals)\n\n    return sorted_string\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine'.\n    Returns the string with numbers sorted from smallest to largest.\n    Raises ValueError if any invalid numerals are found.\n    \n    Parameters:\n    numbers (str): A space-delimited string of numerals.\n    \n    Returns:\n    str: A space-delimited string of sorted numerals.\n    \"\"\"\n    \n    # Dictionary to map numeral words to their corresponding numeric values\n    valid_numerals = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Handle edge case for empty input\n    if not numbers:\n        return ''\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Validate input to ensure all words are valid numerals\n    if any(word not in valid_numerals for word in words):\n        raise ValueError(\"Input contains invalid numerals.\")\n    \n    # Convert words to their numeric values\n    numeric_values = [valid_numerals[word] for word in words]\n    \n    # Sort the numeric values\n    numeric_values.sort()\n    \n    # Map sorted numeric values back to their word form\n    sorted_words = [list(valid_numerals.keys())[list(valid_numerals.values()).index(value)] for value in numeric_values]\n    \n    # Join the sorted words into a space-delimited string and return\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numeral words from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A space-delimited string of numerals sorted from smallest to largest.\n             If the input contains invalid numerals, returns an error message.\n    \"\"\"\n    # Dictionary to map numeral words to their corresponding numeric values\n    valid_numerals = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Handle empty input string\n    if not numbers:\n        return ''\n\n    # Split the input string into a list of words\n    words = numbers.split()\n\n    # Validate each word to ensure it is a valid numeral\n    for word in words:\n        if word not in valid_numerals:\n            return \"Invalid input\"\n\n    # Sort the list of words based on their numeric values\n    sorted_words = sorted(words, key=lambda x: valid_numerals[x])\n\n    # Join the sorted words into a space-delimited string and return it\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numeral words from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A space-delimited string of numerals sorted in ascending order.\n\n    Raises:\n        ValueError: If the input contains invalid numeral words.\n    \"\"\"\n    # Dictionary to map numeral words to their corresponding numeric values\n    valid_numerals = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Handle the edge case of an empty input string\n    if not numbers:\n        return ''\n\n    # Split the input string into a list of numeral words\n    numeral_list = numbers.split()\n\n    # Validate that all words in the input are valid numeral words\n    if any(numeral not in valid_numerals for numeral in numeral_list):\n        raise ValueError(\"Input contains invalid numerals.\")\n\n    # Sort the numeral words based on their numeric values\n    sorted_numerals = sorted(numeral_list, key=lambda x: valid_numerals[x])\n\n    # Join the sorted numeral words back into a space-delimited string\n    return ' '.join(sorted_numerals)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine'.\n    Validates input and returns sorted numerals as a string.\n    \n    Parameters:\n    numbers (str): A space-delimited string of numerals.\n    \n    Returns:\n    str: A space-delimited string of sorted numerals.\n    \n    Raises:\n    ValueError: If the input contains invalid numerals.\n    \"\"\"\n    # Edge case: If the input string is empty, return an empty string\n    if not numbers:\n        return ''\n    \n    # Define a mapping from numeral words to their corresponding numeric values\n    valid_numerals = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Validate each word to ensure it is a valid numeral\n    for word in words:\n        if word not in valid_numerals:\n            raise ValueError(\"Invalid numeral found\")\n    \n    # Map each word to its corresponding numeric value\n    numeric_values = [valid_numerals[word] for word in words]\n    \n    # Sort the list of numeric values\n    numeric_values.sort()\n    \n    # Map the sorted numeric values back to their word form\n    sorted_words = [list(valid_numerals.keys())[list(valid_numerals.values()).index(num)] for num in numeric_values]\n    \n    # Join the sorted words into a single space-delimited string and return it\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numeral words from 'zero' to 'nine'.\n    \n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n        \n    Returns:\n        str: A space-delimited string of numerals sorted from smallest to largest.\n        \n    Raises:\n        ValueError: If the input contains any invalid numerals.\n    \"\"\"\n    # Define valid numeral words\n    valid_numerals = {'zero', 'one', 'two', 'three', 'four', 'five', \n                      'six', 'seven', 'eight', 'nine'}\n    \n    # Handle empty input\n    if not numbers:\n        return ''\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Validate the input words\n    if any(word not in valid_numerals for word in words):\n        raise ValueError(\"Error: Invalid numeral found\")\n    \n    # Mapping from numeral words to their numeric values\n    numeral_to_value = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Mapping from numeric values back to numeral words\n    value_to_numeral = {v: k for k, v in numeral_to_value.items()}\n    \n    # Convert words to their numeric values\n    values = [numeral_to_value[word] for word in words]\n    \n    # Sort the numeric values\n    values.sort()\n    \n    # Convert sorted numeric values back to words\n    sorted_words = [value_to_numeral[value] for value in values]\n    \n    # Join the sorted words into a space-delimited string\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A space-delimited string of numerals sorted from smallest to largest.\n\n    Raises:\n        ValueError: If any invalid numeral is found in the input.\n    \"\"\"\n    valid_numerals = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    if not numbers:\n        return ''\n\n    words = numbers.split()\n\n    for word in words:\n        if word not in valid_numerals:\n            raise ValueError(f\"Invalid numeral: {word}\")\n\n    sorted_numbers = sorted(words, key=lambda x: valid_numerals[x])\n\n    return ' '.join(sorted_numbers)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A sorted string of numerals in ascending order.\n    \"\"\"\n    # Dictionary to map numeral strings to their corresponding integer values\n    numeral_to_integer = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Dictionary to map integer values back to numeral strings\n    integer_to_numeral = {v: k for k, v in numeral_to_integer.items()}\n\n    # Validate input and split into list of numeral strings\n    numeral_list = numbers.split()\n    for numeral in numeral_list:\n        if numeral not in numeral_to_integer:\n            return \"Error: Invalid numeral input.\"\n\n    # Convert numeral strings to integers\n    integer_list = [numeral_to_integer[numeral] for numeral in numeral_list]\n\n    # Sort the list of integers\n    integer_list.sort()\n\n    # Convert sorted integers back to numeral strings\n    sorted_numeral_list = [integer_to_numeral[integer] for integer in integer_list]\n\n    # Join the sorted numeral strings into a single space-delimited string\n    sorted_numbers = ' '.join(sorted_numeral_list)\n\n    return sorted_numbers\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n    \n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n        \n    Returns:\n        str: A space-delimited string of numerals sorted in ascending order.\n             If the input contains invalid numerals, returns an error message.\n    \"\"\"\n    # Define a mapping from numeral words to their corresponding integer values\n    valid_numerals = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Handle edge case for empty input string\n    if not numbers.strip():\n        return ''\n    \n    # Split the input string into a list of numeral words\n    numeral_list = numbers.split()\n    \n    # Validate the input to ensure all numerals are valid\n    if any(numeral not in valid_numerals for numeral in numeral_list):\n        return \"Error: Invalid numeral detected.\"\n    \n    # Sort the numerals based on their integer values\n    sorted_numerals = sorted(numeral_list, key=lambda x: valid_numerals[x])\n    \n    # Join the sorted numerals back into a space-delimited string\n    return ' '.join(sorted_numerals)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A space-delimited string of numerals sorted in ascending order.\n    \"\"\"\n    # Dictionary mapping numeral words to their corresponding numeric values\n    numeral_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Edge case: If the input string is empty or only contains spaces, return an empty string\n    if not numbers.strip():\n        return ''\n\n    # Split the input string into a list of numeral words\n    numeral_words = numbers.split()\n\n    # Validate each word in the list to ensure it is a valid numeral\n    for word in numeral_words:\n        if word not in numeral_to_value:\n            raise ValueError(f\"Invalid numeral word: {word}\")\n\n    # Convert the list of numeral words into their numeric values using the dictionary\n    numeric_values = [numeral_to_value[word] for word in numeral_words]\n\n    # Sort the list of numeric values\n    numeric_values.sort()\n\n    # Convert the sorted numeric values back into their corresponding numeral words\n    value_to_numeral = {v: k for k, v in numeral_to_value.items()}\n    sorted_numeral_words = [value_to_numeral[value] for value in numeric_values]\n\n    # Join the sorted numeral words into a space-delimited string and return it\n    return ' '.join(sorted_numeral_words)\n\n# Example usage:\n# print(sort_numbers('three one five'))  # Output: 'one three five'\n# print(sort_numbers('nine eight seven six five four three two one zero'))  # Output: 'zero one two three four five six seven eight nine'\n# print(sort_numbers('zero zero zero'))  # Output: 'zero zero zero'\n# print(sort_numbers(''))  # Output: ''\n"], "plans": ["requirement analysis:\nThe function should accurately sort a space-delimited string of numerals from 'zero' to 'nine'. It must validate the input to ensure all numerals are valid before sorting. The solution should handle large inputs efficiently and provide user-friendly error messages for invalid inputs.\nrequirement pool:\n- Implement numeral sorting functionality\n- Validate input for invalid numerals\n- Optimize sorting performance\n- Provide error messages for invalid input\n- Support large input sizes\nWe will implement a function that first validates the input string to ensure all numerals are valid. If any invalid numeral is found, it will return an error message. Otherwise, it will map the numerals to their corresponding integer values, sort them, and map them back to their numeral string representation. The function will handle large inputs efficiently using Python's built-in sorting capabilities.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where each word is separated by a space, and each word represents a numeral from 'zero' to 'nine'.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The input string consists of words that represent numbers from 0 to 9.\n\n    'sorted from smallest to largest'\n    Explanation: The output should be a string where the numerals are arranged in ascending order based on their numeric value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest to largest': means that the numerals should be ordered in increasing order based on their numeric value.\n\n# [code logic]\n1. Split the input string into individual words (numerals).\n2. Validate each word to ensure it is a valid numeral ('zero' to 'nine').\n3. Map each valid numeral to its corresponding integer value.\n4. Sort the list of integers.\n5. Map the sorted integers back to their numeral string representation.\n6. Join the sorted numeral strings into a single space-delimited string.\n7. Return the sorted string.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string since there are no numerals to sort.\n\n    sort_numbers('zero zero zero') = 'zero zero zero'\n    Explanation: All numerals are the same, so the sorted order is the same as the input.\n\n    sort_numbers('nine eight seven six five four three two one zero') = 'zero one two three four five six seven eight nine'\n    Explanation: The input contains all numerals in reverse order, and the function should return them in ascending order.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not numbers.strip():\n            return ''\n        valid_numerals = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n        words = numbers.split()\n        for word in words:\n            if word not in valid_numerals:\n                return \"Error: Invalid numeral found\"\n        # (other code for sorting and returning the result)\n", "requirement analysis:\nThe function must accurately sort a string of numerals from 'zero' to 'nine'. It should validate the input to ensure all numerals are valid before sorting. The solution should handle large inputs efficiently and provide user feedback for any errors.\nrequirement pool:\n- Implement numeral sorting functionality\n- Validate input for valid numerals\n- Optimize sorting performance\n- Provide error messages for invalid input\n- Support large input sizes\nWe will implement a function that first validates the input string to ensure all words are valid numerals from 'zero' to 'nine'. We will use a dictionary to map these words to their corresponding numeric values for sorting. After sorting, we will map the numbers back to their word form. The function will handle edge cases such as empty input and provide error messages for invalid numerals. The implementation will be optimized for performance using Python's built-in sorting capabilities.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where each numeral is separated by a space.\n\n    'numerals from zero to nine'\n    Explanation: The input string can only contain words representing numbers from zero to nine.\n\n# [phrase showing quantity relationship]\n    'smallest to largest'\n    Explanation: The numerals need to be sorted in ascending order based on their numeric value.\n\n# [degree adverb]\n    'smallest': Refers to the lowest numeric value in the list.\n    'largest': Refers to the highest numeric value in the list.\n\n# [code logic]\n1. Validate the input string to ensure all words are valid numerals from 'zero' to 'nine'.\n2. Use a dictionary to map these words to their corresponding numeric values.\n3. Convert the input string into a list of numeric values using the dictionary.\n4. Sort the list of numeric values.\n5. Map the sorted numeric values back to their word form using the dictionary.\n6. Join the sorted words into a space-delimited string and return it.\n\n# [edge case]\n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The input contains valid numerals, and they should be sorted in ascending order.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All numerals are the same, so the output remains unchanged.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not numbers:\n            return ''\n        valid_numerals = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n        words = numbers.split()\n        if any(word not in valid_numerals for word in words):\n            raise ValueError(\"Input contains invalid numerals.\")\n        numeric_values = [valid_numerals[word] for word in words]\n        numeric_values.sort()\n        sorted_words = [list(valid_numerals.keys())[list(valid_numerals.values()).index(value)] for value in numeric_values]\n        return ' '.join(sorted_words)\n", "requirement analysis:\nThe requirement is to sort a string of numerals from 'zero' to 'nine'. The function must validate the input to ensure all numerals are valid before sorting. The output should be a space-delimited string of numerals sorted in ascending order.\nrequirement pool:\n- Implement numeral sorting functionality\n- Validate input numerals\n- Provide user-friendly error messages\n- Design an intuitive user interface\n- Optimize performance for large inputs\nWe will implement a function that first validates the input string to ensure all words are valid numerals from 'zero' to 'nine'. We will use a dictionary to map these words to their corresponding numeric values for sorting. After sorting, we will map the numbers back to their word form and return the result as a space-delimited string. The function will also handle invalid inputs by returning an appropriate error message.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces, and each word represents a numeral from 'zero' to 'nine'.\n\n    'valid numerals'\n    Explanation: The input string should only contain words that are valid numerals ('zero' to 'nine').\n\n# [phrase showing quantity relationship]\n    'smallest to largest': This indicates that the numerals should be sorted in ascending order based on their numeric value.\n\n# [degree adverb] \n    'smallest': Refers to the lowest numeric value in the list of numerals.\n    'largest': Refers to the highest numeric value in the list of numerals.\n\n# [code logic]\n1. Split the input string into a list of words.\n2. Validate each word to ensure it is a valid numeral from 'zero' to 'nine'.\n3. Use a dictionary to map each numeral word to its corresponding numeric value.\n4. Sort the list of numerals based on their numeric values.\n5. Map the sorted numeric values back to their word form.\n6. Join the sorted words into a space-delimited string and return it.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty string as there are no numerals to sort.\n\n    sort_numbers('zero nine eight') = 'eight nine zero'\n    Explanation: The numerals should be sorted in ascending order based on their numeric values: zero (0), eight (8), nine (9).\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All numerals are the same, so the sorted order remains unchanged.\n\n# [extra code for edge case]\n    We need extra code to handle invalid inputs.\n        valid_numerals = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n        \n        def sort_numbers(numbers: str) -> str:\n            if not numbers:\n                return ''\n            \n            words = numbers.split()\n            for word in words:\n                if word not in valid_numerals:\n                    return \"Invalid input\"\n            \n            sorted_words = sorted(words, key=lambda x: valid_numerals[x])\n            return ' '.join(sorted_words)\n", "requirement analysis:\nThe function should take a string of numerals, validate them, and return a sorted string. It must handle invalid inputs and edge cases effectively.\nrequirement pool:\n- Implement numeral validation to ensure only valid inputs are processed.\n- Develop the sorting algorithm to arrange numerals in ascending order.\n- Create user notifications for invalid inputs.\n- Optimize the function for performance with large inputs.\n- Design a user-friendly interface for input and output.\nWe will implement a function that first validates the input string to ensure it contains only valid numeral words from 'zero' to 'nine'. Then, we will map these words to their corresponding numeric values, sort them, and map them back to their word form for the output. We will use Python's built-in sorting capabilities for efficiency and simplicity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces, and each word represents a numeral from 'zero' to 'nine'.\n\n    'valid choices'\n    Explanation: The function should only process strings containing the words 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', and 'nine'. Any other words are considered invalid.\n\n# [phrase showing quantity relationship]\n    'smallest to largest'\n    Explanation: The function should sort the numerals in ascending order based on their numeric value.\n\n# [degree adverb]\n    'smallest': Refers to the lowest numeric value in the list of numerals.\n    'largest': Refers to the highest numeric value in the list of numerals.\n\n# [code logic]\n1. Validate the input string to ensure it contains only valid numeral words.\n2. Map each numeral word to its corresponding numeric value using a dictionary.\n3. Sort the numeric values.\n4. Map the sorted numeric values back to their word form.\n5. Return the sorted numeral words as a space-delimited string.\n\n# [edge case]\n    sort_numbers('') = ''\n    Explanation: An empty string should return an empty string as there are no numerals to sort.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The numerals are sorted from smallest ('zero') to largest ('nine').\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All numerals are the same, so the sorted result is identical to the input.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        valid_numerals = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n        \n        def sort_numbers(numbers: str) -> str:\n            if not numbers:\n                return ''\n            \n            numeral_list = numbers.split()\n            if any(numeral not in valid_numerals for numeral in numeral_list):\n                raise ValueError(\"Input contains invalid numerals.\")\n            \n            sorted_numerals = sorted(numeral_list, key=lambda x: valid_numerals[x])\n            return ' '.join(sorted_numerals)\n", "requirement analysis:\nThe function should accurately sort a string of numerals from 'zero' to 'nine'. It must validate the input to ensure all numerals are valid before sorting. The output should be a space-delimited string of sorted numerals. Performance and error handling are key considerations.\nrequirement pool:\n- Implement numeral sorting functionality\n- Validate input for invalid numerals\n- Optimize performance for large inputs\n- Provide user-friendly error messages\n- Enhance UI for better user experience\nWe will implement a function that first validates the input string to ensure all words are valid numerals from 'zero' to 'nine'. We will then map these words to their corresponding numeric values, sort them, and map them back to their word form. The function will handle edge cases such as empty strings and provide clear error messages for invalid inputs. We will use Python's built-in capabilities for string manipulation and sorting to ensure optimal performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where each word is separated by a space, representing numbers in word form.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The input string can only contain words that represent numbers from 0 to 9.\n\n    'sorted from smallest to largest'\n    Explanation: The output should be the input numbers sorted in ascending order based on their numeric value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest to largest': means sorting the numbers in ascending order\n\n# [code logic]\n1. Split the input string into individual words.\n2. Validate each word to ensure it is a valid numeral from 'zero' to 'nine'.\n3. Map each word to its corresponding numeric value.\n4. Sort the list of numeric values.\n5. Map the sorted numeric values back to their word form.\n6. Join the sorted words into a single space-delimited string and return it.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty string as there are no numbers to sort.\n\n    sort_numbers('zero nine eight') = 'eight nine zero'\n    Explanation: The words 'zero', 'nine', and 'eight' are valid numerals and should be sorted as 'eight nine zero'.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All words are the same, so the sorted order remains unchanged.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not numbers:\n            return ''\n        valid_numerals = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n        words = numbers.split()\n        for word in words:\n            if word not in valid_numerals:\n                raise ValueError(\"Invalid numeral found\")\n        numeric_values = [valid_numerals[word] for word in words]\n        numeric_values.sort()\n        sorted_words = [list(valid_numerals.keys())[list(valid_numerals.values()).index(num)] for num in numeric_values]\n        return ' '.join(sorted_words)\n", "requirement analysis:\nThe function must accurately sort a string of numeral words from 'zero' to 'nine'. It should validate input to ensure all words are valid numerals and return an error message if not. Performance should be optimized for handling large strings efficiently.\nrequirement pool:\n- Implement numeral sorting functionality\n- Validate input for correct numeral words\n- Optimize performance for large inputs\n- Provide user-friendly error messages\n- Enhance UI for better user experience\nWe will implement a function that sorts numeral words from 'zero' to 'nine'. The function will first validate the input to ensure all words are valid numerals. If any invalid numeral is found, it will return a clear error message. For sorting, we will use Python's built-in sorting capabilities, which are efficient for handling large inputs. The function will map numeral words to their corresponding numeric values for sorting and then map them back to words for the output.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces, and each word represents a numeral from 'zero' to 'nine'.\n\n    'numerals from zero to nine'\n    Explanation: The input consists of words that represent numbers from 0 to 9, and these are the only valid inputs for the function.\n\n# [phrase showing quantity relationship]\n    'smallest to largest'\n    Explanation: The function needs to sort the numeral words based on their numeric values, from the smallest number (zero) to the largest number (nine).\n\n# [degree adverb]\n    'smallest': Refers to the numeral with the lowest numeric value, which is 'zero'.\n    'largest': Refers to the numeral with the highest numeric value, which is 'nine'.\n\n# [code logic]\n1. Validate the input string to ensure all words are valid numerals ('zero' to 'nine').\n2. Map each numeral word to its corresponding numeric value.\n3. Sort the numeric values.\n4. Map the sorted numeric values back to their corresponding numeral words.\n5. Return the sorted numeral words as a space-delimited string.\n\n# [edge case]\n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string since there are no numerals to sort.\n\n    sort_numbers('zero nine eight') = 'eight nine zero'\n    Explanation: The numerals should be sorted based on their numeric values, resulting in 'zero eight nine'.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All numerals are the same, so the sorted output remains unchanged.\n\n# [extra code for edge case]\n    We need extra code to handle invalid inputs.\n        valid_numerals = {'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'}\n        def sort_numbers(numbers: str) -> str:\n            if not numbers:\n                return ''\n            words = numbers.split()\n            if any(word not in valid_numerals for word in words):\n                return \"Error: Invalid numeral found\"\n            numeral_to_value = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n            value_to_numeral = {v: k for k, v in numeral_to_value.items()}\n            values = [numeral_to_value[word] for word in words]\n            values.sort()\n            sorted_words = [value_to_numeral[value] for value in values]\n            return ' '.join(sorted_words)\n", "requirement analysis:\nThe function must accurately sort a space-delimited string of numerals from 'zero' to 'nine'. It should validate the input to ensure all numerals are valid before sorting. The output should be a sorted string of numerals. Performance optimization is crucial for handling large inputs efficiently.\nrequirement pool:\n- Implement numeral sorting functionality\n- Validate input for invalid numerals\n- Optimize sorting performance\n- Provide user-friendly error messages\n- Support for additional numeral languages\nWe will implement a function that first validates the input string to ensure all numerals are valid. Then, it will map each numeral to its corresponding integer value, sort these values, and map them back to their numeral representation. We will use Python's built-in sorting capabilities for performance optimization. The function will also provide clear error messages if invalid numerals are detected.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where each word (numeral) is separated by a space.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The input string can only contain words representing numbers from 0 to 9.\n\n    'sorted from smallest to largest'\n    Explanation: The output should be a string where the numerals are ordered by their corresponding integer values in ascending order.\n\n# [phrase showing quantity relationship]\n    'smallest to largest': This indicates an ascending order sort based on the numerical value of the words.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Split the input string into individual words (numerals).\n2. Validate each word to ensure it is a valid numeral from 'zero' to 'nine'.\n3. Map each valid numeral to its corresponding integer value.\n4. Sort the list of integers.\n5. Map the sorted integers back to their numeral representation.\n6. Join the sorted numerals into a single space-delimited string.\n7. Return the sorted string.\n\n# [edge case] \n    sort_numbers('zero nine eight') = 'eight nine zero'\n    Explanation: The numerals are sorted based on their integer values: 0, 8, 9.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All numerals are the same, so the order remains unchanged.\n\n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string.\n\n# [extra code for edge case]\n    We need extra code to handle invalid numerals and empty input.\n    \n```python\ndef sort_numbers(numbers: str) -> str:\n    valid_numerals = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    if not numbers:\n        return ''\n    \n    words = numbers.split()\n    \n    for word in words:\n        if word not in valid_numerals:\n            raise ValueError(f\"Invalid numeral: {word}\")\n    \n    sorted_numbers = sorted(words, key=lambda x: valid_numerals[x])\n    \n    return ' '.join(sorted_numbers)\n```\n", "requirement analysis:\nThe requirement is to develop a function that sorts a space-delimited string of numerals from 'zero' to 'nine'. The function must validate the input to ensure all numerals are valid before sorting. The output should be a sorted string of numerals.\nrequirement pool:\n- Implement numeral validation to ensure input correctness.\n- Develop the sorting algorithm for numeral strings.\n- Optimize the function for performance efficiency.\n- Design a user-friendly interface for input and output.\n- Include comprehensive error messages for invalid inputs.\nWe will implement a function that first validates the input to ensure all numerals are valid. We will use a dictionary to map numeral strings to their corresponding integer values for sorting purposes. The function will then sort the numerals based on their integer values and return the sorted numeral strings. We will use Python's built-in sorting capabilities for efficient performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where each word (numeral) is separated by a space.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The input string can only contain these specific words representing numbers 0 through 9.\n\n    'sorted from smallest to largest'\n    Explanation: The numerals should be ordered based on their numerical value, from 0 to 9.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest to largest': means that the numerals should be ordered in ascending order based on their numerical value.\n\n# [code logic]\n1. Validate the input string to ensure all words are valid numerals ('zero' to 'nine').\n2. Create a dictionary to map numeral strings to their corresponding integer values.\n3. Split the input string into a list of numeral strings.\n4. Convert the list of numeral strings to a list of integers using the dictionary.\n5. Sort the list of integers.\n6. Convert the sorted list of integers back to numeral strings using the dictionary.\n7. Join the sorted numeral strings into a single space-delimited string and return it.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string since there are no numerals to sort.\n\n    sort_numbers('zero zero zero') = 'zero zero zero'\n    Explanation: All numerals are the same, so the sorted order is the same as the input.\n\n    sort_numbers('nine eight seven six five four three two one zero') = 'zero one two three four five six seven eight nine'\n    Explanation: The input is in reverse order, so sorting it will result in the numerals being in ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of validating input and sorting will naturally handle these cases.\n", "requirement analysis:\nThe function should accurately sort a list of numerals from 'zero' to 'nine'. It must validate the input to ensure all numerals are valid before sorting. The solution should handle large inputs efficiently and provide user feedback for any errors encountered.\nrequirement pool:\n- Implement numeral sorting functionality\n- Validate input for correct numerals\n- Optimize sorting for performance\n- Provide error messages for invalid input\n- Enhance user interface for input and output\nWe will implement a function that first validates the input string to ensure all numerals are valid. If any invalid numerals are detected, the function will return an error message. For sorting, we will use Python's built-in sorting capabilities, which are efficient for large inputs. The function will map the numeral words to their corresponding integer values, sort them, and then map them back to numeral words for the output.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where each numeral is separated by a space.\n\n    'numerals from zero to nine'\n    Explanation: The input string can only contain words representing numbers from zero to nine.\n\n# [phrase showing quantity relationship]\n    'smallest to largest'\n    Explanation: The numerals need to be sorted in ascending order based on their integer values.\n\n# [degree adverb] \n    'smallest': Refers to the numeral with the lowest integer value.\n    'largest': Refers to the numeral with the highest integer value.\n\n# [code logic]\n    1. Validate the input string to ensure all numerals are valid.\n    2. Map each numeral word to its corresponding integer value.\n    3. Sort the list of integer values.\n    4. Map the sorted integer values back to numeral words.\n    5. Return the sorted numeral words as a space-delimited string.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string since there are no numerals to sort.\n\n    sort_numbers('zero zero zero') = 'zero zero zero'\n    Explanation: All numerals are the same, so sorting does not change the order.\n\n    sort_numbers('nine eight seven six five four three two one zero') = 'zero one two three four five six seven eight nine'\n    Explanation: The input contains all valid numerals in descending order, and the function should return them in ascending order.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not numbers.strip():\n            return ''\n        valid_numerals = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n        numeral_list = numbers.split()\n        if any(numeral not in valid_numerals for numeral in numeral_list):\n            return \"Error: Invalid numeral detected.\"\n        sorted_numerals = sorted(numeral_list, key=lambda x: valid_numerals[x])\n        return ' '.join(sorted_numerals)\n", "requirement analysis:\nThe requirement is to develop a function that sorts a string of numerals from 'zero' to 'nine'. The function must validate the input to ensure all numerals are valid before sorting. The output should be a space-delimited string of numerals in ascending order.\nrequirement pool:\n- Implement numeral validation to ensure input correctness.\n- Develop sorting logic for numeral strings.\n- Optimize the function for performance.\n- Create a user-friendly interface for input and output.\n- Add support for additional numeral languages.\nWe will implement a function that first validates the input string to ensure all numerals are valid. We will use a dictionary to map numeral words to their corresponding numeric values for sorting. The function will then sort the numerals based on their numeric values and return the sorted numerals as a space-delimited string. We will use Python's built-in sorting capabilities for efficient performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces, representing numbers in word form.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The input string consists of words that represent numbers from 0 to 9.\n\n    'sorted from smallest to largest'\n    Explanation: The output should be the input numbers sorted in ascending order based on their numeric value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest to largest': means that the numbers should be sorted in ascending order.\n\n# [code logic]\n    1. Create a dictionary mapping each numeral word to its corresponding numeric value.\n    2. Split the input string into a list of numeral words.\n    3. Validate each word in the list to ensure it is a valid numeral.\n    4. Convert the list of numeral words into their numeric values using the dictionary.\n    5. Sort the list of numeric values.\n    6. Convert the sorted numeric values back into their corresponding numeral words.\n    7. Join the sorted numeral words into a space-delimited string and return it.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string since there are no numerals to sort.\n\n    sort_numbers('zero zero zero') = 'zero zero zero'\n    Explanation: All numerals are the same, so sorting does not change the order.\n\n    sort_numbers('nine eight seven six five four three two one zero') = 'zero one two three four five six seven eight nine'\n    Explanation: The input is in descending order, and the function should return it in ascending order.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not numbers.strip():\n            return ''\n        (other code)\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [121, 121, 121, 121, 121, 121, 121, 121, 121, 121], "completion": "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A space-delimited string of numerals sorted in ascending order.\n    \"\"\"\n    # Dictionary mapping numeral words to their corresponding numeric values\n    numeral_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Edge case: If the input string is empty or only contains spaces, return an empty string\n    if not numbers.strip():\n        return ''\n\n    # Split the input string into a list of numeral words\n    numeral_words = numbers.split()\n\n    # Validate each word in the list to ensure it is a valid numeral\n    for word in numeral_words:\n        if word not in numeral_to_value:\n            raise ValueError(f\"Invalid numeral word: {word}\")\n\n    # Convert the list of numeral words into their numeric values using the dictionary\n    numeric_values = [numeral_to_value[word] for word in numeral_words]\n\n    # Sort the list of numeric values\n    numeric_values.sort()\n\n    # Convert the sorted numeric values back into their corresponding numeral words\n    value_to_numeral = {v: k for k, v in numeral_to_value.items()}\n    sorted_numeral_words = [value_to_numeral[value] for value in numeric_values]\n\n    # Join the sorted numeral words into a space-delimited string and return it\n    return ' '.join(sorted_numeral_words)\n\n# Example usage:\n# print(sort_numbers('three one five'))  # Output: 'one three five'\n# print(sort_numbers('nine eight seven six five four three two one zero'))  # Output: 'zero one two three four five six seven eight nine'\n# print(sort_numbers('zero zero zero'))  # Output: 'zero zero zero'\n# print(sort_numbers(''))  # Output: ''\n", "passed": true, "pass": true, "pass_num": 10, "round": 17, "mutate_method": "add_1_sentence_at_end", "parent_index": 17}
