{"task_id": "HumanEval/35", "prompt": "def max_element(l: list):\t\n'''Return maximum element in the list. Please ensure the function handles both negative and positive numbers accurately.\n>>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''", "entry_point": "max_element", "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n", "test": ["def check(max_element):\n\tassert max_element([5, 2, -8, 4, 2, 3, 12, 4, 128, 4, -14]) == 128", "def check(max_element):\n\tassert max_element([4, 1, 6]) == 6", "def check(max_element):\n\tassert max_element([4, 1, -3, 5, -6, 3, 4, 5, 119, 2, -5]) == 119", "def check(max_element):\n\tassert max_element([1, 5, 7]) == 7", "def check(max_element):\n\tassert max_element([3, 5, 8]) == 8", "def check(max_element):\n\tassert max_element([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124", "def check(max_element):\n\tassert max_element([7, 3, -6, 2, -7, 6, 11, 1, 124, 6, -10]) == 124", "def check(max_element):\n\tassert max_element([6, 3, 1]) == 6", "def check(max_element):\n\tassert max_element([6, 3, 6]) == 6", "def check(max_element):\n\tassert max_element([7, 6, -5, 1, -2, 4, 10, 4, 129, 6, -5]) == 129", "def check(max_element):\n\tassert max_element([9, 4, -4, 2, -3, 8, 8, 4, 123, 3, -13]) == 123", "def check(max_element):\n\tassert max_element([10, 8, -4, 5, -1, 6, 5, 5, 120, 4, -5]) == 120", "def check(max_element):\n\tassert max_element([3, 6, -1, 4, -2, 1, 10, 2, 129, 5, -9]) == 129", "def check(max_element):\n\tassert max_element([7, 6, -7, 3, 0, 4, 11, 3, 121, 1, -7]) == 121", "def check(max_element):\n\tassert max_element([7, 4, -10, 6, -1, 8, 4, 5, 122, 6, -11]) == 122", "def check(max_element):\n\tassert max_element([5, 6, 3]) == 6", "def check(max_element):\n\tassert max_element([1, 7, 4]) == 7", "def check(max_element):\n\tassert max_element([5, 6, -3, 7, -3, 2, 14, 5, 126, 5, -8]) == 126", "def check(max_element):\n\tassert max_element([8, 6, 0, 7, -5, 6, 13, 3, 127, 5, -6]) == 127", "def check(max_element):\n\tassert max_element([6, 4, 7]) == 7", "def check(max_element):\n\tassert max_element([6, 5, 8]) == 8", "def check(max_element):\n\tassert max_element([3, 8, -4, 7, -7, 3, 7, 3, 121, 3, -13]) == 121", "def check(max_element):\n\tassert max_element([4, 1, -2, 7, -6, 8, 14, 4, 121, 1, -12]) == 121", "def check(max_element):\n\tassert max_element([6, 6, 7]) == 7", "def check(max_element):\n\tassert max_element([5, 8, -10, 3, -5, 5, 10, 3, 127, 2, -12]) == 127", "def check(max_element):\n\tassert max_element([3, 6, 5]) == 6", "def check(max_element):\n\tassert max_element([2, 7, 8]) == 8", "def check(max_element):\n\tassert max_element([2, 4, -2, 3, -5, 6, 4, 3, 119, 4, -8]) == 119", "def check(max_element):\n\tassert max_element([8, 3, -10, 6, 2, 3, 10, 5, 129, 2, -8]) == 129", "def check(max_element):\n\tassert max_element([6, 1, 7]) == 7", "def check(max_element):\n\tassert max_element([2, 4, 7]) == 7", "def check(max_element):\n\tassert max_element([2, 4, -3, 6, -8, 8, 10, 4, 122, 4, -11]) == 122", "def check(max_element):\n\tassert max_element([2, 1, 6]) == 6", "def check(max_element):\n\tassert max_element([2, 3, 3]) == 3", "def check(max_element):\n\tassert max_element([1, 5, 3]) == 5", "def check(max_element):\n\tassert max_element([1, 6, -6, 6, -2, 2, 12, 3, 129, 4, -14]) == 129", "def check(max_element):\n\tassert max_element([5, 8, -5, 2, 0, 3, 7, 5, 125, 5, -15]) == 125", "def check(max_element):\n\tassert max_element([2, 2, 8]) == 8", "def check(max_element):\n\tassert max_element([10, 5, -2, 5, -7, 4, 4, 5, 127, 3, -15]) == 127", "def check(max_element):\n\tassert max_element([5, 6, -9, 2, 2, 6, 7, 4, 122, 3, -7]) == 122", "def check(max_element):\n\tassert max_element([2, 2, 6]) == 6", "def check(max_element):\n\tassert max_element([6, 6, -9, 1, -7, 8, 13, 1, 123, 2, -8]) == 123", "def check(max_element):\n\tassert max_element([1, 1, -9, 6, -3, 1, 14, 4, 129, 2, -10]) == 129", "def check(max_element):\n\tassert max_element([8, 1, -8, 3, -7, 6, 10, 4, 123, 4, -8]) == 123", "def check(max_element):\n\tassert max_element([3, 5, -4, 3, 2, 3, 8, 1, 120, 5, -13]) == 120", "def check(max_element):\n\tassert max_element([2, 7, 5]) == 7", "def check(max_element):\n\tassert max_element([3, 1, 8]) == 8", "def check(max_element):\n\tassert max_element([2, 4, 6]) == 6", "def check(max_element):\n\tassert max_element([2, 5, 3]) == 5", "def check(max_element):\n\tassert max_element([3, 2, 8]) == 8", "def check(max_element):\n\tassert max_element([5, 1, 5]) == 5", "def check(max_element):\n\tassert max_element([9, 2, -9, 1, -3, 6, 4, 3, 119, 3, -8]) == 119", "def check(max_element):\n\tassert max_element([3, 4, 0, 1, -7, 2, 7, 1, 124, 4, -13]) == 124", "def check(max_element):\n\tassert max_element([1, 2, 3]) == 3", "def check(max_element):\n\tassert max_element([5, 1, -10, 4, -4, 7, 5, 5, 128, 6, -13]) == 128", "def check(max_element):\n\tassert max_element([7, 7, -7, 5, -5, 5, 7, 1, 129, 2, -14]) == 129", "def check(max_element):\n\tassert max_element([3, 6, -2, 4, -4, 7, 6, 4, 128, 2, -5]) == 128", "def check(max_element):\n\tassert max_element([1, 5, 2]) == 5", "def check(max_element):\n\tassert max_element([6, 7, -5, 2, -8, 5, 12, 2, 129, 5, -13]) == 129", "def check(max_element):\n\tassert max_element([5, 4, 5]) == 5", "def check(max_element):\n\tassert max_element([4, 8, -8, 4, -3, 6, 4, 1, 129, 2, -13]) == 129", "def check(max_element):\n\tassert max_element([5, 4, 8]) == 8", "def check(max_element):\n\tassert max_element([4, 2, 2]) == 4", "def check(max_element):\n\tassert max_element([1, 3, -5, 1, -7, 4, 12, 1, 129, 6, -12]) == 129", "def check(max_element):\n\tassert max_element([4, 5, -9, 1, -6, 6, 8, 5, 121, 6, -5]) == 121", "def check(max_element):\n\tassert max_element([3, 4, 6]) == 6", "def check(max_element):\n\tassert max_element([10, 3, -6, 1, 1, 6, 10, 4, 126, 3, -14]) == 126", "def check(max_element):\n\tassert max_element([10, 8, -6, 2, -6, 1, 11, 1, 125, 5, -7]) == 125", "def check(max_element):\n\tassert max_element([6, 2, 8]) == 8", "def check(max_element):\n\tassert max_element([1, 6, -3, 5, -2, 7, 8, 4, 126, 1, -14]) == 126", "def check(max_element):\n\tassert max_element([3, 7, 3]) == 7", "def check(max_element):\n\tassert max_element([6, 3, -10, 2, -1, 8, 10, 4, 123, 1, -8]) == 123", "def check(max_element):\n\tassert max_element([4, 4, -8, 4, -7, 3, 4, 1, 122, 6, -15]) == 122", "def check(max_element):\n\tassert max_element([9, 8, -3, 1, 1, 8, 4, 5, 128, 1, -10]) == 128", "def check(max_element):\n\tassert max_element([3, 2, 5]) == 5", "def check(max_element):\n\tassert max_element([5, 1, 1]) == 5", "def check(max_element):\n\tassert max_element([5, 3, 6]) == 6", "def check(max_element):\n\tassert max_element([2, 5, 4]) == 5", "def check(max_element):\n\tassert max_element([1, 1, 6]) == 6", "def check(max_element):\n\tassert max_element([2, 4, 5]) == 5", "def check(max_element):\n\tassert max_element([5, 2, 6]) == 6", "def check(max_element):\n\tassert max_element([1, 3, 1]) == 3", "def check(max_element):\n\tassert max_element([2, 2, -7, 1, -8, 6, 14, 4, 120, 6, -5]) == 120", "def check(max_element):\n\tassert max_element([3, 4, -6, 7, -2, 7, 7, 4, 120, 2, -14]) == 120", "def check(max_element):\n\tassert max_element([2, 3, 8]) == 8", "def check(max_element):\n\tassert max_element([7, 6, -9, 1, -8, 7, 6, 1, 121, 5, -7]) == 121", "def check(max_element):\n\tassert max_element([3, 3, 6]) == 6", "def check(max_element):\n\tassert max_element([5, 1, 2]) == 5", "def check(max_element):\n\tassert max_element([5, 1, 7]) == 7", "def check(max_element):\n\tassert max_element([4, 5, -5, 6, -6, 6, 8, 5, 127, 2, -10]) == 127", "def check(max_element):\n\tassert max_element([9, 8, -7, 7, -7, 4, 9, 1, 124, 4, -7]) == 124", "def check(max_element):\n\tassert max_element([5, 6, 1]) == 6", "def check(max_element):\n\tassert max_element([5, 8, -9, 4, -7, 1, 9, 3, 122, 6, -14]) == 122", "def check(max_element):\n\tassert max_element([7, 6, -6, 6, 0, 6, 8, 3, 120, 1, -11]) == 120", "def check(max_element):\n\tassert max_element([9, 6, 0, 5, 0, 5, 7, 4, 128, 4, -6]) == 128", "def check(max_element):\n\tassert max_element([1, 2, 5]) == 5", "def check(max_element):\n\tassert max_element([1, 2, 1]) == 2", "def check(max_element):\n\tassert max_element([1, 7, 1]) == 7", "def check(max_element):\n\tassert max_element([10, 6, -7, 3, 2, 4, 4, 1, 123, 1, -15]) == 123", "def check(max_element):\n\tassert max_element([6, 4, -10, 7, -4, 5, 4, 5, 121, 5, -5]) == 121", "def check(max_element):\n\tassert max_element([5, 4, -9, 4, -8, 4, 8, 3, 128, 2, -10]) == 128", "def check(max_element):\n\tassert max_element([9, 3, 0, 7, -4, 4, 14, 5, 121, 6, -9]) == 121", "def check(max_element):\n\tassert max_element([2, 2, -7, 6, 1, 1, 8, 3, 128, 1, -10]) == 128", "def check(max_element):\n\tassert max_element([2, 6, 4]) == 6", "def check(max_element):\n\tassert max_element([5, 6, 8]) == 8", "def check(max_element):\n\tassert max_element([1, 2, 4]) == 4", "def check(max_element):\n\tassert max_element([4, 5, 3]) == 5", "def check(max_element):\n\tassert max_element([10, 1, -10, 4, -7, 4, 7, 1, 129, 3, -9]) == 129", "def check(max_element):\n\tassert max_element([3, 5, -3, 6, -8, 3, 10, 1, 124, 2, -14]) == 124", "def check(max_element):\n\tassert max_element([1, 3, 8]) == 8", "def check(max_element):\n\tassert max_element([8, 7, -1, 3, -5, 1, 11, 5, 122, 6, -5]) == 122", "def check(max_element):\n\tassert max_element([3, 3, 1]) == 3", "def check(max_element):\n\tassert max_element([5, 6, 5]) == 6", "def check(max_element):\n\tassert max_element([3, 3, 0, 1, -2, 6, 10, 5, 127, 3, -7]) == 127", "def check(max_element):\n\tassert max_element([5, 8, -4, 7, -2, 1, 6, 2, 129, 1, -5]) == 129", "def check(max_element):\n\tassert max_element([6, 3, -1, 4, 1, 3, 14, 1, 129, 3, -12]) == 129", "def check(max_element):\n\tassert max_element([6, 6, 8]) == 8", "def check(max_element):\n\tassert max_element([6, 7, 3]) == 7", "def check(max_element):\n\tassert max_element([3, 5, 4]) == 5", "def check(max_element):\n\tassert max_element([2, 8, -9, 6, -5, 6, 6, 1, 129, 3, -13]) == 129", "def check(max_element):\n\tassert max_element([2, 8, -10, 4, -8, 7, 5, 1, 122, 5, -12]) == 122", "def check(max_element):\n\tassert max_element([1, 8, -6, 2, -2, 1, 10, 4, 123, 3, -10]) == 123", "def check(max_element):\n\tassert max_element([2, 2, -5, 5, -5, 1, 9, 5, 126, 1, -12]) == 126", "def check(max_element):\n\tassert max_element([5, 5, 8]) == 8", "def check(max_element):\n\tassert max_element([1, 7, 8]) == 8"], "test_case_list": ["assert max_element([5, 2, -8, 4, 2, 3, 12, 4, 128, 4, -14]) == 128", "assert max_element([4, 1, 6]) == 6", "assert max_element([4, 1, -3, 5, -6, 3, 4, 5, 119, 2, -5]) == 119", "assert max_element([1, 5, 7]) == 7", "assert max_element([3, 5, 8]) == 8", "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124", "assert max_element([7, 3, -6, 2, -7, 6, 11, 1, 124, 6, -10]) == 124", "assert max_element([6, 3, 1]) == 6", "assert max_element([6, 3, 6]) == 6", "assert max_element([7, 6, -5, 1, -2, 4, 10, 4, 129, 6, -5]) == 129", "assert max_element([9, 4, -4, 2, -3, 8, 8, 4, 123, 3, -13]) == 123", "assert max_element([10, 8, -4, 5, -1, 6, 5, 5, 120, 4, -5]) == 120", "assert max_element([3, 6, -1, 4, -2, 1, 10, 2, 129, 5, -9]) == 129", "assert max_element([7, 6, -7, 3, 0, 4, 11, 3, 121, 1, -7]) == 121", "assert max_element([7, 4, -10, 6, -1, 8, 4, 5, 122, 6, -11]) == 122", "assert max_element([5, 6, 3]) == 6", "assert max_element([1, 7, 4]) == 7", "assert max_element([5, 6, -3, 7, -3, 2, 14, 5, 126, 5, -8]) == 126", "assert max_element([8, 6, 0, 7, -5, 6, 13, 3, 127, 5, -6]) == 127", "assert max_element([6, 4, 7]) == 7", "assert max_element([6, 5, 8]) == 8", "assert max_element([3, 8, -4, 7, -7, 3, 7, 3, 121, 3, -13]) == 121", "assert max_element([4, 1, -2, 7, -6, 8, 14, 4, 121, 1, -12]) == 121", "assert max_element([6, 6, 7]) == 7", "assert max_element([5, 8, -10, 3, -5, 5, 10, 3, 127, 2, -12]) == 127", "assert max_element([3, 6, 5]) == 6", "assert max_element([2, 7, 8]) == 8", "assert max_element([2, 4, -2, 3, -5, 6, 4, 3, 119, 4, -8]) == 119", "assert max_element([8, 3, -10, 6, 2, 3, 10, 5, 129, 2, -8]) == 129", "assert max_element([6, 1, 7]) == 7", "assert max_element([2, 4, 7]) == 7", "assert max_element([2, 4, -3, 6, -8, 8, 10, 4, 122, 4, -11]) == 122", "assert max_element([2, 1, 6]) == 6", "assert max_element([2, 3, 3]) == 3", "assert max_element([1, 5, 3]) == 5", "assert max_element([1, 6, -6, 6, -2, 2, 12, 3, 129, 4, -14]) == 129", "assert max_element([5, 8, -5, 2, 0, 3, 7, 5, 125, 5, -15]) == 125", "assert max_element([2, 2, 8]) == 8", "assert max_element([10, 5, -2, 5, -7, 4, 4, 5, 127, 3, -15]) == 127", "assert max_element([5, 6, -9, 2, 2, 6, 7, 4, 122, 3, -7]) == 122", "assert max_element([2, 2, 6]) == 6", "assert max_element([6, 6, -9, 1, -7, 8, 13, 1, 123, 2, -8]) == 123", "assert max_element([1, 1, -9, 6, -3, 1, 14, 4, 129, 2, -10]) == 129", "assert max_element([8, 1, -8, 3, -7, 6, 10, 4, 123, 4, -8]) == 123", "assert max_element([3, 5, -4, 3, 2, 3, 8, 1, 120, 5, -13]) == 120", "assert max_element([2, 7, 5]) == 7", "assert max_element([3, 1, 8]) == 8", "assert max_element([2, 4, 6]) == 6", "assert max_element([2, 5, 3]) == 5", "assert max_element([3, 2, 8]) == 8", "assert max_element([5, 1, 5]) == 5", "assert max_element([9, 2, -9, 1, -3, 6, 4, 3, 119, 3, -8]) == 119", "assert max_element([3, 4, 0, 1, -7, 2, 7, 1, 124, 4, -13]) == 124", "assert max_element([1, 2, 3]) == 3", "assert max_element([5, 1, -10, 4, -4, 7, 5, 5, 128, 6, -13]) == 128", "assert max_element([7, 7, -7, 5, -5, 5, 7, 1, 129, 2, -14]) == 129", "assert max_element([3, 6, -2, 4, -4, 7, 6, 4, 128, 2, -5]) == 128", "assert max_element([1, 5, 2]) == 5", "assert max_element([6, 7, -5, 2, -8, 5, 12, 2, 129, 5, -13]) == 129", "assert max_element([5, 4, 5]) == 5", "assert max_element([4, 8, -8, 4, -3, 6, 4, 1, 129, 2, -13]) == 129", "assert max_element([5, 4, 8]) == 8", "assert max_element([4, 2, 2]) == 4", "assert max_element([1, 3, -5, 1, -7, 4, 12, 1, 129, 6, -12]) == 129", "assert max_element([4, 5, -9, 1, -6, 6, 8, 5, 121, 6, -5]) == 121", "assert max_element([3, 4, 6]) == 6", "assert max_element([10, 3, -6, 1, 1, 6, 10, 4, 126, 3, -14]) == 126", "assert max_element([10, 8, -6, 2, -6, 1, 11, 1, 125, 5, -7]) == 125", "assert max_element([6, 2, 8]) == 8", "assert max_element([1, 6, -3, 5, -2, 7, 8, 4, 126, 1, -14]) == 126", "assert max_element([3, 7, 3]) == 7", "assert max_element([6, 3, -10, 2, -1, 8, 10, 4, 123, 1, -8]) == 123", "assert max_element([4, 4, -8, 4, -7, 3, 4, 1, 122, 6, -15]) == 122", "assert max_element([9, 8, -3, 1, 1, 8, 4, 5, 128, 1, -10]) == 128", "assert max_element([3, 2, 5]) == 5", "assert max_element([5, 1, 1]) == 5", "assert max_element([5, 3, 6]) == 6", "assert max_element([2, 5, 4]) == 5", "assert max_element([1, 1, 6]) == 6", "assert max_element([2, 4, 5]) == 5", "assert max_element([5, 2, 6]) == 6", "assert max_element([1, 3, 1]) == 3", "assert max_element([2, 2, -7, 1, -8, 6, 14, 4, 120, 6, -5]) == 120", "assert max_element([3, 4, -6, 7, -2, 7, 7, 4, 120, 2, -14]) == 120", "assert max_element([2, 3, 8]) == 8", "assert max_element([7, 6, -9, 1, -8, 7, 6, 1, 121, 5, -7]) == 121", "assert max_element([3, 3, 6]) == 6", "assert max_element([5, 1, 2]) == 5", "assert max_element([5, 1, 7]) == 7", "assert max_element([4, 5, -5, 6, -6, 6, 8, 5, 127, 2, -10]) == 127", "assert max_element([9, 8, -7, 7, -7, 4, 9, 1, 124, 4, -7]) == 124", "assert max_element([5, 6, 1]) == 6", "assert max_element([5, 8, -9, 4, -7, 1, 9, 3, 122, 6, -14]) == 122", "assert max_element([7, 6, -6, 6, 0, 6, 8, 3, 120, 1, -11]) == 120", "assert max_element([9, 6, 0, 5, 0, 5, 7, 4, 128, 4, -6]) == 128", "assert max_element([1, 2, 5]) == 5", "assert max_element([1, 2, 1]) == 2", "assert max_element([1, 7, 1]) == 7", "assert max_element([10, 6, -7, 3, 2, 4, 4, 1, 123, 1, -15]) == 123", "assert max_element([6, 4, -10, 7, -4, 5, 4, 5, 121, 5, -5]) == 121", "assert max_element([5, 4, -9, 4, -8, 4, 8, 3, 128, 2, -10]) == 128", "assert max_element([9, 3, 0, 7, -4, 4, 14, 5, 121, 6, -9]) == 121", "assert max_element([2, 2, -7, 6, 1, 1, 8, 3, 128, 1, -10]) == 128", "assert max_element([2, 6, 4]) == 6", "assert max_element([5, 6, 8]) == 8", "assert max_element([1, 2, 4]) == 4", "assert max_element([4, 5, 3]) == 5", "assert max_element([10, 1, -10, 4, -7, 4, 7, 1, 129, 3, -9]) == 129", "assert max_element([3, 5, -3, 6, -8, 3, 10, 1, 124, 2, -14]) == 124", "assert max_element([1, 3, 8]) == 8", "assert max_element([8, 7, -1, 3, -5, 1, 11, 5, 122, 6, -5]) == 122", "assert max_element([3, 3, 1]) == 3", "assert max_element([5, 6, 5]) == 6", "assert max_element([3, 3, 0, 1, -2, 6, 10, 5, 127, 3, -7]) == 127", "assert max_element([5, 8, -4, 7, -2, 1, 6, 2, 129, 1, -5]) == 129", "assert max_element([6, 3, -1, 4, 1, 3, 14, 1, 129, 3, -12]) == 129", "assert max_element([6, 6, 8]) == 8", "assert max_element([6, 7, 3]) == 7", "assert max_element([3, 5, 4]) == 5", "assert max_element([2, 8, -9, 6, -5, 6, 6, 1, 129, 3, -13]) == 129", "assert max_element([2, 8, -10, 4, -8, 7, 5, 1, 122, 5, -12]) == 122", "assert max_element([1, 8, -6, 2, -2, 1, 10, 4, 123, 3, -10]) == 123", "assert max_element([2, 2, -5, 5, -5, 1, 9, 5, 126, 1, -12]) == 126", "assert max_element([5, 5, 8]) == 8", "assert max_element([1, 7, 8]) == 8"], "nl": "Return maximum element in the list.\n    ", "func": "def max_element(l: list):", "examples": ">>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    ", "repair_prompt": ["def max_element(l: list):\t\n'''Return maximum element in the list. Please ensure the function handles both negative and positive numbers accurately.\n>>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''", "def max_element(l: list):\t\n'''Return maximum element in the list. Ensure the function correctly identifies the largest number in the list. This should be done regardless of whether the numbers are negative or positive.\n>>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''", "def max_element(l: list):\t\n'''Return maximum element in the list and ensure the function handles both negative and positive numbers accurately.\n>>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef max_element(l: list) -> int:\n    \"\"\"\n    Return maximum element in the list.\n    Ensure the function handles both negative and positive numbers accurately.\n\n    Args:\n        l (list): A list of integers.\n\n    Returns:\n        int: The maximum element in the list.\n\n    Raises:\n        ValueError: If the list is empty or contains non-numeric elements.\n    \"\"\"\n    if not l:\n        return None\n\n    # Validate that all elements are numeric\n    for element in l:\n        if not isinstance(element, (int, float)):\n            raise ValueError(\"List contains non-numeric elements.\")\n\n    return max(l)\n", "from typing import List\n## main.py\n\ndef max_element(l: list) -> int:\n    \"\"\"\n    Return the maximum element in the list.\n    \n    Args:\n        l: List of integers (can include both negative and positive numbers)\n    \n    Returns:\n        Maximum integer in the list\n    \n    Raises:\n        ValueError: If the list is empty or contains non-numeric elements\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty.\")\n    \n    try:\n        return max(l)\n    except TypeError:\n        raise ValueError(\"The list contains non-numeric elements.\")\n", "from typing import List\n## main.py\n\ndef max_element(l: list) -> int:\n    \"\"\"\n    Return the maximum element in the list.\n    Handles both negative and positive numbers accurately.\n    \n    Args:\n        l (list): List of integers.\n        \n    Returns:\n        int: Maximum integer in the list.\n        \n    Raises:\n        ValueError: If the list is empty.\n        TypeError: If the list contains non-integer elements.\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty. Cannot determine the maximum element.\")\n    \n    if not all(isinstance(x, int) for x in l):\n        raise TypeError(\"The list contains non-integer elements.\")\n    \n    return max(l)\n\n# Example usage:\n# print(max_element([1, 2, 3, 4, 5, -10, -20]))  # Output: 5\n# print(max_element([-1, -2, -3]))  # Output: -1\n# print(max_element([0]))  # Output: 0\n", "from typing import List\n## main.py\n\ndef max_element(l: list) -> int:\n    \"\"\"\n    Return maximum element in the list.\n    \n    Args:\n        l: List of integers\n    \n    Returns:\n        Maximum integer in the list\n    \n    Raises:\n        ValueError: If the list is empty or contains non-numeric elements.\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty.\")\n    \n    # Check for non-numeric elements\n    for element in l:\n        if not isinstance(element, (int, float)):\n            raise ValueError(\"The list contains non-numeric elements.\")\n    \n    return max(l)\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        print(max_element([1, 2, 3]))  # Expected output: 3\n        print(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Expected output: 123\n        print(max_element([-1, -2, -3]))  # Expected output: -1\n        print(max_element([0]))  # Expected output: 0\n        print(max_element([1, 1, 1]))  # Expected output: 1\n    except ValueError as e:\n        print(e)\n", "from typing import List\n## main.py\n\ndef max_element(l: list) -> int:\n    \"\"\"\n    Return the maximum element in the list.\n    \n    Args:\n        l: List of integers (can include both positive and negative numbers)\n        \n    Returns:\n        The largest integer in the list\n    \n    Raises:\n        ValueError: If the list contains non-numeric types.\n    \"\"\"\n    # Check for non-numeric types in the list\n    if not all(isinstance(item, (int, float)) for item in l):\n        raise ValueError(\"List contains non-numeric types.\")\n    \n    # Use Python's built-in `max` function to find the maximum element\n    return max(l)\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        print(max_element([1, 2, 3, 4, 5]))  # Output: 5\n        print(max_element([-1, -2, -3]))    # Output: -1\n        print(max_element([5, 5, 5]))       # Output: 5\n        print(max_element([0]))             # Output: 0\n        print(max_element([1, 'a', 3]))     # Raises ValueError\n    except ValueError as e:\n        print(e)\n", "from typing import List\n## main.py\n\ndef max_element(l: list) -> int:\n    \"\"\"\n    Return maximum element in the list.\n    Ensure the function correctly identifies the largest number in the list.\n    This should be done regardless of whether the numbers are negative or positive.\n    \n    Parameters:\n    l (list): A list of integers.\n    \n    Returns:\n    int: The maximum integer in the list.\n    \n    Examples:\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list should not be empty.\")\n    \n    return max(l)\n", "from typing import List\n## main.py\n\ndef max_element(l: list) -> int:\n    '''\n    Return the maximum element in the list.\n    \n    Parameters:\n    l (list): A list of integers, which can include both negative and positive numbers.\n    \n    Returns:\n    int: The maximum integer in the list.\n    \n    Raises:\n    TypeError: If the input is not a list or contains non-numeric elements.\n    \n    Examples:\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''\n    if not isinstance(l, list):\n        raise TypeError('Input must be a list')\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise TypeError('All elements in the list must be numbers')\n    return max(l)\n", "from typing import List\n## main.py\n\ndef max_element(l: list) -> int:\n    \"\"\"\n    Return the maximum element in the list.\n    \n    Args:\n        l: List of integers (can include negative numbers)\n        \n    Returns:\n        Maximum integer in the list\n        \n    Raises:\n        ValueError: If the list contains non-numeric elements\n    \"\"\"\n    try:\n        # Attempt to find the maximum element using the built-in max function\n        return max(l)\n    except TypeError:\n        # Raise a ValueError if a non-numeric element is found\n        raise ValueError(\"List contains non-numeric elements.\")\n", "from typing import List\n## main.py\n\ndef max_element(l: list) -> int:\n    \"\"\"\n    Return the maximum element in the list.\n    Handles both negative and positive numbers accurately.\n    Raises ValueError if the list contains non-numeric elements.\n    \n    Parameters:\n    l (list): A list of numbers.\n    \n    Returns:\n    int: The maximum number in the list.\n    \n    Example:\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    # Validate that all elements in the list are numeric\n    if not all(isinstance(i, (int, float)) for i in l):\n        raise ValueError(\"List must contain only numeric values.\")\n    \n    # Use the built-in max function to find the maximum element\n    return max(l)\n", "from typing import List\n## main.py\n\ndef max_element(l: list) -> int:\n    \"\"\"\n    Return maximum element in the list.\n    \n    Args:\n        l (list): List of integers, can include both negative and positive numbers.\n        \n    Returns:\n        int: Maximum integer in the list.\n        \n    Raises:\n        ValueError: If the list is empty or contains non-numeric elements.\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty.\")\n    \n    # Check for non-numeric elements\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"The list contains non-numeric elements.\")\n    \n    return max(l)\n\n# Example usage:\n# print(max_element([1, 2, 3]))  # Output: 3\n# print(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: 123\n"], "plans": ["requirement analysis:\nThe function should accurately return the maximum element from a list, handling both negative and positive numbers. It should be optimized for performance, especially with large lists.\nrequirement pool:\n- Accurate computation of maximum element\n- Handle negative and positive numbers\n- Optimize performance for large lists\n- Ensure compatibility with different data types\n- Provide clear error messages for invalid inputs\nWe will use Python's built-in max function to ensure efficient and accurate computation of the maximum element in a list. This approach is simple and handles both negative and positive numbers seamlessly. For large lists, Python's max function is optimized and performs well. We will ensure compatibility with different data types by checking the list elements before applying the max function.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum element'\n    Explanation: The requirement is to find the largest value in a list of numbers, which can include both positive and negative integers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': means the largest value in the list\n\n# [code logic]\n    1. Check if the list is empty. If it is, return None or raise an exception as there is no maximum element.\n    2. Use Python's built-in `max()` function to find the maximum element in the list.\n    3. Return the maximum element found.\n\n# [edge case] \n    max_element([]) = None\n    Explanation: An empty list has no elements, so there is no maximum value. The function should handle this case by returning None or raising an appropriate exception.\n    \n    max_element([-1, -2, -3]) = -1\n    Explanation: All elements are negative, and -1 is the largest among them.\n    \n    max_element([0]) = 0\n    Explanation: A single-element list should return that element as the maximum.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not l:\n            return None\n        return max(l)\n", "requirement analysis:\nThe function should accurately compute the maximum element in a list, handling both negative and positive numbers. It should be optimized for performance, especially with large lists, and provide a seamless user experience.\nrequirement pool:\n- Accurate computation of maximum element\n- Handle negative and positive numbers\n- Optimize performance for large lists\n- Provide clear error messages for invalid inputs\n- Ensure compatibility with different Python versions\nWe will use Python's built-in max function to ensure efficient and accurate computation of the maximum element in a list. This approach is simple, handles both negative and positive numbers seamlessly, and is optimized for performance even with large lists. We will also include error handling for non-numeric inputs to enhance robustness.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum element'\n    Explanation: The requirement is to find the largest value in the list, which could be either positive or negative.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': means the largest value in the list\n\n# [code logic]\n    The code logic involves using Python's built-in `max` function to find the maximum element in the list. This function efficiently handles both positive and negative numbers. Additionally, error handling should be included to manage non-numeric inputs.\n\n# [edge case] \n    max_element([-1, -2, -3]) = -1\n    Explanation: All numbers are negative, and -1 is the largest among them.\n    max_element([0]) = 0\n    Explanation: The list contains only one element, which is 0, so the maximum is 0.\n    max_element([1, 2, 3, 4, 5, -100]) = 5\n    Explanation: The largest positive number is 5, despite the presence of a large negative number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The `max` function inherently handles lists with negative numbers and single-element lists.\n", "requirement analysis:\nThe function should accurately return the maximum element from a list of integers, handling both negative and positive numbers. It should be optimized for performance, especially with large lists, and should not require external libraries.\nrequirement pool:\n- Implement the function to return the maximum element from a list.\n- Ensure the function handles both negative and positive numbers.\n- Optimize the function for performance with large lists.\n- Consider edge cases such as empty lists or lists with one element.\n- Provide comprehensive test cases to validate functionality.\nWe will implement a simple function using Python's built-in max function, which is efficient and handles both negative and positive numbers seamlessly. This approach ensures optimal performance even with large lists and does not require any external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum element'\n    Explanation: The requirement is to find the largest value in the list, regardless of whether the numbers are positive or negative.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': means the largest value in the list\n\n# [code logic]\n    The code logic is straightforward as it uses Python's built-in `max` function, which efficiently finds the maximum element in a list. This function inherently handles both positive and negative numbers.\n\n# [edge case] \n    max_element([-1, -2, -3]) = -1\n    Explanation: The maximum element in a list of negative numbers is the least negative number, which is -1.\n    max_element([0]) = 0\n    Explanation: A single-element list with 0 should return 0 as it is the only and thus the maximum element.\n    max_element([1, 2, 3, 4, 5, -10, -20]) = 5\n    Explanation: Despite the presence of negative numbers, the maximum positive number is 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The built-in `max` function naturally handles lists with negative numbers and single-element lists.\n", "requirement analysis:\nThe function should accurately identify the maximum element in a list, regardless of the sign of the numbers. It should be optimized for performance, especially for large lists, and provide clear documentation for ease of use.\nrequirement pool:\n- Accurate identification of maximum element\n- Performance optimization for large lists\n- Handle both positive and negative numbers\n- Provide clear documentation and examples\n- Ensure compatibility with different data types\nWe will use Python's built-in max function to efficiently find the maximum element in a list. This approach is simple, highly efficient, and handles both positive and negative numbers seamlessly. We will provide clear documentation and examples to ensure usability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum element'\n    Explanation: The requirement is to find the largest number in a list, which can include both positive and negative numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'largest': means that we need to identify the biggest number in the list, regardless of whether it is positive or negative.\n\n# [code logic]\n    1. Use Python's built-in `max()` function to find the maximum element in the list.\n    2. Return the result of the `max()` function.\n\n# [edge case] \n    max_element([-1, -2, -3]) = -1\n    Explanation: The largest number in a list of negative numbers is the one closest to zero, which is -1 in this case.\n    \n    max_element([0]) = 0\n    Explanation: When the list contains only one element, that element is the maximum by default.\n    \n    max_element([1, 1, 1]) = 1\n    Explanation: All elements are the same, so the maximum is that repeated element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The built-in `max()` function naturally handles these scenarios.\n", "requirement analysis:\nThe function should accurately identify the maximum element in a list, regardless of the sign of the numbers. It should be optimized for performance, especially for large lists, and include clear documentation and examples for ease of use.\nrequirement pool:\n- Accurate identification of maximum element\n- Performance optimization for large lists\n- Handle both positive and negative numbers\n- Provide clear documentation and examples\n- Ensure compatibility with different data types\nWe will implement a simple function using Python's built-in max function, which is efficient and handles both positive and negative numbers. This approach ensures optimal performance even for large lists. We will provide clear documentation and examples to demonstrate usage.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum element'\n    Explanation: The requirement is to find the largest number in a given list, regardless of whether the numbers are negative or positive.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'largest': This indicates that we need to identify the biggest number in the list.\n\n# [code logic]\n    1. Use Python's built-in `max` function to find the maximum element in the list.\n    2. Return the result.\n\n# [edge case] \n    max_element([0]) = 0\n    Explanation: The list contains only one element, which is 0, so the maximum element is 0.\n    \n    max_element([-1, -2, -3]) = -1\n    Explanation: All numbers are negative, and -1 is the largest (least negative) number in the list.\n    \n    max_element([5, 5, 5]) = 5\n    Explanation: All elements are the same, so the maximum element is 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The built-in `max` function naturally handles these scenarios.\n", "requirement analysis:\nThe function should efficiently determine the maximum element in a list, handling both positive and negative numbers. It should be easy to use and understand, with clear documentation and examples.\nrequirement pool:\n- Implement the function to find the maximum element in a list\n- Ensure the function handles both positive and negative numbers\n- Provide clear documentation and examples\n- Optimize the function for large datasets\n- Include error handling for non-list inputs\nWe will implement a simple function using Python's built-in max function to efficiently find the maximum element in a list. This approach ensures high efficiency and usability, as the built-in function is optimized for performance and handles both positive and negative numbers seamlessly. We will provide clear documentation and examples to guide users.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum element'\n    Explanation: The requirement is to find the largest number in a given list, regardless of whether the numbers are negative or positive.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'largest': means that we need to identify the biggest number in the list.\n\n# [code logic]\n    1. Use Python's built-in `max` function to find the maximum element in the list.\n    2. Return the result.\n\n# [edge case] \n    max_element([-1, -2, -3]) = -1\n    Explanation: The largest number in a list of all negative numbers is the one closest to zero, which is -1.\n    max_element([0]) = 0\n    Explanation: The list contains only one element, which is 0, so it is the maximum.\n    max_element([5, 5, 5]) = 5\n    Explanation: All elements are the same, so the maximum is that repeated element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The built-in `max` function naturally handles these scenarios.\n", "requirement analysis:\nThe function should accurately return the maximum element from a list, handling both negative and positive numbers. It should be optimized for performance, especially with large lists, and be well-documented for ease of use.\nrequirement pool:\n- Implement the function to find the maximum element in a list.\n- Ensure the function handles both negative and positive numbers.\n- Optimize the function for performance with large lists.\n- Provide clear documentation and examples.\n- Include error handling for non-list inputs.\nWe will implement a simple function using Python's built-in max function, which is efficient and handles both negative and positive numbers accurately. This approach ensures optimal performance even with large lists and leverages Python's native capabilities for simplicity and reliability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum element'\n    Explanation: The requirement is to find the largest number in the list, regardless of whether the numbers are positive or negative.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': means the largest value in the list\n\n# [code logic]\n    The code logic is straightforward as it uses Python's built-in `max` function, which efficiently finds the maximum element in a list. This function inherently handles both positive and negative numbers.\n\n# [edge case] \n    max_element([-1, -2, -3]) = -1\n    Explanation: The list contains only negative numbers, and -1 is the largest among them.\n    max_element([0]) = 0\n    Explanation: The list contains a single element, which is 0, so the maximum is 0.\n    max_element([1, 1, 1]) = 1\n    Explanation: All elements in the list are the same, so the maximum is 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. Python's `max` function naturally handles these scenarios.\n", "requirement analysis:\nThe function must accurately identify the maximum element in a list, including handling negative numbers. It should be optimized for performance, especially with large lists, and provide reliable results.\nrequirement pool:\n- Accurate computation of maximum element\n- Handle negative and positive numbers\n- Optimize performance for large lists\n- Ensure compatibility with various data types\n- Provide clear error messages for invalid inputs\nWe will use Python's built-in max function to ensure high efficiency and accuracy. This function is well-optimized for performance and can handle both negative and positive numbers seamlessly. Additionally, we will add error handling to manage non-numeric elements in the list, providing clear error messages for invalid inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum element'\n    Explanation: The requirement is to find the largest value in the list, regardless of whether the numbers are positive or negative.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': means the largest value in the list\n    Explanation: The function should return the highest numerical value present in the list.\n\n# [code logic]\n    - Use Python's built-in `max()` function to find the maximum element in the list.\n    - Implement error handling to ensure all elements in the list are numeric.\n    - Return the maximum value found.\n\n# [edge case] \n    max_element([-1, -2, -3]) = -1\n    Explanation: All numbers are negative, but -1 is the largest among them.\n    \n    max_element([0]) = 0\n    Explanation: The list contains only one element, which is 0, so it is the maximum by default.\n    \n    max_element([1, 2, 'a', 3]) = Error\n    Explanation: The list contains a non-numeric element ('a'), which should trigger an error handling mechanism.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases involving non-numeric elements.\n        def max_element(l: list):\n            try:\n                return max(l)\n            except TypeError:\n                raise ValueError(\"List contains non-numeric elements.\")\n", "requirement analysis:\nThe function should efficiently find the maximum element in a list, handling both negative and positive numbers. It should be optimized for performance and include clear documentation for ease of use.\nrequirement pool:\n- Implement the function to find the maximum element in a list.\n- Ensure the function handles both negative and positive numbers.\n- Optimize the function for performance with large lists.\n- Provide clear and concise documentation.\n- Include test cases for various scenarios.\nWe will implement a simple function using Python's built-in max function to find the maximum element in a list. This approach ensures optimal performance and reliability, as the built-in function is highly optimized for such operations. We will include clear documentation within the code to explain the function's purpose and usage. Additionally, we will handle non-numeric inputs by raising a ValueError to ensure the function only processes valid numeric lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum element'\n    Explanation: The requirement is to find the largest value in a list of numbers, which can include both positive and negative integers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': means the largest value in the list\n\n# [code logic]\n    1. Use Python's built-in `max` function to find the maximum element in the list.\n    2. Ensure that the list contains only numeric values.\n    3. If non-numeric values are present, raise a `ValueError`.\n\n# [edge case] \n    max_element([0, -1, -2]) = 0\n    Explanation: The maximum value in the list is 0, which is greater than all negative numbers.\n    \n    max_element([-5, -3, -10]) = -3\n    Explanation: Among all negative numbers, -3 is the largest.\n    \n    max_element([100]) = 100\n    Explanation: With only one element in the list, that element is the maximum by default.\n\n# [extra code for edge case]\n    We need extra code to handle non-numeric inputs.\n        def max_element(l: list):\n            if not all(isinstance(i, (int, float)) for i in l):\n                raise ValueError(\"List must contain only numeric values.\")\n            return max(l)\n", "requirement analysis:\nThe function should accurately return the maximum element from a list, handling both negative and positive numbers. It should be optimized for performance, especially with large lists.\nrequirement pool:\n- Accurate computation of maximum element\n- Handle negative and positive numbers\n- Optimize performance for large lists\n- Ensure compatibility with different data types\n- Provide clear error messages for invalid inputs\nWe will use Python's built-in max function to efficiently find the maximum element in a list. This function is optimized for performance and handles both negative and positive numbers seamlessly. Additionally, we will ensure the function can handle large lists by leveraging Python's inherent capabilities.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum element'\n    Explanation: The requirement is to find the largest number in the list, regardless of whether the numbers are positive or negative.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': means the largest value in the list\n\n# [code logic]\n    The code logic is straightforward as it involves using Python's built-in `max` function, which efficiently finds the maximum element in a list. This function inherently handles both negative and positive numbers.\n\n# [edge case] \n    max_element([-1, -2, -3]) = -1\n    Explanation: All numbers are negative, and -1 is the largest among them.\n    max_element([0]) = 0\n    Explanation: The list contains only one element, which is 0, so the maximum is 0.\n    max_element([1, 1, 1]) = 1\n    Explanation: All elements are the same, so the maximum is 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The built-in `max` function handles these scenarios naturally.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [125, 125, 125, 125, 125, 125, 125, 125, 125, 125], "completion": "from typing import List\n## main.py\n\ndef max_element(l: list) -> int:\n    \"\"\"\n    Return maximum element in the list.\n    \n    Args:\n        l (list): List of integers, can include both negative and positive numbers.\n        \n    Returns:\n        int: Maximum integer in the list.\n        \n    Raises:\n        ValueError: If the list is empty or contains non-numeric elements.\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty.\")\n    \n    # Check for non-numeric elements\n    for item in l:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"The list contains non-numeric elements.\")\n    \n    return max(l)\n\n# Example usage:\n# print(max_element([1, 2, 3]))  # Output: 3\n# print(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: 123\n", "passed": true, "pass": true, "pass_num": 10, "round": 32, "mutate_method": "add_1_sentence_at_end", "parent_index": 32}
