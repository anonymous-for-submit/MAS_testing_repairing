{"task_id": "HumanEval/95", "prompt": "def check_dict_case(dict):\t\n'''Given a dictionary, return True if either all keys are strings in lower case or all keys are strings in upper case, otherwise return False. The function should return False is the given dictionary is empty.\nExamples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    '''", "entry_point": "check_dict_case", "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "test": ["def check(check_dict_case):\n\tassert check_dict_case({'o': 'oop', 5: 'jcdvmy'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'c': 'tiuegeqq', 9: 'cpfxzgkgirje', 'q': 'vrueasg'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'vdk': 'MepbyhEjC', 'tdiernvi': 'LfqIO'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'j': 'kllixbfik', 7: 'qge', 'y': 'qdhfvkvd'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'qgt': 'rCmkqP', 'dvdmod': 'nMGgkaLu'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'g': 'xopdadefplk', 5: 'awdkxulto', 'v': 'rfl'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(check_dict_case({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))", "def check(check_dict_case):\n\tassert check_dict_case({'CNPlUyKIA': 'PYEe', 'NuCOYaAJz': '867846', 'inWSe': 'dxeqPgMIdB'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'v': 'doephj', 6: 'ywyax', 'o': 'ncaz'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'pKs': 'xVF', 'JuXee': '085', 'EXXukTz': 'Byik'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'PFHKF': 'UZVY', 'KXCCX': '31603'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'f': 'ddkomprr', 2: 'whev', 'k': 'xzdw'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'b': 'zgfpqzqgchia', 't': 'vwrphb'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'x': 'kqnfkdowweb', 'E': 'xzenelobbp', 'N': 'owrxqsq'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'m': 'avbvoxk', 10: 'xfiao', 'd': 'nji'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'VApyOCO': 'qeVr', 'SJzTNH': '679047', 'Jvwh': 'RvfMcp'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'UvtMlty': 'nVGDmDrCJ', 'BePcz': '374227', 'ZXEl': 'fKPqJsOvjbeo'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'w': 'mvnibigx', 'j': 'ijosvsbswe'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'VYA': 'TBCF', 'HDHYKLPTN': '12914'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'vTKV': 'vfcSoY', 'MqbjHgS': '9138', 'cGkgssLVr': 'yIuvFksPqM'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'bTDgmKv': 'rVwBHUauC', 'cWYzfZw': '934', 'TtWunxv': 'TvklwNHxNs'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'l': 'vnqfwvujzwfwyj', 'B': 'oqutyhqli', 'X': 'iajwq'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'z': 'ybgxprswhqgh', 'D': 'zhkwzgd', 'B': 'bwcgnexhx'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'MEIDTL': 'VRDKN', 'FZZWX': '1407'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'u': 'bftlcu', 'F': 'hxeag', 'Q': 'uzfnw'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(check_dict_case({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))", "def check(check_dict_case):\n\tassert check_dict_case({'KZLZ': 'SFT', 'KKFRSLKIY': '02303705'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'g': 'xlzmrlvob', 'H': 'vhpyporwr', 'W': 'ligdfquvi'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'pyuocwi': 'ACWLpFml', 'nbnak': 'nfhBi'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'BHmT': 'irq', 'uHvyEu': '8647', 'RrUKbfpO': 'zgJmtsWM'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'XYJC': 'jNuzHbk', 'zEx': '4860', 'zdFwlW': 'ZSxwsjPwxXtL'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'ilioz': 'uPobK', 'wfvwx': 'FTy'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'hnexdzem': 'DPAbnQw', 'dxljjrw': 'nLzTAmBzF'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'BMEOMSJDJ': 'FGQWI', 'SBBPXXNJ': '9993484'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'a': 'jzwwvdupalxyi', 'q': 'edvtpkwxm'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'n': 'tffsua', 'W': 'xldwoonez'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'v': 'dfbbgvzdscrv', 'E': 'sxencbvlia', 'L': 'twtxnlavj'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'m': 'hbbijvhbbrba', 'D': 'mxxkdqgu', 'K': 'raxko'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'VCOKEHUZW': 'TQJ', 'ROMV': '3254'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'m': 'mqrzjw', 'T': 'sikpsucfl', 'E': 'cbgmxxnmdrxg'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'x': 'rpaqitm', 'u': 'rtdwwvdybsic'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'j': 'fcgyragevddkvk', 'X': 'myasjlwty', 'E': 'wkjgzzoosgpi'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'n': 'qjkmwxqngd', 'w': 'iiuqsmtwe'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'j': 'parojmcxtaz', 8: 'iepc', 'w': 'guplmpum'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'CJSRG': 'ZQGTSH', 'RQOC': '7511'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'o': 'cmssdkn', 'E': 'recynfrwfua', 'L': 'pbhzdabxdqf'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'wKxGuyq': 'HrrH', 'VFiUO': '3154', 'kxO': 'pRiJqhnNOvYp'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'MEUHYJ': 'TEM', 'NYK': '34633713'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'n': 'wdjmxjjdc', 'l': 'nvvdrvkpm'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'mlm': 'zOhHfD', 'xtzf': 'uJsuR'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'b': 'tzyaufsrkaffc', 'm': 'atgbi'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'gbd': 'KLgAIXqIZfV', 'gdgfpyf': 'RNQJX'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'gfxnbl': 'AWZf', 'wbptpnqg': 'KRbNA'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'MBJMTMK': 'KNH', 'INKZWO': '89852'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'a': 'ynlnmxsajad', 'O': 'hspyi', 'Y': 'euhm'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(check_dict_case({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(check_dict_case):\n\tassert check_dict_case({'luo': 'zzh', 'EhEH': '148', 'idVMULBj': 'BOIcgZHT'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'SBVUBTB': 'DIGG', 'BGMCYFGS': '105758'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'o': 'vqgkfowerkxp', 's': 'gfxx'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'prpw': 'WDf', 'onoscuy': 'uzybSwqZ'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}))", "def check(check_dict_case):\n\tassert check_dict_case({'zszouxi': 'yeMsjaF', 'sks': 'cBSJXJwX'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'k': 'rsepwmm'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'g': 'gybkdjrhp', 5: 'wzmbwr'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'l': 'tzovbnefdft', 4: 'pjztyrhmutrk', 'q': 'dhwxpbwsp'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'KEBnAZ': 'qhsnjgSnS', 'PefJT': '34073', 'JtVAjuodw': 'KaPSDGEJ'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'OPHYC': 'DZJLL', 'XHO': '4958528'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'DAL': 'KEWRR', 'SHIFWEEMW': '58926385'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'n': 'xahbfntlzktuzug', 8: 'jctakc', 'm': 'skml'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'vdoj': 'foQoqjSYT', 'vlvrbtrxt': 'haVFtae'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'ceugtmuz': 'TmP', 'stmg': 'BLl'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'m': 'zoykqipp', 'N': 'kmsnbylkc', 'B': 'ccpy'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'u': 'bvnywqo', 'f': 'lflfulzuds'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'s': 'jnuocmugsgrxukh', 10: 'qvwwhlo', 't': 'ohcjmtlzc'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'e': 'filcbtnfjni', 3: 'jnqosqrgmny', 'b': 'pfdi'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'AXMaj': 'YMhfFKO', 'xLUFwrhU': '99507', 'LCZ': 'OvkprKzu'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'OGCTqCm': 'HReaO', 'yQPf': '6207', 'LmegQqnKv': 'GWSx'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'TVMBVK': 'JVCDMR', 'JZGPKVLPN': '14605'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'m': 'sezrcoqwvnr', 'n': 'ldlxrkiot'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'n': 'dnukqzbtoup', 'D': 'oohaoy', 'V': 'vsapzys'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'pva': 'gdt', 'tqwqjnm': 'rFtgEIIfU'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'r': 'dyywxj', 'e': 'jyn'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'ISymfszDc': 'TfMacT', 'GuNgc': '50057', 'kAP': 'osNWsqkQ'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))", "def check(check_dict_case):\n\tassert check_dict_case({'ZGZGV': 'EFPM', 'WUIX': '668604994'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'l': 'eaufkyaebdl', 'h': 'sbi'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'k': 'fscjjnkxljechg', 1: 'wnzjtm', 'u': 'mnkqnqkin'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'p': 'irxohxlzzyvw', 8: 'awlrbu', 'w': 'ctdentj'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'i': 'kombtwcenp', 'l': 'umxhlr'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'c': 'eexvfiew', 'C': 'xopcqmg', 'G': 'kbwypgf'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'WUF': 'qMfFM', 'NtYD': '832', 'oKskZGfDX': 'WUvQyjc'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'RWETIY': 'YCDPL', 'GNTE': '451020125'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'y': 'juyddabdrnlrn', 'T': 'cazvvctpga', 'B': 'dbg'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'w': 'vmnvozhiocvkqh', 2: 'wgrteaeecuez', 'g': 'fxyzqtmxa'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'aohHoCn': 'rxNzkmv', 'BTGHom': '963', 'aRySCQA': 'IGu'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'bddotika': 'nRFb', 'jwprcqddz': 'bBR'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({}) == False, \"1st edge test error: \" + str(check_dict_case({}))", "def check(check_dict_case):\n\tassert check_dict_case({'h': 'zprecd', 'y': 'afv'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'YNBEJI': 'SGLU', 'INYRRDKZ': '571'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'zdyouS': 'LOwog', 'dpnawfDD': '981962', 'DcXeOlW': 'imL'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'c': 'exhkugly', 'H': 'hxljxqntbie', 'N': 'puptvlju'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'w': 'iduoimnfubqlxbq', 'R': 'ovifuvem', 'D': 'klw'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'l': 'btvngk', 'h': 'ongztnabsigc'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'f': 'exlzue', 'i': 'yrewpjx'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'kdmdoymmf': 'sdvwzSyPe', 'cvtnh': 'air'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))", "def check(check_dict_case):\n\tassert check_dict_case({'n': 'wdjvdltslua', 'i': 'peurlqybqvct'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'d': 'tahdnaz', 10: 'icakelzp', 'y': 'hawbuz'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'LSTAF': 'UAZSVT', 'XIS': '713'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'vymrps': 'tRQlVfOy', 'xgn': 'LBJtlb'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'qhskalyon': 'jTkUuceZR', 'ypyvn': 'CoCbYQ'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'WEJAX': 'YWBJXH', 'HLZLLV': '7304084'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'duase': 'StBcsYaUZFV', 'mbnuc': 'SDGj'}) == True", "def check(check_dict_case):\n\tassert check_dict_case({'w': 'ypghvpfdrq', 6: 'fyzqdslgte', 'e': 'hboeipeq'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({'CuYwc': 'rAdthhp', 'XzJaxnpP': '332954', 'kTf': 'vGasJU'}) == False", "def check(check_dict_case):\n\tassert check_dict_case({}) == False"], "test_case_list": ["assert check_dict_case({'o': 'oop', 5: 'jcdvmy'}) == False", "assert check_dict_case({'c': 'tiuegeqq', 9: 'cpfxzgkgirje', 'q': 'vrueasg'}) == False", "assert check_dict_case({'vdk': 'MepbyhEjC', 'tdiernvi': 'LfqIO'}) == True", "assert check_dict_case({'j': 'kllixbfik', 7: 'qge', 'y': 'qdhfvkvd'}) == False", "assert check_dict_case({'qgt': 'rCmkqP', 'dvdmod': 'nMGgkaLu'}) == True", "assert check_dict_case({'g': 'xopdadefplk', 5: 'awdkxulto', 'v': 'rfl'}) == False", "assert check_dict_case({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(check_dict_case({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))", "assert check_dict_case({'CNPlUyKIA': 'PYEe', 'NuCOYaAJz': '867846', 'inWSe': 'dxeqPgMIdB'}) == False", "assert check_dict_case({'v': 'doephj', 6: 'ywyax', 'o': 'ncaz'}) == False", "assert check_dict_case({'pKs': 'xVF', 'JuXee': '085', 'EXXukTz': 'Byik'}) == False", "assert check_dict_case({'PFHKF': 'UZVY', 'KXCCX': '31603'}) == True", "assert check_dict_case({'f': 'ddkomprr', 2: 'whev', 'k': 'xzdw'}) == False", "assert check_dict_case({'b': 'zgfpqzqgchia', 't': 'vwrphb'}) == True", "assert check_dict_case({'x': 'kqnfkdowweb', 'E': 'xzenelobbp', 'N': 'owrxqsq'}) == False", "assert check_dict_case({'m': 'avbvoxk', 10: 'xfiao', 'd': 'nji'}) == False", "assert check_dict_case({'VApyOCO': 'qeVr', 'SJzTNH': '679047', 'Jvwh': 'RvfMcp'}) == False", "assert check_dict_case({'UvtMlty': 'nVGDmDrCJ', 'BePcz': '374227', 'ZXEl': 'fKPqJsOvjbeo'}) == False", "assert check_dict_case({'w': 'mvnibigx', 'j': 'ijosvsbswe'}) == True", "assert check_dict_case({'VYA': 'TBCF', 'HDHYKLPTN': '12914'}) == True", "assert check_dict_case({'vTKV': 'vfcSoY', 'MqbjHgS': '9138', 'cGkgssLVr': 'yIuvFksPqM'}) == False", "assert check_dict_case({'bTDgmKv': 'rVwBHUauC', 'cWYzfZw': '934', 'TtWunxv': 'TvklwNHxNs'}) == False", "assert check_dict_case({'l': 'vnqfwvujzwfwyj', 'B': 'oqutyhqli', 'X': 'iajwq'}) == False", "assert check_dict_case({'z': 'ybgxprswhqgh', 'D': 'zhkwzgd', 'B': 'bwcgnexhx'}) == False", "assert check_dict_case({'MEIDTL': 'VRDKN', 'FZZWX': '1407'}) == True", "assert check_dict_case({'u': 'bftlcu', 'F': 'hxeag', 'Q': 'uzfnw'}) == False", "assert check_dict_case({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(check_dict_case({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))", "assert check_dict_case({'KZLZ': 'SFT', 'KKFRSLKIY': '02303705'}) == True", "assert check_dict_case({'g': 'xlzmrlvob', 'H': 'vhpyporwr', 'W': 'ligdfquvi'}) == False", "assert check_dict_case({'pyuocwi': 'ACWLpFml', 'nbnak': 'nfhBi'}) == True", "assert check_dict_case({'BHmT': 'irq', 'uHvyEu': '8647', 'RrUKbfpO': 'zgJmtsWM'}) == False", "assert check_dict_case({'XYJC': 'jNuzHbk', 'zEx': '4860', 'zdFwlW': 'ZSxwsjPwxXtL'}) == False", "assert check_dict_case({'ilioz': 'uPobK', 'wfvwx': 'FTy'}) == True", "assert check_dict_case({'hnexdzem': 'DPAbnQw', 'dxljjrw': 'nLzTAmBzF'}) == True", "assert check_dict_case({'BMEOMSJDJ': 'FGQWI', 'SBBPXXNJ': '9993484'}) == True", "assert check_dict_case({'a': 'jzwwvdupalxyi', 'q': 'edvtpkwxm'}) == True", "assert check_dict_case({'n': 'tffsua', 'W': 'xldwoonez'}) == False", "assert check_dict_case({'v': 'dfbbgvzdscrv', 'E': 'sxencbvlia', 'L': 'twtxnlavj'}) == False", "assert check_dict_case({'m': 'hbbijvhbbrba', 'D': 'mxxkdqgu', 'K': 'raxko'}) == False", "assert check_dict_case({'VCOKEHUZW': 'TQJ', 'ROMV': '3254'}) == True", "assert check_dict_case({'m': 'mqrzjw', 'T': 'sikpsucfl', 'E': 'cbgmxxnmdrxg'}) == False", "assert check_dict_case({'x': 'rpaqitm', 'u': 'rtdwwvdybsic'}) == True", "assert check_dict_case({'j': 'fcgyragevddkvk', 'X': 'myasjlwty', 'E': 'wkjgzzoosgpi'}) == False", "assert check_dict_case({'n': 'qjkmwxqngd', 'w': 'iiuqsmtwe'}) == True", "assert check_dict_case({'j': 'parojmcxtaz', 8: 'iepc', 'w': 'guplmpum'}) == False", "assert check_dict_case({'CJSRG': 'ZQGTSH', 'RQOC': '7511'}) == True", "assert check_dict_case({'o': 'cmssdkn', 'E': 'recynfrwfua', 'L': 'pbhzdabxdqf'}) == False", "assert check_dict_case({'wKxGuyq': 'HrrH', 'VFiUO': '3154', 'kxO': 'pRiJqhnNOvYp'}) == False", "assert check_dict_case({'MEUHYJ': 'TEM', 'NYK': '34633713'}) == True", "assert check_dict_case({'n': 'wdjmxjjdc', 'l': 'nvvdrvkpm'}) == True", "assert check_dict_case({'mlm': 'zOhHfD', 'xtzf': 'uJsuR'}) == True", "assert check_dict_case({'b': 'tzyaufsrkaffc', 'm': 'atgbi'}) == True", "assert check_dict_case({'gbd': 'KLgAIXqIZfV', 'gdgfpyf': 'RNQJX'}) == True", "assert check_dict_case({'gfxnbl': 'AWZf', 'wbptpnqg': 'KRbNA'}) == True", "assert check_dict_case({'MBJMTMK': 'KNH', 'INKZWO': '89852'}) == True", "assert check_dict_case({'a': 'ynlnmxsajad', 'O': 'hspyi', 'Y': 'euhm'}) == False", "assert check_dict_case({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(check_dict_case({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.", "assert check_dict_case({'luo': 'zzh', 'EhEH': '148', 'idVMULBj': 'BOIcgZHT'}) == False", "assert check_dict_case({'SBVUBTB': 'DIGG', 'BGMCYFGS': '105758'}) == True", "assert check_dict_case({'o': 'vqgkfowerkxp', 's': 'gfxx'}) == True", "assert check_dict_case({'prpw': 'WDf', 'onoscuy': 'uzybSwqZ'}) == True", "assert check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(check_dict_case({\"p\":\"pineapple\", \"b\":\"banana\"}))", "assert check_dict_case({'zszouxi': 'yeMsjaF', 'sks': 'cBSJXJwX'}) == True", "assert check_dict_case({'k': 'rsepwmm'}) == True", "assert check_dict_case({'g': 'gybkdjrhp', 5: 'wzmbwr'}) == False", "assert check_dict_case({'l': 'tzovbnefdft', 4: 'pjztyrhmutrk', 'q': 'dhwxpbwsp'}) == False", "assert check_dict_case({'KEBnAZ': 'qhsnjgSnS', 'PefJT': '34073', 'JtVAjuodw': 'KaPSDGEJ'}) == False", "assert check_dict_case({'OPHYC': 'DZJLL', 'XHO': '4958528'}) == True", "assert check_dict_case({'DAL': 'KEWRR', 'SHIFWEEMW': '58926385'}) == True", "assert check_dict_case({'n': 'xahbfntlzktuzug', 8: 'jctakc', 'm': 'skml'}) == False", "assert check_dict_case({'vdoj': 'foQoqjSYT', 'vlvrbtrxt': 'haVFtae'}) == True", "assert check_dict_case({'ceugtmuz': 'TmP', 'stmg': 'BLl'}) == True", "assert check_dict_case({'m': 'zoykqipp', 'N': 'kmsnbylkc', 'B': 'ccpy'}) == False", "assert check_dict_case({'u': 'bvnywqo', 'f': 'lflfulzuds'}) == True", "assert check_dict_case({'s': 'jnuocmugsgrxukh', 10: 'qvwwhlo', 't': 'ohcjmtlzc'}) == False", "assert check_dict_case({'e': 'filcbtnfjni', 3: 'jnqosqrgmny', 'b': 'pfdi'}) == False", "assert check_dict_case({'AXMaj': 'YMhfFKO', 'xLUFwrhU': '99507', 'LCZ': 'OvkprKzu'}) == False", "assert check_dict_case({'OGCTqCm': 'HReaO', 'yQPf': '6207', 'LmegQqnKv': 'GWSx'}) == False", "assert check_dict_case({'TVMBVK': 'JVCDMR', 'JZGPKVLPN': '14605'}) == True", "assert check_dict_case({'m': 'sezrcoqwvnr', 'n': 'ldlxrkiot'}) == True", "assert check_dict_case({'n': 'dnukqzbtoup', 'D': 'oohaoy', 'V': 'vsapzys'}) == False", "assert check_dict_case({'pva': 'gdt', 'tqwqjnm': 'rFtgEIIfU'}) == True", "assert check_dict_case({'r': 'dyywxj', 'e': 'jyn'}) == True", "assert check_dict_case({'ISymfszDc': 'TfMacT', 'GuNgc': '50057', 'kAP': 'osNWsqkQ'}) == False", "assert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))", "assert check_dict_case({'ZGZGV': 'EFPM', 'WUIX': '668604994'}) == True", "assert check_dict_case({'l': 'eaufkyaebdl', 'h': 'sbi'}) == True", "assert check_dict_case({'k': 'fscjjnkxljechg', 1: 'wnzjtm', 'u': 'mnkqnqkin'}) == False", "assert check_dict_case({'p': 'irxohxlzzyvw', 8: 'awlrbu', 'w': 'ctdentj'}) == False", "assert check_dict_case({'i': 'kombtwcenp', 'l': 'umxhlr'}) == True", "assert check_dict_case({'c': 'eexvfiew', 'C': 'xopcqmg', 'G': 'kbwypgf'}) == False", "assert check_dict_case({'WUF': 'qMfFM', 'NtYD': '832', 'oKskZGfDX': 'WUvQyjc'}) == False", "assert check_dict_case({'RWETIY': 'YCDPL', 'GNTE': '451020125'}) == True", "assert check_dict_case({'y': 'juyddabdrnlrn', 'T': 'cazvvctpga', 'B': 'dbg'}) == False", "assert check_dict_case({'w': 'vmnvozhiocvkqh', 2: 'wgrteaeecuez', 'g': 'fxyzqtmxa'}) == False", "assert check_dict_case({'aohHoCn': 'rxNzkmv', 'BTGHom': '963', 'aRySCQA': 'IGu'}) == False", "assert check_dict_case({'bddotika': 'nRFb', 'jwprcqddz': 'bBR'}) == True", "assert check_dict_case({}) == False, \"1st edge test error: \" + str(check_dict_case({}))", "assert check_dict_case({'h': 'zprecd', 'y': 'afv'}) == True", "assert check_dict_case({'YNBEJI': 'SGLU', 'INYRRDKZ': '571'}) == True", "assert check_dict_case({'zdyouS': 'LOwog', 'dpnawfDD': '981962', 'DcXeOlW': 'imL'}) == False", "assert check_dict_case({'c': 'exhkugly', 'H': 'hxljxqntbie', 'N': 'puptvlju'}) == False", "assert check_dict_case({'w': 'iduoimnfubqlxbq', 'R': 'ovifuvem', 'D': 'klw'}) == False", "assert check_dict_case({'l': 'btvngk', 'h': 'ongztnabsigc'}) == True", "assert check_dict_case({'f': 'exlzue', 'i': 'yrewpjx'}) == True", "assert check_dict_case({'kdmdoymmf': 'sdvwzSyPe', 'cvtnh': 'air'}) == True", "assert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))", "assert check_dict_case({'n': 'wdjvdltslua', 'i': 'peurlqybqvct'}) == True", "assert check_dict_case({'d': 'tahdnaz', 10: 'icakelzp', 'y': 'hawbuz'}) == False", "assert check_dict_case({'LSTAF': 'UAZSVT', 'XIS': '713'}) == True", "assert check_dict_case({'vymrps': 'tRQlVfOy', 'xgn': 'LBJtlb'}) == True", "assert check_dict_case({'qhskalyon': 'jTkUuceZR', 'ypyvn': 'CoCbYQ'}) == True", "assert check_dict_case({'WEJAX': 'YWBJXH', 'HLZLLV': '7304084'}) == True", "assert check_dict_case({'duase': 'StBcsYaUZFV', 'mbnuc': 'SDGj'}) == True", "assert check_dict_case({'w': 'ypghvpfdrq', 6: 'fyzqdslgte', 'e': 'hboeipeq'}) == False", "assert check_dict_case({'CuYwc': 'rAdthhp', 'XzJaxnpP': '332954', 'kTf': 'vGasJU'}) == False", "assert check_dict_case({}) == False"], "nl": "\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    ", "func": "def check_dict_case(dict):", "examples": "Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    ", "repair_prompt": ["def check_dict_case(dict):\t\n'''Given a dictionary, return True if either all keys are strings in lower case or all keys are strings in upper case, otherwise return False. The function should return False is the given dictionary is empty.\nExamples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    '''", "def check_dict_case(dict):\t\n'''Given a dictionary, return True if either all keys are strings in lower case or all keys are strings in upper case. Alternatively, return True if the keys are either all lower case or all upper case. Otherwise, return False. The function should return False is the given dictionary is empty.\nExamples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    '''", "def check_dict_case(dict):\t\n'''Given a dictionary, return True if either all keys are strings in lower case or all keys are strings in upper case; otherwise return False, and the function should return False if the given dictionary is empty.\nExamples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    \"\"\"\n    Given a dictionary, return True if either all keys are strings in lower case or all keys are strings in upper case,\n    otherwise return False. The function should return False if the given dictionary is empty or contains non-string keys.\n\n    Args:\n        input_dict (dict): Dictionary to check\n\n    Returns:\n        bool: Boolean indicating if all keys are in the same case\n    \"\"\"\n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n\n    # Initialize flags for lowercase and uppercase checks\n    all_lowercase = True\n    all_uppercase = True\n\n    # Iterate through each key in the dictionary\n    for key in input_dict.keys():\n        # Check if the key is a string\n        if not isinstance(key, str):\n            return False\n\n        # Check if the key is lowercase\n        if not key.islower():\n            all_lowercase = False\n\n        # Check if the key is uppercase\n        if not key.isupper():\n            all_uppercase = False\n\n        # If both flags are False, no need to continue checking\n        if not all_lowercase and not all_uppercase:\n            return False\n\n    # Return True if either all keys are lowercase or all keys are uppercase\n    return all_lowercase or all_uppercase\n", "from typing import List\n## main.py\n\ndef check_dict_case(d: dict) -> bool:\n    '''\n    Check if all keys in the dictionary are either all lower case or all upper case.\n    Returns False if the dictionary is empty or contains non-string keys.\n    \n    Parameters:\n    d (dict): The dictionary to check.\n    \n    Returns:\n    bool: True if all keys are in the same case, False otherwise.\n    '''\n    # Check if the dictionary is empty\n    if not d:\n        return False\n\n    # Initialize flags for lowercase and uppercase checks\n    all_lowercase = True\n    all_uppercase = True\n\n    # Iterate over each key in the dictionary\n    for key in d.keys():\n        # If a key is not a string, return False immediately\n        if not isinstance(key, str):\n            return False\n        \n        # Check if the key is lowercase; if not, set the lowercase flag to False\n        if not key.islower():\n            all_lowercase = False\n        \n        # Check if the key is uppercase; if not, set the uppercase flag to False\n        if not key.isupper():\n            all_uppercase = False\n\n    # Return True if either all keys are lowercase or all keys are uppercase\n    return all_lowercase or all_uppercase\n", "from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    '''\n    Given a dictionary, return True if either all keys are strings in lower case or all keys are strings in upper case, otherwise return False. \n    The function should return False if the given dictionary is empty or if any key is not a string.\n    \n    Parameters:\n    input_dict (dict): The dictionary to check.\n    \n    Returns:\n    bool: True if all keys are consistently cased, False otherwise.\n    '''\n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n    \n    # Initialize flags for lowercase and uppercase checks\n    all_lowercase = True\n    all_uppercase = True\n    \n    # Iterate over the keys of the dictionary\n    for key in input_dict.keys():\n        # Check if the key is a string\n        if not isinstance(key, str):\n            return False\n        \n        # Check if the key is lowercase\n        if not key.islower():\n            all_lowercase = False\n        \n        # Check if the key is uppercase\n        if not key.isupper():\n            all_uppercase = False\n        \n        # Early exit if neither all_lowercase nor all_uppercase can be True\n        if not all_lowercase and not all_uppercase:\n            return False\n    \n    # Return True if all keys are either lowercase or uppercase\n    return all_lowercase or all_uppercase\n", "from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    '''\n    Checks if all keys in the dictionary are either all lowercase or all uppercase.\n    \n    Parameters:\n    input_dict (dict): The dictionary to check.\n    \n    Returns:\n    bool: True if all keys are either all lowercase or all uppercase, False otherwise.\n    \n    Raises:\n    TypeError: If the input is not a dictionary.\n    '''\n    # Validate input type\n    if not isinstance(input_dict, dict):\n        raise TypeError(\"Input must be a dictionary.\")\n    \n    # Check if dictionary is empty\n    if not input_dict:\n        return False\n    \n    # Initialize flags for lower case and upper case\n    all_lower = True\n    all_upper = True\n    \n    # Iterate over keys\n    for key in input_dict.keys():\n        # Check if key is a string\n        if not isinstance(key, str):\n            return False\n        \n        # Check case of the key\n        if not key.islower():\n            all_lower = False\n        if not key.isupper():\n            all_upper = False\n    \n    # Return True if either all keys are lower case or all keys are upper case\n    return all_lower or all_upper\n", "from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    '''\n    Given a dictionary, return True if either all keys are strings in lower case or all keys are strings in upper case.\n    Return False if the dictionary is empty or contains non-string keys.\n    \n    Args:\n        input_dict (dict): The dictionary to check.\n        \n    Returns:\n        bool: True if all keys are consistently cased, False otherwise.\n        \n    Raises:\n        TypeError: If input_dict is not a dictionary.\n    '''\n    # Validate input is a dictionary\n    if not isinstance(input_dict, dict):\n        raise TypeError(\"Input must be a dictionary.\")\n    \n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n    \n    # Initialize flags for case checking\n    all_lower = True\n    all_upper = True\n    \n    # Iterate over keys to check their case\n    for key in input_dict.keys():\n        if not isinstance(key, str):\n            return False\n        \n        if key.islower():\n            all_upper = False\n        elif key.isupper():\n            all_lower = False\n        else:\n            return False\n    \n    # Return True if either all keys are lower case or all keys are upper case\n    return all_lower or all_upper\n", "from typing import List\n## main.py\n\ndef check_dict_case(d: dict) -> bool:\n    \"\"\"\n    Checks if all keys in the dictionary are either all lowercase or all uppercase strings.\n    Returns False if the dictionary is empty or contains non-string keys.\n    \n    Parameters:\n    d (dict): The dictionary to check.\n    \n    Returns:\n    bool: True if all keys are either all lowercase or all uppercase strings, False otherwise.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not d:\n        return False\n\n    # Initialize flags to check for all lowercase or all uppercase keys\n    all_lowercase = True\n    all_uppercase = True\n\n    # Iterate over the keys of the dictionary\n    for key in d.keys():\n        # Check if the key is a string\n        if not isinstance(key, str):\n            return False\n\n        # Check if the key is lowercase\n        if not key.islower():\n            all_lowercase = False\n\n        # Check if the key is uppercase\n        if not key.isupper():\n            all_uppercase = False\n\n        # Early exit if neither all_lowercase nor all_uppercase can be True\n        if not all_lowercase and not all_uppercase:\n            return False\n\n    # Return True if either all keys are lowercase or all keys are uppercase\n    return all_lowercase or all_uppercase\n", "from typing import List\n## main.py\n\ndef check_dict_case(d: dict) -> bool:\n    \"\"\"\n    Checks if all keys in the dictionary are either all lowercase or all uppercase strings.\n    Returns False for mixed case keys, non-string keys, or an empty dictionary.\n\n    Parameters:\n    d (dict): The dictionary to check.\n\n    Returns:\n    bool: True if all keys are consistently cased, False otherwise.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not d:\n        return False\n\n    # Iterate over the keys of the dictionary\n    for key in d:\n        # Check if all keys are strings\n        if not isinstance(key, str):\n            return False\n\n    # Determine if all keys are either lower case or upper case\n    all_lower = all(key.islower() for key in d)\n    all_upper = all(key.isupper() for key in d)\n\n    # Return True if all keys meet one of the conditions; otherwise, return False\n    return all_lower or all_upper\n", "from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    \"\"\"\n    Checks if all string keys in the dictionary are either all lower case or all upper case.\n\n    Args:\n        input_dict (dict): A dictionary with keys to be checked for case consistency.\n\n    Returns:\n        bool: True if all string keys are either all lower case or all upper case, otherwise False.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n\n    # Initialize flags for case checking\n    all_lower = True\n    all_upper = True\n\n    # Iterate over the keys of the dictionary\n    for key in input_dict.keys():\n        # Only consider string keys for case checking\n        if isinstance(key, str):\n            if not key.islower():\n                all_lower = False\n            if not key.isupper():\n                all_upper = False\n\n        # Early exit if both flags are False\n        if not all_lower and not all_upper:\n            return False\n\n    # Return True if either all_lower or all_upper is True\n    return all_lower or all_upper\n", "from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    '''\n    Check if all keys in the dictionary are either all lowercase or all uppercase strings.\n    \n    Args:\n        input_dict (dict): The dictionary to check.\n        \n    Returns:\n        bool: True if all keys are in the same case, False otherwise.\n    '''\n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n    \n    # Initialize flags for lowercase and uppercase checks\n    all_lowercase = True\n    all_uppercase = True\n    \n    # Iterate through the keys of the dictionary\n    for key in input_dict.keys():\n        # Check if the key is a string\n        if not isinstance(key, str):\n            return False\n        \n        # Check if the key is lowercase\n        if not key.islower():\n            all_lowercase = False\n        \n        # Check if the key is uppercase\n        if not key.isupper():\n            all_uppercase = False\n    \n    # Return True if all keys are either lowercase or uppercase\n    return all_lowercase or all_uppercase\n", "from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    \"\"\"\n    Checks if all keys in the dictionary are either all in lowercase or all in uppercase.\n    \n    Args:\n        input_dict (dict): A dictionary with keys as strings.\n        \n    Returns:\n        bool: True if all keys are either in lower case or upper case, otherwise False.\n              Returns False for empty dictionaries or if any key is not a string.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n    \n    # Initialize flags to track case consistency\n    all_lower = all_upper = True\n    \n    # Iterate over each key in the dictionary\n    for key in input_dict:\n        # Check if the key is not a string\n        if not isinstance(key, str):\n            return False\n        # Check if the key is lowercase\n        if key.islower():\n            all_upper = False\n        # Check if the key is uppercase\n        elif key.isupper():\n            all_lower = False\n        # If the key is neither all lower nor all upper, return False\n        else:\n            return False\n    \n    # Return True if either all_lower or all_upper is True, but not both\n    return all_lower or all_upper\n"], "plans": ["requirement analysis:\nThe function should accurately determine if all keys in a dictionary are either all lowercase or all uppercase strings. It should return False for empty dictionaries and handle mixed data types gracefully. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the main function to check dictionary key cases.\n- Optimize the function for performance with large dictionaries.\n- Include error handling for invalid inputs.\n- Provide detailed documentation and examples.\n- Conduct user testing to ensure functionality meets expectations.\nWe will implement a function that iterates over the dictionary keys to check if they are all lowercase or all uppercase strings. The function will handle empty dictionaries and mixed data types by returning False. We will use Python's built-in capabilities for string case checking to ensure optimal performance. Additionally, we will include error handling to provide informative messages for invalid inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all keys are strings in lower case or all keys are strings in upper case'\n    Explanation: The requirement specifies that the function should return True only if all keys in the dictionary are either entirely lowercase or entirely uppercase strings. If there is any deviation from this, the function should return False.\n\n# [phrase showing quantity relationship]\n    'either all keys': This indicates a condition where all elements (keys) must satisfy one of two possible states (all lowercase or all uppercase).\n    'otherwise': This implies that if the condition is not met, the function should return False.\n\n# [degree adverb]\n    'all': This means every key in the dictionary must meet the specified condition (either all lowercase or all uppercase).\n\n# [code logic]\n    1. Check if the dictionary is empty; if so, return False.\n    2. Initialize two flags: one for checking all lowercase and another for checking all uppercase.\n    3. Iterate through each key in the dictionary:\n        - If a key is not a string, return False.\n        - Check if the key is lowercase; if not, set the lowercase flag to False.\n        - Check if the key is uppercase; if not, set the uppercase flag to False.\n    4. Return True if either the lowercase flag or the uppercase flag remains True after iteration; otherwise, return False.\n\n# [edge case]\n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so the function should return False as specified in the requirement.\n    \n    check_dict_case({\"a\": \"apple\", \"b\": \"banana\", \"C\": \"cherry\"}) = False\n    Explanation: Not all keys are lowercase or uppercase; there is a mix of cases, so the function should return False.\n    \n    check_dict_case({\"A\": \"apple\", \"B\": \"banana\", \"C\": \"cherry\"}) = True\n    Explanation: All keys are uppercase strings, so the function should return True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for empty dictionaries and mixed case keys.\n", "requirement analysis:\nThe function needs to accurately determine if all keys in a dictionary are either in lower case or upper case. It should return False for empty dictionaries and handle non-string keys appropriately. Performance optimization is crucial for handling large dictionaries efficiently.\nrequirement pool:\n- Implement function to check dictionary key case accurately\n- Optimize performance for large dictionaries\n- Handle non-string keys gracefully\n- Provide clear error messages for invalid inputs\n- Ensure compatibility with different Python versions\nWe will implement a function that iterates over the dictionary keys to check if they are all in lower case or upper case. The function will handle non-string keys by returning False immediately, as mixed types do not satisfy the requirement of uniform case. We will use Python's built-in capabilities to ensure optimal performance, especially for large dictionaries. The function will also return False for empty dictionaries to prevent misleading results.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all keys are strings in lower case or all keys are strings in upper case'\n    Explanation: This means that for the function to return True, every key in the dictionary must be either entirely in lowercase or entirely in uppercase. If there is any deviation from this uniformity, the function should return False.\n\n    'empty dictionary'\n    Explanation: If the dictionary has no elements, it should return False as per the requirement.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the dictionary is empty. If it is, return False.\n    2. Initialize two flags: one for checking all lowercase keys and another for checking all uppercase keys.\n    3. Iterate over each key in the dictionary:\n        a. If a key is not a string, return False immediately.\n        b. Check if the key is lowercase; if not, set the lowercase flag to False.\n        c. Check if the key is uppercase; if not, set the uppercase flag to False.\n    4. After iterating through all keys, return True if either the lowercase flag or the uppercase flag is still True.\n    5. If both flags are False, return False.\n\n# [edge case] \n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so it should return False as per the requirement.\n\n    check_dict_case({\"a\": \"apple\", \"A\": \"banana\"}) = False\n    Explanation: The keys are mixed case, so it should return False.\n\n    check_dict_case({\"A\": \"apple\", \"B\": \"banana\", \"C\": \"cherry\"}) = True\n    Explanation: All keys are in uppercase, so it should return True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for empty dictionaries and mixed-type keys by returning False immediately.\n", "requirement analysis:\nThe function should accurately determine if all keys in a dictionary are either all lowercase or all uppercase strings. It must return False for empty dictionaries and handle mixed case or non-string keys appropriately.\nrequirement pool:\n- Implement main function logic for case checking\n- Optimize for performance with large dictionaries\n- Develop error handling for non-string keys\n- Create comprehensive test cases\n- Document function usage and edge cases\nWe will implement a function that iterates over the keys of the dictionary to check if they are all lowercase or all uppercase strings. The function will return False if the dictionary is empty or if any key is not a string. We will use Python's built-in string methods to check the case of the keys. The function will be optimized for performance by using early exits when a condition is not met.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all keys are strings in lower case or all keys are strings in upper case'\n    Explanation: The requirement specifies that the function should return True only if all keys in the dictionary are either entirely lowercase or entirely uppercase strings. If there is any deviation from this, the function should return False.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'all': means every key in the dictionary must meet the condition of being either all lowercase or all uppercase strings.\n\n# [code logic]\n    1. Check if the dictionary is empty; if so, return False.\n    2. Iterate over the keys of the dictionary.\n    3. Check if each key is a string; if any key is not a string, return False.\n    4. Determine if all keys are lowercase or all keys are uppercase.\n    5. Return True if all keys are either lowercase or uppercase, otherwise return False.\n\n# [edge case] \n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so the function should return False as specified in the requirement.\n    \n    check_dict_case({\"a\": \"apple\", \"A\": \"banana\"}) = False\n    Explanation: The keys are not consistently in one case; they are mixed between lowercase and uppercase, so the function should return False.\n    \n    check_dict_case({\"A\": \"apple\", \"B\": \"banana\", \"C\": \"cherry\"}) = True\n    Explanation: All keys are uppercase strings, so the function should return True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking for empty dictionaries and mixed-case keys.\n", "requirement analysis:\nThe function should accurately determine if all keys in a dictionary are either all lowercase or all uppercase. It should handle edge cases such as empty dictionaries and non-string keys, returning False in these scenarios. Performance optimization is crucial for handling large dictionaries efficiently.\nrequirement pool:\n- Implement main functionality to check dictionary key cases.\n- Optimize performance for large dictionaries.\n- Provide error handling for invalid inputs.\n- Enhance user documentation for better understanding.\n- Integrate with existing data validation systems.\nWe will implement a function that checks if all keys in a dictionary are either all lowercase or all uppercase. The function will handle edge cases such as empty dictionaries and non-string keys by returning False. We will use Python's built-in capabilities to efficiently iterate over dictionary keys and check their case. The function will also include error handling to provide informative messages for invalid inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lower case' and 'upper case'\n    Explanation: The requirement is focused on checking the case of the keys in the dictionary. It specifies that all keys should either be in lower case or upper case for the function to return True.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'all': means every key in the dictionary must meet the condition of being either all lower case or all upper case.\n\n# [code logic]\n    1. Check if the dictionary is empty; if so, return False.\n    2. Initialize two flags: one for checking all lower case and another for checking all upper case.\n    3. Iterate through the keys of the dictionary:\n        - If a key is not a string, return False.\n        - Check if the key is lower case; if not, set the lower case flag to False.\n        - Check if the key is upper case; if not, set the upper case flag to False.\n    4. Return True if either the lower case flag or upper case flag is True; otherwise, return False.\n\n# [edge case] \n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so it should return False as per the requirement.\n    \n    check_dict_case({\"a\": \"apple\", \"A\": \"banana\"}) = False\n    Explanation: The keys are mixed case, so it should return False.\n    \n    check_dict_case({\"A\": \"apple\", \"B\": \"banana\", \"C\": \"cherry\"}) = True\n    Explanation: All keys are in upper case, so it should return True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty dictionaries and mixed-case keys.\n", "requirement analysis:\nThe function should accurately determine if all keys in a dictionary are either all lower case or all upper case. It should return False for empty dictionaries and handle invalid inputs gracefully. Performance optimization is crucial for handling large dictionaries efficiently.\nrequirement pool:\n- Implement accurate case checking for dictionary keys\n- Optimize performance for large dictionaries\n- Implement error handling for invalid inputs\n- Provide detailed documentation for users\n- Ensure compatibility with various Python versions\nWe will implement a function that checks if all keys in a dictionary are either all lower case or all upper case. The function will handle invalid inputs gracefully and optimize performance for large dictionaries using efficient iteration and built-in Python functions. We will use the 'string' module to check the case of keys and ensure compatibility with various Python versions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all keys are strings in lower case or all keys are strings in upper case'\n    Explanation: This means that the function should check if every key in the dictionary is either entirely lowercase or entirely uppercase. If all keys meet one of these conditions, the function should return True.\n\n    'return False if the given dictionary is empty'\n    Explanation: This indicates that an empty dictionary should automatically result in a False return value, regardless of any other conditions.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'either all lower case or all upper case'\n    Explanation: This implies a complete uniformity in the case of all keys. The function should verify that every key is either all lowercase or all uppercase.\n\n# [code logic]\n    1. Check if the dictionary is empty. If it is, return False.\n    2. Initialize two flags: one for checking all lowercase and another for checking all uppercase.\n    3. Iterate through each key in the dictionary:\n        - If a key is lowercase, set the lowercase flag to True.\n        - If a key is uppercase, set the uppercase flag to True.\n    4. After iteration, check if either the lowercase flag or the uppercase flag is True and the other is False.\n    5. Return True if one flag is True and the other is False; otherwise, return False.\n\n# [edge case] \n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so according to the requirement, the function should return False.\n\n    check_dict_case({\"a\": \"apple\", \"b\": \"banana\", \"c\": \"cherry\"}) = True\n    Explanation: All keys are lowercase, so the function should return True.\n\n    check_dict_case({\"A\": \"apple\", \"B\": \"banana\", \"C\": \"cherry\"}) = True\n    Explanation: All keys are uppercase, so the function should return True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking if the dictionary is empty and verifying uniformity in key cases.\n", "requirement analysis:\nThe function should accurately determine if all keys in a dictionary are either all lowercase or all uppercase. It should return False for empty dictionaries and handle non-string keys appropriately. Performance should be optimized for large datasets, and the function should be easy to understand and use.\nrequirement pool:\n- Implement the main function to check dictionary key cases\n- Optimize the function for performance with large dictionaries\n- Ensure the function handles non-string keys correctly\n- Provide comprehensive documentation and examples\n- Conduct performance testing and optimization\nWe will implement a function that iterates over the dictionary keys to check if they are all either lowercase or uppercase strings. The function will return False if the dictionary is empty or if any key is not a string. We will use Python's built-in string methods to check the case of the keys. The function will be optimized for performance by using efficient iteration and early exits when a condition is not met.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all keys are strings in lower case or all keys are strings in upper case'\n    Explanation: This means that for the function to return True, every key in the dictionary must be a string and either all must be in lowercase or all must be in uppercase.\n\n    'return False if the given dictionary is empty'\n    Explanation: If the dictionary has no elements, the function should immediately return False.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'all': This indicates that every single key in the dictionary must meet the specified condition (either all lowercase or all uppercase) for the function to return True.\n\n# [code logic]\n1. Check if the dictionary is empty. If it is, return False.\n2. Iterate over the keys of the dictionary.\n3. Check if all keys are strings. If any key is not a string, return False.\n4. Check if all keys are either lowercase or uppercase:\n   - Use a flag to determine if all keys are lowercase.\n   - Use another flag to determine if all keys are uppercase.\n5. If either flag is True (all keys are lowercase or all keys are uppercase), return True.\n6. Otherwise, return False.\n\n# [edge case] \n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so the function should return False.\n\n    check_dict_case({\"a\": \"apple\", \"A\": \"banana\"}) = False\n    Explanation: The keys are not consistently in one case (mixed case), so the function should return False.\n\n    check_dict_case({\"A\": \"apple\", \"B\": \"banana\", \"C\": \"cherry\"}) = True\n    Explanation: All keys are uppercase strings, so the function should return True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking for an empty dictionary and ensuring all keys are strings and consistently in one case.\n", "requirement analysis:\nThe function should accurately determine if all keys in a dictionary are either all lowercase or all uppercase strings. It should return False for mixed case keys or non-string keys, and handle empty dictionaries by returning False.\nrequirement pool:\n- Implement the main function to check dictionary key cases.\n- Optimize the function for performance with large dictionaries.\n- Ensure robust error handling for invalid inputs.\n- Provide detailed documentation for the function.\n- Include unit tests to verify functionality.\nWe will implement a function that iterates over the dictionary keys to check if they are all lowercase or all uppercase strings. The function will return False if the dictionary is empty, contains non-string keys, or if the keys are mixed case. We will use Python's built-in string methods to check the case of the keys, ensuring optimal performance even for large dictionaries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'dictionary'\n    Explanation: A collection of key-value pairs in Python, where each key is unique and associated with a value.\n\n    'lower case' and 'upper case'\n    Explanation: Refers to the case of the string characters. Lower case means all characters are in small letters (e.g., 'a', 'b'), while upper case means all characters are in capital letters (e.g., 'A', 'B').\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'all': means every key in the dictionary must meet the condition (either all lower case or all upper case)\n\n# [code logic]\n    1. Check if the dictionary is empty; if so, return False.\n    2. Iterate over the keys of the dictionary.\n    3. Check if all keys are strings.\n    4. Determine if all keys are either lower case or upper case.\n    5. Return True if all keys meet one of the conditions; otherwise, return False.\n\n# [edge case] \n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so the function should return False.\n\n    check_dict_case({\"a\": \"apple\", \"A\": \"banana\"}) = False\n    Explanation: The keys are mixed case, so the function should return False.\n\n    check_dict_case({8: \"banana\", \"a\": \"apple\"}) = False\n    Explanation: The dictionary contains a non-string key, so the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not dict:\n            return False\n        for key in dict:\n            if not isinstance(key, str):\n                return False\n        all_lower = all(key.islower() for key in dict)\n        all_upper = all(key.isupper() for key in dict)\n        return all_lower or all_upper\n", "requirement analysis:\nThe function should accurately determine if all keys in a dictionary are either all lower case or all upper case. It should return False for mixed case keys or if the dictionary is empty. Performance optimization is crucial for handling large dictionaries efficiently.\nrequirement pool:\n- Implement function to check dictionary key case consistency\n- Optimize function for performance with large dictionaries\n- Ensure function handles empty dictionaries correctly\n- Provide clear error messages for invalid inputs\n- Document function usage and edge cases\nWe will implement a function that checks the case consistency of dictionary keys using Python's built-in capabilities. The function will iterate over the keys and determine if they are all lower case or all upper case. For performance optimization, especially with large dictionaries, we will use efficient iteration and early exit strategies. The function will handle empty dictionaries by returning False immediately. Non-string keys will be ignored in the case checking process, as they do not contribute to case consistency.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'case consistency'\n    Explanation: The requirement is focused on checking whether all keys in the dictionary are either in lower case or upper case. This means that the function should verify the uniformity of the case of string keys.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'all': means every key in the dictionary should be checked for case consistency, either all lower case or all upper case.\n\n# [code logic]\n    1. Check if the dictionary is empty; if so, return False.\n    2. Initialize two flags: one for checking all lower case and another for checking all upper case.\n    3. Iterate through the keys of the dictionary:\n        - If a key is a string, check its case.\n        - If any key is not in lower case, set the lower case flag to False.\n        - If any key is not in upper case, set the upper case flag to False.\n    4. Return True if either the lower case flag or the upper case flag remains True after iteration; otherwise, return False.\n\n# [edge case] \n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so there are no keys to check for case consistency.\n    \n    check_dict_case({\"a\": \"apple\", \"A\": \"banana\"}) = False\n    Explanation: The keys are mixed in terms of case, so they do not meet the requirement of being all lower or all upper case.\n    \n    check_dict_case({\"A\": \"apple\", \"B\": \"banana\", \"C\": \"cherry\"}) = True\n    Explanation: All keys are in upper case, meeting the requirement.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for empty dictionaries and mixed-case keys.\n", "requirement analysis:\nThe function should accurately determine if all keys in a dictionary are either all lowercase or all uppercase strings. It should return False for mixed case keys or if the dictionary is empty. Performance optimization is crucial for handling large dictionaries efficiently.\nrequirement pool:\n- Implement function to check dictionary key case consistency\n- Optimize function for performance with large dictionaries\n- Handle empty dictionary cases gracefully\n- Provide detailed error messages for mixed case keys\n- Ensure compatibility with various Python versions\nWe will implement a function that checks if all keys in a dictionary are either all lowercase or all uppercase strings. The function will return False for mixed case keys or if the dictionary is empty. We will use Python's built-in capabilities to handle string operations efficiently, ensuring compatibility with various Python versions. Non-string keys will cause the function to return False, as they do not meet the requirement of being either all lowercase or all uppercase strings.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all keys are strings in lower case or all keys are strings in upper case'\n    Explanation: The requirement specifies that the function should return True only if every key in the dictionary is either entirely lowercase or entirely uppercase. If there is any deviation from this, such as mixed case keys or non-string keys, the function should return False.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'either all': means that the condition must be met by all keys in the dictionary, not just some of them.\n\n# [code logic]\n    1. Check if the dictionary is empty; if so, return False.\n    2. Iterate through the keys of the dictionary.\n    3. Check if all keys are strings.\n    4. Determine if all keys are either lowercase or uppercase.\n    5. Return True if all keys meet one of these conditions; otherwise, return False.\n\n# [edge case] \n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so the function should return False.\n    \n    check_dict_case({\"a\": \"apple\", \"A\": \"banana\"}) = False\n    Explanation: The keys are mixed case, so the function should return False.\n    \n    check_dict_case({\"A\": \"apple\", \"B\": \"banana\", \"C\": \"cherry\"}) = True\n    Explanation: All keys are uppercase strings, so the function should return True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking for empty dictionaries and ensuring all keys are either lowercase or uppercase strings.\n", "requirement analysis:\nThe function needs to accurately determine the case consistency of dictionary keys, handling both empty dictionaries and mixed-case scenarios. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the main function to check dictionary key cases.\n- Optimize the function for performance with large dictionaries.\n- Ensure robust error handling for invalid inputs.\n- Provide documentation and examples for user understanding.\n- Consider extending functionality for nested dictionaries.\nWe will implement a function that checks the case consistency of dictionary keys using Python's built-in string methods. The function will handle empty dictionaries gracefully and return False for mixed-case keys. We will use Python's standard library, ensuring optimal performance for large dictionaries by iterating over keys only once.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'all keys are strings in lower case or all keys are strings in upper case'\n    Explanation: This means that the function should check if every key in the dictionary is either entirely in lowercase or entirely in uppercase. If there is any mix of cases or non-string keys, the function should return False.\n\n    'empty dictionary'\n    Explanation: If the dictionary has no elements, the function should return False as per the requirement.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Check if the dictionary is empty. If it is, return False.\n2. Initialize two boolean flags: `all_lower` and `all_upper`.\n3. Iterate over each key in the dictionary:\n   - If a key is not a string, return False immediately.\n   - Check if the key is lowercase. If it is, set `all_lower` to True.\n   - Check if the key is uppercase. If it is, set `all_upper` to True.\n4. After iterating through all keys, return True if either `all_lower` or `all_upper` is True, but not both. Otherwise, return False.\n\n# [edge case] \n    check_dict_case({}) = False\n    Explanation: The dictionary is empty, so the function should return False.\n\n    check_dict_case({\"a\": \"apple\", \"A\": \"banana\"}) = False\n    Explanation: The keys are mixed case, so the function should return False.\n\n    check_dict_case({\"A\": \"apple\", \"B\": \"banana\", 1: \"one\"}) = False\n    Explanation: There is a non-string key (1), so the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n```python\ndef check_dict_case(d):\n    if not d:\n        return False\n    \n    all_lower = all_upper = True\n    \n    for key in d:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            all_upper = False\n        elif key.isupper():\n            all_lower = False\n        else:\n            return False\n    \n    return all_lower or all_upper\n```\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8362, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, false, true, true], "pass_test_cases_num": [116, 116, 116, 116, 116, 116, 116, 97, 116, 116], "completion": "from typing import List\n## main.py\n\ndef check_dict_case(input_dict: dict) -> bool:\n    \"\"\"\n    Checks if all keys in the dictionary are either all in lowercase or all in uppercase.\n    \n    Args:\n        input_dict (dict): A dictionary with keys as strings.\n        \n    Returns:\n        bool: True if all keys are either in lower case or upper case, otherwise False.\n              Returns False for empty dictionaries or if any key is not a string.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not input_dict:\n        return False\n    \n    # Initialize flags to track case consistency\n    all_lower = all_upper = True\n    \n    # Iterate over each key in the dictionary\n    for key in input_dict:\n        # Check if the key is not a string\n        if not isinstance(key, str):\n            return False\n        # Check if the key is lowercase\n        if key.islower():\n            all_upper = False\n        # Check if the key is uppercase\n        elif key.isupper():\n            all_lower = False\n        # If the key is neither all lower nor all upper, return False\n        else:\n            return False\n    \n    # Return True if either all_lower or all_upper is True, but not both\n    return all_lower or all_upper\n", "passed": true, "pass": true, "pass_num": 9, "round": 540, "mutate_method": "rephrase_one", "parent_index": 189}
