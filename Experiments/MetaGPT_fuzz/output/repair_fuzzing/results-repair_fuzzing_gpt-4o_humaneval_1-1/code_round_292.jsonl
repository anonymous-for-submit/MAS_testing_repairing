{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. These numbers could be any integers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "entry_point": "any_int", "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "test": ["def check(any_int):\n\tassert any_int(8, 19, 11) == True", "def check(any_int):\n\tassert any_int(7.307, 7.071, 5.088) == False", "def check(any_int):\n\tassert any_int(6, 12, 6) == True", "def check(any_int):\n\tassert any_int(6.511, 2, 3) == False", "def check(any_int):\n\tassert any_int(12, 6, 6) == True", "def check(any_int):\n\tassert any_int(2, 2, 4) == True", "def check(any_int):\n\tassert any_int(5.114, 5, 4) == False", "def check(any_int):\n\tassert any_int(3.376, 6.953, 2.111) == False", "def check(any_int):\n\tassert any_int(2, 3, 1)==True", "def check(any_int):\n\tassert any_int(2, 5, 4) == False", "def check(any_int):\n\tassert any_int(7.194, 1.302, 7.462) == False", "def check(any_int):\n\tassert any_int(1, 7, 8) == True", "def check(any_int):\n\tassert any_int(5, 8, 3) == True", "def check(any_int):\n\tassert any_int(2.389, 9, 10) == False", "def check(any_int):\n\tassert any_int(-1, 0, 1) == True", "def check(any_int):\n\tassert any_int(9, 6, 3) == True", "def check(any_int):\n\tassert any_int(4.38, 6, 1) == False", "def check(any_int):\n\tassert any_int(3.785, 6.308, 7.367) == False", "def check(any_int):\n\tassert any_int(6, 10, 4) == True", "def check(any_int):\n\tassert any_int(1.705, 2, 6.616) == False", "def check(any_int):\n\tassert any_int(6, 4, 2) == True", "def check(any_int):\n\tassert any_int(4, 2, 2)==True", "def check(any_int):\n\tassert any_int(3.692, 2, 7.2) == False", "def check(any_int):\n\tassert any_int(2.5, 2, 3)==False", "def check(any_int):\n\tassert any_int(5, 6, 1) == True", "def check(any_int):\n\tassert any_int(1, 3, 2) == True", "def check(any_int):\n\tassert any_int(3,4,7)==True", "def check(any_int):\n\tassert any_int(6, 10, 1) == False", "def check(any_int):\n\tassert any_int(6, 2, 4) == True", "def check(any_int):\n\tassert any_int(6.155, 2.926, 1.672) == False", "def check(any_int):\n\tassert any_int(5, 2, 3) == True", "def check(any_int):\n\tassert any_int(7.829, 2, 9) == False", "def check(any_int):\n\tassert any_int(4, 6, 3) == False", "def check(any_int):\n\tassert any_int(2.583, 3.749, 4.738) == False", "def check(any_int):\n\tassert any_int(12, 11, 1) == True", "def check(any_int):\n\tassert any_int(3.211, 4, 3) == False", "def check(any_int):\n\tassert any_int(1, 1, 7) == False", "def check(any_int):\n\tassert any_int(0, 3, 3) == True", "def check(any_int):\n\tassert any_int(1.157, 8, 2) == False", "def check(any_int):\n\tassert any_int(3, 3, 6) == True", "def check(any_int):\n\tassert any_int(4.272, 6.612, 6.663) == False", "def check(any_int):\n\tassert any_int(1, 1, 2) == True", "def check(any_int):\n\tassert any_int(2.2, 2.2, 2.2)==False", "def check(any_int):\n\tassert any_int(3.158, 8, 6.135) == False", "def check(any_int):\n\tassert any_int(1.346, 5, 6) == False", "def check(any_int):\n\tassert any_int(15, 9, 6) == True", "def check(any_int):\n\tassert any_int(1, 4, 5) == True", "def check(any_int):\n\tassert any_int(7.656, 1, 7) == False", "def check(any_int):\n\tassert any_int(3.599, 5, 1) == False", "def check(any_int):\n\tassert any_int(3, 1, 2) == True", "def check(any_int):\n\tassert any_int(-3, 2, 5) == True", "def check(any_int):\n\tassert any_int(4, 11, 5) == False", "def check(any_int):\n\tassert any_int(10, 7, 3) == True", "def check(any_int):\n\tassert any_int(7, 3, 10) == True", "def check(any_int):\n\tassert any_int(3, 4, 1) == True", "def check(any_int):\n\tassert any_int(3.103, 3, 10) == False", "def check(any_int):\n\tassert any_int(6, 16, 10) == True", "def check(any_int):\n\tassert any_int(1.812, 6.567, 7.145) == False", "def check(any_int):\n\tassert any_int(6, 6, 12) == True", "def check(any_int):\n\tassert any_int(1, 7, 2) == False", "def check(any_int):\n\tassert any_int(7, 6, 1) == True", "def check(any_int):\n\tassert any_int(4, 3, 7) == True", "def check(any_int):\n\tassert any_int(4, 6, 2) == True", "def check(any_int):\n\tassert any_int(2.007, 9, 7.198) == False", "def check(any_int):\n\tassert any_int(2, 3, 5) == True", "def check(any_int):\n\tassert any_int(6.086, 4, 4) == False", "def check(any_int):\n\tassert any_int(3.754, 6, 5.044) == False", "def check(any_int):\n\tassert any_int(8, 10, 2) == True", "def check(any_int):\n\tassert any_int(7.73, 5.041, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 6, 2)==False", "def check(any_int):\n\tassert any_int(3.683, 8, 1.193) == False", "def check(any_int):\n\tassert any_int(-4, 6, 2)==True", "def check(any_int):\n\tassert any_int(7, 13, 6) == True", "def check(any_int):\n\tassert any_int(2.003, 3, 11) == False", "def check(any_int):\n\tassert any_int(3.357, 7, 8.074) == False", "def check(any_int):\n\tassert any_int(3.621, 6.679, 2.542) == False", "def check(any_int):\n\tassert any_int(12, 3, 9) == True", "def check(any_int):\n\tassert any_int(7.797, 7, 4) == False", "def check(any_int):\n\tassert any_int(7, 1, 8) == True", "def check(any_int):\n\tassert any_int(5, 3, 8) == True", "def check(any_int):\n\tassert any_int(5, 7, 2) == True", "def check(any_int):\n\tassert any_int(5, 6, 11) == True", "def check(any_int):\n\tassert any_int(6.681, 8, 4.747) == False", "def check(any_int):\n\tassert any_int(3, 2, 5) == True", "def check(any_int):\n\tassert any_int(3.0,4,7)==False", "def check(any_int):\n\tassert any_int(9, 1, 10) == True", "def check(any_int):\n\tassert any_int(1.5, 5, 3.5)==False", "def check(any_int):\n\tassert any_int(2.834, 7, 9) == False", "def check(any_int):\n\tassert any_int(2, 6, 4) == True", "def check(any_int):\n\tassert any_int(6.068, 1, 3.454) == False", "def check(any_int):\n\tassert any_int(1.834, 7.255, 6.304) == False", "def check(any_int):\n\tassert any_int(1.726, 3, 1) == False", "def check(any_int):\n\tassert any_int(13, 7, 6) == True", "def check(any_int):\n\tassert any_int(6.9, 4, 12) == False", "def check(any_int):\n\tassert any_int(4.039, 5, 5.992) == False", "def check(any_int):\n\tassert any_int(4, 5, 9) == True", "def check(any_int):\n\tassert any_int(6, 2, 7) == False", "def check(any_int):\n\tassert any_int(3, 10, 7) == True", "def check(any_int):\n\tassert any_int(5.586, 1, 2) == False", "def check(any_int):\n\tassert any_int(12, 8, 4) == True", "def check(any_int):\n\tassert any_int(2.459, 5, 11) == False", "def check(any_int):\n\tassert any_int(0, 2, 2) == True", "def check(any_int):\n\tassert any_int(6.175, 9, 4) == False", "def check(any_int):\n\tassert any_int(12, 5, 7) == True", "def check(any_int):\n\tassert any_int(8.854, 2, 8) == False", "def check(any_int):\n\tassert any_int(2.858, 1, 2) == False", "def check(any_int):\n\tassert any_int(4, 3, 1) == True", "def check(any_int):\n\tassert any_int(4, 11, 1) == False", "def check(any_int):\n\tassert any_int(5, 5, 10) == True", "def check(any_int):\n\tassert any_int(10, 5, 5) == True", "def check(any_int):\n\tassert any_int(3.228, 6, 6) == False", "def check(any_int):\n\tassert any_int(2.805, 3, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 1, 1) == True", "def check(any_int):\n\tassert any_int(6, 3, 3) == True", "def check(any_int):\n\tassert any_int(7, 5, 12) == True", "def check(any_int):\n\tassert any_int(-4, 11, 7) == True", "def check(any_int):\n\tassert any_int(2,1,1)==True", "def check(any_int):\n\tassert any_int(7, 2, 9) == True", "def check(any_int):\n\tassert any_int(3.445, 2, 2) == False", "def check(any_int):\n\tassert any_int(2, 7, 5) == True", "def check(any_int):\n\tassert any_int(6.254, 6, 7) == False", "def check(any_int):\n\tassert any_int(3.685, 2, 6) == False", "def check(any_int):\n\tassert any_int(5, 9, 5) == False", "def check(any_int):\n\tassert any_int(5.408, 8, 3.454) == False", "def check(any_int):\n\tassert any_int(-7, 5, -2) == True", "def check(any_int):\n\tassert any_int(4, 8, 4) == True", "def check(any_int):\n\tassert any_int(12, 7, 5) == True", "def check(any_int):\n\tassert any_int(4, 7, 3) == True", "def check(any_int):\n\tassert any_int(6.61, 1.687, 2.647) == False", "def check(any_int):\n\tassert any_int(3.033, 6.554, 7.391) == False", "def check(any_int):\n\tassert any_int(2.08, 7, 1.239) == False"], "test_case_list": ["assert any_int(8, 19, 11) == True", "assert any_int(7.307, 7.071, 5.088) == False", "assert any_int(6, 12, 6) == True", "assert any_int(6.511, 2, 3) == False", "assert any_int(12, 6, 6) == True", "assert any_int(2, 2, 4) == True", "assert any_int(5.114, 5, 4) == False", "assert any_int(3.376, 6.953, 2.111) == False", "assert any_int(2, 3, 1)==True", "assert any_int(2, 5, 4) == False", "assert any_int(7.194, 1.302, 7.462) == False", "assert any_int(1, 7, 8) == True", "assert any_int(5, 8, 3) == True", "assert any_int(2.389, 9, 10) == False", "assert any_int(-1, 0, 1) == True", "assert any_int(9, 6, 3) == True", "assert any_int(4.38, 6, 1) == False", "assert any_int(3.785, 6.308, 7.367) == False", "assert any_int(6, 10, 4) == True", "assert any_int(1.705, 2, 6.616) == False", "assert any_int(6, 4, 2) == True", "assert any_int(4, 2, 2)==True", "assert any_int(3.692, 2, 7.2) == False", "assert any_int(2.5, 2, 3)==False", "assert any_int(5, 6, 1) == True", "assert any_int(1, 3, 2) == True", "assert any_int(3,4,7)==True", "assert any_int(6, 10, 1) == False", "assert any_int(6, 2, 4) == True", "assert any_int(6.155, 2.926, 1.672) == False", "assert any_int(5, 2, 3) == True", "assert any_int(7.829, 2, 9) == False", "assert any_int(4, 6, 3) == False", "assert any_int(2.583, 3.749, 4.738) == False", "assert any_int(12, 11, 1) == True", "assert any_int(3.211, 4, 3) == False", "assert any_int(1, 1, 7) == False", "assert any_int(0, 3, 3) == True", "assert any_int(1.157, 8, 2) == False", "assert any_int(3, 3, 6) == True", "assert any_int(4.272, 6.612, 6.663) == False", "assert any_int(1, 1, 2) == True", "assert any_int(2.2, 2.2, 2.2)==False", "assert any_int(3.158, 8, 6.135) == False", "assert any_int(1.346, 5, 6) == False", "assert any_int(15, 9, 6) == True", "assert any_int(1, 4, 5) == True", "assert any_int(7.656, 1, 7) == False", "assert any_int(3.599, 5, 1) == False", "assert any_int(3, 1, 2) == True", "assert any_int(-3, 2, 5) == True", "assert any_int(4, 11, 5) == False", "assert any_int(10, 7, 3) == True", "assert any_int(7, 3, 10) == True", "assert any_int(3, 4, 1) == True", "assert any_int(3.103, 3, 10) == False", "assert any_int(6, 16, 10) == True", "assert any_int(1.812, 6.567, 7.145) == False", "assert any_int(6, 6, 12) == True", "assert any_int(1, 7, 2) == False", "assert any_int(7, 6, 1) == True", "assert any_int(4, 3, 7) == True", "assert any_int(4, 6, 2) == True", "assert any_int(2.007, 9, 7.198) == False", "assert any_int(2, 3, 5) == True", "assert any_int(6.086, 4, 4) == False", "assert any_int(3.754, 6, 5.044) == False", "assert any_int(8, 10, 2) == True", "assert any_int(7.73, 5.041, 6.418) == False", "assert any_int(2, 6, 2)==False", "assert any_int(3.683, 8, 1.193) == False", "assert any_int(-4, 6, 2)==True", "assert any_int(7, 13, 6) == True", "assert any_int(2.003, 3, 11) == False", "assert any_int(3.357, 7, 8.074) == False", "assert any_int(3.621, 6.679, 2.542) == False", "assert any_int(12, 3, 9) == True", "assert any_int(7.797, 7, 4) == False", "assert any_int(7, 1, 8) == True", "assert any_int(5, 3, 8) == True", "assert any_int(5, 7, 2) == True", "assert any_int(5, 6, 11) == True", "assert any_int(6.681, 8, 4.747) == False", "assert any_int(3, 2, 5) == True", "assert any_int(3.0,4,7)==False", "assert any_int(9, 1, 10) == True", "assert any_int(1.5, 5, 3.5)==False", "assert any_int(2.834, 7, 9) == False", "assert any_int(2, 6, 4) == True", "assert any_int(6.068, 1, 3.454) == False", "assert any_int(1.834, 7.255, 6.304) == False", "assert any_int(1.726, 3, 1) == False", "assert any_int(13, 7, 6) == True", "assert any_int(6.9, 4, 12) == False", "assert any_int(4.039, 5, 5.992) == False", "assert any_int(4, 5, 9) == True", "assert any_int(6, 2, 7) == False", "assert any_int(3, 10, 7) == True", "assert any_int(5.586, 1, 2) == False", "assert any_int(12, 8, 4) == True", "assert any_int(2.459, 5, 11) == False", "assert any_int(0, 2, 2) == True", "assert any_int(6.175, 9, 4) == False", "assert any_int(12, 5, 7) == True", "assert any_int(8.854, 2, 8) == False", "assert any_int(2.858, 1, 2) == False", "assert any_int(4, 3, 1) == True", "assert any_int(4, 11, 1) == False", "assert any_int(5, 5, 10) == True", "assert any_int(10, 5, 5) == True", "assert any_int(3.228, 6, 6) == False", "assert any_int(2.805, 3, 6.418) == False", "assert any_int(2, 1, 1) == True", "assert any_int(6, 3, 3) == True", "assert any_int(7, 5, 12) == True", "assert any_int(-4, 11, 7) == True", "assert any_int(2,1,1)==True", "assert any_int(7, 2, 9) == True", "assert any_int(3.445, 2, 2) == False", "assert any_int(2, 7, 5) == True", "assert any_int(6.254, 6, 7) == False", "assert any_int(3.685, 2, 6) == False", "assert any_int(5, 9, 5) == False", "assert any_int(5.408, 8, 3.454) == False", "assert any_int(-7, 5, -2) == True", "assert any_int(4, 8, 4) == True", "assert any_int(12, 7, 5) == True", "assert any_int(4, 7, 3) == True", "assert any_int(6.61, 1.687, 2.647) == False", "assert any_int(3.033, 6.554, 7.391) == False", "assert any_int(2.08, 7, 1.239) == False"], "nl": "\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    ", "func": "def any_int(x, y, z):", "examples": "Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    ", "repair_prompt": ["def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. These numbers could be any integers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. These numbers could be any integers. They might be positive or negative. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers, which could be any integers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''"], "completions": ["from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three integers and returns True if one of the numbers is equal to the sum of the other two.\n    Returns False if any input is not an integer or if no such condition is met.\n    \n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n    \n    Returns:\n    bool: True if one number is the sum of the other two, False otherwise.\n    \"\"\"\n    \n    # Validate that all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n    \n    # Check if any of the three numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Checks if any of the three integers is equal to the sum of the other two.\n\n    Parameters:\n    x (int): First integer.\n    y (int): Second integer.\n    z (int): Third integer.\n\n    Returns:\n    bool: True if one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Checks if one of the numbers is the sum of the other two.\n\n    Parameters:\n    x (int): First integer.\n    y (int): Second integer.\n    z (int): Third integer.\n\n    Returns:\n    bool: True if one number is the sum of the other two, False otherwise.\n\n    Examples:\n    >>> any_int(5, 2, 7)\n    True\n    >>> any_int(3, 2, 2)\n    False\n    >>> any_int(3, -2, 1)\n    True\n    >>> any_int(0, 0, 0)\n    True\n    >>> any_int(1, -1, 0)\n    True\n    >>> any_int(1.5, 1, 0.5)\n    False\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n    \n    # Check if one of the numbers is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three integers and returns True if one of them is equal to the sum of the other two.\n    Returns False if any input is not an integer or if the condition is not met.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if one of the integers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n\n    # Check if one of the numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Checks if any of the three integers is the sum of the other two.\n\n    Parameters:\n    x (int): First integer.\n    y (int): Second integer.\n    z (int): Third integer.\n\n    Returns:\n    bool: True if one of the numbers is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Determines if any of the three integers is the sum of the other two.\n\n    Parameters:\n    x (int): First integer.\n    y (int): Second integer.\n    z (int): Third integer.\n\n    Returns:\n    bool: True if one of the numbers is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any of the numbers is the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n\n# Example usage:\n# print(any_int(0, 0, 0))  # Expected: True\n# print(any_int(1, -1, 0))  # Expected: True\n# print(any_int(1000000, -999999, -1))  # Expected: True\n# print(any_int(3, 5, 8))  # Expected: True\n# print(any_int(3, 5, 9))  # Expected: False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if any of the three integer inputs is equal to the sum of the other two.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if one of the numbers is equal to the sum of the other two and all numbers are integers.\n              False in any other cases.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    \n    # Check if any input is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Checks if any of the three integers is the sum of the other two.\n\n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n\n    Returns:\n    bool: True if one of the numbers is the sum of the other two, False otherwise.\n    \"\"\"\n    # Validate that all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any of the numbers is the sum of the other two\n    if x == y + z:\n        return True\n    if y == x + z:\n        return True\n    if z == x + y:\n        return True\n\n    # If none of the conditions are met, return False\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Create a function that takes 3 numbers, which could be any integers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Parameters:\n    x (int): First integer input.\n    y (int): Second integer input.\n    z (int): Third integer input.\n    \n    Returns:\n    bool: True if one number is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    \n    # Check if any one of the numbers is the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Determine if one of the three integer inputs is equal to the sum of the other two.\n\n    Parameters:\n    x (int): First integer input.\n    y (int): Second integer input.\n    z (int): Third integer input.\n\n    Returns:\n    bool: True if one number is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n\n    # Check if any input is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n\n# Example usage:\n# print(any_int(0, 0, 0))  # Expected: True\n# print(any_int(1, -1, 0))  # Expected: True\n# print(any_int(1000000, -999999, -1))  # Expected: True\n# print(any_int(3, 5, 8))  # Expected: True\n# print(any_int(3, 5, 9))  # Expected: False\n"], "plans": ["requirement analysis:\nThe function should accurately determine if any of the three integers is the sum of the other two, ensuring all inputs are integers. It should return false for any non-integer inputs, maintaining robust input validation.\nrequirement pool:\n- Implement integer validation for inputs\n- Ensure correct sum comparison logic\n- Provide example usage in documentation\n- Optimize for performance\n- Enhance error handling for non-integer inputs\nWe will implement a simple function that checks if any of the three input numbers is the sum of the other two. The function will first validate that all inputs are integers. If any input is not an integer, the function will return false. This approach ensures robust input validation and correct logic for sum comparison.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integer'\n    Explanation: The requirement specifies that all numbers must be integers, meaning they should not have any fractional or decimal component.\n\n    'sum of the other two'\n    Explanation: The requirement checks if any one of the three numbers is equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    'equal to': This indicates a comparison where one number should be exactly the sum of the other two numbers.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Validate that all inputs are integers.\n    2. Check if any of the three numbers is equal to the sum of the other two.\n    3. Return True if the condition is met, otherwise return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are zero, and each number is equal to the sum of the other two (0 + 0 = 0).\n\n    any_int(1, -1, 0) = True\n    Explanation: The number 0 is equal to the sum of 1 and -1 (1 + (-1) = 0).\n\n    any_int(1000000, -999999, -1) = True\n    Explanation: The number -1 is equal to the sum of 1000000 and -999999 (1000000 + (-999999) = -1).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for integer validation and sum comparison.\n", "requirement analysis:\nThe function should accurately determine if any of the three integer inputs is equal to the sum of the other two. It must handle both positive and negative integers and return false if any input is not an integer.\nrequirement pool:\n- Implement the main function logic to check the sum condition.\n- Ensure the function only accepts integer inputs.\n- Provide comprehensive test cases for validation.\n- Optimize the function for performance.\n- Document the function usage and edge cases.\nWe will implement a simple function that checks if any of the three input numbers is equal to the sum of the other two. The function will first verify that all inputs are integers, returning false if any input is not an integer. This approach ensures the function is both efficient and easy to integrate into existing codebases. We will use Python's built-in type checking to ensure inputs are integers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integer'\n    Explanation: The requirement specifies that all numbers must be integers for the function to return true. This means the function should check the type of each input to ensure they are integers.\n\n# [phrase showing quantity relationship]\n    'equal to the sum of the other two': This indicates a condition where one number should be exactly the sum of the other two numbers. In code, this can be implemented using equality checks between the numbers.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers using type checking.\n    2. If any input is not an integer, return False.\n    3. Check if any of the three numbers is equal to the sum of the other two using equality checks.\n    4. Return True if any such condition is met, otherwise return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are integers, and 0 is equal to the sum of the other two zeros.\n    \n    any_int(1, 1, 2) = True\n    Explanation: All numbers are integers, and 2 is equal to the sum of 1 and 1.\n    \n    any_int(1, 2, 3) = False\n    Explanation: Although all numbers are integers, none of them is equal to the sum of the other two.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for integer types and equality conditions among the numbers.\n", "requirement analysis:\nThe function should strictly check for integer inputs and ensure that one of the numbers is the sum of the other two. It should return false for any non-integer inputs or if the condition is not met.\nrequirement pool:\n- The function must return true if one number is the sum of the other two.\n- The function must handle only integer inputs.\n- The function should be optimized for performance.\n- The function should include comprehensive documentation.\n- The function should handle edge cases gracefully.\nWe will implement a simple function that checks if one of the three given numbers is the sum of the other two. The function will first verify that all inputs are integers, and then check the condition. We will use Python's built-in type checking to ensure inputs are integers, which is efficient and straightforward. The function will be documented with examples to ensure clarity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of the other two'\n    Explanation: This means that for any three numbers, one of them should be equal to the sum of the other two numbers.\n\n    'all numbers are integers'\n    Explanation: This means that the function should only return true if all inputs are integers, otherwise it should return false.\n\n# [phrase showing quantity relationship]\n    'equal to': This indicates a condition where one number must be exactly the same as the sum of the other two numbers. In code, this can be implemented using the equality operator (==).\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers using type checking.\n    2. If any input is not an integer, return False.\n    3. Check if any one of the three numbers is equal to the sum of the other two.\n    4. Return True if the condition is met, otherwise return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are integers and 0 is equal to the sum of 0 and 0.\n    \n    any_int(1, -1, 0) = True\n    Explanation: All numbers are integers and 0 is equal to the sum of 1 and -1.\n    \n    any_int(1.5, 1, 0.5) = False\n    Explanation: Not all numbers are integers, so the function should return False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not all(isinstance(i, int) for i in (x, y, z)):\n            return False\n        return x == y + z or y == x + z or z == x + y\n", "requirement analysis:\nThe function should accurately determine if one of the three integer inputs is equal to the sum of the other two. It must validate that all inputs are integers and return false if any input is not an integer.\nrequirement pool:\n- Validate that all inputs are integers\n- Check if one number equals the sum of the other two\n- Handle both positive and negative integers\n- Optimize for quick computation\n- Provide clear error messages for non-integer inputs\nWe will implement a simple function using Python's built-in capabilities to check if one of the three numbers is equal to the sum of the other two. We will use type checking to ensure all inputs are integers and return false if any input is not an integer. The function will handle both positive and negative integers efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'any integers'\n    Explanation: The numbers can be positive or negative, and the function should handle both cases.\n\n    'equal to the sum'\n    Explanation: The function checks if one of the numbers is equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    'equal to': This indicates a condition where one number must be exactly the sum of the other two numbers. In code, this can be implemented using equality checks (==).\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers using type checking.\n    2. If any input is not an integer, return False.\n    3. Check if any of the three numbers is equal to the sum of the other two numbers.\n    4. Return True if the condition is met, otherwise return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: 0 is equal to the sum of the other two zeros.\n    \n    any_int(-1, -1, -2) = True\n    Explanation: -2 is equal to the sum of -1 and -1.\n    \n    any_int(1, 2, 3) = True\n    Explanation: 3 is equal to the sum of 1 and 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers all possible combinations of sums and type checks.\n", "requirement analysis:\nThe function should correctly identify if any of the three integers is the sum of the other two. It must handle both positive and negative integers and return false if any input is not an integer.\nrequirement pool:\n- The function must return true if one number is the sum of the other two.\n- The function must handle both positive and negative integers.\n- The function should return false if any input is not an integer.\n- The function should be optimized for performance.\n- The function should include comprehensive documentation.\nWe will implement a simple function that checks if any of the three given numbers is the sum of the other two. The function will first verify that all inputs are integers, returning false if any are not. This ensures the function handles both positive and negative integers correctly. We will use Python's built-in type checking to ensure inputs are integers, and simple arithmetic operations to check the sum condition.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integers'\n    Explanation: The requirement specifies that the function should only consider integer values, meaning no floating-point numbers are allowed.\n\n    'sum of the other two'\n    Explanation: The function should check if any one of the three numbers is equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers using type checking.\n    2. If any input is not an integer, return False.\n    3. Check if any of the numbers is equal to the sum of the other two:\n        - x == y + z\n        - y == x + z\n        - z == x + y\n    4. Return True if any of these conditions are met, otherwise return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are integers, and 0 is equal to the sum of the other two zeros.\n    \n    any_int(-1, 1, 0) = True\n    Explanation: All numbers are integers, and 0 is equal to the sum of -1 and 1.\n    \n    any_int(1, 2, 3) = True\n    Explanation: All numbers are integers, and 3 is equal to the sum of 1 and 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers all possible combinations of sums among the three integers.\n", "requirement analysis:\nThe function should accurately determine if any of the three integers is the sum of the other two. It must handle both positive and negative integers and reject non-integer inputs.\nrequirement pool:\n- The function must return True if one number is the sum of the other two.\n- The function must handle both positive and negative integers.\n- The function should reject non-integer inputs.\n- The function should be optimized for performance.\n- The function should include comprehensive documentation.\nWe will implement a simple function that checks if any of the three given integers is the sum of the other two. The function will first validate that all inputs are integers, and then perform the necessary checks. We will use Python's built-in type checking to ensure inputs are integers, and the function will be optimized for performance by using straightforward arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integers'\n    Explanation: The requirement specifies that the numbers involved should be integers, meaning whole numbers without any fractional or decimal part.\n\n    'sum of the other two'\n    Explanation: This means that for any of the three numbers, it should be equal to the addition of the other two numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers using type checking.\n    2. If any input is not an integer, return False.\n    3. Check if any of the three numbers is equal to the sum of the other two:\n       - Check if x == y + z\n       - Check if y == x + z\n       - Check if z == x + y\n    4. If any of these conditions are true, return True.\n    5. If none of these conditions are true, return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are zero, and each number is equal to the sum of the other two (0 = 0 + 0).\n\n    any_int(1, -1, 0) = True\n    Explanation: The number 0 is equal to the sum of 1 and -1.\n\n    any_int(1000000, -999999, -1) = True\n    Explanation: The number -1 is equal to the sum of 1000000 and -999999.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already covers these scenarios by checking if any number is the sum of the other two.\n", "requirement analysis:\nThe function must accurately determine if any of the three integer inputs is equal to the sum of the other two. It should return false for any non-integer inputs, ensuring type safety and correctness.\nrequirement pool:\n- Implement integer validation for inputs.\n- Ensure correct sum comparison logic.\n- Optimize for performance with large integer values.\n- Handle edge cases such as negative integers.\n- Provide detailed error messages for invalid inputs.\nWe will implement a simple function that checks if any of the three inputs is an integer and equal to the sum of the other two. We will use Python's built-in type checking to ensure inputs are integers and perform the necessary arithmetic operations. The function will return false for any non-integer inputs without raising exceptions, as this aligns with the requirement for type safety and correctness.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integer'\n    Explanation: In the requirement, it means that all inputs must be integers for the function to return true.\n\n    'equal to the sum'\n    Explanation: This means that one of the numbers should be exactly equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    'equal to': This indicates a condition where one number must be exactly the same as the sum of the other two numbers. In code, this can be implemented using the equality operator (==).\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers.\n    2. If not, return False.\n    3. Check if any of the three numbers is equal to the sum of the other two:\n       - Check if x == y + z\n       - Check if y == x + z\n       - Check if z == x + y\n    4. If any of these conditions are true, return True.\n    5. Otherwise, return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are zero, and each number is equal to the sum of the other two (0 = 0 + 0).\n\n    any_int(1, -1, 0) = True\n    Explanation: The number 0 is equal to the sum of 1 and -1.\n\n    any_int(1, 2, 3) = True\n    Explanation: The number 3 is equal to the sum of 1 and 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking if any number is equal to the sum of the other two.\n", "requirement analysis:\nThe function must strictly check for integer inputs and ensure that one of the numbers is the sum of the other two. It should handle edge cases such as negative numbers and zero, and return false for any non-integer inputs.\nrequirement pool:\n- The function must return true if one number is the sum of the other two.\n- The function must return false for any non-integer inputs.\n- The function should handle negative numbers and zero correctly.\n- The function should be optimized for performance.\n- The function should include clear documentation and examples.\nWe will implement a simple Python function that checks if any of the three input numbers is the sum of the other two. The function will first validate that all inputs are integers, returning false if any input is not an integer. This approach ensures data integrity and meets the requirement of handling only integer inputs. The function will be optimized for performance by using straightforward conditional checks without any unnecessary computations or library dependencies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integers'\n    Explanation: The requirement specifies that the function should only consider integer inputs. This means any non-integer input should result in a return value of False.\n\n    'sum of the other two'\n    Explanation: The function should check if any one of the three numbers is equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers. If not, return False.\n    2. Check if x is equal to the sum of y and z.\n    3. Check if y is equal to the sum of x and z.\n    4. Check if z is equal to the sum of x and y.\n    5. If any of the above conditions are true, return True.\n    6. If none of the conditions are true, return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are zero, and each number is equal to the sum of the other two (0 = 0 + 0).\n\n    any_int(1, -1, 0) = True\n    Explanation: The number 0 is equal to the sum of 1 and -1.\n\n    any_int(1, 2, 3) = True\n    Explanation: The number 3 is equal to the sum of 1 and 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking each possible sum condition.\n", "requirement analysis:\nThe function must strictly check for integer inputs and ensure that one of the numbers is the sum of the other two. It should handle edge cases where inputs are not integers and return false in such scenarios.\nrequirement pool:\n- The function must return true if one number is the sum of the other two.\n- The function must return false if any input is not an integer.\n- The function should be optimized for performance.\n- The function should include comprehensive documentation.\n- The function should handle large integer inputs efficiently.\nWe will implement a simple function that checks if the inputs are integers and if one of the integers is the sum of the other two. We will use Python's built-in type checking to ensure inputs are integers and perform the necessary arithmetic checks. The function will be optimized for performance by using straightforward conditional checks without any unnecessary overhead.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integers'\n    Explanation: The requirement specifies that the inputs should be integers, meaning whole numbers without any fractional or decimal part.\n\n    'sum of the other two'\n    Explanation: This means that for any three numbers, one of them should be equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    'equal to': This indicates a condition where one number must be exactly the same as the sum of the other two numbers. In code, this can be implemented using the equality operator (==).\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers using type checking.\n    2. If any input is not an integer, return False.\n    3. Check if any one of the three numbers is equal to the sum of the other two.\n    4. Return True if such a condition is met; otherwise, return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are zero, and each number is equal to the sum of the other two (0 + 0 = 0).\n    \n    any_int(1, -1, 0) = True\n    Explanation: The number 0 is equal to the sum of 1 and -1 (1 + (-1) = 0).\n    \n    any_int(1000000, -999999, -1) = True\n    Explanation: The number -1 is equal to the sum of 1000000 and -999999 (1000000 + (-999999) = 1).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for checking if one number is the sum of the other two.\n", "requirement analysis:\nThe function should accurately determine if any of the three integer inputs is equal to the sum of the other two. It must handle both positive and negative integers and reject non-integer inputs.\nrequirement pool:\n- The function must return True if one number is the sum of the other two.\n- The function must handle negative integers correctly.\n- The function should reject non-integer inputs.\n- The function should be optimized for performance.\n- The function should include comprehensive documentation.\nWe will implement a simple function using Python's built-in capabilities to check if any of the three integer inputs is equal to the sum of the other two. The function will reject non-integer inputs by checking the type of each input. The function will be optimized for performance by using basic arithmetic operations and type checks, ensuring minimal computational overhead.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integer'\n    Explanation: The requirement specifies that all inputs must be integers, meaning they should be whole numbers without any decimal or fractional part.\n\n    'sum of the other two'\n    Explanation: The requirement is to check if any one of the three numbers is equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    'equal to': This indicates a condition where one number should be exactly the same as the sum of the other two numbers. In code, this can be implemented using the equality operator (==).\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers using type checking.\n    2. Compare each number with the sum of the other two numbers.\n    3. Return True if any comparison is valid; otherwise, return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are zero, and each number is equal to the sum of the other two (0 + 0 = 0).\n\n    any_int(1, -1, 0) = True\n    Explanation: The number 0 is equal to the sum of 1 and -1 (1 + (-1) = 0).\n\n    any_int(1000000, -999999, -1) = True\n    Explanation: The number -1 is equal to the sum of 1000000 and -999999 (1000000 + (-999999) = 1).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not all(isinstance(i, int) for i in [x, y, z]):\n            return False\n        return x == y + z or y == x + z or z == x + y\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [131, 131, 131, 131, 131, 131, 131, 131, 131, 131], "completion": "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Determine if one of the three integer inputs is equal to the sum of the other two.\n\n    Parameters:\n    x (int): First integer input.\n    y (int): Second integer input.\n    z (int): Third integer input.\n\n    Returns:\n    bool: True if one number is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n\n    # Check if any input is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n\n# Example usage:\n# print(any_int(0, 0, 0))  # Expected: True\n# print(any_int(1, -1, 0))  # Expected: True\n# print(any_int(1000000, -999999, -1))  # Expected: True\n# print(any_int(3, 5, 8))  # Expected: True\n# print(any_int(3, 5, 9))  # Expected: False\n", "passed": true, "pass": true, "pass_num": 10, "round": 292, "mutate_method": "expand_one2two", "parent_index": 201}
