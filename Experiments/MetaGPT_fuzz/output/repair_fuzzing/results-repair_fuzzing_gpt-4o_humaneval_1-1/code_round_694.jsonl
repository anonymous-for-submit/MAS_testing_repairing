{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that requires 3 numbers.\nReturns true if one of the numbers matches the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "entry_point": "any_int", "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "test": ["def check(any_int):\n\tassert any_int(8, 19, 11) == True", "def check(any_int):\n\tassert any_int(7.307, 7.071, 5.088) == False", "def check(any_int):\n\tassert any_int(6, 12, 6) == True", "def check(any_int):\n\tassert any_int(6.511, 2, 3) == False", "def check(any_int):\n\tassert any_int(12, 6, 6) == True", "def check(any_int):\n\tassert any_int(2, 2, 4) == True", "def check(any_int):\n\tassert any_int(5.114, 5, 4) == False", "def check(any_int):\n\tassert any_int(3.376, 6.953, 2.111) == False", "def check(any_int):\n\tassert any_int(2, 3, 1)==True", "def check(any_int):\n\tassert any_int(2, 5, 4) == False", "def check(any_int):\n\tassert any_int(7.194, 1.302, 7.462) == False", "def check(any_int):\n\tassert any_int(1, 7, 8) == True", "def check(any_int):\n\tassert any_int(5, 8, 3) == True", "def check(any_int):\n\tassert any_int(2.389, 9, 10) == False", "def check(any_int):\n\tassert any_int(-1, 0, 1) == True", "def check(any_int):\n\tassert any_int(9, 6, 3) == True", "def check(any_int):\n\tassert any_int(4.38, 6, 1) == False", "def check(any_int):\n\tassert any_int(3.785, 6.308, 7.367) == False", "def check(any_int):\n\tassert any_int(6, 10, 4) == True", "def check(any_int):\n\tassert any_int(1.705, 2, 6.616) == False", "def check(any_int):\n\tassert any_int(6, 4, 2) == True", "def check(any_int):\n\tassert any_int(4, 2, 2)==True", "def check(any_int):\n\tassert any_int(3.692, 2, 7.2) == False", "def check(any_int):\n\tassert any_int(2.5, 2, 3)==False", "def check(any_int):\n\tassert any_int(5, 6, 1) == True", "def check(any_int):\n\tassert any_int(1, 3, 2) == True", "def check(any_int):\n\tassert any_int(3,4,7)==True", "def check(any_int):\n\tassert any_int(6, 10, 1) == False", "def check(any_int):\n\tassert any_int(6, 2, 4) == True", "def check(any_int):\n\tassert any_int(6.155, 2.926, 1.672) == False", "def check(any_int):\n\tassert any_int(5, 2, 3) == True", "def check(any_int):\n\tassert any_int(7.829, 2, 9) == False", "def check(any_int):\n\tassert any_int(4, 6, 3) == False", "def check(any_int):\n\tassert any_int(2.583, 3.749, 4.738) == False", "def check(any_int):\n\tassert any_int(12, 11, 1) == True", "def check(any_int):\n\tassert any_int(3.211, 4, 3) == False", "def check(any_int):\n\tassert any_int(1, 1, 7) == False", "def check(any_int):\n\tassert any_int(0, 3, 3) == True", "def check(any_int):\n\tassert any_int(1.157, 8, 2) == False", "def check(any_int):\n\tassert any_int(3, 3, 6) == True", "def check(any_int):\n\tassert any_int(4.272, 6.612, 6.663) == False", "def check(any_int):\n\tassert any_int(1, 1, 2) == True", "def check(any_int):\n\tassert any_int(2.2, 2.2, 2.2)==False", "def check(any_int):\n\tassert any_int(3.158, 8, 6.135) == False", "def check(any_int):\n\tassert any_int(1.346, 5, 6) == False", "def check(any_int):\n\tassert any_int(15, 9, 6) == True", "def check(any_int):\n\tassert any_int(1, 4, 5) == True", "def check(any_int):\n\tassert any_int(7.656, 1, 7) == False", "def check(any_int):\n\tassert any_int(3.599, 5, 1) == False", "def check(any_int):\n\tassert any_int(3, 1, 2) == True", "def check(any_int):\n\tassert any_int(-3, 2, 5) == True", "def check(any_int):\n\tassert any_int(4, 11, 5) == False", "def check(any_int):\n\tassert any_int(10, 7, 3) == True", "def check(any_int):\n\tassert any_int(7, 3, 10) == True", "def check(any_int):\n\tassert any_int(3, 4, 1) == True", "def check(any_int):\n\tassert any_int(3.103, 3, 10) == False", "def check(any_int):\n\tassert any_int(6, 16, 10) == True", "def check(any_int):\n\tassert any_int(1.812, 6.567, 7.145) == False", "def check(any_int):\n\tassert any_int(6, 6, 12) == True", "def check(any_int):\n\tassert any_int(1, 7, 2) == False", "def check(any_int):\n\tassert any_int(7, 6, 1) == True", "def check(any_int):\n\tassert any_int(4, 3, 7) == True", "def check(any_int):\n\tassert any_int(4, 6, 2) == True", "def check(any_int):\n\tassert any_int(2.007, 9, 7.198) == False", "def check(any_int):\n\tassert any_int(2, 3, 5) == True", "def check(any_int):\n\tassert any_int(6.086, 4, 4) == False", "def check(any_int):\n\tassert any_int(3.754, 6, 5.044) == False", "def check(any_int):\n\tassert any_int(8, 10, 2) == True", "def check(any_int):\n\tassert any_int(7.73, 5.041, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 6, 2)==False", "def check(any_int):\n\tassert any_int(3.683, 8, 1.193) == False", "def check(any_int):\n\tassert any_int(-4, 6, 2)==True", "def check(any_int):\n\tassert any_int(7, 13, 6) == True", "def check(any_int):\n\tassert any_int(2.003, 3, 11) == False", "def check(any_int):\n\tassert any_int(3.357, 7, 8.074) == False", "def check(any_int):\n\tassert any_int(3.621, 6.679, 2.542) == False", "def check(any_int):\n\tassert any_int(12, 3, 9) == True", "def check(any_int):\n\tassert any_int(7.797, 7, 4) == False", "def check(any_int):\n\tassert any_int(7, 1, 8) == True", "def check(any_int):\n\tassert any_int(5, 3, 8) == True", "def check(any_int):\n\tassert any_int(5, 7, 2) == True", "def check(any_int):\n\tassert any_int(5, 6, 11) == True", "def check(any_int):\n\tassert any_int(6.681, 8, 4.747) == False", "def check(any_int):\n\tassert any_int(3, 2, 5) == True", "def check(any_int):\n\tassert any_int(3.0,4,7)==False", "def check(any_int):\n\tassert any_int(9, 1, 10) == True", "def check(any_int):\n\tassert any_int(1.5, 5, 3.5)==False", "def check(any_int):\n\tassert any_int(2.834, 7, 9) == False", "def check(any_int):\n\tassert any_int(2, 6, 4) == True", "def check(any_int):\n\tassert any_int(6.068, 1, 3.454) == False", "def check(any_int):\n\tassert any_int(1.834, 7.255, 6.304) == False", "def check(any_int):\n\tassert any_int(1.726, 3, 1) == False", "def check(any_int):\n\tassert any_int(13, 7, 6) == True", "def check(any_int):\n\tassert any_int(6.9, 4, 12) == False", "def check(any_int):\n\tassert any_int(4.039, 5, 5.992) == False", "def check(any_int):\n\tassert any_int(4, 5, 9) == True", "def check(any_int):\n\tassert any_int(6, 2, 7) == False", "def check(any_int):\n\tassert any_int(3, 10, 7) == True", "def check(any_int):\n\tassert any_int(5.586, 1, 2) == False", "def check(any_int):\n\tassert any_int(12, 8, 4) == True", "def check(any_int):\n\tassert any_int(2.459, 5, 11) == False", "def check(any_int):\n\tassert any_int(0, 2, 2) == True", "def check(any_int):\n\tassert any_int(6.175, 9, 4) == False", "def check(any_int):\n\tassert any_int(12, 5, 7) == True", "def check(any_int):\n\tassert any_int(8.854, 2, 8) == False", "def check(any_int):\n\tassert any_int(2.858, 1, 2) == False", "def check(any_int):\n\tassert any_int(4, 3, 1) == True", "def check(any_int):\n\tassert any_int(4, 11, 1) == False", "def check(any_int):\n\tassert any_int(5, 5, 10) == True", "def check(any_int):\n\tassert any_int(10, 5, 5) == True", "def check(any_int):\n\tassert any_int(3.228, 6, 6) == False", "def check(any_int):\n\tassert any_int(2.805, 3, 6.418) == False", "def check(any_int):\n\tassert any_int(2, 1, 1) == True", "def check(any_int):\n\tassert any_int(6, 3, 3) == True", "def check(any_int):\n\tassert any_int(7, 5, 12) == True", "def check(any_int):\n\tassert any_int(-4, 11, 7) == True", "def check(any_int):\n\tassert any_int(2,1,1)==True", "def check(any_int):\n\tassert any_int(7, 2, 9) == True", "def check(any_int):\n\tassert any_int(3.445, 2, 2) == False", "def check(any_int):\n\tassert any_int(2, 7, 5) == True", "def check(any_int):\n\tassert any_int(6.254, 6, 7) == False", "def check(any_int):\n\tassert any_int(3.685, 2, 6) == False", "def check(any_int):\n\tassert any_int(5, 9, 5) == False", "def check(any_int):\n\tassert any_int(5.408, 8, 3.454) == False", "def check(any_int):\n\tassert any_int(-7, 5, -2) == True", "def check(any_int):\n\tassert any_int(4, 8, 4) == True", "def check(any_int):\n\tassert any_int(12, 7, 5) == True", "def check(any_int):\n\tassert any_int(4, 7, 3) == True", "def check(any_int):\n\tassert any_int(6.61, 1.687, 2.647) == False", "def check(any_int):\n\tassert any_int(3.033, 6.554, 7.391) == False", "def check(any_int):\n\tassert any_int(2.08, 7, 1.239) == False"], "test_case_list": ["assert any_int(8, 19, 11) == True", "assert any_int(7.307, 7.071, 5.088) == False", "assert any_int(6, 12, 6) == True", "assert any_int(6.511, 2, 3) == False", "assert any_int(12, 6, 6) == True", "assert any_int(2, 2, 4) == True", "assert any_int(5.114, 5, 4) == False", "assert any_int(3.376, 6.953, 2.111) == False", "assert any_int(2, 3, 1)==True", "assert any_int(2, 5, 4) == False", "assert any_int(7.194, 1.302, 7.462) == False", "assert any_int(1, 7, 8) == True", "assert any_int(5, 8, 3) == True", "assert any_int(2.389, 9, 10) == False", "assert any_int(-1, 0, 1) == True", "assert any_int(9, 6, 3) == True", "assert any_int(4.38, 6, 1) == False", "assert any_int(3.785, 6.308, 7.367) == False", "assert any_int(6, 10, 4) == True", "assert any_int(1.705, 2, 6.616) == False", "assert any_int(6, 4, 2) == True", "assert any_int(4, 2, 2)==True", "assert any_int(3.692, 2, 7.2) == False", "assert any_int(2.5, 2, 3)==False", "assert any_int(5, 6, 1) == True", "assert any_int(1, 3, 2) == True", "assert any_int(3,4,7)==True", "assert any_int(6, 10, 1) == False", "assert any_int(6, 2, 4) == True", "assert any_int(6.155, 2.926, 1.672) == False", "assert any_int(5, 2, 3) == True", "assert any_int(7.829, 2, 9) == False", "assert any_int(4, 6, 3) == False", "assert any_int(2.583, 3.749, 4.738) == False", "assert any_int(12, 11, 1) == True", "assert any_int(3.211, 4, 3) == False", "assert any_int(1, 1, 7) == False", "assert any_int(0, 3, 3) == True", "assert any_int(1.157, 8, 2) == False", "assert any_int(3, 3, 6) == True", "assert any_int(4.272, 6.612, 6.663) == False", "assert any_int(1, 1, 2) == True", "assert any_int(2.2, 2.2, 2.2)==False", "assert any_int(3.158, 8, 6.135) == False", "assert any_int(1.346, 5, 6) == False", "assert any_int(15, 9, 6) == True", "assert any_int(1, 4, 5) == True", "assert any_int(7.656, 1, 7) == False", "assert any_int(3.599, 5, 1) == False", "assert any_int(3, 1, 2) == True", "assert any_int(-3, 2, 5) == True", "assert any_int(4, 11, 5) == False", "assert any_int(10, 7, 3) == True", "assert any_int(7, 3, 10) == True", "assert any_int(3, 4, 1) == True", "assert any_int(3.103, 3, 10) == False", "assert any_int(6, 16, 10) == True", "assert any_int(1.812, 6.567, 7.145) == False", "assert any_int(6, 6, 12) == True", "assert any_int(1, 7, 2) == False", "assert any_int(7, 6, 1) == True", "assert any_int(4, 3, 7) == True", "assert any_int(4, 6, 2) == True", "assert any_int(2.007, 9, 7.198) == False", "assert any_int(2, 3, 5) == True", "assert any_int(6.086, 4, 4) == False", "assert any_int(3.754, 6, 5.044) == False", "assert any_int(8, 10, 2) == True", "assert any_int(7.73, 5.041, 6.418) == False", "assert any_int(2, 6, 2)==False", "assert any_int(3.683, 8, 1.193) == False", "assert any_int(-4, 6, 2)==True", "assert any_int(7, 13, 6) == True", "assert any_int(2.003, 3, 11) == False", "assert any_int(3.357, 7, 8.074) == False", "assert any_int(3.621, 6.679, 2.542) == False", "assert any_int(12, 3, 9) == True", "assert any_int(7.797, 7, 4) == False", "assert any_int(7, 1, 8) == True", "assert any_int(5, 3, 8) == True", "assert any_int(5, 7, 2) == True", "assert any_int(5, 6, 11) == True", "assert any_int(6.681, 8, 4.747) == False", "assert any_int(3, 2, 5) == True", "assert any_int(3.0,4,7)==False", "assert any_int(9, 1, 10) == True", "assert any_int(1.5, 5, 3.5)==False", "assert any_int(2.834, 7, 9) == False", "assert any_int(2, 6, 4) == True", "assert any_int(6.068, 1, 3.454) == False", "assert any_int(1.834, 7.255, 6.304) == False", "assert any_int(1.726, 3, 1) == False", "assert any_int(13, 7, 6) == True", "assert any_int(6.9, 4, 12) == False", "assert any_int(4.039, 5, 5.992) == False", "assert any_int(4, 5, 9) == True", "assert any_int(6, 2, 7) == False", "assert any_int(3, 10, 7) == True", "assert any_int(5.586, 1, 2) == False", "assert any_int(12, 8, 4) == True", "assert any_int(2.459, 5, 11) == False", "assert any_int(0, 2, 2) == True", "assert any_int(6.175, 9, 4) == False", "assert any_int(12, 5, 7) == True", "assert any_int(8.854, 2, 8) == False", "assert any_int(2.858, 1, 2) == False", "assert any_int(4, 3, 1) == True", "assert any_int(4, 11, 1) == False", "assert any_int(5, 5, 10) == True", "assert any_int(10, 5, 5) == True", "assert any_int(3.228, 6, 6) == False", "assert any_int(2.805, 3, 6.418) == False", "assert any_int(2, 1, 1) == True", "assert any_int(6, 3, 3) == True", "assert any_int(7, 5, 12) == True", "assert any_int(-4, 11, 7) == True", "assert any_int(2,1,1)==True", "assert any_int(7, 2, 9) == True", "assert any_int(3.445, 2, 2) == False", "assert any_int(2, 7, 5) == True", "assert any_int(6.254, 6, 7) == False", "assert any_int(3.685, 2, 6) == False", "assert any_int(5, 9, 5) == False", "assert any_int(5.408, 8, 3.454) == False", "assert any_int(-7, 5, -2) == True", "assert any_int(4, 8, 4) == True", "assert any_int(12, 7, 5) == True", "assert any_int(4, 7, 3) == True", "assert any_int(6.61, 1.687, 2.647) == False", "assert any_int(3.033, 6.554, 7.391) == False", "assert any_int(2.08, 7, 1.239) == False"], "nl": "\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    ", "func": "def any_int(x, y, z):", "examples": "Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    ", "repair_prompt": ["def any_int(x, y, z):\t\n'''Create a function that requires 3 numbers.\nReturns true if one of the numbers matches the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "```python\ndef any_int(x, y, z):\t\n'''Create a function that requires 3 numbers. The function should take three arguments as input, each representing a number.\nReturns true if one of the numbers matches the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n```", "def any_int(x, y, z):\t\n'''Create a function that requires 3 numbers, returning true if one of the numbers matches the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n   \n    '''"], "completions": ["from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Function to check if one of the integers matches the sum of the other two.\n\n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n\n    Returns:\n    bool: True if one of the numbers matches the sum of the other two, False otherwise.\n    \"\"\"\n    # Validate that all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any number equals the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Function to check if one of the integers is the sum of the other two.\n\n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n\n    Returns:\n    bool: True if one of the numbers is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Determines if one of the three integers is the sum of the other two.\n\n    Parameters:\n    x (int): First integer input.\n    y (int): Second integer input.\n    z (int): Third integer input.\n\n    Returns:\n    bool: True if one of the numbers is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three integers as input and returns True if one of the numbers is the sum of the other two.\n    Returns False if any input is not an integer or if the condition is not met.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if one of the numbers is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three integer arguments and returns True if one of the numbers matches the sum of the other two.\n    Returns False if any input is not an integer or if no such condition is met.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n        z (int): The third integer.\n\n    Returns:\n        bool: True if one of the numbers is equal to the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n\n    # Check if any number is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n\n# Example usage:\n# print(any_int(0, 0, 0))  # Expected: True\n# print(any_int(1, 1, 2))  # Expected: True\n# print(any_int(1.0, 1, 2))  # Expected: False\n# print(any_int(-1, 1, 0))  # Expected: True\n# print(any_int(3, 5, 8))  # Expected: True\n# print(any_int(3, 5, 9))  # Expected: False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Checks if any of the three integers is equal to the sum of the other two.\n\n    Parameters:\n    x (int): First integer\n    y (int): Second integer\n    z (int): Third integer\n\n    Returns:\n    bool: True if one of the integers is the sum of the other two, False otherwise.\n    \"\"\"\n    # Validate that all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"Check if one of the numbers matches the sum of the other two.\n\n    This function checks if any one of the three integer inputs is equal to\n    the sum of the other two. It first validates that all inputs are integers.\n\n    Args:\n        x (int): First integer input.\n        y (int): Second integer input.\n        z (int): Third integer input.\n\n    Returns:\n        bool: True if one of the numbers matches the sum of the other two,\n              False otherwise.\n    \"\"\"\n    # Validate that all inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n\n# Example usage:\n# print(any_int(0, 0, 0))  # Expected: True\n# print(any_int(1, 1, 2))  # Expected: True\n# print(any_int(1, 2, 3.0))  # Expected: False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Checks if any of the three integers is the sum of the other two.\n\n    Parameters:\n    x (int): First integer.\n    y (int): Second integer.\n    z (int): Third integer.\n\n    Returns:\n    bool: True if one of the numbers is the sum of the other two, False otherwise.\n\n    Examples:\n    >>> any_int(5, 2, 7)\n    True\n    >>> any_int(3, 2, 2)\n    False\n    >>> any_int(3, -2, 1)\n    True\n    >>> any_int(3.6, -2.2, 2)\n    False\n    \"\"\"\n    # Check if all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n\n    # Check if any of the numbers is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(any_int(5, 2, 7))  # True\n    print(any_int(3, 2, 2))  # False\n    print(any_int(3, -2, 1))  # True\n    print(any_int(3.6, -2.2, 2))  # False\n    print(any_int(0, 0, 0))  # True\n    print(any_int(1, 1, 2))  # True\n    print(any_int(1.5, 1, 2))  # False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Determines if any of the three integers is the sum of the other two.\n\n    Parameters:\n    x, y, z (int): Three integer numbers to be checked.\n\n    Returns:\n    bool: True if one of the numbers is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any number is the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n", "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three integers as input.\n    Returns True if one of the numbers is the sum of the other two.\n    Returns False for non-integer inputs or if the sum condition is not met.\n\n    Args:\n        x (int): First integer.\n        y (int): Second integer.\n        z (int): Third integer.\n\n    Returns:\n        bool: True if one of the numbers is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n"], "plans": ["requirement analysis:\nThe function should accurately determine if any of the three integer inputs is equal to the sum of the other two. It must reject non-integer inputs and provide a boolean result. Edge cases such as negative numbers and zero should be considered.\nrequirement pool:\n- Validate that all inputs are integers\n- Check if any number equals the sum of the other two\n- Handle edge cases like negative numbers and zero\n- Optimize for performance\n- Provide clear error messages for invalid inputs\nWe will implement a simple function using Python's built-in capabilities to validate integer inputs and check if any of the numbers is equal to the sum of the other two. The function will return a boolean value and handle edge cases like negative numbers and zero efficiently. We will not use any external libraries as they are unnecessary for this straightforward task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integer'\n    Explanation: The requirement specifies that all numbers must be integers for the function to return true. This means that the function should first check if all inputs are integers.\n\n    'sum of the other two'\n    Explanation: The requirement is to check if any one of the three numbers is equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    'sum of the other two': This means that for each number, we need to check if it equals the sum of the other two numbers. In code, this can be implemented as checking if `x == y + z`, `y == x + z`, or `z == x + y`.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers.\n    2. If not, return False.\n    3. Check if any one of the numbers is equal to the sum of the other two.\n    4. If any such condition is met, return True.\n    5. If none of the conditions are met, return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are integers and 0 equals the sum of 0 and 0.\n    \n    any_int(1, -1, 0) = True\n    Explanation: All numbers are integers and 0 equals the sum of 1 and -1.\n    \n    any_int(1, 1, 2) = True\n    Explanation: All numbers are integers and 2 equals the sum of 1 and 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers all possible combinations of sums and checks for integer types.\n", "requirement analysis:\nThe function should strictly check for integer inputs and verify if one of the numbers is the sum of the other two. It should return a boolean value and handle edge cases such as negative numbers and zero.\nrequirement pool:\n- Implement integer validation for inputs\n- Ensure accurate sum-checking logic\n- Optimize function for performance\n- Handle edge cases like negative numbers\n- Provide clear documentation for integration\nWe will implement a simple function that checks if the inputs are integers and if one of them is the sum of the other two. We will use Python's built-in type checking to ensure inputs are integers and return false for any non-integer inputs. The function will be optimized for performance by using straightforward arithmetic operations and conditional checks.\nPlease read and understand the following inteperation before coding\n## Answer 3:\n\n# [core concept]\n    'matches the sum'\n    Explanation: This means that one of the numbers should be equal to the sum of the other two numbers.\n\n    'all numbers are integers'\n    Explanation: This means that the function should only return true if all inputs are integers.\n\n# [phrase showing quantity relationship]\n    'sum of the other two': This indicates an arithmetic relationship where one number should be equal to the sum of the other two numbers. In code, this can be implemented using addition and equality checks, e.g., `x == y + z`.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers using type checking.\n    2. If any input is not an integer, return False.\n    3. Check if any one of the numbers is equal to the sum of the other two.\n    4. Return True if the condition is met, otherwise return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are integers and 0 matches the sum of the other two (0 + 0 = 0).\n    \n    any_int(1, 1, 2) = True\n    Explanation: All numbers are integers and 2 matches the sum of the other two (1 + 1 = 2).\n    \n    any_int(1, 2, 3) = False\n    Explanation: Although all numbers are integers, none of them matches the sum of the other two.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for integer type and sum conditions.\n", "requirement analysis:\nThe function should strictly check for integer inputs and verify if one of the numbers is the sum of the other two. It should return a boolean value based on these conditions.\nrequirement pool:\n- Implement integer validation for inputs.\n- Check if one number is the sum of the other two.\n- Optimize for performance and quick execution.\n- Ensure clear documentation and examples.\n- Consider edge cases and error handling.\nWe will implement a simple function that checks if the inputs are integers and if one of the numbers is the sum of the other two. We will use Python's built-in type checking to ensure inputs are integers and perform basic arithmetic operations to check the sum condition.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integers'\n    Explanation: The requirement specifies that all numbers must be integers for the function to return true.\n\n    'sum of the other two'\n    Explanation: This means that for any of the three numbers, it should be equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    'one of the numbers matches the sum of the other two': This indicates a condition where one number should be equal to the sum of the other two numbers. In code, this can be implemented as checking if `x == y + z` or `y == x + z` or `z == x + y`.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers using Python's built-in type checking.\n    2. If any input is not an integer, return False.\n    3. Check if any one of the numbers is equal to the sum of the other two.\n    4. If such a condition is met, return True.\n    5. If no such condition is met, return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are integers and 0 equals the sum of 0 and 0.\n\n    any_int(1, 1, 2) = True\n    Explanation: All numbers are integers and 2 equals the sum of 1 and 1.\n\n    any_int(1, 2, 3) = True\n    Explanation: All numbers are integers and 3 equals the sum of 1 and 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already covers these scenarios by checking if one number equals the sum of the other two and ensuring all inputs are integers.\n", "requirement analysis:\nThe function must strictly check for integer inputs and ensure that one of the numbers is the sum of the other two. It should return false for any non-integer inputs or if the condition is not met.\nrequirement pool:\n- The function must validate that all inputs are integers.\n- The function should return true if one number is the sum of the other two.\n- The function should handle negative numbers correctly.\n- The function should return false for non-integer inputs.\n- The function should be optimized for performance with large numbers.\nWe will implement a simple function that checks if all inputs are integers and then verifies if any one of the numbers is the sum of the other two. We will use Python's built-in type checking to ensure inputs are integers and handle negative numbers correctly. The function will return false for any non-integer inputs without raising an error, as this aligns with the requirement to handle invalid inputs gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integer'\n    Explanation: The requirement specifies that all numbers must be integers. This means the function should check the type of each input to ensure they are integers.\n\n    'sum of the other two'\n    Explanation: The function should check if any one of the three numbers is equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    'sum of the other two': This indicates a relationship where one number should be equal to the sum of the other two numbers. In code, this can be implemented by checking if x == y + z or y == x + z or z == x + y.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers using isinstance().\n    2. If any input is not an integer, return False.\n    3. Check if any one of the numbers is equal to the sum of the other two.\n    4. Return True if the condition is met, otherwise return False.\n\n# [edge case]\n    any_int(0, 0, 0) = True\n    Explanation: All numbers are integers, and 0 is equal to the sum of 0 and 0.\n    \n    any_int(1, 1, 2) = True\n    Explanation: All numbers are integers, and 2 is equal to the sum of 1 and 1.\n    \n    any_int(1.0, 1, 2) = False\n    Explanation: One of the numbers is a float, so the function should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for integer types and the sum condition.\n", "requirement analysis:\nThe function should accurately determine if any of the three integer inputs equals the sum of the other two. It must reject non-integer inputs and provide clear examples for user understanding.\nrequirement pool:\n- Implement integer validation for inputs\n- Ensure correct sum comparison logic\n- Provide comprehensive examples in documentation\n- Optimize function for performance\n- Consider edge cases in input values\nWe will implement a simple function that checks if any of the three input numbers is equal to the sum of the other two. The function will first validate that all inputs are integers, returning false if any input is not an integer. This ensures that the function meets the requirement of rejecting non-integer inputs. The function will then perform the necessary checks to determine if any number matches the sum of the other two, returning true if such a condition is met. The implementation will be straightforward, leveraging Python's basic arithmetic operations and type checking.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integer'\n    Explanation: The requirement specifies that all numbers must be integers, meaning they should not have any fractional component.\n\n    'sum of the other two'\n    Explanation: This means that for any of the three numbers, it should be equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    'sum of the other two': This indicates an addition operation where one number should be equal to the sum of the other two numbers. In code, this can be implemented using addition and equality checks, such as `x == y + z`, `y == x + z`, or `z == x + y`.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers using type checking.\n    2. If any input is not an integer, return False.\n    3. Check if any of the three numbers is equal to the sum of the other two.\n    4. Return True if such a condition is met; otherwise, return False.\n\n# [edge case]\n    any_int(0, 0, 0) = True\n    Explanation: All numbers are integers, and each number is equal to the sum of the other two (0 = 0 + 0).\n\n    any_int(1, 1, 2) = True\n    Explanation: All numbers are integers, and one number (2) is equal to the sum of the other two (1 + 1).\n\n    any_int(1.0, 1, 2) = False\n    Explanation: One number is a float (1.0), so the function should return False due to non-integer input.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not all(isinstance(i, int) for i in [x, y, z]):\n            return False\n        return x == y + z or y == x + z or z == x + y\n", "requirement analysis:\nThe function should accurately determine if any of the three integer inputs equals the sum of the other two. It must reject non-integer inputs and provide clear examples for user understanding.\nrequirement pool:\n- Implement integer validation for inputs\n- Check if any integer matches the sum of the other two\n- Provide example cases in documentation\n- Optimize function for performance\n- Enhance error handling for non-integer inputs\nWe will implement a simple function that checks if any of the three input numbers is an integer and matches the sum of the other two. The function will first validate that all inputs are integers, and then perform the necessary checks. This approach ensures that the function is both efficient and easy to understand. We will not use any external libraries as the task is straightforward and can be handled with basic Python operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integer'\n    Explanation: In the requirement, it means that all input numbers must be of integer type.\n\n    'matches the sum'\n    Explanation: This means that one of the numbers should be equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all three inputs are integers.\n    2. If not, return False.\n    3. Check if any one of the numbers is equal to the sum of the other two.\n    4. If such a condition is met, return True.\n    5. If no such condition is met, return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are integers and 0 + 0 = 0, so the condition is satisfied.\n    \n    any_int(1, -1, 0) = True\n    Explanation: All numbers are integers and 1 + (-1) = 0, so the condition is satisfied.\n    \n    any_int(1, 2, 3.0) = False\n    Explanation: Although 1 + 2 = 3, the number 3.0 is not an integer, so the function returns False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for integer type and the sum condition.\n", "requirement analysis:\nThe function should accurately determine if one of the three integer inputs equals the sum of the other two. It must return false for any non-integer inputs, ensuring type safety and correctness.\nrequirement pool:\n- Implement integer validation for inputs.\n- Ensure correct sum calculation.\n- Optimize for performance.\n- Provide clear error messages for invalid inputs.\n- Include comprehensive test cases.\nWe will implement a simple function using Python's built-in capabilities to check if one of the three integer inputs equals the sum of the other two. The function will first validate that all inputs are integers, and then perform the sum check. This approach ensures type safety and correctness without the need for external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integer'\n    Explanation: The requirement specifies that all numbers must be integers, meaning they should not have any decimal or fractional parts.\n\n    'matches the sum'\n    Explanation: This means that one of the numbers should be equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    'sum of the other two': This indicates an addition operation where one number should equal the result of adding the other two numbers together.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Check if all inputs are integers.\n2. If not, return False.\n3. Check if any one of the three numbers is equal to the sum of the other two.\n4. If such a condition is met, return True.\n5. If no such condition is met, return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: 0 is an integer and 0 + 0 = 0, so it satisfies the condition.\n    \n    any_int(1, 1, 2) = True\n    Explanation: 1 + 1 = 2, so it satisfies the condition.\n    \n    any_int(1, 2, 3.0) = False\n    Explanation: Although 1 + 2 = 3, the number 3.0 is not an integer.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    def any_int(x, y, z):\n        if not all(isinstance(i, int) for i in [x, y, z]):\n            return False\n        return x == y + z or y == x + z or z == x + y\n    ```\n", "requirement analysis:\nThe function must strictly check for integer types and ensure that one of the numbers is the sum of the other two. It should handle both positive and negative integers and return false for any non-integer inputs.\nrequirement pool:\n- The function must return true if one number is the sum of the other two.\n- The function must return false if any input is not an integer.\n- The function should handle both positive and negative integers.\n- The function should be optimized for performance.\n- The function should include clear documentation and examples.\nWe will implement a simple Python function that checks if any of the three input numbers is the sum of the other two. The function will strictly enforce that all inputs are integers, returning false if any input is not an integer. This approach ensures correctness and performance by using basic arithmetic operations and type checks.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of the other two'\n    Explanation: This means that for any three numbers, one of them should be equal to the sum of the other two numbers.\n\n    'all numbers are integers'\n    Explanation: This means that the function should only return true if all inputs are integers. If any input is not an integer, the function should return false.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers. If not, return false.\n    2. Check if any of the three numbers is equal to the sum of the other two.\n        - Check if x == y + z\n        - Check if y == x + z\n        - Check if z == x + y\n    3. If any of the above conditions are true, return true.\n    4. If none of the conditions are true, return false.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are integers and 0 is equal to the sum of 0 and 0.\n    \n    any_int(1, 1, 2) = True\n    Explanation: All numbers are integers and 2 is equal to the sum of 1 and 1.\n    \n    any_int(1.5, 1, 2) = False\n    Explanation: One of the numbers is not an integer, so the function should return false.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n            return False\n        return x == y + z or y == x + z or z == x + y\n", "requirement analysis:\nThe function must accurately determine if any of the three provided numbers is the sum of the other two, ensuring all inputs are integers. It should return a boolean value and handle non-integer inputs by returning false.\nrequirement pool:\n- Validate that all inputs are integers\n- Check if one number is the sum of the other two\n- Return a boolean value\n- Handle non-integer inputs gracefully\n- Optimize for performance\nWe will implement a simple function using Python's built-in capabilities to check if any of the three numbers is the sum of the other two, ensuring all inputs are integers. We will use type checking to validate integer inputs and return a boolean value based on the condition. This approach avoids unnecessary complexity and optimizes for performance by leveraging Python's native operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matches the sum of the other two'\n    Explanation: This means that for any three numbers x, y, and z, one of them should be equal to the sum of the other two numbers.\n\n    'all numbers are integers'\n    Explanation: This means that the function should only return true if all three inputs are integers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers using type checking.\n    2. If not all inputs are integers, return False.\n    3. Check if any of the three numbers is equal to the sum of the other two:\n       - Check if x == y + z\n       - Check if y == x + z\n       - Check if z == x + y\n    4. If any of these conditions are true, return True.\n    5. If none of these conditions are true, return False.\n\n# [edge case] \n    any_int(0, 0, 0) = True\n    Explanation: All numbers are integers and 0 is equal to the sum of the other two zeros.\n\n    any_int(1, 1, 2) = True\n    Explanation: All numbers are integers and 2 is equal to the sum of 1 and 1.\n\n    any_int(1.0, 1, 2) = False\n    Explanation: Although 2 is equal to the sum of 1 and 1.0, not all numbers are integers (1.0 is a float).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not all(isinstance(i, int) for i in (x, y, z)):\n            return False\n        return x == y + z or y == x + z or z == x + y\n", "requirement analysis:\nThe function must strictly check for integer inputs and ensure that one of the numbers is the sum of the other two. It should return false for any non-integer inputs or if the sum condition is not met.\nrequirement pool:\n- The function must return true if one number is the sum of the other two.\n- The function must return false for non-integer inputs.\n- The function should handle negative numbers correctly.\n- The function should be optimized for performance.\n- The function should include comprehensive test cases.\nWe will implement a simple function using Python's built-in capabilities to check for integer inputs and verify if one of the numbers is the sum of the other two. The function will handle negative numbers and edge cases like zero. We will use type checking to ensure inputs are integers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'integer'\n    Explanation: The requirement specifies that all numbers must be integers, meaning they should be whole numbers without any decimal or fractional parts.\n\n    'sum of the other two'\n    Explanation: This means that the function should check if any one of the three numbers is equal to the sum of the other two numbers.\n\n# [phrase showing quantity relationship]\n    'sum of the other two': This indicates a relationship where one number should be equal to the sum of the other two numbers. In code, this can be implemented by checking if x == y + z or y == x + z or z == x + y.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Check if all inputs are integers using type checking.\n    2. Verify if any one of the numbers is equal to the sum of the other two.\n    3. Return True if the condition is met, otherwise return False.\n\n# [edge case]\n    any_int(0, 0, 0) = True\n    Explanation: All numbers are integers, and 0 is equal to the sum of 0 and 0.\n    \n    any_int(1, 1, 2) = True\n    Explanation: The number 2 is equal to the sum of 1 and 1.\n    \n    any_int(-1, -1, -2) = True\n    Explanation: The number -2 is equal to the sum of -1 and -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for integer inputs and verifies the sum condition.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [131, 131, 131, 131, 131, 131, 131, 131, 131, 131], "completion": "from typing import List\n## main.py\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    Takes three integers as input.\n    Returns True if one of the numbers is the sum of the other two.\n    Returns False for non-integer inputs or if the sum condition is not met.\n\n    Args:\n        x (int): First integer.\n        y (int): Second integer.\n        z (int): Third integer.\n\n    Returns:\n        bool: True if one of the numbers is the sum of the other two, False otherwise.\n    \"\"\"\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n\n    # Check if any one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    return False\n", "passed": true, "pass": true, "pass_num": 10, "round": 694, "mutate_method": "rephrase_one", "parent_index": 356}
