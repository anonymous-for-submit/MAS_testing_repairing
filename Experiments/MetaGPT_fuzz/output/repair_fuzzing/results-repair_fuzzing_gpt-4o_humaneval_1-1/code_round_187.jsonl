{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor. You need to find the greatest common divisor of two integers a and b.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "entry_point": "greatest_common_divisor", "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n", "test": ["def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 16) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(47, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(45, 15) == 15", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 6) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(53, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 9) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 12) == 12", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 63) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 12) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 18) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 12) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 64) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 2) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(53, 14) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 62) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 4) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 63) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(149, 64) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 2) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 58) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 12) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 12) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(13, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(10, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 5) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 18) == 6", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 12) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 12) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(54, 9) == 9", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 57) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 16) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(145, 63) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 62) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(140, 65) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(145, 55) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 3) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 20) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(7, 10) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(51, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 16) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 3) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(14, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(10, 15) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 20) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 4) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(13, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(139, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 58) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 64) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(52, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 10) == 10", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 62) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 60) == 12", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 14) == 7", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(143, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 4) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 60) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 16) == 8", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(54, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 9) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(146, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(139, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 10) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(143, 62) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(140, 63) == 7", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 18) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 6) == 6", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 15) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(14, 20) == 2"], "test_case_list": ["assert greatest_common_divisor(6, 16) == 2", "assert greatest_common_divisor(47, 19) == 1", "assert greatest_common_divisor(141, 65) == 1", "assert greatest_common_divisor(45, 15) == 15", "assert greatest_common_divisor(1, 6) == 1", "assert greatest_common_divisor(50, 14) == 2", "assert greatest_common_divisor(53, 16) == 1", "assert greatest_common_divisor(3, 9) == 3", "assert greatest_common_divisor(50, 11) == 1", "assert greatest_common_divisor(48, 12) == 12", "assert greatest_common_divisor(49, 9) == 1", "assert greatest_common_divisor(6, 14) == 2", "assert greatest_common_divisor(141, 63) == 3", "assert greatest_common_divisor(5, 11) == 1", "assert greatest_common_divisor(11, 12) == 1", "assert greatest_common_divisor(12, 13) == 1", "assert greatest_common_divisor(15, 19) == 1", "assert greatest_common_divisor(46, 18) == 2", "assert greatest_common_divisor(4, 12) == 4", "assert greatest_common_divisor(46, 13) == 1", "assert greatest_common_divisor(12, 11) == 1", "assert greatest_common_divisor(11, 17) == 1", "assert greatest_common_divisor(148, 64) == 4", "assert greatest_common_divisor(5, 9) == 1", "assert greatest_common_divisor(5, 2) == 1", "assert greatest_common_divisor(1, 11) == 1", "assert greatest_common_divisor(141, 61) == 1", "assert greatest_common_divisor(53, 14) == 1", "assert greatest_common_divisor(12, 10) == 2", "assert greatest_common_divisor(147, 62) == 1", "assert greatest_common_divisor(2, 4) == 2", "assert greatest_common_divisor(142, 63) == 1", "assert greatest_common_divisor(4, 6) == 2", "assert greatest_common_divisor(149, 64) == 1", "assert greatest_common_divisor(6, 2) == 2", "assert greatest_common_divisor(5, 13) == 1", "assert greatest_common_divisor(148, 58) == 2", "assert greatest_common_divisor(46, 10) == 2", "assert greatest_common_divisor(44, 12) == 4", "assert greatest_common_divisor(5, 12) == 1", "assert greatest_common_divisor(13, 15) == 1", "assert greatest_common_divisor(10, 17) == 1", "assert greatest_common_divisor(2, 7) == 1", "assert greatest_common_divisor(5, 5) == 5", "assert greatest_common_divisor(1, 7) == 1", "assert greatest_common_divisor(48, 18) == 6", "assert greatest_common_divisor(46, 12) == 2", "assert greatest_common_divisor(3, 12) == 3", "assert greatest_common_divisor(54, 9) == 9", "assert greatest_common_divisor(142, 57) == 1", "assert greatest_common_divisor(5, 16) == 1", "assert greatest_common_divisor(142, 55) == 1", "assert greatest_common_divisor(44, 16) == 4", "assert greatest_common_divisor(145, 63) == 1", "assert greatest_common_divisor(144, 59) == 1", "assert greatest_common_divisor(8, 9) == 1", "assert greatest_common_divisor(148, 62) == 2", "assert greatest_common_divisor(49, 16) == 1", "assert greatest_common_divisor(140, 65) == 5", "assert greatest_common_divisor(145, 55) == 5", "assert greatest_common_divisor(1, 3) == 1", "assert greatest_common_divisor(12, 20) == 4", "assert greatest_common_divisor(6, 13) == 1", "assert greatest_common_divisor(141, 59) == 1", "assert greatest_common_divisor(7, 10) == 1", "assert greatest_common_divisor(51, 11) == 1", "assert greatest_common_divisor(12, 16) == 4", "assert greatest_common_divisor(46, 14) == 2", "assert greatest_common_divisor(6, 3) == 3", "assert greatest_common_divisor(14, 13) == 1", "assert greatest_common_divisor(10, 15) == 5", "assert greatest_common_divisor(15, 20) == 5", "assert greatest_common_divisor(6, 17) == 1", "assert greatest_common_divisor(147, 61) == 1", "assert greatest_common_divisor(4, 4) == 4", "assert greatest_common_divisor(1, 9) == 1", "assert greatest_common_divisor(13, 17) == 1", "assert greatest_common_divisor(139, 65) == 1", "assert greatest_common_divisor(144, 58) == 2", "assert greatest_common_divisor(147, 64) == 1", "assert greatest_common_divisor(3, 7) == 1", "assert greatest_common_divisor(52, 19) == 1", "assert greatest_common_divisor(50, 10) == 10", "assert greatest_common_divisor(2, 9) == 1", "assert greatest_common_divisor(44, 10) == 2", "assert greatest_common_divisor(144, 62) == 2", "assert greatest_common_divisor(148, 55) == 1", "assert greatest_common_divisor(144, 60) == 12", "assert greatest_common_divisor(49, 14) == 7", "assert greatest_common_divisor(143, 59) == 1", "assert greatest_common_divisor(6, 4) == 2", "assert greatest_common_divisor(148, 60) == 4", "assert greatest_common_divisor(11, 19) == 1", "assert greatest_common_divisor(4, 7) == 1", "assert greatest_common_divisor(15, 16) == 1", "assert greatest_common_divisor(49, 13) == 1", "assert greatest_common_divisor(8, 16) == 8", "assert greatest_common_divisor(54, 19) == 1", "assert greatest_common_divisor(8, 11) == 1", "assert greatest_common_divisor(8, 6) == 2", "assert greatest_common_divisor(6, 9) == 3", "assert greatest_common_divisor(12, 14) == 2", "assert greatest_common_divisor(146, 55) == 1", "assert greatest_common_divisor(139, 61) == 1", "assert greatest_common_divisor(147, 65) == 1", "assert greatest_common_divisor(11, 10) == 1", "assert greatest_common_divisor(143, 62) == 1", "assert greatest_common_divisor(140, 63) == 7", "assert greatest_common_divisor(49, 15) == 1", "assert greatest_common_divisor(44, 15) == 1", "assert greatest_common_divisor(2, 6) == 2", "assert greatest_common_divisor(8, 18) == 2", "assert greatest_common_divisor(6, 6) == 6", "assert greatest_common_divisor(48, 15) == 3", "assert greatest_common_divisor(44, 9) == 1", "assert greatest_common_divisor(14, 20) == 2"], "nl": " Return a greatest common divisor of two integers a and b\n    ", "func": "def greatest_common_divisor(a: int, b: int) -> int:", "examples": ">>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    ", "repair_prompt": ["def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor. You need to find the greatest common divisor of two integers a and b.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor. You need to determine the greatest common divisor between two integers. These two integers are a and b.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''You need to find the greatest common divisor of two integers a and b and return it.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int, explain: bool = False) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n    explain (bool): If True, print the steps of the computation.\n\n    Returns:\n    int: The greatest common divisor of a and b.\n    \"\"\"\n    if explain:\n        print(f\"Initial values: a = {a}, b = {b}\")\n\n    # Handle the case where either number is zero\n    if a == 0:\n        if explain:\n            print(f\"Since a is zero, GCD is the absolute value of b: {abs(b)}\")\n        return abs(b)\n    if b == 0:\n        if explain:\n            print(f\"Since b is zero, GCD is the absolute value of a: {abs(a)}\")\n        return abs(a)\n\n    # Euclidean algorithm\n    while b != 0:\n        if explain:\n            print(f\"Computing: a = {a}, b = {b}, a % b = {a % b}\")\n        a, b = b, a % b\n\n    if explain:\n        print(f\"Final GCD is the absolute value of a: {abs(a)}\")\n\n    return abs(a)\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n    \"\"\"\n    # Take the absolute values to handle negative inputs\n    a, b = abs(a), abs(b)\n\n    # Handle the edge case where both numbers are zero\n    if a == 0 and b == 0:\n        return 0\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    >>> greatest_common_divisor(-25, -15)\n    5\n    \"\"\"\n    # Handle edge cases where both numbers are zero\n    if a == 0 and b == 0:\n        return 0\n    # Handle case where one number is zero\n    elif b == 0:\n        return abs(a)\n    # Use the Euclidean algorithm recursively\n    else:\n        return greatest_common_divisor(b, a % b)\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(5, 0)\n    5\n    >>> greatest_common_divisor(-25, -15)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    \"\"\"\n    # Handle edge cases where one or both numbers are zero\n    if a == 0:\n        return abs(b)\n    elif b == 0:\n        return abs(a)\n\n    # Use the Euclidean algorithm to find the GCD\n    while b != 0:\n        a, b = b, a % b\n\n    return abs(a)\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    Handles edge cases such as zero and negative numbers.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    >>> greatest_common_divisor(0, 15)\n    15\n    \"\"\"\n    # Handle edge cases where either number is zero\n    if a == 0:\n        return abs(b)\n    if b == 0:\n        return abs(a)\n    \n    # Take the absolute values to handle negative inputs\n    a, b = abs(a), abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    \"\"\"\n    # Ensure the inputs are positive for the calculation\n    a, b = abs(a), abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Unit tests to ensure correctness\ndef test_greatest_common_divisor():\n    assert greatest_common_divisor(3, 5) == 1, \"Test case 1 failed\"\n    assert greatest_common_divisor(25, 15) == 5, \"Test case 2 failed\"\n    assert greatest_common_divisor(0, 5) == 5, \"Test case 3 failed\"\n    assert greatest_common_divisor(-25, 15) == 5, \"Test case 4 failed\"\n    assert greatest_common_divisor(0, 0) == 0, \"Test case 5 failed\"\n    print(\"All test cases passed!\")\n\n# Run unit tests\nif __name__ == \"__main__\":\n    test_greatest_common_divisor()\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    Handles edge cases like zero and negative numbers by using absolute values.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Example:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    >>> greatest_common_divisor(-25, 15)\n    5\n    \"\"\"\n    # Take the absolute value of both integers to handle negative inputs\n    a = abs(a)\n    b = abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    # When b becomes zero, a is the GCD\n    return a\n", "from typing import List\n## main.py\n\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Calculate the greatest common divisor (GCD) of two integers using the Euclidean algorithm.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The greatest common divisor of a and b.\n\n    This function uses Python's built-in `math.gcd` function, which efficiently handles edge cases\n    such as zero and negative numbers.\n    \"\"\"\n    return math.gcd(a, b)\n", "from typing import List\n## main.py\n\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    \"\"\"\n    return math.gcd(a, b)\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Args:\n        a (int): First integer\n        b (int): Second integer\n    \n    Returns:\n        int: Greatest common divisor of a and b\n    \n    Raises:\n        ValueError: If inputs are not integers\n    \"\"\"\n    # Validate inputs\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Inputs must be integers\")\n\n    # Handle edge cases\n    if a == 0 and b == 0:\n        return 0\n    if b == 0:\n        return abs(a)\n    if a == 0:\n        return abs(b)\n\n    # Euclidean algorithm to find GCD\n    a, b = abs(a), abs(b)\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n"], "plans": ["requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor of two integers. The function should handle both positive and negative integers and return the correct GCD. It should also be optimized for performance, especially with large numbers.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm.\n- Ensure the function handles edge cases like zero or negative numbers.\n- Optimize the function for performance with large integers.\n- Provide a detailed explanation of the computation steps.\n- Create a user-friendly interface for input and output.\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for handling large integers. The function will be designed to handle both positive and negative integers, as well as zero. We will use Python's built-in capabilities to ensure performance and accuracy. Additionally, we will provide an optional detailed explanation of the computation steps.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest possible value that divides both integers without a remainder.\n\n# [code logic]\n    1. Check if either of the integers is zero. If one is zero, return the absolute value of the other integer as the GCD.\n    2. Use the Euclidean algorithm:\n       - While b is not zero, set a to b and b to a % b.\n       - Continue this process until b becomes zero.\n    3. Return the absolute value of a as the GCD.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of 0 and any non-zero integer is the absolute value of the non-zero integer.\n    \n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of 0 and 0 is typically defined as 0, since no positive integer divides both numbers.\n\n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The GCD is always a positive number, so even if one or both numbers are negative, the result should be positive.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The Euclidean algorithm inherently handles cases where one or both numbers are zero, and taking the absolute value ensures the result is positive.\n", "requirement analysis:\nThe function should efficiently compute the greatest common divisor of two integers, handling edge cases such as zero inputs and negative numbers. It should be optimized for performance, especially with large integers, and provide clear documentation for ease of use.\nrequirement pool:\n- Implement the GCD algorithm using Euclidean method\n- Optimize for large integer inputs\n- Handle edge cases like zero and negative inputs\n- Provide comprehensive documentation\n- Include unit tests for various scenarios\nWe will implement the GCD algorithm using the Euclidean method, which is efficient and widely used for computing the greatest common divisor. We will handle edge cases such as zero and negative inputs by ensuring the function returns correct results in these scenarios. The function will be optimized for performance, especially with large integers, by leveraging Python's built-in capabilities. Comprehensive documentation will be provided to ensure ease of use.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest possible integer that divides both numbers without a remainder.\n\n# [code logic]\n    1. Implement the Euclidean algorithm to find the GCD:\n        - If b is 0, return a as the GCD.\n        - Otherwise, recursively call the function with b and a % b.\n    2. Handle edge cases such as when one or both numbers are zero.\n    3. Ensure the function works for negative integers by taking the absolute value of inputs.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and 0 is the number itself.\n    \n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of 0 and 0 is undefined, but by convention, it can be considered as 0.\n    \n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The GCD should be positive, so we take the absolute values of the inputs.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    def greatest_common_divisor(a: int, b: int) -> int:\n        a, b = abs(a), abs(b)\n        if a == 0 and b == 0:\n            return 0\n        while b != 0:\n            a, b = b, a % b\n        return a\n    ```\n", "requirement analysis:\nThe function should efficiently compute the greatest common divisor of two integers, handling both small and large values. It should be easy to use and integrate, with clear documentation for developers.\nrequirement pool:\n- Implement the GCD algorithm using Euclidean method\n- Optimize for performance with large integers\n- Ensure compatibility with Python's type system\n- Provide comprehensive test cases\n- Document the function usage and edge cases\nWe will implement the GCD function using the Euclidean algorithm, which is efficient and widely used for computing the greatest common divisor. This approach is optimal for both small and large integers. We will use Python's built-in capabilities to handle integer operations, ensuring compatibility with Python's type system. Additionally, we will provide comprehensive documentation and test cases to cover various edge cases, including negative integers and zero.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both a and b without leaving a remainder\n\n# [code logic]\n    - Use the Euclidean algorithm to find the GCD:\n      1. If b is 0, return a as the GCD.\n      2. Otherwise, recursively call the function with parameters (b, a % b) until b becomes 0.\n    - Return the final value of a when b is 0.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and 0 is the number itself, so the expected output is 5.\n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of 0 and 0 is undefined, but conventionally it is considered as 0.\n    greatest_common_divisor(-25, -15) = 5\n    Explanation: The GCD is always positive, even if both numbers are negative. The expected output is 5.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0:\n            return 0\n        elif b == 0:\n            return abs(a)\n        else:\n            return greatest_common_divisor(b, a % b)\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor for any two integers, including edge cases such as zero inputs. It should be optimized for performance, especially with large integers, and provide clear documentation for ease of use.\nrequirement pool:\n- Implement the GCD calculation using Euclidean algorithm\n- Handle edge cases such as zero inputs\n- Optimize performance for large integers\n- Provide comprehensive documentation\n- Include examples in the documentation\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for handling large integers. The function will also handle edge cases such as zero inputs. We will use Python's built-in capabilities to ensure optimal performance and simplicity. The function will be documented with clear examples to enhance usability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest possible integer that divides both a and b without leaving a remainder.\n\n# [code logic]\n    1. Check if either a or b is zero. If one of them is zero, return the absolute value of the other number as the GCD.\n    2. Use the Euclidean algorithm:\n       - While b is not zero, set a to b and b to a % b.\n       - Continue this process until b becomes zero.\n    3. Return the absolute value of a as the GCD.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: When one number is zero, the GCD is the absolute value of the non-zero number.\n    \n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of two zeros is typically defined as zero.\n    \n    greatest_common_divisor(7, 0) = 7\n    Explanation: When one number is zero, the GCD is the absolute value of the non-zero number.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0:\n            return abs(b)\n        elif b == 0:\n            return abs(a)\n        (other code using Euclidean algorithm)\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor of two integers, handling edge cases such as zero and negative numbers. It should be optimized for performance, especially with large integers, and include clear documentation for user understanding.\nrequirement pool:\n- Implement the GCD calculation using Euclidean algorithm\n- Handle edge cases like zero and negative numbers\n- Optimize for large integer inputs\n- Provide detailed documentation and examples\n- Ensure compatibility with different Python versions\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and widely used for this purpose. We will handle edge cases such as zero and negative numbers by defining clear rules for these inputs. For negative numbers, we will take the absolute value before calculation, and for zero, we will return the absolute value of the other number. We will use Python's built-in capabilities to ensure compatibility across different versions and optimize performance for large integers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest possible divisor common to both integers\n\n# [code logic]\n    1. Take the absolute values of both integers to handle negative inputs.\n    2. Use the Euclidean algorithm:\n       - While the second number is not zero, replace the first number with the second number and the second number with the remainder of the division of the first number by the second number.\n    3. When the second number becomes zero, the first number is the GCD.\n    4. Return the GCD.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of 0 and any non-zero number is the absolute value of the non-zero number.\n    \n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The GCD is calculated using absolute values, so it remains 5.\n    \n    greatest_common_divisor(0, 0) = 0\n    Explanation: By convention, the GCD of 0 and 0 is defined as 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0:\n            return abs(b)\n        if b == 0:\n            return abs(a)\n        a, b = abs(a), abs(b)\n        while b != 0:\n            a, b = b, a % b\n        return a\n", "requirement analysis:\nThe function should efficiently compute the greatest common divisor of two integers, handling both positive and negative values, as well as zero. It should be optimized for performance and include clear documentation for ease of use.\nrequirement pool:\n- Implement the GCD algorithm using the Euclidean method.\n- Ensure the function handles edge cases like zero and negative numbers.\n- Optimize the function for performance with large integers.\n- Provide comprehensive documentation and examples.\n- Include unit tests to verify the function's correctness.\nWe will implement the GCD algorithm using the Euclidean method, which is efficient and well-suited for handling large integers. We will use Python's built-in capabilities to handle edge cases such as zero and negative numbers. The function will be documented with clear examples and will include unit tests to ensure correctness.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both a and b without leaving a remainder\n\n# [code logic]\n    - Implement the Euclidean algorithm:\n      1. If b is zero, return a as the GCD.\n      2. Otherwise, recursively call the function with parameters (b, a % b).\n    - Handle edge cases such as zero and negative numbers using Python's built-in capabilities.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and zero is the number itself.\n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of zero and zero is undefined, but conventionally considered as zero.\n    greatest_common_divisor(-25, -15) = 5\n    Explanation: The GCD is always positive, even if both numbers are negative.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The Euclidean algorithm naturally handles these cases, including zero and negative numbers.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor (GCD) of two integers. The function should be efficient and handle various edge cases, including zero and negative numbers. It should also be optimized for performance to handle large integers swiftly.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm.\n- Ensure the function handles edge cases like zero and negative numbers.\n- Optimize the function for performance with large integers.\n- Provide clear documentation and examples for users.\n- Create a simple user interface for input and output.\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for handling large integers. The function will be designed to handle edge cases such as zero and negative numbers by taking the absolute value of the inputs. We will use Python's built-in capabilities to ensure performance and simplicity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest possible integer that divides both input numbers without a remainder.\n\n# [code logic]\n    1. Take the absolute value of both integers to handle negative inputs.\n    2. Implement the Euclidean algorithm:\n       - While the second number is not zero, replace the first number with the second number and the second number with the remainder of the first number divided by the second number.\n    3. When the second number becomes zero, the first number is the GCD.\n    4. Return the GCD.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and zero is the number itself.\n    \n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of zero and zero is undefined, but mathematically it can be considered as zero for practical purposes.\n    \n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The GCD is calculated using absolute values, so negative numbers are treated as positive.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The Euclidean algorithm inherently handles these cases by using absolute values and the logic of replacing numbers until one becomes zero.\n", "requirement analysis:\nThe requirement is to implement a function that calculates the greatest common divisor (GCD) of two integers. The function should be efficient and handle edge cases such as zero or negative inputs. It should return the correct GCD for any pair of integers provided.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm.\n- Ensure the function handles edge cases like zero or negative numbers.\n- Optimize the function for performance with large integers.\n- Provide clear documentation and examples for users.\n- Consider extending functionality to support more than two numbers.\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for this task. We will use Python's standard library function `math.gcd` to ensure reliability and performance. This function inherently handles edge cases such as zero and negative numbers, making it a robust choice for our requirements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both a and b without leaving a remainder\n\n# [code logic]\n    Use the Euclidean algorithm to find the GCD of two numbers. This involves repeatedly replacing the larger number by the remainder of dividing the larger number by the smaller number until one of the numbers becomes zero. The other number at this point is the GCD.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and zero is the number itself.\n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of zero and zero is undefined, but conventionally it is considered as zero.\n    greatest_common_divisor(-3, -9) = 3\n    Explanation: The GCD is always positive, even if both numbers are negative.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. Python's `math.gcd` function inherently handles these cases efficiently.\n", "requirement analysis:\nThe function should efficiently compute the greatest common divisor using the Euclidean algorithm, which is optimal for integer inputs. It should handle edge cases such as zero inputs and negative numbers, and provide clear documentation for ease of use.\nrequirement pool:\n- Implement the Euclidean algorithm for GCD calculation\n- Ensure the function handles edge cases like zero and negative inputs\n- Optimize the function for performance with large integers\n- Provide comprehensive documentation and examples\n- Include unit tests for various input scenarios\nWe will implement the Euclidean algorithm for calculating the greatest common divisor (GCD) of two integers. This algorithm is efficient and widely used for integer inputs. We will use Python's standard library function `math.gcd` to ensure optimal performance and handle edge cases like zero and negative inputs. The function will return a positive GCD, as this is the standard convention.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both a and b without leaving a remainder\n\n# [code logic]\n    - Use the Euclidean algorithm to find the GCD:\n      - If b is 0, return a as the GCD.\n      - Otherwise, recursively call the function with parameters (b, a % b).\n    - Alternatively, use Python's `math.gcd` function for optimal performance.\n\n# [edge case] \n    greatest_common_divisor(0, 5) = 5\n    Explanation: The GCD of any number and 0 is the number itself.\n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of 0 and 0 is conventionally defined as 0.\n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The GCD is always positive, even if one or both numbers are negative.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. Using Python's `math.gcd` function will automatically handle these cases correctly.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor of two integers. The function should be efficient and handle edge cases such as negative numbers and zero.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm.\n- Ensure the function handles negative numbers and zero correctly.\n- Provide clear error messages for invalid inputs.\n- Optimize the function for performance with large integers.\n- Design a simple and intuitive user interface for input.\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for handling large integers. We will ensure the function handles negative numbers and zero correctly by taking the absolute value of inputs. Additionally, we will provide clear error messages for invalid inputs, such as non-integer values, by using Python's exception handling. The function will strictly enforce integer-only inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'greatest common divisor'\n    Explanation: The greatest common divisor (GCD) of two integers is the largest positive integer that divides both numbers without leaving a remainder.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': means the largest integer that divides both numbers without leaving a remainder\n\n# [code logic]\n    1. Ensure both inputs are integers and handle any invalid inputs using exception handling.\n    2. Use the Euclidean algorithm to calculate the GCD:\n       - If b is zero, return the absolute value of a as the GCD.\n       - Otherwise, repeatedly apply the formula: a = b, b = a % b until b becomes zero.\n    3. Return the absolute value of a as the GCD.\n\n# [edge case] \n    greatest_common_divisor(0, 0) = 0\n    Explanation: The GCD of zero and zero is undefined, but conventionally it can be considered as 0.\n    greatest_common_divisor(0, 5) = 5\n    Explanation: Any number divided by zero is undefined, but the GCD of zero and a non-zero number is the non-zero number itself.\n    greatest_common_divisor(-25, 15) = 5\n    Explanation: The GCD function should handle negative numbers by taking their absolute values, so the GCD of -25 and 15 is 5.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0:\n            return 0\n        return abs(a) if b == 0 else abs(b) if a == 0 else gcd(abs(a), abs(b))\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [116, 116, 116, 116, 116, 116, 116, 116, 116, 116], "completion": "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Args:\n        a (int): First integer\n        b (int): Second integer\n    \n    Returns:\n        int: Greatest common divisor of a and b\n    \n    Raises:\n        ValueError: If inputs are not integers\n    \"\"\"\n    # Validate inputs\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Inputs must be integers\")\n\n    # Handle edge cases\n    if a == 0 and b == 0:\n        return 0\n    if b == 0:\n        return abs(a)\n    if a == 0:\n        return abs(b)\n\n    # Euclidean algorithm to find GCD\n    a, b = abs(a), abs(b)\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n", "passed": true, "pass": true, "pass_num": 10, "round": 187, "mutate_method": "expand_one2two", "parent_index": 9}
