{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return ordered distinct common elements from both lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "entry_point": "common", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "test": ["def check(common):\n\tassert common([6, 5, 7, 10], [8, 4]) == []", "def check(common):\n\tassert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "def check(common):\n\tassert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "def check(common):\n\tassert common([8, 7, 6, 13], [7, 2]) == [7]", "def check(common):\n\tassert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "def check(common):\n\tassert common([7, 8, 6, 11], [4, 5, 9]) == []", "def check(common):\n\tassert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "def check(common):\n\tassert common([6, 6, 4, 12], [3, 1]) == []", "def check(common):\n\tassert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "def check(common):\n\tassert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "def check(common):\n\tassert common([4, 8, 2, 9], [3, 1]) == []", "def check(common):\n\tassert common([3, 5, 5, 8], [7, 6]) == []", "def check(common):\n\tassert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "def check(common):\n\tassert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "def check(common):\n\tassert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "def check(common):\n\tassert common([3, 7, 6, 3], [2, 4, 5]) == []", "def check(common):\n\tassert common([7, 4, 3, 10], [3, 1]) == [3]", "def check(common):\n\tassert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "def check(common):\n\tassert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "def check(common):\n\tassert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "def check(common):\n\tassert common([3, 1, 6, 11], [6, 6]) == [6]", "def check(common):\n\tassert common([7, 4, 7, 13], [8, 4]) == [4]", "def check(common):\n\tassert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "def check(common):\n\tassert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "def check(common):\n\tassert common([5, 8, 7, 3], [6, 4]) == []", "def check(common):\n\tassert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "def check(common):\n\tassert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "def check(common):\n\tassert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "def check(common):\n\tassert common([6, 6, 4, 5], [3, 3, 8]) == []", "def check(common):\n\tassert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "def check(common):\n\tassert common([2, 1, 7, 9], [6, 3]) == []", "def check(common):\n\tassert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "def check(common):\n\tassert common([7, 6, 3, 9], [6, 5]) == [6]", "def check(common):\n\tassert common([2, 3, 3, 9], [5, 2]) == [2]", "def check(common):\n\tassert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "def check(common):\n\tassert common([8, 3, 4, 10], [8, 7]) == [8]", "def check(common):\n\tassert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "def check(common):\n\tassert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "def check(common):\n\tassert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "def check(common):\n\tassert common([4, 5, 7, 12], [7, 1]) == [7]", "def check(common):\n\tassert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "def check(common):\n\tassert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "def check(common):\n\tassert common([2, 6, 2, 8], [5, 2]) == [2]", "def check(common):\n\tassert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "def check(common):\n\tassert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "def check(common):\n\tassert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "def check(common):\n\tassert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "def check(common):\n\tassert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "def check(common):\n\tassert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "def check(common):\n\tassert common([5, 5, 7, 7], [5, 2]) == [5]", "def check(common):\n\tassert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "def check(common):\n\tassert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "def check(common):\n\tassert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([5, 2, 1, 3], [8, 3]) == [3]", "def check(common):\n\tassert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "def check(common):\n\tassert common([5, 6, 4, 8], [3, 7, 2]) == []", "def check(common):\n\tassert common([7, 7, 5, 11], [3, 4]) == []", "def check(common):\n\tassert common([4, 3, 2, 8], []) == []", "def check(common):\n\tassert common([7, 7, 7, 3], [2, 4]) == []", "def check(common):\n\tassert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "def check(common):\n\tassert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "def check(common):\n\tassert common([1, 8, 7, 3], [2, 6]) == []", "def check(common):\n\tassert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "def check(common):\n\tassert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "def check(common):\n\tassert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "def check(common):\n\tassert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "def check(common):\n\tassert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "def check(common):\n\tassert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "def check(common):\n\tassert common([8, 4, 1, 9], [6, 3]) == []", "def check(common):\n\tassert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "def check(common):\n\tassert common([9, 7, 7, 7], [5, 2]) == []", "def check(common):\n\tassert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "def check(common):\n\tassert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "def check(common):\n\tassert common([8, 4, 6, 5], [1, 1]) == []", "def check(common):\n\tassert common([4, 5, 3, 10], [7, 5]) == [5]", "def check(common):\n\tassert common([7, 1, 7, 13], [3, 1]) == [1]", "def check(common):\n\tassert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "def check(common):\n\tassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "def check(common):\n\tassert common([7, 7, 1, 4], [5, 6]) == []", "def check(common):\n\tassert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "def check(common):\n\tassert common([8, 1, 1, 3], [5, 6]) == []", "def check(common):\n\tassert common([6, 3, 6, 3], [8, 5, 8]) == []", "def check(common):\n\tassert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "def check(common):\n\tassert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "def check(common):\n\tassert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "def check(common):\n\tassert common([1, 3, 4, 9], [7, 3]) == [3]", "def check(common):\n\tassert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "def check(common):\n\tassert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "def check(common):\n\tassert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "def check(common):\n\tassert common([8, 1, 4, 10], [4, 2]) == [4]", "def check(common):\n\tassert common([2, 8, 5, 10], [8, 4]) == [8]", "def check(common):\n\tassert common([8, 4, 4, 6], [3, 6]) == [6]", "def check(common):\n\tassert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "def check(common):\n\tassert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "def check(common):\n\tassert common([3, 1, 4, 5], [1, 1]) == [1]", "def check(common):\n\tassert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "test_case_list": ["assert common([6, 5, 7, 10], [8, 4]) == []", "assert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "assert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "assert common([8, 7, 6, 13], [7, 2]) == [7]", "assert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "assert common([7, 8, 6, 11], [4, 5, 9]) == []", "assert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "assert common([6, 6, 4, 12], [3, 1]) == []", "assert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "assert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "assert common([4, 8, 2, 9], [3, 1]) == []", "assert common([3, 5, 5, 8], [7, 6]) == []", "assert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "assert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "assert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "assert common([3, 7, 6, 3], [2, 4, 5]) == []", "assert common([7, 4, 3, 10], [3, 1]) == [3]", "assert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "assert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "assert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "assert common([3, 1, 6, 11], [6, 6]) == [6]", "assert common([7, 4, 7, 13], [8, 4]) == [4]", "assert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "assert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "assert common([5, 8, 7, 3], [6, 4]) == []", "assert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "assert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "assert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "assert common([6, 6, 4, 5], [3, 3, 8]) == []", "assert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "assert common([2, 1, 7, 9], [6, 3]) == []", "assert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "assert common([7, 6, 3, 9], [6, 5]) == [6]", "assert common([2, 3, 3, 9], [5, 2]) == [2]", "assert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "assert common([8, 3, 4, 10], [8, 7]) == [8]", "assert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "assert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "assert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "assert common([4, 5, 7, 12], [7, 1]) == [7]", "assert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "assert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "assert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "assert common([2, 6, 2, 8], [5, 2]) == [2]", "assert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "assert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "assert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "assert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "assert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "assert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "assert common([5, 5, 7, 7], [5, 2]) == [5]", "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "assert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "assert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "assert common([5, 2, 1, 3], [8, 3]) == [3]", "assert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "assert common([5, 6, 4, 8], [3, 7, 2]) == []", "assert common([7, 7, 5, 11], [3, 4]) == []", "assert common([4, 3, 2, 8], []) == []", "assert common([7, 7, 7, 3], [2, 4]) == []", "assert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "assert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "assert common([1, 8, 7, 3], [2, 6]) == []", "assert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "assert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "assert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "assert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "assert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "assert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "assert common([8, 4, 1, 9], [6, 3]) == []", "assert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "assert common([9, 7, 7, 7], [5, 2]) == []", "assert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "assert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "assert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "assert common([8, 4, 6, 5], [1, 1]) == []", "assert common([4, 5, 3, 10], [7, 5]) == [5]", "assert common([7, 1, 7, 13], [3, 1]) == [1]", "assert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "assert common([7, 7, 1, 4], [5, 6]) == []", "assert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "assert common([8, 1, 1, 3], [5, 6]) == []", "assert common([6, 3, 6, 3], [8, 5, 8]) == []", "assert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "assert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "assert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "assert common([1, 3, 4, 9], [7, 3]) == [3]", "assert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "assert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "assert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "assert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "assert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "assert common([8, 1, 4, 10], [4, 2]) == [4]", "assert common([2, 8, 5, 10], [8, 4]) == [8]", "assert common([8, 4, 4, 6], [3, 6]) == [6]", "assert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "assert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "assert common([3, 1, 4, 5], [1, 1]) == [1]", "assert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "nl": "Return sorted unique common elements for two lists.\n    ", "func": "def common(l1: list, l2: list):", "examples": ">>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    ", "repair_prompt": ["def common(l1: list, l2: list):\t\n'''Return ordered distinct common elements from both lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "def common(l1: list, l2: list):\t\n'''Return ordered distinct common elements from both lists. The function will identify which elements are shared between the two lists. Then, it will sort these shared elements and ensure there are no duplicates.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "def common(l1: list, l2: list):\t\n'''Return ordered distinct common elements from both lists. For example, common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) results in [1, 5, 653].\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return ordered distinct common elements from both lists.\n    \n    Args:\n        l1: First list of elements.\n        l2: Second list of elements.\n    \n    Returns:\n        A sorted list of distinct common elements.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and allow for efficient intersection operations\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the resulting set back to a list and sort it\n    sorted_common_elements = sorted(common_elements)\n    \n    # Return the sorted list of common elements\n    return sorted_common_elements\n\n# Example usage:\n# print(common([1, 2, 3, 4], [3, 4, 5, 6]))  # Output: [3, 4]\n# print(common([1, 1, 1], [1]))  # Output: [1]\n# print(common([], []))  # Output: []\n# print(common([1, 2, 3], []))  # Output: []\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return ordered distinct common elements from both lists.\n\n    Args:\n        l1 (list): First list of elements.\n        l2 (list): Second list of elements.\n\n    Returns:\n        list: Ordered list of distinct common elements.\n    \"\"\"\n    # Convert both lists to sets to find common elements and ensure distinctness\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find intersection of sets to get common elements\n    common_elements = set1.intersection(set2)\n\n    # Sort the intersection based on the order of the first list\n    sorted_common_elements = [element for element in l1 if element in common_elements]\n\n    return sorted_common_elements\n\n# Example usage:\n# common([1, 2, 3, 4], [3, 4, 5, 6]) should return [3, 4]\n# common([], [1, 2, 3]) should return []\n# common([1, 2, 3], []) should return []\n# common([], []) should return []\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return ordered distinct common elements from both lists.\n\n    Parameters:\n    l1 (list): The first list of elements.\n    l2 (list): The second list of elements.\n\n    Returns:\n    list: A list of ordered distinct common elements.\n\n    Examples:\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of both sets\n    common_elements = set1.intersection(set2)\n    \n    # Sort the common elements based on their order in the first list\n    sorted_common_elements = [element for element in l1 if element in common_elements]\n    \n    return sorted_common_elements\n\n# Example usage\nif __name__ == \"__main__\":\n    print(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # Output: [1, 5, 653]\n    print(common([5, 3, 2, 8], [3, 2]))  # Output: [2, 3]\n    print(common([], [1, 2, 3]))  # Output: []\n    print(common([1, 2, 3], []))  # Output: []\n    print(common([], []))  # Output: []\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return ordered distinct common elements from both lists.\n\n    Args:\n        l1 (list): First list of elements.\n        l2 (list): Second list of elements.\n\n    Returns:\n        list: A sorted list of distinct common elements.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and allow for efficient intersection\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n\n    # Convert the resulting set of common elements back to a list and sort it\n    sorted_common_elements = sorted(common_elements)\n\n    # Return the sorted list of common elements\n    return sorted_common_elements\n\n# Example usage:\n# result = common([1, 2, 3, 4], [3, 4, 5, 6])\n# print(result)  # Output: [3, 4]\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return ordered distinct common elements from both lists.\n    \n    Args:\n        l1: First list of elements.\n        l2: Second list of elements.\n    \n    Returns:\n        Sorted list of common elements without duplicates.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find intersection of sets to identify shared elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the resulting set back to a list and sort it\n    sorted_common_elements = sorted(common_elements)\n    \n    # Return the sorted list of common elements\n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return ordered distinct common elements from both lists.\n\n    Args:\n        l1: First list of elements.\n        l2: Second list of elements.\n\n    Returns:\n        A sorted list of distinct common elements.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the intersection of both sets\n    common_elements = set1.intersection(set2)\n\n    # Convert the set of common elements back to a sorted list\n    sorted_common_elements = sorted(common_elements)\n\n    return sorted_common_elements\n\n# Example usage:\n# result = common([1, 2, 3, 4], [3, 4, 5, 6])\n# print(result)  # Output: [3, 4]\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Takes two lists as input and returns a list of ordered distinct common elements.\n\n    Parameters:\n    l1 (list): The first list of elements.\n    l2 (list): The second list of elements.\n\n    Returns:\n    list: A sorted list of distinct common elements from both input lists.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and allow for efficient intersection operations\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the resulting set back to a list\n    common_list = list(common_elements)\n    \n    # Sort the list to ensure the elements are in ascending order\n    common_list.sort()\n    \n    # Return the sorted list\n    return common_list\n\n# Example usage:\n# print(common([1, 1, 2, 2], [2, 2, 3, 3]))  # Output: [2]\n# print(common([], []))  # Output: []\n# print(common([1, 2, 3], []))  # Output: []\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return ordered distinct common elements from both lists.\n    \n    Args:\n        l1 (list): First list of elements.\n        l2 (list): Second list of elements.\n    \n    Returns:\n        list: A list of ordered distinct common elements.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and allow for efficient intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the resulting set of common elements back to a list\n    common_list = list(common_elements)\n    \n    # Sort the list to ensure the elements are in order\n    common_list.sort()\n    \n    # Return the sorted list of common elements\n    return common_list\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return ordered distinct common elements from both lists.\n\n    Parameters:\n    l1 (list): The first list of elements.\n    l2 (list): The second list of elements.\n\n    Returns:\n    list: A sorted list of distinct common elements from both input lists.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and allow for efficient intersection operations\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the resulting set back to a list\n    common_list = list(common_elements)\n    \n    # Sort the list to ensure the elements are in order\n    common_list.sort()\n    \n    # Return the sorted list of common elements\n    return common_list\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return ordered distinct common elements from both lists.\n\n    Parameters:\n    l1 (list): The first list of elements.\n    l2 (list): The second list of elements.\n\n    Returns:\n    list: A list of ordered distinct common elements.\n\n    Examples:\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Use set intersection to find common elements between the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert the resulting set back to a list\n    common_list = list(common_elements)\n    \n    # Sort the list to ensure the elements are in order\n    common_list.sort()\n    \n    # Return the sorted list of common elements\n    return common_list\n"], "plans": ["requirement analysis:\nThe function should efficiently find common elements between two lists, ensuring the results are distinct and ordered. It should handle large datasets without performance degradation.\nrequirement pool:\n- Implement the main function to find common elements.\n- Ensure the results are distinct and ordered.\n- Optimize performance for handling large lists.\n- Provide clear documentation and examples.\n- Test the function with various list sizes and contents.\nWe will use Python's built-in set data structure to efficiently find common elements between two lists. Sets inherently handle distinct elements, and we can convert the result back to a sorted list to ensure ordering. This approach is optimal for performance, especially with large datasets, as set operations are generally faster than list operations for intersection tasks.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered distinct common elements'\n    Explanation: The requirement is to find elements that are present in both lists, ensure they are unique (distinct), and return them in a sorted order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Convert both lists to sets to remove duplicates and allow for efficient intersection operations.\n    2. Find the intersection of the two sets to get common elements.\n    3. Convert the resulting set back to a list.\n    4. Sort the list to ensure the elements are in order.\n    5. Return the sorted list of common elements.\n\n# [edge case] \n    common([], []) = []\n    Explanation: Both lists are empty, so there are no common elements.\n    \n    common([1, 2, 3], []) = []\n    Explanation: The second list is empty, so there are no common elements with the first list.\n    \n    common([1, 1, 1], [1]) = [1]\n    Explanation: The element '1' is common in both lists, and it should appear only once in the result as distinct elements are required.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of sets inherently handles duplicates and empty lists, and sorting an empty list or a list with a single element is straightforward.\n", "requirement analysis:\nThe function should efficiently find common elements between two lists, ensuring the result is ordered and contains distinct elements. It should handle various data types and edge cases, such as empty lists.\nrequirement pool:\n- Implement the main function to find common elements\n- Optimize for performance with large lists\n- Ensure the result is ordered and distinct\n- Provide comprehensive documentation and examples\n- Test compatibility with different Python versions\nWe will use Python's built-in set operations to efficiently find common elements between two lists. This approach ensures that the result is distinct and ordered. We will sort the result based on the order of the first list to maintain predictability. The function will handle various data types and edge cases, such as empty lists, by leveraging Python's dynamic typing and exception handling.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered distinct common elements'\n    Explanation: The requirement is to find elements that appear in both lists, ensure they are unique (distinct), and return them in a sorted order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Convert both lists to sets to find common elements and ensure distinctness.\n    2. Use set intersection to find common elements between the two sets.\n    3. Convert the resulting set back to a list.\n    4. Sort the list based on the order of the first list to maintain predictability.\n    5. Return the sorted list of common elements.\n\n# [edge case] \n    common([], [1, 2, 3]) = []\n    Explanation: The first list is empty, so there can be no common elements.\n    \n    common([1, 2, 3], []) = []\n    Explanation: The second list is empty, so there can be no common elements.\n    \n    common([], []) = []\n    Explanation: Both lists are empty, so there can be no common elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of using set intersection and sorting inherently handles these cases by returning an empty list when there are no common elements.\n", "requirement analysis:\nThe function should efficiently find common elements between two lists, ensuring the result is ordered and distinct. It should handle edge cases such as empty lists and large datasets. The implementation should be straightforward and compatible with various Python versions.\nrequirement pool:\n- Implement the main function to find common elements\n- Optimize for performance with large lists\n- Ensure the result is ordered and distinct\n- Provide comprehensive documentation and examples\n- Test compatibility with different Python versions\nWe will use Python's built-in set operations to find the common elements between two lists, as they are efficient and straightforward. However, since set operations do not maintain order, we will sort the result based on the order of the first list. This approach ensures that the function is efficient, handles large lists, and returns ordered distinct elements. We will also handle edge cases such as empty lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered distinct common elements'\n    Explanation: The requirement is to find elements that appear in both lists, ensure they are unique (distinct), and return them in the order they appear in the first list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Convert both lists to sets to find common elements.\n    2. Convert the set of common elements back to a list.\n    3. Sort this list based on the order of appearance in the first list.\n    4. Return the sorted list of common elements.\n\n# [edge case] \n    common([], [1, 2, 3]) = []\n    Explanation: The first list is empty, so there can be no common elements.\n    \n    common([1, 2, 3], []) = []\n    Explanation: The second list is empty, so there can be no common elements.\n    \n    common([], []) = []\n    Explanation: Both lists are empty, so there can be no common elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of converting lists to sets and finding intersections inherently handles empty lists by returning an empty set, which is then converted to an empty list.\n", "requirement analysis:\nThe function should efficiently identify common elements between two lists, ensuring the output is sorted and free of duplicates. It should handle large datasets without performance degradation.\nrequirement pool:\n- Efficiently identify common elements between two lists\n- Ensure output is sorted and free of duplicates\n- Optimize performance for large datasets\n- Provide clear documentation and examples\n- Include error handling for non-list inputs\nWe will use Python's built-in set data structure to efficiently identify common elements between two lists. Sets inherently remove duplicates and allow for fast intersection operations. After identifying the common elements, we will convert the set back to a sorted list to meet the requirement of ordered output. This approach ensures optimal performance even for large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered distinct common elements'\n    Explanation: The requirement is to find elements that are present in both lists, remove any duplicates, and then sort the resulting list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Convert both lists to sets to remove duplicates and allow for efficient intersection.\n    2. Find the intersection of the two sets to get common elements.\n    3. Convert the resulting set of common elements back to a list.\n    4. Sort the list of common elements.\n    5. Return the sorted list.\n\n# [edge case] \n    common([], []) = []\n    Explanation: Both lists are empty, so there are no common elements.\n    \n    common([1, 2, 3], []) = []\n    Explanation: The second list is empty, so there are no common elements with the first list.\n    \n    common([1, 1, 1], [1, 1]) = [1]\n    Explanation: The only common element is 1, and duplicates are removed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of sets inherently handles duplicates and empty lists.\n", "requirement analysis:\nThe function should efficiently find common elements between two lists, ensuring the result is sorted and contains no duplicates. It should be easy to use and integrate with existing Python code.\nrequirement pool:\n- Implement the main function to find common elements\n- Optimize the function for large input lists\n- Ensure the result is sorted and contains no duplicates\n- Provide comprehensive documentation and examples\n- Test the function with various edge cases\nWe will use Python's built-in set operations to efficiently find common elements between two lists, ensuring the result is sorted and contains no duplicates. This approach is optimal for both efficiency and usability, as it leverages Python's native capabilities without requiring additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered distinct common elements'\n    Explanation: The requirement is to find elements that appear in both lists, remove any duplicates, and return them in sorted order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Convert both lists to sets to remove duplicates and find common elements.\n    2. Use set intersection to identify shared elements between the two sets.\n    3. Convert the resulting set back to a list.\n    4. Sort the list to ensure the elements are in order.\n    5. Return the sorted list of common elements.\n\n# [edge case] \n    common([], []) = []\n    Explanation: Both lists are empty, so there are no common elements.\n    \n    common([1, 2, 3], []) = []\n    Explanation: The second list is empty, so there are no common elements with the first list.\n    \n    common([1, 1, 2, 2], [2, 2, 3, 3]) = [2]\n    Explanation: The only common element between the two lists is 2, and duplicates are removed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of set operations inherently handles duplicates and empty lists efficiently.\n", "requirement analysis:\nThe function should efficiently find common elements between two lists, ensuring the result is sorted and contains no duplicates. It should handle edge cases such as empty lists and large datasets.\nrequirement pool:\n- Implement the main function to find common elements\n- Ensure the result is sorted and contains no duplicates\n- Optimize for performance with large lists\n- Provide comprehensive documentation and examples\n- Include error handling for non-list inputs\nWe will use Python's built-in set operations to efficiently find common elements between two lists, ensuring the result is sorted and contains no duplicates. This approach is optimal for both efficiency and usability, as it leverages Python's native capabilities. We will also handle edge cases such as empty lists and provide comprehensive documentation in the form of docstrings.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered distinct common elements'\n    Explanation: The requirement is to find elements that are present in both lists, remove any duplicates, and return them in sorted order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Convert both lists to sets to find common elements.\n    2. Use set intersection to identify shared elements.\n    3. Convert the result back to a list and sort it.\n    4. Return the sorted list of common elements.\n\n# [edge case] \n    common([], [1, 2, 3]) = []\n    Explanation: One list is empty, so there can be no common elements.\n    \n    common([1, 2, 3], []) = []\n    Explanation: One list is empty, so there can be no common elements.\n    \n    common([], []) = []\n    Explanation: Both lists are empty, so there can be no common elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of set operations inherently handles cases where one or both lists are empty, resulting in an empty intersection.\n", "requirement analysis:\nThe function should efficiently find common elements between two lists, ensuring the result is ordered and contains distinct elements. It should handle edge cases such as empty lists and large datasets.\nrequirement pool:\n- The function must return ordered distinct common elements.\n- The function should handle large lists efficiently.\n- The function should maintain simplicity and readability.\n- The function should handle edge cases like empty lists.\n- The function should be easily integrable with other list operations.\nWe will use Python's built-in set operations to find common elements between two lists, as they are efficient and simple. We will then convert the result to a sorted list to ensure the elements are ordered. This approach is both efficient and maintains simplicity, making it suitable for handling large lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered distinct common elements'\n    Explanation: This means that the function should return elements that appear in both lists, without duplicates, and in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Convert both lists to sets to remove duplicates and allow for efficient intersection operations.\n    2. Find the intersection of the two sets to get common elements.\n    3. Convert the resulting set back to a list.\n    4. Sort the list to ensure the elements are in ascending order.\n    5. Return the sorted list.\n\n# [edge case] \n    common([], []) = []\n    Explanation: Both lists are empty, so there are no common elements.\n    \n    common([1, 2, 3], []) = []\n    Explanation: The second list is empty, so there are no common elements with the first list.\n    \n    common([1, 1, 2, 2], [2, 2, 3, 3]) = [2]\n    Explanation: The only common element is 2, and it should appear only once in the result.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of set operations inherently handles duplicates and empty lists efficiently.\n", "requirement analysis:\nThe function should efficiently find common elements between two lists, ensuring the results are distinct and ordered. It should handle large lists without performance degradation.\nrequirement pool:\n- Implement efficient algorithm for finding common elements\n- Ensure results are distinct and ordered\n- Optimize performance for large lists\n- Provide clear documentation and examples\n- Include error handling for non-list inputs\nWe will use Python's built-in set data structure to efficiently find common elements between two lists. Sets inherently provide distinct elements and allow for fast intersection operations. We will then convert the result to a sorted list to ensure the elements are ordered. This approach is simple, efficient, and leverages Python's capabilities to handle large lists effectively.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered distinct common elements'\n    Explanation: The requirement is to find elements that are present in both lists, ensure they are unique (distinct), and return them in a sorted order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Convert both lists to sets to remove duplicates and allow for efficient intersection.\n    2. Find the intersection of the two sets to get common elements.\n    3. Convert the resulting set of common elements back to a list.\n    4. Sort the list to ensure the elements are in order.\n    5. Return the sorted list of common elements.\n\n# [edge case] \n    common([], []) = []\n    Explanation: Both lists are empty, so there are no common elements.\n    \n    common([1, 2, 3], []) = []\n    Explanation: The second list is empty, so there can be no common elements with the first list.\n    \n    common([1, 1, 1], [1, 1]) = [1]\n    Explanation: Even though '1' appears multiple times in both lists, the result should be distinct, so only one '1' is returned.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of sets inherently handles duplicates and empty lists efficiently.\n", "requirement analysis:\nThe function should efficiently find common elements between two lists, ensuring the results are distinct and ordered. It should handle large datasets without performance degradation.\nrequirement pool:\n- Implement the main function to find common elements.\n- Ensure the results are distinct and ordered.\n- Optimize performance for large datasets.\n- Provide clear documentation and examples.\n- Test the function with various edge cases.\nWe will use Python's built-in set data structure to efficiently find common elements between two lists. Sets inherently handle distinct elements, and we can convert the result back to a sorted list to ensure the output is ordered. This approach is efficient for large datasets due to the average O(1) time complexity for set operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered distinct common elements'\n    Explanation: The requirement is to find elements that are present in both lists, ensure they are unique (distinct), and return them in a sorted order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Convert both lists to sets to remove duplicates and allow for efficient intersection operations.\n    2. Find the intersection of the two sets to get common elements.\n    3. Convert the resulting set back to a list.\n    4. Sort the list to ensure the elements are in order.\n    5. Return the sorted list of common elements.\n\n# [edge case] \n    common([], []) = []\n    Explanation: Both lists are empty, so there are no common elements.\n    \n    common([1, 2, 3], []) = []\n    Explanation: The second list is empty, so there are no common elements with the first list.\n    \n    common([1, 1, 1], [1, 1]) = [1]\n    Explanation: Even though '1' appears multiple times in both lists, it should only appear once in the result as distinct elements are required.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of sets inherently handles duplicates and empty lists, and sorting an empty list or a list with one element is straightforward.\n", "requirement analysis:\nThe function should efficiently find common elements between two lists, ensuring the result is ordered and contains distinct elements. It should handle various data types and edge cases, such as empty lists or lists with duplicate elements.\nrequirement pool:\n- Implement the main function to find common elements\n- Optimize for performance with large datasets\n- Ensure the result is ordered and distinct\n- Provide comprehensive documentation and examples\n- Test the function with various edge cases\nWe will use Python's built-in set operations to efficiently find common elements between two lists, ensuring the result is ordered and contains distinct elements. This approach is chosen for its balance between performance and simplicity. We will then convert the set back to a list and sort it to maintain order. This method is efficient for large datasets and handles edge cases such as empty lists or lists with duplicate elements gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ordered distinct common elements'\n    Explanation: The requirement is to find elements that appear in both lists, ensure they are unique (distinct), and return them in sorted order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Convert both lists to sets to remove duplicates and find common elements.\n    2. Use set intersection to find common elements between the two sets.\n    3. Convert the resulting set back to a list.\n    4. Sort the list to ensure the elements are in order.\n    5. Return the sorted list of common elements.\n\n# [edge case] \n    common([], []) = []\n    Explanation: Both lists are empty, so there are no common elements.\n    \n    common([1, 2, 3], []) = []\n    Explanation: The second list is empty, so there are no common elements.\n    \n    common([1, 1, 2, 3], [3, 3, 2, 1]) = [1, 2, 3]\n    Explanation: Both lists have duplicates, but the result should be distinct and ordered.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The use of set operations inherently handles duplicates and empty lists gracefully.\n"], "scores": [1.0, 0.75, 0.75, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, false, false, true, true, true, true, true, true, true], "pass_test_cases_num": [100, 75, 75, 100, 100, 100, 100, 100, 100, 100], "completion": "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return ordered distinct common elements from both lists.\n\n    Parameters:\n    l1 (list): The first list of elements.\n    l2 (list): The second list of elements.\n\n    Returns:\n    list: A list of ordered distinct common elements.\n\n    Examples:\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Use set intersection to find common elements between the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert the resulting set back to a list\n    common_list = list(common_elements)\n    \n    # Sort the list to ensure the elements are in order\n    common_list.sort()\n    \n    # Return the sorted list of common elements\n    return common_list\n", "passed": true, "pass": true, "pass_num": 8, "round": 636, "mutate_method": "rephrase_one", "parent_index": 49}
