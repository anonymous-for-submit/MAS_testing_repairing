{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if the components of the list are either consistently increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if the components of the list are either consistently increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "def monotonic(l: list):\t\n'''Return True if the components of the list are either consistently increasing or decreasing. Check if each successive element in the list is either greater than or equal to the one before it or less than or equal to the one before it.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "def monotonic(l: list):\t\n'''Return True if the components of the list are either consistently increasing or decreasing. \n\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements (e.g., numbers).\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            is_non_decreasing = False\n        if l[i] > l[i - 1]:\n            is_non_increasing = False\n\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n    \n    Parameters:\n    l (list): A list of comparable elements.\n    \n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([])\n    True\n    >>> monotonic([5, 5, 5])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = False\n\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            increasing = True\n        elif l[i] > l[i + 1]:\n            decreasing = True\n\n        if increasing and decreasing:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n    \n    Parameters:\n    l (list): A list of comparable elements.\n    \n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([1, 1, 1, 1])\n    True\n    >>> monotonic([])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n    \n    Parameters:\n    l (list): A list of comparable elements.\n    \n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''\n    if len(l) <= 1:\n        return True\n\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            is_non_increasing = False\n        if l[i] < l[i - 1]:\n            is_non_decreasing = False\n\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either non-increasing or non-decreasing).\n\n    Args:\n        l (list): A list of numeric elements.\n\n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(l) <= 1:\n        return True\n\n    # Initialize flags for increasing and decreasing\n    increasing = True\n    decreasing = True\n\n    # Iterate through the list from the second element to the end\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    # If either increasing or decreasing is still True, the list is monotonic\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-decreasing or non-increasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            is_increasing = False\n        if l[i] > l[i - 1]:\n            is_decreasing = False\n\n    return is_increasing or is_decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([1, 1, 1, 1])\n    True\n    >>> monotonic([])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        # An empty list or a single-element list is trivially monotonic\n        return True\n\n    # Initialize flags for non-decreasing and non-increasing\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            is_non_decreasing = False\n        if l[i] > l[i - 1]:\n            is_non_increasing = False\n\n    # The list is monotonic if it is either non-decreasing or non-increasing\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([1, 1, 1, 1])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements (e.g., numbers).\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            is_non_increasing = False\n        if l[i] < l[i - 1]:\n            is_non_decreasing = False\n\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([])\n    True\n    >>> monotonic([5])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = False\n\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            increasing = True\n        elif l[i] > l[i + 1]:\n            decreasing = True\n\n        if increasing and decreasing:\n            return False\n\n    return True\n"], "plans": ["requirement analysis:\nThe function should efficiently determine if a list is monotonic, handling both increasing and decreasing sequences. It should be easy to use and integrate into existing Python projects without additional dependencies.\nrequirement pool:\n- Implement the monotonic function to check for increasing or decreasing order\n- Optimize the function for large lists\n- Provide comprehensive documentation with examples\n- Include edge case handling for empty and single-element lists\n- Ensure compatibility with Python's list data structure\nWe will implement a simple Python function to check if a list is monotonic, meaning it is either entirely non-increasing or non-decreasing. The function will handle edge cases such as empty lists and single-element lists. We will ensure the function is efficient for large lists by using a single pass approach. The function will be compatible with Python's list data structure and will not require any additional libraries, keeping it lightweight and easy to integrate.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, \"monotonic\" refers to a sequence that is either entirely non-increasing or non-decreasing. This means that the elements of the list should either consistently increase or consistently decrease.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'consistently': means that the sequence should not change direction; it should either keep increasing or keep decreasing without any interruptions.\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are trivially monotonic.\n    2. Initialize two flags: one for checking non-decreasing order and another for non-increasing order.\n    3. Iterate through the list and compare each element with the next one:\n       - If an element is greater than the next, set the non-decreasing flag to False.\n       - If an element is less than the next, set the non-increasing flag to False.\n    4. After the loop, if either flag remains True, return True; otherwise, return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare it with.\n    \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are equal, so the list is both non-increasing and non-decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and single-element lists as monotonic by default.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, meaning it is either entirely non-increasing or non-decreasing. It should handle edge cases such as empty lists or lists with identical elements efficiently.\nrequirement pool:\n- Implement monotonic function to check list order\n- Optimize for performance with large datasets\n- Ensure comprehensive test coverage\n- Provide detailed documentation\n- Handle edge cases gracefully\nWe will implement a simple function to check if a list is monotonic by iterating through the list and comparing each element with the next one. We will use Python's built-in capabilities to ensure efficient performance, especially for large lists. The function will handle edge cases such as empty lists and lists with identical elements by returning True, as they can be considered monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, it means that the list is either entirely non-increasing or non-decreasing. A list is considered monotonic if it is either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True as it can be considered monotonic.\n    2. Initialize two flags: `increasing` and `decreasing`.\n    3. Iterate through the list from the first element to the second last element.\n    4. Compare each element with the next one:\n       - If the current element is less than the next one, set `increasing` to True.\n       - If the current element is greater than the next one, set `decreasing` to True.\n    5. After the loop, if both `increasing` and `decreasing` are True, return False as the list is not monotonic.\n    6. Otherwise, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list can be considered monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare it with.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list with all identical elements is considered monotonic as it does not increase or decrease.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking for empty lists and lists with identical elements.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists or lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic function to check list order\n- Optimize function for performance with large lists\n- Include comprehensive documentation with examples\n- Handle edge cases like empty lists or identical elements\n- Ensure compatibility with Python's list data structure\nWe will implement a simple function using Python's built-in capabilities to check if a list is monotonic. The function will iterate through the list to determine if it is consistently increasing or decreasing. We will optimize the function for performance by minimizing the number of comparisons and handle edge cases such as empty lists or lists with identical elements. Lists with identical elements will be considered monotonic as they do not change in order.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, 'monotonic' refers to a sequence that is either entirely non-increasing or non-decreasing. This means the elements of the list should consistently increase or decrease without any change in direction.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'consistently': means that the sequence should not change direction at any point; it should be strictly increasing or strictly decreasing.\n\n# [code logic]\n    1. Check if the list is empty or has only one element; if so, return True as it is trivially monotonic.\n    2. Initialize two flags: one for increasing and one for decreasing.\n    3. Iterate through the list and compare each element with the next one:\n        - If an element is greater than the next, set the decreasing flag to True.\n        - If an element is less than the next, set the increasing flag to True.\n    4. If both flags are True, return False as the list is not monotonic.\n    5. Otherwise, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A list with a single element is trivially monotonic as there are no elements to compare.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered monotonic as there is no change in order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as monotonic.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, handling both increasing and decreasing sequences. It should be optimized for performance, especially with large lists, and include clear documentation for ease of use.\nrequirement pool:\n- Implement monotonic function to check list order\n- Optimize function for large list performance\n- Provide comprehensive documentation\n- Include edge case handling\n- Ensure compatibility with various Python versions\nWe will implement a simple function using Python's built-in capabilities to check if a list is monotonic. The function will iterate through the list once, making it efficient for large lists. We will ensure compatibility with various Python versions and provide comprehensive documentation with examples and edge case handling.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, a monotonic list is one where the elements are either consistently increasing or consistently decreasing. This means that each element is either greater than or equal to the previous one (non-decreasing) or less than or equal to the previous one (non-increasing).\n\n# [phrase showing quantity relationship]\n    'greater than or equal to': This means that each element in the list should be at least as large as the one before it for the list to be considered non-decreasing.\n    'less than or equal to': This means that each element in the list should be at most as large as the one before it for the list to be considered non-increasing.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are trivially monotonic.\n    2. Initialize two flags: one for checking non-decreasing order and another for non-increasing order.\n    3. Iterate through the list from the second element to the end:\n        - If an element is greater than the previous one, set the non-increasing flag to False.\n        - If an element is less than the previous one, set the non-decreasing flag to False.\n    4. After iterating through the list, if either flag remains True, return True. Otherwise, return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic because there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic because there are no other elements to compare it with.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: All elements are equal, so the list is both non-decreasing and non-increasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking if the list is empty or has only one element and by using flags to determine monotonicity.\n", "requirement analysis:\nThe function should determine if a list is monotonic by checking if it is either entirely non-increasing or non-decreasing. It should handle edge cases such as empty lists or lists with a single element efficiently. The implementation should be optimized for performance, especially for large datasets.\nrequirement pool:\n- Implement the monotonic function to check for non-increasing or non-decreasing order.\n- Optimize the function for performance with large lists.\n- Include comprehensive test cases covering edge cases.\n- Document the function usage and edge cases.\n- Ensure compatibility with Python 3.x.\nWe will implement a function to check if a list is monotonic by verifying if it is either entirely non-increasing or non-decreasing. The function will handle edge cases such as empty lists or lists with a single element efficiently. We will use standard Python libraries to ensure compatibility and optimize performance for large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the context of the requirement, a monotonic list is one where the elements are either entirely non-increasing or non-decreasing. This means that each element is either greater than or equal to the previous one (non-decreasing) or less than or equal to the previous one (non-increasing).\n\n# [phrase showing quantity relationship]\n    'greater than or equal to': This indicates that each element in the list should be compared to the previous one to check if it is greater than or equal to it for a non-decreasing sequence.\n    'less than or equal to': This indicates that each element in the list should be compared to the previous one to check if it is less than or equal to it for a non-increasing sequence.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are trivially monotonic.\n    2. Initialize two flags: `increasing` and `decreasing` to True.\n    3. Iterate through the list from the second element to the end.\n    4. For each element, compare it with the previous one:\n       - If it is greater, set `decreasing` to False.\n       - If it is less, set `increasing` to False.\n    5. After the loop, if either `increasing` or `decreasing` is still True, return True. Otherwise, return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare against.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: All elements are equal, so the list is both non-increasing and non-decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and single-element lists as monotonic by default.\n", "requirement analysis:\nThe function should efficiently determine if a list is monotonic, handling both increasing and decreasing sequences. It should be optimized for performance, especially with large datasets, and include clear documentation with examples.\nrequirement pool:\n- Implement monotonic function to check list sequences\n- Optimize function for large list performance\n- Include comprehensive documentation with examples\n- Ensure compatibility with Python's list operations\n- Test function with various edge cases\nWe will implement a simple function using Python's built-in capabilities to check if a list is monotonic. The function will iterate through the list once to determine if it is either entirely non-decreasing or non-increasing. This approach ensures efficiency even for large lists without requiring additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, 'monotonic' refers to a sequence that is either entirely non-decreasing or non-increasing. This means that each element in the list is either greater than or equal to the previous element (non-decreasing) or less than or equal to the previous element (non-increasing).\n\n# [phrase showing quantity relationship]\n    'greater than or equal to': This indicates a non-decreasing sequence where each element is compared to the previous one to ensure it is not smaller.\n    'less than or equal to': This indicates a non-increasing sequence where each element is compared to the previous one to ensure it is not larger.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize two flags, `is_increasing` and `is_decreasing`, both set to True.\n    2. Iterate through the list from the second element to the end.\n    3. For each element, check if it is greater than or equal to the previous element. If not, set `is_increasing` to False.\n    4. For each element, check if it is less than or equal to the previous element. If not, set `is_decreasing` to False.\n    5. Return True if either `is_increasing` or `is_decreasing` is True, otherwise return False.\n\n# [edge case]\n    monotonic([1]) = True\n    Explanation: A single-element list is trivially monotonic as there are no successive elements to compare.\n    \n    monotonic([1, 1, 1]) = True\n    Explanation: All elements are equal, satisfying both non-decreasing and non-increasing conditions.\n    \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: The sequence is non-decreasing as each element is greater than or equal to the previous one.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking both non-decreasing and non-increasing conditions will naturally handle these cases.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists or lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonicity check for lists\n- Optimize performance for large datasets\n- Include comprehensive documentation with examples\n- Handle edge cases like empty lists\n- Ensure compatibility with Python's list operations\nWe will implement a function to check if a list is monotonic using Python's built-in capabilities. The function will determine if the list is either entirely non-increasing or non-decreasing. We will optimize the function for performance by minimizing the number of comparisons and using efficient iteration techniques. Comprehensive documentation will be provided, including examples and handling of edge cases such as empty lists and lists with identical elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the context of the requirement, a monotonic list is one where the elements are either entirely non-increasing or non-decreasing. This means that the list should either be sorted in ascending order or descending order without any fluctuations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element, in which case it is trivially monotonic.\n    2. Initialize two flags: one for checking non-decreasing order and another for non-increasing order.\n    3. Iterate through the list and compare each element with the next one:\n        - If an element is greater than the next, set the non-decreasing flag to False.\n        - If an element is less than the next, set the non-increasing flag to False.\n    4. After the iteration, if either flag remains True, return True, indicating the list is monotonic.\n    5. If both flags are False, return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic as there are no elements to violate the monotonic condition.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare against.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list with all identical elements is considered monotonic as it does not increase or decrease.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as monotonic.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists or lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic function to check list sequences\n- Optimize for large list performance\n- Provide comprehensive documentation and examples\n- Ensure compatibility with various Python versions\n- Include error handling for invalid inputs\nWe will implement a simple function to check if a list is monotonic by iterating through the list once, comparing each element with the next. This approach ensures optimal performance for large lists. We will use Python's built-in capabilities to keep the implementation lightweight and efficient. Lists with identical elements will be considered monotonic as they do not change in value.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the context of the requirement, a monotonic list is one where the elements are either entirely non-increasing or non-decreasing. This means that as you move through the list from start to end, the values either consistently increase or consistently decrease.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'consistently': This implies that the sequence of numbers should not change direction. If it starts increasing, it should continue to increase, and if it starts decreasing, it should continue to decrease.\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are trivially monotonic.\n    2. Initialize two flags: one for checking increasing order and another for decreasing order.\n    3. Iterate through the list:\n        - Compare each element with the next.\n        - If an element is greater than the next, set the decreasing flag to False.\n        - If an element is less than the next, set the increasing flag to False.\n    4. After the loop, if either flag remains True, return True; otherwise, return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is also trivially monotonic as there are no other elements to compare against.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list with all identical elements is considered monotonic because there is no change in value.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking for empty or single-element lists and treating lists with identical elements as monotonic.\n", "requirement analysis:\nThe function should determine if a list is either entirely non-increasing or non-decreasing. It should handle edge cases such as empty lists or lists with a single element. The implementation should be efficient, ideally with a time complexity of O(n).\nrequirement pool:\n- Implement the monotonic function to check list order\n- Optimize the function for large lists\n- Include comprehensive test cases\n- Provide detailed documentation and examples\n- Ensure compatibility with Python 3.x\nWe will implement a function named 'monotonic' that checks if a list is either entirely non-increasing or non-decreasing. The function will handle edge cases such as empty lists or lists with a single element. The implementation will be efficient with a time complexity of O(n). We will use Python's built-in capabilities to achieve this without relying on external libraries, ensuring compatibility with Python 3.x.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the context of the requirement, a monotonic list is one where the elements are either entirely non-increasing or non-decreasing. This means that the list should either be sorted in ascending order or descending order without any fluctuations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True because such lists are trivially monotonic.\n    2. Initialize two flags: one for checking non-decreasing order and another for non-increasing order.\n    3. Iterate through the list from the second element to the end:\n        - Compare each element with the previous one.\n        - If an element is greater than the previous one, set the non-increasing flag to False.\n        - If an element is less than the previous one, set the non-decreasing flag to False.\n    4. After the loop, if either flag remains True, return True. Otherwise, return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic as there are no elements to violate monotonicity.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare against.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list where all elements are equal is considered monotonic as it satisfies both non-increasing and non-decreasing conditions.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and single-element lists as monotonic.\n", "requirement analysis:\nThe function should determine if a list is either entirely non-increasing or non-decreasing. It should handle edge cases such as empty lists or lists with a single element. The implementation should be efficient, especially for large lists, and should not rely on external libraries to maintain simplicity and ease of use.\nrequirement pool:\n- Implement the monotonic function to check for increasing or decreasing order.\n- Optimize the function for large lists.\n- Include comprehensive test cases in the documentation.\n- Provide examples of edge cases in the documentation.\n- Ensure compatibility with Python's list data structure.\nWe will implement a simple function that checks if a list is monotonic by iterating through the list and comparing each element with the next one. The function will handle edge cases such as empty lists or lists with a single element. We will ensure the function is efficient for large lists by using a single pass approach without relying on external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, 'monotonic' refers to a sequence that is either entirely non-increasing or non-decreasing. A list is considered monotonic if its elements are consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element; if so, return True as it is trivially monotonic.\n    2. Initialize two flags: one for increasing and one for decreasing.\n    3. Iterate through the list, comparing each element with the next one.\n    4. If an element is greater than the next, set the decreasing flag to True.\n    5. If an element is less than the next, set the increasing flag to True.\n    6. If both flags are True at any point, return False as the list is not monotonic.\n    7. If the iteration completes without both flags being True, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A list with a single element is trivially monotonic as there are no elements to compare.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list where all elements are equal is considered monotonic as it does not violate the non-increasing or non-decreasing condition.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the length of the list and handling cases where all elements are equal.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "completion": "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([])\n    True\n    >>> monotonic([5])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = False\n\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            increasing = True\n        elif l[i] > l[i + 1]:\n            decreasing = True\n\n        if increasing and decreasing:\n            return False\n\n    return True\n", "passed": true, "pass": true, "pass_num": 10, "round": 487, "mutate_method": "rephrase_one", "parent_index": 48}
