{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure the output maintains the number names in their original word form.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": ["def check(sort_numbers):\n\tassert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one\") == 'one'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four three six\") == 'three four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one six four\") == 'one four six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two\") == 'one two'", "def check(sort_numbers):\n\tassert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four five five one one\") == 'one one four five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four zero two five\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight\") == 'eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six three\") == 'three six'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero\") == 'zero seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four three zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven\") == 'seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six nine three\") == 'three six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one nine three\") == 'one three four nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "def check(sort_numbers):\n\tassert sort_numbers('three five nine') == 'three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three\") == 'zero three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one seven\") == 'one four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six\") == 'six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"four two seven\") == 'two four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three four five\") == 'three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five four zero\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three seven two\") == 'two three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four six four one\") == 'one four four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight six three\") == 'three six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three five\") == 'three five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four\") == 'four'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero four one\") == 'zero one four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine\") == 'nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three\") == 'three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three four zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five\") == 'five'", "def check(sort_numbers):\n\tassert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers('three') == 'three'", "def check(sort_numbers):\n\tassert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six\") == 'six'", "def check(sort_numbers):\n\tassert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five\") == 'five eight'", "def check(sort_numbers):\n\tassert sort_numbers('') == ''", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine nine five\") == 'five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three\") == 'three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero\") == 'zero'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine zero\") == 'zero nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one six two seven\") == 'one two six seven'"], "test_case_list": ["assert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "assert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "assert sort_numbers(\"one\") == 'one'", "assert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "assert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "assert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "assert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "assert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "assert sort_numbers(\"four four three six\") == 'three four four six'", "assert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "assert sort_numbers(\"nine one six four\") == 'one four six nine'", "assert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "assert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "assert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "assert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "assert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "assert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "assert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "assert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "assert sort_numbers(\"one two\") == 'one two'", "assert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "assert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "assert sort_numbers(\"four five five one one\") == 'one one four five five'", "assert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "assert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "assert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "assert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "assert sort_numbers(\"four zero two five\") == 'zero two four five'", "assert sort_numbers(\"eight\") == 'eight'", "assert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "assert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "assert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "assert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "assert sort_numbers(\"six three\") == 'three six'", "assert sort_numbers(\"seven zero\") == 'zero seven'", "assert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "assert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "assert sort_numbers(\"four three zero\") == 'zero three four'", "assert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "assert sort_numbers(\"seven\") == 'seven'", "assert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "assert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "assert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "assert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "assert sort_numbers(\"six nine three\") == 'three six nine'", "assert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "assert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "assert sort_numbers(\"four one nine three\") == 'one three four nine'", "assert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "assert sort_numbers('three five nine') == 'three five nine'", "assert sort_numbers(\"zero three\") == 'zero three'", "assert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "assert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "assert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "assert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "assert sort_numbers(\"four one seven\") == 'one four seven'", "assert sort_numbers(\"seven six\") == 'six seven'", "assert sort_numbers(\"four two seven\") == 'two four seven'", "assert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "assert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "assert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "assert sort_numbers(\"nine three four five\") == 'three four five nine'", "assert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "assert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "assert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "assert sort_numbers(\"two five four zero\") == 'zero two four five'", "assert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "assert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "assert sort_numbers(\"three seven two\") == 'two three seven'", "assert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "assert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "assert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "assert sort_numbers(\"four four six four one\") == 'one four four four six'", "assert sort_numbers(\"eight six three\") == 'three six eight'", "assert sort_numbers(\"five three five\") == 'three five five'", "assert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "assert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "assert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "assert sort_numbers(\"four\") == 'four'", "assert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "assert sort_numbers(\"six zero four one\") == 'zero one four six'", "assert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "assert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "assert sort_numbers(\"nine\") == 'nine'", "assert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "assert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "assert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "assert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "assert sort_numbers(\"three\") == 'three'", "assert sort_numbers(\"three four zero\") == 'zero three four'", "assert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "assert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "assert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "assert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "assert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "assert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "assert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "assert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "assert sort_numbers(\"five\") == 'five'", "assert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "assert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "assert sort_numbers('three') == 'three'", "assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "assert sort_numbers(\"six\") == 'six'", "assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "assert sort_numbers(\"eight five\") == 'five eight'", "assert sort_numbers('') == ''", "assert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "assert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "assert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "assert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "assert sort_numbers(\"nine nine five\") == 'five nine nine'", "assert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "assert sort_numbers(\"seven three\") == 'three seven'", "assert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "assert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "assert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "assert sort_numbers(\"zero\") == 'zero'", "assert sort_numbers(\"nine zero\") == 'zero nine'", "assert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "assert sort_numbers(\"one six two seven\") == 'one two six seven'"], "nl": " Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    ", "func": "def sort_numbers(numbers: str) -> str:", "examples": ">>> sort_numbers('three one five')\n    'one three five'\n    ", "repair_prompt": ["def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure the output maintains the number names in their original word form.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are the words 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. These words are each representing numbers. Return the string with numbers sorted from smallest to largest. Ensure the output maintains the number names in their original word form.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine', and valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure the output maintains the number names in their original word form.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A space-delimited string of numerals sorted from smallest to largest in their original word form.\n    \"\"\"\n    # Mapping of number words to their numeric values\n    number_word_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Mapping of numeric values back to their word form\n    value_to_number_word = {v: k for k, v in number_word_to_value.items()}\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Convert each word to its corresponding numeric value, ignoring invalid words\n    numeric_values = []\n    for word in words:\n        if word in number_word_to_value:\n            numeric_values.append(number_word_to_value[word])\n\n    # Sort the numeric values\n    numeric_values.sort()\n\n    # Map the sorted numeric values back to their original word form\n    sorted_words = [value_to_number_word[value] for value in numeric_values]\n\n    # Join the sorted words into a single string separated by spaces\n    return ' '.join(sorted_words)\n\n# Example usage:\n# print(sort_numbers('three one five'))  # Output: 'one three five'\n# print(sort_numbers('zero nine eight'))  # Output: 'zero eight nine'\n# print(sort_numbers('five five five'))  # Output: 'five five five'\n# print(sort_numbers(''))  # Output: ''\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of number words from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A string with numbers sorted from smallest to largest in their word form.\n    \"\"\"\n    # Dictionary mapping number words to their numeric values\n    number_word_to_value = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Reverse dictionary to map numeric values back to number words\n    value_to_number_word = {v: k for k, v in number_word_to_value.items()}\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Filter out invalid words\n    valid_words = [word for word in words if word in number_word_to_value]\n    \n    # If no valid words are found, return an empty string\n    if not valid_words:\n        return ''\n    \n    # Sort the valid words based on their numeric value\n    sorted_values = sorted(valid_words, key=lambda word: number_word_to_value[word])\n    \n    # Map sorted values back to their word form\n    sorted_words = [value_to_number_word[number_word_to_value[word]] for word in sorted_values]\n    \n    # Join the sorted words into a space-delimited string and return it\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Takes a space-delimited string of number words ('zero' to 'nine') and returns them sorted numerically in their original word form.\n    \n    Args:\n        numbers (str): A string containing number words separated by spaces.\n        \n    Returns:\n        str: A string with the number words sorted numerically.\n    \"\"\"\n    # Dictionary to map number words to their numeric values\n    number_word_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Dictionary to map numeric values back to their number words\n    value_to_number_word = {v: k for k, v in number_word_to_value.items()}\n    \n    # Split the input string into a list of words\n    words = numbers.split()\n    \n    # Convert each word to its corresponding numeric value\n    numeric_values = [number_word_to_value[word] for word in words if word in number_word_to_value]\n    \n    # Sort the list of numeric values\n    sorted_numeric_values = sorted(numeric_values)\n    \n    # Convert the sorted numeric values back to their word form\n    sorted_words = [value_to_number_word[value] for value in sorted_numeric_values]\n    \n    # Join the sorted words into a single string with spaces and return it\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A space-delimited string with the numbers sorted from smallest to largest in their original word form.\n    \"\"\"\n    # Dictionary to map number words to their numeric values\n    number_word_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Dictionary to map numeric values back to their word form\n    value_to_number_word = {v: k for k, v in number_word_to_value.items()}\n\n    # Split the input string into a list of words\n    words = numbers.split()\n\n    # Convert each word to its numeric value, filtering out invalid words\n    numeric_values = [number_word_to_value[word] for word in words if word in number_word_to_value]\n\n    # Sort the list of numeric values\n    numeric_values.sort()\n\n    # Convert the sorted numeric values back to their word form\n    sorted_words = [value_to_number_word[value] for value in numeric_values]\n\n    # Join the sorted words into a single string separated by spaces\n    result = ' '.join(sorted_words)\n\n    return result\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A string with numbers sorted from smallest to largest in their original word form.\n    \"\"\"\n    # Mapping of number words to their corresponding numeric values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    number_to_word = {v: k for k, v in word_to_number.items()}\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Handle edge case for empty input\n    if not words:\n        return ''\n\n    # Map each word to its numeric value, ignoring invalid inputs\n    numeric_values = []\n    for word in words:\n        if word in word_to_number:\n            numeric_values.append(word_to_number[word])\n        else:\n            # If invalid input is encountered, return an empty string\n            return ''\n\n    # Sort the list of numeric values\n    numeric_values.sort()\n\n    # Map the sorted numeric values back to their word form\n    sorted_words = [number_to_word[num] for num in numeric_values]\n\n    # Join the sorted words into a single string separated by spaces\n    result = ' '.join(sorted_words)\n\n    return result\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of number words from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A space-delimited string with numbers sorted from smallest to largest.\n             Returns 'Invalid input' if any word is not a valid number word.\n    \"\"\"\n    # Dictionary mapping number words to their numeric values\n    valid_words = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Handle edge case for empty input\n    if not numbers:\n        return ''\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Validate each word against the dictionary\n    if any(word not in valid_words for word in words):\n        return 'Invalid input'\n\n    # Sort the list of words based on their numeric values\n    sorted_words = sorted(words, key=lambda word: valid_words[word])\n\n    # Join the sorted list back into a space-delimited string\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Takes a space-delimited string of number words and returns a string with the numbers sorted in ascending order.\n\n    Parameters:\n    numbers (str): A string containing number words from 'zero' to 'nine'.\n\n    Returns:\n    str: A string with the number words sorted in ascending order.\n    \"\"\"\n    # Dictionary mapping number words to their corresponding numerical values\n    word_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Dictionary mapping numerical values back to their word form\n    number_to_word = {v: k for k, v in word_to_number.items()}\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Convert each word to its numerical value using the dictionary\n    try:\n        numerical_values = [word_to_number[word] for word in words]\n    except KeyError:\n        # Handle invalid inputs by returning an empty string\n        return ''\n    \n    # Sort the numerical values\n    numerical_values.sort()\n    \n    # Convert the sorted numerical values back to their word form using the dictionary\n    sorted_words = [number_to_word[number] for number in numerical_values]\n    \n    # Join the sorted words into a single string separated by spaces\n    sorted_string = ' '.join(sorted_words)\n    \n    # Return the sorted string\n    return sorted_string\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A string with numbers sorted from smallest to largest, maintaining the number names in their original word form.\n    \"\"\"\n    # Mapping of number words to their numeric values\n    number_word_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of numeric values back to their word form\n    value_to_number_word = {v: k for k, v in number_word_to_value.items()}\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Convert each word to its numeric value using the dictionary\n    numeric_values = [number_word_to_value[word] for word in words if word in number_word_to_value]\n    \n    # Sort the numeric values\n    sorted_numeric_values = sorted(numeric_values)\n    \n    # Convert the sorted numeric values back to their word form\n    sorted_words = [value_to_number_word[value] for value in sorted_numeric_values]\n    \n    # Join the sorted words into a single string separated by spaces\n    sorted_string = ' '.join(sorted_words)\n    \n    return sorted_string\n\n# Example usage:\n# print(sort_numbers('three one five'))  # Output: 'one three five'\n# print(sort_numbers('zero nine eight'))  # Output: 'zero eight nine'\n# print(sort_numbers('five five five'))  # Output: 'five five five'\n# print(sort_numbers(''))  # Output: ''\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of number words from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A space-delimited string of the same numerals sorted from smallest to largest.\n    \"\"\"\n    # Mapping of number words to their corresponding numerical values\n    number_word_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Reverse mapping from numerical values to number words\n    word_number_map = {v: k for k, v in number_word_map.items()}\n    \n    # Split the input string into a list of words\n    words = numbers.split()\n    \n    # Sort the words based on their numerical value using the mapping\n    sorted_numbers = sorted(words, key=lambda word: number_word_map[word])\n    \n    # Join the sorted words into a single string with spaces and return it\n    return ' '.join(sorted_numbers)\n\n# Example usage:\n# print(sort_numbers('three one five'))  # Output: 'one three five'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A string with numbers sorted from smallest to largest in their original word form.\n    \"\"\"\n    # Mapping of number words to their numeric values\n    number_word_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Reverse mapping from numeric values to number words\n    value_to_number_word = {v: k for k, v in number_word_to_value.items()}\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Sort the words based on their numeric value\n    sorted_words = sorted(words, key=lambda word: number_word_to_value[word])\n    \n    # Join the sorted words into a single string separated by spaces\n    return ' '.join(sorted_words)\n\n# Example usage:\n# result = sort_numbers('three one five')\n# print(result)  # Output: 'one three five'\n"], "plans": ["requirement analysis:\nThe function should accurately sort number words from 'zero' to 'nine'. It must handle input errors gracefully and ensure the output is in the original word form. Performance optimization is crucial for quick processing.\nrequirement pool:\n- Implement sorting logic for number words\n- Handle edge cases and input errors\n- Optimize performance for quick processing\n- Ensure compatibility with various input formats\n- Provide user feedback for incorrect inputs\nWe will implement a function that maps number words to their corresponding numeric values, sort them, and then map them back to their original word form. We will use Python's built-in sorting capabilities for efficient performance. The function will handle edge cases such as invalid inputs by returning an error message or ignoring them.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where each word is separated by spaces, representing numbers in word form.\n\n    'numerals from zero to nine'\n    Explanation: The valid inputs are the words representing numbers from zero to nine.\n\n# [phrase showing quantity relationship]\n    'smallest to largest'\n    Explanation: The requirement specifies sorting the numbers in ascending order based on their numeric value.\n\n# [degree adverb]\n    'smallest': Refers to the lowest numeric value in the list.\n    'largest': Refers to the highest numeric value in the list.\n\n# [code logic]\n    1. Create a dictionary mapping number words to their numeric values.\n    2. Split the input string into individual words.\n    3. Convert each word to its corresponding numeric value using the dictionary.\n    4. Sort the numeric values.\n    5. Map the sorted numeric values back to their original word form using the dictionary.\n    6. Join the sorted words into a single string separated by spaces and return it.\n\n# [edge case]\n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string as there are no numbers to sort.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The words 'zero', 'nine', and 'eight' are sorted based on their numeric values (0, 9, 8) resulting in 'zero eight nine'.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All words are the same, so sorting does not change the order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of mapping, sorting, and re-mapping handles these cases naturally.\n", "requirement analysis:\nThe function should accurately sort a space-delimited string of number words from 'zero' to 'nine'. It must handle typical edge cases such as empty strings and invalid inputs gracefully, ensuring robustness and reliability.\nrequirement pool:\n- Implement the main sorting logic for number words.\n- Handle edge cases such as empty strings and invalid inputs.\n- Optimize for performance with longer input strings.\n- Provide clear documentation and examples for users.\n- Ensure compatibility with various Python versions.\nWe will implement a function that maps number words to their numeric values using a dictionary, sort them, and then map them back to their word form. We will use Python's built-in sorting capabilities for efficiency. The function will handle edge cases like empty strings and invalid inputs by returning an appropriate message or an empty string.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces, representing numbers in word form.\n\n    'numerals from zero to nine'\n    Explanation: The valid inputs are the words representing numbers from zero to nine.\n\n# [phrase showing quantity relationship]\n    'smallest to largest'\n    Explanation: The requirement is to sort the numbers in ascending order based on their numeric value.\n\n# [degree adverb]\n    'smallest': Refers to the lowest numeric value in the list.\n    'largest': Refers to the highest numeric value in the list.\n\n# [code logic]\n1. Create a dictionary mapping number words to their numeric values.\n2. Split the input string into individual words.\n3. Convert each word to its numeric value using the dictionary.\n4. Sort the numeric values.\n5. Convert the sorted numeric values back to their word form using the dictionary.\n6. Join the sorted words into a space-delimited string and return it.\n\n# [edge case]\n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The words 'zero', 'nine', and 'eight' should be sorted based on their numeric values (0, 9, 8) resulting in 'zero eight nine'.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All words are the same, so the output should be identical to the input.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not numbers:\n            return ''\n        # Additional code for handling invalid inputs can be added if necessary.\n\n", "requirement analysis:\nThe function should take a string of number words and return them sorted numerically. It must handle valid inputs and edge cases like empty strings. The output should maintain the original word form of the numbers.\nrequirement pool:\n- Implement the main sorting function\n- Handle edge cases such as empty input\n- Optimize for performance with longer strings\n- Add support for additional languages\n- Provide detailed error messages for invalid inputs\nWe will implement a simple function that maps number words to their corresponding numeric values, sorts them, and then maps them back to their word form. This approach ensures clarity and efficiency. We will use a dictionary for the mapping, which is both simple and effective for this task. The function will handle edge cases like empty strings by returning an empty string.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where each word is separated by a space, and each word represents a number from 'zero' to 'nine'.\n\n    'sort from smallest to largest'\n    Explanation: The task is to order the numbers in ascending order based on their numeric value, not their alphabetical order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': means the number with the lowest numeric value.\n    'largest': means the number with the highest numeric value.\n\n# [code logic]\n1. Create a dictionary to map number words ('zero' to 'nine') to their corresponding numeric values (0 to 9).\n2. Split the input string into a list of words.\n3. Convert each word in the list to its corresponding numeric value using the dictionary.\n4. Sort the list of numeric values.\n5. Convert the sorted numeric values back to their word form using the dictionary.\n6. Join the sorted words into a single string with spaces and return it.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty string as there are no numbers to sort.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The words 'zero', 'nine', and 'eight' are converted to 0, 9, and 8 respectively, sorted as 0, 8, 9, and then converted back to 'zero', 'eight', 'nine'.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All numbers are the same, so sorting does not change the order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of converting, sorting, and converting back will naturally handle these cases.\n", "requirement analysis:\nThe function should take a string of number words, convert them to their numeric equivalents, sort them, and return the sorted list in word form. It should handle edge cases like empty strings and invalid inputs gracefully.\nrequirement pool:\n- Implement the main sorting function for number words.\n- Handle edge cases such as empty strings and invalid inputs.\n- Optimize the function for performance.\n- Provide comprehensive documentation and examples.\n- Ensure compatibility with various Python versions.\nWe will implement a function that maps number words to their numeric equivalents using a dictionary, sort the numeric values, and then map them back to their word form. We will use Python's built-in sorting capabilities for performance optimization. The function will handle edge cases like empty strings by returning an empty string and will ignore invalid inputs by filtering them out.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The input consists of words representing numbers from 0 to 9.\n\n    'sorted from smallest to largest'\n    Explanation: The output should be the input words rearranged in order of their numeric value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest to largest': means that the numbers should be sorted in ascending order.\n\n# [code logic]\n1. Create a dictionary mapping each number word ('zero' to 'nine') to its corresponding numeric value (0 to 9).\n2. Split the input string into a list of words.\n3. Convert each word in the list to its numeric value using the dictionary.\n4. Sort the list of numeric values.\n5. Convert the sorted numeric values back to their word form using the dictionary.\n6. Join the sorted words into a single string separated by spaces.\n7. Return the resulting string.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The words 'zero', 'nine', and 'eight' should be sorted based on their numeric values (0, 8, 9).\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All words are the same, so the output should be identical to the input.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles empty strings and repeated words naturally through sorting and mapping.\n", "requirement analysis:\nThe function should accurately sort number words from 'zero' to 'nine'. It must handle edge cases like empty strings or invalid inputs. The output should maintain the original word form of the numbers.\nrequirement pool:\n- Implement sorting logic for number words\n- Handle edge cases and invalid inputs\n- Optimize performance for quick processing\n- Design intuitive user interface\n- Ensure compatibility with various input formats\nWe will implement a function that maps the number words to their corresponding numeric values, sort them, and then map them back to their word form. We will handle edge cases such as empty strings and invalid inputs by returning an appropriate message or an empty string. The function will be optimized for quick processing by using Python's built-in sorting capabilities.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where each word is separated by a space, representing numbers in word form.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The valid inputs are words that represent numbers from 0 to 9.\n\n    'sorted from smallest to largest'\n    Explanation: The output should be the input words rearranged in order of their numeric value.\n\n# [phrase showing quantity relationship]\n    'smallest to largest': This indicates an ascending order sort based on the numeric value of the words.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Create a mapping of number words to their corresponding numeric values.\n2. Split the input string into individual words.\n3. Map each word to its numeric value using the created mapping.\n4. Sort the list of numeric values.\n5. Map the sorted numeric values back to their word form.\n6. Join the sorted words into a single string separated by spaces.\n7. Return the resulting string.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string as there are no numbers to sort.\n\n    sort_numbers('zero nine eight') = 'eight nine zero'\n    Explanation: The words 'zero', 'nine', and 'eight' correspond to the numbers 0, 9, and 8, respectively. Sorted numerically, they are 0, 8, and 9, which map back to 'zero', 'eight', and 'nine'.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All words are the same, so sorting does not change the order.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not numbers:\n            return ''\n        (other code)\n", "requirement analysis:\nThe function should accurately sort a space-delimited string of number words from 'zero' to 'nine'. It must handle edge cases such as empty strings and invalid inputs gracefully, ensuring robustness and reliability.\nrequirement pool:\n- Implement the main sorting logic for number words.\n- Handle edge cases like empty strings and invalid inputs.\n- Optimize for performance with large inputs.\n- Provide clear error messages for invalid inputs.\n- Ensure the function is easy to integrate into larger systems.\nWe will implement a function that maps number words to their numeric values using a dictionary. The function will split the input string into individual words, validate them against the dictionary, sort them based on their numeric values, and then return the sorted words as a space-delimited string. We will handle edge cases such as empty strings and invalid inputs by returning appropriate error messages.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The input consists of words representing numbers from 0 to 9.\n\n    'sorted from smallest to largest'\n    Explanation: The output should be the input words rearranged in order of their numeric values.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest to largest': means that the numbers should be sorted in ascending order based on their numeric value.\n\n# [code logic]\n1. Create a dictionary mapping number words ('zero' to 'nine') to their corresponding numeric values (0 to 9).\n2. Split the input string into a list of words.\n3. Validate each word against the dictionary to ensure it is a valid number word.\n4. Sort the list of words based on their numeric values using the dictionary.\n5. Join the sorted list back into a space-delimited string.\n6. Return the sorted string.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The words 'zero', 'nine', and 'eight' should be sorted based on their numeric values (0, 8, 9).\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All words are the same, so the output remains unchanged.\n\n# [extra code for edge case]\n    We need extra code to handle invalid inputs.\n        if not numbers:\n            return ''\n        valid_words = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n        words = numbers.split()\n        if any(word not in valid_words for word in words):\n            return 'Invalid input'\n        sorted_words = sorted(words, key=lambda word: valid_words[word])\n        return ' '.join(sorted_words)\n", "requirement analysis:\nThe function should take a string of number words, convert them to their numerical equivalents, sort them, and return the sorted list in word form. It should handle edge cases like empty strings and invalid inputs gracefully.\nrequirement pool:\n- Implement the main sorting function for number words.\n- Handle edge cases such as empty strings or invalid inputs.\n- Optimize the function for performance.\n- Provide detailed documentation for ease of use.\n- Ensure compatibility with larger projects.\nWe will implement a function that maps number words to their corresponding numerical values, sorts them, and then maps them back to their word form. We will use a dictionary for the mapping and handle edge cases such as empty strings by returning an empty string. The function will be simple and efficient, ensuring quick execution.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where each word is separated by spaces, representing numbers in word form.\n\n    'numerals from zero to nine'\n    Explanation: The valid inputs are the words representing numbers from zero to nine, which need to be sorted.\n\n# [phrase showing quantity relationship]\n    'smallest to largest': This indicates the need to sort the numbers in ascending order based on their numerical value.\n\n# [degree adverb]\n    'smallest': Refers to the lowest numerical value in the list.\n    'largest': Refers to the highest numerical value in the list.\n\n# [code logic]\n1. Create a dictionary mapping number words to their corresponding numerical values.\n2. Split the input string into individual words.\n3. Convert each word to its numerical value using the dictionary.\n4. Sort the numerical values.\n5. Convert the sorted numerical values back to their word form using the dictionary.\n6. Join the sorted words into a single string separated by spaces.\n7. Return the sorted string.\n\n# [edge case]\n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string as there are no numbers to sort.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The words 'zero', 'nine', and 'eight' are sorted based on their numerical values (0, 9, 8), resulting in 'zero eight nine'.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All words are the same, so sorting does not change the order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles empty strings and repeated words naturally.\n", "requirement analysis:\nThe function should accurately sort number words from 'zero' to 'nine' in ascending order. It must handle input errors gracefully and ensure the output maintains the original word form.\nrequirement pool:\n- Accurate sorting of number words\n- Handle input errors gracefully\n- Maintain original word form in output\n- Optimize performance for quick processing\n- Ensure compatibility with various input formats\nWe will implement a function that maps number words to their corresponding numeric values, sorts them, and then maps them back to their original word form. This approach ensures accurate sorting while maintaining the original word form. We will use Python's built-in sorting capabilities for optimal performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where each word is separated by spaces, representing numbers in word form.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The valid inputs are the words representing numbers from zero to nine.\n\n# [phrase showing quantity relationship]\n    'smallest to largest': This indicates the need to sort the numbers in ascending order based on their numeric value.\n\n# [degree adverb]\n    'smallest': Refers to the lowest numeric value in the list.\n    'largest': Refers to the highest numeric value in the list.\n\n# [code logic]\n    1. Create a dictionary mapping number words to their numeric values.\n    2. Split the input string into individual words.\n    3. Convert each word to its numeric value using the dictionary.\n    4. Sort the numeric values.\n    5. Convert the sorted numeric values back to their word form using the dictionary.\n    6. Join the sorted words into a single string separated by spaces.\n    7. Return the sorted string.\n\n# [edge case]\n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string.\n\n    sort_numbers('zero nine eight') = 'zero eight nine'\n    Explanation: The words 'zero', 'nine', and 'eight' should be sorted based on their numeric values (0, 9, 8) resulting in 'zero eight nine'.\n\n    sort_numbers('five five five') = 'five five five'\n    Explanation: All words are the same, so the output should be identical to the input.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles empty strings and repeated words naturally through sorting and mapping.\n", "requirement analysis:\nThe function should take a string of number words, convert them to their numerical equivalents, sort them, and return the sorted list in word form. It should handle edge cases like repeated words and empty strings efficiently.\nrequirement pool:\n- Implement the main sorting logic for number words.\n- Optimize for performance with large input strings.\n- Ensure the function handles edge cases gracefully.\n- Add support for additional languages or number words.\n- Provide detailed error messages for invalid inputs.\nWe will implement a function that maps number words to their corresponding numerical values, sort these values, and then map them back to their word form. This approach ensures that the sorting is accurate and efficient. We will use a dictionary for the mapping, which allows for quick lookups and conversions. The function will handle edge cases such as repeated words and empty strings by checking for these conditions and processing them accordingly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where each word is separated by a space, representing numbers in word form.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The valid inputs are the words representing numbers from zero to nine.\n\n    'sorted from smallest to largest'\n    Explanation: The output should be the input words rearranged in order of their numerical value.\n\n# [phrase showing quantity relationship]\n    'smallest to largest': This indicates an ascending order sort based on numerical value.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Create a dictionary mapping each number word ('zero' to 'nine') to its corresponding numerical value (0 to 9).\n2. Split the input string into a list of words.\n3. Convert each word to its numerical value using the dictionary.\n4. Sort the list of numerical values.\n5. Convert the sorted numerical values back to their word form using the dictionary.\n6. Join the sorted words into a single string with spaces and return it.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty string as there are no numbers to sort.\n\n    sort_numbers('zero zero zero') = 'zero zero zero'\n    Explanation: All numbers are the same, so the sorted order is the same as the input.\n\n    sort_numbers('nine eight seven six five four three two one zero') = 'zero one two three four five six seven eight nine'\n    Explanation: The input is in reverse order, and the function should return them in ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of splitting, mapping, sorting, and joining will naturally handle these cases.\n", "requirement analysis:\nThe function should accurately sort a space-delimited string of number words from 'zero' to 'nine'. It must ensure that the output maintains the original word form of the numbers. The function should handle any valid input within the specified range and return the sorted result efficiently.\nrequirement pool:\n- Implement the sorting logic for number words\n- Ensure the function handles edge cases gracefully\n- Optimize the function for performance\n- Add support for additional languages\n- Include error handling for invalid inputs\nWe will implement a simple function that maps number words to their corresponding numeric values using a dictionary. The function will then sort these numeric values and map them back to their original word form for the output. We will use Python's built-in sorting capabilities to ensure efficient performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string'\n    Explanation: The input is a string where words are separated by spaces, representing numbers in word form.\n\n    'numerals from \"zero\" to \"nine\"'\n    Explanation: The input consists of words representing numbers from zero to nine, which need to be sorted.\n\n# [phrase showing quantity relationship]\n    'smallest to largest': means sorting the numbers in ascending order based on their numeric value.\n\n# [degree adverb] \n    'smallest': refers to the lowest numeric value in the list.\n    'largest': refers to the highest numeric value in the list.\n\n# [code logic]\n    1. Create a dictionary mapping number words to their numeric values.\n    2. Split the input string into individual words.\n    3. Convert each word to its numeric value using the dictionary.\n    4. Sort the numeric values.\n    5. Map the sorted numeric values back to their original word form using the dictionary.\n    6. Join the sorted words into a single string separated by spaces and return it.\n\n# [edge case] \n    sort_numbers('') = ''\n    Explanation: An empty input string should return an empty output string as there are no numbers to sort.\n\n    sort_numbers('zero zero zero') = 'zero zero zero'\n    Explanation: All numbers are the same, so sorting does not change their order.\n\n    sort_numbers('nine eight seven six five four three two one zero') = 'zero one two three four five six seven eight nine'\n    Explanation: The input contains all possible numbers from zero to nine in descending order, and the function should return them in ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of splitting, mapping, sorting, and joining handles these cases naturally.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [121, 121, 121, 121, 121, 121, 121, 121, 121, 121], "completion": "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a space-delimited string of numerals from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A space-delimited string of numerals from 'zero' to 'nine'.\n\n    Returns:\n        str: A string with numbers sorted from smallest to largest in their original word form.\n    \"\"\"\n    # Mapping of number words to their numeric values\n    number_word_to_value = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Reverse mapping from numeric values to number words\n    value_to_number_word = {v: k for k, v in number_word_to_value.items()}\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Sort the words based on their numeric value\n    sorted_words = sorted(words, key=lambda word: number_word_to_value[word])\n    \n    # Join the sorted words into a single string separated by spaces\n    return ' '.join(sorted_words)\n\n# Example usage:\n# result = sort_numbers('three one five')\n# print(result)  # Output: 'one three five'\n", "passed": true, "pass": true, "pass_num": 10, "round": 976, "mutate_method": "add_1_sentence_at_end", "parent_index": 139}
