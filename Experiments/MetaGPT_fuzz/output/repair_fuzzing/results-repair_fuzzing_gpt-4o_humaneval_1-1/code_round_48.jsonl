{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "def monotonic(l: list):\t\n'''Return True if list elements consistently increase or consistently decrease. This means that for a list to be monotonic, the elements must either steadily rise or steadily fall.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "def monotonic(l: list):\t\n'''List elements are monotonically increasing or decreasing if each element is greater or equal to its predecessor or lesser or equal to its predecessor. Return True if list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([])\n    True\n    >>> monotonic([3, 3, 3])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = False\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            increasing = True\n        elif l[i] < l[i - 1]:\n            decreasing = True\n\n        if increasing and decreasing:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonically increasing or decreasing.\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        # A list with zero or one element is trivially monotonic\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Check if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([])\n    True\n    >>> monotonic([3, 3, 3])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = False\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            increasing = True\n        elif l[i] < l[i - 1]:\n            decreasing = True\n\n        if increasing and decreasing:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(l) <= 1:\n        return True\n\n    # Initialize flags for non-decreasing and non-increasing\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    # Iterate through the list and compare each element with the next one\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            is_non_increasing = False\n        if l[i] > l[i + 1]:\n            is_non_decreasing = False\n\n        # If both flags are false, the list is not monotonic\n        if not is_non_decreasing and not is_non_increasing:\n            return False\n\n    # If the iteration completes without both flags being false simultaneously, return True\n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic.\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            is_non_decreasing = False\n        if l[i] > l[i - 1]:\n            is_non_increasing = False\n\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic.\n    A list is considered monotonic if it is either entirely non-increasing or non-decreasing.\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([])\n    True\n    >>> monotonic([3, 3, 3])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            is_non_decreasing = False\n        if l[i] < l[i + 1]:\n            is_non_increasing = False\n\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Check if the list is monotonically increasing or decreasing.\n\n    Parameters:\n    l (list): A list of comparable elements (e.g., numbers).\n\n    Returns:\n    bool: True if the list is monotonically increasing or decreasing, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            is_decreasing = False\n        elif l[i] < l[i - 1]:\n            is_increasing = False\n\n    return is_increasing or is_decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-decreasing or non-increasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    if len(l) <= 1:\n        # An empty list or a single-element list is trivially monotonic\n        return True\n\n    # Initialize flags for non-decreasing and non-increasing\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    # Iterate through the list from the second element to the end\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            # If current element is greater than the previous one, it's not non-increasing\n            is_non_increasing = False\n        if l[i] < l[i - 1]:\n            # If current element is less than the previous one, it's not non-decreasing\n            is_non_decreasing = False\n\n    # The list is monotonic if it is either non-decreasing or non-increasing\n    return is_non_decreasing or is_non_increasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either increasing or decreasing).\n\n    Parameters:\n    l (list): A list of comparable elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([3, 3, 3])\n    True\n    >>> monotonic([])\n    True\n    >>> monotonic([5])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            is_decreasing = False\n        if l[i] < l[i - 1]:\n            is_increasing = False\n\n    return is_increasing or is_decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of numeric elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True  # An empty list is trivially monotonic\n\n    increasing = True\n    decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing\n"], "plans": ["requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as lists with repeated elements and empty lists. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic function to check list order\n- Optimize function for large list performance\n- Include comprehensive documentation with examples\n- Handle edge cases like empty lists and repeated elements\n- Ensure compatibility with Python's list data type\nWe will implement a function that checks if a list is monotonic by iterating through the list once, comparing each element with the next. This approach ensures optimal performance for large datasets. We will handle edge cases such as empty lists and lists with repeated elements by defining clear rules: an empty list or a list with all identical elements is considered monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: This means that the list elements should either consistently increase or consistently decrease. A list is considered monotonically increasing if each element is greater than or equal to the previous one, and monotonically decreasing if each element is less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True as it is trivially monotonic.\n    2. Initialize two flags: one for increasing and one for decreasing.\n    3. Iterate through the list from the second element to the end.\n    4. Compare each element with the previous one:\n       - If an element is greater than the previous, set the increasing flag to True.\n       - If an element is less than the previous, set the decreasing flag to True.\n    5. If both flags are True, return False as the list is neither strictly increasing nor decreasing.\n    6. If only one flag is True, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic by definition.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list with all identical elements is considered monotonic as it does not violate increasing or decreasing order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as monotonic.\n", "requirement analysis:\nThe function should determine if a list is either entirely non-increasing or non-decreasing. It should handle edge cases such as empty lists or lists with a single element. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement the monotonicity check function\n- Optimize the function for large lists\n- Handle edge cases like empty or single-element lists\n- Provide detailed documentation and examples\n- Include unit tests for various scenarios\nWe will implement a function to check monotonicity using simple Python loops to ensure efficiency and handle edge cases. We will avoid using external libraries to keep the function lightweight and easy to integrate. The function will be optimized for large lists by minimizing the number of comparisons.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: This means that the list elements should either consistently increase or consistently decrease without any fluctuations in between.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize two flags, `increasing` and `decreasing`, both set to True.\n    2. Iterate through the list from the first element to the second-to-last element.\n    3. For each pair of consecutive elements, check if the current element is greater than the next element. If true, set `increasing` to False.\n    4. Check if the current element is less than the next element. If true, set `decreasing` to False.\n    5. After the loop, return True if either `increasing` or `decreasing` is still True, indicating monotonicity.\n\n# [edge case] \n    monotonic([1]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare.\n    \n    monotonic([1, 1, 1]) = True\n    Explanation: A list with all identical elements is considered monotonic as it neither increases nor decreases.\n    \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: The list is monotonically increasing even though there are repeated elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking consecutive elements will naturally handle these scenarios.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, either increasing or decreasing. It should handle edge cases such as empty lists and lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic function to check for increasing or decreasing sequences.\n- Optimize function for performance with large lists.\n- Include comprehensive documentation and examples.\n- Handle edge cases like empty lists and lists with identical elements.\n- Ensure compatibility with different Python versions.\nWe will implement a function that checks if a list is monotonic by iterating through the list once, comparing each element with the next. This approach ensures optimal performance for large datasets. We will handle edge cases such as empty lists and lists with identical elements by considering them as monotonic. The function will be simple and efficient, without the need for additional libraries, ensuring compatibility across different Python versions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: This means that the elements in the list should either consistently increase or consistently decrease. A list is considered monotonically increasing if each element is greater than or equal to the previous one, and monotonically decreasing if each element is less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True as it is trivially monotonic.\n    2. Initialize two flags: `increasing` and `decreasing`.\n    3. Iterate through the list from the second element to the end:\n       - If the current element is greater than the previous one, set `increasing` to True.\n       - If the current element is less than the previous one, set `decreasing` to True.\n    4. After the loop, if both `increasing` and `decreasing` are True, return False (the list is not monotonic).\n    5. Otherwise, return True (the list is monotonic).\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare against.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: All elements are equal, so the list is both monotonically increasing and decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as monotonic.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, meaning it should consistently increase or decrease. It should handle edge cases such as empty lists or lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic function to check list consistency.\n- Optimize function for performance with large lists.\n- Provide comprehensive documentation and examples.\n- Include edge case handling for empty or identical element lists.\n- Ensure compatibility with different Python versions.\nWe will implement a function named 'monotonic' that checks if a list is either entirely non-increasing or non-decreasing. The function will handle edge cases such as empty lists and lists with identical elements. We will use Python's built-in capabilities to ensure optimal performance without the need for additional libraries, as this task is simple enough to not require external dependencies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, 'monotonic' refers to a sequence where the elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element, in which case it is trivially monotonic.\n    2. Initialize two flags: one for non-decreasing and one for non-increasing.\n    3. Iterate through the list and compare each element with the next one.\n    4. Update the flags based on whether the current element is less than or greater than the next element.\n    5. If both flags are true at any point, return False as the list is not monotonic.\n    6. If the iteration completes without both flags being true simultaneously, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A list with a single element is trivially monotonic as there are no elements to compare.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered monotonic as it neither increases nor decreases.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the length of the list and handling lists with identical elements.\n", "requirement analysis:\nThe function should determine if a list is monotonic by checking if it is either entirely non-increasing or non-decreasing. It should handle edge cases such as empty lists or lists with a single element efficiently.\nrequirement pool:\n- Implement the monotonic function to check for non-increasing or non-decreasing order.\n- Optimize the function for performance with large lists.\n- Include comprehensive test cases in the documentation.\n- Provide examples of usage in different scenarios.\n- Ensure compatibility with Python 3.x versions.\nWe will implement a simple function using Python's built-in capabilities to check if a list is monotonic. The function will iterate through the list to determine if it is either non-increasing or non-decreasing. This approach ensures compatibility with Python 3.x versions and optimizes performance for large lists by avoiding unnecessary library overhead.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, 'monotonic' means that the list elements must either consistently increase or consistently decrease. A monotonic list does not change direction in terms of increasing or decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'consistently': means that the list elements must steadily rise or steadily fall without any change in direction.\n\n# [code logic]\n    1. Check if the list is non-decreasing by iterating through the list and ensuring each element is greater than or equal to the previous element.\n    2. Check if the list is non-increasing by iterating through the list and ensuring each element is less than or equal to the previous element.\n    3. Return True if either condition is met, otherwise return False.\n\n# [edge case] \n    monotonic([1]) = True\n    Explanation: A single-element list is trivially monotonic as there are no changes in direction.\n    \n    monotonic([1, 1, 1]) = True\n    Explanation: A list with all identical elements is considered monotonic as it does not change direction.\n    \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: The list is non-decreasing as each element is greater than or equal to the previous one.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking non-decreasing and non-increasing conditions will naturally handle these cases.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, meaning it should check if the list elements are either consistently increasing or decreasing. It should handle edge cases such as empty lists or lists with identical elements. Performance optimization is crucial for handling large lists efficiently.\nrequirement pool:\n- Implement monotonic function to check list order\n- Optimize function for large list performance\n- Provide comprehensive documentation and examples\n- Include edge case handling for empty or identical element lists\n- Ensure compatibility with Python's list data type\nWe will implement a simple function to determine if a list is monotonic by checking if it is either entirely non-increasing or non-decreasing. We will use Python's built-in capabilities to ensure compatibility and performance. The function will handle edge cases such as empty lists and lists with identical elements, considering them as monotonic. We will provide comprehensive documentation and examples to ensure ease of use.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonic'\n    Explanation: In the requirement, 'monotonic' refers to a sequence that is either entirely non-increasing or non-decreasing. This means the elements must consistently rise or fall without any fluctuations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element; if so, return True as it is trivially monotonic.\n    2. Initialize two flags: one for non-decreasing and one for non-increasing.\n    3. Iterate through the list and compare each element with the next one:\n       - If an element is greater than the next, set the non-decreasing flag to False.\n       - If an element is less than the next, set the non-increasing flag to False.\n    4. After iteration, return True if either flag remains True, indicating monotonicity.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonic as there are no elements to disrupt the sequence.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic since there are no other elements to compare.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: A list with identical elements is considered monotonic as it neither increases nor decreases.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements as monotonic.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonically increasing or decreasing. It should handle edge cases such as empty lists and lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement monotonic function to check list order\n- Optimize function for performance with large lists\n- Provide comprehensive documentation and examples\n- Ensure compatibility with various Python versions\n- Include error handling for invalid inputs\nWe will implement a simple function to check if a list is monotonically increasing or decreasing. The function will iterate through the list once, making it efficient for large datasets. We will use Python's built-in capabilities to keep the implementation straightforward and easy to integrate. The function will handle edge cases such as empty lists and lists with identical elements. We will provide comprehensive documentation and examples to ensure ease of use.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: This means that the list elements should either consistently increase or decrease. For increasing, each element should be greater than or equal to the previous one. For decreasing, each element should be less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    'greater or equal to': This indicates that for a list to be monotonically increasing, each element must be greater than or equal to its predecessor.\n    'lesser or equal to': This indicates that for a list to be monotonically decreasing, each element must be less than or equal to its predecessor.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element; if so, return True as it is trivially monotonic.\n    2. Initialize two flags: one for checking increasing order and another for decreasing order.\n    3. Iterate through the list:\n        - Compare each element with its predecessor.\n        - If an element is greater than its predecessor, set the decreasing flag to False.\n        - If an element is less than its predecessor, set the increasing flag to False.\n    4. After iteration, return True if either the increasing or decreasing flag is still True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: All elements are equal, satisfying both increasing and decreasing conditions.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers empty lists and lists with identical elements.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, handling both increasing and decreasing sequences. It should be optimized for performance, especially with large datasets, and include comprehensive documentation for ease of use.\nrequirement pool:\n- Implement monotonic sequence detection\n- Optimize for large list performance\n- Provide clear documentation\n- Include edge case handling\n- Ensure compatibility with Python 3.x\nWe will implement a function to check if a list is monotonic using Python's built-in capabilities. The function will iterate through the list to determine if it is either entirely non-decreasing or non-increasing. This approach ensures simplicity and efficiency without the need for external libraries, making it suitable for handling large lists. Comprehensive documentation will be provided to explain the function's usage and edge cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: This means that the list elements should either consistently increase or decrease. In a monotonically increasing list, each element is greater than or equal to the previous one. In a monotonically decreasing list, each element is less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    'greater or equal to': This indicates that each element in a monotonically increasing list should be greater than or equal to its predecessor.\n    'lesser or equal to': This indicates that each element in a monotonically decreasing list should be less than or equal to its predecessor.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True since such lists are trivially monotonic.\n    2. Initialize two flags: one for checking if the list is non-decreasing and another for non-increasing.\n    3. Iterate through the list from the second element to the end:\n        - If the current element is greater than the previous one, set the non-increasing flag to False.\n        - If the current element is less than the previous one, set the non-decreasing flag to False.\n    4. After iterating through the list, return True if either of the flags is still True, indicating that the list is monotonic.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare it with.\n    \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are equal, so the list is both non-decreasing and non-increasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking if the list is empty or has only one element and by using flags to determine monotonicity.\n", "requirement analysis:\nThe function should accurately determine if a list is monotonic, handling both increasing and decreasing sequences. It should be optimized for performance, especially with large datasets, and provide clear documentation for ease of use.\nrequirement pool:\n- Implement monotonic sequence detection\n- Optimize for large list performance\n- Ensure clear documentation\n- Include edge case handling\n- Provide examples in documentation\nWe will implement a function to check if a list is monotonic using Python's built-in capabilities for simplicity and efficiency. The function will iterate through the list once to determine if it is either monotonically increasing or decreasing, ensuring optimal performance for large datasets. We will provide clear documentation with examples and handle edge cases, including lists with repeated elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: This means that the list elements should either consistently increase or decrease. For increasing, each element should be greater than or equal to the previous one. For decreasing, each element should be less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    'greater or equal to': This indicates that for a list to be monotonically increasing, each element must be greater than or equal to its predecessor.\n    'lesser or equal to': This indicates that for a list to be monotonically decreasing, each element must be less than or equal to its predecessor.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the list is empty or has only one element. If so, return True as it is trivially monotonic.\n    2. Initialize two flags: one for checking increasing order and another for decreasing order.\n    3. Iterate through the list from the second element to the end:\n        - If the current element is greater than the previous one, set the decreasing flag to False.\n        - If the current element is less than the previous one, set the increasing flag to False.\n    4. After the loop, if either the increasing or decreasing flag is still True, return True. Otherwise, return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is trivially monotonic as there are no elements to compare.\n    \n    monotonic([5]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare it with.\n    \n    monotonic([3, 3, 3]) = True\n    Explanation: All elements are equal, so the list is both monotonically increasing and decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking if the list is empty or has only one element and by allowing equal elements in both increasing and decreasing checks.\n", "requirement analysis:\nThe function should efficiently determine if a list is monotonic, handling both increasing and decreasing sequences. It should be easy to use and integrate into existing Python projects without additional dependencies.\nrequirement pool:\n- Implement the monotonic function to check for increasing or decreasing order\n- Optimize the function for large datasets\n- Include comprehensive test cases\n- Provide detailed documentation with examples\n- Ensure compatibility with Python's list data structure\nWe will implement a simple Python function that checks if a list is monotonic by iterating through the list once, comparing each element with the next. This approach ensures efficiency, especially for large datasets, and avoids the overhead of additional libraries. The function will handle numeric lists, as the requirement for non-numeric data types is unclear.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: This means that the list elements should either consistently increase or consistently decrease without any fluctuations in between.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize two flags, `increasing` and `decreasing`, both set to `True`.\n    2. Iterate through the list from the first element to the second-to-last element.\n    3. For each element, compare it with the next element:\n        - If the current element is greater than the next, set `increasing` to `False`.\n        - If the current element is less than the next, set `decreasing` to `False`.\n    4. After the loop, return `True` if either `increasing` or `decreasing` is still `True`, otherwise return `False`.\n\n# [edge case] \n    monotonic([1]) = True\n    Explanation: A single-element list is trivially monotonic as there are no other elements to compare.\n    \n    monotonic([1, 1, 1]) = True\n    Explanation: A list where all elements are equal is considered monotonic as it does not violate increasing or decreasing order.\n    \n    monotonic([1, 2, 2, 3]) = True\n    Explanation: The list is monotonically increasing even though there are repeated elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking increasing and decreasing flags will naturally handle these scenarios.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "completion": "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    \"\"\"\n    Determine if the list is monotonic (either entirely non-increasing or non-decreasing).\n\n    Parameters:\n    l (list): A list of numeric elements.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True  # An empty list is trivially monotonic\n\n    increasing = True\n    decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "passed": true, "pass": true, "pass_num": 10, "round": 48, "mutate_method": "condense_two2one", "parent_index": 48}
