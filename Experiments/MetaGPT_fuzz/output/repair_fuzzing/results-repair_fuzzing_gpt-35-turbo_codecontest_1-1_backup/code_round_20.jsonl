{"name": "1606_C. Banknotes", "description": "In Berland, n different types of banknotes are used. Banknotes of the i-th type have denomination 10^{a_i} burles (burles are the currency used in Berland); the denomination of banknotes of the first type is exactly 1.\n\nLet's denote f(s) as the minimum number of banknotes required to represent exactly s burles. For example, if the denominations of banknotes used in Berland are 1, 10 and 100, then f(59) = 14: 9 banknotes with denomination of 1 burle and 5 banknotes with denomination of 10 burles can be used to represent exactly 9 \u22c5 1 + 5 \u22c5 10 = 59 burles, and there's no way to do it with fewer banknotes.\n\nFor a given integer k, find the minimum positive number of burles s that cannot be represented with k or fewer banknotes (that is, f(s) > k).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 number of test cases.\n\nThe first line of each test case contains two integers n and k (1 \u2264 n \u2264 10; 1 \u2264 k \u2264 10^9).\n\nThe next line contains n integers a_1, a_2, ..., a_n (0 = a_1 < a_2 < ... < a_n \u2264 9).\n\nOutput\n\nFor each test case, print one integer \u2014 the minimum positive number of burles s that cannot be represented with k or fewer banknotes.\n\nExample\n\nInput\n\n\n4\n3 13\n0 1 2\n2 777\n0 4\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n\n\nOutput\n\n\n59\n778\n148999\n999999920999999999", "tags": ["greedy", "number theory"], "difficulty": 9, "id": 1606, "sample_io": [{"input": "4\n3 13\n0 1 2\n2 777\n0 4\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n778\n148999\n999999920999999999\n"]}], "test_list": [{"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n148999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 2\n2 777\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n67999\n148999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 1272\n0 4\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n1273\n148999\n999999920999999999\n"]}, {"input": "4\n3 7\n0 1 4\n2 777\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["8\n67999\n148999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 60\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n529\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 4\n3 235\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n778\n128999\n999999920999999999\n"]}, {"input": "4\n3 15\n0 1 2\n2 777\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["79\n67999\n148999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 4\n2 777\n0 1\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n7699\n148999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 1071\n0 4\n3 235\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n1072\n128999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 2 4\n2 777\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["15\n67999\n148999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 2\n2 777\n0 2\n3 255\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n67999\n23899\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 4\n2 777\n0 1\n3 456\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n7699\n349999\n999999920999999999\n"]}, {"input": "4\n3 19\n0 1 2\n2 777\n0 4\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["299\n778\n148999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 4\n2 777\n0 2\n3 192\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n67999\n85999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 650\n0 2\n3 60\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n55299\n529\n999999920999999999\n"]}, {"input": "4\n3 27\n0 1 2\n2 777\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["1099\n67999\n148999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 2 4\n2 651\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["15\n55399\n148999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 8\n2 777\n0 2\n3 255\n0 1 6\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n67999\n2479\n999999920999999999\n"]}, {"input": "4\n3 27\n0 1 2\n2 777\n0 4\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["1099\n778\n148999\n999999920999999999\n"]}, {"input": "4\n3 27\n0 1 2\n2 777\n0 4\n3 406\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["1099\n778\n299999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 5\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n778\n148999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 4\n2 1063\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n96599\n148999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 60\n0 1 3\n10 0000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n529\n1\n"]}, {"input": "4\n3 1\n0 1 4\n2 777\n0 1\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["2\n7699\n148999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 2 4\n2 651\n0 2\n3 96\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["15\n55399\n889\n999999920999999999\n"]}, {"input": "4\n3 34\n0 1 2\n2 777\n0 4\n3 406\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["1799\n778\n299999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 955\n0 5\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n956\n148999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 768\n0 5\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n769\n148999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 331\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n224999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 2\n2 777\n0 2\n3 375\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n67999\n35899\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 4\n2 777\n0 2\n3 192\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n67999\n17599\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 650\n0 1\n3 60\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n6429\n529\n999999920999999999\n"]}, {"input": "4\n3 14\n0 2 4\n2 55\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["15\n56\n148999\n999999920999999999\n"]}, {"input": "4\n3 27\n0 1 4\n2 777\n0 4\n3 406\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["199\n778\n299999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 60\n0 1 3\n10 0000000010\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n529\n29\n"]}, {"input": "4\n3 13\n0 1 2\n2 768\n0 5\n3 128\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n769\n21999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 572\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n465999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 5\n2 857\n0 1\n3 456\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n8499\n349999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 4\n2 1121\n0 2\n3 192\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n102399\n17599\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 60\n0 1 3\n10 1000000010\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n529\n999999930999999999\n"]}, {"input": "4\n3 14\n0 1 5\n2 857\n0 1\n3 456\n0 1 5\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n8499\n4489\n999999920999999999\n"]}, {"input": "4\n3 8\n0 1 5\n2 857\n0 1\n3 456\n0 1 5\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["9\n8499\n4489\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 2\n2 667\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n56999\n148999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 2 4\n2 777\n0 1\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["15\n7699\n148999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 4\n2 777\n0 2\n3 456\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n67999\n349999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 60\n0 1 2\n10 0000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n4399\n1\n"]}, {"input": "4\n3 14\n0 2 4\n2 651\n0 2\n3 108\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["15\n55399\n1999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 336\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n229999\n999999920999999999\n"]}, {"input": "4\n3 1\n0 1 2\n2 777\n0 2\n3 60\n0 1 3\n10 0000000010\n0 1 2 3 4 5 6 7 8 9\n", "output": ["2\n67999\n529\n29\n"]}, {"input": "4\n3 13\n0 1 2\n2 768\n0 5\n3 232\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n769\n125999\n999999920999999999\n"]}, {"input": "4\n3 7\n0 1 3\n2 777\n0 2\n3 293\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["8\n67999\n186999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 53\n0 1 2\n10 0000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n3699\n1\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 545\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n438999\n999999920999999999\n"]}, {"input": "4\n3 1\n0 1 2\n2 777\n0 2\n3 60\n0 1 3\n10 0000000011\n0 1 2 3 4 5 6 7 8 9\n", "output": ["2\n67999\n529\n39\n"]}, {"input": "4\n3 21\n0 1 2\n2 768\n0 5\n3 232\n0 2 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["499\n769\n125999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 60\n0 2 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n61\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 4\n2 777\n0 2\n3 471\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n364999\n999999920999999999\n"]}, {"input": "4\n3 15\n0 1 2\n2 777\n0 3\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["79\n778\n148999\n999999920999999999\n"]}, {"input": "4\n3 16\n0 1 2\n2 777\n0 2\n3 255\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["89\n67999\n23899\n999999920999999999\n"]}, {"input": "4\n3 22\n0 1 8\n2 777\n0 2\n3 255\n0 1 6\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["149\n67999\n2479\n999999920999999999\n"]}, {"input": "4\n3 14\n0 2 4\n2 651\n0 2\n3 96\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["15\n55399\n7999\n999999920999999999\n"]}, {"input": "4\n3 32\n0 1 2\n2 777\n0 4\n3 406\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["1599\n778\n299999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 331\n0 1 6\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n3239\n999999920999999999\n"]}, {"input": "4\n3 7\n0 1 2\n2 777\n0 2\n3 375\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["8\n67999\n35899\n999999920999999999\n"]}, {"input": "4\n3 22\n0 1 4\n2 1121\n0 2\n3 192\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["149\n102399\n17599\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 4\n2 223\n0 2\n3 456\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n12599\n349999\n999999920999999999\n"]}, {"input": "4\n3 2\n0 1 2\n2 777\n0 2\n3 60\n0 1 3\n10 0000000010\n0 1 2 3 4 5 6 7 8 9\n", "output": ["3\n67999\n529\n29\n"]}, {"input": "4\n3 18\n0 1 2\n2 777\n0 2\n3 545\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["199\n67999\n438999\n999999920999999999\n"]}, {"input": "4\n3 22\n0 1 4\n2 117\n0 2\n3 192\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["149\n1999\n17599\n999999920999999999\n"]}, {"input": "4\n3 17\n0 1 2\n2 777\n0 2\n3 545\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["99\n67999\n438999\n999999920999999999\n"]}, {"input": "4\n3 17\n0 1 3\n2 287\n0 2\n3 545\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["99\n18999\n438999\n999999920999999999\n"]}, {"input": "4\n3 11\n0 1 2\n2 777\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["39\n67999\n148999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 8\n2 777\n0 2\n3 255\n0 2 6\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n67999\n15799\n999999920999999999\n"]}, {"input": "4\n3 14\n0 2 4\n2 73\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["15\n74\n148999\n999999920999999999\n"]}, {"input": "4\n3 12\n0 1 2\n2 777\n0 2\n3 572\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["49\n67999\n465999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 5\n2 25\n0 1\n3 456\n0 1 5\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n179\n4489\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 2\n2 667\n0 2\n3 479\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n56999\n372999\n999999920999999999\n"]}, {"input": "4\n3 7\n0 1 3\n2 1392\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["8\n129499\n148999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 4\n2 777\n0 2\n3 456\n0 1 5\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n67999\n4489\n999999920999999999\n"]}, {"input": "4\n3 27\n0 1 2\n2 1028\n0 4\n3 255\n0 2 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["1099\n1029\n148999\n999999920999999999\n"]}, {"input": "4\n3 2\n0 1 4\n2 777\n0 1\n3 255\n0 2 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["3\n7699\n148999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 2 4\n2 651\n0 2\n3 108\n0 1 6\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["15\n55399\n1009\n999999920999999999\n"]}, {"input": "4\n3 21\n0 1 2\n2 768\n0 5\n3 217\n0 2 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["499\n769\n110999\n999999920999999999\n"]}, {"input": "4\n3 22\n0 1 8\n2 777\n0 2\n3 255\n0 2 6\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["149\n67999\n15799\n999999920999999999\n"]}, {"input": "4\n3 2\n0 1 2\n2 983\n0 2\n3 60\n0 1 3\n10 0000000010\n0 1 2 3 4 5 6 7 8 9\n", "output": ["3\n88599\n529\n29\n"]}, {"input": "4\n3 2\n0 1 2\n2 235\n0 2\n3 60\n0 1 3\n10 0000000010\n0 1 2 3 4 5 6 7 8 9\n", "output": ["3\n13799\n529\n29\n"]}, {"input": "4\n3 7\n0 1 4\n2 777\n0 1\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["8\n7699\n148999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 4\n3 235\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n778\n21899\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 2\n2 777\n0 2\n3 139\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n67999\n12299\n999999920999999999\n"]}, {"input": "4\n3 40\n0 1 2\n2 777\n0 4\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["2399\n778\n148999\n999999920999999999\n"]}, {"input": "4\n3 20\n0 1 2\n2 777\n0 5\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["399\n778\n148999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 955\n0 5\n3 255\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n956\n23899\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 768\n0 5\n3 206\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n769\n99999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 5\n2 777\n0 1\n3 456\n0 1 4\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n7699\n4489\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 60\n0 1 3\n10 0000100010\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n529\n99930999999999\n"]}, {"input": "4\n3 21\n0 1 5\n2 857\n0 1\n3 456\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["139\n8499\n349999\n999999920999999999\n"]}, {"input": "4\n3 16\n0 1 2\n2 667\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["89\n56999\n148999\n999999920999999999\n"]}, {"input": "4\n3 16\n0 1 4\n2 777\n0 2\n3 456\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["89\n67999\n349999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 284\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n177999\n999999920999999999\n"]}, {"input": "4\n3 1\n0 1 2\n2 777\n0 2\n3 60\n0 1 3\n10 0000000110\n0 1 2 3 4 5 6 7 8 9\n", "output": ["2\n67999\n529\n30999999999\n"]}, {"input": "4\n3 17\n0 1 2\n2 768\n0 5\n3 232\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["99\n769\n125999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 3\n3 53\n0 1 2\n10 0000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n778\n3699\n1\n"]}, {"input": "4\n3 22\n0 1 2\n2 777\n0 2\n3 545\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["599\n67999\n438999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 2 4\n2 651\n0 2\n3 117\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["15\n55399\n10099\n999999920999999999\n"]}, {"input": "4\n3 7\n0 1 2\n2 1215\n0 2\n3 375\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["8\n111799\n35899\n999999920999999999\n"]}, {"input": "4\n3 17\n0 1 3\n2 287\n0 2\n3 276\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["99\n18999\n169999\n999999920999999999\n"]}, {"input": "4\n3 2\n0 1 5\n2 777\n0 1\n3 456\n0 2 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["3\n7699\n349999\n999999920999999999\n"]}, {"input": "4\n3 12\n0 1 2\n2 777\n0 2\n3 56\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["49\n67999\n489\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 2\n2 667\n0 2\n3 479\n0 1 3\n10 1000000001\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n56999\n372999\n999999921999999999\n"]}, {"input": "4\n3 20\n0 1 2\n2 777\n0 4\n3 235\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["399\n778\n21899\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 1\n3 60\n0 1 3\n10 0000100010\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n7699\n529\n99930999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 4\n3 284\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n778\n177999\n999999920999999999\n"]}, {"input": "4\n3 7\n0 1 2\n2 1215\n0 2\n3 266\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["8\n111799\n24999\n999999920999999999\n"]}, {"input": "4\n3 12\n0 1 2\n2 777\n0 2\n3 44\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["49\n67999\n369\n999999920999999999\n"]}, {"input": "4\n3 15\n0 1 2\n2 777\n0 2\n3 255\n0 1 3\n10 0000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["79\n67999\n148999\n1\n"]}, {"input": "4\n3 14\n0 1 4\n2 777\n0 1\n3 142\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n7699\n35999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 1149\n0 4\n3 235\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n1150\n128999\n999999920999999999\n"]}, {"input": "4\n3 15\n0 1 2\n2 777\n0 2\n3 255\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["79\n67999\n23899\n999999920999999999\n"]}, {"input": "4\n3 27\n0 1 2\n2 777\n0 4\n3 217\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["1099\n778\n110999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 1131\n0 2\n3 331\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n103399\n224999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 4\n2 777\n0 2\n3 328\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n67999\n31199\n999999920999999999\n"]}, {"input": "4\n3 20\n0 1 4\n2 777\n0 4\n3 406\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["129\n778\n299999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 572\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n55599\n999999920999999999\n"]}, {"input": "4\n3 8\n0 1 5\n2 857\n0 1\n3 456\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["9\n8499\n349999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 4\n2 1949\n0 2\n3 192\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n185199\n17599\n999999920999999999\n"]}, {"input": "4\n3 27\n0 1 2\n2 1250\n0 4\n3 255\n0 2 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["1099\n1251\n148999\n999999920999999999\n"]}, {"input": "4\n3 7\n0 1 3\n2 777\n0 2\n3 367\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["8\n67999\n260999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 53\n0 1 2\n10 0000000010\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n3699\n29\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 4\n3 545\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n778\n438999\n999999920999999999\n"]}, {"input": "4\n3 15\n0 1 2\n2 777\n0 3\n3 255\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["79\n778\n23899\n999999920999999999\n"]}, {"input": "4\n3 19\n0 1 2\n2 777\n0 4\n3 406\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["299\n778\n299999\n999999920999999999\n"]}, {"input": "4\n3 22\n0 1 4\n2 117\n0 1\n3 192\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["149\n1099\n17599\n999999920999999999\n"]}, {"input": "4\n3 11\n0 1 2\n2 1034\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["39\n93699\n148999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 4\n2 777\n0 3\n3 456\n0 1 5\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n778\n4489\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 768\n0 5\n3 206\n0 1 6\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n769\n1989\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 4\n3 60\n0 1 3\n10 0000100010\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n778\n529\n99930999999999\n"]}, {"input": "4\n3 16\n0 1 2\n2 1224\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["89\n112699\n148999\n999999920999999999\n"]}, {"input": "4\n3 11\n0 1 2\n2 768\n0 5\n3 232\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["39\n769\n125999\n999999920999999999\n"]}, {"input": "4\n3 19\n0 1 2\n2 777\n0 3\n3 53\n0 1 2\n10 0000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["299\n778\n3699\n1\n"]}, {"input": "4\n3 18\n0 2 4\n2 651\n0 2\n3 117\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["19\n55399\n10099\n999999920999999999\n"]}, {"input": "4\n3 1\n0 1 5\n2 777\n0 1\n3 456\n0 2 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["2\n7699\n349999\n999999920999999999\n"]}, {"input": "4\n3 40\n0 1 4\n2 777\n0 7\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["329\n778\n148999\n999999920999999999\n"]}, {"input": "4\n3 15\n0 1 2\n2 777\n0 2\n3 255\n0 1 3\n10 0000000010\n0 1 2 3 4 5 6 7 8 9\n", "output": ["79\n67999\n148999\n29\n"]}, {"input": "4\n3 19\n0 1 2\n2 777\n0 2\n3 572\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["299\n67999\n55599\n999999920999999999\n"]}, {"input": "4\n3 19\n0 1 4\n2 777\n0 4\n3 406\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["119\n778\n299999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 2 3\n2 180\n0 2\n3 108\n0 1 6\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["15\n8299\n1009\n999999920999999999\n"]}, {"input": "4\n3 19\n0 1 2\n2 777\n0 3\n3 31\n0 1 2\n3 0000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["299\n778\n1499\n1\n"]}, {"input": "4\n3 14\n0 1 4\n2 777\n0 1\n3 255\n0 1 6\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n7699\n2479\n999999920999999999\n"]}, {"input": "4\n3 10\n0 1 2\n2 1071\n0 4\n3 235\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["29\n1072\n128999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 2 4\n2 777\n0 2\n3 421\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["15\n67999\n314999\n999999920999999999\n"]}, {"input": "4\n3 12\n0 1 2\n2 777\n0 2\n3 255\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["49\n67999\n23899\n999999920999999999\n"]}, {"input": "4\n3 34\n0 1 2\n2 777\n0 4\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["1799\n778\n148999\n999999920999999999\n"]}, {"input": "4\n3 27\n0 1 2\n2 777\n0 2\n3 255\n0 1 4\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["1099\n67999\n2479\n999999920999999999\n"]}, {"input": "4\n3 28\n0 1 2\n2 777\n0 4\n3 406\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["1199\n778\n299999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 1261\n0 5\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n1262\n148999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 60\n0 1 3\n10 0010000010\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n529\n9999930999999999\n"]}, {"input": "4\n3 9\n0 1 4\n2 1121\n0 2\n3 192\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["19\n102399\n17599\n999999920999999999\n"]}, {"input": "4\n3 7\n0 1 3\n2 777\n0 2\n3 386\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["8\n67999\n279999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 2\n3 545\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n52899\n999999920999999999\n"]}, {"input": "4\n3 1\n0 1 2\n2 1332\n0 2\n3 60\n0 1 3\n10 0000000011\n0 1 2 3 4 5 6 7 8 9\n", "output": ["2\n123499\n529\n39\n"]}, {"input": "4\n3 13\n0 1 2\n2 768\n0 5\n3 232\n0 2 4\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n769\n359999\n999999920999999999\n"]}, {"input": "4\n3 22\n0 1 8\n2 777\n0 2\n3 255\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["149\n67999\n23899\n999999920999999999\n"]}, {"input": "4\n3 14\n0 2 4\n2 651\n0 4\n3 96\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["15\n652\n7999\n999999920999999999\n"]}, {"input": "4\n3 22\n0 1 4\n2 1121\n0 2\n3 248\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["149\n102399\n23199\n999999920999999999\n"]}, {"input": "4\n3 8\n0 1 9\n2 857\n0 2\n3 456\n0 1 5\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["9\n75999\n4489\n999999920999999999\n"]}, {"input": "4\n3 0\n0 1 3\n2 1392\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["1\n129499\n148999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 4\n2 390\n0 2\n3 456\n0 1 5\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n29299\n4489\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 3\n2 777\n0 2\n3 301\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n67999\n28499\n999999920999999999\n"]}, {"input": "4\n3 21\n0 1 5\n2 857\n0 1\n3 574\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["139\n8499\n467999\n999999920999999999\n"]}, {"input": "4\n3 1\n0 1 2\n2 641\n0 2\n3 60\n0 1 3\n10 0000000110\n0 1 2 3 4 5 6 7 8 9\n", "output": ["2\n54399\n529\n30999999999\n"]}, {"input": "4\n3 7\n0 1 2\n2 777\n0 2\n3 545\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["8\n67999\n438999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 7\n2 318\n0 2\n3 255\n0 1 6\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n22099\n2479\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 1306\n0 4\n3 284\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n1307\n177999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 777\n0 7\n3 141\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n778\n34999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 1149\n0 4\n3 235\n0 1 3\n10 1000000010\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n1150\n128999\n999999930999999999\n"]}, {"input": "4\n3 8\n0 1 5\n2 857\n0 2\n3 456\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["9\n75999\n349999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 675\n0 4\n3 545\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n676\n438999\n999999920999999999\n"]}, {"input": "4\n3 16\n0 1 4\n2 117\n0 1\n3 192\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["89\n1099\n17599\n999999920999999999\n"]}, {"input": "4\n3 14\n0 2 3\n2 651\n0 4\n3 108\n0 1 6\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["15\n652\n1009\n999999920999999999\n"]}, {"input": "4\n3 8\n0 1 2\n2 768\n0 5\n3 206\n0 1 6\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["9\n769\n1989\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 403\n0 4\n3 60\n0 1 3\n10 0000100010\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n404\n529\n99930999999999\n"]}, {"input": "4\n3 27\n0 1 2\n2 777\n0 4\n3 255\n0 1 4\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["1099\n778\n2479\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 4\n2 777\n0 4\n3 336\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n778\n229999\n999999920999999999\n"]}, {"input": "4\n3 9\n0 1 2\n2 777\n0 2\n3 545\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["19\n67999\n52899\n999999920999999999\n"]}, {"input": "4\n3 22\n0 1 4\n2 1121\n0 2\n3 248\n0 1 4\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["149\n102399\n2409\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 3\n2 1014\n0 2\n3 301\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n91699\n28499\n999999920999999999\n"]}, {"input": "4\n3 1\n0 1 2\n2 641\n0 2\n3 60\n0 1 3\n10 0000010110\n0 1 2 3 4 5 6 7 8 9\n", "output": ["2\n54399\n529\n10030999999999\n"]}, {"input": "4\n3 14\n0 1 7\n2 318\n0 2\n3 58\n0 1 6\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n22099\n509\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 2\n2 1149\n0 4\n3 338\n0 1 3\n10 1000000010\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n1150\n231999\n999999930999999999\n"]}, {"input": "4\n3 14\n0 2 3\n2 266\n0 4\n3 108\n0 1 6\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["15\n267\n1009\n999999920999999999\n"]}, {"input": "4\n3 22\n0 1 2\n2 403\n0 4\n3 60\n0 1 3\n10 0000100010\n0 1 2 3 4 5 6 7 8 9\n", "output": ["599\n404\n529\n99930999999999\n"]}, {"input": "4\n3 13\n0 1 4\n2 1474\n0 4\n3 336\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n1475\n229999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 2 4\n2 1474\n0 4\n3 336\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["14\n1475\n229999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 4\n2 777\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n67999\n148999\n999999920999999999\n"]}, {"input": "4\n3 13\n0 1 4\n2 777\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["59\n67999\n148999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 8\n2 777\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n67999\n148999\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 4\n2 777\n0 2\n3 255\n0 1 2\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n67999\n23899\n999999920999999999\n"]}, {"input": "4\n3 14\n0 1 5\n2 777\n0 1\n3 456\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["69\n7699\n349999\n999999920999999999\n"]}, {"input": "4\n3 7\n0 1 3\n2 777\n0 2\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["8\n67999\n148999\n999999920999999999\n"]}, {"input": "4\n3 27\n0 1 2\n2 777\n0 4\n3 255\n0 2 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n", "output": ["1099\n778\n148999\n999999920999999999\n"]}], "task_id": "codecontest/94", "prompt": "In Berland, n distinct types of banknotes are utilized. Banknotes of the i-th type have denomination 10^{a_i} burles (burles are the currency used in Berland); the denomination of banknotes of the first type is exactly 1.\n\nLet's denote f(s) as the minimum number of banknotes required to represent exactly s burles. For example, if the denominations of banknotes used in Berland are 1, 10 and 100, then f(59) = 14. There would be 9 banknotes with denomination of 1 burle and 5 banknotes with denomination of 10 burles. These can be used to represent exactly 9 \u22c5 1 + 5 \u22c5 10 = 59 burles, and there's no way to do it with fewer banknotes.\n\nFor a given integer k, find the smallest positive number of burles s that cannot be represented with k or fewer banknotes (that is, f(s) > k).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 number of test cases.\n\nThe first line of each test case contains two integers n and k (1 \u2264 n \u2264 10; 1 \u2264 k \u2264 10^9).\n\nThe next line contains n integers a_1, a_2, ..., a_n (0 = a_1 < a_2 < ... < a_n \u2264 9).\n\nOutput\n\nFor each test case, print one integer \u2014 the minimum positive number of burles s that cannot be represented with k or fewer banknotes.\n\nExample\n\nInput\n\n\n4\n3 13\n0 1 2\n2 777\n0 4\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n\n\nOutput\n\n\n59\n778\n148999\n999999920999999999", "repair_prompt": ["In Berland, n distinct types of banknotes are utilized. Banknotes of the i-th type have denomination 10^{a_i} burles (burles are the currency used in Berland); the denomination of banknotes of the first type is exactly 1.\n\nLet's denote f(s) as the minimum number of banknotes required to represent exactly s burles. For example, if the denominations of banknotes used in Berland are 1, 10 and 100, then f(59) = 14. There would be 9 banknotes with denomination of 1 burle and 5 banknotes with denomination of 10 burles. These can be used to represent exactly 9 \u22c5 1 + 5 \u22c5 10 = 59 burles, and there's no way to do it with fewer banknotes.\n\nFor a given integer k, find the smallest positive number of burles s that cannot be represented with k or fewer banknotes (that is, f(s) > k).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 number of test cases.\n\nThe first line of each test case contains two integers n and k (1 \u2264 n \u2264 10; 1 \u2264 k \u2264 10^9).\n\nThe next line contains n integers a_1, a_2, ..., a_n (0 = a_1 < a_2 < ... < a_n \u2264 9).\n\nOutput\n\nFor each test case, print one integer \u2014 the minimum positive number of burles s that cannot be represented with k or fewer banknotes.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3 13\n0 1 2\n2 777\n0 4\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n\n\nOutput\n\n\n59\n778\n148999\n999999920999999999", "In Berland, n distinct types of banknotes are utilized. Banknotes of the i-th type have denomination 10^{a_i} burles (burles are the currency used in Berland); the denomination of banknotes of the first type is exactly 1. Let's denote f(s) as the minimum number of banknotes required to represent exactly s burles, considering the denominations mentioned. For example, if the denominations of banknotes used in Berland are 1, 10 and 100, then f(59) = 14. There would be 9 banknotes with denomination of 1 burle and 5 banknotes with denomination of 10 burles, which can be used to represent exactly 9 \u22c5 1 + 5 \u22c5 10 = 59 burles, and there's no way to do it with fewer banknotes. For a given integer k, find the smallest positive number of burles s that cannot be represented with k or fewer banknotes (that is, f(s) > k).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 number of test cases.\n\nThe first line of each test case contains two integers n and k (1 \u2264 n \u2264 10; 1 \u2264 k \u2264 10^9).\n\nThe next line contains n integers a_1, a_2, ..., a_n (0 = a_1 < a_2 < ... < a_n \u2264 9).\n\nOutput\n\nFor each test case, print one integer \u2014 the minimum positive number of burles s that cannot be represented with k or fewer banknotes.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3 13\n0 1 2\n2 777\n0 4\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n\n\nOutput\n\n\n59\n778\n148999\n999999920999999999", "In Berland, n distinct types of banknotes are utilized, and banknotes of the i-th type have denomination 10^{a_i} burles (burles are the currency used in Berland); the denomination of banknotes of the first type is exactly 1. Let's denote f(s) as the minimum number of banknotes required to represent exactly s burles, and for a given integer k, find the smallest positive number of burles s that cannot be represented with k or fewer banknotes (that is, f(s) > k).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 number of test cases.\n\nThe first line of each test case contains two integers n and k (1 \u2264 n \u2264 10; 1 \u2264 k \u2264 10^9).\n\nThe next line contains n integers a_1, a_2, ..., a_n (0 = a_1 < a_2 < ... < a_n \u2264 9).\n\nOutput\n\nFor each test case, print one integer \u2014 the minimum positive number of burles s that cannot be represented with k or fewer banknotes.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3 13\n0 1 2\n2 777\n0 4\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n\n\nOutput\n\n\n59\n778\n148999\n999999920999999999"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_unrepresentable_burles(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    def min_unrepresentable_burle(n: int, k: int, a: List[int]) -> int:\n        dp = [float('inf')] + [float('inf')] * k\n        for i in range(1, k+1):\n            for j in range(n):\n                if i - 10**a[j] >= 0:\n                    dp[i] = min(dp[i], dp[i - 10**a[j]] + 1)\n        for s in range(1, 10**9 + 1):\n            if dp[s] > k:\n                return s\n\n    results = []\n    for test_case in test_cases:\n        n, k, a = test_case\n        result = min_unrepresentable_burle(n, k, a)\n        results.append(result)\n\n    return results\n\n# Input interface\n\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        test_cases.append((n, k, a))\n\n    result = min_unrepresentable_burles(t, test_cases)\n    for res in result:\n        print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_unrepresented_burles(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    def calculate_min_burles(n: int, k: int, a: List[int]) -> int:\n        dp = [0] + [float('inf')] * (k + 1)\n        for i in range(1, k + 1):\n            for j in range(n):\n                if i - 10**a[j] >= 0:\n                    dp[i] = min(dp[i], dp[i - 10**a[j]] + 1)\n        for i in range(1, k + 1):\n            if dp[i] > k:\n                return i\n\n    results = []\n    for test_case in test_cases:\n        n, k, a = test_case\n        result = calculate_min_burles(n, k, a)\n        results.append(result)\n\n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    test_cases.append((n, k, a))\n\nresult = min_unrepresented_burles(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_unrepresented_burles(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    def calculate_min_burles(n: int, k: int, denominations: List[int]) -> int:\n        dp = [0] + [float('inf')] * (10**9 + 1)\n        for i in range(1, 10**9 + 1):\n            for a in denominations:\n                if i - 10**a >= 0:\n                    dp[i] = min(dp[i], dp[i - 10**a] + 1)\n            if dp[i] > k:\n                return i\n\n    results = []\n    for test_case in test_cases:\n        n, k, denominations = test_case\n        result = calculate_min_burles(n, k, denominations)\n        results.append(result)\n\n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, k = map(int, input().split())\n    denominations = list(map(int, input().split()))\n    test_cases.append((n, k, denominations))\n\nresult = min_unrepresented_burles(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_unrepresented_burles(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    def calculate_min_burles(n: int, k: int, denominations: List[int]) -> int:\n        dp = [0] + [float('inf')] * k\n        for i in range(1, k + 1):\n            for denom in denominations:\n                if i - denom >= 0:\n                    dp[i] = min(dp[i], dp[i - denom] + 1)\n        for s in range(1, 10**9 + 1):\n            if dp[s] > k:\n                return s\n\n    results = []\n    for test_case in test_cases:\n        n, k, denominations = test_case\n        result = calculate_min_burles(n, k, denominations)\n        results.append(result)\n\n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, k = map(int, input().split())\n    denominations = list(map(int, input().split()))\n    test_cases.append((n, k, denominations))\n\nresult = min_unrepresented_burles(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_unrepresented_burles(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    def f(s: int, denominations: List[int]) -> int:\n        dp = [float('inf')] * (s + 1)\n        dp[0] = 0\n        \n        for i in range(1, s + 1):\n            for denom in denominations:\n                if i - denom >= 0:\n                    dp[i] = min(dp[i], dp[i - denom] + 1)\n        \n        return dp[s]\n    \n    results = []\n    \n    for test_case in test_cases:\n        n, k, denominations = test_case\n        s = 1\n        while f(s, denominations) <= k:\n            s += 1\n        results.append(s)\n    \n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, k = map(int, input().split())\n    denominations = list(map(int, input().split()))\n    test_cases.append((n, k, denominations))\n\nresult = min_unrepresented_burles(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_unrepresented_burles(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    def calculate_min_burles(n: int, k: int, a: List[int]) -> int:\n        denominations = [10**i for i in a]\n        dp = [0] + [float('inf')] * k\n        \n        for i in range(1, k+1):\n            for denom in denominations:\n                if i - denom >= 0:\n                    dp[i] = min(dp[i], dp[i - denom] + 1)\n        \n        for s in range(1, 10**9+1):\n            if dp[s] > k:\n                return s\n        \n        return -1\n\n    results = []\n    for test_case in test_cases:\n        n, k, a = test_case\n        result = calculate_min_burles(n, k, a)\n        results.append(result)\n    \n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, k = map(int, input().split())\n    denominations = list(map(int, input().split()))\n    test_cases.append((n, k, denominations))\n\nresult = min_unrepresented_burles(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_unrepresented_burles(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    def calculate_min_burles(n: int, k: int, a: List[int]) -> int:\n        dp = [0] + [float('inf')] * (10**9)\n        for i in range(1, 10**9 + 1):\n            for j in range(n):\n                if i - 10**a[j] >= 0:\n                    dp[i] = min(dp[i], dp[i - 10**a[j]] + 1)\n        for i in range(1, 10**9 + 1):\n            if dp[i] > k:\n                return i\n        return 10**9 + 1\n\n    results = []\n    for test_case in test_cases:\n        n, k, a = test_case\n        result = calculate_min_burles(n, k, a)\n        results.append(result)\n\n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    test_cases.append((n, k, a))\n\nresult = min_unrepresented_burles(t, test_cases)\n\n# Output interface\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_unrepresented_burles(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    def min_unrepresented_burles_single(n: int, k: int, a: List[int]) -> int:\n        dp = [0] + [float('inf')] * (10**9)\n        for i in range(1, 10**9 + 1):\n            for j in range(n):\n                if i - 10**a[j] >= 0:\n                    dp[i] = min(dp[i], dp[i - 10**a[j]] + 1)\n        for s in range(1, 10**9 + 1):\n            if dp[s] > k:\n                return s\n\n    results = []\n    for test_case in test_cases:\n        n, k, a = test_case\n        results.append(min_unrepresented_burles_single(n, k, a))\n    \n    return results\n\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        test_cases.append((n, k, a))\n\n    result = min_unrepresented_burles(t, test_cases)\n    for res in result:\n        print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_unrepresented_burles(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    def calculate_min_burles(n: int, k: int, banknotes: List[int]) -> int:\n        dp = [0] + [float('inf')] * (10**9 + 1)\n        for j in range(n):\n            for i in range(1, 10**9 + 1):\n                if i - 10**banknotes[j] >= 0:\n                    dp[i] = min(dp[i], dp[i - 10**banknotes[j]] + 1)\n        for i in range(1, 10**9 + 1):\n            if dp[i] > k:\n                return i\n        return 10**9 + 1\n\n    results = []\n    for test_case in test_cases:\n        n, k, banknotes = test_case\n        result = calculate_min_burles(n, k, banknotes)\n        results.append(result)\n\n    return results\n\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, k = map(int, input().split())\n        banknotes = list(map(int, input().split()))\n        test_cases.append((n, k, banknotes))\n\n    result = min_unrepresented_burles(t, test_cases)\n    for res in result:\n        print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_unrepresented_burles(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    def calculate_min_burles(n: int, k: int, denominations: List[int]) -> int:\n        dp = [0] + [float('inf')] * k\n        for i in range(1, k+1):\n            for denom in denominations:\n                if i - denom >= 0:\n                    dp[i] = min(dp[i], dp[i - denom] + 1)\n        \n        for s in range(1, k+1):\n            if dp[s] > k:\n                return s\n        \n        return k+1\n\n    results = []\n    for n, k, denominations in test_cases:\n        result = calculate_min_burles(n, k, denominations)\n        results.append(result)\n    \n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, k = map(int, input().split())\n    denominations = list(map(int, input().split()))\n    test_cases.append((n, k, denominations))\n\nresult = min_unrepresented_burles(t, test_cases)\nfor res in result:\n    print(res)\n"], "plans": ["requirement pool:\n- Find the smallest positive number of burles s that cannot be represented with k or fewer banknotes\n- Handle multiple test cases efficiently\nWe will use dynamic programming to solve this problem efficiently by keeping track of the minimum number of banknotes required to represent each amount of burles up to a certain limit. We will then iterate through the amounts to find the smallest positive number of burles that cannot be represented with k or fewer banknotes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'banknotes', 'denomination', 'minimum number of banknotes required'\n    Explanation: The core concepts include the different types of banknotes with denominations and the minimum number of banknotes required to represent a certain amount of burles.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest positive': means the minimum positive number of burles that cannot be represented with k or fewer banknotes\n\n# [code logic]\n    We will use dynamic programming to keep track of the minimum number of banknotes required to represent each amount of burles up to a certain limit. Then, we will iterate through the amounts to find the smallest positive number of burles that cannot be represented with k or fewer banknotes.\n\n# [edge case] \n    Test Case 1:\n    Input: t = 1, n = 3, k = 5, a = [0, 1, 2]\n    Output: 6\n    Explanation: For denominations 1, 10, and 100, the minimum number of banknotes required to represent 6 burles is 2 (1 banknote of 1 burle and 1 banknote of 5 burles). This cannot be represented with 5 or fewer banknotes.\n\n    Test Case 2:\n    Input: t = 1, n = 2, k = 3, a = [0, 1]\n    Output: 3\n    Explanation: For denominations 1 and 10, the minimum number of banknotes required to represent 3 burles is 3 (3 banknotes of 1 burle). This cannot be represented with 3 or fewer banknotes.\n\n    Test Case 3:\n    Input: t = 1, n = 4, k = 10, a = [0, 1, 2, 3]\n    Output: 11\n    Explanation: For denominations 1, 10, 100, and 1000, the minimum number of banknotes required to represent 11 burles is 4 (1 banknote of each denomination). This cannot be represented with 10 or fewer banknotes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use dynamic programming to solve the problem efficiently by keeping track of the minimum number of banknotes required to represent each amount of burles.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'banknotes', 'denomination', 'minimum number of banknotes required'\n    Explanation: The core concepts involve the types of banknotes, their denominations, and the minimum number of banknotes required to represent a certain amount of burles.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimum': indicates the smallest positive number of burles that cannot be represented with k or fewer banknotes\n    Explanation: This signifies the importance of finding the smallest number that exceeds the limit of banknotes allowed.\n\n# [code logic]\n    The code logic involves implementing dynamic programming to efficiently track the minimum number of banknotes required to represent each amount of burles.\n\n# [edge case] \n    Test Case 1: t = 1, n = 3, k = 5, a = [0, 1, 2]\n    Expected Output: 4\n    Explanation: With denominations 1, 10, and 100, the minimum number of banknotes required to represent 4 burles is 4 (4 banknotes of denomination 1). This exceeds the limit of 5 banknotes allowed.\n    \n    Test Case 2: t = 1, n = 2, k = 2, a = [0, 1]\n    Expected Output: 3\n    Explanation: With denominations 1 and 10, the minimum number of banknotes required to represent 3 burles is 3 (3 banknotes of denomination 1). This exceeds the limit of 2 banknotes allowed.\n    \n    Test Case 3: t = 1, n = 4, k = 10, a = [0, 1, 2, 3]\n    Expected Output: 11\n    Explanation: With denominations 1, 10, 100, and 1000, the minimum number of banknotes required to represent 11 burles is 11 (1 banknote of denomination 10 and 1 banknote of denomination 1). This exceeds the limit of 10 banknotes allowed.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use dynamic programming to solve the problem efficiently by keeping track of the minimum number of banknotes required to represent each amount of burles.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'denomination': Denotes the value of each type of banknote used in Berland.\n    'f(s)': Represents the minimum number of banknotes required to represent a specific amount of burles.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimum': Indicates the smallest positive number of burles that cannot be represented with k or fewer banknotes.\n\n# [code logic]\n    The logic involves dynamic programming to keep track of the minimum number of banknotes required to represent each amount of burles efficiently.\n\n# [edge case] \n    Test Case 1:\n    Input: t = 1, n = 3, k = 5, a = [0, 1, 2]\n    Expected Output: 4\n    Explanation: For denominations 1, 10, and 100, the minimum number of banknotes required to represent s = 4 is greater than k = 5.\n    \n    Test Case 2:\n    Input: t = 1, n = 2, k = 3, a = [0, 1]\n    Expected Output: 2\n    Explanation: For denominations 1 and 10, the minimum number of banknotes required to represent s = 2 is greater than k = 3.\n    \n    Test Case 3:\n    Input: t = 1, n = 4, k = 10, a = [0, 1, 2, 3]\n    Expected Output: 9\n    Explanation: For denominations 1, 10, 100, and 1000, the minimum number of banknotes required to represent s = 9 is greater than k = 10.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use dynamic programming to solve the problem efficiently by considering all possible combinations of banknotes denominations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'denomination': Denomination refers to the value or face value of a banknote, which is the amount of currency that is written on the banknote.\n\n    'minimum number of banknotes required': This concept refers to finding the smallest number of banknotes needed to represent a specific amount of money.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimum': Indicates the smallest or lowest value in the context of finding the minimum number of banknotes required to represent a specific amount of money.\n\n# [code logic]\n    The logic to implement the code involves dynamic programming to efficiently consider all possible combinations of banknote denominations. This includes iterating through the denominations and calculating the minimum number of banknotes required to represent a specific amount of money.\n\n# [edge case] \n    Test Case 1:\n    Input: t = 1, n = 3, k = 5, a = [0, 1, 2]\n    Expected Output: 3\n    Explanation: For denominations [1, 10, 100], the minimum positive number of burles that cannot be represented with 5 or fewer banknotes is 3. This is because f(3) = 3, and it cannot be represented with fewer banknotes.\n\n    Test Case 2:\n    Input: t = 1, n = 2, k = 2, a = [0, 1]\n    Expected Output: 2\n    Explanation: For denominations [1, 10], the minimum positive number of burles that cannot be represented with 2 or fewer banknotes is 2. This is because f(2) = 2, and it cannot be represented with fewer banknotes.\n\n    Test Case 3:\n    Input: t = 1, n = 4, k = 10, a = [0, 1, 2, 3]\n    Expected Output: 10\n    Explanation: For denominations [1, 10, 100, 1000], the minimum positive number of burles that cannot be represented with 10 or fewer banknotes is 10. This is because f(10) = 10, and it cannot be represented with fewer banknotes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use dynamic programming to solve the problem efficiently by considering all possible combinations of banknotes denominations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'denomination': Denomination refers to the value or face value of a banknote in the currency used in Berland.\n\n    'f(s)': f(s) represents the minimum number of banknotes required to represent exactly s burles using the given denominations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimum': Indicates the smallest or lowest value in the context of the number of banknotes required.\n\n# [code logic]\n    The code logic should involve dynamic programming to efficiently find the minimum positive number of burles that cannot be represented with k or fewer banknotes. This would involve considering all possible combinations of banknotes denominations.\n\n# [edge case] \n    Test Case 1:\n    Input: t = 1, n = 3, k = 5, a = [0, 1, 2]\n    Expected Output: 6\n    Explanation: With denominations of 1, 10, and 100, the minimum positive number of burles that cannot be represented with 5 or fewer banknotes is 6. f(6) = 2 banknotes (1x1 + 5x1).\n\n    Test Case 2:\n    Input: t = 1, n = 2, k = 3, a = [0, 2]\n    Expected Output: 4\n    Explanation: With denominations of 1 and 100, the minimum positive number of burles that cannot be represented with 3 or fewer banknotes is 4. f(4) = 2 banknotes (3x1 + 1x1).\n\n    Test Case 3:\n    Input: t = 1, n = 4, k = 10, a = [0, 1, 2, 3]\n    Expected Output: 12\n    Explanation: With denominations of 1, 10, 100, and 1000, the minimum positive number of burles that cannot be represented with 10 or fewer banknotes is 12. f(12) = 3 banknotes (2x1 + 1x10 + 2x100).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use dynamic programming to solve the problem efficiently by considering all possible combinations of banknotes denominations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'denomination': Denomination refers to the value or face value of a banknote, which is the amount of currency that is written on the banknote.\n\n    'minimum number of banknotes required': This concept refers to finding the smallest number of banknotes needed to represent a specific amount of money.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimum': Indicates the smallest or lowest value in the context of finding the minimum number of banknotes required to represent a specific amount of money.\n\n# [code logic]\n    The logic to implement the code involves dynamic programming to efficiently consider all possible combinations of banknote denominations. This includes iterating through the denominations and calculating the minimum number of banknotes required to represent a specific amount of money.\n\n# [edge case] \n    Test Case 1: \n    Input: n = 3, k = 5, a = [0, 1, 2]\n    Expected Output: 6\n    Explanation: For denominations [1, 10, 100], the minimum positive number of burles that cannot be represented with 5 or fewer banknotes is 6. This is because with 5 banknotes, we can represent 1 + 2*2 + 2*10 = 25 burles, but we cannot represent 26 burles with 5 or fewer banknotes.\n\n    Test Case 2:\n    Input: n = 2, k = 3, a = [0, 1]\n    Expected Output: 3\n    Explanation: For denominations [1, 10], the minimum positive number of burles that cannot be represented with 3 or fewer banknotes is 3. With 3 banknotes, we can represent 1 + 2*1 = 3 burles, but we cannot represent 4 burles with 3 or fewer banknotes.\n\n    Test Case 3:\n    Input: n = 4, k = 10, a = [0, 1, 2, 3]\n    Expected Output: 13\n    Explanation: For denominations [1, 10, 100, 1000], the minimum positive number of burles that cannot be represented with 10 or fewer banknotes is 13. With 10 banknotes, we can represent 1 + 2*1 + 3*10 = 31 burles, but we cannot represent 32 burles with 10 or fewer banknotes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement analysis:\nThe main requirements include efficiently calculating the minimum number of banknotes required for a given amount and determining the smallest positive number of burles that cannot be represented with k or fewer banknotes. The algorithm should be optimized for performance and accuracy.\nrequirement pool:\n- Efficiently solve the banknote denomination problem\n- Accurately calculate the minimum number of banknotes required\n- Optimize the algorithm for finding the smallest positive number of burles\nWe will use dynamic programming to efficiently solve the banknote denomination problem and find the smallest positive number of burles that cannot be represented with k or fewer banknotes. We will optimize the algorithm for performance and accuracy.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'banknotes denomination'\n    Explanation: The core concept is about the different types of banknotes with specific denominations used in Berland.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to find the minimum positive number of burles that cannot be represented with k or fewer banknotes.\n\n# [code logic]\n    The logic involves using dynamic programming to efficiently solve the banknote denomination problem. \n    1. Create a function f(s) that calculates the minimum number of banknotes required to represent exactly s burles.\n    2. Iterate through the test cases:\n        a. Read the input values for n, k, and a_i.\n        b. Implement the dynamic programming algorithm to find the smallest positive number of burles that cannot be represented with k or fewer banknotes.\n        c. Print the result for each test case.\n\n# [edge case] \n    Test Case 1:\n    Input: n=2, k=5, a=[1, 2]\n    Expected Output: 4\n    Explanation: With banknotes of denominations 1 and 10^2, we can represent 1, 10, 100, and 1000 burles. The smallest positive number that cannot be represented with 5 or fewer banknotes is 4.\n    \n    Test Case 2:\n    Input: n=3, k=2, a=[0, 1, 2]\n    Expected Output: 3\n    Explanation: With banknotes of denominations 1, 10, and 100 burles, we can represent 1, 10, and 100 burles. The smallest positive number that cannot be represented with 2 or fewer banknotes is 3.\n    \n    Test Case 3:\n    Input: n=1, k=3, a=[2]\n    Expected Output: 2\n    Explanation: With banknotes of denomination 100 burles, we can represent 100 and 10000 burles. The smallest positive number that cannot be represented with 3 or fewer banknotes is 2.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use dynamic programming to solve the minimum number of banknotes required problem efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'banknotes', 'denomination', 'minimum number of banknotes'\n    Explanation: The core concepts in the requirement are related to the types of banknotes, their denominations, and finding the minimum number of banknotes required to represent a certain amount of money.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimum': Indicates the smallest positive number of burles that cannot be represented with k or fewer banknotes.\n\n# [code logic]\n    The logic to implement the code involves dynamic programming to efficiently solve the minimum number of banknotes required problem.\n\n# [edge case] \n    Test Case 1:\n    Input: n = 3, k = 5, a = [1, 2, 3]\n    Expected Output: 4\n    Explanation: For this case, the smallest positive number of burles that cannot be represented with 5 or fewer banknotes is 4.\n    \n    Test Case 2:\n    Input: n = 2, k = 2, a = [0, 1]\n    Expected Output: 3\n    Explanation: For this case, the smallest positive number of burles that cannot be represented with 2 or fewer banknotes is 3.\n    \n    Test Case 3:\n    Input: n = 4, k = 10, a = [0, 1, 2, 3]\n    Expected Output: 9\n    Explanation: For this case, the smallest positive number of burles that cannot be represented with 10 or fewer banknotes is 9.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- Efficiently calculate the minimum number of burles that cannot be represented with given banknotes\n- Handle multiple test cases accurately and provide correct output\n- Optimize algorithm for quick processing of test cases\nWe will use dynamic programming to efficiently calculate the minimum number of burles that cannot be represented with given banknotes. We will optimize the algorithm for handling multiple test cases by storing and reusing intermediate results.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'banknotes', 'denomination', 'minimum number of banknotes required'\n    Explanation: The core concept involves understanding the different types of banknotes with specific denominations and calculating the minimum number of banknotes required to represent a certain amount of currency.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimum': Indicates the smallest positive number of burles that cannot be represented with k or fewer banknotes.\n    \n# [code logic]\n    The code logic involves implementing dynamic programming to efficiently calculate the minimum number of burles that cannot be represented with given banknotes. This includes storing and reusing intermediate results for multiple test cases.\n\n# [edge case] \n    Test Case 1:\n    Input: n=3, k=5, a=[1, 2, 3]\n    Expected Output: 6\n    Explanation: With denominations [1, 2, 3], the minimum positive number of burles that cannot be represented with 5 or fewer banknotes is 6.\n    \n    Test Case 2:\n    Input: n=2, k=2, a=[0, 1]\n    Expected Output: 3\n    Explanation: With denominations [1], the minimum positive number of burles that cannot be represented with 2 or fewer banknotes is 3.\n    \n    Test Case 3:\n    Input: n=4, k=10, a=[0, 1, 2, 3]\n    Expected Output: 7\n    Explanation: With denominations [1, 2, 3], the minimum positive number of burles that cannot be represented with 10 or fewer banknotes is 7.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use dynamic programming to solve the problem efficiently by keeping track of the minimum number of banknotes required to represent each amount of burles.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'denomination': Denomination refers to the value or face value of a banknote in burles.\n\n    'f(s)': f(s) represents the minimum number of banknotes required to represent exactly s burles.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimum': Indicates the smallest positive number of burles s that cannot be represented with k or fewer banknotes.\n\n# [code logic]\n    The logic involves dynamic programming to keep track of the minimum number of banknotes required to represent each amount of burles. \n    1. Initialize an array to store the minimum number of banknotes required for each amount of burles.\n    2. Iterate through the denominations and update the array based on the denomination values.\n    3. Find the smallest positive number of burles s that cannot be represented with k or fewer banknotes.\n    4. Print the result for each test case.\n\n# [edge case] \n    Test Case 1:\n    Input: n=3, k=5, a=[0,1,2]\n    Expected Output: 3\n    Explanation: For denominations 1, 10, and 100, the minimum number of banknotes required to represent 3 burles is 3 (1 burle + 2*1 burles).\n    \n    Test Case 2:\n    Input: n=2, k=10, a=[0,1]\n    Expected Output: 11\n    Explanation: For denominations 1 and 10, the minimum number of banknotes required to represent 11 burles is 11 (1*10 burles + 1 burle).\n    \n    Test Case 3:\n    Input: n=4, k=20, a=[0,1,2,3]\n    Expected Output: 21\n    Explanation: For denominations 1, 10, 100, and 1000, the minimum number of banknotes required to represent 21 burles is 21 (1*10 burles + 1*10 burles + 1 burle).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n"], "scores": [], "pass_results": [true, false, true, false, true, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 20, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 number of test cases.\n\nThe first line of each test case contains two integers n and k (1 \u2264 n \u2264 10; 1 \u2264 k \u2264 10^9).\n\nThe next line contains n integers a_1, a_2, ..., a_n (0 = a_1 < a_2 < ... < a_n \u2264 9).\n\nOutput\n\nFor each test case, print one integer \u2014 the minimum positive number of burles s that cannot be represented with k or fewer banknotes.\n\nExample\n\nInput\n\n\n4\n3 13\n0 1 2\n2 777\n0 4\n3 255\n0 1 3\n10 1000000000\n0 1 2 3 4 5 6 7 8 9\n\n\nOutput\n\n\n59\n778\n148999\n999999920999999999", "mutate_method": "expand_one2two", "parent_index": 18}
