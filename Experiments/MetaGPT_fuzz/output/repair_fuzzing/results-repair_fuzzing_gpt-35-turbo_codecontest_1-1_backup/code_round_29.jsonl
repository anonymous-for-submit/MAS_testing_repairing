{"name": "1607_E. Robot on the Board 1", "description": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "tags": ["implementation"], "difficulty": 11, "id": 1607, "sample_io": [{"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}], "test_list": [{"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n1 1\n3 4\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRUDLLLDU\n", "output": ["1 2\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n2 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n2 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 1\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n1 1\n4 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nLRDRUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 2\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n17 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 1\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 1\n3 1\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUURRDLLLDU\n", "output": ["1 1\n1 2\n2 1\n4 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n3 4\nDUULRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n2 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 2\nUULRRD\n6 2\nUULULDRRDULL\n", "output": ["1 1\n1 2\n3 2\n4 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n13 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n22 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n8 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n1 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n4 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRDRLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n10 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDUUL\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n6 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n11 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n3 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n12 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n2 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUULRRDLDLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n9 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRLLLDUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n5 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nDRRLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n5 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n12 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nUUULLDRRDULL\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 2\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n23 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n13 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n9 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n15 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLRUURDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n11 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUV\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n12 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRDR\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}], "task_id": "codecontest/102", "prompt": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right. The robot is able to move from the current cell to one of the four cells adjacent by side. The sequence of commands s executed by the robot is given; each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively. The robot can start its movement in any cell and executes the commands starting from the first one. It executes these commands strictly in the order in which they are listed in s. But if the robot moves beyond the edge of the board, it falls and breaks, and a command that causes the robot to break is not considered successfully executed. The robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column). <image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column). Determine the cell from which the robot should start its movement in order to execute as many commands as possible. You should consider all possible starting positions and choose the one that allows the robot to execute the maximum number of commands on the given board.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "repair_prompt": ["The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right. The robot is able to move from the current cell to one of the four cells adjacent by side. The sequence of commands s executed by the robot is given; each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively. The robot can start its movement in any cell and executes the commands starting from the first one. It executes these commands strictly in the order in which they are listed in s. But if the robot moves beyond the edge of the board, it falls and breaks, and a command that causes the robot to break is not considered successfully executed. The robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column). <image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column). Determine the cell from which the robot should start its movement in order to execute as many commands as possible. You should consider all possible starting positions and choose the one that allows the robot to execute the maximum number of commands on the given board.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "The robot starts from cell (2, 1) (second row, first column) and moves right, right, down, left, up, and up. In this case, it ends in the cell (1, 2) (first row, second column) successfully completing all commands. Determine the cell from which the robot should start its movement in order to execute as many commands as possible. You should consider all possible starting positions and choose the one that allows the robot to execute the maximum number of commands on the given board.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "The robot starts from cell (2, 1) (second row, first column) and moves right, right, down, left, up, and up, ending in the cell (1, 2) (first row, second column). Determine the cell from which the robot should start its movement to execute as many commands as possible on the given board.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    def execute_commands(n: int, m: int, commands: str) -> int:\n        directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n\n        def is_valid_move(x: int, y: int) -> bool:\n            return 1 <= x <= n and 1 <= y <= m\n\n        def count_successful_commands(start_x: int, start_y: int) -> int:\n            x, y = start_x, start_y\n            successful_commands = 0\n\n            for command in commands:\n                dx, dy = directions[command]\n                new_x, new_y = x + dx, y + dy\n\n                if is_valid_move(new_x, new_y):\n                    x, y = new_x, new_y\n                    successful_commands += 1\n                else:\n                    break\n\n            return successful_commands\n\n        max_successful_commands = 0\n        best_starting_position = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                current_successful_commands = count_successful_commands(i, j)\n                if current_successful_commands > max_successful_commands:\n                    max_successful_commands = current_successful_commands\n                    best_starting_position = (i, j)\n\n        return best_starting_position\n\n    results = []\n    for test_case in test_cases:\n        n, m, commands = test_case\n        starting_position = execute_commands(n, m, commands)\n        results.append(starting_position)\n\n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n    test_cases.append((n, m, commands))\n\nresult = find_starting_position(t, test_cases)\nfor res in result:\n    print(res[0], res[1])\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    def execute_commands(n: int, m: int, commands: str) -> int:\n        directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n\n        def is_valid_move(x: int, y: int) -> bool:\n            return 1 <= x <= n and 1 <= y <= m\n\n        def count_successful_commands(start_x: int, start_y: int) -> int:\n            x, y = start_x, start_y\n            successful_commands = 0\n\n            for command in commands:\n                dx, dy = directions[command]\n                new_x, new_y = x + dx, y + dy\n\n                if is_valid_move(new_x, new_y):\n                    x, y = new_x, new_y\n                    successful_commands += 1\n                else:\n                    break\n\n            return successful_commands\n\n        max_successful_commands = 0\n        best_starting_position = (1, 1)\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                current_successful_commands = count_successful_commands(i, j)\n                if current_successful_commands > max_successful_commands:\n                    max_successful_commands = current_successful_commands\n                    best_starting_position = (i, j)\n\n        return best_starting_position\n\n    results = []\n    for test_case in test_cases:\n        n, m, commands = test_case\n        starting_position = execute_commands(n, m, commands)\n        results.append(starting_position)\n\n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n    test_cases.append((n, m, commands))\n\nresult = find_starting_position(t, test_cases)\nfor res in result:\n    print(res[0], res[1])\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    def count_successful_commands(n: int, m: int, commands: str) -> int:\n        def is_valid_move(x: int, y: int) -> bool:\n            return 1 <= x <= n and 1 <= y <= m\n        \n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        \n        max_successful_commands = 0\n        best_starting_position = (1, 1)\n        \n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                x, y = i, j\n                successful_commands = 0\n                \n                for command in commands:\n                    dx, dy = directions[command]\n                    new_x, new_y = x + dx, y + dy\n                    \n                    if is_valid_move(new_x, new_y):\n                        successful_commands += 1\n                        x, y = new_x, new_y\n                    else:\n                        break\n                \n                if successful_commands > max_successful_commands:\n                    max_successful_commands = successful_commands\n                    best_starting_position = (i, j)\n        \n        return best_starting_position\n    \n    result = []\n    for case in test_cases:\n        n, m, commands = case\n        result.append(count_successful_commands(n, m, commands))\n    \n    return result\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n    test_cases.append((n, m, commands))\n\nresult = find_starting_position(t, test_cases)\nfor res in result:\n    print(res[0], res[1])\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    def count_successful_commands(n: int, m: int, commands: str, start_row: int, start_col: int) -> int:\n        row, col = start_row, start_col\n        successful_commands = 0\n        \n        for command in commands:\n            if command == 'L' and col > 1:\n                col -= 1\n            elif command == 'R' and col < m:\n                col += 1\n            elif command == 'U' and row > 1:\n                row -= 1\n            elif command == 'D' and row < n:\n                row += 1\n            \n            successful_commands += 1\n        \n        return successful_commands\n    \n    optimal_positions = []\n    \n    for n, m, commands in test_cases:\n        max_successful_commands = 0\n        optimal_position = (1, 1)  # Default to (1, 1) if no other position found\n        \n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                successful_commands = count_successful_commands(n, m, commands, i, j)\n                \n                if successful_commands > max_successful_commands:\n                    max_successful_commands = successful_commands\n                    optimal_position = (i, j)\n        \n        optimal_positions.append(optimal_position)\n    \n    return optimal_positions\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    def count_commands(commands: str, n: int, m: int, start_row: int, start_col: int) -> int:\n        row, col = start_row, start_col\n        count = 0\n        for command in commands:\n            if command == 'L' and col > 1:\n                col -= 1\n            elif command == 'R' and col < m:\n                col += 1\n            elif command == 'U' and row > 1:\n                row -= 1\n            elif command == 'D' and row < n:\n                row += 1\n            count += 1\n        return count\n\n    results = []\n    for n, m, commands in test_cases:\n        max_count = 0\n        optimal_position = (1, 1)\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                count = count_commands(commands, n, m, i, j)\n                if count > max_count:\n                    max_count = count\n                    optimal_position = (i, j)\n        results.append(optimal_position)\n    \n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n    test_cases.append((n, m, commands))\n\nresult = find_optimal_starting_position(t, test_cases)\nfor res in result:\n    print(res[0], res[1])\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    def count_successful_commands(n: int, m: int, commands: str, start_r: int, start_c: int) -> int:\n        r, c = start_r, start_c\n        successful_commands = 0\n        \n        for command in commands:\n            if command == 'L' and c > 1:\n                c -= 1\n            elif command == 'R' and c < m:\n                c += 1\n            elif command == 'U' and r > 1:\n                r -= 1\n            elif command == 'D' and r < n:\n                r += 1\n            \n            successful_commands += 1\n        \n        return successful_commands\n    \n    results = []\n    \n    for n, m, commands in test_cases:\n        max_successful_commands = 0\n        optimal_starting_position = (1, 1)\n        \n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                successful_commands = count_successful_commands(n, m, commands, i, j)\n                \n                if successful_commands > max_successful_commands:\n                    max_successful_commands = successful_commands\n                    optimal_starting_position = (i, j)\n        \n        results.append(optimal_starting_position)\n    \n    return results\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n    test_cases.append((n, m, commands))\n\nresult = find_optimal_starting_position(t, test_cases)\nfor r, c in result:\n    print(r, c)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_cell(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    def count_commands(commands: str, n: int, m: int, r: int, c: int) -> int:\n        movements = {'R': (0, 1), 'L': (0, -1), 'D': (1, 0), 'U': (-1, 0)}\n        cnt = 0\n\n        for command in commands:\n            dr, dc = movements[command]\n            r += dr\n            c += dc\n\n            if r < 1 or r > n or c < 1 or c > m:\n                break\n\n            cnt += 1\n\n        return cnt\n\n    result = []\n    for n, m, commands in test_cases:\n        max_commands = 0\n        best_r, best_c = 1, 1\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                commands_count = count_commands(commands, n, m, i, j)\n                if commands_count > max_commands:\n                    max_commands = commands_count\n                    best_r, best_c = i, j\n\n        result.append((best_r, best_c))\n\n    return result\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n    test_cases.append((n, m, commands))\n\nresult = find_starting_cell(t, test_cases)\nfor r, c in result:\n    print(r, c)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_cell(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    def execute_commands(n: int, m: int, commands: str) -> Tuple[int, int]:\n        row, col = 1, 1\n        for command in commands:\n            if command == 'L' and col > 1:\n                col -= 1\n            elif command == 'R' and col < m:\n                col += 1\n            elif command == 'U' and row > 1:\n                row -= 1\n            elif command == 'D' and row < n:\n                row += 1\n        return (row, col)\n    \n    starting_cells = []\n    for n, m, commands in test_cases:\n        starting_cells.append(execute_commands(n, m, commands))\n    \n    return starting_cells\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n    test_cases.append((n, m, commands))\n\nresult = find_starting_cell(t, test_cases)\nfor r, c in result:\n    print(r, c)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_cell(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    def count_commands(n: int, m: int, commands: str) -> int:\n        # Initialize starting cell\n        max_commands = 0\n        start_cell = (1, 1)\n\n        # Iterate through all possible starting cells\n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                r, c = i, j\n                commands_executed = 0\n\n                # Simulate robot movement based on commands\n                for command in commands:\n                    if command == 'L':\n                        c -= 1\n                    elif command == 'R':\n                        c += 1\n                    elif command == 'U':\n                        r -= 1\n                    elif command == 'D':\n                        r += 1\n\n                    # Check if robot is within the board\n                    if 1 <= r <= n and 1 <= c <= m:\n                        commands_executed += 1\n\n                # Update max commands and starting cell if needed\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    start_cell = (i, j)\n\n        return start_cell\n\n    result = []\n    for n, m, commands in test_cases:\n        start_cell = count_commands(n, m, commands)\n        result.append(start_cell)\n\n    return result\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    commands = input()\n    test_cases.append((n, m, commands))\n\nresult = find_starting_cell(t, test_cases)\nfor r, c in result:\n    print(r, c)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_starting_cell(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    def is_valid_move(x: int, y: int, n: int, m: int) -> bool:\n        return 1 <= x <= n and 1 <= y <= m\n\n    def execute_commands(n: int, m: int, s: str) -> int:\n        directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n        max_commands = 0\n\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                x, y = i, j\n                commands_executed = 0\n\n                for command in s:\n                    dx, dy = directions[command]\n                    new_x, new_y = x + dx, y + dy\n\n                    if is_valid_move(new_x, new_y, n, m):\n                        x, y = new_x, new_y\n                        commands_executed += 1\n                    else:\n                        break\n\n                max_commands = max(max_commands, commands_executed)\n\n        return max_commands\n\n    result = []\n    for n, m, s in test_cases:\n        max_commands = execute_commands(n, m, s)\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if execute_commands(n, m, s) == max_commands:\n                    result.append((i, j))\n\n    return result\n\n# Input interface\n\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input()\n        test_cases.append((n, m, s))\n\n    result = find_starting_cell(t, test_cases)\n    for res in result:\n        print(res[0], res[1])\n"], "plans": ["requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use a simple approach to iterate through all possible starting positions on the board and simulate the robot's movement based on the given commands. I will keep track of the maximum number of successful commands executed from each starting position and return the coordinates of the cell that allows the robot to execute the maximum number of commands.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The core concept is to determine the starting position on the board that allows the robot to execute the maximum number of commands successfully.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': means that we need to find the starting position that allows the robot to execute the maximum number of commands successfully\n\n# [code logic]\n    The logic involves iterating through all possible starting positions on the board, simulating the robot's movement based on the given commands, and keeping track of the maximum number of successful commands executed from each starting position. Finally, return the coordinates of the cell that allows the robot to execute the maximum number of commands.\n\n# [edge case] \n    Test Case 1:\n    Input: \n    1\n    3 3\n    RRDLUU\n    Output: \n    2 1\n    Explanation: Starting from cell (2, 1), all commands will be executed successfully, and the robot will stop at cell (1, 2).\n    \n    Test Case 2:\n    Input: \n    1\n    2 2\n    LR\n    Output: \n    1 1\n    Explanation: Starting from cell (1, 1), both commands will be executed successfully.\n\n    Test Case 3:\n    Input: \n    1\n    4 4\n    RRRR\n    Output: \n    1 1\n    Explanation: Starting from any cell, the robot will fall off after executing the first command 'R'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all possible scenarios.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use a simple approach to iterate through all possible starting positions on the board and simulate the robot's movement based on the given commands. We will keep track of the maximum number of successful commands executed from each starting position and return the coordinates of the cell that allows the robot to execute the maximum number of commands.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The core concept is about simulating the movement of a robot on a checkered rectangular board based on given commands to execute as many commands as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic involves iterating through all possible starting positions on the board, simulating the robot's movement based on the given commands, and keeping track of the maximum number of successful commands executed from each starting position. Finally, return the coordinates of the cell that allows the robot to execute the maximum number of commands.\n\n# [edge case] \n    Edge Case 1: \n    Input: \n    1\n    3 3\n    RRDLUU\n    Expected Output: \n    2 1\n    Explanation: Starting from cell (2, 1), all commands will be executed successfully.\n    \n    Edge Case 2:\n    Input:\n    1\n    2 2\n    RL\n    Expected Output:\n    1 1\n    Explanation: Starting from cell (1, 1), both commands will be executed successfully.\n    \n    Edge Case 3:\n    Input:\n    1\n    4 4\n    RRRR\n    Expected Output:\n    1 1\n    Explanation: Starting from cell (1, 1), all commands will be executed successfully.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all possible starting positions and ensures the maximum number of successful commands executed.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use a simple approach to iterate through all possible starting positions on the board and simulate the robot's movement based on the given commands. We will keep track of the maximum number of successful commands executed from each starting position and return the coordinates of the cell that maximizes this count.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The core concept is to determine the starting position on the board that allows the robot to execute the maximum number of commands successfully.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Iterate through all possible starting positions on the board.\n    2. Simulate the robot's movement based on the given commands.\n    3. Keep track of the maximum number of successful commands executed from each starting position.\n    4. Return the coordinates of the cell that maximizes this count.\n\n# [edge case] \n    Edge Case 1: \n    Input: \n    1\n    3 3\n    RRDLUU\n    Expected Output: \n    2 1\n    Explanation: If the robot starts moving from the cell (2, 1), all commands will be executed successfully.\n    \n    Edge Case 2:\n    Input:\n    1\n    2 2\n    LR\n    Expected Output:\n    1 1\n    Explanation: The robot can start at any cell to execute both commands successfully.\n    \n    Edge Case 3:\n    Input:\n    1\n    4 4\n    RRRRLLLLDDDDUUUU\n    Expected Output:\n    1 1\n    Explanation: The robot can start at any cell to execute all commands successfully.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all possible starting positions and simulations.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python with a simple approach to design a static function that determines the optimal starting position for the robot to execute the maximum number of commands.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'starting position': The initial cell from which the robot starts its movement to execute commands and reach the destination.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum number': Indicates the highest count of commands that the robot can execute from a specific starting position.\n\n# [code logic]\n    The logic involves iterating through all possible starting positions, simulating the robot's movement based on the given commands, and counting the number of successful commands executed. The starting position with the maximum count of successful commands is chosen as the optimal starting position.\n\n# [edge case] \n    Edge Case 1: \n    Input: \n    1\n    2 2\n    RL\n    Output: \n    1 1\n    Explanation: \n    The robot can execute both commands successfully starting from cell (1, 1).\n    \n    Edge Case 2:\n    Input:\n    1\n    3 3\n    RRRDDDLLLUU\n    Output:\n    3 3\n    Explanation:\n    The robot can execute all commands successfully starting from cell (3, 3).\n    \n    Edge Case 3:\n    Input:\n    1\n    2 3\n    RDLU\n    Output:\n    1 1\n    Explanation:\n    The robot can execute all commands successfully starting from cell (1, 1).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all possible starting positions and determines the optimal one based on the maximum number of successful commands executed.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python with a simple approach to design a static function that determines the optimal starting position for the robot to execute the maximum number of commands.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'starting position': The initial cell from which the robot begins its movement to execute commands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum number': Indicates the highest count of commands that can be executed.\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    Test Case 1:\n    Input: \n    1\n    2 2\n    RL\n    Output: \n    1 1\n    Explanation: \n    The robot can start from cell (1, 1) to execute both commands 'R' and 'L'.\n\n    Test Case 2:\n    Input: \n    1\n    3 3\n    RRRDDDLLLUU\n    Output: \n    1 1\n    Explanation: \n    The robot can start from cell (1, 1) to execute all commands successfully.\n\n    Test Case 3:\n    Input: \n    1\n    2 3\n    RDLU\n    Output: \n    1 2\n    Explanation: \n    The robot can start from cell (1, 2) to execute all commands successfully.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python with a simple approach to design a static function that determines the optimal starting position for the robot to execute the maximum number of commands.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'starting position': The initial cell from which the robot begins its movement to execute commands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic to implement the code should involve iterating through all possible starting positions, simulating the robot's movement based on the given commands, and counting the number of successful commands executed. The starting position with the maximum successful commands should be returned.\n\n# [edge case] \n    Edge Case 1: \n    Input: \n    1\n    2 2\n    RL\n    Output: \n    1 1\n    Explanation: \n    The robot can start at (1, 1) and execute both commands successfully.\n\n    Edge Case 2:\n    Input:\n    1\n    3 3\n    RRRDDDLLLUU\n    Output:\n    1 1\n    Explanation:\n    The robot can start at (1, 1) and execute all commands successfully.\n\n    Edge Case 3:\n    Input:\n    1\n    2 3\n    RDLU\n    Output:\n    1 2\n    Explanation:\n    The robot can start at (1, 2) and execute all commands successfully.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use a simple approach to iterate through all possible starting cells and simulate the robot's movement to find the cell that allows the robot to execute the maximum number of commands.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The robot moves in a specific sequence of directions on a given board to execute commands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    Test Case 1:\n    Input: \n    1\n    2 2\n    RL\n    Output: \n    1 1\n    Explanation: The robot can start from cell (1, 1) to execute both commands 'R' and 'L'.\n    \n    Test Case 2:\n    Input: \n    1\n    3 3\n    RRRUUULLL\n    Output: \n    1 1\n    Explanation: The robot can start from cell (1, 1) to execute all commands efficiently.\n    \n    Test Case 3:\n    Input: \n    1\n    2 3\n    RDLU\n    Output: \n    1 2\n    Explanation: The robot can start from cell (1, 2) to execute all commands efficiently.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and analyze the given commands to determine the starting cell for the robot.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'movement commands': Refers to the sequence of commands (L, R, D, U) that the robot executes to move on the board.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1\n    2 2\n    RL\n    Output:\n    1 1\n    Explanation: The robot can start from cell (1, 1) to execute both commands 'R' and 'L'.\n    \n    Test Case 2:\n    Input:\n    1\n    3 3\n    RRRUUULLL\n    Output:\n    1 1\n    Explanation: The robot can start from cell (1, 1) to execute all the commands efficiently.\n    \n    Test Case 3:\n    Input:\n    2\n    2 3\n    RDL\n    3 3\n    UUUUUUUUUU\n    Output:\n    1 1\n    3 1\n    Explanation: For the first test case, starting from cell (1, 1) allows the robot to execute all commands. For the second test case, starting from cell (3, 1) is optimal to execute all 'U' commands.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use a simple approach to iterate through all possible starting cells and simulate the robot's movement to find the cell that allows the robot to execute the maximum number of commands.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The core concept is to simulate the movement of a robot on a board based on given commands to find the starting cell that allows the robot to execute the maximum number of commands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic involves iterating through all possible starting cells, simulating the robot's movement based on the given commands, and tracking the cell that allows the maximum number of commands to be executed.\n\n# [edge case] \n    Test Case 1:\n    Input:\n    1\n    2 2\n    RDLU\n    Output:\n    1 1\n    Explanation: In this case, the robot can execute all 4 commands starting from cell (1, 1).\n    \n    Test Case 2:\n    Input:\n    1\n    3 3\n    RRRDDDLLLUUUR\n    Output:\n    1 1\n    Explanation: The robot can execute all 12 commands starting from cell (1, 1).\n\n    Test Case 3:\n    Input:\n    1\n    2 3\n    RRRDLL\n    Output:\n    1 2\n    Explanation: The robot can execute all 6 commands starting from cell (1, 2).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios effectively.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will design a simple static Python function using basic data structures and logic to determine the starting cell for the robot to execute maximum commands without falling off the board.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board': It refers to a board with rows and columns where the robot can move.\n    'sequence of commands': Refers to the specific movements the robot can make ('L' - left, 'R' - right, 'D' - down, 'U' - up).\n    'execute as many commands as possible': The goal is to maximize the number of successful commands executed without falling off the board.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': Indicates the need to find the starting cell that allows the robot to execute the most commands successfully.\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\n\n# [edge case] \n    Edge Case 1:\n    Input: \n    1\n    3 3\n    RRDLUU\n    Expected Output:\n    2 1\n    Explanation: Starting from cell (2, 1) allows the robot to execute all commands successfully.\n    \n    Edge Case 2:\n    Input:\n    1\n    2 2\n    RLRL\n    Expected Output:\n    1 1\n    Explanation: Both starting positions (1, 1) and (2, 1) allow the robot to execute all commands successfully.\n    \n    Edge Case 3:\n    Input:\n    1\n    4 4\n    RRRR\n    Expected Output:\n    1 1\n    Explanation: Starting from any cell in the first row allows the robot to execute all commands successfully.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n"], "scores": [], "pass_results": [false, false, true, false, false, true, false, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 29, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "mutate_method": "expand_one2two", "parent_index": 33}
