{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three. Consider edge cases where there are no parentheses, or parentheses are unbalanced.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "entry_point": "parse_nested_parens", "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "test": ["def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()()) ((())) (((()))) (((()))) (()) ()\") == [3, 2, 3, 4, 4, 2, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (()) (()()) ((())) ((())()())\") == [3, 1, 2, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) ((())) ((())()()) (()) (()()) ((())) ((())) () () ((())()()) (()()) () (((()))) ((())()()) () (((()))) (((()))) ()\") == [4, 3, 3, 2, 2, 3, 3, 1, 1, 3, 2, 1, 4, 3, 1, 4, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (((()))) ((())()()) (()()) () (((())))\") == [3, 4, 3, 2, 1, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) ((())) (()()) () () (()()) () ()\") == [2, 3, 2, 1, 1, 2, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()()) () ((())()()) () () ((())) ((())) (()()) () () (()())\") == [3, 2, 1, 3, 1, 1, 3, 3, 2, 1, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()()) ((())()()) ((())) (()()) () ((())()()) (()()) ((())()()) ((())) ((())) (()())\") == [3, 2, 3, 3, 2, 1, 3, 2, 3, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (()(())((()))) (((()))) ((())) (()) () ((())) ((())) (()()) ((())()()) (()()) () (()) (((()))) (()) ((())) (((()))) ((())) ((())()()) ((())()())\") == [3, 1, 4, 4, 3, 2, 1, 3, 3, 2, 3, 2, 1, 2, 4, 2, 3, 4, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()()) ((())()()) ((())()()) (()()) ((())) () () ((())) () () (()())\") == [3, 2, 3, 3, 2, 3, 1, 1, 3, 1, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())) ((())) () () () () (()()) (()()) (()()) ((())()()) ()\") == [3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (((()))) (()) ((())()()) () () ((())) ((())) (((()))) () (()()) (((())))\") == [2, 4, 2, 3, 1, 1, 3, 3, 4, 1, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) ((())) ((())) ((())()())\") == [2, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())) (()) (()()) ((())()()) ((())()())\") == [2, 3, 2, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()) (()()) ((())) (((()))) () ((())()()) ((())) (()()) (()()) (()) ((())()())\") == [3, 2, 2, 3, 4, 1, 3, 3, 2, 2, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () ((())()()) ((())()()) (((()))) ((())()()) (((())))\") == [3, 1, 3, 3, 4, 3, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) ((())) (()) ((())) () () () (((()))) (()()) (()()) (((()))) (()) (()) (((())))\") == [4, 3, 2, 3, 1, 1, 1, 4, 2, 2, 4, 2, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (()) (()()) (()()) (()()) ((())) (((()))) (()(())((()))) (()) () (((()))) (()) ((())) (())\") == [4, 2, 2, 2, 2, 3, 4, 4, 2, 1, 4, 2, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()) (()) (()()) (()()) (((()))) (()) (((()))) (()(())((()))) ((())) ((())) ((())()()) () (((())))\") == [2, 2, 2, 2, 2, 4, 2, 4, 4, 3, 3, 3, 1, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()(())((()))) ((())) (((()))) ((())()()) (()()) (()(())((()))) ((())()()) ((())) ((())) (()()) ((())()()) ((())) (()) (()(())((()))) () () (()(())((()))) (()()) (((()))) (((()))) ()\") == [4, 3, 4, 3, 2, 4, 3, 3, 3, 2, 3, 3, 2, 4, 1, 1, 4, 2, 4, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()(())((()))) ((())) ((())) ((())) (()) (()(())((()))) () ((())) (((()))) (()) ((())) ((())) () (()(())((())))\") == [4, 3, 3, 3, 2, 4, 1, 3, 4, 2, 3, 3, 1, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()()) () ((())) (()()) () ((())()()) ((())) ((())) ((())) ((())) ((()))\") == [3, 2, 1, 3, 2, 1, 3, 3, 3, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())()()) ((())()()) () (((()))) ((())()()) ((())()()) (()()) (()()) (()) ((())) (()())\") == [2, 3, 3, 1, 4, 3, 3, 2, 2, 2, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()(())((()))) (()) (()(())((()))) (((()))) (()(())((()))) (())\") == [3, 4, 2, 4, 4, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()) (()(())((()))) (()) (((()))) (((()))) ((())()())\") == [2, 2, 4, 2, 4, 4, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) ((())()()) (((()))) (()(())((()))) ((())()())\") == [4, 4, 4, 3, 4, 4, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())) ((())()()) () ((())()()) (()()) () () ((())) (()()) ((())) ((())()())\") == [1, 3, 3, 1, 3, 2, 1, 1, 3, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()()) ((())()()) (()()) () () ((())) () ((())()()) (((()))) (((()))) ()\") == [2, 2, 3, 2, 1, 1, 3, 1, 3, 4, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) ((())()()) ((())) (()())\") == [2, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())) ((())()()) (()()) (()) ((())()()) (((()))) (((()))) ((())()()) ((())) ((())()()) () (()()) (()()) ((())()()) (()) ((())) ((())()())\") == [3, 3, 3, 2, 2, 3, 4, 4, 3, 3, 3, 1, 2, 2, 3, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) () (()()) (()())\") == [2, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) ((())) () ((())()()) (()()) (()()) () ((())) ((())) (()()) (((()))) (()())\") == [4, 3, 1, 3, 2, 2, 1, 3, 3, 2, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())) ((())()()) () ((())) (()()) ((())()()) (()())\") == [3, 3, 3, 1, 3, 2, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())) ((())) ((())()()) () ((()))\") == [2, 3, 3, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) (()()) () () ((())) ((())()()) ()\") == [2, 2, 2, 1, 1, 3, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()(())((()))) ((())()()) (()()) (((()))) ((())()()) ((())()())\") == [2, 4, 3, 2, 4, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (((()))) (((()))) (()()) (((())))\") == [3, 1, 4, 4, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())) () (()()) (((()))) ((())) (()()) () (()) (((()))) (()(())((()))) (((()))) (((()))) ()\") == [1, 3, 1, 2, 4, 3, 2, 1, 2, 4, 4, 4, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())()()) () ((()))\") == [3, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) () ((()))\") == [2, 2, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) () (()) () (()) (())\") == [4, 1, 2, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())()()) () ((())) (()()) () () () () (()()) ((())) ((()))\") == [1, 3, 1, 3, 2, 1, 1, 1, 1, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) (()()) (()()) ((())()()) ((())) ((())) ((())()())\") == [3, 3, 2, 2, 3, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () ((())()()) (((()))) (()) (((()))) () ((())) (()()) (()) (((()))) (()())\") == [3, 1, 3, 4, 2, 4, 1, 3, 2, 2, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()) ((())) () () () ((()))\") == [2, 2, 3, 1, 1, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (((()))) ((())()()) ((())) ((())()()) (())\") == [3, 4, 3, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())) ((())) (()()) ((())()()) () () ()\") == [3, 3, 3, 2, 3, 1, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) () (()()) ((())()()) (()()) () (()()) ((())) () () (()())\") == [2, 2, 1, 2, 3, 2, 1, 2, 3, 1, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (((()))) (()) (()) ((())) () ((())) ((())()()) ((())) (()) (()()) (((())))\") == [2, 4, 2, 2, 3, 1, 3, 3, 3, 2, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (((()))) () (()()) ((())()()) () (()(())((()))) (()(())((()))) (()()) () (()()) (()) (()) ((())()())\") == [4, 4, 1, 2, 3, 1, 4, 4, 2, 1, 2, 2, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (((()))) ((())) ((())) ((())) ((())()()) ((())()()) (()()) () () (()(())((()))) ((())) ((())()()) (()(())((()))) () ((())()()) (((()))) (((()))) (()(())((()))) ((())()()) ()\") == [3, 4, 3, 3, 3, 3, 3, 2, 1, 1, 4, 3, 3, 4, 1, 3, 4, 4, 4, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())) ((())()()) ((())) () (()()) () (()())\") == [1, 3, 3, 3, 1, 2, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()()) () (()()) ((())()()) ((())) ((())) (()) ((())()()) () ((())()()) (()()) () (()) ((())) (()()) (()()) ((())()())\") == [2, 2, 1, 2, 3, 3, 3, 2, 3, 1, 3, 2, 1, 2, 3, 2, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens('() (()) ((())) (((())))') == [1, 2, 3, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (((()))) (((()))) (()) (()()) (((()))) () (((()))) (()) ((())) () ()\") == [2, 4, 4, 2, 2, 4, 1, 4, 2, 3, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (((()))) (((()))) (()()) (((()))) ((())) ((())()()) (()) ((())()()) (((()))) (()()) () (()) (((()))) () (()(())((()))) () (()) (()(())((()))) ((())) ((())()())\") == [2, 4, 4, 2, 4, 3, 3, 2, 3, 4, 2, 1, 2, 4, 1, 4, 1, 2, 4, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() (()(())((()))) (()) (()()) ((())()()) (()()) (()())\") == [1, 4, 2, 2, 3, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()(())((()))) (()()) (()()) ((())()()) (()()) ((())) () () (()()) (()(())((()))) ((())()()) (()()) ((())()()) (((()))) (()(())((()))) (()()) () ((())()()) ((())()()) ()\") == [3, 4, 2, 2, 3, 2, 3, 1, 1, 2, 4, 3, 2, 3, 4, 4, 2, 1, 3, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () () (()()) (()()) (()()) ((())) (()())\") == [3, 1, 1, 2, 2, 2, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())()()) (()()) (()) ((())()()) () (((()))) ((())()()) () (()) (()) ((())()()) (()) (()) (()) ((())) ((())) (((())))\") == [1, 3, 2, 2, 3, 1, 4, 3, 1, 2, 2, 3, 2, 2, 2, 3, 3, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()(())((()))) () (()(())((()))) (()) (((()))) ((())()()) ((())()()) ((())) ((())()()) (()(())((()))) ((())) (()(())((()))) ((())) ((())()())\") == [4, 1, 4, 2, 4, 3, 3, 3, 3, 4, 3, 4, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (((()))) () (()) (()) ((())) (()()) () () ((())()()) (()) ((()))\") == [2, 4, 1, 2, 2, 3, 2, 1, 1, 3, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())()()) (()()) ((())()()) (((()))) (()()) (()(())((()))) (()()) (()(())((()))) ((())) (()) ((())) (()()) (()) (()()) () ((())) ((())) ((())) ((())) (()())\") == [2, 3, 2, 3, 4, 2, 4, 2, 4, 3, 2, 3, 2, 2, 2, 1, 3, 3, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) ((())()()) ((())) ((())()()) ((())) () ()\") == [3, 3, 3, 3, 3, 3, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()()) () ((())()())\") == [3, 2, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () (()()) ((())) (()()) () ((())()()) ((()))\") == [3, 1, 2, 3, 2, 1, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) () (()) (((()))) ((())) (()) ((())()()) ((())()()) () ((())()()) (()) ((())()())\") == [4, 1, 2, 4, 3, 2, 3, 3, 1, 3, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () (()()) ((())) ((())()()) ((())()())\") == [3, 1, 2, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () ((())) () (()()) ((())) ((())()()) () () ((())()()) () (()())\") == [3, 1, 3, 1, 2, 3, 3, 1, 1, 3, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())) (()()) (((()))) () ((())) (((()))) () (()) () () ((())()()) (()) (()()) ((())) (((()))) (()) (())\") == [1, 3, 2, 4, 1, 3, 4, 1, 2, 1, 1, 3, 2, 2, 3, 4, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () ((())()()) ((())()()) ((())) () ((())()()) ((())) () ((())()()) (()()) (()())\") == [3, 1, 3, 3, 3, 1, 3, 3, 1, 3, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() (()()) ((())()()) (()(())((()))) (((()))) (()(())((()))) ((())()()) (()) (()()) (((()))) (()) (()) (()()) (((()))) (((()))) () (()) ((())) () (()) (()())\") == [1, 2, 3, 4, 4, 4, 3, 2, 2, 4, 2, 2, 2, 4, 4, 1, 2, 3, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) () (((()))) (()()) ((())) () (()()) (((()))) (()()) (((()))) () ()\") == [4, 1, 4, 2, 3, 1, 2, 4, 2, 4, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) () (()) () ((())) (()) (()()) (((()))) ((())) () () (()) () () (()) () ((())) (()(())((()))) ((()))\") == [4, 4, 4, 1, 2, 1, 3, 2, 2, 4, 3, 1, 1, 2, 1, 1, 2, 1, 3, 4, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()) (()()) ((())()()) (()) (()()) ((())) (()()) (()(())((()))) (()(())((()))) ((())()()) ((())) (((()))) (()(())((()))) ((())) ((())) (()(())((()))) () ((())) ((())) ((())()())\") == [2, 2, 2, 3, 2, 2, 3, 2, 4, 4, 3, 3, 4, 4, 3, 3, 4, 1, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (()) ((())()()) (()()) ((())) (()) () () (((()))) (((()))) (())\") == [3, 1, 2, 3, 2, 3, 2, 1, 1, 4, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"\") == []", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()) (()()) ((())) () ((())) ((())()()) () () (()) (()) (((()))) (((()))) ((())) () () (()()) (())\") == [3, 2, 2, 3, 1, 3, 3, 1, 1, 2, 2, 4, 4, 3, 1, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())()()) ((())) (()()) ((())()()) () (()()) ((()))\") == [3, 3, 3, 2, 3, 1, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())()()) ((())()()) ((())) (()()) ((())) ((())()()) ((())()()) ((())()()) () ((())) (()())\") == [3, 3, 3, 3, 2, 3, 3, 3, 3, 1, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()) () (((()))) ((())()()) ((())()()) (((()))) (()) (((()))) () (((()))) ((())()()) (()()) (()) (()) (()) () (())\") == [3, 2, 1, 4, 3, 3, 4, 2, 4, 1, 4, 3, 2, 2, 2, 2, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()) ((())()()) ((())()()) () ((()))\") == [2, 2, 3, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) () ((())()()) () ((())) () ((())) ()\") == [2, 1, 3, 1, 3, 1, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (()()) ()\") == [3, 1, 2, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) (()()) ((())()()) () ((())()()) ((())()()) ((())) (()()) ((())) () ((())()())\") == [3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) () (()()) ((())) () ((())()()) (()()) ((())()())\") == [2, 1, 2, 3, 1, 3, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (()) () ((())()()) (()()) () (()()) (()(())((()))) (()(())((()))) ((())) (((()))) (()(())((()))) ((())()()) ()\") == [4, 2, 1, 3, 2, 1, 2, 4, 4, 3, 4, 4, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) () (()())\") == [2, 2, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) (((()))) (()) (()()) (()()) () ((())) ((())()()) () (()(())((()))) (()()) (()(())((()))) ((()))\") == [3, 3, 4, 2, 2, 2, 1, 3, 3, 1, 4, 2, 4, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) () (()) () (()()) (()) (()) (((()))) () (()()) (())\") == [2, 2, 1, 2, 1, 2, 2, 2, 4, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens('(()(())((())))') == [4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()) (((()))) () (()()) (((()))) ((())()()) ((())) (()()) ((())()()) (((()))) ((())) (()) ((())) ((())) () ((())) ((())()())\") == [3, 2, 4, 1, 2, 4, 3, 3, 2, 3, 4, 3, 2, 3, 3, 1, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())()()) (()) ((())) ((())) ((())()()) (((()))) () ((())()()) (()(())((()))) ((())) ((())()()) ((())()()) (())\") == [2, 3, 2, 3, 3, 3, 4, 1, 3, 4, 3, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) ((())()()) (()()) ()\") == [2, 3, 2, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()(())((()))) ((())()()) (((()))) (()(())((()))) () (()(())((()))) ()\") == [4, 3, 4, 4, 1, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) ((())()()) () ((())) ((())) (()()) ((())()()) (((()))) () (()) (((())))\") == [3, 3, 3, 1, 3, 3, 2, 3, 4, 1, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (((()))) ((())) (()()) (()()) ((())()()) (()) (()(())((()))) (()) ((())) (()) ((())) () (((())))\") == [3, 4, 3, 2, 2, 3, 2, 4, 2, 3, 2, 3, 1, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) ((())()()) (()()) () (()(())((()))) (()()) (((()))) (((()))) ((())()()) (()()) () () ((())) (((()))) (()(())((()))) (((()))) ((())()()) ((())) (()(())((()))) (())\") == [3, 3, 3, 2, 1, 4, 2, 4, 4, 3, 2, 1, 1, 3, 4, 4, 4, 3, 3, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) () (((()))) () (((()))) (()()) (()) (((()))) (()(())((()))) (((()))) () (()()) (()(())((()))) (()()) (()(())((()))) (()()) (((()))) (()()) (((()))) (()) (()())\") == [2, 1, 4, 1, 4, 2, 2, 4, 4, 4, 1, 2, 4, 2, 4, 2, 4, 2, 4, 2, 2]"], "test_case_list": ["assert parse_nested_parens(\"((())()()) (()()) ((())) (((()))) (((()))) (()) ()\") == [3, 2, 3, 4, 4, 2, 1]", "assert parse_nested_parens(\"((())) () (()) (()()) ((())) ((())()())\") == [3, 1, 2, 2, 3, 3]", "assert parse_nested_parens(\"(((()))) ((())) ((())()()) (()) (()()) ((())) ((())) () () ((())()()) (()()) () (((()))) ((())()()) () (((()))) (((()))) ()\") == [4, 3, 3, 2, 2, 3, 3, 1, 1, 3, 2, 1, 4, 3, 1, 4, 4, 1]", "assert parse_nested_parens(\"((())) (((()))) ((())()()) (()()) () (((())))\") == [3, 4, 3, 2, 1, 4]", "assert parse_nested_parens(\"(()()) ((())) (()()) () () (()()) () ()\") == [2, 3, 2, 1, 1, 2, 1, 1]", "assert parse_nested_parens(\"((())) (()()) () ((())()()) () () ((())) ((())) (()()) () () (()())\") == [3, 2, 1, 3, 1, 1, 3, 3, 2, 1, 1, 2]", "assert parse_nested_parens(\"((())) (()()) ((())()()) ((())) (()()) () ((())()()) (()()) ((())()()) ((())) ((())) (()())\") == [3, 2, 3, 3, 2, 1, 3, 2, 3, 3, 3, 2]", "assert parse_nested_parens(\"((())) () (()(())((()))) (((()))) ((())) (()) () ((())) ((())) (()()) ((())()()) (()()) () (()) (((()))) (()) ((())) (((()))) ((())) ((())()()) ((())()())\") == [3, 1, 4, 4, 3, 2, 1, 3, 3, 2, 3, 2, 1, 2, 4, 2, 3, 4, 3, 3, 3]", "assert parse_nested_parens(\"((())) (()()) ((())()()) ((())()()) (()()) ((())) () () ((())) () () (()())\") == [3, 2, 3, 3, 2, 3, 1, 1, 3, 1, 1, 2]", "assert parse_nested_parens(\"((())()()) ((())) ((())) () () () () (()()) (()()) (()()) ((())()()) ()\") == [3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 3, 1]", "assert parse_nested_parens(\"(()()) (((()))) (()) ((())()()) () () ((())) ((())) (((()))) () (()()) (((())))\") == [2, 4, 2, 3, 1, 1, 3, 3, 4, 1, 2, 4]", "assert parse_nested_parens(\"(()()) ((())) ((())) ((())()())\") == [2, 3, 3, 3]", "assert parse_nested_parens(\"(()) ((())) (()) (()()) ((())()()) ((())()())\") == [2, 3, 2, 2, 3, 3]", "assert parse_nested_parens(\"((())) (()) (()()) ((())) (((()))) () ((())()()) ((())) (()()) (()()) (()) ((())()())\") == [3, 2, 2, 3, 4, 1, 3, 3, 2, 2, 2, 3]", "assert parse_nested_parens(\"((())) () ((())()()) ((())()()) (((()))) ((())()()) (((())))\") == [3, 1, 3, 3, 4, 3, 4]", "assert parse_nested_parens(\"(((()))) ((())) (()) ((())) () () () (((()))) (()()) (()()) (((()))) (()) (()) (((())))\") == [4, 3, 2, 3, 1, 1, 1, 4, 2, 2, 4, 2, 2, 4]", "assert parse_nested_parens(\"(((()))) (()) (()()) (()()) (()()) ((())) (((()))) (()(())((()))) (()) () (((()))) (()) ((())) (())\") == [4, 2, 2, 2, 2, 3, 4, 4, 2, 1, 4, 2, 3, 2]", "assert parse_nested_parens(\"(()()) (()) (()) (()()) (()()) (((()))) (()) (((()))) (()(())((()))) ((())) ((())) ((())()()) () (((())))\") == [2, 2, 2, 2, 2, 4, 2, 4, 4, 3, 3, 3, 1, 4]", "assert parse_nested_parens(\"(()(())((()))) ((())) (((()))) ((())()()) (()()) (()(())((()))) ((())()()) ((())) ((())) (()()) ((())()()) ((())) (()) (()(())((()))) () () (()(())((()))) (()()) (((()))) (((()))) ()\") == [4, 3, 4, 3, 2, 4, 3, 3, 3, 2, 3, 3, 2, 4, 1, 1, 4, 2, 4, 4, 1]", "assert parse_nested_parens(\"(()(())((()))) ((())) ((())) ((())) (()) (()(())((()))) () ((())) (((()))) (()) ((())) ((())) () (()(())((())))\") == [4, 3, 3, 3, 2, 4, 1, 3, 4, 2, 3, 3, 1, 4]", "assert parse_nested_parens(\"((())()()) (()()) () ((())) (()()) () ((())()()) ((())) ((())) ((())) ((())) ((()))\") == [3, 2, 1, 3, 2, 1, 3, 3, 3, 3, 3, 3]", "assert parse_nested_parens(\"(()) ((())()()) ((())()()) () (((()))) ((())()()) ((())()()) (()()) (()()) (()) ((())) (()())\") == [2, 3, 3, 1, 4, 3, 3, 2, 2, 2, 3, 2]", "assert parse_nested_parens(\"((())()()) (()(())((()))) (()) (()(())((()))) (((()))) (()(())((()))) (())\") == [3, 4, 2, 4, 4, 4, 2]", "assert parse_nested_parens(\"(()) (()) (()(())((()))) (()) (((()))) (((()))) ((())()())\") == [2, 2, 4, 2, 4, 4, 3]", "assert parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) ((())()()) (((()))) (()(())((()))) ((())()())\") == [4, 4, 4, 3, 4, 4, 3]", "assert parse_nested_parens(\"() ((())) ((())()()) () ((())()()) (()()) () () ((())) (()()) ((())) ((())()())\") == [1, 3, 3, 1, 3, 2, 1, 1, 3, 2, 3, 3]", "assert parse_nested_parens(\"(()) (()()) ((())()()) (()()) () () ((())) () ((())()()) (((()))) (((()))) ()\") == [2, 2, 3, 2, 1, 1, 3, 1, 3, 4, 4, 1]", "assert parse_nested_parens(\"(()()) ((())()()) ((())) (()())\") == [2, 3, 3, 2]", "assert parse_nested_parens(\"((())()()) ((())) ((())()()) (()()) (()) ((())()()) (((()))) (((()))) ((())()()) ((())) ((())()()) () (()()) (()()) ((())()()) (()) ((())) ((())()())\") == [3, 3, 3, 2, 2, 3, 4, 4, 3, 3, 3, 1, 2, 2, 3, 2, 3, 3]", "assert parse_nested_parens(\"(()()) () (()()) (()())\") == [2, 1, 2, 2]", "assert parse_nested_parens(\"(((()))) ((())) () ((())()()) (()()) (()()) () ((())) ((())) (()()) (((()))) (()())\") == [4, 3, 1, 3, 2, 2, 1, 3, 3, 2, 4, 2]", "assert parse_nested_parens(\"((())()()) ((())) ((())()()) () ((())) (()()) ((())()()) (()())\") == [3, 3, 3, 1, 3, 2, 3, 2]", "assert parse_nested_parens(\"(()) ((())) ((())) ((())()()) () ((()))\") == [2, 3, 3, 3, 1, 3]", "assert parse_nested_parens(\"(()()) (()()) (()()) () () ((())) ((())()()) ()\") == [2, 2, 2, 1, 1, 3, 3, 1]", "assert parse_nested_parens(\"(()) (()(())((()))) ((())()()) (()()) (((()))) ((())()()) ((())()())\") == [2, 4, 3, 2, 4, 3, 3]", "assert parse_nested_parens(\"((())) () (((()))) (((()))) (()()) (((())))\") == [3, 1, 4, 4, 2, 4]", "assert parse_nested_parens(\"() ((())) () (()()) (((()))) ((())) (()()) () (()) (((()))) (()(())((()))) (((()))) (((()))) ()\") == [1, 3, 1, 2, 4, 3, 2, 1, 2, 4, 4, 4, 4, 1]", "assert parse_nested_parens(\"((())) ((())()()) () ((()))\") == [3, 3, 1, 3]", "assert parse_nested_parens(\"(()()) (()()) () ((()))\") == [2, 2, 1, 3]", "assert parse_nested_parens(\"(((()))) () (()) () (()) (())\") == [4, 1, 2, 1, 2, 2]", "assert parse_nested_parens(\"() ((())()()) () ((())) (()()) () () () () (()()) ((())) ((()))\") == [1, 3, 1, 3, 2, 1, 1, 1, 1, 2, 3, 3]", "assert parse_nested_parens(\"((())) ((())) (()()) (()()) ((())()()) ((())) ((())) ((())()())\") == [3, 3, 2, 2, 3, 3, 3, 3]", "assert parse_nested_parens(\"((())) () ((())()()) (((()))) (()) (((()))) () ((())) (()()) (()) (((()))) (()())\") == [3, 1, 3, 4, 2, 4, 1, 3, 2, 2, 4, 2]", "assert parse_nested_parens(\"(()()) (()) ((())) () () () ((()))\") == [2, 2, 3, 1, 1, 1, 3]", "assert parse_nested_parens(\"((())()()) (((()))) ((())()()) ((())) ((())()()) (())\") == [3, 4, 3, 3, 3, 2]", "assert parse_nested_parens(\"((())()()) ((())) ((())) (()()) ((())()()) () () ()\") == [3, 3, 3, 2, 3, 1, 1, 1]", "assert parse_nested_parens(\"(()()) (()()) () (()()) ((())()()) (()()) () (()()) ((())) () () (()())\") == [2, 2, 1, 2, 3, 2, 1, 2, 3, 1, 1, 2]", "assert parse_nested_parens(\"(()) (((()))) (()) (()) ((())) () ((())) ((())()()) ((())) (()) (()()) (((())))\") == [2, 4, 2, 2, 3, 1, 3, 3, 3, 2, 2, 4]", "assert parse_nested_parens(\"(((()))) (((()))) () (()()) ((())()()) () (()(())((()))) (()(())((()))) (()()) () (()()) (()) (()) ((())()())\") == [4, 4, 1, 2, 3, 1, 4, 4, 2, 1, 2, 2, 2, 3]", "assert parse_nested_parens(\"((())()()) (((()))) ((())) ((())) ((())) ((())()()) ((())()()) (()()) () () (()(())((()))) ((())) ((())()()) (()(())((()))) () ((())()()) (((()))) (((()))) (()(())((()))) ((())()()) ()\") == [3, 4, 3, 3, 3, 3, 3, 2, 1, 1, 4, 3, 3, 4, 1, 3, 4, 4, 4, 3, 1]", "assert parse_nested_parens(\"() ((())) ((())()()) ((())) () (()()) () (()())\") == [1, 3, 3, 3, 1, 2, 1, 2]", "assert parse_nested_parens(\"(()) (()()) () (()()) ((())()()) ((())) ((())) (()) ((())()()) () ((())()()) (()()) () (()) ((())) (()()) (()()) ((())()())\") == [2, 2, 1, 2, 3, 3, 3, 2, 3, 1, 3, 2, 1, 2, 3, 2, 2, 3]", "assert parse_nested_parens('() (()) ((())) (((())))') == [1, 2, 3, 4]", "assert parse_nested_parens(\"(()()) (((()))) (((()))) (()) (()()) (((()))) () (((()))) (()) ((())) () ()\") == [2, 4, 4, 2, 2, 4, 1, 4, 2, 3, 1, 1]", "assert parse_nested_parens(\"(()()) (((()))) (((()))) (()()) (((()))) ((())) ((())()()) (()) ((())()()) (((()))) (()()) () (()) (((()))) () (()(())((()))) () (()) (()(())((()))) ((())) ((())()())\") == [2, 4, 4, 2, 4, 3, 3, 2, 3, 4, 2, 1, 2, 4, 1, 4, 1, 2, 4, 3, 3]", "assert parse_nested_parens(\"() (()(())((()))) (()) (()()) ((())()()) (()()) (()())\") == [1, 4, 2, 2, 3, 2, 2]", "assert parse_nested_parens(\"((())()()) (()(())((()))) (()()) (()()) ((())()()) (()()) ((())) () () (()()) (()(())((()))) ((())()()) (()()) ((())()()) (((()))) (()(())((()))) (()()) () ((())()()) ((())()()) ()\") == [3, 4, 2, 2, 3, 2, 3, 1, 1, 2, 4, 3, 2, 3, 4, 4, 2, 1, 3, 3, 1]", "assert parse_nested_parens(\"((())()()) () () (()()) (()()) (()()) ((())) (()())\") == [3, 1, 1, 2, 2, 2, 3, 2]", "assert parse_nested_parens(\"() ((())()()) (()()) (()) ((())()()) () (((()))) ((())()()) () (()) (()) ((())()()) (()) (()) (()) ((())) ((())) (((())))\") == [1, 3, 2, 2, 3, 1, 4, 3, 1, 2, 2, 3, 2, 2, 2, 3, 3, 4]", "assert parse_nested_parens(\"(()(())((()))) () (()(())((()))) (()) (((()))) ((())()()) ((())()()) ((())) ((())()()) (()(())((()))) ((())) (()(())((()))) ((())) ((())()())\") == [4, 1, 4, 2, 4, 3, 3, 3, 3, 4, 3, 4, 3, 3]", "assert parse_nested_parens(\"(()()) (((()))) () (()) (()) ((())) (()()) () () ((())()()) (()) ((()))\") == [2, 4, 1, 2, 2, 3, 2, 1, 1, 3, 2, 3]", "assert parse_nested_parens(\"(()) ((())()()) (()()) ((())()()) (((()))) (()()) (()(())((()))) (()()) (()(())((()))) ((())) (()) ((())) (()()) (()) (()()) () ((())) ((())) ((())) ((())) (()())\") == [2, 3, 2, 3, 4, 2, 4, 2, 4, 3, 2, 3, 2, 2, 2, 1, 3, 3, 3, 3, 2]", "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]", "assert parse_nested_parens(\"((())) ((())) ((())()()) ((())) ((())()()) ((())) () ()\") == [3, 3, 3, 3, 3, 3, 1, 1]", "assert parse_nested_parens(\"((())) (()()) () ((())()())\") == [3, 2, 1, 3]", "assert parse_nested_parens(\"((())()()) () (()()) ((())) (()()) () ((())()()) ((()))\") == [3, 1, 2, 3, 2, 1, 3, 3]", "assert parse_nested_parens(\"(((()))) () (()) (((()))) ((())) (()) ((())()()) ((())()()) () ((())()()) (()) ((())()())\") == [4, 1, 2, 4, 3, 2, 3, 3, 1, 3, 2, 3]", "assert parse_nested_parens(\"((())()()) () (()()) ((())) ((())()()) ((())()())\") == [3, 1, 2, 3, 3, 3]", "assert parse_nested_parens(\"((())()()) () ((())) () (()()) ((())) ((())()()) () () ((())()()) () (()())\") == [3, 1, 3, 1, 2, 3, 3, 1, 1, 3, 1, 2]", "assert parse_nested_parens(\"() ((())) (()()) (((()))) () ((())) (((()))) () (()) () () ((())()()) (()) (()()) ((())) (((()))) (()) (())\") == [1, 3, 2, 4, 1, 3, 4, 1, 2, 1, 1, 3, 2, 2, 3, 4, 2, 2]", "assert parse_nested_parens(\"((())()()) () ((())()()) ((())()()) ((())) () ((())()()) ((())) () ((())()()) (()()) (()())\") == [3, 1, 3, 3, 3, 1, 3, 3, 1, 3, 2, 2]", "assert parse_nested_parens(\"() (()()) ((())()()) (()(())((()))) (((()))) (()(())((()))) ((())()()) (()) (()()) (((()))) (()) (()) (()()) (((()))) (((()))) () (()) ((())) () (()) (()())\") == [1, 2, 3, 4, 4, 4, 3, 2, 2, 4, 2, 2, 2, 4, 4, 1, 2, 3, 1, 2, 2]", "assert parse_nested_parens(\"(((()))) () (((()))) (()()) ((())) () (()()) (((()))) (()()) (((()))) () ()\") == [4, 1, 4, 2, 3, 1, 2, 4, 2, 4, 1, 1]", "assert parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) () (()) () ((())) (()) (()()) (((()))) ((())) () () (()) () () (()) () ((())) (()(())((()))) ((()))\") == [4, 4, 4, 1, 2, 1, 3, 2, 2, 4, 3, 1, 1, 2, 1, 1, 2, 1, 3, 4, 3]", "assert parse_nested_parens(\"(()) (()) (()()) ((())()()) (()) (()()) ((())) (()()) (()(())((()))) (()(())((()))) ((())()()) ((())) (((()))) (()(())((()))) ((())) ((())) (()(())((()))) () ((())) ((())) ((())()())\") == [2, 2, 2, 3, 2, 2, 3, 2, 4, 4, 3, 3, 4, 4, 3, 3, 4, 1, 3, 3, 3]", "assert parse_nested_parens(\"((())) () (()) ((())()()) (()()) ((())) (()) () () (((()))) (((()))) (())\") == [3, 1, 2, 3, 2, 3, 2, 1, 1, 4, 4, 2]", "assert parse_nested_parens(\"\") == []", "assert parse_nested_parens(\"((())()()) (()) (()()) ((())) () ((())) ((())()()) () () (()) (()) (((()))) (((()))) ((())) () () (()()) (())\") == [3, 2, 2, 3, 1, 3, 3, 1, 1, 2, 2, 4, 4, 3, 1, 1, 2, 2]", "assert parse_nested_parens(\"((())) ((())()()) ((())) (()()) ((())()()) () (()()) ((()))\") == [3, 3, 3, 2, 3, 1, 2, 3]", "assert parse_nested_parens(\"((())()()) ((())()()) ((())()()) ((())) (()()) ((())) ((())()()) ((())()()) ((())()()) () ((())) (()())\") == [3, 3, 3, 3, 2, 3, 3, 3, 3, 1, 3, 2]", "assert parse_nested_parens(\"((())()()) (()) () (((()))) ((())()()) ((())()()) (((()))) (()) (((()))) () (((()))) ((())()()) (()()) (()) (()) (()) () (())\") == [3, 2, 1, 4, 3, 3, 4, 2, 4, 1, 4, 3, 2, 2, 2, 2, 1, 2]", "assert parse_nested_parens(\"(()()) (()) ((())()()) ((())()()) () ((()))\") == [2, 2, 3, 3, 1, 3]", "assert parse_nested_parens(\"(()()) () ((())()()) () ((())) () ((())) ()\") == [2, 1, 3, 1, 3, 1, 3, 1]", "assert parse_nested_parens(\"((())) () (()()) ()\") == [3, 1, 2, 1]", "assert parse_nested_parens(\"((())) ((())) (()()) ((())()()) () ((())()()) ((())()()) ((())) (()()) ((())) () ((())()())\") == [3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 1, 3]", "assert parse_nested_parens(\"(()()) () (()()) ((())) () ((())()()) (()()) ((())()())\") == [2, 1, 2, 3, 1, 3, 2, 3]", "assert parse_nested_parens(\"(((()))) (()) () ((())()()) (()()) () (()()) (()(())((()))) (()(())((()))) ((())) (((()))) (()(())((()))) ((())()()) ()\") == [4, 2, 1, 3, 2, 1, 2, 4, 4, 3, 4, 4, 3, 1]", "assert parse_nested_parens(\"(()()) (()()) () (()())\") == [2, 2, 1, 2]", "assert parse_nested_parens(\"((())) ((())) (((()))) (()) (()()) (()()) () ((())) ((())()()) () (()(())((()))) (()()) (()(())((()))) ((()))\") == [3, 3, 4, 2, 2, 2, 1, 3, 3, 1, 4, 2, 4, 3]", "assert parse_nested_parens(\"(()()) (()()) () (()) () (()()) (()) (()) (((()))) () (()()) (())\") == [2, 2, 1, 2, 1, 2, 2, 2, 4, 1, 2, 2]", "assert parse_nested_parens('(()(())((())))') == [4]", "assert parse_nested_parens(\"((())) (()) (((()))) () (()()) (((()))) ((())()()) ((())) (()()) ((())()()) (((()))) ((())) (()) ((())) ((())) () ((())) ((())()())\") == [3, 2, 4, 1, 2, 4, 3, 3, 2, 3, 4, 3, 2, 3, 3, 1, 3, 3]", "assert parse_nested_parens(\"(()) ((())()()) (()) ((())) ((())) ((())()()) (((()))) () ((())()()) (()(())((()))) ((())) ((())()()) ((())()()) (())\") == [2, 3, 2, 3, 3, 3, 4, 1, 3, 4, 3, 3, 3, 2]", "assert parse_nested_parens(\"(()()) ((())()()) (()()) ()\") == [2, 3, 2, 1]", "assert parse_nested_parens(\"(()(())((()))) ((())()()) (((()))) (()(())((()))) () (()(())((()))) ()\") == [4, 3, 4, 4, 1, 4, 1]", "assert parse_nested_parens(\"((())) ((())) ((())()()) () ((())) ((())) (()()) ((())()()) (((()))) () (()) (((())))\") == [3, 3, 3, 1, 3, 3, 2, 3, 4, 1, 2, 4]", "assert parse_nested_parens(\"((())) (((()))) ((())) (()()) (()()) ((())()()) (()) (()(())((()))) (()) ((())) (()) ((())) () (((())))\") == [3, 4, 3, 2, 2, 3, 2, 4, 2, 3, 2, 3, 1, 4]", "assert parse_nested_parens(\"((())) ((())) ((())()()) (()()) () (()(())((()))) (()()) (((()))) (((()))) ((())()()) (()()) () () ((())) (((()))) (()(())((()))) (((()))) ((())()()) ((())) (()(())((()))) (())\") == [3, 3, 3, 2, 1, 4, 2, 4, 4, 3, 2, 1, 1, 3, 4, 4, 4, 3, 3, 4, 2]", "assert parse_nested_parens(\"(()) () (((()))) () (((()))) (()()) (()) (((()))) (()(())((()))) (((()))) () (()()) (()(())((()))) (()()) (()(())((()))) (()()) (((()))) (()()) (((()))) (()) (()())\") == [2, 1, 4, 1, 4, 2, 2, 4, 4, 4, 1, 2, 4, 2, 4, 2, 4, 2, 4, 2, 2]"], "nl": " Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    ", "func": "def parse_nested_parens(paren_string: str) -> List[int]:", "examples": ">>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    ", "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three. Consider edge cases where there are no parentheses, or parentheses are unbalanced.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n\n    def get_deepest_level(group: str) -> int:\n        stack = []\n        max_level = 0\n        current_level = 0\n\n        for char in group:\n            if char == '(':\n                stack.append('(')\n                current_level = len(stack)\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                if stack:\n                    stack.pop()\n                current_level = len(stack)\n\n        return max_level\n\n    if not paren_string:\n        return []\n\n    groups = paren_string.split()\n    result = [get_deepest_level(group) for group in groups]\n\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three. Consider edge cases where there are no parentheses, or parentheses are unbalanced.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n\n    def find_deepest_level(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n\n        for char in s:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n\n        return max_depth\n\n    if not paren_string:\n        return []\n\n    groups = paren_string.split()\n    result = []\n\n    for group in groups:\n        result.append(find_deepest_level(group))\n\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List, Optional\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three. Consider edge cases where there are no parentheses, or parentheses are unbalanced.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    \n    if not paren_string:\n        return []\n    \n    if paren_string.count('(') != paren_string.count(')'):\n        return None\n    \n    depths = []\n    max_depth = 0\n    current_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            if current_depth == 0:\n                return None\n            current_depth -= 1\n    \n    if current_depth != 0:\n        return None\n    \n    return [max_depth]\n\n", "from typing import List\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. For example, (()()) has maximum two levels of nesting while ((())) has three. Consider edge cases where there are no parentheses, or parentheses are unbalanced.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    \n    if not paren_string:\n        return []\n    \n    deepest_levels = []\n    for group in paren_string.split():\n        stack = []\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                stack.append(char)\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                if stack:\n                    stack.pop()\n                    current_depth -= 1\n        \n        deepest_levels.append(max_depth)\n    \n    return deepest_levels\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. For example, (()()) has maximum two levels of nesting while ((())) has three. Consider edge cases where there are no parentheses, or parentheses are unbalanced.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    \n    if not paren_string:\n        return []\n    \n    max_depth = 0\n    current_depth = 0\n    result = []\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        \n        if char == ' ':\n            result.append(max_depth)\n            max_depth = 0\n    \n    result.append(max_depth)\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses.\n    For example, (()()) has maximum two levels of nesting while ((())) has three.\n    Consider edge cases where there are no parentheses, or parentheses are unbalanced.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    \n    def calculate_depth(s: str) -> int:\n        depth = 0\n        max_depth = 0\n        \n        for char in s:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        \n        return max_depth\n    \n    result = []\n    \n    groups = paren_string.split()\n    \n    for group in groups:\n        result.append(calculate_depth(group))\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''\n    Input: a string representing multiple groups of nested parentheses separated by spaces\n    Output: a list of integers representing the deepest level of nesting of parentheses in each group\n    '''\n    \n    if not paren_string:\n        return []  # Return an empty list if input string is empty\n    \n    stack = []\n    max_depth = 0\n    depths = []\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            max_depth = max(max_depth, len(stack))\n        elif char == ')':\n            if not stack:\n                return None  # Return None if parentheses are unbalanced\n            stack.pop()\n    \n    if stack:\n        return None  # Return None if parentheses are unbalanced\n    \n    return [max_depth]  # Return the deepest level of nesting as a list\n\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three. Consider edge cases where there are no parentheses, or parentheses are unbalanced.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    \n    if not paren_string:\n        return []\n    \n    levels = []\n    current_level = 0\n    max_level = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n        \n        if char == ' ':\n            levels.append(max_level)\n            max_level = 0\n    \n    levels.append(max_level)\n    \n    return levels\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three. Consider edge cases where there are no parentheses, or parentheses are unbalanced.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    \n    if not paren_string:\n        return []\n    \n    max_nesting = 0\n    current_nesting = 0\n    stack = []\n    result = []\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            current_nesting += 1\n            max_nesting = max(max_nesting, current_nesting)\n        elif char == ')':\n            stack.pop()\n            current_nesting -= 1\n        if not stack:\n            result.append(max_nesting)\n            max_nesting = 0\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''\n    Input: a string representing multiple groups of nested parentheses separated by spaces\n    Output: a list of integers representing the deepest level of nesting for each group\n    '''\n\n    if not paren_string:\n        return []  # Return empty list if input string is empty\n\n    stack = []\n    result = []\n    max_depth = 0\n    current_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            if not stack:\n                return None  # Return None if parentheses are unbalanced\n            stack.pop()\n            current_depth -= 1\n        elif char == ' ':\n            result.append(max_depth)\n            max_depth = 0\n\n    if stack:\n        return None  # Return None if parentheses are unbalanced\n\n    result.append(max_depth)\n\n    return result\n\n"], "plans": ["requirement pool:\n- Efficiently parse nested parentheses with accurate depth calculation\n- Handle edge cases such as no parentheses or unbalanced parentheses gracefully\n- Optimize parsing algorithm for improved efficiency\nWe will design a static Python function using basic string manipulation and stack data structure to efficiently parse nested parentheses and accurately determine the deepest level of nesting for each group.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: The core concept refers to the structure where parentheses are enclosed within each other, forming nested levels.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'deepest': Refers to the maximum level of nesting of parentheses within a group.\n\n# [code logic]\n    The logic involves iterating through the input string, maintaining a stack to keep track of nested levels, and updating the maximum level encountered for each group.\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: When there are no parentheses in the input string, the output should be an empty list.\n    parse_nested_parens('()(()') = [1, 1]\n    Explanation: The parentheses are unbalanced in the second group, so the output should only consider the first two groups.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling unbalanced parentheses and empty string cases)\n", "requirement pool:\n- Efficiently parse nested parentheses for accurate depth calculation\n- Handle edge cases such as no parentheses or unbalanced parentheses gracefully\n- Optimize parsing algorithm for improved efficiency\nWe will design a static Python function using appropriate open-source libraries to efficiently parse nested parentheses and accurately determine the deepest level of nesting for each group of parentheses.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: The core concept is to identify and analyze the nesting levels of parentheses in the input string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using open-source libraries, the code logic may involve utilizing existing libraries or functions to efficiently parse and determine the nesting levels of parentheses in each group.\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: When there are no parentheses in the input string, the output should be an empty list.\n    parse_nested_parens('(()') = [2]\n    Explanation: The input has unbalanced parentheses, so the output should consider the deepest level of nesting before the unbalance occurs.\n    parse_nested_parens('()()()') = [1, 1, 1]\n    Explanation: Each group has a nesting level of 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- Efficiently parse nested parentheses with accurate depth calculation\n- Handle edge cases such as no parentheses or unbalanced parentheses gracefully\n- Optimize the function for efficient parsing of nested parentheses\nWe will use the built-in stack data structure in Python to efficiently parse the nested parentheses and calculate the depth. We will iterate through the input string character by character, keeping track of the current depth using the stack. We will handle edge cases such as no parentheses or unbalanced parentheses by checking for valid nesting at each step.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: The core concept is to identify the level of nesting of parentheses in each group within the input string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will use the built-in stack data structure in Python to efficiently parse the nested parentheses and calculate the depth. We will iterate through the input string character by character, keeping track of the current depth using the stack. We will handle edge cases such as no parentheses or unbalanced parentheses by checking for valid nesting at each step.\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: There are no parentheses in the input string, so the output should be an empty list.\n    parse_nested_parens('(()()') = None\n    Explanation: The parentheses are unbalanced, so the function should return None.\n    parse_nested_parens('((())') = None\n    Explanation: The parentheses are unbalanced, so the function should return None.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not paren_string:\n            return []\n        if paren_string.count('(') != paren_string.count(')'):\n            return None\n        (other code)\n", "requirement pool:\n- Efficiently parse nested parentheses with accurate depth calculation\n- Handle edge cases like no parentheses or unbalanced parentheses gracefully\n- Optimize performance for large input strings\nWe will design a static Python function using basic string manipulation and stack data structure to efficiently parse nested parentheses and calculate the deepest nesting level.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: The core concept refers to the structure where parentheses are enclosed within each other, forming nested levels.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic string manipulation and stack data structure, the logic should involve:\n    1. Initialize a stack to keep track of opening parentheses.\n    2. Iterate through the input string character by character.\n    3. When encountering an opening parenthesis, push it onto the stack.\n    4. When encountering a closing parenthesis, pop from the stack and update the deepest nesting level.\n    5. Return a list of deepest nesting levels for each group.\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: When there are no parentheses in the input string, the output should be an empty list.\n    parse_nested_parens('()(()') = [1, 1]\n    Explanation: The parentheses are unbalanced in the second group, so the deepest nesting level for each group is 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not paren_string:\n            return []\n        (other code)\n", "requirement pool:\n- Efficiently parse nested parentheses with accurate depth calculation\n- Handle edge cases such as no parentheses or unbalanced parentheses gracefully\n- Optimize parsing algorithm for improved performance\nWe will design a static Python function using basic string manipulation and stack data structure to efficiently parse nested parentheses and accurately determine the deepest level of nesting for each group.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: The core concept refers to the structure where parentheses are enclosed within each other, forming nested levels.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'deepest': refers to the maximum level of nesting of parentheses within a group\n\n# [code logic]\n    The logic involves iterating through the input string character by character, maintaining a stack to keep track of nested levels. When encountering an opening parenthesis, increment the current nesting level. When encountering a closing parenthesis, update the maximum nesting level if needed and decrement the current nesting level. Return a list of deepest nesting levels for each group.\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: In this case, there are no parentheses present, so the output should be an empty list.\n    parse_nested_parens('(()') = [1]\n    Explanation: The parentheses are unbalanced, but the deepest level of nesting for the only group is 1.\n    parse_nested_parens('()()()') = [1, 1, 1]\n    Explanation: Each group has a nesting level of 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not paren_string:\n            return []\n        (other code)\n", "requirement pool:\n- Efficiently parse nested parentheses with accurate depth calculation\n- Handle edge cases such as no parentheses or unbalanced parentheses gracefully\n- Ensure the function is optimized for performance and scalability\nWe will use the built-in stack data structure in Python to efficiently parse the nested parentheses and calculate the depth. No external libraries are needed for this simple function.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: The core concept is to identify and calculate the depth of nested parentheses in the input string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: There are no parentheses in the input string, so the output should be an empty list.\n    parse_nested_parens('(()') = [1]\n    Explanation: The parentheses are unbalanced, so the deepest level of nesting is 1.\n    parse_nested_parens('()()()') = [1, 1, 1]\n    Explanation: Each group has a depth of 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- Implement efficient parsing algorithm for nested parentheses\n- Handle edge cases like no parentheses or unbalanced parentheses\n- Ensure the function returns the correct deepest level of nesting\nWe will design a static Python function using basic string manipulation and stack data structure to efficiently parse nested parentheses.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: Refers to the structure where parentheses are enclosed within each other, forming multiple levels of nesting.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: When there are no parentheses in the input string, the function should return an empty list.\n    parse_nested_parens('()(()') = None\n    Explanation: The parentheses in the input string are unbalanced, so the function should return None.\n    parse_nested_parens('((())') = None\n    Explanation: The parentheses in the input string are unbalanced, so the function should return None.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- Efficiently parse nested parentheses in the input string\n- Handle cases where there are no parentheses in the input\n- Correctly identify and handle unbalanced parentheses scenarios\nWe will use the built-in Python libraries to efficiently parse the nested parentheses in the input string.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: The core concept is to identify and count the levels of nested parentheses in the input string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python libraries, the code logic may involve using stack data structure or recursion to handle nested parentheses efficiently.\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: When there are no parentheses in the input string, the function should return an empty list.\n    parse_nested_parens('()(()') = [1, 2]\n    Explanation: The parentheses are unbalanced, so the function should return the levels of nesting until the unbalanced point.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- Efficiently parse nested parentheses in a string\n- Handle edge cases like no parentheses or unbalanced parentheses\n- Ensure accurate calculation of the deepest level of nesting\nWe will design a static Python function using basic string manipulation and stack data structure to efficiently parse nested parentheses in the input string.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: Refers to the structure where parentheses are enclosed within each other, forming multiple levels of nesting.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic string manipulation and stack data structure, the following detailed logic can be considered:\n    1. Initialize a stack to keep track of opening parentheses.\n    2. Iterate through the input string character by character.\n    3. If an opening parenthesis is encountered, push it onto the stack.\n    4. If a closing parenthesis is encountered, pop from the stack and update the maximum nesting level.\n    5. Return a list containing the nesting level for each group of parentheses.\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: When there are no parentheses in the input string, the function should return an empty list.\n    parse_nested_parens('()(()') = [1, 1]\n    Explanation: The parentheses are unbalanced, so the function should return the nesting level for each valid group.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not paren_string:\n            return []\n        (other code)\n", "requirement pool:\n- Implement a function to parse nested parentheses efficiently\n- Handle edge cases such as no parentheses or unbalanced parentheses\n- Optimize the algorithm for accurate depth calculation\nWe will design a static Python function using basic string manipulation and stack data structure to efficiently parse nested parentheses.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: The core concept here refers to the structure where parentheses are enclosed within each other, forming nested levels.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: There are no parentheses in the input string, so the output should be an empty list.\n    parse_nested_parens('((())') = None\n    Explanation: The parentheses are unbalanced, so the function should return None.\n    parse_nested_parens('()()()') = [1, 1, 1]\n    Explanation: Each group has a single level of nesting.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n"], "scores": [1.0, 1.0, 0.0202, 1.0, 1.0, 1.0, 0.0202, 1.0, 0.0202, 1.0], "pass_results": [true, true, false, true, true, true, false, true, false, true], "pass_test_cases_num": [99, 99, 2, 99, 99, 99, 2, 99, 2, 99], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''\n    Input: a string representing multiple groups of nested parentheses separated by spaces\n    Output: a list of integers representing the deepest level of nesting for each group\n    '''\n\n    if not paren_string:\n        return []  # Return empty list if input string is empty\n\n    stack = []\n    result = []\n    max_depth = 0\n    current_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            if not stack:\n                return None  # Return None if parentheses are unbalanced\n            stack.pop()\n            current_depth -= 1\n        elif char == ' ':\n            result.append(max_depth)\n            max_depth = 0\n\n    if stack:\n        return None  # Return None if parentheses are unbalanced\n\n    result.append(max_depth)\n\n    return result\n\n", "passed": true, "pass": true, "pass_num": 7, "round": 750, "repair_prompt": ["def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three. Consider edge cases where there are no parentheses, or parentheses are unbalanced.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. For example, (()()) has maximum two levels of nesting while ((())) has three. Consider edge cases where there are no parentheses, or parentheses are unbalanced.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function is a string represented multiple groups for nested parentheses separated by spaces, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three. Consider edge cases where there are no parentheses, or parentheses are unbalanced.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 304}
