{"task_id": "HumanEval/120", "prompt": "def maximum(arr, k):\t\n'''Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr.\nExample 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    '''", "entry_point": "maximum", "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "test": ["def check(maximum):\n\tassert maximum([2, 1, 1], 1) == [2]", "def check(maximum):\n\tassert maximum([5, 5, 4, -12], 4) == [-12, 4, 5, 5]", "def check(maximum):\n\tassert maximum([4, 6, 5, -18, 248, -403, 5], 3) == [5, 6, 248]", "def check(maximum):\n\tassert maximum([2, 3, 5, 3, 1, -15], 3) == [3, 3, 5]", "def check(maximum):\n\tassert maximum([4, 5, 5, -22, 241, -401, 1], 1) == [241]", "def check(maximum):\n\tassert maximum([1, 12, 2, 1, -11, -4, 5], 5) == [1, 1, 2, 5, 12]", "def check(maximum):\n\tassert maximum([8, 13, 4, 2, -11, -4, 1], 11) == [-11, -4, 1, 2, 4, 8, 13]", "def check(maximum):\n\tassert maximum([3, -4, 7], 3) == [-4, 3, 7]", "def check(maximum):\n\tassert maximum([-123, 23, 1, 3, 3, 1], 9) == [-123, 1, 1, 3, 3, 23]", "def check(maximum):\n\tassert maximum([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.", "def check(maximum):\n\tassert maximum([-9, 11], 3) == [-9, 11]", "def check(maximum):\n\tassert maximum([6, 6, 2, -24, 240, -402, 4], 1) == [240]", "def check(maximum):\n\tassert maximum([-11, 5], 4) == [-11, 5]", "def check(maximum):\n\tassert maximum([6, 1, 3, -26, 247, -400, 1], 1) == [247]", "def check(maximum):\n\tassert maximum([-119, 24, 5, 4, 1, -8], 9) == [-119, -8, 1, 4, 5, 24]", "def check(maximum):\n\tassert maximum([-123, 24, 3, 4, 2, -7], 6) == [-123, -7, 2, 3, 4, 24]", "def check(maximum):\n\tassert maximum([-3, -4, 5], 3) == [-4, -3, 5]", "def check(maximum):\n\tassert maximum([3, 3, 2, -27, 243, -396, 5], 3) == [3, 5, 243]", "def check(maximum):\n\tassert maximum([4, -4, 4], 2) == [4, 4]", "def check(maximum):\n\tassert maximum([4, 1, 9, -3], 3) == [1, 4, 9]", "def check(maximum):\n\tassert maximum([2, 5, 1, 2, -6, -2, 5], 6) == [-2, 1, 2, 2, 5, 5]", "def check(maximum):\n\tassert maximum([0, 5, 2, 7, 2, -15], 3) == [2, 5, 7]", "def check(maximum):\n\tassert maximum([-1, 5, 3, 6, -2, -7, 6], 3) == [5, 6, 6]", "def check(maximum):\n\tassert maximum([5, 3, 7, -2], 3) == [3, 5, 7]", "def check(maximum):\n\tassert maximum([2, 1, 9], 1) == [9]", "def check(maximum):\n\tassert maximum([8, 15, 1, 4, -14, -5, 2], 6) == [-5, 1, 2, 4, 8, 15]", "def check(maximum):\n\tassert maximum([-3, 1, 7, 7, 4, -12], 7) == [-12, -3, 1, 4, 7, 7]", "def check(maximum):\n\tassert maximum([7, -2], 7) == [-2, 7]", "def check(maximum):\n\tassert maximum([6, -5], 2) == [-5, 6]", "def check(maximum):\n\tassert maximum([-8, 5], 6) == [-8, 5]", "def check(maximum):\n\tassert maximum([-126, 15, 4, 3, 4, -4], 3) == [4, 4, 15]", "def check(maximum):\n\tassert maximum([5, -2, 1], 6) == [-2, 1, 5]", "def check(maximum):\n\tassert maximum([10, 12, 1, 2, -11, -6, 2], 4) == [2, 2, 10, 12]", "def check(maximum):\n\tassert maximum([-2, 5, 5, 5, -1, 2, 3], 6) == [-1, 2, 3, 5, 5, 5]", "def check(maximum):\n\tassert maximum([-6, -2, 5], 2) == [-2, 5]", "def check(maximum):\n\tassert maximum([3, -9, 1], 4) == [-9, 1, 3]", "def check(maximum):\n\tassert maximum([119, -119, 21, 2, 4, 4, -3], 3) == [4, 21, 119]", "def check(maximum):\n\tassert maximum([2, 6, 6, 3, 4, 3, 1], 2) == [6, 6]", "def check(maximum):\n\tassert maximum([7, -9, 7], 7) == [-9, 7, 7]", "def check(maximum):\n\tassert maximum([118, -119, 17, 4, 1, 1, -7], 2) == [17, 118]", "def check(maximum):\n\tassert maximum([-1, -2, 3], 3) == [-2, -1, 3]", "def check(maximum):\n\tassert maximum([8, -2, 4], 3) == [-2, 4, 8]", "def check(maximum):\n\tassert maximum([-1, 3, 4, 7, 2, -3, 6], 1) == [7]", "def check(maximum):\n\tassert maximum([-14, 6], 4) == [-14, 6]", "def check(maximum):\n\tassert maximum([122, -124, 25, 1, 1, 1, -2], 2) == [25, 122]", "def check(maximum):\n\tassert maximum([1, 1, 2, -2], 2) == [1, 2]", "def check(maximum):\n\tassert maximum([3, 15, 5, 4, -16, -10, 4], 11) == [-16, -10, 3, 4, 4, 5, 15]", "def check(maximum):\n\tassert maximum([8, -6], 7) == [-6, 8]", "def check(maximum):\n\tassert maximum([-12, 8], 2) == [-12, 8]", "def check(maximum):\n\tassert maximum([10, 16, 5, 2, -12, -3, 1], 7) == [-12, -3, 1, 2, 5, 10, 16]", "def check(maximum):\n\tassert maximum([-119, 16, 5, 2, 3, -6], 8) == [-119, -6, 2, 3, 5, 16]", "def check(maximum):\n\tassert maximum([5, 1, 4], 2) == [4, 5]", "def check(maximum):\n\tassert maximum([-1, 2, 1, 5, 6, -13], 2) == [5, 6]", "def check(maximum):\n\tassert maximum([-13, 13], 7) == [-13, 13]", "def check(maximum):\n\tassert maximum([-1, 0, 2, 5, 3, -10], 2) == [3, 5]", "def check(maximum):\n\tassert maximum([4, -6, 8], 4) == [-6, 4, 8]", "def check(maximum):\n\tassert maximum([-2, 1, 1], 1) == [1]", "def check(maximum):\n\tassert maximum([2, 1], 1) == [2]", "def check(maximum):\n\tassert maximum([128, -128, 22, 2, 3, 1, -5], 6) == [-5, 1, 2, 3, 22, 128]", "def check(maximum):\n\tassert maximum([-120, 20, 2, 5, 1, -6], 7) == [-120, -6, 1, 2, 5, 20]", "def check(maximum):\n\tassert maximum([-5, 10], 6) == [-5, 10]", "def check(maximum):\n\tassert maximum([-1, 4, 7, 3, 8, -9], 7) == [-9, -1, 3, 4, 7, 8]", "def check(maximum):\n\tassert maximum([4, 3, 4, -20, 247, -400, 4], 4) == [4, 4, 4, 247]", "def check(maximum):\n\tassert maximum([-3, 1, 2], 4) == [-3, 1, 2]", "def check(maximum):\n\tassert maximum([-1, 2, 1, 2, -5, -5, 2], 3) == [2, 2, 2]", "def check(maximum):\n\tassert maximum([2, 13, 4, 6, -17, -3, 1], 7) == [-17, -3, 1, 2, 4, 6, 13]", "def check(maximum):\n\tassert maximum([-5, -6, 10], 1) == [10]", "def check(maximum):\n\tassert maximum([10, 12, 2, 1, -17, -3, 5], 4) == [2, 5, 10, 12]", "def check(maximum):\n\tassert maximum([119, -118, 15, 3, 3, 3, -8], 1) == [119]", "def check(maximum):\n\tassert maximum([2, -9], 4) == [-9, 2]", "def check(maximum):\n\tassert maximum([-9, 13], 3) == [-9, 13]", "def check(maximum):\n\tassert maximum([6, 0, 5], 4) == [0, 5, 6]", "def check(maximum):\n\tassert maximum([123, -128, 20, 4, 3, 2, 1], 6) == [1, 2, 3, 4, 20, 123]", "def check(maximum):\n\tassert maximum([5, 3, 2, -9], 5) == [-9, 2, 3, 5]", "def check(maximum):\n\tassert maximum([4, -9], 4) == [-9, 4]", "def check(maximum):\n\tassert maximum([1, 2, 3, -23, 243, -400, 0], 0) == []", "def check(maximum):\n\tassert maximum([4, -4], 2) == [-4, 4]", "def check(maximum):\n\tassert maximum([3, 2, 1, -9], 6) == [-9, 1, 2, 3]", "def check(maximum):\n\tassert maximum([1, 0, 5, -7], 1) == [5]", "def check(maximum):\n\tassert maximum([6, 0, 8], 2) == [6, 8]", "def check(maximum):\n\tassert maximum([0, -5, 10], 1) == [10]", "def check(maximum):\n\tassert maximum([-5, 3, 2, 8, 3, -10], 1) == [8]", "def check(maximum):\n\tassert maximum([6, 1, 3, -4], 6) == [-4, 1, 3, 6]", "def check(maximum):\n\tassert maximum([119, -119, 24, 5, 5, 7, -4], 6) == [-4, 5, 5, 7, 24, 119]", "def check(maximum):\n\tassert maximum([6, 5, 2, -10], 5) == [-10, 2, 5, 6]", "def check(maximum):\n\tassert maximum([3, 13, 3, 4, -9, -11, 3], 2) == [4, 13]", "def check(maximum):\n\tassert maximum([1, 1], 4) == [1, 1]", "def check(maximum):\n\tassert maximum([8, -4], 7) == [-4, 8]", "def check(maximum):\n\tassert maximum([9, -9], 1) == [9]", "def check(maximum):\n\tassert maximum([0, 3, 6, 2, -1, 3, 4], 4) == [3, 3, 4, 6]", "def check(maximum):\n\tassert maximum([8, 1, 2], 4) == [1, 2, 8]", "def check(maximum):\n\tassert maximum([-2, 2, 5, 2, 0, 2, 2], 4) == [2, 2, 2, 5]", "def check(maximum):\n\tassert maximum([6, -1], 5) == [-1, 6]", "def check(maximum):\n\tassert maximum([2, 2, 10, -3], 1) == [10]", "def check(maximum):\n\tassert maximum([3, 19, 4, 5, -13, -8, 5], 4) == [4, 5, 5, 19]", "def check(maximum):\n\tassert maximum([-4, 6, 4, 2, 4, -6, 5], 4) == [4, 4, 5, 6]", "def check(maximum):\n\tassert maximum([6, 5, 1, -19, 242, -403, 5], 3) == [5, 6, 242]", "def check(maximum):\n\tassert maximum([-3, 6, 3, 1, 0, -4, 6], 5) == [0, 1, 3, 6, 6]", "def check(maximum):\n\tassert maximum([1, 3, 3, 2, -2, -5, 5], 2) == [3, 5]", "def check(maximum):\n\tassert maximum([127, -124, 16, 1, 5, 7, -6], 7) == [-124, -6, 1, 5, 7, 16, 127]", "def check(maximum):\n\tassert maximum([-7, 10], 7) == [-7, 10]", "def check(maximum):\n\tassert maximum([7, 12, 4, 4, -16, -7, 3], 10) == [-16, -7, 3, 4, 4, 7, 12]", "def check(maximum):\n\tassert maximum([5, 2, 5, -11], 5) == [-11, 2, 5, 5]", "def check(maximum):\n\tassert maximum([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]", "def check(maximum):\n\tassert maximum([6, 7, 8, -20, 243, -398, 5], 3) == [7, 8, 243]", "def check(maximum):\n\tassert maximum([-10, 10], 3) == [-10, 10]", "def check(maximum):\n\tassert maximum([4, 5, 8, -28, 245, -402, 2], 4) == [4, 5, 8, 245]", "def check(maximum):\n\tassert maximum([125, -119, 24, 2, 3, 4, -4], 6) == [-4, 2, 3, 4, 24, 125]", "def check(maximum):\n\tassert maximum([1, -6], 1) == [1]", "def check(maximum):\n\tassert maximum([3, 1, 1, -19, 248, -404, 5], 1) == [248]", "def check(maximum):\n\tassert maximum([1, 4, 4, -9], 3) == [1, 4, 4]", "def check(maximum):\n\tassert maximum([-122, 16, 1, 4, 2, 1], 6) == [-122, 1, 1, 2, 4, 16]", "def check(maximum):\n\tassert maximum([0, 1, 2, 5, 1, -9], 2) == [2, 5]", "def check(maximum):\n\tassert maximum([3, 6, 2, -19, 243, -396, 4], 1) == [243]", "def check(maximum):\n\tassert maximum([-1, 0, 2], 1) == [2]", "def check(maximum):\n\tassert maximum([-120, 25, 1, 5, 6, -3], 7) == [-120, -3, 1, 5, 6, 25]", "def check(maximum):\n\tassert maximum([-126, 22, 2, 2, 5, -3], 3) == [2, 5, 22]", "def check(maximum):\n\tassert maximum([1, -4, 2], 7) == [-4, 1, 2]", "def check(maximum):\n\tassert maximum([3, 1, 2, 7, 8, -11], 5) == [1, 2, 3, 7, 8]", "def check(maximum):\n\tassert maximum([-6, 7], 2) == [-6, 7]", "def check(maximum):\n\tassert maximum([3, 6, 4, -26, 246, -403, 5], 5) == [3, 4, 5, 6, 246]", "def check(maximum):\n\tassert maximum([-2, -7, 4], 4) == [-7, -2, 4]", "def check(maximum):\n\tassert maximum([4, 3, 4, 5, 1, -10], 1) == [5]", "def check(maximum):\n\tassert maximum([128, -127, 25, 1, 3, 2, -8], 5) == [1, 2, 3, 25, 128]", "def check(maximum):\n\tassert maximum([127, -127, 21, 5, 3, 3, -2], 8) == [-127, -2, 3, 3, 5, 21, 127]", "def check(maximum):\n\tassert maximum([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]", "def check(maximum):\n\tassert maximum([-7, 1, 4], 5) == [-7, 1, 4]", "def check(maximum):\n\tassert maximum([-7, -8, 6], 1) == [6]", "def check(maximum):\n\tassert maximum([7, 20, 1, 4, -9, -13, 1], 4) == [1, 4, 7, 20]", "def check(maximum):\n\tassert maximum([123, -121, 22, 4, 2, 2, -6], 1) == [123]", "def check(maximum):\n\tassert maximum([5, 3, 5, -6], 3) == [3, 5, 5]", "def check(maximum):\n\tassert maximum([-121, 15, 3, 4, 7, -5], 3) == [4, 7, 15]", "def check(maximum):\n\tassert maximum([-13, 11], 2) == [-13, 11]", "def check(maximum):\n\tassert maximum([-125, 18, 3, 1, 5, -1], 1) == [18]", "def check(maximum):\n\tassert maximum([9, -3, 1], 3) == [-3, 1, 9]", "def check(maximum):\n\tassert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]", "def check(maximum):\n\tassert maximum([-1, 2, 1, 1, 1, -5], 1) == [2]", "def check(maximum):\n\tassert maximum([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]", "def check(maximum):\n\tassert maximum([-2, 7, 4, 5, 0, 0, 4], 3) == [4, 5, 7]", "def check(maximum):\n\tassert maximum([-4, 4, 2, 10, 2, -5], 5) == [-4, 2, 2, 4, 10]", "def check(maximum):\n\tassert maximum([1, 4, 4, 1, 2, -14], 5) == [1, 1, 2, 4, 4]", "def check(maximum):\n\tassert maximum([-123, 19, 4, 5, 6, -2], 3) == [5, 6, 19]"], "test_case_list": ["assert maximum([2, 1, 1], 1) == [2]", "assert maximum([5, 5, 4, -12], 4) == [-12, 4, 5, 5]", "assert maximum([4, 6, 5, -18, 248, -403, 5], 3) == [5, 6, 248]", "assert maximum([2, 3, 5, 3, 1, -15], 3) == [3, 3, 5]", "assert maximum([4, 5, 5, -22, 241, -401, 1], 1) == [241]", "assert maximum([1, 12, 2, 1, -11, -4, 5], 5) == [1, 1, 2, 5, 12]", "assert maximum([8, 13, 4, 2, -11, -4, 1], 11) == [-11, -4, 1, 2, 4, 8, 13]", "assert maximum([3, -4, 7], 3) == [-4, 3, 7]", "assert maximum([-123, 23, 1, 3, 3, 1], 9) == [-123, 1, 1, 3, 3, 23]", "assert maximum([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.", "assert maximum([-9, 11], 3) == [-9, 11]", "assert maximum([6, 6, 2, -24, 240, -402, 4], 1) == [240]", "assert maximum([-11, 5], 4) == [-11, 5]", "assert maximum([6, 1, 3, -26, 247, -400, 1], 1) == [247]", "assert maximum([-119, 24, 5, 4, 1, -8], 9) == [-119, -8, 1, 4, 5, 24]", "assert maximum([-123, 24, 3, 4, 2, -7], 6) == [-123, -7, 2, 3, 4, 24]", "assert maximum([-3, -4, 5], 3) == [-4, -3, 5]", "assert maximum([3, 3, 2, -27, 243, -396, 5], 3) == [3, 5, 243]", "assert maximum([4, -4, 4], 2) == [4, 4]", "assert maximum([4, 1, 9, -3], 3) == [1, 4, 9]", "assert maximum([2, 5, 1, 2, -6, -2, 5], 6) == [-2, 1, 2, 2, 5, 5]", "assert maximum([0, 5, 2, 7, 2, -15], 3) == [2, 5, 7]", "assert maximum([-1, 5, 3, 6, -2, -7, 6], 3) == [5, 6, 6]", "assert maximum([5, 3, 7, -2], 3) == [3, 5, 7]", "assert maximum([2, 1, 9], 1) == [9]", "assert maximum([8, 15, 1, 4, -14, -5, 2], 6) == [-5, 1, 2, 4, 8, 15]", "assert maximum([-3, 1, 7, 7, 4, -12], 7) == [-12, -3, 1, 4, 7, 7]", "assert maximum([7, -2], 7) == [-2, 7]", "assert maximum([6, -5], 2) == [-5, 6]", "assert maximum([-8, 5], 6) == [-8, 5]", "assert maximum([-126, 15, 4, 3, 4, -4], 3) == [4, 4, 15]", "assert maximum([5, -2, 1], 6) == [-2, 1, 5]", "assert maximum([10, 12, 1, 2, -11, -6, 2], 4) == [2, 2, 10, 12]", "assert maximum([-2, 5, 5, 5, -1, 2, 3], 6) == [-1, 2, 3, 5, 5, 5]", "assert maximum([-6, -2, 5], 2) == [-2, 5]", "assert maximum([3, -9, 1], 4) == [-9, 1, 3]", "assert maximum([119, -119, 21, 2, 4, 4, -3], 3) == [4, 21, 119]", "assert maximum([2, 6, 6, 3, 4, 3, 1], 2) == [6, 6]", "assert maximum([7, -9, 7], 7) == [-9, 7, 7]", "assert maximum([118, -119, 17, 4, 1, 1, -7], 2) == [17, 118]", "assert maximum([-1, -2, 3], 3) == [-2, -1, 3]", "assert maximum([8, -2, 4], 3) == [-2, 4, 8]", "assert maximum([-1, 3, 4, 7, 2, -3, 6], 1) == [7]", "assert maximum([-14, 6], 4) == [-14, 6]", "assert maximum([122, -124, 25, 1, 1, 1, -2], 2) == [25, 122]", "assert maximum([1, 1, 2, -2], 2) == [1, 2]", "assert maximum([3, 15, 5, 4, -16, -10, 4], 11) == [-16, -10, 3, 4, 4, 5, 15]", "assert maximum([8, -6], 7) == [-6, 8]", "assert maximum([-12, 8], 2) == [-12, 8]", "assert maximum([10, 16, 5, 2, -12, -3, 1], 7) == [-12, -3, 1, 2, 5, 10, 16]", "assert maximum([-119, 16, 5, 2, 3, -6], 8) == [-119, -6, 2, 3, 5, 16]", "assert maximum([5, 1, 4], 2) == [4, 5]", "assert maximum([-1, 2, 1, 5, 6, -13], 2) == [5, 6]", "assert maximum([-13, 13], 7) == [-13, 13]", "assert maximum([-1, 0, 2, 5, 3, -10], 2) == [3, 5]", "assert maximum([4, -6, 8], 4) == [-6, 4, 8]", "assert maximum([-2, 1, 1], 1) == [1]", "assert maximum([2, 1], 1) == [2]", "assert maximum([128, -128, 22, 2, 3, 1, -5], 6) == [-5, 1, 2, 3, 22, 128]", "assert maximum([-120, 20, 2, 5, 1, -6], 7) == [-120, -6, 1, 2, 5, 20]", "assert maximum([-5, 10], 6) == [-5, 10]", "assert maximum([-1, 4, 7, 3, 8, -9], 7) == [-9, -1, 3, 4, 7, 8]", "assert maximum([4, 3, 4, -20, 247, -400, 4], 4) == [4, 4, 4, 247]", "assert maximum([-3, 1, 2], 4) == [-3, 1, 2]", "assert maximum([-1, 2, 1, 2, -5, -5, 2], 3) == [2, 2, 2]", "assert maximum([2, 13, 4, 6, -17, -3, 1], 7) == [-17, -3, 1, 2, 4, 6, 13]", "assert maximum([-5, -6, 10], 1) == [10]", "assert maximum([10, 12, 2, 1, -17, -3, 5], 4) == [2, 5, 10, 12]", "assert maximum([119, -118, 15, 3, 3, 3, -8], 1) == [119]", "assert maximum([2, -9], 4) == [-9, 2]", "assert maximum([-9, 13], 3) == [-9, 13]", "assert maximum([6, 0, 5], 4) == [0, 5, 6]", "assert maximum([123, -128, 20, 4, 3, 2, 1], 6) == [1, 2, 3, 4, 20, 123]", "assert maximum([5, 3, 2, -9], 5) == [-9, 2, 3, 5]", "assert maximum([4, -9], 4) == [-9, 4]", "assert maximum([1, 2, 3, -23, 243, -400, 0], 0) == []", "assert maximum([4, -4], 2) == [-4, 4]", "assert maximum([3, 2, 1, -9], 6) == [-9, 1, 2, 3]", "assert maximum([1, 0, 5, -7], 1) == [5]", "assert maximum([6, 0, 8], 2) == [6, 8]", "assert maximum([0, -5, 10], 1) == [10]", "assert maximum([-5, 3, 2, 8, 3, -10], 1) == [8]", "assert maximum([6, 1, 3, -4], 6) == [-4, 1, 3, 6]", "assert maximum([119, -119, 24, 5, 5, 7, -4], 6) == [-4, 5, 5, 7, 24, 119]", "assert maximum([6, 5, 2, -10], 5) == [-10, 2, 5, 6]", "assert maximum([3, 13, 3, 4, -9, -11, 3], 2) == [4, 13]", "assert maximum([1, 1], 4) == [1, 1]", "assert maximum([8, -4], 7) == [-4, 8]", "assert maximum([9, -9], 1) == [9]", "assert maximum([0, 3, 6, 2, -1, 3, 4], 4) == [3, 3, 4, 6]", "assert maximum([8, 1, 2], 4) == [1, 2, 8]", "assert maximum([-2, 2, 5, 2, 0, 2, 2], 4) == [2, 2, 2, 5]", "assert maximum([6, -1], 5) == [-1, 6]", "assert maximum([2, 2, 10, -3], 1) == [10]", "assert maximum([3, 19, 4, 5, -13, -8, 5], 4) == [4, 5, 5, 19]", "assert maximum([-4, 6, 4, 2, 4, -6, 5], 4) == [4, 4, 5, 6]", "assert maximum([6, 5, 1, -19, 242, -403, 5], 3) == [5, 6, 242]", "assert maximum([-3, 6, 3, 1, 0, -4, 6], 5) == [0, 1, 3, 6, 6]", "assert maximum([1, 3, 3, 2, -2, -5, 5], 2) == [3, 5]", "assert maximum([127, -124, 16, 1, 5, 7, -6], 7) == [-124, -6, 1, 5, 7, 16, 127]", "assert maximum([-7, 10], 7) == [-7, 10]", "assert maximum([7, 12, 4, 4, -16, -7, 3], 10) == [-16, -7, 3, 4, 4, 7, 12]", "assert maximum([5, 2, 5, -11], 5) == [-11, 2, 5, 5]", "assert maximum([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]", "assert maximum([6, 7, 8, -20, 243, -398, 5], 3) == [7, 8, 243]", "assert maximum([-10, 10], 3) == [-10, 10]", "assert maximum([4, 5, 8, -28, 245, -402, 2], 4) == [4, 5, 8, 245]", "assert maximum([125, -119, 24, 2, 3, 4, -4], 6) == [-4, 2, 3, 4, 24, 125]", "assert maximum([1, -6], 1) == [1]", "assert maximum([3, 1, 1, -19, 248, -404, 5], 1) == [248]", "assert maximum([1, 4, 4, -9], 3) == [1, 4, 4]", "assert maximum([-122, 16, 1, 4, 2, 1], 6) == [-122, 1, 1, 2, 4, 16]", "assert maximum([0, 1, 2, 5, 1, -9], 2) == [2, 5]", "assert maximum([3, 6, 2, -19, 243, -396, 4], 1) == [243]", "assert maximum([-1, 0, 2], 1) == [2]", "assert maximum([-120, 25, 1, 5, 6, -3], 7) == [-120, -3, 1, 5, 6, 25]", "assert maximum([-126, 22, 2, 2, 5, -3], 3) == [2, 5, 22]", "assert maximum([1, -4, 2], 7) == [-4, 1, 2]", "assert maximum([3, 1, 2, 7, 8, -11], 5) == [1, 2, 3, 7, 8]", "assert maximum([-6, 7], 2) == [-6, 7]", "assert maximum([3, 6, 4, -26, 246, -403, 5], 5) == [3, 4, 5, 6, 246]", "assert maximum([-2, -7, 4], 4) == [-7, -2, 4]", "assert maximum([4, 3, 4, 5, 1, -10], 1) == [5]", "assert maximum([128, -127, 25, 1, 3, 2, -8], 5) == [1, 2, 3, 25, 128]", "assert maximum([127, -127, 21, 5, 3, 3, -2], 8) == [-127, -2, 3, 3, 5, 21, 127]", "assert maximum([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]", "assert maximum([-7, 1, 4], 5) == [-7, 1, 4]", "assert maximum([-7, -8, 6], 1) == [6]", "assert maximum([7, 20, 1, 4, -9, -13, 1], 4) == [1, 4, 7, 20]", "assert maximum([123, -121, 22, 4, 2, 2, -6], 1) == [123]", "assert maximum([5, 3, 5, -6], 3) == [3, 5, 5]", "assert maximum([-121, 15, 3, 4, 7, -5], 3) == [4, 7, 15]", "assert maximum([-13, 11], 2) == [-13, 11]", "assert maximum([-125, 18, 3, 1, 5, -1], 1) == [18]", "assert maximum([9, -3, 1], 3) == [-3, 1, 9]", "assert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]", "assert maximum([-1, 2, 1, 1, 1, -5], 1) == [2]", "assert maximum([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]", "assert maximum([-2, 7, 4, 5, 0, 0, 4], 3) == [4, 5, 7]", "assert maximum([-4, 4, 2, 10, 2, -5], 5) == [-4, 2, 2, 4, 10]", "assert maximum([1, 4, 4, 1, 2, -14], 5) == [1, 1, 2, 4, 4]", "assert maximum([-123, 19, 4, 5, 6, -2], 3) == [5, 6, 19]"], "nl": "\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    ", "func": "def maximum(arr, k):", "examples": "Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    ", "completions": ["from typing import List\n## main.py\n\nimport heapq\nfrom typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    '''\n    Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr.\n    '''\n    return sorted(heapq.nlargest(k, arr))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    '''\n    Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr.\n    '''\n    \n    if not arr or k == 0:\n        return []\n    \n    arr = [num for num in arr if num > 0]  # Filter out negative numbers\n    \n    arr.sort(reverse=True)  # Sort the array in descending order\n    \n    return arr[:k]  # Return the first k elements of the sorted array\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    '''\n    Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr.\n    '''\n    arr.sort(reverse=True)\n    return arr[:k]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef max_k_numbers(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Return the maximum k numbers from the input array while ensuring the output list is sorted in descending order.\n\n    Args:\n        arr (List[int]): Input list of integers\n        k (int): Number of maximum numbers to return\n\n    Returns:\n        List[int]: List of maximum k numbers in descending order\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef max_k_numbers(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Return the maximum k numbers from the input array.\n\n    Args:\n    arr: List of integers\n    k: Number of maximum numbers to return\n\n    Returns:\n    List of maximum k numbers from the input array\n    \"\"\"\n    return sorted(arr)[-k:]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef max_k_numbers(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Return the top k maximum numbers from the input array.\n\n    Args:\n        arr (List[int]): Input array of integers\n        k (int): Number of maximum numbers to return\n\n    Returns:\n        List[int]: List of top k maximum numbers in descending order\n    \"\"\"\n    return sorted(arr)[-k:]\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport heapq\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    '''\n    Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr.\n    '''\n    \n    if k >= len(arr):\n        return sorted(arr, reverse=True)\n    \n    max_heap = []\n    for num in arr:\n        heapq.heappush(max_heap, num)\n        if len(max_heap) > k:\n            heapq.heappop(max_heap)\n    \n    return sorted(max_heap, reverse=True)\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport heapq\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    '''\n    Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr.\n    '''\n    \n    if k >= len(arr):\n        return sorted(arr)\n    \n    max_k = heapq.nlargest(k, arr)\n    \n    return sorted(max_k)\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport heapq\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    '''Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr.'''\n    \n    if k >= len(arr):\n        return sorted(arr)\n    \n    min_heap = []\n    for num in arr:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    return sorted(min_heap)\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport heapq\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    '''\n    Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr.\n    '''\n    \n    if k == 0:\n        return []\n    \n    max_heap = []\n    for num in arr:\n        heapq.heappush(max_heap, -num)\n    \n    result = []\n    for _ in range(k):\n        result.append(-heapq.heappop(max_heap))\n    \n    return result\n\n"], "plans": ["requirement pool:\n- Implement the maximum function to return the sorted list of maximum k numbers\n- Handle edge cases such as empty array or k = 0\n- Optimize the sorting algorithm for better performance\nWe will use the heapq library in Python to efficiently return the maximum k numbers in the given array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': All integers in the list are greater than 0.\n    Explanation: This means that the list contains only positive numbers.\n\n    'sorted list': A list where the elements are arranged in ascending or descending order.\n    Explanation: The output list should be sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': Indicates the need to find the largest numbers.\n    Explanation: We need to return the maximum k numbers from the array.\n\n# [code logic]\n    Since the plan mentions using the heapq library, we can implement the code using heapq's nlargest function to efficiently return the maximum k numbers in the given array.\n\n    ```python\n    import heapq\n\n    def maximum(arr, k):\n        return sorted(heapq.nlargest(k, arr))\n    ```\n\n# [edge case] \n    maximum([1, 2, 3], 0) = []\n    Explanation: When k is 0, the output should be an empty list as there are no maximum numbers to return.\n\n    maximum([-1, -2, -3], 2) = [-2, -1]\n    Explanation: The two largest numbers in the array are -1 and -2, so the expected output is [-2, -1].\n\n    maximum([5], 5) = [5]\n    Explanation: When k is equal to the length of the array, the output should be the sorted array itself, which is [5].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where k is 0 or equal to the length of the array.\n", "requirement pool:\n- Efficiently find and return the maximum k numbers in a given array\n- Ensure the output list is sorted in ascending order\n- Handle edge cases like empty array or k being 0\nWe will use the built-in functions in Python to efficiently find and return the maximum k numbers in the given array. We will then sort the output list in ascending order to meet the requirement. Additionally, we will handle edge cases like an empty array or k being 0.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'positive integer': All integers in the list are greater than 0.\n    Explanation: This means that the input list contains only positive integers.\n\n    'maximum k numbers': Refers to the largest k numbers in the array.\n    Explanation: The task is to find and return the k largest numbers from the input array.\n\n# [phrase showing quantity relationship]\n    'positive integer': Indicates that all integers in the array are greater than 0.\n    Implementation: Use a list comprehension to filter out negative numbers if present.\n\n# [degree adverb] \n    No degree adverb found in the requirement.\n\n# [code logic]\n    1. Check if the input array is empty or k is 0, return an empty list.\n    2. Filter out negative numbers from the array if any.\n    3. Sort the array in descending order.\n    4. Return the first k elements of the sorted array.\n\n# [edge case] \n    maximum([], 2) = []\n    Explanation: When the input array is empty, the output should be an empty list.\n    \n    maximum([1, 2, 3], 0) = []\n    Explanation: When k is 0, the output should be an empty list.\n    \n    maximum([1, -2, 3], 2) = [3, 1]\n    Explanation: Negative number -2 is filtered out, and the largest two numbers are returned.\n\n# [extra code for edge case]\n    No extra code needed to handle the edge cases. The logic covers scenarios where the input array is empty or k is 0.\n", "requirement pool:\n- Implement a function that efficiently finds and returns the maximum k numbers in a given array\n- Ensure the output list is sorted in ascending order\n- Handle edge cases like an empty array or k being 0\nWe will design a simple static Python function using appropriate open-source libraries to efficiently find and return the maximum k numbers in a given array while ensuring the output list is sorted in ascending order.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum k numbers'\n    Explanation: The core concept is to find the k largest numbers in the array and return them in sorted order.\n\n# [phrase showing quantity relationship]\n    'maximum k numbers': This phrase indicates that we need to find and return the top k numbers from the array.\n   \n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic to implement the code would involve sorting the array in descending order and then returning the first k elements of the sorted array.\n\n    ```python\n    def maximum(arr, k):\n        arr.sort(reverse=True)\n        return arr[:k]\n    ```\n\n# [edge case] \n    maximum([1], 0) = []\n    Explanation: When k is 0, the output should be an empty list as there are no elements to return.\n    \n    maximum([1, 2, 3], 5) = [1, 2, 3]\n    Explanation: When k is greater than the length of the array, the output should be the sorted array itself.\n\n    maximum([-1, -2, -3], 2) = [-2, -1]\n    Explanation: The output should be the top 2 numbers in ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers scenarios where k is 0 or greater than the length of the array.\n", "requirement pool:\n- Return a sorted list of length k with the maximum k numbers in the input array\n- Handle edge cases like empty array or k = 0\n- Ensure the function works efficiently for large arrays\nWe will use the sorted function in Python to efficiently return the maximum k numbers from the input array while ensuring the output list is sorted in descending order.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum k numbers'\n    Explanation: The core concept is to find the k largest numbers from the input list.\n\n# [phrase showing quantity relationship]\n    'maximum k numbers': This phrase indicates that we need to find and return the k largest numbers from the input list.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic provided in the plan is sufficient to implement the requirement. The plan suggests using the sorted function in Python to sort the input array in descending order and then return the last k elements.\n\n# [edge case] \n    max_k_numbers([1, 2, 3, 4, 5], 3) = [3, 4, 5]\n    Explanation: In this case, we are selecting the 3 largest numbers from the list [1, 2, 3, 4, 5], which are 3, 4, and 5.\n    \n    max_k_numbers([5, 4, 3, 2, 1], 2) = [4, 5]\n    Explanation: Here, we are selecting the 2 largest numbers from the list [5, 4, 3, 2, 1], which are 4 and 5.\n    \n    max_k_numbers([1, 1, 1], 2) = [1, 1]\n    Explanation: In this case, all numbers are the same, so we return the maximum k numbers which are all equal to 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic covers scenarios where k is equal to the length of the input list or when all numbers in the list are the same.\n", "requirement pool:\n- Return a sorted list of length k with the maximum k numbers in the input array\n- Handle edge cases like empty array or k = 0\n- Optimize the sorting algorithm for better performance\nWe will use the built-in sorted function in Python to efficiently return the maximum k numbers from the input array. We will handle edge cases like empty array or k = 0 by checking conditions before sorting.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum k numbers'\n    Explanation: The core concept is to find and return the k largest numbers from the input array.\n\n# [phrase showing quantity relationship]\n    'maximum k numbers': This phrase indicates that we need to find and return the k largest numbers from the array.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic is to sort the input array in ascending order and then return the last k elements of the sorted array.\n\n```python\ndef max_k_numbers(arr: List[int], k: int) -> List[int]:\n    return sorted(arr)[-k:]\n```\n\n# [edge case] \n    max_k_numbers([], 3) = []\n    Explanation: When the input array is empty, the function should return an empty list as there are no numbers to return.\n    max_k_numbers([1, 2, 3], 0) = []\n    Explanation: When k is 0, the function should return an empty list as there are no numbers to return.\n    max_k_numbers([5, 3, 8, 2, 7], 2) = [7, 8]\n    Explanation: The two largest numbers in the array [5, 3, 8, 2, 7] are 7 and 8, so the expected output is [7, 8].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided already handles cases where the array is empty or when k is 0.\n", "requirement analysis:\nThe main requirement is to efficiently return the top k maximum numbers from the input array while ensuring the output list is sorted in descending order. Additionally, handling edge cases like an empty array or k = 0 is crucial for a robust solution.\nrequirement pool:\n- Return a sorted list of length k with the maximum k numbers in the input array\n- Handle edge cases like empty array or k = 0 appropriately\n- Ensure the function is optimized for performance, especially for large arrays\nWe will use the built-in sorted function in Python to efficiently return the top k maximum numbers from the input array. We will ensure the output list is sorted in descending order by using negative indexing. To handle edge cases like an empty array or k = 0, we will include appropriate checks in the function.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'top k maximum numbers'\n    Explanation: The core concept is to find the k largest numbers in the input array.\n\n# [phrase showing quantity relationship]\n    'top k': Indicates that we need to find the top k numbers in the array.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic is to sort the input array in ascending order and then return the last k elements of the sorted array, which will be the top k maximum numbers.\n\n# [edge case] \n    max_k_numbers([], 3) = []\n    Explanation: When the input array is empty, the function should return an empty list as there are no elements to return.\n    max_k_numbers([1, 2, 3], 0) = []\n    Explanation: When k is 0, the function should return an empty list as there are no elements to return.\n    max_k_numbers([5, 3, 8, 2], 2) = [5, 8]\n    Explanation: The top 2 maximum numbers from the input array [5, 3, 8, 2] are 5 and 8.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic covers scenarios where the input array is empty or when k is 0.\n", "We will use the heapq library in Python to efficiently sort and return the maximum k numbers in the array.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'positive integer': All integers in the list are greater than 0.\n    Explanation: This means that the input list contains only positive integers.\n\n    'maximum k numbers': Refers to the top k maximum numbers in the array.\n    Explanation: The task is to return a sorted list of length k with the maximum k numbers in the given array.\n\n# [phrase showing quantity relationship]\n    'sorted list of length k': Indicates that the output list should be sorted and have a length of k.\n    Implementation: After finding the maximum k numbers, sort them in descending order to meet this requirement.\n\n# [degree adverb] \n    No degree adverb found in the requirement.\n\n# [code logic]\n    1. Use the heapq library to efficiently find the maximum k numbers in the array.\n    2. Create a min heap and push elements from the array into it.\n    3. If the size of the heap exceeds k, pop the smallest element.\n    4. Finally, return the sorted list of the remaining elements in descending order.\n\n# [edge case] \n    maximum([1, 2, 3], 5) = [3, 2, 1]\n    Explanation: Since k is greater than the length of the array, the output will be a sorted list of all elements in descending order.\n\n    maximum([-1, -2, -3], 2) = [-2, -1]\n    Explanation: The output will be a sorted list of the top 2 maximum numbers in descending order.\n\n    maximum([5], 1) = [5]\n    Explanation: When k is equal to 1, the output will be a list containing the only element in the array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The heapq library efficiently handles scenarios where k is greater than the length of the array by returning all elements in descending order.\n", "requirement pool:\n- Implement a function that efficiently finds and returns the maximum k numbers in a given array\n- Ensure the output list is sorted in ascending order\n- Handle edge cases like empty array or k being larger than array size\nWe will use the heapq library in Python to efficiently find and return the maximum k numbers in a given array.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'positive integer': All integers in the list are greater than 0.\n    Explanation: This means that the input list contains only positive integers.\n\n    'maximum k numbers': Refers to the top k maximum numbers in the array.\n    Explanation: The task is to return a sorted list of the k largest numbers in the input array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'sorted': Indicates that the output list should be sorted in ascending order.\n    Explanation: The output list of maximum k numbers should be sorted from smallest to largest.\n\n# [code logic]\n    The plan suggests using the heapq library in Python to efficiently find and return the maximum k numbers in a given array. The steps involve:\n    - Importing the heapq library\n    - Using the heapq library to find the k largest numbers in the array\n    - Sorting the k largest numbers in ascending order\n    - Returning the sorted list of maximum k numbers\n\n# [edge case] \n    maximum([1, 2, 3], 5) = [1, 2, 3]\n    Explanation: When k is greater than the length of the array, the output should be the sorted original array.\n\n    maximum([-1, -2, -3], 2) = [-2, -1]\n    Explanation: When all numbers are negative, the output should be the top k positive numbers if they exist.\n\n    maximum([5, 5, 5], 1) = [5]\n    Explanation: When all numbers are the same, the output should be a list with that number repeated k times.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The heapq library efficiently handles finding the top k maximum numbers in an array.\n", "requirement pool:\n- Implement a function that efficiently finds and returns the maximum k numbers in a given array\n- Ensure the output list is sorted in ascending order\n- Handle edge cases like empty array or k being larger than array size\nWe will use the heapq library in Python to efficiently find and return the maximum k numbers in a given array.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'positive integer': All integers in the list are greater than 0.\n    Explanation: This means that the input list contains only positive integers.\n\n    'maximum k numbers': Refers to the top k maximum numbers in the array.\n    Explanation: The output list should contain the k largest numbers from the input array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'sorted': Indicates that the output list should be sorted in ascending order.\n    Explanation: The output list of maximum k numbers should be sorted from smallest to largest.\n\n# [code logic]\n    1. Use the heapq library to create a min-heap.\n    2. Iterate through the input array and push each element into the min-heap.\n    3. If the size of the min-heap exceeds k, pop the smallest element.\n    4. Finally, return the sorted list of elements from the min-heap.\n\n# [edge case] \n    maximum([1, 2, 3], 5) = [1, 2, 3]\n    Explanation: Since k is greater than the length of the array, the output should be the sorted array itself.\n\n    maximum([-1, -2, -3], 2) = [-2, -1]\n    Explanation: The top 2 maximum numbers in the array are -1 and -2.\n\n    maximum([5, 5, 5], 1) = [5]\n    Explanation: All elements in the array are the same, and k is 1, so the output is [5].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where k is greater than the array length or when all elements are the same.\n", "requirement pool:\n- Return a sorted list of maximum k numbers efficiently\n- Handle edge cases like empty array or k = 0\n- Optimize the algorithm for performance with large input arrays\nWe will use the heapq library in Python to efficiently find the maximum k numbers in the array and return them in descending order.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': All integers in the list are greater than 0.\n    Explanation: This means that the array will only contain positive numbers.\n\n    'maximum k numbers': Refers to finding the top k maximum numbers in the array.\n    Explanation: The task is to return a sorted list of length k with the maximum k numbers in the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'sorted': Indicates that the output list should be sorted in descending order.\n    Explanation: The list of maximum k numbers should be sorted from largest to smallest.\n\n# [code logic]\n    The plan suggests using the heapq library in Python to efficiently find the maximum k numbers in the array and return them in descending order. Here is a detailed logic to implement the code:\n    1. Import the heapq library.\n    2. Create a min heap from the input array.\n    3. Pop elements from the heap until k elements are obtained.\n    4. Sort the extracted elements in descending order.\n    5. Return the sorted list of maximum k numbers.\n\n# [edge case] \n    maximum([1, 2, 3], 0) = []\n    Explanation: When k is 0, the output should be an empty list as no maximum numbers are required.\n    maximum([-1, -2, -3], 2) = [-2, -1]\n    Explanation: In this case, the output should contain the top 2 maximum numbers from the array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The heapq library efficiently handles extracting the top k maximum numbers from the array.\n"], "scores": [1.0, 0.2113, 0.2113, 0.0, 0.0, 0.0, 0.2113, 1.0, 1.0, 0.2042], "pass_results": [true, false, false, false, false, false, false, true, true, false], "pass_test_cases_num": [142, 30, 30, 0, 0, 0, 30, 142, 142, 29], "completion": "from typing import List\n## main.py\n\nfrom typing import List\nimport heapq\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    '''\n    Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr.\n    '''\n    \n    if k == 0:\n        return []\n    \n    max_heap = []\n    for num in arr:\n        heapq.heappush(max_heap, -num)\n    \n    result = []\n    for _ in range(k):\n        result.append(-heapq.heappop(max_heap))\n    \n    return result\n\n", "passed": true, "pass": true, "pass_num": 3, "round": 321, "repair_prompt": ["def maximum(arr, k):\t\n'''Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr.\nExample 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    '''", "Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr. After sorting, the list will contain the highest k numbers from the input array.\nExample 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    ", "def maximum(arr, k):\t\n'''Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr.\nExample 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]"], "mutate_method": "condense_two2one", "parent_index": 326}
