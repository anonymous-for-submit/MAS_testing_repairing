{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. When a list is monotonically increasing, it means each element is greater than or equal to the previous one. In the case of a monotonically decreasing list, each element is less than or equal to the previous one.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "completions": ["from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    When a list is monotonically increasing, it means each element is greater than or equal to the previous one.\n    In the case of a monotonically decreasing list, each element is less than or equal to the previous one.\n    '''\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n        \n        if not increasing and not decreasing:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.\n    When a list is monotonically increasing, it means each element is greater than or equal to the previous one.\n    In the case of a monotonically decreasing list, each element is less than or equal to the previous one.'''\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.\n    When a list is monotonically increasing, it means each element is greater than or equal to the previous one.\n    In the case of a monotonically decreasing list, each element is less than or equal to the previous one.'''\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        elif l[i] > l[i-1]:\n            decreasing = False\n        \n        if not increasing and not decreasing:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    When a list is monotonically increasing, it means each element is greater than or equal to the previous one, showing an upward trend.\n    In the case of a monotonically decreasing list, each element is less than or equal to the previous one, indicating a downward trend.\n    '''\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    When a list is monotonically increasing, it means each element is greater than or equal to the previous one, showing an upward trend.\n    In the case of a monotonically decreasing list, each element is less than or equal to the previous one, indicating a downward trend.\n    '''\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    When a list is monotonically increasing, it means each element is greater than or equal to the previous one, showing an upward trend.\n    In the case of a monotonically decreasing list, each element is less than or equal to the previous one, indicating a downward trend.\n    '''\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.\n    \n    Args:\n        l: A list of integers.\n        \n    Returns:\n        True if the list is monotonically increasing or decreasing, False otherwise.\n    '''\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing, each element is greater than or equal to the previous one in an increasing list or less than or equal to the previous one in a decreasing list.'''\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing, each element is greater than or equal to the previous one in an increasing list or less than or equal to the previous one in a decreasing list.'''\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    When a list is monotonically increasing, it means each element is greater than or equal to the previous one.\n    In the case of a monotonically decreasing list, each element is less than or equal to the previous one.\n    '''\n    \n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            is_increasing = False\n        elif l[i] > l[i-1]:\n            is_decreasing = False\n        \n        if not is_increasing or not is_decreasing:\n            return False\n    \n    return True\n"], "plans": ["requirement pool:\n- Efficiently evaluate if a list is monotonically increasing or decreasing\n- Ensure accurate determination of list monotonicity\n- Provide clear and concise output for the evaluation\nWe will design a simple static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing/decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is monotonically increasing or decreasing by comparing each element with its previous element.\n\n    1. Initialize two flags for increasing and decreasing as False.\n    2. Iterate through the list starting from the second element.\n    3. Check if the current element is greater than or equal to the previous element for increasing flag.\n    4. Check if the current element is less than or equal to the previous element for decreasing flag.\n    5. If any violation is found, return False.\n    6. If the loop completes without any violation, return True.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is monotonically increasing as each element is greater than or equal to the previous one.\n    \n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is less than or equal to the previous one.\n    \n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not monotonically increasing or decreasing as there is a decrease followed by an increase.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios of monotonically increasing or decreasing lists.\n", "requirement pool:\n- Implement efficient algorithm for monotonic list evaluation\n- Ensure accuracy in determining list monotonicity\n- Design clear and informative output for users\nWe will design a simple static Python function using basic logic to efficiently determine if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing/decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is monotonically increasing or decreasing by comparing each element with the previous one.\n\n    1. Initialize two flags for increasing and decreasing as False.\n    2. Iterate through the list starting from the second element.\n    3. Check if the current element is greater than or equal to the previous element for increasing flag.\n    4. Check if the current element is less than or equal to the previous element for decreasing flag.\n    5. If either condition fails, return False.\n    6. If the loop completes without returning False, return True.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is monotonically increasing as each element is greater than or equal to the previous one.\n    \n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is less than or equal to the previous one.\n    \n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not monotonically increasing or decreasing as there is a decrease followed by an increase.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios of monotonically increasing or decreasing lists.\n", "requirement pool:\n- Implement efficient algorithm for monotonic list evaluation\n- Ensure correct handling of edge cases in list evaluation\n- Optimize output readability for user understanding\nWe will design a simple static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing/decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is monotonically increasing or decreasing by comparing each element with its previous element.\n\n    1. Initialize two flags for increasing and decreasing as False.\n    2. Iterate through the list starting from the second element.\n    3. Check if the current element is greater than or equal to the previous element for increasing flag.\n    4. Check if the current element is less than or equal to the previous element for decreasing flag.\n    5. If any violation is found, return False.\n    6. If the loop completes without violations, return True.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is monotonically increasing as each element is greater than or equal to the previous one.\n    \n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is less than or equal to the previous one.\n    \n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not monotonically increasing or decreasing as there is a decrease followed by an increase.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios of monotonically increasing or decreasing lists.\n", "requirement pool:\n- Implement efficient algorithm for monotonicity check\n- Ensure the function handles edge cases gracefully\nWe will design a simple static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing/decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greater than or equal to': Indicates the condition for a list to be monotonically increasing.\n    'less than or equal to': Indicates the condition for a list to be monotonically decreasing.\n\n# [code logic]\n    To implement the code logic, we can iterate through the list and check if each element satisfies the monotonically increasing or decreasing condition by comparing it with the previous element.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is monotonically increasing as each element is greater than or equal to the previous one.\n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is less than or equal to the previous one.\n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not monotonically increasing or decreasing as it has both increasing and decreasing elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for monotonically increasing or decreasing lists covers all scenarios.\n", "requirement pool:\n- Ensure the function correctly identifies monotonic trends in lists\n- Implement efficient algorithms for trend analysis\n- Include comprehensive test cases to validate the function's accuracy\nWe will design a static Python function using basic logic to check if a list is monotonically increasing or decreasing without the need for any external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing/decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing in value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic logic to check monotonically increasing or decreasing list, we can directly implement the code based on the plan.\n\n```python\ndef monotonic(l: list):\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n```\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is monotonically increasing as each element is greater than or equal to the previous one.\n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is less than or equal to the previous one.\n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not monotonically increasing or decreasing as it has both increasing and decreasing elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios of monotonically increasing or decreasing lists.\n", "requirement pool:\n- Implement efficient monotonicity check algorithm\n- Ensure correct identification of increasing and decreasing trends\n- Optimize the function for large input lists\nWe will design a simple static Python function using appropriate open-source libraries to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing/decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greater than or equal to', 'less than or equal to'\n    Explanation: These degree adverbs indicate the relationship between elements in the list for monotonically increasing or decreasing conditions.\n\n# [code logic]\n    Check if the list is monotonically increasing or decreasing by comparing each element with the previous one.\n\n    For monotonically increasing:\n    - Initialize a variable to track if the list is increasing (set to True initially)\n    - Iterate through the list starting from the second element\n    - Check if the current element is greater than or equal to the previous element\n    - If any element is not greater than or equal to the previous one, set the variable to False and break the loop\n    - Return True if the variable is still True after the loop, else return False\n\n    For monotonically decreasing:\n    - Initialize a variable to track if the list is decreasing (set to True initially)\n    - Iterate through the list starting from the second element\n    - Check if the current element is less than or equal to the previous element\n    - If any element is not less than or equal to the previous one, set the variable to False and break the loop\n    - Return True if the variable is still True after the loop, else return False\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is monotonically increasing as each element is greater than or equal to the previous one.\n    \n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is less than or equal to the previous one.\n    \n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not monotonically increasing or decreasing as there is a decrease followed by an increase.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios for checking monotonically increasing or decreasing lists.\n", "requirement analysis:\nThe main goal is to efficiently determine if a list is monotonically increasing or decreasing. The function should handle both cases accurately and provide a clear True/False output based on the monotonicity of the list elements.\nrequirement pool:\n- Implement a function that checks if a list is monotonically increasing\n- Implement a function that checks if a list is monotonically decreasing\n- Ensure the function can handle edge cases like empty lists\nWe will design a simple static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing/decreasing'\n    Explanation: It means that the elements in the list are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code logic, we can iterate through the list and check if each element is greater than or equal to the previous one for increasing list, or less than or equal to the previous one for decreasing list.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is monotonically increasing as each element is greater than or equal to the previous one.\n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is less than or equal to the previous one.\n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not monotonically increasing or decreasing as it has both increasing and decreasing elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of comparing each element with the previous one covers all scenarios.\n", "requirement pool:\n- Implement a function to check if a list is monotonically increasing or decreasing\n- Ensure the function handles edge cases and large lists efficiently\nWe will use the built-in functions in Python to efficiently determine if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in functions, we can directly use the `all` function along with a list comprehension to check if the list is monotonically increasing or decreasing.\n\n```python\ndef monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n```\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is monotonically increasing as each element is greater than or equal to the previous one.\n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is less than or equal to the previous one.\n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not monotonically increasing or decreasing as it has a non-monotonic sequence.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.\n", "requirement pool:\n- Efficiently evaluate if a list is monotonically increasing or decreasing\n- Ensure accurate determination of list monotonicity\n- Provide clear and understandable output for the evaluation\nWe will design a simple static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing/decreasing'\n    Explanation: It means that the elements in the list are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is monotonically increasing or decreasing by comparing each element with its previous element.\n\n    1. Initialize two flags for increasing and decreasing as False.\n    2. Iterate through the list starting from the second element.\n    3. Check if the current element is greater than or equal to the previous element for increasing flag.\n    4. Check if the current element is less than or equal to the previous element for decreasing flag.\n    5. If any violation is found, return False.\n    6. If the loop completes without any violation, return True.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is monotonically increasing as each element is greater than or equal to the previous one.\n    \n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is less than or equal to the previous one.\n    \n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not monotonically increasing or decreasing as there is a decrease followed by an increase.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios for checking monotonicity.\n", "requirement pool:\n- Implement a function that efficiently determines the monotonicity of a list\n- Ensure the function handles edge cases and large datasets effectively\n- Document the function with clear examples and usage instructions\nWe will design a simple static Python function using basic logic to efficiently determine the monotonicity of a list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing/decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is monotonically increasing or decreasing by comparing each element with its previous element.\n\n    1. Initialize two flags for increasing and decreasing as False.\n    2. Iterate through the list starting from the second element.\n    3. Check if the current element is greater than or equal to the previous element for increasing flag.\n    4. Check if the current element is less than or equal to the previous element for decreasing flag.\n    5. If any violation is found, return False.\n    6. If the loop completes without any violation, return True.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is monotonically increasing as each element is greater than or equal to the previous one.\n    \n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is less than or equal to the previous one.\n    \n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not monotonically increasing or decreasing as there is a decrease followed by an increase.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios of monotonically increasing or decreasing lists.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.7611], "pass_results": [true, true, true, true, true, true, true, true, true, false], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 86], "completion": "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    When a list is monotonically increasing, it means each element is greater than or equal to the previous one.\n    In the case of a monotonically decreasing list, each element is less than or equal to the previous one.\n    '''\n    \n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            is_increasing = False\n        elif l[i] > l[i-1]:\n            is_decreasing = False\n        \n        if not is_increasing or not is_decreasing:\n            return False\n    \n    return True\n", "passed": true, "pass": true, "pass_num": 9, "round": 183, "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. When a list is monotonically increasing, it means each element is greater than or equal to the previous one. In the case of a monotonically decreasing list, each element is less than or equal to the previous one.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. When a list is monotonically increasing, it means each element is greater than or equal to the previous one, showing an upward trend. In the case of a monotonically decreasing list, each element is less than or equal to the previous one, indicating a downward trend.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "def monotonic(l: list):\n'''Return True if list elements are monotonically increasing or decreasing, each element is greater than or equal to the previous one in an increasing list or less than or equal to the previous one in a decreasing list.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "mutate_method": "expand_one2two", "parent_index": 162}
