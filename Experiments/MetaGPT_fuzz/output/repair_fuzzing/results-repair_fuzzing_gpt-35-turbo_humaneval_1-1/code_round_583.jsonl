{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True is list elements are monotonically increasing or decreasing. Ensure that the function handles both empty lists and lists with one element correctly.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "completions": ["from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    Ensure that the function handles both empty lists and lists with one element correctly.\n    \n    Args:\n        l (list): Input list to check for monotonicity\n    \n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise\n    '''\n    \n    if len(l) <= 1:\n        return True\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    Ensure that the function handles both empty lists and lists with one element correctly.\n    \n    Args:\n        l (list): Input list to check for monotonicity\n    \n    Returns:\n        bool: True if list is monotonically increasing or decreasing, False otherwise\n    '''\n    \n    if len(l) <= 1:\n        return True\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "from typing import List\n## monotonic_function.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    \n    Args:\n        l (list): Input list\n    \n    Returns:\n        bool: True if list is monotonically increasing or decreasing, False otherwise\n    '''\n    \n    if len(l) <= 1:\n        return True\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    Check for monotonically increasing pattern\n    \n    Args:\n        arr: List of integers to check\n    \n    Returns:\n        bool: True if the list is monotonically increasing, False otherwise\n    \"\"\"\n    if len(arr) <= 1:\n        return True\n    \n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef monotonic(arr: List[int]) -> bool:\n    '''\n    Check if the input list shows a monotonically increasing pattern.\n    Args:\n        arr (List[int]): Input list of integers\n    Returns:\n        bool: True if the list elements are monotonically increasing, False otherwise\n    '''\n    \n    if not arr or len(arr) == 1:\n        return True\n    \n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef monotonic(arr: List[int]) -> bool:\n    '''\n    Check if the input list shows a monotonically increasing pattern.\n    Args:\n        arr (List[int]): Input list of integers\n    Returns:\n        bool: True if the list elements are monotonically increasing, False otherwise\n    '''\n    \n    if not arr:\n        return True\n    \n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing, handling both empty lists and lists with one element correctly.'''\n    \n    if len(l) <= 1:\n        return True\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing, handling both empty lists and lists with one element correctly.'''\n    \n    if len(l) <= 1:\n        return True\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef is_increasing(l: list) -> bool:\n    '''Check if the list is monotonically increasing.'''\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n\ndef is_decreasing(l: list) -> bool:\n    '''Check if the list is monotonically decreasing.'''\n    return all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing, handling both empty lists and lists with one element correctly.'''\n    \n    if len(l) <= 1:\n        return True\n    \n    return is_increasing(l) or is_decreasing(l)\n", "from typing import List\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    Ensure that the function handles both empty lists and lists with one element correctly.\n    \n    Args:\n        l (list): Input list\n    \n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise\n    '''\n    if len(l) <= 1:\n        return True\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n"], "plans": ["requirement pool:\n- Implement efficient monotonic function\n- Handle edge cases like empty lists and single-element lists\n- Document function with clear examples and explanations\nWe will design a static Python function using basic logic and built-in functions to efficiently check if a list is monotonically increasing or decreasing. We will handle edge cases like empty lists and single-element lists within the function.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: The core concept here is to determine if the elements in the list are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is empty or has only one element. If so, return True.\n    Iterate through the list and check if it is monotonically increasing or decreasing.\n    Return True if the list is monotonically increasing or decreasing, otherwise return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonically increasing.\n    monotonic([1]) = True\n    Explanation: A list with a single element is considered monotonically increasing.\n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The list is monotonically decreasing.\n\n# [extra code for edge case]\n    No extra code needed to handle the edge cases. The logic covers empty lists and single-element lists correctly.\n", "requirement pool:\n- Implement efficient monotonic list checker\n- Handle edge cases like empty lists and single-element lists\n- Ensure clear and concise function documentation\nWe will design a simple static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing. We will handle edge cases like empty lists and single-element lists within the function implementation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: The core concept here is to determine if the elements in the list are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is empty or has only one element. If so, return True.\n    Iterate through the list and check if it is monotonically increasing or decreasing.\n    Return True if the list is monotonically increasing or decreasing, otherwise return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonically increasing.\n    monotonic([1]) = True\n    Explanation: A list with a single element is considered monotonically increasing.\n    monotonic([1, 2, 3, 4]) = True\n    Explanation: The list is monotonically increasing.\n    \n# [extra code for edge case]\n    No extra code needed to handle the edge cases. The logic covers empty lists and single-element lists correctly.\n", "requirement pool:\n- Implement efficient monotonic function\n- Handle edge cases for empty lists and single-element lists\n- Document function clearly and include test cases\nWe will design a simple static Python function using basic logic to check if a list is monotonically increasing or decreasing. We will handle edge cases such as empty lists and single-element lists within the function itself.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: The core concept here is to determine whether the elements in the list are consistently increasing or decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is empty or has only one element. If so, return True.\n    Iterate through the list and check if it is monotonically increasing or decreasing.\n    Return True if the list is monotonically increasing or decreasing, otherwise return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonically increasing.\n    monotonic([1]) = True\n    Explanation: A list with a single element is considered monotonically increasing.\n    monotonic([1, 2, 3, 4]) = True\n    Explanation: The list is monotonically increasing.\n    \n# [extra code for edge case]\n    No extra code needed to handle the edge cases. The logic provided covers the edge cases of empty lists and single-element lists.\n", "requirement analysis:\nThe function needs to iterate through the list and compare each element with the previous one to determine if it's monotonically increasing. Special cases like empty lists and single-element lists should be considered separately.\nrequirement pool:\n- Implement the core logic to check for monotonically increasing patterns\n- Handle edge cases such as empty lists and single-element lists\n- Ensure clear and concise documentation for ease of use\nWe will use a simple approach to iterate through the list and compare each element with the previous one to check for a monotonically increasing pattern. We will handle special cases like empty lists and single-element lists separately.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing pattern'\n    Explanation: It means that the elements in the list are in increasing order without any decrease in between.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is empty or has a single element. If so, return True.\n    Iterate through the list and compare each element with the previous one.\n    If any element is less than or equal to the previous one, return False.\n    If the loop completes without returning False, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonically increasing.\n    monotonic([1]) = True\n    Explanation: A list with a single element is considered monotonically increasing.\n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are equal, which is considered monotonically increasing.\n\n# [extra code for edge case]\n    No extra code needed to handle the edge cases. The original logic covers empty lists and single-element lists correctly.\n", "requirement pool:\n- Implement a function that efficiently checks for monotonic patterns\n- Ensure accurate handling of empty lists and single-element lists\n- Document the function for easy integration and understanding\nWe will design a simple static Python function using basic logic to efficiently check for monotonically increasing patterns in lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing pattern'\n    Explanation: It means that the elements in the list are in non-decreasing order, i.e., each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is empty or has a single element, return True.\n    Iterate through the list and compare each element with the previous one.\n    If any element is less than the previous one, return False.\n    If all elements are in non-decreasing order, return True.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonically increasing.\n    monotonic([1]) = True\n    Explanation: A list with a single element is considered monotonically increasing.\n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are equal, which is considered monotonically increasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic covers the scenarios of empty lists and lists with a single element.\n", "requirement analysis:\nThe function needs to efficiently determine if a list is monotonically increasing, handle edge cases like empty lists and single-element lists, and provide clear and accurate results.\nrequirement pool:\n- Implement a function to check for monotonically increasing patterns\n- Ensure accurate handling of empty lists and single-element lists\n- Optimize the function for performance and ease of use\nWe will design a simple static Python function using basic logic to check for monotonically increasing patterns in lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing pattern'\n    Explanation: It means that the elements in the list are in ascending order without any decrease in value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is to design a simple static Python function using basic logic, the code logic should involve iterating through the list and checking if each element is greater than or equal to the previous element.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonically increasing as there are no elements to compare.\n    monotonic([1]) = True\n    Explanation: A list with a single element is also considered monotonically increasing as there is only one element to compare.\n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are the same, so it is considered monotonically increasing.\n\n# [extra code for edge case]\n    No extra code needed to handle the edge cases. The original logic covers scenarios with empty lists and single-element lists.\n", "requirement pool:\n- Implement efficient monotonic check for both increasing and decreasing lists\n- Handle edge cases like empty lists and single-element lists accurately\n- Ensure clear documentation and ease of integration\nWe will design a static Python function using basic logic and appropriate open-source libraries to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: The core concept here is to determine if the elements in the list are either consistently increasing or decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is empty or has only one element. If so, return True.\n    Iterate through the list and check if it is monotonically increasing or decreasing.\n    Return True if the list is monotonically increasing or decreasing, otherwise return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonically increasing.\n    monotonic([1]) = True\n    Explanation: A list with one element is considered monotonically increasing.\n    monotonic([1, 2, 3, 4]) = True\n    Explanation: The list is monotonically increasing.\n    \n# [extra code for edge case]\n    No extra code needed to handle the edge cases. The logic covers the scenarios of empty lists and lists with one element correctly.\n", "requirement analysis:\nThe function should efficiently determine if a list is monotonically increasing or decreasing, handling edge cases like empty lists and single-element lists. It should provide accurate results for various input scenarios to meet user expectations.\nrequirement pool:\n- Implement efficient monotonic check for increasing lists\n- Handle edge cases like empty lists and single-element lists\n- Ensure accurate results for different input scenarios\nWe will design a simple static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing. We will handle edge cases like empty lists and single-element lists to ensure accurate results for various input scenarios.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: The core concept here is to determine if the elements in the list are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is empty or has only one element. If so, return True.\n    Iterate through the list and check if it is monotonically increasing or decreasing.\n    Return True if the list is monotonically increasing or decreasing, False otherwise.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonically increasing.\n    monotonic([1]) = True\n    Explanation: A list with a single element is considered monotonically increasing.\n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The list is monotonically decreasing.\n\n# [extra code for edge case]\n    No extra code needed to handle the edge cases. The logic covers empty lists and single-element lists correctly.\n", "requirement pool:\n- Efficiently handle monotonically increasing and decreasing lists\n- Correctly manage empty lists and single-element lists\n- Ensure clear documentation and ease of use\nWe will design a simple static Python function using basic logic to efficiently determine if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is empty or has only one element. If so, return True.\n    Iterate through the list and check if it is monotonically increasing or decreasing.\n    Return True if the list is monotonically increasing or decreasing, otherwise return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonically increasing.\n    monotonic([1]) = True\n    Explanation: A list with one element is considered monotonically increasing.\n    monotonic([1, 2, 3, 4]) = True\n    Explanation: The list is monotonically increasing.\n    \n# [extra code for edge case]\n    No extra code needed to handle the edge cases. The logic covers the scenarios of empty lists and lists with one element correctly.\n", "requirement pool:\n- Implement efficient monotonic function\n- Handle edge cases like empty lists\n- Ensure clear documentation and test cases\nWe will design a static Python function using basic logic and built-in functions to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: The core concept here is to determine if the elements in the list are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using basic logic and built-in functions, we can implement the code as follows:\n```python\ndef monotonic(l: list) -> bool:\n    if len(l) <= 1:\n        return True\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n```\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonically increasing by definition.\n    monotonic([1]) = True\n    Explanation: A list with one element is considered monotonically increasing by definition.\n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are equal, so it is considered monotonically increasing.\n\n# [extra code for edge case]\n    No extra code needed to handle the edge cases. The logic covers empty lists and lists with one element correctly.\n"], "scores": [1.0, 1.0, 1.0, 0.7965, 0.8938, 0.8938, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, false, false, false, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 90, 101, 101, 113, 113, 113, 113], "completion": "from typing import List\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    Ensure that the function handles both empty lists and lists with one element correctly.\n    \n    Args:\n        l (list): Input list\n    \n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise\n    '''\n    if len(l) <= 1:\n        return True\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n", "passed": true, "pass": true, "pass_num": 7, "round": 583, "repair_prompt": ["def monotonic(l: list):\t\n'''Return True is list elements are monotonically increasing or decreasing. Ensure that the function handles both empty lists and lists with one element correctly.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "Return True if the list elements show a monotonically increasing pattern. This function should be able to correctly handle both empty lists and lists with a single element.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True", "def monotonic(l: list):\n'''Return True if list elements are monotonically increasing or decreasing, handling both empty lists and lists with one element correctly.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 295}
