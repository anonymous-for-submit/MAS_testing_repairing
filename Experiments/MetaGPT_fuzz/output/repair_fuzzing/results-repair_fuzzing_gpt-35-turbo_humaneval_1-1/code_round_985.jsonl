{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if the list elements are strictly increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "completions": ["from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the list elements are strictly increasing or decreasing.'''\n    \n    if len(set(l)) == 1:\n        return True\n    \n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the list elements are strictly increasing or decreasing.'''\n    \n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef monotonic(nums: List[int]) -> bool:\n    \"\"\"Return True if the list elements are strictly increasing or decreasing. If the list elements are not in a strictly increasing or decreasing order, return False.\"\"\"\n    is_increasing = all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n    is_decreasing = all(nums[i] >= nums[i + 1] for i in range(len(nums) - 1))\n    return is_increasing or is_decreasing\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef is_monotonic(nums: List[int]) -> bool:\n    increasing = decreasing = True\n    \n    for i in range(1, len(nums)):\n        if nums[i] < nums[i-1]:\n            increasing = False\n        elif nums[i] > nums[i-1]:\n            decreasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef monotonic(nums: List[int]) -> bool:\n    \"\"\"Return True if the list elements are strictly increasing or decreasing. If the list elements are not in a strictly increasing or decreasing order, return False.\"\"\"\n    is_increasing = all(nums[i] <= nums[i + 1] for i in range(len(nums) - 1))\n    is_decreasing = all(nums[i] >= nums[i + 1] for i in range(len(nums) - 1))\n    return is_increasing or is_decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the list elements are strictly increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n        True\n    >>> monotonic([1, 20, 4, 10])\n        False\n    >>> monotonic([4, 1, 0, -10])\n        True\n    '''\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the list elements are strictly increasing or decreasing.\n    Args:\n        l (list): Input list to check for monotonicity.\n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    '''\n    \n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    else:\n        return False\n", "from typing import List\ndef monotonic(l: list) -> bool:\n    '''Return True if the list elements are strictly increasing or decreasing.'''\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the list elements are strictly increasing or decreasing.'''\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    \n    return increasing or decreasing\n"], "plans": ["requirement analysis:\nThe main goal is to efficiently determine if a given list is monotonic, either strictly increasing or decreasing. The function should handle lists of varying sizes and provide accurate results. Performance optimization is crucial for large input lists.\nrequirement pool:\n- Implement a function to check monotonicity of a list\n- Optimize the function for performance with large lists\n- Ensure the function's accuracy with comprehensive testing\nWe will design a simple static Python function using appropriate open-source libraries to efficiently determine if a given list is monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'strictly increasing or decreasing'\n    Explanation: The core concept here is to check if the elements in the list are either continuously increasing or continuously decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using appropriate open-source libraries, the code logic might involve utilizing functions from libraries like NumPy or Pandas to check for monotonicity in the list efficiently.\n\n# [edge case] \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are the same, so it is considered as strictly increasing.\n    monotonic([4, 3, 2, 1]) = True\n    Explanation: Elements are strictly decreasing.\n    monotonic([1, 2, 2, 3]) = False\n    Explanation: The list is not strictly increasing or decreasing.\n\n# [extra code for edge case]\n    We might need extra code to handle the edge case where all elements are the same. We can add a check to see if all elements are equal and return True in that case.\n        if len(set(l)) == 1:\n            return True\n        (other code)\n", "requirement pool:\n- Implement efficient monotonicity check algorithm\n- Handle large input lists with optimized performance\n- Ensure correctness in identifying monotonic lists\nWe will design a simple static Python function using appropriate open-source libraries to efficiently determine if a list is monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'strictly increasing or decreasing'\n    Explanation: The core concept here is to check if the elements in the list are either strictly increasing or strictly decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using appropriate open-source libraries, the code logic might involve utilizing functions from libraries like NumPy or Pandas to check for monotonicity in the list efficiently.\n\n# [edge case] \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are the same, so it is considered as strictly increasing.\n    monotonic([4, 3, 2, 1]) = True\n    Explanation: The elements are strictly decreasing.\n    monotonic([1, 2, 2, 3]) = False\n    Explanation: The elements are not strictly increasing or decreasing.\n\n# [extra code for edge case]\n    We might need extra code to handle the edge cases where the list has repeated elements or is not strictly increasing or decreasing. Additional logic could be added to handle these scenarios.\n", "requirement pool:\n- Implement efficient monotonicity check algorithm\n- Ensure support for both increasing and decreasing monotonicity\n- Include comprehensive test suite for validation\nWe will design a simple static Python function using basic logic to efficiently check if a list is monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'strictly increasing or decreasing'\n    Explanation: The core concept here is to determine if the elements in the list are either continuously increasing or continuously decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic logic to efficiently check if a list is monotonic, the following steps can be considered simultaneously:\n    - Check if the list is strictly increasing by iterating through the list and comparing each element with the previous one.\n    - Check if the list is strictly decreasing by iterating through the list and comparing each element with the previous one.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is not strictly increasing or decreasing, as 3 is repeated twice.\n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is not strictly increasing or decreasing, as 1 is repeated twice.\n    monotonic([1, 2, 3, 4]) = True\n    Explanation: The list is strictly increasing.\n    \n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement analysis:\nThe requirement is to create a function that checks if a given list is monotonic, i.e., either strictly increasing or decreasing. The function should return True if the list is monotonic and False otherwise. The function should efficiently handle both increasing and decreasing lists.\nrequirement pool:\n- Implement the monotonic function to check for increasing and decreasing lists\n- Ensure the function handles edge cases and empty lists correctly\n- Optimize the algorithm for performance to handle large lists efficiently\nWe will design a simple static Python function using the built-in 'all' function to efficiently check if a list is monotonic. No external libraries will be used to keep the architecture simple.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'strictly increasing or decreasing'\n    Explanation: The core concept here is to determine if the list elements are either strictly increasing or strictly decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic provided in the plan is sufficient to implement the functionality required for the 'monotonic' function.\n\n# [edge case] \n    monotonic([1, 2, 3, 4]) = True\n    Explanation: The list elements are strictly increasing, so the expected output is True.\n    \n    monotonic([4, 3, 2, 1]) = True\n    Explanation: The list elements are strictly decreasing, so the expected output is True.\n    \n    monotonic([1, 2, 2, 4]) = False\n    Explanation: The list elements are not strictly increasing or decreasing, so the expected output is False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic covers all scenarios appropriately.\n", "requirement analysis:\nThe requirement is to create a function that determines if a given list is monotonic, i.e., strictly increasing or decreasing. The function should return True if the list is monotonic and False otherwise. The algorithm should efficiently handle both increasing and decreasing monotonicity.\nrequirement pool:\n- Implement a function to check if a list is strictly increasing or decreasing\n- Ensure the function can handle edge cases like empty lists\n- Optimize the algorithm for better performance on large lists\nWe will design a simple static Python function using basic logic to efficiently determine if a list is monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'strictly increasing or decreasing'\n    Explanation: The core concept here is to check if the list elements are either strictly increasing or strictly decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list elements are strictly increasing or strictly decreasing simultaneously.\n\n# [edge case] \n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The list elements are strictly increasing.\n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The list elements are strictly decreasing.\n    monotonic([1, 20, 4, 10]) = False\n    Explanation: The list elements are neither strictly increasing nor strictly decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic covers all scenarios.\n", "requirement pool:\n- Implement a function to check if a list is monotonic\n- Ensure the function handles both increasing and decreasing lists\n- Optimize the algorithm for better performance\nWe will design a simple static Python function using the built-in 'all' function to efficiently check if a list is monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'strictly increasing or decreasing'\n    Explanation: It means that the list elements are either consistently getting larger or consistently getting smaller.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already provides the logic to implement the code, no additional logic explanation is needed.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list elements are strictly increasing.\n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list elements are strictly decreasing.\n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list elements are not strictly increasing or decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic covers all scenarios.\n", "requirement analysis:\nThe main goal is to create a highly efficient and accurate function for determining monotonic lists. This function should handle both increasing and decreasing monotonicity. Performance optimization is crucial, especially for large input lists.\nrequirement pool:\n- Implement a function to detect monotonic lists\n- Ensure the function works for both increasing and decreasing monotonicity\n- Optimize the function for performance, especially with large input lists\nWe will design a static Python function using basic logic to efficiently determine if a list is monotonic. We will leverage the built-in functions in Python to optimize performance for large input lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'strictly increasing or decreasing'\n    Explanation: The core concept here is to check if the list elements are either continuously increasing or continuously decreasing without any fluctuations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions leveraging built-in functions in Python, we can use the `all()` function along with a list comprehension to check if all elements in the list satisfy the monotonic condition. Here's the logic:\n    \n```python\ndef monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n```\n\n# [edge case] \n    monotonic([1, 2, 3, 4]) = True\n    Explanation: The list elements are strictly increasing, so the function returns True.\n    \n    monotonic([4, 3, 2, 1]) = True\n    Explanation: The list elements are strictly decreasing, so the function returns True.\n    \n    monotonic([1, 2, 1, 4]) = False\n    Explanation: The list elements are not strictly increasing or decreasing, so the function returns False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios of strictly increasing or decreasing lists.\n", "requirement pool:\n- Implement efficient monotonicity check algorithm\n- Ensure correctness for all edge cases\n- Optimize for performance on large input lists\nWe will design a simple static Python function using appropriate open-source libraries to efficiently determine if a list is monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'strictly increasing or decreasing'\n    Explanation: The core concept here is to check if the elements in the list are either continuously increasing or continuously decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using appropriate open-source libraries, the code logic might involve utilizing functions from libraries like NumPy or Pandas to check for monotonicity in the list efficiently.\n\n# [edge case] \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are the same, so it is considered as strictly increasing.\n    monotonic([4, 3, 2, 1]) = True\n    Explanation: Elements are strictly decreasing.\n    monotonic([1, 2, 2, 3]) = False\n    Explanation: The list is not strictly increasing or decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for monotonicity should cover these scenarios.\n", "requirement pool:\n- Implement efficient monotonic list detection algorithm\n- Ensure accuracy in identifying monotonic behavior\n- Optimize performance for large input lists\nWe will design a simple static Python function using appropriate open-source libraries to efficiently determine if a list is monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'strictly increasing or decreasing'\n    Explanation: The core concept here is to check if the elements in the list are either continuously increasing or continuously decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using appropriate open-source libraries, the code logic might involve utilizing functions from libraries like NumPy or Pandas to check for monotonicity in the list efficiently.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is strictly increasing as it contains consecutive equal elements.\n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is strictly decreasing as it contains consecutive equal elements.\n    monotonic([1, 2, 2, 1]) = False\n    Explanation: The list is not strictly increasing or decreasing as it has non-continuous elements.\n\n# [extra code for edge case]\n    We might need extra code to handle the edge cases where the list contains consecutive equal elements. This can be achieved by checking for equality in addition to monotonicity.\n", "requirement pool:\n- Implement efficient monotonicity check for both increasing and decreasing lists\n- Optimize algorithm performance for large input lists\n- Ensure the function handles edge cases like empty lists\nWe will design a simple static Python function using appropriate open-source libraries to efficiently check if a list is monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'strictly increasing or decreasing'\n    Explanation: The core concept here is to determine whether the elements in the list are either continuously increasing or continuously decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is strictly increasing as each element is greater than the previous one.\n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is strictly decreasing as each element is less than the previous one.\n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not strictly increasing or decreasing as it has a decrease followed by an increase.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for monotonicity can handle these cases effectively.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, false, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 0, 113, 113, 113, 113, 113], "completion": "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the list elements are strictly increasing or decreasing.'''\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    \n    return increasing or decreasing\n", "passed": true, "pass": true, "pass_num": 9, "round": 985, "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if the list elements are strictly increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "'''Return True if the list elements are strictly increasing or decreasing. If the list elements are not in a strictly increasing or decreasing order, return False.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "def monotonic(l: list):\t\n'''Return True if the list elements are strictly increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "mutate_method": "rephrase_one", "parent_index": 824}
