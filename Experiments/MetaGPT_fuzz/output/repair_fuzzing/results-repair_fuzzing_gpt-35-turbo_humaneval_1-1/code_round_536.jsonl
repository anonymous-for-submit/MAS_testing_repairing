{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted distinct elements that appear in both lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "entry_point": "common", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "test": ["def check(common):\n\tassert common([6, 5, 7, 10], [8, 4]) == []", "def check(common):\n\tassert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "def check(common):\n\tassert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "def check(common):\n\tassert common([8, 7, 6, 13], [7, 2]) == [7]", "def check(common):\n\tassert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "def check(common):\n\tassert common([7, 8, 6, 11], [4, 5, 9]) == []", "def check(common):\n\tassert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "def check(common):\n\tassert common([6, 6, 4, 12], [3, 1]) == []", "def check(common):\n\tassert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "def check(common):\n\tassert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "def check(common):\n\tassert common([4, 8, 2, 9], [3, 1]) == []", "def check(common):\n\tassert common([3, 5, 5, 8], [7, 6]) == []", "def check(common):\n\tassert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "def check(common):\n\tassert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "def check(common):\n\tassert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "def check(common):\n\tassert common([3, 7, 6, 3], [2, 4, 5]) == []", "def check(common):\n\tassert common([7, 4, 3, 10], [3, 1]) == [3]", "def check(common):\n\tassert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "def check(common):\n\tassert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "def check(common):\n\tassert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "def check(common):\n\tassert common([3, 1, 6, 11], [6, 6]) == [6]", "def check(common):\n\tassert common([7, 4, 7, 13], [8, 4]) == [4]", "def check(common):\n\tassert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "def check(common):\n\tassert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "def check(common):\n\tassert common([5, 8, 7, 3], [6, 4]) == []", "def check(common):\n\tassert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "def check(common):\n\tassert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "def check(common):\n\tassert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "def check(common):\n\tassert common([6, 6, 4, 5], [3, 3, 8]) == []", "def check(common):\n\tassert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "def check(common):\n\tassert common([2, 1, 7, 9], [6, 3]) == []", "def check(common):\n\tassert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "def check(common):\n\tassert common([7, 6, 3, 9], [6, 5]) == [6]", "def check(common):\n\tassert common([2, 3, 3, 9], [5, 2]) == [2]", "def check(common):\n\tassert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "def check(common):\n\tassert common([8, 3, 4, 10], [8, 7]) == [8]", "def check(common):\n\tassert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "def check(common):\n\tassert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "def check(common):\n\tassert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "def check(common):\n\tassert common([4, 5, 7, 12], [7, 1]) == [7]", "def check(common):\n\tassert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "def check(common):\n\tassert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "def check(common):\n\tassert common([2, 6, 2, 8], [5, 2]) == [2]", "def check(common):\n\tassert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "def check(common):\n\tassert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "def check(common):\n\tassert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "def check(common):\n\tassert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "def check(common):\n\tassert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "def check(common):\n\tassert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "def check(common):\n\tassert common([5, 5, 7, 7], [5, 2]) == [5]", "def check(common):\n\tassert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "def check(common):\n\tassert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "def check(common):\n\tassert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([5, 2, 1, 3], [8, 3]) == [3]", "def check(common):\n\tassert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "def check(common):\n\tassert common([5, 6, 4, 8], [3, 7, 2]) == []", "def check(common):\n\tassert common([7, 7, 5, 11], [3, 4]) == []", "def check(common):\n\tassert common([4, 3, 2, 8], []) == []", "def check(common):\n\tassert common([7, 7, 7, 3], [2, 4]) == []", "def check(common):\n\tassert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "def check(common):\n\tassert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "def check(common):\n\tassert common([1, 8, 7, 3], [2, 6]) == []", "def check(common):\n\tassert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "def check(common):\n\tassert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "def check(common):\n\tassert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "def check(common):\n\tassert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "def check(common):\n\tassert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "def check(common):\n\tassert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "def check(common):\n\tassert common([8, 4, 1, 9], [6, 3]) == []", "def check(common):\n\tassert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "def check(common):\n\tassert common([9, 7, 7, 7], [5, 2]) == []", "def check(common):\n\tassert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "def check(common):\n\tassert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "def check(common):\n\tassert common([8, 4, 6, 5], [1, 1]) == []", "def check(common):\n\tassert common([4, 5, 3, 10], [7, 5]) == [5]", "def check(common):\n\tassert common([7, 1, 7, 13], [3, 1]) == [1]", "def check(common):\n\tassert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "def check(common):\n\tassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "def check(common):\n\tassert common([7, 7, 1, 4], [5, 6]) == []", "def check(common):\n\tassert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "def check(common):\n\tassert common([8, 1, 1, 3], [5, 6]) == []", "def check(common):\n\tassert common([6, 3, 6, 3], [8, 5, 8]) == []", "def check(common):\n\tassert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "def check(common):\n\tassert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "def check(common):\n\tassert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "def check(common):\n\tassert common([1, 3, 4, 9], [7, 3]) == [3]", "def check(common):\n\tassert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "def check(common):\n\tassert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "def check(common):\n\tassert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "def check(common):\n\tassert common([8, 1, 4, 10], [4, 2]) == [4]", "def check(common):\n\tassert common([2, 8, 5, 10], [8, 4]) == [8]", "def check(common):\n\tassert common([8, 4, 4, 6], [3, 6]) == [6]", "def check(common):\n\tassert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "def check(common):\n\tassert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "def check(common):\n\tassert common([3, 1, 4, 5], [1, 1]) == [1]", "def check(common):\n\tassert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "test_case_list": ["assert common([6, 5, 7, 10], [8, 4]) == []", "assert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "assert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "assert common([8, 7, 6, 13], [7, 2]) == [7]", "assert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "assert common([7, 8, 6, 11], [4, 5, 9]) == []", "assert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "assert common([6, 6, 4, 12], [3, 1]) == []", "assert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "assert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "assert common([4, 8, 2, 9], [3, 1]) == []", "assert common([3, 5, 5, 8], [7, 6]) == []", "assert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "assert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "assert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "assert common([3, 7, 6, 3], [2, 4, 5]) == []", "assert common([7, 4, 3, 10], [3, 1]) == [3]", "assert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "assert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "assert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "assert common([3, 1, 6, 11], [6, 6]) == [6]", "assert common([7, 4, 7, 13], [8, 4]) == [4]", "assert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "assert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "assert common([5, 8, 7, 3], [6, 4]) == []", "assert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "assert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "assert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "assert common([6, 6, 4, 5], [3, 3, 8]) == []", "assert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "assert common([2, 1, 7, 9], [6, 3]) == []", "assert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "assert common([7, 6, 3, 9], [6, 5]) == [6]", "assert common([2, 3, 3, 9], [5, 2]) == [2]", "assert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "assert common([8, 3, 4, 10], [8, 7]) == [8]", "assert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "assert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "assert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "assert common([4, 5, 7, 12], [7, 1]) == [7]", "assert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "assert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "assert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "assert common([2, 6, 2, 8], [5, 2]) == [2]", "assert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "assert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "assert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "assert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "assert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "assert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "assert common([5, 5, 7, 7], [5, 2]) == [5]", "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "assert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "assert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "assert common([5, 2, 1, 3], [8, 3]) == [3]", "assert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "assert common([5, 6, 4, 8], [3, 7, 2]) == []", "assert common([7, 7, 5, 11], [3, 4]) == []", "assert common([4, 3, 2, 8], []) == []", "assert common([7, 7, 7, 3], [2, 4]) == []", "assert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "assert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "assert common([1, 8, 7, 3], [2, 6]) == []", "assert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "assert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "assert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "assert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "assert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "assert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "assert common([8, 4, 1, 9], [6, 3]) == []", "assert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "assert common([9, 7, 7, 7], [5, 2]) == []", "assert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "assert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "assert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "assert common([8, 4, 6, 5], [1, 1]) == []", "assert common([4, 5, 3, 10], [7, 5]) == [5]", "assert common([7, 1, 7, 13], [3, 1]) == [1]", "assert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "assert common([7, 7, 1, 4], [5, 6]) == []", "assert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "assert common([8, 1, 1, 3], [5, 6]) == []", "assert common([6, 3, 6, 3], [8, 5, 8]) == []", "assert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "assert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "assert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "assert common([1, 3, 4, 9], [7, 3]) == [3]", "assert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "assert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "assert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "assert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "assert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "assert common([8, 1, 4, 10], [4, 2]) == [4]", "assert common([2, 8, 5, 10], [8, 4]) == [8]", "assert common([8, 4, 4, 6], [3, 6]) == [6]", "assert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "assert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "assert common([3, 1, 4, 5], [1, 1]) == [1]", "assert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "nl": "Return sorted unique common elements for two lists.\n    ", "func": "def common(l1: list, l2: list):", "examples": ">>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    ", "completions": ["from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted distinct elements that appear in both lists.\n    :param l1: First input list\n    :param l2: Second input list\n    :return: List of sorted distinct common elements\n    '''\n    \n    # Convert input lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the result back to a list and sort it\n    result = sorted(list(common_elements))\n    \n    return result\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted distinct elements that appear in both lists.\n    :param l1: First input list\n    :param l2: Second input list\n    :return: List of sorted distinct common elements\n    '''\n    \n    common_elements = list(set(l1).intersection(l2))  # Find common elements using set intersection\n    common_elements.sort()  # Sort the common elements\n    \n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted distinct elements that appear in both lists.\n    :param l1: First list\n    :param l2: Second list\n    :return: List of common elements\n    '''\n    \n    common_elements = list(set(l1).intersection(l2))  # Find common elements using set intersection\n    common_elements.sort()  # Sort the common elements\n    \n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted distinct elements that appear in both lists.\n    \n    :param l1: First list\n    :param l2: Second list\n    :return: List of sorted common elements\n    '''\n    \n    set1 = set(l1)\n    set2 = set(l2)\n    \n    common_elements = list(set1.intersection(set2))\n    common_elements.sort()\n    \n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted distinct elements that appear in both lists.\n\n    Args:\n        l1 (list): The first input list.\n        l2 (list): The second input list.\n\n    Returns:\n        list: A list of sorted distinct common elements.\n    '''\n    common_elements = sorted(list(set(l1) & set(l2)))\n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted distinct elements that appear in both lists.\n    \n    Args:\n        l1 (list): The first input list.\n        l2 (list): The second input list.\n    \n    Returns:\n        list: A list of sorted distinct common elements.\n    '''\n    \n    # Convert both lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the result back to a list and sort it in ascending order\n    result = sorted(list(common_elements))\n    \n    return result\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted distinct elements that appear in both lists.'''\n    \n    common_elements = list(set(l1) & set(l2))  # Find common elements using set intersection\n    common_elements.sort()  # Sort the common elements\n    \n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted distinct elements that appear in both lists.\n    '''\n    common_elements = list(set(l1) & set(l2))  # Find common elements using set intersection\n    return sorted(list(set(common_elements)))  # Sort and return the distinct common elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted distinct elements that appear in both lists.'''\n    \n    # Convert both lists to sets to get unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the result back to a sorted list and return it\n    return sorted(list(common_elements))\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted distinct elements that appear in both lists.\n    :param l1: First list\n    :param l2: Second list\n    :return: List of sorted distinct common elements\n    '''\n    \n    common_elements = list(set(l1).intersection(l2))  # Find common elements using set intersection\n    common_elements.sort()  # Sort the common elements\n    \n    return common_elements\n"], "plans": ["requirement pool:\n- Efficiently find common elements in two lists\n- Ensure output list is sorted and contains distinct elements\n- Optimize function performance for large input lists\nWe will design a static Python function using basic list operations and the built-in set data structure to efficiently find and display common elements in two lists while ensuring the output list is sorted and contains distinct elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted distinct elements': The output list should contain elements that are sorted in ascending order and are unique.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic list operations and the set data structure, we can follow these steps:\n    1. Convert both input lists to sets to remove duplicates.\n    2. Find the intersection of the two sets to get common elements.\n    3. Convert the result back to a list and sort it.\n    4. Return the sorted list of common elements.\n\n# [edge case] \n    common([], [1, 2, 3]) = []\n    Explanation: When one list is empty, there are no common elements, so the expected output is an empty list.\n    common([1, 2, 3], []) = []\n    Explanation: When the other list is empty, there are no common elements, so the expected output is an empty list.\n    common([], []) = []\n    Explanation: When both lists are empty, there are no common elements, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where one or both lists are empty.\n", "requirement pool:\n- Implement a function that efficiently finds common elements in two lists\n- Ensure the output list is sorted and contains only distinct elements\n- Optimize the algorithm for better performance with large input lists\nWe will utilize the built-in functions in Python to efficiently find common elements in two lists, sort them, and remove duplicates.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: The core concept is to find elements that are present in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in functions, the logic can be implemented as follows:\n    1. Use set intersection to find common elements between the two lists.\n    2. Convert the result to a list and sort it.\n    3. Return the sorted list of common elements.\n\n# [edge case] \n    common([], [1, 2, 3]) = []\n    Explanation: When one list is empty, there are no common elements, so the expected output is an empty list.\n    common([1, 2, 3], []) = []\n    Explanation: When the other list is empty, there are no common elements, so the expected output is an empty list.\n    common([], []) = []\n    Explanation: When both lists are empty, there are no common elements, so the expected output is an empty list.\n\n# [extra code for edge case]\n    No extra code needed to handle the edge cases. The logic covers scenarios where one or both lists are empty.\n", "requirement pool:\n- Efficiently find common elements in two lists\n- Ensure sorted output with distinct elements\n- Optimize algorithm for performance\nWe will use the built-in Python functions to efficiently find common elements in two lists, sort the output, and remove duplicates.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that appear in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python functions, the logic can be implemented as follows:\n    1. Use set intersection to find common elements between the two lists.\n    2. Convert the result to a list and sort it.\n    3. Return the sorted list of common elements.\n\n# [edge case] \n    common([], [1, 2, 3]) = []\n    Explanation: When one list is empty, there are no common elements, so the expected output is an empty list.\n    common([1, 2, 3], []) = []\n    Explanation: When the other list is empty, there are no common elements, so the expected output is an empty list.\n    common([], []) = []\n    Explanation: When both lists are empty, there are no common elements, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers these scenarios appropriately.\n", "requirement pool:\n- Efficiently find and return common elements in two lists\n- Ensure the output list is sorted and contains distinct elements\n- Optimize the algorithm for large input lists\nWe will use the built-in set data structure in Python to efficiently find and return common elements in two lists. By converting the lists to sets, we can easily perform intersection operation to get the common elements. Finally, we will sort the result and return it as a list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: The core concept is to find elements that appear in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will convert both lists to sets to efficiently find the common elements. Then, we will perform an intersection operation on the sets to get the common elements. Finally, we will sort the result and return it as a list.\n\n# [edge case] \n    common([], []) = []\n    Explanation: When both lists are empty, there are no common elements, so the expected output is an empty list.\n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 3], [3, 2, 1]) = [1, 2, 3]\n    Explanation: All elements are common in both lists, so the expected output is a sorted list of [1, 2, 3].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where there are no common elements or all elements are common.\n", "requirement pool:\n- Efficiently compare two lists and return sorted common elements\n- Ensure the output contains only distinct elements\n- Optimize the algorithm for performance\nWe will use the built-in Python functions to efficiently find and display common elements in two lists. We will sort the elements and remove duplicates to meet the requirements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to elements that appear in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already suggests using built-in Python functions to find common elements efficiently, we can directly implement the code using set intersection and sorting.\n\n```python\ndef common(l1: list, l2: list):\n    common_elements = sorted(list(set(l1) & set(l2)))\n    return common_elements\n```\n\n# [edge case] \n    common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) = [1, 5, 653]\n    Explanation: The common elements between the two lists are 1, 5, and 653.\n    common([5, 3, 2, 8], [3, 2]) = [2, 3]\n    Explanation: The common elements between the two lists are 2 and 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the requirements effectively.\n", "requirement pool:\n- Implement a function that finds common elements in two lists\n- Ensure the output list is sorted and contains distinct elements\n- Optimize the algorithm for performance with large input lists\nWe will use Python and the built-in functions to efficiently find and return common elements in two lists. We will sort the elements and remove duplicates to ensure the output list is sorted and contains distinct elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted distinct elements': Refers to elements that are arranged in ascending order and do not have any duplicates.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'ascending': Indicates that the elements should be sorted in increasing order.\n\n# [code logic]\n    1. Convert both lists to sets to remove duplicates.\n    2. Find the intersection of the two sets to get common elements.\n    3. Convert the result back to a list and sort it in ascending order.\n    4. Return the sorted list of common elements.\n\n# [edge case] \n    common([], []) = []\n    Explanation: When both lists are empty, there are no common elements, so the expected output is an empty list.\n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 3], [3, 2, 1]) = [1, 2, 3]\n    Explanation: All elements are common between the two lists, and they are returned in ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where there are no common elements or all elements are common.\n", "requirement pool:\n- Efficiently find common elements in two lists\n- Ensure the output list is sorted\n- Optimize the algorithm for large input lists\nWe will use the built-in Python functions to efficiently find common elements in two lists, sort them, and optimize the algorithm for large input lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that appear in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    common([], []) = []\n    Explanation: When both lists are empty, there are no common elements, so the expected output is an empty list.\n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to find common elements and sort them will handle these cases appropriately.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python functions to implement the common function without the need for any external libraries.\nPlease read and understand the following inteperation before coding\n## Prompt 3:\n\n# [core concept]\n    'sorted distinct elements': Refers to unique elements that are sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using built-in Python functions, we can implement the common function as follows:\n```python\ndef common(l1: list, l2: list) -> list:\n    common_elements = list(set(l1) & set(l2))  # Find common elements using set intersection\n    return sorted(list(set(common_elements)))  # Sort and return the distinct common elements\n```\n\n# [edge case] \n    common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) = [1, 5, 653]\n    Explanation: The common elements between the two lists are 1, 5, and 653. They are sorted and returned.\n    \n    common([5, 3, 2, 8], [3, 2]) = [2, 3]\n    Explanation: The common elements between the two lists are 2 and 3. They are sorted and returned.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The logic provided covers the requirements effectively.\n", "requirement pool:\n- Implement efficient algorithm to find common elements\n- Ensure sorting and distinctness of common elements\n- Optimize performance for large input lists\nWe will use the built-in Python functions to efficiently find and display common elements in two lists. Specifically, we will utilize the set data structure to handle distinct elements and sorting.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted distinct elements': Refers to elements that are unique and arranged in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using set data structure for distinct elements and sorting, the code logic can follow these steps:\n    1. Convert both lists to sets to get unique elements.\n    2. Find the intersection of the two sets to get common elements.\n    3. Convert the result back to a sorted list and return it.\n\n# [edge case] \n    common([], [1, 2, 3]) = []\n    Explanation: When one list is empty, there are no common elements, so the expected output is an empty list.\n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: When both lists have no common elements, the expected output is an empty list.\n    common([1, 2, 3], [3, 2, 1]) = [1, 2, 3]\n    Explanation: When both lists are the same, all elements are common.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers these scenarios effectively.\n", "requirement pool:\n- Implement a function that efficiently finds common elements in two lists\n- Ensure the output list is sorted and contains distinct elements\n- Optimize the algorithm for better performance\nWe will utilize the built-in functions in Python to efficiently find common elements in two lists, sort the output list, and remove duplicates.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: The core concept is to find elements that are present in both input lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in functions, the logic can be implemented as follows:\n    1. Use set intersection to find common elements between the two lists.\n    2. Convert the result to a list and sort it.\n    3. Return the sorted list of common elements.\n\n# [edge case] \n    common([], [1, 2, 3]) = []\n    Explanation: When one list is empty, there are no common elements, so the expected output is an empty list.\n    common([1, 2, 3], []) = []\n    Explanation: When one list is empty, there are no common elements, so the expected output is an empty list.\n    common([], []) = []\n    Explanation: When both lists are empty, there are no common elements, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where one or both lists are empty.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], "completion": "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted distinct elements that appear in both lists.\n    :param l1: First list\n    :param l2: Second list\n    :return: List of sorted distinct common elements\n    '''\n    \n    common_elements = list(set(l1).intersection(l2))  # Find common elements using set intersection\n    common_elements.sort()  # Sort the common elements\n    \n    return common_elements\n", "passed": true, "pass": true, "pass_num": 10, "round": 536, "repair_prompt": ["def common(l1: list, l2: list):\t\n'''Return sorted distinct elements that appear in both lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "def common(l1: list, l2: list):\t\n'''Return sorted distinct elements that appear in both lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    Sort the elements that are common to both lists and return them in ascending order.\n'''", "def common(l1: list, l2: list):\n'''Return sorted distinct elements that appear in both lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]"], "mutate_method": "rephrase_one", "parent_index": 47}
