{"task_id": "HumanEval/160", "prompt": "def do_algebra(operator, operand):\t\n'''Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebraic expression and return the evaluation of this expression. The basic algebra operations include Addition ( + ), Subtraction ( - ), Multiplication ( * ), Floor division ( // ), and Exponentiation ( ** ).\nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "entry_point": "do_algebra", "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "test": ["def check(do_algebra):\n\tassert do_algebra(['**', '//', '-'], [5, 6, 6, 1]) == 2603", "def check(do_algebra):\n\tassert do_algebra(['**', '-', '-'], [7, 1, 4, 9]) == -6", "def check(do_algebra):\n\tassert do_algebra(['+', '**', '*'], [6, 2, 1, 1]) == 8", "def check(do_algebra):\n\tassert do_algebra(['+', '+', '+'], [1, 4, 9, 9]) == 23", "def check(do_algebra):\n\tassert do_algebra(['//', '-', '-'], [3, 3, 3, 6]) == -8", "def check(do_algebra):\n\tassert do_algebra(['-', '*', '-'], [1, 1, 2, 3]) == -4", "def check(do_algebra):\n\tassert do_algebra(['//', '-', '*'], [7, 2, 7, 5]) == -32", "def check(do_algebra):\n\tassert do_algebra(['//', '*', '+'], [3, 5, 2, 3]) == 3", "def check(do_algebra):\n\tassert do_algebra(['//', '**', '+'], [3, 7, 9, 3]) == 3", "def check(do_algebra):\n\tassert do_algebra(['*', '//', '//'], [5, 2, 7, 9]) == 0", "def check(do_algebra):\n\tassert do_algebra(['-', '//', '-'], [6, 8, 1, 10]) == -12", "def check(do_algebra):\n\tassert do_algebra(['//', '**', '-'], [3, 7, 7, 1]) == -1", "def check(do_algebra):\n\tassert do_algebra(['**', '*', '+'], [2, 3, 4, 5]) == 37", "def check(do_algebra):\n\tassert do_algebra(['//', '//'], [8, 8, 7]) == 0", "def check(do_algebra):\n\tassert do_algebra(['//', '//', '*'], [2, 1, 7, 6]) == 0", "def check(do_algebra):\n\tassert do_algebra(['//', '//', '+'], [5, 2, 8, 2]) == 2", "def check(do_algebra):\n\tassert do_algebra(['*', '+', '+'], [3, 2, 6, 5]) == 17", "def check(do_algebra):\n\tassert do_algebra(['*', '**'], [5, 1, 6]) == 5", "def check(do_algebra):\n\tassert do_algebra(['-', '+', '**'], [5, 3, 5, 6]) == 15627", "def check(do_algebra):\n\tassert do_algebra(['-', '**', '//'], [1, 8, 3, 3]) == -169", "def check(do_algebra):\n\tassert do_algebra(['**', '+', '-'], [3, 8, 1, 2]) == 6560", "def check(do_algebra):\n\tassert do_algebra(['**', '//'], [12, 1, 6]) == 2", "def check(do_algebra):\n\tassert do_algebra(['*', '+', '-'], [2, 2, 9, 6]) == 7", "def check(do_algebra):\n\tassert do_algebra(['*', '+'], [2, 5, 7]) == 17", "def check(do_algebra):\n\tassert do_algebra(['**', '*'], [2, 3, 1]) == 8", "def check(do_algebra):\n\tassert do_algebra(['**', '//'], [7, 8, 8]) == 720600", "def check(do_algebra):\n\tassert do_algebra(['-', '+', '-'], [3, 5, 9, 7]) == 0", "def check(do_algebra):\n\tassert do_algebra(['**', '+'], [8, 4, 1]) == 4097", "def check(do_algebra):\n\tassert do_algebra(['**', '*', '+'], [5, 2, 1, 9]) == 34", "def check(do_algebra):\n\tassert do_algebra(['//', '-', '*'], [5, 4, 7, 1]) == -6", "def check(do_algebra):\n\tassert do_algebra(['-', '**'], [6, 2, 2]) == 2", "def check(do_algebra):\n\tassert do_algebra(['*', '+', '+'], [6, 3, 5, 5]) == 28", "def check(do_algebra):\n\tassert do_algebra(['-', '**'], [8, 2, 7]) == -120", "def check(do_algebra):\n\tassert do_algebra(['//', '**'], [4, 4, 4]) == 0", "def check(do_algebra):\n\tassert do_algebra(['-', '//'], [5, 3, 8]) == 5", "def check(do_algebra):\n\tassert do_algebra(['//', '**', '-'], [7, 2, 9, 3]) == -3", "def check(do_algebra):\n\tassert do_algebra(['**', '-', '//'], [6, 1, 6, 7]) == 6", "def check(do_algebra):\n\tassert do_algebra(['*', '//', '-'], [7, 1, 5, 10]) == -9", "def check(do_algebra):\n\tassert do_algebra(['//', '*', '**'], [7, 6, 2, 1]) == 2", "def check(do_algebra):\n\tassert do_algebra(['*', '*', '-'], [7, 8, 1, 9]) == 47", "def check(do_algebra):\n\tassert do_algebra(['**', '+'], [8, 2, 7]) == 71", "def check(do_algebra):\n\tassert do_algebra(['**', '//'], [9, 5, 9]) == 6561", "def check(do_algebra):\n\tassert do_algebra(['**', '-', '*'], [5, 1, 2, 3]) == -1", "def check(do_algebra):\n\tassert do_algebra(['*', '//', '+'], [7, 1, 8, 9]) == 9", "def check(do_algebra):\n\tassert do_algebra(['//', '//', '+'], [2, 5, 8, 8]) == 8", "def check(do_algebra):\n\tassert do_algebra(['*', '-', '+'], [6, 7, 4, 4]) == 42", "def check(do_algebra):\n\tassert do_algebra(['-', '**', '-'], [7, 4, 1, 8]) == -5", "def check(do_algebra):\n\tassert do_algebra(['+', '**', '+'], [4, 2, 7, 1]) == 133", "def check(do_algebra):\n\tassert do_algebra(['*', '+'], [9, 3, 8]) == 35", "def check(do_algebra):\n\tassert do_algebra(['*', '-', '//'], [4, 4, 2, 6]) == 16", "def check(do_algebra):\n\tassert do_algebra(['*', '//', '//'], [7, 7, 6, 6]) == 1", "def check(do_algebra):\n\tassert do_algebra(['**', '//', '//'], [1, 7, 6, 2]) == 0", "def check(do_algebra):\n\tassert do_algebra(['*', '-', '**'], [2, 7, 7, 1]) == 7", "def check(do_algebra):\n\tassert do_algebra(['+', '*', '**'], [6, 8, 1, 2]) == 14", "def check(do_algebra):\n\tassert do_algebra(['**', '//', '+'], [5, 8, 3, 3]) == 130211", "def check(do_algebra):\n\tassert do_algebra(['*', '-'], [6, 5, 7]) == 23", "def check(do_algebra):\n\tassert do_algebra(['*', '*', '+'], [1, 3, 2, 9]) == 15", "def check(do_algebra):\n\tassert do_algebra(['-', '*'], [3, 3, 6]) == -15", "def check(do_algebra):\n\tassert do_algebra(['//', '-', '**'], [4, 8, 2, 2]) == -4", "def check(do_algebra):\n\tassert do_algebra(['-', '**', '-'], [4, 5, 5, 9]) == -3130", "def check(do_algebra):\n\tassert do_algebra(['**', '+', '*'], [1, 5, 5, 1]) == 6", "def check(do_algebra):\n\tassert do_algebra(['-', '**'], [3, 5, 2]) == -22", "def check(do_algebra):\n\tassert do_algebra(['+', '*'], [7, 3, 6]) == 25", "def check(do_algebra):\n\tassert do_algebra(['*', '-', '**'], [5, 5, 2, 8]) == -231", "def check(do_algebra):\n\tassert do_algebra(['+', '-', '**'], [6, 8, 4, 10]) == -1048562", "def check(do_algebra):\n\tassert do_algebra(['+', '//', '*'], [7, 3, 7, 1]) == 7", "def check(do_algebra):\n\tassert do_algebra(['**', '-', '//'], [7, 8, 1, 10]) == 5764801", "def check(do_algebra):\n\tassert do_algebra(['//', '//', '+'], [1, 2, 8, 10]) == 10", "def check(do_algebra):\n\tassert do_algebra(['*', '*', '-'], [3, 4, 1, 4]) == 8", "def check(do_algebra):\n\tassert do_algebra(['//', '+', '**'], [7, 1, 5, 1]) == 12", "def check(do_algebra):\n\tassert do_algebra(['*', '**'], [3, 2, 8]) == 768", "def check(do_algebra):\n\tassert do_algebra(['*', '**'], [7, 3, 3]) == 189", "def check(do_algebra):\n\tassert do_algebra(['+', '**', '-'], [5, 2, 5, 9]) == 28", "def check(do_algebra):\n\tassert do_algebra(['-', '**', '*'], [5, 2, 7, 8]) == -1019", "def check(do_algebra):\n\tassert do_algebra(['-', '+'], [8, 4, 3]) == 7", "def check(do_algebra):\n\tassert do_algebra(['+', '-', '//'], [5, 4, 6, 2]) == 6", "def check(do_algebra):\n\tassert do_algebra(['//', '+', '//'], [5, 1, 9, 4]) == 7", "def check(do_algebra):\n\tassert do_algebra(['*', '**', '+'], [7, 1, 5, 1]) == 8", "def check(do_algebra):\n\tassert do_algebra(['*', '+', '//'], [4, 6, 7, 10]) == 24", "def check(do_algebra):\n\tassert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9", "def check(do_algebra):\n\tassert do_algebra(['**', '*'], [8, 2, 2]) == 128", "def check(do_algebra):\n\tassert do_algebra(['**', '-', '*'], [6, 4, 5, 1]) == 1291", "def check(do_algebra):\n\tassert do_algebra(['-', '+'], [3, 4, 4]) == 3", "def check(do_algebra):\n\tassert do_algebra(['+', '-'], [10, 3, 8]) == 5", "def check(do_algebra):\n\tassert do_algebra(['//', '*'], [7, 3, 4]) == 8", "def check(do_algebra):\n\tassert do_algebra(['//', '-'], [6, 1, 2]) == 4", "def check(do_algebra):\n\tassert do_algebra(['**', '+'], [10, 3, 5]) == 1005", "def check(do_algebra):\n\tassert do_algebra(['+', '-'], [3, 7, 6]) == 4", "def check(do_algebra):\n\tassert do_algebra(['**', '//'], [9, 5, 2]) == 29524", "def check(do_algebra):\n\tassert do_algebra(['*', '*'], [5, 2, 7]) == 70", "def check(do_algebra):\n\tassert do_algebra(['*', '+', '**'], [5, 5, 2, 9]) == 537", "def check(do_algebra):\n\tassert do_algebra(['-', '**'], [3, 3, 4]) == -78", "def check(do_algebra):\n\tassert do_algebra(['**', '*', '*'], [7, 2, 4, 7]) == 1372", "def check(do_algebra):\n\tassert do_algebra(['**', '*', '-'], [7, 6, 4, 6]) == 470590", "def check(do_algebra):\n\tassert do_algebra(['//', '//'], [2, 7, 1]) == 0", "def check(do_algebra):\n\tassert do_algebra(['+', '**', '+'], [6, 6, 4, 7]) == 1309", "def check(do_algebra):\n\tassert do_algebra(['**', '*'], [10, 2, 8]) == 800", "def check(do_algebra):\n\tassert do_algebra(['+', '//'], [3, 6, 4]) == 4", "def check(do_algebra):\n\tassert do_algebra(['**', '+', '-'], [1, 5, 1, 1]) == 1", "def check(do_algebra):\n\tassert do_algebra(['+', '-', '*'], [6, 8, 6, 1]) == 8", "def check(do_algebra):\n\tassert do_algebra(['+', '**'], [7, 3, 5]) == 250", "def check(do_algebra):\n\tassert do_algebra(['-', '//'], [7, 3, 2]) == 6", "def check(do_algebra):\n\tassert do_algebra(['//', '+', '*'], [2, 6, 4, 4]) == 16", "def check(do_algebra):\n\tassert do_algebra(['//', '//', '**'], [7, 1, 9, 1]) == 0", "def check(do_algebra):\n\tassert do_algebra(['+', '*', '//'], [6, 5, 1, 3]) == 7", "def check(do_algebra):\n\tassert do_algebra(['+', '**'], [3, 2, 4]) == 19", "def check(do_algebra):\n\tassert do_algebra(['-', '*', '-'], [2, 7, 3, 9]) == -28", "def check(do_algebra):\n\tassert do_algebra(['*', '*', '-'], [2, 1, 8, 4]) == 12", "def check(do_algebra):\n\tassert do_algebra(['+', '**'], [7, 6, 6]) == 46663", "def check(do_algebra):\n\tassert do_algebra(['**', '-', '-'], [1, 7, 7, 10]) == -16", "def check(do_algebra):\n\tassert do_algebra(['**', '//', '//'], [1, 7, 4, 8]) == 0", "def check(do_algebra):\n\tassert do_algebra(['-', '*', '*'], [7, 4, 7, 8]) == -217", "def check(do_algebra):\n\tassert do_algebra(['**', '-'], [3, 2, 9]) == 0", "def check(do_algebra):\n\tassert do_algebra(['-', '+', '**'], [5, 4, 2, 3]) == 9", "def check(do_algebra):\n\tassert do_algebra(['+', '+'], [4, 4, 1]) == 9", "def check(do_algebra):\n\tassert do_algebra(['-', '+'], [10, 7, 1]) == 4", "def check(do_algebra):\n\tassert do_algebra(['-', '+', '*'], [5, 5, 4, 8]) == 32", "def check(do_algebra):\n\tassert do_algebra(['//', '//', '*'], [4, 8, 9, 6]) == 0", "def check(do_algebra):\n\tassert do_algebra(['+', '**', '-'], [1, 1, 9, 4]) == -2", "def check(do_algebra):\n\tassert do_algebra(['+', '//', '+'], [5, 8, 2, 1]) == 10", "def check(do_algebra):\n\tassert do_algebra(['-', '//', '**'], [4, 5, 8, 3]) == 4", "def check(do_algebra):\n\tassert do_algebra(['+', '//', '*'], [5, 4, 8, 10]) == 5", "def check(do_algebra):\n\tassert do_algebra(['**', '-', '+'], [2, 1, 7, 9]) == 4", "def check(do_algebra):\n\tassert do_algebra(['//', '*'], [8, 4, 2]) == 4", "def check(do_algebra):\n\tassert do_algebra(['//', '-', '*'], [4, 3, 3, 1]) == -2", "def check(do_algebra):\n\tassert do_algebra(['-', '+', '+'], [1, 1, 9, 9]) == 18", "def check(do_algebra):\n\tassert do_algebra(['-', '+', '**'], [1, 4, 2, 7]) == 125", "def check(do_algebra):\n\tassert do_algebra(['*', '+'], [4, 8, 4]) == 36", "def check(do_algebra):\n\tassert do_algebra(['*', '//', '*'], [7, 3, 1, 10]) == 210"], "test_case_list": ["assert do_algebra(['**', '//', '-'], [5, 6, 6, 1]) == 2603", "assert do_algebra(['**', '-', '-'], [7, 1, 4, 9]) == -6", "assert do_algebra(['+', '**', '*'], [6, 2, 1, 1]) == 8", "assert do_algebra(['+', '+', '+'], [1, 4, 9, 9]) == 23", "assert do_algebra(['//', '-', '-'], [3, 3, 3, 6]) == -8", "assert do_algebra(['-', '*', '-'], [1, 1, 2, 3]) == -4", "assert do_algebra(['//', '-', '*'], [7, 2, 7, 5]) == -32", "assert do_algebra(['//', '*', '+'], [3, 5, 2, 3]) == 3", "assert do_algebra(['//', '**', '+'], [3, 7, 9, 3]) == 3", "assert do_algebra(['*', '//', '//'], [5, 2, 7, 9]) == 0", "assert do_algebra(['-', '//', '-'], [6, 8, 1, 10]) == -12", "assert do_algebra(['//', '**', '-'], [3, 7, 7, 1]) == -1", "assert do_algebra(['**', '*', '+'], [2, 3, 4, 5]) == 37", "assert do_algebra(['//', '//'], [8, 8, 7]) == 0", "assert do_algebra(['//', '//', '*'], [2, 1, 7, 6]) == 0", "assert do_algebra(['//', '//', '+'], [5, 2, 8, 2]) == 2", "assert do_algebra(['*', '+', '+'], [3, 2, 6, 5]) == 17", "assert do_algebra(['*', '**'], [5, 1, 6]) == 5", "assert do_algebra(['-', '+', '**'], [5, 3, 5, 6]) == 15627", "assert do_algebra(['-', '**', '//'], [1, 8, 3, 3]) == -169", "assert do_algebra(['**', '+', '-'], [3, 8, 1, 2]) == 6560", "assert do_algebra(['**', '//'], [12, 1, 6]) == 2", "assert do_algebra(['*', '+', '-'], [2, 2, 9, 6]) == 7", "assert do_algebra(['*', '+'], [2, 5, 7]) == 17", "assert do_algebra(['**', '*'], [2, 3, 1]) == 8", "assert do_algebra(['**', '//'], [7, 8, 8]) == 720600", "assert do_algebra(['-', '+', '-'], [3, 5, 9, 7]) == 0", "assert do_algebra(['**', '+'], [8, 4, 1]) == 4097", "assert do_algebra(['**', '*', '+'], [5, 2, 1, 9]) == 34", "assert do_algebra(['//', '-', '*'], [5, 4, 7, 1]) == -6", "assert do_algebra(['-', '**'], [6, 2, 2]) == 2", "assert do_algebra(['*', '+', '+'], [6, 3, 5, 5]) == 28", "assert do_algebra(['-', '**'], [8, 2, 7]) == -120", "assert do_algebra(['//', '**'], [4, 4, 4]) == 0", "assert do_algebra(['-', '//'], [5, 3, 8]) == 5", "assert do_algebra(['//', '**', '-'], [7, 2, 9, 3]) == -3", "assert do_algebra(['**', '-', '//'], [6, 1, 6, 7]) == 6", "assert do_algebra(['*', '//', '-'], [7, 1, 5, 10]) == -9", "assert do_algebra(['//', '*', '**'], [7, 6, 2, 1]) == 2", "assert do_algebra(['*', '*', '-'], [7, 8, 1, 9]) == 47", "assert do_algebra(['**', '+'], [8, 2, 7]) == 71", "assert do_algebra(['**', '//'], [9, 5, 9]) == 6561", "assert do_algebra(['**', '-', '*'], [5, 1, 2, 3]) == -1", "assert do_algebra(['*', '//', '+'], [7, 1, 8, 9]) == 9", "assert do_algebra(['//', '//', '+'], [2, 5, 8, 8]) == 8", "assert do_algebra(['*', '-', '+'], [6, 7, 4, 4]) == 42", "assert do_algebra(['-', '**', '-'], [7, 4, 1, 8]) == -5", "assert do_algebra(['+', '**', '+'], [4, 2, 7, 1]) == 133", "assert do_algebra(['*', '+'], [9, 3, 8]) == 35", "assert do_algebra(['*', '-', '//'], [4, 4, 2, 6]) == 16", "assert do_algebra(['*', '//', '//'], [7, 7, 6, 6]) == 1", "assert do_algebra(['**', '//', '//'], [1, 7, 6, 2]) == 0", "assert do_algebra(['*', '-', '**'], [2, 7, 7, 1]) == 7", "assert do_algebra(['+', '*', '**'], [6, 8, 1, 2]) == 14", "assert do_algebra(['**', '//', '+'], [5, 8, 3, 3]) == 130211", "assert do_algebra(['*', '-'], [6, 5, 7]) == 23", "assert do_algebra(['*', '*', '+'], [1, 3, 2, 9]) == 15", "assert do_algebra(['-', '*'], [3, 3, 6]) == -15", "assert do_algebra(['//', '-', '**'], [4, 8, 2, 2]) == -4", "assert do_algebra(['-', '**', '-'], [4, 5, 5, 9]) == -3130", "assert do_algebra(['**', '+', '*'], [1, 5, 5, 1]) == 6", "assert do_algebra(['-', '**'], [3, 5, 2]) == -22", "assert do_algebra(['+', '*'], [7, 3, 6]) == 25", "assert do_algebra(['*', '-', '**'], [5, 5, 2, 8]) == -231", "assert do_algebra(['+', '-', '**'], [6, 8, 4, 10]) == -1048562", "assert do_algebra(['+', '//', '*'], [7, 3, 7, 1]) == 7", "assert do_algebra(['**', '-', '//'], [7, 8, 1, 10]) == 5764801", "assert do_algebra(['//', '//', '+'], [1, 2, 8, 10]) == 10", "assert do_algebra(['*', '*', '-'], [3, 4, 1, 4]) == 8", "assert do_algebra(['//', '+', '**'], [7, 1, 5, 1]) == 12", "assert do_algebra(['*', '**'], [3, 2, 8]) == 768", "assert do_algebra(['*', '**'], [7, 3, 3]) == 189", "assert do_algebra(['+', '**', '-'], [5, 2, 5, 9]) == 28", "assert do_algebra(['-', '**', '*'], [5, 2, 7, 8]) == -1019", "assert do_algebra(['-', '+'], [8, 4, 3]) == 7", "assert do_algebra(['+', '-', '//'], [5, 4, 6, 2]) == 6", "assert do_algebra(['//', '+', '//'], [5, 1, 9, 4]) == 7", "assert do_algebra(['*', '**', '+'], [7, 1, 5, 1]) == 8", "assert do_algebra(['*', '+', '//'], [4, 6, 7, 10]) == 24", "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9", "assert do_algebra(['**', '*'], [8, 2, 2]) == 128", "assert do_algebra(['**', '-', '*'], [6, 4, 5, 1]) == 1291", "assert do_algebra(['-', '+'], [3, 4, 4]) == 3", "assert do_algebra(['+', '-'], [10, 3, 8]) == 5", "assert do_algebra(['//', '*'], [7, 3, 4]) == 8", "assert do_algebra(['//', '-'], [6, 1, 2]) == 4", "assert do_algebra(['**', '+'], [10, 3, 5]) == 1005", "assert do_algebra(['+', '-'], [3, 7, 6]) == 4", "assert do_algebra(['**', '//'], [9, 5, 2]) == 29524", "assert do_algebra(['*', '*'], [5, 2, 7]) == 70", "assert do_algebra(['*', '+', '**'], [5, 5, 2, 9]) == 537", "assert do_algebra(['-', '**'], [3, 3, 4]) == -78", "assert do_algebra(['**', '*', '*'], [7, 2, 4, 7]) == 1372", "assert do_algebra(['**', '*', '-'], [7, 6, 4, 6]) == 470590", "assert do_algebra(['//', '//'], [2, 7, 1]) == 0", "assert do_algebra(['+', '**', '+'], [6, 6, 4, 7]) == 1309", "assert do_algebra(['**', '*'], [10, 2, 8]) == 800", "assert do_algebra(['+', '//'], [3, 6, 4]) == 4", "assert do_algebra(['**', '+', '-'], [1, 5, 1, 1]) == 1", "assert do_algebra(['+', '-', '*'], [6, 8, 6, 1]) == 8", "assert do_algebra(['+', '**'], [7, 3, 5]) == 250", "assert do_algebra(['-', '//'], [7, 3, 2]) == 6", "assert do_algebra(['//', '+', '*'], [2, 6, 4, 4]) == 16", "assert do_algebra(['//', '//', '**'], [7, 1, 9, 1]) == 0", "assert do_algebra(['+', '*', '//'], [6, 5, 1, 3]) == 7", "assert do_algebra(['+', '**'], [3, 2, 4]) == 19", "assert do_algebra(['-', '*', '-'], [2, 7, 3, 9]) == -28", "assert do_algebra(['*', '*', '-'], [2, 1, 8, 4]) == 12", "assert do_algebra(['+', '**'], [7, 6, 6]) == 46663", "assert do_algebra(['**', '-', '-'], [1, 7, 7, 10]) == -16", "assert do_algebra(['**', '//', '//'], [1, 7, 4, 8]) == 0", "assert do_algebra(['-', '*', '*'], [7, 4, 7, 8]) == -217", "assert do_algebra(['**', '-'], [3, 2, 9]) == 0", "assert do_algebra(['-', '+', '**'], [5, 4, 2, 3]) == 9", "assert do_algebra(['+', '+'], [4, 4, 1]) == 9", "assert do_algebra(['-', '+'], [10, 7, 1]) == 4", "assert do_algebra(['-', '+', '*'], [5, 5, 4, 8]) == 32", "assert do_algebra(['//', '//', '*'], [4, 8, 9, 6]) == 0", "assert do_algebra(['+', '**', '-'], [1, 1, 9, 4]) == -2", "assert do_algebra(['+', '//', '+'], [5, 8, 2, 1]) == 10", "assert do_algebra(['-', '//', '**'], [4, 5, 8, 3]) == 4", "assert do_algebra(['+', '//', '*'], [5, 4, 8, 10]) == 5", "assert do_algebra(['**', '-', '+'], [2, 1, 7, 9]) == 4", "assert do_algebra(['//', '*'], [8, 4, 2]) == 4", "assert do_algebra(['//', '-', '*'], [4, 3, 3, 1]) == -2", "assert do_algebra(['-', '+', '+'], [1, 1, 9, 9]) == 18", "assert do_algebra(['-', '+', '**'], [1, 4, 2, 7]) == 125", "assert do_algebra(['*', '+'], [4, 8, 4]) == 36", "assert do_algebra(['*', '//', '*'], [7, 3, 1, 10]) == 210"], "nl": "\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    ", "func": "def do_algebra(operator, operand):", "examples": "Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    ", "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    '''\n    Given two lists operator and operand, build and evaluate the algebraic expression.\n    The function returns the result of the expression.\n    '''\n\n    if len(operator) == 0 or len(operand) == 0:\n        raise ValueError(\"Both operator and operand lists must not be empty\")\n\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Number of operators should be one less than the number of operands\")\n\n    result = operand[0]\n\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        else:\n            raise ValueError(\"Invalid operator provided\")\n\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    '''\n    Given two lists operator and operand, build and evaluate the algebraic expression.\n    The function takes a list of operators (e.g., ['+', '*', '-']) and a list of integers as operands.\n    Returns the evaluation result of the algebraic expression.\n    '''\n\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Invalid input: Number of operators should be one less than the number of operands\")\n\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '/':\n            result /= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n        else:\n            raise ValueError(\"Invalid operator: Supported operators are '+', '-', '*', '/', '**'\")\n\n    return result\n", "from typing import List\n## main.py\n\ndef do_algebra(operator, operand) -> int:\n    '''\n    Given two lists operator and operand, build and evaluate the algebraic expression.\n    Args:\n        operator (list): List of basic algebra operations.\n        operand (list): List of integers.\n    Returns:\n        int: Result of the evaluated expression.\n    '''\n\n    # Check if the lengths of operator and operand lists are valid\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Invalid input lists length\")\n\n    # Handle cases where the operator list is empty\n    if not operator:\n        return sum(operand)\n\n    # Build the algebraic expression string\n    expression = ''\n    for i in range(len(operator)):\n        expression += str(operand[i]) + operator[i]\n    expression += str(operand[-1])\n\n    # Evaluate the expression using eval() function\n    result = eval(expression)\n\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    :param numbers: List of float numbers\n    :param threshold: Float threshold value\n    :return: Boolean indicating if there are close elements\n    \"\"\"\n    \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef evaluate_expression(operators: List[str], operands: List[int]) -> int:\n    expression = ''\n    \n    for i in range(len(operators)):\n        expression += str(operands[i]) + operators[i]\n    \n    expression += str(operands[-1])\n    \n    result = eval(expression)\n    \n    result = result + 2 * result - 5\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef evaluate_expression(operators: List[str], operands: List[int]) -> int:\n    ## Constructing the algebraic expression using the given operators and operands\n    expression = \"\"\n    for i in range(len(operators)):\n        expression += str(operands[i])\n        expression += operators[i]\n    expression += str(operands[-1])\n    \n    ## Evaluating the expression using the eval function\n    total = eval(expression)\n    \n    ## Applying the specified rules of adding 2, multiplying by 3, and subtracting 5 to the total\n    total = total + 2\n    total = total * 3\n    total = total - 5\n    \n    ## Returning the final result\n    return total\n", "from typing import List\n## main.py\n\ndef do_algebra(operator, operand) -> int:\n    '''\n    Given two lists operator and operand, build an algebraic expression and return the evaluation result.\n    '''\n    expression = ''\n    \n    for i in range(len(operand)):\n        expression += str(operand[i])\n        if i < len(operator):\n            expression += operator[i]\n    \n    return eval(expression)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    expression = ''\n    \n    for i in range(len(operand)):\n        expression += str(operand[i])\n        if i < len(operator):\n            expression += operator[i]\n    \n    return eval(expression)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    '''\n    Given two lists operator and operand, build an algebraic expression and return the evaluation.\n    '''\n    expression = ''\n    \n    for i in range(len(operand)):\n        expression += str(operand[i])\n        if i < len(operator):\n            expression += operator[i]\n    \n    return eval(expression)\n", "from typing import List\n## main.py\n\ndef do_algebra(operator, operand) -> int:\n    '''\n    Given two lists operator and operand, build and evaluate the algebraic expression.\n    Args:\n        operator (list): List of basic algebra operations.\n        operand (list): List of integers.\n    Returns:\n        int: Result of the evaluated expression.\n    '''\n    \n    expression = str(operand[0])  # Initialize expression with the first operand\n    \n    for i in range(1, len(operand)):\n        expression += operator[i-1] + str(operand[i])  # Append operator and operand to the expression\n    \n    result = eval(expression)  # Evaluate the expression using eval() function\n    \n    return result\n"], "plans": ["requirement analysis:\nThe function should efficiently handle algebraic expressions with different operators and operands. It must accurately evaluate the expressions and support common algebraic operations.\nrequirement pool:\n- Implement the core algebraic expression evaluation logic\n- Ensure support for all basic algebra operations\n- Optimize the function for performance\nWe will design a static Python function using basic Python libraries to efficiently evaluate algebraic expressions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'algebraic expression'\n    Explanation: The requirement involves building and evaluating algebraic expressions using given operators and operands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    do_algebra(['+', '*'], [2, 3, 4]) = 10\n    Explanation: With only two operands and one operator, the expression is straightforward.\n    \n    do_algebra(['+', '*', '-'], [2, 3, 4, 5]) = 9\n    Explanation: The expression involves multiple operators and operands, testing the evaluation logic.\n    \n    do_algebra(['+', '-', '*'], [5, 3, 2, 1]) = 6\n    Explanation: Testing different combinations of operators and operands.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement analysis:\nThe function should handle all basic algebraic operations efficiently and accurately. It should be able to process expressions with multiple operators and operands, ensuring correct precedence of operations.\nrequirement pool:\n- Implement the core algebraic expression evaluation logic\n- Handle edge cases such as division by zero\n- Optimize the function for performance\nWe will design a static Python function using basic Python libraries to efficiently evaluate algebraic expressions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'algebraic expression'\n    Explanation: The requirement involves building and evaluating algebraic expressions using given operators and operands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic Python libraries to evaluate algebraic expressions efficiently, the following steps can be considered simultaneously:\n    - Create a function that takes in the operator and operand lists\n    - Use a loop to iterate through the operator list and apply the corresponding operation to the operands\n    - Return the final result of the algebraic expression\n\n# [edge case] \n    do_algebra(['+', '*'], [2, 3, 4]) = 10\n    Explanation: With only two operands and one operator, the function should return the result of 2 + 3 * 4 = 10\n    do_algebra(['-'], [5, 3, 2]) = -4\n    Explanation: With one operand and one operator, the function should return the result of 5 - 3 = 2, then 2 - 2 = -4\n    do_algebra(['**', '+', '-'], [2, 3, 4, 5]) = 6\n    Explanation: The function should evaluate the expression as (2 ** 3) + 4 - 5 = 8 + 4 - 5 = 6\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        Check if the lengths of operator and operand lists are valid before proceeding with evaluation.\n        Handle cases where the operator list is empty or has different lengths compared to the operand list.\n", "requirement analysis:\nThe main goal is to efficiently evaluate algebraic expressions using the provided operator and operand lists. Accuracy is crucial to ensure correct results. Error handling for invalid expressions is necessary to enhance user experience.\nrequirement pool:\n- Implement the core function to parse and evaluate algebraic expressions\n- Develop error handling mechanism for invalid expressions\n- Optimize the evaluation algorithm for efficiency\nWe will design a static Python function to parse and evaluate algebraic expressions using the provided operator and operand lists. We will leverage the built-in eval() function in Python to evaluate the expression.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'algebraic expression'\n    Explanation: The requirement involves building and evaluating algebraic expressions using given operators and operands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    do_algebra(['+', '*'], [2, 3, 4]) = 10\n    Explanation: With only two operands and one operator, the expression is straightforward.\n    \n    do_algebra(['+', '*', '-'], [2, 3, 4, 5]) = 9\n    Explanation: The expression follows the order of operations (multiplication first, then addition, and finally subtraction).\n    \n    do_algebra(['+', '-', '*'], [2, 3, 4, 5]) = -5\n    Explanation: The order of operators affects the result of the expression.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        Check if the lengths of operator and operand lists are valid.\n        Handle cases where the operator list is empty or has different lengths compared to the operand list.\n        (other code)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the standard Python libraries to implement the 'has_close_elements' function without defining any class.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'closer'\n    Explanation: In the requirement, \"closer\" refers to the absolute difference between two numbers being less than the given threshold.\n\n# [phrase showing quantity relationship]\n    'closer to each other than': This phrase indicates that we need to compare the absolute difference between any two numbers in the list and check if it is less than the threshold.\n    Implementation: abs(num1 - num2) < threshold\n\n# [degree adverb] \n    No degree adverb in this requirement.\n\n# [code logic]\n    1. Iterate through all pairs of numbers in the list.\n    2. Calculate the absolute difference between each pair.\n    3. Check if the absolute difference is less than the threshold.\n    4. If any pair satisfies the condition, return True.\n    5. If no pair satisfies the condition, return False.\n\n# [edge case] \n    has_close_elements([1.0, 2.0, 3.0], 0.5) = False\n    Explanation: The absolute difference between any two numbers in the list [1.0, 2.0, 3.0] is greater than 0.5, so the expected output is False.\n    has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) = True\n    Explanation: The absolute difference between 2.8 and 3.0 is less than 0.3, so the expected output is True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic covers all possible scenarios.\n", "requirement pool:\n- Support addition, subtraction, multiplication, and division operations\n- Handle parentheses for complex expressions\n- Implement error handling for invalid inputs\nWe will use the eval function in Python to evaluate the algebraic expression. No external libraries are needed for this simple calculation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'algebraic expression'\n    Explanation: The requirement involves building and evaluating an algebraic expression using given operators and operands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic involves building the algebraic expression using the given operators and operands, evaluating it, then performing specific arithmetic operations on the result.\n\n# [edge case] \n    evaluate_expression(['+', '*'], [2, 3, 4]) = 21\n    Explanation: The expression '2+3*4' evaluates to 14. After adding 2, multiplying by 3, and subtracting 5, the final result is 21.\n\n    evaluate_expression(['-', '+'], [5, 3, 2]) = 0\n    Explanation: The expression '5-3+2' evaluates to 4. After adding 2, multiplying by 3, and subtracting 5, the final result is 0.\n\n    evaluate_expression(['*', '-'], [4, 2, 1]) = -3\n    Explanation: The expression '4*2-1' evaluates to 7. After adding 2, multiplying by 3, and subtracting 5, the final result is -3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic covers the evaluation and manipulation of the algebraic expression.\n", "requirement pool:\n- Implement function to build and evaluate algebraic expressions\n- Handle different operator precedence scenarios\n- Optimize the evaluation process for large input sets\nWe will use the eval function in Python to build and evaluate the algebraic expression based on the given operators and operands. We will then apply the specified rules of adding 2, multiplying by 3, and subtracting 5 to get the final result.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'algebraic expression'\n    Explanation: The requirement involves building and evaluating an algebraic expression using given operators and operands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the eval function in Python to build and evaluate the algebraic expression, the detailed logic would involve:\n    - Constructing the algebraic expression using the given operators and operands\n    - Evaluating the expression using the eval function\n    - Applying the specified rules of adding 2, multiplying by 3, and subtracting 5 to the total\n    - Returning the final result\n\n# [edge case] \n    evaluate_expression(['+', '*', '-'], [1, 2, 3]) = 2\n    Explanation: The expression is (1 + 2 * 3) - 5 = 2\n    evaluate_expression(['-', '+', '*'], [3, 2, 1]) = 0\n    Explanation: The expression is (3 - (2 + 1)) * 3 - 5 = 0\n    evaluate_expression(['*', '+', '-'], [5, 4, 3]) = 12\n    Explanation: The expression is (5 * (4 + 3)) - 5 = 12\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the eval function can handle various algebraic expressions.\n", "requirement pool:\n- Support basic arithmetic operators: +, -, *\n- Handle parentheses for operator precedence\n- Implement error handling for invalid inputs\nWe will use the eval() function in Python to evaluate the algebraic expression built from the input operator and operand lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'algebraic expression'\n    Explanation: It refers to a mathematical expression involving variables, numbers, and arithmetic operations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the eval() function in Python to evaluate the algebraic expression, the code logic would involve constructing the expression using the provided operator and operand lists and then evaluating it using eval().\n\n# [edge case] \n    do_algebra(['+', '*'], [2, 3, 4]) = 10\n    Explanation: The expression is 2 + 3 * 4 = 10\n    do_algebra(['-', '+', '*'], [5, 3, 2, 4]) = 3\n    Explanation: The expression is 5 - 3 + 2 * 4 = 3\n    do_algebra(['*'], [2, 3]) = 6\n    Explanation: The expression is 2 * 3 = 6\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the eval() function can handle different algebraic expressions effectively.\n", "requirement pool:\n- Efficiently create a successful product\n- Meet market demands\n- Exceed user expectations\nWe will use the eval function in Python to evaluate the algebraic expression built from the given operator and operand lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'algebraic expression'\n    Explanation: It refers to a mathematical expression involving variables, constants, and mathematical operations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the eval function in Python to evaluate the algebraic expression, the detailed logic is to build the expression string by combining elements from the operator and operand lists, then evaluate it using eval.\n\n# [edge case] \n    do_algebra(['+', '*'], [2, 3, 4]) = 10\n    Explanation: The expression is 2 + 3 * 4 = 10\n    do_algebra(['-', '+', '*'], [5, 3, 2, 4]) = 3\n    Explanation: The expression is 5 - 3 + 2 * 4 = 3\n    do_algebra(['*'], [2, 3]) = 6\n    Explanation: The expression is 2 * 3 = 6\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the eval function can handle different algebraic expressions.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the eval function in Python to evaluate the algebraic expression built from the given operator and operand lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'algebraic expression'\n    Explanation: It refers to a mathematical expression involving variables, constants, and mathematical operations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the eval function in Python to evaluate the algebraic expression, the detailed logic is to build the expression string by combining elements from the operator and operand lists, then use eval() to evaluate it.\n\n# [edge case] \n    do_algebra(['+', '*'], [2, 3, 4]) = 10\n    Explanation: The algebraic expression is 2 + 3 * 4 = 10\n    do_algebra(['-', '+', '*'], [5, 3, 2, 4]) = 3\n    Explanation: The algebraic expression is 5 - 3 + 2 * 4 = 3\n    do_algebra(['*'], [2, 3]) = 6\n    Explanation: The algebraic expression is 2 * 3 = 6\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the eval function can handle different algebraic expressions.\n", "requirement pool:\n- Support all basic algebra operations\n- Handle parentheses in expressions\n- Optimize performance for large expressions\nWe will design a static Python function to evaluate algebraic expressions using the operator and operand lists provided. We will leverage the built-in eval() function in Python to handle the expression evaluation efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'algebraic expression'\n    Explanation: The core concept is to build and evaluate an algebraic expression using the given operators and operands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using the eval() function in Python to evaluate the algebraic expression. Here is a detailed logic to implement the code:\n    - Create a string variable 'expression' and initialize it with the first operand from the 'operand' list.\n    - Iterate through the 'operator' list and append the corresponding operator and operand to the 'expression' string.\n    - Finally, use the eval() function to evaluate the 'expression' string and return the result.\n\n# [edge case] \n    do_algebra(['+', '*'], [2, 3, 4]) = 10\n    Explanation: The expression is 2 + 3 * 4 = 10\n    do_algebra(['-', '+', '*'], [5, 3, 2, 4]) = 3\n    Explanation: The expression is 5 - 3 + 2 * 4 = 3\n    do_algebra(['**'], [2, 3]) = 8\n    Explanation: The expression is 2 ** 3 = 8\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the eval() function can handle various algebraic expressions efficiently.\n"], "scores": [0.186, 0.3488, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [false, false, true, false, false, false, true, true, true, true], "pass_test_cases_num": [24, 45, 129, 0, 0, 0, 129, 129, 129, 129], "completion": "from typing import List\n## main.py\n\ndef do_algebra(operator, operand) -> int:\n    '''\n    Given two lists operator and operand, build and evaluate the algebraic expression.\n    Args:\n        operator (list): List of basic algebra operations.\n        operand (list): List of integers.\n    Returns:\n        int: Result of the evaluated expression.\n    '''\n    \n    expression = str(operand[0])  # Initialize expression with the first operand\n    \n    for i in range(1, len(operand)):\n        expression += operator[i-1] + str(operand[i])  # Append operator and operand to the expression\n    \n    result = eval(expression)  # Evaluate the expression using eval() function\n    \n    return result\n", "passed": true, "pass": true, "pass_num": 5, "round": 500, "repair_prompt": ["def do_algebra(operator, operand):\t\n'''Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebraic expression and return the evaluation of this expression. The basic algebra operations include Addition ( + ), Subtraction ( - ), Multiplication ( * ), Floor division ( // ), and Exponentiation ( ** ).\nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebraic expression and return the evaluation of this expression. In this specific case, the result is calculated by adding 2, multiplying by 3, and subtracting 5 from the total.", "def do_algebra(operator, operand):\t\n'''Given two lists operator, and operand, use them to build an algebraic expression and return the evaluation of this expression.\nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    '''"], "mutate_method": "condense_two2one", "parent_index": 497}
