{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. The string should be returned with numbers sorted from smallest to largest. Return the sorted string of numbers.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": ["def check(sort_numbers):\n\tassert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one\") == 'one'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four three six\") == 'three four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one six four\") == 'one four six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two\") == 'one two'", "def check(sort_numbers):\n\tassert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four five five one one\") == 'one one four five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four zero two five\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight\") == 'eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six three\") == 'three six'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero\") == 'zero seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four three zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven\") == 'seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six nine three\") == 'three six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one nine three\") == 'one three four nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "def check(sort_numbers):\n\tassert sort_numbers('three five nine') == 'three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three\") == 'zero three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one seven\") == 'one four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six\") == 'six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"four two seven\") == 'two four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three four five\") == 'three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five four zero\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three seven two\") == 'two three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four six four one\") == 'one four four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight six three\") == 'three six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three five\") == 'three five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four\") == 'four'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero four one\") == 'zero one four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine\") == 'nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three\") == 'three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three four zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five\") == 'five'", "def check(sort_numbers):\n\tassert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers('three') == 'three'", "def check(sort_numbers):\n\tassert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six\") == 'six'", "def check(sort_numbers):\n\tassert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five\") == 'five eight'", "def check(sort_numbers):\n\tassert sort_numbers('') == ''", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine nine five\") == 'five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three\") == 'three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero\") == 'zero'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine zero\") == 'zero nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one six two seven\") == 'one two six seven'"], "test_case_list": ["assert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "assert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "assert sort_numbers(\"one\") == 'one'", "assert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "assert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "assert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "assert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "assert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "assert sort_numbers(\"four four three six\") == 'three four four six'", "assert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "assert sort_numbers(\"nine one six four\") == 'one four six nine'", "assert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "assert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "assert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "assert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "assert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "assert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "assert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "assert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "assert sort_numbers(\"one two\") == 'one two'", "assert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "assert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "assert sort_numbers(\"four five five one one\") == 'one one four five five'", "assert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "assert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "assert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "assert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "assert sort_numbers(\"four zero two five\") == 'zero two four five'", "assert sort_numbers(\"eight\") == 'eight'", "assert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "assert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "assert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "assert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "assert sort_numbers(\"six three\") == 'three six'", "assert sort_numbers(\"seven zero\") == 'zero seven'", "assert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "assert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "assert sort_numbers(\"four three zero\") == 'zero three four'", "assert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "assert sort_numbers(\"seven\") == 'seven'", "assert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "assert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "assert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "assert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "assert sort_numbers(\"six nine three\") == 'three six nine'", "assert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "assert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "assert sort_numbers(\"four one nine three\") == 'one three four nine'", "assert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "assert sort_numbers('three five nine') == 'three five nine'", "assert sort_numbers(\"zero three\") == 'zero three'", "assert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "assert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "assert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "assert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "assert sort_numbers(\"four one seven\") == 'one four seven'", "assert sort_numbers(\"seven six\") == 'six seven'", "assert sort_numbers(\"four two seven\") == 'two four seven'", "assert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "assert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "assert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "assert sort_numbers(\"nine three four five\") == 'three four five nine'", "assert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "assert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "assert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "assert sort_numbers(\"two five four zero\") == 'zero two four five'", "assert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "assert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "assert sort_numbers(\"three seven two\") == 'two three seven'", "assert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "assert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "assert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "assert sort_numbers(\"four four six four one\") == 'one four four four six'", "assert sort_numbers(\"eight six three\") == 'three six eight'", "assert sort_numbers(\"five three five\") == 'three five five'", "assert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "assert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "assert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "assert sort_numbers(\"four\") == 'four'", "assert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "assert sort_numbers(\"six zero four one\") == 'zero one four six'", "assert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "assert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "assert sort_numbers(\"nine\") == 'nine'", "assert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "assert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "assert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "assert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "assert sort_numbers(\"three\") == 'three'", "assert sort_numbers(\"three four zero\") == 'zero three four'", "assert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "assert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "assert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "assert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "assert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "assert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "assert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "assert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "assert sort_numbers(\"five\") == 'five'", "assert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "assert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "assert sort_numbers('three') == 'three'", "assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "assert sort_numbers(\"six\") == 'six'", "assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "assert sort_numbers(\"eight five\") == 'five eight'", "assert sort_numbers('') == ''", "assert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "assert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "assert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "assert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "assert sort_numbers(\"nine nine five\") == 'five nine nine'", "assert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "assert sort_numbers(\"seven three\") == 'three seven'", "assert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "assert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "assert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "assert sort_numbers(\"zero\") == 'zero'", "assert sort_numbers(\"nine zero\") == 'zero nine'", "assert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "assert sort_numbers(\"one six two seven\") == 'one two six seven'"], "nl": " Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    ", "func": "def sort_numbers(numbers: str) -> str:", "examples": ">>> sort_numbers('three one five')\n    'one three five'\n    ", "completions": ["from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    The string should be returned with numbers sorted from smallest to largest.\n    Return the sorted string of numbers.\n    '''\n    \n    # Dictionary mapping word numbers to numerical values\n    word_to_num = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Convert the word numbers to numerical values using the dictionary\n    nums = [word_to_num[word] for word in words]\n    \n    # Sort the numerical values\n    sorted_nums = sorted(nums)\n    \n    # Convert the sorted numerical values back to word numbers\n    sorted_words = [key for value, key in sorted([(value, key) for key, value in word_to_num.items()])]\n    \n    # Join the sorted word numbers into a string and return it\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', and 'nine'.\n    The string should be returned with numbers sorted from smallest to largest.\n    Return the sorted string of numbers.\n    '''\n    \n    # Dictionary mapping word numbers to numerical values\n    word_to_num = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of words\n    words = numbers.split()\n    \n    # Sort the list of words based on their corresponding numerical values\n    sorted_words = sorted(words, key=lambda x: word_to_num[x])\n    \n    # Join the sorted list of words back into a string and return it\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\nfrom num2words import num2words\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    The string should be returned with numbers sorted from smallest to largest.\n    Return the sorted string of numbers.\n    '''\n    \n    # Convert numberals to words\n    words = numbers.split()\n    words.sort(key=lambda x: num2words(x))\n    \n    # Convert the sorted words back to numberals\n    sorted_numbers = ' '.join(words)\n    \n    return sorted_numbers\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    The numbers should be sorted in ascending order.\n    Return the sorted string of numbers.\n    \n    Args:\n        numbers (str): A space-delimited string of numberals to be sorted.\n    \n    Returns:\n        str: The sorted string of numberals.\n    '''\n    \n    numberals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    \n    # Split the input string into individual numberals\n    input_numberals = numbers.split()\n    \n    # Map the numberals to numerical values\n    numerical_values = [numberals.index(num) for num in input_numberals]\n    \n    # Sort the numerical values\n    sorted_numerical_values = sorted(numerical_values)\n    \n    # Convert the sorted numerical values back to numberals\n    sorted_numberals = [numberals[num] for num in sorted_numerical_values]\n    \n    # Join the sorted numberals into a string and return it\n    return ' '.join(sorted_numberals)\n", "from typing import List\n## main.py\n\nfrom num2words import num2words\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    The numbers should be sorted in ascending order.\n    Return the sorted string of numbers.\n    \n    Args:\n        numbers (str): A space-delimited string of number words.\n    Returns:\n        str: The sorted string of numbers.\n    '''\n    \n    # Split the input string into individual number words\n    number_words = numbers.split()\n    \n    # Convert number words to numerals using 'num2words'\n    numerals = [num2words(word, lang='en') for word in number_words]\n    \n    # Sort the numerals in ascending order\n    sorted_numerals = sorted(numerals)\n    \n    # Convert the sorted numerals back to number words\n    sorted_number_words = [num2words(num, lang='en', to='cardinal') for num in sorted_numerals]\n    \n    # Return the sorted string of numbers\n    return ' '.join(sorted_number_words)\n", "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    # Create a dictionary mapping word numbers to digits\n    word_to_digit = {\n        'zero': '0',\n        'one': '1',\n        'two': '2',\n        'three': '3',\n        'four': '4',\n        'five': '5',\n        'six': '6',\n        'seven': '7',\n        'eight': '8',\n        'nine': '9'\n    }\n    \n    # Split the input string into individual word numbers\n    word_numbers = numbers.split()\n    \n    # Map each word number to its corresponding digit using the dictionary\n    digit_numbers = [word_to_digit[word] for word in word_numbers]\n    \n    # Sort the digit numbers in ascending order\n    digit_numbers.sort()\n    \n    # Map the sorted digit numbers back to word numbers\n    sorted_word_numbers = [key for value in digit_numbers for key, val in word_to_digit.items() if val == value]\n    \n    # Return the sorted string of word numbers\n    return ' '.join(sorted_word_numbers)\n", "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the sorted string of numbers.\n    \n    Args:\n        numbers (str): Space-delimited string of numerals from 'zero' to 'nine'\n    \n    Returns:\n        str: Sorted string of numbers\n    '''\n    \n    # Dictionary mapping textual representations to numerical values\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of numbers\n    num_list = numbers.split()\n    \n    # Sort the list of numbers based on their numerical values\n    sorted_nums = sorted(num_list, key=lambda x: num_dict[x])\n    \n    # Join the sorted textual representations into a string and return it\n    return ' '.join(sorted_nums)\n", "from typing import List\n## main.py\n\nfrom collections import OrderedDict\n\ndef sort_numbers(numbers: str) -> str:\n    # Split the input string into individual numbers\n    num_list = numbers.split()\n    \n    # Mapping the word representation of numbers to their corresponding numerical values\n    word_to_num = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Sorting the numerical values\n    sorted_nums = sorted(num_list, key=lambda x: word_to_num[x])\n    \n    # Mapping the sorted numerical values back to their word representation\n    sorted_words = [num for num in sorted_nums]\n    \n    # Joining the sorted word representations into a single string and returning it\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\nfrom collections import OrderedDict\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the sorted string of numbers.\n    \n    Args:\n        numbers (str): A space-delimited string of numberals.\n    Returns:\n        str: The sorted string of numbers.\n    '''\n    \n    # Mapping word representation of numbers to numerical values\n    word_to_num = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Splitting the input string into individual numbers\n    num_list = numbers.split()\n    \n    # Sorting the numerical values\n    sorted_nums = sorted(num_list, key=lambda x: word_to_num[x])\n    \n    # Joining the sorted word representations into a single string\n    sorted_str = ' '.join(sorted_nums)\n    \n    return sorted_str\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    The string should be returned with numbers sorted from smallest to largest.\n    Return the sorted string of numbers.\n    \n    Args:\n        numbers (str): A space-delimited string of number words.\n    Returns:\n        str: The sorted string of numbers.\n    '''\n    words_to_numbers = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    numbers_to_words = {v: k for k, v in words_to_numbers.items()}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: words_to_numbers[x])\n    return ' '.join(sorted_numbers)\n"], "plans": ["requirement pool:\n- Implement sorting algorithm for converting word numbers to numerical values\n- Ensure input validation for only 'zero' to 'nine' word numbers\n- Optimize sorting function for performance and accuracy\nWe will use the built-in Python library to convert word numbers to numerical values and then sort them accordingly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string': Refers to a string where numbers are separated by spaces.\n    'numberals': Refers to the textual representation of numbers from zero to nine.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the built-in Python library to convert word numbers to numerical values and then sort them, the following steps can be considered:\n    - Split the input string into individual words.\n    - Create a dictionary mapping word numbers to their numerical values.\n    - Convert the word numbers to numerical values using the dictionary.\n    - Sort the numerical values.\n    - Convert the sorted numerical values back to word numbers.\n    - Join the sorted word numbers into a string and return it.\n\n# [edge case] \n    sort_numbers('zero one two') = 'zero one two'\n    Explanation: The input is already sorted in ascending order, so the output remains the same.\n    \n    sort_numbers('five four three') = 'three four five'\n    Explanation: The input is in descending order, and the output should be sorted in ascending order.\n\n    sort_numbers('seven seven seven') = 'seven seven seven'\n    Explanation: All numbers are the same, so the output remains the same.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should cover sorting the numbers correctly.\n", "requirement pool:\n- Implement sorting algorithm for converting word numbers to numerical values\n- Ensure correct mapping of word numbers to numerical values\n- Handle edge cases like invalid inputs gracefully\nWe will use the built-in Python library to map word numbers to numerical values and then sort them accordingly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string': Refers to a string where numbers are separated by spaces.\n    'numberals': Refers to the textual representation of numbers from zero to nine.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the built-in Python library to map word numbers to numerical values and then sort them, the following logic can be implemented:\n    - Split the input string into a list of words.\n    - Create a dictionary mapping word numbers to numerical values.\n    - Sort the list of words based on their corresponding numerical values.\n    - Join the sorted list of words back into a string and return it.\n\n# [edge case] \n    sort_numbers('zero one two') = 'zero one two'\n    Explanation: All numbers are already in ascending order.\n    \n    sort_numbers('five four three two one') = 'one two three four five'\n    Explanation: The numbers are in descending order and need to be sorted in ascending order.\n    \n    sort_numbers('seven seven seven') = 'seven seven seven'\n    Explanation: All numbers are the same, so the output should remain unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should cover all scenarios.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python library 'num2words' to convert numberals to words, sort them, and then convert them back to numerals.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'numberals': These are words representing numbers from 'zero' to 'nine'.\n    Explanation: The requirement specifies that the input consists of numberals which need to be sorted.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the 'num2words' library, the logic would involve:\n    - Convert numberals to words using 'num2words'\n    - Sort the words\n    - Convert the sorted words back to numberals\n\n# [edge case] \n    sort_numbers('zero one two') = 'zero one two'\n    Explanation: The input is already sorted, so the expected output is the same as the input.\n    sort_numbers('nine eight seven') = 'seven eight nine'\n    Explanation: The input is in reverse order, and after sorting, it should be in ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The sorting logic should handle all cases appropriately.\n", "requirement pool:\n- Implement efficient sorting algorithm for numberals\n- Ensure correct mapping of numberals to numerical values\n- Handle various input formats for numberal sorting\nWe will utilize the built-in Python library to map numberals to numerical values and then sort them efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string': The numbers are separated by spaces in the input string.\n    Explanation: The input string contains numbers that are separated by spaces.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the built-in Python library to map numberals to numerical values and then sort them efficiently, the code logic would involve:\n    - Splitting the input string into individual numbers\n    - Mapping the numberals to numerical values\n    - Sorting the numerical values\n    - Converting the sorted numerical values back to numberals\n    - Joining the sorted numberals into a string and returning it\n\n# [edge case] \n    sort_numbers('five five five') = 'five five five'\n    Explanation: All numbers are the same, so the output should be the same as the input.\n    \n    sort_numbers('zero one two three four five six seven eight nine') = 'zero one two three four five six seven eight nine'\n    Explanation: All numbers are already in ascending order, so the output should be the same as the input.\n    \n    sort_numbers('nine eight seven six five four three two one zero') = 'zero one two three four five six seven eight nine'\n    Explanation: The numbers are in descending order, and the output should be in ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic should cover all scenarios.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python library 'num2words' to convert number words to numerals, then sort them accordingly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ascending order'\n    Explanation: In the requirement, it means that the numbers should be arranged from smallest to largest.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the 'num2words' library to convert number words to numerals and then sorting them, the code logic would involve:\n    - Split the input string into individual number words\n    - Convert number words to numerals using 'num2words'\n    - Sort the numerals in ascending order\n    - Convert the sorted numerals back to number words\n    - Return the sorted string of numbers\n\n# [edge case] \n    sort_numbers('five one three') = 'one three five'\n    Explanation: The input string 'five one three' should be sorted in ascending order, resulting in 'one three five'.\n    sort_numbers('seven eight two') = 'two seven eight'\n    Explanation: The input string 'seven eight two' should be sorted in ascending order, resulting in 'two seven eight'.\n    sort_numbers('nine four six') = 'four six nine'\n    Explanation: The input string 'nine four six' should be sorted in ascending order, resulting in 'four six nine'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The plan already covers the necessary steps to handle sorting and conversion of number words.\n", "requirement pool:\n- Implement sorting algorithm for converting word numbers to digits\n- Ensure correct mapping of word numbers to digits\n- Handle edge cases like invalid input gracefully\nWe will use the built-in Python library to map word numbers to digits and then sort them using a simple sorting algorithm like bubble sort.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sort': arranging elements in a specific order\n    Explanation: The core concept here is to arrange the numbers in ascending order based on their numerical values.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using a built-in Python library to map word numbers to digits and then sorting them using a simple sorting algorithm like bubble sort, the code logic could be as follows:\n    \n    1. Create a dictionary mapping word numbers to digits.\n    2. Split the input string into individual word numbers.\n    3. Map each word number to its corresponding digit using the dictionary.\n    4. Sort the digit numbers in ascending order.\n    5. Map the sorted digit numbers back to word numbers.\n    6. Return the sorted string of word numbers.\n\n# [edge case] \n    sort_numbers('zero one two') = 'zero one two'\n    Explanation: All numbers are already in ascending order, so the expected output is the same as the input.\n    \n    sort_numbers('five four three') = 'three four five'\n    Explanation: The input numbers are sorted in descending order, and the expected output is the sorted numbers in ascending order.\n\n    sort_numbers('seven seven seven') = 'seven seven seven'\n    Explanation: All numbers are the same, so the expected output is the same as the input.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The sorting logic should handle all cases appropriately.\n", "requirement pool:\n- Implement sorting algorithm based on textual representations\n- Ensure input validation for 'zero' to 'nine' numbers\n- Optimize sorting efficiency for large input sets\nWe will use the built-in Python library to map textual representations of numbers to their corresponding numerical values, sort them, and then map them back to textual representations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string': Refers to a string where numbers are separated by spaces.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the built-in Python library to map textual representations of numbers to numerical values, sort them, and then map them back, the following logic can be implemented:\n    - Split the input string into a list of numbers\n    - Create a dictionary mapping textual representations to numerical values\n    - Sort the list of numbers based on their numerical values\n    - Map the sorted numerical values back to textual representations\n    - Join the sorted textual representations into a string and return it\n\n# [edge case] \n    sort_numbers('five one three') = 'one three five'\n    Explanation: The input string 'five one three' should be sorted in ascending order based on their numerical values, resulting in 'one three five'.\n\n    sort_numbers('zero zero zero') = 'zero zero zero'\n    Explanation: All numbers are the same, so the output should be the same as the input.\n\n    sort_numbers('nine eight seven six five four three two one') = 'one two three four five six seven eight nine'\n    Explanation: The input string contains all numbers in descending order, and the output should be sorted in ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic covers sorting the numbers correctly.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python library 'collections' to easily sort the numbers based on their word representation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string': Refers to a string where numbers are separated by spaces.\n    'sorted string of numbers': Refers to arranging the numbers in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the 'collections' library for sorting, the code logic would involve:\n    - Splitting the input string into individual numbers\n    - Mapping the word representation of numbers to their corresponding numerical values\n    - Sorting the numerical values\n    - Mapping the sorted numerical values back to their word representation\n    - Joining the sorted word representations into a single string and returning it\n\n# [edge case] \n    sort_numbers('one two three') = 'one three two'\n    Explanation: The input string contains all numbers in ascending order, testing if the sorting works correctly.\n    \n    sort_numbers('nine eight seven') = 'eight nine seven'\n    Explanation: The input string contains all numbers in descending order, testing if the sorting works correctly.\n    \n    sort_numbers('five five five') = 'five five five'\n    Explanation: The input string contains repeated numbers, testing if the sorting maintains the order of duplicates.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The sorting logic should handle all scenarios appropriately.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python library 'collections' to easily sort the numbers based on their word representation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string': Refers to a string where numbers are separated by spaces.\n    'sorted string of numbers': Refers to arranging the numbers in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the 'collections' library for sorting, the code logic could involve:\n    - Splitting the input string into individual numbers\n    - Mapping the word representation of numbers to their corresponding numerical values\n    - Sorting the numerical values\n    - Mapping the sorted numerical values back to their word representations\n    - Joining the sorted word representations into a single string and returning it\n\n# [edge case] \n    sort_numbers('one two three') = 'one three two'\n    Explanation: The input string contains three numbers, and after sorting them, 'one' comes before 'three' but after 'two'.\n    \n    sort_numbers('five four nine') = 'five four nine'\n    Explanation: The input string is already in sorted order, so the output remains the same.\n    \n    sort_numbers('eight seven six') = 'six seven eight'\n    Explanation: The input string is in descending order, and after sorting, it becomes ascending.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The sorting functionality provided by the 'collections' library should handle all cases effectively.\n", "requirement pool:\n- Implement efficient sorting algorithm\n- Ensure correct mapping of words to numbers\n- Handle edge cases like duplicate numbers\nWe will use the built-in Python library to map words to numbers and sort them accordingly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-delimited string': Refers to a string where numbers are separated by spaces.\n    'numbers sorted from smallest to largest': Indicates that the numbers represented by words should be sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using a built-in Python library to map words to numbers and sort them, the logic would involve:\n    - Splitting the input string into individual words\n    - Mapping each word to its corresponding number\n    - Sorting the numbers in ascending order\n    - Converting the sorted numbers back to words\n    - Joining the sorted words into a string and returning it\n\n# [edge case] \n    sort_numbers('five five five') = 'five five five'\n    Explanation: All numbers are the same, so the output should be the same as the input.\n    \n    sort_numbers('zero one two three four five six seven eight nine') = 'zero one two three four five six seven eight nine'\n    Explanation: All numbers are already in ascending order, so the output should be the same as the input.\n    \n    sort_numbers('nine eight seven six five four three two one zero') = 'zero one two three four five six seven eight nine'\n    Explanation: Numbers are in descending order, and the function should sort them in ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic should handle all scenarios appropriately.\n"], "scores": [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [false, true, false, true, false, true, true, true, true, true], "pass_test_cases_num": [0, 121, 0, 121, 0, 121, 121, 121, 121, 121], "completion": "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    The string should be returned with numbers sorted from smallest to largest.\n    Return the sorted string of numbers.\n    \n    Args:\n        numbers (str): A space-delimited string of number words.\n    Returns:\n        str: The sorted string of numbers.\n    '''\n    words_to_numbers = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    numbers_to_words = {v: k for k, v in words_to_numbers.items()}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: words_to_numbers[x])\n    return ' '.join(sorted_numbers)\n", "passed": true, "pass": true, "pass_num": 7, "round": 367, "repair_prompt": ["def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. The string should be returned with numbers sorted from smallest to largest. Return the sorted string of numbers.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. The numbers should be sorted in ascending order. Return the sorted string of numbers.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the sorted string of numbers.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''"], "mutate_method": "expand_one2two", "parent_index": 244}
