{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n''' Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three. Ensure your program efficiently handles strings with varying lengths and complexity in terms of nested parentheses.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "entry_point": "parse_nested_parens", "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "test": ["def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()()) ((())) (((()))) (((()))) (()) ()\") == [3, 2, 3, 4, 4, 2, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (()) (()()) ((())) ((())()())\") == [3, 1, 2, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) ((())) ((())()()) (()) (()()) ((())) ((())) () () ((())()()) (()()) () (((()))) ((())()()) () (((()))) (((()))) ()\") == [4, 3, 3, 2, 2, 3, 3, 1, 1, 3, 2, 1, 4, 3, 1, 4, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (((()))) ((())()()) (()()) () (((())))\") == [3, 4, 3, 2, 1, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) ((())) (()()) () () (()()) () ()\") == [2, 3, 2, 1, 1, 2, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()()) () ((())()()) () () ((())) ((())) (()()) () () (()())\") == [3, 2, 1, 3, 1, 1, 3, 3, 2, 1, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()()) ((())()()) ((())) (()()) () ((())()()) (()()) ((())()()) ((())) ((())) (()())\") == [3, 2, 3, 3, 2, 1, 3, 2, 3, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (()(())((()))) (((()))) ((())) (()) () ((())) ((())) (()()) ((())()()) (()()) () (()) (((()))) (()) ((())) (((()))) ((())) ((())()()) ((())()())\") == [3, 1, 4, 4, 3, 2, 1, 3, 3, 2, 3, 2, 1, 2, 4, 2, 3, 4, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()()) ((())()()) ((())()()) (()()) ((())) () () ((())) () () (()())\") == [3, 2, 3, 3, 2, 3, 1, 1, 3, 1, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())) ((())) () () () () (()()) (()()) (()()) ((())()()) ()\") == [3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (((()))) (()) ((())()()) () () ((())) ((())) (((()))) () (()()) (((())))\") == [2, 4, 2, 3, 1, 1, 3, 3, 4, 1, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) ((())) ((())) ((())()())\") == [2, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())) (()) (()()) ((())()()) ((())()())\") == [2, 3, 2, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()) (()()) ((())) (((()))) () ((())()()) ((())) (()()) (()()) (()) ((())()())\") == [3, 2, 2, 3, 4, 1, 3, 3, 2, 2, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () ((())()()) ((())()()) (((()))) ((())()()) (((())))\") == [3, 1, 3, 3, 4, 3, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) ((())) (()) ((())) () () () (((()))) (()()) (()()) (((()))) (()) (()) (((())))\") == [4, 3, 2, 3, 1, 1, 1, 4, 2, 2, 4, 2, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (()) (()()) (()()) (()()) ((())) (((()))) (()(())((()))) (()) () (((()))) (()) ((())) (())\") == [4, 2, 2, 2, 2, 3, 4, 4, 2, 1, 4, 2, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()) (()) (()()) (()()) (((()))) (()) (((()))) (()(())((()))) ((())) ((())) ((())()()) () (((())))\") == [2, 2, 2, 2, 2, 4, 2, 4, 4, 3, 3, 3, 1, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()(())((()))) ((())) (((()))) ((())()()) (()()) (()(())((()))) ((())()()) ((())) ((())) (()()) ((())()()) ((())) (()) (()(())((()))) () () (()(())((()))) (()()) (((()))) (((()))) ()\") == [4, 3, 4, 3, 2, 4, 3, 3, 3, 2, 3, 3, 2, 4, 1, 1, 4, 2, 4, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()(())((()))) ((())) ((())) ((())) (()) (()(())((()))) () ((())) (((()))) (()) ((())) ((())) () (()(())((())))\") == [4, 3, 3, 3, 2, 4, 1, 3, 4, 2, 3, 3, 1, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()()) () ((())) (()()) () ((())()()) ((())) ((())) ((())) ((())) ((()))\") == [3, 2, 1, 3, 2, 1, 3, 3, 3, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())()()) ((())()()) () (((()))) ((())()()) ((())()()) (()()) (()()) (()) ((())) (()())\") == [2, 3, 3, 1, 4, 3, 3, 2, 2, 2, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()(())((()))) (()) (()(())((()))) (((()))) (()(())((()))) (())\") == [3, 4, 2, 4, 4, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()) (()(())((()))) (()) (((()))) (((()))) ((())()())\") == [2, 2, 4, 2, 4, 4, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) ((())()()) (((()))) (()(())((()))) ((())()())\") == [4, 4, 4, 3, 4, 4, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())) ((())()()) () ((())()()) (()()) () () ((())) (()()) ((())) ((())()())\") == [1, 3, 3, 1, 3, 2, 1, 1, 3, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()()) ((())()()) (()()) () () ((())) () ((())()()) (((()))) (((()))) ()\") == [2, 2, 3, 2, 1, 1, 3, 1, 3, 4, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) ((())()()) ((())) (()())\") == [2, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())) ((())()()) (()()) (()) ((())()()) (((()))) (((()))) ((())()()) ((())) ((())()()) () (()()) (()()) ((())()()) (()) ((())) ((())()())\") == [3, 3, 3, 2, 2, 3, 4, 4, 3, 3, 3, 1, 2, 2, 3, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) () (()()) (()())\") == [2, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) ((())) () ((())()()) (()()) (()()) () ((())) ((())) (()()) (((()))) (()())\") == [4, 3, 1, 3, 2, 2, 1, 3, 3, 2, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())) ((())()()) () ((())) (()()) ((())()()) (()())\") == [3, 3, 3, 1, 3, 2, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())) ((())) ((())()()) () ((()))\") == [2, 3, 3, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) (()()) () () ((())) ((())()()) ()\") == [2, 2, 2, 1, 1, 3, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()(())((()))) ((())()()) (()()) (((()))) ((())()()) ((())()())\") == [2, 4, 3, 2, 4, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (((()))) (((()))) (()()) (((())))\") == [3, 1, 4, 4, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())) () (()()) (((()))) ((())) (()()) () (()) (((()))) (()(())((()))) (((()))) (((()))) ()\") == [1, 3, 1, 2, 4, 3, 2, 1, 2, 4, 4, 4, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())()()) () ((()))\") == [3, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) () ((()))\") == [2, 2, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) () (()) () (()) (())\") == [4, 1, 2, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())()()) () ((())) (()()) () () () () (()()) ((())) ((()))\") == [1, 3, 1, 3, 2, 1, 1, 1, 1, 2, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) (()()) (()()) ((())()()) ((())) ((())) ((())()())\") == [3, 3, 2, 2, 3, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () ((())()()) (((()))) (()) (((()))) () ((())) (()()) (()) (((()))) (()())\") == [3, 1, 3, 4, 2, 4, 1, 3, 2, 2, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()) ((())) () () () ((()))\") == [2, 2, 3, 1, 1, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (((()))) ((())()()) ((())) ((())()()) (())\") == [3, 4, 3, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())) ((())) (()()) ((())()()) () () ()\") == [3, 3, 3, 2, 3, 1, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) () (()()) ((())()()) (()()) () (()()) ((())) () () (()())\") == [2, 2, 1, 2, 3, 2, 1, 2, 3, 1, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (((()))) (()) (()) ((())) () ((())) ((())()()) ((())) (()) (()()) (((())))\") == [2, 4, 2, 2, 3, 1, 3, 3, 3, 2, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (((()))) () (()()) ((())()()) () (()(())((()))) (()(())((()))) (()()) () (()()) (()) (()) ((())()())\") == [4, 4, 1, 2, 3, 1, 4, 4, 2, 1, 2, 2, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (((()))) ((())) ((())) ((())) ((())()()) ((())()()) (()()) () () (()(())((()))) ((())) ((())()()) (()(())((()))) () ((())()()) (((()))) (((()))) (()(())((()))) ((())()()) ()\") == [3, 4, 3, 3, 3, 3, 3, 2, 1, 1, 4, 3, 3, 4, 1, 3, 4, 4, 4, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())) ((())()()) ((())) () (()()) () (()())\") == [1, 3, 3, 3, 1, 2, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()()) () (()()) ((())()()) ((())) ((())) (()) ((())()()) () ((())()()) (()()) () (()) ((())) (()()) (()()) ((())()())\") == [2, 2, 1, 2, 3, 3, 3, 2, 3, 1, 3, 2, 1, 2, 3, 2, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens('() (()) ((())) (((())))') == [1, 2, 3, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (((()))) (((()))) (()) (()()) (((()))) () (((()))) (()) ((())) () ()\") == [2, 4, 4, 2, 2, 4, 1, 4, 2, 3, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (((()))) (((()))) (()()) (((()))) ((())) ((())()()) (()) ((())()()) (((()))) (()()) () (()) (((()))) () (()(())((()))) () (()) (()(())((()))) ((())) ((())()())\") == [2, 4, 4, 2, 4, 3, 3, 2, 3, 4, 2, 1, 2, 4, 1, 4, 1, 2, 4, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() (()(())((()))) (()) (()()) ((())()()) (()()) (()())\") == [1, 4, 2, 2, 3, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()(())((()))) (()()) (()()) ((())()()) (()()) ((())) () () (()()) (()(())((()))) ((())()()) (()()) ((())()()) (((()))) (()(())((()))) (()()) () ((())()()) ((())()()) ()\") == [3, 4, 2, 2, 3, 2, 3, 1, 1, 2, 4, 3, 2, 3, 4, 4, 2, 1, 3, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () () (()()) (()()) (()()) ((())) (()())\") == [3, 1, 1, 2, 2, 2, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())()()) (()()) (()) ((())()()) () (((()))) ((())()()) () (()) (()) ((())()()) (()) (()) (()) ((())) ((())) (((())))\") == [1, 3, 2, 2, 3, 1, 4, 3, 1, 2, 2, 3, 2, 2, 2, 3, 3, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()(())((()))) () (()(())((()))) (()) (((()))) ((())()()) ((())()()) ((())) ((())()()) (()(())((()))) ((())) (()(())((()))) ((())) ((())()())\") == [4, 1, 4, 2, 4, 3, 3, 3, 3, 4, 3, 4, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (((()))) () (()) (()) ((())) (()()) () () ((())()()) (()) ((()))\") == [2, 4, 1, 2, 2, 3, 2, 1, 1, 3, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())()()) (()()) ((())()()) (((()))) (()()) (()(())((()))) (()()) (()(())((()))) ((())) (()) ((())) (()()) (()) (()()) () ((())) ((())) ((())) ((())) (()())\") == [2, 3, 2, 3, 4, 2, 4, 2, 4, 3, 2, 3, 2, 2, 2, 1, 3, 3, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) ((())()()) ((())) ((())()()) ((())) () ()\") == [3, 3, 3, 3, 3, 3, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()()) () ((())()())\") == [3, 2, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () (()()) ((())) (()()) () ((())()()) ((()))\") == [3, 1, 2, 3, 2, 1, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) () (()) (((()))) ((())) (()) ((())()()) ((())()()) () ((())()()) (()) ((())()())\") == [4, 1, 2, 4, 3, 2, 3, 3, 1, 3, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () (()()) ((())) ((())()()) ((())()())\") == [3, 1, 2, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () ((())) () (()()) ((())) ((())()()) () () ((())()()) () (()())\") == [3, 1, 3, 1, 2, 3, 3, 1, 1, 3, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() ((())) (()()) (((()))) () ((())) (((()))) () (()) () () ((())()()) (()) (()()) ((())) (((()))) (()) (())\") == [1, 3, 2, 4, 1, 3, 4, 1, 2, 1, 1, 3, 2, 2, 3, 4, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) () ((())()()) ((())()()) ((())) () ((())()()) ((())) () ((())()()) (()()) (()())\") == [3, 1, 3, 3, 3, 1, 3, 3, 1, 3, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"() (()()) ((())()()) (()(())((()))) (((()))) (()(())((()))) ((())()()) (()) (()()) (((()))) (()) (()) (()()) (((()))) (((()))) () (()) ((())) () (()) (()())\") == [1, 2, 3, 4, 4, 4, 3, 2, 2, 4, 2, 2, 2, 4, 4, 1, 2, 3, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) () (((()))) (()()) ((())) () (()()) (((()))) (()()) (((()))) () ()\") == [4, 1, 4, 2, 3, 1, 2, 4, 2, 4, 1, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) () (()) () ((())) (()) (()()) (((()))) ((())) () () (()) () () (()) () ((())) (()(())((()))) ((()))\") == [4, 4, 4, 1, 2, 1, 3, 2, 2, 4, 3, 1, 1, 2, 1, 1, 2, 1, 3, 4, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) (()) (()()) ((())()()) (()) (()()) ((())) (()()) (()(())((()))) (()(())((()))) ((())()()) ((())) (((()))) (()(())((()))) ((())) ((())) (()(())((()))) () ((())) ((())) ((())()())\") == [2, 2, 2, 3, 2, 2, 3, 2, 4, 4, 3, 3, 4, 4, 3, 3, 4, 1, 3, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (()) ((())()()) (()()) ((())) (()) () () (((()))) (((()))) (())\") == [3, 1, 2, 3, 2, 3, 2, 1, 1, 4, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"\") == []", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()) (()()) ((())) () ((())) ((())()()) () () (()) (()) (((()))) (((()))) ((())) () () (()()) (())\") == [3, 2, 2, 3, 1, 3, 3, 1, 1, 2, 2, 4, 4, 3, 1, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())()()) ((())) (()()) ((())()()) () (()()) ((()))\") == [3, 3, 3, 2, 3, 1, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) ((())()()) ((())()()) ((())) (()()) ((())) ((())()()) ((())()()) ((())()()) () ((())) (()())\") == [3, 3, 3, 3, 2, 3, 3, 3, 3, 1, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())()()) (()) () (((()))) ((())()()) ((())()()) (((()))) (()) (((()))) () (((()))) ((())()()) (()()) (()) (()) (()) () (())\") == [3, 2, 1, 4, 3, 3, 4, 2, 4, 1, 4, 3, 2, 2, 2, 2, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()) ((())()()) ((())()()) () ((()))\") == [2, 2, 3, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) () ((())()()) () ((())) () ((())) ()\") == [2, 1, 3, 1, 3, 1, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) () (()()) ()\") == [3, 1, 2, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) (()()) ((())()()) () ((())()()) ((())()()) ((())) (()()) ((())) () ((())()())\") == [3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 1, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) () (()()) ((())) () ((())()()) (()()) ((())()())\") == [2, 1, 2, 3, 1, 3, 2, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(((()))) (()) () ((())()()) (()()) () (()()) (()(())((()))) (()(())((()))) ((())) (((()))) (()(())((()))) ((())()()) ()\") == [4, 2, 1, 3, 2, 1, 2, 4, 4, 3, 4, 4, 3, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) () (()())\") == [2, 2, 1, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) (((()))) (()) (()()) (()()) () ((())) ((())()()) () (()(())((()))) (()()) (()(())((()))) ((()))\") == [3, 3, 4, 2, 2, 2, 1, 3, 3, 1, 4, 2, 4, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) (()()) () (()) () (()()) (()) (()) (((()))) () (()()) (())\") == [2, 2, 1, 2, 1, 2, 2, 2, 4, 1, 2, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens('(()(())((())))') == [4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (()) (((()))) () (()()) (((()))) ((())()()) ((())) (()()) ((())()()) (((()))) ((())) (()) ((())) ((())) () ((())) ((())()())\") == [3, 2, 4, 1, 2, 4, 3, 3, 2, 3, 4, 3, 2, 3, 3, 1, 3, 3]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) ((())()()) (()) ((())) ((())) ((())()()) (((()))) () ((())()()) (()(())((()))) ((())) ((())()()) ((())()()) (())\") == [2, 3, 2, 3, 3, 3, 4, 1, 3, 4, 3, 3, 3, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()()) ((())()()) (()()) ()\") == [2, 3, 2, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()(())((()))) ((())()()) (((()))) (()(())((()))) () (()(())((()))) ()\") == [4, 3, 4, 4, 1, 4, 1]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) ((())()()) () ((())) ((())) (()()) ((())()()) (((()))) () (()) (((())))\") == [3, 3, 3, 1, 3, 3, 2, 3, 4, 1, 2, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) (((()))) ((())) (()()) (()()) ((())()()) (()) (()(())((()))) (()) ((())) (()) ((())) () (((())))\") == [3, 4, 3, 2, 2, 3, 2, 4, 2, 3, 2, 3, 1, 4]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"((())) ((())) ((())()()) (()()) () (()(())((()))) (()()) (((()))) (((()))) ((())()()) (()()) () () ((())) (((()))) (()(())((()))) (((()))) ((())()()) ((())) (()(())((()))) (())\") == [3, 3, 3, 2, 1, 4, 2, 4, 4, 3, 2, 1, 1, 3, 4, 4, 4, 3, 3, 4, 2]", "def check(parse_nested_parens):\n\tassert parse_nested_parens(\"(()) () (((()))) () (((()))) (()()) (()) (((()))) (()(())((()))) (((()))) () (()()) (()(())((()))) (()()) (()(())((()))) (()()) (((()))) (()()) (((()))) (()) (()())\") == [2, 1, 4, 1, 4, 2, 2, 4, 4, 4, 1, 2, 4, 2, 4, 2, 4, 2, 4, 2, 2]"], "test_case_list": ["assert parse_nested_parens(\"((())()()) (()()) ((())) (((()))) (((()))) (()) ()\") == [3, 2, 3, 4, 4, 2, 1]", "assert parse_nested_parens(\"((())) () (()) (()()) ((())) ((())()())\") == [3, 1, 2, 2, 3, 3]", "assert parse_nested_parens(\"(((()))) ((())) ((())()()) (()) (()()) ((())) ((())) () () ((())()()) (()()) () (((()))) ((())()()) () (((()))) (((()))) ()\") == [4, 3, 3, 2, 2, 3, 3, 1, 1, 3, 2, 1, 4, 3, 1, 4, 4, 1]", "assert parse_nested_parens(\"((())) (((()))) ((())()()) (()()) () (((())))\") == [3, 4, 3, 2, 1, 4]", "assert parse_nested_parens(\"(()()) ((())) (()()) () () (()()) () ()\") == [2, 3, 2, 1, 1, 2, 1, 1]", "assert parse_nested_parens(\"((())) (()()) () ((())()()) () () ((())) ((())) (()()) () () (()())\") == [3, 2, 1, 3, 1, 1, 3, 3, 2, 1, 1, 2]", "assert parse_nested_parens(\"((())) (()()) ((())()()) ((())) (()()) () ((())()()) (()()) ((())()()) ((())) ((())) (()())\") == [3, 2, 3, 3, 2, 1, 3, 2, 3, 3, 3, 2]", "assert parse_nested_parens(\"((())) () (()(())((()))) (((()))) ((())) (()) () ((())) ((())) (()()) ((())()()) (()()) () (()) (((()))) (()) ((())) (((()))) ((())) ((())()()) ((())()())\") == [3, 1, 4, 4, 3, 2, 1, 3, 3, 2, 3, 2, 1, 2, 4, 2, 3, 4, 3, 3, 3]", "assert parse_nested_parens(\"((())) (()()) ((())()()) ((())()()) (()()) ((())) () () ((())) () () (()())\") == [3, 2, 3, 3, 2, 3, 1, 1, 3, 1, 1, 2]", "assert parse_nested_parens(\"((())()()) ((())) ((())) () () () () (()()) (()()) (()()) ((())()()) ()\") == [3, 3, 3, 1, 1, 1, 1, 2, 2, 2, 3, 1]", "assert parse_nested_parens(\"(()()) (((()))) (()) ((())()()) () () ((())) ((())) (((()))) () (()()) (((())))\") == [2, 4, 2, 3, 1, 1, 3, 3, 4, 1, 2, 4]", "assert parse_nested_parens(\"(()()) ((())) ((())) ((())()())\") == [2, 3, 3, 3]", "assert parse_nested_parens(\"(()) ((())) (()) (()()) ((())()()) ((())()())\") == [2, 3, 2, 2, 3, 3]", "assert parse_nested_parens(\"((())) (()) (()()) ((())) (((()))) () ((())()()) ((())) (()()) (()()) (()) ((())()())\") == [3, 2, 2, 3, 4, 1, 3, 3, 2, 2, 2, 3]", "assert parse_nested_parens(\"((())) () ((())()()) ((())()()) (((()))) ((())()()) (((())))\") == [3, 1, 3, 3, 4, 3, 4]", "assert parse_nested_parens(\"(((()))) ((())) (()) ((())) () () () (((()))) (()()) (()()) (((()))) (()) (()) (((())))\") == [4, 3, 2, 3, 1, 1, 1, 4, 2, 2, 4, 2, 2, 4]", "assert parse_nested_parens(\"(((()))) (()) (()()) (()()) (()()) ((())) (((()))) (()(())((()))) (()) () (((()))) (()) ((())) (())\") == [4, 2, 2, 2, 2, 3, 4, 4, 2, 1, 4, 2, 3, 2]", "assert parse_nested_parens(\"(()()) (()) (()) (()()) (()()) (((()))) (()) (((()))) (()(())((()))) ((())) ((())) ((())()()) () (((())))\") == [2, 2, 2, 2, 2, 4, 2, 4, 4, 3, 3, 3, 1, 4]", "assert parse_nested_parens(\"(()(())((()))) ((())) (((()))) ((())()()) (()()) (()(())((()))) ((())()()) ((())) ((())) (()()) ((())()()) ((())) (()) (()(())((()))) () () (()(())((()))) (()()) (((()))) (((()))) ()\") == [4, 3, 4, 3, 2, 4, 3, 3, 3, 2, 3, 3, 2, 4, 1, 1, 4, 2, 4, 4, 1]", "assert parse_nested_parens(\"(()(())((()))) ((())) ((())) ((())) (()) (()(())((()))) () ((())) (((()))) (()) ((())) ((())) () (()(())((())))\") == [4, 3, 3, 3, 2, 4, 1, 3, 4, 2, 3, 3, 1, 4]", "assert parse_nested_parens(\"((())()()) (()()) () ((())) (()()) () ((())()()) ((())) ((())) ((())) ((())) ((()))\") == [3, 2, 1, 3, 2, 1, 3, 3, 3, 3, 3, 3]", "assert parse_nested_parens(\"(()) ((())()()) ((())()()) () (((()))) ((())()()) ((())()()) (()()) (()()) (()) ((())) (()())\") == [2, 3, 3, 1, 4, 3, 3, 2, 2, 2, 3, 2]", "assert parse_nested_parens(\"((())()()) (()(())((()))) (()) (()(())((()))) (((()))) (()(())((()))) (())\") == [3, 4, 2, 4, 4, 4, 2]", "assert parse_nested_parens(\"(()) (()) (()(())((()))) (()) (((()))) (((()))) ((())()())\") == [2, 2, 4, 2, 4, 4, 3]", "assert parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) ((())()()) (((()))) (()(())((()))) ((())()())\") == [4, 4, 4, 3, 4, 4, 3]", "assert parse_nested_parens(\"() ((())) ((())()()) () ((())()()) (()()) () () ((())) (()()) ((())) ((())()())\") == [1, 3, 3, 1, 3, 2, 1, 1, 3, 2, 3, 3]", "assert parse_nested_parens(\"(()) (()()) ((())()()) (()()) () () ((())) () ((())()()) (((()))) (((()))) ()\") == [2, 2, 3, 2, 1, 1, 3, 1, 3, 4, 4, 1]", "assert parse_nested_parens(\"(()()) ((())()()) ((())) (()())\") == [2, 3, 3, 2]", "assert parse_nested_parens(\"((())()()) ((())) ((())()()) (()()) (()) ((())()()) (((()))) (((()))) ((())()()) ((())) ((())()()) () (()()) (()()) ((())()()) (()) ((())) ((())()())\") == [3, 3, 3, 2, 2, 3, 4, 4, 3, 3, 3, 1, 2, 2, 3, 2, 3, 3]", "assert parse_nested_parens(\"(()()) () (()()) (()())\") == [2, 1, 2, 2]", "assert parse_nested_parens(\"(((()))) ((())) () ((())()()) (()()) (()()) () ((())) ((())) (()()) (((()))) (()())\") == [4, 3, 1, 3, 2, 2, 1, 3, 3, 2, 4, 2]", "assert parse_nested_parens(\"((())()()) ((())) ((())()()) () ((())) (()()) ((())()()) (()())\") == [3, 3, 3, 1, 3, 2, 3, 2]", "assert parse_nested_parens(\"(()) ((())) ((())) ((())()()) () ((()))\") == [2, 3, 3, 3, 1, 3]", "assert parse_nested_parens(\"(()()) (()()) (()()) () () ((())) ((())()()) ()\") == [2, 2, 2, 1, 1, 3, 3, 1]", "assert parse_nested_parens(\"(()) (()(())((()))) ((())()()) (()()) (((()))) ((())()()) ((())()())\") == [2, 4, 3, 2, 4, 3, 3]", "assert parse_nested_parens(\"((())) () (((()))) (((()))) (()()) (((())))\") == [3, 1, 4, 4, 2, 4]", "assert parse_nested_parens(\"() ((())) () (()()) (((()))) ((())) (()()) () (()) (((()))) (()(())((()))) (((()))) (((()))) ()\") == [1, 3, 1, 2, 4, 3, 2, 1, 2, 4, 4, 4, 4, 1]", "assert parse_nested_parens(\"((())) ((())()()) () ((()))\") == [3, 3, 1, 3]", "assert parse_nested_parens(\"(()()) (()()) () ((()))\") == [2, 2, 1, 3]", "assert parse_nested_parens(\"(((()))) () (()) () (()) (())\") == [4, 1, 2, 1, 2, 2]", "assert parse_nested_parens(\"() ((())()()) () ((())) (()()) () () () () (()()) ((())) ((()))\") == [1, 3, 1, 3, 2, 1, 1, 1, 1, 2, 3, 3]", "assert parse_nested_parens(\"((())) ((())) (()()) (()()) ((())()()) ((())) ((())) ((())()())\") == [3, 3, 2, 2, 3, 3, 3, 3]", "assert parse_nested_parens(\"((())) () ((())()()) (((()))) (()) (((()))) () ((())) (()()) (()) (((()))) (()())\") == [3, 1, 3, 4, 2, 4, 1, 3, 2, 2, 4, 2]", "assert parse_nested_parens(\"(()()) (()) ((())) () () () ((()))\") == [2, 2, 3, 1, 1, 1, 3]", "assert parse_nested_parens(\"((())()()) (((()))) ((())()()) ((())) ((())()()) (())\") == [3, 4, 3, 3, 3, 2]", "assert parse_nested_parens(\"((())()()) ((())) ((())) (()()) ((())()()) () () ()\") == [3, 3, 3, 2, 3, 1, 1, 1]", "assert parse_nested_parens(\"(()()) (()()) () (()()) ((())()()) (()()) () (()()) ((())) () () (()())\") == [2, 2, 1, 2, 3, 2, 1, 2, 3, 1, 1, 2]", "assert parse_nested_parens(\"(()) (((()))) (()) (()) ((())) () ((())) ((())()()) ((())) (()) (()()) (((())))\") == [2, 4, 2, 2, 3, 1, 3, 3, 3, 2, 2, 4]", "assert parse_nested_parens(\"(((()))) (((()))) () (()()) ((())()()) () (()(())((()))) (()(())((()))) (()()) () (()()) (()) (()) ((())()())\") == [4, 4, 1, 2, 3, 1, 4, 4, 2, 1, 2, 2, 2, 3]", "assert parse_nested_parens(\"((())()()) (((()))) ((())) ((())) ((())) ((())()()) ((())()()) (()()) () () (()(())((()))) ((())) ((())()()) (()(())((()))) () ((())()()) (((()))) (((()))) (()(())((()))) ((())()()) ()\") == [3, 4, 3, 3, 3, 3, 3, 2, 1, 1, 4, 3, 3, 4, 1, 3, 4, 4, 4, 3, 1]", "assert parse_nested_parens(\"() ((())) ((())()()) ((())) () (()()) () (()())\") == [1, 3, 3, 3, 1, 2, 1, 2]", "assert parse_nested_parens(\"(()) (()()) () (()()) ((())()()) ((())) ((())) (()) ((())()()) () ((())()()) (()()) () (()) ((())) (()()) (()()) ((())()())\") == [2, 2, 1, 2, 3, 3, 3, 2, 3, 1, 3, 2, 1, 2, 3, 2, 2, 3]", "assert parse_nested_parens('() (()) ((())) (((())))') == [1, 2, 3, 4]", "assert parse_nested_parens(\"(()()) (((()))) (((()))) (()) (()()) (((()))) () (((()))) (()) ((())) () ()\") == [2, 4, 4, 2, 2, 4, 1, 4, 2, 3, 1, 1]", "assert parse_nested_parens(\"(()()) (((()))) (((()))) (()()) (((()))) ((())) ((())()()) (()) ((())()()) (((()))) (()()) () (()) (((()))) () (()(())((()))) () (()) (()(())((()))) ((())) ((())()())\") == [2, 4, 4, 2, 4, 3, 3, 2, 3, 4, 2, 1, 2, 4, 1, 4, 1, 2, 4, 3, 3]", "assert parse_nested_parens(\"() (()(())((()))) (()) (()()) ((())()()) (()()) (()())\") == [1, 4, 2, 2, 3, 2, 2]", "assert parse_nested_parens(\"((())()()) (()(())((()))) (()()) (()()) ((())()()) (()()) ((())) () () (()()) (()(())((()))) ((())()()) (()()) ((())()()) (((()))) (()(())((()))) (()()) () ((())()()) ((())()()) ()\") == [3, 4, 2, 2, 3, 2, 3, 1, 1, 2, 4, 3, 2, 3, 4, 4, 2, 1, 3, 3, 1]", "assert parse_nested_parens(\"((())()()) () () (()()) (()()) (()()) ((())) (()())\") == [3, 1, 1, 2, 2, 2, 3, 2]", "assert parse_nested_parens(\"() ((())()()) (()()) (()) ((())()()) () (((()))) ((())()()) () (()) (()) ((())()()) (()) (()) (()) ((())) ((())) (((())))\") == [1, 3, 2, 2, 3, 1, 4, 3, 1, 2, 2, 3, 2, 2, 2, 3, 3, 4]", "assert parse_nested_parens(\"(()(())((()))) () (()(())((()))) (()) (((()))) ((())()()) ((())()()) ((())) ((())()()) (()(())((()))) ((())) (()(())((()))) ((())) ((())()())\") == [4, 1, 4, 2, 4, 3, 3, 3, 3, 4, 3, 4, 3, 3]", "assert parse_nested_parens(\"(()()) (((()))) () (()) (()) ((())) (()()) () () ((())()()) (()) ((()))\") == [2, 4, 1, 2, 2, 3, 2, 1, 1, 3, 2, 3]", "assert parse_nested_parens(\"(()) ((())()()) (()()) ((())()()) (((()))) (()()) (()(())((()))) (()()) (()(())((()))) ((())) (()) ((())) (()()) (()) (()()) () ((())) ((())) ((())) ((())) (()())\") == [2, 3, 2, 3, 4, 2, 4, 2, 4, 3, 2, 3, 2, 2, 2, 1, 3, 3, 3, 3, 2]", "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]", "assert parse_nested_parens(\"((())) ((())) ((())()()) ((())) ((())()()) ((())) () ()\") == [3, 3, 3, 3, 3, 3, 1, 1]", "assert parse_nested_parens(\"((())) (()()) () ((())()())\") == [3, 2, 1, 3]", "assert parse_nested_parens(\"((())()()) () (()()) ((())) (()()) () ((())()()) ((()))\") == [3, 1, 2, 3, 2, 1, 3, 3]", "assert parse_nested_parens(\"(((()))) () (()) (((()))) ((())) (()) ((())()()) ((())()()) () ((())()()) (()) ((())()())\") == [4, 1, 2, 4, 3, 2, 3, 3, 1, 3, 2, 3]", "assert parse_nested_parens(\"((())()()) () (()()) ((())) ((())()()) ((())()())\") == [3, 1, 2, 3, 3, 3]", "assert parse_nested_parens(\"((())()()) () ((())) () (()()) ((())) ((())()()) () () ((())()()) () (()())\") == [3, 1, 3, 1, 2, 3, 3, 1, 1, 3, 1, 2]", "assert parse_nested_parens(\"() ((())) (()()) (((()))) () ((())) (((()))) () (()) () () ((())()()) (()) (()()) ((())) (((()))) (()) (())\") == [1, 3, 2, 4, 1, 3, 4, 1, 2, 1, 1, 3, 2, 2, 3, 4, 2, 2]", "assert parse_nested_parens(\"((())()()) () ((())()()) ((())()()) ((())) () ((())()()) ((())) () ((())()()) (()()) (()())\") == [3, 1, 3, 3, 3, 1, 3, 3, 1, 3, 2, 2]", "assert parse_nested_parens(\"() (()()) ((())()()) (()(())((()))) (((()))) (()(())((()))) ((())()()) (()) (()()) (((()))) (()) (()) (()()) (((()))) (((()))) () (()) ((())) () (()) (()())\") == [1, 2, 3, 4, 4, 4, 3, 2, 2, 4, 2, 2, 2, 4, 4, 1, 2, 3, 1, 2, 2]", "assert parse_nested_parens(\"(((()))) () (((()))) (()()) ((())) () (()()) (((()))) (()()) (((()))) () ()\") == [4, 1, 4, 2, 3, 1, 2, 4, 2, 4, 1, 1]", "assert parse_nested_parens(\"(((()))) (()(())((()))) (()(())((()))) () (()) () ((())) (()) (()()) (((()))) ((())) () () (()) () () (()) () ((())) (()(())((()))) ((()))\") == [4, 4, 4, 1, 2, 1, 3, 2, 2, 4, 3, 1, 1, 2, 1, 1, 2, 1, 3, 4, 3]", "assert parse_nested_parens(\"(()) (()) (()()) ((())()()) (()) (()()) ((())) (()()) (()(())((()))) (()(())((()))) ((())()()) ((())) (((()))) (()(())((()))) ((())) ((())) (()(())((()))) () ((())) ((())) ((())()())\") == [2, 2, 2, 3, 2, 2, 3, 2, 4, 4, 3, 3, 4, 4, 3, 3, 4, 1, 3, 3, 3]", "assert parse_nested_parens(\"((())) () (()) ((())()()) (()()) ((())) (()) () () (((()))) (((()))) (())\") == [3, 1, 2, 3, 2, 3, 2, 1, 1, 4, 4, 2]", "assert parse_nested_parens(\"\") == []", "assert parse_nested_parens(\"((())()()) (()) (()()) ((())) () ((())) ((())()()) () () (()) (()) (((()))) (((()))) ((())) () () (()()) (())\") == [3, 2, 2, 3, 1, 3, 3, 1, 1, 2, 2, 4, 4, 3, 1, 1, 2, 2]", "assert parse_nested_parens(\"((())) ((())()()) ((())) (()()) ((())()()) () (()()) ((()))\") == [3, 3, 3, 2, 3, 1, 2, 3]", "assert parse_nested_parens(\"((())()()) ((())()()) ((())()()) ((())) (()()) ((())) ((())()()) ((())()()) ((())()()) () ((())) (()())\") == [3, 3, 3, 3, 2, 3, 3, 3, 3, 1, 3, 2]", "assert parse_nested_parens(\"((())()()) (()) () (((()))) ((())()()) ((())()()) (((()))) (()) (((()))) () (((()))) ((())()()) (()()) (()) (()) (()) () (())\") == [3, 2, 1, 4, 3, 3, 4, 2, 4, 1, 4, 3, 2, 2, 2, 2, 1, 2]", "assert parse_nested_parens(\"(()()) (()) ((())()()) ((())()()) () ((()))\") == [2, 2, 3, 3, 1, 3]", "assert parse_nested_parens(\"(()()) () ((())()()) () ((())) () ((())) ()\") == [2, 1, 3, 1, 3, 1, 3, 1]", "assert parse_nested_parens(\"((())) () (()()) ()\") == [3, 1, 2, 1]", "assert parse_nested_parens(\"((())) ((())) (()()) ((())()()) () ((())()()) ((())()()) ((())) (()()) ((())) () ((())()())\") == [3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 1, 3]", "assert parse_nested_parens(\"(()()) () (()()) ((())) () ((())()()) (()()) ((())()())\") == [2, 1, 2, 3, 1, 3, 2, 3]", "assert parse_nested_parens(\"(((()))) (()) () ((())()()) (()()) () (()()) (()(())((()))) (()(())((()))) ((())) (((()))) (()(())((()))) ((())()()) ()\") == [4, 2, 1, 3, 2, 1, 2, 4, 4, 3, 4, 4, 3, 1]", "assert parse_nested_parens(\"(()()) (()()) () (()())\") == [2, 2, 1, 2]", "assert parse_nested_parens(\"((())) ((())) (((()))) (()) (()()) (()()) () ((())) ((())()()) () (()(())((()))) (()()) (()(())((()))) ((()))\") == [3, 3, 4, 2, 2, 2, 1, 3, 3, 1, 4, 2, 4, 3]", "assert parse_nested_parens(\"(()()) (()()) () (()) () (()()) (()) (()) (((()))) () (()()) (())\") == [2, 2, 1, 2, 1, 2, 2, 2, 4, 1, 2, 2]", "assert parse_nested_parens('(()(())((())))') == [4]", "assert parse_nested_parens(\"((())) (()) (((()))) () (()()) (((()))) ((())()()) ((())) (()()) ((())()()) (((()))) ((())) (()) ((())) ((())) () ((())) ((())()())\") == [3, 2, 4, 1, 2, 4, 3, 3, 2, 3, 4, 3, 2, 3, 3, 1, 3, 3]", "assert parse_nested_parens(\"(()) ((())()()) (()) ((())) ((())) ((())()()) (((()))) () ((())()()) (()(())((()))) ((())) ((())()()) ((())()()) (())\") == [2, 3, 2, 3, 3, 3, 4, 1, 3, 4, 3, 3, 3, 2]", "assert parse_nested_parens(\"(()()) ((())()()) (()()) ()\") == [2, 3, 2, 1]", "assert parse_nested_parens(\"(()(())((()))) ((())()()) (((()))) (()(())((()))) () (()(())((()))) ()\") == [4, 3, 4, 4, 1, 4, 1]", "assert parse_nested_parens(\"((())) ((())) ((())()()) () ((())) ((())) (()()) ((())()()) (((()))) () (()) (((())))\") == [3, 3, 3, 1, 3, 3, 2, 3, 4, 1, 2, 4]", "assert parse_nested_parens(\"((())) (((()))) ((())) (()()) (()()) ((())()()) (()) (()(())((()))) (()) ((())) (()) ((())) () (((())))\") == [3, 4, 3, 2, 2, 3, 2, 4, 2, 3, 2, 3, 1, 4]", "assert parse_nested_parens(\"((())) ((())) ((())()()) (()()) () (()(())((()))) (()()) (((()))) (((()))) ((())()()) (()()) () () ((())) (((()))) (()(())((()))) (((()))) ((())()()) ((())) (()(())((()))) (())\") == [3, 3, 3, 2, 1, 4, 2, 4, 4, 3, 2, 1, 1, 3, 4, 4, 4, 3, 3, 4, 2]", "assert parse_nested_parens(\"(()) () (((()))) () (((()))) (()()) (()) (((()))) (()(())((()))) (((()))) () (()()) (()(())((()))) (()()) (()(())((()))) (()()) (((()))) (()()) (((()))) (()) (()())\") == [2, 1, 4, 1, 4, 2, 2, 4, 4, 4, 1, 2, 4, 2, 4, 2, 4, 2, 4, 2, 2]"], "nl": " Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    ", "func": "def parse_nested_parens(paren_string: str) -> List[int]:", "examples": ">>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    ", "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    if not paren_string:\n        return []\n    \n    max_depth = 0\n    current_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n    \n    return [max_depth]\n\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    if not paren_string:\n        return []\n    \n    max_depth = 0\n    current_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n    \n    return [max_depth]\n\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''\n    Input: a string representing multiple groups of nested parentheses separated by spaces\n    Output: a list of integers representing the deepest level of nesting for each group\n    '''\n    \n    if not paren_string:\n        return []\n    \n    depths = []\n    max_depth = 0\n    current_depth = 0\n    \n    for group in paren_string.split():\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        depths.append(max_depth)\n    \n    return depths\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport re\n\ndef parse_nested_parens(s: str) -> List[int]:\n    \"\"\"\n    Function to parse nested parentheses and return the deepest level of nesting for each group\n    Input: s - a string representing multiple groups of nested parentheses separated by spaces\n    Output: List[int] - the deepest level of nesting for each group\n    Example: parse_nested_parens('(()()) ((())) () ((())()())') -> [2, 3, 1, 3]\n    \"\"\"\n\n    def find_deepest_level(group):\n        max_depth = 0\n        current_depth = 0\n\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n\n        return max_depth\n\n    groups = s.split()\n    deepest_levels = [find_deepest_level(group) for group in groups]\n\n    return deepest_levels\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(s: str) -> List[int]:\n    \"\"\"\n    Input: a string representing multiple groups of nested parentheses separated by spaces\n    Output: a list of integers representing the deepest level of nesting for each group\n    \"\"\"\n    \n    if not s:\n        return []\n    \n    result = []\n    \n    for group in s.split():\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        \n        result.append(max_depth)\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(input_string: str) -> List[int]:\n    # Function to parse nested parentheses and return the deepest level of nesting for each group\n    \n    if not input_string:\n        return []\n    \n    depths = []\n    max_depth = 0\n    current_depth = 0\n    \n    for char in input_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n            depths.append(max_depth)\n            max_depth = 0\n    \n    return depths\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces and output the deepest level of nesting of parentheses for each group.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    Ensure your program efficiently handles strings with varying lengths and complexity in terms of nested parentheses.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    \n    def find_deepest_level(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in s:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        \n        return max_depth\n    \n    groups = paren_string.split()\n    result = [find_deepest_level(group) for group in groups]\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces and output the deepest level of nesting of parentheses for each group.\n    Ensure accurate identification of the deepest level of nesting for each group.\n    Optimize performance for processing nested parentheses.\n    '''\n\n    def count_nested_parens(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n\n        for char in s:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n\n        return max_depth\n\n    if not paren_string:\n        return []\n\n    groups = paren_string.split()\n    result = [count_nested_parens(group) for group in groups]\n\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        \n        if char == ' ':\n            depths.append(max_depth)\n            max_depth = 0\n    \n    depths.append(max_depth)\n    \n    return depths\n\n# Test cases\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output: [2, 3, 1, 3]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    Ensure your program efficiently handles strings with varying lengths and complexity in terms of nested parentheses.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    \n    if not paren_string:\n        return []\n    \n    def find_deepest_level(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in s:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        \n        return max_depth\n    \n    groups = paren_string.split()\n    result = [find_deepest_level(group) for group in groups]\n    \n    return result\n"], "plans": ["We will use the built-in Python libraries to efficiently handle the nested parentheses and accurately identify the deepest level of nesting.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: The core concept here is to identify the level of nesting of parentheses within each group of the input string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python libraries, the logic may involve using stack data structure or recursion to track the nesting level of parentheses efficiently.\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: An empty string should return an empty list as there are no nested parentheses.\n    parse_nested_parens('()') = [1]\n    Explanation: The deepest level of nesting for a single pair of parentheses is 1.\n    parse_nested_parens('((()))') = [3]\n    Explanation: The deepest level of nesting for three pairs of nested parentheses is 3.\n\n# [extra code for edge case]\n    We may need extra code to handle the edge cases efficiently, especially when dealing with empty strings or single pairs of parentheses.\n        if not paren_string:\n            return []\n        (other code)\n", "We will use the built-in Python libraries to efficiently handle the nested parentheses and accurately identify the deepest level of nesting.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: The core concept here is to identify the level of nesting of parentheses within each group of the input string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python libraries, the logic might involve using stack data structure or recursion to track the nesting levels of parentheses efficiently.\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: An empty string should return an empty list as there are no nested parentheses.\n    parse_nested_parens('()') = [1]\n    Explanation: The deepest level of nesting for a single pair of parentheses is 1.\n    parse_nested_parens('((()))') = [3]\n    Explanation: The deepest level of nesting for a group with three levels of nested parentheses is 3.\n\n# [extra code for edge case]\n    We may need extra code to handle the edge cases efficiently, especially when dealing with empty strings or single pairs of parentheses.\n        if not paren_string:\n            return []\n        (other code)\n", "We will use the built-in Python libraries to efficiently handle the nested parentheses and determine the deepest level of nesting.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: The core concept here refers to the structure where parentheses are enclosed within each other, creating levels of nesting.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python libraries, the logic may involve utilizing stack data structure or recursion to handle nested parentheses efficiently.\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: An empty string should return an empty list as there are no nested parentheses.\n    parse_nested_parens('()') = [1]\n    Explanation: The string contains one level of nesting with a single pair of parentheses.\n\n# [extra code for edge case]\n    We may need extra code to handle the edge cases efficiently, especially when dealing with empty strings or single pairs of parentheses.\n        if not paren_string:\n            return []\n        (other code)\n", "requirement pool:\n- Efficiently handle varying lengths and complexities of nested parentheses strings\n- Accurately identify the deepest level of nesting for each group\n- Optimize performance for processing multiple groups\nWe will use the built-in Python library 're' to efficiently handle the parsing of nested parentheses in the input string.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: The core concept refers to the structure where parentheses are enclosed within other parentheses, forming nested levels.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the 're' library, the code logic will involve using regular expressions to efficiently handle the parsing of nested parentheses in the input string.\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: When the input string is empty, there are no groups to parse, so the expected output is an empty list.\n    parse_nested_parens('((()))') = [3]\n    Explanation: The deepest level of nesting for the group '((()))' is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The 're' library can efficiently handle varying lengths and complexities of nested parentheses.\n", "requirement pool:\n- Efficiently handle varying lengths and complexities of nested parentheses\n- Ensure accurate identification of the deepest level of nesting for each group\n- Optimize performance for processing multiple groups\nWe will design a static Python function using the built-in stack data structure to efficiently handle the varying lengths and complexities of nested parentheses.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: The core concept here refers to the structure where parentheses are nested within each other, creating different levels of nesting.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'deepest': means the level of nesting that is the furthest from the outermost parentheses\n\n# [code logic]\n    The logic to implement the code would involve using a stack data structure to keep track of the nesting levels. We would iterate through the string character by character, maintaining a count of the current nesting level. When encountering an opening parenthesis, we would increment the nesting level, and when encountering a closing parenthesis, we would decrement the nesting level. We would keep track of the maximum nesting level encountered for each group and output it in a list.\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: Since there are no groups in an empty string, the expected output is an empty list.\n    parse_nested_parens('()') = [1]\n    Explanation: There is only one group with a nesting level of 1.\n    parse_nested_parens('((()))') = [3]\n    Explanation: The group has the deepest nesting level of 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided can efficiently handle varying lengths and complexities of nested parentheses.\n", "We will use the built-in Python libraries to efficiently handle the nested parentheses and determine the deepest level of nesting for each group.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: The core concept refers to the structure where parentheses are nested within each other in the input string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'deepest': means the maximum level of nesting of parentheses within a group\n\n# [code logic]\n    Since the plan suggests using built-in Python libraries, we can utilize stack data structure to keep track of the nesting level. We can iterate through the string, maintaining a count of open and close parentheses to determine the depth of nesting for each group.\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: An empty string has no groups, so the expected output is an empty list.\n    parse_nested_parens('()') = [1]\n    Explanation: The only group has a depth of 1.\n    parse_nested_parens('(()) ()') = [2, 1]\n    Explanation: The first group has a depth of 2, and the second group has a depth of 1.\n\n# [extra code for edge case]\n    We need to handle the edge case where the input string is empty to return an empty list.\n        if not s:\n            return []\n", "We will use the built-in Python libraries to efficiently handle the nested parentheses and accurately identify the deepest level of nesting for each group.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: The core concept here is to identify the level of nesting of parentheses in each group within the input string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python libraries, the logic may involve using stack data structure or recursion to handle nested parentheses efficiently.\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: An empty string should return an empty list as there are no groups to parse.\n    parse_nested_parens('()') = [1]\n    Explanation: The input has one group with one level of nesting.\n    parse_nested_parens('((()))') = [3]\n    Explanation: The input has one group with three levels of nesting.\n\n# [extra code for edge case]\n    We may need extra code to handle the edge cases efficiently, especially when dealing with empty strings or single parentheses. \n        (potential code for handling edge cases)\n", "We will use the built-in Python libraries to efficiently handle the parsing of nested parentheses.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: The core concept here is to identify and count the levels of nested parentheses in each group within the input string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python libraries, the logic might involve using stack data structure or recursion to efficiently handle the parsing of nested parentheses.\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: An empty string should return an empty list as there are no nested parentheses.\n    parse_nested_parens('((()))') = [3]\n    Explanation: The input has only one group with three levels of nested parentheses.\n\n# [extra code for edge case]\n    We might need extra code to handle the edge cases, especially when dealing with empty strings or strings with no nested parentheses. Additional checks and error handling might be required.\n", "requirement pool:\n- Efficiently handle varying lengths and complexity of nested parentheses\n- Accurately identify the deepest level of nesting for each group\n- Optimize performance for processing nested parentheses\nWe will design a static Python function using basic string manipulation and stack data structure to efficiently handle the varying lengths and complexity of nested parentheses.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: The core concept refers to the structure where parentheses are enclosed within each other, forming nested levels.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: An empty string should return an empty list as there are no nested parentheses.\n    parse_nested_parens('()') = [1]\n    Explanation: The string has one level of nesting with a single pair of parentheses.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to handle empty strings and single pair of parentheses is already covered in the main implementation.\n", "We will use the built-in Python libraries to efficiently handle the nested parentheses and accurately identify the deepest level of nesting.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'nested parentheses'\n    Explanation: The core concept here is to identify the level of nesting of parentheses within each group of the input string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python libraries, the logic may involve using stack data structure or recursion to track the nesting level of parentheses efficiently.\n\n# [edge case] \n    parse_nested_parens('') = []\n    Explanation: An empty string should return an empty list as there are no nested parentheses.\n    parse_nested_parens('()') = [1]\n    Explanation: The string has one level of nesting with a single pair of parentheses.\n\n# [extra code for edge case]\n    We may need extra code to handle the edge cases efficiently, especially when dealing with empty strings or strings with minimal nesting levels.\n        if not paren_string:\n            return []\n        (other code)\n"], "scores": [0.0202, 0.0202, 0.0404, 1.0, 1.0, 0.0101, 1.0, 1.0, 0.9899, 1.0], "pass_results": [false, false, false, true, true, false, true, true, false, true], "pass_test_cases_num": [2, 2, 4, 99, 99, 1, 99, 99, 98, 99], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    '''\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    Ensure your program efficiently handles strings with varying lengths and complexity in terms of nested parentheses.\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    '''\n    \n    if not paren_string:\n        return []\n    \n    def find_deepest_level(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in s:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        \n        return max_depth\n    \n    groups = paren_string.split()\n    result = [find_deepest_level(group) for group in groups]\n    \n    return result\n", "passed": true, "pass": true, "pass_num": 5, "round": 285, "repair_prompt": ["def parse_nested_parens(paren_string: str) -> List[int]:\t\n''' Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three. Ensure your program efficiently handles strings with varying lengths and complexity in terms of nested parentheses.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "Input to this function is a string represented multiple groups for nested parentheses separated by spaces. Ensure your program efficiently handles strings with varying lengths and complexity in terms of nested parentheses. For every group, output the deepest level of nesting of parentheses.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]", "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function is a string represented multiple groups for nested parentheses separated by spaces and output the deepest level of nesting of parentheses for each group. E.g. (()()) has maximum two levels of nesting while ((())) has three. Ensure your program efficiently handles strings with varying lengths and complexity in terms of nested parentheses.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 304}
