{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "completions": ["from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.'''\n    return l == sorted(l) or l == sorted(l, reverse=True)\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.'''\n    \n    # Check if the list is sorted in ascending order\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    \n    # Check if the list is sorted in descending order\n    if all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    \n    # If neither of the above conditions is met, return False\n    return False\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.'''\n    \n    # Check if the list is sorted in ascending order\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    \n    # Check if the list is sorted in descending order\n    if all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    \n    # If neither of the above conditions is met, return False\n    return False\n", "from typing import List\n## main.py\n\nimport numpy as np\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.'''\n    arr = np.array(l)\n    return np.all(np.diff(arr) >= 0) or np.all(np.diff(arr) <= 0)\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.\n    Args:\n        l (list): Input list to check for monotonicity\n    Returns:\n        bool: True if list is monotonically increasing or decreasing, False otherwise\n    '''\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.'''\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "from typing import List\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.'''\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.'''\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.'''\n    \n    # Check if the list is sorted in ascending order\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    \n    # Check if the list is sorted in descending order\n    if all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    \n    # If neither of the above conditions is met, return False\n    return False\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.'''\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n"], "plans": ["requirement pool:\n- Implement efficient monotonicity check algorithm\n- Ensure correct handling of edge cases\n- Optimize for performance without sacrificing accuracy\nWe will design a static Python function using basic logic to efficiently check the monotonicity of a list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: It means that the elements in the list are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is sorted in either ascending or descending order to determine if it is monotonically increasing or decreasing.\n\n```python\ndef monotonic(l: list) -> bool:\n    return l == sorted(l) or l == sorted(l, reverse=True)\n```\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is monotonically increasing as all elements are in non-decreasing order.\n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is monotonically decreasing as all elements are in non-increasing order.\n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not monotonically increasing or decreasing as it has both increasing and decreasing elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic covers all scenarios of monotonically increasing or decreasing lists.\n", "requirement pool:\n- Efficiently evaluate monotonicity of a list\n- Ensure correct identification of monotonic sequences\n- Provide clear and understandable output\nWe will design a simple static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n## Prompt 3:\n\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: The core concept here is to determine whether the elements in the list are consistently increasing or decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic logic to efficiently check if a list is monotonically increasing or decreasing, we can proceed with the following steps:\n    1. Check if the list is sorted in ascending order. If it is, return True.\n    2. Check if the list is sorted in descending order. If it is, return True.\n    3. If neither of the above conditions is met, return False.\n\n# [edge case] \n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The list [1, 2, 4, 20] is monotonically increasing.\n    \n    monotonic([1, 20, 4, 10]) = False\n    Explanation: The list [1, 20, 4, 10] is not monotonically increasing or decreasing.\n    \n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The list [4, 1, 0, -10] is monotonically decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers the scenarios where the list is monotonically increasing or decreasing.\n", "requirement pool:\n- Implement efficient monotonicity check algorithm\n- Ensure correctness in identifying monotonic lists\n- Design clear output messages for users\nWe will design a simple static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n## Prompt 3:\n\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: The core concept here is to determine whether the elements in the list are consistently increasing or decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic logic to efficiently check if a list is monotonically increasing or decreasing, we can proceed with the following steps:\n    1. Check if the list is sorted in ascending order, return True if it is.\n    2. Check if the list is sorted in descending order, return True if it is.\n    3. If neither of the above conditions is met, return False.\n\n# [edge case] \n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The list is monotonically increasing.\n    \n    monotonic([1, 20, 4, 10]) = False\n    Explanation: The list is not monotonically increasing or decreasing.\n    \n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The list is monotonically decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers all scenarios.\n", "requirement pool:\n- Implement efficient algorithm for monotonicity check\n- Ensure the function handles edge cases gracefully\n- Optimize the function for large input lists\nWe will design a static Python function using appropriate open-source libraries to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: The core concept here is to determine if the elements in the list are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using open-source libraries, you can utilize the `numpy` library to check if the list is monotonically increasing or decreasing. Here is a sample logic:\n    \n```python\nimport numpy as np\n\ndef monotonic(l: list) -> bool:\n    arr = np.array(l)\n    return np.all(np.diff(arr) >= 0) or np.all(np.diff(arr) <= 0)\n```\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is monotonically increasing as all elements are either increasing or staying the same.\n    \n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is monotonically decreasing as all elements are either decreasing or staying the same.\n    \n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not monotonically increasing or decreasing as it has both increasing and decreasing elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios of monotonically increasing or decreasing lists.\n", "requirement analysis:\nThe main requirement is to accurately determine if a list is monotonically increasing or decreasing. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement efficient algorithm for monotonicity evaluation\n- Ensure accurate identification of monotonically increasing or decreasing lists\n- Optimize performance for large input lists\nWe will design a static Python function using a simple approach without defining any class. We will utilize the built-in functions in Python to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions utilizing built-in functions in Python, we can use the `all` function along with a list comprehension to check if the list is monotonically increasing or decreasing. Here is the logic:\n    \n```python\ndef monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n```\n\n# [edge case] \n    monotonic([1, 2, 3, 4]) = True\n    Explanation: The list is monotonically increasing.\n    \n    monotonic([4, 3, 2, 1]) = True\n    Explanation: The list is monotonically decreasing.\n    \n    monotonic([1, 2, 2, 4]) = False\n    Explanation: The list is not strictly increasing or decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios of monotonically increasing or decreasing lists.\n", "requirement analysis:\nThe main requirement is to accurately determine if a list is monotonically increasing or decreasing. Performance optimization is crucial for handling large lists efficiently. Clear documentation is necessary for ease of use and maintenance.\nrequirement pool:\n- Efficiently evaluate list monotonicity\n- Handle large input lists with optimized performance\n- Ensure clear and detailed documentation for the function\nWe will design a static Python function using basic logic to efficiently determine if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n## Prompt 3:\n\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: The core concept here is to check if the elements in the list are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic logic to determine if a list is monotonically increasing or decreasing, we can follow the steps provided in the plan.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is monotonically increasing as each element is greater than or equal to the previous one.\n    \n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is less than or equal to the previous one.\n    \n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not monotonically increasing or decreasing as it has both increasing and decreasing elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic should cover all scenarios.\n", "requirement pool:\n- Efficiently evaluate monotonicity of lists\n- Ensure correctness in determining monotonicity\n- Provide clear and understandable output\nWe will design a simple static Python function using basic logic to check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: It means that the elements in the list are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is to design a simple static Python function using basic logic, the code logic should involve iterating through the list and checking if each element is greater or smaller than the previous one to determine if it is monotonically increasing or decreasing.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is monotonically increasing as each element is greater than or equal to the previous one.\n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is smaller than or equal to the previous one.\n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not monotonically increasing or decreasing as it has both increasing and decreasing elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of comparing each element with the previous one should cover all scenarios.\n", "requirement pool:\n- Implement efficient monotonicity evaluation algorithm\n- Ensure correct identification of monotonic lists\n- Design clear output for monotonicity results\nWe will design a simple static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n## Prompt 3:\n\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: The core concept here is to determine if the elements in the list are either consistently increasing or decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic to implement the code would involve iterating through the list and checking if each element is greater or less than the previous one, depending on whether we are checking for monotonically increasing or decreasing. We can use a flag variable to keep track of the trend.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is monotonically increasing as each element is greater than or equal to the previous one.\n    \n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is less than or equal to the previous one.\n    \n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not monotonically increasing or decreasing as it has both increasing and decreasing elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for monotonically increasing or decreasing covers all scenarios.\n", "requirement pool:\n- Efficiently determine if a list is monotonically increasing or decreasing\n- Ensure accurate evaluation of monotonicity for various list sizes\n- Provide detailed output explaining the monotonicity result\nWe will design a simple static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n## Prompt 3:\n\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: The core concept here is to determine if the elements in the list are either consistently increasing or decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic logic to efficiently check if a list is monotonically increasing or decreasing, we can proceed with the following steps:\n    1. Check if the list is sorted in ascending order, return True if it is.\n    2. Check if the list is sorted in descending order, return True if it is.\n    3. If neither of the above conditions is met, return False.\n\n# [edge case] \n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The list [1, 2, 4, 20] is monotonically increasing.\n    \n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The list [4, 1, 0, -10] is monotonically decreasing.\n    \n    monotonic([1, 20, 4, 10]) = False\n    Explanation: The list [1, 20, 4, 10] is neither monotonically increasing nor decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers all scenarios for determining if a list is monotonically increasing or decreasing.\n", "requirement pool:\n- Implement efficient monotonicity evaluation algorithm\n- Ensure correct identification of monotonic lists\n- Design clear output format for monotonicity results\nWe will design a static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: It means that the elements in the list are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using basic logic to efficiently check, we can implement the code by iterating through the list and comparing adjacent elements to determine if they are monotonically increasing or decreasing.\n\n```python\ndef monotonic(l: list) -> bool:\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n```\n\n# [edge case] \n    monotonic([1, 2, 3, 4]) = True\n    Explanation: The list is monotonically increasing.\n    \n    monotonic([4, 3, 2, 1]) = True\n    Explanation: The list is monotonically decreasing.\n    \n    monotonic([1, 2, 1, 4]) = False\n    Explanation: The list is not consistently increasing or decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers both increasing and decreasing scenarios effectively.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 113, 113], "completion": "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.'''\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "passed": true, "pass": true, "pass_num": 10, "round": 311, "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "Return True if the elements in the list are monotonically increasing or decreasing. If the elements are non-monotonic, return False.\n\ndef monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "mutate_method": "condense_two2one", "parent_index": 295}
