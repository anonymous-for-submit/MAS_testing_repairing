{"task_id": "HumanEval/157", "prompt": "def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is 90 degrees.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "entry_point": "right_angle_triangle", "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "test": ["def check(right_angle_triangle):\n\tassert right_angle_triangle(273, 936, 975) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(285, 380, 475) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(705, 376, 799) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(870, 464, 986) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3504, 4015, 5329) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(525, 280, 595) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1536, 1760, 2336) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(175, 600, 625) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(455, 1560, 1625) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 2, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(259, 888, 925) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(490, 1680, 1750) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1185, 632, 1343) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 1, 9) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2256, 2585, 3431) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1155, 616, 1309) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 5, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 7, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 1, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(54, 72, 90) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(20, 12, 16) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 5, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2736, 3135, 4161) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(518, 1776, 1850) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 6, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(7, 7, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 2, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(10, 6, 8) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 5, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 1, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 3, 15) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(280, 960, 1000) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 1, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(10, 9, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 7, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 7, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(765, 408, 867) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(69, 92, 115) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(140, 336, 364) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(240, 144, 192) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(780, 468, 624) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 7, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3888, 4455, 5913) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 7, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 2, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(14, 8, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(204, 272, 340) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 7, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1035, 552, 1173) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(243, 324, 405) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(581, 1992, 2075) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(11, 5, 8) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(820, 492, 656) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 5, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(12, 1, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(900, 480, 1020) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(360, 864, 936) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(7, 1, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 3, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(210, 112, 238) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1000, 600, 800) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(285, 684, 741) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(65, 156, 169) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(960, 576, 768) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3792, 4345, 5767) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 5, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 2, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 2, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(12, 4, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 4, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 12, 13) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 6, 9) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(160, 384, 416) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 6, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2880, 3300, 4380) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(10, 5, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(7, 24, 25) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 8, 17) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4752, 5445, 7227) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4656, 5335, 7081) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(380, 912, 988) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(350, 840, 910) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 4, 5) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 8) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(70, 42, 56) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 9, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(201, 268, 335) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(170, 408, 442) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(12, 16, 20) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(305, 732, 793) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 2, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 3, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(230, 552, 598) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 1, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 9) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 5, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(235, 564, 611) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 1, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(81, 108, 135) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 2, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 5, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(21, 28, 35) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(234, 312, 390) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 1, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(230, 138, 184) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(168, 576, 600) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1095, 584, 1241) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(320, 192, 256) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(8, 5, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 2, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 1, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(528, 605, 803) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 4, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 8, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1455, 776, 1649) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(21, 72, 75) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2544, 2915, 3869) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(610, 366, 488) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(8, 10, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 3, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(219, 292, 365) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 5, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(192, 220, 292) == True"], "test_case_list": ["assert right_angle_triangle(273, 936, 975) == True", "assert right_angle_triangle(285, 380, 475) == True", "assert right_angle_triangle(705, 376, 799) == True", "assert right_angle_triangle(870, 464, 986) == True", "assert right_angle_triangle(3504, 4015, 5329) == True", "assert right_angle_triangle(525, 280, 595) == True", "assert right_angle_triangle(1536, 1760, 2336) == True", "assert right_angle_triangle(175, 600, 625) == True", "assert right_angle_triangle(455, 1560, 1625) == True", "assert right_angle_triangle(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.", "assert right_angle_triangle(3, 2, 5) == False", "assert right_angle_triangle(259, 888, 925) == True", "assert right_angle_triangle(490, 1680, 1750) == True", "assert right_angle_triangle(1185, 632, 1343) == True", "assert right_angle_triangle(6, 1, 9) == False", "assert right_angle_triangle(2256, 2585, 3431) == True", "assert right_angle_triangle(1155, 616, 1309) == True", "assert right_angle_triangle(4, 5, 5) == False", "assert right_angle_triangle(5, 7, 1) == False", "assert right_angle_triangle(5, 1, 2) == False", "assert right_angle_triangle(54, 72, 90) == True", "assert right_angle_triangle(20, 12, 16) == True", "assert right_angle_triangle(5, 5, 2) == False", "assert right_angle_triangle(2736, 3135, 4161) == True", "assert right_angle_triangle(518, 1776, 1850) == True", "assert right_angle_triangle(3, 6, 11) == False", "assert right_angle_triangle(7, 7, 5) == False", "assert right_angle_triangle(15, 2, 10) == False", "assert right_angle_triangle(10, 6, 8) == True", "assert right_angle_triangle(15, 5, 11) == False", "assert right_angle_triangle(1, 1, 2) == False", "assert right_angle_triangle(1, 3, 15) == False", "assert right_angle_triangle(280, 960, 1000) == True", "assert right_angle_triangle(6, 1, 7) == False", "assert right_angle_triangle(10, 9, 3) == False", "assert right_angle_triangle(2, 7, 6) == False", "assert right_angle_triangle(1, 7, 4) == False", "assert right_angle_triangle(765, 408, 867) == True", "assert right_angle_triangle(69, 92, 115) == True", "assert right_angle_triangle(140, 336, 364) == True", "assert right_angle_triangle(240, 144, 192) == True", "assert right_angle_triangle(2, 4, 6) == False", "assert right_angle_triangle(780, 468, 624) == True", "assert right_angle_triangle(6, 7, 6) == False", "assert right_angle_triangle(3888, 4455, 5913) == True", "assert right_angle_triangle(6, 7, 7) == False", "assert right_angle_triangle(2, 2, 2) == False", "assert right_angle_triangle(14, 8, 10) == False", "assert right_angle_triangle(204, 272, 340) == True", "assert right_angle_triangle(3, 7, 2) == False", "assert right_angle_triangle(1035, 552, 1173) == True", "assert right_angle_triangle(243, 324, 405) == True", "assert right_angle_triangle(581, 1992, 2075) == True", "assert right_angle_triangle(11, 5, 8) == False", "assert right_angle_triangle(820, 492, 656) == True", "assert right_angle_triangle(5, 4, 4) == False", "assert right_angle_triangle(4, 4, 4) == False", "assert right_angle_triangle(4, 5, 4) == False", "assert right_angle_triangle(12, 1, 2) == False", "assert right_angle_triangle(900, 480, 1020) == True", "assert right_angle_triangle(3, 3, 4) == False", "assert right_angle_triangle(360, 864, 936) == True", "assert right_angle_triangle(7, 1, 6) == False", "assert right_angle_triangle(5, 3, 2) == False", "assert right_angle_triangle(210, 112, 238) == True", "assert right_angle_triangle(1000, 600, 800) == True", "assert right_angle_triangle(285, 684, 741) == True", "assert right_angle_triangle(65, 156, 169) == True", "assert right_angle_triangle(960, 576, 768) == True", "assert right_angle_triangle(3792, 4345, 5767) == True", "assert right_angle_triangle(5, 5, 6) == False", "assert right_angle_triangle(3, 3, 3) == False", "assert right_angle_triangle(3, 2, 3) == False", "assert right_angle_triangle(1, 2, 1) == False", "assert right_angle_triangle(12, 4, 2) == False", "assert right_angle_triangle(6, 4, 1) == False", "assert right_angle_triangle(5, 12, 13) == True", "assert right_angle_triangle(2, 6, 9) == False", "assert right_angle_triangle(160, 384, 416) == True", "assert right_angle_triangle(3, 6, 3) == False", "assert right_angle_triangle(2, 4, 11) == False", "assert right_angle_triangle(2880, 3300, 4380) == True", "assert right_angle_triangle(10, 5, 7) == False", "assert right_angle_triangle(7, 24, 25) == True", "assert right_angle_triangle(15, 8, 17) == True", "assert right_angle_triangle(4752, 5445, 7227) == True", "assert right_angle_triangle(4656, 5335, 7081) == True", "assert right_angle_triangle(380, 912, 988) == True", "assert right_angle_triangle(350, 840, 910) == True", "assert right_angle_triangle(3, 4, 5) == True", "assert right_angle_triangle(2, 4, 8) == False", "assert right_angle_triangle(1, 4, 4) == False", "assert right_angle_triangle(70, 42, 56) == True", "assert right_angle_triangle(15, 9, 11) == False", "assert right_angle_triangle(201, 268, 335) == True", "assert right_angle_triangle(170, 408, 442) == True", "assert right_angle_triangle(12, 16, 20) == True", "assert right_angle_triangle(305, 732, 793) == True", "assert right_angle_triangle(2, 2, 10) == False", "assert right_angle_triangle(1, 3, 4) == False", "assert right_angle_triangle(230, 552, 598) == True", "assert right_angle_triangle(1, 1, 1) == False", "assert right_angle_triangle(3, 3, 9) == False", "assert right_angle_triangle(6, 5, 3) == False", "assert right_angle_triangle(235, 564, 611) == True", "assert right_angle_triangle(3, 1, 4) == False", "assert right_angle_triangle(81, 108, 135) == True", "assert right_angle_triangle(1, 2, 3) == False", "assert right_angle_triangle(5, 5, 4) == False", "assert right_angle_triangle(21, 28, 35) == True", "assert right_angle_triangle(234, 312, 390) == True", "assert right_angle_triangle(3, 1, 7) == False", "assert right_angle_triangle(230, 138, 184) == True", "assert right_angle_triangle(168, 576, 600) == True", "assert right_angle_triangle(1095, 584, 1241) == True", "assert right_angle_triangle(320, 192, 256) == True", "assert right_angle_triangle(8, 5, 6) == False", "assert right_angle_triangle(5, 2, 4) == False", "assert right_angle_triangle(6, 4, 4) == False", "assert right_angle_triangle(4, 1, 4) == False", "assert right_angle_triangle(528, 605, 803) == True", "assert right_angle_triangle(5, 4, 10) == False", "assert right_angle_triangle(15, 8, 3) == False", "assert right_angle_triangle(1455, 776, 1649) == True", "assert right_angle_triangle(21, 72, 75) == True", "assert right_angle_triangle(2544, 2915, 3869) == True", "assert right_angle_triangle(610, 366, 488) == True", "assert right_angle_triangle(8, 10, 10) == False", "assert right_angle_triangle(2, 4, 5) == False", "assert right_angle_triangle(2, 3, 1) == False", "assert right_angle_triangle(3, 3, 1) == False", "assert right_angle_triangle(219, 292, 365) == True", "assert right_angle_triangle(1, 5, 5) == False", "assert right_angle_triangle(192, 220, 292) == True"], "nl": "\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    ", "func": "def right_angle_triangle(a, b, c):", "examples": "Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    ", "completions": ["from typing import List\n## main.py\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is 90 degrees.\n    \n    Args:\n        a (int): Length of side a\n        b (int): Length of side b\n        c (int): Length of side c\n    \n    Returns:\n        bool: True if the triangle is a right-angled triangle, False otherwise\n    '''\n    \n    # Check if the sides form a right-angled triangle using Pythagorean theorem\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is 90 degrees.\n    \n    Args:\n        a (int): Length of side a\n        b (int): Length of side b\n        c (int): Length of side c\n    \n    Returns:\n        bool: True if the triangle is a right-angled triangle, False otherwise\n    '''\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    '''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is 90 degrees.'''\n    \n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    if a > b and a > c:\n        return a**2 == b**2 + c**2\n    elif b > a and b > c:\n        return b**2 == a**2 + c**2\n    else:\n        return c**2 == a**2 + b**2\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Determine if a triangle is a right angle triangle based on the Pythagorean theorem.\n\n    Args:\n        a: int, length of side a\n        b: int, length of side b\n        c: int, length of side c\n\n    Returns:\n        bool, True if the triangle is a right angle triangle, False otherwise\n    \"\"\"\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(side1: int, side2: int, side3: int) -> bool:\n    \"\"\"\n    Check if the given triangle is a right angle triangle.\n\n    Args:\n    side1: int, length of side 1\n    side2: int, length of side 2\n    side3: int, length of side 3\n\n    Returns:\n    bool, True if the triangle is a right angle triangle, False otherwise\n    \"\"\"\n\n    # Sort the sides in ascending order\n    sides = [side1, side2, side3]\n    sides.sort()\n\n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    if sides[2] ** 2 == sides[0] ** 2 + sides[1] ** 2:\n        return True\n    else:\n        return False\n", "from typing import List\ndef right_angle_triangle(side1: int, side2: int, side3: int) -> bool:\n    \"\"\"\n    Determine if a triangle is a right angle triangle.\n\n    Args:\n        side1: int, length of side 1\n        side2: int, length of side 2\n        side3: int, length of side 3\n\n    Returns:\n        bool, True if the triangle is a right angle triangle, False otherwise\n    \"\"\"\n    sides = [side1, side2, side3]\n    sides.sort()  # Sort the sides in ascending order\n\n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    if sides[2] ** 2 == sides[0] ** 2 + sides[1] ** 2:\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is 90 degrees.\n    \n    Args:\n        a (int): Length of side a\n        b (int): Length of side b\n        c (int): Length of side c\n    \n    Returns:\n        bool: True if the triangle is right-angled, False otherwise\n    '''\n    \n    sides = [a, b, c]\n    sides.sort()\n    \n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is 90 degrees.\n    \n    Args:\n        a (int): Length of side a\n        b (int): Length of side b\n        c (int): Length of side c\n    \n    Returns:\n        bool: True if the triangle is right-angled, False otherwise\n    '''\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Function to check if the triangle is right-angled\n\n    Parameters:\n    a (int): Length of side a\n    b (int): Length of side b\n    c (int): Length of side c\n\n    Returns:\n    bool: True if the triangle is right-angled, False otherwise\n    \"\"\"\n\n    sides = [a, b, c]\n    sides.sort()\n    \n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    '''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is 90 degrees.'''\n    \n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    if a > b and a > c:\n        return a**2 == b**2 + c**2\n    elif b > a and b > c:\n        return b**2 == a**2 + c**2\n    else:\n        return c**2 == a**2 + b**2\n"], "plans": ["requirement pool:\n- Implement efficient right-angle triangle detection\n- Ensure accurate angle calculations\n- Provide clear True/False output\nWe will use basic trigonometry principles to determine if the given sides form a right-angled triangle.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A triangle with one angle measuring 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will use basic trigonometry principles to determine if the given sides form a right-angled triangle.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) == True\n    Explanation: This is a Pythagorean triple (3, 4, 5) which forms a right-angled triangle.\n    right_angle_triangle(1, 2, 3) == False\n    Explanation: In this case, the sides (1, 2, 3) do not satisfy the Pythagorean theorem, so it does not form a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for a right-angled triangle can be implemented directly based on the Pythagorean theorem.\n", "requirement pool:\n- Ensure accurate identification of right-angled triangles\n- Optimize algorithm for fast triangle type determination\n- Implement clear and concise output messaging\nWe will design a simple static Python function using basic mathematical calculations to determine if the given triangle sides form a right-angled triangle.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A triangle with one angle measuring 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the square of the longest side is equal to the sum of the squares of the other two sides.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) == True\n    Explanation: This is a Pythagorean triple where 3^2 + 4^2 = 5^2, forming a right-angled triangle.\n    right_angle_triangle(1, 2, 3) == False\n    Explanation: In this case, 1^2 + 2^2 is not equal to 3^2, so it does not form a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic covers all scenarios.\n", "requirement pool:\n- Implement function to check right-angled triangles\n- Ensure correct angle calculations for triangles\n- Optimize output for clear True/False results\nWe will design a simple static Python function using basic mathematical principles to determine if a triangle is right-angled.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A right-angled triangle is a triangle in which one angle is 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is to design a simple static Python function using basic mathematical principles, the logic to implement the code would involve checking if the square of the longest side is equal to the sum of the squares of the other two sides.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: In this case, 3^2 + 4^2 = 5^2, which satisfies the Pythagorean theorem and forms a right-angled triangle.\n    right_angle_triangle(1, 2, 3) = False\n    Explanation: In this case, 1^2 + 2^2 is not equal to 3^2, so it does not form a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for a right-angled triangle covers all scenarios.\n", "requirement analysis:\nThe requirement is to determine if a triangle is a right angle triangle based on the lengths of its sides. The function should efficiently check all possible combinations of sides to identify right angle triangles.\nrequirement pool:\n- Implement a function that checks if a triangle is a right angle triangle\n- Handle edge cases like negative side lengths or non-triangular configurations\n- Optimize the function for performance to handle large input sizes efficiently\nWe will design a simple static Python function using basic arithmetic operations to efficiently determine if a triangle is a right angle triangle.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right angle triangle'\n    Explanation: The core concept is to determine if a triangle is a right angle triangle based on the Pythagorean theorem.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic is already provided in the plan. It checks if the triangle with sides a, b, and c is a right angle triangle by comparing the squares of the sides.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: This is a classic example of a right angle triangle with sides 3, 4, and 5 satisfying the Pythagorean theorem.\n    right_angle_triangle(5, 12, 13) = True\n    Explanation: Another example of a right angle triangle with sides 5, 12, and 13.\n    right_angle_triangle(1, 1, 1) = False\n    Explanation: In this case, the sides do not form a right angle triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios for determining a right angle triangle.\n", "requirement analysis:\nThe function should take three side lengths as input and determine if the triangle formed is a right angle triangle by checking if any angle is 90 degrees.\nrequirement pool:\n- Implement a function that checks for a right angle triangle based on side lengths\n- Ensure the function handles invalid inputs gracefully\n- Optimize the function for performance\nWe will use basic trigonometry principles to determine if the triangle is a right angle triangle.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right angle triangle'\n    Explanation: In this context, a right angle triangle is a triangle where one of the angles is 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using basic trigonometry principles, the code logic would involve checking if the square of the longest side is equal to the sum of the squares of the other two sides.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: This is a classic example of a right angle triangle known as a Pythagorean triple.\n    \n    right_angle_triangle(5, 12, 13) = True\n    Explanation: Another example of a right angle triangle based on the Pythagorean theorem.\n    \n    right_angle_triangle(1, 1, 1) = False\n    Explanation: In this case, all sides are equal, and it does not form a right angle triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for a right angle triangle covers all scenarios.\n", "requirement pool:\n- Implement function to calculate if a triangle has a right angle\n- Ensure correct identification of right angle triangles\n- Optimize algorithm for efficiency\nWe will design a simple static Python function using basic mathematical principles to determine if a triangle is a right angle triangle.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right angle triangle'\n    Explanation: In geometry, a right angle triangle is a triangle in which one of the angles is a right angle (90 degrees).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is to design a simple static Python function using basic mathematical principles, the logic to implement the code would involve checking if the square of the longest side is equal to the sum of the squares of the other two sides.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: This is a classic example of a right angle triangle known as a Pythagorean triple where 3^2 + 4^2 = 5^2.\n    right_angle_triangle(5, 12, 13) = True\n    Explanation: Another Pythagorean triple where 5^2 + 12^2 = 13^2.\n    right_angle_triangle(1, 1, 1) = False\n    Explanation: In this case, all sides are equal making it an equilateral triangle, which does not form a right angle triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for a right angle triangle covers all scenarios.\n", "requirement pool:\n- Implement function to check if triangle is right-angled\n- Ensure correct calculation of triangle angles\n- Optimize algorithm for efficient processing\nWe will design a simple static Python function using basic mathematical principles to determine if the given triangle sides form a right-angled triangle.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A triangle with one angle measuring 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the square of the longest side is equal to the sum of the squares of the other two sides.\n\n# [edge case] \n    right_angle_triangle(1, 1, 1) = False\n    Explanation: In an equilateral triangle, all sides are equal, but it does not form a right-angled triangle.\n    right_angle_triangle(3, 4, 5) = True\n    Explanation: This is a classic example of a right-angled triangle with sides 3, 4, and 5.\n    right_angle_triangle(5, 12, 13) = True\n    Explanation: Another example of a right-angled triangle known as a Pythagorean triple.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for a right-angled triangle covers all scenarios.\n", "requirement pool:\n- Implement accurate right angle detection logic\n- Handle edge cases like equal sides or negative lengths\n- Optimize the algorithm for quick calculations\nWe will design a static Python function using basic mathematical principles to determine if the given triangle sides form a right-angled triangle.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A triangle with one angle measuring 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the square of the longest side is equal to the sum of the squares of the other two sides.\n\n```python\ndef right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    \n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False\n```\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: This is a Pythagorean triple where 3^2 + 4^2 = 5^2, forming a right-angled triangle.\n    \n    right_angle_triangle(1, 2, 3) = False\n    Explanation: In this case, the triangle does not satisfy the Pythagorean theorem, so it is not a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic covers all scenarios.\n", "requirement pool:\n- Implement function to calculate right angles accurately\n- Optimize algorithm for efficient processing\n- Ensure robust testing for various triangle scenarios\nWe will design a simple static Python function using basic mathematical calculations to determine if the given triangle sides form a right-angled triangle.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A triangle with one angle measuring 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the square of the longest side is equal to the sum of the squares of the other two sides.\n\n```python\ndef right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    \n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False\n```\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: The sides 3, 4, and 5 form a right-angled triangle (3^2 + 4^2 = 5^2).\n    \n    right_angle_triangle(1, 2, 3) = False\n    Explanation: The sides 1, 2, and 3 do not form a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic covers all scenarios.\n", "requirement pool:\n- Efficiently determine if the triangle is right-angled\n- Handle various triangle configurations accurately\n- Ensure clear and concise output\nWe will design a simple static Python function using basic mathematical principles to determine if a triangle is right-angled.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A right-angled triangle is a triangle in which one angle is 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is to design a simple static Python function using basic mathematical principles, the logic to implement the code would involve checking if the square of the longest side is equal to the sum of the squares of the other two sides.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: In this case, 3^2 + 4^2 = 5^2, which satisfies the Pythagorean theorem for a right-angled triangle.\n    right_angle_triangle(1, 2, 3) = False\n    Explanation: In this case, 1^2 + 2^2 is not equal to 3^2, so it does not form a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for a right-angled triangle can be implemented directly based on the Pythagorean theorem.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [134, 134, 134, 134, 134, 134, 134, 134, 134, 134], "completion": "from typing import List\n## main.py\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    '''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is 90 degrees.'''\n    \n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    if a > b and a > c:\n        return a**2 == b**2 + c**2\n    elif b > a and b > c:\n        return b**2 == a**2 + c**2\n    else:\n        return c**2 == a**2 + b**2\n", "passed": true, "pass": true, "pass_num": 10, "round": 701, "repair_prompt": ["def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is 90 degrees.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "Given the lengths of the three sides of a triangle. If one angle is 90 degrees, return True, else return False.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False", "def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is 90 degrees.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''"], "mutate_method": "condense_two2one", "parent_index": 639}
