{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for the two lists. Make sure to extract only the elements that are present in both lists. After extraction, ensure each element appears only once before sorting them.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "entry_point": "common", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "test": ["def check(common):\n\tassert common([6, 5, 7, 10], [8, 4]) == []", "def check(common):\n\tassert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "def check(common):\n\tassert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "def check(common):\n\tassert common([8, 7, 6, 13], [7, 2]) == [7]", "def check(common):\n\tassert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "def check(common):\n\tassert common([7, 8, 6, 11], [4, 5, 9]) == []", "def check(common):\n\tassert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "def check(common):\n\tassert common([6, 6, 4, 12], [3, 1]) == []", "def check(common):\n\tassert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "def check(common):\n\tassert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "def check(common):\n\tassert common([4, 8, 2, 9], [3, 1]) == []", "def check(common):\n\tassert common([3, 5, 5, 8], [7, 6]) == []", "def check(common):\n\tassert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "def check(common):\n\tassert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "def check(common):\n\tassert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "def check(common):\n\tassert common([3, 7, 6, 3], [2, 4, 5]) == []", "def check(common):\n\tassert common([7, 4, 3, 10], [3, 1]) == [3]", "def check(common):\n\tassert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "def check(common):\n\tassert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "def check(common):\n\tassert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "def check(common):\n\tassert common([3, 1, 6, 11], [6, 6]) == [6]", "def check(common):\n\tassert common([7, 4, 7, 13], [8, 4]) == [4]", "def check(common):\n\tassert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "def check(common):\n\tassert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "def check(common):\n\tassert common([5, 8, 7, 3], [6, 4]) == []", "def check(common):\n\tassert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "def check(common):\n\tassert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "def check(common):\n\tassert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "def check(common):\n\tassert common([6, 6, 4, 5], [3, 3, 8]) == []", "def check(common):\n\tassert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "def check(common):\n\tassert common([2, 1, 7, 9], [6, 3]) == []", "def check(common):\n\tassert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "def check(common):\n\tassert common([7, 6, 3, 9], [6, 5]) == [6]", "def check(common):\n\tassert common([2, 3, 3, 9], [5, 2]) == [2]", "def check(common):\n\tassert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "def check(common):\n\tassert common([8, 3, 4, 10], [8, 7]) == [8]", "def check(common):\n\tassert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "def check(common):\n\tassert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "def check(common):\n\tassert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "def check(common):\n\tassert common([4, 5, 7, 12], [7, 1]) == [7]", "def check(common):\n\tassert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "def check(common):\n\tassert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "def check(common):\n\tassert common([2, 6, 2, 8], [5, 2]) == [2]", "def check(common):\n\tassert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "def check(common):\n\tassert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "def check(common):\n\tassert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "def check(common):\n\tassert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "def check(common):\n\tassert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "def check(common):\n\tassert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "def check(common):\n\tassert common([5, 5, 7, 7], [5, 2]) == [5]", "def check(common):\n\tassert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "def check(common):\n\tassert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "def check(common):\n\tassert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([5, 2, 1, 3], [8, 3]) == [3]", "def check(common):\n\tassert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "def check(common):\n\tassert common([5, 6, 4, 8], [3, 7, 2]) == []", "def check(common):\n\tassert common([7, 7, 5, 11], [3, 4]) == []", "def check(common):\n\tassert common([4, 3, 2, 8], []) == []", "def check(common):\n\tassert common([7, 7, 7, 3], [2, 4]) == []", "def check(common):\n\tassert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "def check(common):\n\tassert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "def check(common):\n\tassert common([1, 8, 7, 3], [2, 6]) == []", "def check(common):\n\tassert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "def check(common):\n\tassert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "def check(common):\n\tassert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "def check(common):\n\tassert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "def check(common):\n\tassert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "def check(common):\n\tassert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "def check(common):\n\tassert common([8, 4, 1, 9], [6, 3]) == []", "def check(common):\n\tassert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "def check(common):\n\tassert common([9, 7, 7, 7], [5, 2]) == []", "def check(common):\n\tassert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "def check(common):\n\tassert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "def check(common):\n\tassert common([8, 4, 6, 5], [1, 1]) == []", "def check(common):\n\tassert common([4, 5, 3, 10], [7, 5]) == [5]", "def check(common):\n\tassert common([7, 1, 7, 13], [3, 1]) == [1]", "def check(common):\n\tassert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "def check(common):\n\tassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "def check(common):\n\tassert common([7, 7, 1, 4], [5, 6]) == []", "def check(common):\n\tassert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "def check(common):\n\tassert common([8, 1, 1, 3], [5, 6]) == []", "def check(common):\n\tassert common([6, 3, 6, 3], [8, 5, 8]) == []", "def check(common):\n\tassert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "def check(common):\n\tassert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "def check(common):\n\tassert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "def check(common):\n\tassert common([1, 3, 4, 9], [7, 3]) == [3]", "def check(common):\n\tassert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "def check(common):\n\tassert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "def check(common):\n\tassert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "def check(common):\n\tassert common([8, 1, 4, 10], [4, 2]) == [4]", "def check(common):\n\tassert common([2, 8, 5, 10], [8, 4]) == [8]", "def check(common):\n\tassert common([8, 4, 4, 6], [3, 6]) == [6]", "def check(common):\n\tassert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "def check(common):\n\tassert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "def check(common):\n\tassert common([3, 1, 4, 5], [1, 1]) == [1]", "def check(common):\n\tassert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "test_case_list": ["assert common([6, 5, 7, 10], [8, 4]) == []", "assert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "assert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "assert common([8, 7, 6, 13], [7, 2]) == [7]", "assert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "assert common([7, 8, 6, 11], [4, 5, 9]) == []", "assert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "assert common([6, 6, 4, 12], [3, 1]) == []", "assert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "assert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "assert common([4, 8, 2, 9], [3, 1]) == []", "assert common([3, 5, 5, 8], [7, 6]) == []", "assert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "assert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "assert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "assert common([3, 7, 6, 3], [2, 4, 5]) == []", "assert common([7, 4, 3, 10], [3, 1]) == [3]", "assert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "assert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "assert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "assert common([3, 1, 6, 11], [6, 6]) == [6]", "assert common([7, 4, 7, 13], [8, 4]) == [4]", "assert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "assert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "assert common([5, 8, 7, 3], [6, 4]) == []", "assert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "assert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "assert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "assert common([6, 6, 4, 5], [3, 3, 8]) == []", "assert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "assert common([2, 1, 7, 9], [6, 3]) == []", "assert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "assert common([7, 6, 3, 9], [6, 5]) == [6]", "assert common([2, 3, 3, 9], [5, 2]) == [2]", "assert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "assert common([8, 3, 4, 10], [8, 7]) == [8]", "assert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "assert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "assert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "assert common([4, 5, 7, 12], [7, 1]) == [7]", "assert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "assert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "assert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "assert common([2, 6, 2, 8], [5, 2]) == [2]", "assert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "assert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "assert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "assert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "assert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "assert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "assert common([5, 5, 7, 7], [5, 2]) == [5]", "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "assert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "assert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "assert common([5, 2, 1, 3], [8, 3]) == [3]", "assert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "assert common([5, 6, 4, 8], [3, 7, 2]) == []", "assert common([7, 7, 5, 11], [3, 4]) == []", "assert common([4, 3, 2, 8], []) == []", "assert common([7, 7, 7, 3], [2, 4]) == []", "assert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "assert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "assert common([1, 8, 7, 3], [2, 6]) == []", "assert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "assert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "assert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "assert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "assert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "assert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "assert common([8, 4, 1, 9], [6, 3]) == []", "assert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "assert common([9, 7, 7, 7], [5, 2]) == []", "assert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "assert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "assert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "assert common([8, 4, 6, 5], [1, 1]) == []", "assert common([4, 5, 3, 10], [7, 5]) == [5]", "assert common([7, 1, 7, 13], [3, 1]) == [1]", "assert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "assert common([7, 7, 1, 4], [5, 6]) == []", "assert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "assert common([8, 1, 1, 3], [5, 6]) == []", "assert common([6, 3, 6, 3], [8, 5, 8]) == []", "assert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "assert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "assert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "assert common([1, 3, 4, 9], [7, 3]) == [3]", "assert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "assert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "assert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "assert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "assert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "assert common([8, 1, 4, 10], [4, 2]) == [4]", "assert common([2, 8, 5, 10], [8, 4]) == [8]", "assert common([8, 4, 4, 6], [3, 6]) == [6]", "assert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "assert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "assert common([3, 1, 4, 5], [1, 1]) == [1]", "assert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "nl": "Return sorted unique common elements for two lists.\n    ", "func": "def common(l1: list, l2: list):", "examples": ">>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    ", "completions": ["from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for the two lists. Make sure to extract only the elements that are present in both lists. After extraction, ensure each element appears only once before sorting them.\n    \n    :param l1: First list\n    :param l2: Second list\n    :return: List of sorted unique common elements\n    '''\n    \n    common_elements = list(set(l1) & set(l2))  # Extract common elements\n    common_elements.sort()  # Sort the common elements\n    \n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for the two lists. Make sure to extract only the elements that are present in both lists. After extraction, ensure each element appears only once before sorting them.\n    :param l1: First list\n    :param l2: Second list\n    :return: List of sorted unique common elements\n    '''\n    common_elements = list(set(l1) & set(l2))\n    return sorted(common_elements)\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for the two lists. Make sure to extract only the elements that are present in both lists. After extraction, ensure each element appears only once before sorting them.'''\n    \n    common_elements = list(set(l1) & set(l2))  # Find common elements\n    return sorted(list(set(common_elements))  # Sort unique common elements\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_sorted_unique_common_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Find the sorted unique common elements between two lists.\n\n    Args:\n        list1: A list of integers.\n        list2: A list of integers.\n\n    Returns:\n        A list of sorted unique common elements between list1 and list2.\n    \"\"\"\n    common_elements = list(set(list1) & set(list2))\n    return sorted(common_elements)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_sorted_unique_common_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Find sorted unique common elements in two lists.\n\n    Args:\n        list1: A list of integers.\n        list2: A list of integers.\n\n    Returns:\n        A list of sorted unique common elements present in both input lists.\n    \"\"\"\n    common_elements = list(set(list1) & set(list2))\n    return sorted(common_elements)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sorted_unique_common_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Find the sorted unique common elements between two lists.\n\n    Args:\n        list1 (List[int]): The first list of integers.\n        list2 (List[int]): The second list of integers.\n\n    Returns:\n        List[int]: A list of sorted unique common elements between list1 and list2.\n    \"\"\"\n    return sorted(list(set(list1) & set(list2)))\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for the two lists, only extracting elements that are present in both lists, ensuring each element appears once before sorting them.\n    :param l1: First list\n    :param l2: Second list\n    :return: List of sorted unique common elements\n    '''\n    \n    common_elements = list(set(l1).intersection(l2))  # Find common elements using set intersection\n    sorted_common_elements = sorted(common_elements)  # Sort the common elements\n    \n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for the two lists, only extracting elements that are present in both lists, ensuring each element appears once before sorting them.\n    \n    Args:\n        l1 (list): The first input list\n        l2 (list): The second input list\n    \n    Returns:\n        list: A list containing sorted unique common elements\n    '''\n    common_elements = list(set(l1) & set(l2))  # Extract common elements\n    common_elements.sort()  # Sort the common elements\n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for the two lists, only extracting elements that are present in both lists, ensuring each element appears once before sorting them.\n    '''\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    common_elements = list(set1.intersection(set2))\n    common_elements.sort()\n    \n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for the two lists. Make sure to extract only the elements that are present in both lists. After extraction, ensure each element appears only once before sorting them.\n    \n    :param l1: First list\n    :param l2: Second list\n    :return: List of sorted unique common elements\n    '''\n    \n    common_elements = list(set(l1) & set(l2))  # Extract common elements\n    common_elements.sort()  # Sort the common elements\n    \n    return common_elements\n"], "plans": ["requirement pool:\n- Efficiently extract common elements from two lists\n- Ensure uniqueness and proper sorting of extracted elements\n- Optimize performance for large input lists\nWe will design a static Python function using basic list operations to efficiently extract and sort common elements from two lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that are present in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) = [1, 5, 653]\n    Explanation: The common elements between the two lists are 1, 5, and 653. After extracting and sorting them, the output is [1, 5, 653].\n    \n    common([5, 3, 2, 8], [3, 2]) = [2, 3]\n    Explanation: The common elements between the two lists are 2 and 3. After extracting and sorting them, the output is [2, 3].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic of extracting and sorting common elements from two lists covers all scenarios.\n", "requirement pool:\n- Extract common elements from two lists\n- Ensure uniqueness and proper sorting\n- Optimize performance for large input lists\nWe will use the built-in functions in Python to efficiently extract and sort common elements from two lists. We will ensure uniqueness by converting the lists to sets and then finding the intersection. Finally, we will sort the unique common elements before returning the result.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that are present in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already provides a clear approach using built-in functions in Python, we can directly implement the code based on the plan.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists.\n    common([1, 1, 2, 2, 3], [3, 3, 2, 2, 1]) = [1, 2, 3]\n    Explanation: All elements are common between the two lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The plan covers the logic to handle common elements efficiently.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in functions in Python to achieve the required functionality without defining any class.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that are present in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using built-in functions in Python, the logic can be implemented as follows:\n```python\ndef common(l1: list, l2: list):\n    common_elements = list(set(l1) & set(l2))  # Find common elements\n    return sorted(list(set(common_elements)))  # Sort unique common elements\n```\n\n# [edge case] \n    common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) = [1, 5, 653]\n    Explanation: The common elements between the two lists are 1, 5, and 653.\n    common([5, 3, 2, 8], [3, 2]) = [2, 3]\n    Explanation: The common elements between the two lists are 2 and 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the edge cases as well.\n", "requirement pool:\n- Return sorted unique common elements for the two lists\n- Ensure each element appears only once before sorting\nWe will use Python and the built-in functions to efficiently find the common elements, remove duplicates, and sort them.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted unique common elements'\n    Explanation: The core concept is to find elements that are common in two lists, remove duplicates, and sort them in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using Python built-in functions, we can implement the logic as follows:\n    1. Find the common elements between the two lists using set intersection.\n    2. Convert the result to a list to remove duplicates.\n    3. Sort the list in ascending order.\n\n# [edge case] \n    Edge Case 1: Return sorted unique common elements for two empty lists.\n    Expected Output: []\n    Explanation: When both lists are empty, there are no common elements to return.\n\n    Edge Case 2: Return sorted unique common elements for two lists with no common elements.\n    Expected Output: []\n    Explanation: When there are no common elements between the two lists, the result should be an empty list.\n\n    Edge Case 3: Return sorted unique common elements for two lists with duplicate common elements.\n    Expected Output: [2, 3, 4]\n    Explanation: If both lists contain duplicate common elements, they should be removed and the unique common elements should be returned in sorted order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where the lists are empty, have no common elements, or have duplicate common elements.\n", "requirement pool:\n- Return sorted unique common elements for the two lists\n- Ensure each element appears only once before sorting\nWe will use Python and the built-in functions to efficiently find the common elements, remove duplicates, and sort them.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted unique common elements'\n    Explanation: The core concept is to find elements that are common in two lists, remove duplicates, and sort them in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    No specific edge cases mentioned in the requirement.\n\n# [extra code for edge case]\n    No extra code needed for handling edge cases.\n", "requirement analysis:\nThe requirement is to efficiently find common elements between two lists while ensuring uniqueness and sorting. The solution should be optimized for performance to handle large datasets effectively.\nrequirement pool:\n- Implement a function to find common elements between two lists\n- Ensure the output is sorted and contains unique elements\n- Optimize the algorithm for performance on large datasets\nWe will use the provided Python function definition and leverage the built-in set operations for efficient common elements finding. We will ensure uniqueness and sorting by utilizing set and sorted functions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that are present in both input lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic is already provided in the plan. It uses set operations to find common elements, then sorts and returns them.\n\n# [edge case] \n    sorted_unique_common_elements([], [1, 2, 3]) = []\n    Explanation: When one list is empty, there are no common elements, so the expected output is an empty list.\n    sorted_unique_common_elements([1, 2, 3], [4, 5, 6]) = []\n    Explanation: When both lists have different elements, there are no common elements, so the expected output is an empty list.\n    sorted_unique_common_elements([1, 2, 3], [3, 4, 5]) = [3]\n    Explanation: The only common element between the two lists is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic covers scenarios where there are no common elements or one list is empty.\n", "requirement pool:\n- Extract common elements from two lists\n- Ensure uniqueness of common elements\n- Sort the common elements in ascending order\nWe will use the built-in functions in Python to efficiently extract, ensure uniqueness, and sort common elements from two lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that are present in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in functions in Python, the logic can be implemented as follows:\n    1. Use set intersection to find common elements between the two lists.\n    2. Convert the result to a list and sort it.\n    3. Return the sorted list of common elements.\n\n# [edge case] \n    common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) = [1, 5, 653]\n    Explanation: The common elements between the two lists are 1, 5, and 653.\n    \n    common([5, 3, 2, 8], [3, 2]) = [2, 3]\n    Explanation: The common elements between the two lists are 2 and 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The plan already suggests using built-in functions that efficiently handle common elements between lists.\n", "requirement analysis:\nThe function 'common' needs to efficiently extract common elements from two lists, ensuring uniqueness and proper sorting. Performance optimization is crucial for handling large input lists.\nrequirement pool:\n- Implement efficient common elements extraction and sorting\n- Ensure uniqueness of elements in the final list\n- Optimize performance for large input lists\nWe will utilize the built-in functions in Python to efficiently extract common elements from two lists, ensuring uniqueness and proper sorting.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that are present in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in functions in Python, we can implement the logic as follows:\n```python\ndef common(l1: list, l2: list):\n    common_elements = list(set(l1) & set(l2))  # Extract common elements\n    common_elements.sort()  # Sort the common elements\n    return common_elements\n```\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists.\n    common([1, 1, 2, 3], [3, 2, 2]) = [2, 3]\n    Explanation: Both lists have duplicate elements, but only unique common elements are extracted and sorted.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where there are no common elements or duplicate elements in the lists.\n", "requirement pool:\n- Efficiently extract common elements from two lists\n- Ensure uniqueness and proper sorting of common elements\n- Optimize performance for large input lists\nWe will use the built-in functions in Python to efficiently extract and sort common elements from two lists. We will ensure uniqueness by converting the lists to sets and then finding the intersection. Finally, we will sort the unique common elements before returning the result.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that are present in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already provides a clear approach using built-in functions in Python, no additional logic explanation is needed.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists.\n    common([1, 1, 2, 2, 3], [2, 2, 3, 3, 4]) = [2, 3]\n    Explanation: The common elements are 2 and 3, and they appear once before sorting.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The plan already covers the necessary steps to handle common elements efficiently.\n", "requirement pool:\n- Implement efficient extraction and sorting algorithm\n- Ensure uniqueness of elements in the final output\n- Optimize performance for large input lists\nWe will use Python and the built-in functions to efficiently extract and sort common elements from two lists while ensuring uniqueness and proper sorting.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that are present in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) = [1, 5, 653]\n    Explanation: The common elements between the two lists are 1, 5, and 653. After extracting and sorting them, the result is [1, 5, 653].\n    \n    common([5, 3, 2, 8], [3, 2]) = [2, 3]\n    Explanation: The common elements between the two lists are 2 and 3. After extracting and sorting them, the result is [2, 3].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should handle the extraction and sorting of common elements effectively.\n"], "scores": [1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, false, false, false, false, true, true, true, true], "pass_test_cases_num": [100, 100, 0, 0, 0, 0, 100, 100, 100, 100], "completion": "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for the two lists. Make sure to extract only the elements that are present in both lists. After extraction, ensure each element appears only once before sorting them.\n    \n    :param l1: First list\n    :param l2: Second list\n    :return: List of sorted unique common elements\n    '''\n    \n    common_elements = list(set(l1) & set(l2))  # Extract common elements\n    common_elements.sort()  # Sort the common elements\n    \n    return common_elements\n", "passed": true, "pass": true, "pass_num": 6, "round": 136, "repair_prompt": ["def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for the two lists. Make sure to extract only the elements that are present in both lists. After extraction, ensure each element appears only once before sorting them.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "Return sorted unique common elements for the two lists. Ensure each element appears only once before sorting them.", "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for the two lists, only extracting elements that are present in both lists, ensuring each element appears once before sorting them.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''"], "mutate_method": "expand_one2two", "parent_index": 163}
