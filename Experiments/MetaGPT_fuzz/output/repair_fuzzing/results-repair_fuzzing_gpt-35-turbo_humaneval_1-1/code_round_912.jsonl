{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists. You need to identify the elements that are present in both lists. These elements should then be sorted and stored in a unique manner.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "entry_point": "common", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "test": ["def check(common):\n\tassert common([6, 5, 7, 10], [8, 4]) == []", "def check(common):\n\tassert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "def check(common):\n\tassert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "def check(common):\n\tassert common([8, 7, 6, 13], [7, 2]) == [7]", "def check(common):\n\tassert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "def check(common):\n\tassert common([7, 8, 6, 11], [4, 5, 9]) == []", "def check(common):\n\tassert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "def check(common):\n\tassert common([6, 6, 4, 12], [3, 1]) == []", "def check(common):\n\tassert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "def check(common):\n\tassert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "def check(common):\n\tassert common([4, 8, 2, 9], [3, 1]) == []", "def check(common):\n\tassert common([3, 5, 5, 8], [7, 6]) == []", "def check(common):\n\tassert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "def check(common):\n\tassert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "def check(common):\n\tassert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "def check(common):\n\tassert common([3, 7, 6, 3], [2, 4, 5]) == []", "def check(common):\n\tassert common([7, 4, 3, 10], [3, 1]) == [3]", "def check(common):\n\tassert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "def check(common):\n\tassert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "def check(common):\n\tassert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "def check(common):\n\tassert common([3, 1, 6, 11], [6, 6]) == [6]", "def check(common):\n\tassert common([7, 4, 7, 13], [8, 4]) == [4]", "def check(common):\n\tassert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "def check(common):\n\tassert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "def check(common):\n\tassert common([5, 8, 7, 3], [6, 4]) == []", "def check(common):\n\tassert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "def check(common):\n\tassert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "def check(common):\n\tassert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "def check(common):\n\tassert common([6, 6, 4, 5], [3, 3, 8]) == []", "def check(common):\n\tassert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "def check(common):\n\tassert common([2, 1, 7, 9], [6, 3]) == []", "def check(common):\n\tassert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "def check(common):\n\tassert common([7, 6, 3, 9], [6, 5]) == [6]", "def check(common):\n\tassert common([2, 3, 3, 9], [5, 2]) == [2]", "def check(common):\n\tassert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "def check(common):\n\tassert common([8, 3, 4, 10], [8, 7]) == [8]", "def check(common):\n\tassert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "def check(common):\n\tassert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "def check(common):\n\tassert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "def check(common):\n\tassert common([4, 5, 7, 12], [7, 1]) == [7]", "def check(common):\n\tassert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "def check(common):\n\tassert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "def check(common):\n\tassert common([2, 6, 2, 8], [5, 2]) == [2]", "def check(common):\n\tassert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "def check(common):\n\tassert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "def check(common):\n\tassert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "def check(common):\n\tassert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "def check(common):\n\tassert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "def check(common):\n\tassert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "def check(common):\n\tassert common([5, 5, 7, 7], [5, 2]) == [5]", "def check(common):\n\tassert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "def check(common):\n\tassert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "def check(common):\n\tassert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([5, 2, 1, 3], [8, 3]) == [3]", "def check(common):\n\tassert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "def check(common):\n\tassert common([5, 6, 4, 8], [3, 7, 2]) == []", "def check(common):\n\tassert common([7, 7, 5, 11], [3, 4]) == []", "def check(common):\n\tassert common([4, 3, 2, 8], []) == []", "def check(common):\n\tassert common([7, 7, 7, 3], [2, 4]) == []", "def check(common):\n\tassert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "def check(common):\n\tassert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "def check(common):\n\tassert common([1, 8, 7, 3], [2, 6]) == []", "def check(common):\n\tassert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "def check(common):\n\tassert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "def check(common):\n\tassert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "def check(common):\n\tassert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "def check(common):\n\tassert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "def check(common):\n\tassert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "def check(common):\n\tassert common([8, 4, 1, 9], [6, 3]) == []", "def check(common):\n\tassert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "def check(common):\n\tassert common([9, 7, 7, 7], [5, 2]) == []", "def check(common):\n\tassert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "def check(common):\n\tassert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "def check(common):\n\tassert common([8, 4, 6, 5], [1, 1]) == []", "def check(common):\n\tassert common([4, 5, 3, 10], [7, 5]) == [5]", "def check(common):\n\tassert common([7, 1, 7, 13], [3, 1]) == [1]", "def check(common):\n\tassert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "def check(common):\n\tassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "def check(common):\n\tassert common([7, 7, 1, 4], [5, 6]) == []", "def check(common):\n\tassert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "def check(common):\n\tassert common([8, 1, 1, 3], [5, 6]) == []", "def check(common):\n\tassert common([6, 3, 6, 3], [8, 5, 8]) == []", "def check(common):\n\tassert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "def check(common):\n\tassert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "def check(common):\n\tassert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "def check(common):\n\tassert common([1, 3, 4, 9], [7, 3]) == [3]", "def check(common):\n\tassert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "def check(common):\n\tassert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "def check(common):\n\tassert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "def check(common):\n\tassert common([8, 1, 4, 10], [4, 2]) == [4]", "def check(common):\n\tassert common([2, 8, 5, 10], [8, 4]) == [8]", "def check(common):\n\tassert common([8, 4, 4, 6], [3, 6]) == [6]", "def check(common):\n\tassert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "def check(common):\n\tassert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "def check(common):\n\tassert common([3, 1, 4, 5], [1, 1]) == [1]", "def check(common):\n\tassert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "test_case_list": ["assert common([6, 5, 7, 10], [8, 4]) == []", "assert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "assert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "assert common([8, 7, 6, 13], [7, 2]) == [7]", "assert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "assert common([7, 8, 6, 11], [4, 5, 9]) == []", "assert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "assert common([6, 6, 4, 12], [3, 1]) == []", "assert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "assert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "assert common([4, 8, 2, 9], [3, 1]) == []", "assert common([3, 5, 5, 8], [7, 6]) == []", "assert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "assert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "assert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "assert common([3, 7, 6, 3], [2, 4, 5]) == []", "assert common([7, 4, 3, 10], [3, 1]) == [3]", "assert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "assert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "assert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "assert common([3, 1, 6, 11], [6, 6]) == [6]", "assert common([7, 4, 7, 13], [8, 4]) == [4]", "assert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "assert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "assert common([5, 8, 7, 3], [6, 4]) == []", "assert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "assert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "assert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "assert common([6, 6, 4, 5], [3, 3, 8]) == []", "assert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "assert common([2, 1, 7, 9], [6, 3]) == []", "assert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "assert common([7, 6, 3, 9], [6, 5]) == [6]", "assert common([2, 3, 3, 9], [5, 2]) == [2]", "assert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "assert common([8, 3, 4, 10], [8, 7]) == [8]", "assert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "assert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "assert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "assert common([4, 5, 7, 12], [7, 1]) == [7]", "assert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "assert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "assert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "assert common([2, 6, 2, 8], [5, 2]) == [2]", "assert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "assert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "assert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "assert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "assert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "assert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "assert common([5, 5, 7, 7], [5, 2]) == [5]", "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "assert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "assert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "assert common([5, 2, 1, 3], [8, 3]) == [3]", "assert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "assert common([5, 6, 4, 8], [3, 7, 2]) == []", "assert common([7, 7, 5, 11], [3, 4]) == []", "assert common([4, 3, 2, 8], []) == []", "assert common([7, 7, 7, 3], [2, 4]) == []", "assert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "assert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "assert common([1, 8, 7, 3], [2, 6]) == []", "assert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "assert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "assert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "assert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "assert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "assert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "assert common([8, 4, 1, 9], [6, 3]) == []", "assert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "assert common([9, 7, 7, 7], [5, 2]) == []", "assert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "assert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "assert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "assert common([8, 4, 6, 5], [1, 1]) == []", "assert common([4, 5, 3, 10], [7, 5]) == [5]", "assert common([7, 1, 7, 13], [3, 1]) == [1]", "assert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "assert common([7, 7, 1, 4], [5, 6]) == []", "assert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "assert common([8, 1, 1, 3], [5, 6]) == []", "assert common([6, 3, 6, 3], [8, 5, 8]) == []", "assert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "assert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "assert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "assert common([1, 3, 4, 9], [7, 3]) == [3]", "assert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "assert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "assert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "assert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "assert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "assert common([8, 1, 4, 10], [4, 2]) == [4]", "assert common([2, 8, 5, 10], [8, 4]) == [8]", "assert common([8, 4, 4, 6], [3, 6]) == [6]", "assert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "assert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "assert common([3, 1, 4, 5], [1, 1]) == [1]", "assert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "nl": "Return sorted unique common elements for two lists.\n    ", "func": "def common(l1: list, l2: list):", "examples": ">>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    ", "completions": ["from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists.    \n    \n    Args:    \n        l1 (list): The first input list.    \n        l2 (list): The second input list.    \n    \n    Returns:    \n        list: A list containing sorted unique common elements.    \n    \n    Examples:    \n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])    \n        [1, 5, 653]    \n        >>> common([5, 3, 2, 8], [3, 2])    \n        [2, 3]    \n    \n    '''\n    \n    common_elements = list(set(l1) & set(l2))  # Find common elements using set intersection\n    return sorted(common_elements)  # Sort the common elements and return\n\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists.    \n    \n    Args:    \n        l1 (list): The first list.    \n        l2 (list): The second list.    \n    \n    Returns:    \n        list: A sorted list of unique common elements.    \n    \n    Examples:    \n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])    \n        [1, 5, 653]    \n        >>> common([5, 3, 2, 8], [3, 2])    \n        [2, 3]    \n    \n    '''\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    common_elements = list(set1.intersection(set2))\n    \n    return sorted(common_elements)\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists.    \n    \n    Args:    \n        l1 (list): The first list.    \n        l2 (list): The second list.    \n    \n    Returns:    \n        list: A sorted list containing unique common elements from l1 and l2.    \n    \n    Examples:    \n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])    \n        [1, 5, 653]    \n        >>> common([5, 3, 2, 8], [3, 2])    \n        [2, 3]    \n    \n    '''\n    common_elements = list(set(l1) & set(l2))  # Find common elements\n    common_elements.sort()  # Sort the common elements\n    return common_elements\n", "from typing import List\n## main.py\n\ndef find_common_elements(list1: list, list2: list) -> list:\n    \"\"\"\n    Function to find sorted unique common elements in two lists\n\n    Args:\n    list1: First input list\n    list2: Second input list\n\n    Returns:\n    List containing sorted unique common elements\n    \"\"\"\n    common_elements = list(set(list1) & set(list2))\n    return sorted(common_elements)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sorted_unique_common_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Function to find sorted unique common elements in two lists\n    \n    Args:\n    list1: List[int] - The first list of integers\n    list2: List[int] - The second list of integers\n    \n    Returns:\n    List[int] - A sorted list of unique common elements between list1 and list2\n    \"\"\"\n    common_elements = sorted(list(set(list1) & set(list2)))\n    return common_elements\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_common_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Find and return a sorted list of common elements between two input lists.\n\n    Args:\n        list1: A list of integers.\n        list2: A list of integers.\n\n    Returns:\n        A sorted list of common elements between list1 and list2.\n    \"\"\"\n    common = list(set(list1) & set(list2))\n    return sorted(common)\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists.    \n    \n    Args:    \n        l1 (list): The first input list.    \n        l2 (list): The second input list.    \n    \n    Returns:    \n        list: A sorted list containing unique common elements from l1 and l2.    \n    \n    Examples:    \n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])    \n        [1, 5, 653]    \n        >>> common([5, 3, 2, 8], [3, 2])    \n        [2, 3]    \n    '''\n    common_elements = sorted(list(set(l1) & set(l2)))\n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists.    \n    \n    Args:    \n        l1 (list): The first input list.    \n        l2 (list): The second input list.    \n    \n    Returns:    \n        list: A sorted list containing unique common elements.    \n    \n    Examples:    \n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])    \n        [1, 5, 653]    \n        >>> common([5, 3, 2, 8], [3, 2])    \n        [2, 3]    \n    '''\n    \n    common_elements = sorted(list(set(l1) & set(l2)))\n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists.    \n    \n    Args:    \n        l1 (list): First input list    \n        l2 (list): Second input list    \n    \n    Returns:    \n        list: Sorted unique common elements    \n    \n    Examples:    \n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])    \n        [1, 5, 653]    \n        >>> common([5, 3, 2, 8], [3, 2])    \n        [2, 3]    \n    '''\n    \n    set1 = set(l1)\n    set2 = set(l2)\n    \n    common_elements = list(set1.intersection(set2))\n    \n    return sorted(common_elements)\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists. You need to identify the elements that are present in both lists. These elements should then be sorted and stored in a unique manner.\n    :param l1: First list\n    :param l2: Second list\n    :return: List of sorted unique common elements\n    '''\n    \n    set1 = set(l1)\n    set2 = set(l2)\n    \n    common_elements = list(set1.intersection(set2))\n    common_elements.sort()\n    \n    return common_elements\n"], "plans": ["requirement pool:\n- Identify common elements in two lists\n- Sort common elements\n- Ensure uniqueness of common elements\nWe will use Python and the built-in functions to efficiently identify and sort common elements in two lists. We will leverage the set data structure to ensure uniqueness of common elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: The core concept is to identify and return elements that are present in both input lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) = [1, 5, 653]\n    Explanation: The common elements between the two lists are 1, 5, and 653. They are sorted and stored in a unique manner.\n    \n    common([5, 3, 2, 8], [3, 2]) = [2, 3]\n    Explanation: The common elements between the two lists are 2 and 3. They are sorted and stored in a unique manner.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should handle the edge cases effectively.\n", "requirement pool:\n- Efficiently identify common elements in two lists\n- Sort the common elements in ascending order\n- Ensure uniqueness of the sorted common elements\nWe will use Python and the built-in functions to efficiently identify and sort common elements in two lists while ensuring uniqueness.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that are present in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic to implement the code involves:\n    1. Convert the lists to sets for efficient comparison.\n    2. Find the intersection of the two sets to get common elements.\n    3. Convert the result back to a sorted list for output.\n\n# [edge case] \n    common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) = [1, 5, 653]\n    Explanation: The common elements between the two lists are 1, 5, and 653.\n    \n    common([5, 3, 2, 8], [3, 2]) = [2, 3]\n    Explanation: The common elements between the two lists are 2 and 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided efficiently handles finding common elements in two lists.\n", "requirement pool:\n- Identify common elements in two lists efficiently\n- Sort the common elements and remove duplicates\n- Ensure the solution is scalable for large lists\nWe will use Python and the built-in functions to efficiently identify and sort common elements in two lists while ensuring uniqueness.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that are present in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using Python and built-in functions, we can implement the code as follows:\n```python\ndef common(l1: list, l2: list):\n    common_elements = list(set(l1) & set(l2))  # Find common elements\n    common_elements.sort()  # Sort the common elements\n    return common_elements\n```\n\n# [edge case] \n    common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) = [1, 5, 653]\n    Explanation: The common elements between the two lists are 1, 5, and 653.\n    common([5, 3, 2, 8], [3, 2]) = [2, 3]\n    Explanation: The common elements between the two lists are 2 and 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers sorting and uniqueness of common elements.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python's built-in functions to achieve the required functionality without the need for defining any class.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: The core concept is to identify and store elements that are present in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using Python's built-in functions, we can implement the logic using set intersection to find common elements and then convert it back to a sorted list for unique storage.\n\n    ```python\n    def sorted_unique_common_elements(list1, list2):\n        common_elements = sorted(list(set(list1) & set(list2)))\n        return common_elements\n    ```\n\n# [edge case] \n    sorted_unique_common_elements([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists.\n    sorted_unique_common_elements([1, 2, 3, 3], [3, 4, 5]) = [3]\n    Explanation: The common element '3' is stored in a unique manner in the sorted list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where there are no common elements or when there are duplicate elements.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python's built-in functions to achieve the required functionality without the need for defining a class.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: The core concept is to identify and store elements that are present in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using Python's built-in functions, we can implement the logic using set intersection to find common elements and then convert it back to a sorted list for unique storage.\n\n```python\ndef sorted_unique_common_elements(list1, list2):\n    common_elements = sorted(list(set(list1) & set(list2)))\n    return common_elements\n```\n\n# [edge case] \n    sorted_unique_common_elements([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists.\n    sorted_unique_common_elements([1, 2, 3], [3, 4, 5]) = [3]\n    Explanation: The only common element between the two lists is 3.\n    sorted_unique_common_elements([], []) = []\n    Explanation: Both lists are empty, so there are no common elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where there are no common elements or when one/both lists are empty.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and the built-in functions to achieve the required functionality.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: The core concept is to identify and store elements that are present in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using Python and built-in functions, we can implement the logic as follows:\n    \n```python\ndef common_elements(list1, list2):\n    common = list(set(list1) & set(list2))\n    return sorted(common)\n```\n\n# [edge case] \n    common_elements([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists.\n    common_elements([1, 2, 3, 4], [3, 4, 5, 6]) = [3, 4]\n    Explanation: The common elements between the two lists are 3 and 4.\n    common_elements([], []) = []\n    Explanation: Both lists are empty, so there are no common elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where there are no common elements or when both lists are empty.\n", "requirement pool:\n- Efficiently identify common elements in two lists\n- Sort the common elements in ascending order\n- Ensure uniqueness of the common elements\nWe will use Python and the built-in functions to efficiently identify and sort common elements in two lists. We will leverage the set data structure to ensure uniqueness and sorting of the common elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that are present in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using Python and built-in functions to efficiently identify and sort common elements in two lists using the set data structure, the following logic can be implemented:\n    \n```python\ndef common(l1: list, l2: list):\n    common_elements = sorted(list(set(l1) & set(l2)))\n    return common_elements\n```\n\n# [edge case] \n    common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) = [1, 5, 653]\n    Explanation: The common elements between the two lists are 1, 5, and 653.\n    \n    common([5, 3, 2, 8], [3, 2]) = [2, 3]\n    Explanation: The common elements between the two lists are 2 and 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided efficiently handles finding and sorting common elements in two lists.\n", "requirement pool:\n- Efficiently identify common elements in two lists\n- Sort the common elements in a unique manner\n- Handle large input lists efficiently\nWe will use the built-in functions in Python to efficiently identify and sort common elements in two lists. Specifically, we will use set intersection to find common elements, then convert the result to a sorted list to ensure uniqueness and sorting.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that are present in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already suggests using set intersection and converting the result to a sorted list, the code logic is straightforward. Here is a possible implementation:\n```python\ndef common(l1: list, l2: list):\n    common_elements = sorted(list(set(l1) & set(l2)))\n    return common_elements\n```\n\n# [edge case] \n    common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) = [1, 5, 653]\n    Explanation: The common elements between the two lists are 1, 5, and 653.\n    common([5, 3, 2, 8], [3, 2]) = [2, 3]\n    Explanation: The common elements between the two lists are 2 and 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The plan already covers the efficient way to handle common elements in two lists.\n", "requirement pool:\n- Efficiently identify common elements in two lists\n- Ensure unique sorting of common elements\n- Optimize performance for large input lists\nWe will use the built-in functions in Python to efficiently identify and sort common elements in two lists. We will leverage the set data structure to ensure uniqueness and sorting of the common elements.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that are present in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using built-in functions and set data structure, the following logic can be implemented:\n    1. Convert both lists to sets to remove duplicates and ensure uniqueness.\n    2. Find the intersection of the two sets to get the common elements.\n    3. Convert the result back to a sorted list for output.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists.\n    common([1, 1, 2, 3], [3, 3, 4]) = [3]\n    Explanation: The common element '3' appears in both lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers scenarios where there are no common elements or duplicate elements in the lists.\n", "requirement pool:\n- Efficiently identify common elements in two lists\n- Sort common elements for easy comparison\n- Ensure uniqueness of common elements\nWe will use the built-in functions in Python to efficiently identify and sort common elements in two lists. We will leverage the set data structure to ensure uniqueness of the common elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that are present in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in functions and sets, the code logic would involve:\n    1. Convert both lists to sets for efficient comparison.\n    2. Find the intersection of the two sets to get common elements.\n    3. Convert the result back to a sorted list for output.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists.\n    common([1, 1, 2, 2], [2, 2, 3, 3]) = [2]\n    Explanation: The common elements are [2], and it should be sorted and unique.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where there are no common elements or duplicate common elements.\n"], "scores": [1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, false, false, false, true, true, true, true], "pass_test_cases_num": [100, 100, 100, 0, 0, 0, 100, 100, 100, 100], "completion": "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists. You need to identify the elements that are present in both lists. These elements should then be sorted and stored in a unique manner.\n    :param l1: First list\n    :param l2: Second list\n    :return: List of sorted unique common elements\n    '''\n    \n    set1 = set(l1)\n    set2 = set(l2)\n    \n    common_elements = list(set1.intersection(set2))\n    common_elements.sort()\n    \n    return common_elements\n", "passed": true, "pass": true, "pass_num": 7, "round": 912, "repair_prompt": ["def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists. You need to identify the elements that are present in both lists. These elements should then be sorted and stored in a unique manner.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "Return sorted unique common elements for two lists. You need to identify the elements that are present in both lists and then store these elements in a unique manner.", "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists. You need to identify the elements that are present in both lists and store them sorted in a unique manner. These elements should then be sorted and stored in a unique manner.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''"], "mutate_method": "expand_one2two", "parent_index": 856}
