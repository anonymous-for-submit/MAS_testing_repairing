{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Find the unique elements that are present in both lists, then return them in sorted order.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "entry_point": "common", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "test": ["def check(common):\n\tassert common([6, 5, 7, 10], [8, 4]) == []", "def check(common):\n\tassert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "def check(common):\n\tassert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "def check(common):\n\tassert common([8, 7, 6, 13], [7, 2]) == [7]", "def check(common):\n\tassert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "def check(common):\n\tassert common([7, 8, 6, 11], [4, 5, 9]) == []", "def check(common):\n\tassert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "def check(common):\n\tassert common([6, 6, 4, 12], [3, 1]) == []", "def check(common):\n\tassert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "def check(common):\n\tassert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "def check(common):\n\tassert common([4, 8, 2, 9], [3, 1]) == []", "def check(common):\n\tassert common([3, 5, 5, 8], [7, 6]) == []", "def check(common):\n\tassert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "def check(common):\n\tassert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "def check(common):\n\tassert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "def check(common):\n\tassert common([3, 7, 6, 3], [2, 4, 5]) == []", "def check(common):\n\tassert common([7, 4, 3, 10], [3, 1]) == [3]", "def check(common):\n\tassert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "def check(common):\n\tassert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "def check(common):\n\tassert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "def check(common):\n\tassert common([3, 1, 6, 11], [6, 6]) == [6]", "def check(common):\n\tassert common([7, 4, 7, 13], [8, 4]) == [4]", "def check(common):\n\tassert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "def check(common):\n\tassert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "def check(common):\n\tassert common([5, 8, 7, 3], [6, 4]) == []", "def check(common):\n\tassert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "def check(common):\n\tassert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "def check(common):\n\tassert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "def check(common):\n\tassert common([6, 6, 4, 5], [3, 3, 8]) == []", "def check(common):\n\tassert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "def check(common):\n\tassert common([2, 1, 7, 9], [6, 3]) == []", "def check(common):\n\tassert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "def check(common):\n\tassert common([7, 6, 3, 9], [6, 5]) == [6]", "def check(common):\n\tassert common([2, 3, 3, 9], [5, 2]) == [2]", "def check(common):\n\tassert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "def check(common):\n\tassert common([8, 3, 4, 10], [8, 7]) == [8]", "def check(common):\n\tassert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "def check(common):\n\tassert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "def check(common):\n\tassert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "def check(common):\n\tassert common([4, 5, 7, 12], [7, 1]) == [7]", "def check(common):\n\tassert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "def check(common):\n\tassert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "def check(common):\n\tassert common([2, 6, 2, 8], [5, 2]) == [2]", "def check(common):\n\tassert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "def check(common):\n\tassert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "def check(common):\n\tassert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "def check(common):\n\tassert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "def check(common):\n\tassert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "def check(common):\n\tassert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "def check(common):\n\tassert common([5, 5, 7, 7], [5, 2]) == [5]", "def check(common):\n\tassert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "def check(common):\n\tassert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "def check(common):\n\tassert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([5, 2, 1, 3], [8, 3]) == [3]", "def check(common):\n\tassert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "def check(common):\n\tassert common([5, 6, 4, 8], [3, 7, 2]) == []", "def check(common):\n\tassert common([7, 7, 5, 11], [3, 4]) == []", "def check(common):\n\tassert common([4, 3, 2, 8], []) == []", "def check(common):\n\tassert common([7, 7, 7, 3], [2, 4]) == []", "def check(common):\n\tassert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "def check(common):\n\tassert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "def check(common):\n\tassert common([1, 8, 7, 3], [2, 6]) == []", "def check(common):\n\tassert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "def check(common):\n\tassert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "def check(common):\n\tassert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "def check(common):\n\tassert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "def check(common):\n\tassert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "def check(common):\n\tassert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "def check(common):\n\tassert common([8, 4, 1, 9], [6, 3]) == []", "def check(common):\n\tassert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "def check(common):\n\tassert common([9, 7, 7, 7], [5, 2]) == []", "def check(common):\n\tassert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "def check(common):\n\tassert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "def check(common):\n\tassert common([8, 4, 6, 5], [1, 1]) == []", "def check(common):\n\tassert common([4, 5, 3, 10], [7, 5]) == [5]", "def check(common):\n\tassert common([7, 1, 7, 13], [3, 1]) == [1]", "def check(common):\n\tassert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "def check(common):\n\tassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "def check(common):\n\tassert common([7, 7, 1, 4], [5, 6]) == []", "def check(common):\n\tassert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "def check(common):\n\tassert common([8, 1, 1, 3], [5, 6]) == []", "def check(common):\n\tassert common([6, 3, 6, 3], [8, 5, 8]) == []", "def check(common):\n\tassert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "def check(common):\n\tassert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "def check(common):\n\tassert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "def check(common):\n\tassert common([1, 3, 4, 9], [7, 3]) == [3]", "def check(common):\n\tassert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "def check(common):\n\tassert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "def check(common):\n\tassert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "def check(common):\n\tassert common([8, 1, 4, 10], [4, 2]) == [4]", "def check(common):\n\tassert common([2, 8, 5, 10], [8, 4]) == [8]", "def check(common):\n\tassert common([8, 4, 4, 6], [3, 6]) == [6]", "def check(common):\n\tassert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "def check(common):\n\tassert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "def check(common):\n\tassert common([3, 1, 4, 5], [1, 1]) == [1]", "def check(common):\n\tassert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "test_case_list": ["assert common([6, 5, 7, 10], [8, 4]) == []", "assert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "assert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "assert common([8, 7, 6, 13], [7, 2]) == [7]", "assert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "assert common([7, 8, 6, 11], [4, 5, 9]) == []", "assert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "assert common([6, 6, 4, 12], [3, 1]) == []", "assert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "assert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "assert common([4, 8, 2, 9], [3, 1]) == []", "assert common([3, 5, 5, 8], [7, 6]) == []", "assert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "assert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "assert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "assert common([3, 7, 6, 3], [2, 4, 5]) == []", "assert common([7, 4, 3, 10], [3, 1]) == [3]", "assert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "assert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "assert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "assert common([3, 1, 6, 11], [6, 6]) == [6]", "assert common([7, 4, 7, 13], [8, 4]) == [4]", "assert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "assert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "assert common([5, 8, 7, 3], [6, 4]) == []", "assert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "assert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "assert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "assert common([6, 6, 4, 5], [3, 3, 8]) == []", "assert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "assert common([2, 1, 7, 9], [6, 3]) == []", "assert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "assert common([7, 6, 3, 9], [6, 5]) == [6]", "assert common([2, 3, 3, 9], [5, 2]) == [2]", "assert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "assert common([8, 3, 4, 10], [8, 7]) == [8]", "assert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "assert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "assert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "assert common([4, 5, 7, 12], [7, 1]) == [7]", "assert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "assert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "assert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "assert common([2, 6, 2, 8], [5, 2]) == [2]", "assert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "assert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "assert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "assert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "assert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "assert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "assert common([5, 5, 7, 7], [5, 2]) == [5]", "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "assert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "assert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "assert common([5, 2, 1, 3], [8, 3]) == [3]", "assert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "assert common([5, 6, 4, 8], [3, 7, 2]) == []", "assert common([7, 7, 5, 11], [3, 4]) == []", "assert common([4, 3, 2, 8], []) == []", "assert common([7, 7, 7, 3], [2, 4]) == []", "assert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "assert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "assert common([1, 8, 7, 3], [2, 6]) == []", "assert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "assert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "assert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "assert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "assert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "assert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "assert common([8, 4, 1, 9], [6, 3]) == []", "assert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "assert common([9, 7, 7, 7], [5, 2]) == []", "assert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "assert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "assert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "assert common([8, 4, 6, 5], [1, 1]) == []", "assert common([4, 5, 3, 10], [7, 5]) == [5]", "assert common([7, 1, 7, 13], [3, 1]) == [1]", "assert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "assert common([7, 7, 1, 4], [5, 6]) == []", "assert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "assert common([8, 1, 1, 3], [5, 6]) == []", "assert common([6, 3, 6, 3], [8, 5, 8]) == []", "assert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "assert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "assert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "assert common([1, 3, 4, 9], [7, 3]) == [3]", "assert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "assert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "assert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "assert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "assert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "assert common([8, 1, 4, 10], [4, 2]) == [4]", "assert common([2, 8, 5, 10], [8, 4]) == [8]", "assert common([8, 4, 4, 6], [3, 6]) == [6]", "assert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "assert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "assert common([3, 1, 4, 5], [1, 1]) == [1]", "assert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "nl": "Return sorted unique common elements for two lists.\n    ", "func": "def common(l1: list, l2: list):", "examples": ">>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    ", "completions": ["from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Find the unique elements that are present in both lists, then return them in sorted order.\n    :param l1: First list\n    :param l2: Second list\n    :return: List of common elements sorted\n    '''\n    \n    # Convert lists to sets to get unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets to get common elements\n    common_elements = list(set1.intersection(set2))\n    \n    # Sort the common elements before returning\n    common_elements.sort()\n    \n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Find the unique elements that are present in both lists, then return them in sorted order.\n    :param l1: First list\n    :param l2: Second list\n    :return: List of unique common elements in sorted order\n    '''\n    \n    set1 = set(l1)\n    set2 = set(l2)\n    \n    common_elements = list(set1.intersection(set2))\n    \n    return sorted(common_elements)\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Find the unique elements that are present in both lists, then return them in sorted order.\n    :param l1: First list\n    :param l2: Second list\n    :return: List of common elements in sorted order\n    '''\n    \n    common_elements = sorted(list(set(l1).intersection(l2)))\n    \n    return common_elements\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef common(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Find the unique elements that are present in both lists, then return them in sorted order.\n    \"\"\"\n    common_elements = list(set(list1) & set(list2))\n    return sorted(common_elements)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef common(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Find the unique elements that are present in both lists, then return them in sorted order.\n    \"\"\"\n    common_elements = list(set(list1) & set(list2))\n    return sorted(common_elements)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef common(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Find the unique elements that are present in both lists, then return them in sorted order.\n    \"\"\"\n    common_elements = list(set(list1) & set(list2))\n    return sorted(common_elements)\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Find the unique elements in both lists and return them sorted.\n    \n    :param l1: First list\n    :param l2: Second list\n    :return: Sorted list of unique elements\n    '''\n    \n    unique_elements = sorted(set(l1).intersection(l2))\n    return unique_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Find the unique elements in both lists and return them sorted.\n    \n    :param l1: First list\n    :param l2: Second list\n    :return: Sorted list of unique elements\n    '''\n    \n    unique_elements = sorted(set(l1).intersection(l2))\n    return unique_elements\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    '''\n    Find the unique elements in both lists and return them sorted.\n    \n    :param l1: First list\n    :param l2: Second list\n    :return: Sorted list of unique elements\n    '''\n    \n    unique_elements = sorted(list(set(l1).intersection(l2)))\n    return unique_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Find the unique elements that are present in both lists, then return them in sorted order.\n    :param l1: First list\n    :param l2: Second list\n    :return: List of common elements sorted\n    '''\n    common_elements = sorted(list(set(l1) & set(l2)))\n    return common_elements\n"], "plans": ["requirement pool:\n- Implement function to find common elements in two lists\n- Ensure the function sorts the common elements\n- Optimize the function for performance on large lists\nWe will use the built-in set data structure in Python to efficiently find unique elements in two lists. Then, we will sort the common elements before returning them.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique elements': Elements that appear only once in the list.\n    'sorted order': Arranging elements in ascending or descending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code:\n    1. Convert both lists to sets to get unique elements.\n    2. Find the intersection of the two sets to get common elements.\n    3. Convert the result back to a sorted list before returning it.\n\n# [edge case] \n    common([1, 2, 3], [4, 5]) = []\n    Explanation: There are no common elements between the two lists.\n    common([1, 1, 2, 3], [3, 3, 4]) = [3]\n    Explanation: The common element '3' appears once in each list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where there are no common elements or when common elements are repeated.\n", "requirement pool:\n- Implement function to find common elements in two lists\n- Ensure sorting of the common elements\n- Optimize algorithm for better performance\nWe will use the built-in set data structure in Python to efficiently find unique common elements in two lists. Then, we will sort the common elements before returning them.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique elements': Elements that appear only once in the list\n    'sorted order': Arranging elements in ascending or descending order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    common([], []) = []\n    Explanation: When both lists are empty, there are no common elements, so the expected output is an empty list.\n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 3], [3, 2, 1]) = [1, 2, 3]\n    Explanation: All elements are common between the two lists, and they are returned in sorted order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the scenarios where the lists are empty or have all elements in common.\n", "requirement pool:\n- Implement function to find common elements in two lists\n- Ensure the function sorts the common elements\n- Optimize the function for performance on large lists\nWe will use Python and the built-in functions to efficiently find common elements in two lists and return them in sorted order.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique elements': Elements that are present only once in the list.\n    'sorted order': Arranging elements in ascending or descending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using Python and built-in functions, we can utilize the set intersection operation to find common elements efficiently. Then, we can convert the result to a sorted list for the final output.\n\n# [edge case] \n    common([1, 2, 3], [4, 5]) = []\n    Explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 1, 2, 3], [1, 2, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common between the two lists, and they are returned in sorted order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should cover all scenarios.\n", "requirement analysis:\nThe main requirement is to efficiently identify and sort common elements in two lists. This involves finding unique elements present in both lists and returning them in sorted order. Performance optimization for large input lists is crucial to meet user expectations.\nrequirement pool:\n- Efficiently find and sort common elements in two lists\n- Accurately identify unique common elements\n- Optimize performance for large input lists\nWe will utilize the set data structure in Python to efficiently find unique common elements in two lists and then sort them using the sorted function.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique elements': Refers to elements that are present only once in the respective lists.\n    'sorted order': Implies arranging the elements in ascending or descending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic involves using sets to find unique common elements and then sorting them before returning the result.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 3], [3, 4, 5]) = [3]\n    Explanation: The only common element between the two lists is '3', which is returned in sorted order.\n    common([], []) = []\n    Explanation: Both lists are empty, so there are no common elements to return.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The existing logic covers scenarios where there are no common elements or when both lists are empty.\n", "requirement analysis:\nThe main goal is to efficiently identify and sort common elements in two lists. The solution should handle large lists effectively and ensure the uniqueness of elements.\nrequirement pool:\n- Identify unique common elements in two lists\n- Sort the common elements in ascending order\n- Optimize the algorithm for performance\nWe will use the provided Python function 'common' to efficiently identify and sort common elements in two lists. We will leverage the built-in set operations for finding unique common elements and sorting them in ascending order.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique elements': Refers to elements that are present in only one copy in the list.\n    'sorted order': Implies arranging the elements in a specific sequence, typically ascending or descending.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic is already provided in the plan. It efficiently identifies common elements in two lists and returns them sorted in ascending order.\n\n# [edge case] \n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: When there are no common elements between the two lists, the output should be an empty list.\n    common([1, 2, 3], [3, 4, 5]) = [3]\n    Explanation: The only common element between the two lists is 3, which is returned in sorted order.\n    common([1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common between the two lists, and they are returned in sorted order.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The existing logic covers scenarios where there are no common elements or all elements are common.\n", "requirement analysis:\nThe main requirement is to efficiently identify and sort common elements in two lists. This involves finding the intersection of the lists and sorting the common elements before returning them. Performance optimization for large lists is crucial.\nrequirement pool:\n- Efficiently find and sort common elements\n- Handle different list sizes efficiently\n- Ensure accurate identification of unique common elements\nWe will utilize the built-in set data structure in Python to efficiently find the common elements between two lists and then sort them before returning the result.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique elements': Refers to elements that are present in only one copy in each list.\n    'sorted order': Implies arranging the elements in ascending or descending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic is straightforward as it utilizes set operations and sorting to find common elements between two lists efficiently.\n\n# [edge case] \n    common([], []) = []\n    Explanation: When both lists are empty, there are no common elements, so the expected output is an empty list.\n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists, so the expected output is an empty list.\n    common([1, 2, 3], [3, 4, 5]) = [3]\n    Explanation: The only common element between the two lists is 3, which is returned in sorted order.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The existing logic covers scenarios where there are no common elements or when both lists are empty.\n", "requirement pool:\n- Efficiently find and sort unique elements in two lists\n- Handle large lists with optimal performance\nWe will utilize the built-in functions in Python to efficiently find and sort unique elements in two lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique elements': Elements that appear only once in the list.\n    'sorted': Arranging elements in a specific order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in functions, we can implement the code as follows:\n```python\ndef common(l1: list, l2: list):\n    unique_elements = sorted(set(l1).intersection(l2))\n    return unique_elements\n```\n\n# [edge case] \n    common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) = [1, 5, 653]\n    Explanation: The unique elements common in both lists are 1, 5, and 653.\n    \n    common([5, 3, 2, 8], [3, 2]) = [2, 3]\n    Explanation: The unique elements common in both lists are 2 and 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the requirements effectively.\n", "requirement pool:\n- Efficiently find and sort unique elements in two lists\n- Handle large lists with optimized performance\n- Ensure scalability for potential future enhancements\nWe will use Python and the built-in functions to efficiently find unique elements in two lists and return them sorted.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique elements': Elements that appear only once in the list.\n    'sorted': Arranging the elements in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using Python and built-in functions, we can utilize sets to find unique elements and then sort them to return the final result.\n\n    ```python\n    def common(l1: list, l2: list):\n        unique_elements = sorted(set(l1).intersection(l2))\n        return unique_elements\n    ```\n\n# [edge case] \n    common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) = [1, 5, 653]\n    Explanation: The unique elements common in both lists are 1, 5, and 653.\n    \n    common([5, 3, 2, 8], [3, 2]) = [2, 3]\n    Explanation: The unique elements common in both lists are 2 and 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the requirements effectively.\n", "requirement pool:\n- Efficiently find unique elements in two lists\n- Ensure the returned elements are sorted\n- Optimize the algorithm for large lists\nWe will use the built-in Python functions to efficiently find unique elements in two lists and return them sorted.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique elements': Elements that appear only once in the list.\n    'sorted': Arranging elements in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python functions, we can implement the code as follows:\n```python\ndef common(l1: list, l2: list):\n    unique_elements = sorted(set(l1).intersection(l2))\n    return unique_elements\n```\n\n# [edge case] \n    common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) = [1, 5, 653]\n    Explanation: The unique elements common in both lists are 1, 5, and 653.\n    common([5, 3, 2, 8], [3, 2]) = [2, 3]\n    Explanation: The unique elements common in both lists are 2 and 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the built-in functions handle the sorting and uniqueness efficiently.\n", "requirement pool:\n- Implement function to find common elements in two lists\n- Ensure the function sorts the common elements\n- Optimize the function for performance on large lists\nWe will use the built-in functions in Python to efficiently find common elements in both lists and sort them.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique elements': Elements that appear only once in the list.\n    'sorted order': Arranging elements in ascending or descending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in functions, we can implement the code as follows:\n```python\ndef common(l1: list, l2: list):\n    common_elements = sorted(list(set(l1) & set(l2)))\n    return common_elements\n```\n\n# [edge case] \n    common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) = [1, 5, 653]\n    Explanation: The common elements between the two lists are 1, 5, and 653.\n    \n    common([5, 3, 2, 8], [3, 2]) = [2, 3]\n    Explanation: The common elements between the two lists are 2 and 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers sorting and finding common elements efficiently.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], "completion": "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Find the unique elements that are present in both lists, then return them in sorted order.\n    :param l1: First list\n    :param l2: Second list\n    :return: List of common elements sorted\n    '''\n    common_elements = sorted(list(set(l1) & set(l2)))\n    return common_elements\n", "passed": true, "pass": true, "pass_num": 10, "round": 617, "repair_prompt": ["def common(l1: list, l2: list):\t\n'''Find the unique elements that are present in both lists, then return them in sorted order.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "'''Find the unique elements that are present in both lists, then return them in sorted order.\nChoose the common elements and sort them before returning.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "def common(l1: list, l2: list):\t\n'''Find the unique elements in both lists and return them sorted.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3] \n\n    '''"], "mutate_method": "rephrase_one", "parent_index": 600}
