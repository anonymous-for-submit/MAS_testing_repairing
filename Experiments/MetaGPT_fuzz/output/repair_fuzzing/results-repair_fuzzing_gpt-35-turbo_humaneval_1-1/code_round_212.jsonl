{"task_id": "HumanEval/31", "prompt": "def is_prime(n):\t\n'''Return true if a given number is prime, and false otherwise.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''", "entry_point": "is_prime", "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "test": ["def check(is_prime):\n\tassert is_prime(255520) == False", "def check(is_prime):\n\tassert is_prime(6) == False", "def check(is_prime):\n\tassert is_prime(85) == False", "def check(is_prime):\n\tassert is_prime(83) == True", "def check(is_prime):\n\tassert is_prime(82) == False", "def check(is_prime):\n\tassert is_prime(7) == True", "def check(is_prime):\n\tassert is_prime(13) == True", "def check(is_prime):\n\tassert is_prime(57) == False", "def check(is_prime):\n\tassert is_prime(81) == False", "def check(is_prime):\n\tassert is_prime(3) == True", "def check(is_prime):\n\tassert is_prime(104) == False", "def check(is_prime):\n\tassert is_prime(90) == False", "def check(is_prime):\n\tassert is_prime(88) == False", "def check(is_prime):\n\tassert is_prime(255344) == False", "def check(is_prime):\n\tassert is_prime(12) == False", "def check(is_prime):\n\tassert is_prime(14316) == False", "def check(is_prime):\n\tassert is_prime(12938) == False", "def check(is_prime):\n\tassert is_prime(8) == False", "def check(is_prime):\n\tassert is_prime(102) == False", "def check(is_prime):\n\tassert is_prime(12628) == False", "def check(is_prime):\n\tassert is_prime(61) == True", "def check(is_prime):\n\tassert is_prime(5 * 17) == False", "def check(is_prime):\n\tassert is_prime(98) == False", "def check(is_prime):\n\tassert is_prime(63) == False", "def check(is_prime):\n\tassert is_prime(19) == True", "def check(is_prime):\n\tassert is_prime(12884) == False", "def check(is_prime):\n\tassert is_prime(87) == False", "def check(is_prime):\n\tassert is_prime(89) == True", "def check(is_prime):\n\tassert is_prime(255139) == False", "def check(is_prime):\n\tassert is_prime(12897) == False", "def check(is_prime):\n\tassert is_prime(73) == True", "def check(is_prime):\n\tassert is_prime(1) == False", "def check(is_prime):\n\tassert is_prime(15) == False", "def check(is_prime):\n\tassert is_prime(75) == False", "def check(is_prime):\n\tassert is_prime(18) == False", "def check(is_prime):\n\tassert is_prime(96) == False", "def check(is_prime):\n\tassert is_prime(5) == True", "def check(is_prime):\n\tassert is_prime(9) == False", "def check(is_prime):\n\tassert is_prime(255046) == False", "def check(is_prime):\n\tassert is_prime(14) == False", "def check(is_prime):\n\tassert is_prime(78) == False", "def check(is_prime):\n\tassert is_prime(255214) == False", "def check(is_prime):\n\tassert is_prime(76) == False", "def check(is_prime):\n\tassert is_prime(2) == True", "def check(is_prime):\n\tassert is_prime(254873) == True", "def check(is_prime):\n\tassert is_prime(13441 * 19) == False", "def check(is_prime):\n\tassert is_prime(13796) == False", "def check(is_prime):\n\tassert is_prime(11) == True", "def check(is_prime):\n\tassert is_prime(14253) == False", "def check(is_prime):\n\tassert is_prime(100) == False", "def check(is_prime):\n\tassert is_prime(20) == False", "def check(is_prime):\n\tassert is_prime(58) == False", "def check(is_prime):\n\tassert is_prime(22) == False", "def check(is_prime):\n\tassert is_prime(17) == True", "def check(is_prime):\n\tassert is_prime(13481) == False", "def check(is_prime):\n\tassert is_prime(12832) == False", "def check(is_prime):\n\tassert is_prime(254513) == False", "def check(is_prime):\n\tassert is_prime(106) == False", "def check(is_prime):\n\tassert is_prime(16) == False", "def check(is_prime):\n\tassert is_prime(13441) == True", "def check(is_prime):\n\tassert is_prime(66) == False", "def check(is_prime):\n\tassert is_prime(65) == False", "def check(is_prime):\n\tassert is_prime(80) == False", "def check(is_prime):\n\tassert is_prime(11 * 7) == False", "def check(is_prime):\n\tassert is_prime(101) == True", "def check(is_prime):\n\tassert is_prime(103) == True", "def check(is_prime):\n\tassert is_prime(56) == False", "def check(is_prime):\n\tassert is_prime(254423) == False", "def check(is_prime):\n\tassert is_prime(254790) == False", "def check(is_prime):\n\tassert is_prime(4) == False"], "test_case_list": ["assert is_prime(255520) == False", "assert is_prime(6) == False", "assert is_prime(85) == False", "assert is_prime(83) == True", "assert is_prime(82) == False", "assert is_prime(7) == True", "assert is_prime(13) == True", "assert is_prime(57) == False", "assert is_prime(81) == False", "assert is_prime(3) == True", "assert is_prime(104) == False", "assert is_prime(90) == False", "assert is_prime(88) == False", "assert is_prime(255344) == False", "assert is_prime(12) == False", "assert is_prime(14316) == False", "assert is_prime(12938) == False", "assert is_prime(8) == False", "assert is_prime(102) == False", "assert is_prime(12628) == False", "assert is_prime(61) == True", "assert is_prime(5 * 17) == False", "assert is_prime(98) == False", "assert is_prime(63) == False", "assert is_prime(19) == True", "assert is_prime(12884) == False", "assert is_prime(87) == False", "assert is_prime(89) == True", "assert is_prime(255139) == False", "assert is_prime(12897) == False", "assert is_prime(73) == True", "assert is_prime(1) == False", "assert is_prime(15) == False", "assert is_prime(75) == False", "assert is_prime(18) == False", "assert is_prime(96) == False", "assert is_prime(5) == True", "assert is_prime(9) == False", "assert is_prime(255046) == False", "assert is_prime(14) == False", "assert is_prime(78) == False", "assert is_prime(255214) == False", "assert is_prime(76) == False", "assert is_prime(2) == True", "assert is_prime(254873) == True", "assert is_prime(13441 * 19) == False", "assert is_prime(13796) == False", "assert is_prime(11) == True", "assert is_prime(14253) == False", "assert is_prime(100) == False", "assert is_prime(20) == False", "assert is_prime(58) == False", "assert is_prime(22) == False", "assert is_prime(17) == True", "assert is_prime(13481) == False", "assert is_prime(12832) == False", "assert is_prime(254513) == False", "assert is_prime(106) == False", "assert is_prime(16) == False", "assert is_prime(13441) == True", "assert is_prime(66) == False", "assert is_prime(65) == False", "assert is_prime(80) == False", "assert is_prime(11 * 7) == False", "assert is_prime(101) == True", "assert is_prime(103) == True", "assert is_prime(56) == False", "assert is_prime(254423) == False", "assert is_prime(254790) == False", "assert is_prime(4) == False"], "nl": "Return true if a given number is prime, and false otherwise.\n    ", "func": "def is_prime(n):", "examples": ">>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    ", "completions": ["from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a number is prime.\n\n    Args:\n        n: integer input number to check for primality\n\n    Returns:\n        boolean value indicating if the input number is prime or not\n    \"\"\"\n    \n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    '''Return true if a given number is prime, and false otherwise.'''\n    \n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a number is a prime number.\n\n    Args:\n        n: An integer.\n\n    Returns:\n        True if n is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a number is prime efficiently.\n\n    Args:\n        n: An integer to check for primality.\n\n    Returns:\n        A boolean value indicating whether the input number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n", "from typing import List\nimport math\n\ndef is_prime(num: int) -> bool:\n    ## Check if the number is less than 2\n    if num < 2:\n        return False\n    \n    ## Helper function to check if a number is prime recursively\n    def check_prime(n, i):\n        if i > math.isqrt(n):\n            return True\n        if n % i == 0:\n            return False\n        return check_prime(n, i + 1)\n    \n    return check_prime(num, 2)\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(num: int) -> bool:\n    \"\"\"\n    Check if a number is a prime number.\n\n    Args:\n        num (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    '''Return true if a given number is prime, and false otherwise.'''\n    \n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n", "from typing import List\ndef is_prime(n: int) -> bool:\n    '''Return true if a given number is prime, and false otherwise.'''\n    \n    if n < 2:\n        return False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n", "from typing import List\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a number is a prime number.\n\n    Args:\n        n: An integer input number.\n\n    Returns:\n        A boolean indicating if the input number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a number is prime.\n\n    Args:\n        n: integer input number\n\n    Returns:\n        boolean indicating if the input number is prime or not\n    \"\"\"\n    \n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n"], "plans": ["requirement pool:\n- Implement efficient prime number checking algorithm\n- Ensure accuracy in prime number identification\n- Optimize performance for quick prime number checks\nWe will implement the is_prime function using a simple algorithm to efficiently determine if a number is prime.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that is only divisible by 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using a simple algorithm to efficiently determine if a number is prime, the detailed logic can be implemented based on common prime number checking algorithms like checking divisibility up to the square root of the number.\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it is only divisible by 1.\n    is_prime(2) = True\n    Explanation: 2 is the smallest prime number.\n    is_prime(4) = False\n    Explanation: 4 is not a prime number as it is divisible by 1, 2, and 4.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n < 2:\n            return False\n        (other code)\n", "requirement pool:\n- Implement efficient prime number checking algorithm\n- Ensure accuracy in prime number identification\n- Optimize performance for quick prime number checks\nWe will design a simple static Python function using basic mathematical operations to efficiently determine if a number is prime.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that is only divisible by 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic mathematical operations to determine if a number is prime, the logic can be implemented based on traditional prime number checking algorithms like checking divisibility by numbers up to the square root of the given number.\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it is only divisible by 1.\n    is_prime(2) = True\n    Explanation: 2 is the smallest prime number.\n    is_prime(4) = False\n    Explanation: 4 is not a prime number as it is divisible by 2.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n < 2:\n            return False\n        (other code)\n", "requirement pool:\n- Implement efficient prime number detection algorithm\n- Ensure accuracy in prime number identification\n- Optimize performance for large prime numbers\nWe will implement the is_prime function using a simple algorithm to efficiently identify prime numbers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that is only divisible by 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using a simple algorithm to efficiently identify prime numbers, we can implement the code using the following logic:\n    - Check if the number is less than 2, return False if it is.\n    - Iterate from 2 to the square root of the number and check if the number is divisible by any of these values. If it is, return False.\n    - If the loop completes without finding a divisor, return True.\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it is only divisible by 1.\n    is_prime(2) = True\n    Explanation: 2 is the smallest prime number.\n    is_prime(4) = False\n    Explanation: 4 is not a prime number as it is divisible by 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the edge cases appropriately.\n", "requirement analysis:\nThe main focus is on creating a recursive function that efficiently determines if a number is prime by checking factors other than 1 and itself. Performance optimization is crucial to ensure quick and accurate results.\nrequirement pool:\n- Implement recursive function to check prime numbers\n- Optimize the prime number checking algorithm\n- Ensure the function handles edge cases effectively\nWe will design a simple recursive function to check if a number is prime efficiently using Python's built-in libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that is only divisible by 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using Python's built-in libraries, we can implement the code as follows:\n\n```python\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it is only divisible by 1.\n    is_prime(2) = True\n    Explanation: 2 is a prime number as it is only divisible by 1 and 2.\n    is_prime(0) = False\n    Explanation: 0 is not a prime number as it is divisible by multiple numbers.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n <= 1:\n            return False\n        (other code)\n", "requirement analysis:\nThe main focus is on creating a robust and efficient prime number checking function using recursion. Performance optimization is crucial to handle large numbers effectively.\nrequirement pool:\n- Implement recursive function to check prime numbers\n- Ensure the function correctly identifies prime numbers\n- Optimize the recursive algorithm for better performance\nWe will design a simple static Python function using recursion to check if a number is prime. We will leverage the math library for mathematical operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that is only divisible by 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using recursion and the math library, the code logic could involve recursively checking for factors of the given number besides 1 and itself. The math library functions could be used for mathematical operations like square root calculations.\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it is only divisible by 1.\n    is_prime(2) = True\n    Explanation: 2 is a prime number as it is only divisible by 1 and 2.\n    is_prime(4) = False\n    Explanation: 4 is not a prime number as it is divisible by 1, 2, and 4.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if num < 2:\n            return False\n        (other code)\n", "requirement analysis:\nThe main focus is on creating a reliable and efficient prime number checking function using recursion. The function should accurately determine if a number is prime by checking for factors other than 1 and itself.\nrequirement pool:\n- Implement a recursive function to check for factors of the given number\n- Ensure the function returns true for prime numbers and false for non-prime numbers\n- Optimize the recursive function for better performance\nWe will design a simple recursive function to check for factors of the given number and determine its primality using Python's standard libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that is only divisible by 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using Python's standard libraries, the logic can be implemented as follows:\n    - Define a recursive function that takes a number as input.\n    - Check if the number is less than 2, return False if it is.\n    - Iterate from 2 to the square root of the number and check if the number is divisible by any of these values. If it is, return False.\n    - If no factors are found, return True.\n\n# [edge case] \n    Given the nature of prime numbers, edge cases can be:\n    is_prime(0) = False\n    Explanation: 0 is not a prime number as it is divisible by all numbers.\n    \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it is only divisible by itself.\n    \n    is_prime(2) = True\n    Explanation: 2 is the smallest prime number.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if num < 2:\n            return False\n        (other code)\n", "requirement pool:\n- Implement efficient prime number detection algorithm\n- Ensure correctness in identifying prime numbers\n- Optimize performance for large prime numbers\nWe will design a simple static Python function using basic mathematical operations to efficiently determine if a number is prime.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that is only divisible by 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic mathematical operations to determine if a number is prime, the logic can be implemented based on traditional prime number checking algorithms like checking divisibility by numbers up to the square root of the given number.\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it is only divisible by 1.\n    is_prime(2) = True\n    Explanation: 2 is the smallest prime number.\n    is_prime(4) = False\n    Explanation: 4 is not a prime number as it is divisible by 2.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n < 2:\n            return False\n        (other code)\n", "requirement pool:\n- Implement efficient prime number detection algorithm\n- Ensure accuracy in identifying prime numbers\n- Optimize performance for large prime numbers\nWe will design a simple static Python function using basic mathematical operations to efficiently check if a number is prime.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that is only divisible by 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic mathematical operations to check if a number is prime, the logic can be implemented directly.\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it is only divisible by 1.\n    is_prime(2) = True\n    Explanation: 2 is the smallest prime number.\n    is_prime(4) = False\n    Explanation: 4 is not a prime number as it is divisible by 1, 2, and 4.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n < 2:\n            return False\n        (other code)\n", "requirement analysis:\nThe main goal is to accurately and efficiently determine prime numbers. The function should handle both small and large numbers effectively while maintaining high performance.\nrequirement pool:\n- Implement an optimized algorithm for prime number detection\n- Ensure the function correctly identifies prime numbers\n- Handle edge cases such as 0, 1, and negative numbers\nWe will design a simple static Python function using basic arithmetic operations and open-source libraries to efficiently determine prime numbers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that is only divisible by 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic arithmetic operations and open-source libraries, the logic for checking prime numbers can involve iterating from 2 to the square root of the number and checking for divisibility. Additionally, using libraries like math.sqrt() can help optimize the process.\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it is only divisible by 1.\n    is_prime(2) = True\n    Explanation: 2 is the smallest prime number.\n    is_prime(4) = False\n    Explanation: 4 is not a prime number as it is divisible by 2.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n < 2:\n            return False\n        (other code)\n", "requirement pool:\n- Implement efficient prime number checking algorithm\n- Ensure correctness of prime number identification\n- Optimize prime number verification for speed\nWe will implement the is_prime function using a simple algorithm to efficiently determine if a number is prime.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that is only divisible by 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is to implement a simple algorithm to determine if a number is prime, the logic can be implemented as follows:\n    - Check if the number is less than 2, return False if it is.\n    - Iterate from 2 to the square root of the number and check if the number is divisible by any of these values. If it is, return False.\n    - If the loop completes without finding a divisor, return True.\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it is only divisible by 1.\n    is_prime(2) = True\n    Explanation: 2 is a prime number as it is only divisible by 1 and 2.\n    is_prime(4) = False\n    Explanation: 4 is not a prime number as it is divisible by 1, 2, and 4.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the edge cases appropriately.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [70, 70, 70, 70, 70, 70, 70, 70, 70, 70], "completion": "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a number is prime.\n\n    Args:\n        n: integer input number\n\n    Returns:\n        boolean indicating if the input number is prime or not\n    \"\"\"\n    \n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n", "passed": true, "pass": true, "pass_num": 10, "round": 212, "repair_prompt": ["def is_prime(n):\t\n'''Return true if a given number is prime, and false otherwise.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''", "Return true if a given number is prime, and false otherwise as determined by a recursive function that checks for factors besides 1 and itself to decide whether the number is prime.", "def is_prime(n):\t\n'''Return true if a given number is prime, and false otherwise.\n>>> is_prime(6) False\n    >>> is_prime(101) True\n    >>> is_prime(11) True\n    >>> is_prime(13441) True\n    >>> is_prime(61) True\n    >>> is_prime(4) False\n    >>> is_prime(1) False\n    '''"], "mutate_method": "condense_two2one", "parent_index": 145}
