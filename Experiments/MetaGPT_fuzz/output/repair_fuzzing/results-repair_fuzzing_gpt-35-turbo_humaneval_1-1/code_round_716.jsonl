{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-separated text of digits ranging from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": ["def check(sort_numbers):\n\tassert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one\") == 'one'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four three six\") == 'three four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one six four\") == 'one four six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two\") == 'one two'", "def check(sort_numbers):\n\tassert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four five five one one\") == 'one one four five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four zero two five\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight\") == 'eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six three\") == 'three six'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero\") == 'zero seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four three zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven\") == 'seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six nine three\") == 'three six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one nine three\") == 'one three four nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "def check(sort_numbers):\n\tassert sort_numbers('three five nine') == 'three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three\") == 'zero three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one seven\") == 'one four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six\") == 'six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"four two seven\") == 'two four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three four five\") == 'three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five four zero\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three seven two\") == 'two three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four six four one\") == 'one four four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight six three\") == 'three six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three five\") == 'three five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four\") == 'four'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero four one\") == 'zero one four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine\") == 'nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three\") == 'three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three four zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five\") == 'five'", "def check(sort_numbers):\n\tassert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers('three') == 'three'", "def check(sort_numbers):\n\tassert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six\") == 'six'", "def check(sort_numbers):\n\tassert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five\") == 'five eight'", "def check(sort_numbers):\n\tassert sort_numbers('') == ''", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine nine five\") == 'five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three\") == 'three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero\") == 'zero'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine zero\") == 'zero nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one six two seven\") == 'one two six seven'"], "test_case_list": ["assert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "assert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "assert sort_numbers(\"one\") == 'one'", "assert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "assert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "assert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "assert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "assert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "assert sort_numbers(\"four four three six\") == 'three four four six'", "assert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "assert sort_numbers(\"nine one six four\") == 'one four six nine'", "assert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "assert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "assert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "assert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "assert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "assert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "assert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "assert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "assert sort_numbers(\"one two\") == 'one two'", "assert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "assert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "assert sort_numbers(\"four five five one one\") == 'one one four five five'", "assert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "assert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "assert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "assert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "assert sort_numbers(\"four zero two five\") == 'zero two four five'", "assert sort_numbers(\"eight\") == 'eight'", "assert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "assert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "assert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "assert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "assert sort_numbers(\"six three\") == 'three six'", "assert sort_numbers(\"seven zero\") == 'zero seven'", "assert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "assert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "assert sort_numbers(\"four three zero\") == 'zero three four'", "assert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "assert sort_numbers(\"seven\") == 'seven'", "assert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "assert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "assert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "assert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "assert sort_numbers(\"six nine three\") == 'three six nine'", "assert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "assert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "assert sort_numbers(\"four one nine three\") == 'one three four nine'", "assert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "assert sort_numbers('three five nine') == 'three five nine'", "assert sort_numbers(\"zero three\") == 'zero three'", "assert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "assert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "assert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "assert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "assert sort_numbers(\"four one seven\") == 'one four seven'", "assert sort_numbers(\"seven six\") == 'six seven'", "assert sort_numbers(\"four two seven\") == 'two four seven'", "assert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "assert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "assert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "assert sort_numbers(\"nine three four five\") == 'three four five nine'", "assert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "assert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "assert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "assert sort_numbers(\"two five four zero\") == 'zero two four five'", "assert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "assert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "assert sort_numbers(\"three seven two\") == 'two three seven'", "assert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "assert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "assert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "assert sort_numbers(\"four four six four one\") == 'one four four four six'", "assert sort_numbers(\"eight six three\") == 'three six eight'", "assert sort_numbers(\"five three five\") == 'three five five'", "assert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "assert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "assert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "assert sort_numbers(\"four\") == 'four'", "assert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "assert sort_numbers(\"six zero four one\") == 'zero one four six'", "assert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "assert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "assert sort_numbers(\"nine\") == 'nine'", "assert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "assert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "assert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "assert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "assert sort_numbers(\"three\") == 'three'", "assert sort_numbers(\"three four zero\") == 'zero three four'", "assert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "assert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "assert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "assert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "assert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "assert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "assert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "assert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "assert sort_numbers(\"five\") == 'five'", "assert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "assert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "assert sort_numbers('three') == 'three'", "assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "assert sort_numbers(\"six\") == 'six'", "assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "assert sort_numbers(\"eight five\") == 'five eight'", "assert sort_numbers('') == ''", "assert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "assert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "assert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "assert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "assert sort_numbers(\"nine nine five\") == 'five nine nine'", "assert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "assert sort_numbers(\"seven three\") == 'three seven'", "assert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "assert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "assert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "assert sort_numbers(\"zero\") == 'zero'", "assert sort_numbers(\"nine zero\") == 'zero nine'", "assert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "assert sort_numbers(\"one six two seven\") == 'one two six seven'"], "nl": " Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    ", "func": "def sort_numbers(numbers: str) -> str:", "examples": ">>> sort_numbers('three one five')\n    'one three five'\n    ", "completions": ["from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    # Split the input string into a list of text numbers\n    text_numbers = numbers.split()\n    \n    # Convert the text numbers to integers\n    number_mapping = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_int = [number_mapping[num] for num in text_numbers]\n    \n    # Sort the integers\n    sorted_numbers = sorted(numbers_int)\n    \n    # Convert the sorted integers back to text format\n    sorted_text_numbers = [key for value in sorted_numbers for key, val in number_mapping.items() if val == value]\n    \n    # Return the sorted text numbers\n    return ' '.join(sorted_text_numbers)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    # Dictionary mapping text numbers to numerical values\n    text_to_num = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Split the input string into individual text numbers\n    text_nums = numbers.split()\n    \n    # Convert text numbers to numerical values using the dictionary mapping\n    num_values = [text_to_num[num] for num in text_nums]\n    \n    # Sort the numerical values\n    sorted_num_values = sorted(num_values)\n    \n    # Convert the sorted numerical values back to text format\n    sorted_text_nums = [key for value in sorted_num_values for key, num in text_to_num.items() if num == value]\n    \n    # Return the sorted text numbers as a string\n    return ' '.join(sorted_text_nums)\n\n", "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    # Map text numbers to numerical values\n    text_to_num = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into individual numbers\n    num_list = numbers.split()\n    \n    # Map text numbers to numerical values\n    num_list = [text_to_num[num] for num in num_list]\n    \n    # Sort the numerical values\n    num_list.sort()\n    \n    # Map the sorted numerical values back to text numbers\n    num_to_text = {v: k for k, v in text_to_num.items()}\n    sorted_text_nums = [num_to_text[num] for num in num_list]\n    \n    # Join the sorted text numbers into a string and return it\n    return ' '.join(sorted_text_nums)\n", "from typing import List\n## main.py\n\ndef sort_numbers(text: str) -> str:\n    \"\"\"\n    Sorts the space-separated text of digits ranging from 'zero' to 'nine' in ascending order based on their numerical values.\n    \n    Args:\n        text: A string containing space-separated numbers ranging from 'zero' to 'nine'\n        \n    Returns:\n        A string with the numbers sorted in ascending order\n        \n    Examples:\n        sort_numbers('nine five one') => 'one five nine'\n        sort_numbers('zero two four') => 'zero two four'\n        sort_numbers('seven six three') => 'three six seven'\n    \"\"\"\n    numbers = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    words = text.split()\n    sorted_words = sorted(words, key=lambda x: numbers[x])\n    \n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(text: str) -> str:\n    \"\"\"\n    Sorts the space-separated text of digits ranging from 'zero' to 'nine' in ascending order based on their numerical values.\n    \n    Args:\n        text: A string containing space-separated text of digits ranging from 'zero' to 'nine'\n        \n    Returns:\n        str: A string with the input text sorted in ascending order based on numerical values\n    \"\"\"\n    numbers = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5', 'six': '6', 'seven': '7', 'eight': '8', 'nine': '9'}\n    words = text.split()\n    sorted_text = ' '.join(sorted(words, key=lambda x: numbers[x]))\n    return sorted_text\n", "from typing import List\n## main.py\n\ndef sort_numbers(text: str) -> str:\n    # Step 1: Split the input text into individual words\n    words = text.split()\n    \n    # Step 2: Map text-based numbers to their numerical values\n    text_to_num = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    nums = [text_to_num[word] for word in words]\n    \n    # Step 3: Sort the numerical values\n    sorted_nums = sorted(nums)\n    \n    # Step 4: Map the sorted numerical values back to text-based numbers for the final output\n    num_to_text = {v: k for k, v in text_to_num.items()}\n    sorted_words = [num_to_text[num] for num in sorted_nums]\n    \n    return ' '.join(sorted_words)\n", "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-separated text of digits ranging from 'zero' to 'nine'. Return the string with numbers sorted from smallest to largest.\n    >>> sort_numbers('three one five')\n        'one three five'\n    '''\n    # Dictionary to map textual representations of numbers to numerical values\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Convert the text of digits to numerical values\n    num_list = [word_to_num[word] for word in numbers.split()]\n    \n    # Sort the numbers in ascending order\n    sorted_nums = sorted(num_list)\n    \n    # Convert the sorted numbers back to textual representations\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    sorted_words = [num_to_word[num] for num in sorted_nums]\n    \n    # Return the sorted numbers as a string\n    return ' '.join(sorted_words)\n", "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-separated text of digits ranging from 'zero' to 'nine'. Return the string with numbers sorted from smallest to largest.\n    >>> sort_numbers('three one five')\n        'one three five'\n    '''\n    num_dict = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5', 'six': '6', 'seven': '7', 'eight': '8', 'nine': '9'}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: int(num_dict[x]))\n    return ' '.join(sorted_numbers)\n", "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-separated text of digits ranging from 'zero' to 'nine'. Return the string with numbers sorted from smallest to largest.\n    >>> sort_numbers('three one five')\n        'one three five'\n    '''\n    # Map textual numbers to numerical values\n    text_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Split the input string into individual numbers\n    num_list = numbers.split()\n    \n    # Map the textual numbers to their corresponding numerical values\n    num_values = [text_to_num[num] for num in num_list]\n    \n    # Sort the numerical values in ascending order\n    sorted_num_values = sorted(num_values)\n    \n    # Map the sorted numerical values back to their textual representation\n    num_to_text = {v: k for k, v in text_to_num.items()}\n    sorted_text_nums = [num_to_text[num] for num in sorted_num_values]\n    \n    # Join the sorted textual numbers into a string and return it\n    return ' '.join(sorted_text_nums)\n", "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    # Split the input string into a list of individual numbers\n    num_list = numbers.split()\n    \n    # Create a dictionary mapping text numbers to their corresponding integer values\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Convert each text number to its integer representation using the dictionary\n    int_list = [num_dict[num] for num in num_list]\n    \n    # Sort the list of integers\n    int_list.sort()\n    \n    # Create a dictionary mapping integer values to their corresponding text numbers\n    reverse_num_dict = {v: k for k, v in num_dict.items()}\n    \n    # Convert the sorted integers back to text numbers\n    sorted_num_list = [reverse_num_dict[num] for num in int_list]\n    \n    # Join the sorted text numbers into a single string and return it\n    return ' '.join(sorted_num_list)\n"], "plans": ["requirement pool:\n- Implement sorting algorithm for text numbers\n- Handle conversion of text numbers to integers\n- Develop error handling for invalid inputs\nWe will use the built-in Python library to convert text numbers to integers, sort them, and then convert them back to text format.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-separated text of digits ranging from 'zero' to 'nine''\n    Explanation: The input consists of numbers in text format from zero to nine, separated by spaces.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python library functions, the logic would involve:\n    1. Split the input string into a list of text numbers.\n    2. Convert the text numbers to integers.\n    3. Sort the integers.\n    4. Convert the sorted integers back to text format.\n    5. Return the sorted text numbers.\n\n# [edge case] \n    sort_numbers('one two three') = 'one two three'\n    Explanation: The input is already sorted, so the output remains the same.\n    \n    sort_numbers('nine eight seven') = 'seven eight nine'\n    Explanation: The input is in reverse order, and after sorting, it becomes 'seven eight nine'.\n    \n    sort_numbers('five five five') = 'five five five'\n    Explanation: All numbers are the same, so the output remains the same.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The sorting logic will handle all cases appropriately.\n", "requirement pool:\n- Implement sorting algorithm for text numbers\n- Handle edge cases like duplicate numbers\n- Optimize sorting efficiency for large inputs\nWe will use the built-in Python library to convert text numbers to numerical values, sort them, and then convert them back to text format.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'text numbers': Refers to numbers represented in words like 'zero', 'one', 'two', etc.\n    Explanation: The input consists of numbers represented as text instead of digits.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python library functions for conversion and sorting, the code logic would involve:\n    1. Split the input string into individual text numbers.\n    2. Convert text numbers to numerical values using a dictionary mapping.\n    3. Sort the numerical values.\n    4. Convert the sorted numerical values back to text format.\n    5. Return the sorted text numbers as a string.\n\n# [edge case] \n    sort_numbers('five five five') = 'five five five'\n    Explanation: All numbers are the same, so the output should be the same as the input.\n    sort_numbers('zero one two three four five six seven eight nine') = 'zero one two three four five six seven eight nine'\n    Explanation: All numbers are distinct, so the output should be in ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic should handle all scenarios correctly.\n", "requirement pool:\n- Implement sorting algorithm for text numbers\n- Handle conversion of text to numerical values\n- Develop error handling for invalid inputs\nWe will use the built-in Python library to convert text numbers to numerical values and then sort them using a sorting algorithm.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-separated text': Refers to a string where numbers are separated by spaces.\n    'digits ranging from ...': Specifies the valid choices for numbers in the input string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python library functions and sorting algorithms, the implementation can follow these steps:\n    - Split the input string into individual numbers.\n    - Map the text numbers to numerical values using a dictionary.\n    - Sort the numerical values.\n    - Map the sorted numerical values back to text numbers.\n    - Join the sorted text numbers into a string and return it.\n\n# [edge case] \n    sort_numbers('zero one two three four five six seven eight nine') = 'zero one two three four five six seven eight nine'\n    Explanation: All numbers are already in ascending order, so the output remains the same.\n    \n    sort_numbers('nine eight seven six five four three two one zero') = 'zero one two three four five six seven eight nine'\n    Explanation: All numbers are in descending order, and after sorting, they are in ascending order.\n\n    sort_numbers('five five five five five') = 'five five five five five'\n    Explanation: All numbers are the same, so the output remains unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The sorting algorithm will handle different scenarios effectively.\n", "requirement pool:\n- Implement sorting algorithm for text input of digits\n- Ensure correct mapping of text to numerical values\n- Optimize sorting process for improved performance\nWe will utilize the built-in Python libraries to efficiently sort the text input of digits in ascending order.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ascending order'\n    Explanation: It means sorting the numbers from smallest to largest based on their numerical values.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests utilizing built-in Python libraries for sorting, you can implement the code as follows:\n```python\ndef sort_numbers(text: str) -> str:\n    words = text.split()\n    numbers = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_words = sorted(words, key=lambda x: numbers[x])\n    return ' '.join(sorted_words)\n```\n\n# [edge case] \n    sort_numbers('nine five one') = 'one five nine'\n    Explanation: The input text contains numbers 'nine', 'five', and 'one'. Sorting them in ascending order based on their numerical values gives 'one five nine'.\n\n    sort_numbers('zero two four') = 'zero two four'\n    Explanation: The input text contains numbers 'zero', 'two', and 'four'. Since they are already in ascending order, the output remains the same.\n\n    sort_numbers('seven six three') = 'three six seven'\n    Explanation: The input text contains numbers 'seven', 'six', and 'three'. Sorting them in ascending order based on their numerical values gives 'three six seven'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers sorting the numbers correctly based on their numerical values.\n", "requirement pool:\n- Implement efficient sorting algorithm for text input\n- Ensure compatibility with various input formats\n- Optimize sorting performance for large datasets\nWe will utilize the built-in Python functions to efficiently sort the text input of digits from 'zero' to 'nine'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ascending order'\n    Explanation: It means sorting the numbers from smallest to largest based on their numerical values.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests utilizing built-in Python functions for sorting, the code logic can be implemented as follows:\n```python\ndef sort_numbers(text: str) -> str:\n    words = text.split()\n    numbers = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5', 'six': '6', 'seven': '7', 'eight': '8', 'nine': '9'}\n    sorted_text = ' '.join(sorted(words, key=lambda x: numbers[x]))\n    return sorted_text\n```\n\n# [edge case] \n    sort_numbers('one zero nine') = 'zero one nine'\n    Explanation: The input text contains all numbers from zero to nine, and sorting them in ascending order results in 'zero one nine'.\n    \n    sort_numbers('five five five') = 'five five five'\n    Explanation: Since all numbers are the same, the output remains the same as the input.\n\n    sort_numbers('two three one') = 'one two three'\n    Explanation: The numbers are sorted in ascending order, resulting in 'one two three'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic covers sorting the numbers correctly.\n", "requirement pool:\n- Implement sorting algorithm for text-based numbers\n- Ensure compatibility with various input formats\n- Optimize sorting performance for large datasets\nWe will utilize the built-in Python functions to split the input text, map text-based numbers to their corresponding numerical values, sort them, and then map them back to text-based numbers for the final output.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-separated text': Refers to a string where numbers are separated by spaces.\n    'digits ranging from 'zero' to 'nine'': Refers to the numbers 0 to 9 represented in text form.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using built-in Python functions to:\n    1. Split the input text into individual words.\n    2. Map text-based numbers to their numerical values.\n    3. Sort the numerical values.\n    4. Map the sorted numerical values back to text-based numbers for the final output.\n\n# [edge case] \n    sort_numbers('zero one two three four five six seven eight nine') = 'zero one two three four five six seven eight nine'\n    Explanation: All numbers are already in ascending order.\n    sort_numbers('nine eight seven six five four three two one zero') = 'zero one two three four five six seven eight nine'\n    Explanation: Numbers are in descending order, need to be sorted in ascending order.\n    sort_numbers('one one one one one') = 'one one one one one'\n    Explanation: All numbers are the same, should return the same order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should cover all scenarios.\n", "requirement pool:\n- Implement efficient sorting algorithm\n- Ensure input validation for numbers in words\n- Optimize sorting performance for large datasets\nWe will use the built-in Python library to convert words to numbers and then sort them accordingly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'digits': refers to numerical characters from 'zero' to 'nine'\n    'sorted': arranging the numbers in ascending order\n    Explanation: The core concept involves converting textual representations of numbers to numerical values and sorting them in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': indicates the lowest value in the sorted list\n    'largest': indicates the highest value in the sorted list\n    Explanation: These degree adverbs help in determining the order of sorting.\n\n# [code logic]\n    The plan suggests using a built-in Python library to convert words to numbers and then sorting them. The steps involve:\n    - Convert the text of digits to numerical values\n    - Sort the numbers in ascending order\n    - Return the sorted numbers as a string\n\n# [edge case] \n    sort_numbers('one two three') = 'one three two'\n    Explanation: The input contains duplicate numbers, and the output should have them sorted in ascending order.\n    sort_numbers('nine eight seven') = 'eight nine seven'\n    Explanation: The input has numbers in descending order, and the output should be sorted in ascending order.\n    sort_numbers('zero zero one') = 'one zero zero'\n    Explanation: The input includes multiple occurrences of the same number, and the output should have them sorted correctly.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python function 'sorted' to sort the numbers in the input string.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted'\n    Explanation: The core concept here is to sort the numbers in the input string from smallest to largest using the 'sorted' function in Python.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    As per the plan, we will use the 'sorted' function to sort the numbers in the input string. Here is the code logic:\n    ```python\n    def sort_numbers(numbers: str) -> str:\n        num_dict = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5', 'six': '6', 'seven': '7', 'eight': '8', 'nine': '9'}\n        sorted_numbers = sorted(numbers.split(), key=lambda x: int(num_dict[x]))\n        return ' '.join(sorted_numbers)\n    ```\n\n# [edge case] \n    sort_numbers('one two three') = 'one two three'\n    Explanation: The input string is already sorted, so the expected output remains the same.\n    \n    sort_numbers('five four two') = 'two four five'\n    Explanation: The input string is not sorted, and after sorting, the numbers are arranged from smallest to largest.\n\n    sort_numbers('nine eight seven') = 'seven eight nine'\n    Explanation: The input string contains numbers in descending order, and after sorting, they are arranged from smallest to largest.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers sorting the numbers correctly.\n", "requirement pool:\n- Implement efficient sorting algorithm\n- Ensure compatibility with all number inputs\n- Optimize user interface for clear display\nWe will utilize the built-in Python functions to efficiently sort the numbers provided as text.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'digits': refers to numerical characters from 'zero' to 'nine'\n    'sorted': arranging the numbers in ascending order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code:\n    - Split the input string into individual numbers\n    - Map the textual numbers to their corresponding numerical values\n    - Sort the numerical values in ascending order\n    - Map the sorted numerical values back to their textual representation\n    - Join the sorted textual numbers into a string and return it\n\n# [edge case] \n    sort_numbers('one two three') = 'one two three'\n    Explanation: The input is already sorted, so the output remains the same.\n    \n    sort_numbers('nine eight seven') = 'seven eight nine'\n    Explanation: The input is in descending order, and the function sorts it in ascending order.\n    \n    sort_numbers('zero five two') = 'zero two five'\n    Explanation: The input contains only three numbers, and they are sorted accordingly.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The sorting logic covers all scenarios.\n", "requirement pool:\n- Implement efficient sorting algorithm\n- Handle conversion of text numbers to integers\n- Develop error handling for invalid inputs\nWe will use the built-in Python library to convert text numbers to integers, sort them efficiently, and handle invalid inputs gracefully.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'space-separated text': Refers to a string where numbers are separated by spaces.\n    'digits ranging from ... to ...': Specifies the valid choices for numbers in the input string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the built-in Python library to convert text numbers to integers, sort them, and handle invalid inputs, the following logic can be implemented:\n    1. Split the input string into a list of individual numbers.\n    2. Create a dictionary mapping text numbers to their corresponding integer values.\n    3. Convert each text number to its integer representation using the dictionary.\n    4. Sort the list of integers.\n    5. Convert the sorted integers back to text numbers.\n    6. Join the sorted text numbers into a single string and return it.\n\n# [edge case] \n    sort_numbers('zero one two') = 'zero one two'\n    Explanation: The input is already sorted in ascending order, so the output remains the same.\n    \n    sort_numbers('five four three') = 'three four five'\n    Explanation: The input is in descending order, and the output should be sorted in ascending order.\n\n    sort_numbers('seven eight nine') = 'seven eight nine'\n    Explanation: The input is already sorted in ascending order, so the output remains the same.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should handle sorting the numbers correctly.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [121, 121, 121, 121, 121, 121, 121, 121, 121, 121], "completion": "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    # Split the input string into a list of individual numbers\n    num_list = numbers.split()\n    \n    # Create a dictionary mapping text numbers to their corresponding integer values\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Convert each text number to its integer representation using the dictionary\n    int_list = [num_dict[num] for num in num_list]\n    \n    # Sort the list of integers\n    int_list.sort()\n    \n    # Create a dictionary mapping integer values to their corresponding text numbers\n    reverse_num_dict = {v: k for k, v in num_dict.items()}\n    \n    # Convert the sorted integers back to text numbers\n    sorted_num_list = [reverse_num_dict[num] for num in int_list]\n    \n    # Join the sorted text numbers into a single string and return it\n    return ' '.join(sorted_num_list)\n", "passed": true, "pass": true, "pass_num": 10, "round": 716, "repair_prompt": ["def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-separated text of digits ranging from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "'''Input is a space-separated text of digits ranging from 'zero' to 'nine'. For this task, the text input should be sorted in ascending order based on their numerical values.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-separated text of digits ranging from 'zero' to 'nine'. Return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''"], "mutate_method": "rephrase_one", "parent_index": 244}
