{"task_id": "HumanEval/31", "prompt": "def is_prime(n):\t\n'''Return true if a given number is prime. A prime number is a natural number greater than 1 that has no divisors other than 1 and itself. Return false otherwise.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''", "entry_point": "is_prime", "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "test": ["def check(is_prime):\n\tassert is_prime(255520) == False", "def check(is_prime):\n\tassert is_prime(6) == False", "def check(is_prime):\n\tassert is_prime(85) == False", "def check(is_prime):\n\tassert is_prime(83) == True", "def check(is_prime):\n\tassert is_prime(82) == False", "def check(is_prime):\n\tassert is_prime(7) == True", "def check(is_prime):\n\tassert is_prime(13) == True", "def check(is_prime):\n\tassert is_prime(57) == False", "def check(is_prime):\n\tassert is_prime(81) == False", "def check(is_prime):\n\tassert is_prime(3) == True", "def check(is_prime):\n\tassert is_prime(104) == False", "def check(is_prime):\n\tassert is_prime(90) == False", "def check(is_prime):\n\tassert is_prime(88) == False", "def check(is_prime):\n\tassert is_prime(255344) == False", "def check(is_prime):\n\tassert is_prime(12) == False", "def check(is_prime):\n\tassert is_prime(14316) == False", "def check(is_prime):\n\tassert is_prime(12938) == False", "def check(is_prime):\n\tassert is_prime(8) == False", "def check(is_prime):\n\tassert is_prime(102) == False", "def check(is_prime):\n\tassert is_prime(12628) == False", "def check(is_prime):\n\tassert is_prime(61) == True", "def check(is_prime):\n\tassert is_prime(5 * 17) == False", "def check(is_prime):\n\tassert is_prime(98) == False", "def check(is_prime):\n\tassert is_prime(63) == False", "def check(is_prime):\n\tassert is_prime(19) == True", "def check(is_prime):\n\tassert is_prime(12884) == False", "def check(is_prime):\n\tassert is_prime(87) == False", "def check(is_prime):\n\tassert is_prime(89) == True", "def check(is_prime):\n\tassert is_prime(255139) == False", "def check(is_prime):\n\tassert is_prime(12897) == False", "def check(is_prime):\n\tassert is_prime(73) == True", "def check(is_prime):\n\tassert is_prime(1) == False", "def check(is_prime):\n\tassert is_prime(15) == False", "def check(is_prime):\n\tassert is_prime(75) == False", "def check(is_prime):\n\tassert is_prime(18) == False", "def check(is_prime):\n\tassert is_prime(96) == False", "def check(is_prime):\n\tassert is_prime(5) == True", "def check(is_prime):\n\tassert is_prime(9) == False", "def check(is_prime):\n\tassert is_prime(255046) == False", "def check(is_prime):\n\tassert is_prime(14) == False", "def check(is_prime):\n\tassert is_prime(78) == False", "def check(is_prime):\n\tassert is_prime(255214) == False", "def check(is_prime):\n\tassert is_prime(76) == False", "def check(is_prime):\n\tassert is_prime(2) == True", "def check(is_prime):\n\tassert is_prime(254873) == True", "def check(is_prime):\n\tassert is_prime(13441 * 19) == False", "def check(is_prime):\n\tassert is_prime(13796) == False", "def check(is_prime):\n\tassert is_prime(11) == True", "def check(is_prime):\n\tassert is_prime(14253) == False", "def check(is_prime):\n\tassert is_prime(100) == False", "def check(is_prime):\n\tassert is_prime(20) == False", "def check(is_prime):\n\tassert is_prime(58) == False", "def check(is_prime):\n\tassert is_prime(22) == False", "def check(is_prime):\n\tassert is_prime(17) == True", "def check(is_prime):\n\tassert is_prime(13481) == False", "def check(is_prime):\n\tassert is_prime(12832) == False", "def check(is_prime):\n\tassert is_prime(254513) == False", "def check(is_prime):\n\tassert is_prime(106) == False", "def check(is_prime):\n\tassert is_prime(16) == False", "def check(is_prime):\n\tassert is_prime(13441) == True", "def check(is_prime):\n\tassert is_prime(66) == False", "def check(is_prime):\n\tassert is_prime(65) == False", "def check(is_prime):\n\tassert is_prime(80) == False", "def check(is_prime):\n\tassert is_prime(11 * 7) == False", "def check(is_prime):\n\tassert is_prime(101) == True", "def check(is_prime):\n\tassert is_prime(103) == True", "def check(is_prime):\n\tassert is_prime(56) == False", "def check(is_prime):\n\tassert is_prime(254423) == False", "def check(is_prime):\n\tassert is_prime(254790) == False", "def check(is_prime):\n\tassert is_prime(4) == False"], "test_case_list": ["assert is_prime(255520) == False", "assert is_prime(6) == False", "assert is_prime(85) == False", "assert is_prime(83) == True", "assert is_prime(82) == False", "assert is_prime(7) == True", "assert is_prime(13) == True", "assert is_prime(57) == False", "assert is_prime(81) == False", "assert is_prime(3) == True", "assert is_prime(104) == False", "assert is_prime(90) == False", "assert is_prime(88) == False", "assert is_prime(255344) == False", "assert is_prime(12) == False", "assert is_prime(14316) == False", "assert is_prime(12938) == False", "assert is_prime(8) == False", "assert is_prime(102) == False", "assert is_prime(12628) == False", "assert is_prime(61) == True", "assert is_prime(5 * 17) == False", "assert is_prime(98) == False", "assert is_prime(63) == False", "assert is_prime(19) == True", "assert is_prime(12884) == False", "assert is_prime(87) == False", "assert is_prime(89) == True", "assert is_prime(255139) == False", "assert is_prime(12897) == False", "assert is_prime(73) == True", "assert is_prime(1) == False", "assert is_prime(15) == False", "assert is_prime(75) == False", "assert is_prime(18) == False", "assert is_prime(96) == False", "assert is_prime(5) == True", "assert is_prime(9) == False", "assert is_prime(255046) == False", "assert is_prime(14) == False", "assert is_prime(78) == False", "assert is_prime(255214) == False", "assert is_prime(76) == False", "assert is_prime(2) == True", "assert is_prime(254873) == True", "assert is_prime(13441 * 19) == False", "assert is_prime(13796) == False", "assert is_prime(11) == True", "assert is_prime(14253) == False", "assert is_prime(100) == False", "assert is_prime(20) == False", "assert is_prime(58) == False", "assert is_prime(22) == False", "assert is_prime(17) == True", "assert is_prime(13481) == False", "assert is_prime(12832) == False", "assert is_prime(254513) == False", "assert is_prime(106) == False", "assert is_prime(16) == False", "assert is_prime(13441) == True", "assert is_prime(66) == False", "assert is_prime(65) == False", "assert is_prime(80) == False", "assert is_prime(11 * 7) == False", "assert is_prime(101) == True", "assert is_prime(103) == True", "assert is_prime(56) == False", "assert is_prime(254423) == False", "assert is_prime(254790) == False", "assert is_prime(4) == False"], "nl": "Return true if a given number is prime, and false otherwise.\n    ", "func": "def is_prime(n):", "examples": ">>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    ", "completions": ["from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a number is a prime number.\n\n    Args:\n        n: An integer to check for primality.\n\n    Returns:\n        A boolean value indicating whether the input number is a prime number.\n    \"\"\"\n    \n    if n <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\nfrom sympy import isprime\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a given integer is a prime number.\n\n    Args:\n        n: An integer to check for primality.\n\n    Returns:\n        True if n is a prime number, False otherwise.\n    \"\"\"\n    return isprime(n)\n", "from typing import List\nimport math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a number is a prime number.\n\n    Args:\n        n: An integer to check if it is a prime number.\n\n    Returns:\n        A boolean value indicating whether the input number is a prime number or not.\n    \"\"\"\n    \n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n", "from typing import List\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a number is prime.\n\n    Args:\n    - n: an integer to check for primality\n\n    Returns:\n    - bool: True if n is prime, False otherwise\n    \"\"\"\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n", "from typing import List\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a number is prime.\n\n    Args:\n        n: integer input to check for primality\n\n    Returns:\n        True if n is prime, False otherwise\n    \"\"\"\n    if n < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a number is a prime number.\n\n    Args:\n    - n: an integer to check for primality\n\n    Returns:\n    - bool: True if n is prime, False otherwise\n    \"\"\"\n    \n    if n < 2:\n        return False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a number is a prime number.\n\n    Args:\n    - n: an integer to check for primality\n\n    Returns:\n    - bool: True if n is prime, False otherwise\n    \"\"\"\n\n    if n < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n", "from typing import List\nimport math\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    '''Return true if a given number is prime. A prime number is a natural number greater than 1 that has no divisors other than 1 and itself. Return false otherwise.'''\n    \n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n"], "plans": ["requirement pool:\n- Implement efficient prime number detection algorithm\n- Ensure correctness for all edge cases\n- Optimize for performance with large prime numbers\nWe will implement the is_prime function using a simple algorithm to efficiently identify prime numbers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that has no divisors other than 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greater than': Indicates that the number should be greater than 1.\n\n# [code logic]\n    Check if the number is less than or equal to 1, return False.\n    Iterate from 2 to the square root of the number.\n    If the number is divisible by any integer in that range, return False.\n    If no divisors are found, return True.\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it does not have exactly two divisors.\n    is_prime(2) = True\n    Explanation: 2 is the smallest prime number.\n    is_prime(4) = False\n    Explanation: 4 is not a prime number as it has divisors other than 1 and itself.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic covers all scenarios for prime number identification.\n", "requirement pool:\n- Implement efficient prime number checking algorithm\n- Ensure correctness for all edge cases\n- Optimize for performance with large prime numbers\nWe will use the standard Python libraries to implement a simple and efficient prime number checking function.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that has no divisors other than 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using standard Python libraries, you can implement the code using the sympy library which provides efficient prime number checking functions.\n\n```python\nfrom sympy import isprime\n\ndef is_prime(n):\n    return isprime(n)\n```\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it has divisors other than 1 and itself.\n    is_prime(2) = True\n    Explanation: 2 is the smallest prime number.\n    is_prime(13441) = False\n    Explanation: 13441 is not a prime number as it has divisors other than 1 and itself.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the sympy library efficiently handles prime number checking.\n", "requirement pool:\n- Implement efficient prime number detection algorithm\n- Ensure correctness of prime number identification\n- Optimize algorithm performance for large numbers\nWe will design a simple static Python function using basic arithmetic operations to efficiently check if a number is prime.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that has no divisors other than 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic arithmetic operations to efficiently check if a number is prime, the logic can be implemented as follows:\n    \n    1. Check if the number is less than 2, return False if it is.\n    2. Iterate from 2 to the square root of the number.\n    3. If the number is divisible by any integer in that range, return False.\n    4. If no divisors are found, return True.\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it does not have exactly two divisors.\n    is_prime(2) = True\n    Explanation: 2 is the smallest prime number.\n    is_prime(13441) = False\n    Explanation: 13441 is not a prime number as it has divisors other than 1 and itself.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the prime number check efficiently.\n", "requirement pool:\n- Implement efficient prime number detection algorithm\n- Handle edge cases like 1 and negative numbers\n- Optimize the function for performance\nWe will implement the is_prime function using a simple algorithm to efficiently identify prime numbers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that has no divisors other than 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will implement the is_prime function using a simple algorithm to efficiently identify prime numbers. \n    1. Check if the number is less than 2, return False if it is.\n    2. Iterate from 2 to the square root of the number.\n    3. If the number is divisible by any integer in that range, return False.\n    4. If no divisors are found, return True.\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it does not satisfy the definition of a prime number.\n    is_prime(2) = True\n    Explanation: 2 is the smallest prime number.\n    is_prime(4) = False\n    Explanation: 4 is not a prime number as it is divisible by 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the edge cases as well.\n", "requirement pool:\n- Implement efficient prime number checking algorithm\n- Ensure correctness in identifying prime numbers\n- Optimize the function for better performance\nWe will design a simple static Python function using basic mathematical operations to efficiently determine if a number is prime.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that has no divisors other than 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the number is less than 2, return False if it is.\n    Iterate from 2 to the square root of the number, check if the number is divisible by any number in this range.\n    If it is divisible, return False.\n    If no divisor is found, return True.\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it does not satisfy the definition of a prime number.\n    is_prime(2) = True\n    Explanation: 2 is the smallest prime number.\n    is_prime(4) = False\n    Explanation: 4 is not a prime number as it is divisible by 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic covers all scenarios for prime number determination.\n", "requirement pool:\n- Implement efficient prime number detection algorithm\n- Ensure correctness of prime number identification\n- Optimize performance for large prime numbers\nWe will design a simple static Python function using basic arithmetic operations to efficiently check if a number is prime.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that has no divisors other than 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the number is less than 2, return False if it is.\n    Iterate from 2 to the square root of the number, check if the number is divisible by any number in this range.\n    If it is divisible, return False. If not, return True.\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it does not satisfy the definition of a prime number.\n    is_prime(2) = True\n    Explanation: 2 is the smallest prime number.\n    is_prime(4) = False\n    Explanation: 4 is not a prime number as it is divisible by numbers other than 1 and itself.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios for prime number checking.\n", "requirement pool:\n- Implement efficient prime number detection algorithm\n- Handle edge cases like 1 and negative numbers\n- Ensure the function is well-documented for ease of use\nWe will implement the is_prime function using a simple algorithm to efficiently identify prime numbers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that has no divisors other than 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will implement the is_prime function using a simple algorithm to efficiently identify prime numbers.\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it does not have exactly two divisors.\n    is_prime(2) = True\n    Explanation: 2 is the smallest prime number.\n    is_prime(13441) = True\n    Explanation: 13441 is a prime number.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n < 2:\n            return False\n        (other code)\n", "requirement pool:\n- Implement efficient prime number checking algorithm\n- Ensure correctness in prime number identification\n- Optimize the function for better performance\nWe will implement the is_prime function using a simple algorithm to efficiently check for prime numbers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that has no divisors other than 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will implement the is_prime function using a simple algorithm to efficiently check for prime numbers.\n    1. Check if the number is less than 2, return False.\n    2. Iterate from 2 to the square root of the number.\n    3. If the number is divisible by any integer in that range, return False.\n    4. If no divisors are found, return True.\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it does not have exactly two divisors.\n    is_prime(2) = True\n    Explanation: 2 is the smallest prime number.\n    is_prime(4) = False\n    Explanation: 4 is not a prime number as it has divisors other than 1 and itself.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios for prime number checking.\n", "requirement pool:\n- Implement efficient prime number checking algorithm\n- Ensure correctness in prime number identification\n- Optimize algorithm performance for large numbers\nWe will design a simple static Python function to efficiently check if a number is prime.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that has no divisors other than 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the number is less than 2, return False if it is.\n    Iterate from 2 to the square root of the number, check if the number is divisible by any number in this range.\n    If it is divisible, return False as it is not a prime number.\n    If no divisors are found, return True as it is a prime number.\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it does not have exactly two divisors.\n    is_prime(2) = True\n    Explanation: 2 is the smallest prime number.\n    is_prime(4) = False\n    Explanation: 4 is not a prime number as it has divisors other than 1 and itself.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic covers all scenarios for prime number checking.\n", "requirement pool:\n- Implement efficient prime number detection logic\n- Ensure the function handles edge cases like 1 and negative numbers\n- Optimize the algorithm for better performance\nWe will design a simple static Python function to efficiently check if a number is prime using basic mathematical logic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'prime number'\n    Explanation: A prime number is a natural number greater than 1 that has no divisors other than 1 and itself.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions designing a simple static Python function to efficiently check if a number is prime using basic mathematical logic, the logic implementation should include:\n    - Check if the number is less than 2, return False\n    - Iterate from 2 to the square root of the number and check if there is any divisor\n    - If no divisor is found, return True (prime), otherwise return False\n\n# [edge case] \n    is_prime(1) = False\n    Explanation: 1 is not a prime number as it does not have exactly two divisors (1 and itself).\n    is_prime(2) = True\n    Explanation: 2 is the smallest prime number.\n    is_prime(13441) = False\n    Explanation: 13441 is not a prime number as it has divisors other than 1 and itself.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for prime numbers covers these cases effectively.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [70, 70, 70, 70, 70, 70, 70, 70, 70, 70], "completion": "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    '''Return true if a given number is prime. A prime number is a natural number greater than 1 that has no divisors other than 1 and itself. Return false otherwise.'''\n    \n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n", "passed": true, "pass": true, "pass_num": 10, "round": 473, "repair_prompt": ["def is_prime(n):\t\n'''Return true if a given number is prime. A prime number is a natural number greater than 1 that has no divisors other than 1 and itself. Return false otherwise.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''", "def is_prime(n):\t\n'''Return true if a given number is prime. A prime number is a natural number greater than 1 that has no divisors other than 1 and itself. Return false otherwise.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''\n\"Return true if a given number is prime. A prime number cannot have divisors other than 1 and itself, meaning it is only divisible by 1 and the number itself. Return false otherwise.\"", "def is_prime(n):\t\n'''Return true if a given number is prime. A prime number is a natural number greater than 1 that has no divisors other than 1 and itself, return false otherwise.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''"], "mutate_method": "expand_one2two", "parent_index": 145}
