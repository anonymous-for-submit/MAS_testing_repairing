{"task_id": "HumanEval/16", "prompt": "def count_distinct_characters(string: str) -> int:\t\n'''Given a string, determine how many unique characters are contained within it (ignoring case).\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''", "entry_point": "count_distinct_characters", "canonical_solution": "    return len(set(string.lower()))\n", "test": ["def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ADUyBFimKBrPz\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ljRgJlzHTQBAAbgwEl\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"lvPZKdAVLulCscvG\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"k\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"hqzz\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"kee\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ol\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"vc\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"mNuEPdroYuxj\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"iir\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"TjkfWbUyuBlElbU\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"wJUxzBTdbiANdnKbjnrMEqu\") == 16", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"xyxm\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"XJGLcPMiAJHh\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"urra\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"qslq\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"nInnuRSwrqxcojIIwy\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"DqmriBBthVs\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"GKKGkHiMc\") == 6", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"iTTDUEsZTXGRPVROVLAXHZF\") == 17", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"q\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"HOGRmvTANUhMvONn\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"CkCPdWkXENxGL\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"s iRxpKsyfxPoWQMD\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"EUMYPPMNBmwMUMf\") == 9", "def check(count_distinct_characters):\n\tassert count_distinct_characters('abcde') == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"txjolkwt\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"DZDQAWXHSw\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"gvXcdjVQzWEZOdtJSCpl\") == 15", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"dKmNZkVVglVIkueSlUQW\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"otaZOB Pyaztqcfd \") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"lnr\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"wKJjFHVncyJqtCJzyUD\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"TLQvGLpcjPHrCKFl\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"uqfitri\") == 6", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"IKihunRBNqFCI\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"jxc\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"jIqutIUuTqJkqvufly\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"RblfAbqWjlGb\") == 9", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"dCaNheOPBLJAAlmRiq\") == 15", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"j\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"HxlgTM upaEvXetVo\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"zntaswi\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"jzatha\") == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"tZuBlwhSlQLVugh\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"QbfkjShfzGeBKdoRMxcF\") == 16", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"gvRubuESIkrZ\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"esu\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ooj\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"femphduq\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"InXkmhzjgPkxGvmw\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"clGPOVWLcboDuAvmks\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"nzf\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"HYSpuFbvSsu\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"DOMJVxYZSmRvpWdYKm\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"aGkvHvzRTyirmeGZC\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"tASyULIbokwr\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"hxpxzqo\") == 6", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"cCaIjZBhhYWNDOiV\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters('aaaaAAAAaaaa') == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"jYnrJXIcXKGEZVo\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"bQxCKyKcntHHYeEXVj\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"iwrnzam\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"UIWbIZNIppW\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"OZcKqLtxovbrdMH\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"nvxkl\") == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"RvubWTBuPdEIKRDWAH\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ufqgMhqrauVyUULZkrjh\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"iZiIACOjGbab\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"LumPVjeiLbebI\") == 9", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"hjfLMEhQbeOopYBuToCxkJ\") == 16", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"r\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"atRLcmATkWMkiuMFjp\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"LnFlIbomxdvveccGHsakJ\") == 18", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"nHtVTgYRztQ\") == 9", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"pJdVyTwDKELVgUZIx\") == 15", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"uYQSGSfGa\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"b\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"FycYSU cvudKrbVisFTIlgl\") == 15", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"CHorbExVwH\") == 9", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"upir\") == 4", "def check(count_distinct_characters):\n\tassert count_distinct_characters('abcde' + 'cade' + 'CADE') == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"cGapAoOkAs\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"zn\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ka\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"MUOgmWwmwjWfcnVPba\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"rnnvtkti\") == 6", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"hdvzMhkHU ZWPT M\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"kxx\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"lcBMHAxSzIayT\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"wqu\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"kz\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ohtqe\") == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"smvgbMkhwLhoRln\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"tCXKMaJRhU\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"l\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"rrnjzpuu\") == 6", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"WfnXXAOonzYJHsFb\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"YOYqwkoPDfAxdiSTgveN\") == 17", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"nsv\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"agfbll\") == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"FUXHhvGoXRhkAxAZ\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"dvUoRAqoszDQJ\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ldz\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"yl\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"JmPaTrSczRkX\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"EMtSdVgYJlMwbj\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"n\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"dxofvtop\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"uwDWXwsJclzqiVYrtu\") == 15", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"t\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"QZnK QcEIfLoqkAuviX\") == 15", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"MtLuTBbVXUGUlJvca\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"FdvjkekrDvMxdP\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters('Jerry jERRY JeRRRY') == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"jwFRUyssbSoqWiO\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"VFKpqZXDMClGMFlrUL\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"otifwyf\") == 6", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"wdjtlARsrwKK\") == 9", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"pVOOHkDZJ\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"czcmhqowv\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"pqwv\") == 4", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"EYJKqrJyAm\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ffGJKHLgYtdrUNG\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"unkhr\") == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ozt\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"GbGqxgAwwHVqX\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"lio\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters('') == 0"], "test_case_list": ["assert count_distinct_characters(\"ADUyBFimKBrPz\") == 12", "assert count_distinct_characters(\"ljRgJlzHTQBAAbgwEl\") == 12", "assert count_distinct_characters(\"lvPZKdAVLulCscvG\") == 11", "assert count_distinct_characters(\"k\") == 1", "assert count_distinct_characters(\"hqzz\") == 3", "assert count_distinct_characters(\"kee\") == 2", "assert count_distinct_characters(\"ol\") == 2", "assert count_distinct_characters(\"vc\") == 2", "assert count_distinct_characters(\"mNuEPdroYuxj\") == 11", "assert count_distinct_characters(\"iir\") == 2", "assert count_distinct_characters(\"TjkfWbUyuBlElbU\") == 10", "assert count_distinct_characters(\"wJUxzBTdbiANdnKbjnrMEqu\") == 16", "assert count_distinct_characters(\"xyxm\") == 3", "assert count_distinct_characters(\"XJGLcPMiAJHh\") == 10", "assert count_distinct_characters(\"urra\") == 3", "assert count_distinct_characters(\"qslq\") == 3", "assert count_distinct_characters(\"nInnuRSwrqxcojIIwy\") == 12", "assert count_distinct_characters(\"DqmriBBthVs\") == 10", "assert count_distinct_characters(\"GKKGkHiMc\") == 6", "assert count_distinct_characters(\"iTTDUEsZTXGRPVROVLAXHZF\") == 17", "assert count_distinct_characters(\"q\") == 1", "assert count_distinct_characters(\"HOGRmvTANUhMvONn\") == 10", "assert count_distinct_characters(\"CkCPdWkXENxGL\") == 10", "assert count_distinct_characters(\"s iRxpKsyfxPoWQMD\") == 14", "assert count_distinct_characters(\"EUMYPPMNBmwMUMf\") == 9", "assert count_distinct_characters('abcde') == 5", "assert count_distinct_characters(\"txjolkwt\") == 7", "assert count_distinct_characters(\"DZDQAWXHSw\") == 8", "assert count_distinct_characters(\"gvXcdjVQzWEZOdtJSCpl\") == 15", "assert count_distinct_characters(\"dKmNZkVVglVIkueSlUQW\") == 14", "assert count_distinct_characters(\"otaZOB Pyaztqcfd \") == 12", "assert count_distinct_characters(\"lnr\") == 3", "assert count_distinct_characters(\"wKJjFHVncyJqtCJzyUD\") == 14", "assert count_distinct_characters(\"TLQvGLpcjPHrCKFl\") == 12", "assert count_distinct_characters(\"uqfitri\") == 6", "assert count_distinct_characters(\"IKihunRBNqFCI\") == 10", "assert count_distinct_characters(\"jxc\") == 3", "assert count_distinct_characters(\"jIqutIUuTqJkqvufly\") == 10", "assert count_distinct_characters(\"RblfAbqWjlGb\") == 9", "assert count_distinct_characters(\"dCaNheOPBLJAAlmRiq\") == 15", "assert count_distinct_characters(\"j\") == 1", "assert count_distinct_characters(\"HxlgTM upaEvXetVo\") == 13", "assert count_distinct_characters(\"zntaswi\") == 7", "assert count_distinct_characters(\"jzatha\") == 5", "assert count_distinct_characters(\"tZuBlwhSlQLVugh\") == 11", "assert count_distinct_characters(\"QbfkjShfzGeBKdoRMxcF\") == 16", "assert count_distinct_characters(\"gvRubuESIkrZ\") == 10", "assert count_distinct_characters(\"esu\") == 3", "assert count_distinct_characters(\"ooj\") == 2", "assert count_distinct_characters(\"femphduq\") == 8", "assert count_distinct_characters(\"InXkmhzjgPkxGvmw\") == 12", "assert count_distinct_characters(\"clGPOVWLcboDuAvmks\") == 14", "assert count_distinct_characters(\"nzf\") == 3", "assert count_distinct_characters(\"HYSpuFbvSsu\") == 8", "assert count_distinct_characters(\"DOMJVxYZSmRvpWdYKm\") == 13", "assert count_distinct_characters(\"aGkvHvzRTyirmeGZC\") == 13", "assert count_distinct_characters(\"tASyULIbokwr\") == 12", "assert count_distinct_characters(\"hxpxzqo\") == 6", "assert count_distinct_characters(\"cCaIjZBhhYWNDOiV\") == 13", "assert count_distinct_characters('aaaaAAAAaaaa') == 1", "assert count_distinct_characters(\"jYnrJXIcXKGEZVo\") == 13", "assert count_distinct_characters(\"bQxCKyKcntHHYeEXVj\") == 12", "assert count_distinct_characters(\"iwrnzam\") == 7", "assert count_distinct_characters(\"UIWbIZNIppW\") == 7", "assert count_distinct_characters(\"OZcKqLtxovbrdMH\") == 14", "assert count_distinct_characters(\"nvxkl\") == 5", "assert count_distinct_characters(\"RvubWTBuPdEIKRDWAH\") == 13", "assert count_distinct_characters(\"ufqgMhqrauVyUULZkrjh\") == 14", "assert count_distinct_characters(\"iZiIACOjGbab\") == 8", "assert count_distinct_characters(\"LumPVjeiLbebI\") == 9", "assert count_distinct_characters(\"hjfLMEhQbeOopYBuToCxkJ\") == 16", "assert count_distinct_characters(\"r\") == 1", "assert count_distinct_characters(\"atRLcmATkWMkiuMFjp\") == 13", "assert count_distinct_characters(\"LnFlIbomxdvveccGHsakJ\") == 18", "assert count_distinct_characters(\"nHtVTgYRztQ\") == 9", "assert count_distinct_characters(\"pJdVyTwDKELVgUZIx\") == 15", "assert count_distinct_characters(\"uYQSGSfGa\") == 7", "assert count_distinct_characters(\"b\") == 1", "assert count_distinct_characters(\"FycYSU cvudKrbVisFTIlgl\") == 15", "assert count_distinct_characters(\"CHorbExVwH\") == 9", "assert count_distinct_characters(\"upir\") == 4", "assert count_distinct_characters('abcde' + 'cade' + 'CADE') == 5", "assert count_distinct_characters(\"cGapAoOkAs\") == 7", "assert count_distinct_characters(\"zn\") == 2", "assert count_distinct_characters(\"ka\") == 2", "assert count_distinct_characters(\"MUOgmWwmwjWfcnVPba\") == 13", "assert count_distinct_characters(\"rnnvtkti\") == 6", "assert count_distinct_characters(\"hdvzMhkHU ZWPT M\") == 11", "assert count_distinct_characters(\"kxx\") == 2", "assert count_distinct_characters(\"lcBMHAxSzIayT\") == 12", "assert count_distinct_characters(\"wqu\") == 3", "assert count_distinct_characters(\"kz\") == 2", "assert count_distinct_characters(\"ohtqe\") == 5", "assert count_distinct_characters(\"smvgbMkhwLhoRln\") == 12", "assert count_distinct_characters(\"tCXKMaJRhU\") == 10", "assert count_distinct_characters(\"l\") == 1", "assert count_distinct_characters(\"rrnjzpuu\") == 6", "assert count_distinct_characters(\"WfnXXAOonzYJHsFb\") == 12", "assert count_distinct_characters(\"YOYqwkoPDfAxdiSTgveN\") == 17", "assert count_distinct_characters(\"nsv\") == 3", "assert count_distinct_characters(\"agfbll\") == 5", "assert count_distinct_characters(\"FUXHhvGoXRhkAxAZ\") == 11", "assert count_distinct_characters(\"dvUoRAqoszDQJ\") == 10", "assert count_distinct_characters(\"ldz\") == 3", "assert count_distinct_characters(\"yl\") == 2", "assert count_distinct_characters(\"JmPaTrSczRkX\") == 11", "assert count_distinct_characters(\"EMtSdVgYJlMwbj\") == 12", "assert count_distinct_characters(\"n\") == 1", "assert count_distinct_characters(\"dxofvtop\") == 7", "assert count_distinct_characters(\"uwDWXwsJclzqiVYrtu\") == 15", "assert count_distinct_characters(\"t\") == 1", "assert count_distinct_characters(\"QZnK QcEIfLoqkAuviX\") == 15", "assert count_distinct_characters(\"MtLuTBbVXUGUlJvca\") == 11", "assert count_distinct_characters(\"FdvjkekrDvMxdP\") == 10", "assert count_distinct_characters('Jerry jERRY JeRRRY') == 5", "assert count_distinct_characters(\"jwFRUyssbSoqWiO\") == 11", "assert count_distinct_characters(\"VFKpqZXDMClGMFlrUL\") == 14", "assert count_distinct_characters(\"otifwyf\") == 6", "assert count_distinct_characters(\"wdjtlARsrwKK\") == 9", "assert count_distinct_characters(\"pVOOHkDZJ\") == 8", "assert count_distinct_characters(\"czcmhqowv\") == 8", "assert count_distinct_characters(\"pqwv\") == 4", "assert count_distinct_characters(\"EYJKqrJyAm\") == 8", "assert count_distinct_characters(\"ffGJKHLgYtdrUNG\") == 12", "assert count_distinct_characters(\"unkhr\") == 5", "assert count_distinct_characters(\"ozt\") == 3", "assert count_distinct_characters(\"GbGqxgAwwHVqX\") == 8", "assert count_distinct_characters(\"lio\") == 3", "assert count_distinct_characters('') == 0"], "nl": " Given a string, find out how many distinct characters (regardless of case) does it consist of\n    ", "func": "def count_distinct_characters(string: str) -> int:", "examples": ">>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    ", "completions": ["from typing import List\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Count the number of distinct characters in a string in a case-insensitive manner.\n\n    Args:\n        string: A string input.\n\n    Returns:\n        int: The count of distinct characters in the input string.\n    \"\"\"\n    if not string:\n        return 0\n\n    unique_chars = set()\n    for char in string.lower():\n        unique_chars.add(char)\n\n    return len(unique_chars)\n", "from typing import List\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Count the number of distinct characters in a given string, considering case insensitivity.\n\n    Args:\n        string: A string in which unique characters need to be counted.\n\n    Returns:\n        int: The number of distinct characters in the string.\n\n    Examples:\n        >>> count_distinct_characters('')\n        0\n        >>> count_distinct_characters('aAaA')\n        2\n        >>> count_distinct_characters('12345')\n        5\n    \"\"\"\n    unique_chars = set(string.lower())  # Convert string to lowercase and create a set to remove duplicates\n    return len(unique_chars)\n", "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Count the number of distinct characters in a case-insensitive manner.\n\n    Args:\n        string: A string input to count distinct characters from.\n\n    Returns:\n        int: The count of distinct characters in the input string.\n    \"\"\"\n    # Convert the input string to lowercase to ensure case-insensitivity\n    lowercase_string = string.lower()\n    \n    # Use a set to store unique characters\n    unique_chars = set()\n    \n    # Iterate through each character in the lowercase string and add it to the set\n    for char in lowercase_string:\n        unique_chars.add(char)\n    \n    # Return the length of the set as the count of distinct characters\n    return len(unique_chars)\n", "from typing import List\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Count the number of distinct characters in a string, considering case-insensitivity.\n\n    Args:\n        string: A string input.\n\n    Returns:\n        int: The count of distinct characters in the string.\n    \"\"\"\n    unique_chars = set(string.lower())\n    return len(unique_chars)\n", "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Count the number of distinct characters in the input string (case-insensitive).\n\n    Args:\n    string: A string input to count distinct characters from.\n\n    Returns:\n    An integer representing the count of distinct characters in the input string.\n    \"\"\"\n    unique_chars = set()\n    for char in string.lower():\n        if char.isalpha():\n            unique_chars.add(char)\n    return len(unique_chars)\n", "from typing import List\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Count the number of distinct characters in a string, ignoring case.\n    \n    Args:\n        string: A string to count distinct characters from.\n        \n    Returns:\n        int: The number of distinct characters in the string.\n    \"\"\"\n    # Convert the string to lowercase to make it case-insensitive\n    string = string.lower()\n    \n    # Use a set to store unique characters\n    unique_chars = set(string)\n    \n    # Remove any non-alphabetic characters\n    unique_chars = {char for char in unique_chars if char.isalpha()}\n    \n    return len(unique_chars)\n", "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    ## Check for edge case\n    if not string:\n        return 0\n    \n    ## Convert string to lowercase to make it case-insensitive\n    string = string.lower()\n    \n    ## Use set to store unique characters\n    unique_chars = set(string)\n    \n    ## Return the count of unique characters\n    return len(unique_chars)\n", "from typing import List\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Count the number of distinct characters in a string while ensuring case insensitivity.\n\n    Args:\n        string: A string in which we need to count the distinct characters.\n\n    Returns:\n        int: The number of distinct characters in the string.\n\n    Examples:\n        >>> count_distinct_characters('')\n        0\n        >>> count_distinct_characters('aAaA')\n        1\n        >>> count_distinct_characters('12345')\n        5\n    \"\"\"\n    unique_chars = set(string.lower())\n    unique_chars.discard(' ')  # Remove spaces if needed\n    return len(unique_chars)\n", "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Count the number of distinct characters in a string while ensuring case insensitivity.\n\n    Args:\n        string: A string in which we need to count distinct characters.\n\n    Returns:\n        int: The number of distinct characters in the string.\n\n    Examples:\n        >>> count_distinct_characters('')\n        0\n        >>> count_distinct_characters('aAaA')\n        1\n        >>> count_distinct_characters('abcABC')\n        3\n    \"\"\"\n    unique_chars = set(string.lower())\n    unique_chars.discard(' ')  # Remove spaces if needed\n    return len(unique_chars)\n", "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Count the number of distinct characters in a case-insensitive manner.\n\n    Args:\n        string: A string input to count distinct characters from.\n\n    Returns:\n        int: The count of distinct characters in the input string.\n    \"\"\"\n    unique_chars = set()\n    for char in string.lower():\n        if char.isalpha():\n            unique_chars.add(char)\n    return len(unique_chars)\n"], "plans": ["requirement pool:\n- Implement efficient character counting algorithm\n- Ensure case insensitivity in character comparison\n- Optimize for performance to handle large strings\nWe will design a static Python function using basic string manipulation and the built-in set data structure to efficiently count unique characters in a case-insensitive manner.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: Refers to the different characters present in the string, considering case-insensitivity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic string manipulation and the set data structure, the following logic can be implemented:\n    1. Convert the input string to lowercase to ensure case-insensitivity.\n    2. Use a set to store unique characters.\n    3. Iterate through each character in the lowercase string.\n    4. Add each character to the set.\n    5. Return the length of the set as the count of distinct characters.\n\n# [edge case] \n    count_distinct_characters('') = 0\n    Explanation: When the input string is empty, there are no unique characters, so the expected output is 0.\n    count_distinct_characters('aAaA') = 1\n    Explanation: In this case, 'a' is considered as one unique character, so the expected output is 1.\n    count_distinct_characters('AbCdEf') = 6\n    Explanation: All characters are unique in this case, so the expected output is 6.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic covers scenarios where the input string is empty or contains different combinations of characters.\n", "requirement pool:\n- Implement a function that counts unique characters in a string\n- Ensure the counting is case-insensitive\n- Optimize the algorithm for efficiency\nWe will use the built-in Python libraries to efficiently count unique characters in a string while ensuring case insensitivity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: The core concept is to identify and count the number of distinct characters in a given string, considering case insensitivity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python libraries, the logic may involve utilizing functions like set() to remove duplicates and len() to count the unique characters efficiently.\n\n# [edge case] \n    count_distinct_characters('') = 0\n    Explanation: An empty string has no unique characters, so the expected output is 0.\n    count_distinct_characters('aAaA') = 2\n    Explanation: In this case, 'a' and 'A' are considered as two unique characters due to case insensitivity.\n    count_distinct_characters('12345') = 5\n    Explanation: All characters are distinct in this case.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The plan using built-in libraries should cover these scenarios effectively.\n", "requirement pool:\n- Implement a function to count distinct characters in a string\n- Ensure the counting is case-insensitive\n- Optimize the algorithm for efficient processing\nWe will design a simple static Python function using basic string manipulation and the built-in set data structure to efficiently count distinct characters in a case-insensitive manner.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: Refers to the different characters present in the string, considering case-insensitivity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic string manipulation and the set data structure, the following logic can be implemented:\n    1. Convert the input string to lowercase to ensure case-insensitivity.\n    2. Use a set to store unique characters.\n    3. Iterate through each character in the lowercase string and add it to the set.\n    4. Return the length of the set as the count of distinct characters.\n\n# [edge case] \n    count_distinct_characters('') = 0\n    Explanation: An empty string has no unique characters.\n    count_distinct_characters('aAaA') = 1\n    Explanation: Only one unique character 'a' is present in the string.\n    count_distinct_characters('AbCdEf') = 6\n    Explanation: All characters are unique in this case.\n\n# [extra code for edge case]\n    No extra code needed to handle the edge cases. The logic provided covers all scenarios appropriately.\n", "requirement pool:\n- Implement case-insensitive uniqueness check\n- Optimize algorithm for efficient character counting\n- Ensure accuracy in counting distinct characters\nWe will use the built-in Python libraries to efficiently count distinct characters in a string while ensuring case-insensitive uniqueness check.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: The core concept is to identify and count the distinct characters present in the given string, considering case-insensitivity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python libraries, the logic could involve converting the string to lowercase, converting it to a set to get unique characters, and then finding the length of the set to get the count of distinct characters.\n\n# [edge case] \n    count_distinct_characters('xyzXYZ') = 3\n    Explanation: The unique characters are 'x', 'y', and 'z' (case-insensitive), so the expected output is 3.\n    count_distinct_characters('Jerry') = 4\n    Explanation: The unique characters are 'j', 'e', 'r', and 'y' (case-insensitive), so the expected output is 4.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios.\n", "requirement pool:\n- Implement case-insensitive character counting logic\n- Optimize the algorithm for efficient counting\n- Handle edge cases like empty strings gracefully\nWe will use a simple approach to iterate through the input string, convert all characters to lowercase to ensure case-insensitivity, and store unique characters in a set to count them efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: The core concept is to identify and count the distinct characters present in the input string, considering case-insensitivity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will iterate through the input string, convert all characters to lowercase, and store unique characters in a set to efficiently count them.\n\n```python\ndef count_distinct_characters(string: str) -> int:\n    unique_chars = set()\n    for char in string.lower():\n        if char.isalpha():\n            unique_chars.add(char)\n    return len(unique_chars)\n```\n\n# [edge case] \n    count_distinct_characters('') = 0\n    Explanation: When the input string is empty, there are no unique characters, so the expected output is 0.\n    count_distinct_characters('AaAaA') = 1\n    Explanation: In this case, 'a' is the only unique character present in the input string.\n    count_distinct_characters('12345') = 0\n    Explanation: Since there are no alphabetic characters in the input string, the count of unique characters is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic covers scenarios where the input string is empty or contains non-alphabetic characters.\n", "requirement pool:\n- Implement a function that counts unique characters in a string\n- Ensure the function is case-insensitive for accurate counting\n- Optimize the function for efficiency and speed\nWe will design a simple Python function using basic string manipulation and the built-in set data structure to efficiently count distinct characters in a case-insensitive manner.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: The core concept is to identify and count the distinct characters present in the given string, considering case-insensitivity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    count_distinct_characters('') = 0\n    Explanation: An empty string has no unique characters, so the expected output is 0.\n    count_distinct_characters('aA') = 1\n    Explanation: Both 'a' and 'A' are considered the same character due to case-insensitivity, so the count is 1.\n    count_distinct_characters('abcABC') = 3\n    Explanation: There are three unique characters 'a', 'b', and 'c' in the string, ignoring case.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of counting distinct characters in a case-insensitive manner covers these scenarios.\n", "requirement pool:\n- Implement efficient character counting algorithm\n- Ensure case insensitivity in character comparison\n- Display the count of unique characters clearly\nWe will design a static Python function using basic string manipulation and the built-in set data structure to efficiently count distinct characters in a case-insensitive manner.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: Refers to the different characters present in the string, considering case-insensitivity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    count_distinct_characters('') = 0\n    Explanation: An empty string has no unique characters, so the expected output is 0.\n    count_distinct_characters('aA') = 1\n    Explanation: Both 'a' and 'A' are considered as the same character due to case-insensitivity, so the expected output is 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not string:\n            return 0\n        (other code)\n", "requirement pool:\n- Implement a function that counts unique characters in a string\n- Ensure the counting is case-insensitive\n- Optimize the algorithm for efficient processing\nWe will use the built-in Python libraries to efficiently count distinct characters in a string while ensuring case insensitivity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: Refers to the different characters present in the string, considering case insensitivity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python libraries, the logic may involve converting the string to lowercase, converting it to a set to get unique characters, and then finding the length of the set.\n\n# [edge case] \n    count_distinct_characters('') = 0\n    Explanation: An empty string has no unique characters.\n    count_distinct_characters('aAaA') = 1\n    Explanation: Only one unique character 'a' is present in the string.\n    count_distinct_characters('12345') = 5\n    Explanation: All characters are unique in this case.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic should cover all scenarios effectively.\n", "requirement pool:\n- Implement efficient character counting algorithm\n- Ensure case insensitivity in character comparison\n- Display the count of unique characters clearly\nWe will use the built-in Python libraries to efficiently count distinct characters in a string while ensuring case insensitivity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: Refers to the different characters present in the string, considering case insensitivity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python libraries, the logic could involve converting the string to lowercase, converting it to a set to get unique characters, and then finding the length of the set.\n\n# [edge case] \n    count_distinct_characters('') = 0\n    Explanation: An empty string has no unique characters.\n    count_distinct_characters('aAaA') = 1\n    Explanation: Only one unique character 'a' is present in the string.\n    count_distinct_characters('abcABC') = 3\n    Explanation: Three unique characters 'a', 'b', 'c' are present in the string.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic should cover all scenarios appropriately.\n", "requirement pool:\n- Implement efficient character counting algorithm\n- Ensure case insensitivity in character comparison\n- Handle edge cases like empty strings gracefully\nWe will design a simple static Python function using basic string manipulation and the built-in set data structure to efficiently count distinct characters in a case-insensitive manner.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: The core concept is to identify and count the number of distinct characters present in the given string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic string manipulation and the set data structure, the following logic can be implemented:\n    1. Convert the input string to lowercase to make the comparison case-insensitive.\n    2. Use a set to store unique characters.\n    3. Iterate through each character in the string and add it to the set.\n    4. Return the length of the set as the count of distinct characters.\n\n# [edge case] \n    count_distinct_characters('') = 0\n    Explanation: When the input string is empty, there are no unique characters, so the expected output is 0.\n    count_distinct_characters('aA') = 1\n    Explanation: Both 'a' and 'A' are considered the same character when ignoring case, so there is only one unique character in this case.\n    count_distinct_characters('abAB') = 2\n    Explanation: There are two unique characters 'a' and 'b' in the string.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers handling empty strings and case-insensitive comparisons.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 0.9457, 0.9457, 1.0, 0.9457, 0.9457, 0.9457], "pass_results": [true, true, true, true, false, false, true, false, false, false], "pass_test_cases_num": [129, 129, 129, 129, 122, 122, 129, 122, 122, 122], "completion": "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Count the number of distinct characters in a case-insensitive manner.\n\n    Args:\n        string: A string input to count distinct characters from.\n\n    Returns:\n        int: The count of distinct characters in the input string.\n    \"\"\"\n    unique_chars = set()\n    for char in string.lower():\n        if char.isalpha():\n            unique_chars.add(char)\n    return len(unique_chars)\n", "passed": true, "pass": true, "pass_num": 5, "round": 235, "repair_prompt": ["def count_distinct_characters(string: str) -> int:\t\n'''Given a string, determine how many unique characters are contained within it (ignoring case).\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''", "def count_distinct_characters(string: str) -> int:\t\n'''Given a string, determine how many unique characters are contained within it (ignoring case).\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''\n    # Given a string, determine how many unique characters are contained within it (ignoring case) and return the count.\n    # The input string is case-insensitive, so 'X' and 'x' are treated as the same character in the count.", "def count_distinct_characters(string: str) -> int:\t\n'''Given a string, determine how many unique characters are contained within it (ignoring case).\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''"], "mutate_method": "rephrase_one", "parent_index": 264}
