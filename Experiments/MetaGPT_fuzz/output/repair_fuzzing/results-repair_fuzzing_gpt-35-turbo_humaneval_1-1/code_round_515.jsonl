{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    Ensure to handle edge cases such as an empty list or a list with only one element.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "entry_point": "pairs_sum_to_zero", "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "test": ["def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 11, -3, 6, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 7, -4, 1, 1, 11]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 11, 0, 3, 6, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 14, 0, 5, 2, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 2, 3, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 2, 9, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 14, 1, 8, 6, 36]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 9, 0, 8, 5, 9]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -6, 7, 1, 32]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, -2, 3]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 10, 0, 6, 5, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 1, -2, 2]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 2, -1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 4, -2, 5, 5, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 5, -3, 3]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 3, -4, 5]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 4, -5, 4, 1, 25]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 6, -4, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 5, 2, 4, 1, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 14, 0, 1, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 8, -5, 3, 7, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 9, -9, 2, 7, 11]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 7, -1, 2, 1, 28]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 6, -7, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 9, 2, 3, 4, 30]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 6, 1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 1, 3, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 5, 8, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 7, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, 10, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 13, -5, 7, 7, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 5, -10, 2, 10, 9]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 1, 8]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 7, 4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 9, -5, 4, 6, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 6, 2, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 2, 1, 11]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 2, 7, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 5, 2, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 14, -2, 8, 2, 35]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 5, 0]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 8, 4, 3, 7, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 12, 1, 9, 6, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 11, 1, 6, 6, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 11, -3, 8, 7, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 10, -4, 8, 6, 26]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 7, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, -4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 12, -4, 7, 1, 36]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 12, 1, 6, 7, 25]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 11, -3, 6, 2, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 13, -2, 7, 3, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -10, 5, 10, 9]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 1, 3, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 8, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 14, 2, 4, 6, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, 1, 12]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 5, -6, 8, 1, 33]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 7, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 14, -6, 5, 1, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 4, -1, 5, 10, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 13, -2, 4, 4, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 2, 6, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 4, -1, 5, 3, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 3, 1, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([7, 5, -1, 1, 8, 10]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 4, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 7, 3, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 12, -3, 2, 6, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 9, -3, 6, 7, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 7, -9, 5, 4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 6, 0, 6, 3, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 7, 8, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -1, 8, 8, 12]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 8, 1, 1, 6, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 14, 1, 8, 2, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 6, -5, 7, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 4, -7, 1, 2, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 11, -6, 5, 7, 36]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 14, 0, 5, 1, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 9, -1, 7, 4, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 3, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 10, 2, 9, 3, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 4, 1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, -2, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 10, -2, 2, 4, 33]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 9, -8, 6, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 7, -4, 4, 2, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 4, 10, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([7, 8, -10, 7, 2, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 8, 0, 4, 5, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 14, -4, 5, 6, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 12, 1, 8, 6, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 12, -6, 6, 7, 29]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, 1, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 8, -4, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 2, 1, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 4, 3, 6, 2, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 11, -4, 3, 5, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 9, 2, 1, 6, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 13, -4, 6, 3, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, 0, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 5, -2, 3, 1, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, -1, 8, 8, 4]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 2, 2, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, 1, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 6, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 14, 3, 6, 2, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 13, -2, 8, 7, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, 3, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 8, -1, 7, 6, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 12, 0, 1, 7, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 3, 6, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 6, -8, 1, 2, 8]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 8, -3, 9, 5, 29]) == False"], "test_case_list": ["assert pairs_sum_to_zero([1, 11, -3, 6, 7, 30]) == False", "assert pairs_sum_to_zero([3, 7, -4, 1, 1, 11]) == False", "assert pairs_sum_to_zero([-8, 11, 0, 3, 6, 26]) == False", "assert pairs_sum_to_zero([1, 14, 0, 5, 2, 34]) == False", "assert pairs_sum_to_zero([1, 2, 3, 7]) == False", "assert pairs_sum_to_zero([4, 2, 9, 3]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "assert pairs_sum_to_zero([3]) == False", "assert pairs_sum_to_zero([-1, 14, 1, 8, 6, 36]) == True", "assert pairs_sum_to_zero([3, 9, 0, 8, 5, 9]) == False", "assert pairs_sum_to_zero([1, 4, -6, 7, 1, 32]) == False", "assert pairs_sum_to_zero([2, 8, -2, 3]) == True", "assert pairs_sum_to_zero([-2, 10, 0, 6, 5, 30]) == False", "assert pairs_sum_to_zero([3, 1, -2, 2]) == True", "assert pairs_sum_to_zero([3, 2, -1, 2]) == False", "assert pairs_sum_to_zero([-1, 4, -2, 5, 5, 27]) == False", "assert pairs_sum_to_zero([1]) == False", "assert pairs_sum_to_zero([6, 5, -3, 3]) == True", "assert pairs_sum_to_zero([4, 3, -4, 5]) == True", "assert pairs_sum_to_zero([-2, 4, -5, 4, 1, 25]) == False", "assert pairs_sum_to_zero([2, 6, -4, 5]) == False", "assert pairs_sum_to_zero([-7, 5, 2, 4, 1, 26]) == False", "assert pairs_sum_to_zero([-8, 14, 0, 1, 7, 30]) == False", "assert pairs_sum_to_zero([1, 8, -5, 3, 7, 35]) == False", "assert pairs_sum_to_zero([6, 9, -9, 2, 7, 11]) == True", "assert pairs_sum_to_zero([-8, 7, -1, 2, 1, 28]) == True", "assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "assert pairs_sum_to_zero([6, 6, -7, 6]) == False", "assert pairs_sum_to_zero([-4, 9, 2, 3, 4, 30]) == True", "assert pairs_sum_to_zero([1, 6, 1, 2]) == False", "assert pairs_sum_to_zero([5, 1, 3, 5]) == False", "assert pairs_sum_to_zero([4, 5, 8, 3]) == False", "assert pairs_sum_to_zero([6, 7, 2, 5]) == False", "assert pairs_sum_to_zero([2, 8, 10, 3]) == False", "assert pairs_sum_to_zero([1, 13, -5, 7, 7, 27]) == False", "assert pairs_sum_to_zero([4, 5, -10, 2, 10, 9]) == True", "assert pairs_sum_to_zero([2, 3, 1, 8]) == False", "assert pairs_sum_to_zero([1, 7, 4, 6]) == False", "assert pairs_sum_to_zero([2, 9, -5, 4, 6, 30]) == False", "assert pairs_sum_to_zero([4, 6, 2, 4]) == False", "assert pairs_sum_to_zero([5, 2, 1, 11]) == False", "assert pairs_sum_to_zero([5, 2, 7, 3]) == False", "assert pairs_sum_to_zero([5, 5, 2, 2]) == False", "assert pairs_sum_to_zero([-8, 14, -2, 8, 2, 35]) == True", "assert pairs_sum_to_zero([1, 3, 5, 0]) == False", "assert pairs_sum_to_zero([-1, 8, 4, 3, 7, 29]) == False", "assert pairs_sum_to_zero([2, 12, 1, 9, 6, 33]) == False", "assert pairs_sum_to_zero([-4, 11, 1, 6, 6, 28]) == False", "assert pairs_sum_to_zero([0, 11, -3, 8, 7, 26]) == False", "assert pairs_sum_to_zero([-8, 10, -4, 8, 6, 26]) == True", "assert pairs_sum_to_zero([2]) == False", "assert pairs_sum_to_zero([2, 3, 7, 1]) == False", "assert pairs_sum_to_zero([6, 1, -4, 6]) == False", "assert pairs_sum_to_zero([-2, 12, -4, 7, 1, 36]) == False", "assert pairs_sum_to_zero([2, 12, 1, 6, 7, 25]) == False", "assert pairs_sum_to_zero([-4, 11, -3, 6, 2, 27]) == False", "assert pairs_sum_to_zero([0, 13, -2, 7, 3, 31]) == False", "assert pairs_sum_to_zero([1, 4, -10, 5, 10, 9]) == True", "assert pairs_sum_to_zero([4, 1, 3, 7]) == False", "assert pairs_sum_to_zero([6, 8, 2, 5]) == False", "assert pairs_sum_to_zero([-7, 14, 2, 4, 6, 30]) == False", "assert pairs_sum_to_zero([1, 5, 1, 12]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "assert pairs_sum_to_zero([-1, 5, -6, 8, 1, 33]) == True", "assert pairs_sum_to_zero([2, 3, 7, 4]) == False", "assert pairs_sum_to_zero([0, 14, -6, 5, 1, 35]) == False", "assert pairs_sum_to_zero([5, 4, -1, 5, 10, 6]) == False", "assert pairs_sum_to_zero([0, 13, -2, 4, 4, 28]) == False", "assert pairs_sum_to_zero([2, 2, 6, 4]) == False", "assert pairs_sum_to_zero([0, 4, -1, 5, 3, 33]) == False", "assert pairs_sum_to_zero([3, 3, 1, 4]) == False", "assert pairs_sum_to_zero([7, 5, -1, 1, 8, 10]) == True", "assert pairs_sum_to_zero([1, 3, 4, 3]) == False", "assert pairs_sum_to_zero([5, 7, 3, 4]) == False", "assert pairs_sum_to_zero([-7, 12, -3, 2, 6, 29]) == False", "assert pairs_sum_to_zero([-4, 9, -3, 6, 7, 31]) == False", "assert pairs_sum_to_zero([4, 7, -9, 5, 4, 6]) == False", "assert pairs_sum_to_zero([-4, 6, 0, 6, 3, 26]) == False", "assert pairs_sum_to_zero([4]) == False", "assert pairs_sum_to_zero([2, 7, 8, 5]) == False", "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "assert pairs_sum_to_zero([1, 4, -1, 8, 8, 12]) == True", "assert pairs_sum_to_zero([-3, 8, 1, 1, 6, 31]) == False", "assert pairs_sum_to_zero([-6, 14, 1, 8, 2, 28]) == False", "assert pairs_sum_to_zero([-3, 6, -5, 7, 7, 30]) == False", "assert pairs_sum_to_zero([3, 4, -7, 1, 2, 3]) == False", "assert pairs_sum_to_zero([-8, 11, -6, 5, 7, 36]) == False", "assert pairs_sum_to_zero([-7, 14, 0, 5, 1, 28]) == False", "assert pairs_sum_to_zero([-5, 9, -1, 7, 4, 34]) == False", "assert pairs_sum_to_zero([1, 3, 3, 5]) == False", "assert pairs_sum_to_zero([-5, 10, 2, 9, 3, 33]) == False", "assert pairs_sum_to_zero([2, 4, 1, 2]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "assert pairs_sum_to_zero([1, 3, -2, 1]) == False", "assert pairs_sum_to_zero([2, 10, -2, 2, 4, 33]) == True", "assert pairs_sum_to_zero([3, 9, -8, 6, 2, 5]) == False", "assert pairs_sum_to_zero([-6, 7, -4, 4, 2, 32]) == True", "assert pairs_sum_to_zero([3, 4, 10, 1]) == False", "assert pairs_sum_to_zero([7, 8, -10, 7, 2, 4]) == False", "assert pairs_sum_to_zero([-6, 8, 0, 4, 5, 27]) == False", "assert pairs_sum_to_zero([-6, 14, -4, 5, 6, 32]) == True", "assert pairs_sum_to_zero([-5, 12, 1, 8, 6, 31]) == False", "assert pairs_sum_to_zero([-3, 12, -6, 6, 7, 29]) == True", "assert pairs_sum_to_zero([1, 5, 1, 3]) == False", "assert pairs_sum_to_zero([5, 8, -4, 5]) == False", "assert pairs_sum_to_zero([3, 2, 1, 6]) == False", "assert pairs_sum_to_zero([-5, 4, 3, 6, 2, 27]) == False", "assert pairs_sum_to_zero([-1, 11, -4, 3, 5, 28]) == False", "assert pairs_sum_to_zero([-7, 9, 2, 1, 6, 34]) == False", "assert pairs_sum_to_zero([-1, 13, -4, 6, 3, 28]) == False", "assert pairs_sum_to_zero([6, 1, 0, 3]) == False", "assert pairs_sum_to_zero([-5, 5, -2, 3, 1, 32]) == True", "assert pairs_sum_to_zero([1, 5, -1, 8, 8, 4]) == True", "assert pairs_sum_to_zero([1, 2, 2, 2]) == False", "assert pairs_sum_to_zero([6]) == False", "assert pairs_sum_to_zero([2, 8, 1, 4]) == False", "assert pairs_sum_to_zero([2, 6, 2, 5]) == False", "assert pairs_sum_to_zero([2, 14, 3, 6, 2, 29]) == False", "assert pairs_sum_to_zero([-5, 13, -2, 8, 7, 35]) == False", "assert pairs_sum_to_zero([6, 1, 3, 2]) == False", "assert pairs_sum_to_zero([5]) == False", "assert pairs_sum_to_zero([-4, 8, -1, 7, 6, 26]) == False", "assert pairs_sum_to_zero([-4, 12, 0, 1, 7, 28]) == False", "assert pairs_sum_to_zero([5, 3, 6, 7]) == False", "assert pairs_sum_to_zero([4, 6, -8, 1, 2, 8]) == True", "assert pairs_sum_to_zero([-4, 8, -3, 9, 5, 29]) == False"], "nl": "\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    ", "func": "def pairs_sum_to_zero(l):", "examples": ">>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    ", "completions": ["from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    if len(l) < 2:\n        return False\n    \n    num_set = set()\n    for num in l:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    Ensure to handle edge cases such as an empty list or a list with only one element.\n    '''\n    \n    if len(l) < 2:\n        return False\n    \n    seen = set()\n    \n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    Ensure to handle edge cases such as an empty list or a list with only one element.\n    '''\n    \n    if len(l) < 2:\n        return False\n    \n    seen = set()\n    \n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(numbers: List[int]) -> bool:\n    ## Check if there are multiple zeros in the list\n    if numbers.count(0) > 1:\n        return True\n    \n    ## Check for distinct elements that sum up to zero\n    unique_numbers = set(numbers)\n    for num in unique_numbers:\n        if -num in unique_numbers:\n            return True\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef pairs_sum_to_zero(numbers: List[int]) -> bool:\n    if numbers.count(0) >= 2:\n        return True\n    \n    numbers.sort()\n    left, right = 0, len(numbers) - 1\n    \n    while left < right:\n        current_sum = numbers[left] + numbers[right]\n        if current_sum == 0:\n            return True\n        elif current_sum < 0:\n            left += 1\n        else:\n            right -= 1\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport itertools\n\ndef pairs_sum_to_zero(numbers: List[int]) -> bool:\n    ## Generate all possible pairs of elements from the input list\n    pairs = list(itertools.combinations(numbers, 2))\n    \n    ## Check if any pair sums up to zero\n    for pair in pairs:\n        if sum(pair) == 0:\n            return True\n    \n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input, returns True if there are two distinct elements that sum to zero, and False otherwise.\n    Ensure to handle edge cases such as an empty list or a list with only one element.\n    '''\n    \n    if len(l) < 2:\n        return False\n    \n    seen = set()\n    \n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input, returns True if there are two distinct elements that sum to zero, and False otherwise.\n    Ensure to handle edge cases such as an empty list or a list with only one element.\n    '''\n    \n    if len(l) < 2:\n        return False\n    \n    seen = set()\n    \n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n", "from typing import List\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero takes a list of integers as an input, returns True if there are two distinct elements that sum to zero, and False otherwise.\n    Ensure to handle edge cases such as an empty list or a list with only one element.\n    '''\n    \n    if len(l) < 2:\n        return False\n    \n    seen = set()\n    \n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    if len(l) < 2:\n        return False\n    \n    num_set = set()\n    \n    for num in l:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n    \n    return False\n"], "plans": ["We will use a simple approach to iterate through the list and check if the negative of each element exists in the list using a set.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum to zero'\n    Explanation: It means finding two distinct elements in the list that add up to zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will iterate through the list and check if the negative of each element exists in the list using a set.\n\n# [edge case] \n    pairs_sum_to_zero([0]) = False\n    Explanation: There is only one element in the list, so it's impossible to find two distinct elements that sum to zero.\n    pairs_sum_to_zero([]) = False\n    Explanation: The list is empty, so there are no elements to check for summing to zero.\n    pairs_sum_to_zero([1, -1]) = True\n    Explanation: Both 1 and -1 exist in the list and sum to zero.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(l) < 2:\n            return False\n        (other code)\n", "requirement analysis:\nThe function should efficiently determine if there exist two distinct elements in the list that sum to zero. It must handle edge cases like empty lists or single-element lists. Accuracy and reliability are crucial for the success of the function.\nrequirement pool:\n- Efficiently identify pairs of integers that sum to zero\n- Handle edge cases such as empty lists or single-element lists\n- Ensure accurate and reliable results\nWe will design a static Python function using basic logic to efficiently identify pairs of integers that sum to zero. We will handle edge cases such as empty lists or single-element lists without using any external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum to zero'\n    Explanation: It means finding two distinct elements in the list that add up to zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic logic to efficiently identify pairs of integers that sum to zero, we can follow the steps provided in the plan.\n\n# [edge case] \n    pairs_sum_to_zero([]) = False\n    Explanation: An empty list does not contain any elements, so it's impossible to find two distinct elements that sum to zero.\n    pairs_sum_to_zero([0]) = False\n    Explanation: With only one element in the list, there are no two distinct elements to sum to zero.\n    pairs_sum_to_zero([0, 0]) = True\n    Explanation: Both elements are 0, and they sum up to zero.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(l) < 2:\n            return False\n        (other code)\n", "requirement pool:\n- Implement efficient algorithm to find pairs summing to zero\n- Handle edge cases like empty lists or single-element lists\n- Ensure the function returns True only for distinct elements summing to zero\nWe will design a static Python function using basic logic to efficiently identify pairs of integers that sum to zero. We will handle edge cases such as empty lists or single-element lists, and ensure the function returns True only if there are two distinct elements that sum to zero. We will not use any class definition for this implementation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum to zero'\n    Explanation: It means finding two distinct elements in the list whose sum equals zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic logic to identify pairs of integers that sum to zero, we can follow the steps provided in the plan to implement the code.\n\n# [edge case] \n    pairs_sum_to_zero([0, 0]) = True\n    Explanation: In this case, the distinct elements 0 and 0 sum up to zero, so the expected output is True.\n    pairs_sum_to_zero([1, -1]) = True\n    Explanation: Here, the distinct elements 1 and -1 sum up to zero, so the expected output is True.\n    pairs_sum_to_zero([1, 2, 3, -5]) = True\n    Explanation: The distinct elements -5 and 5 sum up to zero, so the expected output is True.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(l) < 2:\n            return False\n        (other code)\n", "requirement pool:\n- Implement pairs_sum_to_zero function to accurately identify zero-sum pairs\n- Optimize algorithm for better performance on large integer lists\n- Ensure the function handles edge cases like empty lists or single element lists\nWe will design a simple static Python function using basic logic to efficiently determine if there are pairs summing up to zero in a list of integers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct elements'\n    Explanation: It means that the elements should be different from each other.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\n\n# [edge case] \n    pairs_sum_to_zero([0, 0, 0]) = True\n    Explanation: In this case, there are multiple zeros in the list, and any pair of zeros can sum up to zero.\n    pairs_sum_to_zero([1, 2, 3, -6]) = False\n    Explanation: Although the sum of 3 and -6 is zero, they are not distinct elements.\n    pairs_sum_to_zero([0, 1, -1]) = True\n    Explanation: Both 1 and -1 are distinct elements that sum up to zero.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if numbers.count(0) > 1:\n            return True\n        (other code)\n", "requirement pool:\n- Implement pairs_sum_to_zero function\n- Ensure function handles both positive and negative numbers\n- Optimize algorithm for scalability\nWe will utilize the two-pointer technique to efficiently find pairs that sum up to zero.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'two distinct elements': Refers to two different elements in the list.\n    'add up to zero': Implies that the sum of the two distinct elements should be zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Utilize the two-pointer technique to efficiently find pairs that sum up to zero.\n\n# [edge case] \n    pairs_sum_to_zero([0, 0, 0, 0]) = True\n    Explanation: In this case, there are multiple zeros in the list, and any pair of zeros will sum up to zero.\n    pairs_sum_to_zero([1, 2, 3, 4]) = False\n    Explanation: None of the distinct elements in the list can sum up to zero.\n    pairs_sum_to_zero([1, -1, 2, -2]) = True\n    Explanation: The pairs (-1, 1) and (-2, 2) sum up to zero.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        To handle the edge case where there are multiple zeros in the list, we can check if the count of zeros is greater than or equal to 2. If so, return True.\n", "requirement pool:\n- Implement pairs_sum_to_zero function\n- Handle edge cases like empty list or single element list\n- Optimize algorithm for better performance\nWe will use the built-in itertools library in Python to efficiently generate all possible pairs of elements in the input list and check if any pair sums up to zero.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct elements'\n    Explanation: It means that the elements in the list should be different from each other.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using itertools library to generate all possible pairs, the code logic would involve:\n    - Importing itertools library\n    - Generating all possible pairs of elements from the input list\n    - Checking if any pair sums up to zero\n    - Returning True if such elements exist, False otherwise\n\n# [edge case] \n    pairs_sum_to_zero([0, 0, 0]) = True\n    Explanation: In this case, there are multiple zeros in the list, and any pair of zeros will sum up to zero.\n    pairs_sum_to_zero([1, 2, 3, 4]) = False\n    Explanation: None of the distinct elements in the list can form a pair that sums up to zero.\n    pairs_sum_to_zero([1, -1, 0]) = True\n    Explanation: The pair (-1, 1) sums up to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should cover all scenarios.\n", "requirement pool:\n- Implement a function that efficiently checks for pairs summing to zero\n- Handle edge cases like empty lists or single-element lists\n- Ensure the function is optimized for performance\nWe will design a simple static Python function using basic logic to efficiently check for pairs of integers that sum to zero. We will handle edge cases such as empty lists or single-element lists without using any external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum to zero'\n    Explanation: It means finding two distinct elements in the list whose sum equals zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    pairs_sum_to_zero([]) = False\n    Explanation: An empty list does not contain any elements, so it's impossible to find two distinct elements that sum to zero.\n    pairs_sum_to_zero([0]) = False\n    Explanation: With only one element in the list, there are no two distinct elements to sum to zero.\n    pairs_sum_to_zero([1, -1]) = True\n    Explanation: Both 1 and -1 are distinct elements in the list that sum to zero.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(l) < 2:\n            return False\n        (other code)\n", "requirement pool:\n- Implement the pairs_sum_to_zero function to accurately identify pairs summing to zero\n- Handle edge cases such as empty lists or single-element lists\n- Ensure the function returns True only if there are two distinct elements that sum to zero\nWe will design a simple static Python function using basic logic to efficiently identify pairs of integers that sum to zero. We will handle edge cases such as empty lists or single-element lists within the function.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum to zero'\n    Explanation: The core concept is to find two distinct elements in the list that sum up to zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\n\n# [edge case] \n    pairs_sum_to_zero([0, 0]) = True\n    Explanation: In this edge case, the list contains two zeros which sum up to zero, so the expected output is True.\n    \n    pairs_sum_to_zero([1, -1]) = True\n    Explanation: In this edge case, the list contains 1 and -1 which sum up to zero, so the expected output is True.\n    \n    pairs_sum_to_zero([]) = False\n    Explanation: In this edge case, the list is empty, so there are no elements to sum up to zero, hence the expected output is False.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(l) < 2:\n            return False\n        (other code)\n", "requirement pool:\n- Implement a function that efficiently detects pairs summing to zero\n- Ensure the function handles edge cases like empty lists or single elements\n- Optimize the function for speed and accuracy\nWe will design a simple static Python function using basic logic to efficiently detect pairs of integers that sum to zero. We will handle edge cases such as empty lists or single-element lists without using any external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct elements'\n    Explanation: It refers to different elements in the list, not repeated elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\n\n# [edge case] \n    pairs_sum_to_zero([]) = False\n    Explanation: An empty list does not contain any elements, so it's impossible to have two distinct elements that sum to zero.\n    pairs_sum_to_zero([0]) = False\n    Explanation: With only one element in the list, there are no two distinct elements to sum to zero.\n    pairs_sum_to_zero([0, 0]) = True\n    Explanation: Although there are repeated elements, the two zeros can sum to zero.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(l) < 2:\n            return False\n        (other code)\n", "We will use a simple approach to iterate through the list and check if the negative of each element exists in the list using a set.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum to zero'\n    Explanation: It means finding two distinct elements in the list that add up to zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will iterate through the list and check if the negative of each element exists in the list using a set.\n\n# [edge case] \n    pairs_sum_to_zero([0]) = False\n    Explanation: There is only one element in the list, so it's impossible to find two distinct elements that sum to zero.\n    pairs_sum_to_zero([1, -1]) = True\n    Explanation: Both 1 and -1 exist in the list, and they sum up to zero.\n    pairs_sum_to_zero([]) = False\n    Explanation: The list is empty, so there are no elements to check for summing to zero.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(l) < 2:\n            return False\n        (other code)\n"], "scores": [1.0, 1.0, 1.0, 0.873, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, false, true, true, true, true, true, true], "pass_test_cases_num": [126, 126, 126, 110, 126, 126, 126, 126, 126, 126], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    if len(l) < 2:\n        return False\n    \n    num_set = set()\n    \n    for num in l:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n    \n    return False\n", "passed": true, "pass": true, "pass_num": 9, "round": 515, "repair_prompt": ["def pairs_sum_to_zero(l):\t\n'''\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    Ensure to handle edge cases such as an empty list or a list with only one element.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "pairs_sum_to_zero takes a list of integers as an input and determines if there exist two distinct elements in the list that add up to zero.\nit returns True if such elements exist, and False otherwise.", "def pairs_sum_to_zero(l):\t\n'''\n    pairs_sum_to_zero takes a list of integers as an input, returns True if there are two distinct elements that sum to zero, and False otherwise.\n    Ensure to handle edge cases such as an empty list or a list with only one element.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 484}
