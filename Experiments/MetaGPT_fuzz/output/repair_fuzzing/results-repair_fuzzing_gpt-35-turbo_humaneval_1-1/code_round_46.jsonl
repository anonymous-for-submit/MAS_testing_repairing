{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if the elements of the list are either consistently increasing or consistently decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "completions": ["from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the elements of the list are either consistently increasing or consistently decreasing.'''\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the elements of the list are either consistently increasing or consistently decreasing.'''\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    \n    return increasing or decreasing or (not increasing and not decreasing)\n", "from typing import List\n## monotonic_function.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the elements of the list are either consistently increasing or consistently decreasing.'''\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:  # Check for increasing sequence\n            decreasing = False\n        elif l[i] < l[i-1]:  # Check for decreasing sequence\n            increasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the elements of the list are either consistently increasing or consistently decreasing.'''\n    return l == sorted(l) or l == sorted(l, reverse=True)\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the elements of the list are either consistently increasing or consistently decreasing.'''\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the elements of the list are either consistently increasing or consistently decreasing.'''\n    \n    return l == sorted(l) or l == sorted(l, reverse=True)\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the elements of the list are either consistently increasing or consistently decreasing.'''\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the elements of the list are either consistently increasing or consistently decreasing.'''\n    \n    if len(l) <= 1:\n        return True\n    \n    # Check if the list is sorted in ascending order\n    if l == sorted(l):\n        return True\n    # Check if the list is sorted in descending order\n    elif l == sorted(l, reverse=True):\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the elements of the list are either consistently increasing or consistently decreasing.'''\n    \n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the elements of the list are either consistently increasing or consistently decreasing.'''\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n"], "plans": ["requirement analysis:\nThe function should efficiently determine if a list is monotonic, handling both increasing and decreasing sequences. It should have a clear and concise implementation to ensure ease of use and accuracy.\nrequirement pool:\n- Implement efficient monotonicity check for both increasing and decreasing sequences\n- Optimize performance for large input lists\n- Ensure accurate results for all types of input lists\nWe will use the built-in functions in Python to efficiently check the monotonicity of a list without the need for defining a class. We will iterate through the list once to determine if it is either consistently increasing or consistently decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consistently increasing or consistently decreasing'\n    Explanation: The core concept here is to check if the elements in the list are either always increasing or always decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in functions in Python to efficiently check monotonicity, we can implement the code as follows:\n```python\ndef monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n```\n\n# [edge case] \n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The list is consistently increasing.\n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The list is consistently decreasing.\n    monotonic([1, 20, 4, 10]) = False\n    Explanation: The list is neither consistently increasing nor consistently decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.\n", "requirement analysis:\nThe requirement is to create a function that determines if a list is monotonic, either increasing or decreasing. The function should return True if the list is monotonic and False otherwise. The function needs to handle both increasing and decreasing monotonicity cases.\nrequirement pool:\n- Implement a function that checks if a list is consistently increasing\n- Implement a function that checks if a list is consistently decreasing\n- Optimize the function for performance on large input lists\n- Ensure the function handles edge cases like empty lists\n- Provide clear documentation and examples for ease of use\nWe will design a simple static Python function using basic logic to efficiently determine if a list is monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consistently increasing or consistently decreasing'\n    Explanation: The core concept here is to check if the elements in the list are either always increasing or always decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is to design a simple static Python function using basic logic, the code logic should involve iterating through the list and checking if the elements are consistently increasing or decreasing.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is consistently increasing.\n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is consistently decreasing.\n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not consistently increasing or decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic should be sufficient to handle all scenarios.\n", "requirement analysis:\nThe main requirement is to accurately determine if a given list is monotonic, whether in increasing or decreasing order. Performance optimization is crucial, especially for large input lists. Clear documentation and test cases are necessary for reliability.\nrequirement pool:\n- Efficiently identify monotonic lists\n- Handle various list sizes effectively\n- Optimize performance for large input lists\nWe will design a static Python function using basic logic to efficiently determine if a list is monotonic. We will leverage the simplicity of the Python language and avoid using any classes to keep the architecture straightforward.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consistently increasing or consistently decreasing'\n    Explanation: The core concept here is to check if the elements in the list are either always increasing or always decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\n\n# [edge case] \n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The list is consistently increasing.\n    \n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The list is consistently decreasing.\n    \n    monotonic([1, 20, 4, 10]) = False\n    Explanation: The list is not consistently increasing or decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for monotonicity can handle all scenarios.\n", "requirement pool:\n- Implement efficient monotonicity check algorithm\n- Handle edge cases like empty lists or single-element lists\n- Ensure clear documentation for ease of use\nWe will design a simple static Python function using basic logic to efficiently determine if a list is monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consistently increasing or consistently decreasing'\n    Explanation: The core concept is to check if the elements in the list are either always increasing or always decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is sorted in either ascending or descending order. If it is, return True; otherwise, return False.\n\n```python\ndef monotonic(l: list) -> bool:\n    return l == sorted(l) or l == sorted(l, reverse=True)\n```\n\n# [edge case] \n    monotonic([1, 2, 3, 4]) = True\n    Explanation: The list is consistently increasing.\n    monotonic([4, 3, 2, 1]) = True\n    Explanation: The list is consistently decreasing.\n    monotonic([1, 3, 2, 4]) = False\n    Explanation: The list is not consistently increasing or decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic covers all scenarios.\n", "requirement pool:\n- Implement efficient monotonicity check algorithm\n- Ensure the function handles edge cases correctly\n- Document the function with clear examples and explanations\nWe will design a static Python function using basic logic and built-in functions to efficiently check if a list is monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consistently increasing or consistently decreasing'\n    Explanation: The core concept here is to determine if the elements in the list are either always increasing or always decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'clear': indicates that the mathematical definition provides a clear distinction between monotonic and non-monotonic functions.\n\n# [code logic]\n    Check if the list is strictly increasing or strictly decreasing. If it is, return True; otherwise, return False.\n\n    ```python\n    def monotonic(l: list):\n        increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n        decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n        return increasing or decreasing\n    ```\n\n# [edge case] \n    monotonic([1, 2, 3, 4]) = True\n    Explanation: The list is consistently increasing, so the expected output is True.\n    \n    monotonic([4, 3, 2, 1]) = True\n    Explanation: The list is consistently decreasing, so the expected output is True.\n    \n    monotonic([1, 2, 1, 4]) = False\n    Explanation: The list is not consistently increasing or decreasing, so the expected output is False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.\n", "requirement analysis:\nThe main goal is to efficiently determine if a given list is monotonic, ensuring accuracy and performance optimization. The function should handle both increasing and decreasing monotonicity. It should be able to process large input lists without significant performance degradation.\nrequirement pool:\n- Implement efficient monotonicity check algorithm\n- Ensure accurate identification of monotonic lists\n- Optimize performance for large input lists\nWe will design a static Python function using a simple algorithm to efficiently determine if a given list is monotonic. We will leverage the built-in functions in Python to achieve accurate identification of monotonic lists and optimize performance for large input lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consistently increasing or consistently decreasing'\n    Explanation: The core concept is to check if the elements in the list are either always increasing or always decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is sorted in either ascending or descending order. If the list is equal to the sorted list in ascending order or equal to the sorted list in descending order, return True, else return False.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is consistently increasing.\n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is consistently decreasing.\n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not consistently increasing or decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios of increasing, decreasing, and non-monotonic lists.\n", "requirement pool:\n- Implement efficient monotonic function\n- Ensure accuracy in monotonicity detection\n- Optimize performance for large datasets\nWe will design a static Python function using the built-in functions to efficiently determine if a list is monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consistently increasing or consistently decreasing'\n    Explanation: The core concept here is to check if the elements in the list are either always increasing or always decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using built-in functions to efficiently determine if a list is monotonic, the code logic can be implemented as follows:\n```python\ndef monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n```\n\n# [edge case] \n    monotonic([1, 2, 3, 4]) = True\n    Explanation: The list is consistently increasing, so the function should return True.\n    monotonic([4, 3, 2, 1]) = True\n    Explanation: The list is consistently decreasing, so the function should return True.\n    monotonic([1, 2, 1, 4]) = False\n    Explanation: The list is not consistently increasing or decreasing, so the function should return False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios of consistently increasing or decreasing lists.\n", "requirement pool:\n- Implement efficient monotonicity check algorithm\n- Handle both increasing and decreasing monotonic lists\n- Optimize performance for large input lists\nWe will design a simple static Python function using appropriate open-source libraries to efficiently determine if a list is monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consistently increasing or consistently decreasing'\n    Explanation: The core concept here is to check if the elements in the list are either always increasing or always decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is sorted in either ascending or descending order. If the list is equal to the sorted list in ascending order or equal to the sorted list in descending order, return True, else return False.\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered to be both consistently increasing and decreasing.\n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are the same, so it is considered both increasing and decreasing.\n    monotonic([5, 4, 3, 2, 1]) = True\n    Explanation: The list is consistently decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic covers the edge cases as well.\n", "requirement pool:\n- Implement efficient monotonicity check algorithm\n- Ensure accuracy in determining monotonic sequences\n- Optimize performance for large input lists\nWe will design a static Python function using appropriate open-source libraries to efficiently check for monotonic sequences in a list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consistently increasing or consistently decreasing'\n    Explanation: The core concept is to determine if the elements in the list are either always increasing or always decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using open-source libraries, the logic may involve utilizing functions from libraries like NumPy or Pandas to check for monotonic sequences efficiently.\n\n# [edge case] \n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are the same, so it is considered as consistently increasing.\n    monotonic([4, 3, 2, 1]) = True\n    Explanation: Elements are consistently decreasing.\n    monotonic([1, 2, 1, 2]) = False\n    Explanation: The sequence is not consistently increasing or decreasing.\n\n# [extra code for edge case]\n    We may need extra code to handle the edge cases depending on the library functions used for checking monotonicity. Additional checks may be required to handle specific edge cases.\n", "requirement pool:\n- Implement a function that accurately determines if a list is monotonic\n- Ensure the function can handle both increasing and decreasing monotonic lists\n- Optimize the function's performance for large input lists\nWe will design a static Python function using appropriate open-source libraries to efficiently determine if a list is monotonic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consistently increasing or consistently decreasing'\n    Explanation: The core concept here is to check if the elements in the list are either always increasing or always decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is sorted in ascending order or descending order. If it is either of them, return True, otherwise return False.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is consistently increasing.\n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is consistently decreasing.\n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is neither consistently increasing nor consistently decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for monotonicity covers all scenarios.\n"], "scores": [1.0, 0.2478, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, false, true, true, true, true, true, true, true, true], "pass_test_cases_num": [113, 28, 113, 113, 113, 113, 113, 113, 113, 113], "completion": "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if the elements of the list are either consistently increasing or consistently decreasing.'''\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "passed": true, "pass": true, "pass_num": 9, "round": 46, "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if the elements of the list are either consistently increasing or consistently decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "def monotonic(l: list):\t\n'''Return True if the elements of the list are either consistently increasing or consistently decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    Mathematical definition provides a clear distinction between monotonic functions and non-monotonic functions.'''\n", "def monotonic(l: list):\t\n'''Return True if the elements of the list are either consistently increasing or consistently decreasing.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "mutate_method": "rephrase_one", "parent_index": 46}
