{"task_id": "HumanEval/16", "prompt": "def count_distinct_characters(string: str) -> int:\t\n'''Given a string, determine the number of unique characters it contains, ignoring case.\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''", "entry_point": "count_distinct_characters", "canonical_solution": "    return len(set(string.lower()))\n", "test": ["def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ADUyBFimKBrPz\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ljRgJlzHTQBAAbgwEl\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"lvPZKdAVLulCscvG\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"k\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"hqzz\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"kee\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ol\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"vc\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"mNuEPdroYuxj\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"iir\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"TjkfWbUyuBlElbU\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"wJUxzBTdbiANdnKbjnrMEqu\") == 16", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"xyxm\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"XJGLcPMiAJHh\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"urra\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"qslq\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"nInnuRSwrqxcojIIwy\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"DqmriBBthVs\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"GKKGkHiMc\") == 6", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"iTTDUEsZTXGRPVROVLAXHZF\") == 17", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"q\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"HOGRmvTANUhMvONn\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"CkCPdWkXENxGL\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"s iRxpKsyfxPoWQMD\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"EUMYPPMNBmwMUMf\") == 9", "def check(count_distinct_characters):\n\tassert count_distinct_characters('abcde') == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"txjolkwt\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"DZDQAWXHSw\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"gvXcdjVQzWEZOdtJSCpl\") == 15", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"dKmNZkVVglVIkueSlUQW\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"otaZOB Pyaztqcfd \") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"lnr\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"wKJjFHVncyJqtCJzyUD\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"TLQvGLpcjPHrCKFl\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"uqfitri\") == 6", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"IKihunRBNqFCI\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"jxc\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"jIqutIUuTqJkqvufly\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"RblfAbqWjlGb\") == 9", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"dCaNheOPBLJAAlmRiq\") == 15", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"j\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"HxlgTM upaEvXetVo\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"zntaswi\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"jzatha\") == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"tZuBlwhSlQLVugh\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"QbfkjShfzGeBKdoRMxcF\") == 16", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"gvRubuESIkrZ\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"esu\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ooj\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"femphduq\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"InXkmhzjgPkxGvmw\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"clGPOVWLcboDuAvmks\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"nzf\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"HYSpuFbvSsu\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"DOMJVxYZSmRvpWdYKm\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"aGkvHvzRTyirmeGZC\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"tASyULIbokwr\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"hxpxzqo\") == 6", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"cCaIjZBhhYWNDOiV\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters('aaaaAAAAaaaa') == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"jYnrJXIcXKGEZVo\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"bQxCKyKcntHHYeEXVj\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"iwrnzam\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"UIWbIZNIppW\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"OZcKqLtxovbrdMH\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"nvxkl\") == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"RvubWTBuPdEIKRDWAH\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ufqgMhqrauVyUULZkrjh\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"iZiIACOjGbab\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"LumPVjeiLbebI\") == 9", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"hjfLMEhQbeOopYBuToCxkJ\") == 16", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"r\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"atRLcmATkWMkiuMFjp\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"LnFlIbomxdvveccGHsakJ\") == 18", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"nHtVTgYRztQ\") == 9", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"pJdVyTwDKELVgUZIx\") == 15", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"uYQSGSfGa\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"b\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"FycYSU cvudKrbVisFTIlgl\") == 15", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"CHorbExVwH\") == 9", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"upir\") == 4", "def check(count_distinct_characters):\n\tassert count_distinct_characters('abcde' + 'cade' + 'CADE') == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"cGapAoOkAs\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"zn\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ka\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"MUOgmWwmwjWfcnVPba\") == 13", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"rnnvtkti\") == 6", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"hdvzMhkHU ZWPT M\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"kxx\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"lcBMHAxSzIayT\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"wqu\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"kz\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ohtqe\") == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"smvgbMkhwLhoRln\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"tCXKMaJRhU\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"l\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"rrnjzpuu\") == 6", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"WfnXXAOonzYJHsFb\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"YOYqwkoPDfAxdiSTgveN\") == 17", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"nsv\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"agfbll\") == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"FUXHhvGoXRhkAxAZ\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"dvUoRAqoszDQJ\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ldz\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"yl\") == 2", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"JmPaTrSczRkX\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"EMtSdVgYJlMwbj\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"n\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"dxofvtop\") == 7", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"uwDWXwsJclzqiVYrtu\") == 15", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"t\") == 1", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"QZnK QcEIfLoqkAuviX\") == 15", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"MtLuTBbVXUGUlJvca\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"FdvjkekrDvMxdP\") == 10", "def check(count_distinct_characters):\n\tassert count_distinct_characters('Jerry jERRY JeRRRY') == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"jwFRUyssbSoqWiO\") == 11", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"VFKpqZXDMClGMFlrUL\") == 14", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"otifwyf\") == 6", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"wdjtlARsrwKK\") == 9", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"pVOOHkDZJ\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"czcmhqowv\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"pqwv\") == 4", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"EYJKqrJyAm\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ffGJKHLgYtdrUNG\") == 12", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"unkhr\") == 5", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"ozt\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"GbGqxgAwwHVqX\") == 8", "def check(count_distinct_characters):\n\tassert count_distinct_characters(\"lio\") == 3", "def check(count_distinct_characters):\n\tassert count_distinct_characters('') == 0"], "test_case_list": ["assert count_distinct_characters(\"ADUyBFimKBrPz\") == 12", "assert count_distinct_characters(\"ljRgJlzHTQBAAbgwEl\") == 12", "assert count_distinct_characters(\"lvPZKdAVLulCscvG\") == 11", "assert count_distinct_characters(\"k\") == 1", "assert count_distinct_characters(\"hqzz\") == 3", "assert count_distinct_characters(\"kee\") == 2", "assert count_distinct_characters(\"ol\") == 2", "assert count_distinct_characters(\"vc\") == 2", "assert count_distinct_characters(\"mNuEPdroYuxj\") == 11", "assert count_distinct_characters(\"iir\") == 2", "assert count_distinct_characters(\"TjkfWbUyuBlElbU\") == 10", "assert count_distinct_characters(\"wJUxzBTdbiANdnKbjnrMEqu\") == 16", "assert count_distinct_characters(\"xyxm\") == 3", "assert count_distinct_characters(\"XJGLcPMiAJHh\") == 10", "assert count_distinct_characters(\"urra\") == 3", "assert count_distinct_characters(\"qslq\") == 3", "assert count_distinct_characters(\"nInnuRSwrqxcojIIwy\") == 12", "assert count_distinct_characters(\"DqmriBBthVs\") == 10", "assert count_distinct_characters(\"GKKGkHiMc\") == 6", "assert count_distinct_characters(\"iTTDUEsZTXGRPVROVLAXHZF\") == 17", "assert count_distinct_characters(\"q\") == 1", "assert count_distinct_characters(\"HOGRmvTANUhMvONn\") == 10", "assert count_distinct_characters(\"CkCPdWkXENxGL\") == 10", "assert count_distinct_characters(\"s iRxpKsyfxPoWQMD\") == 14", "assert count_distinct_characters(\"EUMYPPMNBmwMUMf\") == 9", "assert count_distinct_characters('abcde') == 5", "assert count_distinct_characters(\"txjolkwt\") == 7", "assert count_distinct_characters(\"DZDQAWXHSw\") == 8", "assert count_distinct_characters(\"gvXcdjVQzWEZOdtJSCpl\") == 15", "assert count_distinct_characters(\"dKmNZkVVglVIkueSlUQW\") == 14", "assert count_distinct_characters(\"otaZOB Pyaztqcfd \") == 12", "assert count_distinct_characters(\"lnr\") == 3", "assert count_distinct_characters(\"wKJjFHVncyJqtCJzyUD\") == 14", "assert count_distinct_characters(\"TLQvGLpcjPHrCKFl\") == 12", "assert count_distinct_characters(\"uqfitri\") == 6", "assert count_distinct_characters(\"IKihunRBNqFCI\") == 10", "assert count_distinct_characters(\"jxc\") == 3", "assert count_distinct_characters(\"jIqutIUuTqJkqvufly\") == 10", "assert count_distinct_characters(\"RblfAbqWjlGb\") == 9", "assert count_distinct_characters(\"dCaNheOPBLJAAlmRiq\") == 15", "assert count_distinct_characters(\"j\") == 1", "assert count_distinct_characters(\"HxlgTM upaEvXetVo\") == 13", "assert count_distinct_characters(\"zntaswi\") == 7", "assert count_distinct_characters(\"jzatha\") == 5", "assert count_distinct_characters(\"tZuBlwhSlQLVugh\") == 11", "assert count_distinct_characters(\"QbfkjShfzGeBKdoRMxcF\") == 16", "assert count_distinct_characters(\"gvRubuESIkrZ\") == 10", "assert count_distinct_characters(\"esu\") == 3", "assert count_distinct_characters(\"ooj\") == 2", "assert count_distinct_characters(\"femphduq\") == 8", "assert count_distinct_characters(\"InXkmhzjgPkxGvmw\") == 12", "assert count_distinct_characters(\"clGPOVWLcboDuAvmks\") == 14", "assert count_distinct_characters(\"nzf\") == 3", "assert count_distinct_characters(\"HYSpuFbvSsu\") == 8", "assert count_distinct_characters(\"DOMJVxYZSmRvpWdYKm\") == 13", "assert count_distinct_characters(\"aGkvHvzRTyirmeGZC\") == 13", "assert count_distinct_characters(\"tASyULIbokwr\") == 12", "assert count_distinct_characters(\"hxpxzqo\") == 6", "assert count_distinct_characters(\"cCaIjZBhhYWNDOiV\") == 13", "assert count_distinct_characters('aaaaAAAAaaaa') == 1", "assert count_distinct_characters(\"jYnrJXIcXKGEZVo\") == 13", "assert count_distinct_characters(\"bQxCKyKcntHHYeEXVj\") == 12", "assert count_distinct_characters(\"iwrnzam\") == 7", "assert count_distinct_characters(\"UIWbIZNIppW\") == 7", "assert count_distinct_characters(\"OZcKqLtxovbrdMH\") == 14", "assert count_distinct_characters(\"nvxkl\") == 5", "assert count_distinct_characters(\"RvubWTBuPdEIKRDWAH\") == 13", "assert count_distinct_characters(\"ufqgMhqrauVyUULZkrjh\") == 14", "assert count_distinct_characters(\"iZiIACOjGbab\") == 8", "assert count_distinct_characters(\"LumPVjeiLbebI\") == 9", "assert count_distinct_characters(\"hjfLMEhQbeOopYBuToCxkJ\") == 16", "assert count_distinct_characters(\"r\") == 1", "assert count_distinct_characters(\"atRLcmATkWMkiuMFjp\") == 13", "assert count_distinct_characters(\"LnFlIbomxdvveccGHsakJ\") == 18", "assert count_distinct_characters(\"nHtVTgYRztQ\") == 9", "assert count_distinct_characters(\"pJdVyTwDKELVgUZIx\") == 15", "assert count_distinct_characters(\"uYQSGSfGa\") == 7", "assert count_distinct_characters(\"b\") == 1", "assert count_distinct_characters(\"FycYSU cvudKrbVisFTIlgl\") == 15", "assert count_distinct_characters(\"CHorbExVwH\") == 9", "assert count_distinct_characters(\"upir\") == 4", "assert count_distinct_characters('abcde' + 'cade' + 'CADE') == 5", "assert count_distinct_characters(\"cGapAoOkAs\") == 7", "assert count_distinct_characters(\"zn\") == 2", "assert count_distinct_characters(\"ka\") == 2", "assert count_distinct_characters(\"MUOgmWwmwjWfcnVPba\") == 13", "assert count_distinct_characters(\"rnnvtkti\") == 6", "assert count_distinct_characters(\"hdvzMhkHU ZWPT M\") == 11", "assert count_distinct_characters(\"kxx\") == 2", "assert count_distinct_characters(\"lcBMHAxSzIayT\") == 12", "assert count_distinct_characters(\"wqu\") == 3", "assert count_distinct_characters(\"kz\") == 2", "assert count_distinct_characters(\"ohtqe\") == 5", "assert count_distinct_characters(\"smvgbMkhwLhoRln\") == 12", "assert count_distinct_characters(\"tCXKMaJRhU\") == 10", "assert count_distinct_characters(\"l\") == 1", "assert count_distinct_characters(\"rrnjzpuu\") == 6", "assert count_distinct_characters(\"WfnXXAOonzYJHsFb\") == 12", "assert count_distinct_characters(\"YOYqwkoPDfAxdiSTgveN\") == 17", "assert count_distinct_characters(\"nsv\") == 3", "assert count_distinct_characters(\"agfbll\") == 5", "assert count_distinct_characters(\"FUXHhvGoXRhkAxAZ\") == 11", "assert count_distinct_characters(\"dvUoRAqoszDQJ\") == 10", "assert count_distinct_characters(\"ldz\") == 3", "assert count_distinct_characters(\"yl\") == 2", "assert count_distinct_characters(\"JmPaTrSczRkX\") == 11", "assert count_distinct_characters(\"EMtSdVgYJlMwbj\") == 12", "assert count_distinct_characters(\"n\") == 1", "assert count_distinct_characters(\"dxofvtop\") == 7", "assert count_distinct_characters(\"uwDWXwsJclzqiVYrtu\") == 15", "assert count_distinct_characters(\"t\") == 1", "assert count_distinct_characters(\"QZnK QcEIfLoqkAuviX\") == 15", "assert count_distinct_characters(\"MtLuTBbVXUGUlJvca\") == 11", "assert count_distinct_characters(\"FdvjkekrDvMxdP\") == 10", "assert count_distinct_characters('Jerry jERRY JeRRRY') == 5", "assert count_distinct_characters(\"jwFRUyssbSoqWiO\") == 11", "assert count_distinct_characters(\"VFKpqZXDMClGMFlrUL\") == 14", "assert count_distinct_characters(\"otifwyf\") == 6", "assert count_distinct_characters(\"wdjtlARsrwKK\") == 9", "assert count_distinct_characters(\"pVOOHkDZJ\") == 8", "assert count_distinct_characters(\"czcmhqowv\") == 8", "assert count_distinct_characters(\"pqwv\") == 4", "assert count_distinct_characters(\"EYJKqrJyAm\") == 8", "assert count_distinct_characters(\"ffGJKHLgYtdrUNG\") == 12", "assert count_distinct_characters(\"unkhr\") == 5", "assert count_distinct_characters(\"ozt\") == 3", "assert count_distinct_characters(\"GbGqxgAwwHVqX\") == 8", "assert count_distinct_characters(\"lio\") == 3", "assert count_distinct_characters('') == 0"], "nl": " Given a string, find out how many distinct characters (regardless of case) does it consist of\n    ", "func": "def count_distinct_characters(string: str) -> int:", "examples": ">>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    ", "completions": ["from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    '''\n    Given a string, determine the number of unique characters it contains, ignoring case.\n    \n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''\n    unique_chars = set(string.lower())\n    unique_chars.discard(' ')  # Remove spaces if needed\n    return len(unique_chars)\n", "from typing import List\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Count the number of unique characters in a string while ensuring case insensitivity.\n\n    Args:\n        string: A string in which unique characters need to be counted.\n\n    Returns:\n        int: The number of unique characters in the string.\n\n    Examples:\n        >>> count_distinct_characters('')\n        0\n        >>> count_distinct_characters('aAaA')\n        1\n        >>> count_distinct_characters('abcABC')\n        6\n    \"\"\"\n    unique_chars = set(string.lower())\n    unique_chars.discard(' ')  # Remove spaces if needed\n    return len(unique_chars)\n", "from typing import List\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Count the number of unique characters in a string while ensuring case insensitivity.\n\n    Args:\n        string: A string in which unique characters need to be counted.\n\n    Returns:\n        int: The count of distinct characters in the string.\n\n    Examples:\n        >>> count_distinct_characters('')\n        0\n        >>> count_distinct_characters('aAaA')\n        1\n        >>> count_distinct_characters('AbCdEf')\n        6\n    \"\"\"\n    # Convert the input string to lowercase to ensure case insensitivity\n    string_lower = string.lower()\n    \n    # Create a set to store unique characters\n    unique_chars = set()\n    \n    # Iterate through each character in the lowercase string\n    for char in string_lower:\n        # Add each character to the set\n        unique_chars.add(char)\n    \n    # Return the length of the set as the count of distinct characters\n    return len(unique_chars)\n", "from typing import List\n## main.py\n\ndef count_unique_characters(input_string: str) -> int:\n    \"\"\"\n    Count the number of unique characters in a given string, ignoring case.\n\n    Args:\n    - input_string: a string containing characters\n\n    Returns:\n    - An integer representing the number of unique characters in the input string, ignoring case.\n    \"\"\"\n    unique_chars = set(input_string.lower())\n    return len(unique_chars)\n", "from typing import List\n## main.py\n\ndef count_unique_chars(input_string: str) -> int:\n    \"\"\"\n    Count unique characters in a string ignoring case.\n    \n    Args:\n        input_string: A string to count unique characters from.\n        \n    Returns:\n        int: Number of unique characters in the input string.\n    \"\"\"\n    unique_chars = set(input_string.lower())\n    unique_chars.discard(' ')  # Remove spaces from unique characters\n    return len(unique_chars)\n", "from typing import List\n## main.py\n\ndef count_unique_characters(input_string: str) -> int:\n    \"\"\"\n    Count the number of unique characters in a given string, ignoring case.\n    \n    Args:\n    input_string: a string containing characters\n    \n    Returns:\n    An integer representing the number of unique characters in the input string, ignoring case.\n    \"\"\"\n    \n    unique_chars = set(input_string.lower())  ## Convert the input string to lowercase and create a set to get unique characters\n    return len(unique_chars)  ## Return the count of unique characters\n", "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    unique_chars = set(string.lower())\n    count = sum(1 for char in unique_chars if string.lower().count(char) == 1)\n    return count\n", "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Count the number of unique characters in a string while ignoring case.\n    \n    Args:\n        string: A string in which unique characters need to be counted.\n        \n    Returns:\n        int: The count of distinct characters in the string.\n    \"\"\"\n    \n    # Convert the input string to lowercase to ignore case sensitivity\n    string = string.lower()\n    \n    # Initialize an empty set to store unique characters\n    unique_chars = set()\n    \n    # Iterate through each character in the lowercase string\n    for char in string:\n        # Add each character to the set if it is not already present\n        unique_chars.add(char)\n    \n    # Return the length of the set as the count of distinct characters\n    return len(unique_chars)\n", "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Count the number of different characters in the string, considering case-insensitivity.\n\n    Args:\n        string: A string to count distinct characters from.\n\n    Returns:\n        int: The number of distinct characters in the string.\n\n    Examples:\n        count_distinct_characters('') -> 0\n        count_distinct_characters('aAaA') -> 1\n        count_distinct_characters('12345') -> 5\n    \"\"\"\n    return len(set(string.lower()))\n", "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    ## Function to count the number of unique characters in a string while ensuring case insensitivity\n    ## Args:\n    ##   string: A string input\n    ## Returns:\n    ##   An integer representing the number of unique characters in the string\n    \n    if not string:\n        return 0\n    \n    unique_chars = set(string.lower())\n    return len([char for char in unique_chars if string.lower().count(char) == 1])\n"], "plans": ["requirement pool:\n- Implement efficient character counting algorithm\n- Ensure case insensitivity in character comparison\n- Optimize for performance to handle large strings\nWe will design a static Python function using the built-in libraries to efficiently count the number of unique characters in a string while ensuring case insensitivity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: The core concept is to identify and count the number of distinct characters in the given string, considering case insensitivity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using built-in libraries for efficiency, the code logic can involve using Python's set data structure to store unique characters and then returning the length of the set after converting the string to lowercase.\n\n# [edge case] \n    count_distinct_characters('') = 0\n    Explanation: An empty string has no unique characters, so the expected output is 0.\n    count_distinct_characters('aAaA') = 1\n    Explanation: Only one unique character 'a' is present in the string 'aAaA'.\n    count_distinct_characters('12345') = 5\n    Explanation: All characters are unique in the string '12345'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to handle an empty string and count unique characters is already covered in the main code implementation.\n", "requirement pool:\n- Implement efficient character counting algorithm\n- Ensure case insensitivity in character comparison\n- Handle diverse input strings for accurate results\nWe will design a static Python function using the built-in libraries to efficiently count the number of unique characters in a string while ensuring case insensitivity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: The core concept is to identify and count the number of characters that appear only once in the string, regardless of case sensitivity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using built-in libraries for efficiency, the code logic can involve using Python's set data structure to store unique characters and then returning the length of the set after converting the string to lowercase to ignore case sensitivity.\n\n# [edge case] \n    count_distinct_characters('') = 0\n    Explanation: An empty string has no unique characters, so the expected output is 0.\n    count_distinct_characters('aAaA') = 1\n    Explanation: Only 'a' is a unique character in the string 'aAaA'.\n    count_distinct_characters('abcABC') = 6\n    Explanation: All characters are unique in this case, so the expected output is the total number of characters in the string.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of using a set to store unique characters and converting the string to lowercase already covers these scenarios.\n", "requirement pool:\n- Implement efficient character counting algorithm\n- Ensure case insensitivity in character comparison\n- Handle diverse input strings for accurate results\nWe will design a static Python function using basic string manipulation and the built-in set data structure to efficiently count the number of unique characters in a string while ensuring case insensitivity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: The core concept is to identify and count the number of characters that appear only once in the string, regardless of case sensitivity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic string manipulation and the set data structure, the following logic can be implemented:\n    1. Convert the input string to lowercase to ensure case insensitivity.\n    2. Create a set to store unique characters.\n    3. Iterate through each character in the lowercase string.\n    4. Add each character to the set.\n    5. Return the length of the set as the count of distinct characters.\n\n# [edge case] \n    count_distinct_characters('') = 0\n    Explanation: An empty string has no unique characters, so the expected output is 0.\n    count_distinct_characters('aAaA') = 1\n    Explanation: Only 'a' is a unique character in the string, so the expected output is 1.\n    count_distinct_characters('AbCdEf') = 6\n    Explanation: All characters are unique in this string, so the expected output is 6.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios effectively.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use a simple Python function to determine the number of unique characters in a given string, ignoring case. We will leverage built-in Python libraries to achieve this.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: The core concept is to identify and count the number of distinct characters in a string, considering case-insensitivity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python libraries, the code logic could involve converting the string to lowercase, converting it to a set to get unique characters, and then finding the length of the set to get the count of unique characters.\n\n# [edge case] \n    unique_characters('xyzXYZ') = 3\n    Explanation: In the input 'xyzXYZ', there are 3 unique characters ('x', 'y', 'z') when case is ignored.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided should cover the requirement effectively.\n", "requirement pool:\n- Implement a function that counts unique characters in a string ignoring case\n- Ensure the function handles edge cases like empty strings or special characters\n- Optimize the function for performance to handle large input strings efficiently\nWe will use the built-in Python libraries to implement a function that counts unique characters in a string ignoring case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: Unique characters refer to individual characters that appear only once in the string, regardless of case.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python libraries, the logic could involve converting the string to lowercase, creating a set of characters to store unique characters, and then counting the length of the set to get the number of unique characters.\n\n# [edge case] \n    unique_characters('xyzXYZ') = 3\n    Explanation: In the input 'xyzXYZ', there are 3 unique characters 'x', 'y', 'z'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided should cover the requirement effectively.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use a simple Python function to determine the number of unique characters in a given string, ignoring case. We will leverage built-in Python libraries to achieve this.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: The core concept is to identify and count the number of distinct characters in a string, considering case-insensitivity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python libraries, the code logic could involve converting the string to lowercase, converting it to a set to get unique characters, and then finding the length of the set to get the count of unique characters.\n\n# [edge case] \n    unique_characters('xyzXYZ') = 3\n    Explanation: In the input 'xyzXYZ', there are 3 unique characters ('x', 'y', 'z') when case is ignored.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided should cover all scenarios.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python libraries to implement the count_distinct_characters function without the need for any external frameworks.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: The core concept is to identify and count the number of characters that appear only once in the string, regardless of case sensitivity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using built-in Python libraries, we can directly use the set() function to get unique characters and len() function to count them.\n\n# [edge case] \n    count_distinct_characters('') = 0\n    Explanation: An empty string has no unique characters, so the expected output is 0.\n    count_distinct_characters('aAaA') = 1\n    Explanation: Only 'a' is a unique character in the string 'aAaA'.\n    count_distinct_characters('AbCdEf') = 6\n    Explanation: All characters are unique in the string 'AbCdEf'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic using set() and len() functions covers all scenarios.\n", "requirement analysis:\nThe main goal is to accurately count the number of unique characters in a given string while ignoring case sensitivity. Efficiency in processing the string and providing the result is crucial for user satisfaction.\nrequirement pool:\n- Implement a function that counts unique characters in a string\n- Ensure the counting is case-insensitive\n- Optimize the algorithm for efficient processing\nWe will design a static Python function using basic string manipulation and the built-in set data structure to efficiently count the number of unique characters in a string while ignoring case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: The core concept is to identify and count the number of characters that appear only once in the string, regardless of case sensitivity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic string manipulation and the set data structure, the following logic can be implemented:\n    1. Convert the input string to lowercase to ignore case sensitivity.\n    2. Initialize an empty set to store unique characters.\n    3. Iterate through each character in the lowercase string.\n    4. Add each character to the set if it is not already present.\n    5. Return the length of the set as the count of distinct characters.\n\n# [edge case] \n    count_distinct_characters('') = 0\n    Explanation: An empty string has no unique characters, so the expected output is 0.\n    count_distinct_characters('aAaA') = 1\n    Explanation: Only 'a' is a unique character in the string 'aAaA'.\n    count_distinct_characters('AbCdEf') = 6\n    Explanation: All characters are unique in the string 'AbCdEf'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic covers scenarios where the input string is empty or contains all unique characters.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python libraries to implement the count_distinct_characters function without the need for any external frameworks.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: The core concept is to count the number of different characters in the string, considering case-insensitivity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using built-in Python libraries, we can implement the function using a set to store unique characters and then return the length of the set.\n\n```python\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n```\n\n# [edge case] \n    count_distinct_characters('') = 0\n    Explanation: An empty string has no unique characters, so the expected output is 0.\n    count_distinct_characters('aAaA') = 1\n    Explanation: Only one unique character 'a' exists in the string.\n    count_distinct_characters('12345') = 5\n    Explanation: All characters are unique in this case.\n\n# [extra code for edge case]\n    No extra code needed to handle the edge cases. The logic covers all scenarios appropriately.\n", "requirement pool:\n- Implement efficient character counting algorithm\n- Ensure case insensitivity in character comparison\n- Handle special characters and diverse input strings\nWe will use the built-in Python libraries to efficiently count the number of unique characters in a string while ensuring case insensitivity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'unique characters'\n    Explanation: The core concept is to identify and count the number of characters that appear only once in the string, regardless of case sensitivity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python libraries, the logic may involve using functions like set() to remove duplicates and len() to count the unique characters efficiently.\n\n# [edge case] \n    count_distinct_characters('') = 0\n    Explanation: An empty string has no unique characters, so the expected output is 0.\n    count_distinct_characters('aAaA') = 1\n    Explanation: Only 'a' is a unique character in the string 'aAaA'.\n    count_distinct_characters('abAB') = 4\n    Explanation: All characters are unique in the string 'abAB'.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not string:\n            return 0\n        (other code)\n"], "scores": [0.9457, 0.9457, 1.0, 0.0, 0.0, 0.0, 0.2713, 1.0, 1.0, 0.2713], "pass_results": [false, false, true, false, false, false, false, true, true, false], "pass_test_cases_num": [122, 122, 129, 0, 0, 0, 35, 129, 129, 35], "completion": "from typing import List\n## main.py\n\ndef count_distinct_characters(string: str) -> int:\n    ## Function to count the number of unique characters in a string while ensuring case insensitivity\n    ## Args:\n    ##   string: A string input\n    ## Returns:\n    ##   An integer representing the number of unique characters in the string\n    \n    if not string:\n        return 0\n    \n    unique_chars = set(string.lower())\n    return len([char for char in unique_chars if string.lower().count(char) == 1])\n", "passed": true, "pass": true, "pass_num": 3, "round": 943, "repair_prompt": ["def count_distinct_characters(string: str) -> int:\t\n'''Given a string, determine the number of unique characters it contains, ignoring case.\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''", "Given a string, determine the number of unique characters it contains, ignoring case. For instance, if the input is 'xyzXYZ', the output should be 3.", "def count_distinct_characters(string: str) -> int:\n'''Given a string, determine the number of unique characters it contains, ignoring case.\n>>> count_distinct_characters('xyzXYZ')  \n    3\n    >>> count_distinct_characters('Jerry')  \n    4\n    '''"], "mutate_method": "rephrase_one", "parent_index": 860}
