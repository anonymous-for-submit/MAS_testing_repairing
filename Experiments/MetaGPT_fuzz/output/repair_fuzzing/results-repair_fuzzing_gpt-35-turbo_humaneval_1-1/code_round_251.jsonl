{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists. Make sure to handle edge cases where lists may be empty or contain duplicate elements.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "entry_point": "common", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "test": ["def check(common):\n\tassert common([6, 5, 7, 10], [8, 4]) == []", "def check(common):\n\tassert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "def check(common):\n\tassert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "def check(common):\n\tassert common([8, 7, 6, 13], [7, 2]) == [7]", "def check(common):\n\tassert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "def check(common):\n\tassert common([7, 8, 6, 11], [4, 5, 9]) == []", "def check(common):\n\tassert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "def check(common):\n\tassert common([6, 6, 4, 12], [3, 1]) == []", "def check(common):\n\tassert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "def check(common):\n\tassert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "def check(common):\n\tassert common([4, 8, 2, 9], [3, 1]) == []", "def check(common):\n\tassert common([3, 5, 5, 8], [7, 6]) == []", "def check(common):\n\tassert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "def check(common):\n\tassert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "def check(common):\n\tassert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "def check(common):\n\tassert common([3, 7, 6, 3], [2, 4, 5]) == []", "def check(common):\n\tassert common([7, 4, 3, 10], [3, 1]) == [3]", "def check(common):\n\tassert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "def check(common):\n\tassert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "def check(common):\n\tassert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "def check(common):\n\tassert common([3, 1, 6, 11], [6, 6]) == [6]", "def check(common):\n\tassert common([7, 4, 7, 13], [8, 4]) == [4]", "def check(common):\n\tassert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "def check(common):\n\tassert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "def check(common):\n\tassert common([5, 8, 7, 3], [6, 4]) == []", "def check(common):\n\tassert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "def check(common):\n\tassert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "def check(common):\n\tassert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "def check(common):\n\tassert common([6, 6, 4, 5], [3, 3, 8]) == []", "def check(common):\n\tassert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "def check(common):\n\tassert common([2, 1, 7, 9], [6, 3]) == []", "def check(common):\n\tassert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "def check(common):\n\tassert common([7, 6, 3, 9], [6, 5]) == [6]", "def check(common):\n\tassert common([2, 3, 3, 9], [5, 2]) == [2]", "def check(common):\n\tassert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "def check(common):\n\tassert common([8, 3, 4, 10], [8, 7]) == [8]", "def check(common):\n\tassert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "def check(common):\n\tassert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "def check(common):\n\tassert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "def check(common):\n\tassert common([4, 5, 7, 12], [7, 1]) == [7]", "def check(common):\n\tassert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "def check(common):\n\tassert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "def check(common):\n\tassert common([2, 6, 2, 8], [5, 2]) == [2]", "def check(common):\n\tassert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "def check(common):\n\tassert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "def check(common):\n\tassert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "def check(common):\n\tassert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "def check(common):\n\tassert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "def check(common):\n\tassert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "def check(common):\n\tassert common([5, 5, 7, 7], [5, 2]) == [5]", "def check(common):\n\tassert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "def check(common):\n\tassert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "def check(common):\n\tassert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([5, 2, 1, 3], [8, 3]) == [3]", "def check(common):\n\tassert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "def check(common):\n\tassert common([5, 6, 4, 8], [3, 7, 2]) == []", "def check(common):\n\tassert common([7, 7, 5, 11], [3, 4]) == []", "def check(common):\n\tassert common([4, 3, 2, 8], []) == []", "def check(common):\n\tassert common([7, 7, 7, 3], [2, 4]) == []", "def check(common):\n\tassert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "def check(common):\n\tassert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "def check(common):\n\tassert common([1, 8, 7, 3], [2, 6]) == []", "def check(common):\n\tassert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "def check(common):\n\tassert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "def check(common):\n\tassert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "def check(common):\n\tassert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "def check(common):\n\tassert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "def check(common):\n\tassert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "def check(common):\n\tassert common([8, 4, 1, 9], [6, 3]) == []", "def check(common):\n\tassert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "def check(common):\n\tassert common([9, 7, 7, 7], [5, 2]) == []", "def check(common):\n\tassert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "def check(common):\n\tassert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "def check(common):\n\tassert common([8, 4, 6, 5], [1, 1]) == []", "def check(common):\n\tassert common([4, 5, 3, 10], [7, 5]) == [5]", "def check(common):\n\tassert common([7, 1, 7, 13], [3, 1]) == [1]", "def check(common):\n\tassert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "def check(common):\n\tassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "def check(common):\n\tassert common([7, 7, 1, 4], [5, 6]) == []", "def check(common):\n\tassert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "def check(common):\n\tassert common([8, 1, 1, 3], [5, 6]) == []", "def check(common):\n\tassert common([6, 3, 6, 3], [8, 5, 8]) == []", "def check(common):\n\tassert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "def check(common):\n\tassert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "def check(common):\n\tassert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "def check(common):\n\tassert common([1, 3, 4, 9], [7, 3]) == [3]", "def check(common):\n\tassert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "def check(common):\n\tassert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "def check(common):\n\tassert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "def check(common):\n\tassert common([8, 1, 4, 10], [4, 2]) == [4]", "def check(common):\n\tassert common([2, 8, 5, 10], [8, 4]) == [8]", "def check(common):\n\tassert common([8, 4, 4, 6], [3, 6]) == [6]", "def check(common):\n\tassert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "def check(common):\n\tassert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "def check(common):\n\tassert common([3, 1, 4, 5], [1, 1]) == [1]", "def check(common):\n\tassert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "test_case_list": ["assert common([6, 5, 7, 10], [8, 4]) == []", "assert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "assert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "assert common([8, 7, 6, 13], [7, 2]) == [7]", "assert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "assert common([7, 8, 6, 11], [4, 5, 9]) == []", "assert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "assert common([6, 6, 4, 12], [3, 1]) == []", "assert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "assert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "assert common([4, 8, 2, 9], [3, 1]) == []", "assert common([3, 5, 5, 8], [7, 6]) == []", "assert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "assert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "assert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "assert common([3, 7, 6, 3], [2, 4, 5]) == []", "assert common([7, 4, 3, 10], [3, 1]) == [3]", "assert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "assert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "assert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "assert common([3, 1, 6, 11], [6, 6]) == [6]", "assert common([7, 4, 7, 13], [8, 4]) == [4]", "assert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "assert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "assert common([5, 8, 7, 3], [6, 4]) == []", "assert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "assert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "assert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "assert common([6, 6, 4, 5], [3, 3, 8]) == []", "assert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "assert common([2, 1, 7, 9], [6, 3]) == []", "assert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "assert common([7, 6, 3, 9], [6, 5]) == [6]", "assert common([2, 3, 3, 9], [5, 2]) == [2]", "assert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "assert common([8, 3, 4, 10], [8, 7]) == [8]", "assert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "assert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "assert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "assert common([4, 5, 7, 12], [7, 1]) == [7]", "assert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "assert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "assert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "assert common([2, 6, 2, 8], [5, 2]) == [2]", "assert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "assert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "assert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "assert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "assert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "assert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "assert common([5, 5, 7, 7], [5, 2]) == [5]", "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "assert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "assert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "assert common([5, 2, 1, 3], [8, 3]) == [3]", "assert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "assert common([5, 6, 4, 8], [3, 7, 2]) == []", "assert common([7, 7, 5, 11], [3, 4]) == []", "assert common([4, 3, 2, 8], []) == []", "assert common([7, 7, 7, 3], [2, 4]) == []", "assert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "assert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "assert common([1, 8, 7, 3], [2, 6]) == []", "assert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "assert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "assert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "assert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "assert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "assert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "assert common([8, 4, 1, 9], [6, 3]) == []", "assert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "assert common([9, 7, 7, 7], [5, 2]) == []", "assert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "assert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "assert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "assert common([8, 4, 6, 5], [1, 1]) == []", "assert common([4, 5, 3, 10], [7, 5]) == [5]", "assert common([7, 1, 7, 13], [3, 1]) == [1]", "assert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "assert common([7, 7, 1, 4], [5, 6]) == []", "assert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "assert common([8, 1, 1, 3], [5, 6]) == []", "assert common([6, 3, 6, 3], [8, 5, 8]) == []", "assert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "assert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "assert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "assert common([1, 3, 4, 9], [7, 3]) == [3]", "assert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "assert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "assert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "assert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "assert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "assert common([8, 1, 4, 10], [4, 2]) == [4]", "assert common([2, 8, 5, 10], [8, 4]) == [8]", "assert common([8, 4, 4, 6], [3, 6]) == [6]", "assert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "assert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "assert common([3, 1, 4, 5], [1, 1]) == [1]", "assert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "nl": "Return sorted unique common elements for two lists.\n    ", "func": "def common(l1: list, l2: list):", "examples": ">>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    ", "completions": ["from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists.\n    \n    Args:\n        l1 (list): First input list\n        l2 (list): Second input list\n    \n    Returns:\n        list: Sorted list of unique common elements\n    '''\n    \n    if not l1 or not l2:\n        return []\n    \n    common_elements = list(set(l1).intersection(l2))\n    common_elements.sort()\n    \n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for two lists. Handles edge cases where lists may be empty or contain duplicate elements.'''\n    \n    # Find common elements using set intersection\n    common_elements = list(set(l1) & set(l2))\n    \n    # Sort the common elements\n    common_elements.sort()\n    \n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists.\n    \n    Args:\n        l1 (list): First input list\n        l2 (list): Second input list\n    \n    Returns:\n        list: Sorted list of unique common elements\n    '''\n    \n    if not l1 or not l2:\n        return []\n    \n    l1 = list(set(l1))\n    l2 = list(set(l2))\n    \n    common_elements = list(set(l1) & set(l2))\n    \n    return sorted(common_elements)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef common(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Function to find and return sorted unique common elements for two lists\n    Input: Two lists of integers\n    Output: List of sorted unique common elements\n    Example: common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) -> [1, 5, 653]\n    \"\"\"\n\n    # Check for edge cases\n    if not list1 or not list2:\n        return []\n\n    # Find common elements and return sorted unique values\n    return sorted(set(list1) & set(list2))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef common(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Function to find and return sorted unique common elements in two lists\n    Args:\n        list1: First list of integers\n        list2: Second list of integers\n    Returns:\n        List of sorted unique common elements between list1 and list2\n    \"\"\"\n    \n    # Check for empty lists\n    if not list1 or not list2:\n        return []\n    \n    # Find common elements between the two lists\n    common_elements = set(list1) & set(list2)\n    \n    # Sort the common elements\n    sorted_common_elements = sorted(common_elements)\n    \n    return sorted_common_elements\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef common(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Find the sorted unique common elements between two lists.\n\n    Args:\n        list1 (List[int]): The first list of integers.\n        list2 (List[int]): The second list of integers.\n\n    Returns:\n        List[int]: A list of sorted unique common elements between list1 and list2.\n    \"\"\"\n    # Check for empty lists\n    if not list1 or not list2:\n        return []\n    \n    # Find common elements and return sorted unique values\n    return sorted(list(set(list1) & set(list2)))\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for two lists, handling empty lists or duplicates.\n    :param l1: First list\n    :param l2: Second list\n    :return: List of sorted unique common elements\n    '''\n    \n    # Convert lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find intersection of the two sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the result back to a list and sort it\n    sorted_common_elements = sorted(list(common_elements))\n    \n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists, handling empty lists or duplicates.\n    Args:\n        l1 (list): First input list\n        l2 (list): Second input list\n    Returns:\n        list: Sorted list of unique common elements\n    '''\n    \n    # Sort the input lists\n    l1.sort()\n    l2.sort()\n    \n    # Find the intersection of the two lists\n    common_elements = list(set(l1) & set(l2))\n    \n    # Sort the common elements list\n    common_elements.sort()\n    \n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''Return sorted unique common elements for two lists, handling empty lists or duplicates.\n    :param l1: First list\n    :param l2: Second list\n    :return: List of sorted unique common elements\n    '''\n    \n    common_elements = list(set(l1) & set(l2))  # Find common elements using set intersection\n    common_elements = sorted(list(set(common_elements)))  # Sort the common elements\n    \n    return common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists. Make sure to handle edge cases where lists may be empty or contain duplicate elements.\n    '''\n    \n    # Handle edge cases\n    if not l1 or not l2:\n        return []\n    \n    # Remove duplicates and sort the lists\n    l1 = list(set(l1))\n    l2 = list(set(l2))\n    \n    # Find common elements\n    common_elements = [elem for elem in l1 if elem in l2]\n    \n    return sorted(list(set(common_elements)))\n\n"], "plans": ["We will use the built-in functions in Python to efficiently find and return common elements between two lists. We will handle edge cases such as empty lists and duplicate elements by sorting and removing duplicates from the final result.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that exist in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using built-in functions in Python to efficiently find and return common elements between two lists, the logic can involve using set intersection to find common elements, sorting the result, and removing duplicates.\n\n# [edge case] \n    common([], [1, 2, 3]) = []\n    Explanation: When one list is empty, there are no common elements, so the expected output is an empty list.\n    common([1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common between the two lists.\n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not l1 or not l2:\n            return []\n        (other code)\n", "requirement pool:\n- Efficiently find common elements in two lists\n- Handle edge cases like empty lists and duplicates\n- Ensure output is sorted and contains unique elements\nWe will use the built-in functions in Python to efficiently find common elements, handle edge cases, and ensure sorting and uniqueness.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that are present in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in functions in Python, the logic would involve using set intersection to find common elements, sorting the result, and returning unique elements.\n\n# [edge case] \n    common([], [1, 2, 3]) = []\n    Explanation: When one list is empty, there are no common elements, so the expected output is an empty list.\n    common([1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: When both lists are the same, all elements are common, so the expected output is the sorted unique elements of the list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The built-in functions in Python can handle empty lists and duplicate elements efficiently.\n", "We will use Python and the built-in functions to efficiently find and display common elements in two lists. We will handle edge cases like empty lists and duplicates by sorting the elements and removing duplicates before finding the common elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that exist in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    common([], []) = []\n    Explanation: When both lists are empty, there are no common elements, so the expected output is an empty list.\n    common([1, 1, 2, 2], [2, 2, 3, 3]) = [2]\n    Explanation: The common elements between the two lists are [2], and duplicates are removed.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not l1 or not l2:\n            return []\n        l1 = list(set(l1))\n        l2 = list(set(l2))\n        (other code)\n", "We will use the built-in functions in Python to efficiently find and return the sorted unique common elements for two lists. We will handle edge cases by checking for empty lists first.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted unique common elements'\n    Explanation: The core concept is to find elements that are common between two lists, remove duplicates, and return them in sorted order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    common([], [1, 2, 3]) = []\n    Explanation: When one list is empty, there are no common elements, so the expected output is an empty list.\n    common([1, 2, 3], []) = []\n    Explanation: When one list is empty, there are no common elements, so the expected output is an empty list.\n    common([], []) = []\n    Explanation: When both lists are empty, there are no common elements, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to find common elements already accounts for empty lists and will return an empty list in such cases.\n", "We will use the built-in functions in Python to efficiently find and return common elements in two lists. We will handle edge cases by checking for empty lists first and ensure the returned list is sorted and contains unique elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted unique common elements'\n    Explanation: The core concept is to find elements that are common between two lists, sort them, and ensure that only unique elements are included in the final result.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check for empty lists first.\n    Find common elements between the two lists.\n    Sort the common elements.\n    Remove duplicates from the common elements.\n    Return the sorted unique common elements.\n\n# [edge case] \n    common([], [1, 2, 3]) = []\n    Explanation: When one list is empty, there are no common elements, so the expected output is an empty list.\n    common([1, 2, 3], []) = []\n    Explanation: When one list is empty, there are no common elements, so the expected output is an empty list.\n    common([], []) = []\n    Explanation: When both lists are empty, there are no common elements, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for empty lists and return an empty list if needed is already included in the main code implementation.\n", "We will use the built-in functions in Python to efficiently handle edge cases and find the common elements between two lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted unique common elements'\n    Explanation: The core concept is to find the elements that are common between two lists, remove duplicates, and sort them in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check for empty lists first. Then, use built-in functions to find common elements, remove duplicates, and sort the result.\n\n# [edge case] \n    common([], [1, 2, 3]) = []\n    Explanation: When one list is empty, there are no common elements, so the expected output is an empty list.\n    common([1, 2, 3], []) = []\n    Explanation: When one list is empty, there are no common elements, so the expected output is an empty list.\n    common([], []) = []\n    Explanation: When both lists are empty, there are no common elements, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The built-in functions in Python can handle empty lists efficiently.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in functions in Python to handle list operations and sorting.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'sorted unique common elements'\n    Explanation: The core concept is to find elements that are common between two lists, remove duplicates, sort them, and return the unique elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in functions in Python, the logic can be implemented as follows:\n    \n    1. Convert both lists to sets to remove duplicates.\n    2. Find the intersection of the two sets to get common elements.\n    3. Convert the result back to a list and sort it.\n    4. Return the sorted list of unique common elements.\n\n# [edge case] \n    common([], [1, 2, 3]) = []\n    Explanation: When one list is empty, there are no common elements, so the expected output is an empty list.\n    \n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: When both lists have no common elements, the expected output is an empty list.\n    \n    common([1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: When both lists are the same, all elements are common, and the expected output is the sorted unique elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios with empty lists and duplicates.\n", "We will use Python and the built-in functions to efficiently find and display common elements in two lists. We will handle empty lists and duplicates by sorting the lists and using set operations to find the intersection. Finally, we will ensure the output list is sorted and contains unique elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that exist in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    common([], []) = []\n    Explanation: When both lists are empty, there are no common elements, so the expected output is an empty list.\n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists.\n    common([1, 2, 3], [3, 2, 1]) = [1, 2, 3]\n    Explanation: The lists contain the same elements, just in different orders.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers handling empty lists and duplicates.\n", "requirement pool:\n- Efficiently identify common elements in two lists\n- Handle empty lists and duplicates gracefully\n- Ensure the output list is sorted and contains unique elements\nWe will utilize the built-in functions in Python to efficiently find and display common elements in two lists, while handling empty lists and duplicates. The output list will be sorted and contain unique elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that exist in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    common([], []) = []\n    Explanation: Both lists are empty, so there are no common elements.\n    common([1, 1, 2, 3], [1, 2, 2, 4]) = [1, 2]\n    Explanation: The common elements are 1 and 2, and duplicates are handled.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to find common elements already handles empty lists and duplicates.\n", "requirement pool:\n- Efficiently find common elements in two lists\n- Handle edge cases like empty lists and duplicate elements\n- Ensure output is sorted and contains unique elements\nWe will use the built-in functions in Python to efficiently find and display common elements in two lists. We will handle edge cases such as empty lists and duplicate elements by implementing sorting and uniqueness checks.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'common elements'\n    Explanation: Refers to the elements that exist in both lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    common([], []) = []\n    Explanation: When both lists are empty, there are no common elements, so the expected output is an empty list.\n    common([1, 1, 2], [2, 2, 3]) = [2]\n    Explanation: The common elements between the two lists are 2, but since we need unique elements, the output is [2].\n    common([1, 2, 3], [4, 5, 6]) = []\n    Explanation: There are no common elements between the two lists.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not l1 or not l2:\n            return []\n        l1 = list(set(l1))\n        l2 = list(set(l2))\n        (other code)\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], "completion": "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    '''\n    Return sorted unique common elements for two lists. Make sure to handle edge cases where lists may be empty or contain duplicate elements.\n    '''\n    \n    # Handle edge cases\n    if not l1 or not l2:\n        return []\n    \n    # Remove duplicates and sort the lists\n    l1 = list(set(l1))\n    l2 = list(set(l2))\n    \n    # Find common elements\n    common_elements = [elem for elem in l1 if elem in l2]\n    \n    return sorted(list(set(common_elements)))\n\n", "passed": true, "pass": true, "pass_num": 10, "round": 251, "repair_prompt": ["def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists. Make sure to handle edge cases where lists may be empty or contain duplicate elements.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "Make sure to handle edge cases where lists may be empty by checking for empty lists first. Return the sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]", "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists, handling empty lists or duplicates.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 250}
