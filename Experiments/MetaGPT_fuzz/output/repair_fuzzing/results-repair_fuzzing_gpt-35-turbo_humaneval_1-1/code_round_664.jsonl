{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True is list elements are monotonically increasing or decreasing. This means that each element must be greater than or equal to the element before it. It can also mean that each element is less than or equal to the element before it.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "completions": ["from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.\n    This means that each element must be greater than or equal to the element before it.\n    It can also mean that each element is less than or equal to the element before it.'''\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    This means that each element must be greater than or equal to the element before it,\n    or each element is less than or equal to the element before it.\n    \n    Args:\n        l (list): Input list of elements\n    \n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise\n    '''\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    This means that each element must be greater than or equal to the element before it,\n    or each element is less than or equal to the element before it.\n    \n    Args:\n        l (list): Input list to check for monotonicity\n    \n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise\n    '''\n    \n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    elif all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    else:\n        return False\n", "from typing import List\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    This means that each element must be greater than or equal to the element before it,\n    or each element is less than or equal to the element before it.\n    \n    Args:\n        l (list): Input list to check for monotonicity\n    \n    Returns:\n        bool: True if list is monotonically increasing or decreasing, False otherwise\n    '''\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    This means that each element must be greater than or equal to the element before it.\n    It can also mean that each element is less than or equal to the element before it.\n    \n    Args:\n        l (list): Input list to check for monotonicity\n    \n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise\n    '''\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    This means that each element must be greater than or equal to the element before it.\n    It can also mean that each element is less than or equal to the element before it.\n    \n    Args:\n        l (list): Input list to check for monotonicity\n    \n    Returns:\n        bool: True if list is monotonically increasing or decreasing, False otherwise\n    '''\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True is list elements are monotonically increasing or decreasing, where each element is greater than or equal to the element before it or each element is less than or equal to the element before it.\n    >>> monotonic([1, 2, 4, 20])\n        True\n    >>> monotonic([1, 20, 4, 10])\n        False\n    >>> monotonic([4, 1, 0, -10])\n        True\n    '''\n\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing, where each element is greater than or equal to the element before it or each element is less than or equal to the element before it.'''\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n        \n        if not increasing and not decreasing:\n            return False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing, where each element is greater than or equal to the element before it or each element is less than or equal to the element before it.'''\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    \n    return not increasing and not decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    This means that each element must be greater than or equal to the element before it,\n    or each element is less than or equal to the element before it.\n    \n    Args:\n        l (list): Input list to check for monotonicity\n    \n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise\n    '''\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            increasing = True\n        elif l[i] < l[i-1]:\n            decreasing = True\n        \n        if increasing and decreasing:\n            return False\n    \n    return True\n\n"], "plans": ["requirement pool:\n- Implement a function that efficiently checks if a list is monotonically increasing or decreasing\n- Ensure the function can handle both increasing and decreasing sequences\n- Optimize the function for performance and accuracy\nWe will design a simple static Python function using appropriate open-source libraries to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if each element is greater than or equal to the previous element for increasing monotonicity, or if each element is less than or equal to the previous element for decreasing monotonicity.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is monotonically increasing as each element is greater than or equal to the previous one.\n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is monotonically decreasing as each element is less than or equal to the previous one.\n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not monotonically increasing or decreasing as it has both increasing and decreasing elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for monotonically increasing or decreasing lists covers all scenarios.\n", "requirement pool:\n- Implement the monotonic function to handle both increasing and decreasing lists\n- Ensure the function can handle empty lists and single-element lists\n- Optimize the function for large input lists\nWe will design a static Python function using basic logic and built-in functions to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is monotonically increasing or decreasing by comparing each element with the previous one.\n\n    1. Initialize two flags for increasing and decreasing as False.\n    2. Iterate through the list starting from the second element.\n    3. Check if the current element is greater than or equal to the previous element for increasing flag.\n    4. Check if the current element is less than or equal to the previous element for decreasing flag.\n    5. If either condition fails, return False.\n    6. If the loop completes without returning False, return True.\n\n# [edge case] \n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The list elements are monotonically increasing.\n    \n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The list elements are monotonically decreasing.\n    \n    monotonic([1, 20, 4, 10]) = False\n    Explanation: The list elements are not monotonically increasing or decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic covers both increasing and decreasing scenarios effectively.\n", "requirement pool:\n- Implement a function that efficiently determines the monotonicity of a list\n- Ensure the function handles edge cases like empty lists or single-element lists\n- Optimize the algorithm for large datasets to maintain performance\nWe will design a simple static Python function using basic logic to efficiently determine the monotonicity of a list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is sorted in either ascending or descending order to determine if it is monotonically increasing or decreasing.\n\n# [edge case] \n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The list is monotonically increasing.\n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The list is monotonically decreasing.\n    monotonic([1, 20, 4, 10]) = False\n    Explanation: The list is not monotonically increasing or decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for monotonicity covers all scenarios.\n", "requirement pool:\n- Implement a function to check monotonicity of a list\n- Ensure the function handles edge cases effectively\n- Optimize the function for performance\nWe will design a simple static Python function using basic logic to check if a list is monotonically increasing or decreasing without the need for any external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if each element is greater than or equal to the previous element for increasing, or less than or equal to the previous element for decreasing.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list elements are monotonically increasing.\n    monotonic([3, 3, 2, 1]) = True\n    Explanation: The list elements are monotonically decreasing.\n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list elements are not monotonically increasing or decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for monotonicity covers all scenarios.\n", "requirement pool:\n- Implement efficient monotonicity check algorithm\n- Ensure correct handling of edge cases\n- Optimize for both increasing and decreasing monotonicity\nWe will design a simple static Python function using appropriate open-source libraries to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if each element is greater than or equal to the previous element for increasing case, or less than or equal to the previous element for decreasing case.\n\n# [edge case] \n    monotonic([1, 2, 3, 4]) = True\n    Explanation: The elements are monotonically increasing.\n    monotonic([4, 3, 2, 1]) = True\n    Explanation: The elements are monotonically decreasing.\n    monotonic([1, 2, 1, 4]) = False\n    Explanation: The elements are not monotonically increasing or decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check monotonically increasing or decreasing covers all scenarios.\n", "requirement pool:\n- Implement efficient monotonicity check algorithm\n- Ensure handling of both increasing and decreasing cases\n- Design clear and concise output format\nWe will design a simple static Python function using appropriate open-source libraries to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is monotonically increasing or decreasing by comparing each element with the previous one.\n\n    1. Initialize two flags for increasing and decreasing as False.\n    2. Iterate through the list starting from the second element.\n    3. Check if the current element is greater than or equal to the previous element for increasing flag.\n    4. Check if the current element is less than or equal to the previous element for decreasing flag.\n    5. If either condition fails, return False.\n    6. If both conditions pass, return True at the end of the loop.\n\n# [edge case] \n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The elements are monotonically increasing.\n    \n    monotonic([1, 20, 4, 10]) = False\n    Explanation: The elements are not monotonically increasing or decreasing.\n    \n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The elements are monotonically decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic covers both increasing and decreasing scenarios effectively.\n", "requirement analysis:\nThe main goal is to efficiently determine if a list is monotonically increasing or decreasing. The function should handle both cases accurately and provide a clear True/False output based on the monotonicity of the list elements.\nrequirement pool:\n- Implement a function that checks if a list is monotonically increasing\n- Implement a function that checks if a list is monotonically decreasing\n- Ensure the function can handle edge cases like empty lists\n- Optimize the algorithm for efficiency\n- Provide clear documentation for the function\nWe will use a simple approach to iterate through the list and compare each element with the previous one to determine if the list is monotonically increasing or decreasing. We will leverage the built-in functions in Python for efficient comparison.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if each element is greater than or equal to the previous element for monotonically increasing list, or less than or equal to the previous element for monotonically decreasing list.\n\n# [edge case] \n    monotonic([1, 2, 3, 4]) = True\n    Explanation: The list is monotonically increasing.\n    monotonic([4, 3, 2, 1]) = True\n    Explanation: The list is monotonically decreasing.\n    monotonic([1, 2, 1, 2]) = False\n    Explanation: The list is not consistently increasing or decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check monotonically increasing or decreasing list covers all scenarios.\n", "requirement pool:\n- Implement efficient monotonicity evaluation algorithm\n- Ensure correct handling of edge cases\n- Optimize output readability\nWe will design a static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is monotonically increasing or decreasing by comparing each element with the previous one.\n\n    1. Initialize two flags for increasing and decreasing as False.\n    2. Iterate through the list starting from the second element.\n    3. Check if the current element is greater than or equal to the previous element for increasing flag.\n    4. Check if the current element is less than or equal to the previous element for decreasing flag.\n    5. If either condition fails, return False.\n    6. If the loop completes without returning False, return True.\n\n# [edge case] \n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The list is monotonically increasing.\n    \n    monotonic([1, 20, 4, 10]) = False\n    Explanation: The list is not monotonically increasing or decreasing.\n    \n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The list is monotonically decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios of monotonically increasing or decreasing lists.\n", "requirement pool:\n- Implement efficient monotonicity check algorithm\n- Ensure correct evaluation for all edge cases\n- Design clear and informative output messages\nWe will design a simple static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is monotonically increasing or decreasing by comparing each element with the previous one.\n\n    1. Initialize two flags, one for increasing and one for decreasing, as False.\n    2. Iterate through the list starting from the second element.\n    3. Check if the current element is greater than or equal to the previous element for increasing flag.\n    4. Check if the current element is less than or equal to the previous element for decreasing flag.\n    5. If any of the conditions fail, return False.\n    6. If the loop completes without returning False, return True.\n\n# [edge case] \n    monotonic([1, 2, 3, 4]) = True\n    Explanation: The list is monotonically increasing.\n    \n    monotonic([4, 3, 2, 1]) = True\n    Explanation: The list is monotonically decreasing.\n    \n    monotonic([1, 2, 1, 2]) = False\n    Explanation: The list is not consistently increasing or decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic covers all scenarios of monotonically increasing or decreasing lists.\n", "requirement pool:\n- Implement a function that efficiently determines monotonicity\n- Ensure the function handles both increasing and decreasing sequences\n- Provide clear documentation and examples for ease of use\nWe will design a simple static Python function using basic logic to efficiently determine if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing or decreasing'\n    Explanation: It means that the list elements are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is monotonically increasing or decreasing by comparing each element with the previous one.\n\n    1. Initialize two flags, one for increasing and one for decreasing, as False.\n    2. Iterate through the list starting from the second element.\n    3. Check if the current element is greater than or equal to the previous element for increasing flag.\n    4. Check if the current element is less than or equal to the previous element for decreasing flag.\n    5. If any of the conditions fail, return False.\n    6. If the loop completes without returning False, return True.\n\n# [edge case] \n    monotonic([1, 2, 3, 4]) = True\n    Explanation: The list is monotonically increasing.\n    \n    monotonic([4, 3, 2, 1]) = True\n    Explanation: The list is monotonically decreasing.\n    \n    monotonic([1, 2, 1, 2]) = False\n    Explanation: The list is not consistently increasing or decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.7522], "pass_results": [true, true, true, true, true, true, true, true, false, false], "pass_test_cases_num": [113, 113, 113, 113, 113, 113, 113, 113, 0, 85], "completion": "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    This means that each element must be greater than or equal to the element before it,\n    or each element is less than or equal to the element before it.\n    \n    Args:\n        l (list): Input list to check for monotonicity\n    \n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise\n    '''\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            increasing = True\n        elif l[i] < l[i-1]:\n            decreasing = True\n        \n        if increasing and decreasing:\n            return False\n    \n    return True\n\n", "passed": true, "pass": true, "pass_num": 8, "round": 664, "repair_prompt": ["def monotonic(l: list):\t\n'''Return True is list elements are monotonically increasing or decreasing. This means that each element must be greater than or equal to the element before it. It can also mean that each element is less than or equal to the element before it.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "def monotonic(l: list):\t\n'''Return True is list elements are monotonically increasing or decreasing. This means that each element must be greater than or equal to the element before it. It can also mean that each element is less than or equal to the element before it.\n>>> monotonic([1, 2, 4, 20])\n    True, as the elements are monotonically increasing.\n    >>> monotonic([1, 20, 4, 10])\n    False, as the elements are not monotonically increasing or decreasing.\n    >>> monotonic([4, 1, 0, -10])\n    True, as the elements are monotonically decreasing.\n    '''", "def monotonic(l: list):\t\n'''Return True is list elements are monotonically increasing or decreasing, where each element is greater than or equal to the element before it or each element is less than or equal to the element before it.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''"], "mutate_method": "expand_one2two", "parent_index": 638}
