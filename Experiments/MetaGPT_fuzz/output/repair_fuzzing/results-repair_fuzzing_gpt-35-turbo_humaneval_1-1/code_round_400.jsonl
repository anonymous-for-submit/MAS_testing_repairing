{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero accepts a list of integers as its input.\nit returns True if there are two unique elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "entry_point": "pairs_sum_to_zero", "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "test": ["def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 11, -3, 6, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 7, -4, 1, 1, 11]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 11, 0, 3, 6, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 14, 0, 5, 2, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 2, 3, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 2, 9, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 14, 1, 8, 6, 36]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 9, 0, 8, 5, 9]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -6, 7, 1, 32]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, -2, 3]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 10, 0, 6, 5, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 1, -2, 2]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 2, -1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 4, -2, 5, 5, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 5, -3, 3]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 3, -4, 5]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 4, -5, 4, 1, 25]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 6, -4, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 5, 2, 4, 1, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 14, 0, 1, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 8, -5, 3, 7, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 9, -9, 2, 7, 11]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 7, -1, 2, 1, 28]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 6, -7, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 9, 2, 3, 4, 30]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 6, 1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 1, 3, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 5, 8, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 7, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, 10, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 13, -5, 7, 7, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 5, -10, 2, 10, 9]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 1, 8]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 7, 4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 9, -5, 4, 6, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 6, 2, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 2, 1, 11]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 2, 7, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 5, 2, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 14, -2, 8, 2, 35]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 5, 0]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 8, 4, 3, 7, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 12, 1, 9, 6, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 11, 1, 6, 6, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 11, -3, 8, 7, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 10, -4, 8, 6, 26]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 7, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, -4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-2, 12, -4, 7, 1, 36]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 12, 1, 6, 7, 25]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 11, -3, 6, 2, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 13, -2, 7, 3, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -10, 5, 10, 9]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 1, 3, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 8, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 14, 2, 4, 6, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, 1, 12]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 5, -6, 8, 1, 33]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 3, 7, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 14, -6, 5, 1, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 4, -1, 5, 10, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 13, -2, 4, 4, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 2, 6, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([0, 4, -1, 5, 3, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 3, 1, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([7, 5, -1, 1, 8, 10]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 4, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 7, 3, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 12, -3, 2, 6, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 9, -3, 6, 7, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 7, -9, 5, 4, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 6, 0, 6, 3, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 7, 8, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 4, -1, 8, 8, 12]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 8, 1, 1, 6, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 14, 1, 8, 2, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 6, -5, 7, 7, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 4, -7, 1, 2, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-8, 11, -6, 5, 7, 36]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 14, 0, 5, 1, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 9, -1, 7, 4, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, 3, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 10, 2, 9, 3, 33]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 4, 1, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 3, -2, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 10, -2, 2, 4, 33]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 9, -8, 6, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 7, -4, 4, 2, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 4, 10, 1]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([7, 8, -10, 7, 2, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 8, 0, 4, 5, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-6, 14, -4, 5, 6, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 12, 1, 8, 6, 31]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-3, 12, -6, 6, 7, 29]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, 1, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 8, -4, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([3, 2, 1, 6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 4, 3, 6, 2, 27]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 11, -4, 3, 5, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-7, 9, 2, 1, 6, 34]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-1, 13, -4, 6, 3, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, 0, 3]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 5, -2, 3, 1, 32]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 5, -1, 8, 8, 4]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([1, 2, 2, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 8, 1, 4]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 6, 2, 5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([2, 14, 3, 6, 2, 29]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-5, 13, -2, 8, 7, 35]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([6, 1, 3, 2]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 8, -1, 7, 6, 26]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 12, 0, 1, 7, 28]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([5, 3, 6, 7]) == False", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([4, 6, -8, 1, 2, 8]) == True", "def check(pairs_sum_to_zero):\n\tassert pairs_sum_to_zero([-4, 8, -3, 9, 5, 29]) == False"], "test_case_list": ["assert pairs_sum_to_zero([1, 11, -3, 6, 7, 30]) == False", "assert pairs_sum_to_zero([3, 7, -4, 1, 1, 11]) == False", "assert pairs_sum_to_zero([-8, 11, 0, 3, 6, 26]) == False", "assert pairs_sum_to_zero([1, 14, 0, 5, 2, 34]) == False", "assert pairs_sum_to_zero([1, 2, 3, 7]) == False", "assert pairs_sum_to_zero([4, 2, 9, 3]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 31]) == False", "assert pairs_sum_to_zero([3]) == False", "assert pairs_sum_to_zero([-1, 14, 1, 8, 6, 36]) == True", "assert pairs_sum_to_zero([3, 9, 0, 8, 5, 9]) == False", "assert pairs_sum_to_zero([1, 4, -6, 7, 1, 32]) == False", "assert pairs_sum_to_zero([2, 8, -2, 3]) == True", "assert pairs_sum_to_zero([-2, 10, 0, 6, 5, 30]) == False", "assert pairs_sum_to_zero([3, 1, -2, 2]) == True", "assert pairs_sum_to_zero([3, 2, -1, 2]) == False", "assert pairs_sum_to_zero([-1, 4, -2, 5, 5, 27]) == False", "assert pairs_sum_to_zero([1]) == False", "assert pairs_sum_to_zero([6, 5, -3, 3]) == True", "assert pairs_sum_to_zero([4, 3, -4, 5]) == True", "assert pairs_sum_to_zero([-2, 4, -5, 4, 1, 25]) == False", "assert pairs_sum_to_zero([2, 6, -4, 5]) == False", "assert pairs_sum_to_zero([-7, 5, 2, 4, 1, 26]) == False", "assert pairs_sum_to_zero([-8, 14, 0, 1, 7, 30]) == False", "assert pairs_sum_to_zero([1, 8, -5, 3, 7, 35]) == False", "assert pairs_sum_to_zero([6, 9, -9, 2, 7, 11]) == True", "assert pairs_sum_to_zero([-8, 7, -1, 2, 1, 28]) == True", "assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 31]) == True", "assert pairs_sum_to_zero([6, 6, -7, 6]) == False", "assert pairs_sum_to_zero([-4, 9, 2, 3, 4, 30]) == True", "assert pairs_sum_to_zero([1, 6, 1, 2]) == False", "assert pairs_sum_to_zero([5, 1, 3, 5]) == False", "assert pairs_sum_to_zero([4, 5, 8, 3]) == False", "assert pairs_sum_to_zero([6, 7, 2, 5]) == False", "assert pairs_sum_to_zero([2, 8, 10, 3]) == False", "assert pairs_sum_to_zero([1, 13, -5, 7, 7, 27]) == False", "assert pairs_sum_to_zero([4, 5, -10, 2, 10, 9]) == True", "assert pairs_sum_to_zero([2, 3, 1, 8]) == False", "assert pairs_sum_to_zero([1, 7, 4, 6]) == False", "assert pairs_sum_to_zero([2, 9, -5, 4, 6, 30]) == False", "assert pairs_sum_to_zero([4, 6, 2, 4]) == False", "assert pairs_sum_to_zero([5, 2, 1, 11]) == False", "assert pairs_sum_to_zero([5, 2, 7, 3]) == False", "assert pairs_sum_to_zero([5, 5, 2, 2]) == False", "assert pairs_sum_to_zero([-8, 14, -2, 8, 2, 35]) == True", "assert pairs_sum_to_zero([1, 3, 5, 0]) == False", "assert pairs_sum_to_zero([-1, 8, 4, 3, 7, 29]) == False", "assert pairs_sum_to_zero([2, 12, 1, 9, 6, 33]) == False", "assert pairs_sum_to_zero([-4, 11, 1, 6, 6, 28]) == False", "assert pairs_sum_to_zero([0, 11, -3, 8, 7, 26]) == False", "assert pairs_sum_to_zero([-8, 10, -4, 8, 6, 26]) == True", "assert pairs_sum_to_zero([2]) == False", "assert pairs_sum_to_zero([2, 3, 7, 1]) == False", "assert pairs_sum_to_zero([6, 1, -4, 6]) == False", "assert pairs_sum_to_zero([-2, 12, -4, 7, 1, 36]) == False", "assert pairs_sum_to_zero([2, 12, 1, 6, 7, 25]) == False", "assert pairs_sum_to_zero([-4, 11, -3, 6, 2, 27]) == False", "assert pairs_sum_to_zero([0, 13, -2, 7, 3, 31]) == False", "assert pairs_sum_to_zero([1, 4, -10, 5, 10, 9]) == True", "assert pairs_sum_to_zero([4, 1, 3, 7]) == False", "assert pairs_sum_to_zero([6, 8, 2, 5]) == False", "assert pairs_sum_to_zero([-7, 14, 2, 4, 6, 30]) == False", "assert pairs_sum_to_zero([1, 5, 1, 12]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 3, 2, 30]) == True", "assert pairs_sum_to_zero([-1, 5, -6, 8, 1, 33]) == True", "assert pairs_sum_to_zero([2, 3, 7, 4]) == False", "assert pairs_sum_to_zero([0, 14, -6, 5, 1, 35]) == False", "assert pairs_sum_to_zero([5, 4, -1, 5, 10, 6]) == False", "assert pairs_sum_to_zero([0, 13, -2, 4, 4, 28]) == False", "assert pairs_sum_to_zero([2, 2, 6, 4]) == False", "assert pairs_sum_to_zero([0, 4, -1, 5, 3, 33]) == False", "assert pairs_sum_to_zero([3, 3, 1, 4]) == False", "assert pairs_sum_to_zero([7, 5, -1, 1, 8, 10]) == True", "assert pairs_sum_to_zero([1, 3, 4, 3]) == False", "assert pairs_sum_to_zero([5, 7, 3, 4]) == False", "assert pairs_sum_to_zero([-7, 12, -3, 2, 6, 29]) == False", "assert pairs_sum_to_zero([-4, 9, -3, 6, 7, 31]) == False", "assert pairs_sum_to_zero([4, 7, -9, 5, 4, 6]) == False", "assert pairs_sum_to_zero([-4, 6, 0, 6, 3, 26]) == False", "assert pairs_sum_to_zero([4]) == False", "assert pairs_sum_to_zero([2, 7, 8, 5]) == False", "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "assert pairs_sum_to_zero([1, 4, -1, 8, 8, 12]) == True", "assert pairs_sum_to_zero([-3, 8, 1, 1, 6, 31]) == False", "assert pairs_sum_to_zero([-6, 14, 1, 8, 2, 28]) == False", "assert pairs_sum_to_zero([-3, 6, -5, 7, 7, 30]) == False", "assert pairs_sum_to_zero([3, 4, -7, 1, 2, 3]) == False", "assert pairs_sum_to_zero([-8, 11, -6, 5, 7, 36]) == False", "assert pairs_sum_to_zero([-7, 14, 0, 5, 1, 28]) == False", "assert pairs_sum_to_zero([-5, 9, -1, 7, 4, 34]) == False", "assert pairs_sum_to_zero([1, 3, 3, 5]) == False", "assert pairs_sum_to_zero([-5, 10, 2, 9, 3, 33]) == False", "assert pairs_sum_to_zero([2, 4, 1, 2]) == False", "assert pairs_sum_to_zero([-3, 9, -1, 4, 2, 30]) == False", "assert pairs_sum_to_zero([1, 3, -2, 1]) == False", "assert pairs_sum_to_zero([2, 10, -2, 2, 4, 33]) == True", "assert pairs_sum_to_zero([3, 9, -8, 6, 2, 5]) == False", "assert pairs_sum_to_zero([-6, 7, -4, 4, 2, 32]) == True", "assert pairs_sum_to_zero([3, 4, 10, 1]) == False", "assert pairs_sum_to_zero([7, 8, -10, 7, 2, 4]) == False", "assert pairs_sum_to_zero([-6, 8, 0, 4, 5, 27]) == False", "assert pairs_sum_to_zero([-6, 14, -4, 5, 6, 32]) == True", "assert pairs_sum_to_zero([-5, 12, 1, 8, 6, 31]) == False", "assert pairs_sum_to_zero([-3, 12, -6, 6, 7, 29]) == True", "assert pairs_sum_to_zero([1, 5, 1, 3]) == False", "assert pairs_sum_to_zero([5, 8, -4, 5]) == False", "assert pairs_sum_to_zero([3, 2, 1, 6]) == False", "assert pairs_sum_to_zero([-5, 4, 3, 6, 2, 27]) == False", "assert pairs_sum_to_zero([-1, 11, -4, 3, 5, 28]) == False", "assert pairs_sum_to_zero([-7, 9, 2, 1, 6, 34]) == False", "assert pairs_sum_to_zero([-1, 13, -4, 6, 3, 28]) == False", "assert pairs_sum_to_zero([6, 1, 0, 3]) == False", "assert pairs_sum_to_zero([-5, 5, -2, 3, 1, 32]) == True", "assert pairs_sum_to_zero([1, 5, -1, 8, 8, 4]) == True", "assert pairs_sum_to_zero([1, 2, 2, 2]) == False", "assert pairs_sum_to_zero([6]) == False", "assert pairs_sum_to_zero([2, 8, 1, 4]) == False", "assert pairs_sum_to_zero([2, 6, 2, 5]) == False", "assert pairs_sum_to_zero([2, 14, 3, 6, 2, 29]) == False", "assert pairs_sum_to_zero([-5, 13, -2, 8, 7, 35]) == False", "assert pairs_sum_to_zero([6, 1, 3, 2]) == False", "assert pairs_sum_to_zero([5]) == False", "assert pairs_sum_to_zero([-4, 8, -1, 7, 6, 26]) == False", "assert pairs_sum_to_zero([-4, 12, 0, 1, 7, 28]) == False", "assert pairs_sum_to_zero([5, 3, 6, 7]) == False", "assert pairs_sum_to_zero([4, 6, -8, 1, 2, 8]) == True", "assert pairs_sum_to_zero([-4, 8, -3, 9, 5, 29]) == False"], "nl": "\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    ", "func": "def pairs_sum_to_zero(l):", "examples": ">>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    ", "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero accepts a list of integers as its input.\n    It returns True if there are two unique elements in the list that\n    sum to zero, and False otherwise.\n    '''\n\n    seen = set()\n\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n\n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero accepts a list of integers as its input.\n    It returns True if there are two unique elements in the list that\n    sum to zero, and False otherwise.\n    '''\n    \n    # Check for edge cases\n    if len(set(l)) == 1 and 0 in set(l):\n        return False\n    \n    # Check for pairs that sum to zero\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    \n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef pairs_sum_to_zero(numbers: List[int]) -> bool:\n    seen = set()\n    \n    for num in numbers:\n        if -num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef pairs_sum_to_zero(numbers: List[int]) -> bool:\n    seen = set()\n    \n    for num in numbers:\n        if -num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef pairs_sum_to_zero(numbers: List[int]) -> bool:\n    # Function to check if there exist two numbers in the list that sum up to zero\n    # Input: list of integers\n    # Output: boolean indicating existence of such pair\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == 0:\n                return True\n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom itertools import combinations\n\ndef pairs_sum_to_zero(numbers: List[int]) -> bool:\n    \"\"\"\n    Accepts a list of integers as its input and returns True if there are two unique elements in the list that sum to zero, and False otherwise.\n    \"\"\"\n\n    for pair in combinations(numbers, 2):\n        if sum(pair) == 0:\n            return True\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom itertools import combinations\n\ndef pairs_sum_to_zero(numbers: List[int]) -> bool:\n    \"\"\"\n    Accepts a list of integers as its input and returns True if there are two unique elements in the list that sum to zero, and False otherwise.\n    \"\"\"\n    \n    for pair in combinations(numbers, 2):\n        if sum(pair) == 0:\n            return True\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef pairs_sum_to_zero(numbers: List[int]) -> bool:\n    \"\"\"\n    Accepts a list of integers as its input and returns True if there are two unique elements in the list that sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    \n    for num in numbers:\n        if -num in seen:\n            return True\n        seen.add(num)\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom itertools import combinations\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero accepts a list of integers as its input.\n    It returns True if there are two unique elements in the list that\n    sum to zero, and False otherwise.\n    '''\n    \n    # Check for edge case\n    if len(set(l)) == 1 and 0 in set(l):\n        return False\n    \n    # Generate combinations of 2 elements from the list\n    for pair in combinations(l, 2):\n        if sum(pair) == 0:\n            return True\n    \n    return False\n"], "plans": ["requirement pool:\n- Implement a function that efficiently detects pairs summing to zero\n- Ensure the function handles both positive and negative numbers correctly\n- Optimize the algorithm for performance with large input lists\nWe will design a static Python function using basic data structures and algorithms to efficiently detect pairs of integers that sum to zero.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum to zero'\n    Explanation: It means finding two unique elements in the list whose sum equals zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\n\n# [edge case] \n    pairs_sum_to_zero([0, 0]) = False\n    Explanation: There are no two unique elements in the list that sum to zero.\n    pairs_sum_to_zero([1, -1]) = True\n    Explanation: Both 1 and -1 are unique elements in the list and their sum is zero.\n    pairs_sum_to_zero([2, -2, 3, -3]) = True\n    Explanation: Both 2 and -2, as well as 3 and -3, are unique elements in the list that sum to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to find pairs summing to zero can handle these cases effectively.\n", "requirement pool:\n- Identify pairs of unique elements that sum to zero\n- Handle positive and negative numbers correctly\n- Optimize algorithm for large input lists\nWe will design a simple static Python function using basic logic to identify pairs of unique elements that sum to zero.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum to zero'\n    Explanation: It means finding two unique elements in the list whose sum equals zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    pairs_sum_to_zero([0, 0]) = False\n    Explanation: There are no two unique elements that sum to zero in the list.\n    pairs_sum_to_zero([1, -1]) = True\n    Explanation: Both 1 and -1 are unique elements in the list and their sum is zero.\n    pairs_sum_to_zero([2, 3, -5, 2]) = True\n    Explanation: The unique elements 3 and -5 sum to zero.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(set(l)) == 1 and 0 in set(l):\n            return False\n        (other code)\n", "requirement pool:\n- Implement function to check for zero-sum pairs\n- Ensure function handles edge cases like single-element lists\n- Optimize algorithm for large input lists\nWe will use a simple approach to iterate through the list and check for pairs that sum to zero.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum to zero'\n    Explanation: It means finding two unique elements in the list whose sum equals zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    pairs_sum_to_zero([1, 3, 5, 0]) = False\n    Explanation: There are no two unique elements in the list that sum to zero.\n    pairs_sum_to_zero([0, 0]) = True\n    Explanation: Both 0 and 0 are unique elements in the list and their sum is zero.\n    pairs_sum_to_zero([1, -1]) = True\n    Explanation: Both 1 and -1 are unique elements in the list and their sum is zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should cover all scenarios.\n", "requirement pool:\n- Implement pairs_sum_to_zero function efficiently\n- Ensure the function handles edge cases and large input sizes\n- Optimize the function for speed and memory usage\nWe will use a simple approach to iterate through the list of numbers and check for pairs summing to zero without using any external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'pairs sum to zero'\n    Explanation: The core concept is to find pairs of numbers in the list that sum up to zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic is provided in the plan. It iterates through the list and checks for pairs that sum to zero.\n\n# [edge case] \n    pairs_sum_to_zero([1, 2, 3, 4]) = False\n    Explanation: There are no pairs in the list that sum up to zero.\n    pairs_sum_to_zero([1, -1, 2, -2]) = True\n    Explanation: The pair (-1, 1) sums up to zero.\n    pairs_sum_to_zero([0, 0, 0, 0]) = True\n    Explanation: The pair (0, 0) sums up to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic covers all scenarios.\n", "requirement pool:\n- Implement pairs_sum_to_zero function efficiently\n- Handle edge cases like empty list input\n- Ensure compatibility with Python 3.x\nWe will use a simple approach to iterate through the list of numbers and check for pairs summing to zero without using any external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'pairs sum to zero'\n    Explanation: The core concept is to find pairs of numbers in the list that sum up to zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic is provided in the plan itself. It iterates through the list of numbers and checks for pairs that sum to zero.\n\n# [edge case] \n    pairs_sum_to_zero([1, 2, 3, 4]) = False\n    Explanation: There are no pairs in the list that sum up to zero.\n    pairs_sum_to_zero([1, -1, 2, -2]) = True\n    Explanation: The pair (-1, 1) sums up to zero.\n    pairs_sum_to_zero([0, 0, 0, 0]) = True\n    Explanation: The pair (0, 0) sums up to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic covers all scenarios.\n", "requirement pool:\n- Efficiently identify pairs of numbers summing to zero\n- Handle both positive and negative numbers\n- Return False if no pairs summing to zero\nWe will use the given static Python function definition to efficiently identify pairs of numbers summing to zero.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'pairs sum to zero'\n    Explanation: The core concept is to find pairs of numbers in the list that sum up to zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is to use the given static Python function definition, the logic is already provided in the code snippet.\n\n# [edge case] \n    pairs_sum_to_zero([1, 2, 3, 4]) = False\n    Explanation: There are no pairs of numbers that sum up to zero in the list.\n    pairs_sum_to_zero([1, -1, 2, -2]) = True\n    Explanation: The pair (-1, 1) sums up to zero.\n    pairs_sum_to_zero([0, 0, 0, 0]) = True\n    Explanation: The pair (0, 0) sums up to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic covers all scenarios.\n", "requirement pool:\n- Implement the pairs_sum_to_zero function with efficient algorithm\n- Handle edge cases such as empty list or single element list\n- Optimize the function for performance on large input lists\nWe will utilize the built-in itertools library in Python to efficiently generate all possible pairs of numbers from the input list and check if any pair sums to zero.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum to zero'\n    Explanation: It means finding two unique elements in the list that add up to zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using itertools library to generate all possible pairs, the code logic would involve:\n    - Importing itertools library\n    - Generating all possible pairs of numbers from the input list\n    - Checking if any pair sums to zero\n    - Returning True if such pair exists, False otherwise\n\n# [edge case] \n    pairs_sum_to_zero([0, 0]) = False\n    Explanation: There are no two unique elements that sum to zero in this case.\n    pairs_sum_to_zero([1, -1]) = True\n    Explanation: Both 1 and -1 sum up to zero.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement analysis:\nThe function should iterate through the list of numbers and check for pairs that sum to zero. It should handle both positive and negative numbers, ensuring correctness and efficiency. Edge cases like single-element lists should be considered.\nrequirement pool:\n- Implement the core logic to identify pairs summing to zero\n- Handle positive and negative numbers correctly\n- Optimize the function for performance, especially with large input lists\nWe will use a simple approach to iterate through the list of numbers and check for pairs that sum to zero. We will leverage the itertools library in Python to efficiently generate all possible pairs of numbers. Then, we will check if any pair sums to zero.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum to zero'\n    Explanation: It means finding two unique elements in the list that add up to zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already provides a clear approach using itertools to generate pairs and check for the sum to zero, the implementation can follow the outlined steps.\n\n# [edge case] \n    pairs_sum_to_zero([1, 2, 3, -3]) = True\n    Explanation: The pair (3, -3) sums to zero.\n    pairs_sum_to_zero([1, 2, 3, 4]) = False\n    Explanation: There are no two unique elements that sum to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The plan covers the logic to efficiently find pairs that sum to zero.\n", "requirement analysis:\nThe function should iterate through the list of numbers and efficiently identify if there exist two unique elements whose sum equals zero. It should handle positive, negative, and zero values appropriately. Edge cases like an empty list or a single element list should be considered and return False. Performance optimization is crucial for large input sizes.\nrequirement pool:\n- Implement the core logic to identify pairs of numbers that sum to zero\n- Handle edge cases such as empty list input and single element list\n- Optimize the algorithm for better performance\nWe will use a simple approach to iterate through the list of numbers and check if there exist two unique elements whose sum equals zero. We will leverage the itertools library in Python to efficiently generate all possible pairs of numbers for comparison.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum to zero'\n    Explanation: It means finding two unique elements in the list whose sum equals zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    pairs_sum_to_zero([1, 2, 3, -3]) = True\n    Explanation: The pair of numbers (-3, 3) sums to zero.\n    pairs_sum_to_zero([1, 2, 3, 4]) = False\n    Explanation: There are no two unique elements that sum to zero.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- Implement a function that correctly identifies pairs of integers summing to zero\n- Handle edge cases such as single-element lists or lists with no valid pairs\n- Optimize the algorithm to efficiently handle large input lists\nWe will use a simple approach to iterate through the list and check for pairs that sum to zero. We will leverage the itertools library in Python to generate combinations of 2 elements from the list efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum to zero'\n    Explanation: It means finding two unique elements in the list whose sum equals zero.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will iterate through the list and check for pairs that sum to zero. We will leverage the itertools library in Python to generate combinations of 2 elements from the list efficiently.\n\n# [edge case] \n    pairs_sum_to_zero([1, 3, 5, 0]) = False\n    Explanation: There are no two unique elements in the list that sum to zero.\n    pairs_sum_to_zero([2, -2, 3, 1]) = True\n    Explanation: The pair (-2, 2) sums to zero.\n    pairs_sum_to_zero([0, 0, 0]) = False\n    Explanation: Although there are multiple zeros, they are not considered as unique elements.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(set(l)) == 1 and 0 in set(l):\n            return False\n        (other code)\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [126, 126, 126, 126, 126, 126, 126, 126, 126, 126], "completion": "from typing import List\n## main.py\n\nfrom typing import List\nfrom itertools import combinations\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    '''\n    pairs_sum_to_zero accepts a list of integers as its input.\n    It returns True if there are two unique elements in the list that\n    sum to zero, and False otherwise.\n    '''\n    \n    # Check for edge case\n    if len(set(l)) == 1 and 0 in set(l):\n        return False\n    \n    # Generate combinations of 2 elements from the list\n    for pair in combinations(l, 2):\n        if sum(pair) == 0:\n            return True\n    \n    return False\n", "passed": true, "pass": true, "pass_num": 10, "round": 400, "repair_prompt": ["def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero accepts a list of integers as its input.\nit returns True if there are two unique elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "'''pairs_sum_to_zero accepts a list of integers as its input.\nIf there exist two distinct elements in the list that add up to zero, the function returns True, otherwise it returns False.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "def pairs_sum_to_zero accepts a list of integers as its input and returns True if there are two unique elements in the list that sum to zero, and False otherwise. \n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False"], "mutate_method": "rephrase_one", "parent_index": 369}
