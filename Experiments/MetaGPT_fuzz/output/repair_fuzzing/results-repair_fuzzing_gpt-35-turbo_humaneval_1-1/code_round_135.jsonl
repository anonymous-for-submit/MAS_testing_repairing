{"task_id": "HumanEval/117", "prompt": "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Make sure the function handles various edge cases, such as words with varying lengths and different numbers of vowels.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": ["def check(select_words):\n\tassert select_words('eg aqk', 2) == ['aqk']", "def check(select_words):\n\tassert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "def check(select_words):\n\tassert select_words('syk', 6) == []", "def check(select_words):\n\tassert select_words('gw', 9) == []", "def check(select_words):\n\tassert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "def check(select_words):\n\tassert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "def check(select_words):\n\tassert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "def check(select_words):\n\tassert select_words('zGMhBC', 6) == ['zGMhBC']", "def check(select_words):\n\tassert select_words('kfohjsjunakqmmsx', 1) == []", "def check(select_words):\n\tassert select_words('KbpFfWgXZoVjXV', 1) == []", "def check(select_words):\n\tassert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "def check(select_words):\n\tassert select_words('kg', 1) == []", "def check(select_words):\n\tassert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "def check(select_words):\n\tassert select_words('xrbpxpncgqufqkq', 6) == []", "def check(select_words):\n\tassert select_words('sqgikswgssxsbwkl', 7) == []", "def check(select_words):\n\tassert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "def check(select_words):\n\tassert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "def check(select_words):\n\tassert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "def check(select_words):\n\tassert select_words('bnXA AjPVh', 5) == []", "def check(select_words):\n\tassert select_words('omnivbqgmavyqdgqssas', 6) == []", "def check(select_words):\n\tassert select_words('fmjizkhknnihqioic', 4) == []", "def check(select_words):\n\tassert select_words('lINKPOlFIImtg', 3) == []", "def check(select_words):\n\tassert select_words('nPxmyTd', 7) == ['nPxmyTd']", "def check(select_words):\n\tassert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "def check(select_words):\n\tassert select_words('mehochzpausf', 2) == []", "def check(select_words):\n\tassert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "def check(select_words):\n\tassert select_words('EGiDfM', 1) == []", "def check(select_words):\n\tassert select_words('mc', 7) == []", "def check(select_words):\n\tassert select_words('wzx', 5) == []", "def check(select_words):\n\tassert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "def check(select_words):\n\tassert select_words('xwkxcjffocow', 5) == []", "def check(select_words):\n\tassert select_words('dl', 5) == []", "def check(select_words):\n\tassert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "def check(select_words):\n\tassert select_words('ABIStgq', 5) == ['ABIStgq']", "def check(select_words):\n\tassert select_words('nb', 2) == ['nb']", "def check(select_words):\n\tassert select_words('ny', 2) == ['ny']", "def check(select_words):\n\tassert select_words('HWCLBC', 6) == ['HWCLBC']", "def check(select_words):\n\tassert select_words('uuh', 6) == []", "def check(select_words):\n\tassert select_words('uoubngttn', 3) == []", "def check(select_words):\n\tassert select_words('g', 5) == []", "def check(select_words):\n\tassert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "def check(select_words):\n\tassert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "def check(select_words):\n\tassert select_words('aztxoxesjkzqebhrfzw', 3) == []", "def check(select_words):\n\tassert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "def check(select_words):\n\tassert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "def check(select_words):\n\tassert select_words('tJzO PnCT', 3) == ['tJzO']", "def check(select_words):\n\tassert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "def check(select_words):\n\tassert select_words('qhwubvrfmwy', 2) == []", "def check(select_words):\n\tassert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "def check(select_words):\n\tassert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "def check(select_words):\n\tassert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "def check(select_words):\n\tassert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "def check(select_words):\n\tassert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "def check(select_words):\n\tassert select_words('r s rhhipmt', 6) == ['rhhipmt']", "def check(select_words):\n\tassert select_words('aDqyhePv', 6) == ['aDqyhePv']", "def check(select_words):\n\tassert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "def check(select_words):\n\tassert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "def check(select_words):\n\tassert select_words('aru', 5) == []", "def check(select_words):\n\tassert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "def check(select_words):\n\tassert select_words('SNeiILCez', 4) == []", "def check(select_words):\n\tassert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "def check(select_words):\n\tassert select_words('ySmjGAg', 6) == ['ySmjGAg']", "def check(select_words):\n\tassert select_words('bRJRZC', 3) == []", "def check(select_words):\n\tassert select_words('u', 1) == []", "def check(select_words):\n\tassert select_words('djucfuuizrjfvuzzo', 4) == []", "def check(select_words):\n\tassert select_words('dvYLMt', 6) == ['dvYLMt']", "def check(select_words):\n\tassert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "def check(select_words):\n\tassert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "def check(select_words):\n\tassert select_words('yp', 6) == []", "def check(select_words):\n\tassert select_words('v', 4) == []", "def check(select_words):\n\tassert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "def check(select_words):\n\tassert select_words('afrrguc', 5) == ['afrrguc']", "def check(select_words):\n\tassert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "def check(select_words):\n\tassert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "def check(select_words):\n\tassert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "def check(select_words):\n\tassert select_words('nh vu lcakrb', 1) == ['vu']", "def check(select_words):\n\tassert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "def check(select_words):\n\tassert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(select_words):\n\tassert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "def check(select_words):\n\tassert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "def check(select_words):\n\tassert select_words('MjRnAErHPguQC', 1) == []", "def check(select_words):\n\tassert select_words('tmchxmttrgfdanq', 3) == []", "def check(select_words):\n\tassert select_words('jezkeorvxnruwhhwzxm', 7) == []", "def check(select_words):\n\tassert select_words('caurfxlpkygqxoknil', 4) == []", "def check(select_words):\n\tassert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "def check(select_words):\n\tassert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "def check(select_words):\n\tassert select_words('NSjIbZV', 2) == []", "def check(select_words):\n\tassert select_words('rPKhzIot', 6) == ['rPKhzIot']", "def check(select_words):\n\tassert select_words('ASDVzOVVDEdj J', 1) == ['J']", "def check(select_words):\n\tassert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "def check(select_words):\n\tassert select_words(' siweqafqot', 5) == []", "def check(select_words):\n\tassert select_words('xdQgsAHI', 5) == []", "def check(select_words):\n\tassert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "def check(select_words):\n\tassert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "def check(select_words):\n\tassert select_words('hguHoJGaaNwX', 3) == []", "def check(select_words):\n\tassert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "def check(select_words):\n\tassert select_words('choounwx', 5) == ['choounwx']", "def check(select_words):\n\tassert select_words('yue', 2) == []", "def check(select_words):\n\tassert select_words('DDdrgPy', 4) == []", "def check(select_words):\n\tassert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "def check(select_words):\n\tassert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "def check(select_words):\n\tassert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "def check(select_words):\n\tassert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "def check(select_words):\n\tassert select_words('Reg MuZcF', 4) == ['MuZcF']", "def check(select_words):\n\tassert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "def check(select_words):\n\tassert select_words('sl', 6) == []", "def check(select_words):\n\tassert select_words('IFKqNq ', 5) == ['IFKqNq']", "def check(select_words):\n\tassert select_words('lfspeijyudniowk', 1) == []", "def check(select_words):\n\tassert select_words('kogmgdnk', 7) == ['kogmgdnk']", "def check(select_words):\n\tassert select_words('nnchatjackywoavfwfps', 5) == []", "def check(select_words):\n\tassert select_words('d', 2) == []", "def check(select_words):\n\tassert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "def check(select_words):\n\tassert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "def check(select_words):\n\tassert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "def check(select_words):\n\tassert select_words('jopfxbbvlslmluypcdt', 3) == []", "def check(select_words):\n\tassert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "def check(select_words):\n\tassert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "def check(select_words):\n\tassert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "def check(select_words):\n\tassert select_words('etdrxwybqi', 1) == []", "def check(select_words):\n\tassert select_words('aVCSziOkLCLGizHcmC', 2) == []", "def check(select_words):\n\tassert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "def check(select_words):\n\tassert select_words('txXxge', 4) == []", "def check(select_words):\n\tassert select_words('kcpieuVjAOaxdpB', 4) == []", "def check(select_words):\n\tassert select_words('oh', 8) == []", "def check(select_words):\n\tassert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "def check(select_words):\n\tassert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "def check(select_words):\n\tassert select_words('eywh qxreeexrrhyovpwl', 7) == []", "def check(select_words):\n\tassert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "def check(select_words):\n\tassert select_words('asfwxvbzdfsrymc', 3) == []", "def check(select_words):\n\tassert select_words('nBmjWxiPV', 3) == []", "def check(select_words):\n\tassert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "test_case_list": ["assert select_words('eg aqk', 2) == ['aqk']", "assert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "assert select_words('syk', 6) == []", "assert select_words('gw', 9) == []", "assert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "assert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "assert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "assert select_words('zGMhBC', 6) == ['zGMhBC']", "assert select_words('kfohjsjunakqmmsx', 1) == []", "assert select_words('KbpFfWgXZoVjXV', 1) == []", "assert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "assert select_words('kg', 1) == []", "assert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "assert select_words('xrbpxpncgqufqkq', 6) == []", "assert select_words('sqgikswgssxsbwkl', 7) == []", "assert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "assert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "assert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "assert select_words('bnXA AjPVh', 5) == []", "assert select_words('omnivbqgmavyqdgqssas', 6) == []", "assert select_words('fmjizkhknnihqioic', 4) == []", "assert select_words('lINKPOlFIImtg', 3) == []", "assert select_words('nPxmyTd', 7) == ['nPxmyTd']", "assert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "assert select_words('mehochzpausf', 2) == []", "assert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "assert select_words('EGiDfM', 1) == []", "assert select_words('mc', 7) == []", "assert select_words('wzx', 5) == []", "assert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "assert select_words('xwkxcjffocow', 5) == []", "assert select_words('dl', 5) == []", "assert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "assert select_words('ABIStgq', 5) == ['ABIStgq']", "assert select_words('nb', 2) == ['nb']", "assert select_words('ny', 2) == ['ny']", "assert select_words('HWCLBC', 6) == ['HWCLBC']", "assert select_words('uuh', 6) == []", "assert select_words('uoubngttn', 3) == []", "assert select_words('g', 5) == []", "assert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "assert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "assert select_words('aztxoxesjkzqebhrfzw', 3) == []", "assert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "assert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "assert select_words('tJzO PnCT', 3) == ['tJzO']", "assert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "assert select_words('qhwubvrfmwy', 2) == []", "assert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "assert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "assert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "assert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "assert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "assert select_words('r s rhhipmt', 6) == ['rhhipmt']", "assert select_words('aDqyhePv', 6) == ['aDqyhePv']", "assert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "assert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "assert select_words('aru', 5) == []", "assert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "assert select_words('SNeiILCez', 4) == []", "assert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "assert select_words('ySmjGAg', 6) == ['ySmjGAg']", "assert select_words('bRJRZC', 3) == []", "assert select_words('u', 1) == []", "assert select_words('djucfuuizrjfvuzzo', 4) == []", "assert select_words('dvYLMt', 6) == ['dvYLMt']", "assert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "assert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "assert select_words('yp', 6) == []", "assert select_words('v', 4) == []", "assert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "assert select_words('afrrguc', 5) == ['afrrguc']", "assert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "assert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "assert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "assert select_words('nh vu lcakrb', 1) == ['vu']", "assert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "assert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "assert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "assert select_words('MjRnAErHPguQC', 1) == []", "assert select_words('tmchxmttrgfdanq', 3) == []", "assert select_words('jezkeorvxnruwhhwzxm', 7) == []", "assert select_words('caurfxlpkygqxoknil', 4) == []", "assert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "assert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "assert select_words('NSjIbZV', 2) == []", "assert select_words('rPKhzIot', 6) == ['rPKhzIot']", "assert select_words('ASDVzOVVDEdj J', 1) == ['J']", "assert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "assert select_words(' siweqafqot', 5) == []", "assert select_words('xdQgsAHI', 5) == []", "assert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "assert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "assert select_words('hguHoJGaaNwX', 3) == []", "assert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "assert select_words('choounwx', 5) == ['choounwx']", "assert select_words('yue', 2) == []", "assert select_words('DDdrgPy', 4) == []", "assert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "assert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "assert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "assert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "assert select_words('Reg MuZcF', 4) == ['MuZcF']", "assert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "assert select_words('sl', 6) == []", "assert select_words('IFKqNq ', 5) == ['IFKqNq']", "assert select_words('lfspeijyudniowk', 1) == []", "assert select_words('kogmgdnk', 7) == ['kogmgdnk']", "assert select_words('nnchatjackywoavfwfps', 5) == []", "assert select_words('d', 2) == []", "assert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "assert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "assert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "assert select_words('jopfxbbvlslmluypcdt', 3) == []", "assert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "assert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "assert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "assert select_words('etdrxwybqi', 1) == []", "assert select_words('aVCSziOkLCLGizHcmC', 2) == []", "assert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "assert select_words('txXxge', 4) == []", "assert select_words('kcpieuVjAOaxdpB', 4) == []", "assert select_words('oh', 8) == []", "assert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "assert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "assert select_words('eywh qxreeexrrhyovpwl', 7) == []", "assert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "assert select_words('asfwxvbzdfsrymc', 3) == []", "assert select_words('nBmjWxiPV', 3) == []", "assert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "nl": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    ", "func": "def select_words(s, n):", "examples": "Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    ", "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    '''\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants,\n    in the order these words appear in the string s.\n    If the string s is empty, the function returns an empty list.\n    Note: Input string contains only letters and spaces.\n    '''\n\n    def count_consonants(word: str) -> int:\n        consonants = 'bcdfghjklmnpqrstvwxyz'\n        return sum(1 for letter in word if letter.lower() in consonants)\n\n    if n == 0 or not s:\n        return []\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    '''\n    Given a string s and a natural number n, this function returns a list of words from string s that contain exactly n consonants,\n    in the order these words appear in the string s.\n    If the string s is empty, it returns an empty list.\n    Assumption: input string contains only letters and spaces.\n    '''\n\n    def count_consonants(word: str) -> int:\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for letter in word if letter in consonants)\n\n    if n == 0 or not s:\n        return []\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    '''\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants,\n    in the order these words appear in the string s.\n    If the string s is empty, the function returns an empty list.\n    Note: The input string contains only letters and spaces.\n    '''\n\n    def count_consonants(word: str) -> int:\n        consonants = 'bcdfghjklmnpqrstvwxyz'\n        return sum(1 for letter in word if letter.lower() in consonants)\n\n    if n == 0:\n        return []\n    elif not s:\n        return []\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n\n    return result\n", "from typing import List\n## main.py\n\nimport re\nfrom typing import List\n\ndef words_with_n_consonants(s: str, n: int) -> List[str]:\n    \"\"\"Return a list of words from string s that contain exactly n consonants.\n    Ensure words are returned in the order they appear in the string s.\n    If s is empty, return an empty list.\"\"\"\n    \n    def count_consonants(word):\n        return len(re.findall(r'[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]', word))\n    \n    if not s:\n        return []\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n", "from typing import List\n## main.py\n\nimport re\nfrom typing import List\n\ndef words_with_n_consonants(s: str, n: int) -> List[str]:\n    \"\"\"\n    Filter words with n consonants from the input string.\n\n    Args:\n        s: Input string containing words separated by spaces.\n        n: Number of consonants to filter words by.\n\n    Returns:\n        List of words from the input string that contain n consonants.\n\n    Examples:\n        words_with_n_consonants('', 2) -> []\n        words_with_n_consonants('abc def', 0) -> ['abc', 'def']\n    \"\"\"\n    \n    def count_consonants(word: str) -> int:\n        return len(re.findall(r'[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]', word))\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n\n    return result\n", "from typing import List\n## main.py\n\nimport re\nfrom typing import List\n\ndef words_with_n_consonants(s: str, n: int) -> List[str]:\n    \"\"\"\n    Extracts words from the input string and returns a list of words that contain a specific number of consonants.\n\n    Args:\n        s: Input string\n        n: Number of consonants to check for in each word\n\n    Returns:\n        List of words that contain n consonants\n    \"\"\"\n    \n    def count_consonants(word: str) -> int:\n        \"\"\"\n        Counts the number of consonants in a word.\n\n        Args:\n            word: Input word\n\n        Returns:\n            Number of consonants in the word\n        \"\"\"\n        return len(re.findall(r'[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]', word))\n\n    if not s:\n        return []\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n\n    return result\n", "from typing import List\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    '''\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants, in the order these words appear in the string s.\n    If the string s is empty, the function returns an empty list.\n    Note: The input string contains only letters and spaces.\n    '''\n    \n    def count_consonants(word: str) -> int:\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for letter in word if letter in consonants)\n    \n    if not s:\n        return []\n    if n == 0:\n        return []\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    '''\n    Given a string s and a natural number n, this function returns a list of words from string s that contain exactly n consonants, in the order they appear in s.\n    If s is empty, an empty list is returned.\n    '''\n\n    def count_consonants(word: str) -> int:\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for letter in word if letter in consonants)\n\n    if not s:\n        return []\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n\n    return result\n", "from typing import List\n## main.py\n\nimport re\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    '''\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants, in the order these words appear in the string s.\n    If the string s is empty, the function returns an empty list.\n    Note: The input string contains only letters and spaces.\n    '''\n\n    def count_consonants(word: str) -> int:\n        consonants = re.findall(r'[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]', word)\n        return len(consonants)\n\n    result = []\n    words = s.split()\n\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n\n    return result\n", "from typing import List\n## main.py\n\nimport re\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    '''\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants, in the order these words appear in the string s.\n    If the string s is empty, the function returns an empty list.\n    Note: The input string contains only letters and spaces.\n    '''\n    \n    def count_consonants(word: str) -> int:\n        consonants = re.findall(r'[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]', word)\n        return len(consonants)\n    \n    if not s:\n        return []\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n"], "plans": ["requirement pool:\n- Implement word filtering based on consonant count\n- Handle edge cases such as empty input string\n- Maintain accurate word order in the output list\nWe will design a static Python function using basic string manipulation and list comprehension to filter words based on consonant count.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the speech sounds that are not vowels. In this requirement, we need to identify words that contain a specific number of consonants.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    select_words(\"Mary had a little lamb\", 0) = []\n    Explanation: If the required number of consonants is 0, then no word will have exactly 0 consonants, so the expected output is an empty list.\n    select_words(\"\", 4) = []\n    Explanation: Since the input string is empty, there are no words to check for consonants, so the expected output is an empty list.\n    select_words(\"Hello world\", 5) = []\n    Explanation: None of the words in the input string have exactly 5 consonants, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n == 0:\n            return []\n        elif not s:\n            return []\n        (other code)\n", "requirement pool:\n- Implement word filtering based on consonant count\n- Handle edge cases such as empty strings and varying word lengths\n- Maintain original word order in the output list\nWe will design a static Python function using basic string manipulation and list comprehension to filter words based on consonant count.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the speech sounds that are not vowels. In this requirement, we need to identify words that contain a specific number of consonants.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    select_words(\"Mary had a little lamb\", 0) = []\n    Explanation: Since the requirement specifies to return words with exactly n consonants, when n is 0, there are no words that meet this condition.\n    select_words(\"\", 4) = []\n    Explanation: When the input string is empty, the function should return an empty list as specified in the requirement.\n    select_words(\"Hello world\", 5) = []\n    Explanation: None of the words in the input string have exactly 5 consonants.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n == 0:\n            return []\n        elif not s:\n            return []\n        (other code)\n", "requirement pool:\n- Implement word filtering based on consonant count\n- Handle edge cases such as empty input string\n- Maintain the order of words in the output list\nWe will design a static Python function using basic string manipulation and list comprehension to filter words based on consonant count.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the speech sounds that are not vowels. In this requirement, we need to identify words containing a specific number of consonants.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    select_words(\"Mary had a little lamb\", 0) = []\n    Explanation: Since the requirement specifies to return words with exactly n consonants, when n is 0, there are no words that meet this condition.\n    select_words(\"\", 4) = []\n    Explanation: When the input string is empty, the function should return an empty list as specified in the requirement.\n    select_words(\"Hello world\", 5) = []\n    Explanation: There are no words in the input string with exactly 5 consonants.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n == 0:\n            return []\n        elif not s:\n            return []\n        (other code)\n", "requirement pool:\n- Implement function to extract words with n consonants\n- Handle edge case of empty input string\n- Ensure word order preservation\nWe will use the re library in Python to efficiently filter words with n consonants. The approach involves using regular expressions to count the number of consonants in each word and filter accordingly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the speech sounds that are not vowels. In this requirement, we need to identify words with a specific number of consonants.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using the re library and regular expressions to count consonants, we can follow the steps provided in the plan to implement the code.\n\n# [edge case] \n    words_with_n_consonants('', 2) = []\n    Explanation: Since the input string is empty, there are no words to check for consonants, so the expected output is an empty list.\n    words_with_n_consonants('abc def', 0) = ['abc', 'def']\n    Explanation: Both 'abc' and 'def' have 0 consonants, so they are included in the output list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not s:\n            return []\n        (other code)\n", "requirement pool:\n- Implement function to filter words with n consonants\n- Ensure correct word order in the output list\n- Handle empty string input case\nWe will use the re library in Python to efficiently filter words with n consonants by matching consonants in each word. The order of words will be maintained by iterating through the input string. We will handle the empty string case by returning an empty list.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the letters in the alphabet that are not vowels (A, E, I, O, U). In this requirement, we need to find words that contain a specific number of consonants.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using the re library to filter words with n consonants by matching consonants in each word. The order of words will be maintained by iterating through the input string. If the input string is empty, an empty list will be returned.\n\n# [edge case] \n    words_with_n_consonants('', 2) = []\n    Explanation: Since the input string is empty, there are no words to check for consonants, so the expected output is an empty list.\n    words_with_n_consonants('abc def', 0) = ['abc', 'def']\n    Explanation: Both 'abc' and 'def' have 0 consonants, so they are included in the output list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The plan already covers the scenario of an empty input string and returning an empty list.\n", "requirement pool:\n- Implement function to extract words with n consonants\n- Ensure correct word order is maintained\n- Handle edge case of empty input string\nWe will use the re library in Python to extract words from the input string and count the number of consonants in each word.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the speech sounds that are not vowels. In this requirement, we need to identify words that contain a specific number of consonants.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions the use of the re library to extract words and count consonants, we can follow the steps provided in the plan to implement the code.\n\n# [edge case] \n    words_with_n_consonants('', 2) = []\n    Explanation: Since the input string is empty, there are no words to check for consonants, so the expected output is an empty list.\n    words_with_n_consonants('abc def', 0) = ['abc', 'def']\n    Explanation: Both 'abc' and 'def' have 0 consonants, so they are included in the output list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not s:\n            return []\n        (other code)\n", "requirement pool:\n- Implement word filtering based on consonant count\n- Maintain word order in the output list\n- Handle empty input strings appropriately\nWe will use Python and the built-in string manipulation functions to implement the word filtering based on consonant count.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the speech sounds that are not vowels. In this requirement, we need to identify words with a specific number of consonants.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\n\n# [edge case] \n    select_words(\"\", 2) = []\n    Explanation: Since the input string is empty, there are no words to check for consonant count.\n    select_words(\"Hello\", 0) = []\n    Explanation: When n is 0, no word can have 0 consonants, so the expected output is an empty list.\n    select_words(\"Hello world\", 4) = [\"world\"]\n    Explanation: The word \"world\" has 4 consonants, which is the required count.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not s:\n            return []\n        if n == 0:\n            return []\n        (other code)\n", "requirement pool:\n- Implement word filtering based on consonant count\n- Preserve word order in the output list\n- Handle empty input strings appropriately\nWe will design a static Python function using basic string manipulation and list comprehension to filter words based on consonant count.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the speech sounds that are not vowels. In this requirement, we need to count the number of consonants in each word.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'exactly': means that the number of consonants in a word should be exactly equal to the given number\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    select_words(\"\", 2) = []\n    Explanation: Since the input string is empty, there are no words to check for consonant count.\n    select_words(\"Hello\", 0) = []\n    Explanation: When n is 0, no word can have exactly 0 consonants.\n    select_words(\"Hello\", 5) = []\n    Explanation: None of the words in the input string have exactly 5 consonants.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not s:\n            return []\n        (other code)\n", "requirement pool:\n- Implement word filtering based on consonant count\n- Maintain word order from input string\n- Handle empty input strings appropriately\nWe will use Python and the built-in libraries to implement the function for filtering words based on consonant count.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the speech sounds that are not vowels. In this requirement, we need to count the number of consonants in each word.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using Python and built-in libraries, we can utilize the `re` module to handle regular expressions for identifying consonants and splitting the words in the string. Here is a detailed logic to implement the code:\n    \n    1. Import the `re` module.\n    2. Define a function `select_words(s, n)` that takes a string `s` and a natural number `n` as input.\n    3. Initialize an empty list `result` to store the words that meet the criteria.\n    4. Use regex to split the string `s` into words.\n    5. Iterate through each word:\n        - Count the number of consonants in the word.\n        - If the count matches `n`, add the word to the `result` list.\n    6. Return the `result` list.\n\n# [edge case] \n    select_words(\"Mary had a little lamb\", 0) = []\n    Explanation: Since the requirement specifies that we need words with exactly `n` consonants, when `n` is 0, no word will meet this condition, so the expected output is an empty list.\n    \n    select_words(\"\", 4) = []\n    Explanation: When the input string is empty, there are no words to check for consonant count, so the function should return an empty list.\n    \n    select_words(\"Hello world\", 5) = []\n    Explanation: None of the words in the string \"Hello world\" have exactly 5 consonants, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the main code implementation covers scenarios where there are no words with the specified consonant count.\n", "requirement pool:\n- Efficiently filter words based on consonant count\n- Handle edge cases gracefully\n- Maintain accurate word order in the output list\nWe will use the re library in Python to efficiently filter words based on consonant count. The function will iterate through the input string, extract words, count consonants in each word, and return words that match the specified consonant count.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the speech sounds that are not vowels. In this requirement, we need to identify words containing a specific number of consonants.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions the usage of the re library to filter words based on consonant count, we can follow the plan steps to implement the code.\n\n# [edge case] \n    select_words(\"Mary had a little lamb\", 0) = []\n    Explanation: If the required consonant count is 0, no word will have exactly 0 consonants.\n    select_words(\"\", 4) = []\n    Explanation: If the input string is empty, the function should return an empty list.\n    select_words(\"OnlyVowels\", 3) = []\n    Explanation: If all words in the string contain only vowels, there won't be any word with the specified consonant count.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not s:\n            return []\n        (other code)\n"], "scores": [1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, false, false, false, true, true, true, true], "pass_test_cases_num": [133, 133, 133, 0, 0, 0, 133, 133, 133, 133], "completion": "from typing import List\n## main.py\n\nimport re\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    '''\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants, in the order these words appear in the string s.\n    If the string s is empty, the function returns an empty list.\n    Note: The input string contains only letters and spaces.\n    '''\n    \n    def count_consonants(word: str) -> int:\n        consonants = re.findall(r'[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]', word)\n        return len(consonants)\n    \n    if not s:\n        return []\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n", "passed": true, "pass": true, "pass_num": 7, "round": 135, "repair_prompt": ["def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Make sure the function handles various edge cases, such as words with varying lengths and different numbers of vowels.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants. Ensure that the words are returned in the order they appear in the string s. If the string s is empty, return an empty list.", "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 206}
