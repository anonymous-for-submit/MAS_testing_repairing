{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure that the input string only contains valid numeral words before processing.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": ["def check(sort_numbers):\n\tassert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one\") == 'one'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four three six\") == 'three four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one six four\") == 'one four six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two\") == 'one two'", "def check(sort_numbers):\n\tassert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four five five one one\") == 'one one four five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four zero two five\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight\") == 'eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six three\") == 'three six'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero\") == 'zero seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four three zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven\") == 'seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six nine three\") == 'three six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one nine three\") == 'one three four nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "def check(sort_numbers):\n\tassert sort_numbers('three five nine') == 'three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three\") == 'zero three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one seven\") == 'one four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six\") == 'six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"four two seven\") == 'two four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three four five\") == 'three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five four zero\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three seven two\") == 'two three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four six four one\") == 'one four four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight six three\") == 'three six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three five\") == 'three five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four\") == 'four'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero four one\") == 'zero one four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine\") == 'nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three\") == 'three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three four zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five\") == 'five'", "def check(sort_numbers):\n\tassert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers('three') == 'three'", "def check(sort_numbers):\n\tassert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six\") == 'six'", "def check(sort_numbers):\n\tassert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five\") == 'five eight'", "def check(sort_numbers):\n\tassert sort_numbers('') == ''", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine nine five\") == 'five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three\") == 'three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero\") == 'zero'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine zero\") == 'zero nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one six two seven\") == 'one two six seven'"], "test_case_list": ["assert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "assert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "assert sort_numbers(\"one\") == 'one'", "assert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "assert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "assert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "assert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "assert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "assert sort_numbers(\"four four three six\") == 'three four four six'", "assert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "assert sort_numbers(\"nine one six four\") == 'one four six nine'", "assert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "assert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "assert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "assert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "assert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "assert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "assert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "assert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "assert sort_numbers(\"one two\") == 'one two'", "assert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "assert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "assert sort_numbers(\"four five five one one\") == 'one one four five five'", "assert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "assert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "assert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "assert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "assert sort_numbers(\"four zero two five\") == 'zero two four five'", "assert sort_numbers(\"eight\") == 'eight'", "assert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "assert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "assert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "assert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "assert sort_numbers(\"six three\") == 'three six'", "assert sort_numbers(\"seven zero\") == 'zero seven'", "assert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "assert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "assert sort_numbers(\"four three zero\") == 'zero three four'", "assert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "assert sort_numbers(\"seven\") == 'seven'", "assert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "assert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "assert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "assert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "assert sort_numbers(\"six nine three\") == 'three six nine'", "assert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "assert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "assert sort_numbers(\"four one nine three\") == 'one three four nine'", "assert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "assert sort_numbers('three five nine') == 'three five nine'", "assert sort_numbers(\"zero three\") == 'zero three'", "assert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "assert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "assert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "assert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "assert sort_numbers(\"four one seven\") == 'one four seven'", "assert sort_numbers(\"seven six\") == 'six seven'", "assert sort_numbers(\"four two seven\") == 'two four seven'", "assert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "assert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "assert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "assert sort_numbers(\"nine three four five\") == 'three four five nine'", "assert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "assert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "assert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "assert sort_numbers(\"two five four zero\") == 'zero two four five'", "assert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "assert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "assert sort_numbers(\"three seven two\") == 'two three seven'", "assert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "assert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "assert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "assert sort_numbers(\"four four six four one\") == 'one four four four six'", "assert sort_numbers(\"eight six three\") == 'three six eight'", "assert sort_numbers(\"five three five\") == 'three five five'", "assert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "assert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "assert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "assert sort_numbers(\"four\") == 'four'", "assert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "assert sort_numbers(\"six zero four one\") == 'zero one four six'", "assert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "assert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "assert sort_numbers(\"nine\") == 'nine'", "assert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "assert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "assert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "assert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "assert sort_numbers(\"three\") == 'three'", "assert sort_numbers(\"three four zero\") == 'zero three four'", "assert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "assert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "assert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "assert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "assert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "assert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "assert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "assert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "assert sort_numbers(\"five\") == 'five'", "assert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "assert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "assert sort_numbers('three') == 'three'", "assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "assert sort_numbers(\"six\") == 'six'", "assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "assert sort_numbers(\"eight five\") == 'five eight'", "assert sort_numbers('') == ''", "assert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "assert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "assert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "assert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "assert sort_numbers(\"nine nine five\") == 'five nine nine'", "assert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "assert sort_numbers(\"seven three\") == 'three seven'", "assert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "assert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "assert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "assert sort_numbers(\"zero\") == 'zero'", "assert sort_numbers(\"nine zero\") == 'zero nine'", "assert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "assert sort_numbers(\"one six two seven\") == 'one two six seven'"], "nl": " Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    ", "func": "def sort_numbers(numbers: str) -> str:", "examples": ">>> sort_numbers('three one five')\n    'one three five'\n    ", "completions": ["from typing import List\nfrom num2words import num2words\n\ndef sort_numbers(numbers: str) -> str:\n    # Convert the input numerical words to numbers using 'num2words'\n    num_list = numbers.split()\n    num_dict = {num2words(num): num for num in num_list}\n    \n    # Sort the numbers\n    sorted_nums = [num_dict[key] for key in sorted(num_dict.values())]\n    \n    # Convert the sorted numbers back to numerical words\n    sorted_num_words = ' '.join([num2words(num) for num in sorted_nums])\n    \n    return sorted_num_words\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    ## Split the input string into a list of numerical words\n    num_words = numbers.split()\n    \n    ## Create a dictionary mapping numerical words to their corresponding numbers\n    word_to_num = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    ## Convert the numerical words to numbers using the dictionary\n    nums = [word_to_num[word] for word in num_words]\n    \n    ## Sort the numbers\n    sorted_nums = sorted(nums)\n    \n    ## Convert the sorted numbers back to numerical words\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    sorted_num_words = [num_to_word[num] for num in sorted_nums]\n    \n    ## Join the sorted numerical words into a string and return it\n    return ' '.join(sorted_num_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    Ensure that the input string only contains valid numeral words before processing.\n    '''\n    \n    # Dictionary mapping numeral words to numbers\n    word_to_num = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of numeral words\n    words = numbers.split()\n    \n    # Check if all words in the list are valid numeral words\n    for word in words:\n        if word not in word_to_num:\n            return \"Invalid input: Please provide valid numeral words\"\n    \n    # Convert the numeral words to numbers using the dictionary\n    nums = [word_to_num[word] for word in words]\n    \n    # Sort the numbers in ascending order\n    sorted_nums = sorted(nums)\n    \n    # Convert the sorted numbers back to numeral words\n    sorted_words = [key for value, key in sorted([(value, key) for key, value in word_to_num.items()])]\n    \n    # Return the sorted numeral words as a string\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\nfrom num2words import num2words\n\ndef sort_numbers(numbers: str) -> str:\n    # Split the input string into a list of numeral words\n    numeral_words = numbers.split()\n    \n    # Convert numeral words to numbers using the 'num2words' library\n    numbers_list = [num2words(word) for word in numeral_words]\n    \n    # Sort the numbers in ascending order\n    sorted_numbers = sorted(numbers_list)\n    \n    # Convert the sorted numbers back to numeral words\n    sorted_numeral_words = [num2words(num, to='ordinal') for num in sorted_numbers]\n    \n    # Join the sorted numeral words into a string and return it\n    return ' '.join(sorted_numeral_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    Ensure that the input string only contains valid numeral words before processing.\n    After sorting, the numbers should be arranged in ascending order.\n    '''\n\n    # Dictionary mapping numeral words to numbers\n    word_to_num = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into a list of numeral words\n    num_words = numbers.split()\n\n    # Convert numeral words to numbers using the dictionary\n    nums = [word_to_num[word] for word in num_words]\n\n    # Sort the numbers\n    sorted_nums = sorted(nums)\n\n    # Convert the sorted numbers back to numeral words\n    sorted_num_words = [key for value, key in sorted([(value, key) for key, value in word_to_num.items() if value in sorted_nums])]\n\n    # Join the sorted numeral words into a string and return it\n    return ' '.join(sorted_num_words)\n", "from typing import List\n## main.py\n\nfrom num2words import num2words\n\ndef sort_numbers(numbers: str) -> str:\n    # Convert numerical words to numbers\n    num_list = numbers.split()\n    num_dict = {num2words(num): num for num in num_list}\n    \n    # Sort the numbers\n    sorted_nums = [num_dict[key] for key in sorted(num_dict.values())]\n    \n    # Convert the sorted numbers back to numerical words\n    sorted_num_words = [num2words(num) for num in sorted_nums]\n    \n    return ' '.join(sorted_num_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'. Return the string with numbers sorted from smallest to largest. Ensure that the input string only contains valid numeral words before processing.\n    \n    >>> sort_numbers('three one five')\n    'one three five'\n    '''\n    \n    # Dictionary to map numeral words to numbers\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Split the input string into individual numeral words\n    words = numbers.split()\n    \n    # Convert numeral words to numbers\n    nums = [word_to_num[word] for word in words]\n    \n    # Sort the numbers\n    sorted_nums = sorted(nums)\n    \n    # Convert the sorted numbers back to numeral words\n    sorted_words = [key for key, value in word_to_num.items() if value in sorted_nums]\n    \n    # Return the sorted numeral words as a string\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'. \n    Return the string with numbers sorted from smallest to largest. \n    Ensure that the input string only contains valid numeral words before processing.\n    \n    >>> sort_numbers('three one five')\n    'one three five'\n    '''\n    \n    # Mapping of numeral words to their numerical values\n    word_to_num = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into individual numeral words\n    words = numbers.split()\n    \n    # Convert numeral words to numerical values and sort them\n    sorted_nums = sorted(words, key=lambda x: word_to_num[x])\n    \n    # Convert sorted numerical values back to words\n    sorted_words = ' '.join(sorted_nums)\n    \n    return sorted_words\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'. \n    Return the string with numbers sorted from smallest to largest. \n    Ensure that the input string only contains valid numeral words before processing.\n    \n    >>> sort_numbers('three one five')\n    'one three five'\n    '''\n    \n    # Dictionary mapping numeral words to numbers\n    word_to_num = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of numeral words\n    words = numbers.split()\n    \n    # Convert the numeral words to numbers using the dictionary\n    nums = [word_to_num[word] for word in words]\n    \n    # Sort the numbers in ascending order\n    sorted_nums = sorted(nums)\n    \n    # Convert the sorted numbers back to numeral words\n    sorted_words = [key for value, key in sorted([(value, key) for key, value in word_to_num.items()])]\n    \n    # Join the sorted numeral words into a string and return it\n    return ' '.join(sorted_words)\n\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Convert numerical words to numbers, sort them, and then convert them back to numerical words.\n\n    Args:\n        numbers: A string containing numerical words separated by spaces\n\n    Returns:\n        A string containing sorted numerical words separated by spaces\n    \"\"\"\n    \n    # Convert numerical words to numbers\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = [word_to_num[word] for word in numbers.split()]\n    \n    # Sort the numbers\n    num_list.sort()\n    \n    # Convert the sorted numbers back to numerical words\n    num_to_word = {0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine'}\n    sorted_words = [num_to_word[num] for num in num_list]\n    \n    # Return the sorted numerical words\n    return ' '.join(sorted_words)\n"], "plans": ["requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python library 'num2words' to convert numeral words to numbers, sort them, and then convert them back to words.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'numerical words'\n    Explanation: The requirement involves converting numerical words to numbers, sorting them, and then converting them back to words.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already suggests using the 'num2words' library for conversion and sorting, the detailed logic would involve:\n    - Convert the input numerical words to numbers using 'num2words'\n    - Sort the numbers\n    - Convert the sorted numbers back to numerical words\n\n# [edge case] \n    sort_numbers('zero one two') = 'zero one two'\n    Explanation: The input is already sorted, so the output should be the same as the input.\n    sort_numbers('five four three') = 'three four five'\n    Explanation: The input is in reverse order, and the output should be sorted in ascending order.\n    sort_numbers('seven seven seven') = 'seven seven seven'\n    Explanation: All numbers are the same, so the output should be the same as the input.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The 'num2words' library handles the conversion and sorting effectively.\n", "requirement pool:\n- Implement sorting function based on numeral words\n- Develop input validation mechanism\n- Optimize sorting algorithm for performance\nWe will use the built-in Python library to convert numeral words to numbers, sort them, and then convert them back to words. No external libraries are needed for this simple sorting task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'numerical words'\n    Explanation: The requirement involves converting numerical words to numbers, sorting them, and then converting them back to words.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Split the input string into a list of numerical words.\n    2. Create a dictionary mapping numerical words to their corresponding numbers.\n    3. Convert the numerical words to numbers using the dictionary.\n    4. Sort the numbers.\n    5. Convert the sorted numbers back to numerical words.\n    6. Join the sorted numerical words into a string and return it.\n\n# [edge case] \n    sort_numbers('zero one two three four five six seven eight nine') = 'zero one two three four five six seven eight nine'\n    Explanation: All numbers are already in ascending order.\n    \n    sort_numbers('nine eight seven six five four three two one zero') = 'zero one two three four five six seven eight nine'\n    Explanation: All numbers are in descending order and need to be sorted.\n\n    sort_numbers('three one five') = 'one three five'\n    Explanation: The input string contains only a subset of numbers that need to be sorted.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios effectively.\n", "requirement pool:\n- Implement efficient sorting algorithm\n- Validate input to ensure only numeral words are accepted\n- Handle edge cases like empty input or single numeral word\nWe will use the built-in Python library to convert numeral words to numbers, sort them, and then convert them back to numeral words. We will ensure input validation by checking if the input contains only valid numeral words. For sorting, we will use the sorted() function in Python.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'numerical sorting'\n    Explanation: The core concept is to sort numbers represented as words in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Create a dictionary mapping numeral words to their corresponding numbers.\n    2. Split the input string into a list of numeral words.\n    3. Check if all words in the list are valid numeral words.\n    4. Convert the numeral words to numbers using the dictionary.\n    5. Sort the numbers in ascending order.\n    6. Convert the sorted numbers back to numeral words.\n    7. Return the sorted numeral words as a string.\n\n# [edge case] \n    sort_numbers('zero one two three four five six seven eight nine') = 'zero one two three four five six seven eight nine'\n    Explanation: All valid numeral words are present in the input string, and they are already in ascending order.\n    \n    sort_numbers('nine eight seven six five four three two one zero') = 'zero one two three four five six seven eight nine'\n    Explanation: All valid numeral words are present in the input string in descending order, and the function correctly sorts them in ascending order.\n    \n    sort_numbers('one two three four five six seven eight nine zero') = 'zero one two three four five six seven eight nine'\n    Explanation: All valid numeral words are present in the input string in random order, and the function correctly sorts them in ascending order.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The provided logic covers all scenarios and ensures valid numeral words are processed correctly.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python library 'num2words' to convert numeral words to numbers, sort them, and then convert them back to numeral words.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'numerical sorting'\n    Explanation: The core concept is to convert numeral words to numbers, sort them, and then convert them back to numeral words in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Split the input string into a list of numeral words.\n    2. Convert numeral words to numbers using the 'num2words' library.\n    3. Sort the numbers in ascending order.\n    4. Convert the sorted numbers back to numeral words.\n    5. Join the sorted numeral words into a string and return it.\n\n# [edge case] \n    sort_numbers('zero one two') = 'zero one two'\n    Explanation: All numbers are already in ascending order.\n    \n    sort_numbers('five four three') = 'three four five'\n    Explanation: The input string contains numbers in descending order, and the function should return them in ascending order.\n    \n    sort_numbers('seven seven seven') = 'seven seven seven'\n    Explanation: All numbers are the same, so the output should be the same as the input.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers sorting the numbers correctly.\n", "requirement pool:\n- Implement efficient sorting algorithm\n- Develop input validation for numeral words\n- Ensure output is in ascending order\nWe will use the built-in Python library to convert numeral words to numbers, sort them, and then convert them back to numeral words. No external libraries are needed for this simple sorting task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'numerical sorting'\n    Explanation: The core concept is to convert numeral words to numbers, sort them, and then convert them back to numeral words in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code:\n    1. Split the input string into a list of numeral words.\n    2. Create a dictionary mapping numeral words to numbers.\n    3. Convert numeral words to numbers using the dictionary.\n    4. Sort the numbers.\n    5. Convert the sorted numbers back to numeral words.\n    6. Join the sorted numeral words into a string and return it.\n\n# [edge case] \n    sort_numbers('zero one two') = 'zero one two'\n    Explanation: All numbers are already in ascending order.\n    \n    sort_numbers('five four three') = 'three four five'\n    Explanation: The input string contains numbers in descending order, and the function should return them in ascending order.\n    \n    sort_numbers('seven seven seven') = 'seven seven seven'\n    Explanation: All numbers are the same, so the output should be the same as the input.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers sorting the numbers correctly.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python library 'num2words' to convert numeral words to numbers, sort them, and then convert them back to words.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'numerical words'\n    Explanation: The requirement involves converting numerical words to numbers, sorting them, and then converting them back to words.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the 'num2words' library for conversion and sorting, the code logic would involve:\n    - Convert numerical words to numbers using 'num2words'\n    - Sort the numbers\n    - Convert the sorted numbers back to numerical words\n\n# [edge case] \n    sort_numbers('zero one two') = 'zero one two'\n    Explanation: The input is already sorted in ascending order, so the output remains the same.\n    sort_numbers('five four three') = 'three four five'\n    Explanation: The input is in descending order, and after sorting, it should be in ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The 'num2words' library handles the conversion and sorting effectively.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python library to convert numeral words to numbers, sort them, and then convert them back to numeral words.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'numeral words': These are words representing numbers from 'zero' to 'nine'.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python library functions for conversion and sorting, the code logic would involve:\n    - Splitting the input string into individual numeral words\n    - Converting numeral words to numbers\n    - Sorting the numbers\n    - Converting the sorted numbers back to numeral words\n    - Returning the sorted numeral words as a string\n\n# [edge case] \n    sort_numbers('one two three') = 'one two three'\n    Explanation: The input is already sorted, so the output remains the same.\n    \n    sort_numbers('nine eight seven') = 'seven eight nine'\n    Explanation: The input is in reverse order, and the output should be sorted in ascending order.\n\n    sort_numbers('zero five two') = 'two five zero'\n    Explanation: The input contains 'zero', 'five', and 'two', which should be sorted in ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The built-in functions can handle sorting without additional logic.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python library to sort the numbers in the input string.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sort': Sorting means arranging elements in a particular order, typically in ascending or descending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the built-in Python library to sort the numbers, the code logic would involve splitting the input string into individual numbers, converting them to numerical values, sorting them, and then converting them back to words before returning the sorted string.\n\n# [edge case] \n    sort_numbers('one two three') = 'one three two'\n    Explanation: The input string contains valid numeral words, but they are not in order. The expected output is 'one two three' sorted in ascending order.\n\n    sort_numbers('zero nine five') = 'five nine zero'\n    Explanation: The input string contains valid numeral words, but they are not in order. The expected output is 'zero nine five' sorted in ascending order.\n\n    sort_numbers('four six seven') = 'four seven six'\n    Explanation: The input string contains valid numeral words, but they are not in order. The expected output is 'four six seven' sorted in ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The sorting functionality provided by the built-in Python library should handle sorting the numbers correctly.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python library to convert numeral words to numbers, sort them, and then convert them back to numeral words.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'numeral words': These are words representing numbers from 'zero' to 'nine'.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': Indicates the need to sort the numbers in ascending order.\n\n# [code logic]\n    To implement the code:\n    1. Split the input string into a list of numeral words.\n    2. Create a dictionary mapping numeral words to their corresponding numbers.\n    3. Convert the numeral words to numbers using the dictionary.\n    4. Sort the numbers in ascending order.\n    5. Convert the sorted numbers back to numeral words.\n    6. Join the sorted numeral words into a string and return it.\n\n# [edge case] \n    sort_numbers('one two three') = 'one two three'\n    Explanation: The input is already sorted, so the output remains the same.\n    \n    sort_numbers('nine eight seven') = 'seven eight nine'\n    Explanation: The input is in descending order, and the output should be in ascending order.\n\n    sort_numbers('zero five two') = 'zero two five'\n    Explanation: The input contains only a subset of numbers, and they should be sorted accordingly.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers sorting the numbers correctly.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python library to convert numeral words to numbers, sort them, and then convert them back to numeral words.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'numerical words'\n    Explanation: The requirement involves converting numerical words to actual numbers, sorting them, and then converting them back to numerical words.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the built-in Python library to convert, sort, and convert back the numerical words, the code logic would involve:\n    - Convert numerical words to numbers\n    - Sort the numbers\n    - Convert the sorted numbers back to numerical words\n    - Return the sorted numerical words\n\n# [edge case] \n    sort_numbers('five four two') = 'two four five'\n    Explanation: The input string contains 'five', 'four', and 'two'. After sorting, the output should be 'two four five'.\n    sort_numbers('one zero eight') = 'zero one eight'\n    Explanation: The input string contains 'one', 'zero', and 'eight'. After sorting, the output should be 'zero one eight'.\n    sort_numbers('nine seven six') = 'six seven nine'\n    Explanation: The input string contains 'nine', 'seven', and 'six'. After sorting, the output should be 'six seven nine'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The plan already covers the necessary steps to handle sorting of numerical words.\n"], "scores": [0.0, 1.0, 0.0, 0.0, 0.3802, 0.0, 0.3802, 1.0, 0.0, 1.0], "pass_results": [false, true, false, false, false, false, false, true, false, true], "pass_test_cases_num": [0, 121, 0, 0, 46, 0, 46, 121, 0, 121], "completion": "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Convert numerical words to numbers, sort them, and then convert them back to numerical words.\n\n    Args:\n        numbers: A string containing numerical words separated by spaces\n\n    Returns:\n        A string containing sorted numerical words separated by spaces\n    \"\"\"\n    \n    # Convert numerical words to numbers\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = [word_to_num[word] for word in numbers.split()]\n    \n    # Sort the numbers\n    num_list.sort()\n    \n    # Convert the sorted numbers back to numerical words\n    num_to_word = {0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine'}\n    sorted_words = [num_to_word[num] for num in num_list]\n    \n    # Return the sorted numerical words\n    return ' '.join(sorted_words)\n", "passed": true, "pass": true, "pass_num": 3, "round": 959, "repair_prompt": ["def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure that the input string only contains valid numeral words before processing.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest. Ensure that the input string only contains valid numeral words before processing. After sorting, the numbers should be arranged in ascending order.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "def sort_numbers(numbers: str) -> str:\n    '''Input is a space-delimited string of numerals from 'zero' to 'nine'. Return the string with numbers sorted from smallest to largest. Ensure that the input string only contains valid numeral words before processing.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 964}
