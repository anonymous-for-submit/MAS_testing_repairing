{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. Strange sorting is when you start with the minimum value. Then you choose the maximum of the remaining integers, then minimum and so on.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "entry_point": "strange_sort_list", "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "test": ["def check(strange_sort_list):\n\tassert strange_sort_list([5, 1, 6, 3, 2]) == [1, 6, 2, 5, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 1, 3, 5, 8, -8, -4]) == [-8, 8, -4, 5, 1, 3, 1, 2]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 8, 8, 6, 12, 5]) == [5, 12, 6, 8, 8, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 4, 6, 6]) == [4, 6, 5, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 3, 5, 7]) == [3, 9, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 6, 2, 12, 13]) == [2, 13, 6, 12, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 2, 4, 9, 9, 6, 7, 4]) == [2, 9, 3, 9, 4, 7, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 11, 9, 10, 9]) == [1, 11, 9, 10, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 4, 5, 1, 4]) == [1, 5, 4, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 3, 1, 6, 10]) == [1, 10, 3, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 5, 3, 4, 9, 11, 2, 3]) == [2, 11, 2, 9, 3, 5, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 8, 5, 2]) == [2, 9, 5, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 2, 7, 5, 2, 4, -3, -1]) == [-3, 7, -1, 5, 2, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 5, 5]) == [2, 6, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 10, 2, 11, 10]) == [2, 11, 10, 10, 10]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 9, 4, 2]) == [2, 9, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 2, 2, 1]) == [1, 5, 2, 2]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 2, 9, 9]) == [2, 9, 8, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 6, 8, 6]) == [2, 8, 2, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 1, 8, 9, 2, 4, 8, 6]) == [1, 9, 2, 8, 2, 8, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([]) == []", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 1, 4]) == [1, 6, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 2, 5, 8, 7, 2]) == [2, 8, 2, 7, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 4, 1, 7, 4, 6, 3, 12]) == [1, 12, 3, 7, 3, 6, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 4, 8, 8]) == [4, 8, 4, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 4, 9, 7]) == [4, 9, 7, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 6, 6, 3]) == [1, 6, 3, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 6, 5, 7, 3, 2, -7, -6]) == [-7, 7, -6, 6, 1, 5, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 8, 10, 4, 4]) == [4, 10, 4, 8, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 4, 4, 8]) == [4, 8, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 1, 3, 4, 10, 3, 9, 5]) == [1, 10, 3, 9, 3, 5, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 6, 4, 7, 7, 3, -1, -7]) == [-7, 7, -1, 7, 3, 6, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 6, 4, 2, 9, 5, -1, -6]) == [-6, 9, -1, 6, 2, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 5, 7, 3, 8, 6]) == [1, 8, 3, 7, 5, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 7, 1, 7, 4]) == [1, 7, 3, 7, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 7, 6, 6, 1, 4, -2, -5]) == [-5, 7, -2, 6, 1, 6, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 3, 2, 5, 14]) == [2, 14, 3, 9, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 10, 10, 4, 13]) == [4, 13, 4, 10, 10]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 4, 3, 4]) == [2, 4, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 6, 7, 14]) == [1, 14, 1, 7, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 5, 7, 8, 5]) == [3, 8, 5, 7, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 1, 7, 5, 8]) == [1, 8, 5, 7, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 8, 1, 3, 1, 10, 5]) == [1, 10, 1, 8, 3, 6, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 4, 7, 9]) == [4, 10, 7, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 7, 5]) == [2, 7, 5, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 4, 5, 1, 7, 2, -3, -8]) == [-8, 7, -3, 5, 1, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 3, 7, 3, 9, 11, 4, 6]) == [1, 11, 3, 9, 3, 7, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 2, 2, 7, 7, 2, 7]) == [2, 7, 2, 7, 2, 7, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 1, 3, 4]) == [1, 4, 3, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 3, 6, 3, 10, -6, -1]) == [-6, 10, -1, 6, 1, 3, 1, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 7, 5, 4, 10, -6, -9]) == [-9, 10, -6, 7, 2, 5, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 4, 2, 5, 12, 5]) == [2, 12, 4, 5, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 4, 1, 4, 8]) == [1, 8, 1, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 7, 3]) == [1, 7, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 4, 3, 7, 9]) == [3, 9, 3, 7, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 3, 9, 1]) == [1, 9, 3, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 9, 2, 6, 4]) == [2, 9, 4, 7, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 4, 4, 7, 4]) == [2, 7, 2, 4, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 7, 4, 5, 14, 5]) == [4, 14, 5, 7, 5, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 4, 2, 4, 14, 5]) == [2, 14, 4, 7, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 11, 9, 6, 12]) == [6, 12, 9, 11, 10]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 5, 2, 2]) == [2, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 1, 2, 1]) == [1, 2, 1, 1, 1]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 1, 7, 2, 10, 7, 5, 5]) == [1, 10, 2, 7, 5, 7, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 6, 3, 8, 3, 7, 4]) == [2, 8, 3, 7, 3, 6, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 6, 1, 1]) == [1, 6, 1, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 1, 3, 6, 3, 10, 7, 13]) == [1, 13, 3, 10, 3, 7, 3, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 4, 5, 8]) == [1, 8, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 2, 3, 2]) == [2, 3, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 9, 7, 9]) == [4, 9, 7, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 1, 4, 13, 10]) == [1, 13, 4, 10, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 6, 6]) == [2, 6, 3, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 3, 5, 4, 9, 1, -9, -10]) == [-10, 9, -9, 5, 1, 4, 1, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 5, 5, 8, 14]) == [5, 14, 5, 8, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 9, 2, 8]) == [2, 9, 8, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 4, 5, 11, 8, 4]) == [4, 11, 4, 8, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 5, 6, 6, 10, -4, -6]) == [-6, 10, -4, 6, 2, 6, 2, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 6, 12, 6, 9, 6]) == [1, 12, 6, 9, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 1, 5, 5, 9, -7, -8]) == [-8, 9, -7, 5, 1, 5, 1, 1]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 4, 3, 5, 7]) == [3, 7, 3, 5, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 5, 2, 4, 3, 6, -3, 0]) == [-3, 6, 0, 5, 2, 4, 3, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 3, 9, 5, 5]) == [3, 9, 5, 8, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 4, 6, 5, 10, 7, 5, 3]) == [1, 10, 3, 7, 4, 6, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 2, 9, 6, 5, 1]) == [1, 9, 2, 6, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 5, 5, 6, 2]) == [2, 6, 5, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 6, 1, 4]) == [1, 6, 1, 4, 1]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 2, 6, 11, 10]) == [2, 11, 6, 10, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 1, 8, 7, 9, 3, 12, 5]) == [1, 12, 3, 9, 4, 8, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 7, 5, 3]) == [3, 10, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 6, 9]) == [5, 9, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 8, 12, 11, 11, 5]) == [5, 12, 7, 11, 8, 11]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 4, 7, 2, 6, 6, 3]) == [2, 7, 2, 6, 2, 6, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 6, 12, 4, 4, 4]) == [4, 12, 4, 8, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 5, 1]) == [1, 6, 2, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 7, 9, 11, 4]) == [1, 11, 4, 9, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 7, 12, 13, 8, 2]) == [2, 13, 2, 12, 7, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 7, 7, 1, 10, 3, 0, -6]) == [-6, 10, 0, 7, 1, 7, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 9, 6, 8, 11, 3]) == [3, 11, 4, 9, 6, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 3, 1, 6]) == [1, 6, 3, 4]"], "test_case_list": ["assert strange_sort_list([5, 1, 6, 3, 2]) == [1, 6, 2, 5, 3]", "assert strange_sort_list([1, 2, 1, 3, 5, 8, -8, -4]) == [-8, 8, -4, 5, 1, 3, 1, 2]", "assert strange_sort_list([8, 8, 8, 6, 12, 5]) == [5, 12, 6, 8, 8, 8]", "assert strange_sort_list([5, 6, 4, 6, 6]) == [4, 6, 5, 6, 6]", "assert strange_sort_list([9, 3, 5, 7]) == [3, 9, 5, 7]", "assert strange_sort_list([6, 6, 2, 12, 13]) == [2, 13, 6, 12, 6]", "assert strange_sort_list([3, 2, 4, 9, 9, 6, 7, 4]) == [2, 9, 3, 9, 4, 7, 4, 6]", "assert strange_sort_list([1, 11, 9, 10, 9]) == [1, 11, 9, 10, 9]", "assert strange_sort_list([4, 4, 5, 1, 4]) == [1, 5, 4, 4, 4]", "assert strange_sort_list([6, 3, 1, 6, 10]) == [1, 10, 3, 6, 6]", "assert strange_sort_list([2, 5, 3, 4, 9, 11, 2, 3]) == [2, 11, 2, 9, 3, 5, 3, 4]", "assert strange_sort_list([9, 8, 5, 2]) == [2, 9, 5, 8]", "assert strange_sort_list([5, 2, 7, 5, 2, 4, -3, -1]) == [-3, 7, -1, 5, 2, 5, 2, 4]", "assert strange_sort_list([6, 2, 5, 5]) == [2, 6, 5, 5]", "assert strange_sort_list([10, 10, 2, 11, 10]) == [2, 11, 10, 10, 10]", "assert strange_sort_list([5, 9, 4, 2]) == [2, 9, 4, 5]", "assert strange_sort_list([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]", "assert strange_sort_list([5, 2, 2, 1]) == [1, 5, 2, 2]", "assert strange_sort_list([8, 2, 9, 9]) == [2, 9, 8, 9]", "assert strange_sort_list([2, 2, 6, 8, 6]) == [2, 8, 2, 6, 6]", "assert strange_sort_list([2, 1, 8, 9, 2, 4, 8, 6]) == [1, 9, 2, 8, 2, 8, 4, 6]", "assert strange_sort_list([]) == []", "assert strange_sort_list([6, 2, 1, 4]) == [1, 6, 2, 4]", "assert strange_sort_list([7, 2, 5, 8, 7, 2]) == [2, 8, 2, 7, 5, 7]", "assert strange_sort_list([3, 4, 1, 7, 4, 6, 3, 12]) == [1, 12, 3, 7, 3, 6, 4, 4]", "assert strange_sort_list([4, 4, 8, 8]) == [4, 8, 4, 8]", "assert strange_sort_list([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.", "assert strange_sort_list([8, 4, 9, 7]) == [4, 9, 7, 8]", "assert strange_sort_list([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]", "assert strange_sort_list([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]", "assert strange_sort_list([1, 6, 6, 3]) == [1, 6, 3, 6]", "assert strange_sort_list([1, 6, 5, 7, 3, 2, -7, -6]) == [-7, 7, -6, 6, 1, 5, 2, 3]", "assert strange_sort_list([4, 8, 10, 4, 4]) == [4, 10, 4, 8, 4]", "assert strange_sort_list([6, 4, 4, 8]) == [4, 8, 4, 6]", "assert strange_sort_list([3, 1, 3, 4, 10, 3, 9, 5]) == [1, 10, 3, 9, 3, 5, 3, 4]", "assert strange_sort_list([4, 6, 4, 7, 7, 3, -1, -7]) == [-7, 7, -1, 7, 3, 6, 4, 4]", "assert strange_sort_list([2, 6, 4, 2, 9, 5, -1, -6]) == [-6, 9, -1, 6, 2, 5, 2, 4]", "assert strange_sort_list([1, 5, 7, 3, 8, 6]) == [1, 8, 3, 7, 5, 6]", "assert strange_sort_list([3, 7, 1, 7, 4]) == [1, 7, 3, 7, 4]", "assert strange_sort_list([4, 7, 6, 6, 1, 4, -2, -5]) == [-5, 7, -2, 6, 1, 6, 4, 4]", "assert strange_sort_list([9, 3, 2, 5, 14]) == [2, 14, 3, 9, 5]", "assert strange_sort_list([4, 10, 10, 4, 13]) == [4, 13, 4, 10, 10]", "assert strange_sort_list([2, 4, 3, 4]) == [2, 4, 3, 4]", "assert strange_sort_list([1, 1, 6, 7, 14]) == [1, 14, 1, 7, 6]", "assert strange_sort_list([3, 5, 7, 8, 5]) == [3, 8, 5, 7, 5]", "assert strange_sort_list([5, 1, 7, 5, 8]) == [1, 8, 5, 7, 5]", "assert strange_sort_list([5, 6, 8, 1, 3, 1, 10, 5]) == [1, 10, 1, 8, 3, 6, 5, 5]", "assert strange_sort_list([10, 4, 7, 9]) == [4, 10, 7, 9]", "assert strange_sort_list([6, 2, 7, 5]) == [2, 7, 5, 6]", "assert strange_sort_list([5, 4, 5, 1, 7, 2, -3, -8]) == [-8, 7, -3, 5, 1, 5, 2, 4]", "assert strange_sort_list([1, 3, 7, 3, 9, 11, 4, 6]) == [1, 11, 3, 9, 3, 7, 4, 6]", "assert strange_sort_list([2, 3, 2, 2, 7, 7, 2, 7]) == [2, 7, 2, 7, 2, 7, 2, 3]", "assert strange_sort_list([3, 1, 3, 4]) == [1, 4, 3, 3]", "assert strange_sort_list([1, 1, 3, 6, 3, 10, -6, -1]) == [-6, 10, -1, 6, 1, 3, 1, 3]", "assert strange_sort_list([2, 3, 7, 5, 4, 10, -6, -9]) == [-9, 10, -6, 7, 2, 5, 3, 4]", "assert strange_sort_list([5, 4, 2, 5, 12, 5]) == [2, 12, 4, 5, 5, 5]", "assert strange_sort_list([1, 4, 1, 4, 8]) == [1, 8, 1, 4, 4]", "assert strange_sort_list([1, 2, 7, 3]) == [1, 7, 2, 3]", "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]", "assert strange_sort_list([3, 4, 3, 7, 9]) == [3, 9, 3, 7, 4]", "assert strange_sort_list([9, 3, 9, 1]) == [1, 9, 3, 9]", "assert strange_sort_list([7, 9, 2, 6, 4]) == [2, 9, 4, 7, 6]", "assert strange_sort_list([2, 2, 4, 4, 7, 4]) == [2, 7, 2, 4, 4, 4]", "assert strange_sort_list([6, 7, 4, 5, 14, 5]) == [4, 14, 5, 7, 5, 6]", "assert strange_sort_list([7, 4, 2, 4, 14, 5]) == [2, 14, 4, 7, 4, 5]", "assert strange_sort_list([10, 11, 9, 6, 12]) == [6, 12, 9, 11, 10]", "assert strange_sort_list([4, 5, 2, 2]) == [2, 5, 2, 4]", "assert strange_sort_list([1, 1, 1, 2, 1]) == [1, 2, 1, 1, 1]", "assert strange_sort_list([5, 1, 7, 2, 10, 7, 5, 5]) == [1, 10, 2, 7, 5, 7, 5, 5]", "assert strange_sort_list([2, 3, 6, 3, 8, 3, 7, 4]) == [2, 8, 3, 7, 3, 6, 3, 4]", "assert strange_sort_list([4, 6, 1, 1]) == [1, 6, 1, 4]", "assert strange_sort_list([3, 1, 3, 6, 3, 10, 7, 13]) == [1, 13, 3, 10, 3, 7, 3, 6]", "assert strange_sort_list([1, 4, 5, 8]) == [1, 8, 4, 5]", "assert strange_sort_list([3, 2, 3, 2]) == [2, 3, 2, 3]", "assert strange_sort_list([4, 9, 7, 9]) == [4, 9, 7, 9]", "assert strange_sort_list([7, 1, 4, 13, 10]) == [1, 13, 4, 10, 7]", "assert strange_sort_list([2, 3, 6, 6]) == [2, 6, 3, 6]", "assert strange_sort_list([1, 3, 5, 4, 9, 1, -9, -10]) == [-10, 9, -9, 5, 1, 4, 1, 3]", "assert strange_sort_list([5, 5, 5, 8, 14]) == [5, 14, 5, 8, 5]", "assert strange_sort_list([8, 9, 2, 8]) == [2, 9, 8, 8]", "assert strange_sort_list([4, 4, 5, 11, 8, 4]) == [4, 11, 4, 8, 4, 5]", "assert strange_sort_list([2, 2, 5, 6, 6, 10, -4, -6]) == [-6, 10, -4, 6, 2, 6, 2, 5]", "assert strange_sort_list([1, 6, 12, 6, 9, 6]) == [1, 12, 6, 9, 6, 6]", "assert strange_sort_list([1, 1, 1, 5, 5, 9, -7, -8]) == [-8, 9, -7, 5, 1, 5, 1, 1]", "assert strange_sort_list([3, 4, 3, 5, 7]) == [3, 7, 3, 5, 4]", "assert strange_sort_list([3, 5, 2, 4, 3, 6, -3, 0]) == [-3, 6, 0, 5, 2, 4, 3, 3]", "assert strange_sort_list([8, 3, 9, 5, 5]) == [3, 9, 5, 8, 5]", "assert strange_sort_list([1, 4, 6, 5, 10, 7, 5, 3]) == [1, 10, 3, 7, 4, 6, 5, 5]", "assert strange_sort_list([4, 2, 9, 6, 5, 1]) == [1, 9, 2, 6, 4, 5]", "assert strange_sort_list([5, 5, 5, 6, 2]) == [2, 6, 5, 5, 5]", "assert strange_sort_list([1, 1, 6, 1, 4]) == [1, 6, 1, 4, 1]", "assert strange_sort_list([7, 2, 6, 11, 10]) == [2, 11, 6, 10, 7]", "assert strange_sort_list([4, 1, 8, 7, 9, 3, 12, 5]) == [1, 12, 3, 9, 4, 8, 5, 7]", "assert strange_sort_list([10, 7, 5, 3]) == [3, 10, 5, 7]", "assert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]", "assert strange_sort_list([5, 6, 6, 9]) == [5, 9, 6, 6]", "assert strange_sort_list([7, 8, 12, 11, 11, 5]) == [5, 12, 7, 11, 8, 11]", "assert strange_sort_list([2, 2, 4, 7, 2, 6, 6, 3]) == [2, 7, 2, 6, 2, 6, 3, 4]", "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert strange_sort_list([8, 6, 12, 4, 4, 4]) == [4, 12, 4, 8, 4, 6]", "assert strange_sort_list([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]", "assert strange_sort_list([6, 2, 5, 1]) == [1, 6, 2, 5]", "assert strange_sort_list([1, 7, 9, 11, 4]) == [1, 11, 4, 9, 7]", "assert strange_sort_list([2, 7, 12, 13, 8, 2]) == [2, 13, 2, 12, 7, 8]", "assert strange_sort_list([4, 7, 7, 1, 10, 3, 0, -6]) == [-6, 10, 0, 7, 1, 7, 3, 4]", "assert strange_sort_list([4, 9, 6, 8, 11, 3]) == [3, 11, 4, 9, 6, 8]", "assert strange_sort_list([4, 3, 1, 6]) == [1, 6, 3, 4]"], "nl": "\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    ", "func": "def strange_sort_list(lst):", "examples": "Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    ", "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    \n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''\n    Given list of integers, return list in strange order. Strange sorting is when you start with the minimum value. Then you choose the maximum of the remaining integers, then minimum and so on.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n\n    sorted_lst = sorted(lst)\n    result = []\n\n    while len(sorted_lst) > 1:\n        result.append(sorted_lst.pop(0))\n        result.append(sorted_lst.pop(-1))\n\n    if sorted_lst:\n        result.append(sorted_lst[0])\n\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''\n    Given list of integers, return list in strange order. Strange sorting is when you start with the minimum value. Then you choose the maximum of the remaining integers, then minimum and so on.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''\n    When sorting a list of integers in a strange order, you begin with the minimum value followed by the maximum of the remaining integers, then the minimum and so on.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n\n    if not lst:\n        return []\n\n    sorted_lst = sorted(lst)\n    result = []\n\n    while len(sorted_lst) > 1:\n        result.append(sorted_lst.pop(0))  # Append minimum value\n        result.append(sorted_lst.pop(-1))  # Append maximum value\n\n    if sorted_lst:  # If there is one element left\n        result.append(sorted_lst[0])\n\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    \"\"\"\n    When sorting a list of integers in a strange order, you begin with the minimum value followed by the maximum of the remaining integers, then the minimum and so on.\n    \n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    \"\"\"\n    \n    if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    \n    while len(sorted_lst) > 1:\n        result.append(sorted_lst.pop(0))\n        result.append(sorted_lst.pop(-1))\n    \n    if sorted_lst:\n        result.append(sorted_lst[0])\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''\n    Sorts a list of integers in a 'strange' order where the minimum value is followed by the maximum of the remaining integers, then the next minimum and so on.\n    Args:\n        lst (List[int]): Input list of integers\n    Returns:\n        List[int]: List sorted in the 'strange' order\n    '''\n    \n    sorted_lst = sorted(lst)\n    result = []\n    \n    for i in range(len(sorted_lst)//2):\n        result.extend([sorted_lst[i], sorted_lst[-(i+1)])\n    \n    if len(sorted_lst) % 2 != 0:\n        result.append(sorted_lst[len(sorted_lst)//2])\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''Given list of integers, return list in strange order when starting with the minimum value and choosing maximum of remaining integers, then minimum and so on.'''\n    \n    if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    \n    while len(sorted_lst) > 1:\n        result.append(sorted_lst.pop(0))\n        result.append(sorted_lst.pop())\n    \n    if sorted_lst:\n        result.append(sorted_lst[0])\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''\n    Given list of integers, return list in strange order when starting with the minimum value and choosing maximum of remaining integers, then minimum and so on.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n\n    sorted_lst = sorted(lst)\n    result = []\n\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if len(sorted_lst) > 1:\n            result.append(sorted_lst.pop())\n\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''\n    Given list of integers, return list in strange order when starting with the minimum value and choosing maximum of remaining integers, then minimum and so on.\n    '''\n    \n    sorted_lst = sorted(lst)  # Sort the input list in ascending order\n    result = []  # Initialize an empty result list\n    \n    while sorted_lst:\n        result.append(sorted_lst.pop(0))  # Append the first element (minimum value) to the result list\n        \n        if len(sorted_lst) > 0:\n            result.append(sorted_lst.pop(-1))  # Append the last element (maximum of remaining integers) to the result list\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''\n    Given list of integers, return list in strange order. Strange sorting is when you start with the minimum value. Then you choose the maximum of the remaining integers, then minimum and so on.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst\n"], "plans": ["requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in functions in Python to sort the list in a strange order as per the requirements.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'minimum value', 'maximum value', 'strange order'\n    Explanation: The core concepts in the requirement are the minimum and maximum values in the list, and the strange order in which the list needs to be sorted.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using built-in functions in Python to sort the list in a strange order. The logic involves sorting the list in ascending order, then rearranging it in a specific pattern as described in the requirement.\n\n# [edge case] \n    strange_sort_list([1, 2, 3, 4]) = [1, 4, 2, 3]\n    Explanation: The minimum value is 1, followed by the maximum value 4, then the next minimum 2, and finally 3.\n    \n    strange_sort_list([5, 5, 5, 5]) = [5, 5, 5, 5]\n    Explanation: Since all values are the same, the output remains the same as the input list.\n    \n    strange_sort_list([]) = []\n    Explanation: An empty list remains empty after sorting.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The logic provided in the plan should cover all scenarios.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in functions in Python to sort the list in a strange order as per the requirements.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'strange order'\n    Explanation: The strange order means sorting the list in a way where you start with the minimum value, then choose the maximum of the remaining integers, then minimum, and so on.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    As per the plan, we will use the built-in functions in Python to sort the list in a strange order. We can achieve this by sorting the list in ascending order first, then creating a new list by alternately appending the minimum and maximum values from the sorted list.\n\n# [edge case] \n    strange_sort_list([1, 2, 3, 4]) = [1, 4, 2, 3]\n    Explanation: The minimum value is 1, then we choose the maximum value 4, followed by 2 and 3.\n    \n    strange_sort_list([5, 5, 5, 5]) = [5, 5, 5, 5]\n    Explanation: Since all values are the same, the output remains the same as the input list.\n    \n    strange_sort_list([]) = []\n    Explanation: An empty list remains empty after strange sorting.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios effectively.\n", "requirement pool:\n- Implement the 'strange_sort_list' function according to the defined sorting logic\n- Handle edge cases such as empty input lists and repeated values\n- Optimize the sorting algorithm for better performance\nWe will use the built-in Python functions to implement the 'strange_sort_list' function efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimum value', 'maximum value', 'strange order'\n    Explanation: The core concepts in the requirement are the minimum and maximum values in the list, and the strange order in which the list needs to be sorted.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python functions, the logic can be implemented as follows:\n    1. Sort the input list in ascending order.\n    2. Initialize an empty result list.\n    3. Iterate over the sorted list:\n        - Append the minimum value to the result list.\n        - If there are more elements left, append the maximum value to the result list.\n    4. Return the result list.\n\n# [edge case] \n    strange_sort_list([1, 2, 3, 4]) = [1, 4, 2, 3]\n    Explanation: The minimum value is 1, followed by the maximum value 4, then 2, and finally 3.\n    strange_sort_list([5, 5, 5, 5]) = [5, 5, 5, 5]\n    Explanation: All values are the same, so the output remains unchanged.\n    strange_sort_list([]) = []\n    Explanation: The input list is empty, so the output is also empty.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios efficiently.\n", "requirement pool:\n- Implement the 'strange_sort_list' function according to the specified sorting logic\n- Handle edge cases such as empty input lists and lists with repeated values\n- Optimize the sorting algorithm for improved performance\nWe will use the built-in Python functions to implement the 'strange_sort_list' function without defining any class. We will sort the list in a 'strange' order by alternating between the minimum and maximum values.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'minimum value', 'maximum value', 'strange order'\n    Explanation: The core concept involves sorting a list in a specific manner where the minimum value is followed by the maximum value of the remaining integers, and this pattern continues alternately.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the 'strange_sort_list' function:\n    1. Check if the list is empty, return an empty list if so.\n    2. Sort the list in ascending order.\n    3. Initialize an empty result list.\n    4. Iterate through the sorted list:\n        - Append the minimum value to the result list.\n        - If there are more than one element left, append the maximum value to the result list.\n    5. Return the result list.\n\n# [edge case] \n    strange_sort_list([1, 2, 3, 4]) = [1, 4, 2, 3]\n    Explanation: The minimum value is 1, followed by the maximum value 4, then 2 and 3.\n    \n    strange_sort_list([5, 5, 5, 5]) = [5, 5, 5, 5]\n    Explanation: All elements are the same, so the output remains unchanged.\n    \n    strange_sort_list([]) = []\n    Explanation: The input list is empty, so the output is also an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios appropriately.\n", "requirement pool:\n- Implement the strange sorting algorithm\n- Handle edge cases such as empty lists\n- Optimize the sorting algorithm for performance\nWe will use the built-in sorted function in Python along with custom sorting key to achieve the 'strange' sorting order.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'minimum value', 'maximum value', 'strange order'\n    Explanation: The core concept involves sorting a list in a specific manner where the minimum value is followed by the maximum value of the remaining integers alternately.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using the built-in sorted function in Python with a custom sorting key to achieve the 'strange' sorting order. The custom sorting key should alternate between the minimum and maximum values.\n\n# [edge case] \n    strange_sort_list([1, 2, 3, 4]) = [1, 4, 2, 3]\n    Explanation: The minimum value is 1, followed by the maximum value 4, then 2 and 3 alternately.\n    strange_sort_list([5, 5, 5, 5]) = [5, 5, 5, 5]\n    Explanation: All values are the same, so the list remains unchanged.\n    strange_sort_list([]) = []\n    Explanation: An empty list remains empty after sorting.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The logic provided in the plan should handle all scenarios effectively.\n", "requirement pool:\n- Implement the 'strange_sort_list' function according to the specified sorting logic\n- Handle edge case of empty input list to return an empty list\n- Optimize the sorting algorithm for better performance\nWe will use the built-in 'sorted' function in Python along with list slicing to achieve the 'strange' sorting logic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimum value', 'maximum value'\n    Explanation: The core concept is to sort the list in a way that alternates between the minimum and maximum values.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the built-in 'sorted' function in Python along with list slicing, the code logic is straightforward:\n    \n```python\ndef strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    for i in range(len(sorted_lst)//2):\n        result.extend([sorted_lst[i], sorted_lst[-(i+1)]])\n    if len(sorted_lst) % 2 != 0:\n        result.append(sorted_lst[len(sorted_lst)//2])\n    return result\n```\n\n# [edge case] \n    strange_sort_list([1, 2, 3, 4]) = [1, 4, 2, 3]\n    Explanation: The minimum value is 1, followed by the maximum value 4, then 2 and 3.\n    \n    strange_sort_list([5, 5, 5, 5]) = [5, 5, 5, 5]\n    Explanation: All values are the same, so the output remains the same.\n    \n    strange_sort_list([]) = []\n    Explanation: An empty list remains empty after sorting.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.\n", "requirement pool:\n- Implement the strange sorting algorithm\n- Handle edge cases such as empty lists\n- Optimize the sorting algorithm for efficiency\nWe will design a static Python function using appropriate open-source libraries to implement the strange sorting algorithm efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimum value', 'maximum value', 'strange order'\n    Explanation: The core concept involves sorting the list in a specific manner where the minimum value is followed by the maximum value, and this pattern continues alternately.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    As the plan suggests using open-source libraries, we can utilize the built-in functions in Python to achieve the strange sorting algorithm efficiently.\n\n    ```python\n    def strange_sort_list(lst):\n        if not lst:\n            return []\n        \n        sorted_lst = sorted(lst)\n        result = []\n        while len(sorted_lst) > 1:\n            result.append(sorted_lst.pop(0))\n            result.append(sorted_lst.pop())\n        \n        if sorted_lst:\n            result.append(sorted_lst[0])\n        \n        return result\n    ```\n\n# [edge case] \n    strange_sort_list([1, 2, 3, 4]) = [1, 4, 2, 3]\n    Explanation: The minimum value is 1, followed by the maximum value 4, then 2, and finally 3.\n    \n    strange_sort_list([5, 5, 5, 5]) = [5, 5, 5, 5]\n    Explanation: All values are the same, so the output remains unchanged.\n    \n    strange_sort_list([]) = []\n    Explanation: An empty list results in an empty output.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic covers scenarios where the list is empty or contains repeated values.\n", "requirement pool:\n- Implement the 'strange_sort_list' function according to the specified logic\n- Handle edge cases such as empty input lists\n- Optimize the sorting algorithm for better performance\nWe will use the built-in Python functions like min(), max(), and sorted() to implement the 'strange_sort_list' function efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'strange order'\n    Explanation: In this requirement, 'strange order' means arranging the list in a specific pattern where the minimum value is followed by the maximum value of the remaining integers, then the next minimum, and so on.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in Python functions like min(), max(), and sorted(), the logic can be implemented as follows:\n    1. Sort the input list in ascending order.\n    2. Initialize an empty result list.\n    3. While the input list is not empty:\n        - Append the minimum value of the input list to the result list.\n        - If there are more than one unique values left in the input list, append the maximum value to the result list.\n        - Remove both the minimum and maximum values from the input list.\n    4. Return the result list.\n\n# [edge case] \n    strange_sort_list([1, 2, 3, 4]) = [1, 4, 2, 3]\n    Explanation: The minimum value is 1, followed by the maximum value 4, then 2, and finally 3.\n    \n    strange_sort_list([5, 5, 5, 5]) = [5, 5, 5, 5]\n    Explanation: Since all values are the same, the output remains unchanged.\n    \n    strange_sort_list([]) = []\n    Explanation: For an empty list, the output is also an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios effectively.\n", "requirement pool:\n- Implement the strange sorting algorithm\n- Handle edge case of empty input list\n- Optimize the sorting algorithm for performance\nWe will use the built-in functions in Python to implement the strange sorting algorithm efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimum value': Refers to the smallest value in the list.\n    'maximum of remaining integers': Refers to selecting the largest value from the remaining integers after choosing the minimum value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in functions in Python, we can implement the strange sorting algorithm efficiently by following these steps:\n    1. Sort the input list in ascending order.\n    2. Initialize an empty result list.\n    3. Iterate through the sorted list:\n        - Append the first element (minimum value) to the result list.\n        - If there are more than one element left, append the last element (maximum of remaining integers) to the result list.\n        - Remove the appended elements from the sorted list.\n    4. Return the result list.\n\n# [edge case] \n    strange_sort_list([1, 2, 3, 4]) = [1, 4, 2, 3]\n    Explanation: The minimum value is 1, and the maximum of the remaining integers is 4. Then we choose 2 as the next minimum and 3 as the next maximum.\n    \n    strange_sort_list([5, 5, 5, 5]) = [5, 5, 5, 5]\n    Explanation: All elements are the same, so the output remains unchanged.\n    \n    strange_sort_list([]) = []\n    Explanation: The input list is empty, so the output is also an empty list.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The logic provided covers scenarios where the list is empty or contains identical elements.\n", "requirement pool:\n- Implement the 'strange_sort_list' function according to the provided logic\n- Handle edge cases such as empty input list gracefully\n- Optimize the sorting algorithm for better performance\nWe will use the built-in Python functions to efficiently sort the list in a 'strange' order.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimum value', 'maximum value', 'strange order'\n    Explanation: The core concept involves sorting a list in a specific order where the minimum value is followed by the maximum value, and this pattern continues alternately.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using built-in Python functions to efficiently sort the list in a 'strange' order. Here is a possible logic to implement this:\n    \n    1. Sort the input list in ascending order.\n    2. Initialize an empty result list.\n    3. Iterate over the sorted list:\n        - Append the first element (minimum value) to the result list.\n        - If there are more than one element left, append the last element (maximum value) to the result list.\n        - Remove the appended elements from the sorted list.\n    4. Return the result list.\n\n# [edge case] \n    strange_sort_list([1, 2, 3, 4]) = [1, 4, 2, 3]\n    Explanation: The minimum value is 1, followed by the maximum value 4, then 2, and finally 3.\n    \n    strange_sort_list([5, 5, 5, 5]) = [5, 5, 5, 5]\n    Explanation: All elements are the same, so the output remains unchanged.\n    \n    strange_sort_list([]) = []\n    Explanation: An empty list results in an empty output.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where the list is empty or contains duplicate values.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, false, true, true, true, true], "pass_test_cases_num": [107, 107, 107, 107, 107, 0, 107, 107, 107, 107], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''\n    Given list of integers, return list in strange order. Strange sorting is when you start with the minimum value. Then you choose the maximum of the remaining integers, then minimum and so on.\n    Examples:\n        strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n        strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n        strange_sort_list([]) == []\n    '''\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst\n", "passed": true, "pass": true, "pass_num": 9, "round": 571, "repair_prompt": ["def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. Strange sorting is when you start with the minimum value. Then you choose the maximum of the remaining integers, then minimum and so on.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "def strange_sort_list(lst):\t\n'''When sorting a list of integers in a strange order, you begin with the minimum value followed by the maximum of the remaining integers, then the minimum and so on.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order when starting with the minimum value and choosing maximum of remaining integers, then minimum and so on.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''"], "mutate_method": "expand_one2two", "parent_index": 543}
