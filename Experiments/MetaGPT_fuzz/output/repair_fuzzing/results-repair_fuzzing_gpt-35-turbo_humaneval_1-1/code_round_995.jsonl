{"task_id": "HumanEval/117", "prompt": "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Consider edge cases where consonants are consecutive or separated by vowels within words.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": ["def check(select_words):\n\tassert select_words('eg aqk', 2) == ['aqk']", "def check(select_words):\n\tassert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "def check(select_words):\n\tassert select_words('syk', 6) == []", "def check(select_words):\n\tassert select_words('gw', 9) == []", "def check(select_words):\n\tassert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "def check(select_words):\n\tassert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "def check(select_words):\n\tassert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "def check(select_words):\n\tassert select_words('zGMhBC', 6) == ['zGMhBC']", "def check(select_words):\n\tassert select_words('kfohjsjunakqmmsx', 1) == []", "def check(select_words):\n\tassert select_words('KbpFfWgXZoVjXV', 1) == []", "def check(select_words):\n\tassert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "def check(select_words):\n\tassert select_words('kg', 1) == []", "def check(select_words):\n\tassert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "def check(select_words):\n\tassert select_words('xrbpxpncgqufqkq', 6) == []", "def check(select_words):\n\tassert select_words('sqgikswgssxsbwkl', 7) == []", "def check(select_words):\n\tassert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "def check(select_words):\n\tassert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "def check(select_words):\n\tassert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "def check(select_words):\n\tassert select_words('bnXA AjPVh', 5) == []", "def check(select_words):\n\tassert select_words('omnivbqgmavyqdgqssas', 6) == []", "def check(select_words):\n\tassert select_words('fmjizkhknnihqioic', 4) == []", "def check(select_words):\n\tassert select_words('lINKPOlFIImtg', 3) == []", "def check(select_words):\n\tassert select_words('nPxmyTd', 7) == ['nPxmyTd']", "def check(select_words):\n\tassert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "def check(select_words):\n\tassert select_words('mehochzpausf', 2) == []", "def check(select_words):\n\tassert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "def check(select_words):\n\tassert select_words('EGiDfM', 1) == []", "def check(select_words):\n\tassert select_words('mc', 7) == []", "def check(select_words):\n\tassert select_words('wzx', 5) == []", "def check(select_words):\n\tassert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "def check(select_words):\n\tassert select_words('xwkxcjffocow', 5) == []", "def check(select_words):\n\tassert select_words('dl', 5) == []", "def check(select_words):\n\tassert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "def check(select_words):\n\tassert select_words('ABIStgq', 5) == ['ABIStgq']", "def check(select_words):\n\tassert select_words('nb', 2) == ['nb']", "def check(select_words):\n\tassert select_words('ny', 2) == ['ny']", "def check(select_words):\n\tassert select_words('HWCLBC', 6) == ['HWCLBC']", "def check(select_words):\n\tassert select_words('uuh', 6) == []", "def check(select_words):\n\tassert select_words('uoubngttn', 3) == []", "def check(select_words):\n\tassert select_words('g', 5) == []", "def check(select_words):\n\tassert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "def check(select_words):\n\tassert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "def check(select_words):\n\tassert select_words('aztxoxesjkzqebhrfzw', 3) == []", "def check(select_words):\n\tassert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "def check(select_words):\n\tassert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "def check(select_words):\n\tassert select_words('tJzO PnCT', 3) == ['tJzO']", "def check(select_words):\n\tassert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "def check(select_words):\n\tassert select_words('qhwubvrfmwy', 2) == []", "def check(select_words):\n\tassert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "def check(select_words):\n\tassert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "def check(select_words):\n\tassert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "def check(select_words):\n\tassert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "def check(select_words):\n\tassert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "def check(select_words):\n\tassert select_words('r s rhhipmt', 6) == ['rhhipmt']", "def check(select_words):\n\tassert select_words('aDqyhePv', 6) == ['aDqyhePv']", "def check(select_words):\n\tassert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "def check(select_words):\n\tassert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "def check(select_words):\n\tassert select_words('aru', 5) == []", "def check(select_words):\n\tassert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "def check(select_words):\n\tassert select_words('SNeiILCez', 4) == []", "def check(select_words):\n\tassert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "def check(select_words):\n\tassert select_words('ySmjGAg', 6) == ['ySmjGAg']", "def check(select_words):\n\tassert select_words('bRJRZC', 3) == []", "def check(select_words):\n\tassert select_words('u', 1) == []", "def check(select_words):\n\tassert select_words('djucfuuizrjfvuzzo', 4) == []", "def check(select_words):\n\tassert select_words('dvYLMt', 6) == ['dvYLMt']", "def check(select_words):\n\tassert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "def check(select_words):\n\tassert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "def check(select_words):\n\tassert select_words('yp', 6) == []", "def check(select_words):\n\tassert select_words('v', 4) == []", "def check(select_words):\n\tassert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "def check(select_words):\n\tassert select_words('afrrguc', 5) == ['afrrguc']", "def check(select_words):\n\tassert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "def check(select_words):\n\tassert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "def check(select_words):\n\tassert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "def check(select_words):\n\tassert select_words('nh vu lcakrb', 1) == ['vu']", "def check(select_words):\n\tassert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "def check(select_words):\n\tassert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(select_words):\n\tassert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "def check(select_words):\n\tassert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "def check(select_words):\n\tassert select_words('MjRnAErHPguQC', 1) == []", "def check(select_words):\n\tassert select_words('tmchxmttrgfdanq', 3) == []", "def check(select_words):\n\tassert select_words('jezkeorvxnruwhhwzxm', 7) == []", "def check(select_words):\n\tassert select_words('caurfxlpkygqxoknil', 4) == []", "def check(select_words):\n\tassert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "def check(select_words):\n\tassert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "def check(select_words):\n\tassert select_words('NSjIbZV', 2) == []", "def check(select_words):\n\tassert select_words('rPKhzIot', 6) == ['rPKhzIot']", "def check(select_words):\n\tassert select_words('ASDVzOVVDEdj J', 1) == ['J']", "def check(select_words):\n\tassert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "def check(select_words):\n\tassert select_words(' siweqafqot', 5) == []", "def check(select_words):\n\tassert select_words('xdQgsAHI', 5) == []", "def check(select_words):\n\tassert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "def check(select_words):\n\tassert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "def check(select_words):\n\tassert select_words('hguHoJGaaNwX', 3) == []", "def check(select_words):\n\tassert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "def check(select_words):\n\tassert select_words('choounwx', 5) == ['choounwx']", "def check(select_words):\n\tassert select_words('yue', 2) == []", "def check(select_words):\n\tassert select_words('DDdrgPy', 4) == []", "def check(select_words):\n\tassert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "def check(select_words):\n\tassert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "def check(select_words):\n\tassert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "def check(select_words):\n\tassert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "def check(select_words):\n\tassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "def check(select_words):\n\tassert select_words('Reg MuZcF', 4) == ['MuZcF']", "def check(select_words):\n\tassert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "def check(select_words):\n\tassert select_words('sl', 6) == []", "def check(select_words):\n\tassert select_words('IFKqNq ', 5) == ['IFKqNq']", "def check(select_words):\n\tassert select_words('lfspeijyudniowk', 1) == []", "def check(select_words):\n\tassert select_words('kogmgdnk', 7) == ['kogmgdnk']", "def check(select_words):\n\tassert select_words('nnchatjackywoavfwfps', 5) == []", "def check(select_words):\n\tassert select_words('d', 2) == []", "def check(select_words):\n\tassert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "def check(select_words):\n\tassert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "def check(select_words):\n\tassert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "def check(select_words):\n\tassert select_words('jopfxbbvlslmluypcdt', 3) == []", "def check(select_words):\n\tassert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "def check(select_words):\n\tassert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "def check(select_words):\n\tassert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "def check(select_words):\n\tassert select_words('etdrxwybqi', 1) == []", "def check(select_words):\n\tassert select_words('aVCSziOkLCLGizHcmC', 2) == []", "def check(select_words):\n\tassert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "def check(select_words):\n\tassert select_words('txXxge', 4) == []", "def check(select_words):\n\tassert select_words('kcpieuVjAOaxdpB', 4) == []", "def check(select_words):\n\tassert select_words('oh', 8) == []", "def check(select_words):\n\tassert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "def check(select_words):\n\tassert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "def check(select_words):\n\tassert select_words('eywh qxreeexrrhyovpwl', 7) == []", "def check(select_words):\n\tassert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "def check(select_words):\n\tassert select_words('asfwxvbzdfsrymc', 3) == []", "def check(select_words):\n\tassert select_words('nBmjWxiPV', 3) == []", "def check(select_words):\n\tassert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "test_case_list": ["assert select_words('eg aqk', 2) == ['aqk']", "assert select_words('eoDDPoNuKJnQIcLHcFK', 14) == ['eoDDPoNuKJnQIcLHcFK']", "assert select_words('syk', 6) == []", "assert select_words('gw', 9) == []", "assert select_words('ZpJhNYG', 7) == ['ZpJhNYG']", "assert select_words(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(select_words(\"Mary had a little lamb\", 4))", "assert select_words('ILkvuFIrW jXOOGXgdSWtd', 10) == ['jXOOGXgdSWtd']", "assert select_words('uwnynnkeh', 7) == ['uwnynnkeh']", "assert select_words('zGMhBC', 6) == ['zGMhBC']", "assert select_words('kfohjsjunakqmmsx', 1) == []", "assert select_words('KbpFfWgXZoVjXV', 1) == []", "assert select_words('GeLxcZJyRwUsQKBQkanf', 2) == []", "assert select_words('kg', 1) == []", "assert select_words(\"simple white space\", 2) == [], \"Third test error: \" + str(select_words(\"simple white space\", 2))", "assert select_words('xrbpxpncgqufqkq', 6) == []", "assert select_words('sqgikswgssxsbwkl', 7) == []", "assert select_words('kumJjGm AFFO', 6) == ['kumJjGm']", "assert select_words('iJxMQLiIZ', 6) == ['iJxMQLiIZ']", "assert select_words('uwebicR RgZrAiEnPkq', 4) == ['uwebicR']", "assert select_words('bnXA AjPVh', 5) == []", "assert select_words('omnivbqgmavyqdgqssas', 6) == []", "assert select_words('fmjizkhknnihqioic', 4) == []", "assert select_words('lINKPOlFIImtg', 3) == []", "assert select_words('nPxmyTd', 7) == ['nPxmyTd']", "assert select_words('yCRgLVwagpjADSN MUkt', 3) == ['MUkt']", "assert select_words('mehochzpausf', 2) == []", "assert select_words('TcXKTNbOnjCJLzWhlNELbGPc', 22) == ['TcXKTNbOnjCJLzWhlNELbGPc']", "assert select_words('EGiDfM', 1) == []", "assert select_words('mc', 7) == []", "assert select_words('wzx', 5) == []", "assert select_words('hgwhtsvqihhm', 11) == ['hgwhtsvqihhm']", "assert select_words('xwkxcjffocow', 5) == []", "assert select_words('dl', 5) == []", "assert select_words('UIOcsXneOjxMkRLvRLSDTV', 4) == []", "assert select_words('ABIStgq', 5) == ['ABIStgq']", "assert select_words('nb', 2) == ['nb']", "assert select_words('ny', 2) == ['ny']", "assert select_words('HWCLBC', 6) == ['HWCLBC']", "assert select_words('uuh', 6) == []", "assert select_words('uoubngttn', 3) == []", "assert select_words('g', 5) == []", "assert select_words('ffqkhIIChADuzMQIrcFek', 15) == ['ffqkhIIChADuzMQIrcFek']", "assert select_words('CbxmADxVZtHArXzwNxnuvda', 19) == ['CbxmADxVZtHArXzwNxnuvda']", "assert select_words('aztxoxesjkzqebhrfzw', 3) == []", "assert select_words('sqdcPgSPeHfNdISspJa', 16) == ['sqdcPgSPeHfNdISspJa']", "assert select_words('zdXc AqKVMGYLrZMPSz', 4) == ['zdXc']", "assert select_words('tJzO PnCT', 3) == ['tJzO']", "assert select_words('jizrraatfiyetneqergnnbfn', 3) == []", "assert select_words('qhwubvrfmwy', 2) == []", "assert select_words('dzrmzilzoxn l', 9) == ['dzrmzilzoxn']", "assert select_words('ZZcAZzrjekxbP tPNuYXLnOLVv', 10) == ['tPNuYXLnOLVv']", "assert select_words('JtsHoq wxvsLQqBXkNpmCTzBWTX', 1) == []", "assert select_words('aecdOIhfIbEBTOfoKnT', 1) == []", "assert select_words('gLFCSPHHP', 9) == ['gLFCSPHHP']", "assert select_words('r s rhhipmt', 6) == ['rhhipmt']", "assert select_words('aDqyhePv', 6) == ['aDqyhePv']", "assert select_words('tTxmhPuW', 7) == ['tTxmhPuW']", "assert select_words('gkaioVYtEtMLxrVq JIIwPCZW', 6) == ['JIIwPCZW']", "assert select_words('aru', 5) == []", "assert select_words('ySRkkHkfcvgHqOGVfaDTTRf', 1) == []", "assert select_words('SNeiILCez', 4) == []", "assert select_words('xzzxdz lkmvrvizpz z', 6) == ['xzzxdz']", "assert select_words('ySmjGAg', 6) == ['ySmjGAg']", "assert select_words('bRJRZC', 3) == []", "assert select_words('u', 1) == []", "assert select_words('djucfuuizrjfvuzzo', 4) == []", "assert select_words('dvYLMt', 6) == ['dvYLMt']", "assert select_words('xqvooek icmfdiysshehnyqx', 7) == []", "assert select_words('zIdcqeCrTYiDGGjYFC', 15) == ['zIdcqeCrTYiDGGjYFC']", "assert select_words('yp', 6) == []", "assert select_words('v', 4) == []", "assert select_words(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(select_words(\"a b c d e f\", 1))", "assert select_words('afrrguc', 5) == ['afrrguc']", "assert select_words('KBDaAtwgkSQhbMcvLn', 16) == ['KBDaAtwgkSQhbMcvLn']", "assert select_words('WvvnDCbdBejJOXxALMQUP', 17) == ['WvvnDCbdBejJOXxALMQUP']", "assert select_words('IXWOrAdrmmcWXqngDkiVFKXaAWf', 4) == []", "assert select_words('nh vu lcakrb', 1) == ['vu']", "assert select_words('QOBKeojoDQGT jIZmKXyPl', 8) == ['QOBKeojoDQGT', 'jIZmKXyPl']", "assert select_words(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(select_words(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.", "assert select_words('zE sivlrNrHFgwiokUjTMdndl', 5) == []", "assert select_words('svMzfBuoveQXEPPIVV', 13) == ['svMzfBuoveQXEPPIVV']", "assert select_words('MjRnAErHPguQC', 1) == []", "assert select_words('tmchxmttrgfdanq', 3) == []", "assert select_words('jezkeorvxnruwhhwzxm', 7) == []", "assert select_words('caurfxlpkygqxoknil', 4) == []", "assert select_words('RBAY  hmsXCkloLHYheRDQL', 3) == ['RBAY']", "assert select_words('prFfoYsafgMfGYYGjsiqTXwL', 21) == ['prFfoYsafgMfGYYGjsiqTXwL']", "assert select_words('NSjIbZV', 2) == []", "assert select_words('rPKhzIot', 6) == ['rPKhzIot']", "assert select_words('ASDVzOVVDEdj J', 1) == ['J']", "assert select_words('oKNamFuRSJcV', 9) == ['oKNamFuRSJcV']", "assert select_words(' siweqafqot', 5) == []", "assert select_words('xdQgsAHI', 5) == []", "assert select_words('epzbicjvjcbxmxgfityzzv', 5) == []", "assert select_words('GFNxLvGHJnNx', 12) == ['GFNxLvGHJnNx']", "assert select_words('hguHoJGaaNwX', 3) == []", "assert select_words('cnxdrucrydrcyol', 13) == ['cnxdrucrydrcyol']", "assert select_words('choounwx', 5) == ['choounwx']", "assert select_words('yue', 2) == []", "assert select_words('DDdrgPy', 4) == []", "assert select_words('c zsYpMPdmr', 9) == ['zsYpMPdmr']", "assert select_words(\"\", 4) == [], \"1st edge test error: \" + str(select_words(\"\", 4))", "assert select_words('pzBxlNfcXEsOQzL', 13) == ['pzBxlNfcXEsOQzL']", "assert select_words('pWqNDaO zJwlHsqqEYCdDEZtNiL', 3) == []", "assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(select_words(\"Mary had a little lamb\", 3))", "assert select_words('Reg MuZcF', 4) == ['MuZcF']", "assert select_words('lxQnxHVtrUGfoufkLPXu', 16) == ['lxQnxHVtrUGfoufkLPXu']", "assert select_words('sl', 6) == []", "assert select_words('IFKqNq ', 5) == ['IFKqNq']", "assert select_words('lfspeijyudniowk', 1) == []", "assert select_words('kogmgdnk', 7) == ['kogmgdnk']", "assert select_words('nnchatjackywoavfwfps', 5) == []", "assert select_words('d', 2) == []", "assert select_words('fjnjvfo aqgasitdiyalwv', 1) == []", "assert select_words('IGEmiHg ne YIhrNkjpGfOObqJ', 1) == ['ne']", "assert select_words(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(select_words(\"Hello world\", 4))", "assert select_words('jopfxbbvlslmluypcdt', 3) == []", "assert select_words('AWrNREXAqD WePeTbIPTS', 4) == []", "assert select_words('OWzTDtbfTAEOBLuZPqFdnmnSG', 5) == []", "assert select_words('TQzrMVZMngInaglSfwvrbAh', 20) == ['TQzrMVZMngInaglSfwvrbAh']", "assert select_words('etdrxwybqi', 1) == []", "assert select_words('aVCSziOkLCLGizHcmC', 2) == []", "assert select_words('sYlP HUxjpHVfeWBNAvXo', 4) == ['sYlP']", "assert select_words('txXxge', 4) == []", "assert select_words('kcpieuVjAOaxdpB', 4) == []", "assert select_words('oh', 8) == []", "assert select_words('bgosvLxdWAWUtCxHgfPugDKQfel', 5) == []", "assert select_words('fT LxYLtzO', 6) == ['LxYLtzO']", "assert select_words('eywh qxreeexrrhyovpwl', 7) == []", "assert select_words('JfStfbdqmygzcqzJvvbivZfDbwg', 26) == ['JfStfbdqmygzcqzJvvbivZfDbwg']", "assert select_words('asfwxvbzdfsrymc', 3) == []", "assert select_words('nBmjWxiPV', 3) == []", "assert select_words('lDqgwtu rM tfTmeKEd', 2) == ['rM']"], "nl": "Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    ", "func": "def select_words(s, n):", "examples": "Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    ", "completions": ["from typing import List\n## main.py\n\nfrom typing import List\nimport re\n\ndef select_words(s: str, n: int) -> List[str]:\n    '''\n    Given a string s and a natural number n, return a list of words from string s that contain exactly n consonants.\n    Args:\n        s (str): Input string\n        n (int): Number of consonants\n    Returns:\n        List[str]: List of words with n consonants\n    '''\n\n    if not s:\n        return []\n    \n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n    \n    words = re.findall(r'\\b\\w+\\b', s)\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    '''\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants,\n    in the order these words appear in the string s.\n    If the string s is empty, the function returns an empty list.\n    Note: The input string contains only letters and spaces.\n    '''\n\n    def count_consonants(word: str) -> int:\n        consonants = 'bcdfghjklmnpqrstvwxyz'\n        return sum(1 for letter in word if letter.lower() in consonants)\n\n    if n == 0:\n        return []\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    '''\n    Given a string s and a natural number n, return a list of words from string s that contain exactly n consonants,\n    in the order these words appear in the string s.\n    If the string s is empty, return an empty list.\n    Note: Input string contains only letters and spaces.\n    '''\n    \n    def count_consonants(word: str) -> int:\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for letter in word if letter in consonants)\n    \n    if not s or n == 0:\n        return []\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef words_with_n_consonants(s: str, n: int) -> List[str]:\n    \"\"\"\n    Return a list of words from string s that contain exactly n consonants, in order they appear in the string.\n    Some words may have consecutive consonants, while others may have vowels separating the consonants.\n    If string s is empty, return an empty list.\n    \"\"\"\n    \n    def count_consonants(word: str) -> int:\n        consonants = 'bcdfghjklmnpqrstvwxyz'\n        return sum(1 for letter in word if letter.lower() in consonants)\n    \n    if not s:\n        return []\n    \n    words = s.split()\n    result = []\n    \n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n    \n    return result\n", "from typing import List\n## main.py\n\nimport re\nfrom typing import List\n\ndef find_words_with_n_consonants(s: str, n: int) -> List[str]:\n    \"\"\"\n    Return a list of words from string s that contain exactly n consonants, in order they appear in the string.\n    Some words may have consecutive consonants, while others may have vowels separating the consonants.\n    If string s is empty, return an empty list.\n    \"\"\"\n\n    if not s:\n        return []\n\n    consonant_pattern = re.compile('[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]')\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonant_count = len(re.findall(consonant_pattern, word))\n        if consonant_count == n:\n            result.append(word)\n\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_words_with_n_consonants(s: str, n: int) -> List[str]:\n    \"\"\"\n    Return a list of words from string s that contain exactly n consonants, in order they appear in the string.\n    Some words may have consecutive consonants, while others may have vowels separating the consonants.\n    If s is empty, return an empty list.\n    \"\"\"\n    \n    def count_consonants(word: str) -> int:\n        consonants = 'bcdfghjklmnpqrstvwxyz'\n        return sum(1 for letter in word if letter.lower() in consonants)\n    \n    if not s:\n        return []\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    '''\n    Given a string s and a natural number n, return a list of words from string s that contain exactly n consonants, in the order they appear in s.\n    If s is empty, return an empty list.\n    '''\n    \n    def count_consonants(word: str) -> int:\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for letter in word if letter in consonants)\n    \n    if not s:\n        return []\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n", "from typing import List\n## main.py\n\nimport re\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    '''\n    Given a string s and a natural number n, return a list of words from string s that contain exactly n consonants, in the order they appear in s.\n    If s is empty, return an empty list.\n    '''\n    \n    def count_consonants(word: str) -> int:\n        return len(re.findall(r'[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]', word))\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n", "from typing import List\n## main.py\n\nimport re\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    '''\n    Given a string s and a natural number n, return a list of words from string s that contain exactly n consonants, in the order they appear in the string.\n    If the string s is empty, return an empty list.\n    '''\n\n    def count_consonants(word: str) -> int:\n        consonants = re.findall(r'[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]', word)\n        return len(consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    '''\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants,\n    in the order these words appear in the string s.\n    If the string s is empty then the function returns an empty list.\n    Note: The input string contains only letters and spaces.\n    Consider edge cases where consonants are consecutive or separated by vowels within words.\n    '''\n    \n    def count_consonants(word: str) -> int:\n        consonants = 'bcdfghjklmnpqrstvwxyz'\n        return sum(1 for letter in word if letter.lower() in consonants)\n    \n    if n == 0 or not s:\n        return []\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n"], "plans": ["We will use Python and the re library to efficiently filter words based on consonant count. We will iterate through the input string, count the consonants in each word, and return words that match the given count.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the speech sounds that are not vowels. In this requirement, we need to identify words containing a specific number of consonants.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will iterate through the input string, split it into words, count the consonants in each word, and return words that match the given count.\n\n```python\nimport re\n\ndef select_words(s, n):\n    if not s:\n        return []\n    \n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n    \n    words = re.findall(r'\\b\\w+\\b', s)\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n```\n\n# [edge case] \n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    Explanation: The word \"little\" has 4 consonants ('l', 't', 't', 'l') which matches the required count.\n    \n    select_words(\"simple white space\", 2) ==> []\n    Explanation: None of the words in the input string have exactly 2 consonants, so an empty list is returned.\n    \n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    Explanation: The word \"world\" has 4 consonants ('w', 'r', 'l', 'd') which matches the required count.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the edge cases effectively.\n", "requirement pool:\n- Implement word filtering based on consonant count\n- Handle edge cases with consecutive or separated consonants\n- Maintain original word order in the output list\nWe will use Python and the re library to implement the function for filtering words based on consonant count.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the speech sounds that are not vowels. In this requirement, we need to identify words containing a specific number of consonants.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\n\n# [edge case] \n    select_words(\"Mary had a little lamb\", 0) = []\n    Explanation: Since the requirement specifies to return words with a specific number of consonants, when n is 0, there are no words that meet the criteria, so the expected output is an empty list.\n    select_words(\"Hello world\", 1) = [\"world\"]\n    Explanation: The word \"world\" contains only one consonant, which is 'w'.\n    select_words(\"Uncle sam\", 4) = []\n    Explanation: Both words have less than 4 consonants, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n == 0:\n            return []\n        (other code)\n", "requirement pool:\n- Implement word selection based on consonant count\n- Maintain word order as per input string\n- Handle edge cases of consonant placement\nWe will use the re library in Python to efficiently filter words based on consonant count and maintain accurate word order.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the speech sounds that are not vowels. In this requirement, we need to identify words containing a specific number of consonants.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\n\n# [edge case] \n    select_words(\"Mary had a little lamb\", 0) = []\n    Explanation: Since the requirement specifies to return words with a specific number of consonants, when n is 0, no word will have 0 consonants, so the expected output is an empty list.\n    select_words(\"Hello world\", 5) = []\n    Explanation: The word \"world\" has 4 consonants, not 5, so the expected output is an empty list.\n    select_words(\"\", 3) = []\n    Explanation: When the input string is empty, the function should return an empty list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not s:\n            return []\n        if n == 0:\n            return []\n        (other code)\n", "requirement pool:\n- Implement function to count consonants in a word\n- Develop logic to extract words with n consonants\n- Ensure correct ordering of words based on appearance in the string\nWe will use the re library in Python to efficiently filter words with n consonants and maintain their order based on appearance in the string.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the speech sounds that are not vowels. In this requirement, we need to identify words with a specific number of consonants.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\n\n# [edge case] \n    words_with_n_consonants('', 3) = []\n    Explanation: Since the input string is empty, there are no words to check for consonants, so the expected output is an empty list.\n    words_with_n_consonants('hello world', 2) = ['hello']\n    Explanation: The word 'hello' contains 2 consonants ('h' and 'l') in order of appearance in the string.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not s:\n            return []\n        (other code)\n", "requirement analysis:\nThe function needs to efficiently identify words with n consonants, maintain their order, and handle empty string cases.\nrequirement pool:\n- Implement word search logic based on consonant count\n- Ensure correct ordering of words in the output list\n- Add validation for empty string input\nWe will use the re library in Python to efficiently identify words with n consonants by using regular expressions. We will maintain the order of words by iterating through the input string. To handle empty string cases, we will add a simple check at the beginning of the function.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the speech sounds that are not vowels. In this requirement, we need to identify words with a specific number of consonants.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the re library and regular expressions, the code logic will involve:\n    - Importing the re library\n    - Defining a regular expression pattern to match consonants\n    - Iterating through the input string to identify words with exactly n consonants\n    - Returning a list of words that meet the criteria\n\n# [edge case] \n    find_words_with_n_consonants('', 3) = []\n    Explanation: Since the input string is empty, there are no words to check for consonants, so the expected output is an empty list.\n    find_words_with_n_consonants('hello world', 2) = ['hello']\n    Explanation: The word 'hello' contains 2 consonants ('h' and 'l') in order they appear in the string.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not s:\n            return []\n        (other code)\n", "requirement pool:\n- Implement function to count consonants in a word\n- Develop logic to extract words with n consonants from a given string\n- Ensure correct ordering of words in the output list\nWe will design a static Python function using basic string manipulation and list comprehension to efficiently find words with n consonants while preserving the word order.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the speech sounds that are not vowels. In this requirement, we need to identify words containing a specific number of consonants.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\n\n# [edge case] \n    find_words_with_n_consonants('', 2) = []\n    Explanation: Since the input string is empty, there are no words to check for consonants, so the expected output is an empty list.\n    find_words_with_n_consonants('hello world', 3) = ['hello']\n    Explanation: The word 'hello' contains 3 consonants ('h', 'l', 'l'), and it appears before 'world' in the string.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not s:\n            return []\n        (other code)\n", "requirement pool:\n- Implement word filtering based on consonant count\n- Maintain word order in the output list\n- Handle empty input strings by returning an empty list\nWe will use Python and the re library to efficiently filter words based on consonant count while maintaining word order.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the letters in the alphabet that are not vowels (A, E, I, O, U).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    select_words(\"\", 3) = []\n    Explanation: Since the input string is empty, there are no words to check for consonant count.\n    select_words(\"Hello world\", 0) = []\n    Explanation: Since the required consonant count is 0, no word will meet this condition.\n    select_words(\"Hello world\", 5) = []\n    Explanation: None of the words in the input string have exactly 5 consonants.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not s:\n            return []\n        (other code)\n", "requirement pool:\n- Implement word filtering based on consonant count\n- Maintain word order in the output list\n- Handle empty input strings by returning an empty list\nWe will use the re library in Python to efficiently filter words based on consonant count.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the speech sounds that are not vowels. In this requirement, we need to count the number of consonants in each word.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions the use of the re library, we can use regular expressions to filter words based on consonant count efficiently. Here is a detailed logic to implement the code:\n    1. Import the re library.\n    2. Define a function select_words that takes a string s and a natural number n as input.\n    3. Split the input string s into words.\n    4. Iterate through each word in the list of words.\n    5. Use regular expressions to count the number of consonants in each word.\n    6. If the count matches the input number n, add the word to a result list.\n    7. Return the result list.\n\n# [edge case] \n    select_words(\"Mary had a little lamb\", 0) = []\n    Explanation: Since n is 0, no word can have exactly 0 consonants, so the expected output is an empty list.\n    select_words(\"\", 4) = []\n    Explanation: The input string is empty, so the function should return an empty list.\n    select_words(\"Hello world\", 5) = []\n    Explanation: There are no words with exactly 5 consonants in the input string.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers scenarios where the input string is empty or when there are no words with the specified consonant count.\n", "requirement pool:\n- Implement word filtering based on consonant count\n- Maintain word order in the output list\n- Handle empty input strings gracefully\nWe will use the re library in Python to efficiently filter words based on consonant count. We will iterate through the input string, count the number of consonants in each word, and maintain the order of words in the output list.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the speech sounds that are not vowels. In this requirement, we need to count the number of consonants in each word of the input string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will use the re library in Python to efficiently filter words based on consonant count. We will iterate through the input string, count the number of consonants in each word, and maintain the order of words in the output list.\n\n# [edge case] \n    select_words(\"Mary had a little lamb\", 0) = []\n    Explanation: Since the requirement specifies that we need words with exactly n consonants, when n is 0, no word will meet this condition.\n    select_words(\"\", 4) = []\n    Explanation: When the input string is empty, the function should return an empty list.\n    select_words(\"Hello world\", 5) = []\n    Explanation: There are no words in the input string with exactly 5 consonants.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the edge cases as well.\n", "requirement pool:\n- Implement word filtering based on consonant count\n- Maintain original word order in the output list\n- Handle edge cases with non-adjacent consonants\nWe will use Python and the re library to implement a function that filters words based on consonant count.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consonants'\n    Explanation: Consonants are the speech sounds that are not vowels. In this requirement, we need to identify words containing a specific number of consonants.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    select_words(\"Mary had a little lamb\", 0) = []\n    Explanation: Since the requirement specifies to return words with a specific number of consonants, when n is 0, no word will have 0 consonants, so the expected output is an empty list.\n    select_words(\"Hello world\", 5) = []\n    Explanation: The word \"world\" has 4 consonants, not 5, so it does not meet the criteria for selection.\n    select_words(\"\", 3) = []\n    Explanation: When the input string is empty, there are no words to check for consonant count, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n == 0:\n            return []\n        elif not s:\n            return []\n        (other code)\n"], "scores": [1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, false, false, false, true, true, true, true], "pass_test_cases_num": [133, 133, 133, 0, 0, 0, 133, 133, 133, 133], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    '''\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants,\n    in the order these words appear in the string s.\n    If the string s is empty then the function returns an empty list.\n    Note: The input string contains only letters and spaces.\n    Consider edge cases where consonants are consecutive or separated by vowels within words.\n    '''\n    \n    def count_consonants(word: str) -> int:\n        consonants = 'bcdfghjklmnpqrstvwxyz'\n        return sum(1 for letter in word if letter.lower() in consonants)\n    \n    if n == 0 or not s:\n        return []\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n", "passed": true, "pass": true, "pass_num": 7, "round": 995, "repair_prompt": ["def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Consider edge cases where consonants are consecutive or separated by vowels within words.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. Some words may have consecutive consonants, while others may have vowels separating the consonants.\nIf the string s is empty then the function should return an empty list.", "def select_words(s, n):\t\n'''Given a string s and a natural number n, implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n'''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 896}
