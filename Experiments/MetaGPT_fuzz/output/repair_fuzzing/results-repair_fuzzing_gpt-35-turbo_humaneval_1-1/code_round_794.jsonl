{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means that each subsequent element is greater than or equal to the previous one. Monotonically decreasing indicates that each subsequent element is less than or equal to the previous one.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": ["def check(monotonic):\n\tassert monotonic([6, 2, 5, 7, 4, 65]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 7, 4, 3, 64]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 8]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 7, 1, 62]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 1, 1]) == True", "def check(monotonic):\n\tassert monotonic([3, 2, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([2, 7, 7, 15]) == True", "def check(monotonic):\n\tassert monotonic([4, 7, 7, 1, 1, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 8, 13]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 8, 17]) == True", "def check(monotonic):\n\tassert monotonic([2, 22, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([2, 23, 5, 6]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 2, 18]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 2, 6]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 3, 2]) == True", "def check(monotonic):\n\tassert monotonic([7, 5, 2, -5]) == True", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 10]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 6, 18]) == False", "def check(monotonic):\n\tassert monotonic([6, 1, 7, 3, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 7, 3, 8, 61]) == False", "def check(monotonic):\n\tassert monotonic([2, 17, 7, 8]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 4, 5, 3, 59]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 5, 5, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([6, 19, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([1, 16, 9, 7]) == False", "def check(monotonic):\n\tassert monotonic([7, 6, 2, -14]) == True", "def check(monotonic):\n\tassert monotonic([5, 6, 4, 16]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 5, -10]) == False", "def check(monotonic):\n\tassert monotonic([1, 22, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([1, 6, 8, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 1, 6, 4, 62]) == False", "def check(monotonic):\n\tassert monotonic([1, 1, 7, 2, 4, 56]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 12]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 1, 4]) == False", "def check(monotonic):\n\tassert monotonic([4, 19, 8, 7]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 8, 5, 5, 56]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 6, 25]) == True", "def check(monotonic):\n\tassert monotonic([2, 3, 1, 7]) == False", "def check(monotonic):\n\tassert monotonic([8, 6, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 6, 2, 8, 62]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 6, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 6, 1, 3]) == False", "def check(monotonic):\n\tassert monotonic([4, 2, 5, 7, 6, 62]) == False", "def check(monotonic):\n\tassert monotonic([3, 7, 1, 20]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 5, 17]) == False", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 5, 5, 57]) == False", "def check(monotonic):\n\tassert monotonic([1, 20, 4, 10]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 4, 14]) == False", "def check(monotonic):\n\tassert monotonic([3, 17, 2, 14]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 7, 2, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 4, 20]) == True", "def check(monotonic):\n\tassert monotonic([3, 3, 3, -5]) == True", "def check(monotonic):\n\tassert monotonic([4, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 5, 4, 2, 1, 60]) == False", "def check(monotonic):\n\tassert monotonic([6, 4, 7, 24]) == False", "def check(monotonic):\n\tassert monotonic([6, 3, 1, 1, 2, 61]) == False", "def check(monotonic):\n\tassert monotonic([1, 4, 3, -8]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 3, 5, 10, 63]) == False", "def check(monotonic):\n\tassert monotonic([4, 6, 3, 3, 10, 57]) == False", "def check(monotonic):\n\tassert monotonic([5, 4, 9, 14]) == False", "def check(monotonic):\n\tassert monotonic([1, 3, 5, 17]) == True", "def check(monotonic):\n\tassert monotonic([6, 7, 1, 8]) == False", "def check(monotonic):\n\tassert monotonic([9, 2, 5, -5]) == False", "def check(monotonic):\n\tassert monotonic([3, 2, 5, 1]) == False", "def check(monotonic):\n\tassert monotonic([9, 9, 9, 9]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 4, 5, 60]) == True", "def check(monotonic):\n\tassert monotonic([6, 2, 5, 6, 3, 62]) == False", "def check(monotonic):\n\tassert monotonic([5, 1, 3, -9]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 7, 6]) == False", "def check(monotonic):\n\tassert monotonic([1, 24, 9, 12]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 7, 6, 6, 61]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 1, 0]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 3, 3, 3, 65]) == False", "def check(monotonic):\n\tassert monotonic([1, 2, 8, 5, 9, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 16, 2, 11]) == False", "def check(monotonic):\n\tassert monotonic([6, 16, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([1, 5, 2, 4, 2, 55]) == False", "def check(monotonic):\n\tassert monotonic([3, 1, 8, 7, 7, 65]) == False", "def check(monotonic):\n\tassert monotonic([2, 20, 2, 5]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 3, -10]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 5, 4, 8, 63]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -12]) == True", "def check(monotonic):\n\tassert monotonic([9, 4, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([2, 15, 2, 15]) == False", "def check(monotonic):\n\tassert monotonic([6, 2, 4, 4]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 2, 4]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 1, 3, 63]) == False", "def check(monotonic):\n\tassert monotonic([2, 2, 8, 12]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 2, 1]) == False", "def check(monotonic):\n\tassert monotonic([4, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 6, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([6, 5, 7, 7, 6, 55]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 4, 14]) == True", "def check(monotonic):\n\tassert monotonic([5, 4, 8, 5]) == False", "def check(monotonic):\n\tassert monotonic([4, 5, 1, -7]) == False", "def check(monotonic):\n\tassert monotonic([3, 3, 6, 8]) == True", "def check(monotonic):\n\tassert monotonic([9, 5, 5, -14]) == True", "def check(monotonic):\n\tassert monotonic([2, 1, 4, 4, 5, 55]) == False", "def check(monotonic):\n\tassert monotonic([4, 1, 0, -10]) == True", "def check(monotonic):\n\tassert monotonic([5, 5, 7, 21]) == True", "def check(monotonic):\n\tassert monotonic([1, 1, 3, 18]) == True", "def check(monotonic):\n\tassert monotonic([1, 6, 4, -7]) == False", "def check(monotonic):\n\tassert monotonic([4, 3, 4, 17]) == False", "def check(monotonic):\n\tassert monotonic([7, 2, 1, -6]) == True", "def check(monotonic):\n\tassert monotonic([1, 2, 3, 2, 5, 60]) == False", "def check(monotonic):\n\tassert monotonic([5, 2, 5, 2]) == False", "def check(monotonic):\n\tassert monotonic([2, 3, 8, 8]) == True", "def check(monotonic):\n\tassert monotonic([5, 2, 3, 4]) == False", "def check(monotonic):\n\tassert monotonic([8, 3, 2, -15]) == True", "def check(monotonic):\n\tassert monotonic([3, 4, 3, 15]) == False", "def check(monotonic):\n\tassert monotonic([2, 1, 5, 3]) == False", "def check(monotonic):\n\tassert monotonic([2, 4, 3, 19]) == False"], "test_case_list": ["assert monotonic([6, 2, 5, 7, 4, 65]) == False", "assert monotonic([3, 3, 7, 4, 3, 64]) == False", "assert monotonic([3, 1, 5, 8]) == False", "assert monotonic([4, 3, 5, 7, 1, 62]) == False", "assert monotonic([4, 4, 1, 1]) == True", "assert monotonic([3, 2, 7, 6]) == False", "assert monotonic([2, 7, 7, 15]) == True", "assert monotonic([4, 7, 7, 1, 1, 57]) == False", "assert monotonic([1, 1, 8, 13]) == True", "assert monotonic([5, 5, 8, 17]) == True", "assert monotonic([2, 22, 8, 7]) == False", "assert monotonic([2, 23, 5, 6]) == False", "assert monotonic([3, 2, 2, 18]) == False", "assert monotonic([2, 2, 2, 6]) == True", "assert monotonic([7, 5, 3, 2]) == True", "assert monotonic([7, 5, 2, -5]) == True", "assert monotonic([6, 19, 9, 12]) == False", "assert monotonic([1, 2, 4, 10]) == True", "assert monotonic([5, 4, 6, 18]) == False", "assert monotonic([6, 1, 7, 3, 4, 56]) == False", "assert monotonic([6, 3, 7, 3, 8, 61]) == False", "assert monotonic([2, 17, 7, 8]) == False", "assert monotonic([5, 1, 4, 5, 3, 59]) == False", "assert monotonic([3, 5, 5, 5, 3, 65]) == False", "assert monotonic([6, 19, 9, 7]) == False", "assert monotonic([1, 16, 9, 7]) == False", "assert monotonic([7, 6, 2, -14]) == True", "assert monotonic([5, 6, 4, 16]) == False", "assert monotonic([1, 6, 5, -10]) == False", "assert monotonic([1, 22, 4, 10]) == False", "assert monotonic([1, 6, 8, 6, 3, 62]) == False", "assert monotonic([1, 5, 1, 6, 4, 62]) == False", "assert monotonic([1, 1, 7, 2, 4, 56]) == False", "assert monotonic([2, 1, 5, 12]) == False", "assert monotonic([1, 3, 1, 4]) == False", "assert monotonic([4, 19, 8, 7]) == False", "assert monotonic([3, 5, 8, 5, 5, 56]) == False", "assert monotonic([1, 3, 6, 25]) == True", "assert monotonic([2, 3, 1, 7]) == False", "assert monotonic([8, 6, 2, 5]) == False", "assert monotonic([6, 3, 6, 2, 8, 62]) == False", "assert monotonic([6, 4, 6, 4]) == False", "assert monotonic([3, 6, 1, 3]) == False", "assert monotonic([4, 2, 5, 7, 6, 62]) == False", "assert monotonic([3, 7, 1, 20]) == False", "assert monotonic([3, 1, 5, 17]) == False", "assert monotonic([5, 5, 7, 5, 5, 57]) == False", "assert monotonic([1, 20, 4, 10]) == False", "assert monotonic([6, 16, 4, 14]) == False", "assert monotonic([3, 17, 2, 14]) == False", "assert monotonic([4, 5, 7, 2, 8, 63]) == False", "assert monotonic([1, 2, 4, 20]) == True", "assert monotonic([3, 3, 3, -5]) == True", "assert monotonic([4, 2, 3, 4]) == False", "assert monotonic([3, 5, 4, 2, 1, 60]) == False", "assert monotonic([6, 4, 7, 24]) == False", "assert monotonic([6, 3, 1, 1, 2, 61]) == False", "assert monotonic([1, 4, 3, -8]) == False", "assert monotonic([2, 6, 3, 5, 10, 63]) == False", "assert monotonic([4, 6, 3, 3, 10, 57]) == False", "assert monotonic([5, 4, 9, 14]) == False", "assert monotonic([1, 3, 5, 17]) == True", "assert monotonic([6, 7, 1, 8]) == False", "assert monotonic([9, 2, 5, -5]) == False", "assert monotonic([3, 2, 5, 1]) == False", "assert monotonic([9, 9, 9, 9]) == True", "assert monotonic([1, 2, 3, 4, 5, 60]) == True", "assert monotonic([6, 2, 5, 6, 3, 62]) == False", "assert monotonic([5, 1, 3, -9]) == False", "assert monotonic([1, 5, 7, 6]) == False", "assert monotonic([1, 24, 9, 12]) == False", "assert monotonic([2, 6, 7, 6, 6, 61]) == False", "assert monotonic([4, 1, 1, 0]) == True", "assert monotonic([2, 1, 3, 3, 3, 65]) == False", "assert monotonic([1, 2, 8, 5, 9, 55]) == False", "assert monotonic([2, 16, 2, 11]) == False", "assert monotonic([6, 16, 3, 15]) == False", "assert monotonic([1, 5, 2, 4, 2, 55]) == False", "assert monotonic([3, 1, 8, 7, 7, 65]) == False", "assert monotonic([2, 20, 2, 5]) == False", "assert monotonic([7, 2, 3, -10]) == False", "assert monotonic([4, 3, 5, 4, 8, 63]) == False", "assert monotonic([7, 2, 1, -12]) == True", "assert monotonic([9, 4, 1, -6]) == True", "assert monotonic([2, 15, 2, 15]) == False", "assert monotonic([6, 2, 4, 4]) == False", "assert monotonic([3, 3, 2, 4]) == False", "assert monotonic([2, 2, 8, 1, 3, 63]) == False", "assert monotonic([2, 2, 8, 12]) == True", "assert monotonic([3, 4, 2, 1]) == False", "assert monotonic([4, 4, 3, 15]) == False", "assert monotonic([2, 6, 5, 3]) == False", "assert monotonic([6, 5, 7, 7, 6, 55]) == False", "assert monotonic([2, 4, 4, 14]) == True", "assert monotonic([5, 4, 8, 5]) == False", "assert monotonic([4, 5, 1, -7]) == False", "assert monotonic([3, 3, 6, 8]) == True", "assert monotonic([9, 5, 5, -14]) == True", "assert monotonic([2, 1, 4, 4, 5, 55]) == False", "assert monotonic([4, 1, 0, -10]) == True", "assert monotonic([5, 5, 7, 21]) == True", "assert monotonic([1, 1, 3, 18]) == True", "assert monotonic([1, 6, 4, -7]) == False", "assert monotonic([4, 3, 4, 17]) == False", "assert monotonic([7, 2, 1, -6]) == True", "assert monotonic([1, 2, 3, 2, 5, 60]) == False", "assert monotonic([5, 2, 5, 2]) == False", "assert monotonic([2, 3, 8, 8]) == True", "assert monotonic([5, 2, 3, 4]) == False", "assert monotonic([8, 3, 2, -15]) == True", "assert monotonic([3, 4, 3, 15]) == False", "assert monotonic([2, 1, 5, 3]) == False", "assert monotonic([2, 4, 3, 19]) == False"], "nl": "Return True is list elements are monotonically increasing or decreasing.\n    ", "func": "def monotonic(l: list):", "examples": ">>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    ", "completions": ["from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.\n    Monotonically increasing means that each subsequent element is greater than or equal to the previous one.\n    Monotonically decreasing indicates that each subsequent element is less than or equal to the previous one.'''\n    \n    increasing = False\n    decreasing = False\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n            decreasing = True\n        if l[i] > l[i-1]:\n            increasing = True\n            decreasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Return True if list elements are monotonically increasing or decreasing.\n    Monotonically increasing means that each subsequent element is greater than or equal to the previous one.\n    Monotonically decreasing indicates that each subsequent element is less than or equal to the previous one.\n    '''\n\n    increasing = False\n    decreasing = False\n\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            increasing = True\n        elif l[i] < l[i-1]:\n            decreasing = True\n\n        if increasing and decreasing:\n            return False\n\n    if not increasing and not decreasing:\n        return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.\n    Monotonically increasing means that each subsequent element is greater than or equal to the previous one.\n    Monotonically decreasing indicates that each subsequent element is less than or equal to the previous one.'''\n    \n    if not l:  # Edge case: empty list is considered monotonically increasing\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Monotonically increasing means that each subsequent element is greater than or equal to the previous one.\n    For example, [1, 2, 4, 20] is a monotonically increasing list.\n    '''\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Monotonically increasing means that each subsequent element is greater than or equal to the previous one.\n    For example, [1, 2, 4, 20] is a monotonically increasing list.\n    \n    Args:\n        l (list): Input list to check for monotonicity\n    \n    Returns:\n        bool: True if the list is monotonically increasing, False otherwise\n    '''\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''\n    Monotonically increasing means that each subsequent element is greater than or equal to the previous one.\n    For example, [1, 2, 4, 20] is a monotonically increasing list.\n    '''\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.'''\n    \n    def is_sorted(lst):\n        return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) or all(lst[i] >= lst[i + 1] for i in range(len(lst) - 1))\n    \n    return is_sorted(l)\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.'''\n    \n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.'''\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n", "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.\n    Monotonically increasing means that each subsequent element is greater than or equal to the previous one.\n    Monotonically decreasing indicates that each subsequent element is less than or equal to the previous one.'''\n    \n    return l == sorted(l) or l == sorted(l, reverse=True)\n"], "plans": ["requirement pool:\n- Efficiently determine if a list is monotonically increasing or decreasing\n- Ensure accurate evaluation of all list elements\n- Provide clear and concise output for user understanding\nWe will design a simple static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing/decreasing'\n    Explanation: Monotonically increasing means that each subsequent element is greater than or equal to the previous one. Monotonically decreasing indicates that each subsequent element is less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is monotonically increasing or decreasing by comparing each element with its previous element.\n\n    For monotonically increasing:\n    - Initialize a variable to track if the list is increasing.\n    - Iterate through the list and check if each element is greater than or equal to the previous element.\n    - If any element is smaller, return False.\n    - If the loop completes without returning False, return True.\n\n    For monotonically decreasing:\n    - Initialize a variable to track if the list is decreasing.\n    - Iterate through the list and check if each element is less than or equal to the previous element.\n    - If any element is larger, return False.\n    - If the loop completes without returning False, return True.\n\n# [edge case] \n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The list is monotonically increasing as each subsequent element is greater than or equal to the previous one.\n    \n    monotonic([1, 20, 4, 10]) = False\n    Explanation: The list is not monotonically increasing or decreasing as some elements do not follow the required order.\n    \n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The list is monotonically decreasing as each subsequent element is less than or equal to the previous one.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios for checking monotonically increasing or decreasing lists.\n", "requirement pool:\n- Efficiently determine if a list is monotonically increasing or decreasing\n- Handle edge cases where elements are equal\n- Optimize the algorithm for large lists\n- Ensure compatibility with different data types\n- Implement unit tests for validation\nWe will design a static Python function using basic logic to check if a list is monotonically increasing or decreasing without the need for any external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing/decreasing'\n    Explanation: Monotonically increasing means that each subsequent element is greater than or equal to the previous one. Monotonically decreasing indicates that each subsequent element is less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code logic, we can iterate through the list and check if it is monotonically increasing or decreasing by comparing each element with the previous one.\n\n    1. Initialize two flags for increasing and decreasing as False.\n    2. Iterate through the list starting from the second element.\n    3. Check if the current element is greater than or equal to the previous element for increasing flag.\n    4. Check if the current element is less than or equal to the previous element for decreasing flag.\n    5. If any violation is found, return False.\n    6. If the loop completes without any violation, return True.\n\n# [edge case] \n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The list is monotonically increasing as each subsequent element is greater than or equal to the previous one.\n    \n    monotonic([1, 20, 4, 10]) = False\n    Explanation: The list is not monotonically increasing or decreasing as there is a decrease from 20 to 4.\n    \n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The list is monotonically decreasing as each subsequent element is less than or equal to the previous one.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios of monotonically increasing or decreasing lists.\n", "requirement pool:\n- Implement efficient monotonic check algorithm\n- Ensure correct handling of edge cases\n- Optimize for performance without sacrificing accuracy\nWe will design a simple static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing/decreasing'\n    Explanation: Monotonically increasing means that each subsequent element is greater than or equal to the previous one. Monotonically decreasing indicates that each subsequent element is less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the list is monotonically increasing or decreasing by comparing each element with its previous element.\n\n    For monotonically increasing:\n    - Initialize a variable to track if the list is increasing (set to True initially)\n    - Iterate through the list starting from the second element\n    - Check if the current element is less than the previous element, if so, set the variable to False\n    - Return True if the variable is still True after iterating through all elements, else return False\n\n    For monotonically decreasing:\n    - Initialize a variable to track if the list is decreasing (set to True initially)\n    - Iterate through the list starting from the second element\n    - Check if the current element is greater than the previous element, if so, set the variable to False\n    - Return True if the variable is still True after iterating through all elements, else return False\n\n# [edge case] \n    monotonic([]) = True\n    Explanation: An empty list is considered monotonically increasing.\n    monotonic([1, 1, 1, 1]) = True\n    Explanation: All elements are equal, hence considered monotonically increasing.\n    monotonic([5, 4, 3, 2]) = True\n    Explanation: The list is monotonically decreasing.\n\n# [extra code for edge case]\n    No extra code needed to handle the edge cases. The logic covers all scenarios appropriately.\n", "requirement pool:\n- Implement a function to determine if a list is monotonically increasing\n- Ensure the function handles both increasing and decreasing lists\n- Optimize the algorithm for efficiency and scalability\nWe will design a simple static Python function using basic logic to determine if a list is monotonically increasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'Monotonically increasing'\n    Explanation: It means that each subsequent element in the list is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic to implement the code should involve iterating through the list and checking if each element is greater than or equal to the previous one.\n\n# [edge case] \n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The list is monotonically increasing as each subsequent element is greater than or equal to the previous one.\n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The list is monotonically increasing as each subsequent element is greater than or equal to the previous one.\n    monotonic([1, 20, 4, 10]) = False\n    Explanation: The list is not monotonically increasing as 20 is not greater than or equal to 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic should be sufficient to determine if a list is monotonically increasing.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in functions in Python to implement the monotonic function without the need for any external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'Monotonically increasing'\n    Explanation: It means that each subsequent element in the list is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using built-in functions in Python, we can implement the monotonic function as follows:\n```python\ndef monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n```\n\n# [edge case] \n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The list is monotonically increasing as each element is greater than or equal to the previous one.\n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The list is monotonically increasing as each element is greater than or equal to the previous one.\n    monotonic([1, 20, 4, 10]) = False\n    Explanation: The list is not monotonically increasing as 20 is greater than 4.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.\n", "requirement pool:\n- Implement a function to check if a list is monotonically increasing\n- Ensure the function handles both increasing and decreasing lists\n- Optimize the algorithm for efficient performance\nWe will use a simple approach to iterate through the input list and compare each element with the previous one to determine if the list is monotonically increasing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'Monotonically increasing'\n    Explanation: It means that each subsequent element in the list is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will iterate through the input list and compare each element with the previous one. If at any point the current element is less than the previous one, we return False. If we reach the end of the list without finding any violations, we return True.\n\n# [edge case] \n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The list is monotonically increasing as each subsequent element is greater than or equal to the previous one.\n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The list is monotonically increasing as each subsequent element is greater than or equal to the previous one.\n    monotonic([1, 20, 4, 10]) = False\n    Explanation: The list is not monotonically increasing as 20 is greater than 4.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios for determining if a list is monotonically increasing.\n", "requirement analysis:\nThe function needs to efficiently determine if a list is monotonically increasing or decreasing. It should handle both cases accurately and provide clear results. Performance optimization is crucial, especially for large lists.\nrequirement pool:\n- Implement efficient monotonicity check algorithm\n- Ensure accurate evaluation for all types of lists\n- Optimize performance for large datasets\nWe will design a static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing without the need for any external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing/decreasing'\n    Explanation: It means that the elements in the list are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using basic logic to check if a list is monotonically increasing or decreasing, we can implement the following logic:\n    - Check if the list is sorted in ascending order, return True if it is.\n    - Check if the list is sorted in descending order, return True if it is.\n    - Otherwise, return False.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is monotonically increasing as each subsequent element is greater than or equal to the previous one.\n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is monotonically decreasing as each subsequent element is less than or equal to the previous one.\n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is not monotonically increasing or decreasing as there is a decrease followed by an increase.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios of monotonically increasing or decreasing lists.\n", "requirement pool:\n- Implement efficient monotonic function for list evaluation\n- Ensure accurate determination of list monotonicity\n- Optimize performance for large datasets\nWe will design a simple static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n## Prompt 3:\n\n# [core concept]\n    'monotonically increasing/decreasing'\n    Explanation: Monotonically increasing means that each subsequent element in the list is greater than or equal to the previous one. Monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code logic, we can iterate through the list and check if each element is greater than or equal to the previous one for monotonically increasing, or less than or equal for monotonically decreasing.\n\n```python\ndef monotonic(l: list) -> bool:\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n```\n\n# [edge case] \n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The list elements are monotonically increasing.\n    \n    monotonic([1, 20, 4, 10]) = False\n    Explanation: The list elements are not monotonically increasing or decreasing.\n    \n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The list elements are monotonically decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers both monotonically increasing and decreasing cases.\n", "requirement pool:\n- Implement efficient monotonic function\n- Ensure correctness of monotonic evaluation\n- Optimize performance for large datasets\nWe will design a simple static Python function using basic logic to efficiently check if a list is monotonically increasing or decreasing.\nPlease read and understand the following inteperation before coding\n## Prompt 3:\n\n# [core concept]\n    'monotonically increasing/decreasing'\n    Explanation: In the requirement, monotonically increasing means that each subsequent element in the list is greater than or equal to the previous one, while monotonically decreasing means that each subsequent element is less than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will iterate through the list and check if it is monotonically increasing or decreasing based on the definition provided in the requirement.\n\n```python\ndef monotonic(l: list) -> bool:\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n```\n\n# [edge case] \n    monotonic([1, 2, 4, 20]) = True\n    Explanation: The list elements are monotonically increasing.\n    \n    monotonic([1, 20, 4, 10]) = False\n    Explanation: The list elements are not monotonically increasing or decreasing.\n    \n    monotonic([4, 1, 0, -10]) = True\n    Explanation: The list elements are monotonically decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers both increasing and decreasing scenarios.\n", "requirement pool:\n- Implement a function to check monotonicity in a list\n- Ensure the function handles edge cases effectively\n- Optimize the algorithm for efficient performance\nWe will use the built-in functions in Python to implement the monotonic function without defining a class.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'monotonically increasing/decreasing'\n    Explanation: It refers to the trend where elements in the list are either consistently increasing or consistently decreasing.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in functions, the logic can be implemented as follows:\n    - Check if the list is sorted in ascending order and return True if it is.\n    - Check if the list is sorted in descending order and return True if it is.\n    - Otherwise, return False.\n\n# [edge case] \n    monotonic([1, 2, 3, 3]) = True\n    Explanation: The list is monotonically increasing as each subsequent element is greater than or equal to the previous one.\n    monotonic([3, 2, 1, 1]) = True\n    Explanation: The list is monotonically decreasing as each subsequent element is less than or equal to the previous one.\n    monotonic([1, 2, 1, 3]) = False\n    Explanation: The list is neither monotonically increasing nor decreasing.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios of monotonically increasing or decreasing lists.\n"], "scores": [0.2389, 0.9912, 1.0, 0.8938, 0.8938, 0.8938, 1.0, 1.0, 1.0, 1.0], "pass_results": [false, false, true, false, false, false, true, true, true, true], "pass_test_cases_num": [27, 112, 113, 101, 101, 101, 113, 113, 113, 113], "completion": "from typing import List\n## main.py\n\ndef monotonic(l: list) -> bool:\n    '''Return True if list elements are monotonically increasing or decreasing.\n    Monotonically increasing means that each subsequent element is greater than or equal to the previous one.\n    Monotonically decreasing indicates that each subsequent element is less than or equal to the previous one.'''\n    \n    return l == sorted(l) or l == sorted(l, reverse=True)\n", "passed": true, "pass": true, "pass_num": 5, "round": 794, "repair_prompt": ["def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means that each subsequent element is greater than or equal to the previous one. Monotonically decreasing indicates that each subsequent element is less than or equal to the previous one.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "def monotonic(l: list):\t\n'''Monotonically increasing means that each subsequent element is greater than or equal to the previous one. For example, [1, 2, 4, 20] is a monotonically increasing list.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "def monotonic(l: list):\n'''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means each subsequent element is greater than or equal to the previous one.'''\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue"], "mutate_method": "expand_one2two", "parent_index": 638}
