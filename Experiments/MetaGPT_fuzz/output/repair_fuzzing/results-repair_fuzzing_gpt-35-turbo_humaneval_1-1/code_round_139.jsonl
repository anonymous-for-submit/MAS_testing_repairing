{"task_id": "HumanEval/83", "prompt": "def starts_one_ends(n):\t\n'''Given a positive integer n, return the count of the numbers of n-digit positive integers. These integers should start or end with 1.\n'''", "entry_point": "starts_one_ends", "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "test": ["def check(starts_one_ends):\n\tassert starts_one_ends(12) == 180000000000", "def check(starts_one_ends):\n\tassert starts_one_ends(2) == 18", "def check(starts_one_ends):\n\tassert starts_one_ends(14) == 18000000000000", "def check(starts_one_ends):\n\tassert starts_one_ends(3) == 180", "def check(starts_one_ends):\n\tassert starts_one_ends(19) == 1800000000000000000", "def check(starts_one_ends):\n\tassert starts_one_ends(1) == 1", "def check(starts_one_ends):\n\tassert starts_one_ends(8) == 18000000", "def check(starts_one_ends):\n\tassert starts_one_ends(13) == 1800000000000", "def check(starts_one_ends):\n\tassert starts_one_ends(16) == 1800000000000000", "def check(starts_one_ends):\n\tassert starts_one_ends(11) == 18000000000", "def check(starts_one_ends):\n\tassert starts_one_ends(17) == 18000000000000000", "def check(starts_one_ends):\n\tassert starts_one_ends(4) == 1800", "def check(starts_one_ends):\n\tassert starts_one_ends(20) == 18000000000000000000", "def check(starts_one_ends):\n\tassert starts_one_ends(9) == 180000000", "def check(starts_one_ends):\n\tassert starts_one_ends(6) == 180000", "def check(starts_one_ends):\n\tassert starts_one_ends(15) == 180000000000000", "def check(starts_one_ends):\n\tassert starts_one_ends(5) == 18000", "def check(starts_one_ends):\n\tassert starts_one_ends(18) == 180000000000000000", "def check(starts_one_ends):\n\tassert starts_one_ends(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.", "def check(starts_one_ends):\n\tassert starts_one_ends(7) == 1800000", "def check(starts_one_ends):\n\tassert starts_one_ends(10) == 1800000000"], "test_case_list": ["assert starts_one_ends(12) == 180000000000", "assert starts_one_ends(2) == 18", "assert starts_one_ends(14) == 18000000000000", "assert starts_one_ends(3) == 180", "assert starts_one_ends(19) == 1800000000000000000", "assert starts_one_ends(1) == 1", "assert starts_one_ends(8) == 18000000", "assert starts_one_ends(13) == 1800000000000", "assert starts_one_ends(16) == 1800000000000000", "assert starts_one_ends(11) == 18000000000", "assert starts_one_ends(17) == 18000000000000000", "assert starts_one_ends(4) == 1800", "assert starts_one_ends(20) == 18000000000000000000", "assert starts_one_ends(9) == 180000000", "assert starts_one_ends(6) == 180000", "assert starts_one_ends(15) == 180000000000000", "assert starts_one_ends(5) == 18000", "assert starts_one_ends(18) == 180000000000000000", "assert starts_one_ends(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.", "assert starts_one_ends(7) == 1800000", "assert starts_one_ends(10) == 1800000000"], "nl": "\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    ", "func": "def starts_one_ends(n):", "examples": "", "completions": ["from typing import List\ndef starts_one_ends(n: int) -> int:\n    '''\n    Given a positive integer n, return the count of the numbers of n-digit positive integers. These integers should start or end with 1.\n    '''\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n", "from typing import List\n## main.py\n\ndef starts_one_ends(n: int) -> int:\n    '''\n    Given a positive integer n, return the count of the numbers of n-digit positive integers. These integers should start or end with 1.\n    '''\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n", "from typing import List\ndef starts_one_ends(n: int) -> int:\n    '''\n    Given a positive integer n, return the count of the numbers of n-digit positive integers. These integers should start or end with 1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        count = 10  # Numbers that start with 1 (10-19)\n        for i in range(2, n):\n            count *= 10  # Numbers in the middle can be any digit (0-9)\n        count += 10**(n-1)  # Numbers that end with 1 (01, 11, 21, ..., 91)\n        return count\n", "from typing import List\n## main.py\n\ndef starts_one_ends(n: int) -> int:\n    '''\n    Given a positive integer n, return the count of the numbers of n-digit positive integers that have 1 as the first or last digit.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 18\n    \n    count = 0\n    \n    if n > 2:\n        count += 9 * 10 ** (n - 2)  # Count of (n-1)-digit numbers with 1 as first or last digit\n        count *= 9  # Extend the count for n-digit numbers\n        count -= 9  # Subtract cases where all digits are 1\n    \n    return count\n", "from typing import List\ndef starts_one_ends(n: int) -> int:\n    '''\n    Given a positive integer n, return the count of the numbers of n-digit positive integers that have 1 as the first or last digit.\n    '''\n    count_first_digit = 9 * 10**(n-1)\n    count_last_digit = 10**(n-1)\n    \n    return count_first_digit + count_last_digit\n", "from typing import List\n## main.py\n\ndef starts_one_ends(n: int) -> int:\n    '''\n    Given a positive integer n, return the count of the numbers of n-digit positive integers that have 1 as the first or last digit.\n    '''\n    \n    if n == 1:\n        return 1\n    \n    count_first_digit = 9 * 10**(n-1)\n    count_last_digit = 10**(n-1)\n    overlap = (n-1) * 9 * 10**(n-2)\n    \n    total_count = count_first_digit + count_last_digit - overlap\n    \n    return total_count\n", "from typing import List\n## main.py\n\ndef starts_one_ends(n: int) -> int:\n    '''Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.'''\n    \n    if n == 1:\n        return 1\n    \n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    \n    return count\n", "from typing import List\n## main.py\n\ndef starts_one_ends(n: int) -> int:\n    '''Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.'''\n    \n    if n == 1:\n        return 1\n    \n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    \n    return count\n", "from typing import List\n## main.py\n\ndef starts_one_ends(n: int) -> int:\n    '''\n    Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        count_start = 10  # Numbers that start with 1 (10-19)\n        count_end = 10  # Numbers that end with 1 (01, 11, 21, ..., 91)\n        \n        for i in range(2, n):\n            count_start *= 10  # Each additional digit can be any number from 0 to 9\n            count_end *= 10  # Each additional digit can be any number from 0 to 9\n        \n        return count_start + count_end\n", "from typing import List\n## main.py\n\ndef starts_one_ends(n: int) -> int:\n    '''\n    Given a positive integer n, return the count of the numbers of n-digit positive integers. These integers should start or end with 1.\n    '''\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n"], "plans": ["requirement pool:\n- Efficiently calculate the count of n-digit positive integers starting or ending with 1\n- Ensure accurate results for all positive integers n\nWe will design a simple static Python function using appropriate open-source libraries to efficiently count the number of n-digit positive integers starting or ending with 1.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': Refers to a whole number greater than zero.\n    'n-digit positive integers': Integers with exactly n digits.\n    'start or end with 1': Integers that have 1 as the first or last digit.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic to implement the code should involve generating all n-digit positive integers and checking if they start or end with 1.\n\n# [edge case] \n    starts_one_ends(1) = 1\n    Explanation: Only one 1-digit positive integer (1) starts or ends with 1.\n    starts_one_ends(2) = 20\n    Explanation: There are 10 two-digit positive integers starting with 1 and 10 two-digit positive integers ending with 1.\n    starts_one_ends(3) = 300\n    Explanation: There are 100 three-digit positive integers starting with 1, 100 three-digit positive integers ending with 1, and 100 three-digit positive integers starting and ending with 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to generate n-digit positive integers starting or ending with 1 should cover all scenarios.\n", "requirement analysis:\nThe main goal is to efficiently count n-digit positive integers that start or end with 1. The algorithm should handle large values of n effectively while ensuring accuracy in the results. Optimization is crucial to provide a fast and reliable solution.\nrequirement pool:\n- Implement efficient algorithm to count n-digit numbers starting or ending with 1\n- Optimize performance for large values of n\n- Ensure accurate counting for all input cases\nWe will design a static Python function using appropriate open-source libraries to efficiently count n-digit positive integers that start or end with 1.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': All integers in the list are greater than 0.\n    'n-digit positive integers': Positive integers with n digits.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    The logic to implement the code should involve generating all n-digit positive integers and checking if they start or end with 1, then counting them.\n\n# [edge case] \n    starts_one_ends(1) = 1\n    Explanation: Only one 1-digit positive integer (1) starts or ends with 1.\n    starts_one_ends(2) = 20\n    Explanation: There are 10 two-digit positive integers that start with 1 and 10 two-digit positive integers that end with 1.\n    starts_one_ends(3) = 300\n    Explanation: There are 100 three-digit positive integers that start with 1, 100 three-digit positive integers that end with 1, and 100 three-digit positive integers that start and end with 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to generate n-digit positive integers starting or ending with 1 should cover all cases.\n", "requirement analysis:\nThe function 'starts_one_ends' should efficiently calculate the count of n-digit positive integers starting or ending with 1. It should handle positive integers as input and return the correct count.\nrequirement pool:\n- Implement the logic to count n-digit positive integers starting or ending with 1\n- Handle edge cases such as 0 and negative integers\n- Optimize the function for performance\nWe will design a static Python function using basic logic and appropriate open-source libraries to efficiently calculate the count of n-digit positive integers starting or ending with 1.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': integers that are greater than zero\n    'n-digit positive integers': integers with n digits\n    'start or end with 1': integers that have 1 as the first or last digit\n    Explanation: The core concept involves counting the numbers of n-digit positive integers that start or end with 1.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is not provided, we need to design the logic to implement the code based on the requirement.\n\n# [edge case] \n    starts_one_ends(1) = 1\n    Explanation: For n=1, there is only one 1-digit positive integer that starts or ends with 1, which is 1.\n    starts_one_ends(2) = 20\n    Explanation: For n=2, there are 10 numbers that start with 1 (10-19) and 10 numbers that end with 1 (01, 11, 21, ..., 91), totaling 20.\n    starts_one_ends(3) = 300\n    Explanation: For n=3, there are 100 numbers that start with 1 (100-199), 100 numbers that end with 1 (101, 111, ..., 991), and 100 numbers that have 1 in the middle (110, 111, ..., 190), totaling 300.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to count the numbers of n-digit positive integers starting or ending with 1 can cover all scenarios.\n", "requirement pool:\n- Efficiently count n-digit numbers with 1 as first or last digit\n- Handle large n values with optimized performance\n- Ensure accuracy in counting for all n values\nWe will design a simple static Python function using basic arithmetic operations to efficiently count n-digit positive integers with 1 as the first or last digit.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'positive integer': Refers to a whole number greater than zero.\n    'n-digit positive integers': Numbers with exactly n digits.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code logic:\n    - Initialize a counter variable to keep track of the count.\n    - For each n-digit number, check if it starts or ends with 1.\n    - Increment the counter if the condition is met.\n    - Return the final count.\n\n# [edge case] \n    starts_one_ends(1) = 1\n    Explanation: For n=1, there is only one 1-digit number that starts or ends with 1, which is 1.\n    \n    starts_one_ends(2) = 18\n    Explanation: For n=2, there are 9 possibilities for the number to start with 1 and 9 possibilities for it to end with 1, totaling 18 numbers.\n    \n    starts_one_ends(3) = 271\n    Explanation: For n=3, there are 9 possibilities for the first digit to be 1, 10 possibilities for the middle digit, and 9 possibilities for the last digit to be 1, resulting in 9*10*9 = 810 numbers. However, we need to subtract the cases where all digits are 1 (9 cases) to get the correct count, which is 810 - 9 = 801.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 18\n        elif n == 3:\n            return 271\n        (other code)\n", "requirement pool:\n- Efficiently count n-digit numbers with 1 as first or last digit\n- Optimize algorithm performance for large n values\n- Ensure accurate counting for all valid positive integer inputs\nWe will design a simple static Python function using basic arithmetic operations to efficiently count n-digit positive integers with 1 as the first or last digit.\nPlease read and understand the following inteperation before coding\n## Answer 3:\n\n# [core concept]\n    'positive integer': Refers to a whole number greater than zero.\n    'n-digit positive integers': Refers to positive integers with exactly n digits.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code logic:\n    1. Calculate the count of n-digit positive integers with 1 as the first digit: 9 * 10^(n-1).\n    2. Calculate the count of n-digit positive integers with 1 as the last digit: 10^(n-1).\n    3. Return the sum of the above two counts.\n\n# [edge case] \n    starts_one_ends(1) = 1\n    Explanation: For n=1, there is only one 1-digit positive integer with 1 as the first or last digit, which is 1.\n    \n    starts_one_ends(2) = 18\n    Explanation: For n=2, there are 9 numbers with 1 as the first digit (10-19) and 9 numbers with 1 as the last digit (11, 21, ..., 91), totaling 18.\n    \n    starts_one_ends(3) = 271\n    Explanation: For n=3, there are 90 numbers with 1 as the first digit (100-199) and 181 numbers with 1 as the last digit (110, 120, ..., 910), totaling 271.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios for counting n-digit positive integers with 1 as the first or last digit.\n", "requirement pool:\n- Efficiently count n-digit positive integers with 1 as first or last digit\n- Handle large n values without performance issues\n- Ensure accuracy in counting for any given n\nWe will design a simple static Python function using basic arithmetic operations to efficiently count n-digit positive integers with 1 as the first or last digit.\nPlease read and understand the following inteperation before coding\n## Answer 3:\n\n# [core concept]\n    'positive integer': Refers to a whole number greater than zero.\n    'n-digit positive integers': Numbers with exactly n digits.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code logic:\n    1. Calculate the count of n-digit numbers with 1 as the first digit: 9 * 10^(n-1) (excluding 0 as the first digit).\n    2. Calculate the count of n-digit numbers with 1 as the last digit: 10^(n-1) (including 0 as the first digit).\n    3. Subtract the overlap (n-1) * 9 * 10^(n-2) (numbers with 1 as both first and last digit).\n    4. Return the total count.\n\n# [edge case] \n    starts_one_ends(1) = 1\n    Explanation: For n=1, only one-digit numbers can be considered, and there is only one number with 1 as the first or last digit, which is 1.\n    \n    starts_one_ends(2) = 18\n    Explanation: For n=2, there are 9 numbers with 1 as the first digit and 9 numbers with 1 as the last digit, but we need to exclude the overlap (11), so the total count is 18.\n    \n    starts_one_ends(3) = 271\n    Explanation: For n=3, there are 81 numbers with 1 as the first digit, 90 numbers with 1 as the last digit, and we need to exclude the overlap (101, 111, 121, ..., 191), so the total count is 271.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic covers all scenarios efficiently.\n", "requirement pool:\n- Efficiently count n-digit positive integers starting or ending with 1\n- Handle large positive integers with optimal performance\n- Ensure accuracy in counting for all positive integers\nWe will design a simple static Python function using basic arithmetic operations to efficiently count n-digit positive integers starting or ending with 1.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': All integers in the list are greater than 0.\n    'start or end with 1': Refers to numbers that have 1 as the first or last digit.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    starts_one_ends(1) = 1\n    Explanation: Only one-digit positive integers can start or end with 1.\n    starts_one_ends(10) = 19\n    Explanation: There are 19 two-digit positive integers that start or end with 1 (11-19, 21, 31, ..., 91).\n    starts_one_ends(100) = 19\n    Explanation: There are 19 three-digit positive integers that start or end with 1 (101-109, 110-119, ..., 191-199).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n == 1:\n            return 1\n        count = 0\n        for i in range(10**(n-1), 10**n):\n            if str(i)[0] == '1' or str(i)[-1] == '1':\n                count += 1\n        return count\n", "requirement pool:\n- Efficiently handle large n values\n- Accurately count n-digit positive integers starting or ending with 1\n- Optimize performance for quick results\nWe will design a simple static Python function using basic Python libraries to efficiently count the n-digit positive integers starting or ending with 1.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': All integers in the list are greater than 0.\n    'start or end with 1': Refers to numbers that have 1 as the first or last digit.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    starts_one_ends(1) = 1\n    Explanation: Only one-digit positive integers can start or end with 1.\n    starts_one_ends(10) = 19\n    Explanation: There are 19 two-digit positive integers that start or end with 1 (11-19, 21, 31, ..., 91).\n    starts_one_ends(100) = 181\n    Explanation: There are 181 three-digit positive integers that start or end with 1 (101-199, 110-119, ..., 191-199).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n == 1:\n            return 1\n        count = 0\n        for i in range(10**(n-1), 10**n):\n            if str(i)[0] == '1' or str(i)[-1] == '1':\n                count += 1\n        return count\n", "requirement pool:\n- Handle positive integer n efficiently\n- Optimize algorithm for better performance\n- Ensure accurate counting for all n-digit numbers\nWe will design a simple static Python function using basic logic to efficiently count n-digit positive integers starting or ending with 1.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': All integers in the list are greater than 0.\n    'n-digit positive integers': Integers with n digits.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic to implement the code should involve:\n    - Counting the number of n-digit positive integers that start with 1\n    - Counting the number of n-digit positive integers that end with 1\n    - Returning the total count of such numbers\n\n# [edge case] \n    starts_one_ends(1) = 1\n    Explanation: For n=1, the only 1-digit positive integer that starts or ends with 1 is 1.\n    starts_one_ends(2) = 20\n    Explanation: For n=2, there are 10 numbers that start with 1 (10-19) and 10 numbers that end with 1 (01, 11, 21, ..., 91).\n    starts_one_ends(3) = 100\n    Explanation: For n=3, there are 100 numbers that start or end with 1 (e.g., 101, 110, 111, ..., 191, ..., 911).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios for counting n-digit positive integers starting or ending with 1.\n", "requirement pool:\n- Efficiently calculate the count of n-digit positive integers starting or ending with 1\n- Ensure the function handles large n values without performance issues\n- Implement clear error handling for invalid inputs\nWe will design a simple static Python function using appropriate open-source libraries to efficiently calculate the count of n-digit positive integers starting or ending with 1.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': All integers are greater than 0.\n    'start or end with 1': The n-digit positive integers should either start or end with the digit 1.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    starts_one_ends(1) = 1\n    Explanation: For n=1, there is only one 1-digit positive integer that starts or ends with 1, which is 1.\n    starts_one_ends(2) = 20\n    Explanation: For n=2, there are 10 numbers that start with 1 (10-19) and 10 numbers that end with 1 (01, 11, 21, ..., 91), totaling 20 numbers.\n    starts_one_ends(3) = 300\n    Explanation: For n=3, there are 100 numbers that start with 1 (100-199), 100 numbers that end with 1 (101, 111, ..., 991), and 100 numbers that have 1 in the middle (110, 111, ..., 190), totaling 300 numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to count the numbers starting or ending with 1 covers all scenarios for positive integers.\n"], "scores": [0.381, 0.381, 0.0476, 0.0952, 0.0, 0.0476, 0.381, 0.381, 0.0476, 0.381], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [8, 8, 1, 2, 0, 1, 8, 8, 1, 8], "completion": "from typing import List\n## main.py\n\ndef starts_one_ends(n: int) -> int:\n    '''\n    Given a positive integer n, return the count of the numbers of n-digit positive integers. These integers should start or end with 1.\n    '''\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n", "passed": false, "pass": false, "pass_num": 0, "round": 139, "repair_prompt": ["def starts_one_ends(n):\t\n'''Given a positive integer n, return the count of the numbers of n-digit positive integers. These integers should start or end with 1.\n'''", "def starts_one_ends(n):\t\n'''Given a positive integer n, return the count of the numbers of n-digit positive integers that have 1 as the first or last digit.\n'''    \n\n# Test cases\nprint(starts_one_ends(1)) # 1\nprint(starts_one_ends(2)) # 18\nprint(starts_one_ends(3)) # 271", "def starts_one_ends(n):\t\n'''Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1.\n'''"], "mutate_method": "expand_one2two", "parent_index": 185}
