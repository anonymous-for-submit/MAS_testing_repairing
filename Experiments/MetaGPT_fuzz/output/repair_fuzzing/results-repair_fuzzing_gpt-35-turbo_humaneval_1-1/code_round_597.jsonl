{"task_id": "HumanEval/160", "prompt": "def do_algebra(operator, operand):\t\n'''Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebric expression. Then, return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "entry_point": "do_algebra", "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "test": ["def check(do_algebra):\n\tassert do_algebra(['**', '//', '-'], [5, 6, 6, 1]) == 2603", "def check(do_algebra):\n\tassert do_algebra(['**', '-', '-'], [7, 1, 4, 9]) == -6", "def check(do_algebra):\n\tassert do_algebra(['+', '**', '*'], [6, 2, 1, 1]) == 8", "def check(do_algebra):\n\tassert do_algebra(['+', '+', '+'], [1, 4, 9, 9]) == 23", "def check(do_algebra):\n\tassert do_algebra(['//', '-', '-'], [3, 3, 3, 6]) == -8", "def check(do_algebra):\n\tassert do_algebra(['-', '*', '-'], [1, 1, 2, 3]) == -4", "def check(do_algebra):\n\tassert do_algebra(['//', '-', '*'], [7, 2, 7, 5]) == -32", "def check(do_algebra):\n\tassert do_algebra(['//', '*', '+'], [3, 5, 2, 3]) == 3", "def check(do_algebra):\n\tassert do_algebra(['//', '**', '+'], [3, 7, 9, 3]) == 3", "def check(do_algebra):\n\tassert do_algebra(['*', '//', '//'], [5, 2, 7, 9]) == 0", "def check(do_algebra):\n\tassert do_algebra(['-', '//', '-'], [6, 8, 1, 10]) == -12", "def check(do_algebra):\n\tassert do_algebra(['//', '**', '-'], [3, 7, 7, 1]) == -1", "def check(do_algebra):\n\tassert do_algebra(['**', '*', '+'], [2, 3, 4, 5]) == 37", "def check(do_algebra):\n\tassert do_algebra(['//', '//'], [8, 8, 7]) == 0", "def check(do_algebra):\n\tassert do_algebra(['//', '//', '*'], [2, 1, 7, 6]) == 0", "def check(do_algebra):\n\tassert do_algebra(['//', '//', '+'], [5, 2, 8, 2]) == 2", "def check(do_algebra):\n\tassert do_algebra(['*', '+', '+'], [3, 2, 6, 5]) == 17", "def check(do_algebra):\n\tassert do_algebra(['*', '**'], [5, 1, 6]) == 5", "def check(do_algebra):\n\tassert do_algebra(['-', '+', '**'], [5, 3, 5, 6]) == 15627", "def check(do_algebra):\n\tassert do_algebra(['-', '**', '//'], [1, 8, 3, 3]) == -169", "def check(do_algebra):\n\tassert do_algebra(['**', '+', '-'], [3, 8, 1, 2]) == 6560", "def check(do_algebra):\n\tassert do_algebra(['**', '//'], [12, 1, 6]) == 2", "def check(do_algebra):\n\tassert do_algebra(['*', '+', '-'], [2, 2, 9, 6]) == 7", "def check(do_algebra):\n\tassert do_algebra(['*', '+'], [2, 5, 7]) == 17", "def check(do_algebra):\n\tassert do_algebra(['**', '*'], [2, 3, 1]) == 8", "def check(do_algebra):\n\tassert do_algebra(['**', '//'], [7, 8, 8]) == 720600", "def check(do_algebra):\n\tassert do_algebra(['-', '+', '-'], [3, 5, 9, 7]) == 0", "def check(do_algebra):\n\tassert do_algebra(['**', '+'], [8, 4, 1]) == 4097", "def check(do_algebra):\n\tassert do_algebra(['**', '*', '+'], [5, 2, 1, 9]) == 34", "def check(do_algebra):\n\tassert do_algebra(['//', '-', '*'], [5, 4, 7, 1]) == -6", "def check(do_algebra):\n\tassert do_algebra(['-', '**'], [6, 2, 2]) == 2", "def check(do_algebra):\n\tassert do_algebra(['*', '+', '+'], [6, 3, 5, 5]) == 28", "def check(do_algebra):\n\tassert do_algebra(['-', '**'], [8, 2, 7]) == -120", "def check(do_algebra):\n\tassert do_algebra(['//', '**'], [4, 4, 4]) == 0", "def check(do_algebra):\n\tassert do_algebra(['-', '//'], [5, 3, 8]) == 5", "def check(do_algebra):\n\tassert do_algebra(['//', '**', '-'], [7, 2, 9, 3]) == -3", "def check(do_algebra):\n\tassert do_algebra(['**', '-', '//'], [6, 1, 6, 7]) == 6", "def check(do_algebra):\n\tassert do_algebra(['*', '//', '-'], [7, 1, 5, 10]) == -9", "def check(do_algebra):\n\tassert do_algebra(['//', '*', '**'], [7, 6, 2, 1]) == 2", "def check(do_algebra):\n\tassert do_algebra(['*', '*', '-'], [7, 8, 1, 9]) == 47", "def check(do_algebra):\n\tassert do_algebra(['**', '+'], [8, 2, 7]) == 71", "def check(do_algebra):\n\tassert do_algebra(['**', '//'], [9, 5, 9]) == 6561", "def check(do_algebra):\n\tassert do_algebra(['**', '-', '*'], [5, 1, 2, 3]) == -1", "def check(do_algebra):\n\tassert do_algebra(['*', '//', '+'], [7, 1, 8, 9]) == 9", "def check(do_algebra):\n\tassert do_algebra(['//', '//', '+'], [2, 5, 8, 8]) == 8", "def check(do_algebra):\n\tassert do_algebra(['*', '-', '+'], [6, 7, 4, 4]) == 42", "def check(do_algebra):\n\tassert do_algebra(['-', '**', '-'], [7, 4, 1, 8]) == -5", "def check(do_algebra):\n\tassert do_algebra(['+', '**', '+'], [4, 2, 7, 1]) == 133", "def check(do_algebra):\n\tassert do_algebra(['*', '+'], [9, 3, 8]) == 35", "def check(do_algebra):\n\tassert do_algebra(['*', '-', '//'], [4, 4, 2, 6]) == 16", "def check(do_algebra):\n\tassert do_algebra(['*', '//', '//'], [7, 7, 6, 6]) == 1", "def check(do_algebra):\n\tassert do_algebra(['**', '//', '//'], [1, 7, 6, 2]) == 0", "def check(do_algebra):\n\tassert do_algebra(['*', '-', '**'], [2, 7, 7, 1]) == 7", "def check(do_algebra):\n\tassert do_algebra(['+', '*', '**'], [6, 8, 1, 2]) == 14", "def check(do_algebra):\n\tassert do_algebra(['**', '//', '+'], [5, 8, 3, 3]) == 130211", "def check(do_algebra):\n\tassert do_algebra(['*', '-'], [6, 5, 7]) == 23", "def check(do_algebra):\n\tassert do_algebra(['*', '*', '+'], [1, 3, 2, 9]) == 15", "def check(do_algebra):\n\tassert do_algebra(['-', '*'], [3, 3, 6]) == -15", "def check(do_algebra):\n\tassert do_algebra(['//', '-', '**'], [4, 8, 2, 2]) == -4", "def check(do_algebra):\n\tassert do_algebra(['-', '**', '-'], [4, 5, 5, 9]) == -3130", "def check(do_algebra):\n\tassert do_algebra(['**', '+', '*'], [1, 5, 5, 1]) == 6", "def check(do_algebra):\n\tassert do_algebra(['-', '**'], [3, 5, 2]) == -22", "def check(do_algebra):\n\tassert do_algebra(['+', '*'], [7, 3, 6]) == 25", "def check(do_algebra):\n\tassert do_algebra(['*', '-', '**'], [5, 5, 2, 8]) == -231", "def check(do_algebra):\n\tassert do_algebra(['+', '-', '**'], [6, 8, 4, 10]) == -1048562", "def check(do_algebra):\n\tassert do_algebra(['+', '//', '*'], [7, 3, 7, 1]) == 7", "def check(do_algebra):\n\tassert do_algebra(['**', '-', '//'], [7, 8, 1, 10]) == 5764801", "def check(do_algebra):\n\tassert do_algebra(['//', '//', '+'], [1, 2, 8, 10]) == 10", "def check(do_algebra):\n\tassert do_algebra(['*', '*', '-'], [3, 4, 1, 4]) == 8", "def check(do_algebra):\n\tassert do_algebra(['//', '+', '**'], [7, 1, 5, 1]) == 12", "def check(do_algebra):\n\tassert do_algebra(['*', '**'], [3, 2, 8]) == 768", "def check(do_algebra):\n\tassert do_algebra(['*', '**'], [7, 3, 3]) == 189", "def check(do_algebra):\n\tassert do_algebra(['+', '**', '-'], [5, 2, 5, 9]) == 28", "def check(do_algebra):\n\tassert do_algebra(['-', '**', '*'], [5, 2, 7, 8]) == -1019", "def check(do_algebra):\n\tassert do_algebra(['-', '+'], [8, 4, 3]) == 7", "def check(do_algebra):\n\tassert do_algebra(['+', '-', '//'], [5, 4, 6, 2]) == 6", "def check(do_algebra):\n\tassert do_algebra(['//', '+', '//'], [5, 1, 9, 4]) == 7", "def check(do_algebra):\n\tassert do_algebra(['*', '**', '+'], [7, 1, 5, 1]) == 8", "def check(do_algebra):\n\tassert do_algebra(['*', '+', '//'], [4, 6, 7, 10]) == 24", "def check(do_algebra):\n\tassert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9", "def check(do_algebra):\n\tassert do_algebra(['**', '*'], [8, 2, 2]) == 128", "def check(do_algebra):\n\tassert do_algebra(['**', '-', '*'], [6, 4, 5, 1]) == 1291", "def check(do_algebra):\n\tassert do_algebra(['-', '+'], [3, 4, 4]) == 3", "def check(do_algebra):\n\tassert do_algebra(['+', '-'], [10, 3, 8]) == 5", "def check(do_algebra):\n\tassert do_algebra(['//', '*'], [7, 3, 4]) == 8", "def check(do_algebra):\n\tassert do_algebra(['//', '-'], [6, 1, 2]) == 4", "def check(do_algebra):\n\tassert do_algebra(['**', '+'], [10, 3, 5]) == 1005", "def check(do_algebra):\n\tassert do_algebra(['+', '-'], [3, 7, 6]) == 4", "def check(do_algebra):\n\tassert do_algebra(['**', '//'], [9, 5, 2]) == 29524", "def check(do_algebra):\n\tassert do_algebra(['*', '*'], [5, 2, 7]) == 70", "def check(do_algebra):\n\tassert do_algebra(['*', '+', '**'], [5, 5, 2, 9]) == 537", "def check(do_algebra):\n\tassert do_algebra(['-', '**'], [3, 3, 4]) == -78", "def check(do_algebra):\n\tassert do_algebra(['**', '*', '*'], [7, 2, 4, 7]) == 1372", "def check(do_algebra):\n\tassert do_algebra(['**', '*', '-'], [7, 6, 4, 6]) == 470590", "def check(do_algebra):\n\tassert do_algebra(['//', '//'], [2, 7, 1]) == 0", "def check(do_algebra):\n\tassert do_algebra(['+', '**', '+'], [6, 6, 4, 7]) == 1309", "def check(do_algebra):\n\tassert do_algebra(['**', '*'], [10, 2, 8]) == 800", "def check(do_algebra):\n\tassert do_algebra(['+', '//'], [3, 6, 4]) == 4", "def check(do_algebra):\n\tassert do_algebra(['**', '+', '-'], [1, 5, 1, 1]) == 1", "def check(do_algebra):\n\tassert do_algebra(['+', '-', '*'], [6, 8, 6, 1]) == 8", "def check(do_algebra):\n\tassert do_algebra(['+', '**'], [7, 3, 5]) == 250", "def check(do_algebra):\n\tassert do_algebra(['-', '//'], [7, 3, 2]) == 6", "def check(do_algebra):\n\tassert do_algebra(['//', '+', '*'], [2, 6, 4, 4]) == 16", "def check(do_algebra):\n\tassert do_algebra(['//', '//', '**'], [7, 1, 9, 1]) == 0", "def check(do_algebra):\n\tassert do_algebra(['+', '*', '//'], [6, 5, 1, 3]) == 7", "def check(do_algebra):\n\tassert do_algebra(['+', '**'], [3, 2, 4]) == 19", "def check(do_algebra):\n\tassert do_algebra(['-', '*', '-'], [2, 7, 3, 9]) == -28", "def check(do_algebra):\n\tassert do_algebra(['*', '*', '-'], [2, 1, 8, 4]) == 12", "def check(do_algebra):\n\tassert do_algebra(['+', '**'], [7, 6, 6]) == 46663", "def check(do_algebra):\n\tassert do_algebra(['**', '-', '-'], [1, 7, 7, 10]) == -16", "def check(do_algebra):\n\tassert do_algebra(['**', '//', '//'], [1, 7, 4, 8]) == 0", "def check(do_algebra):\n\tassert do_algebra(['-', '*', '*'], [7, 4, 7, 8]) == -217", "def check(do_algebra):\n\tassert do_algebra(['**', '-'], [3, 2, 9]) == 0", "def check(do_algebra):\n\tassert do_algebra(['-', '+', '**'], [5, 4, 2, 3]) == 9", "def check(do_algebra):\n\tassert do_algebra(['+', '+'], [4, 4, 1]) == 9", "def check(do_algebra):\n\tassert do_algebra(['-', '+'], [10, 7, 1]) == 4", "def check(do_algebra):\n\tassert do_algebra(['-', '+', '*'], [5, 5, 4, 8]) == 32", "def check(do_algebra):\n\tassert do_algebra(['//', '//', '*'], [4, 8, 9, 6]) == 0", "def check(do_algebra):\n\tassert do_algebra(['+', '**', '-'], [1, 1, 9, 4]) == -2", "def check(do_algebra):\n\tassert do_algebra(['+', '//', '+'], [5, 8, 2, 1]) == 10", "def check(do_algebra):\n\tassert do_algebra(['-', '//', '**'], [4, 5, 8, 3]) == 4", "def check(do_algebra):\n\tassert do_algebra(['+', '//', '*'], [5, 4, 8, 10]) == 5", "def check(do_algebra):\n\tassert do_algebra(['**', '-', '+'], [2, 1, 7, 9]) == 4", "def check(do_algebra):\n\tassert do_algebra(['//', '*'], [8, 4, 2]) == 4", "def check(do_algebra):\n\tassert do_algebra(['//', '-', '*'], [4, 3, 3, 1]) == -2", "def check(do_algebra):\n\tassert do_algebra(['-', '+', '+'], [1, 1, 9, 9]) == 18", "def check(do_algebra):\n\tassert do_algebra(['-', '+', '**'], [1, 4, 2, 7]) == 125", "def check(do_algebra):\n\tassert do_algebra(['*', '+'], [4, 8, 4]) == 36", "def check(do_algebra):\n\tassert do_algebra(['*', '//', '*'], [7, 3, 1, 10]) == 210"], "test_case_list": ["assert do_algebra(['**', '//', '-'], [5, 6, 6, 1]) == 2603", "assert do_algebra(['**', '-', '-'], [7, 1, 4, 9]) == -6", "assert do_algebra(['+', '**', '*'], [6, 2, 1, 1]) == 8", "assert do_algebra(['+', '+', '+'], [1, 4, 9, 9]) == 23", "assert do_algebra(['//', '-', '-'], [3, 3, 3, 6]) == -8", "assert do_algebra(['-', '*', '-'], [1, 1, 2, 3]) == -4", "assert do_algebra(['//', '-', '*'], [7, 2, 7, 5]) == -32", "assert do_algebra(['//', '*', '+'], [3, 5, 2, 3]) == 3", "assert do_algebra(['//', '**', '+'], [3, 7, 9, 3]) == 3", "assert do_algebra(['*', '//', '//'], [5, 2, 7, 9]) == 0", "assert do_algebra(['-', '//', '-'], [6, 8, 1, 10]) == -12", "assert do_algebra(['//', '**', '-'], [3, 7, 7, 1]) == -1", "assert do_algebra(['**', '*', '+'], [2, 3, 4, 5]) == 37", "assert do_algebra(['//', '//'], [8, 8, 7]) == 0", "assert do_algebra(['//', '//', '*'], [2, 1, 7, 6]) == 0", "assert do_algebra(['//', '//', '+'], [5, 2, 8, 2]) == 2", "assert do_algebra(['*', '+', '+'], [3, 2, 6, 5]) == 17", "assert do_algebra(['*', '**'], [5, 1, 6]) == 5", "assert do_algebra(['-', '+', '**'], [5, 3, 5, 6]) == 15627", "assert do_algebra(['-', '**', '//'], [1, 8, 3, 3]) == -169", "assert do_algebra(['**', '+', '-'], [3, 8, 1, 2]) == 6560", "assert do_algebra(['**', '//'], [12, 1, 6]) == 2", "assert do_algebra(['*', '+', '-'], [2, 2, 9, 6]) == 7", "assert do_algebra(['*', '+'], [2, 5, 7]) == 17", "assert do_algebra(['**', '*'], [2, 3, 1]) == 8", "assert do_algebra(['**', '//'], [7, 8, 8]) == 720600", "assert do_algebra(['-', '+', '-'], [3, 5, 9, 7]) == 0", "assert do_algebra(['**', '+'], [8, 4, 1]) == 4097", "assert do_algebra(['**', '*', '+'], [5, 2, 1, 9]) == 34", "assert do_algebra(['//', '-', '*'], [5, 4, 7, 1]) == -6", "assert do_algebra(['-', '**'], [6, 2, 2]) == 2", "assert do_algebra(['*', '+', '+'], [6, 3, 5, 5]) == 28", "assert do_algebra(['-', '**'], [8, 2, 7]) == -120", "assert do_algebra(['//', '**'], [4, 4, 4]) == 0", "assert do_algebra(['-', '//'], [5, 3, 8]) == 5", "assert do_algebra(['//', '**', '-'], [7, 2, 9, 3]) == -3", "assert do_algebra(['**', '-', '//'], [6, 1, 6, 7]) == 6", "assert do_algebra(['*', '//', '-'], [7, 1, 5, 10]) == -9", "assert do_algebra(['//', '*', '**'], [7, 6, 2, 1]) == 2", "assert do_algebra(['*', '*', '-'], [7, 8, 1, 9]) == 47", "assert do_algebra(['**', '+'], [8, 2, 7]) == 71", "assert do_algebra(['**', '//'], [9, 5, 9]) == 6561", "assert do_algebra(['**', '-', '*'], [5, 1, 2, 3]) == -1", "assert do_algebra(['*', '//', '+'], [7, 1, 8, 9]) == 9", "assert do_algebra(['//', '//', '+'], [2, 5, 8, 8]) == 8", "assert do_algebra(['*', '-', '+'], [6, 7, 4, 4]) == 42", "assert do_algebra(['-', '**', '-'], [7, 4, 1, 8]) == -5", "assert do_algebra(['+', '**', '+'], [4, 2, 7, 1]) == 133", "assert do_algebra(['*', '+'], [9, 3, 8]) == 35", "assert do_algebra(['*', '-', '//'], [4, 4, 2, 6]) == 16", "assert do_algebra(['*', '//', '//'], [7, 7, 6, 6]) == 1", "assert do_algebra(['**', '//', '//'], [1, 7, 6, 2]) == 0", "assert do_algebra(['*', '-', '**'], [2, 7, 7, 1]) == 7", "assert do_algebra(['+', '*', '**'], [6, 8, 1, 2]) == 14", "assert do_algebra(['**', '//', '+'], [5, 8, 3, 3]) == 130211", "assert do_algebra(['*', '-'], [6, 5, 7]) == 23", "assert do_algebra(['*', '*', '+'], [1, 3, 2, 9]) == 15", "assert do_algebra(['-', '*'], [3, 3, 6]) == -15", "assert do_algebra(['//', '-', '**'], [4, 8, 2, 2]) == -4", "assert do_algebra(['-', '**', '-'], [4, 5, 5, 9]) == -3130", "assert do_algebra(['**', '+', '*'], [1, 5, 5, 1]) == 6", "assert do_algebra(['-', '**'], [3, 5, 2]) == -22", "assert do_algebra(['+', '*'], [7, 3, 6]) == 25", "assert do_algebra(['*', '-', '**'], [5, 5, 2, 8]) == -231", "assert do_algebra(['+', '-', '**'], [6, 8, 4, 10]) == -1048562", "assert do_algebra(['+', '//', '*'], [7, 3, 7, 1]) == 7", "assert do_algebra(['**', '-', '//'], [7, 8, 1, 10]) == 5764801", "assert do_algebra(['//', '//', '+'], [1, 2, 8, 10]) == 10", "assert do_algebra(['*', '*', '-'], [3, 4, 1, 4]) == 8", "assert do_algebra(['//', '+', '**'], [7, 1, 5, 1]) == 12", "assert do_algebra(['*', '**'], [3, 2, 8]) == 768", "assert do_algebra(['*', '**'], [7, 3, 3]) == 189", "assert do_algebra(['+', '**', '-'], [5, 2, 5, 9]) == 28", "assert do_algebra(['-', '**', '*'], [5, 2, 7, 8]) == -1019", "assert do_algebra(['-', '+'], [8, 4, 3]) == 7", "assert do_algebra(['+', '-', '//'], [5, 4, 6, 2]) == 6", "assert do_algebra(['//', '+', '//'], [5, 1, 9, 4]) == 7", "assert do_algebra(['*', '**', '+'], [7, 1, 5, 1]) == 8", "assert do_algebra(['*', '+', '//'], [4, 6, 7, 10]) == 24", "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9", "assert do_algebra(['**', '*'], [8, 2, 2]) == 128", "assert do_algebra(['**', '-', '*'], [6, 4, 5, 1]) == 1291", "assert do_algebra(['-', '+'], [3, 4, 4]) == 3", "assert do_algebra(['+', '-'], [10, 3, 8]) == 5", "assert do_algebra(['//', '*'], [7, 3, 4]) == 8", "assert do_algebra(['//', '-'], [6, 1, 2]) == 4", "assert do_algebra(['**', '+'], [10, 3, 5]) == 1005", "assert do_algebra(['+', '-'], [3, 7, 6]) == 4", "assert do_algebra(['**', '//'], [9, 5, 2]) == 29524", "assert do_algebra(['*', '*'], [5, 2, 7]) == 70", "assert do_algebra(['*', '+', '**'], [5, 5, 2, 9]) == 537", "assert do_algebra(['-', '**'], [3, 3, 4]) == -78", "assert do_algebra(['**', '*', '*'], [7, 2, 4, 7]) == 1372", "assert do_algebra(['**', '*', '-'], [7, 6, 4, 6]) == 470590", "assert do_algebra(['//', '//'], [2, 7, 1]) == 0", "assert do_algebra(['+', '**', '+'], [6, 6, 4, 7]) == 1309", "assert do_algebra(['**', '*'], [10, 2, 8]) == 800", "assert do_algebra(['+', '//'], [3, 6, 4]) == 4", "assert do_algebra(['**', '+', '-'], [1, 5, 1, 1]) == 1", "assert do_algebra(['+', '-', '*'], [6, 8, 6, 1]) == 8", "assert do_algebra(['+', '**'], [7, 3, 5]) == 250", "assert do_algebra(['-', '//'], [7, 3, 2]) == 6", "assert do_algebra(['//', '+', '*'], [2, 6, 4, 4]) == 16", "assert do_algebra(['//', '//', '**'], [7, 1, 9, 1]) == 0", "assert do_algebra(['+', '*', '//'], [6, 5, 1, 3]) == 7", "assert do_algebra(['+', '**'], [3, 2, 4]) == 19", "assert do_algebra(['-', '*', '-'], [2, 7, 3, 9]) == -28", "assert do_algebra(['*', '*', '-'], [2, 1, 8, 4]) == 12", "assert do_algebra(['+', '**'], [7, 6, 6]) == 46663", "assert do_algebra(['**', '-', '-'], [1, 7, 7, 10]) == -16", "assert do_algebra(['**', '//', '//'], [1, 7, 4, 8]) == 0", "assert do_algebra(['-', '*', '*'], [7, 4, 7, 8]) == -217", "assert do_algebra(['**', '-'], [3, 2, 9]) == 0", "assert do_algebra(['-', '+', '**'], [5, 4, 2, 3]) == 9", "assert do_algebra(['+', '+'], [4, 4, 1]) == 9", "assert do_algebra(['-', '+'], [10, 7, 1]) == 4", "assert do_algebra(['-', '+', '*'], [5, 5, 4, 8]) == 32", "assert do_algebra(['//', '//', '*'], [4, 8, 9, 6]) == 0", "assert do_algebra(['+', '**', '-'], [1, 1, 9, 4]) == -2", "assert do_algebra(['+', '//', '+'], [5, 8, 2, 1]) == 10", "assert do_algebra(['-', '//', '**'], [4, 5, 8, 3]) == 4", "assert do_algebra(['+', '//', '*'], [5, 4, 8, 10]) == 5", "assert do_algebra(['**', '-', '+'], [2, 1, 7, 9]) == 4", "assert do_algebra(['//', '*'], [8, 4, 2]) == 4", "assert do_algebra(['//', '-', '*'], [4, 3, 3, 1]) == -2", "assert do_algebra(['-', '+', '+'], [1, 1, 9, 9]) == 18", "assert do_algebra(['-', '+', '**'], [1, 4, 2, 7]) == 125", "assert do_algebra(['*', '+'], [4, 8, 4]) == 36", "assert do_algebra(['*', '//', '*'], [7, 3, 1, 10]) == 210"], "nl": "\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    ", "func": "def do_algebra(operator, operand):", "examples": "Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    ", "completions": ["from typing import List\n## main.py\n\nfrom operator import add, sub, mul\n\ndef do_algebra(operator, operand) -> int:\n    '''\n    Given two lists operator and operand, build and evaluate the algebraic expression.\n    Parameters:\n        operator (list): List of basic algebra operations.\n        operand (list): List of non-negative integers.\n    Returns:\n        int: Result of the evaluated expression.\n    '''\n    \n    if len(operator) != len(operand) - 1:\n        return \"Invalid input: Number of operators should be one less than the number of operands.\"\n    \n    operators = {'+': add, '-': sub, '*': mul}\n    \n    result = operand[0]\n    for i in range(1, len(operand)):\n        result = operators[operator[i-1]](result, operand[i])\n    \n    return result\n", "from typing import List\n## main.py\n\ndef do_algebra(operator, operand) -> int:\n    '''\n    Given two lists operator and operand, build and evaluate the algebraic expression.\n    Args:\n        operator (list): List of basic algebra operations.\n        operand (list): List of integers.\n    Returns:\n        int: Result of the evaluated expression.\n    '''\n    expression = ''\n    for i in range(len(operand) - 1):\n        expression += str(operand[i]) + operator[i]\n    expression += str(operand[-1])\n    \n    result = eval(expression)\n    return result\n", "from typing import List\n## main.py\n\ndef do_algebra(operator, operand) -> int:\n    '''\n    Given two lists operator and operand, build and evaluate the algebraic expression.\n    Args:\n        operator (list): List of basic algebra operations.\n        operand (list): List of integers.\n    Returns:\n        int: Result of the evaluated algebraic expression.\n    '''\n    if not operator:\n        return operand[0] if operand else 0\n    \n    expression = ''\n    for i in range(len(operator)):\n        expression += str(operand[i])\n        expression += operator[i]\n    \n    expression += str(operand[-1])\n    \n    return eval(expression)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    :param numbers: List of float numbers\n    :param threshold: Float threshold value\n    :return: Boolean indicating if there are close elements or not\n    \"\"\"\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n\n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef evaluate_expression(operators: List[str], operands: List[int]) -> int:\n    stack = []\n    \n    for i in range(len(operators)):\n        if operators[i] == '+':\n            stack.append(stack.pop() + operands[i])\n        elif operators[i] == '-':\n            stack.append(stack.pop() - operands[i])\n        elif operators[i] == '*':\n            stack.append(stack.pop() * operands[i])\n        elif operators[i] == '/':\n            stack.append(stack.pop() // operands[i])\n    \n    return stack[0]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef evaluate_expression(operators: List[str], operands: List[int]) -> int:\n    expression = \"\"\n    \n    for i in range(len(operators)):\n        expression += str(operands[i]) + operators[i]\n    \n    expression += str(operands[-1])\n    \n    result = eval(expression)\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    '''\n    Given two lists operator and operand to build the algebraic expression and return the evaluation of this expression.\n    The basic algebra operations:\n    Addition (+)\n    Subtraction (-)\n    Multiplication (*)\n    Floor division (//)\n    Exponentiation (**)\n    Example:\n        operator['+', '*', '-']\n        array = [2, 3, 4, 5]\n        result = 2 + 3 * 4 - 5\n        => result = 9\n    Note:\n        The length of the operator list is equal to the length of the operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and the operand list has at least two operands.\n    '''\n    \n    if len(operator) != len(operand) - 1:\n        return \"Invalid input: Number of operators should be one less than the number of operands.\"\n    \n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    \n    return result\n", "from typing import List\n## main.py\n\ndef do_algebra(operator, operand) -> int:\n    '''\n    Given two lists operator and operand to build the algebraic expression and return the evaluation of this expression.\n    The basic algebra operations:\n    Addition (+)\n    Subtraction (-)\n    Multiplication (*)\n    Floor division (//)\n    Exponentiation (**)\n    Example:\n        operator['+', '*', '-']\n        array = [2, 3, 4, 5]\n        result = 2 + 3 * 4 - 5\n        => result = 9\n    Note:\n        The length of the operator list is equal to the length of the operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and the operand list has at least two operands.\n    '''\n\n    expression = ''\n    for i in range(len(operand)):\n        expression += str(operand[i])\n        if i < len(operator):\n            expression += operator[i]\n\n    return eval(expression)\n", "from typing import List\n## main.py\n\ndef do_algebra(operator, operand) -> int:\n    '''\n    Given two lists operator and operand to build the algebraic expression and return the evaluation of this expression.\n    '''\n    if len(operator) >= len(operand):\n        return 0\n    \n    expression = ''\n    for i in range(len(operator)):\n        expression += str(operand[i]) + operator[i]\n    expression += str(operand[-1])\n    \n    return eval(expression)\n", "from typing import List\nimport operator\n\ndef do_algebra(operators, operands) -> int:\n    '''\n    Given two lists operator and operand, build and evaluate the algebraic expression.\n    Args:\n        operators (list): List of basic algebra operations.\n        operands (list): List of integers.\n    Returns:\n        int: Result of the evaluated expression.\n    '''\n    \n    if len(operators) != len(operands) - 1:\n        return \"Invalid input: Operator list length should be one less than operand list length.\"\n    \n    result = operands[0]\n    \n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result = operator.add(result, operands[i])\n        elif operators[i-1] == '-':\n            result = operator.sub(result, operands[i])\n        elif operators[i-1] == '*':\n            result = operator.mul(result, operands[i])\n        elif operators[i-1] == '/':\n            result = operator.truediv(result, operands[i])\n    \n    return result\n"], "plans": ["requirement analysis:\nThe requirements specify building algebraic expressions from given operators and operands, ensuring correct evaluation, and handling edge cases. The solution should support various basic operations and non-negative integers.\nrequirement pool:\n- Implement function to build algebraic expressions\n- Develop logic for evaluating algebraic expressions\n- Include error handling for invalid inputs\nWe will design a static Python function to handle the algebraic expressions using basic operators and operands without defining any class. We will leverage the 'operator' and 'eval' modules in Python for efficient expression evaluation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'algebraic expression'\n    Explanation: The requirement involves building and evaluating algebraic expressions using basic operators and operands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\n\n# [edge case] \n    do_algebra(['+', '*'], [2, 3, 4]) = 10\n    Explanation: With only two operands and one operator, the expression is straightforward to evaluate.\n    \n    do_algebra(['+', '*', '-'], [2, 3, 4, 5]) = 9\n    Explanation: The expression involves multiple operators and operands, testing the evaluation logic.\n    \n    do_algebra(['+', '-', '*'], [5, 3, 2, 4]) = 7\n    Explanation: Testing a different combination of operators and operands.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(operator) != len(operand) - 1:\n            return \"Invalid input: Number of operators should be one less than the number of operands.\"\n        (other code)\n", "requirement pool:\n- Implement function to parse operator and operand lists\n- Develop logic to evaluate algebraic expressions\n- Perform testing for different operator combinations\nWe will use the eval function in Python to evaluate the algebraic expression built from the given operator and operand lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'algebraic expression'\n    Explanation: It refers to a mathematical expression involving variables, numbers, and arithmetic operations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the eval function in Python to evaluate the algebraic expression, the code logic can be implemented as follows:\n\n```python\ndef do_algebra(operator, operand):\n    expression = ''\n    for i in range(len(operand) - 1):\n        expression += str(operand[i]) + operator[i]\n    expression += str(operand[-1])\n    \n    result = eval(expression)\n    return result\n```\n\n# [edge case] \n    do_algebra(['+', '*', '-'], [2, 3, 4, 5]) = 9\n    Explanation: The algebraic expression is 2 + 3 * 4 - 5, which evaluates to 9.\n\n    do_algebra(['*', '+'], [2, 3, 4]) = 14\n    Explanation: The algebraic expression is 2 * 3 + 4, which evaluates to 10.\n\n    do_algebra(['-', '+', '*'], [5, 3, 2, 4]) = 3\n    Explanation: The algebraic expression is 5 - 3 + 2 * 4, which evaluates to 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the eval function can handle various algebraic expressions.\n", "requirement analysis:\nThe requirements specify building a function that can handle basic algebraic operations efficiently and accurately. It should support various operators and operands, providing correct results and clear error messages for invalid inputs.\nrequirement pool:\n- Support addition, subtraction, multiplication, floor division, and exponentiation\n- Handle at least two operands and one operator in the input lists\n- Ensure the function returns the correct evaluation of the algebraic expression\nWe will use the eval() function in Python to evaluate the algebraic expression built from the given operator and operand lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'algebraic expression'\n    Explanation: It refers to a mathematical expression involving variables and operations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the eval() function in Python to evaluate the algebraic expression, the detailed logic is as follows:\n    - Build the algebraic expression by combining elements from the operator and operand lists.\n    - Use the eval() function to evaluate the expression.\n    - Return the result.\n\n# [edge case] \n    do_algebra(['+'], [5]) = 5\n    Explanation: With only one operand and no operator, the result is the single operand itself.\n    do_algebra(['*', '-'], [2, 3, 4]) = 2\n    Explanation: With more operators than operands, only the first operand is considered in this case.\n    do_algebra(['+', '*', '-'], [2, 3, 4, 5]) = 9\n    Explanation: A standard case where the expression is evaluated as 2 + 3 * 4 - 5 = 9.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the eval() function can handle different cases of algebraic expressions.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the standard Python libraries to implement the 'has_close_elements' function without defining any class.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'closer'\n    Explanation: In the requirement, \"closer\" refers to the distance between two numbers being less than a given threshold.\n\n# [phrase showing quantity relationship]\n    'closer to each other than': This phrase indicates that we need to compare the distance between each pair of numbers in the list and check if it is less than the threshold.\n    Implementation: We can calculate the absolute difference between each pair of numbers and compare it with the threshold.\n\n# [degree adverb] \n    No degree adverb in this requirement.\n\n# [code logic]\n    1. Iterate through all possible pairs of numbers in the list.\n    2. Calculate the absolute difference between each pair of numbers.\n    3. Check if the absolute difference is less than the threshold.\n    4. If any pair satisfies the condition, return True.\n    5. If no such pair is found, return False.\n\n# [edge case] \n    has_close_elements([1.0, 2.0, 3.0], 0.5) = False\n    Explanation: The closest numbers in the list are 1.0 and 2.0 with a distance of 1.0, which is greater than the threshold of 0.5.\n    \n    has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) = True\n    Explanation: The numbers 2.8 and 3.0 are closer to each other than the threshold of 0.3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic covers all possible pairs in the list for comparison.\n", "requirement pool:\n- Implement function to construct and evaluate algebraic expressions\n- Handle edge cases like division by zero and invalid operators\n- Optimize the evaluation process for large expressions\nWe will design a static Python function using basic Python libraries to construct and evaluate algebraic expressions efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'algebraic expression'\n    Explanation: The requirement involves constructing and evaluating an algebraic expression using given operators and operands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is quite abstract, the coder needs to implement the logic to construct and evaluate algebraic expressions efficiently. This may involve parsing the operators and operands to form a valid expression and then evaluating it.\n\n# [edge case] \n    No specific edge cases mentioned in the requirement.\n\n# [extra code for edge case]\n    No extra code needed for handling edge cases as none are specified. The coder should focus on efficiently constructing and evaluating algebraic expressions based on the given operators and operands.\n", "requirement pool:\n- Support addition, subtraction, multiplication, and division operations\n- Handle parentheses for altering the order of operations\n- Implement error handling for division by zero scenarios\nWe will use the 'eval' function in Python to construct and evaluate the algebraic expression based on the given operators and operands.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'algebraic expression'\n    Explanation: It refers to a mathematical expression that consists of variables, constants, and mathematical operations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the 'eval' function in Python to construct and evaluate the algebraic expression, the code logic would involve constructing the expression using the given operators and operands and then evaluating it using the 'eval' function.\n\n# [edge case] \n    No specific edge cases mentioned in the requirement.\n\n# [extra code for edge case]\n    No extra code needed for handling edge cases as none are specified.\n", "requirement pool:\n- Implement support for all basic algebraic operations\n- Handle edge cases like division by zero\n- Optimize the evaluation process for large expressions\nWe will design a simple static Python function using basic arithmetic operations to evaluate algebraic expressions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'algebraic expression'\n    Explanation: Refers to a mathematical expression involving variables, numbers, and arithmetic operations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    do_algebra(['+', '*'], [2, 3, 4]) = 10\n    Explanation: With only two operands and one operator, the expression is evaluated as 2 + 3 * 4 = 10.\n    do_algebra(['-'], [5, 3]) = 2\n    Explanation: With one operand and one operator, the expression is evaluated as 5 - 3 = 2.\n    do_algebra(['**', '+', '-'], [2, 3, 4, 5]) = 6\n    Explanation: The expression is evaluated as 2 ** 3 + 4 - 5 = 6.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(operator) != len(operand) - 1:\n            return \"Invalid input: Number of operators should be one less than the number of operands.\"\n        (other code)\n", "requirement pool:\n- Support all basic algebraic operators\n- Handle operator precedence correctly\n- Optimize evaluation speed for large expressions\nWe will use the built-in eval() function in Python to evaluate the algebraic expression provided by the user.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'algebraic expression'\n    Explanation: Refers to a mathematical expression involving variables, numbers, and arithmetic operations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the built-in eval() function in Python, the detailed logic is not needed as it handles the evaluation of algebraic expressions automatically.\n\n# [edge case] \n    do_algebra(['+', '*'], [2, 3, 4]) = 10\n    Explanation: With only two operands and one operator, the expression '2 + 3 * 4' should result in 10.\n    do_algebra(['-'], [5, 3]) = 2\n    Explanation: With one operand and one operator, the expression '5 - 3' should result in 2.\n    do_algebra(['**', '+', '-'], [2, 3, 4, 5]) = 6\n    Explanation: The expression '2 ** 3 + 4 - 5' should result in 6.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the eval() function can handle different algebraic expressions effectively.\n", "requirement pool:\n- Implement support for all basic algebraic operations\n- Ensure input validation for operands and operators\n- Optimize the evaluation algorithm for efficiency\nWe will use the eval() function in Python to evaluate the algebraic expression based on the input operator and operand lists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'algebraic expression'\n    Explanation: Refers to a mathematical expression involving variables, numbers, and arithmetic operations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the eval() function in Python to evaluate the algebraic expression, the detailed logic is to construct the algebraic expression string using the given operator and operand lists and then evaluate it using the eval() function.\n\n# [edge case] \n    do_algebra(['+', '*'], [2, 3, 4]) = 10\n    Explanation: With only two operands and one operator, the expression is 2 + 3 * 4 = 10.\n    do_algebra(['-'], [5, 3, 2]) = 0\n    Explanation: With one operand and one operator, the expression is 5 - 3 = 2, but since there are more operators than needed, the function should return 0.\n    do_algebra(['*', '+', '-'], [2, 3, 4, 5]) = 13\n    Explanation: The expression is 2 * 3 + 4 - 5 = 13.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the eval() function can handle different algebraic expressions.\n", "requirement analysis:\nThe tool should efficiently handle basic algebraic operations, support custom operators, and accurately evaluate expressions. It should also validate input data to prevent errors.\nrequirement pool:\n- Support addition, subtraction, multiplication, division, and exponentiation\n- Implement error handling for invalid input data\n- Optimize performance for large expressions\nWe will design a static Python function to handle the algebraic operations based on the given operator and operand lists. We will use the 'operator' library in Python to perform the actual arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'algebraic expression'\n    Explanation: The requirement involves building and evaluating an algebraic expression using given operators and operands.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using the 'operator' library in Python to perform arithmetic operations, the detailed logic can be implemented as follows:\n    - Create a function that takes in the 'operator' and 'operand' lists as parameters.\n    - Initialize a variable 'result' with the first operand value.\n    - Iterate through the 'operator' list and apply each operation to the 'result' variable with the corresponding operand.\n    - Return the final 'result' after all operations are applied.\n\n# [edge case] \n    do_algebra(['+', '*'], [2, 3, 4]) = 14\n    Explanation: With only two operands and one operator, the function should return the result of 2 + 3 * 4 = 14.\n    do_algebra(['-', '+', '*'], [5, 3, 2, 4]) = 3\n    Explanation: The expression should be evaluated as 5 - 3 + 2 * 4 = 3.\n\n# [extra code for edge case]\n    We need to handle the edge case where the length of the operator list is not equal to the length of the operand list minus one.\n        if len(operator) != len(operand) - 1:\n            return \"Invalid input: Operator list length should be one less than operand list length.\"\n        (other code)\n"], "scores": [0.186, 1.0, 1.0, 0.0, 0.0, 0.0, 0.6124, 1.0, 1.0, 0.3101], "pass_results": [false, true, true, false, false, false, false, true, true, false], "pass_test_cases_num": [24, 129, 129, 0, 0, 0, 79, 129, 129, 40], "completion": "from typing import List\nimport operator\n\ndef do_algebra(operators, operands) -> int:\n    '''\n    Given two lists operator and operand, build and evaluate the algebraic expression.\n    Args:\n        operators (list): List of basic algebra operations.\n        operands (list): List of integers.\n    Returns:\n        int: Result of the evaluated expression.\n    '''\n    \n    if len(operators) != len(operands) - 1:\n        return \"Invalid input: Operator list length should be one less than operand list length.\"\n    \n    result = operands[0]\n    \n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result = operator.add(result, operands[i])\n        elif operators[i-1] == '-':\n            result = operator.sub(result, operands[i])\n        elif operators[i-1] == '*':\n            result = operator.mul(result, operands[i])\n        elif operators[i-1] == '/':\n            result = operator.truediv(result, operands[i])\n    \n    return result\n", "passed": true, "pass": true, "pass_num": 4, "round": 597, "repair_prompt": ["def do_algebra(operator, operand):\t\n'''Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebric expression. Then, return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "Given two lists operator, and operand, the first list contains basic algebra operations, and the second list consists of integers. Use these two lists to construct the algebraic expression and then evaluate it. Return the result of this evaluation.", "def do_algebra(operator, operand):\n'''Given two lists operator, and operand to build the algebric expression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n'''"], "mutate_method": "expand_one2two", "parent_index": 568}
