{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. You must return a string where the numbers are sorted from smallest to largest. The returned string should maintain this sorted order.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": ["def check(sort_numbers):\n\tassert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one\") == 'one'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four three six\") == 'three four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one six four\") == 'one four six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two\") == 'one two'", "def check(sort_numbers):\n\tassert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four five five one one\") == 'one one four five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four zero two five\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight\") == 'eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six three\") == 'three six'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero\") == 'zero seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four three zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven\") == 'seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six nine three\") == 'three six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one nine three\") == 'one three four nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "def check(sort_numbers):\n\tassert sort_numbers('three five nine') == 'three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three\") == 'zero three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one seven\") == 'one four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six\") == 'six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"four two seven\") == 'two four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three four five\") == 'three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five four zero\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three seven two\") == 'two three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four six four one\") == 'one four four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight six three\") == 'three six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three five\") == 'three five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four\") == 'four'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero four one\") == 'zero one four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine\") == 'nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three\") == 'three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three four zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five\") == 'five'", "def check(sort_numbers):\n\tassert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers('three') == 'three'", "def check(sort_numbers):\n\tassert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six\") == 'six'", "def check(sort_numbers):\n\tassert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five\") == 'five eight'", "def check(sort_numbers):\n\tassert sort_numbers('') == ''", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine nine five\") == 'five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three\") == 'three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero\") == 'zero'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine zero\") == 'zero nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one six two seven\") == 'one two six seven'"], "test_case_list": ["assert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "assert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "assert sort_numbers(\"one\") == 'one'", "assert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "assert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "assert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "assert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "assert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "assert sort_numbers(\"four four three six\") == 'three four four six'", "assert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "assert sort_numbers(\"nine one six four\") == 'one four six nine'", "assert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "assert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "assert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "assert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "assert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "assert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "assert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "assert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "assert sort_numbers(\"one two\") == 'one two'", "assert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "assert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "assert sort_numbers(\"four five five one one\") == 'one one four five five'", "assert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "assert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "assert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "assert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "assert sort_numbers(\"four zero two five\") == 'zero two four five'", "assert sort_numbers(\"eight\") == 'eight'", "assert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "assert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "assert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "assert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "assert sort_numbers(\"six three\") == 'three six'", "assert sort_numbers(\"seven zero\") == 'zero seven'", "assert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "assert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "assert sort_numbers(\"four three zero\") == 'zero three four'", "assert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "assert sort_numbers(\"seven\") == 'seven'", "assert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "assert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "assert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "assert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "assert sort_numbers(\"six nine three\") == 'three six nine'", "assert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "assert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "assert sort_numbers(\"four one nine three\") == 'one three four nine'", "assert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "assert sort_numbers('three five nine') == 'three five nine'", "assert sort_numbers(\"zero three\") == 'zero three'", "assert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "assert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "assert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "assert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "assert sort_numbers(\"four one seven\") == 'one four seven'", "assert sort_numbers(\"seven six\") == 'six seven'", "assert sort_numbers(\"four two seven\") == 'two four seven'", "assert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "assert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "assert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "assert sort_numbers(\"nine three four five\") == 'three four five nine'", "assert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "assert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "assert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "assert sort_numbers(\"two five four zero\") == 'zero two four five'", "assert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "assert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "assert sort_numbers(\"three seven two\") == 'two three seven'", "assert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "assert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "assert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "assert sort_numbers(\"four four six four one\") == 'one four four four six'", "assert sort_numbers(\"eight six three\") == 'three six eight'", "assert sort_numbers(\"five three five\") == 'three five five'", "assert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "assert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "assert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "assert sort_numbers(\"four\") == 'four'", "assert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "assert sort_numbers(\"six zero four one\") == 'zero one four six'", "assert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "assert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "assert sort_numbers(\"nine\") == 'nine'", "assert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "assert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "assert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "assert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "assert sort_numbers(\"three\") == 'three'", "assert sort_numbers(\"three four zero\") == 'zero three four'", "assert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "assert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "assert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "assert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "assert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "assert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "assert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "assert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "assert sort_numbers(\"five\") == 'five'", "assert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "assert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "assert sort_numbers('three') == 'three'", "assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "assert sort_numbers(\"six\") == 'six'", "assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "assert sort_numbers(\"eight five\") == 'five eight'", "assert sort_numbers('') == ''", "assert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "assert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "assert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "assert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "assert sort_numbers(\"nine nine five\") == 'five nine nine'", "assert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "assert sort_numbers(\"seven three\") == 'three seven'", "assert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "assert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "assert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "assert sort_numbers(\"zero\") == 'zero'", "assert sort_numbers(\"nine zero\") == 'zero nine'", "assert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "assert sort_numbers(\"one six two seven\") == 'one two six seven'"], "nl": " Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    ", "func": "def sort_numbers(numbers: str) -> str:", "examples": ">>> sort_numbers('three one five')\n    'one three five'\n    ", "completions": ["from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    You must return a string where the numbers are sorted from smallest to largest. The returned string should maintain this sorted order.\n    \n    Args:\n        numbers (str): A space-delimited string of number words from 'zero' to 'nine'.\n    \n    Returns:\n        str: A string with the numbers sorted in ascending order.\n    '''\n    \n    # Create a dictionary mapping number words to numerical values\n    number_words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    word_to_num = {word: idx for idx, word in enumerate(number_words)}\n    \n    # Split the input string into a list of number words\n    num_words_list = numbers.split()\n    \n    # Map each number word to its numerical value using the dictionary\n    num_values = [word_to_num[word] for word in num_words_list]\n    \n    # Sort the numerical values\n    sorted_num_values = sorted(num_values)\n    \n    # Map the sorted numerical values back to number words\n    sorted_num_words = [number_words[num] for num in sorted_num_values]\n    \n    # Join the sorted number words into a string and return it\n    return ' '.join(sorted_num_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    You must return a string where the numbers are sorted from smallest to largest.\n    The returned string should maintain this sorted order.\n    '''\n    \n    # Create a dictionary mapping number words to numerical values\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of number words\n    number_words = numbers.split()\n    \n    # Map the number words to their numerical values using the dictionary\n    numerical_values = [number_map[word] for word in number_words]\n    \n    # Sort the numerical values\n    sorted_numerical_values = sorted(numerical_values)\n    \n    # Map the sorted numerical values back to number words\n    sorted_number_words = [key for value in sorted_numerical_values for key, val in number_map.items() if val == value]\n    \n    # Join the sorted number words into a string and return it\n    return ' '.join(sorted_number_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    You must return a string where the numbers are sorted from smallest to largest.\n    The returned string should maintain this sorted order.\n    '''\n    \n    # Dictionary mapping number words to numerical values\n    number_mapping = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into individual number words\n    number_words = numbers.split()\n    \n    # Map each number word to its numerical value using the dictionary\n    numerical_values = [number_mapping[word] for word in number_words]\n    \n    # Sort the numerical values\n    sorted_numerical_values = sorted(numerical_values)\n    \n    # Map the sorted numerical values back to number words for the output\n    sorted_number_words = [key for value in sorted_numerical_values for key, num in number_mapping.items() if num == value]\n    \n    return ' '.join(sorted_number_words)\n", "from typing import List\n## main.py\n\nimport spacy\n\nnlp = spacy.load(\"en_core_web_sm\")\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    You must return a string where the numbers are sorted from smallest to largest. The returned string should maintain this sorted order.\n    You need to sort the numbers in ascending order based on their spelled-out form.\n    '''\n    \n    # Tokenize the input string into individual words\n    tokens = numbers.split()\n    \n    # Convert each spelled-out number to its numerical equivalent using 'spacy'\n    numerical_values = []\n    for token in tokens:\n        doc = nlp(token)\n        numerical_value = doc[0]._.to_number\n        numerical_values.append((numerical_value, token))\n    \n    # Sort the numerical values in ascending order\n    sorted_numerical_values = sorted(numerical_values, key=lambda x: x[0])\n    \n    # Convert the sorted numerical values back to spelled-out numbers\n    sorted_numbers = [value[1] for value in sorted_numerical_values]\n    \n    # Return the sorted spelled-out numbers as a string\n    return ' '.join(sorted_numbers)\n", "from typing import List\n## main.py\n\nimport spacy\n\nnlp = spacy.load(\"en_core_web_sm\")\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Sorts the spelled-out numbers in ascending order.\n    Input: space-delimited string of spelled-out numbers\n    Output: sorted space-delimited string of spelled-out numbers\n    '''\n\n    # Tokenize the input string\n    doc = nlp(numbers)\n\n    # Convert spelled-out numbers to numerical values\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numerical_values = [num_dict[token.text] for token in doc]\n\n    # Sorting the numerical values\n    sorted_numerical_values = sorted(numerical_values)\n\n    # Convert the sorted numerical values back to spelled-out numbers\n    sorted_spelled_out_numbers = [key for value in sorted_numerical_values for key, num in num_dict.items() if num == value]\n\n    # Joining the sorted spelled-out numbers into a string and returning it\n    return ' '.join(sorted_spelled_out_numbers)\n", "from typing import List\n## main.py\n\nimport spacy\n\nnlp = spacy.load(\"en_core_web_sm\")\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    You must return a string where the numbers are sorted from smallest to largest. The returned string should maintain this sorted order.\n    You need to sort the numbers in ascending order based on their spelled-out form.\n    '''\n    \n    # Split the input string into individual numbers\n    number_list = numbers.split()\n    \n    # Convert the spelled-out numbers to numerical values\n    number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numerical_values = [number_dict[num] for num in number_list]\n    \n    # Sort the numbers based on their numerical values\n    sorted_numerical_values = sorted(numerical_values)\n    \n    # Convert the sorted numerical values back to spelled-out numbers\n    sorted_numbers = [list(number_dict.keys())[list(number_dict.values()).index(num)] for num in sorted_numerical_values]\n    \n    # Return the sorted numbers as a string\n    return ' '.join(sorted_numbers)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numberals from 'zero' to 'nine'. You must return a string where the numbers are sorted from smallest to largest, maintaining this order. \n    >>> sort_numbers('three one five')\n    'one three five'\n    '''\n    \n    # Split the input string into a list of numbers\n    num_list = numbers.split()\n    \n    # Define a dictionary to map number words to their corresponding numerical values\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Sort the numbers based on their numerical values\n    sorted_nums = sorted(num_list, key=lambda x: num_dict[x])\n    \n    # Join the sorted numbers back into a string\n    sorted_numbers_str = ' '.join(sorted_nums)\n    \n    return sorted_numbers_str\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'. You must return a string where the numbers are sorted from smallest to largest, maintaining this order. \n    >>> sort_numbers('three one five')\n    'one three five'\n    '''\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_nums = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_nums)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Input is a space-delimited string of numerals from 'zero' to 'nine'. You must return a string where the numbers are sorted from smallest to largest, maintaining this order. \n    >>> sort_numbers('three one five')\n    'one three five'\n    '''\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)\n", "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Sorts a space-delimited string of numberals from 'zero' to 'nine'.\n    Input: A string of numberals separated by spaces.\n    Output: A string with the numberals sorted in ascending order.\n    '''\n    numberals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    \n    # Map numberals to integers\n    num_map = {num: idx for idx, num in enumerate(numberals)}\n    \n    # Split input string into numberals\n    num_list = numbers.split()\n    \n    # Sort numberals based on mapped integers\n    sorted_nums = sorted(num_list, key=lambda x: num_map[x])\n    \n    # Join sorted numberals into a string\n    sorted_numbers = ' '.join(sorted_nums)\n    \n    return sorted_numbers\n"], "plans": ["requirement pool:\n- Implement sorting algorithm for numbers from 'zero' to 'nine'\n- Handle input validation for invalid number inputs\nWe will use the built-in Python library to map number words to their corresponding numerical values, sort them, and then map them back to words for the final output.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'numberals'\n    Explanation: Refers to the words representing numbers from 'zero' to 'nine'.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the built-in Python library to map number words to numerical values, sort them, and then map them back to words, the following logic can be implemented:\n    - Create a dictionary mapping number words to numerical values\n    - Split the input string into a list of number words\n    - Map each number word to its numerical value using the dictionary\n    - Sort the numerical values\n    - Map the sorted numerical values back to number words\n    - Join the sorted number words into a string and return it\n\n# [edge case] \n    sort_numbers('five five five') = 'five five five'\n    Explanation: All numbers are the same, so the output should be the same as the input.\n    sort_numbers('zero one two three four five six seven eight nine') = 'zero one two three four five six seven eight nine'\n    Explanation: All numbers are already in order, so the output should be the same as the input.\n    sort_numbers('nine eight seven six five four three two one zero') = 'zero one two three four five six seven eight nine'\n    Explanation: Numbers are in reverse order, so they should be sorted in ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic covers sorting the numbers correctly.\n", "requirement pool:\n- Implement sorting logic for numbers from 'zero' to 'nine'\n- Handle input validation for invalid number inputs\n- Optimize sorting algorithm for efficiency\nWe will utilize the built-in Python library to map number words to their corresponding numerical values, sort them, and then map them back to words.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'numberals': These are words representing numbers from zero to nine.\n    Explanation: The core concept here is to convert number words to numerical values, sort them, and then convert them back to words.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Create a dictionary mapping number words to numerical values.\n    2. Split the input string into a list of number words.\n    3. Map the number words to their numerical values using the dictionary.\n    4. Sort the numerical values.\n    5. Map the sorted numerical values back to number words.\n    6. Join the sorted number words into a string and return it.\n\n# [edge case] \n    sort_numbers('zero one two three four five six seven eight nine') = 'zero one two three four five six seven eight nine'\n    Explanation: All numbers are already in sorted order.\n    \n    sort_numbers('nine eight seven six five four three two one zero') = 'zero one two three four five six seven eight nine'\n    Explanation: All numbers are in reverse order and need to be sorted.\n\n    sort_numbers('three one five') = 'one three five'\n    Explanation: The input string is a subset of all numbers and needs to be sorted.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers sorting the numbers correctly.\n", "requirement pool:\n- Implement efficient sorting algorithm for 'zero' to 'nine'\n- Ensure input validation for valid number words\nWe will use the built-in Python library to map number words to their corresponding numerical values, sort them, and then map them back to words for the output.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'numberals': Refers to the words representing numbers from 'zero' to 'nine'.\n    Explanation: The requirement specifies a mapping between number words and their corresponding numerical values.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the built-in Python library for mapping and sorting, the code logic would involve:\n    - Creating a dictionary mapping number words to numerical values\n    - Splitting the input string into individual number words\n    - Mapping each number word to its numerical value using the dictionary\n    - Sorting the numerical values\n    - Mapping the sorted numerical values back to number words for the output\n\n# [edge case] \n    sort_numbers('one two three') = 'one two three'\n    Explanation: The input is already sorted in ascending order, so the output remains the same.\n    sort_numbers('nine eight seven') = 'seven eight nine'\n    Explanation: The input is sorted in descending order, and the output should be in ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic covers sorting the numbers correctly.\n", "requirement pool:\n- Sort the numbers in ascending order based on their spelled-out form\n- Handle invalid inputs gracefully and provide clear error messages\n- Optimize the sorting algorithm for efficiency\nWe will use the natural language processing library 'spacy' to convert spelled-out numbers to numerical values, then sort the numbers accordingly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'spelled-out numbers'\n    Explanation: The requirement involves converting spelled-out numbers to numerical values and sorting them accordingly.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan involves using the 'spacy' library for natural language processing to convert spelled-out numbers to numerical values and then sorting them, the detailed logic would include:\n    - Tokenize the input string into individual words\n    - Convert each spelled-out number to its numerical equivalent using 'spacy'\n    - Sort the numerical values in ascending order\n    - Convert the sorted numerical values back to spelled-out numbers\n    - Return the sorted spelled-out numbers as a string\n\n# [edge case] \n    sort_numbers('five one three') = 'one three five'\n    Explanation: The input string contains spelled-out numbers 'five', 'one', and 'three'. When sorted in ascending order based on their numerical values, the output should be 'one three five'.\n\n    sort_numbers('four four two') = 'two four four'\n    Explanation: The input string contains spelled-out numbers 'four', 'four', and 'two'. When sorted in ascending order based on their numerical values, the output should be 'two four four'.\n\n    sort_numbers('zero eight seven') = 'zero seven eight'\n    Explanation: The input string contains spelled-out numbers 'zero', 'eight', and 'seven'. When sorted in ascending order based on their numerical values, the output should be 'zero seven eight'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The plan using 'spacy' library should be able to handle sorting the spelled-out numbers correctly.\n", "requirement pool:\n- Sort the numberals in ascending order\n- Handle invalid inputs gracefully\n- Optimize the sorting algorithm for efficiency\nWe will use the natural language processing library 'spacy' to convert spelled-out numbers to numerical values, then sort them accordingly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'spelled-out numbers': Refers to numbers written out as words (e.g., 'one', 'two', 'three') instead of numerals.\n    Explanation: The requirement specifies that the input consists of numbers written out as words, and the output should be sorted based on their numerical values.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using the 'spacy' library for converting spelled-out numbers to numerical values and sorting them, the code logic would involve:\n    - Tokenizing the input string\n    - Converting spelled-out numbers to numerical values\n    - Sorting the numerical values\n    - Converting the sorted numerical values back to spelled-out numbers\n    - Joining the sorted spelled-out numbers into a string and returning it\n\n# [edge case] \n    sort_numbers('five one three') = 'one three five'\n    Explanation: The input string contains spelled-out numbers 'five', 'one', and 'three'. When sorted numerically, they correspond to 1, 3, and 5 respectively. Sorting them in ascending order gives 'one three five'.\n\n    sort_numbers('eight four two') = 'two four eight'\n    Explanation: The input string contains spelled-out numbers 'eight', 'four', and 'two'. When sorted numerically, they correspond to 2, 4, and 8 respectively. Sorting them in ascending order gives 'two four eight'.\n\n    sort_numbers('nine seven six') = 'six seven nine'\n    Explanation: The input string contains spelled-out numbers 'nine', 'seven', and 'six'. When sorted numerically, they correspond to 6, 7, and 9 respectively. Sorting them in ascending order gives 'six seven nine'.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- Sort the numberals in ascending order\n- Handle invalid inputs gracefully\n- Optimize the sorting algorithm for efficiency\nWe will use the natural language processing library 'spacy' to convert spelled-out numbers to numerical values, then sort the numbers based on their numerical values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted order'\n    Explanation: The requirement specifies that the numbers should be arranged in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest to largest'\n    Explanation: Indicates the sorting order from the smallest number to the largest number.\n\n# [code logic]\n    The code logic should involve:\n    1. Split the input string into individual numbers.\n    2. Convert the spelled-out numbers to numerical values.\n    3. Sort the numbers based on their numerical values.\n    4. Convert the sorted numerical values back to spelled-out numbers.\n    5. Return the sorted numbers as a string.\n\n# [edge case] \n    sort_numbers('five four two') = 'two four five'\n    Explanation: The input string contains 'five', 'four', and 'two'. When sorted, 'two' comes first, followed by 'four', and then 'five'.\n    sort_numbers('one one one') = 'one one one'\n    Explanation: All numbers are the same, so the output remains the same.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The sorting logic will handle cases where numbers are the same or in any order.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python function 'sorted' to sort the numbers in the input string.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted': Sorting the numbers from smallest to largest.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest', 'largest': Indicates the order in which the numbers should be sorted.\n\n# [code logic]\n    Since the plan already suggests using the 'sorted' function, the implementation can be straightforward by splitting the input string, converting the numbers to their corresponding numerical values, sorting them, and then converting them back to words.\n\n# [edge case] \n    sort_numbers('one two three') = 'one two three'\n    Explanation: The numbers are already in ascending order, so the output remains the same.\n    sort_numbers('nine eight seven') = 'seven eight nine'\n    Explanation: The numbers are sorted from smallest to largest.\n    sort_numbers('five four six') = 'four five six'\n    Explanation: The numbers are sorted from smallest to largest.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The 'sorted' function handles sorting efficiently.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python library to sort the numbers in the input string.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sort': arranging elements in a specific order\n    Explanation: In this requirement, the core concept is to sort numbers from smallest to largest while maintaining their original order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest', 'largest'\n    Explanation: These degree adverbs indicate the order in which the numbers need to be sorted.\n\n# [code logic]\n    Since the plan suggests using the built-in Python library to sort the numbers, you can implement the code as follows:\n    \n```python\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_nums = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_nums)\n```\n\n# [edge case] \n    sort_numbers('three one five') = 'one three five'\n    Explanation: The input string 'three one five' corresponds to numbers 3, 1, and 5. Sorting them in ascending order gives 'one three five'.\n\n    sort_numbers('nine seven two') = 'two seven nine'\n    Explanation: The input string 'nine seven two' corresponds to numbers 9, 7, and 2. Sorting them in ascending order gives 'two seven nine'.\n\n    sort_numbers('zero four eight') = 'zero four eight'\n    Explanation: The input string 'zero four eight' already has the numbers in ascending order, so the output remains the same.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the code implementation covers sorting the numbers correctly.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python library to sort the numbers in the input string.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sort': arranging elements in a specific order\n    Explanation: In this requirement, the core concept is to sort numbers from smallest to largest while maintaining their original order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': indicates the need to find the minimum value\n    'largest': indicates the need to find the maximum value\n\n# [code logic]\n    Since the plan suggests using the built-in Python library to sort numbers, you can directly use the sorted() function to achieve this. Here is a sample logic:\n    \n```python\ndef sort_numbers(numbers: str) -> str:\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)\n```\n\n# [edge case] \n    sort_numbers('three one five') = 'one three five'\n    Explanation: The input string 'three one five' corresponds to numbers [3, 1, 5]. Sorting them in ascending order gives 'one three five'.\n\n    sort_numbers('nine eight seven') = 'nine eight seven'\n    Explanation: The input string 'nine eight seven' corresponds to numbers [9, 8, 7]. Since they are already in descending order, sorting them in ascending order maintains the original order.\n\n    sort_numbers('zero two four') = 'zero two four'\n    Explanation: The input string 'zero two four' corresponds to numbers [0, 2, 4]. Since they are already in ascending order, sorting them in ascending order maintains the original order.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The logic provided above covers sorting the numbers as required.\n", "requirement pool:\n- Implement sorting algorithm for 'zero' to 'nine' numbers\n- Handle input validation for invalid numberals\n- Optimize sorting performance for large input sets\nWe will utilize the built-in Python library to map numberals to integers, sort them, and then map them back to numberals for the output.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'numberals': These are words representing numbers from zero to nine.\n    Explanation: The core concept here is to convert numberals to integers, sort them, and then convert them back to numberals for the output.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will utilize the built-in Python library to map numberals to integers, sort them, and then map them back to numberals for the output.\n\n# [edge case] \n    sort_numbers('zero one two') = 'zero one two'\n    Explanation: All numbers are already in sorted order.\n    sort_numbers('nine eight seven') = 'seven eight nine'\n    Explanation: The numbers are sorted from smallest to largest.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic covers sorting the numbers correctly.\n"], "scores": [1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, false, false, false, true, true, true, true], "pass_test_cases_num": [121, 121, 121, 0, 0, 0, 121, 121, 121, 121], "completion": "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    '''\n    Sorts a space-delimited string of numberals from 'zero' to 'nine'.\n    Input: A string of numberals separated by spaces.\n    Output: A string with the numberals sorted in ascending order.\n    '''\n    numberals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    \n    # Map numberals to integers\n    num_map = {num: idx for idx, num in enumerate(numberals)}\n    \n    # Split input string into numberals\n    num_list = numbers.split()\n    \n    # Sort numberals based on mapped integers\n    sorted_nums = sorted(num_list, key=lambda x: num_map[x])\n    \n    # Join sorted numberals into a string\n    sorted_numbers = ' '.join(sorted_nums)\n    \n    return sorted_numbers\n", "passed": true, "pass": true, "pass_num": 7, "round": 542, "repair_prompt": ["def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. You must return a string where the numbers are sorted from smallest to largest. The returned string should maintain this sorted order.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numberals from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. You must return a string where the numbers are sorted from smallest to largest. The returned string should maintain this sorted order. You need to sort the numbers in ascending order based on their spelled-out form.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "def sort_numbers(numbers: str) -> str:\n    '''Input is a space-delimited string of numberals from 'zero' to 'nine'. You must return a string where the numbers are sorted from smallest to largest, maintaining this order. \n    >>> sort_numbers('three one five')\n    'one three five'\n    '''"], "mutate_method": "expand_one2two", "parent_index": 535}
