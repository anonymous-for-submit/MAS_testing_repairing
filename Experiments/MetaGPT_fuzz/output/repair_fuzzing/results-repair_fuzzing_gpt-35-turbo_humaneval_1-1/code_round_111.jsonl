{"task_id": "HumanEval/157", "prompt": "def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, which means that one of the angles in the triangle is exactly 90 degrees. Return False if the triangle is not a right-angled triangle. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "entry_point": "right_angle_triangle", "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "test": ["def check(right_angle_triangle):\n\tassert right_angle_triangle(273, 936, 975) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(285, 380, 475) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(705, 376, 799) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(870, 464, 986) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3504, 4015, 5329) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(525, 280, 595) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1536, 1760, 2336) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(175, 600, 625) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(455, 1560, 1625) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 2, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(259, 888, 925) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(490, 1680, 1750) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1185, 632, 1343) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 1, 9) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2256, 2585, 3431) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1155, 616, 1309) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 5, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 7, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 1, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(54, 72, 90) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(20, 12, 16) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 5, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2736, 3135, 4161) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(518, 1776, 1850) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 6, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(7, 7, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 2, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(10, 6, 8) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 5, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 1, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 3, 15) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(280, 960, 1000) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 1, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(10, 9, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 7, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 7, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(765, 408, 867) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(69, 92, 115) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(140, 336, 364) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(240, 144, 192) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(780, 468, 624) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 7, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3888, 4455, 5913) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 7, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 2, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(14, 8, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(204, 272, 340) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 7, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1035, 552, 1173) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(243, 324, 405) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(581, 1992, 2075) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(11, 5, 8) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(820, 492, 656) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 5, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(12, 1, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(900, 480, 1020) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(360, 864, 936) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(7, 1, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 3, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(210, 112, 238) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1000, 600, 800) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(285, 684, 741) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(65, 156, 169) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(960, 576, 768) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3792, 4345, 5767) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 5, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 2, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 2, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(12, 4, 2) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 4, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 12, 13) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 6, 9) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(160, 384, 416) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 6, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2880, 3300, 4380) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(10, 5, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(7, 24, 25) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 8, 17) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4752, 5445, 7227) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4656, 5335, 7081) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(380, 912, 988) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(350, 840, 910) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 4, 5) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 8) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(70, 42, 56) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 9, 11) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(201, 268, 335) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(170, 408, 442) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(12, 16, 20) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(305, 732, 793) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 2, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 3, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(230, 552, 598) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 1, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 9) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 5, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(235, 564, 611) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 1, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(81, 108, 135) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 2, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 5, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(21, 28, 35) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(234, 312, 390) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 1, 7) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(230, 138, 184) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(168, 576, 600) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1095, 584, 1241) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(320, 192, 256) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(8, 5, 6) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 2, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(6, 4, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(4, 1, 4) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(528, 605, 803) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(5, 4, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(15, 8, 3) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1455, 776, 1649) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(21, 72, 75) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2544, 2915, 3869) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(610, 366, 488) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(8, 10, 10) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 4, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(2, 3, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(3, 3, 1) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(219, 292, 365) == True", "def check(right_angle_triangle):\n\tassert right_angle_triangle(1, 5, 5) == False", "def check(right_angle_triangle):\n\tassert right_angle_triangle(192, 220, 292) == True"], "test_case_list": ["assert right_angle_triangle(273, 936, 975) == True", "assert right_angle_triangle(285, 380, 475) == True", "assert right_angle_triangle(705, 376, 799) == True", "assert right_angle_triangle(870, 464, 986) == True", "assert right_angle_triangle(3504, 4015, 5329) == True", "assert right_angle_triangle(525, 280, 595) == True", "assert right_angle_triangle(1536, 1760, 2336) == True", "assert right_angle_triangle(175, 600, 625) == True", "assert right_angle_triangle(455, 1560, 1625) == True", "assert right_angle_triangle(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.", "assert right_angle_triangle(3, 2, 5) == False", "assert right_angle_triangle(259, 888, 925) == True", "assert right_angle_triangle(490, 1680, 1750) == True", "assert right_angle_triangle(1185, 632, 1343) == True", "assert right_angle_triangle(6, 1, 9) == False", "assert right_angle_triangle(2256, 2585, 3431) == True", "assert right_angle_triangle(1155, 616, 1309) == True", "assert right_angle_triangle(4, 5, 5) == False", "assert right_angle_triangle(5, 7, 1) == False", "assert right_angle_triangle(5, 1, 2) == False", "assert right_angle_triangle(54, 72, 90) == True", "assert right_angle_triangle(20, 12, 16) == True", "assert right_angle_triangle(5, 5, 2) == False", "assert right_angle_triangle(2736, 3135, 4161) == True", "assert right_angle_triangle(518, 1776, 1850) == True", "assert right_angle_triangle(3, 6, 11) == False", "assert right_angle_triangle(7, 7, 5) == False", "assert right_angle_triangle(15, 2, 10) == False", "assert right_angle_triangle(10, 6, 8) == True", "assert right_angle_triangle(15, 5, 11) == False", "assert right_angle_triangle(1, 1, 2) == False", "assert right_angle_triangle(1, 3, 15) == False", "assert right_angle_triangle(280, 960, 1000) == True", "assert right_angle_triangle(6, 1, 7) == False", "assert right_angle_triangle(10, 9, 3) == False", "assert right_angle_triangle(2, 7, 6) == False", "assert right_angle_triangle(1, 7, 4) == False", "assert right_angle_triangle(765, 408, 867) == True", "assert right_angle_triangle(69, 92, 115) == True", "assert right_angle_triangle(140, 336, 364) == True", "assert right_angle_triangle(240, 144, 192) == True", "assert right_angle_triangle(2, 4, 6) == False", "assert right_angle_triangle(780, 468, 624) == True", "assert right_angle_triangle(6, 7, 6) == False", "assert right_angle_triangle(3888, 4455, 5913) == True", "assert right_angle_triangle(6, 7, 7) == False", "assert right_angle_triangle(2, 2, 2) == False", "assert right_angle_triangle(14, 8, 10) == False", "assert right_angle_triangle(204, 272, 340) == True", "assert right_angle_triangle(3, 7, 2) == False", "assert right_angle_triangle(1035, 552, 1173) == True", "assert right_angle_triangle(243, 324, 405) == True", "assert right_angle_triangle(581, 1992, 2075) == True", "assert right_angle_triangle(11, 5, 8) == False", "assert right_angle_triangle(820, 492, 656) == True", "assert right_angle_triangle(5, 4, 4) == False", "assert right_angle_triangle(4, 4, 4) == False", "assert right_angle_triangle(4, 5, 4) == False", "assert right_angle_triangle(12, 1, 2) == False", "assert right_angle_triangle(900, 480, 1020) == True", "assert right_angle_triangle(3, 3, 4) == False", "assert right_angle_triangle(360, 864, 936) == True", "assert right_angle_triangle(7, 1, 6) == False", "assert right_angle_triangle(5, 3, 2) == False", "assert right_angle_triangle(210, 112, 238) == True", "assert right_angle_triangle(1000, 600, 800) == True", "assert right_angle_triangle(285, 684, 741) == True", "assert right_angle_triangle(65, 156, 169) == True", "assert right_angle_triangle(960, 576, 768) == True", "assert right_angle_triangle(3792, 4345, 5767) == True", "assert right_angle_triangle(5, 5, 6) == False", "assert right_angle_triangle(3, 3, 3) == False", "assert right_angle_triangle(3, 2, 3) == False", "assert right_angle_triangle(1, 2, 1) == False", "assert right_angle_triangle(12, 4, 2) == False", "assert right_angle_triangle(6, 4, 1) == False", "assert right_angle_triangle(5, 12, 13) == True", "assert right_angle_triangle(2, 6, 9) == False", "assert right_angle_triangle(160, 384, 416) == True", "assert right_angle_triangle(3, 6, 3) == False", "assert right_angle_triangle(2, 4, 11) == False", "assert right_angle_triangle(2880, 3300, 4380) == True", "assert right_angle_triangle(10, 5, 7) == False", "assert right_angle_triangle(7, 24, 25) == True", "assert right_angle_triangle(15, 8, 17) == True", "assert right_angle_triangle(4752, 5445, 7227) == True", "assert right_angle_triangle(4656, 5335, 7081) == True", "assert right_angle_triangle(380, 912, 988) == True", "assert right_angle_triangle(350, 840, 910) == True", "assert right_angle_triangle(3, 4, 5) == True", "assert right_angle_triangle(2, 4, 8) == False", "assert right_angle_triangle(1, 4, 4) == False", "assert right_angle_triangle(70, 42, 56) == True", "assert right_angle_triangle(15, 9, 11) == False", "assert right_angle_triangle(201, 268, 335) == True", "assert right_angle_triangle(170, 408, 442) == True", "assert right_angle_triangle(12, 16, 20) == True", "assert right_angle_triangle(305, 732, 793) == True", "assert right_angle_triangle(2, 2, 10) == False", "assert right_angle_triangle(1, 3, 4) == False", "assert right_angle_triangle(230, 552, 598) == True", "assert right_angle_triangle(1, 1, 1) == False", "assert right_angle_triangle(3, 3, 9) == False", "assert right_angle_triangle(6, 5, 3) == False", "assert right_angle_triangle(235, 564, 611) == True", "assert right_angle_triangle(3, 1, 4) == False", "assert right_angle_triangle(81, 108, 135) == True", "assert right_angle_triangle(1, 2, 3) == False", "assert right_angle_triangle(5, 5, 4) == False", "assert right_angle_triangle(21, 28, 35) == True", "assert right_angle_triangle(234, 312, 390) == True", "assert right_angle_triangle(3, 1, 7) == False", "assert right_angle_triangle(230, 138, 184) == True", "assert right_angle_triangle(168, 576, 600) == True", "assert right_angle_triangle(1095, 584, 1241) == True", "assert right_angle_triangle(320, 192, 256) == True", "assert right_angle_triangle(8, 5, 6) == False", "assert right_angle_triangle(5, 2, 4) == False", "assert right_angle_triangle(6, 4, 4) == False", "assert right_angle_triangle(4, 1, 4) == False", "assert right_angle_triangle(528, 605, 803) == True", "assert right_angle_triangle(5, 4, 10) == False", "assert right_angle_triangle(15, 8, 3) == False", "assert right_angle_triangle(1455, 776, 1649) == True", "assert right_angle_triangle(21, 72, 75) == True", "assert right_angle_triangle(2544, 2915, 3869) == True", "assert right_angle_triangle(610, 366, 488) == True", "assert right_angle_triangle(8, 10, 10) == False", "assert right_angle_triangle(2, 4, 5) == False", "assert right_angle_triangle(2, 3, 1) == False", "assert right_angle_triangle(3, 3, 1) == False", "assert right_angle_triangle(219, 292, 365) == True", "assert right_angle_triangle(1, 5, 5) == False", "assert right_angle_triangle(192, 220, 292) == True"], "nl": "\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    ", "func": "def right_angle_triangle(a, b, c):", "examples": "Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    ", "completions": ["from typing import List\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, which means that one of the angles in the triangle is exactly 90 degrees. Return False if the triangle is not a right-angled triangle. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    '''\n    sides = [a, b, c]\n    sides.sort()  # Sort the sides in ascending order\n\n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle.\n    A right-angled triangle is a triangle in which one angle is a right angle or 90 degrees.\n    Args:\n        a (int): Length of side a\n        b (int): Length of side b\n        c (int): Length of side c\n    Returns:\n        bool: True if the triangle is right-angled, False otherwise\n    '''\n    \n    sides = [a, b, c]\n    sides.sort()\n    \n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle.\n    A right-angled triangle is a triangle in which one angle is a right angle or 90 degrees.\n    Args:\n        a (int): Length of side a\n        b (int): Length of side b\n        c (int): Length of side c\n    Returns:\n        bool: True if the triangle is right-angled, False otherwise\n    '''\n    \n    sides = [a, b, c]\n    sides.sort()\n    \n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(side1: int, side2: int, side3: int) -> bool:\n    \"\"\"\n    Check if the given sides form a right-angled triangle.\n\n    Args:\n        side1: int, length of side 1\n        side2: int, length of side 2\n        side3: int, length of side 3\n\n    Returns:\n        bool, True if the sides form a right-angled triangle, False otherwise\n    \"\"\"\n\n    # Check if the sum of the squares of two shorter sides is equal to the square of the longest side\n    sides = [side1, side2, side3]\n    sides.sort()\n    \n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    Determine if a triangle is a right-angled triangle based on the Pythagorean theorem.\n\n    Args:\n        a: int, length of side a\n        b: int, length of side b\n        c: int, length of side c\n\n    Returns:\n        bool, True if the triangle is a right-angled triangle, False otherwise\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False\n", "from typing import List\ndef right_angle_triangle(side1: int, side2: int, side3: int) -> bool:\n    \"\"\"\n    Determine if the given sides form a right-angled triangle.\n\n    Args:\n    side1: int - Length of side 1\n    side2: int - Length of side 2\n    side3: int - Length of side 3\n\n    Returns:\n    bool - True if the sides form a right-angled triangle, False otherwise\n    \"\"\"\n\n    sides = [side1, side2, side3]\n    sides.sort()\n\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle which means that one of the angles in the triangle is exactly 90 degrees, otherwise return False.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    '''\n    sides = [a, b, c]\n    sides.sort()\n    \n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle which means that one of the angles in the triangle is exactly 90 degrees, otherwise return False.\n    A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    '''\n    \n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    sides = [a, b, c]\n    sides.sort()\n    \n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle which means that one of the angles in the triangle is exactly 90 degrees, otherwise return False.\n    A right-angled triangle is a triangle in which one angle is a right angle or 90 degrees.\n    '''\n    \n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    sides = [a, b, c]\n    sides.sort()\n    \n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, which means that one of the angles in the triangle is exactly 90 degrees. Return False if the triangle is not a right-angled triangle. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    '''\n    sides = [a, b, c]\n    sides.sort()\n    \n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False\n"], "plans": ["requirement pool:\n- Efficiently determine if a triangle is right-angled\n- Accurate angle calculations for different triangle configurations\n- Handle various triangle side lengths\nWe will design a simple static Python function using basic mathematical principles to determine if a triangle is right-angled.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A right-angled triangle is a triangle in which one angle is a right angle or 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is to design a simple static Python function using basic mathematical principles to determine if a triangle is right-angled, the logic should involve checking if the square of the longest side is equal to the sum of the squares of the other two sides.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: In this case, 3^2 + 4^2 = 5^2, which satisfies the condition for a right-angled triangle.\n    right_angle_triangle(1, 2, 3) = False\n    Explanation: In this case, 1^2 + 2^2 is not equal to 3^2, so it does not form a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should be sufficient to determine if the triangle is right-angled.\n", "requirement pool:\n- Implement a function to calculate if a triangle is right-angled\n- Ensure the function handles edge cases like negative values\n- Optimize the algorithm for quick response\nWe will design a simple static Python function using basic mathematical principles to determine if a triangle is right-angled.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A right-angled triangle is a triangle in which one angle is a right angle or 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the square of the longest side is equal to the sum of the squares of the other two sides.\n\n```python\ndef right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    \n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False\n```\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: In this case, 5^2 = 3^2 + 4^2, so it forms a right-angled triangle.\n    \n    right_angle_triangle(1, 2, 3) = False\n    Explanation: In this case, 3^2 is not equal to 1^2 + 2^2, so it does not form a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.\n", "requirement pool:\n- Accurately determine if a triangle is right-angled\n- Handle edge cases like equal side lengths\n- Optimize for speed in calculations\nWe will design a simple static Python function using basic mathematical principles to determine if a triangle is right-angled.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A right-angled triangle is a triangle where one of the angles is exactly 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the square of the longest side is equal to the sum of the squares of the other two sides.\n\n```python\ndef right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    \n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False\n```\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: In this case, 5^2 = 3^2 + 4^2, which satisfies the condition for a right-angled triangle.\n    \n    right_angle_triangle(1, 2, 3) = False\n    Explanation: In this case, 3^2 is not equal to 1^2 + 2^2, so it does not form a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.\n", "requirement analysis:\nThe function should take three side lengths as input and determine if they form a right-angled triangle by checking the Pythagorean theorem. It should return True if the triangle is right-angled, False otherwise.\nrequirement pool:\n- Implement the Pythagorean theorem check\n- Handle edge cases like negative side lengths or non-triangular inputs\n- Optimize the function for performance\nWe will use the Pythagorean theorem to determine if the given sides form a right-angled triangle. No need for any external libraries, as the calculation is straightforward.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A triangle with one angle exactly 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using the Pythagorean theorem, the logic is straightforward:\n    - Check if the sum of the squares of two shorter sides is equal to the square of the longest side.\n    - If the condition is met, return True; otherwise, return False.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: This is a classic example of a right-angled triangle with sides 3, 4, and 5.\n    \n    right_angle_triangle(5, 12, 13) = True\n    Explanation: Another example of a right-angled triangle with sides 5, 12, and 13.\n    \n    right_angle_triangle(1, 1, 1) = False\n    Explanation: In this case, all sides are equal, forming an equilateral triangle which is not a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The Pythagorean theorem covers all cases of right-angled triangles.\n", "requirement pool:\n- Implement a function to check right-angled triangles\n- Ensure the function handles edge cases and invalid inputs\n- Optimize the function for performance and scalability\nWe will design a simple static Python function using basic arithmetic operations to efficiently determine if a triangle is right-angled.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: The core concept here is to determine if a triangle is a right-angled triangle based on the Pythagorean theorem.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic is already provided in the plan. It checks if the triangle with sides a, b, and c is a right-angled triangle by comparing the squares of the sides.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: This is a classic example of a right-angled triangle with sides 3, 4, and 5 satisfying the Pythagorean theorem.\n    right_angle_triangle(5, 12, 13) = True\n    Explanation: Another example of a right-angled triangle with sides 5, 12, and 13.\n    right_angle_triangle(1, 1, 1) = False\n    Explanation: In this case, the sides do not form a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the function is sufficient to determine if a triangle is right-angled.\n", "requirement pool:\n- Implement a function to check if the sides form a right-angled triangle\n- Handle edge cases like negative side lengths or non-triangular inputs\n- Optimize the algorithm for performance and accuracy\nWe will design a simple static Python function using basic mathematical principles to determine if the given sides form a right-angled triangle.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: It refers to a triangle where one of the angles is exactly 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: This is a classic example of a right-angled triangle with sides 3, 4, and 5.\n    \n    right_angle_triangle(5, 12, 13) = True\n    Explanation: Another example of a right-angled triangle with sides 5, 12, and 13.\n    \n    right_angle_triangle(1, 1, 1) = False\n    Explanation: In this case, the sides do not form a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to determine a right-angled triangle is straightforward based on the input sides.\n", "requirement pool:\n- Implement right angle calculation logic\n- Ensure input validation for triangle sides\n- Optimize algorithm for performance\nWe will use basic trigonometry principles to determine if the given triangle sides form a right-angled triangle.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A triangle with one angle measuring 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'exactly': Indicates the precise angle of 90 degrees.\n\n# [code logic]\n    Check if the square of the longest side is equal to the sum of the squares of the other two sides.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: The sides 3, 4, and 5 form a right-angled triangle (3^2 + 4^2 = 5^2).\n    right_angle_triangle(1, 2, 3) = False\n    Explanation: The sides 1, 2, and 3 do not form a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for a right-angled triangle covers all scenarios.\n", "requirement pool:\n- Implement right angle triangle detection logic\n- Ensure input validation for side lengths\n- Optimize algorithm for performance\nWe will use basic trigonometry principles to determine if the given sides form a right-angled triangle.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A triangle with one angle measuring 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'exactly': Indicates the precise measurement of 90 degrees.\n\n# [code logic]\n    Check if the square of the longest side is equal to the sum of the squares of the other two sides.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: This is a Pythagorean triple where 3^2 + 4^2 = 5^2, forming a right-angled triangle.\n    right_angle_triangle(1, 2, 3) = False\n    Explanation: In this case, the sides do not satisfy the Pythagorean theorem, so it does not form a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for a right-angled triangle covers all scenarios.\n", "requirement pool:\n- Implement accurate angle calculation logic\n- Ensure efficient processing of input data\n- Create clear and concise output messages\nWe will use basic trigonometry principles to determine if the given sides form a right-angled triangle.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A triangle with one angle measuring 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'exactly': Indicates the precise angle of 90 degrees.\n\n# [code logic]\n    Check if the square of the longest side is equal to the sum of the squares of the other two sides.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: This is a Pythagorean triple where 3^2 + 4^2 = 5^2, forming a right-angled triangle.\n    right_angle_triangle(1, 2, 3) = False\n    Explanation: In this case, the sides do not satisfy the Pythagorean theorem, so it does not form a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to check for a right-angled triangle covers all scenarios.\n", "requirement pool:\n- Accurately determine if a triangle is right-angled\n- Handle edge cases like equal side lengths\n- Optimize for speed in calculations\nWe will design a simple static Python function using basic mathematical principles to determine if a triangle is right-angled.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'right-angled triangle'\n    Explanation: A right-angled triangle is a triangle in which one angle is a right angle or 90 degrees.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is to design a simple static Python function using basic mathematical principles to determine if a triangle is right-angled, the logic should involve checking if the square of the longest side is equal to the sum of the squares of the other two sides.\n\n# [edge case] \n    right_angle_triangle(3, 4, 5) = True\n    Explanation: In this case, 3^2 + 4^2 = 5^2, which satisfies the Pythagorean theorem and forms a right-angled triangle.\n    right_angle_triangle(1, 2, 3) = False\n    Explanation: In this case, 1^2 + 2^2 is not equal to 3^2, so it does not form a right-angled triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of checking the Pythagorean theorem covers all cases.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [134, 134, 134, 134, 134, 134, 134, 134, 134, 134], "completion": "from typing import List\n## main.py\n\ndef right_angle_triangle(a: int, b: int, c: int) -> bool:\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, which means that one of the angles in the triangle is exactly 90 degrees. Return False if the triangle is not a right-angled triangle. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\n    '''\n    sides = [a, b, c]\n    sides.sort()\n    \n    if sides[2]**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False\n", "passed": true, "pass": true, "pass_num": 10, "round": 111, "repair_prompt": ["def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, which means that one of the angles in the triangle is exactly 90 degrees. Return False if the triangle is not a right-angled triangle. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "Given the lengths of the three sides of a triangle. Determine if the three sides form a right-angled triangle where one angle is exactly 90 degrees.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False", "def right_angle_triangle(a, b, c):\n    '''Given the lengths of the three sides of a triangle, return True if the three sides form a right-angled triangle which means that one of the angles in the triangle is exactly 90 degrees, otherwise return False. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''"], "mutate_method": "expand_one2two", "parent_index": 111}
