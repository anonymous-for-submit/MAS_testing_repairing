{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to allocate all songs into two concerts such that each song should belong to precisely one concert.\n\nHe aims to make the absolute difference of concerts' durations as minimal as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to allocate all songs into two concerts such that each song should belong to precisely one concert.\n\nHe aims to make the absolute difference of concerts' durations as minimal as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing. He has a one-minute song, b two-minute songs, and c three-minute songs. He wants to allocate all these songs into two concerts such that each song belongs to exactly one concert. He aims to make the absolute difference of the concerts' durations as small as possible. The duration of a concert is the sum of the durations of all songs in that concert. Can you help Luntik find the smallest possible difference in minutes between the two concerts' durations? Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has songs of durations a (one-minute), b (two-minute), and c (three-minute). He wants to allocate all songs into two concerts with minimal absolute difference in durations. Find the minimal possible difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\nimport sys\n\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts' durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concerts' durations.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n\n    for i in range(4):\n        for j in range(4):\n            duration1 = i * 1 + (i // 1) * 2 + (i // 3) * 3\n            duration2 = total_duration - duration1\n            min_diff = min(min_diff, abs(duration1 - duration2))\n\n    return min_diff\n\n# Read the number of test cases\nt = int(sys.stdin.readline())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, sys.stdin.readline().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # If the total duration is even, we can perfectly balance it\n    if total_duration % 2 == 0:\n        return 0\n    \n    # If the total duration is odd, we need to find the minimal difference\n    # We will try to balance the durations by considering the possible combinations\n    \n    # Calculate the maximum possible difference if we try to balance the durations\n    max_possible_difference = total_duration // 2\n    \n    # Initialize the minimal difference to a large number\n    minimal_difference = float('inf')\n    \n    # Try to balance the durations by considering different combinations\n    for i in range(min(a, b, c) + 1):\n        for j in range(min(a, b, c) + 1):\n            for k in range(min(a, b, c) + 1):\n                if i + j + k <= min(a, b, c):\n                    duration1 = (a - i) * 1 + (b - j) * 2 + (c - k) * 3\n                    duration2 = total_duration - duration1\n                    difference = abs(duration1 - duration2)\n                    minimal_difference = min(minimal_difference, difference)\n    \n    return minimal_difference\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n    \n    # Try all combinations to find the minimal difference\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if (a - i) >= 0 and (b - j) >= 0 and (c - k) >= 0:\n                    duration1 = (a - i) + 2 * (b - j) + 3 * (c - k)\n                    duration2 = total_duration - duration1\n                    min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_min_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): The number of one-minute songs.\n        b (int): The number of two-minute songs.\n        c (int): The number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n    \n    # Try to balance the load between two concerts\n    for i in range(3):\n        for j in range(3):\n            duration1 = (a - i) + 2 * (b - j) + 3 * (c - (3 - i - j) // 2)\n            duration2 = total_duration - duration1\n            min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    return min_diff\n\n# Interface for the program\nt = int(input().strip())\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef find_min_difference(a: int, b: int, c: int) -> int:\n    total_duration = a + 2 * b + 3 * c\n    max_possible_duration = total_duration // 2\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Use a list to store all possible sums\n    possible_sums = [0]\n    \n    # Add all possible sums of songs in one concert\n    for _ in range(a):\n        new_sums = [s + 1 for s in possible_sums]\n        possible_sums.extend(new_sums)\n    for _ in range(b):\n        new_sums = [s + 2 for s in possible_sums]\n        possible_sums.extend(new_sums)\n    for _ in range(c):\n        new_sums = [s + 3 for s in possible_sums]\n        possible_sums.extend(new_sums)\n    \n    # Find the closest sum to half of the total duration\n    closest_sum = None\n    for s in possible_sums:\n        if s <= max_possible_duration:\n            closest_sum = s\n        else:\n            break\n    \n    # Calculate the absolute difference\n    min_diff = min(min_diff, abs(total_duration - 2 * closest_sum))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input().strip())\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_min_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the durations of two concerts.\n    \n    Args:\n        a (int): The number of one-minute songs.\n        b (int): The number of two-minute songs.\n        c (int): The number of three-minute songs.\n        \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n    \n    # Try all possible splits and find the minimal difference\n    for i in range(total_duration + 1):\n        duration1 = i\n        duration2 = total_duration - i\n        diff = abs(duration1 - duration2)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    # Sort the durations of the songs\n    songs = sorted([a, b, c])\n    \n    # Calculate the total duration of the two concerts\n    total_duration = sum(songs)\n    concert1_duration = songs[0] + songs[1]\n    concert2_duration = total_duration - concert1_duration\n    \n    # Return the absolute difference between the two concert durations\n    return abs(concert1_duration - concert2_duration)\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the durations of two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Calculate the total duration\n    total_duration = a + 2 * b + 3 * c\n    \n    # If the total duration is even, we can perfectly balance it\n    if total_duration % 2 == 0:\n        return 0\n    \n    # If the total duration is odd, the best we can do is a difference of 1\n    return 1\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    This function calculates the minimal possible difference in durations between the two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n        \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing the songs into two groups\n    for i in range(4):\n        for j in range(4):\n            duration1 = total_duration // 2 + (total_duration % 2) * (i % 2)\n            duration2 = total_duration - duration1\n            diff = abs(duration1 - duration2)\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in the duration of two concerts given a set of songs with different durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in the duration of the two concerts.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    min_diff = float('inf')\n\n    for i in range(c + 1):\n        for j in range(b + 1):\n            for k in range(a + 1):\n                if i + j + k <= (a + b + c) // 2:\n                    duration1 = i * 3 + j * 2 + k * 1\n                    duration2 = total_duration - duration1\n                    diff = abs(duration1 - duration2)\n                    min_diff = min(min_diff, diff)\n    return min_diff\n\n# Read the number of test cases from stdin\nt = int(sys.stdin.readline().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires finding the minimal possible difference in the durations of two concerts given a set of songs with different durations. The solution involves distributing the songs between two concerts to minimize the absolute difference in their total durations. This can be achieved by trying to balance the total duration of each type of song between the two concerts.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to minimize the absolute difference in concert durations.\nTo solve the problem of minimizing the absolute difference in concert durations, we will use a greedy approach. The idea is to distribute the songs as evenly as possible between the two concerts. We will calculate the total duration of all songs and then try to balance the durations by assigning songs to the two concerts. This will ensure that the absolute difference in the durations of the two concerts is minimized.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'Minimizing the absolute difference': The goal is to distribute the songs in such a way that the difference between the total durations of the two concerts is as small as possible.\n    Explanation: This involves balancing the total duration of songs between the two concerts to achieve the smallest possible difference in their lengths.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as minimal as possible': This indicates that we need to find the smallest possible difference between the two concerts' durations.\n\n# [code logic]\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Determine the optimal way to distribute the songs between the two concerts to minimize the difference.\n    3. Return the minimal possible difference in minutes between the concerts' durations.\n\n# [edge case] \n    Edge Case 1:\n    Input: [1, 1, 1]\n    Explanation: The total duration is 1*1 + 2*1 + 3*1 = 6 minutes. By assigning one one-minute song, one two-minute song, and one three-minute song to each concert, the difference will be 0.\n    Expected Output: 0\n\n    Edge Case 2:\n    Input: [2, 1, 3]\n    Explanation: The total duration is 2*2 + 1*1 + 3*3 = 14 minutes. A possible distribution is to put two one-minute songs, one two-minute song, and three three-minute songs into one concert, and the rest into another. The difference will be 1.\n    Expected Output: 1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic should be sufficient to handle the given constraints.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in the durations of two concerts given a set of songs with different durations. The solution involves distributing the songs between two concerts to minimize the absolute difference in their total durations. This can be approached by trying to balance the total duration of the songs in each concert as evenly as possible.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations\n- Ensure the function can handle multiple test cases efficiently\n- Develop a user interface for inputting the number of test cases and song durations\n- Include a clear output format for displaying the minimal difference for each test case\n- Optimize the algorithm to handle large inputs within reasonable time limits\nTo solve the problem of minimizing the absolute difference in the durations of two concerts given a set of songs with different durations, we can use a greedy approach. The idea is to try to balance the total duration of the songs in each concert as evenly as possible. We will sort the songs by their durations and then try to distribute them between the two concerts to achieve the minimal difference. This approach ensures that we are trying to balance the durations as evenly as possible, which will lead to the minimal possible difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'Minimizing the absolute difference': The goal is to make the two concerts as balanced as possible in terms of the total duration of the songs.\n    Explanation: This involves distributing the songs such that the sum of the durations in each concert is as close as possible.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    'as minimal as possible': Indicates that we need to find the smallest possible difference between the two concerts.\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts, trying to balance the durations as evenly as possible.\n    3. Calculate the absolute difference between the two concert durations.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Edge case 1:\n    Input: [1, 1, 1]\n    Explanation: The total duration is 3, which can be evenly distributed into two concerts of 1.5 minutes each. The absolute difference is |1.5 - 1.5| = 0.\n    Edge case 2:\n    Input: [2, 1, 3]\n    Explanation: The total duration is 6. One optimal distribution is to put two one-minute songs and a three-minute song in one concert, and the remaining one-minute song and two-minute song in the other concert. The durations will be 4 and 2, respectively, leading to an absolute difference of |4 - 2| = 2.\n    Edge case 3:\n    Input: [5, 5, 5]\n    Explanation: The total duration is 15, which can be evenly distributed into two concerts of 7.5 minutes each. The absolute difference is |7.5 - 7.5| = 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases in this problem, as the greedy approach inherently handles cases where the total duration can be evenly divided. However, for a more robust solution, we could include checks to ensure that the distribution is optimal and to handle any potential edge cases not covered by the greedy approach.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in the durations of two concerts given a set of songs with different durations. The solution involves distributing the songs between two concerts to minimize the absolute difference in their total durations. This can be approached by trying to balance the total duration of the songs in each concert as evenly as possible.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations.\n- Ensure the function can handle multiple test cases efficiently.\n- Develop a strategy to distribute songs between two concerts to minimize the difference in total duration.\n- Optimize the algorithm to handle large inputs within reasonable time constraints.\nTo solve the problem of distributing songs between two concerts to minimize the difference in total duration, we will use a greedy approach. The idea is to first try to balance the total duration of the songs in each concert as evenly as possible. If we cannot balance perfectly, we will then try to minimize the difference by adjusting the distribution slightly. This approach will be implemented in a Python function that reads multiple test cases and outputs the minimal possible difference in minutes between the concerts' durations for each case.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'Greedy Algorithm': This approach involves making the best choice at each step to achieve the overall optimal solution. In this case, the goal is to balance the total duration of the songs between two concerts as evenly as possible.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    'as minimal as possible': This indicates that we need to find the smallest possible difference between the two concerts' durations.\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs between two concerts, prioritizing the songs with the shortest duration to balance the load.\n    3. Calculate the difference between the two concerts' durations.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 3, and we can distribute the songs evenly between two concerts, resulting in a difference of 0.\n    search([2, 1, 3]) = 1\n    explanation: The total duration is 12. One optimal distribution is to put 2 one-minute songs, 1 two-minute song, and 3 three-minute songs into one concert, and the remaining songs into the other concert. The difference in this case is 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach will naturally handle cases where the total number of songs is not perfectly divisible by 2.\n\n# [code logic]\n    Here's a Python function to solve the problem:\n\n    ```python\n    def min_difference(a, b, c):\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        # Try all combinations to find the minimal difference\n        for i in range(3):\n            for j in range(3):\n                for k in range(3):\n                    if (a - i) >= 0 and (b - j) >= 0 and (c - k) >= 0:\n                        duration1 = (a - i) + 2*(b - j) + 3*(c - k)\n                        duration2 = total_duration - duration1\n                        min_diff = min(min_diff, abs(duration1 - duration2))\n        \n        return min_diff\n\n    # Example usage:\n    print(min_difference(1, 1, 1))  # Output: 0\n    print(min_difference(2, 1, 3))  # Output: 1\n    ```\n\n    This function iterates through all possible distributions of the songs and calculates the difference for each distribution, keeping track of the minimal difference found.\n", "requirement analysis:\nThe problem requires finding the optimal way to distribute songs into two concerts to minimize the absolute difference in their durations. This is a classic optimization problem that can be approached using a greedy algorithm or dynamic programming, but given the constraints, a simple approach of trying to balance the load between the two concerts should suffice.\nrequirement pool:\n- Implement a function to read input from stdin\n- Implement a function to calculate the smallest possible difference in concert durations\n- Implement a function to output the result to stdout\n- Ensure the solution is efficient and can handle up to 1000 test cases\n- Provide a clear and concise output format\nTo solve this problem, we will use a greedy algorithm approach. The idea is to first calculate the total duration of all songs, then try to balance the load between two concerts by assigning songs to each concert in a way that minimizes the absolute difference in their durations. We will iterate through all possible combinations of songs to assign to the two concerts and keep track of the smallest difference found.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'Greedy Algorithm': This is a method of solving optimization problems by taking the best choice at each step, with the hope of finding a global optimum.\n    Explanation: In this problem, Luntik wants to allocate his songs into two concerts to minimize the absolute difference in their durations. By using a greedy approach, we can try to balance the load between the two concerts by assigning songs in a way that results in the smallest possible difference.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': This means that we need to find the smallest possible difference between the two concerts' durations.\n\n# [code logic]\n    To implement the solution, we need to:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to try to balance the load between two concerts.\n    3. Iterate through all possible combinations of songs to assign to the two concerts.\n    4. Keep track of the smallest difference found.\n    5. Return the smallest possible difference.\n\n# [edge case] \n    Edge Case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The total duration is 1*1 + 2*1 + 3*1 = 6 minutes. The best way to allocate these songs is to put one 3-minute song in one concert and the other two songs in the other concert. This results in a difference of |3 - (1+2+2)| = |3 - 5| = 2 minutes.\n    Expected Output: 2\n\n    Edge Case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The total duration is 2*1 + 2*2 + 2*3 = 12 minutes. The best way to allocate these songs is to put two 3-minute songs and one 2-minute song in one concert, and the other three songs in the other concert. This results in a difference of |(2+2+3) - (1+1+1+1+1+1)| = |7 - 6| = 1 minute.\n    Expected Output: 1\n\n    Edge Case 3:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There are ten one-minute songs, and no two-minute or three-minute songs. The total duration is 1*10 = 10 minutes. The best way to allocate these songs is to put all of them in one concert. The other concert will be empty, resulting in a difference of 10 - 0 = 10 minutes.\n    Expected Output: 10\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach will naturally handle cases where there are no songs of a certain duration.\n", "requirement analysis:\nThe problem requires finding the optimal way to distribute songs into two concerts to minimize the absolute difference in their durations. This is a classic problem of partitioning a set to minimize the difference between the sums of two subsets. The solution involves trying all possible combinations of songs in the two concerts and calculating the differences to find the smallest one.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs\n- Ensure the function can handle large inputs efficiently\n- Implement input/output handling to read from standard input and write to standard output\n- Ensure the program can handle multiple test cases\n- Optimize the algorithm to ensure it runs within the time limits for large inputs\nTo solve the problem of distributing songs into two concerts to minimize the absolute difference in their durations, we can use a dynamic programming approach. This approach will involve calculating all possible sums of songs in one concert and then finding the closest sum to half of the total duration for the other concert. The smallest difference will be the absolute difference between these two sums.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts to minimize the difference in their total durations.\n    'absolute difference': means the smallest possible difference between the two concerts' durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means the goal is to make the difference as small as it can be.\n\n# [code logic]\n    To implement the solution, we need to consider the following steps:\n    1. Calculate the total duration of all songs.\n    2. Use dynamic programming to find all possible sums of songs in one concert.\n    3. Find the closest sum to half of the total duration for the other concert.\n    4. Calculate the absolute difference between these two sums.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The total duration is 1*1 + 2*1 + 3*1 = 6 minutes. The optimal distribution would be to put one 3-minute song in one concert and the other two songs in the other concert, resulting in a difference of |3 - (1+2+2)| = |3 - 5| = 2 minutes.\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The total duration is 2*1 + 2*2 + 2*3 = 12 minutes. The optimal distribution would be to put two 3-minute songs and one 2-minute song in one concert, and the remaining three songs in the other concert, resulting in a difference of |(2+2+3) - (1+1+1)| = |7 - 3| = 4 minutes.\n\n    Edge case 3:\n    Input: a = 3, b = 0, c = 0\n    Explanation: There are three one-minute songs. The total duration is 3*1 = 3 minutes. The optimal distribution would be to put all three songs in one concert, resulting in a difference of |3 - 0| = 3 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic can handle cases with zero or one type of song by simply assigning all songs of that type to one concert.\n", "requirement analysis:\nThe problem requires finding the optimal way to distribute songs into two concerts to minimize the absolute difference in their durations. This is a classic optimization problem that can be approached using a combination of greedy and binary search techniques. The input consists of multiple test cases, each with a specific number of one-minute, two-minute, and three-minute songs. The goal is to output the smallest possible difference in minutes between the durations of the two concerts.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs into two concerts.\n- Ensure the solution is efficient enough to handle up to 1000 test cases.\n- Develop a user interface for inputting the number of songs and outputting the result.\n- Implement error handling for invalid inputs.\n- Optimize the algorithm to ensure it runs within the time constraints for large inputs.\nTo solve this problem, we will use a combination of greedy and binary search techniques. The greedy approach will help us allocate songs to two concerts in a way that minimizes the difference in their durations. We will first calculate the total duration of all songs and then use a binary search to find the optimal way to split these songs into two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'Greedy Algorithm': This is a problem-solving technique that makes the locally optimal choice at each step with the hope of finding a global optimum.\n    Explanation: In this problem, we aim to minimize the absolute difference between the durations of two concerts. By using a greedy approach, we can allocate songs to concerts in a way that balances their durations as evenly as possible.\n\n# [phrase showing quantity relationship]\n    'as small as possible': This phrase indicates that we need to find the smallest possible difference between the two concerts' durations.\n    Explanation: We need to ensure that the difference between the total durations of the two concerts is minimized.\n\n# [degree adverb] \n    'as small as possible': This adverb emphasizes the need to find the smallest possible difference.\n    Explanation: We need to find the smallest absolute difference between the durations of the two concerts.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a binary search to find the optimal way to split these songs into two concerts.\n    3. For each test case, output the minimal possible difference in minutes between the concerts' durations.\n\n# [edge case] \n    Edge Case 1: All songs are of the same duration (e.g., a = 3, b = 0, c = 0)\n    Expected Output: 0\n    Explanation: Since all songs are of the same duration, we can simply divide them equally between the two concerts, resulting in a difference of 0.\n\n    Edge Case 2: One type of song dominates the others (e.g., a = 10^9, b = 0, c = 0)\n    Expected Output: The duration of one song\n    Explanation: If one type of song dominates, the difference will be the duration of that single song, as we can only allocate one type of song to one concert.\n\n    Edge Case 3: Songs are evenly distributed (e.g., a = 3, b = 3, c = 3)\n    Expected Output: 0\n    Explanation: With evenly distributed songs, we can allocate them equally between the two concerts, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic can handle these cases by considering the distribution of songs and their durations.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in the total duration of two concerts given a set of songs with different durations. The solution should be efficient and handle multiple test cases.\nrequirement pool:\n- Implement an efficient algorithm to minimize the difference in concert durations.\n- Ensure the solution can handle multiple test cases efficiently.\n- Provide a clear and concise output for each test case.\n- Include input validation to handle edge cases.\nTo solve this problem efficiently, we will use a greedy approach to allocate songs to two concerts. The goal is to minimize the absolute difference in the total duration of the two concerts. We will sort the songs by their durations and then use a two-pointer technique to allocate them to the two concerts. This approach ensures that we minimize the difference by always trying to balance the durations between the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'minimal absolute difference': means the smallest difference between the total durations of the two concerts.\n    'greedy approach': means selecting the best option at each step without considering the overall result.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case:\n    1. Sort the durations of the songs.\n    2. Use two pointers to allocate songs to two concerts.\n    3. Calculate the difference between the total durations of the two concerts.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    search([1, 2, 3]) = 0\n    explanation: The optimal allocation is to put one-minute and two-minute songs in one concert and three-minute songs in the other, resulting in a difference of 0.\n    search([1, 2, 4]) = 1\n    explanation: The optimal allocation is to put one-minute and two-minute songs in one concert and four-minute songs in the other, resulting in a difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach ensures that we find the minimal possible difference.\n\n# [code logic]\n    For each test case:\n    1. Sort the durations of the songs: a, b, c.\n    2. Calculate the total duration of the two concerts:\n        - Concert 1: a + b\n        - Concert 2: a + c\n    3. Return the absolute difference between the two concert durations.\n\n# [edge case] \n    search([1, 2, 3]) = 0\n    explanation: The optimal allocation is to put one-minute and two-minute songs in one concert and three-minute songs in the other, resulting in a difference of 0.\n    search([1, 2, 4]) = 1\n    explanation: The optimal allocation is to put one-minute and two-minute songs in one concert and four-minute songs in the other, resulting in a difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach ensures that we find the minimal possible difference.\n", "requirement analysis:\nThe requirements involve finding the minimal possible difference in the total duration of two concerts given a set of songs with different durations. The solution should be efficient and handle multiple test cases. The input consists of the number of test cases followed by the number of each type of song. The output should be the minimal possible difference in minutes between the two concerts.\nrequirement pool:\n- Implement an efficient algorithm to find the minimal difference.\n- Ensure the solution can handle multiple test cases efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the solution for large inputs.\n- Improve user interface for better usability.\nWe will use a combination of greedy algorithm and dynamic programming to solve this problem efficiently. The greedy approach will first try to balance the total duration of the two concerts by evenly distributing the songs with the same duration. If that's not possible, we will use dynamic programming to find the optimal allocation that minimizes the absolute difference in durations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'minimal absolute difference': means the smallest possible difference between the two concerts' total durations.\n    'evenly distribute': means to allocate songs with the same duration as much as possible between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means the smallest possible difference\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to try to balance the total duration of the two concerts by evenly distributing the songs with the same duration.\n    3. If the greedy approach does not balance the durations perfectly, use dynamic programming to find the optimal allocation that minimizes the absolute difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: All songs are one minute long, so they can be evenly distributed between the two concerts, resulting in a difference of 0.\n    search([2, 1, 3]) = 1\n    explanation: The optimal distribution would be to put two two-minute songs in one concert and one three-minute song and one one-minute song in the other, resulting in a difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach will work perfectly for this case.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts given a set of songs with different durations. The solution should be efficient and handle multiple test cases. The input consists of the number of test cases followed by the number of each type of song. The output should be the minimal difference for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal difference between the concert durations.\n- Ensure the solution can handle up to 1000 test cases efficiently.\n- Optimize the allocation of songs to concerts to minimize the difference.\n- Provide clear and concise output for each test case.\nTo solve this problem efficiently, we will use a dynamic programming approach to minimize the difference in concert durations. The idea is to calculate the total possible durations of the concerts and then find the minimal difference between these durations. We will use Python's built-in functions and libraries to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'minimal absolute difference': means the smallest difference between the two concerts' durations.\n    'allocate songs': means to distribute the songs into two groups with equal or as close to equal duration as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve this problem, we need to consider the following steps:\n    1. Calculate the total duration of all songs.\n    2. Use dynamic programming to find the minimal possible difference in durations between the two concerts.\n    3. Output the minimal difference for each test case.\n\n# [edge case] \n    Edge case 1:\n    Input: 1 1 1\n    Explanation: The total duration is 3 minutes. The two concerts can have durations of 1 and 2 minutes, respectively, resulting in a difference of 1 minute.\n    Edge case 2:\n    Input: 2 1 3\n    Explanation: The total duration is 6 minutes. The two concerts can have durations of 3 and 3 minutes, respectively, resulting in a difference of 0 minutes.\n    Edge case 3:\n    Input: 5 5 5\n    Explanation: The total duration is 15 minutes. The two concerts can have durations of 7 and 8 minutes, respectively, resulting in a difference of 1 minute.\n    Edge case 4:\n    Input: 1 1 2\n    Explanation: The total duration is 4 minutes. The two concerts can have durations of 2 and 2 minutes, respectively, resulting in a difference of 0 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic can handle all the given edge cases correctly.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in the duration of two concerts given a set of songs with different durations. The solution involves distributing the songs between two concerts to minimize the absolute difference in their total durations. This can be approached by trying to balance the total duration of the songs in each concert as evenly as possible.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations\n- Ensure the function can handle multiple test cases efficiently\n- Optimize the algorithm to handle large input sizes within reasonable time limits\nTo solve the problem of minimizing the absolute difference in the duration of two concerts given a set of songs with different durations, we can use a greedy approach. The idea is to try to balance the total duration of the songs in each concert as evenly as possible. We will sort the songs by their durations and then try to distribute them between the two concerts to achieve the minimal difference. This approach ensures that we are trying to balance the durations as evenly as possible, which will lead to the minimal possible difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'Minimizing the absolute difference': The goal is to make the two concerts as balanced as possible in terms of the total duration of the songs.\n    Explanation: This involves distributing the songs such that the sum of the durations in each concert is as close as possible.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    'as minimal as possible': Indicates that we need to find the smallest possible difference between the two concerts.\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts, trying to balance the durations as evenly as possible.\n    3. Calculate the absolute difference between the two concert durations.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Edge case 1: \n    Input: [1, 1, 1]\n    Explanation: The total duration is 3 minutes. We can distribute the songs as [1, 1] and [1], resulting in a difference of |3-3| = 0.\n    Edge case 2:\n    Input: [2, 1, 3]\n    Explanation: The total duration is 6 minutes. A possible distribution is [2, 1, 3] and [], resulting in a difference of |6-0| = 6. However, a better distribution might be [2, 3] and [1], resulting in a difference of |5-1| = 4. The minimal difference is 1, which can be achieved by [2, 1] and [3].\n    Edge case 3:\n    Input: [5, 5, 5]\n    Explanation: The total duration is 15 minutes. A possible distribution is [5, 5, 5] and [], resulting in a difference of |15-0| = 15. However, a better distribution might be [5, 5] and [5, 5], resulting in a difference of |10-10| = 0. The minimal difference is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach described above will naturally find the optimal distribution for each test case.\n"], "scores": [], "pass_results": [false, true, false, true, true, true, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 72, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "parent_index": 31}
