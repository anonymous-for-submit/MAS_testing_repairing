{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song. Consider all possible distributions of songs to achieve the optimal solution.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song. Consider all possible distributions of songs to achieve the optimal solution.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing. He has a one-minute song, b two-minute songs, and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included in exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song. Consider all possible distributions to achieve the optimal solution.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has songs of durations a (one-minute), b (two-minute), and c (three-minute). He needs to distribute these songs into two concerts with the goal of minimizing the absolute difference in their durations. Find the smallest possible difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Finds the minimal possible difference in minutes between the durations of two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of two concerts.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    max_possible_duration = total_duration // 2\n    min_diff = float('inf')\n    \n    for i in range(max_possible_duration + 1):\n        other_duration = total_duration - i\n        diff = abs(i - other_duration)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input interface\nn = int(input())\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n\n# Output interface\nfor _ in range(n):\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs in two concerts\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                for l in range(4):\n                    for m in range(4):\n                        for n in range(4):\n                            for o in range(4):\n                                for p in range(4):\n                                    for q in range(4):\n                                        for r in range(4):\n                                            for s in range(4):\n                                                for t in range(4):\n                                                    for u in range(4):\n                                                        for v in range(4):\n                                                            for w in range(4):\n                                                                for x in range(4):\n                                                                    for y in range(4):\n                                                                        for z in range(4):\n                                                                            duration1 = (i + 2 * j + 3 * k) * 1 + (l + 2 * m + 3 * n) * 2 + (o + 2 * p + 3 * q) * 3\n                                                                            duration2 = total_duration - duration1\n                                                                            min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    return min_diff\n\n# Input interface\nn = int(input())\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n\n# Output interface\nresult = find_minimal_difference(a, b, c)\nprint(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Finds the minimal possible difference in minutes between the durations of two concerts given a set of songs with different durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    min_diff = float('inf')\n    \n    # Iterate through all possible distributions of songs into two concerts\n    for i in range(1 << 3):  # There are 2^3 = 8 possible distributions\n        concert1_duration = 0\n        concert2_duration = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                concert1_duration += (j + 1) * [1, 2, 3][j]\n            else:\n                concert2_duration += (j + 1) * [1, 2, 3][j]\n        \n        diff = abs(concert1_duration - concert2_duration)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    total_duration = a * 1 + b * 2 + c * 3\n    max_possible_duration = total_duration // 2\n    dp = {0}\n    for _ in range(a):\n        dp.update({x + 1 for x in dp})\n    for _ in range(b):\n        dp.update({x + 2 for x in dp})\n    for _ in range(c):\n        dp.update({x + 3 for x in dp})\n    min_diff = float('inf')\n    for duration in dp:\n        diff = abs(duration - (total_duration - duration))\n        min_diff = min(min_diff, diff)\n    return min_diff\n\n# Input interface\ninput = sys.stdin.readline\nn = int(input())\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n\n# Output interface\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total number of songs\n    total_songs = a + b + c\n    # Calculate the target sum for each concert\n    target_sum = total_songs // 2\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Use bitmask to explore all possible combinations of songs\n    for mask in range(1 << 3):  # 2^3 = 8 combinations\n        sum1 = sum2 = 0\n        for i in range(3):\n            if mask & (1 << i):\n                if i == 0:\n                    sum1 += 1 * a\n                elif i == 1:\n                    sum1 += 2 * b\n                elif i == 2:\n                    sum1 += 3 * c\n            else:\n                if i == 0:\n                    sum2 += 1 * a\n                elif i == 1:\n                    sum2 += 2 * b\n                elif i == 2:\n                    sum2 += 3 * c\n        \n        # Calculate the absolute difference between the two sums\n        diff = abs(sum1 - sum2)\n        # Update the minimum difference\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\nimport math\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total sum of all songs\n    total_sum = a * 1 + b * 2 + c * 3\n    min_diff = float('inf')\n\n    # Try all combinations of distributing the songs\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                sum1 = i * 1 + j * 2 + k * 3\n                sum2 = total_sum - sum1\n                diff = abs(sum1 - sum2)\n                min_diff = min(min_diff, diff)\n\n    return min_diff\n\n# Input interface\nn = int(input())\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n\n# Output interface\nresult = find_minimal_difference(a, b, c)\nprint(result)\n", "from typing import List\ndef find_min_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Finds the minimal possible difference in minutes between the durations of two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of two concerts.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible ways to split the songs into two groups\n    for i in range(1, total_duration):\n        # Calculate the duration of the first concert\n        first_concert_duration = i\n        # Calculate the duration of the second concert\n        second_concert_duration = total_duration - i\n        # Calculate the absolute difference between the two concerts\n        diff = abs(first_concert_duration - second_concert_duration)\n        # Update the minimum difference if the current difference is smaller\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef calculate_min_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the durations of two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible combinations of songs for the two concerts\n    for i in range(a + 1):  # Number of one-minute songs in the first concert\n        for j in range(b + 1):  # Number of two-minute songs in the first concert\n            for k in range(c + 1):  # Number of three-minute songs in the first concert\n                # Calculate the duration of the first concert\n                first_concert_duration = i + 2 * j + 3 * k\n                # Calculate the duration of the second concert\n                second_concert_duration = total_duration - first_concert_duration\n                # Calculate the absolute difference between the two concert durations\n                diff = abs(first_concert_duration - second_concert_duration)\n                # Update the minimum difference if the current difference is smaller\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(sys.stdin.readline())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, sys.stdin.readline().split())\n    result = calculate_min_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a + 2*b + 3*c\n    min_difference = float('inf')\n    \n    for i in range(total_duration + 1):\n        first_concert_duration = i\n        second_concert_duration = total_duration - i\n        difference = abs(first_concert_duration - second_concert_duration)\n        min_difference = min(min_difference, difference)\n    \n    return min_difference\n\n# Interface\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Finds the minimal possible difference in minutes between the durations of two concerts given a set of songs with different durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    # Possible durations for each concert\n    durations = [1 * a + 2 * b + 3 * c]\n    if b > 0:\n        durations.append(1 * (a + 1) + 2 * (b - 1) + 3 * c)\n    if c > 0:\n        durations.append(1 * (a + 1) + 2 * b + 3 * (c - 1))\n    if b > 1:\n        durations.append(1 * (a + 2) + 2 * (b - 2) + 3 * c)\n    if a > 0 and c > 0:\n        durations.append(1 * (a - 1) + 2 * (b + 1) + 3 * (c - 1))\n\n    # Find the minimal possible difference\n    min_diff = float('inf')\n    for duration in durations:\n        min_diff = min(min_diff, abs(2 * duration - sum(durations)))\n\n    return min_diff\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves considering all possible distributions of songs into two concerts and calculating the differences to find the minimum.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations between two concerts.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to minimize the time complexity.\nTo solve the problem of finding the minimal possible difference in durations between two concerts, we can use a dynamic programming approach. The idea is to calculate the total possible sums of durations for all subsets of songs and then find the minimum absolute difference between these sums. This approach ensures that we consider all possible distributions of songs into two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups such that each song is included in exactly one group.\n    'minimal possible difference': means finding the smallest difference between the total durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means that we need to minimize the difference between the two concert durations.\n\n# [code logic]\n    To solve this problem, we can use a dynamic programming approach to calculate the total possible sums of durations for all subsets of songs and then find the minimum absolute difference between these sums.\n\n# [edge case] \n    test case 1: a = 1, b = 1, c = 1\n    expected output: 0\n    Explanation: The total duration of all songs is 6 minutes. We can distribute them into two concerts with durations 3 and 3, resulting in a difference of 0 minutes.\n\n    test case 2: a = 2, b = 2, c = 2\n    expected output: 2\n    Explanation: The total duration of all songs is 12 minutes. The optimal distribution could be 6 and 6, resulting in a difference of 0 minutes. However, there are other possible distributions, such as 5 and 7, 4 and 8, etc., with a difference of 2 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The given approach already considers all possible distributions and finds the minimal possible difference.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves considering all possible distributions of songs into two concerts and calculating the differences to find the minimum.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations between two concerts.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to minimize the time complexity.\nTo solve the problem of finding the minimal possible difference in durations between two concerts, we can use a dynamic programming approach. The idea is to calculate the total possible sums of durations for all subsets of songs and then find the minimum absolute difference between these sums. This approach ensures that we consider all possible distributions of songs into two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert\n    'minimal possible difference': means finding the smallest possible difference between the two concert durations\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference\n\n# [code logic]\n    To solve this problem, we need to consider all possible distributions of songs into two concerts and calculate the sum of durations for each distribution. Then, we find the minimum absolute difference between these sums.\n\n# [edge case] \n    test case 1: a = 1, b = 1, c = 1\n    expected output: 0\n    Explanation: The total duration of all songs is 6 minutes. We can distribute them into two concerts with durations 3 and 3 minutes, resulting in a difference of 0 minutes.\n\n    test case 2: a = 2, b = 2, c = 2\n    expected output: 2\n    Explanation: The total duration of all songs is 12 minutes. The optimal distribution might be 7 and 5 minutes, resulting in a difference of 2 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The given logic can handle cases where the number of songs of each duration is the same or different.\n\n# [code logic continued]\n    To implement the solution, we can use a dynamic programming approach to calculate the possible sums of durations for all subsets of songs. Then, we find the minimum absolute difference between these sums.\n\n# [edge case] \n    test case 3: a = 3, b = 0, c = 0\n    expected output: 3\n    Explanation: There are only one-minute songs, so the only possible distribution is to put all songs in one concert, resulting in a difference of 3 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The given logic can handle cases where some durations have zero songs.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves considering all possible distributions of songs into two concerts and calculating the difference for each distribution. The optimal solution is the minimum difference found among all possible distributions.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations between two concerts.\n- Ensure the function can handle up to 1000 test cases efficiently.\n- Optimize the algorithm to handle large input values (up to 10^9) within reasonable time limits.\nTo solve the problem of finding the minimal possible difference in durations between two concerts given a set of songs with different durations, we can use a brute-force approach. This approach involves considering all possible distributions of songs into two concerts and calculating the difference for each distribution. The optimal solution is the minimum difference found among all possible distributions. Given the constraints, we will use Python due to its efficiency in handling large integers and iterating through possible distributions.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups such that each song is included in exactly one group.\n    'minimal possible difference': means finding the smallest absolute difference between the total durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means that we need to minimize the difference between the two concert durations.\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The possible distributions are:\n    - Concert 1: [1 minute], Concert 2: [2 minutes, 3 minutes] -> Difference = |1 - 5| = 4\n    - Concert 1: [1 minute, 2 minutes], Concert 2: [3 minutes] -> Difference = |3 - 3| = 0\n    - Concert 1: [1 minute, 3 minutes], Concert 2: [2 minutes] -> Difference = |4 - 2| = 2\n    The minimal possible difference is 0.\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The possible distributions are:\n    - Concert 1: [1 minute, 1 minute], Concert 2: [2 minutes, 2 minutes, 2 minutes, 3 minutes, 3 minutes, 3 minutes] -> Difference = |2 - 15| = 13\n    - Concert 1: [1 minute, 2 minutes], Concert 2: [1 minute, 2 minutes, 2 minutes, 3 minutes, 3 minutes, 3 minutes] -> Difference = |3 - 14| = 11\n    - ... (consider all possible distributions)\n    The minimal possible difference is the smallest difference found among all distributions.\n\n    Edge case 3:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There are ten one-minute songs and no two-minute or three-minute songs. The only possible distribution is:\n    - Concert 1: [1 minute, 1 minute, ..., 1 minute (10 times)], Concert 2: [] -> Difference = |10 - 0| = 10\n    The minimal possible difference is 10.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The brute-force approach will naturally handle cases with zero or one type of song by considering all possible distributions.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves considering all possible distributions of the songs into two concerts and calculating the differences to find the minimum.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations.\n- Ensure the function can handle multiple test cases efficiently.\n- Develop a method to distribute songs into two concerts optimally.\n- Optimize the algorithm to handle large input sizes within reasonable time limits.\nTo solve the problem of distributing songs into two concerts with the minimal possible difference in durations, we can use a dynamic programming approach. The idea is to calculate the total possible sums of durations for all subsets of songs and then find the closest pair of these sums to divide the concerts evenly. This approach ensures that we consider all possible distributions and find the optimal solution efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups (concerts) such that each song is included in exactly one group.\n    'minimal possible difference': means finding the smallest difference between the sums of durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference between the two groups' durations.\n\n# [code logic]\n    To solve this problem, we need to consider all possible distributions of the songs into two concerts. We can use a dynamic programming approach to calculate the total possible sums of durations for all subsets of songs. Then, we find the closest pair of these sums to divide the concerts evenly.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The possible distributions are:\n    - Concert 1: 1 minute, Concert 2: 2 minutes\n    - Concert 1: 1 minute, Concert 2: 3 minutes\n    - Concert 1: 2 minutes, Concert 2: 1 minute\n    - Concert 1: 3 minutes, Concert 2: 1 minute\n    - Concert 1: 2 minutes, Concert 2: 3 minutes\n    - Concert 1: 3 minutes, Concert 2: 2 minutes\n    The minimal possible difference is 0 minutes, achieved by distributing the songs as (1, 2) and (1, 3) or (2, 1) and (3, 1).\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The possible distributions are numerous, but the minimal possible difference will be between two distributions that balance the durations as evenly as possible. For example, one possible distribution is (1, 2) and (1, 2) for one pair and (1, 2) and (1, 2) for the other pair, resulting in a difference of 0 minutes.\n\n    Edge case 3:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There is only one type of song, and it is a one-minute song. The only possible distribution is to put all songs in one concert, resulting in a difference of 0 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic can handle cases with zero or one type of song by default, as the problem statement does not specify behavior for such cases. However, for completeness, we can add a check to ensure that if there are no songs or only one type of song, the difference is 0.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts where songs of different durations are distributed. The optimal solution involves considering all possible distributions and calculating the differences. The input consists of multiple test cases, each with specific counts of songs, and the output should provide the minimal difference for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations between two concerts.\n- Ensure the function can handle multiple test cases efficiently.\n- Develop a method to distribute songs optimally to achieve the smallest possible difference.\n- Optimize the algorithm to handle large input sizes within reasonable time limits.\nTo solve the problem of distributing songs into two concerts with the smallest possible difference in durations, we can use a dynamic programming approach. The idea is to calculate the total possible sums of durations for all songs and then find the closest sum to half of the total duration. This can be efficiently done using a bitmask approach to explore all possible combinations of songs.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups such that each song is included in exactly one group.\n    'minimal possible difference': means finding the smallest difference between the sums of the durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference between the two groups.\n\n# [code logic]\n    To solve this problem, we need to consider all possible distributions of the songs into two concerts. We can use a bitmask approach to generate all possible combinations of songs in each concert. Then, we calculate the sum of durations for each combination and find the minimal possible difference between these sums.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The possible distributions are:\n    - Concert 1: [1 minute], Concert 2: [1 minute, 1 minute, 1 minute]\n    - Concert 1: [1 minute, 1 minute], Concert 2: [1 minute, 1 minute]\n    - Concert 1: [1 minute, 1 minute, 1 minute], Concert 2: [1 minute]\n    The minimal possible difference is 0 minutes, as one of the distributions has equal sums.\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are three songs of the same duration. The possible distributions are:\n    - Concert 1: [2 minutes], Concert 2: [2 minutes, 2 minutes, 2 minutes]\n    - Concert 1: [2 minutes, 2 minutes], Concert 2: [2 minutes, 2 minutes]\n    - Concert 1: [2 minutes, 2 minutes, 2 minutes], Concert 2: [2 minutes]\n    The minimal possible difference is 0 minutes, as one of the distributions has equal sums.\n\n    Edge case 3:\n    Input: a = 3, b = 3, c = 3\n    Explanation: There are three songs of the same duration. The possible distributions are:\n    - Concert 1: [3 minutes], Concert 2: [3 minutes, 3 minutes, 3 minutes]\n    - Concert 1: [3 minutes, 3 minutes], Concert 2: [3 minutes, 3 minutes]\n    - Concert 1: [3 minutes, 3 minutes, 3 minutes], Concert 2: [3 minutes]\n    The minimal possible difference is 0 minutes, as one of the distributions has equal sums.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan can handle cases with equal numbers of songs of the same duration.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves considering all possible distributions of the songs into two concerts and calculating the differences to find the minimum. This is a combinatorial problem that can be solved efficiently by considering the total sum of the song durations and using a greedy approach to distribute the songs.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to distribute the songs into two concerts to minimize the difference in durations.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the distribution algorithm to reduce the time complexity.\n- Implement input/output handling to read from standard input and write to standard output.\nTo solve this problem, we will use a combination of combinatorial optimization techniques and dynamic programming to find the optimal distribution of songs into two concerts. The goal is to minimize the absolute difference in the sum of the durations of the songs in each concert. We will iterate through all possible distributions and calculate the differences to find the minimal possible value.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups such that each song is included in exactly one group.\n    'minimal possible difference': means finding the smallest absolute difference between the sums of the durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means the goal is to minimize the absolute difference.\n\n# [code logic]\n    To solve this problem, we need to consider all possible distributions of the songs into two concerts and calculate the absolute difference in their durations. We can use a brute-force approach to iterate through all combinations of including or excluding each song in each concert. The optimal solution will be the minimum difference found among these combinations.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal distribution would be to put one song in each concert, resulting in a difference of 5 minutes (1+2+3 - 0 = 6, 0 - 0 = 0).\n    Expected output: 5\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The optimal distribution would be to put three songs in each concert, resulting in a difference of 0 minutes (2+4+6 - 2+4+6 = 0).\n    Expected output: 0\n\n    Edge case 3:\n    Input: a = 10^9, b = 10^9, c = 10^9\n    Explanation: There are three songs with a very large number of instances. The optimal distribution would be to put one song in each concert, resulting in a difference of 3*10^9 minutes (10^9+2*10^9+3*10^9 - 0 = 6*10^9, 0 - 0 = 0).\n    Expected output: 3*10^9\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The brute-force approach will work efficiently for the given constraints.\n", "requirement analysis:\nThe problem requires finding the optimal distribution of songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to try different distributions and calculate the differences. The solution should be efficient and handle up to 1000 test cases.\nrequirement pool:\n- Implement a function to read input and handle multiple test cases.\n- Develop a method to calculate the optimal distribution of songs.\n- Ensure the solution outputs the minimal possible difference for each test case.\n- Optimize the algorithm for large inputs to ensure performance.\n- Implement user-friendly input and output handling.\nTo solve this problem, we will use a simple brute-force approach to try all possible distributions of songs into two concerts and calculate the absolute difference for each distribution. This approach is straightforward and should work efficiently for the given constraints.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'absolute difference': the smallest possible difference between the durations of two groups of songs\n\n    Explanation: The core concept here is to minimize the difference between the total durations of the two concerts. This involves distributing the songs in such a way that the sum of the durations of the songs in each concert is as close as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve this problem, we can use a brute-force approach to try all possible distributions of songs into two concerts. For each test case, we will:\n    1. Calculate the total duration of all songs.\n    2. Iterate through all possible ways to split the songs into two groups.\n    3. For each split, calculate the absolute difference between the durations of the two groups.\n    4. Keep track of the smallest absolute difference found.\n    5. Return the smallest absolute difference.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal way to split them is to put one song of each duration in each concert, resulting in a difference of |1 - 1| = 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are three songs of the same duration. The optimal way to split them is to put two songs of each duration in each concert, resulting in a difference of |2 - 2| = 0.\n    Expected output: 0\n\n    Edge case 3:\n    Input: a = 10^9, b = 10^9, c = 10^9\n    Explanation: There are three songs with extremely large durations. The optimal way to split them is to put one song of each duration in each concert, resulting in a difference of |10^9 - 10^9| = 0.\n    Expected output: 0\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The brute-force approach will work efficiently for the given constraints.\n", "requirement analysis:\nThe requirements involve calculating the optimal distribution of songs into two concerts to minimize the absolute difference in their durations. This requires a method to distribute the songs in such a way that the total duration of one concert is as close as possible to the other. The input consists of multiple test cases, each with a specific number of songs of different durations. The output should provide the smallest possible difference in minutes between the durations of the two concerts for each test case.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs.\n- Ensure the application can handle multiple test cases efficiently.\n- Develop a user-friendly interface for inputting song data.\n- Ensure the application provides quick and accurate results.\n- Optimize the algorithm for handling large numbers of songs.\nTo solve the problem of distributing songs into two concerts with the goal of minimizing the absolute difference in their durations, we will use a simple and efficient approach. We will calculate the total duration of all songs and then use a brute-force method to find the optimal distribution by trying all possible combinations of songs for the two concerts. This approach will ensure that we find the smallest possible difference between the durations of the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'absolute difference': the smallest possible difference between two values\n\n    'minimize': the goal is to find the smallest possible value\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve the problem, we need to calculate the total duration of all songs and then try all possible combinations of songs for the two concerts to find the smallest possible difference.\n\n# [edge case] \n    test case 1:\n        Input: a = 1, b = 1, c = 1\n        Explanation: Luntik can include one one-minute song, one two-minute song, and one three-minute song into the first concert, and leave the rest for the second concert. The total duration of the first concert is 1 + 2 + 3 = 6, and the total duration of the second concert is 0. The difference is |6 - 0| = 6.\n        Expected output: 0\n    test case 2:\n        Input: a = 2, b = 1, c = 2\n        Explanation: Luntik can include two one-minute songs and one two-minute song into the first concert, and two three-minute songs into the second concert. The total duration of the first concert is 2*1 + 1*2 = 4, and the total duration of the second concert is 2*3 = 6. The difference is |4 - 6| = 2.\n        Expected output: 2\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The brute-force method will naturally handle cases with only one or two types of songs.\n\n# [extra code for edge case]\n    No extra code is needed for edge cases. The provided logic will handle them correctly.\n", "requirement analysis:\nThe requirements involve calculating the optimal distribution of songs into two concerts to minimize the absolute difference in their durations. This requires a method to distribute the songs in such a way that the total duration of one concert is as close as possible to the other. The solution should be efficient and capable of handling a large number of test cases.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs.\n- Ensure the application can handle multiple test cases efficiently.\n- Develop a user-friendly interface for inputting song counts.\n- Provide clear and concise output displaying the minimal possible difference.\n- Optimize the algorithm to handle large numbers of songs.\nTo solve this problem, we will use a simple and efficient approach that involves calculating the total duration of all songs and then finding the closest possible split that minimizes the absolute difference between the two concert durations. We will use Python's built-in functions and data structures to achieve this.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'minimizing the absolute difference': means finding the closest possible split in the total duration of songs to balance the durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Calculate the total duration of all songs.\n    - Iterate through possible splits and calculate the duration of each concert.\n    - Compute the absolute difference between the two concert durations.\n    - Track the smallest absolute difference found.\n\n# [edge case] \n    Edge case 1:\n    Input: [1, 2, 3]\n    Explanation: The total duration is 1*1 + 2*2 + 3*3 = 14. The optimal split would be to distribute the songs such that both concerts have a duration of 7, resulting in a difference of 0.\n    Edge case 2:\n    Input: [1, 1, 2, 3, 3]\n    Explanation: The total duration is 1*1 + 1*2 + 2*2 + 3*3 + 3*3 = 26. The optimal split would be to distribute the songs such that one concert has a duration of 1+1+2+3 = 7 and the other has a duration of 3+3+3 = 9, resulting in a difference of |7-9| = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle these cases directly.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves considering all possible distributions of songs into two concerts and calculating the difference for each distribution. The optimal solution is the minimum difference found among all possible distributions.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations between two concerts.\n- Ensure the function can handle up to 1000 test cases efficiently.\n- Optimize the algorithm to handle large input values (up to 10^9) within reasonable time limits.\nTo solve the problem of finding the minimal possible difference in durations between two concerts given a set of songs with different durations, we can use a brute-force approach. This approach involves considering all possible distributions of songs into two concerts and calculating the difference for each distribution. The optimal solution is the minimum difference found among all possible distributions. Given the constraints, we will use Python due to its efficiency in handling large integers and iterating through possible distributions.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups such that each song is included in exactly one group.\n    'minimal possible difference': means finding the smallest absolute difference between the total durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means that we need to minimize the difference between the two concert durations.\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The possible distributions are:\n    - Concert 1: 1 one-minute song, 1 two-minute song\n    - Concert 2: 1 three-minute song\n    The differences are:\n    - |(1+2) - 3| = 0\n    - |(1+3) - 2| = 2\n    - |(2+3) - 1| = 4\n    The minimal possible difference is 0.\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The possible distributions are numerous, but a minimal difference can be achieved by balancing the durations as evenly as possible. For example:\n    - Concert 1: 2 one-minute songs, 1 two-minute song\n    - Concert 2: 2 two-minute songs, 2 three-minute songs\n    The difference is:\n    - |(2*1 + 2) - (2*2 + 2*3)| = |4 - 10| = 6\n    This is not the minimal difference. A better distribution might be:\n    - Concert 1: 2 one-minute songs, 1 three-minute song\n    - Concert 2: 2 two-minute songs, 1 three-minute song\n    The difference is:\n    - |(2*1 + 3) - (2*2 + 2*3)| = |5 - 10| = 5\n    The minimal possible difference is 5.\n\n    Edge case 3:\n    Input: a = 3, b = 0, c = 0\n    Explanation: There are three one-minute songs and no two-minute or three-minute songs. The only possible distribution is:\n    - Concert 1: 3 one-minute songs\n    - Concert 2: 0 two-minute songs, 0 three-minute songs\n    The difference is:\n    - |3 - 0| = 3\n    The minimal possible difference is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic to find the minimal difference can be implemented directly in the main code logic.\n"], "scores": [], "pass_results": [true, false, false, false, false, false, true, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 117, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "add_1_sentence_at_end", "parent_index": 31}
