{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He possesses a collection of songs that last one minute, two minutes, and three minutes, and he wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He possesses a collection of songs that last one minute, two minutes, and three minutes, and he wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing. He possesses a collection of songs that last one minute, two minutes, and three minutes, and he wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has a collection of songs with durations of one, two, and three minutes, and he needs to distribute them into two concerts with the goal of minimizing the absolute difference in their durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the two concerts.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through possible splits\n    for i in range(total_duration + 1):\n        # Calculate the duration of the first concert\n        first_concert_duration = i\n        # Calculate the duration of the second concert\n        second_concert_duration = total_duration - i\n        # Calculate the absolute difference between the two concerts\n        diff = abs(first_concert_duration - second_concert_duration)\n        # Update the minimal difference if the current difference is smaller\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\nimport math\n\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    min_difference = float('inf')\n\n    # Try all combinations of distributing songs between two concerts\n    for i in range(a + 1):  # Number of one-minute songs in one concert\n        for j in range(b + 1):  # Number of two-minute songs in one concert\n            if i + j <= a + b + c // 2:  # Ensure both concerts are filled\n                duration_one = i * 1 + j * 2 + (a - i) * 1 + (b - j) * 2 + c * 3\n                duration_two = total_duration - duration_one\n                min_difference = min(min_difference, abs(duration_one - duration_two))\n\n    return min_difference\n\n# Read input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal difference in duration between two concerts given the number of one-minute, two-minute, and three-minute songs.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal difference in duration between the two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                if i + 2 * j + 3 * k <= total_duration // 2:\n                    diff = abs((a + 2 * b + 3 * c) - 2 * (i + 2 * j + 3 * k))\n                    min_diff = min(min_diff, diff)\n\n    return min_diff\n\n# Read input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_difference = float('inf')\n\n    for i in range(total_duration + 1):\n        first_concert_duration = i\n        second_concert_duration = total_duration - i\n        difference = abs(first_concert_duration - second_concert_duration)\n        min_difference = min(min_difference, difference)\n\n    return min_difference\n\n# Read input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the durations of the two concerts.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    min_diff = float('inf')\n\n    for i in range(a + b + c + 1):\n        for j in range(a + b + c + 1):\n            if i * 1 + j * 2 <= total_duration / 2:\n                duration_first = i * 1 + j * 2\n                duration_second = total_duration - duration_first\n                diff = abs(duration_first - duration_second)\n                min_diff = min(min_diff, diff)\n\n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the durations of the two concerts.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_difference = float('inf')\n\n    for i in range(total_duration + 1):\n        first_concert_duration = i\n        second_concert_duration = total_duration - i\n        difference = abs(first_concert_duration - second_concert_duration)\n        min_difference = min(min_difference, difference)\n\n    return min_difference\n\n# Read input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef distribute_songs(a, b, c):\n    \"\"\"\n    Distributes songs into two concerts to minimize the absolute difference in their durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # If the total duration is even, we can perfectly balance the concerts\n    if total_duration % 2 == 0:\n        return 0\n    \n    # If the total duration is odd, the best we can do is a difference of 1\n    return 1\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = distribute_songs(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef distribute_songs(a, b, c):\n    \"\"\"\n    Distributes songs with durations of one, two, and three minutes into two concerts\n    to minimize the absolute difference in their durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    if total_duration % 2 != 0:\n        return 1\n    \n    target_duration = total_duration // 2\n    min_diff = float('inf')\n    \n    # Since we are looking for the minimal difference, we can use a more efficient approach\n    # by considering the distribution of songs in a way that balances the durations.\n    \n    # The optimal distribution can be achieved by trying to match the target duration\n    # as closely as possible using the available songs.\n    \n    # We can use a greedy approach to minimize the difference.\n    \n    # Try to balance the durations as evenly as possible\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if i * 1 + j * 2 + k * 3 == target_duration:\n                    diff = abs((a - i) * 1 + (b - j) * 2 + (c - k) * 3)\n                    min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = distribute_songs(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the durations of two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing the songs between two concerts\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                for l in range(4):\n                    if i + j + k + l == a + b + c:\n                        duration1 = i + 2 * j + 3 * k\n                        duration2 = total_duration - duration1\n                        diff = abs(duration1 - duration2)\n                        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    min_diff = float('inf')\n    \n    # Try all combinations to find the minimal difference\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if (i * 1 + j * 2 + k * 3) * 2 == total_duration:\n                    diff = abs((a - i) * 1 + (b - j) * 2 + (c - k) * 3)\n                    min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where songs of different durations are distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the minimal possible difference between the durations of two concerts.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it runs within the given constraints.\nTo solve this problem, we will use a simple approach that involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts. We will iterate through possible splits and calculate the difference for each split to find the minimal possible difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert\n    'absolute difference': means the smallest possible difference between the two concerts\n\n# [phrase showing quantity relationship]\n    'as small as possible': means we need to minimize the difference\n\n# [degree adverb] \n    'as small as possible': means we need to minimize the difference\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs such that one concert has durations of 1+1=2 minutes and the other has 1 minute. The difference is |2-1| = 1.\n    search([2, 1, 3]) = 1\n    explanation: Luntik can distribute the songs such that one concert has durations of 2+1+3=6 minutes and the other has 2+3=5 minutes. The difference is |6-5| = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan should be sufficient to find the minimal possible difference.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where songs of different durations are distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the minimal possible difference in minutes between the concerts durations.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it runs within the given constraints.\nTo solve the problem of distributing songs into two concerts with minimal duration difference, we will use a greedy approach. The idea is to first calculate the total duration of all songs and then find the closest possible split that minimizes the difference between the two concerts. We will implement this in Python, leveraging basic arithmetic operations and sorting to achieve the desired outcome efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each item to exactly one of two groups (concerts in this case)\n    'minimal difference': means the smallest possible difference between the total durations of the two groups\n\n# [phrase showing quantity relationship]\n    'as small as possible': means we need to minimize the absolute difference between the two groups\n\n# [degree adverb] \n    'as small as possible': means we need to minimize the absolute difference between the two groups\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 1*1 + 2*1 + 3*1 = 6 minutes. We can distribute the songs such that one concert has 3 minutes and the other has 3 minutes, resulting in a difference of 0.\n    search([2, 2, 2]) = 1\n    explanation: The total duration is 2*2 + 2*2 + 2*2 = 12 minutes. The best distribution might be one concert with 6 minutes and the other with 6 minutes, but since we can't split songs, the best we can do is 5 and 7 minutes, resulting in a difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan should be sufficient to handle cases where the total number of songs is evenly divisible by 2.\n\nPlease note that the edge cases provided in the example might not cover all possible edge cases, and the actual implementation might require additional considerations.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where songs of different durations are distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the minimal possible difference in minutes between the concerts durations.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it runs within the given constraints.\nTo solve the problem of distributing songs into two concerts with minimal duration difference, we will use a greedy approach. The idea is to first calculate the total duration of all songs and then find the closest possible split that minimizes the difference between the two concerts. We will implement this in a Python function that processes multiple test cases efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each item to exactly one of two groups (concerts in this case)\n    'minimal difference': means the smallest possible difference between the total durations of the two groups\n\n# [phrase showing quantity relationship]\n    'as small as possible': means we need to find the smallest absolute difference between the two groups\n\n# [degree adverb] \n    'as small as possible': means we need to find the smallest possible difference\n\n# [code logic]\n    To implement the solution, we will follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts, trying to balance the durations as evenly as possible.\n    3. Calculate the difference between the two concert durations and return the smallest possible difference.\n\n# [edge case] \n    Edge case 1:\n    Input: [1, 1, 1]\n    Explanation: The total duration is 1*1 + 2*1 + 3*1 = 6 minutes. We can distribute the songs such that both concerts have a duration of 3 minutes each. The difference is 0.\n    Edge case 2:\n    Input: [2, 1, 3]\n    Explanation: The total duration is 2*2 + 2*1 + 3*3 = 15 minutes. We can distribute the songs such that one concert has a duration of 7 minutes and the other has 8 minutes. The difference is |7-8| = 1.\n    Edge case 3:\n    Input: [5, 5, 5]\n    Explanation: The total duration is 5*1 + 5*2 + 5*3 = 30 minutes. We can distribute the songs such that one concert has a duration of 15 minutes and the other has 15 minutes. The difference is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach will naturally handle cases where the distribution is already balanced or nearly balanced.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where songs of different durations are distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the minimal possible difference between the durations of two concerts.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it runs within the given constraints.\nTo solve this problem, we will use a simple approach that involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts. We will iterate through possible splits and calculate the difference for each split to find the minimal possible difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert.\n    'absolute difference': means the smallest possible difference between the two concert durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means we need to minimize the difference between the two concert durations.\n\n# [code logic]\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Iterate through possible splits for the first concert and calculate the duration of the second concert.\n    3. Calculate the absolute difference for each split and keep track of the minimum difference.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs such that one concert has durations of 1+1=2 minutes and the other has 1 minute. The difference is |2-1| = 1.\n    search([2, 2, 2]) = 0\n    explanation: Luntik can distribute the songs such that one concert has durations of 2+2=4 minutes and the other has 2+2=4 minutes. The difference is |4-4| = 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to solve the problem.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where songs of different durations are distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the minimal possible difference between the durations of two concerts.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it runs within the given constraints.\nTo solve this problem, we will use a simple approach that involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts. We will iterate through possible splits and calculate the difference for each split to find the minimal possible difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each item to exactly one of two groups (concerts in this case)\n    'minimal possible difference': means finding the smallest absolute difference between the two groups\n\n# [phrase showing quantity relationship]\n    'as small as possible': means we need to minimize the difference\n\n# [degree adverb] \n    'as small as possible': means we need to find the smallest difference\n\n# [code logic]\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Iterate through possible splits for the first concert.\n    3. For each split, calculate the duration of the first concert and the second concert.\n    4. Compute the absolute difference between the two durations.\n    5. Track the smallest difference found.\n    6. Return the smallest difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 1*1 + 2*1 + 3*1 = 6 minutes. The best distribution is to put one one-minute, one two-minute, and one three-minute song in each concert, resulting in a difference of 0.\n    search([2, 2, 2]) = 0\n    explanation: The total duration is 2*1 + 2*2 + 2*3 = 12 minutes. The best distribution is to put two one-minute, two two-minute, and two three-minute songs in each concert, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where all songs have the same duration.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where songs of different durations are distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the minimal possible difference between the durations of two concerts.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it runs within the given constraints.\nTo solve this problem, we will use a simple approach that involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts. We will iterate through possible splits and calculate the difference for each split to find the minimal possible difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each item to exactly one of two groups (concerts in this case)\n    'minimal possible difference': means finding the smallest absolute difference between the two groups\n\n# [phrase showing quantity relationship]\n    'as small as possible': means we need to minimize the difference\n\n# [degree adverb] \n    'as small as possible': means we need to find the smallest absolute difference\n\n# [code logic]\n    To implement the plan, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Iterate through possible splits for the first concert and calculate the duration of the second concert.\n    3. Calculate the absolute difference for each split and keep track of the smallest difference.\n    4. Return the smallest difference found.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 1*1 + 2*1 + 3*1 = 6 minutes. We can distribute the songs such that both concerts have a duration of 3 minutes each, resulting in a difference of 0.\n    search([2, 2, 2]) = 0\n    explanation: The total duration is 2*1 + 2*2 + 2*3 = 12 minutes. We can distribute the songs such that both concerts have a duration of 6 minutes each, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where all song counts are the same.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the absolute difference in their durations. This involves a strategic allocation of songs to achieve the closest possible match between the two concerts. The solution should be efficient and handle a reasonable number of test cases within the given constraints.\nrequirement pool:\n- Implement a function to calculate the minimal difference in concert durations.\n- Ensure the solution can handle up to 1000 test cases.\n- Optimize the algorithm to handle large input values efficiently.\n- Provide clear and accurate output for each test case.\nTo solve the problem of distributing songs into two concerts with the goal of minimizing the absolute difference in their durations, we will use a simple strategy that prioritizes utilizing the three-minute songs first, followed by the two-minute songs, and finally the one-minute songs. This approach ensures that we balance the concerts as evenly as possible by leveraging the longer songs first. We will implement this in Python, leveraging basic arithmetic operations to calculate the differences and minimize the absolute difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'absolute difference': the smallest difference between two values\n\n# [phrase showing quantity relationship]\n    'more than': indicates that we need to compare values to find the smallest difference\n\n# [degree adverb] \n    'minimal': means the smallest possible difference\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case, we will:\n    1. Calculate the total duration of all songs.\n    2. Determine the optimal distribution by prioritizing the use of three-minute songs.\n    3. Compute the duration of each concert.\n    4. Calculate the absolute difference between the two concert durations.\n    5. Output the minimal possible difference for each test case.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 3, and we can distribute the songs evenly between two concerts, resulting in both concerts having a duration of 3/2 = 1.5 minutes. The absolute difference is 0.\n    search([2, 1, 3]) = 1\n    explanation: The total duration is 2*2 + 1*2 + 3*3 = 15 minutes. We prioritize the three-minute songs, giving one to each concert, and then distribute the remaining songs. The concerts will have durations of 8 and 7 minutes, respectively, resulting in an absolute difference of |8-7| = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle all cases, including when the number of songs of each duration is equal.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the absolute difference in their durations. This involves a strategic allocation of songs to achieve the closest possible match in total duration between the two concerts. The solution should be efficient and capable of handling a large number of test cases within reasonable time limits.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs\n- Ensure the solution minimizes the absolute difference in concert durations\n- Handle up to 1000 test cases efficiently\n- Provide clear and accurate output for each test case\nTo solve this problem, we will use a simple Python function that calculates the optimal distribution of songs into two concerts to minimize the absolute difference in their durations. The approach involves strategically allocating songs to achieve the closest possible match in total duration between the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with the closest possible total duration.\n    'absolute difference': means the smallest possible difference between the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To minimize the absolute difference, we should try to balance the durations of the two concerts as evenly as possible. This can be achieved by sorting the song durations and then assigning the largest durations to one concert and the smallest to the other.\n\n# [edge case] \n    Edge case 1:\n    Input: [1, 1, 1]\n    Explanation: There are three one-minute songs. The optimal distribution would be one concert with one song and the other with two songs, resulting in a difference of 1 minute.\n    Edge case 2:\n    Input: [2, 2, 2]\n    Explanation: There are three two-minute songs. The optimal distribution would be one concert with two songs and the other with four songs, resulting in a difference of 0 minutes.\n    Edge case 3:\n    Input: [3, 3, 3]\n    Explanation: There are three three-minute songs. The optimal distribution would be one concert with three songs and the other with six songs, resulting in a difference of 0 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic provided in the plan is sufficient to solve the problem. The edge cases provided are illustrative of the optimal distribution strategy.\n", "requirement analysis:\nThe problem requires a method to distribute songs into two concerts to minimize the absolute difference in their durations. The solution should be efficient and handle a large number of test cases. The output should be accurate and easy to understand for the user.\nrequirement pool:\n- Implement a function to calculate the minimal difference in concert durations.\n- Ensure the solution is scalable and can handle up to 1000 test cases.\n- Develop a user-friendly interface for input and output.\n- Optimize the algorithm for performance and efficiency.\nTo solve the problem of distributing songs into two concerts with the goal of minimizing the absolute difference in their durations, we will use a simple and efficient approach. The key idea is to balance the distribution of songs between the two concerts by prioritizing the use of the song with the highest frequency first. This ensures that we make the most out of the available songs and minimize the difference in their total durations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with the smallest difference in total duration.\n    Explanation: The goal is to balance the songs between two concerts to minimize the absolute difference in their durations. This involves strategically placing the songs with the most availability (either one, two, or three minutes) into the two concerts.\n\n# [phrase showing quantity relationship]\n    'more than': means that we need to find integers greater than a certain value.\n    'at least as many times': means that we need to find integers whose frequency is greater than or equal to their value.\n\n# [degree adverb] \n    'smallest': means that we need to find the smallest possible difference.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case, we need to:\n    1. Calculate the total duration of all songs.\n    2. Determine the optimal distribution of songs to minimize the absolute difference in durations between the two concerts.\n    3. Output the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    search([1, 2, 3]) = 0\n    Explanation: The total duration is 6 minutes, and by distributing the songs evenly, we can have two concerts with 3 minutes each, resulting in a difference of 0.\n    search([1, 1, 2]) = 1\n    Explanation: The total duration is 4 minutes. The best distribution is to put one 1-minute song and one 2-minute song in one concert, and the remaining two 1-minute songs in the other concert, resulting in a difference of 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to solve the problem for all test cases.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where songs of different durations are distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the minimal possible difference in minutes between the concerts durations.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it runs within the given constraints.\nTo solve the problem of distributing songs into two concerts with minimal duration difference, we will use a greedy approach. The idea is to first calculate the total duration of all songs and then find the closest possible split that minimizes the difference between the two concerts. We will implement this in Python, leveraging basic arithmetic operations and sorting to achieve the desired outcome efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each item to exactly one of two groups (concerts in this case)\n    'minimal difference': means the smallest possible difference between the total durations of the two groups\n\n# [phrase showing quantity relationship]\n    'as small as possible': means we need to find the smallest absolute difference between the two groups\n\n# [degree adverb] \n    'as small as possible': means we need to minimize the difference\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 1*1 + 2*1 + 3*1 = 6 minutes. We can distribute the songs such that one concert has 3 minutes and the other has 3 minutes, resulting in a difference of 0.\n    search([1, 2, 3]) = 1\n    explanation: The total duration is 1*1 + 2*2 + 3*3 = 14 minutes. The best distribution might be one concert with 7 minutes and the other with 7 minutes, resulting in a difference of |7-7| = 0. However, if we distribute as 8 and 6, the difference is 2, which is not minimal. The minimal difference is achieved by distributing as 7 and 7.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to find the minimal difference.\n"], "scores": [], "pass_results": [false, true, true, false, false, true, true, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 171, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "parent_index": 168}
