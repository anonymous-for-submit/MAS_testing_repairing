{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing, and he has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible; the duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing, and he has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible; the duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing, and he has a one-minute song, b two-minute songs, and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included in exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible; the duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has songs of durations a (one-minute), b (two-minute), and c (three-minute) and wants to distribute them into two concerts with the smallest possible absolute difference in total duration. Find this minimal difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Finds the minimal possible difference in minutes between the durations of two concerts\n    given the number of one-minute, two-minute, and three-minute songs.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Use a dynamic programming approach to find the optimal distribution\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                duration1 = i + 2 * j + 3 * k\n                duration2 = total_duration - duration1\n                diff = abs(duration1 - duration2)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_min_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: Minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Calculate the total possible durations of the concerts\n    total_duration = a * 1 + b * 2 + c * 3\n    min_diff = float('inf')\n\n    # Try all combinations of distributing the songs between two concerts\n    for i in range(4):  # There are 4 possible ways to distribute the songs (0, 1, 2, or 3 songs to one concert)\n        for j in range(4):\n            if i + j <= a + b + c:  # Ensure the total number of songs in both concerts does not exceed the total\n                duration1 = i * 1 + (a - i) * 1 + j * 2 + (b - j) * 2 + (c - (a + b + c - i - j)) * 3\n                duration2 = total_duration - duration1\n                min_diff = min(min_diff, abs(duration1 - duration2))\n\n    return min_diff\n\n# Read input and output results\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Finds the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of distributing the songs into two concerts\n    for i in range(4):  # There are 4 possible ways to distribute the songs (0, 1, 2, or 3 songs in one concert)\n        for j in range(4):\n            if i + j == 4:  # Ensure both concerts are filled\n                duration_one = a * 1 + b * 2 + c * 3 - (i * 1 + j * 2)\n                duration_two = total_duration - duration_one\n                min_diff = min(min_diff, abs(duration_one - duration_two))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the durations of the two concerts.\n    \n    Args:\n        a (int): The number of one-minute songs.\n        b (int): The number of two-minute songs.\n        c (int): The number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing songs between two concerts\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                for l in range(4):\n                    if (i + j + k + l) % 2 == 1:  # Ensure one concert has an odd number of songs\n                        continue\n                    duration1 = a + 2 * (b // 2) + 3 * (c // 2)\n                    duration1 += (i * 1) + (j * 2) + (k * 3) + (l * 3)\n                    duration2 = total_duration - duration1\n                    diff = abs(duration1 - duration2)\n                    min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read input and output results\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_minimal_difference(a, b, c):\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n    \n    # Iterate through possible distributions of one-minute and two-minute songs\n    for i in range(a + 1):\n        for j in range(b + 1):\n            # Calculate the durations of the two concerts\n            duration_concert1 = i + 2 * j + 3 * c\n            duration_concert2 = total_duration - duration_concert1\n            # Calculate the absolute difference between the two concert durations\n            diff = abs(duration_concert1 - duration_concert2)\n            # Update the minimal possible difference\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    # Read the number of one-minute, two-minute, and three-minute songs for each test case\n    a, b, c = map(int, sys.stdin.readline().split())\n    # Find and print the minimal possible difference for each test case\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    total_songs = a + b + c\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing songs into two concerts\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                for l in range(4):\n                    for m in range(4):\n                        for n in range(4):\n                            for o in range(4):\n                                for p in range(4):\n                                    for q in range(4):\n                                        for r in range(4):\n                                            for s in range(4):\n                                                for t in range(4):\n                                                    for u in range(4):\n                                                        for v in range(4):\n                                                            for w in range(4):\n                                                                for x in range(4):\n                                                                    for y in range(4):\n                                                                        for z in range(4):\n                                                                            if i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z == total_songs:\n                                                                                diff = abs((a - i) + (b - j) + (c - k) - (l + m + n + o + p + q + r + s + t + u + v + w + x + y + z))\n                                                                                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read input and output results\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    total_duration = a + b + c\n    min_diff = float('inf')\n    \n    for i in range(1 << 3):  # There are 2^3 = 8 combinations\n        concert1 = 0\n        concert2 = 0\n        for j in range(3):\n            if i & (1 << j):\n                concert1 += [a, b, c][j]\n            else:\n                concert2 += [a, b, c][j]\n        min_diff = min(min_diff, abs(concert1 - concert2))\n    \n    return min_diff\n\n# Example usage:\n# print(find_minimal_difference(1, 1, 1))  # Output: 0\n# print(find_minimal_difference(2, 1, 3))  # Output: 1\n\n# Interface for the function\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing the songs between two concerts\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                for l in range(4):\n                    for m in range(4):\n                        for n in range(4):\n                            for o in range(4):\n                                for p in range(4):\n                                    for q in range(4):\n                                        for r in range(4):\n                                            for s in range(4):\n                                                for t in range(4):\n                                                    for u in range(4):\n                                                        for v in range(4):\n                                                            for w in range(4):\n                                                                for x in range(4):\n                                                                    for y in range(4):\n                                                                        for z in range(4):\n                                                                            total_duration_1 = (i * 1) + (j * 2) + (k * 3) + (l * 1) + (m * 2) + (n * 3) + (o * 1) + (p * 2) + (q * 3) + (r * 1) + (s * 2) + (t * 3) + (u * 1) + (v * 2) + (w * 3) + (x * 1) + (y * 2) + (z * 3)\n                                                                            total_duration_2 = (a - i) + (b - j) + (c - k) + (a - l) + (b - m) + (c - n) + (a - o) + (b - p) + (c - q) + (a - r) + (b - s) + (c - t) + (a - u) + (b - v) + (c - w) + (a - x) + (b - y) + (c - z)\n                                                                            diff = abs(total_duration_1 - total_duration_2)\n                                                                            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# For each test case, read the number of one-minute, two-minute, and three-minute songs\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + b + c\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible ways to distribute the songs into two concerts\n    for i in range(1 << 3):  # There are 2^3 = 8 ways to distribute the songs\n        concert1 = 0\n        concert2 = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                concert1 += (j + 1) * [1, 2, 3][j]\n            else:\n                concert2 += (j + 1) * [1, 2, 3][j]\n        \n        # Calculate the absolute difference between the two concerts\n        diff = abs(concert1 - concert2)\n        \n        # Update the minimal difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_sum = a * 1 + b * 2 + c * 3\n    # Initialize the set to store possible sums\n    possible_sums = {0}\n    \n    # Add all possible sums of one-minute songs\n    for _ in range(a):\n        new_sums = set()\n        for s in possible_sums:\n            new_sums.add(s + 1)\n        possible_sums.update(new_sums)\n    \n    # Add all possible sums of two-minute songs\n    for _ in range(b):\n        new_sums = set()\n        for s in possible_sums:\n            new_sums.add(s + 2)\n        possible_sums.update(new_sums)\n    \n    # Add all possible sums of three-minute songs\n    for _ in range(c):\n        new_sums = set()\n        for s in possible_sums:\n            new_sums.add(s + 3)\n        possible_sums.update(new_sums)\n    \n    # Find the closest sum to half of the total sum\n    half_sum = total_sum // 2\n    closest_sum = None\n    min_diff = float('inf')\n    \n    for s in possible_sums:\n        diff = abs(s - half_sum)\n        if diff < min_diff:\n            min_diff = diff\n            closest_sum = s\n    \n    # Calculate the other concert duration\n    other_sum = total_sum - closest_sum\n    \n    # Return the minimal possible difference\n    return abs(closest_sum - other_sum)\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe requirements involve calculating the minimal possible difference in durations between two concerts given a set of one-minute, two-minute, and three-minute songs. The solution must be efficient and handle a large number of test cases. The input consists of multiple test cases, each with specific counts of songs of different durations. The output should provide the minimal difference for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal difference in concert durations.\n- Ensure the solution can handle large inputs efficiently.\n- Provide clear and accurate output for each test case.\n- Optimize the distribution of songs to achieve the smallest possible difference.\n- Allow for easy input and output handling.\nTo solve this problem efficiently, we will use a dynamic programming approach to find the optimal distribution of songs into two concerts. The goal is to minimize the absolute difference in the total duration of the concerts. We will use Python's built-in libraries and ensure the solution is scalable by handling large inputs efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert\n    'minimal possible difference': means finding the smallest possible difference in total duration between the two concerts\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The optimal distribution could be [1, 2] and [1, 3] or [1, 2] and [2, 3], both resulting in a difference of 0.\n    search([2, 2, 2]) = 2\n    explanation: The optimal distribution could be [1, 2] and [1, 3] or [2, 2] and [2, 3], both resulting in a difference of 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The dynamic programming approach inherently considers all possible distributions and finds the optimal one.\n\nPlease note that the plan provided for the third prompt is quite vague and does not specify a clear algorithm or approach to solve the problem. The plan should include a detailed logic for the dynamic programming approach, which is not provided here.\n", "requirement analysis:\nThe problem requires a solution that can handle multiple test cases efficiently, calculating the minimal possible difference in song durations between two concerts. The input consists of a number of test cases followed by the number of one-minute, two-minute, and three-minute songs for each case. The output should be the minimal possible difference in minutes between the concerts durations for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in song durations between two concerts.\n- Ensure the solution can handle multiple test cases efficiently.\n- Provide clear and concise output for each test case.\nTo solve this problem efficiently, we will use a dynamic programming approach to minimize the difference in song durations between two concerts. The idea is to calculate the total possible durations of the concerts and then find the minimum absolute difference between these durations.\nPlease read and understand the following inteperation before coding\n It seems like your last prompt was cut off. Please provide the complete requirement and plan for the third prompt so I can proceed with the analysis.\n", "requirement analysis:\nThe problem requires finding the optimal way to distribute songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to try different distributions and calculate the differences. The solution should be efficient enough to handle up to 1000 test cases, each with up to 10^9 songs.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a method to distribute songs into two concerts and calculate their durations.\n- Create a function to find the minimal possible difference in minutes between the concerts durations.\n- Optimize the distribution algorithm to handle large inputs efficiently.\n- Ensure the solution is scalable and can handle up to 1000 test cases.\nTo solve this problem efficiently, we will use a dynamic programming approach to find the optimal distribution of songs into two concerts. The goal is to minimize the absolute difference in the total duration of the concerts. We will iterate through all possible combinations of songs and calculate the differences to find the minimal possible difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert.\n    'minimal possible difference': means finding the smallest absolute difference between the total durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference.\n\n# [code logic]\n    To solve this problem, we need to consider all possible combinations of distributing the songs into two concerts. This can be done by iterating through all possible ways to distribute the songs and calculating the difference for each distribution. The minimal difference will be the smallest difference found among all possible distributions.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal distribution would be to put one one-minute song and one two-minute song in one concert, and the three-minute song in the other concert. The difference would be |(1+2) - 3| = 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The optimal distribution would be to put two one-minute songs, two two-minute songs, and two three-minute songs in each concert. The difference would be |(2*1 + 2*2 + 2*3) - (2*1 + 2*2 + 2*3)| = 0.\n    Expected output: 0\n\n    Edge case 3:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There are ten one-minute songs and no other songs. The optimal distribution would be to put all ten one-minute songs in one concert and leave the other concert empty. The difference would be |(10*1) - 0| = 10.\n    Expected output: 10\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic provided in the plan can handle them directly. The dynamic programming approach will naturally consider all possible distributions and find the minimal difference.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to find the optimal distribution. The input consists of multiple test cases, each with a specific number of one-minute, two-minute, and three-minute songs. The output should provide the minimal possible difference in minutes between the durations of the two concerts for each test case.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs.\n- Ensure the solution can handle multiple test cases efficiently.\n- Provide clear and accurate output for each test case.\n- Optimize the algorithm to handle large input sizes.\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in the durations of the concerts. We will calculate the total duration of all songs and then try to balance the distribution as evenly as possible. This can be achieved by trying to place songs in both concerts to get as close to half of the total duration as possible.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of dividing items or amounts into two or more groups, typically for the purpose of organizing or accounting for them.\n    Explanation: In this problem, Luntik has a set of songs with different durations, and he wants to distribute them into two concerts such that the total duration of songs in each concert is as close as possible. This is a classic problem of balancing a partition problem.\n\n# [phrase showing quantity relationship]\n    'as small as possible': This phrase indicates that we need to minimize the difference between the two concert durations.\n    Explanation: We need to find the minimal possible difference in minutes between the durations of the two concerts.\n\n# [degree adverb] \n    'as close as possible': This phrase emphasizes the need to get as close to the ideal balance as possible.\n    Explanation: We need to distribute the songs in a way that the total duration of songs in each concert is as close as possible to half of the total duration.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts, trying to balance the durations as evenly as possible.\n    3. Calculate the absolute difference between the two concert durations and return it as the result.\n\n# [edge case] \n    Edge case 1: All songs are of the same duration.\n    Edge case 1 = 0\n    Explanation: If all songs are of the same duration, the minimal possible difference is 0 because the distribution will be perfectly balanced.\n\n    Edge case 2: One type of song dominates the others.\n    Edge case 2 = |a - (b + c)|\n    Explanation: If one type of song (e.g., one-minute songs) greatly outnumbers the others, the difference will be the absolute difference between the number of one-minute songs and the sum of the other two types of songs.\n\n    Edge case 3: The number of songs is such that they can be perfectly divided.\n    Edge case 3 = |(a + b) - (a + c)| or |(a + c) - (b + c)|\n    Explanation: If the total number of songs can be perfectly divided into two groups, the difference will be 0 because the distribution will be balanced.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic can handle these cases by considering the distribution of songs and calculating the minimal possible difference.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts, given a set of songs with different durations. The solution should be efficient and handle large inputs. The output should be accurate and easy to understand for the user.\nrequirement pool:\n- Implement an algorithm to distribute songs into two concerts to minimize the difference in durations.\n- Ensure the solution can handle up to 1000 test cases.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for performance to handle large input values.\nTo solve this problem, we will use a simple and efficient approach that involves calculating the total duration of all songs and then trying to distribute them into two concerts such that the absolute difference in their durations is minimized. This can be achieved by using a greedy algorithm that tries to balance the load between the two concerts as evenly as possible. We will use Python for this implementation due to its simplicity and the availability of powerful libraries for mathematical operations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups such that the sum of the durations in each group is as close as possible.\n    Explanation: The goal is to minimize the absolute difference between the total durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means that we need to find the minimal possible difference in minutes between the concerts durations.\n\n# [code logic]\n    To solve this problem, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts, trying to balance the load as evenly as possible.\n    3. Calculate the absolute difference between the two concert durations.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: Luntik can distribute the songs into two concerts with durations 2 and 2, resulting in a difference of 0.\n    search([1, 2, 3]) = 1\n    Explanation: Luntik can distribute the songs into two concerts with durations 3 and 5, resulting in a difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach will naturally handle cases where the distribution is already balanced.\n\n# [code logic]\n    Here's a Python function to implement the solution:\n\n    ```python\n    def min_difference(a, b, c):\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        for i in range(4):\n            for j in range(4):\n                if (a + i) % 2 == 0 and (b + j) % 2 == 0:\n                    diff = abs((total_duration - (a + i) - 2*(b + j) - 3*c) - ((a + i) + 2*(b + j) + 3*c))\n                    min_diff = min(min_diff, diff)\n        return min_diff\n\n    # Example usage:\n    print(min_difference(1, 1, 1))  # Output: 0\n    print(min_difference(2, 1, 3))  # Output: 1\n    ```\n\n    This function iterates through possible distributions of one-minute and two-minute songs to find the minimal possible difference in concert durations.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the difference in their durations. The solution should be efficient and handle large inputs efficiently. The output should be accurate and provide the minimal possible difference for each test case.\nrequirement pool:\n- Implement an algorithm to distribute songs into two concerts with minimal duration difference.\n- Ensure the solution can handle up to 1000 test cases efficiently.\n- Provide clear and concise output for each test case.\n- Test the solution with large inputs to ensure it performs efficiently.\nTo solve this problem, we will use a simple approach that involves calculating the total duration of all songs and then trying to distribute them into two concerts such that the difference in their durations is minimized. This can be achieved by trying to balance the total duration as evenly as possible between the two concerts. We will use a brute-force approach to try all possible combinations of distributing the songs to achieve the minimal difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the total number of songs into two groups such that the sum of the durations of songs in each group is as close as possible.\n    Explanation: In this problem, Luntik has songs of different durations, and he wants to distribute them into two concerts to minimize the difference in their total durations. This involves finding a way to balance the load of song durations between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means that the goal is to minimize the difference in durations between the two concerts.\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a brute-force approach to try all possible combinations of distributing the songs into two concerts.\n    3. For each combination, calculate the difference in durations between the two concerts.\n    4. Keep track of the minimal difference found.\n    5. Return the minimal difference.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal distribution would be to include one song of each duration in each concert, resulting in a difference of 0.\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs in total. The optimal distribution might be to include four songs in one concert and the remaining two in the other, resulting in a difference of 2 (since the total duration is 12 and each concert would have a duration of 6).\n    Edge case 3:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There is only one song of each duration. The only way to distribute them is to include all in one concert and leave the other empty, resulting in a difference equal to the duration of the single song.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The brute-force approach will naturally handle cases with zero or one type of song.\n", "requirement analysis:\nThe problem requires finding the minimal absolute difference in total duration between two concerts given the number of songs of different durations. The solution should be efficient and handle multiple test cases. The input consists of a number of test cases followed by the number of songs of each duration for each test case. The output should be the minimal difference for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal difference in concert durations.\n- Ensure the solution can handle multiple test cases efficiently.\n- Optimize the distribution of songs to achieve the smallest possible difference.\n- Provide a user-friendly interface for input and output.\n- Include error handling for invalid inputs.\nWe will use a simple and efficient approach to solve the problem. The main challenge is to distribute the songs into two concerts with the smallest possible absolute difference in total duration. We will use a brute-force method to try all possible combinations of distributing the songs to achieve the minimal difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of dividing items or quantities into two or more groups or parts.\n    Explanation: In this problem, we need to distribute the songs of different durations into two concerts such that the total duration of each concert is as close as possible.\n\n# [phrase showing quantity relationship]\n    'smallest possible absolute difference': This phrase indicates that we need to find the minimal difference between the total durations of the two concerts.\n    Explanation: We need to find the smallest absolute difference between the total durations of the two concerts.\n\n# [degree adverb] \n    'smallest': This adverb indicates that we need to find the minimal value of the difference.\n    Explanation: We need to find the minimal difference in total duration between the two concerts.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Iterate through all possible combinations of distributing the songs into two concerts.\n    3. For each combination, calculate the total duration of each concert.\n    4. Compute the absolute difference between the two concert durations.\n    5. Keep track of the smallest absolute difference found.\n    6. Return the smallest absolute difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: The total duration is 3 minutes. By distributing one song to each concert, the total duration of each concert is 1.5 minutes, and the absolute difference is 0.\n    search([2, 1, 3]) = 1\n    Explanation: The total duration is 6 minutes. The best distribution is to put 2+3=5 minutes in one concert and 1 minute in the other, resulting in an absolute difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle the edge case where the total duration is evenly divisible by 2.\n\n# [code logic]\n    Here's a Python function to implement the logic described:\n\n    ```python\n    def min_difference(a, b, c):\n        total_duration = a + b + c\n        min_diff = float('inf')\n        \n        for i in range(1 << 3):  # There are 2^3 = 8 combinations\n            concert1 = 0\n            concert2 = 0\n            for j in range(3):\n                if i & (1 << j):\n                    concert1 += [a, b, c][j]\n                else:\n                    concert2 += [a, b, c][j]\n            min_diff = min(min_diff, abs(concert1 - concert2))\n        \n        return min_diff\n\n    # Example usage:\n    print(min_difference(1, 1, 1))  # Output: 0\n    print(min_difference(2, 1, 3))  # Output: 1\n    ```\n\n    This function iterates through all possible combinations of distributing the songs into two concerts and keeps track of the smallest absolute difference found.\n", "requirement analysis:\nThe problem requires finding the minimal absolute difference between the total durations of two concerts given the number of songs of different durations. This can be approached by trying to balance the load of durations as evenly as possible. The solution should be efficient and handle multiple test cases.\nrequirement pool:\n- Implement a function to calculate the minimal difference in song durations for each test case.\n- Ensure the solution can handle up to 1000 test cases efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm to handle large inputs without performance issues.\nTo solve this problem, we will use a simple brute-force approach to try all possible combinations of distributing the songs between two concerts. This approach will be efficient enough given the constraints of the problem, which is to handle up to 1000 test cases efficiently. We will iterate through all possible ways to distribute the songs and calculate the absolute difference in total duration for each distribution, then return the smallest difference found.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing items or quantities into two or more groups or parts.\n    Explanation: In this problem, we need to distribute the songs of different durations into two concerts such that the total duration of each concert is as close as possible. This involves finding a balance between the durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    'smallest possible absolute difference': means we need to find the minimum difference between the total durations of the two concerts.\n\n# [degree adverb] \n    'smallest': indicates that we are looking for the minimum value among all possible differences.\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Read the number of test cases.\n    2. For each test case, read the number of one-minute, two-minute, and three-minute songs.\n    3. Try all possible combinations of distributing the songs between two concerts.\n    4. Calculate the total duration of each concert for each combination.\n    5. Compute the absolute difference for each combination.\n    6. Keep track of the smallest absolute difference found.\n    7. Output the smallest absolute difference for each test case.\n\n# [edge case] \n    For a single test case with songs of durations [1, 2, 3]:\n    - Combination 1: Concert 1 = [1, 2], Concert 2 = [3]\n    - Combination 2: Concert 1 = [1, 3], Concert 2 = [2]\n    - Combination 3: Concert 1 = [2, 3], Concert 2 = [1]\n    - The minimal possible difference is 0, as one of the combinations has both concerts with the same total duration.\n    Explanation: In this case, the optimal distribution is to put one song of each duration in each concert, resulting in no difference in total duration.\n\n# [extra code for edge case]\n    We do not need extra code to handle this edge case, as the logic provided in the plan can naturally handle cases where the distribution is already balanced.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts with the smallest possible absolute difference in total duration. This involves finding an optimal way to allocate the songs to minimize the difference. The input consists of multiple test cases, each with a different set of songs. The output should provide the minimal difference for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal difference in concert durations.\n- Ensure the solution can handle large inputs efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for minimal computation time.\n- Ensure the solution is scalable and can handle future test cases.\nTo solve this problem efficiently, we will use a brute-force approach to iterate through all possible combinations of distributing the songs into two concerts. This approach will be simple and easy to understand, making it suitable for handling large inputs. We will calculate the total duration of each possible combination and then find the minimal absolute difference between the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing items or quantities into two groups or sets.\n    Explanation: In this problem, we need to distribute the songs of different durations into two concerts such that the total duration of each concert is as close as possible. This involves finding a balance between the durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    'smallest possible absolute difference': means the closest possible total duration between the two concerts.\n\n# [degree adverb] \n    'minimal': means the smallest or lowest degree of difference.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case, we need to:\n    1. Calculate the total duration of all songs.\n    2. Iterate through all possible ways to distribute the songs into two concerts.\n    3. For each distribution, calculate the absolute difference in total duration between the two concerts.\n    4. Keep track of the smallest absolute difference found.\n    5. Return the smallest absolute difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: The total duration is 3 minutes. We can distribute the songs as [1, 1, 1] or [1, 1, 1], resulting in two concerts with a total duration of 3 minutes each. The absolute difference is 0.\n    search([2, 1, 3]) = 1\n    Explanation: The total duration is 6 minutes. Possible distributions are [2, 1, 3] and [], [2, 1], [3], [2], [1], [], etc. The closest distribution is [2, 1] and [3], with an absolute difference of 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The brute-force approach inherently handles all possible distributions and finds the minimal difference.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts with the goal of minimizing the difference in their durations. This involves a balance between the number of one-minute, two-minute, and three-minute songs. The solution should be efficient and capable of handling a large number of test cases. The output should be accurate and clear for each test case.\nrequirement pool:\n- Implement an algorithm to distribute songs into two concerts with minimal difference in durations.\n- Ensure the solution can handle large input sizes efficiently.\n- Provide clear and accurate output for each test case.\n- Optimize the algorithm for optimal performance.\n- Ensure the user interface is simple and easy to use.\nTo solve this problem efficiently, we will use a dynamic programming approach. The idea is to calculate the total possible sum of durations for all songs and then use a subset sum problem approach to find the closest sum to half of the total sum. This will help us minimize the difference between the two concert durations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups (concerts) such that each song is included in exactly one group.\n    'minimal possible difference': aims to minimize the absolute difference between the total durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': indicates that we need to find the smallest possible difference between the two concert durations.\n\n# [code logic]\n    To solve this problem, we need to calculate the total duration of all songs and then find two subsets with the closest sum to half of the total sum. This can be efficiently done using dynamic programming.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The total duration is 1*1 + 2*1 + 3*1 = 6 minutes. The optimal way to distribute these songs is to put one-minute and three-minute songs in one concert and two-minute songs in the other. The durations will be 4 and 2 minutes, respectively, making the difference 2 minutes.\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs in total. The total duration is 2*1 + 2*2 + 2*3 = 12 minutes. The optimal way to distribute these songs is to put two one-minute songs, two two-minute songs, and two three-minute songs in each concert. The durations will be 6 minutes each, making the difference 0 minutes.\n    Edge case 3:\n    Input: a = 10^9, b = 10^9, c = 10^9\n    Explanation: This is a large input to test the efficiency of the solution. The total duration is very large, and the solution should handle such large numbers efficiently. The optimal distribution will still be to balance the sums as much as possible.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic is designed to work efficiently even for large inputs.\n"], "scores": [], "pass_results": [false, false, true, false, false, false, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 2, "round": 87, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "condense_two2one", "parent_index": 31}
