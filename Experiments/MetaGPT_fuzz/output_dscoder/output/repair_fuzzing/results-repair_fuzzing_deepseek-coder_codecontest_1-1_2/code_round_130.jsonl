{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing, and he has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert and make the absolute difference of durations of the concerts as small as possible.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing, and he has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert and make the absolute difference of durations of the concerts as small as possible.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing, and he has a one-minute song, b two-minute songs, and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included in exactly one concert and make the absolute difference of durations of the concerts as small as possible. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has songs of durations a, b, and c minutes, and he wants to distribute them into two concerts with the smallest possible absolute difference in durations. Find the minimal possible difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Distribute songs into two concerts with minimal difference in durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: Minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n\n    # Binary search to find the closest possible split\n    left, right = 0, total_duration\n    while left <= right:\n        mid = (left + right) // 2\n        diff = abs(2 * mid - total_duration)\n        min_diff = min(min_diff, diff)\n\n        if 2 * mid < total_duration:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return min_diff\n\n# Read input\nt = int(input().strip())\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimal possible difference to a large number\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing the songs\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                if (i + j + k) <= 4:\n                    duration1 = a * 1 + b * 2 + c * 3\n                    duration2 = total_duration - duration1\n                    diff = abs(duration1 - duration2)\n                    min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Distribute songs into two concerts with minimal difference in durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n\n    # Binary search to find the closest possible split\n    left, right = 0, total_duration\n    while left <= right:\n        mid = (left + right) // 2\n        diff = abs(2 * mid - total_duration)\n        min_diff = min(min_diff, diff)\n\n        if 2 * mid < total_duration:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return min_diff\n\n# Read input and output results\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Distribute songs of different durations into two concerts with the minimal possible difference in durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n\n    # Use a more efficient approach to find the optimal split point\n    for i in range(total_duration + 1):\n        diff = abs((total_duration - i) - i)\n        min_diff = min(min_diff, diff)\n\n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Finds the minimal possible difference in minutes between the durations of two concerts\n    where Luntik distributes songs of different durations into two concerts.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    min_diff = float('inf')\n\n    # Try all combinations of distributing songs to two concerts\n    for i in range(1 << 3):  # 2^3 = 8 combinations\n        duration1 = 0\n        duration2 = 0\n        for j in range(3):  # Check each song's inclusion in the first or second concert\n            if i & (1 << j):\n                duration1 += (j * 1) + 1  # Add the duration of the song to the first concert\n            else:\n                duration2 += (j * 1) + 1  # Add the duration of the song to the second concert\n        min_diff = min(min_diff, abs(duration1 - duration2))\n\n    return min_diff\n\n# Interface for the function\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # If the total duration is odd, it's impossible to split evenly\n    if total_duration % 2 != 0:\n        return 1\n    \n    # Use binary search to find the closest possible split that minimizes the absolute difference\n    left, right = 0, total_duration // 2\n    min_diff = total_duration\n    \n    while left <= right:\n        mid = (left + right) // 2\n        other_mid = total_duration - mid\n        diff = abs(mid - other_mid)\n        \n        if diff < min_diff:\n            min_diff = diff\n        \n        if mid < other_mid:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return min_diff\n\n# Read input and output results\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    # Sort the durations of the songs\n    durations = sorted([a, b, c])\n    \n    # Calculate the total duration of all songs\n    total_duration = sum(durations)\n    \n    # Initialize the minimal possible difference to a large number\n    min_diff = float('inf')\n    \n    # Use a two-pointer technique to find the optimal distribution\n    for i in range(3):\n        for j in range(i + 1, 3):\n            # Calculate the durations of the two concerts\n            duration1 = sum(durations[:i+1])\n            duration2 = sum(durations[i+1:j+1])\n            duration3 = sum(durations[j+1:])\n            \n            # Calculate the absolute difference between the two concerts\n            diff = max(duration1, duration2, duration3) - min(duration1, duration2, duration3)\n            \n            # Update the minimal possible difference\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    total_duration = a + b + c\n    min_diff = float('inf')\n    for i in range(1 << 3):  # There are 2^3 = 8 ways to distribute the songs\n        group1 = 0\n        group2 = 0\n        for j in range(3):\n            if i & (1 << j):\n                group1 += [a, b, c][j]\n            else:\n                group2 += [a, b, c][j]\n        min_diff = min(min_diff, abs(group1 - group2))\n    return min_diff\n\n# Example usage:\n# print(find_minimal_difference(1, 1, 1))  # Output: 0\n# print(find_minimal_difference(2, 1, 3))  # Output: 1\n\n# Interface for the program\nt = int(input().strip())\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\nfrom typing import List\n\ndef find_minimal_difference(songs: List[int]) -> int:\n    # Sort the song durations\n    songs.sort()\n    \n    # Calculate the total duration of all songs\n    total_duration = sum(songs)\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Use a greedy approach to distribute the songs into two concerts\n    for i in range(1 << 3):  # There are 2^3 = 8 ways to distribute the songs\n        concert1_duration = 0\n        concert2_duration = 0\n        for j in range(3):\n            if (i & (1 << j)):\n                concert1_duration += songs[j]\n            else:\n                concert2_duration += songs[j]\n        min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n    \n    return min_diff\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    songs = list(map(int, input().split()))\n    result = find_minimal_difference(songs)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Distribute songs of different durations into two concerts with the minimal possible difference in durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    min_diff = float('inf')\n    for i in range(4):\n        for j in range(4):\n            if i + j <= 4:\n                first_group_duration = (a - i) * 1 + (b - j) * 2 + c * 3\n                second_group_duration = total_duration - first_group_duration\n                diff = abs(first_group_duration - second_group_duration)\n                min_diff = min(min_diff, diff)\n    return min_diff\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where songs of different durations are distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the minimal possible difference between the durations of two concerts.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it runs within the given constraints.\nTo solve the problem of distributing songs into two concerts with minimal difference in durations, we can use a greedy approach. First, calculate the total duration of all songs. Then, use a binary search to find the closest possible split that minimizes the difference between the two concerts. This approach ensures efficiency and accuracy.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts such that each song is included in exactly one concert.\n    'minimal difference': means the smallest possible difference in the total duration of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means the goal is to minimize the difference.\n\n# [code logic]\n    To solve this problem, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a binary search approach to find the closest possible split that minimizes the difference between the two concerts.\n    3. For each test case, distribute the songs accordingly and calculate the difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs such that one concert has durations 1+1 = 2 and the other has 1, resulting in a difference of |2-1| = 1.\n    search([2, 1, 3]) = 1\n    explanation: Luntik can distribute the songs such that one concert has durations 2+1+3 = 6 and the other has 2+3 = 5, resulting in a difference of |6-5| = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already ensures that we find the minimal possible difference for each test case.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where Luntik's songs are distributed. The solution should consider the distribution of songs to achieve the smallest possible difference. The input consists of multiple test cases, each with a specific number of one-minute, two-minute, and three-minute songs. The output should provide the minimal difference for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal difference between the durations of two concerts.\n- Ensure the function can handle multiple test cases efficiently.\n- Develop a strategy to distribute songs to achieve the smallest possible difference.\n- Optimize the algorithm to handle large input sizes within reasonable time limits.\nTo solve the problem of distributing Luntik's songs into two concerts with the minimal possible difference in durations, we can use a greedy approach. The idea is to first sort the songs by their durations and then use a two-pointer technique to distribute them into two concerts. This approach ensures that we minimize the difference between the durations of the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts such that each song is included in exactly one concert.\n    'minimal difference': means finding the smallest possible difference in the total duration of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference in durations between the two concerts.\n\n# [code logic]\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts, trying to balance the durations as evenly as possible.\n    3. Calculate the difference between the durations of the two concerts.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: Luntik has one of each song. The optimal distribution is to put one one-minute song and one two-minute song in one concert, and the three-minute song in the other. The difference is |2 - 3| = 1.\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: Luntik has two of each song. The optimal distribution is to put two one-minute songs and one two-minute song in one concert, and the remaining two two-minute songs and two three-minute songs in the other. The difference is |7 - 6| = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach will naturally handle cases where the number of songs is small. For larger numbers, the logic remains the same, but the calculations will be more extensive.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where songs of different durations are distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Implement a function to find the minimal possible difference in minutes between the concerts durations.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it runs within the given constraints.\nTo solve the problem of distributing songs into two concerts with minimal difference in durations, we can use a greedy approach. First, calculate the total duration of all songs. Then, use a binary search to find the closest possible split that minimizes the difference between the two concerts. This approach ensures efficiency and simplicity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts such that each song is included in exactly one concert.\n    'minimal difference': means the smallest possible difference in the total duration of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means the goal is to minimize the difference.\n\n# [code logic]\n    To solve this problem, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a binary search approach to find the closest possible split that minimizes the difference between the two concerts.\n    3. For each test case, distribute the songs accordingly and calculate the difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs such that one concert has durations 1+1 = 2 and the other has 1, resulting in a difference of |2-1| = 1.\n    search([2, 2, 2]) = 1\n    explanation: Luntik can distribute the songs such that one concert has durations 2+2+2 = 6 and the other has 2+2 = 4, resulting in a difference of |6-4| = 2. However, the optimal distribution might be to have one concert with 2+2 = 4 and the other with 2+2+2 = 6, resulting in a difference of |4-6| = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic should be sufficient to find the minimal possible difference.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where songs of different durations are distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the minimal possible difference between the durations of two concerts.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it runs within the given constraints.\nTo solve the problem of distributing songs of different durations into two concerts with the minimal possible difference in durations, we can use a greedy approach. First, we calculate the total duration of all songs. Then, we use a binary search to find the closest possible split that minimizes the difference between the two concerts. This approach ensures efficiency and accuracy.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts such that each song is included exactly once and the difference in durations between the two concerts is minimized.\n    Explanation: The goal is to balance the total duration of songs between the two concerts as evenly as possible to achieve the smallest possible difference in their durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means that the difference between the durations of the two concerts should be as minimal as it can be.\n\n# [code logic]\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a binary search approach to find the optimal split point that minimizes the difference between the two concerts.\n    3. For each test case, distribute the songs accordingly and calculate the difference.\n\n# [edge case] \n    Edge case 1:\n    Input: [1, 1, 1]\n    Explanation: The total duration is 3 minutes. The optimal way to distribute the songs is to put one song in each concert, resulting in a difference of |1-2| = 1 minute.\n    Edge case 2:\n    Input: [2, 1, 3]\n    Explanation: The total duration is 6 minutes. The optimal way to distribute the songs is to put two songs in one concert and the rest in the other, resulting in a difference of |3-3| = 0 minutes.\n    Edge case 3:\n    Input: [5, 5, 5]\n    Explanation: The total duration is 15 minutes. The optimal way to distribute the songs is to put three songs in each concert, resulting in a difference of |7-8| = 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the provided logic already covers them. The binary search approach ensures that we find the optimal split point for any given distribution of songs.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where songs of different durations are distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the absolute difference between the two concert durations.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Implement a function to find the minimal possible difference between the two concert durations.\n- Ensure the solution is efficient enough to handle up to 1000 test cases.\n- Optimize the algorithm for large inputs to ensure it runs within reasonable time limits.\nTo solve the problem of distributing songs of different durations into two concerts with the minimal possible difference in durations, we can use a dynamic programming approach. The idea is to calculate the total duration of all songs and then find the closest possible split that minimizes the absolute difference between the two concert durations. This can be efficiently done using a bit manipulation technique to explore all possible combinations of songs in the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two groups (concerts) such that each song is included in exactly one group.\n    'minimal difference': means finding the smallest possible difference between the total durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means the goal is to minimize the difference.\n\n# [code logic]\n    To implement the solution, we need to consider the total duration of all songs and then find the closest possible split that minimizes the absolute difference between the two concert durations. This can be done using a dynamic programming approach or a bit manipulation technique to explore all possible combinations of songs in the two concerts.\n\n# [edge case] \n    test case 1:\n        Input: a = 1, b = 1, c = 1\n        Explanation: Luntik can distribute the songs as follows:\n            - First concert: 1 one-minute song and 1 two-minute song\n            - Second concert: 1 three-minute song\n            The difference between the durations of the two concerts is |(1+2) - 3| = 0.\n        Expected output: 0\n\n    test case 2:\n        Input: a = 2, b = 1, c = 2\n        Explanation: Luntik can distribute the songs as follows:\n            - First concert: 2 one-minute songs, 1 two-minute song, and 1 three-minute song\n            - Second concert: 2 three-minute songs\n            The duration of the first concert is 2*1 + 1*2 + 1*3 = 7.\n            The duration of the second concert is 2*3 = 6.\n            The difference between the durations of the two concerts is |7 - 6| = 1.\n        Expected output: 1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The given logic should be sufficient to find the minimal possible difference for any valid input within the constraints.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where Luntik's songs are distributed. The solution involves distributing the songs in a way that balances the total duration of the two concerts as evenly as possible. This can be achieved by first calculating the total duration of all songs and then finding the closest possible split that minimizes the absolute difference.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a strategy to distribute songs between two concerts to minimize the difference in duration.\n- Ensure the solution can handle multiple test cases efficiently.\n- Include user input handling for the number of test cases and song durations.\n- Implement output formatting to display the minimal possible difference for each test case.\nTo solve the problem of distributing Luntik's songs into two concerts with minimal difference in durations, we can use a greedy approach. First, we calculate the total duration of all songs. Then, we use a binary search to find the closest possible split that minimizes the absolute difference between the two concert durations. This approach ensures efficiency and correctness.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts such that each song is included exactly once and the difference in durations between the two concerts is minimized.\n    Explanation: The goal is to balance the total duration of songs between the two concerts as evenly as possible to achieve the smallest possible difference in their durations.\n\n# [phrase showing quantity relationship]\n    'as small as possible': means that we need to find the closest possible split that minimizes the absolute difference between the two concert durations.\n\n# [degree adverb] \n    'as small as possible': means that we need to find the closest possible split that minimizes the absolute difference between the two concert durations.\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a binary search approach to find the closest possible split that minimizes the absolute difference between the two concert durations.\n    3. For each test case, output the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: Luntik can distribute the songs such that one song goes to each concert, making the difference 0.\n    search([2, 2, 2]) = 2\n    Explanation: The best distribution would be to put two songs in each concert, making the difference between the concert durations 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already ensures that the minimal possible difference is calculated correctly.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the total duration is odd, as it might not be possible to split evenly.\n        if total_duration % 2 != 0:\n            return 1  # Since it's impossible to split an odd total duration evenly, we return 1 as the minimal possible difference.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference between the total durations of two concerts when distributing songs of different durations. The solution should be efficient and handle up to 1000 test cases, each with songs of durations between 1 and 10^9 minutes. The output should be the minimal difference for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal difference between the total durations of two concerts.\n- Ensure the solution is optimized for handling large inputs efficiently.\n- Provide clear and accurate output for each test case.\n- Test the solution with up to 1000 test cases to ensure reliability.\n- Optimize the algorithm to handle the upper limit of input values.\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in the total durations of the two concerts. We will sort the song durations and then use a two-pointer technique to find the optimal distribution. This approach ensures that we can handle large inputs efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups with the smallest possible difference in total duration.\n    'greedy approach': means selecting the largest possible song for one concert and the smallest for the other to minimize the difference.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case:\n    1. Read the input values for a, b, and c.\n    2. Sort the durations [a, b, c].\n    3. Calculate the total duration of all songs.\n    4. Use a two-pointer technique to distribute the songs into two concerts, aiming to minimize the absolute difference.\n    5. Output the minimal possible difference.\n\n# [edge case] \n    search([1, 2, 3]) = 1\n    explanation: The total duration is 6, and the optimal distribution is [3, 3] and [2, 1], with a difference of 1.\n    search([1, 2, 4]) = 1\n    explanation: The total duration is 7, and the optimal distribution is [4, 3] and [2, 1], with a difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach ensures that we can find the optimal distribution efficiently.\n\n# [code logic]\n    For each test case:\n    1. Read the input values for a, b, and c.\n    2. Sort the durations [a, b, c].\n    3. Calculate the total duration of all songs.\n    4. Use a two-pointer technique to distribute the songs into two concerts, aiming to minimize the absolute difference.\n    5. Output the minimal possible difference.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations when distributing songs into two concerts. The solution should be efficient and handle large inputs. The output should be the minimal difference for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal difference in concert durations.\n- Ensure the solution is optimized for large inputs.\n- Provide clear and concise output for each test case.\n- Handle edge cases and ensure robustness.\nTo solve the problem of distributing songs into two concerts with the smallest possible absolute difference in durations, we can use a simple brute-force approach. This approach will iterate through all possible combinations of distributing the songs to minimize the difference. Given the constraints, we will use Python due to its efficiency and ease of use with large numbers.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing items or quantities into parts or groups.\n    'smallest possible absolute difference': the goal is to minimize the difference between the total durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    'smallest possible': means we need to find the minimum difference between the two groups.\n\n# [degree adverb] \n    'smallest possible': means we need to find the minimum difference between the two groups.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case, we need to:\n    1. Calculate the total duration of all songs.\n    2. Iterate through all possible ways to distribute the songs into two groups.\n    3. For each distribution, calculate the absolute difference between the two groups.\n    4. Keep track of the smallest absolute difference found.\n    5. Return the smallest absolute difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: The total duration is 3 minutes. We can distribute the songs as [1, 2] and [1, 0] or any other combination that sums to 3. The smallest possible difference is 0.\n    search([2, 1, 3]) = 1\n    Explanation: The total duration is 6 minutes. The best distribution is [2, 3] and [1], with a difference of 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The brute-force approach will naturally handle cases with equal distribution.\n\n# [code logic]\n    Here's a Python function to implement the logic described:\n\n    ```python\n    def min_difference(a, b, c):\n        total_duration = a + b + c\n        min_diff = float('inf')\n        for i in range(1 << 3):  # There are 2^3 = 8 ways to distribute the songs\n            group1 = 0\n            group2 = 0\n            for j in range(3):\n                if i & (1 << j):\n                    group1 += [a, b, c][j]\n                else:\n                    group2 += [a, b, c][j]\n            min_diff = min(min_diff, abs(group1 - group2))\n        return min_diff\n\n    # Example usage:\n    print(min_difference(1, 1, 1))  # Output: 0\n    print(min_difference(2, 1, 3))  # Output: 1\n    ```\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations when distributing songs into two concerts. The solution should be efficient and handle a large number of test cases. The input consists of multiple test cases, each with three song durations, and the output should be the minimal difference for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal difference in concert durations.\n- Ensure the solution can handle up to 1000 test cases efficiently.\n- Provide clear and accurate output for each test case.\n- Optimize the algorithm to handle large input sizes without performance issues.\nTo solve the problem of distributing songs into two concerts with the smallest possible absolute difference in durations, we will use a greedy approach. The idea is to sort the song durations and then try to balance the total duration between the two concerts by selecting the songs in a way that minimizes the difference. This approach ensures efficiency and can handle large inputs well.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': distributing songs into two concerts with the smallest possible absolute difference in durations.\n    Explanation: The core concept involves balancing the total duration of songs between two concerts to minimize the absolute difference in their durations.\n\n# [phrase showing quantity relationship]\n    'smallest possible': means the difference should be as low as possible.\n    'absolute difference': means the difference without considering which concert has more duration.\n\n# [degree adverb] \n    'smallest': means the difference should be as low as possible.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case:\n    1. Read the input values for the number of one-minute, two-minute, and three-minute songs.\n    2. Sort the song durations.\n    3. Calculate the total duration of all songs.\n    4. Use a greedy approach to distribute the songs into two concerts, trying to balance the durations as much as possible.\n    5. Calculate the absolute difference between the two concert durations.\n    6. Output the minimal possible difference for each test case.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: All songs are of the same duration, so they can be evenly distributed between the two concerts, resulting in an absolute difference of 0.\n    search([2, 1, 3]) = 1\n    Explanation: The sorted order is [1, 2, 3]. Distributing them as [1, 2] and [3] results in an absolute difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach inherently handles cases where all songs are of the same duration.\n\n# [edge case] \n    search([5, 5, 5]) = 0\n    Explanation: All songs are of the same duration, so they can be evenly distributed between the two concerts, resulting in an absolute difference of 0.\n    search([1, 1, 2]) = 1\n    Explanation: The sorted order is [1, 1, 2]. Distributing them as [1, 1] and [2] results in an absolute difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach inherently handles cases where all songs are of the same duration.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where songs of different durations are distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Implement a function to find the minimal possible difference between the durations of two concerts.\n- Ensure the solution is efficient enough to handle up to 1000 test cases.\n- Optimize the algorithm for large inputs to ensure it runs within reasonable time limits.\nTo solve the problem of distributing songs of different durations into two concerts with the minimal possible difference in durations, we can use a dynamic programming approach. The idea is to calculate the total duration of all songs and then find the closest possible split that minimizes the difference between the two concerts. This approach ensures efficiency and can handle up to 1000 test cases.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two groups (concerts) such that the total duration of songs in each group is as balanced as possible.\n    'absolute difference': means the difference without considering which group is larger.\n\n# [phrase showing quantity relationship]\n    'as small as possible': means we need to minimize the difference between the two groups.\n\n# [degree adverb] \n    'as small as possible': means we need to find the smallest possible difference.\n\n# [code logic]\n    To solve this problem, we can use a greedy approach. First, calculate the total duration of all songs. Then, try to distribute the songs into two groups such that the total duration of each group is as close as possible to half of the total duration. This can be done by sorting the songs by their durations and then trying to include each song in one of the groups, ensuring the sum of durations in each group is as balanced as possible.\n\n# [edge case] \n    test case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: The total duration is 1 + 1 + 1 = 3. The optimal distribution is to put one one-minute song and one two-minute song in one group, and the three-minute song in the other group. The difference is |2 - 1| = 1.\n    Expected Output: 1\n\n    test case 2:\n    Input: a = 2, b = 1, c = 2\n    Explanation: The total duration is 2*1 + 1 + 2*3 = 9. The optimal distribution is to put two one-minute songs and one two-minute song in one group, and the two three-minute songs in the other group. The difference is |5 - 4| = 1.\n    Expected Output: 1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach described above will work for all test cases, including the edge cases where the number of songs of each duration is minimal.\n"], "scores": [], "pass_results": [false, true, false, true, false, true, false, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 130, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "condense_two2one", "parent_index": 31}
