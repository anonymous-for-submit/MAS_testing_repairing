{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He possesses a collection of songs that last one minute, two minutes, and three minutes, and he wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song. Consider edge cases like all songs having the same duration or having one song significantly longer than the others.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He possesses a collection of songs that last one minute, two minutes, and three minutes, and he wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song. Consider edge cases like all songs having the same duration or having one song significantly longer than the others.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has a collection of songs with varying durations: one minute, two minutes, and three minutes. He needs to divide these songs into two concerts such that each song is included in exactly one concert. The goal is to minimize the absolute difference in the total duration of the two concerts. Help Luntik find the smallest possible difference in minutes between the concert durations. Keep in mind that he cannot alter the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has a collection of songs with durations of one, two, and three minutes, and he needs to distribute them into two concerts with the goal of minimizing the absolute difference in their durations. Help him find the smallest possible difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\nimport sys\n\ndef distribute_songs(a: int, b: int, c: int) -> int:\n    # Sort the durations of the songs\n    songs = [a, b, c]\n    songs.sort()\n    \n    # Calculate the total duration of all songs\n    total_duration = sum(songs)\n    \n    # The target duration for each concert\n    target_duration = total_duration // 2\n    \n    # Initialize the minimum difference to a large number\n    min_difference = float('inf')\n    \n    # Try all possible ways to split the songs into two concerts\n    for i in range(1 << 3):  # There are 2^3 = 8 ways to distribute the songs\n        concert1_duration = 0\n        concert2_duration = 0\n        for j in range(3):\n            if i & (1 << j):\n                concert1_duration += songs[j]\n            else:\n                concert2_duration += songs[j]\n        min_difference = min(min_difference, abs(concert1_duration - concert2_duration))\n    \n    return min_difference\n\n# Provide the Interface\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = distribute_songs(a, b, c)\n    print(result)\n", "from typing import List\ndef distribute_songs(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Distribute songs of 1, 2, and 3 minutes into two concerts to minimize the absolute difference in durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    ideal_duration = total_duration // 2\n    min_difference = float('inf')\n\n    # Try all combinations to find the minimal difference\n    for i in range(c + 1):\n        for j in range(b + 1):\n            for k in range(a + 1):\n                duration1 = i * 3 + j * 2 + k * 1\n                duration2 = total_duration - duration1\n                difference = abs(duration1 - duration2)\n                min_difference = min(min_difference, difference)\n\n    return min_difference\n\n# Read input and output results\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = distribute_songs(a, b, c)\n    print(result)\n", "from typing import List\ndef distribute_songs(a, b, c):\n    # Sort the durations of the songs\n    songs = [a, b, c]\n    songs.sort()\n    \n    # Use a two-pointer technique to distribute the songs into two groups\n    total_duration = sum(songs)\n    target_duration = total_duration // 2\n    left_duration = 0\n    right_duration = total_duration\n    \n    for i in range(3):\n        left_duration += songs[i]\n        right_duration -= songs[i]\n        if left_duration > target_duration:\n            break\n    \n    # Calculate the absolute difference\n    difference = abs(left_duration - right_duration)\n    \n    return difference\n\n# Provide the Interface\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = distribute_songs(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_min_difference(a, b, c):\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the durations of two concerts.\n    \n    Args:\n        a (int): The number of one-minute songs.\n        b (int): The number of two-minute songs.\n        c (int): The number of three-minute songs.\n        \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible combinations of distributing the songs into two concerts\n    for i in range(1 << 3):  # There are 2^3 = 8 possible combinations\n        concert1_duration = 0\n        concert2_duration = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                concert1_duration += (j + 1) * [1, 2, 3][j]\n            else:\n                concert2_duration += (j + 1) * [1, 2, 3][j]\n        \n        # Calculate the absolute difference\n        diff = abs(concert1_duration - concert2_duration)\n        \n        # Update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_min_difference(a, b, c):\n    total_duration = a + 2 * b + 3 * c\n    target_duration = total_duration // 2\n    \n    # Try to balance the load by including as many songs as possible in one concert\n    min_diff = float('inf')\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                duration_one = i + 2 * j + 3 * k\n                duration_two = total_duration - duration_one\n                diff = abs(duration_one - duration_two)\n                if diff < min_diff:\n                    min_diff = diff\n    \n    return min_diff\n\n# Read input and output results\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\ninput = sys.stdin.read\n\ndef find_min_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the durations of two concerts.\n    \n    Args:\n        a (int): The number of one-minute songs.\n        b (int): The number of two-minute songs.\n        c (int): The number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of two concerts.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    max_songs_in_one_concert = total_duration // 2\n    min_diff = float('inf')\n\n    for i in range(max_songs_in_one_concert + 1):\n        for j in range(max_songs_in_one_concert + 1 - i):\n            k = total_duration - i * 1 - j * 2 - (max_songs_in_one_concert - i - j) * 3\n            if k >= 0:\n                duration_1 = i * 1 + j * 2 + k * 3\n                duration_2 = total_duration - duration_1\n                diff = abs(duration_1 - duration_2)\n                min_diff = min(min_diff, diff)\n\n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Sort the number of songs by their durations\n    songs = [a, b, c]\n    songs.sort()\n    \n    # Distribute the songs with the smallest durations first\n    first_concert = songs[0] + songs[3]\n    second_concert = songs[1] + songs[2]\n    \n    # Calculate the absolute difference between the durations of the two concerts\n    return abs(first_concert - second_concert)\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_min_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible distributions of songs into two concerts\n    for i in range(total_duration + 1):\n        # Calculate the duration of the first concert\n        first_duration = i\n        # Calculate the duration of the second concert\n        second_duration = total_duration - i\n        # Calculate the absolute difference between the two concert durations\n        diff = abs(first_duration - second_duration)\n        # Update the minimum difference if the current one is smaller\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_min_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the durations of two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of two concerts.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # The optimal strategy is to prioritize the songs with the largest durations for the first concert\n    # Calculate the duration of each concert\n    first_concert_duration = total_duration // 2\n    second_concert_duration = total_duration - first_concert_duration\n    \n    # Compute the absolute difference between the two concert durations\n    min_difference = abs(first_concert_duration - second_concert_duration)\n    \n    return min_difference\n\n# Provide the Interface\nt = int(sys.stdin.readline().strip())\nfor _ in range(t):\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef distribute_songs(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Distribute songs into two concerts with minimal difference in duration.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n        \n    Returns:\n        int: Minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_difference = float('inf')\n    \n    # Try all possible combinations of distributing the songs\n    for i in range(4):\n        for j in range(4):\n            if (a + b + c - i - j) % 2 == 0:\n                x = (a + b + c + i - j) // 2\n                y = (a + b + c - i - j) // 2\n                if x >= 0 and y >= 0 and x + y == a + b + c:\n                    difference = abs(x - (a + b + c - x))\n                    min_difference = min(min_difference, difference)\n    \n    return min_difference\n\n# Read input and output results\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = distribute_songs(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires finding the optimal way to distribute songs into two concerts to minimize the absolute difference in their durations. This involves considering the number of each type of song and finding a combination that balances the total durations as closely as possible. The solution should be efficient and handle a reasonable number of test cases without timing out or using excessive memory.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations\n- Ensure the solution can handle up to 1000 test cases\n- Optimize the algorithm for performance to handle large inputs\n- Add error handling for invalid inputs\n- Include documentation and comments for better understanding and maintenance\nTo solve this problem, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in the total durations of the concerts. We will sort the songs by their durations and then use a two-pointer technique to distribute them into two concerts. This approach ensures that we are always trying to balance the durations as evenly as possible.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert.\n    'minimizing the difference': means making the total duration of both concerts as close as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means we need to find the smallest possible difference between the two concerts.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Sort the durations of the songs.\n    Use a two-pointer technique to distribute the songs into two concerts.\n    Calculate the difference between the total durations of the two concerts.\n    Return the minimal possible difference.\n\n# [edge case] \n    All songs have the same duration.\n    Expected output: 0\n    Explanation: Since all songs have the same duration, they can be evenly distributed between the two concerts, resulting in a difference of 0.\n\n    One song significantly longer than the others.\n    Expected output: The duration of the longest song.\n    Explanation: If one song is significantly longer, it will be placed in the concert with the longer duration, and the difference will be equal to the duration of that song.\n\n    One type of song is significantly more numerous than the others.\n    Expected output: The difference in the number of the most numerous type of song.\n    Explanation: If one type of song is much more numerous, it will dominate the duration of the concert it is placed in, leading to a difference equal to the number of that type of song.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    For the case where all songs have the same duration, we can directly return 0.\n    For the case where one song is significantly longer, we can calculate the difference as the duration of that song.\n    For the case where one type of song is more numerous, we can calculate the difference as the number of that type of song.\n\n    Additional code to handle these edge cases:\n    if a == b == c:\n        return 0\n    if a > b and a > c:\n        return a\n    if b > a and b > c:\n        return b\n    if c > a and c > b:\n        return c\n    if a == max(a, b, c):\n        return a\n    if b == max(a, b, c):\n        return b\n    if c == max(a, b, c):\n        return c\n", "requirement analysis:\nThe primary requirement is to calculate the minimal possible difference in durations between the two concerts. This involves distributing the songs as evenly as possible between the two concerts. The solution should be efficient and capable of handling up to 1000 test cases, each with three integers representing the number of one, two, and three-minute songs. The output should be the minimal difference in minutes for each test case.\nrequirement pool:\n- Implement an algorithm to distribute songs evenly between two concerts.\n- Ensure the solution can handle up to 1000 test cases efficiently.\n- Optimize the algorithm for minimal difference in concert durations.\n- Add error handling for invalid inputs.\n- Include user instructions and clear output format.\nTo solve this problem, we will use a simple Python function that calculates the minimal possible difference in durations between the two concerts by distributing the songs as evenly as possible. The function will take into account the number of one, two, and three-minute songs and will aim to balance the durations of the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of assigning items or amounts to different groups or containers to balance their characteristics or values.\n    Explanation: In this problem, Luntik needs to distribute his songs into two concerts such that the absolute difference between the durations of the concerts is minimized. This involves balancing the total duration of songs in each concert.\n\n# [phrase showing quantity relationship]\n    'as small as possible': Indicates that we need to find the smallest possible difference between the two concert durations.\n\n# [degree adverb] \n    'as small as possible': Indicates the need to find the smallest possible difference.\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Determine the ideal duration for each concert by dividing the total duration by 2.\n    3. Distribute the songs to minimize the absolute difference between the two concert durations.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Edge case 1: All songs have the same duration.\n    search([1, 1, 1]) = 0\n    Explanation: Since all songs are of the same duration, Luntik can distribute them evenly between the two concerts, resulting in a difference of 0.\n\n    Edge case 2: One song significantly longer than the others.\n    search([1, 1, 10]) = 8\n    Explanation: With one song being much longer, the best distribution would be to place the shorter songs in one concert and the longer song in the other, resulting in a difference of |3 - 10| = 8.\n\n    Edge case 3: All songs have different durations.\n    search([1, 2, 3]) = 1\n    Explanation: The optimal distribution would be to place one-minute and two-minute songs in one concert and the three-minute song in the other, resulting in a difference of |3 - 3| = 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already considers the distribution of songs to balance the concert durations.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the difference in their durations. The solution should be efficient and handle edge cases effectively. The input consists of multiple test cases, each with a different combination of one-minute, two-minute, and three-minute songs. The output should be the minimal possible difference in minutes between the durations of the two concerts for each test case.\nrequirement pool:\n- Implement an algorithm to distribute songs into two concerts to minimize the difference in their durations\n- Handle edge cases where all songs have the same duration or one song is significantly longer than others\n- Ensure the solution is efficient and can handle large inputs\n- Provide clear and concise output showing the minimal possible difference in minutes between the concerts durations\n- Test the solution with multiple test cases to ensure reliability and accuracy\nTo solve this problem, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in the total duration of the two concerts. We will sort the songs by their duration and then use a two-pointer technique to distribute them into two groups. This approach ensures that we are always trying to balance the durations as we go through the list of songs.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert to minimize the difference in total duration between the two concerts.\n    'greedy approach': means selecting the optimal solution at each step without considering the overall result, focusing on immediate optimization.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the absolute difference in durations between the two concerts.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Sort the durations of the songs.\n    Use a two-pointer technique to distribute the songs into two groups.\n    Calculate the total duration of each group and find the absolute difference.\n    Return the minimal possible difference.\n\n# [edge case] \n    All songs have the same duration.\n    Expected output: 0\n    Explanation: Since all songs have the same duration, they can be evenly distributed between the two concerts, resulting in a difference of 0.\n\n    One song significantly longer than the others.\n    Expected output: The duration of the longest song.\n    Explanation: If one song is significantly longer, it will dominate the duration of one concert, leading to a large difference between the two concerts.\n\n    One type of song is significantly more numerous than the others.\n    Expected output: The difference in duration between the most numerous and the least numerous songs.\n    Explanation: The most numerous songs will dominate the distribution, leading to a larger difference between the two concerts.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where all songs have the same duration.\n        if a == b == c:\n            return 0\n\n    We need extra code to handle the edge case where one song is significantly longer than the others.\n        max_duration = max(a, b, c)\n        return max_duration\n\n    We need extra code to handle the edge case where one type of song is significantly more numerous than the others.\n        most_numerous = max(a, b, c)\n        least_numerous = min(a, b, c)\n        return most_numerous - least_numerous\n", "requirement analysis:\nThe problem requires a method to distribute songs into two concerts to minimize the absolute difference in their total durations. This involves a combinatorial approach to find the best distribution. The solution should be efficient and handle large inputs within reasonable time limits. The output should be accurate for each test case, providing the smallest possible difference in minutes between the concert durations.\nrequirement pool:\n- Implement an algorithm to find the optimal distribution of songs.\n- Ensure the solution is scalable and can handle large inputs efficiently.\n- Provide clear and accurate output for each test case.\n- Develop a user-friendly interface for easy interaction.\n- Test and validate the solution to ensure reliability and accuracy.\nTo solve this problem, we will use a combinatorial approach to find the optimal distribution of songs into two concerts. The goal is to minimize the absolute difference in the total duration of the two concerts. We will use a brute-force method to try all possible combinations of songs and calculate the difference for each combination. The smallest difference found will be the answer.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'combinatorial optimization': This involves finding the best possible arrangement of elements to achieve a specific goal, in this case, minimizing the absolute difference in the total duration of the two concerts.\n    Explanation: The problem requires finding an optimal way to distribute songs of different durations into two concerts to minimize the difference in their total durations. This is a combinatorial problem where we need to explore all possible distributions and select the one with the smallest difference.\n\n# [phrase showing quantity relationship]\n    'varying durations': This indicates that the songs have different lengths, which are one minute, two minutes, and three minutes.\n    'exactly one concert': This means each song must be assigned to one and only one concert.\n    'absolute difference': This refers to the difference between the total durations of the two concerts, and we aim to minimize this difference.\n\n# [degree adverb] \n    'minimal possible': This suggests that we need to find the smallest difference in durations between the two concerts.\n    'brute-force method': This implies that we will explore all possible combinations of distributing the songs to achieve the goal of minimizing the difference.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we need to consider the following steps:\n    1. Calculate the total duration of all songs.\n    2. Use a brute-force approach to try all possible combinations of distributing the songs into two concerts.\n    3. For each combination, calculate the absolute difference in durations between the two concerts.\n    4. Track the smallest absolute difference found.\n    5. Return the smallest absolute difference as the result.\n\n# [edge case] \n    Edge case 1: [1, 1, 1]\n    Expected output: 0\n    Explanation: In this case, the total duration of all songs is 1 + 1 + 1 = 3 minutes. We can distribute the songs such that both concerts have a duration of 1.5 minutes, resulting in an absolute difference of 0.\n\n    Edge case 2: [2, 1, 3]\n    Expected output: 1\n    Explanation: The total duration of all songs is 2 + 1 + 3 = 6 minutes. One possible distribution is to put two one-minute songs and a two-minute song in one concert, and the remaining songs in the other concert. This results in a difference of |3 - 3| = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The brute-force approach inherently handles all possible distributions, and we can directly calculate the smallest difference for each test case.\n", "requirement analysis:\nThe problem requires finding the optimal way to divide songs into two concerts to minimize the absolute difference in their total durations. This is a classic optimization problem that can be approached using a greedy algorithm or dynamic programming. The input consists of multiple test cases, each with a different set of song counts. The goal is to output the smallest possible difference in minutes between the two concerts for each test case.\nrequirement pool:\n- Implement a function to calculate the optimal concert division for each test case\n- Ensure the solution is efficient and can handle large inputs\n- Provide clear and accurate output for each test case\nTo solve this problem efficiently, we can use a greedy algorithm approach. The idea is to first calculate the total duration of all songs and then try to find a way to split the songs into two concerts such that the absolute difference in their durations is minimized. This can be achieved by trying to balance the load by including as many songs as possible in one concert without exceeding the total duration divided by 2. We will use a simple iterative approach to try different combinations of songs to find the optimal solution.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'Minimize the absolute difference': The goal is to divide the songs into two concerts with the smallest possible difference in total duration.\n    Explanation: This involves finding a way to distribute the songs such that the sum of the durations in one concert is as close as possible to half of the total duration.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Determine the target duration for each concert, which is half of the total duration.\n    3. Use a greedy approach to try to fill one concert with as many songs as possible without exceeding the target duration.\n    4. Calculate the difference between the total duration of the filled concert and the target duration.\n    5. Repeat the process for the other concert to find the minimal possible difference.\n\n# [edge case] \n    Edge case 1:\n    Input: [1, 1, 1]\n    Explanation: The total duration is 1 + 1 + 1 = 3. The target duration for each concert is 3 / 2 = 1.5. Since we cannot have half a song, we need to consider the closest integer values. The best we can do is to include one song of each type, which sums up to 1 + 1 + 1 = 3, and the difference is 0.\n    Edge case 2:\n    Input: [2, 1, 3]\n    Explanation: The total duration is 2 + 1 + 3 = 6. The target duration for each concert is 6 / 2 = 3. We can include two one-minute songs and a two-minute song in one concert, which sums up to 2 + 2 + 1 = 5. The other concert will have a three-minute song, and the difference is |5 - 3| = 2.\n    Edge case 3:\n    Input: [5, 5, 5]\n    Explanation: The total duration is 5 + 5 + 5 = 15. The target duration for each concert is 15 / 2 = 7.5. We can include five one-minute songs and five two-minute songs in one concert, which sums up to 5 + 5 + 5 + 5 = 10, and the difference is |10 - 7.5| = 2.5. However, we can improve this by including one three-minute song in the first concert, which sums up to 5 + 5 + 5 + 1 = 16, and the difference is |16 - 7.5| = 8.5. This is not optimal, so we need to try other combinations.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the total duration is not evenly divisible by 2. In such cases, we need to consider the closest integer values for the concert durations and try to balance the load as closely as possible. This may involve some iterative checking of different combinations of songs to find the optimal solution.\n", "requirement analysis:\nThe problem requires finding the optimal way to divide songs into two concerts to minimize the absolute difference in their total durations. This involves a combinatorial approach to try all possible splits and calculate the differences. The solution should be efficient and handle large inputs.\nrequirement pool:\n- Implement a function to calculate the total duration of songs for each possible split.\n- Develop a method to find the split that minimizes the absolute difference between the two concert durations.\n- Ensure the solution is optimized for performance, especially for large inputs.\n- Provide clear and readable code to facilitate maintenance and debugging.\nTo solve this problem, we will use a combinatorial approach to try all possible splits of the songs into two concerts and calculate the absolute difference in their total durations. Given the constraints, we will focus on optimizing the performance for large inputs by using efficient algorithms and data structures.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'absolute difference': the smallest possible difference in the total duration of the two concerts.\n    Explanation: This concept involves finding the minimum difference between the sum of durations of songs in two different concerts.\n\n# [phrase showing quantity relationship]\n    'more than': not explicitly mentioned in the requirement.\n\n# [degree adverb] \n    'smallest': indicates the goal is to find the minimum difference.\n\n# [code logic]\n    To solve this problem, we need to consider all possible ways to split the songs into two concerts and calculate the absolute difference in their total durations. This can be done by iterating through all combinations of songs and calculating the differences.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: In this case, Luntik can distribute the songs evenly among the two concerts, resulting in no difference in total duration.\n    search([1, 2, 3]) = 1\n    Explanation: The optimal way to split these songs is to put one one-minute and two three-minute songs in one concert and the rest in the other, resulting in a difference of 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan can handle cases where the distribution is even or nearly even.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the number of songs is very large. The provided logic may not be efficient for large inputs, and we may need to optimize it using more efficient algorithms or data structures.\n", "requirement analysis:\nThe problem requires finding the optimal distribution of songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to try different distributions and calculate the differences. The solution should be efficient enough to handle up to 1000 test cases, each with up to 10^9 songs of each type.\nrequirement pool:\n- Implement an efficient algorithm to find the optimal distribution of songs.\n- Ensure the solution can handle large inputs without performance issues.\n- Provide clear and concise output for each test case.\n- Test the solution with multiple test cases to ensure robustness.\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs. The idea is to prioritize the songs with the smallest durations for balancing the concerts. We will sort the songs by their durations and then try to distribute them in a way that minimizes the absolute difference in the total durations of the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'absolute difference': the smallest possible difference between two values\n    'greedy approach': a strategy to solve a problem by always making the choice that looks the best at the moment\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The best way to distribute the songs is to put one one-minute song, one two-minute song, and one three-minute song in each concert. The difference will be 0.\n    search([2, 1, 3]) = 1\n    explanation: The best way to distribute the songs is to put two one-minute songs and one two-minute song in the first concert, and two three-minute songs in the second concert. The difference will be 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach will naturally handle cases where the number of songs of each duration is balanced.\n\n# [code logic]\n    For each test case, we need to:\n    1. Read the number of one-minute, two-minute, and three-minute songs.\n    2. Use a greedy approach to distribute the songs, prioritizing the smallest durations first.\n    3. Calculate the absolute difference between the durations of the two concerts.\n    4. Output the minimal possible difference for each test case.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the absolute difference in their durations. This can be approached by calculating the total duration and then finding the closest division possible. The solution should be efficient and handle up to 1000 test cases with song counts up to 10^9.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a method to distribute songs into two concerts to minimize the absolute difference in their durations.\n- Ensure the solution can handle up to 1000 test cases.\n- Optimize the algorithm to handle large input sizes efficiently.\n- Provide clear and concise output for each test case.\nTo solve this problem, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in their durations. We will calculate the total duration of all songs and then find the closest division possible into two concerts. This can be efficiently done by considering the distribution of the most abundant song type first.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'greedy approach': This approach involves making the best choice at each step without considering the overall result, focusing on optimizing the immediate result.\n    Explanation: In this problem, the goal is to minimize the absolute difference in durations between two concerts. By using a greedy approach, we can distribute the songs in a way that balances the load between the two concerts as evenly as possible.\n\n# [phrase showing quantity relationship]\n    'more than': This phrase indicates that a certain condition must be met, in this case, the number of songs of each type must be greater than a certain value.\n    'at least as many times': This phrase indicates that the number of songs of a certain type must be at least equal to its value.\n\n# [degree adverb] \n    'smallest possible': This adverb indicates that we need to find the smallest difference between the durations of the two concerts.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts, prioritizing the distribution of the most abundant song type first.\n    3. Calculate the duration of each concert.\n    4. Find the absolute difference between the durations of the two concerts.\n    5. Return the smallest possible difference.\n\n# [edge case] \n    Edge Case 1:\n    Input: [1, 1, 1]\n    Explanation: The total duration is 3, and the optimal distribution is to put one song in each concert, resulting in a difference of |1-2| = 1.\n    Edge Case 2:\n    Input: [2, 2, 2]\n    Explanation: The total duration is 6, and the optimal distribution is to put two songs in each concert, resulting in a difference of |3-3| = 0.\n    Edge Case 3:\n    Input: [1, 2, 3]\n    Explanation: The total duration is 6, and the optimal distribution is to put one song in one concert and the rest in the other, resulting in a difference of |3-3| = 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach inherently handles the distribution of songs to minimize the difference.\n", "requirement analysis:\nThe problem requires finding the optimal way to distribute songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial optimization problem where the goal is to balance the total duration of the two concerts as evenly as possible. The solution should be efficient and handle up to 1000 test cases, each with up to 10^9 songs.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs.\n- Ensure the solution can handle up to 1000 test cases.\n- Optimize the algorithm for performance efficiency.\n- Provide clear and accurate output for each test case.\n- Ensure the solution is user-friendly and easy to understand.\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs. The idea is to prioritize the songs with the largest durations for the first concert to balance the durations as evenly as possible. This approach ensures that we minimize the absolute difference in the durations of the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'absolute difference': the smallest possible difference between two values\n\n    'greedy approach': selecting the best option at each step without considering the overall result\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The best distribution is to put one one-minute song, one two-minute song, and one three-minute song in each concert, resulting in a difference of 0.\n    search([2, 2, 2]) = 0\n    explanation: The best distribution is to put two one-minute songs, two two-minute songs, and two three-minute songs in each concert, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach will naturally handle cases where all song durations are the same.\n\n# [code logic]\n    For each test case, we need to distribute the songs in a way that minimizes the absolute difference in their durations. The optimal strategy is to prioritize the songs with the largest durations for the first concert.\n\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs, prioritizing the largest durations for the first concert.\n    3. Calculate the duration of each concert.\n    4. Compute the absolute difference between the two concert durations.\n    5. Return the minimal possible difference.\n", "requirement analysis:\nThe problem requires finding the optimal way to distribute songs of different durations into two concerts to minimize the absolute difference in their durations. This involves understanding the distribution of song lengths and finding a way to balance them as evenly as possible. The solution should be efficient and handle edge cases effectively.\nrequirement pool:\n- Implement an algorithm to calculate the optimal distribution of songs.\n- Ensure the solution can handle varying numbers of songs and their durations.\n- Optimize the algorithm for performance to handle a large number of test cases.\n- Include error handling to manage cases where input values are not within expected ranges.\n- Provide clear and concise output for each test case.\nTo solve this problem, we will use a simple and efficient approach that involves calculating the total duration of all songs and then attempting to split them into two concerts as evenly as possible. We will use Python's built-in functions and a greedy algorithm to achieve this goal.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups such that each song is included in exactly one group.\n    'minimal difference': means to make the difference between the durations of the two groups as small as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference between the durations of the two concerts.\n\n# [code logic]\n    To solve this problem, we need to calculate the total duration of all songs and then find a way to split them into two groups with the smallest possible difference. We can use a greedy approach to achieve this.\n\n# [edge case] \n    Edge case 1: All songs have the same duration.\n    search([1, 1, 1]) = 0\n    Explanation: Since all songs are of the same duration, we can distribute them evenly between the two concerts, resulting in a difference of 0 minutes.\n\n    Edge case 2: One song is significantly longer than the others.\n    search([0, 0, 10]) = 10\n    Explanation: If we have one three-minute song and no two- or one-minute songs, the only way to minimize the difference is to put the three-minute song in one concert and the other two songs in the other concert, resulting in a difference of 10 minutes.\n\n    Edge case 3: One type of song is much more numerous than the others.\n    search([10, 1, 1]) = 8\n    Explanation: If we have many one-minute songs and only a few two- or three-minute songs, the best way to minimize the difference is to put the one-minute songs in one concert and the two- and three-minute songs in the other concert, resulting in a difference of 8 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach we described will work for all edge cases.\n"], "scores": [], "pass_results": [true, false, false, false, true, true, false, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 173, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "add_1_sentence_at_end", "parent_index": 169}
