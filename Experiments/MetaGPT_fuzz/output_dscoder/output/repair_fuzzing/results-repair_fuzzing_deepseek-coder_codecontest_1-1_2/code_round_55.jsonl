{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He possesses a number of one-minute songs, b number of two-minute songs and c number of three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He possesses a number of one-minute songs, b number of two-minute songs and c number of three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing. He possesses a number of one-minute songs, b number of two-minute songs and c number of three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing. He possesses a number of one-minute songs, b number of two-minute songs and c number of three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\nimport sys\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimal possible difference to a large number\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing the songs\n    for i in range(4):\n        for j in range(4):\n            # Calculate the duration of the first concert\n            first_concert_duration = (a + b + c) - (i // 2 * 1 + (i % 2) * 2 + (j // 2) * 3 + (j % 2) * 6)\n            # Calculate the duration of the second concert\n            second_concert_duration = total_duration - first_concert_duration\n            # Calculate the absolute difference\n            diff = abs(first_concert_duration - second_concert_duration)\n            # Update the minimal possible difference\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(sys.stdin.readline().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible distributions of songs between two concerts\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                if i + 2 * j + 3 * k <= total_duration / 2:\n                    duration1 = i + 2 * j + 3 * k\n                    duration2 = total_duration - duration1\n                    diff = abs(duration1 - duration2)\n                    min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(sys.stdin.readline())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, sys.stdin.readline().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing the songs into two concerts\n    for i in range(4):  # There are 4 possible ways to distribute the songs (0, 1, 2, or 3 songs in one concert)\n        for j in range(4):\n            if i + j == 0 or i + j > a + b + c:\n                continue\n            duration1 = i * 1 + (a - i) * 1 + min(j, b) * 2 + (b - min(j, b)) * 2 + min(j, c) * 3 + (c - min(j, c)) * 3\n            duration2 = total_duration - duration1\n            min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Finds the minimal possible difference in minutes between the durations of two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible distributions of songs into two concerts\n    for i in range(c + 1):\n        for j in range(b + 1):\n            for k in range(a + 1):\n                if k % 2 == 0 and (k // 2 + j * 2 + i * 3) * 2 >= total_duration:\n                    duration_first = k // 2 * 2 + j * 2 + i * 3\n                    duration_second = total_duration - duration_first\n                    min_diff = min(min_diff, abs(duration_first - duration_second))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Use a bitmask approach to iterate through all possible combinations of songs in the two concerts\n    for mask in range(1 << 3):  # 2^3 = 8 combinations\n        duration1 = 0\n        duration2 = 0\n        \n        # Assign songs to the two concerts based on the bitmask\n        for i in range(3):\n            if mask & (1 << i):\n                duration1 += (1 if i == 0 else 2 if i == 1 else 3)\n            else:\n                duration2 += (1 if i == 0 else 2 if i == 1 else 3)\n        \n        # Update the minimal difference\n        min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate over all possible combinations of songs in the first concert\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                # Calculate the duration of the first concert\n                first_concert_duration = i * 1 + j * 2 + k * 3\n                # Calculate the duration of the second concert\n                second_concert_duration = total_duration - first_concert_duration\n                # Calculate the absolute difference in durations\n                diff = abs(first_concert_duration - second_concert_duration)\n                # Update the minimum difference if the current one is smaller\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    min_diff = float('inf')\n\n    # Try all combinations of distributing the songs into two concerts\n    for i in range(c + 1):\n        for j in range(b + 1):\n            for k in range(a + 1):\n                if k + 2 * j + 3 * i <= total_duration // 2:\n                    duration1 = k * 1 + j * 2 + i * 3\n                    duration2 = total_duration - duration1\n                    min_diff = min(min_diff, abs(duration1 - duration2))\n\n    return min_diff\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible distributions using binary search approach\n    for i in range(4):\n        for j in range(4):\n            # Calculate the total duration of the first concert\n            first_concert_duration = (a + 2 * b + 3 * c) - (i * 1 + j * 2)\n            # Calculate the total duration of the second concert\n            second_concert_duration = i * 1 + j * 2\n            # Update the minimal difference\n            min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs in the two concerts\n    for i in range(1 << (a + b + c)):\n        sum1 = 0\n        sum2 = 0\n        for j in range(a + b + c):\n            if i & (1 << j):\n                sum1 += (j < a) * 1 + (a <= j < a + b) * 2 + (a + b <= j) * 3\n            else:\n                sum2 += (j < a) * 1 + (a <= j < a + b) * 2 + (a + b <= j) * 3\n        min_diff = min(min_diff, abs(sum1 - sum2))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(sys.stdin.readline().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the durations of the concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Sort the songs by their durations\n    songs = [a, b, c]\n    songs.sort()\n    \n    # Distribute the songs into two concerts\n    # Try to balance the durations as much as possible\n    # The idea is to put the largest songs into one concert and the rest into the other\n    concert1 = songs[-1] + songs[-2]\n    concert2 = songs[0] + songs[1]\n    \n    # Calculate the absolute difference between the two concerts\n    difference = abs(concert1 - concert2)\n    \n    return difference\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts after distributing songs optimally. The solution should be efficient and handle large inputs. The output should be accurate for each test case.\nrequirement pool:\n- Implement an algorithm to distribute songs optimally\n- Ensure the solution is efficient and can handle large inputs\n- Provide clear and accurate output for each test case\n- Improve user interface for easy data input and result reading\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs. The idea is to first sort the songs by their duration and then use a two-pointer technique to find the optimal distribution. This approach ensures that we minimize the absolute difference in the durations of the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of dividing items or amounts into two or more groups, typically for the purpose of organizing or optimizing a system.\n    Explanation: In this problem, Luntik needs to distribute his songs into two concerts such that the absolute difference in the durations of the concerts is minimized. This involves finding an optimal way to allocate the songs to achieve the smallest possible difference.\n\n# [phrase showing quantity relationship]\n    'as small as possible': Indicates that the goal is to find the smallest possible difference between the durations of the two concerts.\n\n# [degree adverb] \n    'as small as possible': Indicates the highest level of optimization required in the distribution of songs to achieve the smallest possible difference in concert durations.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to consider the following steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts, aiming to balance the durations as evenly as possible.\n    3. Calculate the absolute difference between the durations of the two concerts.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Edge Case 1: [1, 1, 1]\n    Expected Output: 0\n    Explanation: In this case, Luntik can distribute the songs such that one song of each duration is in each concert. The total duration of each concert will be 1 + 1 + 1 = 3, and the difference will be |3 - 3| = 0.\n\n    Edge Case 2: [1, 2, 3]\n    Expected Output: 1\n    Explanation: Luntik can include one one-minute song and two-minute song in the first concert, and the three-minute song in the second concert. The total duration of the first concert will be 1 + 2 = 3, and the total duration of the second concert will be 3. The difference will be |3 - 3| = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic should be sufficient to calculate the minimal possible difference for any given input.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts after distributing songs optimally. The solution should be efficient and handle large inputs. The output should be accurate and clear for each test case.\nrequirement pool:\n- Implement an algorithm to distribute songs optimally\n- Ensure the solution can handle large inputs efficiently\n- Provide clear and accurate output for each test case\n- Add user interface for easy input and output\n- Optimize the algorithm for even larger inputs\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in the durations of the concerts. We will sort the songs by their durations and then use a two-pointer technique to distribute them. This approach ensures that we are always trying to balance the durations as much as possible.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of assigning items or amounts to two or more groups or containers.\n    Explanation: In this problem, Luntik needs to distribute his songs into two concerts such that the total duration of songs in each concert is as balanced as possible. This involves assigning songs to two groups (concerts) to minimize the difference in their total durations.\n\n# [phrase showing quantity relationship]\n    'as small as possible': Indicates that we need to find the minimal possible difference in durations between the two concerts.\n    'exactly one concert': Means each song must be included in only one of the two concerts.\n\n# [degree adverb] \n    'as small as possible': Indicates the need to minimize the difference in durations between the concerts.\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts, trying to balance the durations as much as possible.\n    3. Calculate the difference between the durations of the two concerts.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Edge Case 1: [1, 1, 1]\n    Expected Output: 0\n    Explanation: Luntik can distribute one one-minute song, one two-minute song, and one three-minute song into two concerts such that both concerts have a duration of 3 minutes. The difference is |3-3| = 0.\n\n    Edge Case 2: [1, 2, 3]\n    Expected Output: 1\n    Explanation: Luntik can distribute one one-minute song and one two-minute song into the first concert, and one three-minute song into the second concert. The duration of the first concert is 3 minutes, and the duration of the second concert is 3 minutes. The difference is |3-3| = 0, but since we need to find the minimal possible difference, we consider the next possible distribution which gives a difference of 1.\n\n    Edge Case 3: [5, 5, 5]\n    Expected Output: 0\n    Explanation: Luntik can distribute all five one-minute songs, five two-minute songs, and five three-minute songs into two concerts such that both concerts have a duration of 45 minutes. The difference is |45-45| = 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already considers the minimal possible difference for each test case.\n", "requirement analysis:\nThe primary requirement is to find the minimal possible difference in minutes between the durations of two concerts after distributing the songs optimally. The solution should be efficient and handle large inputs efficiently. The algorithm should consider the distribution of songs across the two concerts to minimize the absolute difference in their total durations.\nrequirement pool:\n- Implement an algorithm to distribute songs into two concerts to minimize the difference in duration.\n- Ensure the solution is scalable and can handle up to 10^9 inputs.\n- Develop a user interface to input the number of songs of each duration.\n- Provide a clear output displaying the minimal possible difference in minutes between the concerts durations.\n- Optimize the algorithm for performance to handle large input sizes efficiently.\nTo solve this problem, we will use a simple yet effective approach that leverages the properties of numbers and their sums. The goal is to distribute the songs into two concerts such that the absolute difference in their durations is minimized. This can be approached using a greedy algorithm that tries to balance the total duration of the songs in each concert. We will use Python for this implementation due to its simplicity and the availability of powerful libraries for mathematical operations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of dividing items or amounts into two groups or parts to optimize a particular outcome, in this case, minimizing the absolute difference in the sum of durations between two concerts.\n    Explanation: Luntik has a set of songs with different durations, and he wants to split these songs into two concerts to balance their total durations as much as possible. The goal is to minimize the absolute difference between the durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    'as small as possible': This phrase indicates that we need to find the smallest possible difference between the two concert durations.\n\n# [degree adverb] \n    'as small as possible': This adverb emphasizes the need to achieve the smallest possible difference, which means we should aim for balance in the distribution of song durations.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts, trying to balance the total duration as much as possible.\n    3. Calculate the absolute difference between the two concert durations.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Edge case 1:\n    Input: [1, 1, 1]\n    Explanation: The total duration is 3, and the optimal distribution would be to put one song of each duration in each concert, resulting in a difference of 0.\n    Edge case 2:\n    Input: [2, 1, 3]\n    Explanation: The total duration is 6. A possible distribution is to put two one-minute songs and a three-minute song in one concert, and a two-minute song in the other, resulting in a difference of 1.\n    Edge case 3:\n    Input: [5, 5, 5]\n    Explanation: The total duration is 15. A balanced distribution would be to put five songs of each duration in each concert, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach described in the plan will naturally handle cases where all song durations are the same or when the distribution is perfectly balanced.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The optimal distribution of songs should aim to balance the total duration of the two concerts as evenly as possible. This involves considering the total number of minutes available and distributing the songs accordingly.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in minutes between the concerts durations.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to minimize the absolute difference in concert durations.\nTo solve the problem of finding the minimal possible difference in minutes between the durations of two concerts, we can use a simple approach that involves calculating the total duration of all songs and then trying to balance the distribution between the two concerts. This can be efficiently done using a greedy algorithm that tries to place songs in the two concerts to minimize the difference in their total durations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups (concerts) such that each song is included in exactly one group.\n    'minimal possible difference': means finding the smallest possible difference in the total duration of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means the goal is to minimize the difference in the total duration of the two concerts.\n\n# [code logic]\n    To solve this problem, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts, trying to balance the total duration of each concert as much as possible.\n    3. Calculate the difference between the two concert durations and return the smallest possible difference.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of 1, 2, and 3 minutes respectively. The optimal distribution would be to put one 3-minute song in one concert and the other two songs in the other concert. The difference in durations would be |3 - (1+2)| = 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs in total. The optimal distribution would be to put two 3-minute songs in one concert and the remaining four songs in the other concert. The difference in durations would be |(3+3) - (2+2+2)| = |6 - 6| = 0.\n    Expected output: 0\n\n    Edge case 3:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There are only one-minute songs. The only way to distribute them is to put all of them in one concert and leave the other concert empty. The difference in durations would be |total_duration - 0| = total_duration.\n    Expected output: 10\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic provided in the plan can handle them efficiently. The edge cases provided are simple and straightforward scenarios that fit within the logic of the problem.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves distributing the songs into two concerts such that the sum of the durations of the songs in each concert is as close as possible. This can be achieved by trying to balance the total duration of the songs between the two concerts.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in minutes between the concerts durations.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to minimize the difference between the two concerts' durations.\nTo solve the problem of distributing songs into two concerts with minimal difference in durations, we can use a dynamic programming approach. The idea is to calculate the total possible sums of durations for the two concerts and then find the minimal difference between these sums. This can be efficiently done using a bitmask approach where each bit represents whether a song is included in one of the concerts. We will use Python's built-in functions and libraries to handle large integers and optimize the solution.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': distributing songs into two groups with minimal difference in total duration\n\n    Explanation: The core concept here is to partition the set of songs into two subsets such that the sum of the durations of the songs in each subset is as close as possible. This involves finding a subset of songs whose total duration is as close as possible to half of the total duration of all songs.\n\n# [phrase showing quantity relationship]\n    'as small as possible': means we need to minimize the difference between the two concert durations\n\n# [degree adverb] \n    'as small as possible': means we need to minimize the difference between the two concert durations\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a bitmask approach to iterate through all possible combinations of songs in the two concerts.\n    3. For each combination, calculate the duration of each concert and then find the absolute difference between these durations.\n    4. Track the minimal difference found.\n    5. Return the minimal difference.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of 1, 2, and 3 minutes respectively. The optimal distribution would be to put one 3-minute song in one concert and the other two songs in the other concert, resulting in a difference of |3 - (1+2)| = 0 minutes.\n    Expected output: 0\n\n    Edge case 2:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There are 10 one-minute songs and no two- or three-minute songs. The best distribution would be to put all 10 songs in one concert, resulting in a difference of |10 - 0| = 10 minutes.\n    Expected output: 10\n\n    Edge case 3:\n    Input: a = 1, b = 2, c = 3\n    Explanation: There is one 1-minute song, two 2-minute songs, and three 3-minute songs. The optimal distribution would be to put one 1-minute and two 3-minute songs in one concert, and the two 2-minute songs in the other concert, resulting in a difference of |(1+3+3) - (2+2)| = |7 - 4| = 3 minutes.\n    Expected output: 3\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic provided in the plan can handle them directly. The edge cases provided are straightforward and fit within the constraints and logic of the problem.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the difference in their durations. The solution should be efficient and handle large input sizes. The algorithm should be optimized to ensure quick computation even for large numbers.\nrequirement pool:\n- Implement an algorithm to distribute songs into two concerts\n- Ensure the algorithm minimizes the difference in concert durations\n- Optimize the algorithm for performance\n- Handle large input sizes efficiently\n- Ensure the solution is accurate and reliable\nTo solve this problem efficiently, we will use a dynamic programming approach to minimize the difference in concert durations. The idea is to calculate the total possible sums of durations from the given songs and then find the closest sum to half of the total duration. This will help in minimizing the difference between the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of dividing items or amounts into two groups or parts.\n    Explanation: In this problem, Luntik has a set of songs with different durations and he wants to distribute them between two concerts such that the total duration of songs in each concert is as equal as possible.\n\n# [phrase showing quantity relationship]\n    'as small as possible': This phrase indicates that we need to find the minimal possible difference in durations between the two concerts.\n    Explanation: We need to minimize the absolute difference between the sum of durations of songs in the two concerts.\n\n# [degree adverb] \n    'as small as possible': This adverb emphasizes the need to find the minimal possible difference.\n    Explanation: We need to find the smallest possible difference in durations between the two concerts.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to consider the following steps:\n    1. Calculate the total duration of all songs.\n    2. Use dynamic programming to find all possible sums of durations that can be formed using the given songs.\n    3. Find the closest sum to half of the total duration to minimize the difference.\n\n# [edge case] \n    Edge case 1: All songs are one-minute long.\n    search([1, 0, 0]) = 0\n    Explanation: Since all songs are one-minute long, the two concerts will have the same duration if they both have the same number of songs. Thus, the difference is 0.\n\n    Edge case 2: One-minute songs are twice as many as two-minute songs.\n    search([2, 1, 0]) = 0\n    Explanation: With two one-minute songs and one two-minute song, the optimal distribution would be to put one one-minute song and one two-minute song in each concert, resulting in a difference of 0.\n\n    Edge case 3: Three-minute songs are the majority.\n    search([0, 0, 3]) = 1\n    Explanation: If there are three three-minute songs, the optimal distribution would be to put two three-minute songs in one concert and one three-minute song in the other, resulting in a difference of 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic can handle these cases by considering the distribution of songs and calculating the optimal difference.\n", "requirement analysis:\nThe primary requirement is to distribute songs into two concerts with the goal of minimizing the difference in their durations. This involves calculating the total duration of songs and then finding a way to split them into two groups as evenly as possible. The solution should be efficient and capable of handling large inputs within reasonable time limits.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop an algorithm to distribute songs into two concerts with minimal difference in duration.\n- Ensure the solution can handle up to 1000 test cases efficiently.\n- Optimize the distribution algorithm for large inputs to prevent performance degradation.\nTo solve this problem, we will use a simple yet effective approach that involves calculating the total duration of all songs and then using a greedy algorithm to distribute them into two concerts with minimal difference in duration. The key steps include calculating the total duration, sorting the songs by their durations, and then using a two-pointer technique to find the optimal distribution.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups with minimal difference in total duration.\n    Explanation: The goal is to distribute the songs into two concerts such that the sum of the durations of the songs in each concert is as close as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means that we need to minimize the difference in total duration between the two concerts.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Calculate the total duration of all songs.\n    2. Sort the songs by their durations.\n    3. Use a two-pointer technique to distribute the songs into two concerts with minimal difference in duration.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal distribution would be to put one 3-minute song in one concert and the other two songs in the other concert, resulting in a difference of 1 minute.\n    Expected output: 1\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The optimal distribution would be to put two 3-minute songs and one 2-minute song in one concert, and the remaining three songs in the other concert, resulting in a difference of 0 minutes.\n    Expected output: 0\n\n    Edge case 3:\n    Input: a = 3, b = 0, c = 0\n    Explanation: There are three one-minute songs. The optimal distribution would be to put all three songs in one concert, resulting in a difference of 0 minutes.\n    Expected output: 0\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic can handle cases with a single type of song or cases where the distribution is straightforward.\n", "requirement analysis:\nThe problem requires a solution that can handle multiple test cases efficiently. The input consists of three integers representing the number of one-minute, two-minute, and three-minute songs, respectively. The output should be the minimal possible difference in minutes between the durations of the two concerts. The solution should be robust and handle large inputs without performance issues.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in minutes between the concerts durations.\n- Ensure the solution can handle multiple test cases efficiently.\n- Optimize the algorithm to handle large input sizes.\n- Add user interface elements for input and output.\n- Include documentation and examples to help users understand the solution.\nTo solve this problem efficiently, we will use a greedy approach. The idea is to first calculate the total duration of all songs and then try to distribute them into two concerts such that the absolute difference in their durations is minimized. We can use a binary search approach to find the optimal distribution. This method ensures that we can handle large inputs efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing items or amounts into two or more groups, typically for the purpose of organizing, managing, or accounting for them.\n    Explanation: In this problem, Luntik needs to distribute his songs into two concerts such that the total duration of songs in each concert is as balanced as possible. This involves finding a way to allocate the songs to minimize the difference in their total durations.\n\n# [phrase showing quantity relationship]\n    'as small as possible': means that we need to find the minimal possible difference in durations between the two concerts.\n\n# [degree adverb] \n    'as small as possible': means that we need to find the minimal possible difference in durations between the two concerts.\n\n# [code logic]\n    To solve this problem, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a binary search approach to find the optimal way to distribute the songs into two concerts.\n    3. For each test case, output the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal distribution would be to put one 3-minute song in one concert and the other two songs in the other concert. The difference in durations would be |3 - (1+1+1)| = 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The optimal distribution would be to put two 3-minute songs and one 2-minute song in one concert, and the other three songs in the other concert. The difference in durations would be |(3+3+2) - (1+1+1+1+1+1)| = |8 - 6| = 2.\n    Expected output: 2\n\n    Edge case 3:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There are ten one-minute songs and no two-minute or three-minute songs. The optimal distribution would be to put all ten one-minute songs in one concert and none in the other. The difference in durations would be |10 - 0| = 10.\n    Expected output: 10\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic can handle all cases efficiently.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves distributing the songs into two concerts such that the sum of the durations of the songs in each concert is as close as possible. This can be achieved by trying to balance the total duration of the songs as evenly as possible between the two concerts.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in minutes between the concerts durations.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to minimize the time complexity.\nTo solve the problem of finding the minimal possible difference in minutes between the durations of two concerts, we can use a dynamic programming approach. The idea is to calculate the total possible sums of durations for all subsets of the given songs and then find the smallest absolute difference between these sums. This can be efficiently implemented using a bitmask approach.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups such that each song is included in exactly one group.\n    'minimal possible difference': means finding the smallest absolute difference between the sums of durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference between the two groups.\n\n# [code logic]\n    To solve this problem, we can use a bitmask approach to generate all possible sums of durations for the given songs and then find the smallest absolute difference between these sums.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of 1, 2, and 3 minutes. The possible sums are 1+2=3, 1+3=4, 2+3=5, and 1+2+3=6. The minimal possible difference between any two sums is |3-4| = 1.\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are three songs of 1, 2, and 3 minutes. The possible sums are 1+2=3, 1+3=4, 2+3=5, 1+2+2=5, 1+2+3=6, 1+3+3=6, 2+3+3=6, and 1+2+3+3=7. The minimal possible difference between any two sums is |5-5| = 0.\n    Edge case 3:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There are only one-minute songs. The only possible sum is 10. Since there are no other songs, the difference is 10 - 0 = 10.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The given logic can handle cases with no other songs by considering the single type of song present.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the difference in their durations. The solution should be efficient and handle large inputs. The output should be accurate and clear for each test case. The solution should be simple to understand and user-friendly.\nrequirement pool:\n- Implement an efficient algorithm to distribute songs into two concerts\n- Ensure the solution can handle large inputs efficiently\n- Provide accurate and minimal differences between concert durations\n- Ensure the solution is simple to understand and user-friendly\n- Test and validate the solution with multiple test cases\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in the durations of the concerts. We will sort the songs by their durations and then use a two-pointer technique to distribute them into two concerts. This approach ensures that we are always trying to balance the durations as much as possible.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of assigning items or amounts to two or more groups, typically in a way that is optimal or fair.\n    Explanation: In this problem, Luntik needs to distribute his songs into two concerts to minimize the difference in their total durations. This involves a strategic allocation of songs to achieve the smallest possible difference.\n\n# [phrase showing quantity relationship]\n    'as small as possible': Indicates that the goal is to find the minimal possible difference in the durations of the concerts.\n\n# [degree adverb] \n    'as small as possible': Indicates the goal of minimizing the difference in durations.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to consider the following steps:\n    1. Sort the songs by their durations.\n    2. Use a two-pointer technique to distribute the songs into two concerts.\n    3. Calculate the total duration of each concert and find the absolute difference between them.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Edge Case 1: [1, 1, 1]\n    Expected Output: 0\n    Explanation: Luntik can distribute the songs such that one concert has one 1-minute song and one 2-minute song, and the other concert has one 3-minute song. The difference in durations will be |(1+2) - 3| = 0.\n\n    Edge Case 2: [1, 3, 5]\n    Expected Output: 1\n    Explanation: Luntik can distribute the songs such that one concert has one 1-minute song and two 3-minute songs, and the other concert has three 5-minute songs. The difference in durations will be |(1+6) - 15| = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic is sufficient to find the minimal possible difference for any given input.\n"], "scores": [], "pass_results": [false, false, false, false, false, false, true, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 55, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "parent_index": 6}
