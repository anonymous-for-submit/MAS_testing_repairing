{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing. He has a one-minute song, b two-minute songs, and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included in exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has songs of durations a (1 minute), b (2 minutes), and c (3 minutes). He needs to distribute these songs into two concerts with the goal of minimizing the absolute difference in their durations. Find the smallest possible difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible distributions of songs between two concerts\n    for i in range(4):  # There are 4 possible ways to distribute the songs (0, 1, 2, or 3 songs in the first concert)\n        for j in range(4):\n            if i + j <= a + b + c:  # Ensure the total number of songs in both concerts does not exceed the total number of songs\n                # Calculate the duration of the first concert\n                first_concert_duration = i * 1 + (a - i) * 1 + j * 2 + (b - j) * 2 + (c - (a + b + c - i - j)) * 3\n                # Calculate the duration of the second concert\n                second_concert_duration = total_duration - first_concert_duration\n                # Calculate the absolute difference in durations\n                diff = abs(first_concert_duration - second_concert_duration)\n                # Update the minimal difference if the current difference is smaller\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                # Calculate the total duration for each combination\n                total_duration_comb = i * 1 + j * 2 + k * 3\n                # Calculate the difference between the two concerts\n                diff = abs(total_duration - 2 * total_duration_comb)\n                # Update the minimum difference\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_difference = float('inf')\n    \n    # Try all combinations of distributing the songs into two groups\n    for i in range(4):\n        for j in range(4):\n            duration1 = a * 1 + b * 2 + c * 3\n            duration2 = total_duration - duration1\n            difference = abs(duration1 - duration2)\n            min_difference = min(min_difference, difference)\n            \n            # Rotate the distribution of songs\n            if i == 0 and j == 0:\n                a, b, c = c, a, b\n            elif i == 0 and j == 1:\n                a, b, c = b, c, a\n            elif i == 0 and j == 2:\n                a, b, c = a, b, c\n            elif i == 0 and j == 3:\n                a, b, c = c, a, b\n            elif i == 1 and j == 0:\n                a, b, c = b, c, a\n            elif i == 1 and j == 1:\n                a, b, c = a, b, c\n            elif i == 1 and j == 2:\n                a, b, c = c, a, b\n            elif i == 1 and j == 3:\n                a, b, c = b, c, a\n            elif i == 2 and j == 0:\n                a, b, c = a, b, c\n            elif i == 2 and j == 1:\n                a, b, c = c, a, b\n            elif i == 2 and j == 2:\n                a, b, c = b, c, a\n            elif i == 2 and j == 3:\n                a, b, c = a, b, c\n            elif i == 3 and j == 0:\n                a, b, c = c, a, b\n            elif i == 3 and j == 1:\n                a, b, c = b, c, a\n            elif i == 3 and j == 2:\n                a, b, c = a, b, c\n            elif i == 3 and j == 3:\n                a, b, c = c, a, b\n    \n    return min_difference\n\n# Read input and output results\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\ninput = sys.stdin.readline\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n\n    # Try all combinations to find the minimal difference\n    for i in range(1 << 3):  # There are 2^3 = 8 combinations\n        duration1 = 0\n        duration2 = 0\n        for j in range(3):\n            if i & (1 << j):\n                duration1 += (j + 1) * [1, 1, 1][j]\n            else:\n                duration2 += (j + 1) * [1, 1, 1][j]\n        diff = abs(duration1 - duration2)\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    total_duration = a + b * 2 + c * 3\n    half_duration = total_duration // 2\n    \n    # Initialize a DP table where dp[i][j] represents the minimum difference\n    # possible with the first i songs and a sum of j.\n    dp = [[float('inf')] * (half_duration + 1) for _ in range(a + b + c + 1)]\n    dp[0][0] = 0\n    \n    # Fill the DP table\n    for i in range(1, a + b + c + 1):\n        for j in range(half_duration + 1):\n            if j >= i:\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - i] + i)\n            else:\n                dp[i][j] = dp[i - 1][j]\n    \n    # The minimal difference is the minimum difference between the two concerts\n    # which is the closest to half of the total duration.\n    min_diff = float('inf')\n    for j in range(half_duration + 1):\n        min_diff = min(min_diff, abs(total_duration - 2 * dp[-1][j]))\n    \n    return min_diff\n\n# Read input and output results\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    # Calculate the target duration for each concert\n    target_duration = total_duration // 2\n    \n    # Initialize a list to store the possible durations\n    possible_durations = [0]\n    \n    # Use dynamic programming to find all possible durations\n    for song_duration in [1, 2, 3]:\n        for i in range(len(possible_durations) - 1, -1, -1):\n            new_duration = possible_durations[i] + song_duration\n            if new_duration <= target_duration:\n                possible_durations.append(new_duration)\n    \n    # Find the closest duration to the target duration\n    min_diff = float('inf')\n    for duration in possible_durations:\n        diff = abs(total_duration - 2 * duration)\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Sort the songs by their durations in descending order\n    songs = [a, b, c]\n    songs.sort(reverse=True)\n    \n    # Distribute the songs into two concerts\n    first_concert = songs[0] + songs[1]\n    second_concert = songs[2]\n    \n    # Calculate the absolute difference\n    difference = abs(first_concert - second_concert)\n    \n    return difference\n\n# Read the number of test cases\nt = int(sys.stdin.readline())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, sys.stdin.readline().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_min_difference(a, b, c):\n    \"\"\"\n    Given three integers a, b, and c representing the durations of songs,\n    this function finds the minimal possible difference in minutes between\n    the durations of the two concerts.\n\n    Args:\n        a (int): Duration of a one-minute song.\n        b (int): Duration of a two-minute song.\n        c (int): Duration of a three-minute song.\n\n    Returns:\n        int: The minimal possible difference in minutes between the durations\n             of the two concerts.\n    \"\"\"\n    # Sort the song durations\n    durations = sorted([a, b, c])\n    \n    # Distribute the smallest and largest songs between the two concerts\n    # to minimize the difference\n    first_concert = [durations[0], durations[1]]\n    second_concert = [durations[2]]\n    \n    # Calculate the difference between the two concerts' durations\n    difference = abs(sum(first_concert) - sum(second_concert))\n    \n    return difference\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The smallest possible absolute difference in durations between the two concerts.\n    \"\"\"\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing the songs into two concerts\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                if i + j + k <= 3:  # Ensure all songs are distributed\n                    duration1 = i * 1 + j * 2 + k * 3\n                    duration2 = a - i + b - j + c - k\n                    diff = abs(duration1 - duration2)\n                    min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the durations of two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n        \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    # Calculate the total duration for each possible distribution\n    total_duration_1 = a + b * 2 + c * 3  # All songs in one concert\n    total_duration_2 = (a + b + c) - total_duration_1  # Remaining songs in the other concert\n    \n    # Return the absolute difference\n    return abs(total_duration_1 - total_duration_2)\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe requirement analysis involves understanding the problem statement and designing an efficient solution to distribute songs into two concerts with the smallest possible difference in duration. The solution should consider the number of each type of song and aim to balance the total duration of the two concerts as evenly as possible.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in minutes between the concerts durations.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to minimize the time complexity.\nTo solve the problem of distributing songs into two concerts with the smallest possible difference in duration, we will use a greedy approach. The idea is to first calculate the total duration of all songs and then try to balance the duration between the two concerts as evenly as possible. We will sort the songs by their duration and then distribute them into two concerts, trying to keep the difference as small as possible.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of dividing items or amounts into two or more groups, typically for the purpose of organizing or managing them more efficiently.\n    Explanation: In this problem, Luntik needs to distribute his songs into two concerts such that the total duration of songs in each concert is as balanced as possible. This involves calculating the total duration and then finding a way to split the songs into two groups with minimal difference in their total durations.\n\n# [phrase showing quantity relationship]\n    'as small as possible': This phrase indicates that we need to minimize the difference in the total duration of the two concerts.\n    Explanation: We need to find the minimal possible difference in the durations of the two concerts.\n\n# [degree adverb] \n    'as small as possible': This adverb emphasizes the need to achieve the smallest possible difference in the durations of the two concerts.\n    Explanation: We aim to make the difference as small as possible between the durations of the two concerts.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Sort the songs by their duration.\n    3. Use a greedy approach to distribute the songs into two concerts, trying to balance the total duration of each concert as evenly as possible.\n    4. Calculate the difference in durations between the two concerts.\n    5. Return the minimal possible difference.\n\n# [edge case] \n    Edge case 1: All songs are of the same duration.\n    Expected output: 0\n    Explanation: If all songs are of the same duration, Luntik can simply distribute them equally between the two concerts, resulting in a difference of 0.\n\n    Edge case 2: The number of songs is very large, and the durations are significantly different.\n    Expected output: A non-zero difference, depending on the distribution.\n    Explanation: In this case, the distribution will not be even, and the difference will be the smallest possible given the constraints.\n\n    Edge case 3: The number of songs is small, and the durations are evenly distributed.\n    Expected output: A small difference, depending on the specific distribution.\n    Explanation: Even with a small number of songs, the distribution will still aim to balance the durations as much as possible, resulting in a small difference.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already considers the distribution of songs to achieve the minimal possible difference in concert durations.\n", "requirement analysis:\nThe problem requires a method to distribute songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to find the optimal distribution. The input consists of multiple test cases, each with a specific number of one-minute, two-minute, and three-minute songs. The output should be the minimal possible difference in minutes between the durations of the two concerts for each test case.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs into two concerts.\n- Ensure the solution can handle large inputs efficiently.\n- Provide clear and concise output for each test case.\n- Test the solution with multiple test cases to ensure robustness.\nTo solve this problem efficiently, we will use a dynamic programming approach to find the optimal distribution of songs into two concerts. The goal is to minimize the absolute difference in their durations. We will iterate through all possible combinations of songs and calculate the difference for each combination to find the minimal possible difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups such that each song is included in exactly one group.\n    'minimal possible difference': means finding the smallest absolute difference between the total durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means the goal is to minimize the difference.\n\n# [code logic]\n    To solve this problem, we need to iterate through all possible combinations of songs and calculate the difference for each combination. We can use a brute-force approach to find the optimal distribution.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal distribution would be to put one 3-minute song in one concert and the other two songs in the other concert. The differences would be 3 - (1+1+1) = 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are three types of songs with the same quantity. The optimal distribution would be to put two 1-minute songs and two 2-minute songs in one concert, and the remaining two 3-minute songs in the other concert. The difference would be |(2*1 + 2*2) - (2*3)| = |4 - 6| = 2.\n    Expected output: 2\n\n    Edge case 3:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There are only 1-minute songs. The only way to distribute them is to put all of them in one concert and leave the other concert empty. The difference would be |10*1 - 0| = 10.\n    Expected output: 10\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the brute-force approach will naturally handle them. The edge cases provided are simple and straightforward, and the brute-force method will produce the correct results.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the difference in their durations. This involves a balance between the number of one-minute, two-minute, and three-minute songs. The solution should be efficient and handle large inputs efficiently.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations.\n- Ensure the solution can handle up to 1000 test cases.\n- Optimize the algorithm for large inputs to ensure real-time performance.\n- Provide a user-friendly interface for input and output.\n- Include error handling for invalid inputs.\nTo solve this problem, we will use a simple Python function that calculates the optimal distribution of songs into two concerts to minimize the difference in their durations. The approach involves calculating the total duration of all songs and then finding the best way to split these songs into two groups to minimize the difference. This can be achieved by iterating through possible combinations of songs and checking the difference in their total durations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the total number of songs into two groups with minimal difference in total duration.\n    Explanation: In this problem, Luntik has songs of different durations, and he wants to distribute them into two concerts such that the total duration of songs in each concert is as close as possible. This involves finding a balance between the durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship specifically mentioned.\n\n# [degree adverb] \n    'as small as possible': means that the goal is to minimize the difference in total duration between the two concerts.\n\n# [code logic]\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Iterate through possible combinations of distributing the songs into two groups.\n    3. For each combination, calculate the total duration of each group.\n    4. Compute the absolute difference between the two group durations.\n    5. Track the minimum difference found.\n    6. Return the minimum difference.\n\n# [edge case] \n    Edge case 1:\n    Input: [1, 1, 1]\n    Explanation: The total duration is 1*1 + 1*2 + 1*3 = 6 minutes. The optimal distribution is to put one one-minute song, one two-minute song, and one three-minute song into each concert. The difference in durations will be |3-3| = 0.\n    Edge case 2:\n    Input: [2, 1, 3]\n    Explanation: The total duration is 2*1 + 1*2 + 3*3 = 13 minutes. The optimal distribution is to put two one-minute songs, one two-minute song, and two three-minute songs into the first concert, and one one-minute song, one two-minute song, and one three-minute song into the second concert. The difference in durations will be |6-7| = 1.\n    Edge case 3:\n    Input: [5, 5, 5]\n    Explanation: The total duration is 5*1 + 5*2 + 5*3 = 30 minutes. The optimal distribution is to put five one-minute songs, five two-minute songs, and five three-minute songs into each concert. The difference in durations will be |15-15| = 0.\n    Edge case 4:\n    Input: [1, 1, 2]\n    Explanation: The total duration is 1*1 + 1*2 + 2*3 = 9 minutes. The optimal distribution is to put one one-minute song, one two-minute song, and two three-minute songs into the first concert, and one one-minute song and one two-minute song into the second concert. The difference in durations will be |6-6| = 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic provided in the plan can handle all the given edge cases. The solution iterates through possible distributions and finds the optimal one based on the criteria provided.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where songs are distributed optimally. The optimal distribution is achieved by trying to balance the total duration of the songs in each concert as evenly as possible. This involves calculating the total duration and then finding the closest possible split that minimizes the difference.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the optimal distribution of songs into two concerts to minimize the difference in their durations.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to handle large input values within reasonable time limits.\nTo solve this problem, we will use a simple Python function that calculates the total duration of all songs and then uses a brute-force approach to find the optimal distribution of songs into two concerts. The brute-force approach involves trying every possible combination of songs to find the one that minimizes the difference in their durations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert.\n    'absolute difference': means the smallest possible difference between the two concert durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference.\n\n# [code logic]\n    To implement the solution, we need to calculate the total duration of all songs and then try to distribute them into two concerts to minimize the difference in their durations. This can be done by iterating through all possible combinations of songs and calculating the difference for each combination.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal distribution would be to put one 3-minute song and two 1-minute songs in one concert and the remaining song in the other concert. The difference would be |(3+1+1) - (1)| = 4.\n    Expected output: 4\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs in total. The optimal distribution would be to put three 1-minute songs, two 2-minute songs, and one 3-minute song in one concert and the remaining two 2-minute songs and one 3-minute song in the other concert. The difference would be |(1+1+1+2+2+3) - (2+2+3)| = 2.\n    Expected output: 2\n\n    Edge case 3:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There is only one 1-minute song. The only way to distribute it is to put it in one concert and leave the other concert empty. The difference would be |10 - 0| = 10.\n    Expected output: 10\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the brute-force approach will naturally handle cases with zero or one type of song. The main logic will distribute the songs based on their availability, and the difference will be calculated accordingly.\n", "requirement analysis:\nThe problem requires a solution that can handle multiple test cases efficiently. The input consists of three integers representing the number of one-minute, two-minute, and three-minute songs. The goal is to distribute these songs into two concerts such that the difference in their durations is minimized. The solution should be robust enough to handle large values of the input integers.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations.\n- Ensure the solution can handle multiple test cases efficiently.\n- Optimize the algorithm for performance to handle large input sizes.\n- Provide clear and concise output for each test case.\nTo solve the problem of minimizing the difference in concert durations for Luntik's songs, we will use a dynamic programming approach. This method will help us efficiently distribute the songs into two concerts without explicitly generating all possible distributions. The key idea is to use a subset sum approach to find the closest possible sum to half of the total duration, which will minimize the difference between the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert\n    'minimal possible difference': means finding the smallest possible difference between the two concert durations\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference\n\n# [code logic]\n    To solve this problem, we can use a dynamic programming approach to find the closest possible sum to half of the total duration. This will help us minimize the difference between the two concerts.\n\n# [edge case] \n    Edge case 1:\n    Input: [1, 1, 1]\n    Explanation: Luntik has one one-minute, one two-minute, and one three-minute song. The total duration is 6 minutes. The optimal distribution would be to put one one-minute and one two-minute song in one concert, and the three-minute song in the other. The durations would be 3 and 3, respectively, resulting in a difference of 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: [10^9, 10^9, 10^9]\n    Explanation: Luntik has a very large number of one-minute, two-minute, and three-minute songs. The total duration is 3 * 10^9 minutes. The optimal distribution would be to put one song of each duration in one concert, and the rest in the other. The durations would be approximately 10^9 and 2 * 10^9, respectively, resulting in a difference of 10^9.\n    Expected output: 10^9\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The dynamic programming approach will naturally handle large inputs efficiently.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts given a set of songs with different durations. The solution should be efficient and handle large inputs. The algorithm should be simple and easy to understand, ensuring it can be implemented correctly and tested thoroughly.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a method to distribute songs into two concerts to minimize the difference in durations.\n- Ensure the solution can handle up to 1000 test cases efficiently.\n- Optimize the algorithm for time complexity to handle large inputs within reasonable time limits.\n- Include error handling to manage unexpected inputs and edge cases.\nTo solve this problem efficiently, we will use a dynamic programming approach to distribute the songs into two concerts with minimal difference in durations. The key idea is to use a subset sum approach to find the closest sum to half of the total duration of all songs. We will leverage Python's ability to handle large integers efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups (concerts) such that each song is included in exactly one group.\n    'minimal difference': means finding the smallest possible difference in the total duration of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference between the two groups' durations.\n\n# [code logic]\n    To solve this problem, we need to calculate the total duration of all songs and then find two subsets with the closest sum to half of the total duration. This can be approached using a dynamic programming technique similar to the subset sum problem.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The total duration is 1*1 + 2*1 + 3*1 = 6 minutes. The optimal way to distribute these songs is to put one one-minute song and one three-minute song in one concert, and the two-minute song in the other concert. The durations will be 4 and 2 minutes, respectively, with a difference of 2 minutes.\n    Expected Output: 2\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: The total duration is 6 minutes. The optimal distribution might be to put two one-minute songs and two two-minute songs in one concert, and the remaining two three-minute songs in the other concert. The durations will be 6 and 6 minutes, respectively, with a difference of 0 minutes.\n    Expected Output: 0\n\n    Edge case 3:\n    Input: a = 10^9, b = 10^9, c = 10^9\n    Explanation: The total duration is very large. The optimal distribution will still aim to balance the durations as much as possible. The minimal difference will be a small value due to the large number of songs.\n    Expected Output: A small value close to 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the dynamic programming approach inherently handles large inputs efficiently. The logic to find the closest sum to half of the total duration can be implemented using standard dynamic programming techniques.\n", "requirement analysis:\nThe requirements specify that the program should handle multiple test cases, each with different numbers of one-minute, two-minute, and three-minute songs. The goal is to distribute these songs into two concerts to minimize the absolute difference in their durations. The solution should be efficient and provide the correct output for each test case.\nrequirement pool:\n- The main code should handle input and output correctly.\n- The program should calculate the minimal possible difference in minutes between the concerts durations.\n- The solution should be efficient and handle large inputs.\n- The program should provide clear and accurate output for each test case.\n- The user interface should be simple and intuitive.\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The idea is to prioritize the songs with the largest durations for the first concert to balance the durations between the two concerts. We will sort the songs by their durations and then calculate the difference in total durations between the two possible distributions.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'absolute difference': means the smallest possible difference between two values\n    'minimize': means to find the smallest possible value\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The idea is to prioritize the songs with the largest durations for the first concert to balance the durations between the two concerts. We will sort the songs by their durations and then calculate the difference in total durations between the two possible distributions.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The optimal distribution is to put one 1-minute song, one 2-minute song, and one 3-minute song in each concert. The difference in durations will be |1+2+1+3 - (1+2+3)| = |7 - 6| = 0.\n    search([2, 2, 2]) = 0\n    explanation: The optimal distribution is to put two 1-minute songs, two 2-minute songs, and two 3-minute songs in each concert. The difference in durations will be |2*1 + 2*2 + 2*3 - (2*1 + 2*2 + 2*3)| = |12 - 12| = 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach will naturally handle cases where all songs have the same duration.\n", "requirement analysis:\nThe problem requires finding the optimal way to distribute songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial optimization problem where the goal is to balance the total duration of the two concerts as evenly as possible. The solution should be efficient and able to handle large inputs within reasonable time constraints.\nrequirement pool:\n- Implement an efficient algorithm to find the optimal distribution of songs.\n- Ensure the program can handle up to 1000 test cases.\n- Optimize the solution for large input sizes.\n- Provide clear and accurate output for each test case.\n- Ensure the program is easy to understand and use.\nTo solve this problem efficiently, we will use a greedy algorithm approach. The idea is to sort the song durations and then distribute them between the two concerts in a way that minimizes the absolute difference in their durations. This approach is efficient and suitable for handling large inputs within reasonable time constraints.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'minimizing the absolute difference': means finding the smallest possible difference between two groups of numbers.\n    'greedy algorithm': a method of solving optimization problems by making the best choice at each step, with the hope of finding a global optimum.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Sort the song durations in ascending order.\n    Distribute the smallest and largest songs between the two concerts to minimize the difference.\n    Calculate the difference between the two concerts' durations.\n\n# [edge case] \n    search([1, 2, 3]) = 0\n    explanation: The optimal distribution is to put the 1 and 3 minute songs in one concert and the 2 minute song in the other. The difference is |2-3| = 1.\n    search([4, 4, 4]) = 0\n    explanation: The optimal distribution is to put two 4 minute songs in one concert and the third 4 minute song in the other. The difference is |4-4| = 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach will naturally handle cases where all songs are the same duration.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the absolute difference in their durations. This can be approached by trying different combinations of songs and calculating the differences. The solution should be efficient and handle up to 1000 test cases.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in minutes between the concerts durations.\n- Ensure the code can handle up to 1000 test cases.\n- Optimize the solution for large input sizes.\n- Provide clear and concise output for each test case.\nTo solve this problem efficiently, we will use a brute-force approach to try all possible combinations of distributing the songs into two concerts. Given the constraints, we will focus on optimizing the distribution process by trying to balance the durations as evenly as possible. We will use Python's built-in functions and libraries to ensure the solution is both efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'absolute difference': the smallest difference between two values\n    'minimize': find the lowest possible value\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve this problem, we will follow these steps:\n    1. Read the number of test cases.\n    2. For each test case, read the durations of the songs.\n    3. Try all possible combinations of distributing the songs into two concerts.\n    4. Calculate the absolute difference for each combination.\n    5. Return the smallest absolute difference found.\n\n# [edge case] \n    Test case 1:\n        Input: [1, 2, 3]\n        Explanation: Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. The durations will be 3 and 3, and the difference will be |3-3| = 0.\n        Expected output: 0\n    Test case 2:\n        Input: [2, 2, 2]\n        Explanation: Luntik can include two one-minute songs and a two-minute song into the first concert, and two three-minute songs into the second concert. The durations will be 5 and 6, and the difference will be |5-6| = 1.\n        Expected output: 1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The brute-force approach will naturally handle cases where the distribution is balanced perfectly.\n", "requirement analysis:\nThe problem requires a method to distribute songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to try different distributions and calculate the differences. The solution should be efficient and handle large inputs within reasonable time limits.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations.\n- Ensure the solution is optimized for handling multiple test cases efficiently.\n- Develop a clear and concise algorithm to distribute songs into concerts.\n- Test the solution with a variety of inputs to ensure accuracy and robustness.\nTo solve this problem efficiently, we will use a combinatorial approach to try different distributions of songs into two concerts. We will calculate the total duration of songs for each distribution and then find the absolute difference between the two concert durations. The goal is to minimize this difference. Given the constraints, we will use Python due to its efficiency and ease of handling large numbers.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups such that each song is included in exactly one group.\n    'minimal possible difference': means finding the smallest absolute difference between the total durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means that we need to minimize the absolute difference between the two concert durations.\n\n# [code logic]\n    To solve this problem, we need to consider all possible distributions of the songs into two concerts and calculate the absolute difference for each distribution. The minimal possible difference will be the smallest absolute difference found.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal distribution would be to put one 3-minute song in one concert and the other two songs in the other concert. The durations will be 3 and 3, respectively, and the absolute difference is 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The optimal distribution would be to put two 3-minute songs and two 2-minute songs in one concert, and the remaining two 1-minute songs in the other concert. The durations will be 7 and 2, respectively, and the absolute difference is 5.\n    Expected output: 5\n\n    Edge case 3:\n    Input: a = 3, b = 0, c = 0\n    Explanation: There are three 1-minute songs. The only way to distribute them is to put all three in one concert, and the other concert will be empty. The duration of the one concert is 3, and the absolute difference is 3.\n    Expected output: 3\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle these cases directly.\n"], "scores": [], "pass_results": [false, false, false, false, true, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 6, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "add_1_sentence_at_end", "parent_index": 6}
