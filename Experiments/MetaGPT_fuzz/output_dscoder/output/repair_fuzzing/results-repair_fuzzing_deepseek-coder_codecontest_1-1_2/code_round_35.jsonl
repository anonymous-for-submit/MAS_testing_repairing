{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing and has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible, where the duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing and has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible, where the duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing and has a one-minute song, b two-minute songs, and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included in exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible, where the duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has songs of durations one minute, b two minutes, and c three minutes. He wants to distribute all songs into two concerts with the goal of minimizing the absolute difference in their durations. Find the smallest possible difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\ndef distribute_songs(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Distribute songs into two concerts to minimize the absolute difference in their durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible distributions of songs into two concerts\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                for l in range(4):\n                    for m in range(4):\n                        for n in range(4):\n                            # Calculate the durations of the two concerts\n                            duration1 = i * 1 + j * 2 + k * 3\n                            duration2 = total_duration - duration1\n                            \n                            # Calculate the absolute difference\n                            diff = abs(duration1 - duration2)\n                            \n                            # Update the minimum difference\n                            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = distribute_songs(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # If the total duration is odd, the best we can do is a difference of 1\n    if total_duration % 2 != 0:\n        return 1\n    \n    # The ideal duration for each concert\n    ideal_duration = total_duration // 2\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all combinations of assigning songs to the two concerts\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                if i + 2 * j + 3 * k <= ideal_duration:\n                    diff = abs((i + 2 * j + 3 * k) - (total_duration - (i + 2 * j + 3 * k)))\n                    min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ninput = sys.stdin.read\n\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # If the total duration is even, we can perfectly balance it between two concerts\n    if total_duration % 2 == 0:\n        return 0\n    \n    # If the total duration is odd, we need to find the minimal difference\n    # We will try to balance the total duration as evenly as possible\n    # The minimal difference will be either 1 or 2\n    \n    # Check if we can balance by removing one song of each type\n    if a % 2 == 1 and b % 2 == 1:\n        return 1\n    if a % 2 == 1 and c % 2 == 1:\n        return 1\n    if b % 2 == 1 and c % 2 == 1:\n        return 1\n    \n    # If we cannot balance by removing one song of each type, the minimal difference will be 2\n    return 2\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing the songs\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                for l in range(4):\n                    if (i + j + k + l) == 4:\n                        duration1 = a + 2 * (b // 2) + 3 * (c // 2)\n                        duration2 = total_duration - duration1\n                        diff = abs(duration1 - duration2)\n                        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Sort the songs by their durations\n    songs = [1] * a + [2] * b + [3] * c\n    songs.sort()\n    \n    # Initialize the minimal possible difference\n    min_diff = float('inf')\n    \n    # Use a two-pointer technique to distribute the songs between the two concerts\n    for i in range(1, len(songs)):\n        # Split the songs into two groups\n        left_duration = sum(songs[:i])\n        right_duration = sum(songs[i:])\n        diff = abs(left_duration - right_duration)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Provide the Interface\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_difference = total_duration\n    \n    # Try to distribute the songs into two concerts\n    for i in range(4):\n        for j in range(4):\n            duration_first_concert = i * 1 + (3 - i) * 2 + (2 - j) * 3\n            duration_second_concert = total_duration - duration_first_concert\n            difference = abs(duration_first_concert - duration_second_concert)\n            min_difference = min(min_difference, difference)\n    \n    return min_difference\n\n# Interface for the function\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try to distribute the songs into two concerts\n    for i in range(4):\n        for j in range(4):\n            # Calculate the duration of the first concert\n            first_concert_duration = i * 1 + (3 - i) * 2 + (2 - j) * 3\n            # Calculate the duration of the second concert\n            second_concert_duration = total_duration - first_concert_duration\n            # Calculate the absolute difference\n            diff = abs(first_concert_duration - second_concert_duration)\n            # Update the minimal difference\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Sort the songs by their durations in descending order\n    songs = [a, b, c]\n    songs.sort(reverse=True)\n    \n    # Initialize the total durations of the two concerts\n    total_duration_1 = 0\n    total_duration_2 = 0\n    \n    # Distribute the songs into two concerts\n    for song_count in songs:\n        if total_duration_1 <= total_duration_2:\n            total_duration_1 += song_count\n        else:\n            total_duration_2 += song_count\n    \n    # Calculate the absolute difference between the two concert durations\n    difference = abs(total_duration_1 - total_duration_2)\n    \n    return difference\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    total_duration = a + 2 * b + 3 * c\n    if total_duration % 2 == 0:\n        return 0\n    else:\n        # Try to balance by moving one song from one concert to another\n        # Check if we can balance by moving one 1-minute song\n        if a > 0:\n            a -= 1\n            total_duration -= 1\n            if total_duration % 2 == 0:\n                return 1\n            else:\n                return 0\n        # Check if we can balance by moving one 2-minute song\n        elif b > 0:\n            b -= 1\n            total_duration -= 2\n            if total_duration % 2 == 0:\n                return 1\n            else:\n                return 0\n        # Check if we can balance by moving one 3-minute song\n        elif c > 0:\n            c -= 1\n            total_duration -= 3\n            if total_duration % 2 == 0:\n                return 1\n            else:\n                return 0\n        else:\n            return 0  # This case should not happen as we always have enough songs to balance\n\n# Read the number of test cases\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    min_diff = float('inf')\n\n    # Try to balance the durations as evenly as possible\n    for i in range(4):  # Number of songs to put in the first concert\n        for j in range(4):  # Number of songs to put in the second concert\n            if i + j <= a + b + c:\n                duration1 = i * 1 + (a - i) * 1 + j * 2 + (b - j) * 2 + (c - (a + b + c - i - j)) * 3\n                duration2 = total_duration - duration1\n                min_diff = min(min_diff, abs(duration1 - duration2))\n\n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires finding the optimal way to distribute songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to try all possible distributions and calculate the differences. The input consists of multiple test cases, and each case has a specific number of songs of different durations. The output should provide the minimal possible difference for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations for each test case.\n- Ensure the program can handle multiple test cases efficiently.\n- Develop a strategy to distribute songs to minimize the duration difference.\n- Optimize the algorithm to handle large input sizes within reasonable time limits.\nTo solve the problem of distributing songs into two concerts to minimize the absolute difference in their durations, we will use a simple Python function that calculates the optimal distribution for each test case. The function will iterate through all possible distributions and calculate the differences to find the minimal one. Given the constraints, we will ensure the function is efficient and can handle large input sizes within reasonable time limits.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing items or amounts into two or more groups, typically for the purpose of organizing or accounting for them.\n    'absolute difference': the positive difference between two values, regardless of which is larger.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference\n\n# [code logic]\n    To implement the solution, we need to consider the following steps:\n    1. Calculate the total duration of all songs.\n    2. Iterate through all possible distributions of songs into two concerts.\n    3. For each distribution, calculate the duration of each concert.\n    4. Compute the absolute difference between the durations of the two concerts.\n    5. Track the minimum absolute difference found.\n    6. Return the minimum absolute difference.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal distribution would be to put one 3-minute song in one concert and the other two songs in the other concert. The durations would be 3 and 2, respectively, and the absolute difference is 1.\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs in total. The optimal distribution would be to put two 3-minute songs and two 2-minute songs in one concert, and the remaining two 1-minute songs in the other concert. The durations would be 7 and 2, respectively, and the absolute difference is 5.\n    Edge case 3:\n    Input: a = 10^9, b = 10^9, c = 10^9\n    Explanation: There are three types of songs with a very large number of each. The optimal distribution would be to put one type of song in one concert and the other two types in the other concert. The durations would be close to each other, and the absolute difference would be minimized.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to find the minimal possible difference for any given input within the constraints.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves distributing the songs into two concerts such that the sum of the durations of the songs in each concert is as close as possible. This can be achieved by trying to balance the distribution of the songs as evenly as possible between the two concerts.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in minutes between the concerts durations.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to minimize the time complexity.\nTo solve the problem of distributing songs into two concerts with minimal duration difference, we can use a greedy approach. The idea is to first try to balance the total duration of the songs between the two concerts as evenly as possible. If that's not possible, we will then adjust by assigning songs to the concert that is currently shorter. This approach ensures that we minimize the absolute difference in durations between the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of assigning songs to two concerts to minimize the difference in their total durations.\n    Explanation: The requirement is to distribute songs of different durations (1, 2, and 3 minutes) into two concerts such that the total duration of songs in each concert is as close as possible. This involves balancing the total duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    'as small as possible': Indicates that we need to find the minimal possible difference in durations between the two concerts.\n\n# [degree adverb] \n    'as small as possible': Indicates the need to find the minimal possible difference.\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Determine the ideal duration for each concert by dividing the total duration by 2.\n    3. Distribute the songs to minimize the difference between the two concerts.\n    4. Return the minimal possible difference in durations.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: The total duration is 3 minutes, and the ideal distribution would be 1.5 minutes per concert. Since we can't have half a song, we can distribute one song to each concert, resulting in a difference of 0.\n    search([2, 1, 3]) = 1\n    Explanation: The total duration is 6 minutes, and the ideal distribution would be 3 minutes per concert. We can distribute the songs such that one concert has 2 + 3 = 5 minutes and the other has 1 minute, resulting in a difference of |5 - 1| = 4. However, a better distribution would be to put two 3-minute songs in one concert and the rest in the other, resulting in a difference of 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the total duration is odd, as we cannot perfectly split the duration into two equal parts.\n        if total_duration % 2 != 0:\n            return 1  # Since we can't perfectly split an odd total duration, the best we can do is a difference of 1.\n\n# [extra code for edge case]\n    Extra code are needed to handle the edge case.\n        if total_duration % 2 != 0:\n            return 1  # Since we can't perfectly split an odd total duration, the best we can do is a difference of 1.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves distributing the songs into two concerts such that the sum of the durations of the songs in each concert is as close as possible. This can be achieved by trying to balance the distribution of the songs as evenly as possible between the two concerts.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations between two concerts.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to minimize the time complexity.\nTo solve the problem of distributing songs into two concerts with minimal duration difference, we can use a greedy approach. The idea is to first try to balance the total duration of the songs between the two concerts as evenly as possible. If this is not possible, we will then calculate the difference. This approach ensures that we find the minimal possible difference efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts such that each song is included in exactly one concert.\n    'minimal difference': aims to minimize the absolute difference in the sum of durations between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': indicates that we need to find the smallest possible difference in the total duration of the concerts.\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Determine the optimal way to distribute the songs to minimize the difference in total duration between the two concerts.\n    3. Return the minimal possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs such that one concert has durations 1+1 = 2 and the other has 1, resulting in a difference of |2-1| = 1.\n    search([2, 2, 2]) = 0\n    explanation: Luntik can distribute the songs such that one concert has durations 2+2 = 4 and the other has 2+2 = 4, resulting in a difference of |4-4| = 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to find the minimal possible difference.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves distributing the songs into two concerts such that the sum of the durations of the songs in each concert is as close as possible. This can be achieved by trying to balance the total duration of the songs as evenly as possible between the two concerts.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations between two concerts.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to minimize the absolute difference in durations.\nTo solve the problem of distributing songs with different durations into two concerts with minimal difference in duration, we can use a greedy approach. The idea is to first calculate the total duration of all songs, then try to balance the duration between the two concerts as evenly as possible. This can be achieved by sorting the songs by their duration and then using a two-pointer technique to distribute them.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert\n    'minimal difference': means the smallest possible difference between the two concerts' durations\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means we need to minimize the difference\n\n# [code logic]\n    To solve this problem, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Sort the songs by their duration.\n    3. Use a two-pointer technique to distribute the songs into two concerts.\n    4. Calculate the difference between the two concerts' durations and keep track of the minimal difference.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal way to distribute them is to put one 3-minute song in one concert and the other two songs in the other concert. The difference in duration would be |3 - (1+1+1)| = 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The optimal way to distribute them is to put two 3-minute songs and one 2-minute song in one concert, and the other two 2-minute songs and one 1-minute song in the other concert. The difference in duration would be |(3+3+2) - (2+2+1)| = 1.\n    Expected output: 1\n\n    Edge case 3:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There is only one 1-minute song. The only way to distribute it is to put it in one concert, and the other concert will be empty. The difference in duration would be |1 - 0| = 1.\n    Expected output: 1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The given logic can handle cases where there is only one type of song or no songs of a certain duration.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves distributing the songs into two concerts such that the sum of the durations of the songs in each concert is as close as possible. This can be achieved by trying to balance the total duration of the songs as evenly as possible between the two concerts.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations between two concerts.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to minimize the absolute difference in durations.\nTo solve the problem of distributing songs with different durations into two concerts with minimal difference in duration, we can use a greedy approach. The idea is to first calculate the total duration of all songs, then try to balance the duration between the two concerts as evenly as possible. This can be achieved by sorting the songs by their durations and then using a two-pointer technique to distribute the songs between the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert.\n    'minimal difference': means the smallest possible difference between the total durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means we need to minimize the difference.\n\n# [code logic]\n    To solve this, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Sort the songs by their durations.\n    3. Use a two-pointer technique to distribute the songs between the two concerts.\n    4. Calculate the difference between the total durations of the two concerts.\n    5. Return the minimal possible difference.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal way to distribute them is to put one song of each duration in each concert, which will result in a difference of 1 minute between the two concerts.\n    Expected Output: 1\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of the same duration. The optimal way to distribute them is to put three songs of each duration in each concert, which will result in a difference of 0 minutes between the two concerts.\n    Expected Output: 0\n\n    Edge case 3:\n    Input: a = 10^9, b = 10^9, c = 10^9\n    Explanation: There are three songs with a very large number of instances. The optimal way to distribute them is to put the largest number of songs in each concert, which will result in a difference of 0 minutes between the two concerts.\n    Expected Output: 0\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle large numbers efficiently.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where Luntik's songs need to be distributed. The solution involves calculating the total duration of all songs and then finding a way to split these songs into two concerts such that the difference in their durations is minimized. This can be approached by trying to balance the load as evenly as possible between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a strategy to distribute songs into two concerts to minimize the difference in their durations.\n- Ensure the solution can handle a large number of test cases efficiently.\n- Optimize the algorithm to provide the minimal possible difference in durations.\nTo solve this problem, we will use a simple approach that involves calculating the total duration of all songs and then trying to distribute them into two concerts in a way that minimizes the absolute difference in their durations. This can be achieved by trying to balance the load as evenly as possible between the two concerts. We will use a greedy approach to distribute the songs, starting with the longest duration songs to balance the load.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of dividing items or amounts into two or more groups, typically for the purpose of organizing or managing them more efficiently.\n    Explanation: In this problem, Luntik has a set of songs with different durations, and he wants to distribute them into two concerts such that the total duration of songs in each concert is as close as possible. This is a classic problem of balancing a load.\n\n# [phrase showing quantity relationship]\n    'as small as possible': This phrase indicates that we need to find the minimal possible difference in durations between the two concerts.\n    Explanation: We need to minimize the absolute difference between the total durations of the two concerts.\n\n# [degree adverb] \n    'as small as possible': This adverb emphasizes the need to find the smallest possible difference.\n    Explanation: We aim to find the minimal possible difference in minutes between the concerts durations.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts, trying to balance the load as evenly as possible.\n    3. Calculate the difference between the total durations of the two concerts.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Edge Case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: Luntik has one of each song. The optimal distribution would be to put one one-minute song, one two-minute song, and one three-minute song in each concert. The difference would be 0.\n    Expected Output: 0\n\n    Edge Case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: Luntik has two of each song. The optimal distribution would be to put two one-minute songs, two two-minute songs, and two three-minute songs in each concert. The difference would be 0.\n    Expected Output: 0\n\n    Edge Case 3:\n    Input: a = 10, b = 0, c = 0\n    Explanation: Luntik has only one-minute songs. The optimal distribution would be to put all one-minute songs in one concert and none in the other. The difference would be the total duration of one-minute songs.\n    Expected Output: 10\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach described in the code logic will naturally handle cases where there are no songs of a particular duration.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the absolute difference in their durations. This involves finding an optimal distribution strategy that balances the song counts across the two concerts. The solution should be efficient and handle large inputs within reasonable time limits.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in song durations for each test case.\n- Ensure the solution is optimized for large inputs.\n- Provide clear and concise output for each test case.\n- Handle multiple test cases efficiently.\nTo solve the problem of minimizing the absolute difference in song durations for each test case, we will use a straightforward approach. The key idea is to distribute the songs in such a way that the total duration of each concert is as balanced as possible. This can be achieved by first calculating the total duration of all songs and then finding the best way to split this duration into two nearly equal parts. We will use a greedy algorithm to achieve this, prioritizing the use of the longest duration songs first to balance the load.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'absolute difference': the smallest possible difference between two values\n    'minimize': the goal is to find the smallest possible value of the absolute difference\n\n# [phrase showing quantity relationship]\n    'one minute': refers to a duration of 1 unit\n    'two minutes': refers to a duration of 2 units\n    'three minutes': refers to a duration of 3 units\n    'two concerts': refers to dividing the songs into two groups\n\n# [degree adverb] \n    'smallest possible': means the minimum difference between the two groups\n\n# [code logic]\n    To minimize the absolute difference, we need to distribute the songs in a way that balances the total duration of the two concerts as evenly as possible. This can be achieved by sorting the song durations and then trying to place the largest durations into the two concerts to balance the total duration.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 3, and the best distribution is to put one song in each concert, resulting in a difference of 0.\n    search([2, 2, 2]) = 0\n    explanation: The total duration is 6, and the best distribution is to put two songs in each concert, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where all songs have the same duration.\n\n## Prompt 3:\n[requirement]\nLuntik has songs of durations one minute, b two minutes, and c three minutes. He wants to distribute all songs into two concerts with the goal of minimizing the absolute difference in their durations. Find the smallest possible difference. Input The first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Each test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs. Output For each test case print the minimal possible difference in minutes between the concerts durations. Example Input 4 1 1 1 2 1 3 5 5 5 1 1 2 Output 0 1 0 1 Note In the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0. In the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\n[plan]\nTo solve the problem of minimizing the absolute difference in song durations for each test case, we will use a straightforward approach. The key idea is to distribute the songs in such a way that the total duration of each concert is as balanced as possible. This can be achieved by first calculating the total duration of all songs and then finding the best way to split this duration into two nearly equal parts. We will use a greedy algorithm to achieve this, prioritizing the use of the longest duration songs first to balance the load.\n\n## Answer 3:\n\n# [core concept]\n    'absolute difference': the smallest possible difference between two values\n    'minimize': the goal is to find the smallest possible value of the absolute difference\n\n# [phrase showing quantity relationship]\n    'one minute': refers to a duration of 1 unit\n    'two minutes': refers to a duration of 2 units\n    'three minutes': refers to a duration of 3 units\n    'two concerts': refers to dividing the songs into two groups\n\n# [degree adverb] \n    'smallest possible': means the minimum difference between the two groups\n\n# [code logic]\n    To minimize the absolute difference, we need to distribute the songs in a way that balances the total duration of the two concerts as evenly as possible. This can be achieved by sorting the song durations and then trying to place the largest durations into the two concerts to balance the total duration.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 3, and the best distribution is to put one song in each concert, resulting in a difference of 0.\n    search([2, 2, 2]) = 0\n    explanation: The total duration is 6, and the best distribution is to put two songs in each concert, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where all songs have the same duration.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to find the optimal distribution. The solution should be efficient and handle up to 1000 test cases, each with up to 10^9 songs.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference between the durations of two concerts.\n- Ensure the solution is optimized for large inputs.\n- Provide clear and concise output for each test case.\n- Handle up to 1000 test cases.\n- Ensure the solution is efficient and does not time out for large inputs.\nTo solve the problem of distributing songs into two concerts with the goal of minimizing the absolute difference in their durations, we will use a greedy approach. The idea is to sort the songs by their durations and then distribute them into two concerts by trying to balance the total duration of each concert as much as possible. This approach ensures that we minimize the absolute difference in the durations of the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'absolute difference': the smallest possible difference between two values\n\n    'greedy approach': a strategy to solve a problem by making the best choice at each step, without considering the overall result\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case:\n    1. Sort the durations of the songs in descending order.\n    2. Initialize two variables to keep track of the total duration of each concert.\n    3. Iterate through the sorted list and assign songs to the two concerts, trying to balance the total duration of each concert as much as possible.\n    4. Calculate the absolute difference between the two concert durations.\n    5. Return the minimal possible difference.\n\n# [edge case] \n    search([1, 2, 3]) = 0\n    explanation: The optimal way to distribute the songs is to put one song in each concert, resulting in a difference of 0.\n    search([4, 4, 4]) = 0\n    explanation: Since all songs are of the same duration, they can be evenly distributed between the two concerts, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach will naturally handle cases where all songs have the same duration.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to find the best distribution that balances the song counts between the two concerts. The solution should be efficient and handle up to 1000 test cases, each with up to 10^9 song counts.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in song durations.\n- Ensure the solution is optimized for large inputs.\n- Provide clear and concise output for each test case.\n- Handle up to 1000 test cases.\nTo solve the problem of minimizing the absolute difference in song durations for Luntik's concerts, we will use a greedy approach. The idea is to first try to balance the total duration of the songs by evenly distributing them between the two concerts. If this is not possible, we will adjust by moving one song from one concert to another to minimize the difference. This approach ensures that we find the optimal solution efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'absolute difference': the smallest possible difference between two values\n    'minimize': find the lowest possible value\n\n# [phrase showing quantity relationship]\n    'one minute': duration of a song\n    'two minutes': duration of a song\n    'three minutes': duration of a song\n\n# [degree adverb] \n    'smallest possible': indicates the goal is to find the minimum difference\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve the problem, we need to distribute the songs between two concerts to minimize the absolute difference in their durations. The optimal approach is to first try to balance the total duration as evenly as possible. If the total duration is not divisible by 2, we will have a small difference, and we need to adjust by moving one song from one concert to another.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 3+3=6, which is divisible by 2. We can distribute the songs such that each concert has a duration of 3, resulting in a difference of 0.\n    search([1, 2, 3]) = 1\n    explanation: The total duration is 1+4+6=11, which is not divisible by 2. The best we can do is distribute the songs such that one concert has a duration of 5 and the other has a duration of 6, resulting in a difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to solve the problem, including the edge case where the total duration is not divisible by 2.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves distributing the songs into two concerts such that the sum of the durations of the songs in each concert is as close as possible. This can be achieved by trying to balance the distribution of the songs as evenly as possible between the two concerts.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in minutes between the concerts durations.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to minimize the time complexity.\nTo solve the problem of distributing songs with different durations into two concerts with minimal difference in duration, we can use a greedy approach. The idea is to first try to balance the total duration of the songs between the two concerts as evenly as possible. If this is not possible, we will then calculate the difference. This approach ensures that we find the minimal possible difference efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing items or amounts into two or more groups.\n    Explanation: In this problem, we need to distribute the songs with different durations into two concerts such that each song is included in exactly one concert. The goal is to minimize the absolute difference in the total duration of the two concerts.\n\n# [phrase showing quantity relationship]\n    'as small as possible': means we need to find the minimal difference in the total duration of the concerts.\n\n# [degree adverb] \n    'as small as possible': means we need to find the minimal difference in the total duration of the concerts.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Determine the optimal way to distribute the songs to minimize the difference in total duration between the two concerts.\n    3. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: Luntik can distribute one one-minute song, one two-minute song, and one three-minute song into two concerts such that each song is included in exactly one concert. The total duration of each concert will be 2 minutes, and the difference will be |2-2| = 0.\n    search([2, 1, 3]) = 1\n    Explanation: Luntik can distribute two one-minute songs, one two-minute song, and three three-minute songs into two concerts. One optimal way is to include two one-minute songs and one two-minute song into the first concert, and the remaining songs into the second concert. The total duration of the first concert will be 1 + 2 = 3 minutes, and the total duration of the second concert will be 3 + 3 = 6 minutes. The difference will be |3-6| = 3. However, this is not the minimal possible difference, and a better distribution would be to include one one-minute song, one two-minute song, and two three-minute songs into the first concert, and the remaining one-minute song and one three-minute song into the second concert. The difference will be |4-5| = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already ensures that we find the minimal possible difference efficiently.\n"], "scores": [], "pass_results": [true, false, false, false, false, false, false, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 2, "round": 35, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "condense_two2one", "parent_index": 31}
