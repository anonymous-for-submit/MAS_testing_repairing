{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing and has a one-minute songs, b two-minute songs and c three-minute songs, and he wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing and has a one-minute songs, b two-minute songs and c three-minute songs, and he wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing and has a one-minute song, b two-minute songs, and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included in exactly one concert. He wants to make the absolute difference of the durations of the concerts as small as possible. Help Luntik find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing and has a one-minute songs, b two-minute songs and c three-minute songs, and he wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\ndef calculate_minimal_difference(a, b, c):\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # If the total duration is odd, the minimal possible difference is 1\n    if total_duration % 2 == 1:\n        return 1\n    \n    # Calculate the minimal possible difference\n    return (total_duration // 2) % 2\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try to balance the durations as evenly as possible\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                duration1 = i * 3 + j * 2 + k * 1\n                duration2 = total_duration - duration1\n                diff = abs(duration1 - duration2)\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    min_diff = float('inf')\n\n    # Try all possible distributions of songs into two concerts\n    for i in range(3):  # There are at most 3 different ways to distribute the songs\n        for j in range(3):\n            if i + j == 3:  # Ensure both groups are used\n                # Calculate the duration of the first concert\n                first_duration = (a // 2) * 1 + (b // 2) * 2 + (c // 2) * 3 + (a % 2) * 1 + (b % 2) * 2 + (c % 2) * 3\n                # Calculate the duration of the second concert\n                second_duration = total_duration - first_duration\n                # Calculate the absolute difference\n                diff = abs(first_duration - second_duration)\n                # Update the minimal difference\n                min_diff = min(min_diff, diff)\n\n    return min_diff\n\n# Read the number of test cases from stdin\nt = int(sys.stdin.readline().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimal possible difference to a large number\n    minimal_diff = float('inf')\n    \n    # Iterate through possible distributions\n    for i in range(4):\n        for j in range(4):\n            # Calculate the duration of the first concert\n            first_concert_duration = (a + b + c - i - j) + 2 * (b + c - j) + 3 * (c - i)\n            # Calculate the duration of the second concert\n            second_concert_duration = total_duration - first_concert_duration\n            # Calculate the absolute difference between the durations of the two concerts\n            diff = abs(first_concert_duration - second_concert_duration)\n            # Update the minimal possible difference if a better solution is found\n            minimal_diff = min(minimal_diff, diff)\n    \n    return minimal_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n    for i in range(total_duration + 1):\n        diff = abs((total_duration - i) - i)\n        min_diff = min(min_diff, diff)\n    return min_diff\n\n# Read the number of test cases\nn = int(input().strip())\n\n# Process each test case\nfor _ in range(n):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n\n    # Try all possible combinations to find the minimal difference\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                if (i + j + k) % 2 == 1:  # Ensure we have an odd number of songs\n                    continue\n                duration1 = i * 1 + j * 2 + k * 3\n                duration2 = total_duration - duration1\n                diff = abs(duration1 - duration2)\n                min_diff = min(min_diff, diff)\n\n    return min_diff\n\n# Input interface\nn = int(sys.stdin.readline().strip())\nfor _ in range(n):\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n\n# Output interface\nresult = find_minimal_difference(a, b, c)\nprint(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Finds the minimal possible difference in minutes between the durations of two concerts\n    given the number of one-minute, two-minute, and three-minute songs.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n\n    # Use binary search to find the optimal split\n    for concerts_one_duration in range(total_duration + 1):\n        concerts_two_duration = total_duration - concerts_one_duration\n        diff = abs(concerts_one_duration - concerts_two_duration)\n        min_diff = min(min_diff, diff)\n\n    return min_diff\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimal possible difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible splits and find the minimal difference\n    for i in range(total_duration + 1):\n        # Calculate the duration of the first concert\n        first_concert_duration = i\n        # Calculate the duration of the second concert\n        second_concert_duration = total_duration - i\n        # Calculate the absolute difference between the two durations\n        diff = abs(first_concert_duration - second_concert_duration)\n        # Update the minimal possible difference if the current difference is smaller\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the durations of two concerts\n    given the number of one-minute, two-minute, and three-minute songs.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n\n    # Binary search to find the optimal split point\n    left, right = 0, total_duration\n    while left <= right:\n        mid = (left + right) // 2\n        duration1 = mid\n        duration2 = total_duration - mid\n        diff = abs(duration1 - duration2)\n        min_diff = min(min_diff, diff)\n\n        if duration1 < duration2:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return min_diff\n\n# Read the number of test cases\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n    \n    # Iterate through all possible distributions of songs\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                if (i + j + k) * 2 == total_duration:\n                    duration1 = i + 2 * j + 3 * k\n                    duration2 = total_duration - duration1\n                    min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    return min_diff\n\n# Example usage:\n# print(calculate_minimal_difference(1, 1, 1))  # Output: 0\n# print(calculate_minimal_difference(2, 1, 3))  # Output: 1\n# print(calculate_minimal_difference(5, 5, 5))  # Output: 0\n# print(calculate_minimal_difference(1, 1, 2))  # Output: 1\n\n# Read input and output results\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires distributing songs of different durations into two concerts to minimize the absolute difference in their durations. This is a classic optimization problem that can be approached using a greedy algorithm. The goal is to balance the total duration of the songs in both concerts as evenly as possible.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations between the two concerts.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it works within the constraints provided.\nTo solve this problem, we will use a greedy algorithm to distribute the songs into two concerts. The algorithm will aim to balance the total duration of the songs in both concerts as evenly as possible. We will first calculate the total duration of all songs and then use a simple approach to distribute them into two concerts, ensuring the absolute difference in their durations is minimized.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups such that each song is included in exactly one group.\n    'balance': aims to minimize the absolute difference in the total duration of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference as much as we can.\n\n# [code logic]\n    To implement the plan, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts, trying to balance the total duration as evenly as possible.\n    3. Calculate the absolute difference between the durations of the two concerts.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs into two concerts with durations 2 and 2, making the difference 0.\n    search([2, 1, 3]) = 1\n    explanation: Luntik can distribute the songs into two concerts with durations 3 and 5, making the difference |3-5| = 2. However, a better distribution would be to include one 1-minute and one 3-minute song in one concert and the rest in the other, resulting in a difference of 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the total duration is odd, as it's impossible to split the concerts exactly in half. In such cases, we should return the smallest possible difference, which is 1, as we can always adjust one song to make the difference 1.\n\n    def search(lst):\n        total_duration = sum(lst)\n        if total_duration % 2 == 1:\n            return 1\n        else:\n            return (total_duration // 2) % 2\n", "requirement analysis:\nThe requirement is to find the minimal possible difference in minutes between the durations of two concerts where Luntik distributes his songs. The songs are categorized by their durations (1, 2, and 3 minutes). The goal is to balance the total duration of the two concerts as evenly as possible.\nrequirement pool:\n- Implement a function to calculate the minimal difference in concert durations\n- Ensure the function can handle multiple test cases efficiently\n- Optimize the algorithm to minimize the absolute difference in concert durations\nTo solve the problem of distributing songs into two concerts with minimal difference in durations, we can use a greedy approach. The idea is to first calculate the total duration of all songs and then try to balance the durations of the two concerts as evenly as possible. We can start by including as many 3-minute songs as possible in one concert, then 2-minute songs, and finally 1-minute songs. The difference between the two concerts will be the absolute value of the difference in their total durations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups such that each song is included in exactly one group.\n    'minimal difference': means to make the difference between the total durations of the two groups as small as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference as much as we can.\n\n# [code logic]\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Determine the optimal way to distribute the songs into two concerts to minimize the difference in durations.\n    3. Return the minimal possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs such that one concert has durations 1+1 = 2 and the other has 1, resulting in a difference of |2-1| = 1.\n    search([2, 2, 2]) = 0\n    explanation: Luntik can distribute the songs such that one concert has durations 2+2+2 = 6 and the other has 2+2 = 4, resulting in a difference of |6-4| = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to solve the problem.\n", "requirement analysis:\nThe problem requires distributing songs of different durations into two concerts to minimize the absolute difference in their durations. This is a classic optimization problem that can be approached using a greedy algorithm. The goal is to balance the total duration of the songs in each concert as evenly as possible.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in minutes between the concerts durations.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it works within the constraints provided.\nTo solve this problem, we will use a greedy algorithm to distribute the songs into two concerts. The algorithm will aim to balance the total duration of the songs in each concert as evenly as possible. We will first calculate the total duration of all songs and then use a simple heuristic to distribute them into two concerts. This approach will ensure that the absolute difference in durations between the two concerts is minimized.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups such that each song is included in exactly one group.\n    'balance': aims to make the total duration of songs in each group as equal as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference in duration between the two concerts.\n\n# [code logic]\n    To implement the plan, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy algorithm to distribute the songs into two concerts, aiming to balance the total duration of the songs in each concert as evenly as possible.\n    3. Calculate the absolute difference in duration between the two concerts.\n    4. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs into two concerts with durations 1+1 = 2 and 1, respectively. The difference is |2-1| = 1.\n    search([2, 2, 2]) = 0\n    explanation: Luntik can distribute the songs into two concerts with durations 2+2 = 4 and 2+2 = 4, respectively. The difference is |4-4| = 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy algorithm will naturally handle cases where the number of songs of each duration is the same.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where each song must be included in exactly one concert. The solution involves distributing the songs in a way that balances the total duration of the two concerts as evenly as possible. This can be achieved by first calculating the total duration of all songs and then finding the closest possible split that minimizes the absolute difference.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a strategy to distribute songs to two concerts to minimize the difference in duration.\n- Ensure the solution works efficiently even for large input sizes.\n- Include user input handling for the number of test cases and song durations.\n- Implement output formatting to display the minimal possible difference for each test case.\nTo solve this problem, we will use a simple approach that involves calculating the total duration of all songs and then distributing them between two concerts to minimize the difference in duration. We will iterate through possible distributions and calculate the absolute difference to find the minimal possible difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the total number of songs into two groups such that each song is included in exactly one group.\n    'minimal possible difference': means finding the smallest absolute difference between the durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference between the durations of the two concerts.\n\n# [code logic]\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Distribute the songs into two concerts to minimize the difference in duration.\n    3. Calculate the absolute difference between the durations of the two concerts.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    test case 1: a = 1, b = 1, c = 1\n    expected output: 0\n    Explanation: Luntik can include one one-minute song, one two-minute song, and one three-minute song into the first concert, and leave the rest for the second concert. The difference will be 0.\n\n    test case 2: a = 2, b = 1, c = 2\n    expected output: 1\n    Explanation: Luntik can include two one-minute songs and one two-minute song into the first concert, and two three-minute songs into the second concert. The difference between the durations of the two concerts will be 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The given logic can handle any valid input within the constraints.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where Luntik's songs are distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a method to find the closest possible split of the total duration into two concerts.\n- Ensure the solution handles multiple test cases efficiently.\n- Optimize the algorithm to minimize the absolute difference between the two concerts' durations.\nTo solve the problem of distributing Luntik's songs into two concerts with minimal difference in durations, we will use a simple approach that calculates the total duration of all songs and then finds the closest possible split that minimizes the difference between the two concerts. This can be efficiently achieved using a greedy algorithm.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups with minimal difference in total duration.\n    Explanation: The goal is to distribute the songs into two concerts such that the total duration of songs in each concert is as close as possible. This involves calculating the total duration and then finding a way to split it into two groups with the smallest possible difference.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means that we need to minimize the difference in durations between the two concerts.\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a loop to try different splits of the songs into two groups.\n    3. For each split, calculate the difference in durations between the two groups.\n    4. Keep track of the smallest difference found.\n    5. Return the smallest difference.\n\n# [edge case] \n    Edge case 1:\n    Input: [1, 1, 1]\n    Explanation: The total duration is 1 + 1 + 1 = 3. The best split is to include one song of each type in each concert, resulting in a difference of 0.\n    Edge case 2:\n    Input: [2, 1, 3]\n    Explanation: The total duration is 2 + 1 + 3 = 6. The best split is to include two one-minute songs and a two-minute song in the first concert, and a three-minute song in the second concert, resulting in a difference of 1.\n    Edge case 3:\n    Input: [5, 5, 5]\n    Explanation: The total duration is 5 + 5 + 5 = 15. The best split is to include three songs of each type in each concert, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle all cases efficiently.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where Luntik's songs need to be distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Implement a function to find the minimal possible difference between the durations of two concerts.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it works within the constraints of the problem.\nTo solve the problem of distributing Luntik's songs into two concerts with the minimal possible difference in durations, we can use a simple approach that involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts. This can be efficiently achieved using a greedy algorithm.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups such that each song is included in exactly one group.\n    'minimal difference': means finding the smallest possible difference between the total durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means the goal is to minimize the difference, not necessarily to make it zero.\n\n# [code logic]\n    To solve this problem, we need to calculate the total duration of all songs and then find the closest possible split that minimizes the difference between the two concerts. This can be efficiently achieved using a greedy algorithm.\n\n# [edge case] \n    test case 1:\n        Input: a = 1, b = 1, c = 1\n        Explanation: Luntik can include one one-minute song, one two-minute song, and one three-minute song into the first concert. The second concert will be empty, and the difference will be 0.\n        Expected output: 0\n    test case 2:\n        Input: a = 2, b = 1, c = 1\n        Explanation: Luntik can include two one-minute songs and one two-minute song into the first concert, and one three-minute song into the second concert. The difference will be |(2*1 + 1*2 + 1*3) - (1*3)| = |7 - 3| = 4.\n        Expected output: 4\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to solve the problem.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where each song must be included in exactly one concert. The solution involves distributing the songs in a way that balances the total duration of the two concerts as evenly as possible. This can be achieved by first calculating the total duration of all songs and then finding the closest possible split to minimize the absolute difference.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the optimal distribution of songs to minimize the difference in concert durations.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the code for large inputs to ensure it runs within acceptable time limits.\nTo solve the problem of distributing songs into two concerts with the minimal possible difference in durations, we can use a greedy approach. First, calculate the total duration of all songs. Then, use a binary search to find the optimal split point that minimizes the absolute difference between the two concert durations. This approach ensures that we efficiently find the best distribution without explicitly trying all possible combinations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups such that each song is included in exactly one group.\n    'minimal possible difference': means to find the smallest possible difference between the total durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference as much as we can.\n\n# [code logic]\n    To solve the problem, we need to calculate the total duration of all songs and then find a way to split them into two groups with the smallest possible difference. This can be done by trying to balance the distribution of the songs as evenly as possible.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs such that one concert has durations of 1+1 = 2 minutes and the other has 1 minute. The difference is |2-1| = 1.\n    search([2, 2, 2]) = 1\n    explanation: Luntik can distribute the songs such that one concert has durations of 2+2 = 4 minutes and the other has 2+2 = 4 minutes. The difference is |4-4| = 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic should be sufficient to find the minimal possible difference for each test case.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where each song must be included in exactly one concert. The solution involves distributing the songs in a way that balances the total duration of the two concerts as evenly as possible. This can be achieved by first calculating the total duration of all songs and then finding the closest possible split that minimizes the absolute difference.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a strategy to distribute songs to two concerts to minimize the difference in their durations.\n- Ensure the solution works efficiently even for large inputs within the given constraints.\n- Optimize the distribution logic to handle edge cases and ensure optimal song distribution.\nTo solve the problem of distributing songs into two concerts with the minimal possible difference in durations, we can use a simple approach that involves calculating the total duration of all songs and then finding the closest possible split that minimizes the absolute difference. This can be efficiently achieved using a greedy algorithm.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups such that each song is included in exactly one group.\n    'minimal possible difference': means finding the smallest absolute difference between the durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means the goal is to minimize the difference.\n\n# [code logic]\n    To solve this problem, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to try to split the total duration into two groups as evenly as possible.\n    3. Calculate the absolute difference between the durations of the two groups.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    test case 1:\n        Input: a = 1, b = 1, c = 1\n        Explanation: Luntik can distribute the songs as follows:\n            - First concert: 1 one-minute song and 1 two-minute song (total duration 3)\n            - Second concert: 1 three-minute song (total duration 3)\n            The difference between the durations of the two concerts is |3 - 3| = 0.\n        Expected output: 0\n\n    test case 2:\n        Input: a = 2, b = 1, c = 2\n        Explanation: Luntik can distribute the songs as follows:\n            - First concert: 2 one-minute songs, 1 two-minute song, and 1 three-minute song (total duration 7)\n            - Second concert: 2 three-minute songs (total duration 6)\n            The difference between the durations of the two concerts is |7 - 6| = 1.\n        Expected output: 1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic will work for any valid input within the given constraints.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where each song must be included in exactly one concert. The solution involves distributing the songs in a way that balances the total duration of the two concerts as evenly as possible. This can be achieved by first calculating the total duration of all songs and then finding the closest possible split that minimizes the absolute difference.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the optimal distribution of songs to minimize the difference in concert durations.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to handle large input sizes within reasonable time limits.\nTo solve the problem of distributing songs into two concerts with the minimal possible difference in durations, we can use a greedy approach. First, we calculate the total duration of all songs. Then, we use a binary search to find the optimal split point that minimizes the absolute difference between the two concert durations. This approach ensures that we efficiently find the best distribution without explicitly trying all possible combinations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert to minimize the difference in total duration between the two concerts.\n    Explanation: The goal is to divide the songs into two groups such that the sum of the durations in each group is as close as possible, minimizing the absolute difference between these sums.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means that the difference should be as low as mathematically achievable.\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a binary search to find the optimal split point that minimizes the absolute difference between the two concert durations.\n    3. For each test case, output the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Edge Case 1:\n    Input: [1, 1, 1]\n    Explanation: The total duration is 3 minutes. The optimal way to distribute the songs is to put one one-minute song and one two-minute song in one concert, and the remaining one-minute song in the other concert. The difference is |2 - 1| = 1 minute.\n    Expected Output: 1\n\n    Edge Case 2:\n    Input: [2, 2, 2]\n    Explanation: The total duration is 6 minutes. The optimal way to distribute the songs is to put two one-minute songs and two two-minute songs in one concert, and the remaining two two-minute songs in the other concert. The difference is |4 - 4| = 0 minutes.\n    Expected Output: 0\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the provided logic is sufficient to find the optimal distribution. The binary search approach inherently handles all possible distributions and finds the best possible split.\n", "requirement analysis:\nThe problem requires distributing songs of different durations into two concerts to minimize the absolute difference in their durations. This is a classic optimization problem that can be approached using a greedy algorithm. The goal is to balance the total duration of the songs in each concert as evenly as possible. The input consists of multiple test cases, each with a specific number of one-minute, two-minute, and three-minute songs. The output should provide the minimal possible difference in minutes between the durations of the two concerts for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations between two concerts.\n- Ensure the function can handle multiple test cases efficiently.\n- Develop a user interface to input the number of songs and their durations.\n- Provide a clear output displaying the minimal difference for each test case.\n- Optimize the algorithm to handle large inputs within a reasonable time frame.\nTo solve this problem, we will use a greedy algorithm approach. The idea is to first calculate the total duration of all songs, then distribute them as evenly as possible between the two concerts. We will sort the songs by their duration and then use a two-pointer technique to distribute them. This approach ensures that we minimize the absolute difference in durations between the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups such that the total duration of each group is as close as possible.\n    Explanation: The goal is to minimize the absolute difference in the total duration of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference\n\n# [code logic]\n    To implement the plan, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Distribute the songs as evenly as possible between the two concerts.\n    3. Calculate the absolute difference between the durations of the two concerts.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs such that one concert has durations of 1 and 2, and the other has 1 and 3. The difference is |(1+2)-(1+3)| = 0.\n    search([2, 2, 2]) = 0\n    explanation: Luntik can distribute the songs such that one concert has durations of 2, 2, and 3, and the other has 2 and 3. The difference is |(2+2+3)-(2+3)| = 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach ensures that we distribute the songs as evenly as possible.\n\n# [code logic]\n    Here's a Python function to solve the problem:\n\n    ```python\n    def min_difference(a, b, c):\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        for i in range(4):\n            for j in range(4):\n                if (a + b + c - i - j) % 2 == 0:\n                    duration1 = (a - i) + 2*(b - j) + 3*(c - (a + b + c - i - j) // 2)\n                    duration2 = total_duration - duration1\n                    min_diff = min(min_diff, abs(duration1 - duration2))\n        return min_diff\n\n    # Example usage:\n    print(min_difference(1, 1, 1))  # Output: 0\n    print(min_difference(2, 1, 3))  # Output: 1\n    print(min_difference(5, 5, 5))  # Output: 0\n    print(min_difference(1, 1, 2))  # Output: 1\n    ```\n\n    This function iterates through all possible distributions and calculates the absolute difference for each distribution, then returns the minimum difference found.\n"], "scores": [], "pass_results": [false, false, true, false, true, true, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 172, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "condense_two2one", "parent_index": 168}
