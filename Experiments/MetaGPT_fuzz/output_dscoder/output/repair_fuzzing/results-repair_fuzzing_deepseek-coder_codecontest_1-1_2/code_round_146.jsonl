{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs, and he wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs, and he wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing. He has a one-minute song, b two-minute songs, and c three-minute songs, and he wants to distribute all songs into two concerts such that every song should be included in exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has songs of durations a, b, and c minutes and wants to distribute them into two concerts with minimal absolute difference in duration. Find the smallest possible difference between the concert durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Finds the minimal possible difference in minutes between the durations of two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    min_diff = float('inf')\n    \n    # Iterate through all possible distributions of songs\n    for i in range(c + 1):\n        for j in range(b + 1):\n            for k in range(a + 1):\n                if (i * 3 + j * 2 + k * 1) % 2 == 0:\n                    diff = abs((i * 3 + j * 2 + k * 1) // 2 - (c * 3 + b * 2 + a * 1 - (i * 3 + j * 2 + k * 1)) // 2)\n                    min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total number of songs\n    total_songs = a + b + c\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs in the two concerts\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                for l in range(4):\n                    for m in range(4):\n                        for n in range(4):\n                            # Calculate the total duration for each concert\n                            duration1 = i * 1 + j * 2 + k * 3\n                            duration2 = l * 1 + m * 2 + n * 3\n                            \n                            # Check if the combination is valid\n                            if duration1 + duration2 == total_songs:\n                                # Calculate the absolute difference\n                                diff = abs(duration1 - duration2)\n                                \n                                # Update the minimum difference\n                                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible distributions of songs into two concerts\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                # Calculate the duration of the first concert\n                duration1 = i * 1 + j * 2 + k * 3\n                # Calculate the duration of the second concert\n                duration2 = total_duration - duration1\n                # Calculate the absolute difference in durations\n                diff = abs(duration1 - duration2)\n                # Update the minimal difference if a smaller one is found\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_min_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Sort the songs by their durations\n    songs = [1] * a + [2] * b + [3] * c\n    songs.sort()\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Use a two-pointer technique to find the closest possible split\n    n = len(songs)\n    for i in range(n):\n        left_duration = sum(songs[:i])\n        right_duration = sum(songs[i:])\n        diff = abs(left_duration - right_duration)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_min_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Finds the minimal possible difference in minutes between the durations of two concerts\n    given the number of one-minute, two-minute, and three-minute songs.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs in two concerts\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                for l in range(4):\n                    for m in range(4):\n                        for n in range(4):\n                            # Calculate the total duration of the first concert\n                            first_concert_duration = i * 1 + j * 2 + k * 3\n                            # Calculate the total duration of the second concert\n                            second_concert_duration = l * 1 + m * 2 + n * 3\n                            # Calculate the absolute difference between the two concert durations\n                            diff = abs(first_concert_duration - second_concert_duration)\n                            # Update the minimal difference if the current difference is smaller\n                            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Finds the minimal possible difference in minutes between the durations of two concerts\n    given the number of one-minute, two-minute, and three-minute songs.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    # Sort the counts of songs by their durations\n    counts = sorted([(3, c), (2, b), (1, a)])\n    \n    # Unpack the sorted counts\n    _, c = counts[2]\n    _, b = counts[1]\n    _, a = counts[0]\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of distributing the songs\n    for i in range(c + 1):\n        for j in range(min(b, i) + 1):\n            remaining_b = b - j\n            remaining_a = a - (i - j)\n            \n            # Calculate the total duration of the two concerts\n            duration_1 = 3 * i + 2 * j + remaining_a\n            duration_2 = 3 * (c - i) + 2 * (remaining_b) + a\n            \n            # Update the minimal difference\n            min_diff = min(min_diff, abs(duration_1 - duration_2))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a, b, c):\n    total_minutes = a + b + c\n    min_difference = float('inf')\n    \n    # Iterate through all possible splits of the songs between the two concerts\n    for i in range(total_minutes + 1):\n        # Calculate the duration of the first concert\n        first_concert_duration = i\n        # Calculate the duration of the second concert\n        second_concert_duration = total_minutes - i\n        # Calculate the difference between the two concerts\n        difference = abs(first_concert_duration - second_concert_duration)\n        # Update the minimum difference found\n        min_difference = min(min_difference, difference)\n    \n    return min_difference\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a, b, c):\n    total_duration = a + b + c\n    min_difference = float('inf')\n    \n    # Calculate the total duration of all songs.\n    total_duration = a + b + c\n    \n    # Iterate through all possible splits and find the minimal difference.\n    for i in range(3):\n        for j in range(3):\n            if i != j:\n                duration1 = (total_duration + i - j) // 2\n                duration2 = total_duration - duration1\n                min_difference = min(min_difference, abs(duration1 - duration2))\n    \n    return min_difference\n\n# Interface\nn = int(input())\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Luntik has songs of durations a, b, and c minutes and wants to distribute them into two concerts with minimal absolute difference in duration.\n    Find the smallest possible difference between the concert durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a + b + c\n    min_difference = float('inf')\n    \n    # Try all possible combinations of distributing the songs into two concerts\n    for i in range(4):  # There are 4 possible ways to distribute the songs (0, 1, 2, or 3 songs in one concert)\n        for j in range(4):\n            if i + j == 4:  # Ensure both concerts are filled\n                continue\n            duration_one = (a // 3) * 3 + (b // 2) * 2 + (c // 2) * 2 + (i - (a // 3 + b // 2 + c // 2)) * 3\n            duration_two = total_duration - duration_one\n            min_difference = min(min_difference, abs(duration_one - duration_two))\n    \n    return min_difference\n\n# Read input and output results\nn = int(input())\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): The number of one-minute songs.\n        b (int): The number of two-minute songs.\n        c (int): The number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the maximum possible sum to half of the total duration\n    max_possible_sum = total_duration // 2\n    \n    # Initialize the best difference to a large number\n    best_difference = float('inf')\n    \n    # Use dynamic programming to find all possible sums of durations for the songs\n    possible_sums = [0]\n    for _ in range(a + b + c):\n        new_sums = []\n        for current_sum in possible_sums:\n            new_sums.append(current_sum + 1)\n            new_sums.append(current_sum + 2)\n            new_sums.append(current_sum + 3)\n        possible_sums.extend(new_sums)\n    \n    # Find the closest sum to half of the total duration\n    for current_sum in possible_sums:\n        difference = abs(total_duration - 2 * current_sum)\n        if difference < best_difference:\n            best_difference = difference\n    \n    return best_difference\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires finding the optimal way to distribute songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to try different distributions and calculate the differences. The solution should be efficient and able to handle large inputs efficiently.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs into two concerts\n- Ensure the solution can handle multiple test cases efficiently\n- Provide clear and concise output for each test case\n- Optimize the algorithm to handle large input sizes\nTo solve the problem of distributing songs into two concerts to minimize the absolute difference in their durations, we will use a combinatorial approach. We will calculate all possible combinations of distributing the songs and then find the one with the smallest difference. Given the constraints, we will use a brute-force method to iterate through all possible distributions.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts such that each song is included in exactly one concert.\n    'absolute difference': means the difference between the sum of durations of songs in two concerts should be minimized.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means the goal is to find the smallest possible difference between the two concert durations.\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute one one-minute song and one two-minute song to the first concert, and the one three-minute song to the second concert. The difference is 0.\n    search([2, 1, 1]) = 0\n    explanation: Luntik can distribute two one-minute songs and one two-minute song to the first concert, and one three-minute song to the second concert. The difference is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan should be sufficient to find the minimal possible difference.\n", "requirement analysis:\nThe problem requires a method to distribute songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to find the optimal distribution. The input consists of multiple test cases, each with specific counts of one-, two-, and three-minute songs. The output should provide the minimal possible difference in minutes between the durations of the two concerts for each test case.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs into two concerts.\n- Ensure the program can handle large inputs efficiently.\n- Develop a clear and concise output format for each test case.\n- Optimize the algorithm for performance and scalability.\n- Enhance the user interface for better usability.\nTo solve this problem, we will use a dynamic programming approach to find the optimal distribution of songs into two concerts. The goal is to minimize the absolute difference in their durations. We will iterate through all possible combinations of songs and calculate the difference for each combination. The minimal difference found will be our answer.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert.\n    'minimal possible difference': means finding the smallest difference between the two concerts' total durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference.\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    No edge case provided in the plan\n\n# [extra code for edge case]\n    No extra code needed for edge cases as the logic provided is general for all test cases.\n\nPlease provide the specific requirement and coding plan for a detailed analysis.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the absolute difference in their durations. The solution should be efficient and handle large input sizes. The output should be accurate and provide the minimal possible difference between concert durations.\nrequirement pool:\n- Implement an efficient algorithm to distribute songs into concerts\n- Ensure the solution can handle large input sizes\n- Provide clear and concise output for each test case\n- Optimize the algorithm for minimal difference in concert durations\n- Ensure the solution is easy to understand and use\nTo solve this problem efficiently, we will use a dynamic programming approach to find the optimal distribution of songs into two concerts. The goal is to minimize the absolute difference in the durations of the concerts. We will iterate through all possible combinations of songs and calculate the differences to find the minimal possible difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups such that the sum of the durations in each group is as close as possible.\n    Explanation: The problem requires finding the optimal way to distribute the songs into two concerts to minimize the absolute difference in their durations. This involves finding a balance between the total duration of the songs in each concert.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means that the goal is to minimize the difference between the durations of the two concerts.\n\n# [code logic]\n    To solve this problem, we need to consider all possible distributions of the songs into two concerts and calculate the difference for each distribution. The optimal solution will be the minimum difference found among all possible distributions.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: In this case, Luntik can distribute the songs such that one concert has one one-minute song, one two-minute song, and one three-minute song, and the other concert also has one one-minute song, one two-minute song, and one three-minute song. The difference in durations will be 0.\n    search([2, 2, 2]) = 0\n    Explanation: If Luntik has more than enough songs of each duration, he can distribute them evenly between the two concerts, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The given logic already considers the scenario where all songs are of the same duration, ensuring the difference is minimized.\n", "requirement analysis:\nThe problem requires finding the optimal way to distribute songs into two concerts to minimize the absolute difference in their durations. This involves understanding the distribution of song durations and finding a balance that results in the smallest possible difference. The solution should be efficient and scalable to handle large inputs efficiently.\nrequirement pool:\n- Implement an algorithm to distribute songs into two concerts to minimize the difference in their durations.\n- Ensure the algorithm can handle large inputs within a reasonable time frame.\n- Optimize the algorithm for performance to handle large datasets.\n- Test the algorithm with various inputs to ensure accuracy and robustness.\n- Provide clear and concise output for each test case.\nTo solve the problem of distributing songs into two concerts to minimize the difference in their durations, we can use a greedy approach. The idea is to first calculate the total duration of all songs and then try to balance the distribution as evenly as possible. This can be achieved by sorting the songs by their durations and then using a two-pointer technique to find the closest possible split.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert\n    'absolute difference': means the smallest possible difference between the two concert durations\n    'minimize': means finding the smallest possible value of the difference\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to find the smallest difference\n\n# [code logic]\n    To solve this problem, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Sort the songs by their durations.\n    3. Use a two-pointer technique to find the closest possible split that minimizes the difference between the two concert durations.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal way to distribute them is to put one 3-minute song in one concert and the other two songs in the other concert. The difference in durations would be |3 - (1+1+1)| = 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: a = 1, b = 2, c = 3\n    Explanation: The optimal way to distribute them is to put one 1-minute song and one 3-minute song in one concert and the two 2-minute songs in the other concert. The difference in durations would be |(1+3) - (2+2)| = |4 - 4| = 0.\n    Expected output: 0\n\n    Edge case 3:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There are only 1-minute songs. The only way to distribute them is to put all of them in one concert. The difference in durations would be |total_duration - 0| = total_duration.\n    Expected output: total_duration\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic can handle all cases by calculating the total duration and then finding the optimal distribution.\n", "requirement analysis:\nThe problem requires a method to distribute songs into two concerts to minimize the absolute difference in their durations. This involves understanding the distribution of songs and calculating the possible combinations to find the optimal solution. The input is a series of test cases, each with specific counts of one, two, and three-minute songs. The output should be the minimal possible difference in minutes between the durations of the two concerts for each test case.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs.\n- Ensure the solution can handle large inputs efficiently.\n- Develop a user-friendly interface for easy input and output.\n- Optimize the algorithm for performance and scalability.\nTo solve this problem efficiently, we will use a dynamic programming approach to find the optimal distribution of songs into two concerts. The goal is to minimize the absolute difference in their durations. We will iterate through all possible combinations of songs and calculate the differences to find the minimal possible difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert\n    'minimal possible difference': means finding the smallest difference between the total durations of the two concerts\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The optimal distribution could be 1 song in each concert, making the difference 0.\n    search([2, 2, 2]) = 0\n    explanation: The optimal distribution could be 2 songs in each concert, making the difference 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The optimal distribution is always possible with the given constraints.\n\nPlease provide the specific requirement and coding plan for the next prompt.\n", "requirement analysis:\nThe problem requires a method to distribute songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to find the best distribution that balances the total duration of the two concerts. The solution should be efficient and handle large inputs within reasonable time limits.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations.\n- Ensure the solution can handle up to 1000 test cases efficiently.\n- Optimize the algorithm for performance to handle large input sizes.\n- Provide clear and concise output for each test case.\n- Ensure the solution is user-friendly and easy to understand.\nTo solve this problem efficiently, we will use a dynamic programming approach to find the optimal distribution of songs into two concerts. The goal is to minimize the absolute difference in the durations of the two concerts. We will iterate through all possible combinations of songs and calculate the duration of each combination to find the minimal possible difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert\n    'minimal possible difference': means finding the smallest possible difference in the total duration of the two concerts\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using a dynamic programming approach to find the optimal distribution. This involves iterating through all possible combinations of songs and calculating the duration of each combination to find the minimal possible difference.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: Luntik has one one-minute, one two-minute, and one three-minute song. The optimal distribution would be to put the one-minute and three-minute songs in one concert and the two-minute song in the other. The difference in durations would be |1+3 - 2| = 2 minutes.\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: Luntik has two one-minute, two two-minute, and two three-minute songs. The optimal distribution would be to put the two one-minute and two three-minute songs in one concert and the two two-minute songs in the other. The difference in durations would be |2+2 - 2*2| = 0 minutes.\n    Edge case 3:\n    Input: a = 10^9, b = 10^9, c = 10^9\n    Explanation: Luntik has a very large number of one-minute, two-minute, and three-minute songs. The optimal distribution would be to put the largest number of songs of the same duration in one concert to balance the durations as much as possible. The difference in durations would be minimized.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The dynamic programming approach inherently handles large inputs efficiently by considering all possible combinations and finding the optimal distribution.\n", "requirement analysis:\nThe problem requires finding the minimal absolute difference between the sum of two groups of songs. This can be approached by trying to balance the distribution of songs between the two concerts. The optimal solution involves calculating the total number of minutes of all songs and then finding the closest possible split that minimizes the difference.\nrequirement pool:\n- Implement a function to calculate the total number of minutes of all songs.\n- Develop a function to find the closest possible split that minimizes the difference between the two concerts.\n- Ensure the solution is efficient and can handle up to 1000 test cases.\n- Provide clear and concise output for each test case.\nTo solve this problem, we will use a simple brute-force approach to iterate through all possible combinations of distributing the songs between the two concerts. This approach will be efficient enough to handle the given constraints. We will calculate the total number of minutes of all songs and then find the closest possible split that minimizes the difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'minimal absolute difference': means finding the smallest possible difference between the two groups of songs.\n    'brute-force approach': means trying all possible combinations to find the optimal solution.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case:\n    1. Calculate the total number of minutes of all songs.\n    2. Iterate through all possible splits of the songs between the two concerts.\n    3. For each split, calculate the difference between the durations of the two concerts.\n    4. Keep track of the smallest difference found.\n    5. Return the smallest difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 3 minutes. The optimal split is 1 and 2 minutes, giving a difference of 0.\n    search([2, 1, 3]) = 1\n    explanation: The total duration is 6 minutes. The optimal split is 3 and 3 minutes, giving a difference of 1.\n    search([5, 5, 5]) = 0\n    explanation: The total duration is 15 minutes. The optimal split is 7 and 8 minutes, giving a difference of 0.\n    search([1, 1, 2]) = 1\n    explanation: The total duration is 4 minutes. The optimal split is 2 and 2 minutes, giving a difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The brute-force approach will naturally handle all cases within the given constraints.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts with minimal absolute difference in duration. The solution should be efficient and handle large inputs. The output should be accurate and easy to understand for each test case.\nrequirement pool:\n- Implement an efficient algorithm to distribute songs into two concerts.\n- Ensure the solution handles large inputs efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for performance.\n- Test the solution with various edge cases.\nWe will use a simple and efficient approach to solve the problem of distributing songs into two concerts with minimal absolute difference in duration. The approach involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concert durations. We will use Python's built-in functions and libraries to ensure the solution is optimized and handles large inputs efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'minimal absolute difference': means the smallest possible difference between the two concert durations.\n    'distribution': means dividing the songs into two groups with equal or nearly equal total duration.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve this problem, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a loop to find the closest possible split that minimizes the difference between the two concert durations.\n    3. Return the minimal possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: The total duration is 3 minutes. We can distribute the songs as [1, 1] and [1], resulting in a difference of 0 minutes.\n    search([2, 1, 3]) = 1\n    Explanation: The total duration is 6 minutes. The best distribution is [2, 1] and [3], resulting in a difference of 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to find the minimal possible difference.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts with minimal absolute difference in duration. The solution should be efficient and handle multiple test cases. The input consists of the number of test cases followed by the number of each type of song. The output should be the minimal possible difference in minutes between the concert durations for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal difference in concert durations.\n- Ensure the solution is optimized for large inputs.\n- Provide clear and concise output for each test case.\n- Handle edge cases and ensure robustness.\n- Compare and contrast with other solutions for similar problems.\nWe will use a simple and efficient approach to solve the problem. The main idea is to distribute the songs into two concerts such that the difference in their durations is minimized. We can use a brute-force approach to try all possible combinations of distributing the songs and find the one with the smallest difference. Given the constraints, we will optimize the brute-force approach by considering the possible ranges for the concert durations based on the total number of minutes available.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'minimal absolute difference': means the smallest possible difference between the two groups of songs.\n    'brute-force approach': means trying all possible combinations to find the optimal solution.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case, we need to:\n    1. Calculate the total number of minutes from all songs.\n    2. Use a brute-force approach to try all possible ways to split the songs into two groups.\n    3. For each split, calculate the difference between the two groups.\n    4. Keep track of the smallest difference found.\n    5. Return the smallest difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 3 minutes. We can split it into 1 and 2 minutes, giving a difference of 0.\n    search([2, 1, 3]) = 1\n    explanation: The total duration is 6 minutes. The best split is 3 and 3 minutes, giving a difference of 1.\n    search([5, 5, 5]) = 0\n    explanation: The total duration is 15 minutes. We can split it into 7 and 8 minutes, giving a difference of 0.\n    search([1, 1, 2]) = 1\n    explanation: The total duration is 4 minutes. The best split is 2 and 2 minutes, giving a difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The brute-force approach will naturally handle cases with small numbers of songs.\n", "requirement analysis:\nThe problem requires finding the optimal way to distribute songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial optimization problem where the goal is to balance the total duration of the songs in each concert. The solution should be efficient and handle large inputs within reasonable time constraints.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs.\n- Ensure the solution is efficient and can handle up to 1000 test cases.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for performance to handle large inputs.\nTo solve this problem efficiently, we will use a dynamic programming approach to find the optimal distribution of songs into two concerts. The idea is to calculate the total possible sums of durations for all songs and then find the closest sum to half of the total duration. This will give us the minimal possible difference in concert durations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing items or amounts into two or more groups, typically for the purpose of organizing or managing them more efficiently.\n    Explanation: In this problem, Luntik needs to distribute his songs into two concerts such that the absolute difference in their durations is minimized. This involves finding an optimal way to group the songs to balance their total durations.\n\n# [phrase showing quantity relationship]\n    'as small as possible': means that the difference between the two concert durations should be as minimal as it can be.\n\n# [degree adverb] \n    'as small as possible': means that the difference should be as minimal as it can be.\n\n# [code logic]\n    To solve this problem, we need to consider the following steps:\n    1. Calculate the total duration of all songs.\n    2. Use a dynamic programming approach to find all possible sums of durations for the songs.\n    3. Find the closest sum to half of the total duration, which will give us the minimal possible difference.\n\n# [edge case] \n    Edge case 1:\n    Input: [1, 1, 1]\n    Explanation: The total duration is 3 minutes. The optimal distribution is to have one song of each duration in each concert, resulting in a difference of 0 minutes.\n    Edge case 2:\n    Input: [2, 1, 3]\n    Explanation: The total duration is 6 minutes. The optimal distribution is to have two one-minute songs and a two-minute song in one concert, and a three-minute song in the other, resulting in a difference of 1 minute.\n    Edge case 3:\n    Input: [5, 5, 5]\n    Explanation: The total duration is 15 minutes. The optimal distribution is to have five one-minute songs, five two-minute songs, and five three-minute songs in each concert, resulting in a difference of 0 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the given logic already provides the optimal solution for the smallest possible inputs. However, for larger inputs, the dynamic programming approach would need to be optimized to handle the large number of possible sums efficiently.\n"], "scores": [], "pass_results": [false, false, true, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 146, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "condense_two2one", "parent_index": 31}
