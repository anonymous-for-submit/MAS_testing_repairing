{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He possesses a selection of a one-minute melodies, b two-minute tunes, and c three-minute pieces. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He possesses a selection of a one-minute melodies, b two-minute tunes, and c three-minute pieces. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has a collection of songs with varying durations: he has a one-minute melodies, b two-minute tunes, and c three-minute pieces. He plans to perform all these songs in two concerts, ensuring each song is included in exactly one concert. The goal is to minimize the absolute difference in the total duration of the two concerts. The duration of a concert is the sum of the durations of all songs in that concert.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has a collection of one-minute melodies (a), two-minute tunes (b), and three-minute pieces (c). He needs to divide these songs into two concerts with the goal of minimizing the absolute difference in their total durations. Determine the smallest possible difference in minutes between the two concerts' durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\nimport math\n\ndef distribute_songs(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Distribute songs into two concerts to minimize the difference in duration.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    closest_even = total_duration // 2\n    min_difference = float('inf')\n\n    # Try to distribute the songs to get the closest even number\n    for i in range(c + 1):\n        for j in range(b + 1):\n            for k in range(a + 1):\n                if k + 2 * j + 3 * i == closest_even:\n                    return 0\n                elif k + 2 * j + 3 * i < closest_even:\n                    min_difference = min(min_difference, abs(total_duration - 2 * (k + j + i)))\n    return min_difference\n\n# Interface\nn = int(input())\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    result = distribute_songs(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in duration between two concerts\n    given the number of one-minute, two-minute, and three-minute songs.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in duration between the two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_difference = total_duration\n\n    # Try all possible distributions of songs between two concerts\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                duration_concert1 = i + 2 * j + 3 * k\n                duration_concert2 = total_duration - duration_concert1\n                difference = abs(duration_concert1 - duration_concert2)\n                min_difference = min(min_difference, difference)\n\n    return min_difference\n\n# Read input from stdin\nn = int(input())\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_difference = float('inf')\n    \n    # Try to distribute the songs as evenly as possible\n    for i in range(3):\n        for j in range(3):\n            if (i * 1 + j * 2) <= total_duration and (total_duration - (i * 1 + j * 2)) % 3 == 0:\n                difference = abs((i * 1 + j * 2) - (total_duration - (i * 1 + j * 2)))\n                min_difference = min(min_difference, difference)\n    \n    return min_difference\n\n# Read input and output the result\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Sort the songs by their durations in non-decreasing order\n    songs = [1] * a + [2] * b + [3] * c\n    songs.sort()\n    \n    # Initialize pointers and variables to store the total durations of the two concerts\n    left, right = 0, len(songs) - 1\n    total_left, total_right = 0, 0\n    \n    # Use a two-pointer technique to distribute the songs between the two concerts\n    while left <= right:\n        if total_left < total_right:\n            total_left += songs[left]\n            left += 1\n        else:\n            total_right += songs[right]\n            right -= 1\n    \n    # Return the absolute difference between the two concert durations\n    return abs(total_left - total_right)\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Sort the songs by their durations in descending order\n    songs = [1] * a + [2] * b + [3] * c\n    songs.sort(reverse=True)\n    \n    # Initialize the total durations of the two concerts\n    total_duration_1 = 0\n    total_duration_2 = 0\n    \n    # Distribute the songs between the two concerts\n    for song in songs:\n        if total_duration_1 < total_duration_2:\n            total_duration_1 += song\n        else:\n            total_duration_2 += song\n    \n    # Calculate the absolute difference between the two concerts' durations\n    return abs(total_duration_1 - total_duration_2)\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Sort the songs by their durations\n    songs = [1] * a + [2] * b + [3] * c\n    songs.sort()\n    \n    # Initialize pointers and sums for the two concerts\n    left, right = 0, len(songs) - 1\n    sum_left, sum_right = 0, 0\n    \n    # Use a two-pointer technique to distribute the songs between the two concerts\n    while left <= right:\n        if sum_left < sum_right:\n            sum_left += songs[left]\n            left += 1\n        else:\n            sum_right += songs[right]\n            right -= 1\n    \n    # Return the absolute difference between the two concert sums\n    return abs(sum_left - sum_right)\n\n# Read input and output results\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a, b, c):\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible distributions of songs between two concerts\n    for i in range(4):\n        for j in range(4):\n            # Calculate the total duration of the first concert\n            first_concert_duration = (a - i) + 2 * (b - (i + j) // 2) + 3 * ((c - (i + j) // 3))\n            # Calculate the total duration of the second concert\n            second_concert_duration = total_duration - first_concert_duration\n            # Calculate the absolute difference between the two concerts' durations\n            diff = abs(first_concert_duration - second_concert_duration)\n            # Update the minimum difference if the current difference is smaller\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a, b, c):\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing the songs\n    for i in range(4):\n        for j in range(4):\n            # Calculate the duration of the first concert\n            first_concert_duration = (a + b + c) - (i * 1 + j * 2)\n            # Calculate the duration of the second concert\n            second_concert_duration = total_duration - first_concert_duration\n            # Update the minimal difference\n            min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the durations of two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n        \n    Returns:\n        int: The minimal possible difference in minutes between the durations of two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n    \n    # The optimal split is to have one concert with total duration close to total_duration / 2\n    # However, since we can't have a fraction of a song, we need to check around this value\n    for i in range(total_duration + 1):\n        duration1 = i\n        duration2 = total_duration - i\n        diff = abs(duration1 - duration2)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read input from stdin\nt = int(sys.stdin.readline().strip())\nfor _ in range(t):\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n\n    # Try all possible distributions of songs\n    for i in range(3):\n        for j in range(3):\n            first_concert_duration = (a // 2) * 2 + (b // 2) * 2 + (c // 2) * 3 + (i % 2) * 2 + (i // 2) * 3 + (j % 2) * 1 + (j // 2) * 2\n            second_concert_duration = total_duration - first_concert_duration\n            diff = abs(first_concert_duration - second_concert_duration)\n            min_diff = min(min_diff, diff)\n\n    return min_diff\n\n# Read the number of test cases from stdin\nt = int(sys.stdin.readline().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves distributing the songs in such a way that the total duration of the two concerts is as balanced as possible. This can be achieved by trying to match the total duration of one concert to half of the total duration of all songs.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to distribute songs into two concerts to minimize the difference in duration.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to handle large input sizes within reasonable time limits.\nTo solve this problem, we will use a simple Python function that calculates the total duration of all songs and then tries to distribute them into two concerts to minimize the difference in duration. We will use a greedy approach to achieve this balance.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the total number of songs into two groups (concerts) such that the sum of the durations of songs in each group is as balanced as possible.\n    Explanation: The goal is to minimize the absolute difference in the total duration of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means that we need to find the minimal possible difference in the durations of the two concerts.\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts, trying to balance the total duration of each concert as much as possible.\n    3. Calculate the difference between the two concert durations and return the minimal possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: The total duration is 3, and we can distribute the songs evenly into two concerts, each with a duration of 1.5. The difference is |1.5 - 1.5| = 0.\n    search([1, 2, 3]) = 1\n    Explanation: The total duration is 6. One optimal distribution is to put one 1-minute and two 2-minute songs in one concert, and the 3-minute song in the other concert. The durations are 3 and 3, and the difference is |3 - 3| = 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach will naturally handle cases where the total number of songs is small. For larger numbers, the greedy approach will still provide a good approximation of the minimal difference.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves distributing the songs in such a way that the total duration of the two concerts is as balanced as possible. This can be achieved by first calculating the total duration of all songs and then finding the closest possible split that minimizes the difference.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a strategy to distribute songs between two concerts to minimize the difference in duration.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to handle large input sizes within reasonable time constraints.\nTo solve this problem, we will use a simple approach that involves calculating the total duration of all songs and then distributing them between two concerts to minimize the difference in duration. We will first calculate the total number of songs and their total duration. Then, we will use a greedy approach to distribute the songs, prioritizing the longer songs to balance the durations of the two concerts as much as possible.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of dividing items or amounts into two groups or parts to optimize a specific parameter, in this case, minimizing the difference in duration between two concerts.\n    Explanation: The problem requires distributing songs of different durations into two concerts such that the total duration of songs in each concert is as balanced as possible. This involves a strategy to allocate songs to concerts to minimize the absolute difference in their total durations.\n\n# [phrase showing quantity relationship]\n    'as small as possible': Indicates that the goal is to achieve the smallest possible difference in duration between the two concerts.\n\n# [degree adverb] \n    'as much as': Refers to the minimum number of times a song's duration must appear in each concert to balance the durations.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts, prioritizing the allocation of longer songs first to balance the durations.\n    3. Calculate the difference in duration between the two concerts.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Edge Case 1:\n    Input: [1, 1, 1]\n    Explanation: The total duration is 3, which can be evenly distributed between two concerts (1 and 2 minutes each). The difference is 0.\n    Edge Case 2:\n    Input: [2, 1, 3]\n    Explanation: The total duration is 6. One optimal distribution is to have a concert with 2+3=5 minutes and another with 1+1+1=3 minutes. The difference is |5-3|=2.\n    Edge Case 3:\n    Input: [5, 5, 5]\n    Explanation: The total duration is 15. One optimal distribution is to have two concerts with 7 and 8 minutes each. The difference is |7-8|=1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the greedy approach described above will naturally handle cases where the total duration can be evenly distributed. However, for more complex cases, additional logic might be needed to handle specific scenarios where exact balancing is not possible with integer counts of songs.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves distributing the songs in such a way that the total duration of the two concerts is as balanced as possible. This can be achieved by trying to match the total duration of one concert to half of the total duration of all songs.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to distribute the songs into two concerts to minimize the difference in duration.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to handle large inputs within reasonable time limits.\nTo solve this problem, we will use a simple approach that involves calculating the total duration of all songs and then trying to distribute them into two concerts such that the difference in their durations is minimized. This can be achieved by balancing the distribution of one-minute, two-minute, and three-minute songs as evenly as possible between the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the total number of songs into two groups with as equal duration as possible.\n    Explanation: The goal is to split the songs into two concerts with the smallest possible difference in their total durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference in duration between the two concerts.\n\n# [code logic]\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Determine the optimal way to distribute the songs to minimize the difference in duration between the two concerts.\n    3. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: The total duration is 3, and we can distribute the songs evenly by putting one song of each duration in each concert. The difference will be 0.\n    search([1, 2, 3]) = 1\n    Explanation: The total duration is 6. One optimal distribution is to put one two-minute song and one three-minute song in one concert, and the rest in the other. The difference will be |3-5| = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to solve the problem for any given input.\n", "requirement analysis:\nThe primary requirement is to minimize the absolute difference in the total duration of the two concerts. This involves distributing the songs as evenly as possible between the two concerts. The solution should be efficient and capable of handling up to 1000 test cases, each with up to 10^9 songs of each type.\nrequirement pool:\n- Implement an algorithm to distribute songs evenly between two concerts\n- Ensure the solution can handle up to 1000 test cases\n- Provide a clear and concise output for each test case\n- Optimize the algorithm for large inputs\n- Include error handling for invalid inputs\nTo solve the problem of minimizing the absolute difference in concert durations, we will use a greedy algorithm. The approach involves sorting the songs by their durations and then distributing them between two concerts as evenly as possible. This ensures that the total duration of the two concerts is as balanced as possible. We will use Python for the implementation due to its efficiency and ease of use with large integers.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'Minimize the absolute difference': The goal is to balance the total duration of the two concerts as much as possible.\n    Explanation: This means we need to distribute the songs in such a way that the sum of the durations of the songs in each concert is as close as possible.\n\n# [phrase showing quantity relationship]\n    'as much as possible': This phrase indicates that we need to find the best distribution that minimizes the difference between the two concert durations.\n\n# [degree adverb] \n    'as close as possible': This adverb emphasizes the need to find the most balanced distribution of song durations between the two concerts.\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Sort the song durations in non-decreasing order.\n    2. Use a two-pointer technique to distribute the songs between the two concerts.\n    3. Calculate the total duration of each concert and then find the absolute difference between them.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal distribution would be to include one 3-minute song in one concert and the other two songs in the other concert. The absolute difference in durations would be |3 - (1+2)| = 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The optimal distribution would be to include two 3-minute songs and one 2-minute song in one concert, and the remaining three songs in the other concert. The absolute difference in durations would be |(3+3+2) - (2+2+2)| = |8 - 6| = 2.\n    Expected output: 2\n\n    Edge case 3:\n    Input: a = 3, b = 0, c = 0\n    Explanation: There are three one-minute songs. The optimal distribution would be to include all three songs in one concert and leave the other concert empty. The absolute difference in durations would be |3 - 0| = 3.\n    Expected output: 3\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic provided in the plan is sufficient to solve the problem. The edge cases provided are simple scenarios that can be directly handled by the given logic.\n", "requirement analysis:\nThe primary requirement is to minimize the absolute difference in the total duration of the two concerts. This involves distributing the songs as evenly as possible between the two concerts. The input consists of multiple test cases, each with a specific number of one-minute, two-minute, and three-minute songs. The output should provide the minimal possible difference in minutes between the concerts' durations for each test case.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs between two concerts to minimize the absolute difference in their total durations.\n- Ensure the function can handle up to 1000 test cases efficiently.\n- Provide clear and concise output for each test case, adhering to the specified format.\nTo solve this problem, we will use a simple approach to distribute the songs between two concerts. The goal is to minimize the absolute difference in the total duration of the two concerts. We will sort the songs by their durations and then distribute them as evenly as possible. This can be achieved by using a greedy approach where we try to balance the total duration of the two concerts by including the longest songs first.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'Minimize the absolute difference': The goal is to distribute songs between two concerts such that the total duration of the two concerts is as close as possible.\n    Explanation: This involves balancing the total duration of the two concerts by including the longest songs first, which helps in minimizing the difference between the two concerts' durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the plan, we need to follow these steps:\n    1. Sort the songs by their durations in descending order.\n    2. Distribute the songs between the two concerts, starting with the longest song, then the second longest, and so on.\n    3. Calculate the total duration of each concert and find the absolute difference between the two.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal way to distribute them is to put one song in each concert, which will result in a difference of 5 minutes (since the total duration is 6 minutes and each concert will have a duration of 3 minutes).\n    Expected output: 5\n\n    Edge case 2:\n    Input: a = 3, b = 2, c = 1\n    Explanation: There are more one-minute songs than two- and three-minute songs. The optimal way to distribute them is to put two one-minute songs and one two-minute song in one concert, and the remaining one-minute song and two three-minute songs in the other concert. This will result in a difference of 1 minute (since the total duration is 10 minutes and each concert will have a duration of 5 minutes).\n    Expected output: 1\n\n    Edge case 3:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The optimal way to distribute them is to put three songs in each concert, which will result in a difference of 0 minutes (since the total duration is 12 minutes and each concert will have a duration of 6 minutes).\n    Expected output: 0\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already considers the distribution of songs to minimize the absolute difference between the two concerts' durations.\n", "requirement analysis:\nThe problem requires a solution that can handle multiple test cases efficiently. The input consists of integers representing the number of songs of different durations, and the output should be the minimal possible difference in the total duration of the two concerts. The solution should be clear and concise, providing the correct output for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal difference in concert durations.\n- Ensure the solution can handle large inputs efficiently.\n- Provide a clear and concise output for each test case.\n- Test the solution with various inputs to ensure it handles edge cases and large inputs correctly.\n- Optimize the algorithm for performance and scalability.\nTo solve the problem of minimizing the absolute difference in concert durations, we will use a simple and efficient approach. The idea is to distribute the songs as evenly as possible between the two concerts. We can achieve this by sorting the songs by their durations and then using a greedy approach to assign songs to the two concerts. This method ensures that we minimize the absolute difference in the total duration of the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'Minimize the absolute difference': The goal is to distribute the songs in such a way that the total duration of the two concerts is as close as possible.\n    Explanation: This involves balancing the total duration of the two concerts by assigning songs to them in a way that reduces the difference between their sums.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Sort the durations of the songs.\n    2. Use a two-pointer technique to distribute the songs between the two concerts.\n    3. Calculate the total duration of each concert and then find the absolute difference between them.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal way to distribute them is to put one song in each concert, which will result in a difference of 2 minutes (since the total duration of all songs is 6 minutes).\n    Expected output: 2\n\n    Edge case 2:\n    Input: a = 3, b = 2, c = 1\n    Explanation: There are more one-minute songs than two-minute or three-minute songs. The optimal way to distribute them is to put two one-minute songs and one two-minute song in one concert, and the remaining one-minute song and two three-minute songs in the other concert. This will result in a difference of 1 minute.\n    Expected output: 1\n\n    Edge case 3:\n    Input: a = 5, b = 5, c = 5\n    Explanation: There are an equal number of songs of each duration. The optimal way to distribute them is to put three songs of each duration in one concert, and the remaining three songs in the other concert. This will result in a difference of 0 minutes.\n    Expected output: 0\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the provided logic already covers them. The distribution of songs is based on sorting and simple arithmetic operations, which are efficient and handle all edge cases implicitly.\n", "requirement analysis:\nThe primary requirement is to calculate the smallest possible difference in song durations between two concerts. This involves a logical approach to distribute the songs as evenly as possible between the two concerts. The solution should be efficient and capable of handling large inputs within reasonable time limits.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs between two concerts.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to minimize the absolute difference in durations.\n- Provide clear and concise output for each test case.\n- Ensure the program is capable of handling large input values.\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs between two concerts. The goal is to minimize the absolute difference in their total durations. We will sort the songs by their durations and then use a two-pointer technique to distribute them as evenly as possible. This approach ensures that we are making the best possible choices at each step, leading to an optimal solution.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'absolute difference': the smallest difference between two values\n    'minimize': find the lowest possible value\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve this problem, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs between two concerts, aiming to minimize the absolute difference in their total durations.\n    3. Sort the songs by their durations.\n    4. Use two pointers to distribute the songs as evenly as possible.\n    5. Calculate the absolute difference between the two concerts' durations.\n    6. Return the smallest possible difference.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal distribution would be to put one 3-minute song in one concert and the other two songs in the other concert. The absolute difference would be |3 - (1+1+1)| = 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The optimal distribution would be to put two 3-minute songs in one concert and the other four songs in the other concert. The absolute difference would be |6 - 6| = 0.\n    Expected output: 0\n\n    Edge case 3:\n    Input: a = 1, b = 2, c = 3\n    Explanation: There are six songs of different durations. The optimal distribution would be to put one 3-minute song and one 2-minute song in one concert, and the remaining three songs in the other concert. The absolute difference would be |(3+2) - (1+2+3)| = |5 - 6| = 1.\n    Expected output: 1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already considers the smallest possible input values and calculates the optimal distribution.\n", "requirement analysis:\nThe primary requirement is to calculate the minimal possible difference in minutes between the durations of two concerts. This involves distributing the songs as evenly as possible between the two concerts. The solution should be efficient enough to handle up to 1000 test cases, each with up to 10^9 songs of each type.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs between two concerts.\n- Ensure the solution can handle large input sizes efficiently.\n- Provide clear and accurate output for each test case.\n- Allow for easy integration and use in concert planning scenarios.\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs between the two concerts. The goal is to minimize the absolute difference in the total durations of the two concerts. We will sort the song durations and then use a two-pointer technique to distribute the songs as evenly as possible. This approach ensures that we can handle large input sizes within reasonable time limits.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'absolute difference': the smallest possible difference in minutes between the two concerts' durations.\n    Explanation: This concept involves finding the minimum difference between the total durations of two groups of songs, ensuring a balanced distribution.\n\n# [phrase showing quantity relationship]\n    'more than': not explicitly mentioned in the requirement.\n\n# [degree adverb] \n    'smallest': indicates the goal is to find the minimum difference.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we need to:\n    1. Sort the song durations.\n    2. Use a two-pointer technique to distribute the songs between the two concerts.\n    3. Calculate the total duration of each concert and then find the absolute difference.\n\n# [edge case] \n    Edge case 1: [1, 1, 1]\n    Expected output: 0\n    Explanation: The total duration is 3, which can be evenly divided into two concerts of 1 and 2 minutes. The difference is 0.\n\n    Edge case 2: [1, 2, 3]\n    Expected output: 1\n    Explanation: The total duration is 6, which can be distributed as 1+2=3 and 3=3, resulting in a difference of |3-3|=0. However, the optimal distribution is 1+3=4 and 2, resulting in a difference of |4-2|=1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach and sorting will naturally handle these cases.\n\n# [extra code for edge case]\n    No extra code is needed for edge cases as the greedy approach and sorting will handle them.\n", "requirement analysis:\nThe problem requires a method to distribute songs into two concerts to minimize the absolute difference in their total durations. This can be approached by calculating the total duration and then finding the closest possible split that minimizes the difference. The solution should be efficient and handle a large number of test cases.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a method to find the optimal split of songs into two concerts to minimize the difference.\n- Ensure the solution is efficient and can handle up to 1000 test cases.\n- Provide clear and concise output for each test case.\nTo solve this problem, we will use a simple dynamic programming approach to find the optimal way to split the songs into two concerts. The idea is to calculate the total duration of all songs and then find the closest possible split that minimizes the difference. This approach will be efficient and can handle up to 1000 test cases.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'absolute difference': the smallest difference between two values\n    'minimize': find the lowest possible value\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve this problem, we need to calculate the total duration of all songs and then find the closest possible split that minimizes the difference. This can be done using a dynamic programming approach.\n\n# [edge case] \n    Edge case 1:\n    Input: [1, 1, 1]\n    Explanation: The total duration is 1+2+3 = 6 minutes. The optimal way to split this into two concerts is to put 3 minutes in one concert and 3 minutes in the other, resulting in a difference of 0.\n    Edge case 2:\n    Input: [1, 2, 3]\n    Explanation: The total duration is 1+4+9 = 14 minutes. The optimal way to split this is to put 7 minutes in one concert and 7 minutes in the other, resulting in a difference of 0.\n    Edge case 3:\n    Input: [10, 20, 30]\n    Explanation: The total duration is 10+40+90 = 140 minutes. The optimal way to split this is to put 70 minutes in one concert and 70 minutes in the other, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic will work for all cases, including the edge cases.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts given a set of songs with different durations. The solution should consider the distribution of songs to achieve the smallest possible difference. The input consists of multiple test cases, each with a specific number of one-minute, two-minute, and three-minute songs. The output should provide the minimal difference for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal difference in concert durations\n- Ensure the solution is efficient and can handle large inputs\n- Provide clear and concise output for each test case\n- Allow for easy expansion to handle additional song durations\nTo solve the problem of distributing songs into two concerts with the smallest possible difference in durations, we can use a greedy approach. The idea is to prioritize the distribution of the longest duration songs first to balance the load between the two concerts. We will calculate the total duration of all songs and then try to split the total duration into two nearly equal parts. This can be efficiently done by iterating through the possible distributions of songs and calculating the differences.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts such that the total duration of songs in each concert is as balanced as possible.\n    Explanation: The goal is to minimize the absolute difference in the sum of durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means that we aim to minimize the difference.\n\n# [code logic]\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs, prioritizing the longest duration songs first.\n    3. Calculate the difference between the two concerts' durations.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 3, and we can distribute one-minute songs to both concerts, resulting in a difference of 0.\n    search([1, 2, 3]) = 1\n    explanation: The total duration is 6. One optimal distribution is to put one one-minute and two-minute songs in one concert and three-minute song in the other, resulting in a difference of |3-3| = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach will naturally handle cases where the total number of songs is small. For larger numbers, the greedy approach will still provide a near-optimal solution.\n"], "scores": [], "pass_results": [false, true, false, false, true, false, false, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 169, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "parent_index": 31}
