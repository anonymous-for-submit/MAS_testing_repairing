{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya has got an interesting flower. Petya is a busy person. Sometimes he forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya has got an interesting flower. Petya is a busy person. Sometimes he forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\nWrite a main() function and use input() function to read input from stdin", " Petya has an interesting flower, but he often forgets to water it. You are given a number of days, n, during which you need to figure out what happened to Petya's flower. The flower grows differently based on whether it is watered or not. If the flower goes two days without being watered, it will die. If it is watered on the i-th day, it grows by 1 centimeter. If it is watered on both the i-th and the (i-1)-th day, it grows by 5 centimeters instead of 1. If it is not watered on the\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\nWrite a main() function and use input() function to read input from stdin", " Petya has got an interesting flower. Petya is a busy person. Sometimes he forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end. The flower grows as follows: If the flower isn't watered for two days in a row, it dies. If the flower is watered in the i-th day, it grows by 1 centimeter. If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\ndef calculate_flower_height(days: int, watering_schedule: list[int]) -> int:\n    \"\"\"\n    Calculate the final height of the flower based on the watering schedule.\n\n    Args:\n        days (int): The number of days.\n        watering_schedule (list[int]): A list indicating whether the flower was watered on each day.\n\n    Returns:\n        int: The final height of the flower after the given days, or -1 if the flower dies.\n    \"\"\"\n    if days == 1:\n        return 1 if watering_schedule[0] == 0 else -1\n\n    height = 1  # The initial height of the flower\n    consecutive_unwatered_days = 0  # Counter for consecutive days not watered\n\n    for i in range(days):\n        if watering_schedule[i] == 1:\n            if consecutive_unwatered_days == 2:\n                height += 1  # Grow 1 cm after being watered after 2 days of no water\n            consecutive_unwatered_days = 0  # Reset the counter after watering\n            height += 1  # Grow 1 cm for being watered\n        else:\n            consecutive_unwatered_days += 1  # Increment the counter for consecutive unwatered days\n            if consecutive_unwatered_days == 2:\n                return -1  # The flower dies if not watered for 2 consecutive days\n\n    return height\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    days = int(input())\n    watering_schedule = list(map(int, input().split()))\n    result = calculate_flower_height(days, watering_schedule)\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_days: List[int]) -> int:\n    if n == 1 and watering_days[0] == 0:\n        return 1\n    \n    flower_height = 1\n    consecutive_unwatering_days = 0\n    \n    for i in range(n):\n        if watering_days[i] == 1:\n            consecutive_unwatering_days = 0\n            flower_height += 1\n            if i > 0 and watering_days[i - 1] == 1:\n                flower_height += 4\n        else:\n            consecutive_unwatering_days += 1\n            if consecutive_unwatering_days >= 2:\n                return -1\n    \n    return flower_height\n\n# Interface\nn = int(input())\nwatering_days = list(map(int, input().split()))\nresult = calculate_flower_height(n, watering_days)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_days: List[int]) -> int:\n    if n == 1 and watering_days[0] == 0:\n        return 1\n    if n == 2 and watering_days[0] == 0 and watering_days[1] == 0:\n        return 1\n    if n == 2 and watering_days[0] == 1 and watering_days[1] == 0:\n        return 2\n    \n    flower_height = 1\n    watered_yesterday = False\n    \n    for i in range(n):\n        if watering_days[i] == 1:\n            if watered_yesterday:\n                flower_height += 5\n            else:\n                flower_height += 1\n            watered_yesterday = True\n        else:\n            watered_yesterday = False\n    \n    return flower_height\n\n# Interface\nn = int(input())\nwatering_days = list(map(int, input().split()))\nresult = calculate_flower_height(n, watering_days)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int) -> int:\n    if n < 3:\n        return -1  # Flower cannot survive for less than 3 days without watering\n    \n    height = 0\n    last_watered = -2  # Initialize last watered day to -2 to handle the first watering correctly\n    \n    for day in range(1, n + 1):\n        if day - last_watered == 1:\n            height += 5  # Water on both the i-th and the (i-1)-th day\n        else:\n            height += 1  # Water on the i-th day\n        \n        last_watered = day  # Update the last watered day\n    \n    return height if n >= 3 else -1\n\n# Provide the Interface\nn = int(input())\nresult = calculate_flower_height(n)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int) -> int:\n    if n == 1:\n        return -1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 5\n    \n    # For n > 3, we need to simulate the growth based on the watering schedule\n    height = 0\n    watered_days = []  # Track the days the flower was watered\n    \n    for i in range(n):\n        if i > 0 and i in watered_days and i-1 in watered_days:\n            # If the flower was watered on the previous day, it grows 5 cm today\n            height += 5\n        else:\n            # Otherwise, it grows 1 cm\n            height += 1\n        \n        # Track the days the flower was watered\n        watered_days.append(i)\n\n    # Check if the flower has died\n    for i in range(n-2):\n        if not (i in watered_days or (i+1) in watered_days or (i+2) in watered_days):\n            return -1\n       \n    return height\n\n# Provide the Interface\nn = int(input())\nresult = calculate_flower_height(n)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_growth(days: int, watering_schedule: list[int]) -> float:\n    \"\"\"\n    Calculate the final growth of the flower based on the given days and watering schedule.\n\n    Args:\n        days (int): The total number of days.\n        watering_schedule (list[int]): A list of days on which the flower is watered.\n\n    Returns:\n        float: The final growth of the flower in centimeters.\n    \"\"\"\n    growth = 0\n    consecutive_unwatered_days = 0\n\n    for i in range(1, days + 1):\n        if i in watering_schedule:\n            if i > 1 and i - 1 in watering_schedule:\n                growth += 5\n            else:\n                growth += 1\n            consecutive_unwatered_days = 0\n        else:\n            consecutive_unwatered_days += 1\n            if consecutive_unwatered_days == 2:\n                return 0  # Flower dies\n\n    return growth\n", "from typing import List\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_schedule: List[int]) -> int:\n    \"\"\"\n    Calculates the height of the flower based on the watering schedule.\n    \n    Args:\n        n (int): The number of days.\n        watering_schedule (List[int]): A list of integers where 1 indicates the flower is watered on that day, and 0 indicates it is not.\n    \n    Returns:\n        int: The height of the flower after n days, or -1 if the flower dies.\n    \"\"\"\n    if '000' in ''.join(map(str, watering_schedule)):\n        return -1\n    \n    height = 0\n    for watered in watering_schedule:\n        if watered == 1:\n            height += 1\n    \n    return height\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Skip the line with the number of flowers, not needed\n    _ = input()\n    watering_schedule = list(map(int, input().split()))\n    result = calculate_flower_height(len(watering_schedule), watering_schedule)\n    print(result)\n", "from typing import List\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_schedule: List[int]) -> int:\n    height = 0\n    consecutive_watering = False\n\n    for day in watering_schedule:\n        if day == 1:\n            height += 1\n            if consecutive_watering:\n                height += 1\n            consecutive_watering = True\n        else:\n            consecutive_watering = False\n\n    return height if height >= 1 else -1\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Skip the number of days input as it's not needed for the calculation\n    _ = input()\n    watering_schedule = list(map(int, input().split()))\n    result = calculate_flower_height(len(watering_schedule), watering_schedule)\n    print(result)\n", "from typing import List\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_schedule: List[int]) -> int:\n    height = 0\n    dead = False\n    \n    for i in range(n):\n        if i > 0 and watering_schedule[i] == 0 and watering_schedule[i - 1] == 0:\n            dead = True\n            break\n        elif watering_schedule[i] == 1:\n            height += 1 if i == 0 or watering_schedule[i - 1] == 0 else 5\n    \n    return -1 if dead else height\n\n# Read input\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = calculate_flower_height(n, watering_schedule)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_pattern: list[int]) -> int:\n    # Initialize the flower's height to 1 centimeter\n    height = 1\n    # Initialize the previous watering status to 0\n    previous_watering = 0\n    \n    # Check if the flower is not watered for two consecutive days at the start\n    if all(watering == 0 for watering in watering_pattern):\n        return -1\n    \n    # Iterate through each day\n    for day in range(n):\n        # Check if the flower is dead\n        if height == -1:\n            break\n        \n        # Update the watering status\n        current_watering = watering_pattern[day]\n        \n        # If the flower is not watered for two days in a row, set the height to -1\n        if current_watering == 0 and previous_watering == 0:\n            height = -1\n            break\n        \n        # Update the height based on whether the flower was watered on consecutive days or not\n        if current_watering == 1:\n            if previous_watering == 1:\n                height += 5\n            else:\n                height += 1\n        \n        # Update the previous watering status\n        previous_watering = current_watering\n    \n    return height\n\n# Provide the Interface\nn = int(input())\nwatering_pattern = list(map(int, input().split()))\nresult = calculate_flower_height(n, watering_pattern)\nprint(result)\n"], "plans": ["requirement analysis:\nThe requirements specify a simple simulation of a plant's growth based on watering days. The plant can grow 1 cm per day if watered, 5 cm if watered on consecutive days, and does not grow if not watered. The plant starts at 1 cm and dies if not watered for two consecutive days. The output is the height of the plant after n days or -1 if it has died.\nrequirement pool:\n- The main code should read the number of test cases and for each test case, read the number of days and the watering schedule.\n- The code should simulate the plant's growth based on the watering schedule and output the final height or -1 if the plant has died.\n- Ensure the code is efficient and can handle up to 100 test cases with up to 100 days each.\n- Implement a clear and user-friendly output format for the results.\nWe will use a simple Python script to simulate the growth of the plant based on the watering schedule. The script will read the number of test cases and for each test case, it will read the number of days and the watering schedule. It will then simulate the plant's growth for each day and determine the final height or if the plant has died.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'watering schedule': The sequence of days when the flower is watered or not.\n    Explanation: The flower's growth depends on whether it is watered on consecutive days or not. If watered on two consecutive days, it grows 5 cm; if watered on one day, it grows 1 cm; if not watered, it does not grow.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates a comparison where one quantity is greater than another.\n    'at least as many times': Indicates a comparison where one quantity is greater than or equal to another.\n\n# [degree adverb] \n    'largest': Indicates the maximum value that meets a certain condition.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan involves simulating the growth of the flower for each day based on the watering schedule. We need to keep track of the number of consecutive days the flower was not watered and determine its growth accordingly.\n\n# [edge case] \n    Edge case 1: n = 1, watering schedule = [0]\n    Expected output: 1\n    Explanation: The flower is not watered on the only day, so it does not grow and remains at 1 cm.\n\n    Edge case 2: n = 2, watering schedule = [1, 0]\n    Expected output: 1\n    Explanation: The flower is watered on the first day but not on the second, so it grows 1 cm.\n\n    Edge case 3: n = 3, watering schedule = [1, 1, 0]\n    Expected output: -1\n    Explanation: The flower is watered on the first and second days but not on the third, so it does not grow for two days in a row and dies.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle these cases directly.\n", "requirement analysis:\nThe requirements specify a simple program to calculate the growth of a flower based on watering days. The program needs to handle multiple test cases and output the final height of the flower or -1 if it dies. The input is straightforward, and the output should be clear and concise.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should correctly calculate the flower's height based on the given rules.\n- The output should indicate -1 if the flower dies.\n- The program should be able to handle up to 100 days of watering data.\nWe will use a straightforward approach to solve the problem. The program will iterate through each day, checking the watering status and applying the growth rules accordingly. We will use a simple list to keep track of the flower's growth.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'watering status': The flower's growth depends on whether it is watered or not on each day.\n    'growth rules': The flower grows 1 centimeter if watered on the same day, 5 centimeters if watered on consecutive days, and does not grow if not watered.\n    'initial height': The flower starts at 1 centimeter tall.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Iterate through each day, check the watering status, and update the flower's height accordingly. If the flower is not watered for two consecutive days, it dies.\n\n# [edge case] \n    n = 1, watering status = [0]\n    Explanation: The flower does not grow because it is not watered on the only day. The expected output is 1.\n    n = 2, watering status = [1, 0]\n    Explanation: The flower grows 1 centimeter on the first day and does not grow on the second day because it is not watered. The expected output is 2.\n    n = 2, watering status = [0, 0]\n    Explanation: The flower does not grow on either day because it is not watered on both days. The expected output is 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the flower dies.\n        if not watered_days < 2:\n            return -1\n        (other code)\n", "requirement analysis:\nThe requirements specify a simple program to calculate the growth of a flower based on watering days. The program needs to handle multiple test cases and output the final height of the flower or -1 if it dies. The input is straightforward, and the output should be clear and concise.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should correctly calculate the flower's height based on the given rules.\n- The output should indicate -1 if the flower dies.\n- The program should be able to handle up to 100 days of watering data.\nWe will use a straightforward approach to solve the problem. The program will iterate through each day, checking the watering status and applying the growth rules accordingly. We will use a simple list to keep track of the flower's growth.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'watering status': The flower's growth depends on whether it is watered or not on each day.\n    'growth rules': The flower grows 1 centimeter if watered on the same day, 5 centimeters if watered on consecutive days, and does not grow if not watered.\n    'initial height': The flower starts at 1 centimeter tall.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Iterate through each day, check the watering status, and update the flower's height accordingly. If the flower is not watered for two consecutive days, it dies.\n\n# [edge case] \n    n = 1, watering = [0]\n    Explanation: The flower does not grow because it is not watered on the only day. The expected output is 1.\n    n = 2, watering = [0, 0]\n    Explanation: The flower does not grow on both days because it is not watered. The expected output is 1.\n    n = 2, watering = [1, 0]\n    Explanation: The flower grows 1 centimeter on the first day and does not grow on the second day because it is not watered. The expected output is 2.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the flower dies.\n        if n == 1 and watering[0] == 0:\n            return 1\n        if n == 2 and watering[0] == 0 and watering[1] == 0:\n            return 1\n        if n == 2 and watering[0] == 1 and watering[1] == 0:\n            return 2\n        (other code)\n", "requirement analysis:\nThe requirement involves simulating the growth of a flower based on watering days. The flower either grows 1 cm or 5 cm per day depending on the watering schedule. If it goes two days without being watered, it dies. The output should indicate the final height of the flower or -1 if it dies.\nrequirement pool:\n- The main code should read input for multiple test cases\n- The code should calculate the height of the flower based on the watering schedule\n- The code should output the final height or -1 if the flower dies\nWe will use Python to simulate the growth of a flower based on the watering schedule. The flower either grows 1 cm or 5 cm per day depending on the watering schedule. If it goes two days without being watered, it dies. The output will indicate the final height of the flower or -1 if it dies.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'watering schedule': This refers to the pattern of when Petya waters his flower, which affects its growth.\n    Explanation: The flower's growth depends on whether it is watered on consecutive days or not. If watered on both the i-th and the (i-1)-th day, it grows 5 cm; otherwise, it grows 1 cm. If it goes two days without being watered, it dies.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code, we need to simulate the growth of the flower based on the watering schedule. We will iterate through each day, checking if the flower was watered on that day and the previous day. If the flower goes two days without being watered, we will set a flag to indicate it has died.\n\n# [edge case] \n    simulate_flower_growth(3) = -1\n    Explanation: If the flower is not watered on the first day and is not watered on the second day (the day after the first), it will die. The flower does not have enough waterings to grow and will not survive for 3 days.\n    simulate_flower_growth(5) = 5\n    Explanation: The flower is watered on the 1st, 3rd, and 5th days. It grows 1 cm on the 1st and 3rd days, and 5 cm on the 5th day (since it was watered on both the 4th and 5th days). The final height is 5 cm.\n    simulate_flower_growth(7) = 6\n    Explanation: The flower is watered on the 1st, 3rd, 5th, and 7th days. It grows 1 cm on the 1st, 3rd, and 5th days, and 5 cm on the 7th day (since it was watered on both the 6th and 7th days). The final height is 6 cm.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the flower does not have enough waterings to avoid death.\n    def simulate_flower_growth(n):\n        if n < 3:\n            return -1  # Flower cannot survive for less than 3 days without watering\n        height = 0\n        for day in range(1, n + 1):\n            if day % 2 == 1:\n                height += 1  # Water on odd days\n            elif day % 2 == 0 and day > 1:\n                height += 5  # Water on even days if previous day was watered\n        return height if n >= 3 else -1\n", "requirement analysis:\nThe requirement involves simulating the growth of a flower based on watering days. The flower either grows 1 cm or 5 cm each day depending on the watering schedule. If it goes two days without being watered, it dies. The output should indicate the final height of the flower or -1 if it dies.\nrequirement pool:\n- The main code should read input for multiple test cases\n- The code should calculate the flower's height based on the watering schedule\n- The code should output the final height or -1 if the flower dies\nWe will use Python to simulate the growth of a flower based on the watering schedule. The flower either grows 1 cm or 5 cm each day depending on the watering schedule. If it goes two days without being watered, it dies. The output will indicate the final height of the flower or -1 if it dies.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'watering schedule': This refers to the pattern of when Petya waters his flower, which affects its growth.\n    Explanation: The flower's growth depends on whether it is watered on consecutive days or not. If watered on both the i-th and the (i-1)-th day, it grows 5 cm; otherwise, it grows 1 cm. If it goes two days without being watered, it dies.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code, we need to simulate the growth of the flower based on the watering schedule. We will iterate through each day, checking if the flower was watered on that day and the previous day. If the flower goes two days without being watered, we will set a flag to indicate it has died.\n\n# [edge case] \n    n = 1 (one day)\n    expected output: -1\n    Explanation: If there is only one day and the flower is not watered, it will die.\n\n    n = 2\n    expected output: 1\n    Explanation: If the flower is watered on the first day and not watered on the second day, it will grow 1 cm.\n\n    n = 3\n    expected output: 5\n    Explanation: If the flower is watered on the first and third day, and not watered on the second day, it will grow 5 cm (1 cm on the first day + 5 cm on the third day).\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where n = 1.\n        if n == 1:\n            return -1\n        (other code)\n\n    For the edge case where n = 2, we can directly return 1 since the flower will grow 1 cm if watered on the first day and not watered on the second day.\n\n    For the edge case where n = 3, we can directly return 5 since the flower will grow 5 cm if watered on the first and third day, and not watered on the second day.\n", "requirement analysis:\nThe requirements specify a simple program to calculate the growth of Petya's flower based on his watering schedule. The program should be able to handle multiple test cases and provide clear output for each case. The user interface should be straightforward, allowing users to input their data and receive results without confusion.\nrequirement pool:\n- The main code should accurately calculate the flower's growth based on the given days and watering schedule.\n- The program should handle multiple test cases efficiently.\n- The user interface should be intuitive and easy to use.\nWe will use Python for the implementation as it is versatile and has powerful libraries for data manipulation and user interfaces. The main challenge is to accurately calculate the flower's growth based on the given days and watering schedule. We will use a simple and intuitive console interface for user interaction.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'flower growth': The core concept revolves around understanding the conditions under which a flower grows and how it dies based on watering schedules.\n    Explanation: The flower grows by 1 centimeter each day if it is watered on that day, but if it is watered on both the current and the previous day, it grows by 5 centimeters instead. If the flower goes two days without being watered, it will die.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates a comparison where one quantity is greater than another.\n    Explanation: In this context, 'more than' is used to compare the number of days the flower is watered to determine if it grows by 5 centimeters or just 1 centimeter.\n\n# [degree adverb] \n    'largest': Indicates the maximum or greatest value in a given context.\n    Explanation: In the requirement, 'largest' refers to finding the maximum number of days the flower was watered to determine the final growth.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the logic, we need to:\n    1. Track the days the flower is watered.\n    2. Calculate the growth based on the watering schedule.\n    3. Check if the flower has gone two days without being watered and determine if it has died.\n    4. Return the final growth of the flower.\n\n# [edge case] \n    Edge case 1: Flower dies because it is not watered for two days.\n    Edge case 2: Flower grows by 5 centimeters due to watering on both the current and the previous day.\n    Edge case 3: Flower grows by 1 centimeter as it is only watered on the current day.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    To handle the edge case where the flower dies because it is not watered for two days, we can add a condition to check if the flower has not been watered for two consecutive days and set the growth to 0 or a dead state.\n\n    def flower_growth(n, watering_days):\n        growth = 0\n        consecutive_unwatered_days = 0\n\n        for i in range(1, n + 1):\n            if i in watering_days:\n                if i > 1 and i - 1 in watering_days:\n                    growth += 5\n                else:\n                    growth += 1\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    return 0  # Flower dies\n\n        return growth\n", "requirement analysis:\nThe requirement involves simulating the growth of a flower over a given number of days based on whether it is watered or not. The flower's growth depends on consecutive watering days, with special growth increments for consecutive watering. The output is the final height of the flower or -1 if it dies due to lack of watering.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should correctly calculate the flower's height based on the given watering schedule.\n- The user interface should be simple and intuitive for users to input the data.\n- The application should provide clear feedback on the final height of the flower or if it has died.\n- The system should be able to handle up to 100 test cases efficiently.\nWe will use Python to simulate the growth of a flower based on the given watering schedule. The program will handle multiple test cases efficiently and provide clear feedback on the final height of the flower or if it has died.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'watering schedule': This refers to the sequence of days where the flower is watered or not watered, which determines its growth.\n    Explanation: The watering schedule is crucial as it directly affects the flower's growth. If a flower is watered on a particular day, it contributes to its growth; otherwise, it does not.\n\n# [phrase showing quantity relationship]\n    'more than': This phrase indicates that a value must be exceeded.\n    Explanation: In the context of the flower's growth, if the flower is not watered for three consecutive days, it will die. This means we need to check for such scenarios.\n\n# [degree adverb] \n    'consecutive': This adverb indicates that the days without watering must be in a row without any watering in between.\n    Explanation: Consecutive days of no watering can lead to the flower dying, so we need to ensure we check for such sequences.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the logic, we need to:\n    1. Read the number of test cases.\n    2. For each test case, read the number of days and the watering schedule.\n    3. Simulate the growth of the flower day by day, checking for consecutive days without watering that would cause the flower to die.\n    4. Output the final height of the flower or -1 if it dies.\n\n# [edge case] \n    Edge case 1: Test case with only one day and the flower is not watered.\n    Expected output: -1\n    Explanation: If the flower is not watered on its only day, it will die.\n\n    Edge case 2: Test case with multiple days, all days are watered.\n    Expected output: n (where n is the number of days)\n    Explanation: If the flower is watered every day, it will grow to a height equal to the number of days.\n\n    Edge case 3: Test case with multiple days, including three consecutive days without watering.\n    Expected output: -1\n    Explanation: If the flower is not watered for three consecutive days, it will die.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    To handle the edge case where the flower dies due to three consecutive days without watering, we can add a condition to check for such sequences and immediately return -1 if found.\n\n    Example code snippet:\n    ```python\n    if '000' in ''.join(map(str, watering_schedule)):\n        return -1\n    ```\n", "requirement analysis:\nThe requirement involves simulating the growth of a flower over a given number of days based on whether it is watered or not. The flower's growth depends on consecutive watering days, with special growth increments for consecutive watering. The output is the final height of the flower or -1 if it dies due to lack of watering.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should correctly calculate the flower's height based on the given watering schedule.\n- The user interface should be simple and intuitive for users to input the data.\n- The application should provide clear feedback on the final height of the flower or if it has died.\n- The system should be able to handle up to 100 test cases efficiently.\nWe will use Python for this task as it provides efficient handling of multiple test cases and simple data manipulation. The main challenge is to correctly calculate the flower's height based on the given watering schedule, considering the special growth increments for consecutive watering days.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'multiple test cases': The requirement involves processing a set of test cases, each with its own number of days and watering schedule.\n    'watering schedule': The sequence of 0s and 1s indicating whether the flower was watered on each day.\n    'growth increments': The flower grows by 1 unit each day it is watered, and it grows an additional unit for each consecutive day it is watered.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates the presence of multiple test cases and the number of days in each case.\n    'consecutive': Refers to the sequence of watering days, where consecutive days of watering contribute to an additional growth increment.\n\n# [degree adverb] \n    'only': Limits the number of test cases to a maximum of 100.\n    'the only': Specifies that the integer n (number of days) is the only integer in the first line of each test case.\n\n# [code logic]\n    For each test case:\n    1. Read the number of days (n) and the watering schedule.\n    2. Initialize a variable to keep track of the flower's height.\n    3. Iterate through the days:\n        - If the flower is watered on the current day, increase the height by 1.\n        - If the flower was watered on the previous day, increase the height by an additional 1 for consecutive watering.\n    4. After processing all days, check if the flower's height is greater than or equal to 1. If so, output the height; otherwise, output -1.\n\n# [edge case] \n    Test case with n=1 and watering schedule [0]:\n    Expected output: -1\n    Explanation: The flower does not receive any water, so it does not grow and eventually dies.\n\n    Test case with n=3 and watering schedule [1, 1, 0]:\n    Expected output: 2\n    Explanation: On day 1 and day 2, the flower is watered, so it grows by 1 unit each day. On day 3, it is not watered, so it does not grow. The final height is 2.\n\n    Test case with n=5 and watering schedule [1, 0, 1, 0, 1]:\n    Expected output: 3\n    Explanation: The flower is watered on days 1, 3, and 5. It grows by 1 unit on each of these days and by 1 additional unit for consecutive watering on days 1 and 3. The final height is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can naturally handle cases where the flower never gets watered or where it is watered on a single day.\n", "requirement analysis:\nThe requirement analysis involves understanding the behavior of the flower based on the watering schedule. The flower grows 1 cm per day if watered on that day, and 5 cm if watered the previous day as well. If not watered for two consecutive days, the flower dies. The task is to determine the final height of the flower or if it has died.\nrequirement pool:\n- Implement the logic to calculate the flower's height based on the watering schedule.\n- Handle the case where the flower dies due to lack of watering.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the code for readability and maintainability.\nWe will implement a Python function that processes the watering schedule for the flower and calculates its final height based on the given rules. The function will iterate through the days, checking the watering schedule to determine the growth of the flower. If the flower is not watered for two consecutive days, it will be marked as dead, and the function will return -1. Otherwise, it will return the final height of the flower.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'watering schedule': the sequence of days on which Petya waters his flower\n    'growth rule': the flower grows by 1 centimeter if watered on a single day, and by 5 centimeters if watered on consecutive days\n    'death condition': the flower dies if not watered for two consecutive days\n\n# [phrase showing quantity relationship]\n    'two consecutive days': means that the flower was not watered on the current day and the previous day\n\n# [degree adverb] \n    'two days in a row': means that the flower was not watered for two consecutive days\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the days, checking the watering schedule:\n    1. Initialize the height of the flower to 0.\n    2. Check if the flower was watered on the current day and the previous day.\n    3. Update the height of the flower based on the watering schedule.\n    4. If the flower was not watered for two consecutive days, set a flag to indicate the flower is dead and break the loop.\n    5. Return the final height of the flower or -1 if the flower is dead.\n\n# [edge case] \n    how_many_times('', 'a') = 0\n    explanation: Since the original string is empty, the substring cannot appear, so the expected output is 0.\n    how_many_times('abc', '') = 4\n    explanation: '' appears four times in the original string. 'abc'.count('')=2\n\n# [extra code for edge case]\n    Extra code are needed to handle the edge case.\n        if not string:\n            return 0\n        elif not substring:\n            return len(string)+1\n        (other code)\n\n# [edge case] \n    search([2,2,3,3,3]) = 3\n    explanation: Both 2 and 3 appears greater than or equal to its value, but 3 is the largest number\n    search([3,3,2,4,4,4]) = -1\n    explanation: number 2 appears one time, number 3 appears two times,number 4 appears three times, none of them appears greater than or equal to its value, so the function return -1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We could set the original return answer to -1 and then find the largest integer that meets the need. \n\n# [edge case]\n    search([4, 1, 2, 2, 3, 1]) == 2\n    explanation: The number 2 appears twice, which is more than its value, and it is the largest number that meets this condition.\n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    explanation: The number 3 appears three times, which is more than its value, and it is the largest number that meets this condition.\n    search([5, 5, 4, 4, 4]) == -1\n    explanation: No number appears more than or equal to its value, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic to find the largest integer that appears at least as many times as itself is already included in the main code.\n", "requirement analysis:\nThe requirements specify a simple simulation of a plant's growth based on watering patterns over a number of days. The plant can either grow 1 cm per day or 5 cm if watered on consecutive days. If not watered for two days, it dies. The output is the final height of the plant or -1 if it dies.\nrequirement pool:\n- The main code should read the number of test cases and the details of each case.\n- The code should simulate the growth of the plant for each case based on the watering pattern.\n- The output should be the final height of the plant or -1 if it dies.\nWe will use a simple Python function to simulate the growth of the plant based on the given watering pattern. The function will iterate through each day, checking the watering status and updating the plant's height accordingly. If the plant is not watered for two consecutive days, it will die, and the function will return -1.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'watering pattern': The sequence of days when the flower is watered determines its growth. If watered on consecutive days, the growth is greater. If not watered for two days, the flower dies.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the growth is greater when watered on consecutive days.\n    'at least as many times': Refers to the condition where the flower grows by 5 centimeters if watered on two consecutive days.\n\n# [degree adverb] \n    'largest': Indicates the maximum growth increment when watered on consecutive days.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Initialize the flower's height to 1 centimeter.\n    - Iterate through each day, checking the watering status.\n    - If the flower is not watered for two days in a row, set the height to -1 (indicating the flower has died).\n    - Update the height based on whether the flower was watered on consecutive days or not.\n    - Return the final height after n days.\n\n# [edge case] \n    n = 1, watering pattern = [0] = -1\n    Explanation: The flower does not get any water on the first day and is not watered for two days in a row, so it dies.\n    n = 2, watering pattern = [1, 0] = -1\n    Explanation: The flower is watered on the first day but not on the second day, resulting in no growth over two days, and it dies.\n    n = 2, watering pattern = [1, 1] = 6\n    Explanation: The flower is watered on both days, growing 5 centimeters on the first day and another 5 centimeters on the second day, totaling 6 centimeters.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the flower is not watered for two consecutive days at the start.\n        if all(watering == 0 for watering in watering_pattern):\n            return -1\n        (other code)\n\nThis code ensures that if the flower is not watered on the first day and is not watered for two consecutive days, it immediately dies.\n"], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": false, "pass": false, "pass_num": 0, "round": 7, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "expand_one2two", "parent_index": 7}
