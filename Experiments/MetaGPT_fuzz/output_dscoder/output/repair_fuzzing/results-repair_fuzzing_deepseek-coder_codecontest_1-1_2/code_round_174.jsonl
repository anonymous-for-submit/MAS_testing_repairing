{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing and has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing and has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing and has a one-minute song, b two-minute songs, and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included in exactly one concert. He wants to make the absolute difference of the durations of the concerts as small as possible. Help Luntik find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has songs of durations one, two, and three minutes, and he wants to distribute them into two concerts with the smallest possible absolute difference in total duration. Find this minimal difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the durations of the two concerts.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_difference = float('inf')\n\n    for i in range(total_duration + 1):\n        first_concert_duration = i\n        second_concert_duration = total_duration - i\n        difference = abs(first_concert_duration - second_concert_duration)\n        min_difference = min(min_difference, difference)\n\n    return min_difference\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    min_difference = float('inf')\n    \n    # Iterate through possible splits for the first concert\n    for i in range(a + b + c + 1):\n        first_concert_duration = i * 1 + ((a + b + c - i) // 2) * 2 + ((a + b + c - i) % 2) * 3\n        second_concert_duration = total_duration - first_concert_duration\n        difference = abs(first_concert_duration - second_concert_duration)\n        min_difference = min(min_difference, difference)\n    \n    return min_difference\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    if total_duration % 2 == 0:\n        return 0\n    else:\n        return 1\n\n# Interface for the program\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Finds the minimal possible difference in minutes between the durations of the two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n    \n    for i in range(total_duration + 1):\n        duration1 = i\n        duration2 = total_duration - i\n        diff = abs(duration1 - duration2)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    total_duration = a * 1 + b * 2 + c * 3\n    min_diff = float('inf')\n\n    # Binary search to find the minimal possible difference\n    left, right = 0, total_duration\n    while left <= right:\n        mid = (left + right) // 2\n        if is_possible(a, b, c, mid):\n            min_diff = min(min_diff, abs(total_duration - 2 * mid))\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return min_diff\n\ndef is_possible(a: int, b: int, c: int, target: int) -> bool:\n    # Check if it's possible to distribute songs such that one concert has exactly `target` duration\n    total_duration = a * 1 + b * 2 + c * 3\n    if target > total_duration or target < 0:\n        return False\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                if i * 1 + j * 2 + k * 3 == target:\n                    return True\n    return False\n\n# Input interface\nn = int(sys.stdin.readline().strip())\nfor _ in range(n):\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n\n# Output interface\nresult = find_minimal_difference(a, b, c)\nprint(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all possible splits and find the minimal difference\n    for i in range(total_duration + 1):\n        # Calculate the duration of the first concert\n        first_concert_duration = i\n        # Calculate the duration of the second concert\n        second_concert_duration = total_duration - i\n        # Update the minimal difference\n        min_diff = min(min_diff, abs(first_concert_duration - second_concert_duration))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    This function calculates the minimal possible difference in total duration between two concerts\n    given the number of one-minute, two-minute, and three-minute songs.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in total duration between the two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_difference = float('inf')\n    \n    # Use a more efficient approach to find the optimal split\n    for i in range(total_duration + 1):\n        duration1 = i\n        duration2 = total_duration - i\n        difference = abs(duration1 - duration2)\n        min_difference = min(min_difference, difference)\n    \n    return min_difference\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    This function calculates the minimal possible difference in total duration between two concerts\n    given the durations of one-minute, two-minute, and three-minute songs.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n        \n    Returns:\n        int: The minimal possible difference in total duration between the two concerts.\n    \"\"\"\n    # List of song durations\n    songs = [a, b, c]\n    \n    # Sort the songs in descending order\n    songs.sort(reverse=True)\n    \n    # Calculate the total duration of all songs\n    total_duration = sum(songs)\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs\n    for i in range(2**3):\n        subset1 = []\n        subset2 = []\n        for j in range(3):\n            if (i & (1 << j)):\n                subset1.append(songs[j])\n            else:\n                subset2.append(songs[j])\n        diff = abs(sum(subset1) - sum(subset2))\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\nimport math\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the durations of two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of two concerts.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing the songs into two concerts\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                for l in range(4):\n                    if (i + j + k + l) == (a + b + c):\n                        # Calculate the total duration of the first concert\n                        first_concert_duration = i + 2 * j + 3 * k\n                        # Calculate the total duration of the second concert\n                        second_concert_duration = total_duration - first_concert_duration\n                        # Calculate the absolute difference between the two concerts\n                        diff = abs(first_concert_duration - second_concert_duration)\n                        # Update the minimal difference if the current one is smaller\n                        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef distribute_songs(a, b, c):\n    \"\"\"\n    Distribute songs into two concerts to minimize the difference in duration.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n\n    # Try all combinations of distributing songs to two concerts\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                concert1_duration = i + 2 * j + 3 * k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n\n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = distribute_songs(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where Luntik's songs are distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the minimal possible difference between the durations of two concerts.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it runs within the given constraints.\nTo solve this problem, we will use a simple approach that involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts. We will iterate through possible splits and calculate the difference for each split to find the minimal possible difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert\n    'minimal possible difference': means finding the smallest absolute difference between the durations of the two concerts\n\n# [phrase showing quantity relationship]\n    'as small as possible': means minimizing the difference\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference\n\n# [code logic]\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Iterate through possible splits for the first concert and calculate the duration of the second concert.\n    3. Calculate the absolute difference for each split and keep track of the minimal difference.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs such that one concert has durations 1+1 = 2 and the other has 1, resulting in a difference of |2-1| = 1.\n    search([2, 2, 2]) = 0\n    explanation: Luntik can distribute the songs such that one concert has durations 2+2+2 = 6 and the other has 2+2 = 4, resulting in a difference of |6-4| = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to find the minimal possible difference.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where Luntik's songs are distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the minimal possible difference between the durations of two concerts.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it runs within the given constraints.\nTo solve this problem, we will use a simple approach that involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts. We will iterate through possible splits and calculate the difference for each split to find the minimal possible difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert to balance the total duration between the two concerts.\n    'minimal difference': means finding the smallest possible absolute difference in durations between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference between the durations of the two concerts.\n\n# [code logic]\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Iterate through possible splits for the first concert and calculate the duration of the second concert.\n    3. Compute the absolute difference for each split and keep track of the minimum difference.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs such that one concert has durations 1+1 = 2 and the other has 1, resulting in a difference of |2-1| = 1. However, the optimal distribution is to have both concerts with a duration of 2, resulting in a difference of 0.\n    search([2, 2, 2]) = 0\n    explanation: Luntik can distribute the songs such that each concert has a duration of 4, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already considers the smallest possible distribution by iterating through possible splits and finding the minimal difference.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where each song must be included in exactly one concert. The solution involves distributing the songs in a way that balances the total duration of the two concerts as evenly as possible. This can be achieved by first calculating the total duration of all songs and then finding the closest possible split to minimize the absolute difference.\nrequirement pool:\n- The main code should read the number of test cases and the details of each test case.\n- The code should calculate the total duration of all songs.\n- The code should distribute the songs into two concerts to minimize the absolute difference in their durations.\n- The code should output the minimal possible difference for each test case.\nTo solve this problem, we will use a simple approach that involves calculating the total duration of all songs and then distributing them into two concerts to minimize the absolute difference in their durations. This can be achieved by first sorting the songs by their durations and then using a greedy approach to distribute them.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups such that each song is included in exactly one group.\n    'minimal difference': means to make the difference between the total durations of the two groups as small as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference.\n\n# [code logic]\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Distribute the songs into two groups to minimize the absolute difference in their durations.\n    3. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs into two concerts with equal durations (1+1+1 = 3 minutes each), resulting in a difference of 0.\n    search([2, 2, 2]) = 0\n    explanation: Luntik can distribute the songs into two concerts with equal durations (2+2+2 = 6 minutes each), resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The given logic already ensures that if the total duration is evenly divisible by 2, the difference will be 0.\n\n# [code logic]\n    Here's the Python code to solve the problem:\n\n    ```python\n    def min_difference(a, b, c):\n        total_duration = a + 2*b + 3*c\n        if total_duration % 2 == 0:\n            return 0\n        else:\n            return 1\n\n    # Example usage:\n    print(min_difference(1, 1, 1))  # Output: 0\n    print(min_difference(2, 1, 3))  # Output: 1\n    print(min_difference(5, 5, 5))  # Output: 0\n    print(min_difference(1, 1, 2))  # Output: 1\n    ```\n\n    This code calculates the total duration of all songs and checks if it's even or odd. If it's even, the difference is 0; if it's odd, the difference is 1.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where each song must be included in exactly one concert. The solution involves distributing the songs in a way that balances the total duration of the two concerts as evenly as possible. This can be achieved by first calculating the total duration of all songs and then finding the closest possible split that minimizes the absolute difference.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the minimal possible difference between the durations of the two concerts.\n- Ensure the solution is efficient enough to handle large inputs within reasonable time limits.\n- Optimize the distribution of songs to concerts to ensure the smallest possible difference in their durations.\nTo solve the problem of distributing songs into two concerts with the smallest possible difference in durations, we can use a greedy approach. First, we calculate the total duration of all songs. Then, we use a binary search to find the closest possible split that minimizes the absolute difference between the two concert durations. This approach ensures efficiency and accuracy.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts such that each song is included in exactly one concert.\n    'smallest possible difference': means minimizing the absolute difference between the durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference as much as we can.\n\n# [code logic]\n    To solve the problem, we need to calculate the total duration of all songs and then find a way to split them into two concerts with the smallest possible difference. This can be achieved by trying to balance the durations as evenly as possible.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs into two concerts with durations 2 and 2, resulting in a difference of 0.\n    search([1, 2, 3]) = 1\n    explanation: Luntik can distribute the songs into two concerts with durations 3 and 5, resulting in a difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic should be sufficient to find the minimal possible difference for any given input.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where songs of different durations are distributed. The solution involves calculating the total duration and then finding the closest possible split that minimizes the difference.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Implement a function to find the minimal possible difference between the two concerts.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to handle large inputs within reasonable time limits.\n- Provide clear and concise output for each test case.\nTo solve the problem of distributing songs into two concerts with minimal difference in durations, we can use a greedy approach. First, calculate the total duration of all songs. Then, use a binary search approach to find the minimal possible difference between the two concerts. This approach ensures that we efficiently find the optimal distribution without explicitly trying all combinations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the total number of songs into two groups such that each song is included in exactly one group.\n    'minimal difference': means to make the absolute difference between the durations of the two groups as small as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the absolute difference between the two groups.\n\n# [code logic]\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a binary search approach to find the minimal possible difference between the two concerts.\n    3. In each iteration of the binary search, check if it's possible to distribute the songs such that the difference is less than or equal to the current mid value.\n    4. If possible, update the result and try to minimize the difference further.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: The total duration is 1*1 + 2*1 + 3*1 = 6. The optimal distribution is to include one one-minute song, one two-minute song, and one three-minute song in each concert. The difference will be 0.\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: The total duration is 2*1 + 2*2 + 2*3 = 12. The optimal distribution is to include two one-minute songs, two two-minute songs, and two three-minute songs in each concert. The difference will be 0.\n    Edge case 3:\n    Input: a = 10, b = 0, c = 0\n    Explanation: The total duration is 10*1 + 0*2 + 0*3 = 10. The optimal distribution is to include all ten one-minute songs in one concert and leave the other concert empty. The difference will be 10.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the provided logic can handle them without any additional complexity. The binary search approach ensures that we efficiently find the optimal distribution for any given input within the constraints.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where songs of different durations are distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the absolute difference between the two concert durations.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a method to find the minimal possible difference between the two concert durations.\n- Ensure the solution works efficiently for large inputs within the given constraints.\n- Optimize the algorithm to handle edge cases and ensure accuracy.\nTo solve the problem of distributing songs into two concerts with minimal difference in durations, we can use a greedy approach. First, calculate the total duration of all songs. Then, use a binary search to find the closest possible split that minimizes the absolute difference between the two concert durations. This approach ensures efficiency and accuracy within the given constraints.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert\n    'minimal difference': means finding the smallest possible difference between the durations of the two concerts\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference\n\n# [code logic]\n    To solve the problem, we need to calculate the total duration of all songs and then find the closest possible split that minimizes the absolute difference between the two concert durations. This can be done using a greedy approach or binary search.\n\n# [edge case] \n    test case 1:\n        input: a = 1, b = 1, c = 1\n        explanation: Luntik can distribute the songs such that one song of each duration is in one concert, and the remaining songs are in the other concert. The minimal possible difference is 0.\n        expected output: 0\n    test case 2:\n        input: a = 2, b = 1, c = 1\n        explanation: Luntik can distribute the songs such that two one-minute songs and one two-minute song are in the first concert, and two three-minute songs are in the second concert. The minimal possible difference is 1.\n        expected output: 1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the provided logic should work for any valid input within the given constraints.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts with the smallest possible absolute difference in total duration. This involves finding an optimal way to allocate songs to minimize the difference. The input consists of multiple test cases, each with a different set of songs. The output should provide the minimal difference for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal difference in concert durations.\n- Ensure the function can handle large inputs efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for optimal song distribution.\n- Include error handling for invalid inputs.\nWe will use a simple and efficient approach to solve the problem of distributing songs into two concerts with the smallest possible absolute difference in total duration. The approach involves calculating the total duration of all songs and then finding the optimal way to split these songs into two concerts to minimize the difference. We will use Python for this implementation due to its simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with the smallest possible difference in total duration.\n    'absolute difference': means the difference without considering which group is larger.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve this problem, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a brute-force approach to try all possible combinations of distributing the songs into two groups.\n    3. For each combination, calculate the absolute difference in total duration between the two groups.\n    4. Keep track of the smallest absolute difference found.\n    5. Return the smallest absolute difference.\n\n# [edge case] \n    Edge case 1:\n    Input: 1 1 1\n    Explanation: The total duration is 1*1 + 2*1 + 3*1 = 6 minutes. The optimal way to split these songs is to put 3 minutes in each concert, resulting in an absolute difference of 0.\n    Edge case 2:\n    Input: 2 1 3\n    Explanation: The total duration is 2*1 + 2*1 + 3*3 = 13 minutes. The optimal way to split these songs is to put 6 and 7 minutes in the two concerts, resulting in an absolute difference of 1.\n    Edge case 3:\n    Input: 5 5 5\n    Explanation: The total duration is 5*1 + 5*2 + 5*3 = 30 minutes. The optimal way to split these songs is to put 15 and 15 minutes in the two concerts, resulting in an absolute difference of 0.\n    Edge case 4:\n    Input: 1 1 2\n    Explanation: The total duration is 1*1 + 2*1 + 3*2 = 9 minutes. The optimal way to split these songs is to put 4 and 5 minutes in the two concerts, resulting in an absolute difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The brute-force approach will naturally handle all cases, including the edge cases, by trying all possible combinations and finding the smallest absolute difference.\n", "requirement analysis:\nThe problem requires finding the minimal absolute difference in total duration between two concerts given the number of one-minute, two-minute, and three-minute songs. The solution should be efficient and handle multiple test cases.\nrequirement pool:\n- Implement a function to calculate the minimal difference in concert durations.\n- Ensure the solution is optimized for large inputs.\n- Provide clear and accurate output for each test case.\n- Handle edge cases and ensure the solution is robust.\n- Compare and optimize the algorithm for performance.\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in total duration between the two concerts. We will sort the songs by their duration and then try to balance the total duration of the two concerts as evenly as possible.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with the smallest possible difference in total duration.\n    'greedy approach': means selecting the largest possible songs for one concert and the smallest for the other to minimize the difference.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case:\n    1. Sort the durations of the songs in descending order.\n    2. Calculate the total duration of all songs.\n    3. Use a greedy approach to distribute the songs into two concerts, trying to balance the total duration as evenly as possible.\n    4. Calculate the absolute difference between the two concerts' total durations.\n    5. Return the minimal possible difference.\n\n# [edge case] \n    search([1, 2, 3]) = 1\n    explanation: The total duration is 6, and the optimal distribution is [3, 3] and [2, 1], with a difference of 1.\n    search([1, 1, 2]) = 0\n    explanation: The total duration is 4, and the optimal distribution is [2, 2] and [1, 1], with a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach inherently handles cases where the total duration is even or odd.\n\n# [code logic]\n    (detailed logic to implement the code)\n    def find_minimal_difference(test_cases):\n        results = []\n        for case in test_cases:\n            a, b, c = case\n            songs = [a, b, c]\n            songs.sort(reverse=True)\n            total_duration = sum(songs)\n            min_diff = float('inf')\n            for i in range(2**3):\n                subset1 = []\n                subset2 = []\n                for j in range(3):\n                    if (i & (1 << j)):\n                        subset1.append(songs[j])\n                    else:\n                        subset2.append(songs[j])\n                diff = abs(sum(subset1) - sum(subset2))\n                min_diff = min(min_diff, diff)\n            results.append(min_diff)\n        return results\n\n    # Example usage:\n    test_cases = [\n        [1, 1, 1],\n        [2, 1, 3],\n        [5, 5, 5],\n        [1, 1, 2]\n    ]\n    print(find_minimal_difference(test_cases))  # Output: [0, 1, 0, 1]\n", "requirement analysis:\nThe problem requires finding the optimal distribution of songs into two concerts to minimize the absolute difference in their total durations. This involves calculating the total duration of all songs and then finding two subsets with the closest possible total duration. The solution should be efficient and handle multiple test cases.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a method to find two subsets with the closest possible total duration.\n- Ensure the solution can handle multiple test cases efficiently.\n- Optimize the algorithm to handle large inputs without performance issues.\n- Provide clear and accurate results for each test case.\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in total duration between the two concerts. We will sort the songs by their duration and then use a two-pointer technique to find the optimal distribution. This approach ensures that we can handle large inputs efficiently without resorting to complex algorithms like dynamic programming.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with the smallest possible difference in total duration.\n    'smallest possible absolute difference': means the difference should be as close to zero as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve this problem, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute the songs into two concerts.\n    3. Sort the songs by their duration.\n    4. Use two pointers to find the optimal distribution.\n    5. Calculate the absolute difference between the two concerts' durations.\n    6. Return the minimal possible difference.\n\n# [edge case] \n    Edge case 1:\n    Input: 1 1 1\n    Explanation: The total duration is 3 minutes. The optimal distribution is to put one song of each duration in each concert, resulting in a difference of 0.\n    Edge case 2:\n    Input: 2 1 3\n    Explanation: The total duration is 6 minutes. The optimal distribution is to put two three-minute songs in one concert and one two-minute and one one-minute song in the other concert, resulting in a difference of 1.\n    Edge case 3:\n    Input: 5 5 5\n    Explanation: The total duration is 15 minutes. The optimal distribution is to put five songs of each duration in each concert, resulting in a difference of 0.\n    Edge case 4:\n    Input: 1 1 2\n    Explanation: The total duration is 4 minutes. The optimal distribution is to put one two-minute song and one one-minute song in one concert and the remaining one-minute song in the other concert, resulting in a difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach and the sorting of songs by duration will naturally handle these cases efficiently.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where Luntik's songs are distributed. The solution involves distributing the songs in a way that balances the total duration of the two concerts as evenly as possible. This can be achieved by first calculating the total duration of all songs and then finding the closest possible split that minimizes the absolute difference.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a strategy to distribute songs between two concerts to minimize the difference in duration.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to handle large inputs within reasonable time limits.\n- Include user input handling to read from standard input and output to standard output.\nTo solve this problem, we will use a simple Python function that calculates the total duration of all songs and then distributes them between two concerts to minimize the difference in duration. The function will read the number of test cases and the details of each test case from standard input, process each case, and print the minimal possible difference in minutes between the concerts durations to standard output.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing items into two groups with minimal difference in total value.\n    Explanation: In this problem, Luntik wants to distribute his songs into two concerts such that the total duration of songs in each concert is as close as possible. This involves balancing the total duration of the two concerts.\n\n# [phrase showing quantity relationship]\n    'as small as possible': means we need to minimize the difference in total duration between the two concerts.\n\n# [degree adverb] \n    'as small as possible': means we need to find the minimal possible difference in duration between the two concerts.\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Distribute the songs into two concerts by trying to balance the total duration of each concert.\n    3. Calculate the absolute difference between the two concert durations.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: In this case, Luntik can distribute the songs such that both concerts have the same duration (1 minute + 1 minute + 1 minute = 3 minutes). The difference is 0.\n    search([2, 2, 2]) = 0\n    Explanation: Similar to the previous case, Luntik can distribute the songs such that both concerts have the same duration (2 minutes + 2 minutes + 2 minutes = 6 minutes). The difference is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where all songs have the same duration.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the total number of songs is odd, as it might not be possible to perfectly balance the durations between the two concerts.\n"], "scores": [], "pass_results": [true, true, true, false, false, true, false, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 174, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "expand_one2two", "parent_index": 170}
