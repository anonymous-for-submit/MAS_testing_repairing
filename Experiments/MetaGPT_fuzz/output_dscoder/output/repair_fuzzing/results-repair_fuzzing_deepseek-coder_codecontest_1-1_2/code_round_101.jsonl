{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song. You should consider all combinations to ensure the best distribution of songs.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song. You should consider all combinations to ensure the best distribution of songs.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing. He has a one-minute song, b two-minute songs, and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included in exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song. You should consider all combinations to ensure the best distribution of songs\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has songs of durations a (one-minute), b (two-minute), and c (three-minute) and wants to distribute them into two concerts with the smallest possible absolute difference in total duration. Determine the minimal possible difference in minutes between the concert durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\nimport sys\nimport math\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    songs = [a, b, c]\n    songs.sort()\n    total_songs = sum(songs)\n    min_diff = float('inf')\n    \n    for i in range(1 << len(songs)):\n        concert1 = 0\n        concert2 = 0\n        for j in range(len(songs)):\n            if (i & (1 << j)):\n                concert1 += songs[j]\n            else:\n                concert2 += songs[j]\n        min_diff = min(min_diff, abs(concert1 - concert2))\n    \n    return min_diff\n\n# Read input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the durations of two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of distributing the songs into two concerts\n    for i in range(4):\n        for j in range(4):\n            # Calculate the total duration for each combination\n            total_duration_1 = i * 1 * a + i * 2 * b + i * 3 * c\n            total_duration_2 = j * 1 * a + j * 2 * b + j * 3 * c\n            \n            # Calculate the absolute difference between the two total durations\n            diff = abs(total_duration_1 - total_duration_2)\n            \n            # Update min_diff if a smaller difference is found\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# For each test case, read the number of one-minute, two-minute, and three-minute songs\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport itertools\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    min_diff = float('inf')\n    songs = [1] * a + [2] * b + [3] * c\n    for comb in itertools.combinations(songs, len(songs) // 2):\n        duration1 = sum(comb)\n        duration2 = sum(songs) - duration1\n        diff = abs(duration1 - duration2)\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\n# Provide the Interface\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Finds the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of distributing the songs\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                # Check if the combination is valid\n                if i + j + k <= a + b + c:\n                    # Calculate the sum of durations for each concert\n                    sum1 = i * 1 + j * 2 + k * 3\n                    sum2 = (a - i) * 1 + (b - j) * 2 + (c - k) * 3\n                    # Calculate the absolute difference\n                    diff = abs(sum1 - sum2)\n                    # Update the minimum difference\n                    min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing the songs into two concerts\n    for i in range(4):  # There are 4 possible ways to distribute the songs (0, 1, 2, or 3 songs in the first concert)\n        for j in range(4):\n            if i + j == 4:  # Ensure both concerts are filled\n                # Calculate the duration of the first concert\n                first_concert_duration = i * 1 + (i + j - i) * 2 + (i + j - i - j) * 3\n                # Calculate the duration of the second concert\n                second_concert_duration = total_duration - first_concert_duration\n                # Calculate the absolute difference between the two concert durations\n                diff = abs(first_concert_duration - second_concert_duration)\n                # Update the minimal difference if the current one is smaller\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    # The target duration for each concert is half of the total duration\n    target_duration = total_duration // 2\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate over all possible combinations of songs in the two concerts\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                # Calculate the duration of the current combination\n                current_duration = i * 1 + j * 2 + k * 3\n                # Calculate the difference between the current duration and the target duration\n                diff = abs(total_duration - 2 * current_duration)\n                # Update the minimum difference if the current difference is smaller\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Input interface\nn = int(input().strip())\nfor _ in range(n):\n    a, b, c = map(int, input().strip().split())\n\n# Output interface\nresult = find_minimal_difference(a, b, c)\nprint(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef calculate_minimal_difference(a, b, c):\n    # Sort the songs by their durations\n    songs = [a, b, c]\n    songs.sort()\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of distributing the songs into two concerts\n    for i in range(1 << 3):  # There are 2^3 = 8 combinations\n        concert1 = []\n        concert2 = []\n        for j in range(3):\n            if i & (1 << j):\n                concert1.append(songs[j])\n            else:\n                concert2.append(songs[j])\n        \n        # Calculate the total duration of both concerts\n        total_duration1 = sum(concert1)\n        total_duration2 = sum(concert2)\n        \n        # Update the minimal difference if the current difference is smaller\n        min_diff = min(min_diff, abs(total_duration1 - total_duration2))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(sys.stdin.readline().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concert durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concert durations.\n    \"\"\"\n    # Sort the songs by their durations in descending order\n    songs = [a, b, c]\n    songs.sort(reverse=True)\n\n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n\n    # Try all combinations of distributing the songs into two concerts\n    for i in range(1 << 3):  # There are 2^3 = 8 combinations\n        concert1 = []\n        concert2 = []\n        for j in range(3):\n            if i & (1 << j):\n                concert1.append(songs[j])\n            else:\n                concert2.append(songs[j])\n\n        # Calculate the total duration of each concert\n        total_duration1 = sum(concert1)\n        total_duration2 = sum(concert2)\n\n        # Calculate the absolute difference between the two concerts\n        diff = abs(total_duration1 - total_duration2)\n\n        # Update the minimal difference if the current one is smaller\n        min_diff = min(min_diff, diff)\n\n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef find_minimal_difference(a, b, c):\n    # Sort the durations of the songs in ascending order\n    durations = sorted([a, b, c])\n    \n    # Distribute the songs into two concerts by assigning the smallest and largest durations to each concert alternatively\n    concert1 = durations[0] + durations[2]\n    concert2 = durations[1]\n    \n    # Calculate the absolute difference between the total durations of the two concerts\n    difference = abs(concert1 - concert2)\n    \n    # Return the minimal possible difference\n    return difference\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # If the total duration is odd, it's impossible to split into two groups with equal total duration\n    if total_duration % 2 != 0:\n        return \"Impossible to distribute\"\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of distributing the songs into two concerts\n    for i in range(1 << 3):  # There are 2^3 = 8 combinations\n        duration1 = 0\n        duration2 = 0\n        for j in range(3):\n            if i & (1 << j):\n                duration1 += (j + 1) * [1, 2, 3][j]\n            else:\n                duration2 += (j + 1) * [1, 2, 3][j]\n        min_diff = min(min_diff, abs(duration1 - duration2))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves considering all possible combinations of distributing the songs into two concerts to find the optimal distribution that minimizes the difference in their durations.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations for each test case\n- Ensure the program can handle up to 1000 test cases\n- Optimize the algorithm to efficiently find the optimal distribution of songs\n- Provide clear and concise output for each test case\n- Include error handling for invalid inputs\nTo solve the problem of distributing songs into two concerts with the minimal possible difference in durations, we will use a brute-force approach to consider all possible combinations of distributing the songs. This approach will ensure that we evaluate all possible ways to split the songs into two concerts and find the one with the smallest difference in durations. We will use Python for this implementation due to its efficiency in handling large numbers and its extensive standard library.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups\n    'minimal possible difference': means to find the smallest difference between the two groups\n    'brute-force approach': means to try all possible combinations to find the best distribution\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to find the smallest difference\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    No edge case provided in the plan\n\n# [extra code for edge case]\n    We do not have edge cases to handle as the plan suggests a brute-force approach.\n\nPlease provide the requirement and plan for the next prompt, and I will generate the detailed analysis based on the given format.\n", "requirement analysis:\nThe problem requires a solution that can handle up to 1000 test cases, each with up to 10^9 songs of different durations. The goal is to distribute these songs into two concerts such that the difference in their total durations is minimized. This involves considering all possible combinations of songs in each concert to find the optimal distribution.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations.\n- Ensure the solution can handle large input values efficiently.\n- Test the solution with multiple test cases to ensure accuracy and robustness.\n- Optimize the algorithm to handle large inputs within a reasonable time frame.\n- Provide clear and concise output for each test case.\nTo solve this problem, we will use a brute-force approach to consider all possible combinations of songs in two concerts. We will calculate the total duration of each combination and then find the minimal possible difference between these durations. Given the constraints, we will optimize the algorithm to handle large inputs efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups such that each song is included in exactly one group.\n    'minimal possible difference': means finding the smallest difference between the total durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference between the two groups' total durations.\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    No edge case provided in the prompt\n\n# [extra code for edge case]\n    We do not have edge cases to handle in this problem as the input constraints are general and do not specify any specific scenarios.\n\n# [code logic]\n    To solve this problem, we need to consider all possible combinations of distributing the songs into two concerts. This can be done by iterating through all possible ways to choose songs for each concert and calculating the total duration for each combination. Then, we find the minimal possible difference between these durations.\n\n    Here's a high-level approach to implement the solution:\n    1. Read the number of test cases.\n    2. For each test case, read the number of one-minute, two-minute, and three-minute songs.\n    3. Consider all combinations of distributing the songs into two concerts.\n    4. Calculate the total duration for each combination.\n    5. Find the minimal possible difference between the two total durations.\n    6. Output the minimal possible difference for each test case.\n\n    This approach ensures that we consider all possible distributions and find the optimal one.\n", "requirement analysis:\nThe problem requires a solution that can handle multiple test cases efficiently, distributing songs between two concerts to minimize the absolute difference in their durations. The input consists of a number of test cases, each with specific counts of one-minute, two-minute, and three-minute songs. The output should provide the minimal possible difference in minutes between the durations of the two concerts.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs between two concerts.\n- Ensure the function can handle large inputs within a reasonable time.\n- Develop a user-friendly interface for inputting song counts.\n- Provide clear and concise output displaying the minimal possible difference.\n- Test the solution against various edge cases to ensure robustness.\nTo solve this problem, we will use a brute-force approach to explore all possible distributions of songs between two concerts. Given the constraints, we will iterate through all combinations of songs to find the one that minimizes the absolute difference in durations. We will use Python's itertools to generate combinations efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert.\n    'minimal possible difference': means finding the smallest absolute difference between the two concert durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference.\n\n# [code logic]\n    To implement the plan, we need to iterate through all possible combinations of distributing the songs between two concerts. We will calculate the sum of durations for each combination and then find the one with the smallest absolute difference.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal distribution would be to put one 3-minute song in one concert and the other two songs in the other concert. The durations would be 3 and 2 (1+1+1), making the absolute difference 1.\n    Expected output: 1\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The optimal distribution would be to put two 3-minute songs and two 2-minute songs in one concert, and the remaining two 1-minute songs in the other concert. The durations would be 7 and 2 (3+3+1), making the absolute difference 5.\n    Expected output: 5\n\n    Edge case 3:\n    Input: a = 3, b = 0, c = 0\n    Explanation: There are three 1-minute songs. The optimal distribution would be to put all three in one concert. The duration would be 3, and the other concert would be 0, making the absolute difference 3.\n    Expected output: 3\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The brute-force approach will naturally handle these cases by considering all possible distributions.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves considering all possible combinations of distributing the songs into two concerts to find the optimal distribution that minimizes the difference in durations.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations for each test case\n- Ensure the program can handle up to 1000 test cases efficiently\n- Optimize the algorithm to consider all possible combinations of distributing the songs\nTo solve the problem of distributing songs into two concerts with the minimal possible difference in durations, we can use a brute-force approach to consider all possible combinations of distributing the songs. This approach will iterate through all possible ways to split the songs into two groups and calculate the difference in durations for each combination. The minimal difference found will be the answer.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups such that each song is included in exactly one group.\n    'minimal difference': means finding the smallest possible difference in the sum of durations between the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means that we need to minimize the difference in durations between the two concerts.\n\n# [code logic]\n    To implement the solution, we need to consider all possible combinations of distributing the songs into two concerts. This can be done by iterating through all possible ways to split the songs into two groups and calculating the difference in durations for each combination. The minimal difference found will be the answer.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal way to distribute them is to put one one-minute song and one two-minute song in one concert, and the three-minute song in the other concert. The difference in durations will be |1+2 - 3| = 0.\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The optimal way to distribute them is to put two one-minute songs and two two-minute songs in one concert, and the remaining two three-minute songs in the other concert. The difference in durations will be |2*1 + 2*2 - 2*3| = |4 - 6| = 2.\n    Edge case 3:\n    Input: a = 3, b = 0, c = 0\n    Explanation: There are three one-minute songs and no other songs. The only way to distribute them is to put all three one-minute songs in one concert and leave the other concert empty. The difference in durations will be |3 - 0| = 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The brute-force approach will naturally handle cases with zero or one type of song by considering all possible combinations.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution involves considering all possible combinations of distributing the songs into two concerts to find the optimal distribution that minimizes the difference in their durations.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations for each test case\n- Ensure the program can handle up to 1000 test cases efficiently\n- Optimize the algorithm to consider all possible combinations of distributing the songs\nTo solve this problem, we will use a brute-force approach to consider all possible combinations of distributing the songs into two concerts. We will calculate the sum of durations for each combination and then find the minimal possible difference between the two sums.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing items or amounts into two or more groups, typically for the purpose of organizing or accounting for them.\n    'absolute difference': the positive difference between two values.\n    'minimal possible difference': the smallest possible difference between the sums of durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to find the smallest possible difference\n\n# [code logic]\n    To solve this problem, we need to consider all possible combinations of distributing the songs into two concerts. We will calculate the sum of durations for each combination and then find the minimal possible difference between the two sums.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The optimal distribution would be to put one one-minute song and one two-minute song in one concert, and the three-minute song in the other. The difference would be |(1+2) - 3| = 0.\n    Expected output: 0\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The optimal distribution would be to put two one-minute songs, two two-minute songs, and two three-minute songs in each concert. The difference would be |(2*1 + 2*2 + 2*3) - (2*1 + 2*2 + 2*3)| = 0.\n    Expected output: 0\n\n    Edge case 3:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There is only one three-minute song. The only way to distribute it is to put it in one concert and leave the other empty. The difference would be |10*1 - 0| = 10.\n    Expected output: 10\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The brute-force approach will naturally handle these cases by considering all possible combinations.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts, given a set of songs with different durations. The solution should consider all possible combinations of distributing the songs into two concerts to find the optimal distribution.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations between two concerts.\n- Ensure the function can handle multiple test cases efficiently.\n- Develop a method to explore all possible combinations of distributing the songs into two concerts.\n- Optimize the algorithm to handle large input values within reasonable time limits.\nTo solve the problem of distributing songs into two concerts with the minimal possible difference in durations, we can use a dynamic programming approach. The idea is to calculate the total possible sums of durations for all combinations of songs and then find the closest sum to half of the total duration. This approach ensures we explore all possible combinations efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups such that each song is included in exactly one group.\n    'minimal possible difference': means finding the smallest difference between the sums of the durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means the goal is to minimize the difference in duration between the two concerts.\n\n# [code logic]\n    To solve this problem, we need to consider all possible combinations of distributing the songs into two concerts. This can be done using a dynamic programming approach where we calculate the total possible sums of durations for all combinations of songs. Then, we find the closest sum to half of the total duration.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The possible sums of durations for the two concerts are:\n    - Concert 1: 1 minute (one-minute song)\n    - Concert 2: 2 minutes (two-minute song)\n    - Concert 3: 3 minutes (three-minute song)\n    - Concert 4: 4 minutes (two one-minute songs)\n    - Concert 5: 5 minutes (one two-minute song and one three-minute song)\n    The total duration is 1 + 2 + 3 = 6 minutes. Half of the total duration is 3 minutes. The closest sum to 3 minutes is 2 and 4, giving a difference of |2 - 3| = 1 and |4 - 3| = 1. The minimal possible difference is 1 minute.\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are three songs of the same duration. The possible sums of durations for the two concerts are:\n    - Concert 1: 2 minutes (one two-minute song)\n    - Concert 2: 4 minutes (two two-minute songs)\n    - Concert 3: 6 minutes (three two-minute songs)\n    The total duration is 2 + 2 + 2 = 6 minutes. Half of the total duration is 3 minutes. The closest sum to 3 minutes is 2 and 4, giving a difference of |2 - 3| = 1 and |4 - 3| = 1. The minimal possible difference is 1 minute.\n\n    Edge case 3:\n    Input: a = 3, b = 0, c = 0\n    Explanation: There are only one-minute songs. The possible sums of durations for the two concerts are:\n    - Concert 1: 1 minute (one one-minute song)\n    - Concert 2: 2 minutes (two one-minute songs)\n    - Concert 3: 3 minutes (three one-minute songs)\n    The total duration is 1 + 1 + 1 = 3 minutes. Half of the total duration is 1.5 minutes. The closest sum to 1.5 minutes is 1 and 2, giving a difference of |1 - 1.5| = 0.5 and |2 - 1.5| = 0.5. The minimal possible difference is 0.5 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The dynamic programming approach already considers all possible combinations and finds the minimal possible difference.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts with the smallest possible absolute difference in total duration. This can be achieved by sorting the songs by their durations and then trying different combinations to find the minimal difference. The solution should be efficient enough to handle up to 1000 test cases, each with up to 10^9 songs.\nrequirement pool:\n- Implement a function to read input from stdin.\n- Implement a function to calculate the minimal possible difference in minutes between the concerts durations.\n- Ensure the program can handle up to 1000 test cases.\n- Ensure the program can handle up to 10^9 songs per test case.\nTo solve this problem, we will use a simple brute-force approach to try all possible combinations of distributing the songs into two concerts. We will sort the songs by their durations and then iterate through all possible combinations to find the minimal possible difference in minutes between the concert durations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing items or quantities into two or more groups or parts.\n    Explanation: In this problem, we need to distribute the songs into two concerts with the smallest possible absolute difference in total duration.\n\n# [phrase showing quantity relationship]\n    'smallest possible': means the closest to zero difference in total duration between the two concerts.\n\n# [degree adverb] \n    'minimal': indicates the smallest or least possible amount or degree.\n    'possible': means that we need to find the best distribution that minimizes the difference.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests sorting the songs by their durations and then iterating through all possible combinations. This approach ensures that we consider all possible distributions to find the minimal possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: With three songs of 1-minute duration, we can distribute them as [1, 1] and [1] or [1, 1] and [1], resulting in a difference of 0.\n    search([2, 1, 3]) = 1\n    Explanation: The optimal distribution is [1, 2] and [3], resulting in a difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The brute-force approach inherently handles all possible distributions, including those with a single song.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case.\n        if t == 1:\n            return 0  # If there's only one test case, no need to distribute, so the difference is 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case.\n        if a == 0 and b == 0 and c == 0:\n            return 0  # If all songs are zero-minute, the difference is zero.\n", "requirement analysis:\nThe requirements involve distributing songs into two concerts with the smallest possible absolute difference in total duration. This requires a method to calculate the optimal distribution of songs based on their durations. The solution should be efficient and able to handle multiple test cases.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs.\n- Ensure the solution can handle up to 1000 test cases.\n- Optimize the algorithm for efficiency.\n- Provide clear and concise output for each test case.\nTo solve this problem, we will use a simple brute-force approach to iterate through all possible combinations of distributing the songs into two concerts. Given the constraints, we will focus on optimizing the distribution by always trying to place the largest songs first to balance the load. This approach ensures that we find the minimal possible difference in concert durations efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with the smallest possible difference in total duration.\n    Explanation: The goal is to balance the total duration of songs in two concerts as evenly as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve this problem, we need to consider the following steps:\n    1. Sort the durations of the songs in descending order.\n    2. Try to distribute the songs into two concerts by placing the largest songs first.\n    3. Calculate the total duration of each concert and find the absolute difference between them.\n    4. Return the smallest absolute difference found.\n\n# [edge case] \n    search([1, 2, 3]) = 0\n    Explanation: The optimal distribution would be to put songs with durations 3 and 2 in one concert and song with duration 1 in the other. The total durations would be 5 and 1, respectively, resulting in an absolute difference of 4. However, since we are looking for the minimal possible difference, we need to consider the smallest possible difference, which is 0 in this case.\n\n    search([1, 2, 4]) = 1\n    Explanation: The optimal distribution would be to put songs with durations 4 and 1 in one concert and song with duration 2 in the other. The total durations would be 5 and 2, respectively, resulting in an absolute difference of 3. The minimal possible difference is 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The brute-force approach ensures that we find the minimal possible difference efficiently.\n", "requirement analysis:\nThe primary requirement is to distribute songs into two concerts with the smallest possible absolute difference in total duration. This involves calculating the total duration of all songs and then finding two subsets with the closest possible sum. The solution should be efficient and handle up to 1000 test cases.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a method to find two subsets with the closest possible sum.\n- Ensure the solution is optimized for handling up to 1000 test cases.\n- Provide a user-friendly interface for inputting song durations.\n- Include error handling for invalid inputs.\nTo solve this problem efficiently, we will use a combination of greedy algorithm and dynamic programming. The greedy approach will help us to quickly find a feasible solution, and dynamic programming will ensure that we find the optimal solution with the smallest possible absolute difference in total duration.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'smallest possible absolute difference': means the difference between the total durations of the two concerts should be as small as possible.\n    'two concerts': implies that the total number of songs will be divided into two groups.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    No specific degree adverb.\n\n# [code logic]\n    To solve this problem, we can follow these steps:\n    1. Sort the durations of the songs in ascending order.\n    2. Distribute the songs into two concerts by assigning the smallest and largest durations to each concert alternatively.\n    3. Calculate the absolute difference between the total durations of the two concerts.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Edge case 1:\n    Input: [1, 1, 1]\n    Explanation: The sorted durations are [1, 1, 1]. Assigning them to two concerts as 1 and 1+1, the absolute difference is 0.\n    Edge case 2:\n    Input: [2, 1, 3]\n    Explanation: The sorted durations are [1, 2, 3]. Assigning them to two concerts as 1+3 and 2, the absolute difference is 1.\n    Edge case 3:\n    Input: [5, 5, 5]\n    Explanation: The sorted durations are [5, 5, 5]. Assigning them to two concerts as 5+5 and 5+5, the absolute difference is 0.\n    Edge case 4:\n    Input: [1, 1, 2]\n    Explanation: The sorted durations are [1, 1, 2]. Assigning them to two concerts as 1+2 and 1+1, the absolute difference is 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic provided in the plan can handle all the given edge cases.\n", "requirement analysis:\nThe problem requires a solution that can distribute songs into two concerts to minimize the difference in duration. The input consists of multiple test cases, each with a specific number of one-minute, two-minute, and three-minute songs. The output should be the minimal possible difference in minutes between the durations of the two concerts. The solution should consider all possible combinations to ensure the best distribution.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations for each test case.\n- Ensure the solution can handle up to 1000 test cases efficiently.\n- Provide clear and accurate output for each test case.\nTo solve this problem, we will use a brute-force approach to consider all possible combinations of distributing the songs into two concerts. We will calculate the total duration for each combination and then find the minimal possible difference between the two concert durations. Given the constraints, we will use Python due to its efficiency in handling large integers and iterating through combinations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups such that each song is included in exactly one group.\n    'minimal possible difference': means finding the smallest difference between the total durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference between the two groups' durations.\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    No specific edge case provided in the plan.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the total duration of all songs is odd, as it's impossible to split into two groups with equal total duration.\n        if (a + b + c) % 2 != 0:\n            return \"Impossible to distribute\"\n\n(check if there are steps should be considered simultaneously)\nThe plan outlines a brute-force approach to consider all possible combinations, which is suitable for small inputs. However, for large inputs, this approach might not be efficient due to the combinatorial explosion.\n\n# [edge case] \n    Edge case: All songs are of the same duration.\n    search([2,2,2]) = 0\n    Explanation: Since all numbers are the same, the best distribution would be to put two songs in each concert, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle this edge case as the logic in the plan already covers it.\n"], "scores": [], "pass_results": [false, false, true, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 101, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "add_1_sentence_at_end", "parent_index": 31}
