{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He possesses a songs that last one minute, b songs that last two minutes, and c songs that last three minutes. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He possesses a songs that last one minute, b songs that last two minutes, and c songs that last three minutes. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing. He possesses a songs that last one minute, b songs that last two minutes, and c songs that last three minutes. He wants to distribute all songs into two concerts such that every song should be included in exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has songs of different durations: one-minute songs, two-minute songs, and three-minute songs. He needs to distribute these songs into two concerts with the goal of minimizing the absolute difference in their total durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\ndef calculate_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the two concerts.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # If the total duration is even, the minimal difference is 0\n    if total_duration % 2 == 0:\n        return 0\n    \n    # If the total duration is odd, the minimal difference is 1\n    return 1\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # Determine the ideal duration for each concert\n    ideal_duration = total_duration // 2\n    \n    # Initialize variables to store the best possible distribution\n    best_diff = float('inf')\n    \n    # Try all combinations of distributing songs to two concerts\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                for l in range(4):\n                    for m in range(4):\n                        for n in range(4):\n                            if i + j + k + l + m + n == a + b + c:\n                                duration1 = i + 2 * (j + k) + 3 * (l + m + n)\n                                duration2 = total_duration - duration1\n                                diff = abs(duration1 - duration2)\n                                best_diff = min(best_diff, diff)\n    \n    return best_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # If the total duration is odd, the best we can do is a difference of 1\n    if total_duration % 2 != 0:\n        return 1\n    \n    # If the total duration is even, we can split it perfectly, resulting in a difference of 0\n    return 0\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the durations of two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    # Calculate the total duration for all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible distributions of songs into two concerts\n    for i in range(c + 1):\n        for j in range(b + 1):\n            # Calculate the duration of the first concert\n            first_concert_duration = i * 3 + j * 2 + (a - (i + j)) * 1\n            # Calculate the duration of the second concert\n            second_concert_duration = total_duration - first_concert_duration\n            # Calculate the absolute difference between the two concert durations\n            diff = abs(first_concert_duration - second_concert_duration)\n            # Update the minimal difference if the current difference is smaller\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    min_diff = float('inf')\n    \n    # Try all combinations of distributing the songs\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if i + j + k == 3:  # Ensure all songs are distributed\n                    # Calculate the durations of the two concerts\n                    duration1 = i * 1 + j * 2 + k * 3\n                    duration2 = (a - i) * 1 + (b - j) * 2 + (c - k) * 3\n                    diff = abs(duration1 - duration2)\n                    min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\nimport math\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Finds the minimal possible difference in minutes between the durations of two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    max_songs_in_one_concert = total_duration // 2\n    min_diff = float('inf')\n\n    for i in range(max_songs_in_one_concert + 1):\n        duration_first_concert = i * 1 + ((a - i) if a - i >= 0 else 0) * 1 + (b if b <= i else i) * 2 + ((b if b <= i else i) - b if b <= i else 0) * 2 + (c if c <= max_songs_in_one_concert - i else max_songs_in_one_concert - i) * 3 + ((c if c <= max_songs_in_one_concert - i else max_songs_in_one_concert - i) - c if c <= max_songs_in_one_concert - i else 0) * 3\n        duration_second_concert = total_duration - duration_first_concert\n        min_diff = min(min_diff, abs(duration_first_concert - duration_second_concert))\n\n    return min_diff\n\n# Input interface\nn = int(input().strip())\nfor _ in range(n):\n    a, b, c = map(int, input().strip().split())\n\n# Output interface\nfor _ in range(n):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef distribute_songs(a: int, b: int, c: int) -> int:\n    # Sort the songs by their durations in descending order\n    songs = [3 * c + 2 * b + a, a, b, c]\n    songs.sort(reverse=True)\n    \n    # Calculate the total duration of all songs\n    total_duration = songs[0]\n    \n    # If the total duration is even, the difference will be 0\n    # If the total duration is odd, the difference will be 1\n    return 0 if total_duration % 2 == 0 else 1\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = distribute_songs(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef distribute_songs(a, b, c):\n    \"\"\"\n    Distribute songs into two concerts to minimize the absolute difference in their total durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts' durations.\n    \"\"\"\n    # Calculate the total number of songs and their total duration\n    total_songs = a + b + c\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # If the total number of songs is even, we can perfectly balance them\n    if total_songs % 2 == 0:\n        return 0\n    \n    # If the total number of songs is odd, we need to find the closest even number\n    # We will try to balance the durations by prioritizing the same duration songs first\n    min_diff = float('inf')\n    \n    # Try to balance by prioritizing the same duration songs first\n    # We will try to distribute the songs in such a way that the total number of songs in each concert is as close to even as possible\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if (a - i) + (b - j) + (c - k) == total_songs // 2:\n                    diff = abs((a - i) * 1 + (b - j) * 2 + (c - k) * 3 - (total_duration - (a - i) * 1 - (b - j) * 2 - (c - k) * 3))\n                    min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = distribute_songs(a, b, c)\n    print(result)\n", "from typing import List\ndef distribute_songs(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a + 2 * b + 3 * c\n    \n    # If the total duration is even, we can perfectly balance it between two concerts\n    if total_duration % 2 == 0:\n        return 0\n    else:\n        # If the total duration is odd, the best we can do is a difference of 1\n        return 1\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = distribute_songs(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # The optimal distribution will be as close as possible to half of the total duration\n    optimal_duration = total_duration // 2\n    \n    # Calculate the difference if we distribute all songs optimally\n    difference = abs(total_duration - 2 * optimal_duration)\n    \n    return difference\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts given the number of songs of different durations. The solution involves distributing the songs in such a way that the total duration of the two concerts is as balanced as possible. This can be achieved by trying to match the total duration of each concert as closely as possible.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations between two concerts.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to minimize the absolute difference in durations.\nTo solve the problem of distributing songs into two concerts with minimal duration difference, we can use a greedy approach. The idea is to first calculate the total duration of all songs and then try to distribute them in such a way that the difference between the two concerts is minimized. This can be achieved by sorting the songs by their durations and then trying to balance the total duration between the two concerts. We will use Python for this implementation.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups such that each song is included in exactly one group.\n    'minimal difference': means to make the difference between the total durations of the two groups as small as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference between the two groups.\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Sort the songs by their durations.\n    3. Use a greedy approach to distribute the songs into two groups, trying to balance the total duration between the two groups.\n    4. Calculate the difference between the two groups' durations.\n    5. Return the minimal possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 1*1 + 2*1 + 3*1 = 6. We can distribute the songs into two concerts with durations 3 and 3, resulting in a difference of |3-3| = 0.\n    search([2, 2, 2]) = 0\n    explanation: The total duration is 2*2 + 2*2 + 2*2 = 12. We can distribute the songs into two concerts with durations 6 and 6, resulting in a difference of |6-6| = 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach will naturally handle cases where the total duration is evenly divisible by 2.\n\n# [code logic]\n    Here's a Python implementation of the logic described:\n\n    ```python\n    def min_difference(a, b, c):\n        total_duration = a + 2*b + 3*c\n        if total_duration % 2 == 0:\n            return 0\n        else:\n            return 1\n\n    # Example usage:\n    print(min_difference(1, 1, 1))  # Output: 0\n    print(min_difference(2, 1, 3))  # Output: 1\n    print(min_difference(5, 5, 5))  # Output: 0\n    print(min_difference(1, 1, 2))  # Output: 1\n    ```\n\n    This function calculates the total duration and checks if it's even or odd. If it's even, the difference is 0; if it's odd, the difference is 1.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts given the number of songs of different durations. The solution involves distributing the songs in such a way that the total duration of the two concerts is as balanced as possible. This can be achieved by trying to match the total duration of each concert as closely as possible.\nrequirement pool:\n- The main code should read the input correctly\n- The code should calculate the optimal distribution of songs\n- The output should provide the minimal possible difference in minutes\n- The code should handle multiple test cases efficiently\n- The code should be optimized for large input sizes\nTo solve the problem of distributing songs into two concerts with minimal duration difference, we can use a greedy approach. The idea is to first calculate the total duration of all songs and then try to balance the durations of the two concerts as closely as possible. This can be achieved by distributing the songs in a way that one concert gets as close as possible to half of the total duration.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups such that the sum of the durations of songs in each group is as close as possible.\n    Explanation: The goal is to minimize the absolute difference between the durations of the two concerts. This can be achieved by balancing the load as evenly as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference\n\n# [code logic]\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Determine the ideal duration for each concert, which is half of the total duration.\n    3. Distribute the songs into two concerts trying to keep the sum as close as possible to the ideal duration.\n    4. Calculate the absolute difference between the two concert durations.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 1*1 + 2*1 + 3*1 = 6. The ideal duration for each concert is 6/2 = 3. We can distribute the songs such that each concert has a duration of 3, making the difference 0.\n    search([2, 2, 2]) = 0\n    explanation: Similar to the previous case, the total duration is 2*1 + 2*2 + 2*3 = 12. The ideal duration for each concert is 12/2 = 6. We can distribute the songs such that each concert has a duration of 6, making the difference 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where the number of songs of each duration is the same.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts, given a set of songs with different durations. The solution involves distributing the songs into two concerts such that the sum of durations in each concert is as close as possible. This can be achieved by trying to balance the distribution of songs between the two concerts.\nrequirement pool:\n- The main code should read input from standard input\n- The main code should calculate the minimal possible difference in durations between the concerts\n- The main code should output the result to standard output\n- The code should handle up to 1000 test cases\n- The code should handle large values of a, b, and c up to 10^9\nTo solve the problem of distributing songs with different durations into two concerts with minimal difference in durations, we can use a greedy approach. The idea is to try to balance the total duration of the songs between the two concerts as much as possible. This can be achieved by calculating the total duration and then trying to distribute the songs in a way that minimizes the difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of assigning songs to two concerts to minimize the difference in their total durations.\n    Explanation: The goal is to divide the songs into two groups such that the sum of the durations in each group is as close as possible. This involves calculating the total duration of all songs and then finding a way to split it into two groups with minimal difference.\n\n# [phrase showing quantity relationship]\n    'as small as possible': Indicates that we need to minimize the difference in durations between the two concerts.\n\n# [degree adverb] \n    'as small as possible': Indicates the need to minimize the difference in durations.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Determine the optimal way to distribute the songs to minimize the difference in durations.\n    3. Return the minimal possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: The total duration is 1*1 + 2*1 + 3*1 = 6. By assigning one song of each duration to each concert, the difference will be 0.\n    search([2, 2, 2]) = 0\n    Explanation: The total duration is 2*2 + 2*2 + 2*2 = 12. By assigning two songs of each duration to each concert, the difference will be 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where the total number of songs is evenly divisible by 2.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the total number of songs is not evenly divisible by 2.\n        if total_duration % 2 != 0:\n            return 1  # Since we can't split the total duration evenly, the best we can do is a difference of 1.\n        else:\n            return 0  # If the total duration is even, we can split it perfectly, resulting in a difference of 0.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts, given a set of songs with different durations. The solution involves distributing the songs into two concerts such that the sum of durations in each concert is as close as possible. This can be achieved by trying to balance the distribution of songs between the two concerts.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations between two concerts.\n- Ensure the function can handle multiple test cases efficiently.\n- Develop a strategy to distribute songs evenly between the two concerts.\n- Optimize the algorithm to handle large input sizes within reasonable time limits.\nTo solve the problem of distributing songs with different durations into two concerts with minimal difference in durations, we can use a dynamic programming approach. The idea is to calculate the total possible sums of durations for the two concerts and then find the minimal difference between these sums. This approach ensures that we explore all possible distributions of songs and find the optimal one.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert\n    'minimal difference': means finding the smallest possible difference in the total duration of the two concerts\n\n# [phrase showing quantity relationship]\n    'as small as possible': means minimizing the difference between the two concert durations\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference between the two concert durations\n\n# [code logic]\n    To solve this problem, we need to consider all possible distributions of songs into two concerts and calculate the difference in their total durations. The optimal solution will be the smallest difference found.\n\n# [edge case] \n    test case 1: a = 1, b = 1, c = 1\n    expected output: 0\n    Explanation: Luntik can distribute the songs such that one song of each duration is in one concert and the remaining song in the other concert. This results in a difference of 0.\n\n    test case 2: a = 2, b = 1, c = 2\n    expected output: 1\n    Explanation: Luntik can distribute the songs such that two one-minute songs, one two-minute song, and one three-minute song are in the first concert, and the remaining three-minute songs are in the second concert. The first concert has a duration of 7 minutes, and the second concert has a duration of 6 minutes. The difference is |7 - 6| = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the given logic inherently covers all possible distributions and finds the minimal difference.\n", "requirement analysis:\nThe problem requires finding the optimal way to distribute songs into two concerts to minimize the absolute difference in their durations. This involves considering the total number of songs and their individual durations. The solution should be efficient and able to handle large inputs within reasonable time limits.\nrequirement pool:\n- Implement a function to calculate the optimal distribution of songs\n- Ensure the solution can handle up to 1000 test cases\n- Optimize the algorithm for performance\n- Provide clear and concise output for each test case\nTo solve this problem, we will use a simple brute-force approach to try all possible distributions of songs into two concerts and calculate the absolute difference in their durations. This approach will be efficient enough given the constraints of the problem.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert\n    'minimal possible difference': means finding the smallest possible difference between the two concert durations\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference\n\n# [code logic]\n    To find the minimal possible difference, we can iterate through all possible distributions of songs into two concerts and calculate the absolute difference in their durations. This can be done by trying all combinations of one-minute, two-minute, and three-minute songs for the two concerts.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs such that one song of each duration is in each concert, resulting in a difference of 0.\n    search([2, 1, 1]) = 1\n    explanation: Luntik can distribute the songs such that two one-minute songs and one two-minute song are in one concert, and one one-minute song and two three-minute songs are in the other concert, resulting in a difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The brute-force approach will naturally handle cases with small numbers of songs.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts given a set of songs with different durations. The solution involves distributing the songs into two concerts such that the sum of durations in each concert is as close as possible. This can be achieved by trying to balance the total duration evenly between the two concerts.\nrequirement pool:\n- Implement a function to calculate the minimal difference in durations between two concerts.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to minimize the difference in durations.\nTo solve the problem of distributing songs with different durations into two concerts with minimal difference in duration, we can use a dynamic programming approach. This approach will help us efficiently find the optimal distribution. We will use Python, leveraging its powerful standard library and handling large inputs efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert.\n    'minimal difference': means finding the smallest possible difference in the total duration of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference in total duration between the two concerts.\n\n# [code logic]\n    To solve this problem, we can use a dynamic programming approach to find the optimal distribution. We will iterate through all possible distributions and calculate the difference in duration for each one. The goal is to find the distribution that results in the smallest difference.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of each duration. The optimal distribution would be to put one song of each duration in each concert, resulting in a difference of 0 minutes.\n    Expected output: 0\n\n    Edge case 2:\n    Input: a = 10, b = 0, c = 0\n    Explanation: There are ten one-minute songs. The optimal distribution would be to put all ten songs in one concert, resulting in a difference of 0 minutes.\n    Expected output: 0\n\n    Edge case 3:\n    Input: a = 1, b = 2, c = 3\n    Explanation: There is one one-minute song, two two-minute songs, and three three-minute songs. The optimal distribution would be to put one one-minute song and two three-minute songs in one concert, and the remaining two two-minute songs and one three-minute song in the other concert. This results in a difference of 1 minute.\n    Expected output: 1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic should be sufficient to find the minimal possible difference for any given input within the constraints.\n", "requirement analysis:\nThe primary requirement is to distribute songs into two concerts with the goal of minimizing the absolute difference in their total durations. This involves calculating the optimal distribution of songs based on their durations. The solution should be efficient and capable of handling a large number of test cases.\nrequirement pool:\n- Implement an algorithm to calculate the optimal distribution of songs into two concerts.\n- Ensure the code is optimized for handling large input sizes.\n- Provide clear and concise output for each test case.\n- Test the code with a variety of input cases to ensure robustness.\n- Include user-friendly error handling and feedback.\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs into two concerts. The goal is to minimize the absolute difference in their total durations. We will sort the songs by their durations and then distribute them as evenly as possible between the two concerts. This approach ensures that we are always making the best possible choice at each step, leading to an optimal solution.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with minimal difference in total duration.\n    Explanation: The goal is to balance the total duration of songs in two concerts as much as possible to minimize the absolute difference.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case, we need to:\n    1. Sort the number of one-minute, two-minute, and three-minute songs.\n    2. Distribute the songs into two groups, trying to balance the total duration as much as possible.\n    3. Calculate the absolute difference between the two groups' total durations.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: The songs can be distributed evenly into two groups with a total duration of 2 minutes each, resulting in a difference of 0.\n    search([2, 1, 3]) = 1\n    Explanation: The optimal distribution is to put the two one-minute songs in one group and the three-minute songs in the other group, resulting in a difference of 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach ensures that we are always making the best possible choice at each step, leading to an optimal solution.\n\n# [code logic]\n    For each test case, we can follow these steps:\n    1. Sort the number of one-minute, two-minute, and three-minute songs: `a, b, c`.\n    2. Calculate the total duration of all songs: `total_duration = a + 2*b + 3*c`.\n    3. Distribute the songs as evenly as possible between the two concerts:\n        - If `total_duration` is even, the difference will be 0.\n        - If `total_duration` is odd, the difference will be 1 (since we can't have a fractional difference).\n\n# [edge case] \n    search([5, 5, 5]) = 0\n    Explanation: The total duration is 30 minutes, which is even, so the two concerts will have a total duration of 15 minutes each, resulting in a difference of 0.\n    search([1, 1, 2]) = 1\n    Explanation: The total duration is 8 minutes, which is even, so the two concerts will have a total duration of 4 minutes each, resulting in a difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach ensures that we are always making the best possible choice at each step, leading to an optimal solution.\n", "requirement analysis:\nThe problem requires a method to distribute songs into two concerts to minimize the absolute difference in their total durations. This can be achieved by balancing the number of songs in each duration category between the two concerts. The optimal solution involves distributing the songs in a way that equalizes the total duration of each concert as closely as possible.\nrequirement pool:\n- Implement a function to read input for multiple test cases\n- Develop a function to calculate the optimal distribution of songs\n- Ensure the output provides the minimal possible difference in minutes between the concerts durations\n- Optimize the algorithm for efficiency, especially for large numbers of test cases\n- Enhance user interface for easy input and clear output presentation\nTo solve this problem, we will use a simple approach that focuses on balancing the distribution of songs across two concerts. The key idea is to prioritize distributing songs with the same duration first, then use the remaining songs to balance the total durations of the two concerts. We will use Python for this implementation.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'minimizing the absolute difference in durations'\n    The core concept here is to distribute the songs in such a way that the total duration of the two concerts is as close as possible, minimizing the absolute difference between the two.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total number of songs and their total duration.\n    2. Distribute the songs into two concerts, prioritizing those with the same duration first.\n    3. Calculate the absolute difference between the two concerts' durations.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    Edge Case 1:\n    Input: [1, 1, 1]\n    Explanation: There are three one-minute songs. The optimal distribution would be one song in each concert, resulting in a difference of 1 minute.\n    Expected Output: 1\n\n    Edge Case 2:\n    Input: [2, 2, 2]\n    Explanation: There are six one-minute songs. The optimal distribution would be three in each concert, resulting in a difference of 0 minutes.\n    Expected Output: 0\n\n    Edge Case 3:\n    Input: [10^9, 10^9, 10^9]\n    Explanation: There are a large number of one-minute songs. The optimal distribution would be half in each concert, resulting in a difference of 0 minutes.\n    Expected Output: 0\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle large values within the given constraints.\n", "requirement analysis:\nThe primary requirement is to minimize the absolute difference in the total duration of songs between two concerts. This involves distributing the songs as evenly as possible. The solution should be efficient and capable of handling up to 1000 test cases, each with up to 10^9 songs.\nrequirement pool:\n- Implement an algorithm to distribute songs evenly between two concerts.\n- Ensure the solution is optimized for large input sizes.\n- Provide the minimal possible difference in minutes for each test case.\n- Add user input validation to handle edge cases.\n- Include a feature to handle additional song durations if needed.\nTo solve this problem efficiently, we will use a greedy approach to distribute the songs as evenly as possible between two concerts. The key idea is to prioritize the larger song durations first to balance the total duration more effectively. We will use Python's built-in functions and data structures to implement this solution.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'minimizing the absolute difference': means to make the total duration of both concerts as close as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case:\n    1. Calculate the total duration of all songs.\n    2. Distribute the songs by prioritizing the larger durations first.\n    3. Calculate the duration of each concert.\n    4. Compute the absolute difference between the two concert durations.\n    5. Return the minimal possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: All songs are of one minute each, so they can be evenly distributed between two concerts, resulting in a difference of 0.\n    search([2, 1, 3]) = 1\n    explanation: The optimal distribution would be to put one 3-minute song in one concert and the rest in the other, resulting in a difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The greedy approach ensures that the minimal possible difference is achieved.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts, given a set of songs with different durations. The solution involves distributing the songs into two concerts such that the sum of durations in each concert is as close as possible. This can be achieved by trying to balance the distribution of songs between the two concerts.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations between two concerts.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to minimize the difference in durations.\nTo solve the problem of distributing songs with different durations into two concerts with minimal difference in durations, we can use a greedy approach. The idea is to try to balance the total duration of the songs between the two concerts as much as possible. This can be achieved by first calculating the total duration of all songs and then trying to distribute them as evenly as possible between the two concerts. The minimal possible difference in durations will be the absolute difference between the two concert durations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups (concerts) such that each song is included in exactly one group.\n    'minimal difference': means to make the difference between the total durations of the two groups as small as possible.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference between the two groups.\n\n# [code logic]\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Determine the optimal way to distribute the songs to minimize the difference in durations between the two concerts.\n    3. Return the minimal possible difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: The total duration is 1*1 + 2*1 + 3*1 = 6. We can distribute the songs such that both concerts have a duration of 3, resulting in a difference of 0.\n    search([2, 2, 2]) = 0\n    explanation: The total duration is 2*2 + 2*2 + 2*2 = 12. We can distribute the songs such that both concerts have a duration of 6, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where all song counts are the same.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where all song counts are the same.\n"], "scores": [], "pass_results": [true, false, false, true, false, true, false, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 160, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "parent_index": 31}
