{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs, and he wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs, and he wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing. He has a one-minute song, b two-minute songs, and c three-minute songs, and he wants to distribute all songs into two concerts such that every song should be included in exactly one concert. He wants to make the absolute difference of the durations of the concerts as small as possible. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs, and he wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Assume that Luntik cannot change the duration of any song.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    minimal_diff = float('inf')\n\n    # Iterate through possible splits for three-minute songs\n    for i in range(c + 1):\n        for j in range(b + 1):\n            if i * 3 + j * 2 <= total_duration // 2:\n                first_concert_duration = i * 3 + j * 2 + (a + (b - j))\n                second_concert_duration = total_duration - first_concert_duration\n                diff = abs(first_concert_duration - second_concert_duration)\n                minimal_diff = min(minimal_diff, diff)\n\n    return minimal_diff\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the durations of two concerts\n    given the number of one-minute, two-minute, and three-minute songs.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n\n    # Try all possible splits and find the minimal difference\n    for concerts in range(2):\n        for i in range(total_duration + 1):\n            duration1 = i\n            duration2 = total_duration - i\n            diff = abs(duration1 - duration2)\n            min_diff = min(min_diff, diff)\n\n    return min_diff\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    min_difference = float('inf')\n    \n    # Iterate through all possible ways to split the songs into two groups\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                if i + j + k <= total_duration // 2:\n                    duration_first_concert = i * 1 + j * 2 + k * 3\n                    duration_second_concert = total_duration - duration_first_concert\n                    difference = abs(duration_first_concert - duration_second_concert)\n                    min_difference = min(min_difference, difference)\n    \n    return min_difference\n\n# Interface\nn = int(sys.stdin.readline().strip())\nfor _ in range(n):\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the durations of the two concerts.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    low, high = 0, total_duration\n\n    def can_distribute(target_diff):\n        for x in range(total_duration // 3 + 1):\n            for y in range(total_duration // 2 + 1):\n                if x * 3 + y * 2 >= total_duration - (x * 3 + y * 2):\n                    continue\n                if abs((x * 3 + y * 2) - (total_duration - (x * 3 + y * 2))) <= target_diff:\n                    return True\n        return False\n\n    while low < high:\n        mid = (low + high) // 2\n        if can_distribute(mid):\n            high = mid\n        else:\n            low = mid + 1\n\n    return low\n\n# Read input and output results\nt = int(input().strip())\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    This function calculates the minimal possible difference in minutes between the durations of the two concerts.\n    \n    Args:\n        a (int): The number of one-minute songs.\n        b (int): The number of two-minute songs.\n        c (int): The number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n    \n    # Iterate through all possible splits and find the minimal difference\n    for i in range(total_duration + 1):\n        duration1 = i\n        duration2 = total_duration - i\n        diff = abs(duration1 - duration2)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the durations of the two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_difference = float('inf')\n    \n    # Try all combinations of distributing the songs into two concerts\n    for i in range(4):\n        for j in range(4):\n            if (i + j) % 2 == 0:  # Ensure one concert has an even number of songs\n                duration1 = i * 1 + j * 2 + (3 * (a - i) + 4 * (b - j) + 5 * (c - (a - i) - (b - j))) // 2\n                duration2 = total_duration - duration1\n                min_difference = min(min_difference, abs(duration1 - duration2))\n    \n    return min_difference\n\n# Read input\nt = int(input().strip())\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Finds the minimal possible difference in minutes between the durations of the two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a + 2 * b + 3 * c\n    min_difference = float('inf')\n    \n    # Optimized approach to find the closest possible split\n    for i in range(total_duration + 1):\n        first_concert_duration = i\n        second_concert_duration = total_duration - i\n        difference = abs(first_concert_duration - second_concert_duration)\n        min_difference = min(min_difference, difference)\n    \n    return min_difference\n\n# Read the number of test cases\nt = int(sys.stdin.readline())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, sys.stdin.readline().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    total_duration = a + 2 * b + 3 * c\n    min_diff = float('inf')\n    \n    # Iterate through possible splits\n    for i in range(total_duration + 1):\n        first_concert_duration = i\n        second_concert_duration = total_duration - i\n        diff = abs(first_concert_duration - second_concert_duration)\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read input\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    total_duration = a + b * 2 + c * 3\n    min_difference = float('inf')\n    \n    for i in range(total_duration + 1):\n        first_concert_duration = i\n        second_concert_duration = total_duration - i\n        difference = abs(first_concert_duration - second_concert_duration)\n        min_difference = min(min_difference, difference)\n    \n    return min_difference\n\n# Input interface\nn = int(input())\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef calculate_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the durations of the two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of the two concerts.\n    \"\"\"\n    total_duration = a * 1 + b * 2 + c * 3\n    half_duration = total_duration // 2\n    return abs(total_duration - 2 * half_duration)\n\n# Read the number of test cases from stdin\nt = int(sys.stdin.readline().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    result = calculate_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where Luntik's songs need to be distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the minimal possible difference between the durations of two concerts.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it runs within the given constraints.\nTo solve this problem, we will use a simple Python function that calculates the total duration of all songs and then finds the closest possible split that minimizes the difference between the two concerts. The function will iterate through possible splits and calculate the absolute difference for each, returning the smallest difference found.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert\n    'absolute difference': means the smallest possible difference between the two concerts\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference\n\n# [code logic]\n    To implement the solution, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Iterate through possible splits and calculate the absolute difference for each.\n    3. Return the smallest difference found.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs such that one concert has durations 1+1=2 and the other has 1, resulting in a difference of |2-1|=1. However, the optimal distribution is to have both concerts with a duration of 2, resulting in a difference of 0.\n    search([2, 1, 3]) = 1\n    explanation: The optimal distribution is to have one concert with durations 2+3=5 and the other with 1+1=2, resulting in a difference of |5-2|=3. However, the optimal distribution is to have one concert with durations 2+3=5 and the other with 2, resulting in a difference of |5-2|=3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already considers the optimal distribution for each test case.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where Luntik's songs need to be distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the minimal possible difference in minutes between the concerts durations.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it runs within the given constraints.\nTo solve this problem, we will use a simple Python function that calculates the total duration of all songs and then finds the closest possible split that minimizes the difference between the two concerts. The function will handle multiple test cases efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert\n    'absolute difference': means the smallest possible difference between the two concerts\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference\n\n# [code logic]\n    To solve this problem, we need to calculate the total duration of all songs and then find the closest possible split that minimizes the difference between the two concerts. Here's the plan:\n    1. Calculate the total duration of all songs.\n    2. Use a loop to find the closest possible split that minimizes the difference between the two concerts.\n    3. Return the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs such that both concerts have the same duration (1+1+1 = 3 minutes each), resulting in a difference of 0.\n    search([2, 1, 3]) = 1\n    explanation: Luntik can distribute the songs such that one concert has a duration of 2+1+3 = 6 minutes and the other has a duration of 2*3 = 6 minutes, resulting in a difference of |6-6| = 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to solve the problem.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where Luntik's songs need to be distributed. The solution involves calculating the total duration of all songs and then finding the closest possible split that minimizes the difference between the two concerts.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the minimal possible difference between the two concerts.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it runs within the given constraints.\nTo solve this problem, we will use a simple Python function that calculates the total duration of all songs and then finds the closest possible split that minimizes the difference between the two concerts. We will use a brute-force approach to iterate through all possible combinations of songs to distribute them between the two concerts.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means dividing the songs into two groups such that each song is included in exactly one group.\n    'absolute difference': means the smallest possible difference between the total durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means that we need to minimize the difference between the durations of the two concerts.\n\n# [code logic]\n    To implement the solution, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Iterate through all possible ways to split the songs into two groups.\n    3. For each split, calculate the difference between the durations of the two groups.\n    4. Keep track of the smallest difference found.\n    5. Return the smallest difference.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs such that both concerts have the same duration (1 minute + 1 minute + 1 minute = 3 minutes). The difference is 0.\n    search([2, 1, 3]) = 1\n    explanation: Luntik can distribute the songs such that one concert has a duration of 2 minutes + 3 minutes = 5 minutes and the other has a duration of 1 minute + 1 minute + 1 minute = 3 minutes. The difference is |5 - 3| = 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already considers the smallest possible difference for the given distribution of songs.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where songs of different durations are distributed. The solution involves calculating the total duration and then finding the closest possible split that minimizes the difference.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Implement a function to find the minimal possible difference between the two concerts.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to ensure it works within the constraints of the problem.\nTo solve the problem of distributing songs of different durations into two concerts with the smallest possible difference in duration, we can use a greedy approach. First, calculate the total duration of all songs. Then, use a binary search approach to find the minimal possible difference between the two concerts. This approach ensures that we efficiently find the optimal distribution without explicitly trying all possible combinations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning each song to exactly one concert\n    'minimal possible difference': means the smallest absolute difference between the durations of the two concerts\n\n# [phrase showing quantity relationship]\n    'as small as possible': means we need to minimize the difference\n\n# [degree adverb] \n    'as small as possible': means we need to minimize the difference\n\n# [code logic]\n    To solve this problem, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Use a binary search approach to find the minimal possible difference between the two concerts.\n    3. In each iteration of the binary search, check if it's possible to distribute the songs such that the difference between the two concerts is less than or equal to the current mid value.\n    4. If possible, move the search space to the left to find a smaller difference. Otherwise, move to the right.\n    5. Return the minimal possible difference found.\n\n# [edge case] \n    Test case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: Luntik can include one one-minute song, one two-minute song, and one three-minute song in each concert. The difference will be 0.\n    Expected output: 0\n\n    Test case 2:\n    Input: a = 2, b = 1, c = 2\n    Explanation: Luntik can include two one-minute songs and one two-minute song in the first concert, and two three-minute songs in the second concert. The difference will be 1.\n    Expected output: 1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the provided logic already covers the smallest possible inputs. The binary search approach will naturally handle these cases efficiently.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where Luntik's songs are distributed. The solution involves distributing the songs in a way that balances the total duration of the two concerts as evenly as possible. This can be achieved by first calculating the total duration of all songs and then finding the closest possible split that minimizes the difference.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the minimal possible difference between the durations of the two concerts.\n- Ensure the solution is efficient enough to handle up to 1000 test cases.\nTo solve this problem, we will use a simple approach to distribute the songs between two concerts. The goal is to minimize the absolute difference in the total duration of the two concerts. We will calculate the total duration of all songs and then find the closest possible split that minimizes the difference. This can be efficiently done by iterating through possible splits and calculating the differences.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups such that each song is included in exactly one group.\n    'minimal possible difference': means to find the smallest difference between the total durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference as much as we can.\n\n# [code logic]\n    To solve this problem, we need to calculate the total duration of all songs and then find the closest possible split that minimizes the difference. This can be efficiently done by iterating through possible splits and calculating the differences.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The total duration is 1*1 + 2*1 + 3*1 = 6 minutes. The optimal way to split these songs is to put one 1-minute song, one 2-minute song, and two 3-minute songs in one concert, and the remaining songs in the other concert. This results in a difference of |3 - 3| = 0 minutes.\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs in total. The total duration is 2*1 + 2*2 + 2*3 = 12 minutes. The optimal way to split these songs is to put two 1-minute songs, two 2-minute songs, and two 3-minute songs in one concert, and the remaining songs in the other concert. This results in a difference of |6 - 6| = 0 minutes.\n\n    Edge case 3:\n    Input: a = 3, b = 3, c = 3\n    Explanation: There are nine songs in total. The total duration is 3*1 + 3*2 + 3*3 = 18 minutes. The optimal way to split these songs is to put three 1-minute songs, three 2-minute songs, and three 3-minute songs in one concert, and the remaining songs in the other concert. This results in a difference of |9 - 9| = 0 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to solve the problem for any given input within the constraints.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where songs of different durations are distributed. The goal is to balance the durations as evenly as possible. This can be achieved by sorting the songs by their durations and then trying to distribute them into two concerts to minimize the difference.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in concert durations.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to handle large input values within the given constraints.\nTo solve the problem of distributing songs of different durations into two concerts with the minimal possible difference, we can use a greedy approach. First, we calculate the total duration of all songs. Then, we try to balance the durations by distributing the songs as evenly as possible. This can be achieved by sorting the songs by their durations and then trying to distribute them into two concerts to minimize the difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the total number of songs into two groups such that each song is included in exactly one group.\n    'minimal possible difference': means the smallest difference between the total durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference between the durations of the two concerts.\n\n# [code logic]\n    To solve the problem, we need to follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Distribute the songs into two concerts to minimize the difference in their durations.\n    3. Return the minimal possible difference.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: There are three songs of different durations. The total duration is 1*1 + 2*1 + 3*1 = 6 minutes. The optimal way to distribute these songs is to put one 1-minute and one 2-minute song in one concert, and the 3-minute song in the other concert. The difference in durations would be |(1+2) - 3| = 0 minutes.\n\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: There are six songs of different durations. The total duration is 2*1 + 2*2 + 2*3 = 12 minutes. The optimal way to distribute these songs is to put two 1-minute songs, two 2-minute songs, and two 3-minute songs in each concert. The difference in durations would be |(2+2+2) - (2+2+2)| = 0 minutes.\n\n    Edge case 3:\n    Input: a = 3, b = 3, c = 3\n    Explanation: There are nine songs of different durations. The total duration is 3*1 + 3*2 + 3*3 = 18 minutes. The optimal way to distribute these songs is to put three 1-minute songs, three 2-minute songs, and three 3-minute songs in each concert. The difference in durations would be |(3+3+3) - (3+3+3)| = 0 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The given logic already ensures that the distribution is optimal, and the difference is minimized.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where Luntik's songs need to be distributed. The solution involves distributing the songs in a way that balances the total duration of the two concerts as evenly as possible. This can be achieved by first calculating the total duration of all songs and then finding the closest possible split that minimizes the absolute difference.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a strategy to distribute songs to two concerts to minimize the difference in their durations.\n- Ensure the solution can handle multiple test cases efficiently.\n- Optimize the algorithm to handle large inputs within reasonable time limits.\nTo solve the problem of distributing Luntik's songs into two concerts with the minimal possible difference in durations, we will use a simple approach that involves calculating the total duration of all songs and then finding the closest possible split that minimizes the absolute difference. This can be efficiently achieved by iterating through possible splits and calculating the differences.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts such that each song is included in exactly one concert.\n    'minimal possible difference': means finding the smallest absolute difference between the durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference between the durations of the two concerts.\n\n# [code logic]\n    To solve the problem, we need to calculate the total duration of all songs and then find the closest possible split that minimizes the absolute difference. This can be done by iterating through possible splits and calculating the differences.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: The total duration is 1*1 + 2*1 + 3*1 = 6 minutes. The optimal distribution is to put one one-minute song, one two-minute song, and one three-minute song into each concert. The difference will be 0.\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: The total duration is 2*1 + 2*2 + 2*3 = 12 minutes. The optimal distribution is to put two one-minute songs, two two-minute songs, and two three-minute songs into each concert. The difference will be 0.\n    Edge case 3:\n    Input: a = 3, b = 3, c = 3\n    Explanation: The total duration is 3*1 + 3*2 + 3*3 = 18 minutes. The optimal distribution is to put three one-minute songs, three two-minute songs, and three three-minute songs into each concert. The difference will be 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the logic provided in the plan can handle any number of songs without modification.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where Luntik's songs need to be distributed. The solution involves distributing the songs in a way that balances the total duration of the two concerts as evenly as possible. This can be achieved by first calculating the total duration of all songs and then finding the closest possible split that minimizes the absolute difference.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a strategy to distribute songs to two concerts to minimize the difference in their durations.\n- Ensure the solution can handle multiple test cases efficiently.\n- Include user input handling for the number of test cases and song durations.\n- Implement output formatting to display the minimal possible difference for each test case.\nTo solve the problem of distributing Luntik's songs into two concerts with the minimal possible difference in durations, we will use a simple approach that involves calculating the total duration of all songs and then finding the closest possible split that minimizes the absolute difference. This can be efficiently achieved by iterating through possible splits and calculating the differences.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts such that each song is included in exactly one concert.\n    'minimal possible difference': means finding the smallest absolute difference between the durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means the goal is to minimize the difference.\n\n# [code logic]\n    To solve this problem, we need to calculate the total duration of all songs and then find the closest possible split that minimizes the absolute difference. This can be efficiently achieved by iterating through possible splits and calculating the differences.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    explanation: Luntik can distribute the songs such that one song goes to each concert, resulting in a difference of 0.\n    search([2, 2, 2]) = 0\n    explanation: Luntik can distribute the songs such that two songs go to each concert, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle this scenario.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where Luntik's songs are distributed. The solution involves distributing the songs in a way that balances the total duration of the two concerts as evenly as possible. This can be achieved by first calculating the total duration of all songs and then finding the closest possible split that minimizes the absolute difference.\nrequirement pool:\n- Implement a function to calculate the total duration of all songs.\n- Develop a function to find the optimal distribution of songs to minimize the difference in concert durations.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the code for large inputs within the given constraints.\nTo solve the problem of distributing Luntik's songs into two concerts with the minimal possible difference in durations, we can use a simple approach that involves calculating the total duration of all songs and then finding the closest possible split that minimizes the absolute difference. This can be efficiently achieved using a brute-force method since the constraints are within reasonable limits.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means assigning songs to two concerts such that each song is included in exactly one concert.\n    'minimal possible difference': means finding the smallest absolute difference between the durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means minimizing the difference as much as we can.\n\n# [code logic]\n    To solve this, we can follow these steps:\n    1. Calculate the total duration of all songs.\n    2. Iterate through possible splits of the total duration into two concerts.\n    3. For each split, calculate the absolute difference between the two concert durations.\n    4. Track the smallest absolute difference found.\n    5. Return the smallest absolute difference.\n\n# [edge case] \n    Edge case 1:\n    Input: a = 1, b = 1, c = 1\n    Explanation: The total duration is 1 + 1 + 1 = 3. The only way to split it is to put 1 and 1 in one concert and 1 in the other. The difference is |2 - 1| = 1.\n    Edge case 2:\n    Input: a = 2, b = 2, c = 2\n    Explanation: The total duration is 2 + 2 + 2 = 6. One possible split is to put two one-minute songs and two three-minute songs in one concert, and the other two one-minute songs and two-minute song in the other. The difference is |8 - 6| = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle these cases directly.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in minutes between the durations of two concerts where Luntik's songs are distributed. The solution involves finding the best way to split the songs into two groups to minimize the difference in their total durations. This can be approached by trying to balance the distribution of the songs as evenly as possible.\nrequirement pool:\n- Implement a function to calculate the minimal possible difference in durations between two concerts.\n- Ensure the function can handle multiple test cases efficiently.\n- Optimize the algorithm to handle large input sizes within reasonable time limits.\nTo solve the problem of distributing Luntik's songs into two concerts with the minimal possible difference in durations, we can use a greedy approach. The idea is to first calculate the total duration of all songs and then try to balance the distribution as evenly as possible. This can be achieved by sorting the songs by their durations and then trying to place them in two concerts to minimize the difference. We will use Python for this implementation.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups with the smallest possible difference in total duration.\n    'greedy approach': means to try and balance the distribution by considering the smallest and largest durations first.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference in total duration between the two concerts.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    Edge case 1: [1, 1, 1]\n    Expected output: 0\n    Explanation: All songs are of the same duration, so they can be evenly distributed between the two concerts, resulting in a difference of 0.\n\n    Edge case 2: [1, 2, 3]\n    Expected output: 0\n    Explanation: The total duration is 6 minutes. By placing one one-minute song and one two-minute song in one concert, and the three-minute song in the other, the difference is minimized to 0.\n\n    Edge case 3: [10^9, 10^9, 10^9]\n    Expected output: 0\n    Explanation: The total duration is 3 * 10^9 minutes. Given the large numbers, the best distribution would be to place each type of song in one concert, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach will naturally handle these cases by balancing the distribution as evenly as possible.\n"], "scores": [], "pass_results": [true, true, true, false, false, true, false, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 170, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "condense_two2one", "parent_index": 31}
