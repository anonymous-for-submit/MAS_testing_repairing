{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 805, "prompt": "Write a function that returns the list in a list of lists. It should be the one whose sum of elements is the highest.", "code": "def max_sum_list(lists):\n return max(lists, key=sum)", "test_imports": [], "test_list": ["assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ", "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ", "assert max_sum_list([[2,3,1]])==[2,3,1] ", "assert max_sum_list([[4, 5, 1], [2, 2, 6], [5, 16, 17], [9, 8, 14]]) == [5, 16, 17]", "assert max_sum_list([[3, 3, 4], [9, 6, 1], [6, 15, 15], [2, 4, 11]]) == [6, 15, 15]", "assert max_sum_list([[1, 1, 8], [9, 7, 8], [7, 9, 9], [3, 4, 10]]) == [7, 9, 9]", "assert max_sum_list([[5, 7, 7], [2, 6, 5], [14, 14, 14], [6, 13, 10]]) == [14, 14, 14]", "assert max_sum_list([[1, 1, 6], [4, 1, 6], [15, 12, 16], [3, 10, 14]]) == [15, 12, 16]", "assert max_sum_list([[1, 7, 7], [7, 1, 10], [13, 15, 14], [2, 12, 8]]) == [13, 15, 14]", "assert max_sum_list([[2, 3, 5], [5, 3, 11], [13, 13, 17], [4, 9, 13]]) == [13, 13, 17]", "assert max_sum_list([[3, 3, 5], [9, 4, 6], [15, 6, 15], [8, 3, 9]]) == [15, 6, 15]", "assert max_sum_list([[5, 5, 3], [9, 2, 5], [5, 13, 13], [7, 3, 6]]) == [5, 13, 13]", "assert max_sum_list([[3, 3, 6], [8, 3, 4], [7, 16, 15], [9, 11, 10]]) == [7, 16, 15]", "assert max_sum_list([[3, 6, 2], [8, 5, 10], [12, 13, 10], [6, 10, 4]]) == [12, 13, 10]", "assert max_sum_list([[4, 1, 2], [2, 1, 11], [8, 7, 9], [10, 11, 12]]) == [10, 11, 12]", "assert max_sum_list([[6, 6, 4], [3, 6, 9], [6, 7, 11], [7, 7, 4]]) == [6, 7, 11]", "assert max_sum_list([[5, 7, 6], [5, 7, 4], [10, 6, 10], [10, 4, 8]]) == [10, 6, 10]", "assert max_sum_list([[6, 4, 7], [9, 10, 5], [11, 13, 17], [10, 5, 6]]) == [11, 13, 17]", "assert max_sum_list([[5, 2, 8], [8, 7, 8], [13, 11, 11], [2, 3, 10]]) == [13, 11, 11]", "assert max_sum_list([[5, 5, 2], [8, 10, 11], [5, 9, 9], [7, 12, 11]]) == [7, 12, 11]", "assert max_sum_list([[2, 1, 3], [2, 8, 3], [13, 14, 7], [8, 11, 14]]) == [13, 14, 7]", "assert max_sum_list([[6, 3, 3], [8, 5, 6], [14, 10, 14], [8, 8, 5]]) == [14, 10, 14]", "assert max_sum_list([[3, 2, 8], [2, 4, 2], [13, 13, 16], [7, 7, 7]]) == [13, 13, 16]", "assert max_sum_list([[2, 1, 7], [3, 2, 1], [10, 11, 13], [7, 6, 13]]) == [10, 11, 13]", "assert max_sum_list([[5, 1, 8], [2, 9, 8], [13, 7, 11], [10, 11, 10]]) == [13, 7, 11]", "assert max_sum_list([[1, 7, 8], [3, 2, 8], [6, 16, 12], [5, 6, 8]]) == [6, 16, 12]", "assert max_sum_list([[5, 2, 3], [7, 8, 6], [14, 7, 8], [5, 8, 8]]) == [14, 7, 8]", "assert max_sum_list([[2, 6, 6], [6, 6, 3], [8, 11, 16], [4, 8, 5]]) == [8, 11, 16]", "assert max_sum_list([[2, 3, 4], [1, 6, 9], [9, 6, 17], [3, 6, 10]]) == [9, 6, 17]", "assert max_sum_list([[3, 5, 1], [8, 1, 6], [10, 7, 14], [10, 6, 4]]) == [10, 7, 14]", "assert max_sum_list([[6, 2, 6], [6, 1, 6], [7, 9, 16], [10, 4, 14]]) == [7, 9, 16]", "assert max_sum_list([[3, 2, 7], [2, 9, 9], [13, 8, 12], [2, 13, 4]]) == [13, 8, 12]", "assert max_sum_list([[6, 4, 2], [2, 3, 11], [11, 7, 14], [8, 10, 9]]) == [11, 7, 14]", "assert max_sum_list([[5, 3, 1], [5, 5, 2], [13, 15, 14], [10, 10, 13]]) == [13, 15, 14]", "assert max_sum_list([[5, 6, 2], [4, 9, 1], [8, 12, 9], [7, 6, 4]]) == [8, 12, 9]", "assert max_sum_list([[5, 6, 7], [2, 4, 4], [12, 10, 8], [3, 8, 6]]) == [12, 10, 8]", "assert max_sum_list([[5, 3, 6], [4, 2, 9], [13, 15, 14]]) == [13, 15, 14]", "assert max_sum_list([[5, 1, 6], [8, 9, 1], [7, 9, 11]]) == [7, 9, 11]", "assert max_sum_list([[7, 3, 3], [6, 3, 5], [16, 9, 7]]) == [16, 9, 7]", "assert max_sum_list([[4, 2, 6], [9, 4, 8], [10, 11, 6]]) == [10, 11, 6]", "assert max_sum_list([[4, 5, 4], [5, 8, 2], [9, 7, 12]]) == [9, 7, 12]", "assert max_sum_list([[5, 5, 1], [10, 10, 9], [14, 14, 12]]) == [14, 14, 12]", "assert max_sum_list([[2, 2, 1], [8, 10, 7], [16, 11, 11]]) == [16, 11, 11]", "assert max_sum_list([[7, 5, 3], [9, 8, 2], [11, 13, 13]]) == [11, 13, 13]", "assert max_sum_list([[5, 4, 1], [11, 4, 6], [13, 11, 13]]) == [13, 11, 13]", "assert max_sum_list([[5, 4, 3], [10, 2, 4], [9, 8, 10]]) == [9, 8, 10]", "assert max_sum_list([[4, 6, 5], [1, 7, 8], [7, 13, 7]]) == [7, 13, 7]", "assert max_sum_list([[6, 2, 6], [8, 2, 1], [14, 8, 15]]) == [14, 8, 15]", "assert max_sum_list([[4, 6, 5], [11, 5, 3], [13, 13, 10]]) == [13, 13, 10]", "assert max_sum_list([[1, 6, 2], [7, 10, 1], [12, 11, 6]]) == [12, 11, 6]", "assert max_sum_list([[7, 4, 6], [1, 9, 2], [7, 16, 15]]) == [7, 16, 15]", "assert max_sum_list([[8, 3, 6], [6, 2, 4], [8, 10, 15]]) == [8, 10, 15]", "assert max_sum_list([[4, 2, 4], [1, 2, 2], [17, 8, 9]]) == [17, 8, 9]", "assert max_sum_list([[6, 7, 1], [4, 4, 9], [10, 6, 15]]) == [10, 6, 15]", "assert max_sum_list([[5, 1, 6], [2, 8, 1], [16, 6, 13]]) == [16, 6, 13]", "assert max_sum_list([[4, 3, 6], [3, 3, 1], [17, 10, 10]]) == [17, 10, 10]", "assert max_sum_list([[8, 6, 3], [2, 1, 1], [9, 8, 13]]) == [9, 8, 13]", "assert max_sum_list([[2, 4, 5], [7, 4, 3], [8, 8, 13]]) == [8, 8, 13]", "assert max_sum_list([[4, 6, 4], [5, 4, 7], [8, 16, 12]]) == [8, 16, 12]", "assert max_sum_list([[7, 7, 3], [5, 1, 4], [15, 11, 8]]) == [15, 11, 8]", "assert max_sum_list([[4, 2, 2], [10, 7, 7], [7, 16, 10]]) == [7, 16, 10]", "assert max_sum_list([[1, 7, 5], [2, 10, 1], [15, 9, 10]]) == [15, 9, 10]", "assert max_sum_list([[6, 6, 1], [10, 1, 7], [11, 15, 5]]) == [11, 15, 5]", "assert max_sum_list([[4, 3, 5], [2, 8, 2], [12, 10, 12]]) == [12, 10, 12]", "assert max_sum_list([[4, 1, 2], [6, 10, 7], [11, 16, 13]]) == [11, 16, 13]", "assert max_sum_list([[4, 3, 1], [9, 10, 4], [11, 13, 14]]) == [11, 13, 14]", "assert max_sum_list([[1, 4, 3], [7, 6, 4], [16, 8, 7]]) == [16, 8, 7]", "assert max_sum_list([[2, 7, 3], [7, 6, 4], [11, 16, 15]]) == [11, 16, 15]", "assert max_sum_list([[6, 2, 5], [11, 5, 2], [8, 11, 9]]) == [8, 11, 9]", "assert max_sum_list([[2, 8, 6]]) == [2, 8, 6]", "assert max_sum_list([[7, 7, 2]]) == [7, 7, 2]", "assert max_sum_list([[6, 5, 2]]) == [6, 5, 2]", "assert max_sum_list([[3, 1, 4]]) == [3, 1, 4]", "assert max_sum_list([[6, 4, 2]]) == [6, 4, 2]", "assert max_sum_list([[1, 3, 1]]) == [1, 3, 1]", "assert max_sum_list([[2, 7, 2]]) == [2, 7, 2]", "assert max_sum_list([[7, 1, 6]]) == [7, 1, 6]", "assert max_sum_list([[2, 3, 5]]) == [2, 3, 5]", "assert max_sum_list([[1, 2, 1]]) == [1, 2, 1]", "assert max_sum_list([[3, 7, 4]]) == [3, 7, 4]", "assert max_sum_list([[2, 3, 2]]) == [2, 3, 2]", "assert max_sum_list([[5, 5, 5]]) == [5, 5, 5]", "assert max_sum_list([[1, 6, 2]]) == [1, 6, 2]", "assert max_sum_list([[4, 5, 6]]) == [4, 5, 6]", "assert max_sum_list([[3, 4, 1]]) == [3, 4, 1]", "assert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "assert max_sum_list([[1, 4, 3]]) == [1, 4, 3]", "assert max_sum_list([[6, 3, 2]]) == [6, 3, 2]", "assert max_sum_list([[4, 2, 1]]) == [4, 2, 1]", "assert max_sum_list([[4, 7, 6]]) == [4, 7, 6]", "assert max_sum_list([[4, 4, 4]]) == [4, 4, 4]", "assert max_sum_list([[3, 7, 1]]) == [3, 7, 1]", "assert max_sum_list([[4, 5, 4]]) == [4, 5, 4]", "assert max_sum_list([[2, 6, 4]]) == [2, 6, 4]", "assert max_sum_list([[2, 3, 6]]) == [2, 3, 6]", "assert max_sum_list([[1, 4, 6]]) == [1, 4, 6]", "assert max_sum_list([[6, 5, 6]]) == [6, 5, 6]", "assert max_sum_list([[4, 8, 3]]) == [4, 8, 3]", "assert max_sum_list([[6, 4, 1]]) == [6, 4, 1]", "assert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "assert max_sum_list([[5, 5, 1]]) == [5, 5, 1]", "assert max_sum_list([[1, 1, 1]]) == [1, 1, 1]"], "entry_point": "max_sum_list", "repair_prompt": ["Write a function max_sum_list that returns the list in a list of lists. It should be the one whose sum of elements is the highest.\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n", " Write a function max_sum_list that returns a list of lists, where each sublist contains elements from the original list. The function should identify the sublist with the highest sum of its elements.\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n", " Write a function max_sum_list that returns the list whose sum of elements is the highest, from a list of lists.\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n"], "completions": ["from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    \"\"\"\n    Finds the list with the highest sum of elements from a list of lists.\n\n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n\n    Returns:\n        Optional[List[int]]: The list with the highest sum of elements, or None if the input list is empty.\n    \"\"\"\n    if not lists:\n        return None\n\n    max_sum = float('-inf')\n    max_list = []\n\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n\n    return max_list\n", "from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    if not lists:\n        return None\n    \n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n", "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Finds the list with the highest sum of elements from a list of lists.\n\n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n\n    Returns:\n        List[int]: The list with the highest sum of elements.\n    \"\"\"\n    if not lists:\n        return []\n\n    max_sum = float('-inf')\n    max_list = []\n\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n\n    return max_list\n", "from typing import List\n## main.py\n\nfrom typing import List, Optional\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    \"\"\"\n    Returns the sublist with the highest sum from a list of sublists.\n    \n    Args:\n        lists (List[List[int]]): A list of sublists, each containing integers.\n    \n    Returns:\n        Optional[List[int]]: The sublist with the highest sum, or None if the input list is empty.\n    \"\"\"\n    if not lists:\n        return None\n    \n    max_sum = float('-inf')\n    result = None\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = sublist\n    \n    return result\n", "from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    if not lists:\n        return None\n    \n    max_sublist = max(lists, key=sum)\n    return max_sublist\n", "from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(list_of_lists: List[List[int]]) -> Optional[List[int]]:\n    if not list_of_lists:\n        return None\n    \n    max_sum = float('-inf')\n    max_sublist = []\n    \n    for sublist in list_of_lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sublist = sublist\n    \n    return max_sublist\n", "from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    if not lists:\n        return None\n    \n    max_sum = float('-inf')\n    max_list = None\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    \n    return max_list\n", "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a list of lists of integers, return the list with the maximum sum of elements.\n    \n    Args:\n        lists (List[List[int]]): A list of lists of integers.\n    \n    Returns:\n        List[int]: The list with the maximum sum of elements.\n    \"\"\"\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    max_list = []\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    \n    return max_list\n", "from typing import List\n## main.py\n\nfrom typing import List, Optional\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    \"\"\"\n    Takes a list of lists of integers and returns the list with the maximum sum of its elements.\n    \n    Args:\n        lists (List[List[int]]): A list of lists of integers.\n    \n    Returns:\n        Optional[List[int]]: The list with the maximum sum of its elements, or None if the input list is empty.\n    \"\"\"\n    if not lists:\n        return None\n    \n    max_sum = float('-inf')\n    result = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = lst\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    result = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = lst\n    \n    return result\n"], "plans": ["requirement analysis:\nThe requirement is to find the list with the highest sum of elements from a list of lists. This is a common problem in data processing and requires a function that can iterate through the lists, calculate the sum of each, and return the list with the highest sum. The function should be efficient and handle various sizes of input lists.\nrequirement pool:\n- The main code should efficiently calculate the sum of elements for each list and return the one with the highest sum.\n- The function should handle lists of different lengths and sizes.\n- The function should be easy to understand and use, with clear documentation.\n- Implement error handling for cases where the input is not a list of lists.\n- Optimize the function for performance, especially for large lists.\nTo solve the problem of finding the list with the highest sum of elements from a list of lists, we will use Python's built-in functions and standard libraries. The approach involves iterating through each list, calculating the sum of its elements, and comparing these sums to find the maximum. This method ensures efficiency and simplicity in handling various sizes of input lists.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum': means the sum of elements in a list should be the largest compared to other lists.\n    Explanation: The core concept here is to find the list with the maximum sum of its elements from a collection of lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `max_sum_list`, we will follow these steps:\n    1. Initialize a variable to keep track of the maximum sum found so far.\n    2. Initialize a variable to store the list corresponding to the maximum sum.\n    3. Iterate through each list in the input list of lists.\n    4. For each list, calculate the sum of its elements.\n    5. Compare the calculated sum with the current maximum sum.\n    6. If the calculated sum is greater, update the maximum sum and the list associated with it.\n    7. After iterating through all lists, return the list with the maximum sum.\n\n# [edge case] \n    max_sum_list([[1], [2], [3]]) = [3]\n    Explanation: All lists contain only one element. The list [3] has the highest sum since 3 is the largest single element.\n    max_sum_list([[0, 0], [0, 0], [0, 0]]) = [0, 0]\n    Explanation: All lists have the same sum (0). Any of these lists can be returned as they all have the same maximum sum.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will work correctly for lists with a single element or multiple identical lists.\n\n# [code logic]\n    Here's the Python code to implement the `max_sum_list` function:\n\n    ```python\n    def max_sum_list(lists):\n        max_sum = float('-inf')\n        max_list = []\n        for lst in lists:\n            current_sum = sum(lst)\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lst\n        return max_list\n    ```\n", "requirement analysis:\nThe requirement is to find the list within a list of lists that has the highest sum of elements. This is a straightforward task that involves iterating through each list, calculating the sum of each, and then comparing these sums to find the maximum. The function should be efficient and handle various sizes of input lists.\nrequirement pool:\n- Implement the function max_sum_list to find the list with the highest sum of elements.\n- Ensure the function is optimized for performance, handling large datasets efficiently.\n- Develop a user-friendly interface for easy interaction.\n- Include error handling to manage unexpected inputs gracefully.\n- Implement unit tests to verify the correctness and robustness of the function.\nTo implement the function `max_sum_list` efficiently, we will use Python's built-in functions and libraries. The function will iterate through each list in the provided list of lists, calculate the sum of each list, and then return the list with the highest sum. This approach ensures simplicity and efficiency, making it suitable for handling large datasets.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of elements': means the total value obtained by adding all the numbers in a list\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through each list in the list of lists, calculate the sum of each list, and compare the sums to find the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of [10, 11, 12] is 33, which is the highest sum among all the lists.\n    max_sum_list([[-1,-2,-3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: Even though [-1,-2,-3] has negative numbers, the sum of [10, 11, 12] is still the highest at 33.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum, including cases with negative numbers.\n\n# [core concept]\n    'positive integers': means all numbers in the list are greater than zero\n\n# [phrase showing quantity relationship]\n    'more than': means that the integer must be greater than zero\n    'at least as many times': means that the integer must appear in the list at least as many times as its value\n\n# [degree adverb] \n    'largest': means that the integer must be the largest among those that meet the 'more than' and 'at least as many times' conditions\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Create a dictionary to store the frequency of each integer, then iterate through the dictionary to find the largest integer that appears at least as many times as itself.\n\n# [edge case] \n    search([2,2,3,3,3]) = 3\n    Explanation: Both 2 and 3 appear more than or equal to their values, but 3 is the largest number.\n    search([3,3,2,4,4,4]) = -1\n    Explanation: Number 2 appears one time, number 3 appears two times, number 4 appears three times, none of them appear more than or equal to their values, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can set the initial return value to -1 and then find the largest integer that meets the condition.\n\n# [core concept]\n    'list of lists': means a collection of lists where each inner list is a separate list\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through each list in the provided list of lists, calculate the sum of each list, and compare the sums to find the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of [10, 11, 12] is 33, which is the highest sum among all the lists.\n    max_sum_list([[-1,-2,-3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: Even though [-1,-2,-3] has negative numbers, the sum of [10, 11, 12] is still the highest at 33.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum, including cases with negative numbers.\n", "requirement analysis:\nThe requirement is to find the list with the highest sum of elements from a list of lists. This is a common problem in data processing and requires a function that can iterate through the lists, calculate the sum of each, and return the list with the highest sum. The function should be efficient and handle various sizes of input lists.\nrequirement pool:\n- The main code should efficiently calculate the sum of each list and compare them to find the maximum.\n- The function should handle lists of different lengths and sizes.\n- The output should be the list with the highest sum of elements.\n- The function should be optimized for performance, especially for large lists.\n- The function should include error handling for non-integer elements in the lists.\nTo solve the problem of finding the list with the highest sum of elements from a list of lists, we will use Python's built-in functions and libraries. The approach involves iterating through each list, calculating the sum of its elements, and comparing these sums to determine the list with the highest sum. We will use the 'max' function with a custom key to achieve this efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum': means the sum of elements in a list should be the largest compared to other lists.\n    Explanation: The core concept here is to find the list with the maximum sum of its elements from a collection of lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `max_sum_list`, we will follow these steps:\n    1. Iterate through each list in the provided list of lists.\n    2. Calculate the sum of elements for each list.\n    3. Use the `max` function with a key to find the list with the highest sum.\n    4. Return the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of elements in [10, 11, 12] is 33, which is the highest sum among all the lists provided.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum.\n", "requirement analysis:\nThe requirement is to create a function that identifies the sublist with the highest sum of its elements from a list of lists. This is a common problem in data analysis and programming, where finding the maximum sum sublist can be useful in various applications. The function should be efficient and handle different sizes of input lists.\nrequirement pool:\n- The main code should be efficient and handle different sizes of input lists.\n- The function should clearly identify the sublist with the highest sum.\n- The interface should be user-friendly and easy to understand.\n- The function should be tested with various input scenarios to ensure reliability.\n- The UI should be clean and visually appealing.\nTo implement the function `max_sum_list` efficiently, we will use Python's built-in functions and libraries. The function will iterate through each sublist, calculate the sum of each, and keep track of the sublist with the highest sum. We will use the `sum` function to calculate the sum of each sublist and the `max` function to find the sublist with the highest sum. The function will return the sublist with the highest sum.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum': means the sum of elements in the sublist is the largest compared to other sublists.\n    'sublist': a smaller list within a larger list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    To implement the function `max_sum_list`, we will follow these steps:\n    1. Initialize a variable to keep track of the maximum sum found so far.\n    2. Initialize a variable to store the sublist with the maximum sum.\n    3. Iterate through each sublist in the given list.\n    4. Calculate the sum of the current sublist.\n    5. Compare the sum with the maximum sum found so far.\n    6. If the current sum is greater, update the maximum sum and the sublist with the maximum sum.\n    7. After iterating through all sublists, return the sublist with the maximum sum.\n\n# [edge case] \n    max_sum_list([[1], [2], [3]]) = [3]\n    Explanation: There is only one element in each sublist, so the sublist with the largest single element is [3].\n    max_sum_list([[-1, -2, -3], [0, 0, 0], [1, 2, 3]]) = [1, 2, 3]\n    Explanation: The sum of elements in [-1, -2, -3] is -6, in [0, 0, 0] is 0, and in [1, 2, 3] is 6. The sublist [1, 2, 3] has the highest sum.\n    max_sum_list([[], [1, 2, 3], [-4, -5, -6]]) = [1, 2, 3]\n    Explanation: The first sublist is empty, so it has a sum of 0. The sum of [1, 2, 3] is 6, and the sum of [-4, -5, -6] is -15. The sublist [1, 2, 3] has the highest sum.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already accounts for empty sublists and sublists with negative numbers.\n", "requirement analysis:\nThe requirement is to create a function that returns the sublist with the highest sum of its elements from a list of lists. This is a common problem in data analysis and programming. The function should be efficient and handle various sizes of input lists. The output should be intuitive and easy to understand for users.\nrequirement pool:\n- The main code should efficiently calculate the sum of each sublist and identify the one with the highest sum.\n- The function should be able to handle lists of varying lengths and nested structures.\n- The output should be a list representing the sublist with the highest sum.\n- The function should be user-friendly and provide clear feedback on the result.\n- The interface should be simple and intuitive, making it easy for users to understand the result.\nTo implement the function `max_sum_list` efficiently, we will use Python's built-in functions and libraries. The main challenge is to iterate through the list of lists, calculate the sum of each sublist, and then identify the sublist with the highest sum. We will use the `sum` function to calculate the sum of each sublist and the `max` function with a custom key to find the sublist with the highest sum.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum': means the sum of elements in the sublist is the largest compared to other sublists.\n    'sublist': a smaller list within a larger list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    To implement the function `max_sum_list`, we will follow these steps:\n    1. Use a generator expression to calculate the sum of each sublist.\n    2. Use the `max` function with a key to find the sublist with the highest sum.\n    3. Return the sublist with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of elements in [10, 11, 12] is 33, which is the highest sum among all sublists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the sublist with the highest sum.\n", "requirement analysis:\nThe requirement is to create a function that returns the sublist with the highest sum of its elements from a list of lists. This is a common problem in data analysis and programming where the goal is to find the optimal solution from multiple options. The function should be efficient and handle various sizes of input lists.\nrequirement pool:\n- The main code should be efficient in calculating the sum of sublists.\n- The function should handle lists of varying lengths and nested structures.\n- The output should be clearly formatted and easy to understand.\n- The function should be integrated into existing projects seamlessly.\nTo create the function `max_sum_list` that returns the sublist with the highest sum of its elements from a list of lists, we will use Python's built-in capabilities and the `itertools` library for efficient iteration. The function will iterate through each sublist, calculate the sum of each, and then compare these sums to find the sublist with the highest sum. This approach ensures efficiency and simplicity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum': means the sum of elements in the sublist should be the largest among all sublists.\n    'list of lists': means the function will operate on a collection containing other collections.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through each sublist, calculate the sum of its elements, and keep track of the sublist with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sums of the sublists are 6, 15, 33, and 24 respectively. The sublist [10, 11, 12] has the highest sum of 33.\n    max_sum_list([[-1,-2,-3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The first sublist has negative numbers, which reduce its sum. The other sublists have positive numbers, and [10, 11, 12] has the highest sum of 33.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function can directly compare the sums of the sublists to find the one with the highest sum.\n\n# [code logic]\n    Here's a detailed implementation of the function:\n\n    ```python\n    def max_sum_list(list_of_lists):\n        max_sum = float('-inf')\n        max_sublist = []\n        for sublist in list_of_lists:\n            current_sum = sum(sublist)\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sublist = sublist\n        return max_sublist\n    ```\n\n    This function initializes `max_sum` to negative infinity to ensure any sum will be larger initially. It then iterates through each sublist, calculates its sum, and updates `max_sum` and `max_sublist` if the current sublist's sum is greater. Finally, it returns the sublist with the highest sum.\n", "requirement analysis:\nThe requirement is to create a function that returns the list with the highest sum of elements from a list of lists. This is a straightforward task that involves iterating through the list, calculating the sum of each sublist, and then comparing these sums to find the maximum. The function should be efficient and handle edge cases such as empty lists or lists with negative numbers.\nrequirement pool:\n- The main code should be efficient and clear\n- The function should handle edge cases\n- The UI should be simple and intuitive\n- The application should be responsive\n- Include accessibility features\nTo implement the function `max_sum_list` efficiently, we will use Python's built-in functions and libraries. The function will iterate through each sublist, calculate the sum of each, and then return the sublist with the highest sum. This approach ensures clarity and simplicity in the code.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of elements': means the total of all numbers in a list\n    'highest': means the biggest sum among all lists\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through each sublist, calculate the sum of each, and compare it with the current maximum sum to find the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1], [2], [3]]) = [3]\n    Explanation: All sublists have only one element, so the one with the largest element is [3].\n    max_sum_list([[0,0,0], [1,1,1], [2,2,2]]) = [2,2,2]\n    Explanation: All sublists have the same sum, so the first one in the list is returned.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will return the first list with the highest sum if all sums are equal.\n\n# [core concept]\n    'sum of elements': means the total of all numbers in a list\n    'highest': means the biggest sum among all lists\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through each sublist, calculate the sum of each, and compare it with the current maximum sum to find the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1], [2], [3]]) = [3]\n    Explanation: All sublists have only one element, so the one with the largest element is [3].\n    max_sum_list([[0,0,0], [1,1,1], [2,2,2]]) = [2,2,2]\n    Explanation: All sublists have the same sum, so the first one in the list is returned.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will return the first list with the highest sum if all sums are equal.\n", "requirement analysis:\nThe requirement is to create a function that returns the list with the highest sum of elements from a list of lists. This is a straightforward task that involves iterating through the list, calculating the sum of each sublist, and then comparing these sums to find the maximum. The function should be efficient and handle basic use cases effectively.\nrequirement pool:\n- The main code should be efficient in calculating the sum of sublists.\n- The function should return the correct list with the highest sum.\n- The function should handle edge cases such as empty lists or lists with negative numbers.\n- The function should be easy to understand and maintain.\n- The function should be optimized for performance, especially for large lists.\nTo implement the function `max_sum_list` efficiently, we will use Python's built-in functions and libraries. The function will iterate through each sublist, calculate the sum of each, and then compare these sums to find the maximum. This approach ensures simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of elements': means the total value obtained by adding all the numbers in a list\n\n    'list of lists': means a collection of lists within a single list\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through each sublist, calculate the sum of each, and compare these sums to find the maximum.\n\n# [edge case] \n    max_sum_list([[1], [2], [3]]) = [3]\n    explanation: All sublists have only one element, so the one with the largest element is [3].\n    max_sum_list([[1,2], [2,3], [3,4]]) = [3,4]\n    explanation: The sums are 3, 5, and 7 respectively. The sublist [3,4] has the highest sum.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will work as expected for sublists with only one element.\n\n# [core concept]\n    'sum of elements': means the total value obtained by adding all the numbers in a list\n\n    'list of lists': means a collection of lists within a single list\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through each sublist, calculate the sum of each, and compare these sums to find the maximum.\n\n# [edge case] \n    max_sum_list([[1], [2], [3]]) = [3]\n    explanation: All sublists have only one element, so the one with the largest element is [3].\n    max_sum_list([[1,2], [2,3], [3,4]]) = [3,4]\n    explanation: The sums are 3, 5, and 7 respectively. The sublist [3,4] has the highest sum.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will work as expected for sublists with only one element.\n", "requirement analysis:\nThe original requirement is to create a function that returns the list with the highest sum of elements from a list of lists. This is a straightforward task that involves iterating through the list, calculating the sum of each sublist, and returning the one with the highest sum. The function should be efficient and handle various sizes of input lists.\nrequirement pool:\n- The main code should be efficient in calculating the sum of sublists.\n- The function should return the correct list with the highest sum.\n- The function should handle edge cases such as empty lists or lists with negative numbers.\n- The function should be easy to understand and use, with clear documentation.\n- The UI should be simple and intuitive, with clear feedback on the results.\nTo implement the function `max_sum_list` efficiently, we will use Python's built-in functions and libraries. The function will iterate through the list of lists, calculate the sum of each sublist, and return the one with the highest sum. This approach ensures simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of elements': means the total value obtained by adding all the numbers in a list.\n    'list of lists': means a collection of lists within a larger list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `max_sum_list`, we will follow these steps:\n    1. Initialize a variable to keep track of the maximum sum found so far.\n    2. Initialize a variable to store the list with the maximum sum.\n    3. Iterate through each list in the list of lists.\n    4. Calculate the sum of the current list.\n    5. Compare the sum with the maximum sum found so far.\n    6. If the current sum is greater, update the maximum sum and the list associated with it.\n    7. After iterating through all lists, return the list with the maximum sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of elements in each list is 6, 15, 33, and 24 respectively. The list [10, 11, 12] has the highest sum of 33.\n\n# [extra code for edge case]\n    No extra code is needed for this edge case as the provided logic will handle it correctly.\n", "requirement analysis:\nThe requirement is to create a function that returns the list with the highest sum of elements from a list of lists. This is a common problem in data analysis and programming. The function should be efficient and handle various sizes of input lists. Clarifications are needed to ensure the function is robust and handles edge cases effectively.\nrequirement pool:\n- The main code should be efficient and handle large lists.\n- The function should clearly return the list with the highest sum of elements.\n- The function should be easy to understand and use.\n- The function should handle edge cases, such as empty lists or lists with negative numbers.\n- The function should be optimized for performance.\nTo create a function that returns the list with the highest sum of elements from a list of lists, we will use Python's built-in capabilities and leverage the simplicity of list comprehensions and the max function. This approach ensures efficiency and clarity in the code.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum of elements'\n    In the requirement, it means finding the list within a list of lists that has the greatest total value when all its elements are added together.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `max_sum_list`, we will follow these steps:\n    1. Iterate through each list in the list of lists.\n    2. Calculate the sum of each list.\n    3. Compare the sums and keep track of the list with the highest sum.\n    4. Return the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of elements in each list is 6, 15, 33, and 24 respectively. The list [10, 11, 12] has the highest sum of 33.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum.\n"], "test": ["def check(max_sum_list):\n\tassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ", "def check(max_sum_list):\n\tassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ", "def check(max_sum_list):\n\tassert max_sum_list([[2,3,1]])==[2,3,1] ", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 1], [2, 2, 6], [5, 16, 17], [9, 8, 14]]) == [5, 16, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 4], [9, 6, 1], [6, 15, 15], [2, 4, 11]]) == [6, 15, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 8], [9, 7, 8], [7, 9, 9], [3, 4, 10]]) == [7, 9, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 7, 7], [2, 6, 5], [14, 14, 14], [6, 13, 10]]) == [14, 14, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 6], [4, 1, 6], [15, 12, 16], [3, 10, 14]]) == [15, 12, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 7], [7, 1, 10], [13, 15, 14], [2, 12, 8]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 5], [5, 3, 11], [13, 13, 17], [4, 9, 13]]) == [13, 13, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 5], [9, 4, 6], [15, 6, 15], [8, 3, 9]]) == [15, 6, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 3], [9, 2, 5], [5, 13, 13], [7, 3, 6]]) == [5, 13, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 6], [8, 3, 4], [7, 16, 15], [9, 11, 10]]) == [7, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 6, 2], [8, 5, 10], [12, 13, 10], [6, 10, 4]]) == [12, 13, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 1, 2], [2, 1, 11], [8, 7, 9], [10, 11, 12]]) == [10, 11, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 6, 4], [3, 6, 9], [6, 7, 11], [7, 7, 4]]) == [6, 7, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 7, 6], [5, 7, 4], [10, 6, 10], [10, 4, 8]]) == [10, 6, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 7], [9, 10, 5], [11, 13, 17], [10, 5, 6]]) == [11, 13, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 2, 8], [8, 7, 8], [13, 11, 11], [2, 3, 10]]) == [13, 11, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 2], [8, 10, 11], [5, 9, 9], [7, 12, 11]]) == [7, 12, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 1, 3], [2, 8, 3], [13, 14, 7], [8, 11, 14]]) == [13, 14, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 3, 3], [8, 5, 6], [14, 10, 14], [8, 8, 5]]) == [14, 10, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 2, 8], [2, 4, 2], [13, 13, 16], [7, 7, 7]]) == [13, 13, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 1, 7], [3, 2, 1], [10, 11, 13], [7, 6, 13]]) == [10, 11, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 8], [2, 9, 8], [13, 7, 11], [10, 11, 10]]) == [13, 7, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 8], [3, 2, 8], [6, 16, 12], [5, 6, 8]]) == [6, 16, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 2, 3], [7, 8, 6], [14, 7, 8], [5, 8, 8]]) == [14, 7, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 6, 6], [6, 6, 3], [8, 11, 16], [4, 8, 5]]) == [8, 11, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 4], [1, 6, 9], [9, 6, 17], [3, 6, 10]]) == [9, 6, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 5, 1], [8, 1, 6], [10, 7, 14], [10, 6, 4]]) == [10, 7, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 6], [6, 1, 6], [7, 9, 16], [10, 4, 14]]) == [7, 9, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 2, 7], [2, 9, 9], [13, 8, 12], [2, 13, 4]]) == [13, 8, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 2], [2, 3, 11], [11, 7, 14], [8, 10, 9]]) == [11, 7, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 3, 1], [5, 5, 2], [13, 15, 14], [10, 10, 13]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 6, 2], [4, 9, 1], [8, 12, 9], [7, 6, 4]]) == [8, 12, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 6, 7], [2, 4, 4], [12, 10, 8], [3, 8, 6]]) == [12, 10, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 3, 6], [4, 2, 9], [13, 15, 14]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6], [8, 9, 1], [7, 9, 11]]) == [7, 9, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 3, 3], [6, 3, 5], [16, 9, 7]]) == [16, 9, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 6], [9, 4, 8], [10, 11, 6]]) == [10, 11, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 4], [5, 8, 2], [9, 7, 12]]) == [9, 7, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 1], [10, 10, 9], [14, 14, 12]]) == [14, 14, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 2, 1], [8, 10, 7], [16, 11, 11]]) == [16, 11, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 5, 3], [9, 8, 2], [11, 13, 13]]) == [11, 13, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 4, 1], [11, 4, 6], [13, 11, 13]]) == [13, 11, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 4, 3], [10, 2, 4], [9, 8, 10]]) == [9, 8, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 5], [1, 7, 8], [7, 13, 7]]) == [7, 13, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 6], [8, 2, 1], [14, 8, 15]]) == [14, 8, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 5], [11, 5, 3], [13, 13, 10]]) == [13, 13, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 6, 2], [7, 10, 1], [12, 11, 6]]) == [12, 11, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 4, 6], [1, 9, 2], [7, 16, 15]]) == [7, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[8, 3, 6], [6, 2, 4], [8, 10, 15]]) == [8, 10, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 4], [1, 2, 2], [17, 8, 9]]) == [17, 8, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 7, 1], [4, 4, 9], [10, 6, 15]]) == [10, 6, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6], [2, 8, 1], [16, 6, 13]]) == [16, 6, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 6], [3, 3, 1], [17, 10, 10]]) == [17, 10, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[8, 6, 3], [2, 1, 1], [9, 8, 13]]) == [9, 8, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 4, 5], [7, 4, 3], [8, 8, 13]]) == [8, 8, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 4], [5, 4, 7], [8, 16, 12]]) == [8, 16, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 7, 3], [5, 1, 4], [15, 11, 8]]) == [15, 11, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 2], [10, 7, 7], [7, 16, 10]]) == [7, 16, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 5], [2, 10, 1], [15, 9, 10]]) == [15, 9, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 6, 1], [10, 1, 7], [11, 15, 5]]) == [11, 15, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 5], [2, 8, 2], [12, 10, 12]]) == [12, 10, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 1, 2], [6, 10, 7], [11, 16, 13]]) == [11, 16, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 1], [9, 10, 4], [11, 13, 14]]) == [11, 13, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 3], [7, 6, 4], [16, 8, 7]]) == [16, 8, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 7, 3], [7, 6, 4], [11, 16, 15]]) == [11, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 5], [11, 5, 2], [8, 11, 9]]) == [8, 11, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 8, 6]]) == [2, 8, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 7, 2]]) == [7, 7, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 5, 2]]) == [6, 5, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 1, 4]]) == [3, 1, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 2]]) == [6, 4, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 3, 1]]) == [1, 3, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 7, 2]]) == [2, 7, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 1, 6]]) == [7, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 5]]) == [2, 3, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 2, 1]]) == [1, 2, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 7, 4]]) == [3, 7, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 2]]) == [2, 3, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 5]]) == [5, 5, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 6, 2]]) == [1, 6, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 6]]) == [4, 5, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 4, 1]]) == [3, 4, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 3]]) == [1, 4, 3]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 3, 2]]) == [6, 3, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 1]]) == [4, 2, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 7, 6]]) == [4, 7, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 4, 4]]) == [4, 4, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 7, 1]]) == [3, 7, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 4]]) == [4, 5, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 6, 4]]) == [2, 6, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 6]]) == [2, 3, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 6]]) == [1, 4, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 5, 6]]) == [6, 5, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 8, 3]]) == [4, 8, 3]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 1]]) == [6, 4, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 1]]) == [5, 5, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 1]]) == [1, 1, 1]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    result = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = lst\n    \n    return result\n", "passed": true, "pass": true, "pass_num": 10, "round": 685, "mutate_method": "expand_one2two", "parent_index": 552}
