{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 805, "prompt": "Write a function that returns the list in a list of lists which should be the one whose sum of elements is the highest.", "code": "def max_sum_list(lists):\n return max(lists, key=sum)", "test_imports": [], "test_list": ["assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ", "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ", "assert max_sum_list([[2,3,1]])==[2,3,1] ", "assert max_sum_list([[4, 5, 1], [2, 2, 6], [5, 16, 17], [9, 8, 14]]) == [5, 16, 17]", "assert max_sum_list([[3, 3, 4], [9, 6, 1], [6, 15, 15], [2, 4, 11]]) == [6, 15, 15]", "assert max_sum_list([[1, 1, 8], [9, 7, 8], [7, 9, 9], [3, 4, 10]]) == [7, 9, 9]", "assert max_sum_list([[5, 7, 7], [2, 6, 5], [14, 14, 14], [6, 13, 10]]) == [14, 14, 14]", "assert max_sum_list([[1, 1, 6], [4, 1, 6], [15, 12, 16], [3, 10, 14]]) == [15, 12, 16]", "assert max_sum_list([[1, 7, 7], [7, 1, 10], [13, 15, 14], [2, 12, 8]]) == [13, 15, 14]", "assert max_sum_list([[2, 3, 5], [5, 3, 11], [13, 13, 17], [4, 9, 13]]) == [13, 13, 17]", "assert max_sum_list([[3, 3, 5], [9, 4, 6], [15, 6, 15], [8, 3, 9]]) == [15, 6, 15]", "assert max_sum_list([[5, 5, 3], [9, 2, 5], [5, 13, 13], [7, 3, 6]]) == [5, 13, 13]", "assert max_sum_list([[3, 3, 6], [8, 3, 4], [7, 16, 15], [9, 11, 10]]) == [7, 16, 15]", "assert max_sum_list([[3, 6, 2], [8, 5, 10], [12, 13, 10], [6, 10, 4]]) == [12, 13, 10]", "assert max_sum_list([[4, 1, 2], [2, 1, 11], [8, 7, 9], [10, 11, 12]]) == [10, 11, 12]", "assert max_sum_list([[6, 6, 4], [3, 6, 9], [6, 7, 11], [7, 7, 4]]) == [6, 7, 11]", "assert max_sum_list([[5, 7, 6], [5, 7, 4], [10, 6, 10], [10, 4, 8]]) == [10, 6, 10]", "assert max_sum_list([[6, 4, 7], [9, 10, 5], [11, 13, 17], [10, 5, 6]]) == [11, 13, 17]", "assert max_sum_list([[5, 2, 8], [8, 7, 8], [13, 11, 11], [2, 3, 10]]) == [13, 11, 11]", "assert max_sum_list([[5, 5, 2], [8, 10, 11], [5, 9, 9], [7, 12, 11]]) == [7, 12, 11]", "assert max_sum_list([[2, 1, 3], [2, 8, 3], [13, 14, 7], [8, 11, 14]]) == [13, 14, 7]", "assert max_sum_list([[6, 3, 3], [8, 5, 6], [14, 10, 14], [8, 8, 5]]) == [14, 10, 14]", "assert max_sum_list([[3, 2, 8], [2, 4, 2], [13, 13, 16], [7, 7, 7]]) == [13, 13, 16]", "assert max_sum_list([[2, 1, 7], [3, 2, 1], [10, 11, 13], [7, 6, 13]]) == [10, 11, 13]", "assert max_sum_list([[5, 1, 8], [2, 9, 8], [13, 7, 11], [10, 11, 10]]) == [13, 7, 11]", "assert max_sum_list([[1, 7, 8], [3, 2, 8], [6, 16, 12], [5, 6, 8]]) == [6, 16, 12]", "assert max_sum_list([[5, 2, 3], [7, 8, 6], [14, 7, 8], [5, 8, 8]]) == [14, 7, 8]", "assert max_sum_list([[2, 6, 6], [6, 6, 3], [8, 11, 16], [4, 8, 5]]) == [8, 11, 16]", "assert max_sum_list([[2, 3, 4], [1, 6, 9], [9, 6, 17], [3, 6, 10]]) == [9, 6, 17]", "assert max_sum_list([[3, 5, 1], [8, 1, 6], [10, 7, 14], [10, 6, 4]]) == [10, 7, 14]", "assert max_sum_list([[6, 2, 6], [6, 1, 6], [7, 9, 16], [10, 4, 14]]) == [7, 9, 16]", "assert max_sum_list([[3, 2, 7], [2, 9, 9], [13, 8, 12], [2, 13, 4]]) == [13, 8, 12]", "assert max_sum_list([[6, 4, 2], [2, 3, 11], [11, 7, 14], [8, 10, 9]]) == [11, 7, 14]", "assert max_sum_list([[5, 3, 1], [5, 5, 2], [13, 15, 14], [10, 10, 13]]) == [13, 15, 14]", "assert max_sum_list([[5, 6, 2], [4, 9, 1], [8, 12, 9], [7, 6, 4]]) == [8, 12, 9]", "assert max_sum_list([[5, 6, 7], [2, 4, 4], [12, 10, 8], [3, 8, 6]]) == [12, 10, 8]", "assert max_sum_list([[5, 3, 6], [4, 2, 9], [13, 15, 14]]) == [13, 15, 14]", "assert max_sum_list([[5, 1, 6], [8, 9, 1], [7, 9, 11]]) == [7, 9, 11]", "assert max_sum_list([[7, 3, 3], [6, 3, 5], [16, 9, 7]]) == [16, 9, 7]", "assert max_sum_list([[4, 2, 6], [9, 4, 8], [10, 11, 6]]) == [10, 11, 6]", "assert max_sum_list([[4, 5, 4], [5, 8, 2], [9, 7, 12]]) == [9, 7, 12]", "assert max_sum_list([[5, 5, 1], [10, 10, 9], [14, 14, 12]]) == [14, 14, 12]", "assert max_sum_list([[2, 2, 1], [8, 10, 7], [16, 11, 11]]) == [16, 11, 11]", "assert max_sum_list([[7, 5, 3], [9, 8, 2], [11, 13, 13]]) == [11, 13, 13]", "assert max_sum_list([[5, 4, 1], [11, 4, 6], [13, 11, 13]]) == [13, 11, 13]", "assert max_sum_list([[5, 4, 3], [10, 2, 4], [9, 8, 10]]) == [9, 8, 10]", "assert max_sum_list([[4, 6, 5], [1, 7, 8], [7, 13, 7]]) == [7, 13, 7]", "assert max_sum_list([[6, 2, 6], [8, 2, 1], [14, 8, 15]]) == [14, 8, 15]", "assert max_sum_list([[4, 6, 5], [11, 5, 3], [13, 13, 10]]) == [13, 13, 10]", "assert max_sum_list([[1, 6, 2], [7, 10, 1], [12, 11, 6]]) == [12, 11, 6]", "assert max_sum_list([[7, 4, 6], [1, 9, 2], [7, 16, 15]]) == [7, 16, 15]", "assert max_sum_list([[8, 3, 6], [6, 2, 4], [8, 10, 15]]) == [8, 10, 15]", "assert max_sum_list([[4, 2, 4], [1, 2, 2], [17, 8, 9]]) == [17, 8, 9]", "assert max_sum_list([[6, 7, 1], [4, 4, 9], [10, 6, 15]]) == [10, 6, 15]", "assert max_sum_list([[5, 1, 6], [2, 8, 1], [16, 6, 13]]) == [16, 6, 13]", "assert max_sum_list([[4, 3, 6], [3, 3, 1], [17, 10, 10]]) == [17, 10, 10]", "assert max_sum_list([[8, 6, 3], [2, 1, 1], [9, 8, 13]]) == [9, 8, 13]", "assert max_sum_list([[2, 4, 5], [7, 4, 3], [8, 8, 13]]) == [8, 8, 13]", "assert max_sum_list([[4, 6, 4], [5, 4, 7], [8, 16, 12]]) == [8, 16, 12]", "assert max_sum_list([[7, 7, 3], [5, 1, 4], [15, 11, 8]]) == [15, 11, 8]", "assert max_sum_list([[4, 2, 2], [10, 7, 7], [7, 16, 10]]) == [7, 16, 10]", "assert max_sum_list([[1, 7, 5], [2, 10, 1], [15, 9, 10]]) == [15, 9, 10]", "assert max_sum_list([[6, 6, 1], [10, 1, 7], [11, 15, 5]]) == [11, 15, 5]", "assert max_sum_list([[4, 3, 5], [2, 8, 2], [12, 10, 12]]) == [12, 10, 12]", "assert max_sum_list([[4, 1, 2], [6, 10, 7], [11, 16, 13]]) == [11, 16, 13]", "assert max_sum_list([[4, 3, 1], [9, 10, 4], [11, 13, 14]]) == [11, 13, 14]", "assert max_sum_list([[1, 4, 3], [7, 6, 4], [16, 8, 7]]) == [16, 8, 7]", "assert max_sum_list([[2, 7, 3], [7, 6, 4], [11, 16, 15]]) == [11, 16, 15]", "assert max_sum_list([[6, 2, 5], [11, 5, 2], [8, 11, 9]]) == [8, 11, 9]", "assert max_sum_list([[2, 8, 6]]) == [2, 8, 6]", "assert max_sum_list([[7, 7, 2]]) == [7, 7, 2]", "assert max_sum_list([[6, 5, 2]]) == [6, 5, 2]", "assert max_sum_list([[3, 1, 4]]) == [3, 1, 4]", "assert max_sum_list([[6, 4, 2]]) == [6, 4, 2]", "assert max_sum_list([[1, 3, 1]]) == [1, 3, 1]", "assert max_sum_list([[2, 7, 2]]) == [2, 7, 2]", "assert max_sum_list([[7, 1, 6]]) == [7, 1, 6]", "assert max_sum_list([[2, 3, 5]]) == [2, 3, 5]", "assert max_sum_list([[1, 2, 1]]) == [1, 2, 1]", "assert max_sum_list([[3, 7, 4]]) == [3, 7, 4]", "assert max_sum_list([[2, 3, 2]]) == [2, 3, 2]", "assert max_sum_list([[5, 5, 5]]) == [5, 5, 5]", "assert max_sum_list([[1, 6, 2]]) == [1, 6, 2]", "assert max_sum_list([[4, 5, 6]]) == [4, 5, 6]", "assert max_sum_list([[3, 4, 1]]) == [3, 4, 1]", "assert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "assert max_sum_list([[1, 4, 3]]) == [1, 4, 3]", "assert max_sum_list([[6, 3, 2]]) == [6, 3, 2]", "assert max_sum_list([[4, 2, 1]]) == [4, 2, 1]", "assert max_sum_list([[4, 7, 6]]) == [4, 7, 6]", "assert max_sum_list([[4, 4, 4]]) == [4, 4, 4]", "assert max_sum_list([[3, 7, 1]]) == [3, 7, 1]", "assert max_sum_list([[4, 5, 4]]) == [4, 5, 4]", "assert max_sum_list([[2, 6, 4]]) == [2, 6, 4]", "assert max_sum_list([[2, 3, 6]]) == [2, 3, 6]", "assert max_sum_list([[1, 4, 6]]) == [1, 4, 6]", "assert max_sum_list([[6, 5, 6]]) == [6, 5, 6]", "assert max_sum_list([[4, 8, 3]]) == [4, 8, 3]", "assert max_sum_list([[6, 4, 1]]) == [6, 4, 1]", "assert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "assert max_sum_list([[5, 5, 1]]) == [5, 5, 1]", "assert max_sum_list([[1, 1, 1]]) == [1, 1, 1]"], "entry_point": "max_sum_list", "repair_prompt": ["Write a function max_sum_list that returns the list in a list of lists which should be the one whose sum of elements is the highest.\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n", " Write a function max_sum_list that returns the list within a list of lists whose sum of elements is the highest.\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n", " Write a function max_sum_list to find the list within a list of lists whose elements have the highest sum.\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n"], "completions": ["from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Returns the list with the highest sum of elements in a list of lists.\n    \n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n        \n    Returns:\n        List[int]: The list with the highest sum of elements.\n    \"\"\"\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    result = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = lst\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n", "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n", "from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    if not lists:\n        return None\n    \n    max_sum = float('-inf')\n    result = None\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = sublist\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Function to find the list with the highest sum of elements.\n    \n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n    \n    Returns:\n        List[int]: The list with the highest sum of elements.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n", "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n", "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n", "from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    if not lists:\n        return None\n    \n    max_sum = 0\n    max_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n", "from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    if not lists:\n        return None\n    \n    max_sum = 0\n    max_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n", "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Returns the list with the highest sum from a list of lists of integers.\n    \n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n        \n    Returns:\n        List[int]: The list with the highest sum.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n            \n    return max_list\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that can determine the list within a list of lists that has the highest sum of elements. This function should be efficient and work well with various datasets. The user stories highlight the importance of ease of use and efficiency.\nrequirement pool:\n- The main code should be efficient in calculating the sum of elements in each list.\n- The function should return the list with the highest sum.\n- The user interface should be simple and intuitive.\n- The function should handle large datasets without performance issues.\n- The product should be visually appealing and easy on the eyes.\nTo create a function that returns the list with the highest sum of elements in a list of lists, we will use Python's built-in functions and libraries. The function will iterate through each list, calculate the sum of its elements, and compare these sums to find the list with the highest sum. This approach ensures efficiency and ease of implementation.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum'\n    In the requirement, it refers to finding the list within a list of lists that has the highest sum of its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `max_sum_list`, we will follow these steps:\n    1. Initialize a variable to keep track of the maximum sum found so far.\n    2. Initialize a variable to store the list with the maximum sum.\n    3. Iterate through each list in the list of lists.\n    4. For each list, calculate the sum of its elements.\n    5. Compare the calculated sum with the current maximum sum.\n    6. If the calculated sum is greater than the current maximum sum, update the maximum sum and store the current list.\n    7. After iterating through all lists, return the list with the maximum sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of elements in each list is 6, 15, 33, and 24 respectively. The list [10, 11, 12] has the highest sum of 33.\n\n# [extra code for edge case]\n    No extra code is needed for this edge case as the provided logic will handle it correctly.\n", "requirement analysis:\nThe requirement is to create a function that can identify the list within a list of lists that has the highest sum of elements. This is a straightforward task that involves iterating through the lists, calculating their sums, and comparing these sums to find the maximum. The function should be efficient and handle various sizes of input lists.\nrequirement pool:\n- The main code should be efficient and handle large lists.\n- The function should clearly return the list with the highest sum of elements.\n- The UI should be simple and intuitive for easy user interaction.\n- The function should be easy to understand and use.\n- Ensure the function works well on different types of input lists.\nTo implement the function `max_sum_list` efficiently, we will use Python's built-in functions and libraries. The function will iterate through each list in the provided list of lists, calculate the sum of each list, and then compare these sums to find the list with the highest sum. This approach ensures that the function is both simple and efficient.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum'\n    In the requirement, it means finding the list within a list of lists that has the greatest sum of its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through each list in the provided list of lists, calculate the sum of each list, and then compare these sums to find the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation:\n    The sums of the lists are 6, 15, 33, and 24 respectively. The list [10, 11, 12] has the highest sum of 33.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum.\n", "requirement analysis:\nThe requirement is to create a function that can determine the list within a list of lists that has the highest sum of elements. This function should be efficient and work well with various datasets. The user stories highlight the importance of ease of use and efficiency.\nrequirement pool:\n- The main code should be efficient in calculating the sum of elements in lists.\n- The function should be easy to understand and use.\n- The function should handle large datasets effectively.\n- The output should be clear and easy to interpret.\n- The function should be integrated into a user-friendly interface.\nTo create a function that efficiently determines the list within a list of lists with the highest sum of elements, we will use Python's built-in functions and libraries. The function will iterate through each list, calculate the sum of its elements, and compare these sums to find the list with the highest sum. This approach ensures simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum'\n    In the requirement, it means finding the list with the largest sum of its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through each list in the list of lists, calculate the sum of elements in each list, and compare these sums to find the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of elements in [10, 11, 12] is 33, which is the highest sum among all the lists.\n    max_sum_list([[1], [2], [3]]) = [3]\n    Explanation: The sum of elements in [3] is 3, which is the highest sum among all the lists with single-element lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum for any given list of lists.\n", "requirement analysis:\nThe requirement is to create a function that finds the list within a list of lists with the highest sum of elements. This function should be efficient and handle various inputs gracefully. The function should be easy to understand and use, ensuring it works correctly and is robust.\nrequirement pool:\n- The main code should be clear and concise\n- The function should handle different list sizes and values\n- Ensure the function is efficient and performs well\n- Include error handling for unexpected inputs\n- Provide documentation and examples for user guidance\nTo create a function that finds the list within a list of lists with the highest sum of elements, we will use Python's built-in functions and libraries. The function will iterate through each list, calculate the sum of each list's elements, and compare these sums to find the list with the highest sum. We will ensure the function is efficient and performs well by using list comprehensions and the max function.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum of elements'\n    In the requirement, it means finding the list within a list of lists where the sum of its elements is the greatest.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests iterating through each list, calculating the sum of each list's elements, and comparing these sums. This can be implemented using a loop to iterate through the list of lists, summing each sublist, and keeping track of the maximum sum and the corresponding sublist.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation:\n    The sums of the sublists are 6, 15, 33, and 24 respectively. The sublist [10, 11, 12] has the highest sum of 33.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the sublist with the highest sum.\n\n# [core concept]\n    'list of lists'\n    In the requirement, it refers to a list that contains other lists as its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using Python's built-in functions and libraries to find the list with the highest sum. This can be implemented using a loop to iterate through the list of lists, summing each sublist, and keeping track of the maximum sum and the corresponding sublist.\n\n# [edge case] \n    max_sum_list([[-1,-2,-3], [-4,-5,-6], [-10,-11,-12], [-7,-8,-9]]) = [-1, -2, -3]\n    Explanation:\n    The sums of the sublists are -6, -15, -33, and -24 respectively. The sublist [-1, -2, -3] has the highest sum of -6, even though it is the lowest sum among the sublists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the sublist with the highest sum, including cases with negative numbers.\n", "requirement analysis:\nThe requirement is to create a function that finds the list within a list of lists with the highest sum of elements. This is a straightforward task that involves iterating through the list of lists, calculating the sum of each list, and returning the one with the highest sum. The function should be efficient and handle both small and large lists.\nrequirement pool:\n- The main code should be efficient and handle large lists.\n- The function should clearly return the list with the highest sum of elements.\n- The UI should be simple and intuitive to use.\n- The function should be easy to understand and integrate into other projects.\n- The product should be visually appealing and responsive.\nTo implement the function `max_sum_list` efficiently, we will use Python's built-in functions and libraries. The function will iterate through each list within a list of lists, calculate the sum of each list, and return the list with the highest sum. This approach ensures simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of elements': the total value obtained by adding all the numbers in a list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    explanation: The sum of [10, 11, 12] is 33, which is the highest sum among all the lists.\n    max_sum_list([[-1,-2,-3], [0,0,0], [1,1,1]]) = [1, 1, 1]\n    explanation: The sum of [1, 1, 1] is 3, which is the highest sum among all the lists, even though all elements are positive, the list with the highest sum is the one with all positive numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum.\n\n# [code logic]\n    Here's the detailed logic to implement the function `max_sum_list`:\n\n    1. Define the function `max_sum_list` that takes a list of lists as input.\n    2. Initialize a variable to keep track of the maximum sum found so far and the corresponding list.\n    3. Iterate through each list in the list of lists.\n    4. For each list, calculate the sum of its elements.\n    5. Compare the sum with the current maximum sum and update the maximum sum and the corresponding list if the current sum is higher.\n    6. After iterating through all lists, return the list with the highest sum.\n\n    Here's the Python code implementing the above logic:\n\n    ```python\n    def max_sum_list(lists):\n        max_sum = float('-inf')\n        max_list = []\n        for lst in lists:\n            current_sum = sum(lst)\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lst\n        return max_list\n    ```\n", "requirement analysis:\nThe requirement is to create a function that finds the list within a list of lists with the highest sum of elements. This is a common task in data processing and should be implemented efficiently. The function should handle various sizes of input lists and return the correct list with the highest sum.\nrequirement pool:\n- The main code should be efficient and handle large datasets.\n- The function should return the correct list with the highest sum of elements.\n- The function should be easy to understand and use.\n- The function should be optimized for performance.\n- The function should handle edge cases such as empty lists or lists of lists.\nTo implement the function `max_sum_list` efficiently, we will use Python's built-in functions and libraries. The function will iterate through each list within a list of lists, calculate the sum of each list, and return the list with the highest sum. This approach ensures simplicity and efficiency, making it suitable for handling large datasets.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of elements': means the total value obtained by adding all the numbers in a list\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    explanation: The sum of [10, 11, 12] is 33, which is the highest sum among all the lists.\n    max_sum_list([[1], [2], [3]]) = [3]\n    explanation: Each list contains only one element, so the list with the highest sum is the one with the largest element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function can directly compare the sums of the lists and return the one with the highest sum.\n", "requirement analysis:\nThe requirement is to find the list within a list of lists that has the highest sum of elements. This is a common problem in data analysis and can be efficiently solved using Python's built-in functions. The function should be efficient and handle large lists without performance issues.\nrequirement pool:\n- The main code should be efficient in finding the list with the highest sum.\n- The function should handle large lists without performance issues.\n- The function should be easy to understand and use, with clear documentation.\n- The UI should be responsive and visually appealing.\n- The product should include advanced features for data analysis.\nTo solve the problem of finding the list within a list of lists that has the highest sum of elements, we will use Python's built-in functions to iterate through the lists and calculate the sum of each. We will then compare these sums to find the list with the highest sum. This approach ensures efficiency and handles large lists effectively.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum'\n    In the requirement, it refers to finding the list within a collection of lists that contains the greatest total value of its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through each list in the list of lists, calculate the sum of its elements, and keep track of the list with the highest sum encountered so far.\n\n# [edge case] \n    max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) = [10, 11, 12]\n    Explanation:\n    The sums of the lists are 6, 15, 33, and 24 respectively. The list [10, 11, 12] has the highest sum of 33.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum.\n", "requirement analysis:\nThe requirement is to find the list within a list of lists that has the highest sum of its elements. This is a straightforward task that involves iterating through each list, calculating the sum of its elements, and comparing these sums to find the maximum. The function should be efficient and handle various sizes of input lists.\nrequirement pool:\n- The main code should be efficient in calculating the sum of lists and finding the maximum.\n- The function should handle lists of varying lengths and nested lists.\n- The UI should be simple and intuitive, with clear instructions and feedback.\n- The product should be optimized for both mobile and desktop platforms.\n- Additional features like saving and loading game states should be considered for future development.\nTo implement the function `max_sum_list` efficiently, we will use Python's built-in functions and libraries. The function will iterate through each list within a list of lists, calculate the sum of each list's elements, and compare these sums to find the list with the highest sum. This approach ensures simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum'\n    In the requirement, it means finding the list within a collection of lists that has the greatest total value of its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests iterating through each list, calculating the sum of each list's elements, and comparing these sums. This can be implemented efficiently using Python's built-in functions and libraries.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation:\n    The sums of the lists are 6, 15, 33, and 24 respectively. The list [10, 11, 12] has the highest sum of 33.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum.\n", "requirement analysis:\nThe requirement is to find the list within a list of lists that has the highest sum of elements. This is a straightforward task that involves iterating through each list, calculating the sum of its elements, and comparing these sums to find the maximum. The function should be efficient and handle various sizes of input lists.\nrequirement pool:\n- The main code should be efficient in calculating the sum of lists and finding the maximum.\n- The function should handle different sizes of input lists.\n- The UI should be simple and intuitive, with clear instructions and feedback.\n- The product should be accessible and work well on both desktop and mobile devices.\n- The product should be visually appealing and have a responsive design.\nTo implement the function `max_sum_list` efficiently, we will use Python's built-in functions and libraries. The function will iterate through each list within a list of lists, calculate the sum of each list's elements, and compare these sums to find the list with the highest sum. This approach ensures simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum'\n    In the requirement, it means finding the list within a collection of lists that has the greatest total value of its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests iterating through each list, calculating the sum of each list's elements, and comparing these sums. This can be implemented efficiently using Python's built-in functions.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation:\n    The sums of the lists are 6, 15, 33, and 24 respectively. The list [10, 11, 12] has the highest sum of 33.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum.\n\n# [core concept]\n    'positive': means that all integers in the list are greater than 0\n\n# [phrase showing quantity relationship]\n    'more than': means that we need to find an integer greater than 0\n    'at least as many times': means that we need to find the integer whose count is greater than or equal to its value\n\n# [degree adverb] \n    'largest': means that we need the largest integer that appears greater or equal to its value\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    search([2,2,3,3,3]) = 3\n    Explanation: Both 2 and 3 appear at least as many times as themselves, but 3 is the largest number.\n    search([3,3,2,4,4,4]) = -1\n    Explanation: Number 2 appears 2 times, number 3 appears 3 times, and number 4 appears 3 times. None of them appear at least as many times as their value, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can set the initial return value to -1 and then find the largest integer that meets the condition.\n\n# [core concept]\n    'highest sum'\n    In the requirement, it means finding the list within a collection of lists that has the greatest total value of its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests iterating through each list, calculating the sum of each list's elements, and comparing these sums. This can be implemented efficiently using Python's built-in functions.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation:\n    The sums of the lists are 6, 15, 33, and 24 respectively. The list [10, 11, 12] has the highest sum of 33.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum.\n", "requirement analysis:\nThe requirement is to create a function that identifies the list within a list of lists with the highest sum of elements. This is a straightforward task that involves iterating through the lists, calculating their sums, and returning the list with the highest sum. The function should be efficient and handle various sizes of input lists.\nrequirement pool:\n- The main code should be efficient in calculating the sum of lists.\n- The function should return the correct list with the highest sum.\n- The function should handle edge cases such as empty lists or lists with negative numbers.\n- The function should be optimized for performance, especially for large lists.\n- The function should be well-documented and easy to understand.\nTo implement the function `max_sum_list` efficiently, we will use Python's built-in functions and libraries. The function will iterate through each list in the provided list of lists, calculate the sum of each list, and then return the list with the highest sum. This approach ensures simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of elements': the total value obtained by adding all the numbers in a list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    explanation: The sum of [10, 11, 12] is 33, which is the highest sum among the lists provided.\n    max_sum_list([[-1,-2,-3], [0,0,0], [1,1,1]]) = [1, 1, 1]\n    explanation: The sum of [1, 1, 1] is 3, which is the highest sum among the lists, even though all elements are positive.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum.\n\n# [code logic]\n    Here's the detailed logic to implement the function `max_sum_list`:\n\n    1. Define the function `max_sum_list` that takes a list of lists as input.\n    2. Initialize a variable to keep track of the maximum sum found so far and the corresponding list.\n    3. Iterate through each list in the input list of lists.\n    4. For each list, calculate the sum of its elements.\n    5. Compare the sum with the current maximum sum and update the maximum sum and the corresponding list if the current sum is higher.\n    6. After iterating through all lists, return the list with the highest sum.\n\n    Here's the Python code implementing the above logic:\n\n    ```python\n    def max_sum_list(lists):\n        max_sum = float('-inf')\n        max_list = []\n        for lst in lists:\n            current_sum = sum(lst)\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lst\n        return max_list\n    ```\n"], "test": ["def check(max_sum_list):\n\tassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ", "def check(max_sum_list):\n\tassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ", "def check(max_sum_list):\n\tassert max_sum_list([[2,3,1]])==[2,3,1] ", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 1], [2, 2, 6], [5, 16, 17], [9, 8, 14]]) == [5, 16, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 4], [9, 6, 1], [6, 15, 15], [2, 4, 11]]) == [6, 15, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 8], [9, 7, 8], [7, 9, 9], [3, 4, 10]]) == [7, 9, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 7, 7], [2, 6, 5], [14, 14, 14], [6, 13, 10]]) == [14, 14, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 6], [4, 1, 6], [15, 12, 16], [3, 10, 14]]) == [15, 12, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 7], [7, 1, 10], [13, 15, 14], [2, 12, 8]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 5], [5, 3, 11], [13, 13, 17], [4, 9, 13]]) == [13, 13, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 5], [9, 4, 6], [15, 6, 15], [8, 3, 9]]) == [15, 6, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 3], [9, 2, 5], [5, 13, 13], [7, 3, 6]]) == [5, 13, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 6], [8, 3, 4], [7, 16, 15], [9, 11, 10]]) == [7, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 6, 2], [8, 5, 10], [12, 13, 10], [6, 10, 4]]) == [12, 13, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 1, 2], [2, 1, 11], [8, 7, 9], [10, 11, 12]]) == [10, 11, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 6, 4], [3, 6, 9], [6, 7, 11], [7, 7, 4]]) == [6, 7, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 7, 6], [5, 7, 4], [10, 6, 10], [10, 4, 8]]) == [10, 6, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 7], [9, 10, 5], [11, 13, 17], [10, 5, 6]]) == [11, 13, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 2, 8], [8, 7, 8], [13, 11, 11], [2, 3, 10]]) == [13, 11, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 2], [8, 10, 11], [5, 9, 9], [7, 12, 11]]) == [7, 12, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 1, 3], [2, 8, 3], [13, 14, 7], [8, 11, 14]]) == [13, 14, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 3, 3], [8, 5, 6], [14, 10, 14], [8, 8, 5]]) == [14, 10, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 2, 8], [2, 4, 2], [13, 13, 16], [7, 7, 7]]) == [13, 13, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 1, 7], [3, 2, 1], [10, 11, 13], [7, 6, 13]]) == [10, 11, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 8], [2, 9, 8], [13, 7, 11], [10, 11, 10]]) == [13, 7, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 8], [3, 2, 8], [6, 16, 12], [5, 6, 8]]) == [6, 16, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 2, 3], [7, 8, 6], [14, 7, 8], [5, 8, 8]]) == [14, 7, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 6, 6], [6, 6, 3], [8, 11, 16], [4, 8, 5]]) == [8, 11, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 4], [1, 6, 9], [9, 6, 17], [3, 6, 10]]) == [9, 6, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 5, 1], [8, 1, 6], [10, 7, 14], [10, 6, 4]]) == [10, 7, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 6], [6, 1, 6], [7, 9, 16], [10, 4, 14]]) == [7, 9, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 2, 7], [2, 9, 9], [13, 8, 12], [2, 13, 4]]) == [13, 8, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 2], [2, 3, 11], [11, 7, 14], [8, 10, 9]]) == [11, 7, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 3, 1], [5, 5, 2], [13, 15, 14], [10, 10, 13]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 6, 2], [4, 9, 1], [8, 12, 9], [7, 6, 4]]) == [8, 12, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 6, 7], [2, 4, 4], [12, 10, 8], [3, 8, 6]]) == [12, 10, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 3, 6], [4, 2, 9], [13, 15, 14]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6], [8, 9, 1], [7, 9, 11]]) == [7, 9, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 3, 3], [6, 3, 5], [16, 9, 7]]) == [16, 9, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 6], [9, 4, 8], [10, 11, 6]]) == [10, 11, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 4], [5, 8, 2], [9, 7, 12]]) == [9, 7, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 1], [10, 10, 9], [14, 14, 12]]) == [14, 14, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 2, 1], [8, 10, 7], [16, 11, 11]]) == [16, 11, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 5, 3], [9, 8, 2], [11, 13, 13]]) == [11, 13, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 4, 1], [11, 4, 6], [13, 11, 13]]) == [13, 11, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 4, 3], [10, 2, 4], [9, 8, 10]]) == [9, 8, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 5], [1, 7, 8], [7, 13, 7]]) == [7, 13, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 6], [8, 2, 1], [14, 8, 15]]) == [14, 8, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 5], [11, 5, 3], [13, 13, 10]]) == [13, 13, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 6, 2], [7, 10, 1], [12, 11, 6]]) == [12, 11, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 4, 6], [1, 9, 2], [7, 16, 15]]) == [7, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[8, 3, 6], [6, 2, 4], [8, 10, 15]]) == [8, 10, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 4], [1, 2, 2], [17, 8, 9]]) == [17, 8, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 7, 1], [4, 4, 9], [10, 6, 15]]) == [10, 6, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6], [2, 8, 1], [16, 6, 13]]) == [16, 6, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 6], [3, 3, 1], [17, 10, 10]]) == [17, 10, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[8, 6, 3], [2, 1, 1], [9, 8, 13]]) == [9, 8, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 4, 5], [7, 4, 3], [8, 8, 13]]) == [8, 8, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 4], [5, 4, 7], [8, 16, 12]]) == [8, 16, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 7, 3], [5, 1, 4], [15, 11, 8]]) == [15, 11, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 2], [10, 7, 7], [7, 16, 10]]) == [7, 16, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 5], [2, 10, 1], [15, 9, 10]]) == [15, 9, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 6, 1], [10, 1, 7], [11, 15, 5]]) == [11, 15, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 5], [2, 8, 2], [12, 10, 12]]) == [12, 10, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 1, 2], [6, 10, 7], [11, 16, 13]]) == [11, 16, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 1], [9, 10, 4], [11, 13, 14]]) == [11, 13, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 3], [7, 6, 4], [16, 8, 7]]) == [16, 8, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 7, 3], [7, 6, 4], [11, 16, 15]]) == [11, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 5], [11, 5, 2], [8, 11, 9]]) == [8, 11, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 8, 6]]) == [2, 8, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 7, 2]]) == [7, 7, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 5, 2]]) == [6, 5, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 1, 4]]) == [3, 1, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 2]]) == [6, 4, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 3, 1]]) == [1, 3, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 7, 2]]) == [2, 7, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 1, 6]]) == [7, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 5]]) == [2, 3, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 2, 1]]) == [1, 2, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 7, 4]]) == [3, 7, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 2]]) == [2, 3, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 5]]) == [5, 5, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 6, 2]]) == [1, 6, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 6]]) == [4, 5, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 4, 1]]) == [3, 4, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 3]]) == [1, 4, 3]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 3, 2]]) == [6, 3, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 1]]) == [4, 2, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 7, 6]]) == [4, 7, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 4, 4]]) == [4, 4, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 7, 1]]) == [3, 7, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 4]]) == [4, 5, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 6, 4]]) == [2, 6, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 6]]) == [2, 3, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 6]]) == [1, 4, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 5, 6]]) == [6, 5, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 8, 3]]) == [4, 8, 3]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 1]]) == [6, 4, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 1]]) == [5, 5, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 1]]) == [1, 1, 1]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Returns the list with the highest sum from a list of lists of integers.\n    \n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n        \n    Returns:\n        List[int]: The list with the highest sum.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n            \n    return max_list\n", "passed": true, "pass": true, "pass_num": 10, "round": 391, "mutate_method": "condense_two2one", "parent_index": 449}
