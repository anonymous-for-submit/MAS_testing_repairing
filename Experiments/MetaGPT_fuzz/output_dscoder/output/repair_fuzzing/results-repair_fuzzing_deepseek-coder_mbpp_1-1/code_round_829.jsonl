{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 754, "prompt": "We define an element as common to the lists l1, l2, and l3 if it shows up in all three lists at the identical index. Write a function to find common elements from three lists. The function should return a list.", "code": "def extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result", "test_imports": [], "test_list": ["assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]", "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]", "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]", "assert extract_index_list([4, 6, 5, 3, 6, 8, 2], [1, 6, 1, 8, 6, 7, 2], [3, 2, 5, 3, 5, 7, 7]) == []", "assert extract_index_list([1, 6, 5, 9, 1, 2, 3], [3, 1, 1, 7, 8, 1, 5], [5, 1, 5, 1, 7, 9, 10]) == []", "assert extract_index_list([6, 3, 8, 7, 6, 5, 5], [3, 2, 5, 5, 1, 5, 10], [5, 6, 5, 7, 7, 3, 12]) == []", "assert extract_index_list([5, 2, 2, 8, 2, 7, 12], [5, 3, 4, 4, 2, 10, 4], [5, 6, 7, 2, 3, 8, 11]) == [5]", "assert extract_index_list([3, 5, 8, 9, 2, 6, 9], [4, 1, 4, 1, 1, 8, 11], [3, 6, 7, 6, 1, 6, 2]) == []", "assert extract_index_list([6, 2, 5, 7, 6, 11, 7], [5, 6, 7, 7, 9, 3, 3], [1, 3, 2, 3, 4, 10, 8]) == []", "assert extract_index_list([4, 6, 5, 6, 5, 4, 8], [3, 2, 4, 5, 5, 6, 12], [1, 3, 6, 4, 7, 7, 4]) == []", "assert extract_index_list([3, 3, 3, 4, 9, 10, 6], [5, 4, 3, 7, 6, 8, 10], [4, 3, 4, 3, 1, 4, 2]) == []", "assert extract_index_list([4, 1, 6, 2, 8, 8, 4], [5, 6, 7, 8, 1, 2, 2], [5, 2, 5, 6, 1, 9, 3]) == []", "assert extract_index_list([5, 1, 4, 8, 2, 9, 2], [4, 2, 4, 4, 3, 9, 11], [4, 6, 7, 8, 4, 6, 5]) == []", "assert extract_index_list([2, 2, 1, 1, 8, 6, 9], [1, 4, 5, 1, 9, 3, 7], [4, 5, 4, 7, 3, 5, 8]) == []", "assert extract_index_list([2, 1, 3, 8, 4, 7, 2], [2, 1, 7, 5, 2, 10, 4], [1, 4, 3, 4, 9, 3, 11]) == []", "assert extract_index_list([3, 4, 8, 7, 3, 4, 8], [4, 3, 5, 8, 2, 2, 9], [4, 3, 7, 3, 6, 5, 3]) == []", "assert extract_index_list([1, 2, 5, 9, 2, 5, 11], [4, 6, 7, 6, 2, 4, 12], [2, 4, 6, 6, 5, 1, 7]) == []", "assert extract_index_list([4, 5, 5, 9, 6, 2, 4], [5, 2, 3, 8, 4, 6, 11], [1, 2, 2, 1, 3, 8, 10]) == []", "assert extract_index_list([5, 1, 8, 3, 9, 10, 4], [5, 4, 2, 2, 4, 1, 5], [1, 5, 7, 6, 6, 7, 6]) == []", "assert extract_index_list([2, 2, 6, 9, 8, 11, 11], [5, 4, 2, 1, 8, 4, 7], [3, 4, 2, 6, 6, 6, 6]) == []", "assert extract_index_list([5, 1, 6, 9, 10, 1, 8], [2, 2, 7, 8, 9, 7, 11], [5, 2, 2, 1, 6, 1, 9]) == []", "assert extract_index_list([5, 3, 7, 4, 1, 5, 8], [4, 6, 2, 7, 6, 7, 7], [4, 3, 5, 1, 1, 7, 5]) == []", "assert extract_index_list([1, 5, 7, 7, 5, 11, 9], [2, 4, 6, 1, 5, 1, 3], [1, 2, 2, 2, 3, 6, 9]) == []", "assert extract_index_list([4, 3, 1, 2, 9, 10, 5], [5, 3, 7, 6, 9, 2, 8], [1, 6, 3, 2, 8, 8, 12]) == []", "assert extract_index_list([1, 5, 1, 2, 6, 6, 4], [2, 3, 3, 5, 4, 5, 8], [4, 5, 3, 4, 5, 5, 8]) == []", "assert extract_index_list([2, 6, 5, 8, 9, 3, 5], [5, 5, 5, 2, 9, 1, 4], [3, 5, 4, 8, 3, 6, 3]) == []", "assert extract_index_list([5, 5, 4, 9, 9, 4, 5], [2, 4, 1, 1, 7, 7, 9], [4, 4, 3, 2, 3, 1, 7]) == []", "assert extract_index_list([1, 5, 2, 3, 5, 1, 12], [2, 1, 2, 5, 7, 6, 11], [1, 6, 4, 2, 4, 8, 7]) == []", "assert extract_index_list([4, 1, 4, 4, 6, 4, 9], [4, 2, 5, 2, 5, 1, 2], [2, 5, 7, 4, 5, 2, 10]) == []", "assert extract_index_list([5, 3, 1, 8, 8, 7, 12], [3, 3, 3, 7, 8, 2, 2], [1, 6, 1, 2, 1, 8, 12]) == []", "assert extract_index_list([4, 5, 2, 3, 1, 10, 6], [2, 2, 5, 5, 8, 5, 9], [4, 1, 3, 1, 9, 2, 2]) == []", "assert extract_index_list([4, 4, 2, 7, 10, 6, 3], [4, 3, 6, 3, 4, 10, 9], [5, 6, 2, 3, 9, 3, 10]) == []", "assert extract_index_list([6, 1, 6, 4, 4, 10, 6], [4, 6, 1, 4, 6, 9, 9], [2, 6, 2, 7, 9, 5, 3]) == []", "assert extract_index_list([4, 5, 7, 2, 9, 1, 7], [3, 6, 1, 2, 8, 8, 2], [3, 1, 5, 5, 9, 3, 3]) == []", "assert extract_index_list([6, 6, 5, 4, 10, 6, 5], [4, 6, 2, 2, 2, 7, 6], [5, 1, 1, 3, 2, 9, 6]) == []", "assert extract_index_list([6, 4, 3, 3, 1, 6, 4], [3, 2, 6, 3, 9, 1, 3], [4, 3, 1, 8, 4, 7, 6]) == []", "assert extract_index_list([1, 5, 3, 7, 8, 9, 6], [4, 5, 1, 7, 2, 7, 4], [5, 5, 1, 6, 1, 8, 11]) == [5]", "assert extract_index_list([4, 3, 2, 2, 5, 7, 2], [2, 4, 7, 6, 9, 4, 3], [2, 1, 6, 2, 5, 1, 8]) == []", "assert extract_index_list([1, 1, 2, 8, 5, 2, 7], [5, 4, 4, 5, 6, 3, 9], [2, 2, 6, 1, 8, 10, 8]) == []", "assert extract_index_list([4, 1, 6, 2, 2, 11, 12], [1, 6, 4, 4, 6, 5, 2], [4, 1, 6, 6, 7, 5, 11]) == []", "assert extract_index_list([4, 6, 2, 9, 1, 9, 11], [4, 1, 1, 5, 6, 7, 8], [2, 6, 4, 3, 6, 8, 5]) == []", "assert extract_index_list([2, 3, 3, 2, 7, 11, 10], [3, 5, 2, 5, 4, 11, 5], [1, 2, 5, 7, 7, 1, 12]) == []", "assert extract_index_list([5, 1, 5, 7, 4, 9, 4], [2, 3, 3, 8, 4, 11, 5], [3, 4, 4, 8, 8, 8, 12]) == []", "assert extract_index_list([2, 1, 7, 1, 7, 1, 8], [3, 2, 4, 5, 5, 10, 5], [4, 4, 2, 8, 4, 10, 12]) == []", "assert extract_index_list([1, 6, 4, 6, 8, 11, 10], [3, 4, 3, 1, 8, 2, 9], [3, 6, 7, 3, 6, 6, 11]) == []", "assert extract_index_list([2, 4, 8, 8, 2, 3, 3], [2, 2, 2, 5, 1, 9, 2], [4, 1, 4, 4, 6, 1, 8]) == []", "assert extract_index_list([4, 1, 8, 3, 6, 7, 9], [4, 3, 6, 3, 4, 8, 10], [3, 6, 1, 1, 5, 1, 4]) == []", "assert extract_index_list([3, 3, 4, 8, 10, 6, 3], [3, 6, 1, 4, 4, 10, 2], [2, 4, 7, 4, 8, 3, 12]) == []", "assert extract_index_list([2, 1, 3, 7, 7, 1, 3], [2, 1, 6, 3, 4, 2, 8], [1, 2, 6, 1, 5, 3, 7]) == []", "assert extract_index_list([3, 4, 2, 5, 4, 3, 10], [3, 5, 7, 3, 1, 3, 8], [5, 1, 4, 4, 3, 4, 4]) == []", "assert extract_index_list([3, 2, 6, 2, 10, 3, 7], [4, 3, 2, 1, 1, 5, 9], [3, 5, 4, 8, 5, 11, 2]) == []", "assert extract_index_list([1, 6, 2, 6, 8, 4, 8], [4, 1, 1, 1, 7, 5, 4], [5, 3, 6, 3, 4, 7, 9]) == []", "assert extract_index_list([2, 1, 1, 7, 2, 7, 2], [5, 6, 2, 7, 2, 6, 10], [5, 1, 7, 4, 2, 8, 5]) == [2]", "assert extract_index_list([6, 2, 3, 7, 6, 8, 12], [2, 4, 5, 6, 9, 2, 8], [4, 4, 2, 6, 8, 6, 9]) == []", "assert extract_index_list([6, 4, 5, 3, 8, 3, 3], [4, 2, 2, 4, 7, 1, 1], [3, 4, 5, 6, 5, 7, 5]) == []", "assert extract_index_list([5, 2, 3, 6, 4, 4, 3], [2, 5, 1, 2, 8, 9, 8], [2, 3, 5, 1, 9, 10, 10]) == []", "assert extract_index_list([2, 2, 5, 1, 10, 3, 8], [4, 4, 7, 6, 5, 3, 7], [2, 5, 5, 8, 2, 9, 5]) == []", "assert extract_index_list([1, 3, 7, 4, 4, 8, 10], [2, 5, 6, 5, 6, 7, 9], [5, 6, 3, 2, 8, 10, 5]) == []", "assert extract_index_list([1, 3, 8, 6, 8, 6, 12], [5, 1, 6, 3, 1, 10, 2], [5, 6, 1, 8, 7, 2, 10]) == []", "assert extract_index_list([1, 6, 8, 2, 5, 3, 9], [4, 3, 3, 2, 9, 11, 2], [5, 1, 5, 4, 1, 4, 6]) == []", "assert extract_index_list([5, 6, 8, 8, 2, 9, 2], [5, 4, 7, 1, 8, 11, 7], [2, 5, 7, 1, 1, 8, 6]) == []", "assert extract_index_list([3, 6, 8, 3, 4, 11, 6], [1, 5, 6, 3, 1, 2, 3], [4, 3, 5, 3, 7, 5, 8]) == [3]", "assert extract_index_list([5, 5, 1, 7, 8, 3, 3], [4, 5, 3, 4, 8, 9, 8], [3, 2, 6, 5, 4, 9, 3]) == []", "assert extract_index_list([2, 3, 1, 8, 8, 8, 2], [4, 5, 2, 3, 7, 6, 1], [5, 2, 5, 6, 2, 7, 5]) == []", "assert extract_index_list([4, 6, 4, 8, 1, 6, 5], [5, 2, 2, 8, 8, 3, 6], [2, 5, 5, 2, 9, 10, 12]) == []", "assert extract_index_list([5, 3, 4, 8, 3, 9, 4], [2, 4, 3, 4, 3, 1, 1], [3, 2, 6, 1, 2, 4, 9]) == []", "assert extract_index_list([2, 4, 4, 8, 2, 2, 10], [4, 2, 5, 5, 6, 6, 6], [4, 6, 1, 7, 6, 8, 6]) == []", "assert extract_index_list([6, 3, 6, 6, 1, 3, 10], [2, 5, 2, 8, 1, 7, 10], [3, 1, 7, 5, 5, 8, 7]) == []", "assert extract_index_list([2, 1, 2, 6, 2, 1, 4], [5, 3, 2, 4, 2, 3, 5], [4, 5, 2, 3, 6, 2, 9]) == [2]", "assert extract_index_list([4, 3, 2, 5, 11, 1, 7], [5, 6, 6, 2, 7, 9, 11], [4, 2, 3, 6, 3, 6, 6]) == []", "assert extract_index_list([5, 2, 3, 2, 4, 9, 4], [1, 2, 1, 1, 5, 6, 7], [4, 4, 2, 2, 1, 7, 7]) == []", "assert extract_index_list([2, 3, 7, 9, 7, 7, 3], [4, 4, 3, 8, 8, 9, 11], [3, 5, 6, 4, 4, 9, 12]) == []", "assert extract_index_list([3, 2, 4, 8, 7, 4, 7], [2, 3, 1, 1, 1, 2, 9], [1, 3, 4, 3, 3, 3, 11]) == []", "assert extract_index_list([3, 1, 4, 6, 2, 9, 10], [3, 4, 3, 6, 7, 10, 12], [1, 2, 2, 8, 3, 3, 3]) == []", "assert extract_index_list([6, 4, 2, 9, 7, 1, 5], [2, 5, 1, 1, 5, 10, 6], [2, 4, 1, 6, 2, 8, 9]) == []", "assert extract_index_list([4, 5, 2, 6, 8, 9, 6], [1, 6, 3, 4, 7, 3, 6], [1, 4, 7, 2, 4, 5, 10]) == []", "assert extract_index_list([3, 5, 1, 5, 5, 7, 11], [4, 2, 5, 4, 6, 8, 8], [5, 4, 1, 1, 6, 4, 3]) == []", "assert extract_index_list([6, 6, 3, 4, 8, 8, 10], [2, 2, 4, 1, 8, 8, 11], [1, 5, 1, 6, 4, 4, 12]) == []", "assert extract_index_list([3, 2, 5, 5, 8, 5, 7], [1, 2, 5, 2, 4, 4, 10], [3, 5, 6, 3, 5, 9, 6]) == []", "assert extract_index_list([4, 3, 7, 3, 10, 1, 3], [5, 3, 2, 5, 2, 9, 3], [1, 6, 5, 6, 4, 9, 7]) == []", "assert extract_index_list([1, 3, 1, 6, 3, 5, 10], [1, 1, 6, 7, 7, 6, 11], [5, 3, 7, 4, 2, 9, 12]) == []", "assert extract_index_list([5, 6, 8, 4, 2, 1, 2], [4, 4, 2, 4, 5, 2, 5], [4, 3, 6, 7, 7, 9, 6]) == []", "assert extract_index_list([2, 4, 1, 4, 4, 9, 5], [2, 4, 7, 3, 5, 2, 6], [4, 6, 1, 2, 7, 6, 4]) == []", "assert extract_index_list([3, 1, 6, 8, 3, 10, 2], [4, 2, 2, 8, 9, 8, 10], [2, 6, 3, 2, 7, 1, 5]) == []", "assert extract_index_list([6, 2, 7, 4, 7, 2, 1], [5, 6, 5, 2, 6, 3, 2], [1, 5, 5, 3, 2, 4, 4]) == []", "assert extract_index_list([3, 6, 7, 6, 4, 4, 1], [5, 1, 5, 6, 9, 7, 11], [1, 3, 6, 5, 6, 9, 6]) == []", "assert extract_index_list([1, 6, 1, 1, 3, 5, 4], [3, 6, 5, 2, 7, 5, 7], [1, 6, 1, 7, 4, 5, 8]) == [6, 5]", "assert extract_index_list([4, 4, 1, 3, 5, 8, 9], [3, 5, 2, 8, 5, 1, 3], [4, 5, 5, 1, 8, 10, 7]) == []", "assert extract_index_list([1, 5, 3, 4, 11, 6, 8], [3, 1, 6, 3, 8, 8, 5], [5, 5, 4, 8, 6, 10, 9]) == []", "assert extract_index_list([1, 3, 6, 1, 5, 2, 10], [5, 3, 2, 4, 2, 2, 4], [2, 5, 4, 7, 2, 2, 2]) == [2]", "assert extract_index_list([1, 2, 6, 2, 2, 8, 1], [3, 3, 4, 1, 2, 6, 6], [5, 1, 6, 5, 4, 8, 9]) == []", "assert extract_index_list([4, 5, 4, 7, 3, 2, 4], [1, 3, 7, 5, 3, 2, 9], [5, 1, 5, 3, 6, 8, 8]) == []", "assert extract_index_list([6, 3, 5, 7, 3, 2, 8], [3, 5, 3, 8, 8, 5, 5], [5, 3, 3, 5, 8, 3, 11]) == []", "assert extract_index_list([3, 6, 8, 3, 5, 10, 3], [1, 3, 6, 8, 6, 6, 11], [3, 1, 6, 7, 6, 5, 4]) == []", "assert extract_index_list([4, 4, 8, 8, 5, 1, 4], [1, 6, 3, 7, 7, 1, 9], [4, 1, 5, 8, 1, 9, 10]) == []", "assert extract_index_list([2, 2, 2, 5, 10, 7, 11], [3, 6, 2, 5, 4, 6, 6], [3, 5, 1, 2, 6, 6, 2]) == []", "assert extract_index_list([4, 2, 5, 2, 6, 5, 6], [5, 2, 2, 2, 3, 9, 8], [2, 2, 7, 1, 5, 1, 4]) == [2]", "assert extract_index_list([2, 3, 8, 9, 11, 3, 10], [4, 5, 7, 3, 3, 9, 3], [5, 1, 4, 7, 9, 10, 7]) == []", "assert extract_index_list([2, 2, 8, 1, 7, 2, 10], [5, 5, 4, 7, 2, 9, 10], [5, 2, 3, 4, 2, 8, 2]) == []", "assert extract_index_list([4, 1, 2, 7, 3, 9, 7], [2, 6, 4, 2, 4, 8, 2], [4, 1, 1, 5, 6, 2, 9]) == []", "assert extract_index_list([6, 5, 3, 8, 9, 10, 11], [4, 1, 2, 4, 3, 7, 9], [3, 6, 4, 1, 5, 4, 12]) == []", "assert extract_index_list([2, 6, 6, 4, 11, 1, 8], [3, 4, 7, 5, 8, 8, 9], [5, 4, 6, 7, 5, 4, 11]) == []"], "entry_point": "extract_index_list", "repair_prompt": ["We define an element as common to the lists l1, l2, and l3 if it shows up in all three lists at the identical index. Write a function extract_index_list to find common elements from three lists. The function should return a list.\nextract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n", " We define an element as common to the lists l1, l2, and l3 if it appears in all three lists at the same index. Write a function extract_index_list to find common elements from three lists. The function should return a list.\nextract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n", " We define an element as common to the lists l1, l2, and l3 if it shows up in all three lists at the identical index. Write a function extract_index_list to find common elements from three lists. The function should return a list.\nextract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n"], "completions": ["from typing import List\n## main.py\n\ndef extract_index_list(l1: list, l2: list, l3: list) -> list:\n    \"\"\"\n    Extracts common elements across three lists based on their indices.\n\n    Args:\n        l1 (list): The first list of integers.\n        l2 (list): The second list of integers.\n        l3 (list): The third list of integers.\n\n    Returns:\n        list: A list of common elements across the three lists based on their indices.\n    \"\"\"\n    # Validate inputs\n    if not isinstance(l1, list) or not isinstance(l2, list) or not isinstance(l3, list):\n        return []\n    if not all(isinstance(i, int) for i in l1) or not all(isinstance(i, int) for i in l2) or not all(isinstance(i, int) for i in l3):\n        return []\n\n    # Initialize the result list\n    result = []\n\n    # Get the length of the shortest list to avoid index out of range\n    min_length = min(len(l1), len(l2), len(l3))\n\n    # Iterate through the lists based on the shortest length\n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n\n    return result\n", "from typing import List\n## main.py\n\ndef extract_index_list(l1: list, l2: list, l3: list) -> list:\n    \"\"\"\n    Extracts elements that are common at the same index in three lists.\n\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n        l3 (list): The third list of elements.\n\n    Returns:\n        list: A list of elements that are common at the same index in all three lists.\n    \"\"\"\n    result = []\n    # Determine the length of the shortest list to avoid index out of range\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    \n    return result\n", "from typing import List\n## main.py\n\ndef extract_index_list(l1: list, l2: list, l3: list) -> list:\n    \"\"\"\n    Extracts elements that are common to all three lists at the same index.\n\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n        l3 (list): The third list of elements.\n\n    Returns:\n        list: A list of elements that are common to all three lists at the same index.\n    \"\"\"\n    common_elements = []\n    \n    # Iterate through the indices of the lists\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements\n", "from typing import List\n## main.py\n\ndef extract_index_list(l1: list, l2: list, l3: list) -> list:\n    \"\"\"\n    Extracts common elements across three lists based on their indices.\n\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n        l3 (list): The third list of elements.\n\n    Returns:\n        list: A list of common elements across the three lists based on their indices.\n    \"\"\"\n    result = []\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts common elements across three lists based on their indices.\n\n    Args:\n        l1 (List[int]): The first list of integers.\n        l2 (List[int]): The second list of integers.\n        l3 (List[int]): The third list of integers.\n\n    Returns:\n        List[int]: A list of common elements across the three lists based on their indices.\n    \"\"\"\n    common_elements = []\n    \n    # Iterate through the indices of the lists\n    for i in range(min(len(l1), len(l2), len(l3))):\n        # Check if the elements at the current index in all three lists are the same\n        if l1[i] == l2[i] == l3[i]:\n            # If they are the same, append the element to common_elements\n            common_elements.append(l1[i])\n    \n    return common_elements\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts common elements across three lists based on their positions.\n\n    Args:\n        l1 (List[int]): The first list of integers.\n        l2 (List[int]): The second list of integers.\n        l3 (List[int]): The third list of integers.\n\n    Returns:\n        List[int]: A list of common elements that appear at the same index in all three lists.\n    \"\"\"\n    common_elements = []\n    \n    # Use zip to iterate over the lists in parallel\n    for e1, e2, e3 in zip(l1, l2, l3):\n        if e1 == e2 == e3:\n            common_elements.append(e1)\n    \n    return common_elements\n", "from typing import List\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts common elements across three lists based on their indices.\n\n    Args:\n        l1 (List[int]): The first list of integers.\n        l2 (List[int]): The second list of integers.\n        l3 (List[int]): The third list of integers.\n\n    Returns:\n        List[int]: A list of integers representing common elements at the same indices across all three lists.\n    \"\"\"\n    result = []\n    # Determine the length of the shortest list to avoid index out of range\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Iterate through the indices of the lists\n    for i in range(min_length):\n        # Compare the elements at the current index across the three lists\n        if l1[i] == l2[i] == l3[i]:\n            # If the elements match, add them to the result list\n            result.append(l1[i])\n    \n    return result\n", "from typing import List\n## main.py\n\ndef extract_index_list(l1: list, l2: list, l3: list) -> list:\n    \"\"\"\n    Extracts common elements based on their indices from three input lists.\n\n    Args:\n        l1 (list): The first input list.\n        l2 (list): The second input list.\n        l3 (list): The third input list.\n\n    Returns:\n        list: A list of common elements based on their indices across the three lists.\n    \"\"\"\n    result = []\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts common elements across three lists based on their indices.\n\n    Args:\n        l1 (List[int]): The first list of integers.\n        l2 (List[int]): The second list of integers.\n        l3 (List[int]): The third list of integers.\n\n    Returns:\n        List[int]: A list of common elements across the three lists based on their indices.\n    \"\"\"\n    common_elements = []\n    \n    # Determine the length of the shortest list to avoid index out of range\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts common elements across three lists based on their indices.\n\n    Args:\n        l1 (List[int]): The first list of integers.\n        l2 (List[int]): The second list of integers.\n        l3 (List[int]): The third list of integers.\n\n    Returns:\n        List[int]: A list of common elements across the three lists based on their indices.\n    \"\"\"\n    common_elements = []\n    \n    # Determine the length of the shortest list to avoid index out of range\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their indices. This is a straightforward task that requires basic list manipulation and comparison skills. The function should be efficient and handle lists of varying lengths without performance degradation.\nrequirement pool:\n- The main code should be concise and readable, making it easy for users to understand and implement.\n- The function should handle edge cases such as lists of different lengths gracefully.\n- Ensure the function returns results quickly even for large lists.\n- Implement error handling to manage cases where the input is not a list or contains non-integer elements.\n- Include documentation and examples to guide users on how to use the function correctly.\nTo create a function that identifies common elements across three lists based on their indices, we will use Python's built-in capabilities for list manipulation and comparison. The function will iterate through the lists, comparing elements at each index across all three lists. If an element is common to all three lists at the same index, it will be added to the result list. The function will handle edge cases such as lists of different lengths gracefully and include error handling to manage cases where the input is not a list or contains non-integer elements.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we are looking for elements that are present and occur at the same index in all three lists. This is crucial for identifying the common elements across the lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function will iterate through the lists, comparing elements at each index across all three lists. If an element is common to all three lists at the same index, it will be added to the result list.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2], [1, 2, 3, 4]) = [1, 2]\n    Explanation: The function should return [1, 2] as these elements are present and occur at the same index in all three lists.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that are common to all three lists at the same index, so the function should return an empty list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the input lists are of different lengths. This can be done by checking the length of each list and returning an empty list if they are not equal.\n        if len(l1) != len(l2) or len(l2) != len(l3):\n            return []\n        (other code)\n\n    Additionally, we should include error handling to manage cases where the input is not a list or contains non-integer elements.\n        if not isinstance(l1, list) or not isinstance(l2, list) or not isinstance(l3, list):\n            return []\n        if not all(isinstance(i, int) for i in l1) or not all(isinstance(i, int) for i in l2) or not all(isinstance(i, int) for i in l3):\n            return []\n", "requirement analysis:\nThe requirement is to find common elements at the same index in three lists. This is a straightforward task that involves iterating through the lists and comparing elements at each index. The solution should be efficient and handle cases where the lists may have different lengths.\nrequirement pool:\n- The main code should efficiently find common elements at the same index in three lists.\n- Ensure the function handles lists of different lengths gracefully.\n- Implement the function to return a list of common elements.\n- Test the function with various inputs to ensure it works as expected.\n- Optimize the function for performance, especially for large lists.\nTo solve the problem of finding common elements at the same index in three lists, we will use Python's built-in capabilities and the itertools library for efficient iteration. The function will iterate through the lists, compare elements at each index, and collect those that are common to all three lists.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we are looking for elements that are present and occur at the same position in all three lists. This is crucial for identifying the common elements across the lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests iterating through the lists and comparing elements at each index. This approach is logical as it ensures that we are checking each index for common elements.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all three lists at each index. Therefore, all elements are included in the result.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that are common to all three lists at each index. Therefore, the result is an empty list.\n    extract_index_list([1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]) = [4]\n    Explanation: The element 4 is the only element that appears at the same index in all three lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of iterating through the lists and comparing elements at each index inherently handles cases where the lists are of different lengths or contain no common elements.\n", "requirement analysis:\nThe requirement is to find common elements across three lists based on their indices. This is a straightforward problem that can be solved using a simple loop to iterate through the lists and compare elements at each index.\nrequirement pool:\n- The main code should efficiently find common elements across three lists.\n- The function should handle lists of varying lengths.\n- Ensure the function is optimized for performance.\n- Implement error handling for non-list inputs.\n- Include documentation and test cases for the function.\nTo solve the problem of finding common elements across three lists based on their indices, we will use a straightforward approach. We will iterate through the lists, comparing elements at each index to identify those that are common to all three lists. This approach will be efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we are looking for elements that are present and occur at the same position in all three given lists. This is crucial for identifying the common elements across the lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `extract_index_list`, we will follow these steps:\n    1. Initialize an empty list to store the common elements.\n    2. Iterate through the elements of the lists using their indices.\n    3. Check if the element at the current index in all three lists is the same.\n    4. If it is, add it to the list of common elements.\n    5. Return the list of common elements.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all three lists at the same index, so the expected output is the list of all elements.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that are common to all three lists at the same index, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where there are no common elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where there are no common elements.\n", "requirement analysis:\nThe requirement is to find common elements across three lists based on their indices. This is a straightforward task that involves iterating through the lists and comparing elements at each index. The function should return a list of elements that are common to all three lists.\nrequirement pool:\n- The main code should efficiently find common elements across three lists.\n- The function should handle lists of varying lengths.\n- Ensure the function is optimized for performance.\n- Implement error handling for non-list inputs.\n- Include documentation and tests for the function.\nTo solve the problem of finding common elements across three lists based on their indices, we will use Python's built-in capabilities and the itertools library for efficient iteration. The function will iterate through the lists, comparing elements at each index and collecting those that are common to all three lists.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we need to find elements that are present and occur at the same position in all three given lists. This is crucial for identifying the elements that are shared across all three lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using Python's built-in capabilities and the itertools library for efficient iteration. The function will iterate through the lists, comparing elements at each index and collecting those that are common to all three lists.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: In this edge case, all three lists are identical. Therefore, all elements are common to all three lists, and the expected output is the entire list.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: Here, there are no common elements across the lists at the same indices. Therefore, the expected output is an empty list.\n    extract_index_list([1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]) = [3, 4]\n    Explanation: The elements 3 and 4 are common to all three lists at the same indices. Thus, the expected output is a list containing these elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly return an empty list if there are no common elements across the lists at the same indices.\n", "requirement analysis:\nThe requirement is to find common elements across three lists based on their indices. This is a straightforward problem that can be solved using a simple loop to iterate through the lists and compare elements at each index.\nrequirement pool:\n- The main code should iterate through the lists and compare elements at each index to find common elements.\n- The function should return a list of common elements.\n- Ensure the function is efficient and handles edge cases such as lists of different lengths.\n- Implement the function in a language that matches the user's requirement language.\nTo solve the problem of finding common elements across three lists based on their indices, we will use a simple and efficient approach. We will iterate through the lists, comparing elements at each index to find common elements. This problem can be efficiently handled using basic Python functionalities without the need for complex libraries.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we are looking for elements that are present and occur at the same position in all three given lists. This is crucial for identifying the common elements across the lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To find common elements across three lists based on their indices, we can follow these steps:\n    1. Iterate through the elements of the lists using their indices.\n    2. Compare elements at each index across the three lists.\n    3. If elements match and are at the same index in all three lists, add them to the result list.\n    4. Return the list of common elements.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all three lists at the same indices, so the expected output is the list of all elements.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that are common to all three lists at the same indices, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already correctly handles the scenario where there are no common elements by returning an empty list.\n", "requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their positions. This is a specific use case that can be efficiently handled in Python. The function should be able to compare elements at the same index across the three lists and return a list of those elements that are common to all three lists.\nrequirement pool:\n- The main code should efficiently compare elements at the same index across the three lists.\n- The function should handle lists of different lengths.\n- The output should be a list of common elements.\n- The function should be optimized for performance.\n- The function should include error handling for non-list inputs.\nTo create a function that identifies common elements across three lists based on their positions, we will use Python's built-in capabilities and leverage the itertools library for efficient iteration. The function will compare elements at the same index across the three lists and return a list of those elements that are common to all three lists.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we are looking for elements that are present and occur at the same position in all three lists. This is crucial for identifying the common elements across the lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `extract_index_list`, we will follow these steps:\n    1. Iterate through the elements of the lists using their indices.\n    2. Compare the elements at each index across the three lists.\n    3. If the elements are the same and appear at the same index in all three lists, add them to the result list.\n    4. Return the result list containing all common elements.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all three lists as they appear at the same index in each list.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that are common to all three lists as none of the elements appear at the same index in all lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where all lists are identical or completely disjoint.\n", "requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their indices. This function should be efficient and easy to use, suitable for both novice and experienced users. The function should handle lists of varying lengths and ensure that elements are compared at the same index across all lists.\nrequirement pool:\n- The main code should be concise and efficient in identifying common elements.\n- The function should handle lists of different lengths gracefully.\n- The user interface should be clean and intuitive.\n- The function should be tested for large datasets to ensure performance.\n- Include basic error handling to manage unexpected inputs.\nTo create a function that identifies common elements across three lists based on their indices, we will use Python's built-in capabilities and leverage the itertools library for efficient iteration. The function will iterate through the lists, comparing elements at each index across all three lists. If an element matches at the same index in all three lists, it will be added to the result list. The function will handle lists of varying lengths gracefully, ensuring that elements are compared at the same index across all lists.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we are looking for elements that are present and occur at the same index in all three lists. This is crucial for identifying the common elements across the lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `extract_index_list`, we will follow these steps:\n    1. Iterate through the indices of the lists.\n    2. Compare the elements at each index across the three lists.\n    3. If the elements match, add them to the result list.\n    4. Return the result list containing all common elements.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all three lists at each index, so the expected output is the list of all elements.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that are common to all three lists at each index, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where there are no common elements.\n\n# [core concept]\n    'index matching': elements must appear at the same index in all lists\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `extract_index_list`, we will follow these steps:\n    1. Iterate through the indices of the lists.\n    2. Compare the elements at each index across the three lists.\n    3. If the elements match, add them to the result list.\n    4. Return the result list containing all common elements.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all three lists at each index, so the expected output is the list of all elements.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that are common to all three lists at each index, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where there are no common elements.\n", "requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their indices. This function should be efficient and return a list of these common elements. The function should handle various list sizes and types, ensuring accuracy and performance.\nrequirement pool:\n- The main code should efficiently find common elements across three lists.\n- The function should handle lists of different lengths and types.\n- The output should be a list of common elements at the same indices.\n- The function should be optimized for performance on large lists.\n- The user interface should be clean and intuitive.\nTo create a function that identifies common elements across three lists based on their indices, we will use Python's built-in capabilities and leverage the power of list comprehensions for simplicity and efficiency. The function will iterate through the lists, comparing elements at each index across all three lists. If the elements match and are at the same index in all lists, they will be added to the result list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we are looking for elements that are present and occur at the same index in all three lists. This is crucial for identifying the common elements across the lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function will iterate through the lists, comparing elements at each index across all three lists. If the elements match and are at the same index in all lists, they will be added to the result list.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: In this edge case, all three lists are identical, so all elements are common to all three lists. The expected output is the list itself.\n\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: In this edge case, there are no common elements across the lists as each list has unique elements. The expected output is an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where there are no common elements.\n", "requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their indices. This function should be efficient and return accurate results. The user has provided a specific example to demonstrate the function's output.\nrequirement pool:\n- The main code should efficiently find common elements across three lists.\n- The function should handle lists of varying lengths and sizes.\n- The output should be a list containing all common elements found at the same index in all three lists.\n- The function should be optimized for performance to handle large datasets.\n- The user interface should be intuitive and easy to use.\nTo create a function that identifies common elements across three lists based on their indices, we will use Python's built-in capabilities and leverage the itertools library for efficient iteration. The function will compare elements at each index across the three lists and collect those that match across all lists at the same index.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we are looking for elements that are present in all three lists at the exact same index. These elements are considered common to all three lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `extract_index_list`, we will follow these steps:\n    1. Iterate through the elements of the lists using their indices.\n    2. Compare the elements at each index across the three lists.\n    3. Collect elements that are common across all three lists at the same index.\n    4. Return the list of common elements.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all three lists at each index, so the expected output is the list of all elements.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that are common across all three lists at any index, so the expected output is an empty list.\n    extract_index_list([1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4]) = [1, 2, 3]\n    Explanation: Elements 1, 2, and 3 are common to the first three indices, but the fourth index has a mismatch, so the common elements are only 1, 2, and 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle cases where all lists are identical or completely disjoint.\n", "requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their indices. This function should be efficient and return accurate results. The user has provided a specific example to demonstrate the function's output.\nrequirement pool:\n- The main code should efficiently find common elements across three lists.\n- The function should handle lists of varying lengths and sizes.\n- The output should be a list containing all common elements found at the same index in all three lists.\n- The function should be optimized for performance to handle large datasets.\n- The user interface should be intuitive and easy to use.\nTo create a function that identifies common elements across three lists based on their indices, we will use Python's built-in capabilities and leverage the itertools library for efficient iteration. The function will compare elements at each index across the three lists and collect those that match across all lists at the same index.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we are looking for elements that are present in all three lists at the exact same index. These elements are considered common to all three lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `extract_index_list`, we will follow these steps:\n    1. Iterate through the elements of the lists using their indices.\n    2. Compare the elements at each index across the three lists.\n    3. Collect elements that are common across all three lists at the same index.\n    4. Return the list of common elements.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all three lists at each index, so the expected output is the list of all elements.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that are common across all three lists at any index, so the expected output is an empty list.\n    extract_index_list([1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4]) = [1, 2, 3]\n    Explanation: Elements 1, 2, and 3 are common to the first three indices, but the fourth index has a mismatch, so the common elements are only 1, 2, and 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle cases where all lists are identical or completely disjoint.\n"], "test": ["def check(extract_index_list):\n\tassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]", "def check(extract_index_list):\n\tassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]", "def check(extract_index_list):\n\tassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]", "def check(extract_index_list):\n\tassert extract_index_list([4, 6, 5, 3, 6, 8, 2], [1, 6, 1, 8, 6, 7, 2], [3, 2, 5, 3, 5, 7, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 5, 9, 1, 2, 3], [3, 1, 1, 7, 8, 1, 5], [5, 1, 5, 1, 7, 9, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 3, 8, 7, 6, 5, 5], [3, 2, 5, 5, 1, 5, 10], [5, 6, 5, 7, 7, 3, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 2, 2, 8, 2, 7, 12], [5, 3, 4, 4, 2, 10, 4], [5, 6, 7, 2, 3, 8, 11]) == [5]", "def check(extract_index_list):\n\tassert extract_index_list([3, 5, 8, 9, 2, 6, 9], [4, 1, 4, 1, 1, 8, 11], [3, 6, 7, 6, 1, 6, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 2, 5, 7, 6, 11, 7], [5, 6, 7, 7, 9, 3, 3], [1, 3, 2, 3, 4, 10, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 6, 5, 6, 5, 4, 8], [3, 2, 4, 5, 5, 6, 12], [1, 3, 6, 4, 7, 7, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 3, 3, 4, 9, 10, 6], [5, 4, 3, 7, 6, 8, 10], [4, 3, 4, 3, 1, 4, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 6, 2, 8, 8, 4], [5, 6, 7, 8, 1, 2, 2], [5, 2, 5, 6, 1, 9, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 1, 4, 8, 2, 9, 2], [4, 2, 4, 4, 3, 9, 11], [4, 6, 7, 8, 4, 6, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 1, 1, 8, 6, 9], [1, 4, 5, 1, 9, 3, 7], [4, 5, 4, 7, 3, 5, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 3, 8, 4, 7, 2], [2, 1, 7, 5, 2, 10, 4], [1, 4, 3, 4, 9, 3, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 4, 8, 7, 3, 4, 8], [4, 3, 5, 8, 2, 2, 9], [4, 3, 7, 3, 6, 5, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 2, 5, 9, 2, 5, 11], [4, 6, 7, 6, 2, 4, 12], [2, 4, 6, 6, 5, 1, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 5, 9, 6, 2, 4], [5, 2, 3, 8, 4, 6, 11], [1, 2, 2, 1, 3, 8, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 1, 8, 3, 9, 10, 4], [5, 4, 2, 2, 4, 1, 5], [1, 5, 7, 6, 6, 7, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 6, 9, 8, 11, 11], [5, 4, 2, 1, 8, 4, 7], [3, 4, 2, 6, 6, 6, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 1, 6, 9, 10, 1, 8], [2, 2, 7, 8, 9, 7, 11], [5, 2, 2, 1, 6, 1, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 3, 7, 4, 1, 5, 8], [4, 6, 2, 7, 6, 7, 7], [4, 3, 5, 1, 1, 7, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 7, 7, 5, 11, 9], [2, 4, 6, 1, 5, 1, 3], [1, 2, 2, 2, 3, 6, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 3, 1, 2, 9, 10, 5], [5, 3, 7, 6, 9, 2, 8], [1, 6, 3, 2, 8, 8, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 1, 2, 6, 6, 4], [2, 3, 3, 5, 4, 5, 8], [4, 5, 3, 4, 5, 5, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 6, 5, 8, 9, 3, 5], [5, 5, 5, 2, 9, 1, 4], [3, 5, 4, 8, 3, 6, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 5, 4, 9, 9, 4, 5], [2, 4, 1, 1, 7, 7, 9], [4, 4, 3, 2, 3, 1, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 2, 3, 5, 1, 12], [2, 1, 2, 5, 7, 6, 11], [1, 6, 4, 2, 4, 8, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 4, 4, 6, 4, 9], [4, 2, 5, 2, 5, 1, 2], [2, 5, 7, 4, 5, 2, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 3, 1, 8, 8, 7, 12], [3, 3, 3, 7, 8, 2, 2], [1, 6, 1, 2, 1, 8, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 2, 3, 1, 10, 6], [2, 2, 5, 5, 8, 5, 9], [4, 1, 3, 1, 9, 2, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 4, 2, 7, 10, 6, 3], [4, 3, 6, 3, 4, 10, 9], [5, 6, 2, 3, 9, 3, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 1, 6, 4, 4, 10, 6], [4, 6, 1, 4, 6, 9, 9], [2, 6, 2, 7, 9, 5, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 7, 2, 9, 1, 7], [3, 6, 1, 2, 8, 8, 2], [3, 1, 5, 5, 9, 3, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 6, 5, 4, 10, 6, 5], [4, 6, 2, 2, 2, 7, 6], [5, 1, 1, 3, 2, 9, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 4, 3, 3, 1, 6, 4], [3, 2, 6, 3, 9, 1, 3], [4, 3, 1, 8, 4, 7, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 3, 7, 8, 9, 6], [4, 5, 1, 7, 2, 7, 4], [5, 5, 1, 6, 1, 8, 11]) == [5]", "def check(extract_index_list):\n\tassert extract_index_list([4, 3, 2, 2, 5, 7, 2], [2, 4, 7, 6, 9, 4, 3], [2, 1, 6, 2, 5, 1, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 1, 2, 8, 5, 2, 7], [5, 4, 4, 5, 6, 3, 9], [2, 2, 6, 1, 8, 10, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 6, 2, 2, 11, 12], [1, 6, 4, 4, 6, 5, 2], [4, 1, 6, 6, 7, 5, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 6, 2, 9, 1, 9, 11], [4, 1, 1, 5, 6, 7, 8], [2, 6, 4, 3, 6, 8, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 3, 3, 2, 7, 11, 10], [3, 5, 2, 5, 4, 11, 5], [1, 2, 5, 7, 7, 1, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 1, 5, 7, 4, 9, 4], [2, 3, 3, 8, 4, 11, 5], [3, 4, 4, 8, 8, 8, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 7, 1, 7, 1, 8], [3, 2, 4, 5, 5, 10, 5], [4, 4, 2, 8, 4, 10, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 4, 6, 8, 11, 10], [3, 4, 3, 1, 8, 2, 9], [3, 6, 7, 3, 6, 6, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 4, 8, 8, 2, 3, 3], [2, 2, 2, 5, 1, 9, 2], [4, 1, 4, 4, 6, 1, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 8, 3, 6, 7, 9], [4, 3, 6, 3, 4, 8, 10], [3, 6, 1, 1, 5, 1, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 3, 4, 8, 10, 6, 3], [3, 6, 1, 4, 4, 10, 2], [2, 4, 7, 4, 8, 3, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 3, 7, 7, 1, 3], [2, 1, 6, 3, 4, 2, 8], [1, 2, 6, 1, 5, 3, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 4, 2, 5, 4, 3, 10], [3, 5, 7, 3, 1, 3, 8], [5, 1, 4, 4, 3, 4, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 2, 6, 2, 10, 3, 7], [4, 3, 2, 1, 1, 5, 9], [3, 5, 4, 8, 5, 11, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 2, 6, 8, 4, 8], [4, 1, 1, 1, 7, 5, 4], [5, 3, 6, 3, 4, 7, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 1, 7, 2, 7, 2], [5, 6, 2, 7, 2, 6, 10], [5, 1, 7, 4, 2, 8, 5]) == [2]", "def check(extract_index_list):\n\tassert extract_index_list([6, 2, 3, 7, 6, 8, 12], [2, 4, 5, 6, 9, 2, 8], [4, 4, 2, 6, 8, 6, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 4, 5, 3, 8, 3, 3], [4, 2, 2, 4, 7, 1, 1], [3, 4, 5, 6, 5, 7, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 2, 3, 6, 4, 4, 3], [2, 5, 1, 2, 8, 9, 8], [2, 3, 5, 1, 9, 10, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 5, 1, 10, 3, 8], [4, 4, 7, 6, 5, 3, 7], [2, 5, 5, 8, 2, 9, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 3, 7, 4, 4, 8, 10], [2, 5, 6, 5, 6, 7, 9], [5, 6, 3, 2, 8, 10, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 3, 8, 6, 8, 6, 12], [5, 1, 6, 3, 1, 10, 2], [5, 6, 1, 8, 7, 2, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 8, 2, 5, 3, 9], [4, 3, 3, 2, 9, 11, 2], [5, 1, 5, 4, 1, 4, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 6, 8, 8, 2, 9, 2], [5, 4, 7, 1, 8, 11, 7], [2, 5, 7, 1, 1, 8, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 6, 8, 3, 4, 11, 6], [1, 5, 6, 3, 1, 2, 3], [4, 3, 5, 3, 7, 5, 8]) == [3]", "def check(extract_index_list):\n\tassert extract_index_list([5, 5, 1, 7, 8, 3, 3], [4, 5, 3, 4, 8, 9, 8], [3, 2, 6, 5, 4, 9, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 3, 1, 8, 8, 8, 2], [4, 5, 2, 3, 7, 6, 1], [5, 2, 5, 6, 2, 7, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 6, 4, 8, 1, 6, 5], [5, 2, 2, 8, 8, 3, 6], [2, 5, 5, 2, 9, 10, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 3, 4, 8, 3, 9, 4], [2, 4, 3, 4, 3, 1, 1], [3, 2, 6, 1, 2, 4, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 4, 4, 8, 2, 2, 10], [4, 2, 5, 5, 6, 6, 6], [4, 6, 1, 7, 6, 8, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 3, 6, 6, 1, 3, 10], [2, 5, 2, 8, 1, 7, 10], [3, 1, 7, 5, 5, 8, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 2, 6, 2, 1, 4], [5, 3, 2, 4, 2, 3, 5], [4, 5, 2, 3, 6, 2, 9]) == [2]", "def check(extract_index_list):\n\tassert extract_index_list([4, 3, 2, 5, 11, 1, 7], [5, 6, 6, 2, 7, 9, 11], [4, 2, 3, 6, 3, 6, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 2, 3, 2, 4, 9, 4], [1, 2, 1, 1, 5, 6, 7], [4, 4, 2, 2, 1, 7, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 3, 7, 9, 7, 7, 3], [4, 4, 3, 8, 8, 9, 11], [3, 5, 6, 4, 4, 9, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 2, 4, 8, 7, 4, 7], [2, 3, 1, 1, 1, 2, 9], [1, 3, 4, 3, 3, 3, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 1, 4, 6, 2, 9, 10], [3, 4, 3, 6, 7, 10, 12], [1, 2, 2, 8, 3, 3, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 4, 2, 9, 7, 1, 5], [2, 5, 1, 1, 5, 10, 6], [2, 4, 1, 6, 2, 8, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 2, 6, 8, 9, 6], [1, 6, 3, 4, 7, 3, 6], [1, 4, 7, 2, 4, 5, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 5, 1, 5, 5, 7, 11], [4, 2, 5, 4, 6, 8, 8], [5, 4, 1, 1, 6, 4, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 6, 3, 4, 8, 8, 10], [2, 2, 4, 1, 8, 8, 11], [1, 5, 1, 6, 4, 4, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 2, 5, 5, 8, 5, 7], [1, 2, 5, 2, 4, 4, 10], [3, 5, 6, 3, 5, 9, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 3, 7, 3, 10, 1, 3], [5, 3, 2, 5, 2, 9, 3], [1, 6, 5, 6, 4, 9, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 3, 1, 6, 3, 5, 10], [1, 1, 6, 7, 7, 6, 11], [5, 3, 7, 4, 2, 9, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 6, 8, 4, 2, 1, 2], [4, 4, 2, 4, 5, 2, 5], [4, 3, 6, 7, 7, 9, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 4, 1, 4, 4, 9, 5], [2, 4, 7, 3, 5, 2, 6], [4, 6, 1, 2, 7, 6, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 1, 6, 8, 3, 10, 2], [4, 2, 2, 8, 9, 8, 10], [2, 6, 3, 2, 7, 1, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 2, 7, 4, 7, 2, 1], [5, 6, 5, 2, 6, 3, 2], [1, 5, 5, 3, 2, 4, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 6, 7, 6, 4, 4, 1], [5, 1, 5, 6, 9, 7, 11], [1, 3, 6, 5, 6, 9, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 1, 1, 3, 5, 4], [3, 6, 5, 2, 7, 5, 7], [1, 6, 1, 7, 4, 5, 8]) == [6, 5]", "def check(extract_index_list):\n\tassert extract_index_list([4, 4, 1, 3, 5, 8, 9], [3, 5, 2, 8, 5, 1, 3], [4, 5, 5, 1, 8, 10, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 3, 4, 11, 6, 8], [3, 1, 6, 3, 8, 8, 5], [5, 5, 4, 8, 6, 10, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 3, 6, 1, 5, 2, 10], [5, 3, 2, 4, 2, 2, 4], [2, 5, 4, 7, 2, 2, 2]) == [2]", "def check(extract_index_list):\n\tassert extract_index_list([1, 2, 6, 2, 2, 8, 1], [3, 3, 4, 1, 2, 6, 6], [5, 1, 6, 5, 4, 8, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 4, 7, 3, 2, 4], [1, 3, 7, 5, 3, 2, 9], [5, 1, 5, 3, 6, 8, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 3, 5, 7, 3, 2, 8], [3, 5, 3, 8, 8, 5, 5], [5, 3, 3, 5, 8, 3, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 6, 8, 3, 5, 10, 3], [1, 3, 6, 8, 6, 6, 11], [3, 1, 6, 7, 6, 5, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 4, 8, 8, 5, 1, 4], [1, 6, 3, 7, 7, 1, 9], [4, 1, 5, 8, 1, 9, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 2, 5, 10, 7, 11], [3, 6, 2, 5, 4, 6, 6], [3, 5, 1, 2, 6, 6, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 2, 5, 2, 6, 5, 6], [5, 2, 2, 2, 3, 9, 8], [2, 2, 7, 1, 5, 1, 4]) == [2]", "def check(extract_index_list):\n\tassert extract_index_list([2, 3, 8, 9, 11, 3, 10], [4, 5, 7, 3, 3, 9, 3], [5, 1, 4, 7, 9, 10, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 8, 1, 7, 2, 10], [5, 5, 4, 7, 2, 9, 10], [5, 2, 3, 4, 2, 8, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 2, 7, 3, 9, 7], [2, 6, 4, 2, 4, 8, 2], [4, 1, 1, 5, 6, 2, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 5, 3, 8, 9, 10, 11], [4, 1, 2, 4, 3, 7, 9], [3, 6, 4, 1, 5, 4, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 6, 6, 4, 11, 1, 8], [3, 4, 7, 5, 8, 8, 9], [5, 4, 6, 7, 5, 4, 11]) == []"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts common elements across three lists based on their indices.\n\n    Args:\n        l1 (List[int]): The first list of integers.\n        l2 (List[int]): The second list of integers.\n        l3 (List[int]): The third list of integers.\n\n    Returns:\n        List[int]: A list of common elements across the three lists based on their indices.\n    \"\"\"\n    common_elements = []\n    \n    # Determine the length of the shortest list to avoid index out of range\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements\n", "passed": true, "pass": true, "pass_num": 10, "round": 829, "mutate_method": "rephrase_one", "parent_index": 231}
