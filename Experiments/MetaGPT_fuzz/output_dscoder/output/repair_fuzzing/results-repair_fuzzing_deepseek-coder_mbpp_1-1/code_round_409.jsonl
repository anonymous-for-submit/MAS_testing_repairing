{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 12, "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows. Ensure that this sorting operation maintains the relative order of the rows which have the same sum. You should consider optimizing the function for matrices with a large number of rows to improve performance.", "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "assert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "assert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "assert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "assert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "assert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "assert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "assert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "assert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "assert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "assert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "assert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "assert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "assert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "assert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "assert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "assert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "assert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "assert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "assert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "assert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "assert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "assert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "assert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "assert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "assert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "assert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "assert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "assert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "assert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "assert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "assert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "assert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "assert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "assert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "assert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "assert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "assert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "assert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "assert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "assert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "assert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "assert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "assert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "assert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "assert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "assert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "assert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "assert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "assert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "assert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "assert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "assert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "assert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "assert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "assert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "assert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "assert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "assert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "assert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "assert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "assert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "assert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "assert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "assert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "assert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "assert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "assert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "assert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "assert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "assert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "assert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "assert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "assert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "assert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "assert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "assert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "assert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "assert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "assert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "assert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "assert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "assert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "assert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "assert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "assert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "assert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "assert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "assert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "assert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "assert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "assert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "assert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "assert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "assert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "assert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "assert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "assert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "assert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "assert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "entry_point": "sort_matrix", "repair_prompt": ["Write a function sort_matrix to sort a given matrix in ascending order according to the sum of its rows. Ensure that this sorting operation maintains the relative order of the rows which have the same sum. You should consider optimizing the function for matrices with a large number of rows to improve performance.\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", " Write a function sort_matrix to sort a given matrix in ascending order according to the sum of its rows. Ensure that this sorting operation maintains the relative order of the rows which have the same sum. You should consider optimizing the function for matrices with a large number of rows to improve performance.\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", " Write a function sort_matrix to sort a given matrix in ascending order according to the sum of its rows. Ensure that this sorting operation maintains the relative order of the rows which have the same sum. You should consider optimizing the function for matrices with a large number of rows to improve performance.\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"], "completions": ["from typing import List\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a matrix by the sum of its rows.\n\n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row.\n\n    Returns:\n        List[List[int]]: A new 2D list with rows sorted by the sum of their elements.\n    \"\"\"\n    # Sort the matrix using the sum of each row as the key\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    matrix = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\n    sorted_matrix = sort_matrix(matrix)\n    print(sorted_matrix)  # Output: [[4, 5], [1, 2, 3], [6, 7, 8, 9]]\n", "from typing import List\n## main.py\n\nimport typing\n\ndef sort_matrix(matrix: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n    \"\"\"\n    Sorts the rows of a matrix based on the sum of their elements in ascending order.\n    If two rows have the same sum, their relative order is preserved.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each sublist represents a row in the matrix.\n    \n    Returns:\n        List[List[int]]: A new 2D list with the rows sorted by the sum of their elements.\n    \"\"\"\n    # Sort the matrix using the sorted function with a custom key\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n", "from typing import List\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a matrix based on the sum of its rows while preserving the relative order of rows with the same sum.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each sublist represents a row in the matrix.\n    \n    Returns:\n        List[List[int]]: A 2D list where the rows are sorted based on the sum of their elements.\n    \"\"\"\n    # Sort the matrix using a custom key that sorts primarily by the sum of the rows\n    # and secondarily by the index to preserve the relative order of rows with the same sum.\n    sorted_matrix = sorted(matrix, key=lambda row: (sum(row), matrix.index(row)))\n    return sorted_matrix\n", "from typing import List\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a matrix based on the sum of its rows, maintaining the relative order of rows with the same sum.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row of integers.\n    \n    Returns:\n        List[List[int]]: A 2D list where the rows are sorted based on the sum of their elements.\n    \"\"\"\n    # Calculate the sum of each row and store it along with the row in a list of tuples\n    row_sums = [(sum(row), row) for row in matrix]\n    \n    # Sort this list of tuples based on the row sums\n    row_sums.sort(key=lambda x: x[0])\n    \n    # Extract the sorted rows from the sorted list of tuples\n    sorted_matrix = [row for _, row in row_sums]\n    \n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    matrix = [[1, 2, 3], [4, 5, 6], [1, 1, 1]]\n    sorted_matrix = sort_matrix(matrix)\n    print(sorted_matrix)  # Output: [[1, 1, 1], [1, 2, 3], [4, 5, 6]]\n", "from typing import List\n## main.py\n\ndef sort_matrix(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"\n    Sorts the rows of a given matrix based on the sum of their elements in ascending order.\n    If two rows have the same sum, their relative order is maintained.\n\n    Args:\n        matrix (list[list[int]]): A 2D list of integers representing the matrix.\n\n    Returns:\n        list[list[int]]: A 2D list of integers representing the sorted matrix.\n    \"\"\"\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n", "from typing import List\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a matrix based on the sum of its rows.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row of integers.\n    \n    Returns:\n        List[List[int]]: A 2D list where the rows are sorted by the sum of their elements.\n    \"\"\"\n    # Sort the matrix using the sum of each row as the key\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row), stable=True)\n    return sorted_matrix\n", "from typing import List\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a matrix based on the sum of its rows while maintaining the relative order of rows with the same sum.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row in the matrix.\n    \n    Returns:\n        List[List[int]]: A 2D list where the rows are sorted based on the sum of their elements.\n    \"\"\"\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_matrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\n    sorted_matrix = sort_matrix(example_matrix)\n    print(sorted_matrix)  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import List\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a matrix based on the sum of its rows.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row in the matrix.\n    \n    Returns:\n        List[List[int]]: A 2D list where the rows are sorted based on the sum of their elements.\n    \"\"\"\n    # Sort the matrix using a custom key that calculates the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n", "from typing import List\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a matrix based on the sum of its rows, maintaining the order of rows with the same sum.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row of integers.\n    \n    Returns:\n        List[List[int]]: A 2D list where the rows are sorted based on the sum of their elements.\n    \"\"\"\n    # Sort the matrix using the sum of each row as the key, with stable=True for stability\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row), stable=True)\n    return sorted_matrix\n", "from typing import List\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts the rows of a matrix based on the sum of their elements in ascending order.\n    If two rows have the same sum, their relative order is preserved.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row in the matrix.\n    \n    Returns:\n        List[List[int]]: A 2D list with the rows sorted by the sum of their elements.\n    \"\"\"\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n"], "plans": ["requirement analysis:\nThe requirement is to sort a matrix based on the sum of its rows. The sorting should be in ascending order and maintain the relative order of rows with the same sum. The function should be optimized for handling large matrices efficiently.\nrequirement pool:\n- The main code should be optimized for large matrices\n- Ensure the function sorts the matrix correctly\n- Maintain the relative order of rows with the same sum\n- Provide clear and concise documentation\n- Ensure the function is easy to integrate into existing projects\nTo implement the `sort_matrix` function efficiently, we will use Python's built-in sorting capabilities along with a custom key function that calculates the sum of each row. This approach leverages Python's strengths in handling large datasets and ensures that the function is both performant and easy to understand.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': arranging elements from smallest to largest\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To sort the matrix by the sum of its rows, we can use the `sorted` function in Python with a custom key. This key will calculate the sum of each row. The `sorted` function will then sort the rows based on these sums, maintaining the relative order of rows with the same sum.\n\n    Here's a step-by-step breakdown of the logic:\n    1. Define the function `sort_matrix` that takes a matrix as input.\n    2. Use the `sorted` function with a key that calculates the sum of each row.\n    3. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) = [[4, 5], [1, 2, 3], [6, 7, 8, 9]]\n    Explanation: The sums of the rows are 6, 8, and 32 respectively. The matrix is sorted based on these sums. Rows with the same sum (e.g., [1, 2, 3] and [4, 5]) maintain their relative order.\n\n# [extra code for edge case]\n    No extra code is needed for this specific edge case as the provided logic already handles matrices with varying numbers of columns. However, for very large matrices, further optimizations such as using more efficient sorting algorithms or parallel processing could be considered to improve performance.\n", "requirement analysis:\nThe requirement is to sort a matrix based on the sum of its rows. The function should be optimized for handling large matrices and should maintain the relative order of rows with the same sum. This requirement is crucial for applications that require matrix manipulation and analysis.\nrequirement pool:\n- Implement a function to sort a matrix by the sum of its rows.\n- Ensure the function is optimized for large matrices.\n- Maintain the relative order of rows with the same sum.\n- Provide clear documentation and examples for user guidance.\nTo implement the `sort_matrix` function efficiently, we will utilize Python's built-in sorting capabilities along with the `sorted` function's ability to accept a custom key. This approach will allow us to sort the matrix based on the sum of its rows while maintaining the relative order of rows with the same sum. We will ensure that the function is optimized for large matrices by leveraging Python's efficient handling of large data structures.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': from smallest to largest\n    'relative order': maintaining the original order for rows with the same sum\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using Python's built-in sorting capabilities with a custom key. This key will be the sum of each row. The function will sort the matrix based on these sums, and if two rows have the same sum, their relative order will be maintained.\n\n# [edge case] \n    sort_matrix([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\n    Explanation: All rows have the same sum, so their relative order is preserved.\n    sort_matrix([[1, 2, 3], [3, 2, 1], [4, 5, 6]]) = [[1, 2, 3], [3, 2, 1], [4, 5, 6]]\n    Explanation: The rows are sorted by their sums, but since all sums are unique, the relative order is preserved.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The built-in sorting function in Python will handle matrices with identical row sums correctly.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The built-in sorting function in Python will handle matrices with identical row sums correctly.\n", "requirement analysis:\nThe requirement is to sort a matrix based on the sum of its rows. The function should be optimized for handling large matrices efficiently. It must also maintain the relative order of rows with the same sum. This requirement is crucial for users who need to sort matrices frequently, especially in scenarios involving large datasets.\nrequirement pool:\n- Implement a function to sort a matrix by the sum of its rows.\n- Ensure the function can handle large matrices efficiently.\n- Maintain the relative order of rows with the same sum.\n- Optimize the function for performance on large datasets.\nTo implement the `sort_matrix` function efficiently, we will utilize Python's built-in sorting capabilities along with the `sorted` function's ability to accept a custom key. This approach will allow us to sort the matrix based on the sum of its rows while maintaining the relative order of rows with the same sum. We will ensure that the function can handle large matrices by optimizing the computation of row sums and leveraging Python's efficient list operations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array structure with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': arranging elements from smallest to largest\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using Python's built-in sorting capabilities with a custom key. This involves:\n    1. Calculating the sum of each row.\n    2. Sorting the matrix based on these sums.\n    3. Ensuring that rows with the same sum remain in their original order.\n\n# [edge case] \n    sort_matrix([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\n    Explanation:\n    All rows have the same sum, so their relative order is preserved.\n    sort_matrix([[1, 2, 3], [3, 2, 1], [2, 1, 3]]) = [[1, 2, 3], [2, 1, 3], [3, 2, 1]]\n    Explanation:\n    The sums are 6, 6, and 6 respectively. The original order is preserved since all rows have the same sum.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The built-in sorting in Python will naturally handle matrices with identical row sums.\n", "requirement analysis:\nThe function needs to sort a matrix based on the sum of its rows, ensuring that rows with the same sum are ordered relative to each other. Optimization is crucial for handling large matrices efficiently. The function should also maintain the relative order of rows with equal sums to provide a consistent user experience.\nrequirement pool:\n- Implement a function to sort a matrix by the sum of its rows.\n- Ensure the function can handle large matrices efficiently.\n- Maintain the relative order of rows with the same sum.\n- Optimize the function for performance on large datasets.\nTo implement the `sort_matrix` function efficiently, we will use Python's built-in sorting capabilities along with a custom key function that calculates the sum of each row. This approach leverages Python's performance and the ease of use of built-in functions, ensuring that the function can handle large matrices without performance issues. We will also ensure that the relative order of rows with the same sum is maintained by using a stable sorting algorithm.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array structure with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': arranging elements from smallest to largest\n    'relative order': maintaining the original order of equal elements\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `sort_matrix` function, we will follow these steps:\n    1. Calculate the sum of each row and store it along with the row in a list of tuples.\n    2. Sort this list of tuples based on the row sums.\n    3. Extract the sorted rows from the sorted list of tuples.\n    4. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([[1, 2, 3], [4, 5, 6], [1, 1, 1]]) = [[1, 1, 1], [1, 2, 3], [4, 5, 6]]\n    Explanation: The sums of the rows are 6, 15, and 3 respectively. The matrix is sorted based on these sums, maintaining the relative order of rows with the same sum.\n    sort_matrix([[10, 20], [10, 20], [30, 40]]) = [[10, 20], [10, 20], [30, 40]]\n    Explanation: All rows have the same sum, so their relative order is preserved.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The built-in sorting in Python will handle the relative order of rows with the same sum efficiently.\n", "requirement analysis:\nThe requirement is to sort a matrix based on the sum of its rows. The function should be optimized for handling large matrices efficiently. It must also maintain the relative order of rows with the same sum. Clarifications are needed on the specific performance benchmarks and edge cases to handle.\nrequirement pool:\n- Implement a function to sort a matrix by the sum of its rows.\n- Ensure the function is optimized for large matrices.\n- Maintain the relative order of rows with the same sum.\n- Provide clear documentation and examples for user guidance.\n- Include unit tests to validate the function's accuracy.\nTo implement the `sort_matrix` function efficiently, we will utilize Python's built-in sorting capabilities along with the `sorted` function's ability to accept a custom key. This approach will allow us to sort the matrix based on the sum of its rows while maintaining the relative order of rows with the same sum. We will also ensure that the function is optimized for large matrices by leveraging Python's efficient handling of lists and tuples.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': from smallest to largest\n    'relative order': maintaining the original order for rows with the same sum\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `sort_matrix` function, we will follow these steps:\n    1. Calculate the sum of each row and store it along with the row itself.\n    2. Use the `sorted` function with a custom key that sorts based on the row sums.\n    3. Return the sorted list of rows.\n\n# [edge case] \n    sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    Explanation: All rows have the same sum, so their relative order is maintained.\n    sort_matrix([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\n    Explanation: All rows have the same sum, so their relative order is maintained.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The `sorted` function in Python automatically maintains the order of elements with the same key.\n", "requirement analysis:\nThe requirement is to sort a matrix based on the sum of its rows. The sorting should be stable, meaning that rows with the same sum should maintain their relative order. The function should be optimized for handling large matrices efficiently.\nrequirement pool:\n- Implement a stable sorting algorithm to ensure rows with equal sums maintain their order.\n- Optimize the function for large matrices to handle thousands of rows without performance issues.\n- Ensure the function is efficient and handles edge cases, such as empty matrices or matrices with non-numeric values.\n- Provide clear documentation and examples to help users understand how to use the function.\n- Include unit tests to verify the correctness of the function.\nTo implement the `sort_matrix` function efficiently, we will use Python's built-in `sorted` function with a custom key. The key will be a lambda function that calculates the sum of each row. Since the requirement specifies a stable sort, we will use the `stable=True` parameter of the `sorted` function. This ensures that rows with the same sum will retain their original order, which is crucial for maintaining the relative order of rows with equal sums.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array of numbers\n    'sum of rows': the total of all elements in each row\n    'sorting': arranging elements in ascending or descending order\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `sort_matrix` function, we will use Python's built-in `sorted` function with a custom key. The key will be a lambda function that calculates the sum of each row. Since the requirement specifies a stable sort, we will use the `stable=True` parameter of the `sorted` function.\n\n# [edge case] \n    sort_matrix([[1, 1, 1], [1, 2, 3], [2, 4, 5]]) = [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    Explanation: The matrix is already sorted by the sum of its rows. Each row has a unique sum, so no reordering is necessary.\n    sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) = [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    Explanation: The matrix is sorted by the sum of its rows, and the relative order of rows with the same sum is maintained.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The `sorted` function with `stable=True` will maintain the relative order of rows with the same sum.\n", "requirement analysis:\nThe requirement is to sort a matrix based on the sum of its rows. The sorting should be in ascending order and maintain the relative order of rows with the same sum. The function should be optimized to handle large matrices efficiently.\nrequirement pool:\n- Implement a function to sort a matrix by the sum of its rows.\n- Ensure the function maintains the relative order of rows with the same sum.\n- Optimize the function for large matrices to improve performance.\n- Provide detailed documentation and examples for user guidance.\n- Include unit tests to verify the accuracy and robustness of the function.\nTo implement the function `sort_matrix` efficiently, we will utilize Python's built-in sorting capabilities along with the `sorted` function's ability to accept a custom key. This approach will allow us to sort the matrix based on the sum of its rows while maintaining the relative order of rows with the same sum. We will ensure that the function is optimized to handle large matrices by leveraging Python's efficient handling of lists and the `sorted` function's optimization for large data sets.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': from smallest to largest\n    'relative order': maintaining the original order for rows with the same sum\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `sort_matrix` efficiently, we will utilize Python's built-in sorting capabilities along with the `sorted` function's ability to accept a custom key. This approach will allow us to sort the matrix based on the sum of its rows while maintaining the relative order of rows with the same sum. We will ensure that the function is optimized to handle large matrices by leveraging Python's efficient handling of lists and the `sorted` function's optimization for large data sets.\n\n# [edge case] \n    sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) = [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    Explanation: The sum of the first row is 6, the second row is 11, and the third row is 3. Sorting by sum, we get [[1, 1, 1], [1, 2, 3], [2, 4, 5]]. The relative order of rows with the same sum is maintained.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided example is a straightforward case that fits the function's requirements.\n", "requirement analysis:\nThe requirement is to sort a matrix based on the sum of its rows. The sorting should be stable, meaning that rows with the same sum should maintain their relative order. The function should be optimized for handling large matrices efficiently.\nrequirement pool:\n- The main code should be optimized for large matrices\n- Ensure the function maintains the relative order of rows with the same sum\n- The function should be easy to understand and maintain\n- The function should handle matrices of various sizes efficiently\n- The function should be compatible with multiple programming languages\nTo implement the `sort_matrix` function efficiently, we will use Python's built-in sorting capabilities, specifically leveraging the `sorted` function with a custom key. This approach will allow us to sort the matrix based on the sum of its rows while maintaining the relative order of rows with the same sum. We will also ensure that the function is optimized for large matrices by using efficient algorithms and data structures.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array structure with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': arranging elements from smallest to largest\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `sort_matrix` function, we will use Python's built-in `sorted` function with a custom key that calculates the sum of each row. This key will be used to sort the rows based on their sums. The `sorted` function will ensure that rows with the same sum are ordered relative to each other as they appear in the original matrix.\n\n# [edge case] \n    sort_matrix([[1, 2], [2, 1], [1, 1, 1]]) = [[1, 2], [2, 1], [1, 1, 1]]\n    Explanation: The sums of the rows are all 3, so the relative order is maintained as in the original matrix.\n    sort_matrix([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\n    Explanation: All rows have the same sum, so the relative order is maintained as in the original matrix.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The `sorted` function in Python will naturally maintain the relative order of rows with the same sum.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The `sorted` function in Python will naturally maintain the relative order of rows with the same sum.\n", "requirement analysis:\nThe requirement is to sort a matrix based on the sum of its rows. The sorting should be stable, meaning that rows with the same sum should maintain their relative order. The function should be optimized for handling large matrices efficiently.\nrequirement pool:\n- Implement a stable sorting algorithm to ensure rows with equal sums maintain their order.\n- Optimize the function for large matrices to handle thousands of rows without performance issues.\n- Ensure the function is efficient and handles edge cases such as empty matrices.\n- Include documentation and examples to help users understand how to use the function.\n- Develop a user-friendly interface for easy matrix input and output display.\nTo implement the `sort_matrix` function efficiently, we will use Python's built-in `sorted` function with a custom key. The key will be a lambda function that calculates the sum of each row. Since the requirement specifies a stable sort, we will use the `stable=True` parameter of the `sorted` function. This ensures that rows with the same sum will retain their original order, which is crucial for maintaining the relative order of rows with the same sum.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array structure with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': arranging elements from smallest to largest\n    'stable sort': maintaining the order of equal elements\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `sort_matrix` function, we will use Python's built-in `sorted` function with a custom key. The key will be a lambda function that calculates the sum of each row. Since the requirement specifies a stable sort, we will use the `stable=True` parameter of the `sorted` function.\n\n# [edge case] \n    sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) = [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    Explanation: The function sorts the matrix based on the sum of each row. The rows with the same sum (e.g., [1, 1, 1] and [1, 2, 3]) retain their original order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The built-in `sorted` function with `stable=True` will handle the sorting correctly.\n", "requirement analysis:\nThe requirement is to sort a matrix based on the sum of its rows. The sorting should be in ascending order and maintain the relative order of rows with the same sum. Optimization is crucial, especially for large matrices, to ensure the function performs well without significant delays.\nrequirement pool:\n- Implement a function to sort a matrix by the sum of its rows.\n- Ensure the function maintains the relative order of rows with the same sum.\n- Optimize the function for large matrices to improve performance.\n- Test the function with various matrices to ensure accuracy and efficiency.\nTo implement the function `sort_matrix` efficiently, we will utilize Python's built-in sorting capabilities along with the `sorted` function's ability to accept a custom key. This approach will allow us to sort the matrix based on the sum of its rows while maintaining the relative order of rows with the same sum. We will also ensure that the function is optimized for large matrices by leveraging Python's efficient handling of list operations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': from smallest to largest\n    'relative order': maintaining the original order for rows with the same sum\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using Python's built-in sorting capabilities with a custom key. This key will be the sum of each row. The function will sort the matrix based on these sums, and if two rows have the same sum, their relative order will be maintained.\n\n# [edge case] \n    sort_matrix([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\n    Explanation: All rows have the same sum, so their relative order is preserved.\n    sort_matrix([[1, 2, 3], [3, 2, 1], [4, 5, 6]]) = [[1, 2, 3], [3, 2, 1], [4, 5, 6]]\n    Explanation: The rows are sorted by their sums, but since all sums are unique, the relative order is preserved.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The built-in sorting function in Python will handle matrices with identical row sums correctly.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The built-in sorting function in Python will handle matrices with identical row sums correctly.\n"], "test": ["def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0], "pass_results": [true, true, true, true, true, false, true, true, false, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 0, 102, 102, 0, 102], "completion": "from typing import List\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts the rows of a matrix based on the sum of their elements in ascending order.\n    If two rows have the same sum, their relative order is preserved.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row in the matrix.\n    \n    Returns:\n        List[List[int]]: A 2D list with the rows sorted by the sum of their elements.\n    \"\"\"\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n", "passed": true, "pass": true, "pass_num": 8, "round": 409, "mutate_method": "add_1_sentence_at_end", "parent_index": 299}
