{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 12, "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows. Ensure that this sorting operation maintains the relative order of the rows which have the same sum.", "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "assert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "assert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "assert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "assert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "assert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "assert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "assert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "assert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "assert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "assert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "assert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "assert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "assert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "assert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "assert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "assert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "assert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "assert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "assert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "assert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "assert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "assert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "assert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "assert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "assert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "assert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "assert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "assert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "assert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "assert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "assert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "assert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "assert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "assert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "assert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "assert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "assert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "assert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "assert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "assert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "assert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "assert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "assert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "assert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "assert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "assert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "assert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "assert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "assert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "assert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "assert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "assert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "assert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "assert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "assert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "assert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "assert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "assert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "assert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "assert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "assert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "assert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "assert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "assert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "assert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "assert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "assert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "assert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "assert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "assert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "assert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "assert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "assert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "assert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "assert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "assert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "assert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "assert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "assert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "assert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "assert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "assert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "assert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "assert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "assert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "assert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "assert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "assert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "assert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "assert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "assert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "assert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "assert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "assert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "assert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "assert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "assert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "assert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "assert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "entry_point": "sort_matrix", "repair_prompt": ["Write a function sort_matrix to sort a given matrix in ascending order according to the sum of its rows. Ensure that this sorting operation maintains the relative order of the rows which have the same sum.\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", " \nWrite a function sort_matrix to sort a given matrix in ascending order according to the sum of its rows. Make sure that this sorting operation keeps the relative order of the rows that have the same sum.\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", " Write a function sort_matrix to sort a given matrix in ascending order according to the sum of its rows. Ensure that this sorting operation maintains the relative order of the rows which have the same sum.\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"], "completions": ["from typing import List\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts the rows of a matrix based on the sum of their elements in ascending order.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row of the matrix.\n    \n    Returns:\n        List[List[int]]: A new 2D list with the rows sorted by their sums.\n    \"\"\"\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_matrix = [[1, 2], [2, 3], [1, 1]]\n    sorted_matrix = sort_matrix(example_matrix)\n    print(sorted_matrix)  # Output: [[1, 2], [1, 1], [2, 3]]\n", "from typing import List\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts the rows of a matrix based on the sum of the elements in each row.\n    If two rows have the same sum, their relative order is maintained.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row in the matrix.\n    \n    Returns:\n        List[List[int]]: A new list of lists sorted by the sum of the rows.\n    \"\"\"\n    return sorted(matrix, key=lambda row: (sum(row), row))\n", "from typing import List\n## main.py\n\nimport typing\n\ndef sort_matrix(matrix: typing.List[typing.List[int]]) -> typing.List[typing.List[int]]:\n    \"\"\"\n    Sorts the given matrix based on the sum of its rows in ascending order.\n    The sorting is stable, meaning rows with the same sum will maintain their original order.\n\n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row in the matrix.\n\n    Returns:\n        List[List[int]]: A new 2D list with the rows sorted by the sum of their elements.\n    \"\"\"\n    # Sort the matrix using a stable sort algorithm\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a matrix based on the sum of its rows in ascending order.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row in the matrix.\n    \n    Returns:\n        List[List[int]]: A new 2D list with the rows sorted by the sum of their elements.\n    \"\"\"\n    return sorted(matrix, key=lambda row: sum(row))\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [1, 1, 1]\n    ]\n    sorted_matrix = sort_matrix(example_matrix)\n    print(sorted_matrix)  # Output: [[1, 1, 1], [1, 2, 3], [4, 5, 6]]\n", "from typing import List\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a matrix by the sum of its rows while maintaining the relative order of rows with the same sum.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row of integers.\n    \n    Returns:\n        List[List[int]]: A 2D list where the rows are sorted by their sums, and rows with the same sum are in their original order.\n    \"\"\"\n    # Sort the matrix using a custom key that calculates the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n", "from typing import List\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a matrix based on the sum of its rows.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row of integers.\n    \n    Returns:\n        List[List[int]]: A 2D list where the rows are sorted by the sum of their elements.\n    \"\"\"\n    # Sort the matrix using a custom key that calculates the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n", "from typing import List\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a matrix based on the sum of its rows in ascending order.\n\n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row.\n\n    Returns:\n        List[List[int]]: A new 2D list with the rows sorted by their sums.\n    \"\"\"\n    # Define a custom key function that returns the sum of each row\n    def row_sum(row: List[int]) -> int:\n        return sum(row)\n\n    # Use the sorted function with the custom key\n    sorted_matrix = sorted(matrix, key=row_sum)\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    matrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]\n    sorted_matrix = sort_matrix(matrix)\n    print(sorted_matrix)  # Output: [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a matrix by the sum of its rows in ascending order.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row of integers.\n    \n    Returns:\n        List[List[int]]: A new 2D list with the rows sorted by their sums.\n    \"\"\"\n    # Define a key function that returns the sum of each row\n    def row_sum(row: List[int]) -> int:\n        return sum(row)\n    \n    # Use the sorted function with the custom key\n    sorted_matrix = sorted(matrix, key=row_sum)\n    return sorted_matrix\n", "from typing import List\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a matrix based on the sum of its rows, maintaining the relative order of rows with the same sum.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row in the matrix.\n    \n    Returns:\n        List[List[int]]: A new 2D list with the rows sorted by their sums.\n    \"\"\"\n    # Sort the matrix using a custom key that calculates the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n", "from typing import List\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a matrix based on the sum of its rows, maintaining the order of rows with equal sums.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row in the matrix.\n    \n    Returns:\n        List[List[int]]: A 2D list where the rows are sorted based on the sum of their elements.\n    \"\"\"\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    matrix = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\n    sorted_matrix = sort_matrix(matrix)\n    print(sorted_matrix)  # Output: [[4, 5], [1, 2, 3], [6, 7, 8, 9]]\n"], "plans": ["requirement analysis:\nThe requirement is to sort a matrix based on the sum of its rows. The sorting should be in ascending order, and if two rows have the same sum, their relative order should be maintained. This requirement is crucial for tasks where matrix analysis and sorting are necessary.\nrequirement pool:\n- Implement a function to sort a matrix by row sums\n- Ensure the function maintains the order of rows with equal sums\n- Optimize the function for performance and compatibility\n- Add documentation and examples for easy understanding\n- Include error handling for unexpected inputs\nTo implement the `sort_matrix` function efficiently and maintain the relative order of rows with equal sums, we will use Python's built-in `sorted` function with a custom key. This key will calculate the sum of each row and use it for sorting. Python's handling of stable sorts ensures that rows with equal sums will retain their original order.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array structure with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': arranging elements from smallest to largest\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To sort the matrix based on the sum of its rows, we can use the `sorted` function in Python with a key that calculates the sum of each row. The key will be a lambda function that sums up the elements of each row. The `sorted` function will then sort the matrix based on these sums, maintaining the relative order of rows with equal sums due to Python's stable sort implementation.\n\n# [edge case] \n    sort_matrix([[1, 2], [2, 3], [1, 1]]) = [[1, 2], [1, 1], [2, 3]]\n    Explanation: The sum of the first row is 3, the second row is 5, and the third row is 2. The matrix is sorted based on these sums, maintaining the relative order of rows with equal sums.\n    sort_matrix([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\n    Explanation: All rows have the same sum, so their relative order is preserved.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The `sorted` function in Python already handles the sorting of rows with equal sums by maintaining their original order due to its stable sort implementation.\n", "requirement analysis:\nThe requirement is to sort a matrix based on the sum of its rows. The sorting should be stable, meaning that rows with the same sum should maintain their relative order. This requirement is crucial for tasks where the order of rows with equal sums is significant, such as in data analysis where similar sums might represent similar patterns or values.\nrequirement pool:\n- Implement a stable sorting algorithm to maintain row order\n- Ensure the function can handle matrices of different sizes\n- Optimize the sorting process for efficiency\n- Include error handling for non-matrix inputs\n- Provide clear documentation and examples for user guidance\nTo implement the `sort_matrix` function efficiently and maintain the relative order of rows with the same sum, we will utilize Python's built-in sorting capabilities along with the `functools.total_ordering` decorator to simplify comparisons. This approach ensures clarity and simplicity in the code structure while maintaining performance.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': arranging elements from smallest to largest\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To sort the matrix by the sum of its rows, we can use Python's `sorted` function with a custom key. This key will sum each row and use the sum as the primary sorting criterion, ensuring stability by using the row itself as the secondary criterion in case of ties.\n\n    def sort_matrix(matrix):\n        return sorted(matrix, key=lambda row: (sum(row), row))\n\n# [edge case] \n    sort_matrix([[1, 2], [2, 3], [1, 2]]) = [[1, 2], [1, 2], [2, 3]]\n    Explanation: The sums of the rows are all 3, so the relative order is maintained based on the original order of the rows.\n    sort_matrix([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\n    Explanation: All rows have the same sum, so the order is maintained based on the original order of the rows.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The built-in `sorted` function in Python already ensures that rows with the same sum are ordered based on their original order.\n", "requirement analysis:\nThe requirement is to sort a matrix based on the sum of its rows. The sorting should be stable, meaning that rows with the same sum should maintain their relative order. This ensures that the function is not only efficient but also predictable and reliable.\nrequirement pool:\n- Implement a stable sorting algorithm to maintain row order\n- Ensure the function can handle matrices of varying sizes\n- Optimize performance for large matrices\n- Include clear documentation and examples\n- Test the function with edge cases\nTo implement the `sort_matrix` function efficiently and maintain the relative order of rows with the same sum, we will use Python's built-in `sorted` function with a custom key. This key will calculate the sum of each row, and the sorting will be stable based on these sums.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array structure with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': arranging elements from smallest to largest\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To sort the matrix based on the sum of its rows, we can use the `sorted` function in Python with a key that calculates the sum of each row. The key will be a lambda function that sums up the elements of each row. The sorting will be stable, meaning that rows with the same sum will maintain their original order.\n\n# [edge case] \n    sort_matrix([[1, 2, 3], [4, 5, 6], [1, 1, 1]]) = [[1, 1, 1], [1, 2, 3], [4, 5, 6]]\n    Explanation: The sums of the rows are 6, 15, and 3 respectively. The matrix is sorted based on these sums, and rows with the same sum maintain their original order.\n    sort_matrix([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\n    Explanation: All rows have the same sum, so their order is preserved.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The `sorted` function in Python is designed to handle cases where elements are equal, maintaining the original order.\n", "requirement analysis:\nThe requirement is to sort a matrix by the sum of its rows. The sorting should be in ascending order, and the relative order of rows with the same sum should be maintained. This is a common task in data analysis and programming, where understanding how to sort matrices by row sums can be beneficial for various applications.\nrequirement pool:\n- Implement a function to sort a matrix by the sum of its rows.\n- Ensure the function maintains the relative order of rows with the same sum.\n- Optimize the function for performance to handle large matrices efficiently.\n- Provide clear documentation and examples to help users understand and use the function.\n- Test the function with various matrices to ensure it works correctly across different scenarios.\nTo implement the `sort_matrix` function efficiently and maintain the relative order of rows with the same sum, we will use Python's built-in sorting capabilities. Specifically, we will leverage the `sorted` function with a custom key that calculates the sum of each row. This approach ensures that the function is both scalable and easy to understand.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array structure with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': arranging elements from smallest to largest\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To sort the matrix based on the sum of its rows, we can use the `sorted` function in Python. The `sorted` function allows us to specify a key function that determines the values used for sorting. In this case, the key function will be the sum of each row. Here's how the function can be implemented:\n\n    ```python\n    def sort_matrix(matrix):\n        return sorted(matrix, key=sum)\n    ```\n\n    This function will sort the rows of the matrix based on the sum of their elements in ascending order. If two rows have the same sum, their relative order will be preserved as in the original matrix.\n\n# [edge case] \n    sort_matrix([[1, 2, 3], [4, 5, 6], [1, 1, 1]]) = [[1, 1, 1], [1, 2, 3], [4, 5, 6]]\n    Explanation: The sums of the rows are 6, 15, and 3, respectively. Sorting these sums in ascending order results in the order [3, 6, 15]. The rows maintain their relative order since they have unique sums.\n\n    sort_matrix([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) = [[1, 1, 1], [2, 2, 2], [3, 3, 3]]\n    Explanation: All rows have the same sum (3), so their relative order is preserved.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The `sorted` function in Python is designed to handle cases where there are duplicate keys, and it will preserve the order of equal elements.\n", "requirement analysis:\nThe requirement is to sort a matrix based on the sum of its rows. The sorting should be in ascending order, and it should maintain the relative order of rows with the same sum. This requirement is crucial for applications where the identification of rows with extreme sums is important.\nrequirement pool:\n- Implement a function to sort a matrix by row sums\n- Ensure the function maintains the order of rows with equal sums\n- Optimize the function for performance\n- Make the function compatible with matrices of various dimensions\n- Provide clear documentation and examples for user guidance\nTo implement the `sort_matrix` function efficiently and maintain the relative order of rows with the same sum, we will use Python's built-in sorting capabilities along with a custom key function that calculates the sum of each row. This approach leverages Python's simplicity and performance for such tasks.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': from smallest to largest\n    'relative order': maintaining the original order for rows with the same sum\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To sort the matrix by the sum of its rows, we can use the `sorted` function in Python with a custom key. The key will be a lambda function that calculates the sum of each row. The `sorted` function will sort the rows based on this sum, and since it is stable, it will maintain the relative order of rows with the same sum.\n\n# [edge case] \n    sort_matrix([[1, 2], [2, 1], [1, 1, 1]]) = [[1, 2], [2, 1], [1, 1, 1]]\n    Explanation: The sums of the rows are all 3, so the relative order is maintained as in the original matrix.\n    sort_matrix([[1, 1], [1, 1], [2, 2]]) = [[1, 1], [1, 1], [2, 2]]\n    Explanation: All rows have the same sum, so the relative order is maintained as in the original matrix.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The `sorted` function in Python is designed to handle matrices with identical row sums without additional code.\n", "requirement analysis:\nThe requirement is to sort a matrix based on the sum of its rows. The sorting should be in ascending order, and it should maintain the relative order of rows with the same sum. This requirement is clear and specific, focusing on functionality and performance.\nrequirement pool:\n- Implement a function to sort a matrix by row sum\n- Ensure the function maintains the order of rows with equal sums\n- Optimize the function for performance and scalability\n- Include error handling for different matrix sizes and types\n- Enhance user interface for better usability\nTo implement the `sort_matrix` function efficiently and maintain the relative order of rows with the same sum, we will use Python's built-in sorting capabilities along with a custom key function that calculates the sum of each row. This approach ensures both performance and clarity in the code.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array structure with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': arranging elements from smallest to largest\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To sort the matrix based on the sum of its rows, we can use the `sorted` function in Python with a custom key. This key will be a lambda function that calculates the sum of each row. The `sorted` function will then sort the rows based on these sums, maintaining the relative order of rows with identical sums using the `stable` sort algorithm.\n\n# [edge case] \n    sort_matrix([[1, 2], [2, 1], [1, 1, 1]]) = [[1, 2], [2, 1], [1, 1, 1]]\n    Explanation: The matrix has two rows with the same sum (3). The relative order of these rows is maintained as in the original matrix.\n    sort_matrix([[1, 2, 3], [3, 2, 1], [1, 1, 1], [2, 2, 2]]) = [[1, 1, 1], [1, 2, 3], [2, 2, 2], [3, 2, 1]]\n    Explanation: The rows are sorted by their sums: 1+1+1=3, 1+2+3=6, 2+2+2=6, 3+2+1=6. The rows with the same sum (6) maintain their relative order.\n    sort_matrix([[10], [10], [5]]) = [[5], [10], [10]]\n    Explanation: The matrix has two rows with the same sum (10). The relative order of these rows is maintained as in the original matrix.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The `sorted` function in Python is designed to handle cases where elements are equal, maintaining the original order among equal elements.\n", "requirement analysis:\nThe requirement is to sort a matrix based on the sum of its rows. The sorting should be stable, meaning that rows with the same sum should maintain their original order. This is a common task in data processing and should be handled efficiently and correctly.\nrequirement pool:\n- Implement a function to sort a matrix by the sum of its rows\n- Ensure the sorting is stable to maintain the relative order of rows with the same sum\n- Optimize the function for performance, especially for large matrices\n- Ensure compatibility with different matrix representations\n- Provide clear documentation and examples for user guidance\nTo implement the `sort_matrix` function efficiently and correctly, we will utilize Python's built-in sorting capabilities along with the `functools.cmp_to_key` function to handle the custom sorting based on the sum of rows. This approach ensures both performance and readability, aligning with the goal of creating an efficient and user-friendly sorting function.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': arranging elements from smallest to largest\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To sort the matrix based on the sum of its rows, we can use the `sorted` function in Python with a custom key. This key will calculate the sum of each row and use it for sorting.\n\n    def sort_matrix(matrix):\n        # Define a custom key function that returns the sum of each row\n        def row_sum(row):\n            return sum(row)\n        \n        # Use the sorted function with the custom key\n        sorted_matrix = sorted(matrix, key=row_sum)\n        return sorted_matrix\n\n# [edge case] \n    sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) = [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    Explanation: The sum of the first row is 6, the second row is 11, and the third row is 3. Sorting these sums in ascending order gives us the order [[1, 1, 1], [1, 2, 3], [2, 4, 5]].\n\n# [extra code for edge case]\n    No extra code is needed for this specific edge case as the provided code already handles the sorting correctly.\n", "requirement analysis:\nThe requirement is to sort a matrix based on the sum of its rows. The sorting should be in ascending order, and if two rows have the same sum, their relative order should be maintained. This requirement is crucial for tasks where matrix analysis or manipulation is necessary.\nrequirement pool:\n- Implement a function to sort a matrix by row sums\n- Ensure the function maintains the order of rows with equal sums\n- Optimize the function for performance and compatibility\n- Add documentation and examples for user guidance\n- Test the function with various matrix sizes and edge cases\nTo implement the `sort_matrix` function efficiently and maintain the order of rows with equal sums, we will use Python's built-in sorting capabilities along with a custom key function that calculates the sum of each row. This approach ensures that the function is both user-friendly and compatible across different matrix sizes. We will also ensure that the function is optimized for performance to handle large matrices effectively.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array of numbers\n    'sum of rows': the total of all numbers in each row\n    'ascending order': arranging numbers from smallest to largest\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To sort the matrix by the sum of its rows, we can use the `sorted` function in Python with a custom key. This key will calculate the sum of each row. The `sorted` function allows us to specify a key function that determines the sorting criteria. Here's how you can implement it:\n\n    ```python\n    def sort_matrix(matrix):\n        # Define a key function that returns the sum of each row\n        def row_sum(row):\n            return sum(row)\n        \n        # Use the sorted function with the custom key\n        sorted_matrix = sorted(matrix, key=row_sum)\n        return sorted_matrix\n    ```\n\n# [edge case] \n    sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    Explanation: The matrix is already sorted by the sum of its rows since each row's sum is the same (6 for each row).\n\n    sort_matrix([[5, 3, 8], [2, 4, 1], [9, 7, 6]]) = [[2, 4, 1], [5, 3, 8], [9, 7, 6]]\n    Explanation: The sums of the rows are 16, 7, and 22 respectively. The matrix is sorted by these sums in ascending order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The `sorted` function in Python automatically handles the case where rows have the same sum by maintaining their relative order.\n", "requirement analysis:\nThe requirement is to sort a matrix based on the sum of its rows. The sorting should be in ascending order, and if two rows have the same sum, their relative order should be maintained. This requirement is crucial for tasks where matrix analysis and sorting are necessary.\nrequirement pool:\n- Implement a function to sort a matrix by row sums\n- Ensure the function maintains the order of rows with equal sums\n- Optimize the function for performance\n- Add support for matrices of varying sizes\n- Enhance user documentation and examples\nTo implement the `sort_matrix` function efficiently and maintain the relative order of rows with the same sum, we will use Python's built-in `sorted` function with a custom key. This key will calculate the sum of each row and use it for sorting. Python's handling of stable sorts ensures that rows with the same sum will retain their original order.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array structure with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': arranging elements from smallest to largest\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To sort the matrix based on the sum of its rows, we can use the `sorted` function in Python with a key that calculates the sum of each row. The key will be a lambda function that sums up the elements of each row. The `sorted` function will then sort the matrix based on these sums, maintaining the relative order of rows with the same sum due to Python's stable sort implementation.\n\n# [edge case] \n    sort_matrix([[1, 2], [2, 1], [1, 1, 1]]) = [[1, 2], [2, 1], [1, 1, 1]]\n    Explanation: The sums of the rows are all 3, so the relative order is maintained as in the original matrix.\n    sort_matrix([[1, 1], [1, 1], [2, 2]]) = [[1, 1], [1, 1], [2, 2]]\n    Explanation: The sums of the rows are all 2, so the relative order is maintained as in the original matrix.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The `sorted` function in Python's standard library is designed to handle matrices with identical row sums efficiently.\n", "requirement analysis:\nThe requirement is to sort a matrix based on the sum of its rows. The sorting should be in ascending order, and if two rows have the same sum, their relative order should be maintained. This requirement is crucial for tasks where matrix analysis and manipulation are necessary.\nrequirement pool:\n- Implement a function to sort a matrix by row sums\n- Ensure the function maintains the order of rows with equal sums\n- Optimize the function for performance and compatibility\n- Add documentation and examples for user guidance\n- Test the function with various matrix sizes and edge cases\nTo implement the `sort_matrix` function efficiently and maintain the order of rows with equal sums, we will use Python's built-in sorting capabilities along with a custom key function to sort the rows based on their sums. This approach ensures clarity and simplicity in the code structure while maintaining performance.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'matrix': a 2D array with rows and columns\n    'sum of rows': the total of all elements in each row\n    'ascending order': arranging elements from smallest to largest\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To sort the matrix based on the sum of its rows, we can use the `sorted` function in Python with a custom key. The key will be a lambda function that calculates the sum of each row. The `sorted` function will then sort the rows based on these sums, maintaining the relative order of rows with equal sums.\n\n# [edge case] \n    sort_matrix([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) = [[4, 5], [1, 2, 3], [6, 7, 8, 9]]\n    Explanation: The sums of the rows are 6, 8, and 32 respectively. The rows are sorted based on these sums, maintaining the relative order of rows with equal sums.\n    sort_matrix([[5, 5, 5], [3, 3, 3], [2, 2, 2]]) = [[2, 2, 2], [3, 3, 3], [5, 5, 5]]\n    Explanation: All rows have the same sum (15), so their relative order is maintained in the sorted output.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The `sorted` function in Python is designed to handle cases where rows have the same sum, maintaining their relative order.\n"], "test": ["def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "scores": [1.0, 0.9216, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, false, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 94, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a matrix based on the sum of its rows, maintaining the order of rows with equal sums.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list where each inner list represents a row in the matrix.\n    \n    Returns:\n        List[List[int]]: A 2D list where the rows are sorted based on the sum of their elements.\n    \"\"\"\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix\n\n# Example usage:\nif __name__ == \"__main__\":\n    matrix = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]\n    sorted_matrix = sort_matrix(matrix)\n    print(sorted_matrix)  # Output: [[4, 5], [1, 2, 3], [6, 7, 8, 9]]\n", "passed": true, "pass": true, "pass_num": 9, "round": 8, "mutate_method": "add_1_sentence_at_end", "parent_index": 8}
