{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 223, "prompt": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array, where the majority element is the element that occurs more than n/2 times.", "code": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1", "test_imports": [], "test_list": ["assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True", "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False", "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True", "assert is_majority([6, 2, 3, 8, 1, 4, 11], 7, 8) == False", "assert is_majority([4, 6, 3, 2, 6, 3, 11], 9, 5) == False", "assert is_majority([4, 4, 4, 6, 6, 7, 12], 7, 4) == False", "assert is_majority([6, 3, 2, 1, 8, 7, 13], 12, 7) == False", "assert is_majority([1, 1, 5, 8, 6, 5, 9], 4, 6) == False", "assert is_majority([3, 4, 8, 6, 6, 8, 8], 11, 2) == False", "assert is_majority([1, 5, 4, 1, 2, 5, 12], 4, 7) == False", "assert is_majority([1, 3, 1, 4, 1, 4, 14], 7, 8) == False", "assert is_majority([2, 7, 3, 4, 1, 4, 12], 4, 7) == False", "assert is_majority([1, 1, 1, 7, 5, 1, 15], 3, 6) == False", "assert is_majority([4, 4, 7, 4, 3, 3, 7], 3, 1) == False", "assert is_majority([4, 3, 7, 1, 7, 4, 12], 8, 8) == False", "assert is_majority([3, 5, 2, 4, 8, 1, 11], 3, 4) == False", "assert is_majority([1, 2, 7, 5, 4, 6, 15], 5, 5) == False", "assert is_majority([3, 4, 4, 5, 8, 3, 7], 6, 7) == False", "assert is_majority([3, 3, 8, 6, 3, 7, 13], 9, 7) == False", "assert is_majority([3, 1, 1, 6, 6, 6, 5], 3, 1) == False", "assert is_majority([6, 2, 3, 4, 7, 2, 9], 2, 5) == False", "assert is_majority([6, 4, 6, 7, 3, 8, 10], 5, 3) == False", "assert is_majority([4, 5, 2, 7, 2, 8, 12], 4, 3) == False", "assert is_majority([3, 4, 1, 1, 6, 5, 13], 4, 2) == False", "assert is_majority([3, 4, 8, 4, 4, 1, 9], 3, 3) == False", "assert is_majority([2, 2, 1, 5, 4, 7, 8], 7, 2) == False", "assert is_majority([2, 3, 1, 4, 1, 4, 10], 4, 2) == False", "assert is_majority([2, 1, 8, 2, 2, 8, 5], 7, 7) == False", "assert is_majority([4, 4, 2, 3, 4, 1, 9], 3, 4) == True", "assert is_majority([4, 3, 7, 3, 1, 4, 5], 11, 1) == False", "assert is_majority([2, 7, 3, 6, 2, 6, 11], 9, 1) == False", "assert is_majority([5, 2, 1, 6, 3, 6, 6], 9, 6) == False", "assert is_majority([2, 2, 6, 7, 2, 3, 8], 2, 7) == False", "assert is_majority([3, 1, 6, 3, 5, 1, 9], 8, 7) == False", "assert is_majority([4, 5, 7, 5, 1, 3, 14], 9, 1) == False", "assert is_majority([4, 3, 3, 2, 6, 1, 6], 10, 2) == False", "assert is_majority([2, 3, 5, 5, 4, 2, 11, 7], 5, 6) == False", "assert is_majority([2, 1, 7, 7, 4, 1, 5, 10], 3, 8) == False", "assert is_majority([2, 6, 6, 2, 9, 3, 7, 9], 3, 7) == False", "assert is_majority([2, 1, 1, 6, 6, 5, 7, 3], 7, 4) == False", "assert is_majority([6, 4, 4, 6, 9, 4, 2, 7], 7, 3) == False", "assert is_majority([3, 1, 4, 4, 1, 9, 7, 1], 11, 3) == False", "assert is_majority([5, 6, 7, 5, 3, 9, 9, 3], 8, 2) == False", "assert is_majority([3, 6, 6, 6, 3, 3, 3, 6], 10, 3) == True", "assert is_majority([6, 4, 1, 3, 6, 5, 7, 7], 6, 9) == False", "assert is_majority([4, 6, 1, 8, 5, 8, 6, 11], 7, 1) == False", "assert is_majority([5, 6, 7, 4, 7, 4, 8, 10], 6, 8) == False", "assert is_majority([5, 3, 4, 8, 2, 7, 6, 6], 13, 6) == False", "assert is_majority([4, 5, 5, 7, 5, 3, 8, 9], 7, 2) == False", "assert is_majority([3, 5, 3, 1, 1, 9, 1, 2], 3, 9) == False", "assert is_majority([2, 5, 6, 8, 6, 9, 1, 4], 7, 7) == False", "assert is_majority([4, 3, 2, 6, 8, 8, 9, 2], 7, 8) == False", "assert is_majority([5, 1, 6, 4, 4, 5, 5, 9], 3, 3) == False", "assert is_majority([6, 2, 5, 5, 2, 2, 2, 9], 7, 4) == False", "assert is_majority([2, 3, 6, 3, 4, 3, 10, 9], 6, 3) == False", "assert is_majority([5, 2, 4, 5, 9, 4, 2, 10], 3, 4) == False", "assert is_majority([2, 3, 4, 5, 5, 9, 8, 10], 4, 1) == False", "assert is_majority([3, 1, 7, 6, 5, 2, 2, 10], 5, 8) == False", "assert is_majority([1, 2, 3, 6, 6, 8, 7, 2], 7, 6) == False", "assert is_majority([5, 2, 6, 3, 3, 2, 3, 11], 8, 2) == False", "assert is_majority([4, 3, 5, 6, 2, 8, 5, 10], 5, 8) == False", "assert is_majority([3, 5, 4, 1, 1, 1, 9, 4], 5, 5) == False", "assert is_majority([1, 1, 2, 3, 2, 8, 8, 8], 11, 2) == False", "assert is_majority([2, 5, 2, 7, 9, 3, 6, 5], 8, 1) == False", "assert is_majority([3, 2, 3, 2, 5, 8, 11, 11], 9, 7) == False", "assert is_majority([4, 4, 1, 8, 2, 6, 1, 10], 9, 2) == False", "assert is_majority([4, 2, 6, 8, 9, 4, 4, 4], 13, 1) == False", "assert is_majority([1, 3, 7, 3, 1, 7, 10, 7], 4, 8) == False", "assert is_majority([6, 1, 7, 8, 4, 1, 3, 9], 7, 3) == False", "assert is_majority([1, 6, 2, 6, 3], 7, 2) == False", "assert is_majority([2, 1, 1, 7, 2], 2, 5) == False", "assert is_majority([5, 1, 6, 5, 7], 5, 5) == False", "assert is_majority([2, 1, 1, 6, 6], 5, 4) == False", "assert is_majority([2, 2, 2, 4, 6], 3, 6) == False", "assert is_majority([2, 1, 6, 3, 1], 6, 3) == False", "assert is_majority([3, 5, 5, 6, 5], 3, 6) == False", "assert is_majority([1, 1, 3, 5, 4], 5, 6) == False", "assert is_majority([1, 6, 4, 3, 1], 6, 2) == False", "assert is_majority([6, 3, 4, 4, 2], 9, 2) == False", "assert is_majority([3, 4, 4, 7, 7], 3, 2) == False", "assert is_majority([5, 3, 4, 6, 3], 1, 2) == False", "assert is_majority([6, 5, 5, 1, 1], 4, 2) == False", "assert is_majority([1, 4, 1, 6, 4], 2, 1) == False", "assert is_majority([2, 5, 2, 2, 7], 6, 5) == False", "assert is_majority([5, 5, 1, 3, 3], 4, 5) == False", "assert is_majority([5, 6, 1, 5, 6], 2, 2) == False", "assert is_majority([4, 2, 5, 3, 5], 6, 1) == False", "assert is_majority([6, 2, 6, 6, 7], 9, 1) == False", "assert is_majority([6, 5, 1, 3, 5], 10, 4) == False", "assert is_majority([6, 5, 6, 6, 3], 3, 3) == False", "assert is_majority([6, 6, 5, 3, 7], 3, 4) == False", "assert is_majority([1, 3, 4, 7, 7], 4, 6) == False", "assert is_majority([2, 2, 6, 7, 6], 9, 1) == False", "assert is_majority([1, 3, 2, 7, 6], 3, 2) == False", "assert is_majority([3, 2, 4, 2, 4], 2, 2) == False", "assert is_majority([1, 4, 4, 1, 4], 2, 6) == False", "assert is_majority([3, 4, 3, 1, 4], 2, 6) == False", "assert is_majority([4, 1, 4, 2, 2], 2, 2) == False", "assert is_majority([1, 3, 3, 3, 7], 5, 2) == False", "assert is_majority([6, 6, 1, 3, 1], 7, 1) == False", "assert is_majority([1, 5, 2, 2, 2], 2, 6) == False", "assert is_majority([2, 2, 4, 6, 5], 2, 4) == False"], "entry_point": "is_majority", "repair_prompt": ["Write a function is_majority that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array, where the majority element is the element that occurs more than n/2 times.\nis_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n", " Write a function is_majority that, given a sorted array, its length (n), and an element, determines whether the element is the majority element in the array. The majority element is defined as the element that appears more than n/2 times in the array.\nis_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n", " Write a function is_majority that, given a sorted array of length n and an element, determines if the element is the majority element in the array, meaning it occurs more than n/2 times.\nis_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n"], "completions": ["from typing import List\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Determines if an element is the majority element in a sorted array.\n    \n    Args:\n        arr (List[int]): A sorted list of integers.\n        n (int): The length of the array.\n        x (int): The element to check for majority.\n        \n    Returns:\n        bool: True if x is the majority element, False otherwise.\n    \"\"\"\n    if n == 0:\n        return False\n    \n    # Step 1: Initialize count and candidate\n    count = 0\n    candidate = None\n    \n    # Step 2: Iterate through the array to find the candidate\n    for num in arr:\n        if count == 0:\n            candidate = num\n            count = 1\n        elif num == candidate:\n            count += 1\n        else:\n            count -= 1\n    \n    # Step 3: Verify if the candidate is the majority element\n    count = 0\n    for num in arr:\n        if num == candidate:\n            count += 1\n    \n    # Step 4: Check if the candidate's frequency is more than n/2\n    return count > n // 2\n", "from typing import List\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Determines if an element is the majority in a sorted array.\n    \n    Args:\n        arr (List[int]): A sorted list of integers.\n        n (int): The number of elements in the array.\n        x (int): The element to check for majority status.\n    \n    Returns:\n        bool: True if x is the majority element, False otherwise.\n    \"\"\"\n    # Initialize low and high pointers for binary search\n    low = 0\n    high = n - 1\n    \n    # Perform binary search to find the element x\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            # Check if the count of x is more than half the array length\n            count = sum(1 for i in arr if i == x)\n            if count > n // 2:\n                return True\n            else:\n                return False\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    # If the element is not found, return False\n    return False\n", "from typing import List\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Determines if an element is the majority in a sorted array.\n    \n    Args:\n        arr (List[int]): A sorted list of integers.\n        n (int): The number of elements in the array.\n        x (int): The element to check for majority.\n    \n    Returns:\n        bool: True if x is the majority element, False otherwise.\n    \"\"\"\n    # Perform binary search to find the first occurrence of x\n    def find_first(arr, low, high, x):\n        if high >= low:\n            mid = low + (high - low) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                return find_first(arr, mid + 1, high, x)\n            else:\n                return find_first(arr, low, mid - 1, x)\n        return -1\n    \n    first_index = find_first(arr, 0, n - 1, x)\n    \n    # If the element is not found at all, return False\n    if first_index == -1:\n        return False\n    \n    # Check if the count of x is more than n/2\n    return (first_index + n // 2) <= (n - 1) and arr[first_index + n // 2] == x\n\n# Example usage:\n# print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3))  # Output: True\n# print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 10)) # Output: True\n# print(is_majority([1, 1, 2, 2, 2, 2, 3], 7, 2))   # Output: True\n", "from typing import List\n## main.py\n\ndef is_majority(arr: list[int], n: int, x: int) -> bool:\n    \"\"\"\n    Determines if the element x is a majority element in the sorted array arr.\n    \n    Args:\n        arr (list[int]): A sorted list of integers.\n        n (int): The length of the array.\n        x (int): The target element to check for majority.\n    \n    Returns:\n        bool: True if x is a majority element, False otherwise.\n    \"\"\"\n    if n == 0:\n        return False\n    \n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    \n    return count > n // 2\n", "from typing import List\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Determines if a given element is the majority element in a sorted array.\n    \n    Args:\n        arr (List[int]): A sorted list of integers.\n        n (int): The number of elements in the array.\n        x (int): The element to check for majority status.\n    \n    Returns:\n        bool: True if x is the majority element, False otherwise.\n    \"\"\"\n    count = 0\n    for element in arr:\n        if element == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False\n", "from typing import List\n## main.py\n\ndef is_majority(arr: list[int], n: int, x: int) -> bool:\n    \"\"\"\n    Determines if a given element is the majority element in a sorted array.\n\n    Args:\n        arr (list[int]): A sorted list of integers.\n        n (int): The number of elements in the array.\n        x (int): The element to check for majority status.\n\n    Returns:\n        bool: True if the element is the majority element, False otherwise.\n    \"\"\"\n    # Function to find the index of the first occurrence of x\n    def first_occurrence(arr, low, high, x):\n        if high >= low:\n            mid = (low + high) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                return first_occurrence(arr, mid + 1, high, x)\n            else:\n                return first_occurrence(arr, low, mid - 1, x)\n        return -1\n\n    # Find the first occurrence of x\n    first_index = first_occurrence(arr, 0, n - 1, x)\n\n    # If the element is not present at all, return False\n    if first_index == -1:\n        return False\n\n    # Calculate the last occurrence of x\n    last_index = first_index + n // 2\n\n    # Check if the element is the majority element\n    if last_index <= n - 1 and arr[last_index] == x:\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3))  # Output: True\n# print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 10)) # Output: True\n# print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 1))  # Output: False\n", "from typing import List\nfrom typing import List\n\ndef is_majority(arr: List[int], target: int) -> bool:\n    if len(arr) == 0:\n        return False\n    \n    def find_first(arr, target):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n    \n    def find_last(arr, target):\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] <= target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return right\n    \n    first_index = find_first(arr, target)\n    last_index = find_last(arr, target)\n    \n    if first_index <= last_index:\n        count = last_index - first_index + 1\n        return count > len(arr) // 2\n    else:\n        return False\n\n# Example usage:\n# print(is_majority([1, 2, 3, 4, 5], 3))  # True\n# print(is_majority([1, 2, 3, 4, 5], 6))  # False\n# print(is_majority([], 1))  # False\n", "from typing import List\n## main.py\n\ndef is_majority(arr: list[int], target: int) -> bool:\n    \"\"\"\n    Determines if the target element is the majority element in the array.\n    \n    Args:\n        arr (list[int]): The list of integers to search within.\n        target (int): The target element to check for majority status.\n        \n    Returns:\n        bool: True if the target element is the majority element, False otherwise.\n    \"\"\"\n    count = 0\n    for element in arr:\n        if element == target:\n            count += 1\n        if count > len(arr) / 2:\n            return True\n    return False\n", "from typing import List\nfrom typing import List\n\ndef is_majority(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Determines if the given target is the majority element in the sorted array.\n    \n    Args:\n        arr (List[int]): A sorted list of integers.\n        target (int): The element to check for majority status.\n    \n    Returns:\n        bool: True if the target is the majority element, False otherwise.\n    \"\"\"\n    if not arr:\n        return False\n    \n    def binary_search(arr: List[int], target: int) -> bool:\n        \"\"\"\n        Helper function to perform binary search on the sorted array.\n        \n        Args:\n            arr (List[int]): A sorted list of integers.\n            target (int): The element to search for.\n        \n        Returns:\n            bool: True if the target is found in the array, False otherwise.\n        \"\"\"\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == target:\n                return True\n            elif arr[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False\n    \n    def count_occurrences(arr: List[int], target: int) -> int:\n        \"\"\"\n        Helper function to count the occurrences of the target in the array.\n        \n        Args:\n            arr (List[int]): A sorted list of integers.\n            target (int): The element to count.\n        \n        Returns:\n            int: The number of occurrences of the target in the array.\n        \"\"\"\n        count = 0\n        for num in arr:\n            if num == target:\n                count += 1\n        return count\n    \n    if not binary_search(arr, target):\n        return False\n    \n    count = count_occurrences(arr, target)\n    return count > len(arr) // 2\n", "from typing import List\n## main.py\n\ndef is_majority(arr: list[int], n: int, x: int) -> bool:\n    \"\"\"\n    Determines if the element x is the majority element in the sorted array arr.\n    \n    Args:\n        arr (list[int]): A sorted list of integers.\n        n (int): The number of elements in the array.\n        x (int): The element to check for majority.\n    \n    Returns:\n        bool: True if x is the majority element, False otherwise.\n    \"\"\"\n    # If the array is empty, x cannot be the majority element\n    if n == 0:\n        return False\n    \n    # Perform binary search to find the element x\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            # Check if x is the majority element\n            if mid == 0 or arr[mid - 1] != x:\n                # Check if x appears more than n/2 times\n                if mid + 1 < n and arr[mid + 1] == x:\n                    return True\n                elif mid + 1 >= n:\n                    return True\n                else:\n                    return False\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return False\n\n# Example usage:\n# print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3))  # Output: True\n# print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 4))  # Output: False\n# print(is_majority([1, 1, 2, 2, 2, 2, 3], 7, 2))  # Output: True\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that determines if an element is the majority in a sorted array. The majority element is defined as one that occurs more than n/2 times in the array. The function should be efficient and work well with large arrays. Clarity and simplicity in the implementation are important for user understanding and ease of use.\nrequirement pool:\n- Implement the is_majority function to accurately determine if an element is the majority in a sorted array\n- Ensure the function is optimized for performance, especially with large arrays\n- Develop a user-friendly interface for easy understanding and usage\n- Include basic styling and responsiveness to enhance user experience\nTo implement the is_majority function efficiently, we will leverage the properties of sorted arrays and the Boyer-Moore Voting Algorithm. The Boyer-Moore Voting Algorithm is ideal for this scenario because it allows us to determine the majority element in linear time O(n) and constant space O(1). This approach is both efficient and straightforward, making it suitable for large arrays.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': an element that appears more than n/2 times in a sorted array.\n    Explanation: In a sorted array, if an element is the majority element, it will occupy more than half of the positions in the array.\n\n# [phrase showing quantity relationship]\n    'more than': means that the element's frequency in the array should be greater than n/2.\n\n# [degree adverb] \n    'more than': indicates that the frequency of the element must exceed half of the array's length.\n\n# [code logic]\n    To implement the function efficiently, we can use the Boyer-Moore Voting Algorithm:\n    1. Initialize a count variable to 0 and a candidate element.\n    2. Iterate through the array:\n        - If the count is 0, set the current element as the candidate and set the count to 1.\n        - If the current element is the same as the candidate, increment the count.\n        - If the current element is different from the candidate, decrement the count.\n    3. After the iteration, the candidate will be the majority element if it exists.\n    4. Verify the candidate's frequency by iterating through the array again to count its occurrences.\n    5. Return True if the candidate's frequency is more than n/2, otherwise return False.\n\n# [edge case] \n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) = True\n    Explanation: The element 3 appears 4 times, which is more than 7/2 = 3.5 times, so it is the majority element.\n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 4) = False\n    Explanation: The element 4 appears 0 times, which is not more than 7/2 = 3.5 times, so it is not the majority element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The Boyer-Moore Voting Algorithm inherently handles the case where the majority element might not exist, as it will return a candidate element even if it's not the majority. However, we need to verify the candidate's frequency to ensure it meets the majority condition.\n", "requirement analysis:\nThe requirement is to create a function that determines if a given element is the majority in a sorted array. The majority element is defined as one that occurs more than n/2 times in the array. The function should be efficient and work well with sorted arrays. Clarifications are needed to ensure the function handles edge cases and performs optimally.\nrequirement pool:\n- The main code should efficiently determine if the element is the majority\n- The function should handle edge cases and ensure optimal performance\n- The UI should be simple and intuitive\n- The product should be accessible and responsive\n- Include basic user feedback mechanisms\nTo determine if an element is the majority in a sorted array, we can leverage the properties of the array being sorted. A majority element will always be the middle element if the array length is odd, or one of the two middle elements if the array length is even. We can use binary search to efficiently find the element and check its count.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': an element that appears more than half the time in the array.\n    Explanation: In a sorted array, if an element is the majority, it will be the middle element if the array length is odd, or one of the two middle elements if the array length is even.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To determine if an element is the majority in a sorted array, we can use binary search to efficiently find the element and check its count.\n\n# [edge case] \n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 1) = False\n    Explanation: The element 1 appears only twice, which is not more than half the array length (3 times).\n    is_majority([1, 1, 2, 2, 3, 3, 3, 3, 10], 9, 3) = True\n    Explanation: The element 3 appears four times, which is more than half the array length (4.5 times, considering the array length is odd).\n    is_majority([1, 1, 1, 1, 2, 3, 3, 3, 3, 10], 10, 1) = True\n    Explanation: The element 1 appears five times, which is more than half the array length (5 times).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The binary search approach will naturally handle cases where the majority element is at the start or end of the array, or when the array length is very small.\n", "requirement analysis:\nThe requirement is to create a function that determines if a given element is the majority in a sorted array. The majority element is defined as one that occurs more than n/2 times in the array. The function should be efficient and work well with sorted arrays.\nrequirement pool:\n- The main code should efficiently determine if the element is the majority\n- The function should handle sorted arrays efficiently\n- The function should be simple and easy to understand\n- The function should be robust and handle edge cases\n- The function should be optimized for performance\nTo efficiently determine if an element is the majority in a sorted array, we can leverage the properties of sorted arrays and binary search. The majority element will always be the middle element if the array length is odd, or one of the two middle elements if the array length is even. We can use binary search to find the element and then check if it appears more than n/2 times.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': an element that appears more than half the time in the array\n\n    'sorted array': an array where elements are in a specific order, typically ascending or descending\n\n    'binary search': a search algorithm that finds the position of a target value within a sorted array\n\n    Explanation: In a sorted array, the majority element, if it exists, will be the middle element if the array length is odd, or one of the two middle elements if the array length is even. The majority element is defined as the element that appears more than n/2 times in the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To efficiently determine if an element is the majority in a sorted array, we can use binary search to find the element and then check if it appears more than n/2 times.\n\n# [edge case] \n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) = True\n    Explanation: The element 3 appears 4 times in the array of length 7, which is more than 7/2 times. Therefore, 3 is the majority element.\n\n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 10) = True\n    Explanation: The element 10 appears 1 time in the array of length 7, which is not more than 7/2 times. Therefore, 10 is not the majority element.\n\n    is_majority([1, 1, 2, 2, 2, 2, 3], 7, 2) = True\n    Explanation: The element 2 appears 4 times in the array of length 7, which is more than 7/2 times. Therefore, 2 is the majority element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic using binary search and checking the count of the element is sufficient to determine if it is the majority element.\n", "requirement analysis:\nThe requirement is to create a function that checks if a given element is the majority element in a sorted array. The majority element is defined as the element that appears more than n/2 times in the array. This is a specific and clear requirement that can be efficiently implemented using a linear scan approach.\nrequirement pool:\n- Implement the is_majority function\n- Ensure the function works efficiently for large arrays\n- Design a simple and intuitive user interface\n- Optimize the app for performance and responsiveness\n- Include accessibility features for all users\nTo implement the is_majority function efficiently, we will use a linear scan approach. This method will iterate through the sorted array once, counting the occurrences of the target element. If the count exceeds n/2, the element is the majority element. This approach is simple and ensures that the function works efficiently even for large arrays.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': an element that appears more than half the time in the array.\n    Explanation: In the context of the requirement, a majority element is an element that occurs more frequently than any other element in the array, specifically more than n/2 times where n is the length of the array.\n\n# [phrase showing quantity relationship]\n    'more than': means that the frequency of the element must be greater than half of the array's length.\n    Explanation: This phrase indicates that we need to find an element whose count is strictly greater than n/2, where n is the length of the array.\n\n# [degree adverb] \n    'more than': means that the frequency of the element must be strictly greater than half of the array's length.\n    Explanation: This adverb emphasizes the requirement that the element's frequency must exceed the threshold of n/2.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests a linear scan approach to count the occurrences of the target element. Here's a detailed logic:\n    1. Initialize a counter to zero.\n    2. Iterate through the array and count the occurrences of the target element.\n    3. Check if the count is greater than n/2.\n    4. Return True if the count is greater than n/2, otherwise return False.\n\n# [edge case] \n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) = True\n    Explanation: The element 3 appears 4 times in the array of length 7, which is more than 7/2, so 3 is the majority element.\n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 4) = False\n    Explanation: The element 4 appears 0 times in the array, which is not more than 7/2, so 4 is not the majority element.\n    is_majority([1, 1, 2, 2, 3, 3, 3, 3, 10], 9, 3) = True\n    Explanation: The element 3 appears 4 times in the array of length 9, which is more than 9/2, so 3 is the majority element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already checks for the condition of the majority element efficiently.\n", "requirement analysis:\nThe requirement is to determine if a given element is the majority element in a sorted array. The majority element is defined as the element that appears more than n/2 times in the array. The function should be efficient and work correctly for any sorted array.\nrequirement pool:\n- The main code should efficiently determine if the element is the majority element.\n- The function should handle edge cases such as empty arrays or arrays where the element is not present.\n- The function should be optimized for performance, especially for large arrays.\n- The function should be clearly documented and easy to understand.\nTo determine if a given element is the majority element in a sorted array, we can leverage the properties of the array being sorted. A majority element is one that appears more than n/2 times in the array. By utilizing the sorted property, we can efficiently find the majority element using a linear scan. This approach ensures that we only need to traverse the array once, making it efficient.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': an element that appears more than n/2 times in the array.\n    Explanation: In the context of the requirement, a majority element is a number that occurs more than half the time in the sorted array. This is crucial for efficiently determining its presence using a linear scan.\n\n# [phrase showing quantity relationship]\n    'more than n/2 times': means that the element should appear in the array more than half the length of the array.\n    Explanation: This phrase indicates that the frequency of the element must exceed half the length of the array to be considered a majority element.\n\n# [degree adverb] \n    'more than': means that the frequency of the element must be strictly greater than half the length of the array.\n    Explanation: This adverb emphasizes the strict requirement for the element to appear more than half the time in the array.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the function `is_majority`, we can follow these steps:\n    1. Initialize a counter to keep track of the occurrences of the element.\n    2. Iterate through the array and count the occurrences of the element.\n    3. Check if the count is greater than n/2.\n    4. Return `True` if the count is greater than n/2, otherwise return `False`.\n\n# [edge case] \n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) = True\n    Explanation: The element 3 appears 4 times in the array of length 7, which is more than 7/2 = 3.5 times, so it is the majority element.\n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 4) = False\n    Explanation: The element 4 appears 0 times in the array, which is not more than 7/2 = 3.5 times, so it is not the majority element.\n    is_majority([1, 1, 2, 2, 3, 3, 3, 3, 10], 9, 3) = True\n    Explanation: The element 3 appears 4 times in the array of length 9, which is more than 9/2 = 4.5 times, so it is the majority element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to determine the majority element.\n", "requirement analysis:\nThe requirement is to determine if a given element is the majority element in a sorted array. The majority element is defined as the element that appears more than n/2 times in the array. The function should be efficient and handle edge cases such as no majority element or an empty array.\nrequirement pool:\n- The main code should efficiently determine if the element is the majority element.\n- The function should handle edge cases such as an empty array or no majority element.\n- The function should be clear and concise, easy to understand and maintain.\n- The user interface should be responsive and visually appealing.\n- The product should be accessible and work well on different devices.\nTo determine if a given element is the majority element in a sorted array, we can leverage the properties of the array being sorted. A majority element will always be the middle element if the array length is odd, or one of the two middle elements if the array length is even, and it will appear more than n/2 times. We can use a binary search approach to efficiently find the element and check its count.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': an element that appears more than n/2 times in the array.\n    Explanation: In the context of the requirement, a majority element is a number that occurs more frequently than half the length of the array.\n\n# [phrase showing quantity relationship]\n    'more than n/2 times': means that the element should appear more than half the length of the array.\n    Explanation: This phrase indicates that the frequency of the element must be greater than half the number of elements in the array.\n\n# [degree adverb] \n    'more than': means that the frequency of the element must exceed half the length of the array.\n    Explanation: This adverb emphasizes the threshold for the element to be considered a majority element.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the function `is_majority`, we can follow these steps:\n    1. Use binary search to find the element in the array.\n    2. Once found, count the occurrences of the element.\n    3. Check if the count is more than n/2.\n    4. Return `True` if it is, otherwise return `False`.\n\n# [edge case] \n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) = True\n    Explanation: The element 3 appears 4 times, which is more than 7/2 = 3.5 times, so it is the majority element.\n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 10) = True\n    Explanation: The element 10 appears 1 time, which is more than 7/2 = 3.5 times, so it is the majority element.\n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 1) = False\n    Explanation: The element 1 appears 1 time, which is not more than 7/2 = 3.5 times, so it is not the majority element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to determine if an element is a majority element.\n", "requirement analysis:\nThe requirement is to create a function that checks if a given element is the majority in a sorted array. The majority element is defined as one that appears more than n/2 times in the array. The function should be efficient and easy to understand. The input is a sorted array and an element to check, and the output is a boolean indicating whether the element is the majority.\nrequirement pool:\n- Implement the is_majority function with O(log n) time complexity using binary search.\n- Ensure the function handles edge cases such as empty arrays or elements not in the array.\n- Develop a user-friendly interface for easy input and output.\n- Include detailed documentation and examples to help users understand how to use the function.\n- Optimize the UI for better user engagement and aesthetic appeal.\nTo implement the is_majority function efficiently, we will use binary search to determine if the given element is the majority in the sorted array. This approach ensures that the function runs in O(log n) time complexity, making it efficient. We will also handle edge cases such as empty arrays or elements not in the array.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': an element that appears more than half the times in the array.\n    Explanation: In an array of length n, if an element appears more than n/2 times, it is considered a majority element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To determine if an element is the majority in a sorted array, we can use binary search to find the first and last occurrence of the element. If the difference between these two positions plus one is greater than n/2, then the element is the majority.\n\n# [edge case] \n    is_majority([], 0, 1) = False\n    Explanation: An empty array does not contain any elements, so the function should return False.\n    is_majority([1, 2, 3, 4, 5], 5, 6) = False\n    Explanation: The element 6 is not present in the array, so it cannot be the majority element.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case of an empty array.\n        if n == 0:\n            return False\n        (other code)\n", "requirement analysis:\nThe requirement is to determine if a given element is the majority element in a sorted array. The majority element is defined as one that appears more than n/2 times in the array. The function should be efficient and handle edge cases well. The solution should be clear and easy to understand.\nrequirement pool:\n- Implement the is_majority function\n- Ensure the function works correctly for all edge cases\n- Optimize the function for performance\n- Document the function and provide examples of usage\n- Test the function with various inputs to ensure accuracy\nTo implement the is_majority function efficiently, we will leverage Python's built-in capabilities and optimize for performance. The function will use a linear scan to determine if the given element is the majority element, which is a common algorithm for this problem. This approach ensures that the function is both clear and easy to understand, aligning with our goal of creating an efficient and clear solution.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': An element in an array that appears more than n/2 times, where n is the length of the array.\n    Explanation: In the context of the requirement, a majority element is one that occurs more frequently than any other element in the array. This is particularly useful in scenarios where you need to determine if a particular value is significantly more common than others.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To determine if an element is the majority element, we can use a linear scan to count occurrences of the element. If the count exceeds n/2, then the element is the majority element.\n\n    Steps:\n    1. Initialize a counter to zero.\n    2. Iterate through the array and increment the counter if the current element matches the target element.\n    3. After the iteration, check if the counter exceeds n/2.\n    4. Return True if the counter exceeds n/2, otherwise return False.\n\n# [edge case] \n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) = True\n    Explanation: The element 3 appears 4 times in the array of length 7, which is more than 7/2, so 3 is the majority element.\n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 10) = True\n    Explanation: The element 10 appears 1 time in the array of length 7, which is not more than 7/2, so 10 is not the majority element.\n    is_majority([1, 1, 2, 2], 4, 2) = False\n    Explanation: The element 2 appears 2 times in the array of length 4, which is not more than 4/2, so 2 is not the majority element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already correctly handles cases where the array is empty or the element is not present.\n", "requirement analysis:\nThe requirement is to create a function that checks if a given element is the majority in a sorted array. The majority element is defined as one that appears more than half the length of the array. The function should be efficient and easy to understand. The input is a sorted array and an element to check, and the output is a boolean indicating whether the element is the majority.\nrequirement pool:\n- The main code should be efficient and clear.\n- The function should correctly identify the majority element.\n- The function should handle edge cases such as empty arrays or elements not in the array.\n- The function should be optimized for performance.\n- The function should be well-documented and easy to use.\nTo implement the function `is_majority` efficiently and clearly, we will use a binary search approach. This method will allow us to determine if the given element is the majority element in O(log n) time complexity, which is optimal for sorted arrays. The function will first check if the element is present in the array, and if it is, it will then count its occurrences to see if it exceeds half the length of the array.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': an element that appears more than half the time in an array.\n    Explanation: In the context of the requirement, a majority element is an element that occurs more frequently than any other element in the array, specifically more than n/2 times where n is the length of the array.\n\n# [phrase showing quantity relationship]\n    'more than': means that the frequency of the element must be greater than half the length of the array.\n    Explanation: For example, in the array [1, 2, 3, 3, 3, 3, 10] with length 7, the element 3 appears 4 times, which is more than 7/2 = 3.5 times, so 3 is the majority element.\n\n# [degree adverb] \n    'more than': means that the frequency of the element must be greater than half the length of the array.\n    Explanation: For example, in the array [1, 2, 3, 3, 3, 3, 10] with length 7, the element 3 appears 4 times, which is more than 7/2 = 3.5 times, so 3 is the majority element.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using a binary search approach to efficiently determine if the element is the majority element. The steps include:\n    1. Check if the element is present in the array using binary search.\n    2. If the element is found, count its occurrences in the array.\n    3. Determine if the count is more than n/2.\n\n# [edge case] \n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 4) = False\n    Explanation: The element 4 is not present in the array, so it cannot be the majority element.\n    is_majority([1, 1, 2, 2, 3, 3, 3, 3, 10], 9, 3) = True\n    Explanation: The element 3 appears 4 times, which is more than 9/2 = 4.5 times, so 3 is the majority element.\n    is_majority([], 0, 1) = False\n    Explanation: An empty array does not contain any elements, so it cannot have a majority element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle cases where the array is empty or the element is not present.\n", "requirement analysis:\nThe requirement is to create a function that determines if a given element is the majority in a sorted array. The majority element is defined as the element that occurs more than n/2 times in the array. The function should be efficient and work well with sorted arrays.\nrequirement pool:\n- The main code should efficiently determine if the element is the majority\n- The function should handle sorted arrays efficiently\n- The function should be easy to understand and use\n- The function should be tested for edge cases and large arrays\n- The function should be integrated into a larger application if necessary\nTo efficiently determine if a given element is the majority in a sorted array, we can leverage the properties of sorted arrays and binary search. The majority element will always be the middle element if the array length is odd, or one of the two middle elements if the array length is even. We will use binary search to find the element and then verify if it appears more than n/2 times.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': an element that appears more than half the time in the array.\n    Explanation: In a sorted array, if an element is the majority, it will be the middle element if the array length is odd, or one of the two middle elements if the array length is even.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using binary search to find the element and then verify if it appears more than n/2 times. This can be done in two main steps:\n    1. Use binary search to find the target element.\n    2. Check if the count of the target element is more than n/2.\n\n# [edge case] \n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) = True\n    Explanation: The element 3 appears 4 times, which is more than half of the array length (7/2 = 3.5, so more than 3 times).\n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 4) = False\n    Explanation: The element 4 appears 0 times, which is not more than half of the array length (7/2 = 3.5, so more than 3 times).\n    is_majority([1, 1, 2, 2, 2, 2, 3], 7, 2) = True\n    Explanation: The element 2 appears 4 times, which is more than half of the array length (7/2 = 3.5, so more than 3 times).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The binary search will naturally handle cases where the element is not present or the array length is very small. The main logic will work for these cases as well.\n"], "test": ["def check(is_majority):\n\tassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True", "def check(is_majority):\n\tassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False", "def check(is_majority):\n\tassert is_majority([1, 1, 1, 2, 2], 5, 1) == True", "def check(is_majority):\n\tassert is_majority([6, 2, 3, 8, 1, 4, 11], 7, 8) == False", "def check(is_majority):\n\tassert is_majority([4, 6, 3, 2, 6, 3, 11], 9, 5) == False", "def check(is_majority):\n\tassert is_majority([4, 4, 4, 6, 6, 7, 12], 7, 4) == False", "def check(is_majority):\n\tassert is_majority([6, 3, 2, 1, 8, 7, 13], 12, 7) == False", "def check(is_majority):\n\tassert is_majority([1, 1, 5, 8, 6, 5, 9], 4, 6) == False", "def check(is_majority):\n\tassert is_majority([3, 4, 8, 6, 6, 8, 8], 11, 2) == False", "def check(is_majority):\n\tassert is_majority([1, 5, 4, 1, 2, 5, 12], 4, 7) == False", "def check(is_majority):\n\tassert is_majority([1, 3, 1, 4, 1, 4, 14], 7, 8) == False", "def check(is_majority):\n\tassert is_majority([2, 7, 3, 4, 1, 4, 12], 4, 7) == False", "def check(is_majority):\n\tassert is_majority([1, 1, 1, 7, 5, 1, 15], 3, 6) == False", "def check(is_majority):\n\tassert is_majority([4, 4, 7, 4, 3, 3, 7], 3, 1) == False", "def check(is_majority):\n\tassert is_majority([4, 3, 7, 1, 7, 4, 12], 8, 8) == False", "def check(is_majority):\n\tassert is_majority([3, 5, 2, 4, 8, 1, 11], 3, 4) == False", "def check(is_majority):\n\tassert is_majority([1, 2, 7, 5, 4, 6, 15], 5, 5) == False", "def check(is_majority):\n\tassert is_majority([3, 4, 4, 5, 8, 3, 7], 6, 7) == False", "def check(is_majority):\n\tassert is_majority([3, 3, 8, 6, 3, 7, 13], 9, 7) == False", "def check(is_majority):\n\tassert is_majority([3, 1, 1, 6, 6, 6, 5], 3, 1) == False", "def check(is_majority):\n\tassert is_majority([6, 2, 3, 4, 7, 2, 9], 2, 5) == False", "def check(is_majority):\n\tassert is_majority([6, 4, 6, 7, 3, 8, 10], 5, 3) == False", "def check(is_majority):\n\tassert is_majority([4, 5, 2, 7, 2, 8, 12], 4, 3) == False", "def check(is_majority):\n\tassert is_majority([3, 4, 1, 1, 6, 5, 13], 4, 2) == False", "def check(is_majority):\n\tassert is_majority([3, 4, 8, 4, 4, 1, 9], 3, 3) == False", "def check(is_majority):\n\tassert is_majority([2, 2, 1, 5, 4, 7, 8], 7, 2) == False", "def check(is_majority):\n\tassert is_majority([2, 3, 1, 4, 1, 4, 10], 4, 2) == False", "def check(is_majority):\n\tassert is_majority([2, 1, 8, 2, 2, 8, 5], 7, 7) == False", "def check(is_majority):\n\tassert is_majority([4, 4, 2, 3, 4, 1, 9], 3, 4) == True", "def check(is_majority):\n\tassert is_majority([4, 3, 7, 3, 1, 4, 5], 11, 1) == False", "def check(is_majority):\n\tassert is_majority([2, 7, 3, 6, 2, 6, 11], 9, 1) == False", "def check(is_majority):\n\tassert is_majority([5, 2, 1, 6, 3, 6, 6], 9, 6) == False", "def check(is_majority):\n\tassert is_majority([2, 2, 6, 7, 2, 3, 8], 2, 7) == False", "def check(is_majority):\n\tassert is_majority([3, 1, 6, 3, 5, 1, 9], 8, 7) == False", "def check(is_majority):\n\tassert is_majority([4, 5, 7, 5, 1, 3, 14], 9, 1) == False", "def check(is_majority):\n\tassert is_majority([4, 3, 3, 2, 6, 1, 6], 10, 2) == False", "def check(is_majority):\n\tassert is_majority([2, 3, 5, 5, 4, 2, 11, 7], 5, 6) == False", "def check(is_majority):\n\tassert is_majority([2, 1, 7, 7, 4, 1, 5, 10], 3, 8) == False", "def check(is_majority):\n\tassert is_majority([2, 6, 6, 2, 9, 3, 7, 9], 3, 7) == False", "def check(is_majority):\n\tassert is_majority([2, 1, 1, 6, 6, 5, 7, 3], 7, 4) == False", "def check(is_majority):\n\tassert is_majority([6, 4, 4, 6, 9, 4, 2, 7], 7, 3) == False", "def check(is_majority):\n\tassert is_majority([3, 1, 4, 4, 1, 9, 7, 1], 11, 3) == False", "def check(is_majority):\n\tassert is_majority([5, 6, 7, 5, 3, 9, 9, 3], 8, 2) == False", "def check(is_majority):\n\tassert is_majority([3, 6, 6, 6, 3, 3, 3, 6], 10, 3) == True", "def check(is_majority):\n\tassert is_majority([6, 4, 1, 3, 6, 5, 7, 7], 6, 9) == False", "def check(is_majority):\n\tassert is_majority([4, 6, 1, 8, 5, 8, 6, 11], 7, 1) == False", "def check(is_majority):\n\tassert is_majority([5, 6, 7, 4, 7, 4, 8, 10], 6, 8) == False", "def check(is_majority):\n\tassert is_majority([5, 3, 4, 8, 2, 7, 6, 6], 13, 6) == False", "def check(is_majority):\n\tassert is_majority([4, 5, 5, 7, 5, 3, 8, 9], 7, 2) == False", "def check(is_majority):\n\tassert is_majority([3, 5, 3, 1, 1, 9, 1, 2], 3, 9) == False", "def check(is_majority):\n\tassert is_majority([2, 5, 6, 8, 6, 9, 1, 4], 7, 7) == False", "def check(is_majority):\n\tassert is_majority([4, 3, 2, 6, 8, 8, 9, 2], 7, 8) == False", "def check(is_majority):\n\tassert is_majority([5, 1, 6, 4, 4, 5, 5, 9], 3, 3) == False", "def check(is_majority):\n\tassert is_majority([6, 2, 5, 5, 2, 2, 2, 9], 7, 4) == False", "def check(is_majority):\n\tassert is_majority([2, 3, 6, 3, 4, 3, 10, 9], 6, 3) == False", "def check(is_majority):\n\tassert is_majority([5, 2, 4, 5, 9, 4, 2, 10], 3, 4) == False", "def check(is_majority):\n\tassert is_majority([2, 3, 4, 5, 5, 9, 8, 10], 4, 1) == False", "def check(is_majority):\n\tassert is_majority([3, 1, 7, 6, 5, 2, 2, 10], 5, 8) == False", "def check(is_majority):\n\tassert is_majority([1, 2, 3, 6, 6, 8, 7, 2], 7, 6) == False", "def check(is_majority):\n\tassert is_majority([5, 2, 6, 3, 3, 2, 3, 11], 8, 2) == False", "def check(is_majority):\n\tassert is_majority([4, 3, 5, 6, 2, 8, 5, 10], 5, 8) == False", "def check(is_majority):\n\tassert is_majority([3, 5, 4, 1, 1, 1, 9, 4], 5, 5) == False", "def check(is_majority):\n\tassert is_majority([1, 1, 2, 3, 2, 8, 8, 8], 11, 2) == False", "def check(is_majority):\n\tassert is_majority([2, 5, 2, 7, 9, 3, 6, 5], 8, 1) == False", "def check(is_majority):\n\tassert is_majority([3, 2, 3, 2, 5, 8, 11, 11], 9, 7) == False", "def check(is_majority):\n\tassert is_majority([4, 4, 1, 8, 2, 6, 1, 10], 9, 2) == False", "def check(is_majority):\n\tassert is_majority([4, 2, 6, 8, 9, 4, 4, 4], 13, 1) == False", "def check(is_majority):\n\tassert is_majority([1, 3, 7, 3, 1, 7, 10, 7], 4, 8) == False", "def check(is_majority):\n\tassert is_majority([6, 1, 7, 8, 4, 1, 3, 9], 7, 3) == False", "def check(is_majority):\n\tassert is_majority([1, 6, 2, 6, 3], 7, 2) == False", "def check(is_majority):\n\tassert is_majority([2, 1, 1, 7, 2], 2, 5) == False", "def check(is_majority):\n\tassert is_majority([5, 1, 6, 5, 7], 5, 5) == False", "def check(is_majority):\n\tassert is_majority([2, 1, 1, 6, 6], 5, 4) == False", "def check(is_majority):\n\tassert is_majority([2, 2, 2, 4, 6], 3, 6) == False", "def check(is_majority):\n\tassert is_majority([2, 1, 6, 3, 1], 6, 3) == False", "def check(is_majority):\n\tassert is_majority([3, 5, 5, 6, 5], 3, 6) == False", "def check(is_majority):\n\tassert is_majority([1, 1, 3, 5, 4], 5, 6) == False", "def check(is_majority):\n\tassert is_majority([1, 6, 4, 3, 1], 6, 2) == False", "def check(is_majority):\n\tassert is_majority([6, 3, 4, 4, 2], 9, 2) == False", "def check(is_majority):\n\tassert is_majority([3, 4, 4, 7, 7], 3, 2) == False", "def check(is_majority):\n\tassert is_majority([5, 3, 4, 6, 3], 1, 2) == False", "def check(is_majority):\n\tassert is_majority([6, 5, 5, 1, 1], 4, 2) == False", "def check(is_majority):\n\tassert is_majority([1, 4, 1, 6, 4], 2, 1) == False", "def check(is_majority):\n\tassert is_majority([2, 5, 2, 2, 7], 6, 5) == False", "def check(is_majority):\n\tassert is_majority([5, 5, 1, 3, 3], 4, 5) == False", "def check(is_majority):\n\tassert is_majority([5, 6, 1, 5, 6], 2, 2) == False", "def check(is_majority):\n\tassert is_majority([4, 2, 5, 3, 5], 6, 1) == False", "def check(is_majority):\n\tassert is_majority([6, 2, 6, 6, 7], 9, 1) == False", "def check(is_majority):\n\tassert is_majority([6, 5, 1, 3, 5], 10, 4) == False", "def check(is_majority):\n\tassert is_majority([6, 5, 6, 6, 3], 3, 3) == False", "def check(is_majority):\n\tassert is_majority([6, 6, 5, 3, 7], 3, 4) == False", "def check(is_majority):\n\tassert is_majority([1, 3, 4, 7, 7], 4, 6) == False", "def check(is_majority):\n\tassert is_majority([2, 2, 6, 7, 6], 9, 1) == False", "def check(is_majority):\n\tassert is_majority([1, 3, 2, 7, 6], 3, 2) == False", "def check(is_majority):\n\tassert is_majority([3, 2, 4, 2, 4], 2, 2) == False", "def check(is_majority):\n\tassert is_majority([1, 4, 4, 1, 4], 2, 6) == False", "def check(is_majority):\n\tassert is_majority([3, 4, 3, 1, 4], 2, 6) == False", "def check(is_majority):\n\tassert is_majority([4, 1, 4, 2, 2], 2, 2) == False", "def check(is_majority):\n\tassert is_majority([1, 3, 3, 3, 7], 5, 2) == False", "def check(is_majority):\n\tassert is_majority([6, 6, 1, 3, 1], 7, 1) == False", "def check(is_majority):\n\tassert is_majority([1, 5, 2, 2, 2], 2, 6) == False", "def check(is_majority):\n\tassert is_majority([2, 2, 4, 6, 5], 2, 4) == False"], "scores": [0.7647, 0.9608, 1.0, 0.9412, 0.9412, 1.0, 0.0, 0.0, 0.0, 0.8922], "pass_results": [false, false, true, false, false, true, false, false, false, false], "pass_test_cases_num": [78, 98, 102, 96, 96, 102, 0, 0, 0, 91], "completion": "from typing import List\n## main.py\n\ndef is_majority(arr: list[int], n: int, x: int) -> bool:\n    \"\"\"\n    Determines if a given element is the majority element in a sorted array.\n\n    Args:\n        arr (list[int]): A sorted list of integers.\n        n (int): The number of elements in the array.\n        x (int): The element to check for majority status.\n\n    Returns:\n        bool: True if the element is the majority element, False otherwise.\n    \"\"\"\n    # Function to find the index of the first occurrence of x\n    def first_occurrence(arr, low, high, x):\n        if high >= low:\n            mid = (low + high) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                return first_occurrence(arr, mid + 1, high, x)\n            else:\n                return first_occurrence(arr, low, mid - 1, x)\n        return -1\n\n    # Find the first occurrence of x\n    first_index = first_occurrence(arr, 0, n - 1, x)\n\n    # If the element is not present at all, return False\n    if first_index == -1:\n        return False\n\n    # Calculate the last occurrence of x\n    last_index = first_index + n // 2\n\n    # Check if the element is the majority element\n    if last_index <= n - 1 and arr[last_index] == x:\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3))  # Output: True\n# print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 10)) # Output: True\n# print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 1))  # Output: False\n", "passed": true, "pass": true, "pass_num": 2, "round": 75, "mutate_method": "condense_two2one", "parent_index": 75}
