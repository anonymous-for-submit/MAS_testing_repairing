{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 391, "prompt": "Write a function to transform multiple lists into a nested dictionary.", "code": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result", "test_imports": [], "test_list": ["assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]", "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]", "assert convert_list_dictionary(['4MUE81Q4', 'F24OAE', 'OYUSALHP', 'WOEG'], ['RrSXwun', 'JJBkXUwyL', 'pyFQdOpDDOYIcyM', 'SXYBcsIEgkx'], [81, 99, 84, 90]) == [{'4MUE81Q4': {'RrSXwun': 81}}, {'F24OAE': {'JJBkXUwyL': 99}}, {'OYUSALHP': {'pyFQdOpDDOYIcyM': 84}}, {'WOEG': {'SXYBcsIEgkx': 90}}]", "assert convert_list_dictionary(['N5W9TXB8', 'Y4G8Q', '7DMFP1', 'OM6D5VA'], ['PrMptZ', 'RYNYkvywwa GeZQvo', 'MuMShtNYWMf', 'XwoFbOrSu'], [81, 95, 85, 96]) == [{'N5W9TXB8': {'PrMptZ': 81}}, {'Y4G8Q': {'RYNYkvywwa GeZQvo': 95}}, {'7DMFP1': {'MuMShtNYWMf': 85}}, {'OM6D5VA': {'XwoFbOrSu': 96}}]", "assert convert_list_dictionary(['9YE3Z', '9CRK9UJ', '1PZGV2Z97', 'TR6NIFH'], ['Tqcpb TR', 'owlCbexzoSRKfMZuWF', 'qYmKTXFKQTyMtW', 'LJAsmJhk wACGPBCK'], [87, 101, 90, 96]) == [{'9YE3Z': {'Tqcpb TR': 87}}, {'9CRK9UJ': {'owlCbexzoSRKfMZuWF': 101}}, {'1PZGV2Z97': {'qYmKTXFKQTyMtW': 90}}, {'TR6NIFH': {'LJAsmJhk wACGPBCK': 96}}]", "assert convert_list_dictionary(['LKP2UA', 'CKY', 'Z6DKP', 'N89N'], ['GpVXzPx', 'UggJWkgf Z', 'WTsKEDJeTaAEjhqD ', 'yKgzNQGhraL'], [89, 97, 88, 87]) == [{'LKP2UA': {'GpVXzPx': 89}}, {'CKY': {'UggJWkgf Z': 97}}, {'Z6DKP': {'WTsKEDJeTaAEjhqD ': 88}}, {'N89N': {'yKgzNQGhraL': 87}}]", "assert convert_list_dictionary(['XG4QZQO0', 'Z9VDOD', '4JDT16M', 'GY5WYG7'], ['lBkpezpOrg', 'DfigVhWSUpRL', 'paSAZfTLDh', 'jPDgzSisbJRkO'], [86, 98, 84, 94]) == [{'XG4QZQO0': {'lBkpezpOrg': 86}}, {'Z9VDOD': {'DfigVhWSUpRL': 98}}, {'4JDT16M': {'paSAZfTLDh': 84}}, {'GY5WYG7': {'jPDgzSisbJRkO': 94}}]", "assert convert_list_dictionary(['3DHH', '5L2Y9UYM', '06AMGWPU', 'WV3Q'], ['SHPrYBDVIfCzU', 'eGiJKDvsF', 'TQ TKWnyXhs', 'jNeBOzyY ZlEP'], [82, 94, 92, 96]) == [{'3DHH': {'SHPrYBDVIfCzU': 82}}, {'5L2Y9UYM': {'eGiJKDvsF': 94}}, {'06AMGWPU': {'TQ TKWnyXhs': 92}}, {'WV3Q': {'jNeBOzyY ZlEP': 96}}]", "assert convert_list_dictionary(['GWPIGVD', '9W8M', 'L4H', '6W7'], ['CCHHLprxuEcdEi', 'HjLtXK PXXAbbBDf', 'nvJvySPxONrWgkAKs', 'TjOKixdxJAo MX'], [89, 96, 84, 90]) == [{'GWPIGVD': {'CCHHLprxuEcdEi': 89}}, {'9W8M': {'HjLtXK PXXAbbBDf': 96}}, {'L4H': {'nvJvySPxONrWgkAKs': 84}}, {'6W7': {'TjOKixdxJAo MX': 90}}]", "assert convert_list_dictionary(['A6R9F', 'X2CA6W6Q6', 'OPZNPJO', '6E75QJXE2'], ['kWNMBW uyK', 'HfBIaYVHCUynhiMnYu', 'ODUAuOoWZs', 'aoscgNfoe'], [82, 99, 86, 92]) == [{'A6R9F': {'kWNMBW uyK': 82}}, {'X2CA6W6Q6': {'HfBIaYVHCUynhiMnYu': 99}}, {'OPZNPJO': {'ODUAuOoWZs': 86}}, {'6E75QJXE2': {'aoscgNfoe': 92}}]", "assert convert_list_dictionary(['K8HB2N', 'QNJ2FXRTP', 'HGY6U2G4N', 'DAD'], ['BAAZCYjhiX', 'bnliSOHHTksmSS C', 'pikHsnnEtFmr', 'emOlIvqdnY '], [82, 93, 90, 95]) == [{'K8HB2N': {'BAAZCYjhiX': 82}}, {'QNJ2FXRTP': {'bnliSOHHTksmSS C': 93}}, {'HGY6U2G4N': {'pikHsnnEtFmr': 90}}, {'DAD': {'emOlIvqdnY ': 95}}]", "assert convert_list_dictionary(['UCJ8DLP', '8WFFL', '1HUQSVBD', 'JEHXRP79'], ['XWsCGfhE', 'AYehFECSoOaLE', 've FWZqhIHkFQUqPF', 'tDJLcVCqdvWFHpXKJY'], [89, 100, 88, 89]) == [{'UCJ8DLP': {'XWsCGfhE': 89}}, {'8WFFL': {'AYehFECSoOaLE': 100}}, {'1HUQSVBD': {'ve FWZqhIHkFQUqPF': 88}}, {'JEHXRP79': {'tDJLcVCqdvWFHpXKJY': 89}}]", "assert convert_list_dictionary(['L126WST', 'DP8', 'XMX', 'FGJ2'], ['dXoOSFpwHv UbW', 'qiVXttwUMPjY', 'ZwSFGJRZoUvJF', 'WjAhMhiLDCnBIYBevF'], [81, 101, 86, 91]) == [{'L126WST': {'dXoOSFpwHv UbW': 81}}, {'DP8': {'qiVXttwUMPjY': 101}}, {'XMX': {'ZwSFGJRZoUvJF': 86}}, {'FGJ2': {'WjAhMhiLDCnBIYBevF': 91}}]", "assert convert_list_dictionary(['NJJI', 'E2FD7SSH1', '184WJ', '6EYSSJ3VC'], ['j tJ rqAjPIuhqa', 'ysCMeDeLAfegntY', 'yaNzNhVOsy', 'iYrWirUFnfZYAkutQ'], [83, 96, 89, 91]) == [{'NJJI': {'j tJ rqAjPIuhqa': 83}}, {'E2FD7SSH1': {'ysCMeDeLAfegntY': 96}}, {'184WJ': {'yaNzNhVOsy': 89}}, {'6EYSSJ3VC': {'iYrWirUFnfZYAkutQ': 91}}]", "assert convert_list_dictionary(['CZQ', 'IF6NOTQ', 'K2AO', '2VAUR'], ['wZQdpQlR', 'SnAplLEWKyMbCUBp', 'QruusuJSDAH', 'RbExfAerK'], [81, 102, 92, 95]) == [{'CZQ': {'wZQdpQlR': 81}}, {'IF6NOTQ': {'SnAplLEWKyMbCUBp': 102}}, {'K2AO': {'QruusuJSDAH': 92}}, {'2VAUR': {'RbExfAerK': 95}}]", "assert convert_list_dictionary(['N8W23G7XB', 'F65I', '8CXAPF6E', 'MK2O85C3'], ['OZdudcMe', 'EmhyqRiTWnpEMcbdqi', 'wfkKwI srWt', 'rRQzYfXWBYtdsMJ'], [90, 99, 92, 87]) == [{'N8W23G7XB': {'OZdudcMe': 90}}, {'F65I': {'EmhyqRiTWnpEMcbdqi': 99}}, {'8CXAPF6E': {'wfkKwI srWt': 92}}, {'MK2O85C3': {'rRQzYfXWBYtdsMJ': 87}}]", "assert convert_list_dictionary(['1DOBT0HQZ', '3PRD', 'IFLP3QKYQ', 'CYXVSGU'], ['NqhTsVZAIBxurC', 'DfIigZESrO', 'yIJmPwlZP', 'JjKlylzcIZcOGzN'], [88, 101, 91, 92]) == [{'1DOBT0HQZ': {'NqhTsVZAIBxurC': 88}}, {'3PRD': {'DfIigZESrO': 101}}, {'IFLP3QKYQ': {'yIJmPwlZP': 91}}, {'CYXVSGU': {'JjKlylzcIZcOGzN': 92}}]", "assert convert_list_dictionary(['57ZV4R78O', '1R9L9JA0', '8X1Z3', '9EF'], ['raeVni', 'SGErIFiivmFPGTYha', 'msiTirCPRubbpIt', ' lpSSFKuufpErKQ'], [85, 93, 86, 94]) == [{'57ZV4R78O': {'raeVni': 85}}, {'1R9L9JA0': {'SGErIFiivmFPGTYha': 93}}, {'8X1Z3': {'msiTirCPRubbpIt': 86}}, {'9EF': {' lpSSFKuufpErKQ': 94}}]", "assert convert_list_dictionary(['IQ4K1IT4', 'VC1DH', 'RNH', '2QBRGFN'], ['sBdykp', 'rtDUdLGffqzI', 'rmAbTZioIUgDhFcsVm', 'OyBmVOeeNpirKKVFVg'], [82, 100, 85, 95]) == [{'IQ4K1IT4': {'sBdykp': 82}}, {'VC1DH': {'rtDUdLGffqzI': 100}}, {'RNH': {'rmAbTZioIUgDhFcsVm': 85}}, {'2QBRGFN': {'OyBmVOeeNpirKKVFVg': 95}}]", "assert convert_list_dictionary(['YCLA8P2A', 'HXR263', 'KUZ79WR', '3ZEPT'], ['ZbGKUsBxx', 'gWMTvJcnOvovLG', 'jdVsPMDuxLFNsrCD', 'cnQRZcVSjbTUNtMooN'], [90, 101, 90, 88]) == [{'YCLA8P2A': {'ZbGKUsBxx': 90}}, {'HXR263': {'gWMTvJcnOvovLG': 101}}, {'KUZ79WR': {'jdVsPMDuxLFNsrCD': 90}}, {'3ZEPT': {'cnQRZcVSjbTUNtMooN': 88}}]", "assert convert_list_dictionary(['0QWZIO6N', '5YX', '7SE7ZNI', '8K78SG'], ['oyqdLeEO', 'TPihydBiDbY', 'YlkcmUJxqyhgFrx', 'mBVOXEirXMUgmp'], [88, 95, 84, 87]) == [{'0QWZIO6N': {'oyqdLeEO': 88}}, {'5YX': {'TPihydBiDbY': 95}}, {'7SE7ZNI': {'YlkcmUJxqyhgFrx': 84}}, {'8K78SG': {'mBVOXEirXMUgmp': 87}}]", "assert convert_list_dictionary(['U919', 'F8BSCXE', 'NYSKIDF', 'UT9SWC7Q'], ['MbMhIzPeQAWZ', 'jqZVWhjglO', 'nqmQSgqVW', 'GcwzXBejY qDDarah'], [86, 94, 84, 87]) == [{'U919': {'MbMhIzPeQAWZ': 86}}, {'F8BSCXE': {'jqZVWhjglO': 94}}, {'NYSKIDF': {'nqmQSgqVW': 84}}, {'UT9SWC7Q': {'GcwzXBejY qDDarah': 87}}]", "assert convert_list_dictionary(['3L2P9', 'NI6CXWVHM', 'JF8U', 'F072O0'], ['sILOSz', 'FaWCVVSJHu tJDj', 'SgEINfuEw', 'zvQsBgRwsGMv'], [87, 93, 86, 90]) == [{'3L2P9': {'sILOSz': 87}}, {'NI6CXWVHM': {'FaWCVVSJHu tJDj': 93}}, {'JF8U': {'SgEINfuEw': 86}}, {'F072O0': {'zvQsBgRwsGMv': 90}}]", "assert convert_list_dictionary(['RUL7WH', 'T6Y', '2NZA0', 'CJYQGKA'], ['xsFHXbPhaomNuj', 'BFdtLsxnBPEK', 'krExgWQUbYxOKYa', 'ZZMMXTassZIfJO'], [84, 93, 94, 94]) == [{'RUL7WH': {'xsFHXbPhaomNuj': 84}}, {'T6Y': {'BFdtLsxnBPEK': 93}}, {'2NZA0': {'krExgWQUbYxOKYa': 94}}, {'CJYQGKA': {'ZZMMXTassZIfJO': 94}}]", "assert convert_list_dictionary(['V2V54', '4GHA90C', '36KNJLX', '98XQTU45A'], ['QfKkrGwRMoI', 'xCsYSQvZC', 'UckUqSYlit TuxQ ', 'NIqvcBghUbW'], [81, 93, 94, 89]) == [{'V2V54': {'QfKkrGwRMoI': 81}}, {'4GHA90C': {'xCsYSQvZC': 93}}, {'36KNJLX': {'UckUqSYlit TuxQ ': 94}}, {'98XQTU45A': {'NIqvcBghUbW': 89}}]", "assert convert_list_dictionary(['DPEJ', 'KCB6GAX6', 'WTP', 'LAF4SQ'], ['o NcvrGgxR', 'GmOgTgqOHgSaP', 'QsPsTufwGuq', 'vprssZFvIKRz G'], [88, 100, 88, 93]) == [{'DPEJ': {'o NcvrGgxR': 88}}, {'KCB6GAX6': {'GmOgTgqOHgSaP': 100}}, {'WTP': {'QsPsTufwGuq': 88}}, {'LAF4SQ': {'vprssZFvIKRz G': 93}}]", "assert convert_list_dictionary(['8DD', 'TO92BR', 'W0SPTL8', 'O3D'], ['ZrTWtq UMev', 'uuXpCBNpzHkXWSHhm', 'tSPJjCBgqlLCsWd', 'LvvOjcWbuO'], [80, 94, 87, 95]) == [{'8DD': {'ZrTWtq UMev': 80}}, {'TO92BR': {'uuXpCBNpzHkXWSHhm': 94}}, {'W0SPTL8': {'tSPJjCBgqlLCsWd': 87}}, {'O3D': {'LvvOjcWbuO': 95}}]", "assert convert_list_dictionary(['ICP8FVV1T', 'ANJ', 'YGI89', '28W1SC5LY'], ['aCsiBSpvWrGmqd', 'Ty tjaITeSeYntCr', 'xPbZlvSlRxT', 'ikIIEUFCNqgSoFV'], [85, 95, 89, 92]) == [{'ICP8FVV1T': {'aCsiBSpvWrGmqd': 85}}, {'ANJ': {'Ty tjaITeSeYntCr': 95}}, {'YGI89': {'xPbZlvSlRxT': 89}}, {'28W1SC5LY': {'ikIIEUFCNqgSoFV': 92}}]", "assert convert_list_dictionary(['88N363MN', 'ZPQ41', 'DHQ9GQ3', 'T8JB6VFK'], ['KegEliqp', 'mqHgNtHVklOfp vn', 'iWjUKkmWtMRDtedi', 'VqCshqHzBabMReVj'], [82, 97, 92, 92]) == [{'88N363MN': {'KegEliqp': 82}}, {'ZPQ41': {'mqHgNtHVklOfp vn': 97}}, {'DHQ9GQ3': {'iWjUKkmWtMRDtedi': 92}}, {'T8JB6VFK': {'VqCshqHzBabMReVj': 92}}]", "assert convert_list_dictionary(['2G2ND3J91', 'IGX1F2B', 'XKAZ6T3', 'ZO3JPICFL'], ['acLkWwmcSQgFK', 'sIwrBjuIc', 'rSuSKsfwdU', 'uuEyurQHBHEesutxe'], [89, 95, 84, 95]) == [{'2G2ND3J91': {'acLkWwmcSQgFK': 89}}, {'IGX1F2B': {'sIwrBjuIc': 95}}, {'XKAZ6T3': {'rSuSKsfwdU': 84}}, {'ZO3JPICFL': {'uuEyurQHBHEesutxe': 95}}]", "assert convert_list_dictionary(['ZMV7Q', '40SL', 'MXLA', 'KIY'], ['RFeRnsXIehzXOn', 'WZlzbY H GCQBONq', 'jDGRruXrCDgsBBFZ', 'brJEekhbgGq'], [87, 96, 90, 96]) == [{'ZMV7Q': {'RFeRnsXIehzXOn': 87}}, {'40SL': {'WZlzbY H GCQBONq': 96}}, {'MXLA': {'jDGRruXrCDgsBBFZ': 90}}, {'KIY': {'brJEekhbgGq': 96}}]", "assert convert_list_dictionary(['9S6Q', 'KCVZG', 'J03NPK', '8KLXW'], ['dnehZNFnftS', 'THPGzqqNlf', 'xjUzrvmlHTdHegs', 'eCfjBuRaAN'], [85, 103, 90, 87]) == [{'9S6Q': {'dnehZNFnftS': 85}}, {'KCVZG': {'THPGzqqNlf': 103}}, {'J03NPK': {'xjUzrvmlHTdHegs': 90}}, {'8KLXW': {'eCfjBuRaAN': 87}}]", "assert convert_list_dictionary(['PHK18XKPL', 'HK5DGCE05', 'TLP', '3WD'], ['ReDfXBPM', 'nrjiuoxeKG', 'UWJIPygNM', 'CIcUtWkmASxg'], [81, 97, 94, 92]) == [{'PHK18XKPL': {'ReDfXBPM': 81}}, {'HK5DGCE05': {'nrjiuoxeKG': 97}}, {'TLP': {'UWJIPygNM': 94}}, {'3WD': {'CIcUtWkmASxg': 92}}]", "assert convert_list_dictionary(['KY559', 'X0M', 'P0GGDB5M', 'S0DAB489Z'], ['zkuAFOHfErMMTq', 'eaQhPlYRNj', 'IdEpdsP cRSQ', 'WGrFHLNEfbJOuYM'], [89, 100, 88, 88]) == [{'KY559': {'zkuAFOHfErMMTq': 89}}, {'X0M': {'eaQhPlYRNj': 100}}, {'P0GGDB5M': {'IdEpdsP cRSQ': 88}}, {'S0DAB489Z': {'WGrFHLNEfbJOuYM': 88}}]", "assert convert_list_dictionary(['CDJ', 'SCU698P', '91V32T5J', 'OW4Z6'], ['OovjSFIwCjwAmb', 'SfjzSjoszXRz ', 'wyGcCRoHFBrCoIfY', 'd WMnPuHYKXZay'], [88, 97, 84, 94]) == [{'CDJ': {'OovjSFIwCjwAmb': 88}}, {'SCU698P': {'SfjzSjoszXRz ': 97}}, {'91V32T5J': {'wyGcCRoHFBrCoIfY': 84}}, {'OW4Z6': {'d WMnPuHYKXZay': 94}}]", "assert convert_list_dictionary(['jvpxeeim', 'snikeese', 'bbkhwnu', 'rhmqcd'], ['nqnjo', 'cchdirrj', 'qifyc', 'ylzy'], [97, 203, 302, 404]) == [{'jvpxeeim': {'nqnjo': 97}}, {'snikeese': {'cchdirrj': 203}}, {'bbkhwnu': {'qifyc': 302}}, {'rhmqcd': {'ylzy': 404}}]", "assert convert_list_dictionary(['oluakadn', 'piwno', 'ycasucp', 'ouxnwbhd'], ['spjnurhdma', 'rmyoan', 'kfyattsso', 'rlqxpwpez'], [100, 205, 302, 398]) == [{'oluakadn': {'spjnurhdma': 100}}, {'piwno': {'rmyoan': 205}}, {'ycasucp': {'kfyattsso': 302}}, {'ouxnwbhd': {'rlqxpwpez': 398}}]", "assert convert_list_dictionary(['dpvowdgcr', 'opuil', 'idhdxpziq', 'khe'], ['tbotari', 'saddod', 'bypgrorgejn', 'cyfd'], [101, 200, 296, 396]) == [{'dpvowdgcr': {'tbotari': 101}}, {'opuil': {'saddod': 200}}, {'idhdxpziq': {'bypgrorgejn': 296}}, {'khe': {'cyfd': 396}}]", "assert convert_list_dictionary(['hrctv', 'tlyvf', 'njw', 'cowjgzsl'], ['cuvbzis', 'whzwotcf', 'wsvnry', 'hah'], [97, 195, 305, 397]) == [{'hrctv': {'cuvbzis': 97}}, {'tlyvf': {'whzwotcf': 195}}, {'njw': {'wsvnry': 305}}, {'cowjgzsl': {'hah': 397}}]", "assert convert_list_dictionary(['orjs', 'cre', 'ewzkgn', 'cwoljgmci'], ['jco', 'pox', 'zsdnjbcn', 'mtjolbekdro'], [97, 197, 304, 402]) == [{'orjs': {'jco': 97}}, {'cre': {'pox': 197}}, {'ewzkgn': {'zsdnjbcn': 304}}, {'cwoljgmci': {'mtjolbekdro': 402}}]", "assert convert_list_dictionary(['ndizq', 'orongs', 'svegrjesf', 'erflnt'], ['dgrt', 'hgnpduqij', 'djwegisht', 'rge'], [102, 203, 305, 404]) == [{'ndizq': {'dgrt': 102}}, {'orongs': {'hgnpduqij': 203}}, {'svegrjesf': {'djwegisht': 305}}, {'erflnt': {'rge': 404}}]", "assert convert_list_dictionary(['tgpf', 'inkmntvs', 'oudm', 'xmgemdbmh'], ['hqmritzsz', 'tgn', 'fslsokex', 'vgwzetsx'], [103, 202, 297, 403]) == [{'tgpf': {'hqmritzsz': 103}}, {'inkmntvs': {'tgn': 202}}, {'oudm': {'fslsokex': 297}}, {'xmgemdbmh': {'vgwzetsx': 403}}]", "assert convert_list_dictionary(['iaousqu', 'ipyeygubt', 'quzd', 'depgzizv'], ['bikebkclqby', 'vwoku', 'ahhc', 'vefe'], [104, 199, 305, 403]) == [{'iaousqu': {'bikebkclqby': 104}}, {'ipyeygubt': {'vwoku': 199}}, {'quzd': {'ahhc': 305}}, {'depgzizv': {'vefe': 403}}]", "assert convert_list_dictionary(['jeis', 'gtee', 'pamulewc', 'flnc'], ['tzmhvsclvvg', 'cbdsgtois', 'yvjh', 'ziiclkab'], [96, 197, 302, 403]) == [{'jeis': {'tzmhvsclvvg': 96}}, {'gtee': {'cbdsgtois': 197}}, {'pamulewc': {'yvjh': 302}}, {'flnc': {'ziiclkab': 403}}]", "assert convert_list_dictionary(['gkgcxli', 'kvdljlxx', 'serfxklbr', 'pabk'], ['wxujweiy', 'utzipxstzkf', 'ypqoqpxn', 'ubcorcon'], [104, 195, 303, 395]) == [{'gkgcxli': {'wxujweiy': 104}}, {'kvdljlxx': {'utzipxstzkf': 195}}, {'serfxklbr': {'ypqoqpxn': 303}}, {'pabk': {'ubcorcon': 395}}]", "assert convert_list_dictionary(['pbem', 'scqociq', 'gbhuax', 'gmpbrsk'], ['gdfcezmefk', 'ggibv', 'llakademkw', 'jint'], [100, 200, 301, 404]) == [{'pbem': {'gdfcezmefk': 100}}, {'scqociq': {'ggibv': 200}}, {'gbhuax': {'llakademkw': 301}}, {'gmpbrsk': {'jint': 404}}]", "assert convert_list_dictionary(['qen', 'awqodbq', 'fts', 'klgaah'], ['rckyjoooykl', 'djhhugxxykdt', 'rieteq', 'mgfgu'], [101, 205, 298, 397]) == [{'qen': {'rckyjoooykl': 101}}, {'awqodbq': {'djhhugxxykdt': 205}}, {'fts': {'rieteq': 298}}, {'klgaah': {'mgfgu': 397}}]", "assert convert_list_dictionary(['hdoaztva', 'evk', 'wolnretm', 'jlgvgp'], ['awqfk', 'btzpzg', 'zdikvtndcoj', 'wgidrr'], [99, 199, 300, 397]) == [{'hdoaztva': {'awqfk': 99}}, {'evk': {'btzpzg': 199}}, {'wolnretm': {'zdikvtndcoj': 300}}, {'jlgvgp': {'wgidrr': 397}}]", "assert convert_list_dictionary(['jdu', 'xfgmb', 'iuyrlwkgg', 'xhu'], ['apmpunqivagv', 'cvprcstog', 'cgcdbiwlws', 'nzbbuyyzbp'], [101, 200, 299, 400]) == [{'jdu': {'apmpunqivagv': 101}}, {'xfgmb': {'cvprcstog': 200}}, {'iuyrlwkgg': {'cgcdbiwlws': 299}}, {'xhu': {'nzbbuyyzbp': 400}}]", "assert convert_list_dictionary(['ylupsys', 'wbfdey', 'gigzs', 'gmsx'], ['rcavavqara', 'xzoyvdmutrut', 'zyczxgoxqw', 'ixsbybtvvoy'], [95, 205, 296, 404]) == [{'ylupsys': {'rcavavqara': 95}}, {'wbfdey': {'xzoyvdmutrut': 205}}, {'gigzs': {'zyczxgoxqw': 296}}, {'gmsx': {'ixsbybtvvoy': 404}}]", "assert convert_list_dictionary(['wmtnynivi', 'canibbiel', 'vkacu', 'dxe'], ['nyipzjbyfmoi', 'fitfhs', 'vfizzhytol', 'gpzsdawsprrm'], [95, 195, 304, 404]) == [{'wmtnynivi': {'nyipzjbyfmoi': 95}}, {'canibbiel': {'fitfhs': 195}}, {'vkacu': {'vfizzhytol': 304}}, {'dxe': {'gpzsdawsprrm': 404}}]", "assert convert_list_dictionary(['hixuq', 'hcjlwudw', 'vmhsf', 'xkkpfl'], ['jnhsbobbrrq', 'ibfznxxwm', 'cqm', 'rur'], [97, 197, 305, 403]) == [{'hixuq': {'jnhsbobbrrq': 97}}, {'hcjlwudw': {'ibfznxxwm': 197}}, {'vmhsf': {'cqm': 305}}, {'xkkpfl': {'rur': 403}}]", "assert convert_list_dictionary(['ppgawdw', 'vkiutyg', 'aes', 'zljfzaql'], ['dbkp', 'sluqghdeob', 'zsyxrakxds', 'uybxflbqmbz'], [103, 203, 299, 396]) == [{'ppgawdw': {'dbkp': 103}}, {'vkiutyg': {'sluqghdeob': 203}}, {'aes': {'zsyxrakxds': 299}}, {'zljfzaql': {'uybxflbqmbz': 396}}]", "assert convert_list_dictionary(['qpoqbjzed', 'qavbngsxa', 'esbjreot', 'knlpmgzj'], ['wqyzd', 'oiijwdkf', 'kbovz', 'sqmjutsi'], [97, 199, 301, 403]) == [{'qpoqbjzed': {'wqyzd': 97}}, {'qavbngsxa': {'oiijwdkf': 199}}, {'esbjreot': {'kbovz': 301}}, {'knlpmgzj': {'sqmjutsi': 403}}]", "assert convert_list_dictionary(['bjikejvbz', 'wtlhoqvjz', 'zvvgq', 'hgkszoch'], ['sbilyli', 'wnduiw', 'xvqwvml', 'srwldg'], [100, 197, 303, 395]) == [{'bjikejvbz': {'sbilyli': 100}}, {'wtlhoqvjz': {'wnduiw': 197}}, {'zvvgq': {'xvqwvml': 303}}, {'hgkszoch': {'srwldg': 395}}]", "assert convert_list_dictionary(['rpiiwrhp', 'cmhg', 'vmaqu', 'jycs'], ['uajigbwmlwe', 'ovawdx', 'btkgfgbyo', 'kpsnohbjdzkt'], [103, 195, 297, 398]) == [{'rpiiwrhp': {'uajigbwmlwe': 103}}, {'cmhg': {'ovawdx': 195}}, {'vmaqu': {'btkgfgbyo': 297}}, {'jycs': {'kpsnohbjdzkt': 398}}]", "assert convert_list_dictionary(['hmkuvkot', 'kpkaei', 'kwu', 'rofeuntbc'], ['jeytvy', 'ctlkaitx', 'nnumx', 'ykngfsyzfxyn'], [103, 205, 305, 404]) == [{'hmkuvkot': {'jeytvy': 103}}, {'kpkaei': {'ctlkaitx': 205}}, {'kwu': {'nnumx': 305}}, {'rofeuntbc': {'ykngfsyzfxyn': 404}}]", "assert convert_list_dictionary(['qjpk', 'ucbg', 'qmt', 'jcn'], ['ibbnmrgaer', 'nljqica', 'gcjtaw', 'xrzgqdjpcfn'], [100, 197, 295, 402]) == [{'qjpk': {'ibbnmrgaer': 100}}, {'ucbg': {'nljqica': 197}}, {'qmt': {'gcjtaw': 295}}, {'jcn': {'xrzgqdjpcfn': 402}}]", "assert convert_list_dictionary(['gtmueyvf', 'gsj', 'vdghiyxo', 'iwil'], ['minkxowdpes', 'hnfkyqx', 'mitw', 'dlejvrplf'], [101, 197, 301, 403]) == [{'gtmueyvf': {'minkxowdpes': 101}}, {'gsj': {'hnfkyqx': 197}}, {'vdghiyxo': {'mitw': 301}}, {'iwil': {'dlejvrplf': 403}}]", "assert convert_list_dictionary(['nmro', 'hfl', 'fydrgllk', 'hnqhdu'], ['ccos', 'ayktzhdhfgo', 'qfcokyz', 'xgj'], [96, 199, 299, 404]) == [{'nmro': {'ccos': 96}}, {'hfl': {'ayktzhdhfgo': 199}}, {'fydrgllk': {'qfcokyz': 299}}, {'hnqhdu': {'xgj': 404}}]", "assert convert_list_dictionary(['bniptu', 'nkk', 'nwntc', 'teldo'], ['puplcjovu', 'olf', 'yiqnyrrai', 'cnphhnvwrblj'], [101, 205, 304, 401]) == [{'bniptu': {'puplcjovu': 101}}, {'nkk': {'olf': 205}}, {'nwntc': {'yiqnyrrai': 304}}, {'teldo': {'cnphhnvwrblj': 401}}]", "assert convert_list_dictionary(['nmkvxdibb', 'mkyoeheqf', 'bxhwz', 'igab'], ['uhvgxr', 'okkwwuauq', 'joktbet', 'yepoflvhr'], [105, 197, 300, 395]) == [{'nmkvxdibb': {'uhvgxr': 105}}, {'mkyoeheqf': {'okkwwuauq': 197}}, {'bxhwz': {'joktbet': 300}}, {'igab': {'yepoflvhr': 395}}]", "assert convert_list_dictionary(['mcw', 'dsrbsnji', 'sulez', 'kbcwpgik'], ['psy', 'bxsoovrtuhe', 'wpj', 'betpeuvsorm'], [100, 195, 303, 404]) == [{'mcw': {'psy': 100}}, {'dsrbsnji': {'bxsoovrtuhe': 195}}, {'sulez': {'wpj': 303}}, {'kbcwpgik': {'betpeuvsorm': 404}}]", "assert convert_list_dictionary(['gezb', 'qojnatc', 'exxktx', 'tnmpmtgkk'], ['yetmtyyldrl', 'lkeuohe', 'qhuficbvkkgo', 'kxoryapllcdv'], [104, 200, 296, 399]) == [{'gezb': {'yetmtyyldrl': 104}}, {'qojnatc': {'lkeuohe': 200}}, {'exxktx': {'qhuficbvkkgo': 296}}, {'tnmpmtgkk': {'kxoryapllcdv': 399}}]", "assert convert_list_dictionary(['tmyf', 'nke', 'wecv', 'rlmluthg'], ['mjhcvxz', 'yjfw', 'xxpywdy', 'xqfiezrti'], [103, 197, 304, 402]) == [{'tmyf': {'mjhcvxz': 103}}, {'nke': {'yjfw': 197}}, {'wecv': {'xxpywdy': 304}}, {'rlmluthg': {'xqfiezrti': 402}}]", "assert convert_list_dictionary(['ssozlp', 'eywceq', 'yfueecu', 'otrp'], ['bniiamehel', 'pocglsljsns', 'ohjdobq', 'dpqjemec'], [104, 199, 299, 399]) == [{'ssozlp': {'bniiamehel': 104}}, {'eywceq': {'pocglsljsns': 199}}, {'yfueecu': {'ohjdobq': 299}}, {'otrp': {'dpqjemec': 399}}]", "assert convert_list_dictionary(['mby', 'gsokscfv', 'coldyvovs', 'jnrsnpyc'], ['jjprobpafddb', 'fxzbquhs', 'nmmzauwfnxyu', 'rbefr'], [105, 197, 304, 395]) == [{'mby': {'jjprobpafddb': 105}}, {'gsokscfv': {'fxzbquhs': 197}}, {'coldyvovs': {'nmmzauwfnxyu': 304}}, {'jnrsnpyc': {'rbefr': 395}}]", "assert convert_list_dictionary(['snui', 'zxeymk', 'zbnu', 'rhlmx'], ['lgaeruehpuai', 'jlfkguq', 'ppacjoe', 'jzgtzd'], [105, 199, 303, 395]) == [{'snui': {'lgaeruehpuai': 105}}, {'zxeymk': {'jlfkguq': 199}}, {'zbnu': {'ppacjoe': 303}}, {'rhlmx': {'jzgtzd': 395}}]", "assert convert_list_dictionary(['ZZMDA', 'CTFNV', '88Q6', 'N7Z632'], ['vzkn', 'B', '=#WUVG?', 'ZADVC'], [10, 24, 29, 42]) == [{'ZZMDA': {'vzkn': 10}}, {'CTFNV': {'B': 24}}, {'88Q6': {'=#WUVG?': 29}}, {'N7Z632': {'ZADVC': 42}}]", "assert convert_list_dictionary(['LIT7O', 'N2G3', '3A46FL', '4DEI'], ['neg', 'S', '_<CX-', 'LGM'], [12, 17, 27, 36]) == [{'LIT7O': {'neg': 12}}, {'N2G3': {'S': 17}}, {'3A46FL': {'_<CX-': 27}}, {'4DEI': {'LGM': 36}}]", "assert convert_list_dictionary(['EBV', '3QTIS', '8FRGB', 'UCQ'], ['zcbggc', 'N', 'HHI/*L', 'WMB'], [15, 20, 35, 41]) == [{'EBV': {'zcbggc': 15}}, {'3QTIS': {'N': 20}}, {'8FRGB': {'HHI/*L': 35}}, {'UCQ': {'WMB': 41}}]", "assert convert_list_dictionary(['1OL5W', '5EY7GG', 'TNHPC', 'KT0TQW'], ['zinq', 'Z', '&T-!*', 'MWXHZAJTU'], [10, 23, 30, 41]) == [{'1OL5W': {'zinq': 10}}, {'5EY7GG': {'Z': 23}}, {'TNHPC': {'&T-!*': 30}}, {'KT0TQW': {'MWXHZAJTU': 41}}]", "assert convert_list_dictionary(['DDF6', 'ZOKBL', 'NP50B6', '98AG3'], ['qdcnoay', 'E', 'O%DXA~', 'BOCANZYIF'], [7, 22, 27, 35]) == [{'DDF6': {'qdcnoay': 7}}, {'ZOKBL': {'E': 22}}, {'NP50B6': {'O%DXA~': 27}}, {'98AG3': {'BOCANZYIF': 35}}]", "assert convert_list_dictionary(['K4T', '5Z62', 'M8WJ', '5KKU'], ['lwezmyx', 'H', 'WITO#F', 'UKF'], [7, 21, 33, 42]) == [{'K4T': {'lwezmyx': 7}}, {'5Z62': {'H': 21}}, {'M8WJ': {'WITO#F': 33}}, {'5KKU': {'UKF': 42}}]", "assert convert_list_dictionary(['4DU', 'TD4T', 'XBV95W', 'WU8BUA'], ['xakcuc', 'Y', ':TGR|Q', 'CWYS'], [14, 18, 29, 44]) == [{'4DU': {'xakcuc': 14}}, {'TD4T': {'Y': 18}}, {'XBV95W': {':TGR|Q': 29}}, {'WU8BUA': {'CWYS': 44}}]", "assert convert_list_dictionary(['T408', 'TRNEX', '0P4610', 'HYZAG'], ['eymotcusz', 'J', 'GR=?', 'YPYHHO'], [15, 24, 25, 35]) == [{'T408': {'eymotcusz': 15}}, {'TRNEX': {'J': 24}}, {'0P4610': {'GR=?': 25}}, {'HYZAG': {'YPYHHO': 35}}]", "assert convert_list_dictionary(['QBF', '8D2G', '9XR6B8', '12Q6'], ['zxl', 'G', 'PAL#<', 'NUFCQNP'], [6, 16, 25, 45]) == [{'QBF': {'zxl': 6}}, {'8D2G': {'G': 16}}, {'9XR6B8': {'PAL#<': 25}}, {'12Q6': {'NUFCQNP': 45}}]", "assert convert_list_dictionary(['6VNE', '0DTKBB', 'TAJ8', 'RM2XTY'], ['izmcnk', 'U', '=B?UMT', 'JDVXF'], [15, 20, 28, 43]) == [{'6VNE': {'izmcnk': 15}}, {'0DTKBB': {'U': 20}}, {'TAJ8': {'=B?UMT': 28}}, {'RM2XTY': {'JDVXF': 43}}]", "assert convert_list_dictionary(['NJD', 'JC1', 'JCCTBJ', 'KPS'], ['ebujt', 'U', 'WE@H!PI&', 'ASGQWVHKM'], [6, 25, 34, 38]) == [{'NJD': {'ebujt': 6}}, {'JC1': {'U': 25}}, {'JCCTBJ': {'WE@H!PI&': 34}}, {'KPS': {'ASGQWVHKM': 38}}]", "assert convert_list_dictionary(['THDE', '0U7B', 'ZQFPBO', 'FBR'], ['rgxu', 'X', 'OVL', 'VOLXNWI'], [14, 22, 26, 40]) == [{'THDE': {'rgxu': 14}}, {'0U7B': {'X': 22}}, {'ZQFPBO': {'OVL': 26}}, {'FBR': {'VOLXNWI': 40}}]", "assert convert_list_dictionary(['1VDC9', '0M4NS', '9OYE7', 'AQM8'], ['bswosct', 'I', 'YLYVSWW', 'KWMRDZHG'], [6, 17, 30, 39]) == [{'1VDC9': {'bswosct': 6}}, {'0M4NS': {'I': 17}}, {'9OYE7': {'YLYVSWW': 30}}, {'AQM8': {'KWMRDZHG': 39}}]", "assert convert_list_dictionary(['U8VPKX', 'PZNSL', 'I5TP8F', '907'], ['hqpgma', 'K', 'GLYR', 'XSVLK'], [12, 18, 26, 41]) == [{'U8VPKX': {'hqpgma': 12}}, {'PZNSL': {'K': 18}}, {'I5TP8F': {'GLYR': 26}}, {'907': {'XSVLK': 41}}]", "assert convert_list_dictionary(['MGMG', '49XW2', 'F30J', '9G67H'], ['ldgpzur', 'G', 'SE~', 'TOUOJ'], [6, 20, 29, 35]) == [{'MGMG': {'ldgpzur': 6}}, {'49XW2': {'G': 20}}, {'F30J': {'SE~': 29}}, {'9G67H': {'TOUOJ': 35}}]", "assert convert_list_dictionary(['E1E', '539VY', 'VRYN', 'IGL67'], ['uapy', 'E', '$GV:', 'NGRPOE'], [13, 19, 30, 39]) == [{'E1E': {'uapy': 13}}, {'539VY': {'E': 19}}, {'VRYN': {'$GV:': 30}}, {'IGL67': {'NGRPOE': 39}}]", "assert convert_list_dictionary(['02M8SA', 'LC7', '59WH9', 'NJDF'], ['zldq', 'R', 'I-X', 'GQE'], [7, 20, 25, 42]) == [{'02M8SA': {'zldq': 7}}, {'LC7': {'R': 20}}, {'59WH9': {'I-X': 25}}, {'NJDF': {'GQE': 42}}]", "assert convert_list_dictionary(['2EL3E', 'KZRZU', '4W0E', 'RMU'], ['uahyn', 'M', 'WR+!', 'OCVNBBX'], [13, 19, 27, 45]) == [{'2EL3E': {'uahyn': 13}}, {'KZRZU': {'M': 19}}, {'4W0E': {'WR+!': 27}}, {'RMU': {'OCVNBBX': 45}}]", "assert convert_list_dictionary(['CFV6', 'YX5AL', 'Z0VY', 'RFCFI'], ['qpa', 'D', 'T-S^V@X', 'QWBADZT'], [11, 23, 28, 40]) == [{'CFV6': {'qpa': 11}}, {'YX5AL': {'D': 23}}, {'Z0VY': {'T-S^V@X': 28}}, {'RFCFI': {'QWBADZT': 40}}]", "assert convert_list_dictionary(['IZ88', 'TDM', '5Y8FB', 'UGYR'], ['key', 'Q', 'W@PP', 'BTUUY'], [11, 20, 25, 38]) == [{'IZ88': {'key': 11}}, {'TDM': {'Q': 20}}, {'5Y8FB': {'W@PP': 25}}, {'UGYR': {'BTUUY': 38}}]", "assert convert_list_dictionary(['K0D5HV', 'XKJCF', 'GJ2', 'KZ6WWF'], ['gqtvsl', 'Q', 'S<SF', 'SOC'], [15, 16, 32, 37]) == [{'K0D5HV': {'gqtvsl': 15}}, {'XKJCF': {'Q': 16}}, {'GJ2': {'S<SF': 32}}, {'KZ6WWF': {'SOC': 37}}]", "assert convert_list_dictionary(['2NY4Z', 'C05GH', 'PKZ', 'Y57Z1'], ['lwni', 'X', 'A^DV+P|A<', 'TIZ'], [6, 25, 29, 41]) == [{'2NY4Z': {'lwni': 6}}, {'C05GH': {'X': 25}}, {'PKZ': {'A^DV+P|A<': 29}}, {'Y57Z1': {'TIZ': 41}}]", "assert convert_list_dictionary(['CI95OF', '3WUPPK', 'SWS', 'RQH'], ['gec', 'R', '*-IQ|/=', 'RKBEGABF'], [6, 23, 29, 37]) == [{'CI95OF': {'gec': 6}}, {'3WUPPK': {'R': 23}}, {'SWS': {'*-IQ|/=': 29}}, {'RQH': {'RKBEGABF': 37}}]", "assert convert_list_dictionary(['KYXXK', 'GN4V8', 'ERN4LL', 'IL4DD'], ['cevixoh', 'U', '&%XAI', 'PGMDACZW'], [11, 24, 35, 45]) == [{'KYXXK': {'cevixoh': 11}}, {'GN4V8': {'U': 24}}, {'ERN4LL': {'&%XAI': 35}}, {'IL4DD': {'PGMDACZW': 45}}]", "assert convert_list_dictionary(['N3Z', 'QMLFI2', '4M1', 'E6TY4X'], ['oakpn', 'L', 'T@RJS', 'ANJZBGX'], [7, 21, 32, 36]) == [{'N3Z': {'oakpn': 7}}, {'QMLFI2': {'L': 21}}, {'4M1': {'T@RJS': 32}}, {'E6TY4X': {'ANJZBGX': 36}}]", "assert convert_list_dictionary(['7R5U', 'DA9', 'YCU', '1UH3'], ['tgntp', 'A', 'R~*U', 'JLFUNGROP'], [13, 15, 33, 39]) == [{'7R5U': {'tgntp': 13}}, {'DA9': {'A': 15}}, {'YCU': {'R~*U': 33}}, {'1UH3': {'JLFUNGROP': 39}}]", "assert convert_list_dictionary(['OY8BH3', 'ONGAS', 'E1F6', 'ZI8'], ['vakyhzrg', 'Y', '#@CF:@@', 'QBV'], [7, 22, 25, 37]) == [{'OY8BH3': {'vakyhzrg': 7}}, {'ONGAS': {'Y': 22}}, {'E1F6': {'#@CF:@@': 25}}, {'ZI8': {'QBV': 37}}]", "assert convert_list_dictionary(['TS41F', '1HC', 'Q24CRE', 'C4PXU'], ['kqyhid', 'Q', '#DZRSZW', 'DYBHIRR'], [8, 20, 31, 39]) == [{'TS41F': {'kqyhid': 8}}, {'1HC': {'Q': 20}}, {'Q24CRE': {'#DZRSZW': 31}}, {'C4PXU': {'DYBHIRR': 39}}]", "assert convert_list_dictionary(['W2O', 'O0D412', 'VX5', 'FV0'], ['adcsj', 'Y', '~/GHQ', 'UVEWYRJK'], [14, 18, 26, 36]) == [{'W2O': {'adcsj': 14}}, {'O0D412': {'Y': 18}}, {'VX5': {'~/GHQ': 26}}, {'FV0': {'UVEWYRJK': 36}}]", "assert convert_list_dictionary(['JVPG7', 'SRHP6K', 'FRM', 'SGJK7U'], ['xiuor', 'F', 'A:NND=W', 'PZH'], [10, 18, 31, 38]) == [{'JVPG7': {'xiuor': 10}}, {'SRHP6K': {'F': 18}}, {'FRM': {'A:NND=W': 31}}, {'SGJK7U': {'PZH': 38}}]", "assert convert_list_dictionary(['P567WD', 'HH28', 'TD6', '2KH15'], ['spr', 'B', 'B$F?A:', 'OXUA'], [7, 18, 25, 40]) == [{'P567WD': {'spr': 7}}, {'HH28': {'B': 18}}, {'TD6': {'B$F?A:': 25}}, {'2KH15': {'OXUA': 40}}]", "assert convert_list_dictionary(['8GJX', 'NEXZ6', 'OMZ1W', 'GZ1'], ['sqf', 'B', 'N-D', 'SBROW'], [15, 19, 35, 44]) == [{'8GJX': {'sqf': 15}}, {'NEXZ6': {'B': 19}}, {'OMZ1W': {'N-D': 35}}, {'GZ1': {'SBROW': 44}}]", "assert convert_list_dictionary(['XON', '248', 'A11', 'W4NFH6'], ['dxamm', 'F', 'KJJ|VXD', 'VCGQ'], [8, 15, 28, 43]) == [{'XON': {'dxamm': 8}}, {'248': {'F': 15}}, {'A11': {'KJJ|VXD': 28}}, {'W4NFH6': {'VCGQ': 43}}]"], "entry_point": "convert_list_dictionary", "repair_prompt": ["Write a function convert_list_dictionary to transform multiple lists into a nested dictionary.\nconvert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n", " Write a function convert_list_dictionary to transform multiple lists into a nested dictionary. Each element from the first list corresponds to a key in the dictionary, and each element from the second list corresponds to a value in the dictionary.\nconvert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n", " Write a function convert_list_dictionary that converts multiple lists into a nested dictionary structure.\nconvert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n"], "completions": ["from typing import List\nfrom typing import List, Dict\n\ndef convert_list_dictionary(keys: List[str], values: List[str], scores: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    \"\"\"\n    Converts three lists into a list of nested dictionaries.\n    \n    Args:\n        keys (List[str]): List of keys for the outer dictionary.\n        values (List[str]): List of values for the inner dictionary.\n        scores (List[int]): List of scores for the inner dictionary.\n    \n    Returns:\n        List[Dict[str, Dict[str, int]]]: List of nested dictionaries.\n    \"\"\"\n    result = []\n    \n    # Check if any of the lists are empty\n    if not keys or not values or not scores:\n        return result\n    \n    for i in range(len(keys)):\n        if i < len(values) and i < len(scores):\n            nested_dict = {keys[i]: {values[i]: scores[i]}}\n            result.append(nested_dict)\n    \n    return result\n", "from typing import List\nfrom typing import List, Dict\n\ndef convert_list_dictionary(ids: List[str], names: List[str], scores: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    result = []\n    for id, name, score in zip(ids, names, scores):\n        nested_dict = {id: {name: score}}\n        result.append(nested_dict)\n    return result\n", "from typing import List\nfrom typing import List, Dict\n\ndef convert_list_dictionary(ids: List[str], names: List[str], scores: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    \"\"\"\n    Converts three lists (IDs, names, and scores) into a list of nested dictionaries.\n    \n    Args:\n        ids (List[str]): List of IDs.\n        names (List[str]): List of names.\n        scores (List[int]): List of scores.\n    \n    Returns:\n        List[Dict[str, Dict[str, int]]]: List of nested dictionaries where each nested dictionary maps an ID to a name with the corresponding score.\n    \n    Raises:\n        ValueError: If the input lists are of different lengths.\n    \"\"\"\n    # Check if all input lists are of the same length\n    if len(ids) != len(names) or len(ids) != len(scores) or len(names) != len(scores):\n        raise ValueError(\"All input lists must be of the same length\")\n    \n    # Initialize the result list\n    result = []\n    \n    # Zip the lists together and create nested dictionaries\n    for id_val, name_val, score_val in zip(ids, names, scores):\n        nested_dict = {\"name\": {name_val: score_val}}\n        result.append({id_val: nested_dict})\n    \n    return result\n", "from typing import List\nfrom typing import List, Dict\n\ndef convert_list_dictionary(keys: List[str], values: List[str], values_2: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    \"\"\"\n    Converts three lists into a list of nested dictionaries.\n    \n    Args:\n        keys (List[str]): List of keys for the outer dictionary.\n        values (List[str]): List of values for the inner dictionary.\n        values_2 (List[int]): List of integers for the key-value pairs in the inner dictionary.\n    \n    Returns:\n        List[Dict[str, Dict[str, int]]]: List of nested dictionaries.\n    \"\"\"\n    result = []\n    shortest_length = min(len(keys), len(values), len(values_2))\n    \n    for i in range(shortest_length):\n        nested_dict = {keys[i]: {values[i]: values_2[i]}}\n        result.append(nested_dict)\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List, Dict\n\ndef convert_list_dictionary(keys: List[str], values: List[str], scores: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    result = []\n    for i in range(min(len(keys), len(values), len(scores))):\n        nested_dict = {keys[i]: {values[i]: scores[i]}}\n        result.append(nested_dict)\n    return result\n", "from typing import List\nfrom typing import List, Dict\n\ndef convert_list_dictionary(keys: List[str], values: List[str], values_two: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    \"\"\"\n    Converts three lists into a list of nested dictionaries.\n    \n    Args:\n        keys (List[str]): List of keys.\n        values (List[str]): List of values.\n        values_two (List[int]): List of corresponding values.\n    \n    Returns:\n        List[Dict[str, Dict[str, int]]]: List of nested dictionaries.\n    \"\"\"\n    result = []\n    \n    # Check if any of the input lists are empty\n    if not keys or not values or not values_two:\n        return result\n    \n    # Iterate over the indices of the lists\n    for i in range(len(keys)):\n        # Create a nested dictionary\n        nested_dict = {keys[i]: {values[i]: values_two[i]}}\n        # Append the nested dictionary to the result list\n        result.append(nested_dict)\n    \n    return result\n", "from typing import List\nfrom typing import List, Dict\n\ndef convert_list_dictionary(list1: List[str], list2: List[str], list3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    \"\"\"\n    Converts three lists into a list of nested dictionaries.\n    \n    Args:\n        list1 (List[str]): List of strings representing keys.\n        list2 (List[str]): List of strings representing inner keys.\n        list3 (List[int]): List of integers representing values.\n    \n    Returns:\n        List[Dict[str, Dict[str, int]]]: List of nested dictionaries.\n    \"\"\"\n    result = []\n    \n    # Check if any of the lists are empty\n    if not list1 or not list2 or not list3:\n        return result\n    \n    # Iterate through the indices of the lists\n    for i in range(len(list1)):\n        # Create a nested dictionary with keys from list1 and list2, and value from list3\n        nested_dict = {list1[i]: {list2[i]: list3[i]}}\n        # Append the nested dictionary to the result list\n        result.append(nested_dict)\n    \n    return result\n", "from typing import List\nfrom typing import List, Dict\n\ndef convert_list_dictionary(list1: List[str], list2: List[str], list3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    \"\"\"\n    Converts three lists into a list of nested dictionaries.\n    \n    Args:\n        list1 (List[str]): The first list containing string elements.\n        list2 (List[str]): The second list containing string elements.\n        list3 (List[int]): The third list containing integer elements.\n    \n    Returns:\n        List[Dict[str, Dict[str, int]]]: A list of nested dictionaries.\n    \"\"\"\n    # Check if any of the input lists are empty\n    if not list1 or not list2 or not list3:\n        return []\n    \n    result = []\n    for key, value, score in zip(list1, list2, list3):\n        nested_dict = {key: {value: score}}\n        result.append(nested_dict)\n    \n    return result\n", "from typing import List\nfrom typing import List, Dict\n\ndef convert_list_dictionary(ids: List[str], names: List[str], scores: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    \"\"\"\n    Converts three lists (ids, names, scores) into a list of nested dictionaries.\n    \n    Args:\n        ids (List[str]): List of IDs.\n        names (List[str]): List of names.\n        scores (List[int]): List of scores.\n    \n    Returns:\n        List[Dict[str, Dict[str, int]]]: List of nested dictionaries where each ID maps to a dictionary containing the corresponding name and score.\n    \n    Raises:\n        ValueError: If the lists are not of equal length.\n    \"\"\"\n    # Check if all lists are of equal length\n    if len(ids) != len(names) or len(ids) != len(scores) or len(names) != len(scores):\n        raise ValueError(\"All lists must be of equal length\")\n    \n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over the range of the length of ids\n    for i in range(len(ids)):\n        # Create a nested dictionary for each ID, name, and score\n        nested_dict = {\n            ids[i]: {\n                \"name\": names[i],\n                \"score\": scores[i]\n            }\n        }\n        # Append the nested dictionary to the results list\n        result.append(nested_dict)\n    \n    return result\n", "from typing import List\nfrom typing import List, Dict\n\ndef convert_list_dictionary(ids: List[str], names: List[str], scores: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    \"\"\"\n    Converts three lists into a list of nested dictionaries.\n    \n    Args:\n        ids (List[str]): List of unique identifiers.\n        names (List[str]): List of names.\n        scores (List[int]): List of scores.\n    \n    Returns:\n        List[Dict[str, Dict[str, int]]]: List of nested dictionaries.\n    \n    Raises:\n        ValueError: If the lengths of the input lists are not equal.\n    \"\"\"\n    # Check if all three lists are of the same length\n    if len(ids) != len(names) or len(ids) != len(scores) or len(names) != len(scores):\n        raise ValueError(\"All lists must be of the same length\")\n    \n    # Initialize an empty list to store the resulting nested dictionaries\n    result = []\n    \n    # Iterate through the indices of the lists\n    for i in range(len(ids)):\n        # Create a nested dictionary for each index\n        nested_dict = {ids[i]: {names[i]: scores[i]}}\n        # Append the nested dictionary to the result list\n        result.append(nested_dict)\n    \n    # Return the result list\n    return result\n"], "plans": ["requirement analysis:\nThe function 'convert_list_dictionary' needs to take three lists as input and return a list of nested dictionaries. Each dictionary should have a key from the first list, and the value should be another dictionary with a name from the second list and the corresponding score from the third list. The output should match the given example.\nrequirement pool:\n- The main code should correctly transform the lists into the desired nested dictionary format.\n- The function should handle lists of any length.\n- Implement error handling for cases where the input lists are of different lengths.\n- Ensure the function is efficient and can handle large lists.\n- Include unit tests to verify the correctness of the function.\nTo implement the 'convert_list_dictionary' function, we will use Python's built-in capabilities along with the 'itertools' module to efficiently pair elements from the three input lists. The function will iterate through each index of the lists, creating a nested dictionary for each pair of key and value. This approach ensures that the function can handle lists of any length and will efficiently transform the input lists into the desired output format.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'nested dictionary': A dictionary that contains another dictionary as a value.\n    Explanation: In this case, the function needs to create a dictionary where each key is a string from one list and the value is another dictionary containing a name from another list and a score from another list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function should iterate through the indices of the lists, creating a nested dictionary for each index. The outer dictionary will use the elements from the first list as keys, and the inner dictionary will use the elements from the second and third lists as key-value pairs.\n\n# [edge case] \n    convert_list_dictionary([\"S001\"], [\"Adina Park\"], [85]) = [{'S001': {'Adina Park': 85}}]\n    Explanation: Since there is only one element in each list, the function should create a single nested dictionary with the single key-value pair.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic can handle a single element in each list.\n\n# [core concept]\n    'iteration': Going through each element of a collection.\n    Explanation: The function needs to iterate through each index of the three input lists to create the nested dictionary.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates that the function should iterate through each element of the lists.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function should use a loop to iterate through the indices of the lists, creating a nested dictionary for each index. The outer dictionary will use the elements from the first list as keys, and the inner dictionary will use the elements from the second and third lists as key-value pairs.\n\n# [edge case] \n    convert_list_dictionary([], [], []) = []\n    Explanation: Since all input lists are empty, the function should return an empty list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case. The function should check if any of the input lists are empty and return an empty list if they are.\n\n# [core concept]\n    'nested dictionary': A dictionary that contains another dictionary as a value.\n    Explanation: In this case, the function needs to create a dictionary where each key is a string from one list and the value is another dictionary containing a name from another list and a score from another list.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates that the function should iterate through each element of the lists.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function should use a loop to iterate through the indices of the lists, creating a nested dictionary for each index. The outer dictionary will use the elements from the first list as keys, and the inner dictionary will use the elements from the second and third lists as key-value pairs.\n\n# [edge case] \n    convert_list_dictionary([\"S001\", \"S002\"], [\"Adina Park\", \"Leyton Marsh\"], [85, 98]) = [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}]\n    Explanation: Since there are only two elements in each list, the function should create two nested dictionaries with the corresponding key-value pairs.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic can handle lists of any length.\n", "requirement analysis:\nThe function 'convert_list_dictionary' needs to take three lists as input and return a list of nested dictionaries. Each dictionary should map an ID to a name with a corresponding score. The function should handle lists of equal length.\nrequirement pool:\n- The main code should iterate through the lists simultaneously.\n- Each nested dictionary should correctly map the ID to the name and score.\n- Ensure the function can handle lists of different lengths.\n- Implement error handling for non-string or non-integer inputs.\nWe will use Python's built-in functions and standard libraries to create a function that takes three lists as input and returns a list of nested dictionaries. Each dictionary will map an ID to a name with a corresponding score. The function will iterate through the lists simultaneously using the zip function to ensure that each list is processed in parallel.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'nested dictionary': This involves creating a dictionary where each key maps to another dictionary, and the inner dictionary contains key-value pairs.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `convert_list_dictionary`, we will follow these steps:\n    1. Initialize an empty list to store the resulting nested dictionaries.\n    2. Use the `zip` function to iterate over the three lists simultaneously.\n    3. For each set of values (ID, name, score), create a nested dictionary where the ID is the outer key and the name is the inner key with the corresponding score as the value.\n    4. Append the nested dictionary to the result list.\n    5. Return the result list.\n\n# [edge case] \n    convert_list_dictionary([], [], []) = []\n    Explanation: If any of the input lists are empty, the function should return an empty list since there's no data to transform into a dictionary.\n    convert_list_dictionary([\"S001\"], [\"Adina Park\"], [85]) = [{'S001': {'Adina Park': 85}}]\n    Explanation: When there's only one item in each list, the function should return a list with a single nested dictionary.\n    convert_list_dictionary([\"S001\", \"S002\"], [\"Adina Park\", \"Leyton Marsh\"], [85, 98]) = [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}]\n    Explanation: The function should handle multiple items by creating multiple nested dictionaries in the result list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can naturally handle cases where the input lists are of different lengths or are empty, returning appropriate empty lists.\n", "requirement analysis:\nThe function 'convert_list_dictionary' needs to take three lists as input and return a list of nested dictionaries. Each dictionary should have a key from the first list, and the value should be another dictionary with a name from the second list and the corresponding score from the third list. The output should match the provided example.\nrequirement pool:\n- The main code should correctly transform the lists into the desired nested dictionary format.\n- The function should handle lists of any length.\n- Implement error handling for cases where the input lists are of different lengths.\n- Ensure the function is efficient and can handle large lists.\n- Include unit tests to verify the correctness of the function.\nTo implement the 'convert_list_dictionary' function, we will use Python's built-in capabilities and the 'itertools' module to efficiently zip the lists together. This approach ensures that the function can handle lists of any length and will transform them into the desired nested dictionary format. We will also implement error handling to manage cases where the input lists are of different lengths.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'nested dictionary': This involves creating a dictionary where each key maps to another dictionary, and the inner dictionary contains key-value pairs.\n    Explanation: In the requirement, we need to transform three lists (IDs, names, and scores) into a list of nested dictionaries, where each nested dictionary maps an ID to a name with the corresponding score.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the 'convert_list_dictionary' function, we will follow these steps:\n    1. Check if all input lists are of the same length to ensure they can be zipped together.\n    2. Use the 'zip' function to pair each element from the IDs, names, and scores lists.\n    3. For each tuple of (ID, name, score), create a nested dictionary where the ID is the key and the name-score pair is the value.\n    4. Append each nested dictionary to a result list.\n    5. Return the result list.\n\n# [edge case] \n    convert_list_dictionary([\"S001\", \"S002\", \"S003\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\"], [85, 98]) = Error\n    Explanation: The lengths of the lists are not equal, so they cannot be zipped together. This will result in a ValueError.\n    Expected output: The function should raise a ValueError indicating that the input lists are of different lengths.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the input lists are of different lengths.\n    ```python\n    if len(ids) != len(names) or len(ids) != len(scores) or len(names) != len(scores):\n        raise ValueError(\"All input lists must be of the same length\")\n    ```\n    This code checks the lengths of the input lists and raises a ValueError if they are not equal, ensuring that the function can handle cases where the input lists are of different lengths.\n", "requirement analysis:\nThe function 'convert_list_dictionary' needs to take three lists as input: one for keys, one for values, and one for the corresponding values. It should then create a nested dictionary where each key from the first list maps to a dictionary containing the corresponding value from the second list and its corresponding value from the third list. The output should be a list of these nested dictionaries.\nrequirement pool:\n- The main code should handle the transformation of lists into a nested dictionary efficiently.\n- The function should be able to handle lists of varying lengths.\n- The output should be a list of dictionaries, each representing a single transformation.\nTo implement the 'convert_list_dictionary' function efficiently, we will use Python's built-in data structures and standard library functions. The function will iterate through the lists, creating a nested dictionary for each corresponding pair of elements from the keys, values, and values lists. This approach ensures that the function can handle lists of varying lengths by stopping the iteration at the length of the shortest list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'nested dictionary': A dictionary that contains another dictionary as a value.\n    Explanation: In this requirement, we need to create a dictionary where each key is an element from the first list, and the value is another dictionary containing the corresponding element from the second list and the corresponding element from the third list as a key-value pair.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the lists simultaneously using the index.\n    Create a nested dictionary for each index.\n    Update the dictionary with the key-value pairs.\n\n# [edge case] \n    convert_list_dictionary([\"S001\"], [\"Adina Park\"], [85]) = [{'S001': {'Adina Park': 85}}]\n    Explanation: Since there is only one element in each list, the function should return a list with one nested dictionary.\n    convert_list_dictionary([\"S001\", \"S002\"], [\"Adina Park\"], [85]) = [{'S001': {'Adina Park': 85}}, {'S002': {}}]\n    Explanation: The third list is shorter than the others, so the function should stop at the length of the third list, resulting in an empty dictionary for 'S002'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will naturally handle cases where the lists are of unequal lengths by stopping at the shortest list's length.\n\n# [core concept]\n    'positive': means that all integers in the list are greater than 0\n\n# [phrase showing quantity relationship]\n    'more than': means that we need to find an integer greater than 0\n    'at least as many times': means that we need to find the integer whose appearance times is greater than or equal to its value\n\n# [degree adverb] \n    'largest': means that we need the largest integer that appears greater or equal to its value\n\n# [code logic]\n    Create a dictionary to store the frequency of each integer in the list.\n    Iterate through the list and update the frequency in the dictionary.\n    Iterate through the dictionary to find the largest integer that meets the condition.\n    Return the result or -1 if no such integer exists.\n\n# [edge case] \n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: Both 2 and 3 appear more than or equal to their values, but 3 is the largest number.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: Number 2 appears one time, number 3 appears two times, number 4 appears three times, none of them appear more than or equal to their values, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can set the initial return value to -1 and then find the largest integer that meets the condition.\n\n# [core concept]\n    'nested dictionary': A dictionary that contains another dictionary as a value.\n    Explanation: In this requirement, we need to create a dictionary where each key is an element from the first list, and the value is another dictionary containing the corresponding element from the second list and the corresponding element from the third list as a key-value pair.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Iterate through the lists simultaneously using the index.\n    Create a nested dictionary for each index.\n    Update the dictionary with the key-value pairs.\n\n# [edge case] \n    convert_list_dictionary([\"S001\"], [\"Adina Park\"], [85]) = [{'S001': {'Adina Park': 85}}]\n    Explanation: Since there is only one element in each list, the function should return a list with one nested dictionary.\n    convert_list_dictionary([\"S001\", \"S002\"], [\"Adina Park\"], [85]) = [{'S001': {'Adina Park': 85}}, {'S002': {}}]\n    Explanation: The third list is shorter than the others, so the function should stop at the length of the third list, resulting in an empty dictionary for 'S002'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will naturally handle cases where the lists are of unequal lengths by stopping at the shortest list's length.\n", "requirement analysis:\nThe function 'convert_list_dictionary' needs to take three lists as input: one for keys, one for values, and one for the corresponding values. It should then create a nested dictionary where each key from the first list maps to a dictionary containing the corresponding value from the second list as a key-value pair. The output should be a list of these nested dictionaries.\nrequirement pool:\n- The main code should handle the transformation of lists into a nested dictionary efficiently.\n- The function should be able to handle lists of varying lengths.\n- The output should be a list of dictionaries, each representing a single transformation.\nTo implement the 'convert_list_dictionary' function efficiently, we will use Python's built-in capabilities and the 'itertools' module to handle the combination of keys and values. The function will iterate through the lists, creating a nested dictionary for each pair of key and value. This approach ensures that the function can handle lists of varying lengths by stopping the iteration once the shortest list is exhausted.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'nested dictionary': This involves creating a dictionary where each key maps to another dictionary, which in turn maps to a value.\n    Explanation: In the given requirement, we need to transform three lists into a nested dictionary structure where each element from the first list is a key, and the corresponding element from the second list and third list form the nested dictionary under that key.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the 'convert_list_dictionary' function, we will follow these steps:\n    1. Initialize an empty list to store the resulting nested dictionaries.\n    2. Iterate through the indices of the lists.\n    3. For each index, create a nested dictionary where the key is the element from the first list, and the value is another dictionary with the key as the element from the second list and the value as the element from the third list.\n    4. Append the created nested dictionary to the result list.\n    5. Return the result list.\n\n# [edge case] \n    convert_list_dictionary([\"S001\"], [\"Adina Park\"], [85]) = [{'S001': {'Adina Park': 85}}]\n    Explanation: Since there is only one element in each list, the function should create a single nested dictionary with that element.\n    convert_list_dictionary([\"S001\", \"S002\"], [\"Adina Park\"], [85]) = [{'S001': {'Adina Park': 85}}, {'S002': {}}]\n    Explanation: The third list is shorter than the first two, so the function should stop at the second index, leaving the remaining keys without corresponding values.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The function can handle cases where the lists are of different lengths by stopping the iteration at the length of the shortest list.\n", "requirement analysis:\nThe function 'convert_list_dictionary' needs to take three lists as input: one for keys, one for values, and one for the corresponding values. It should then create a nested dictionary where each key from the first list maps to a dictionary containing the corresponding value from the second list and its corresponding value from the third list. The output should be a list of these nested dictionaries.\nrequirement pool:\n- The main code should handle the transformation of lists into a nested dictionary efficiently.\n- The function should be able to handle lists of varying lengths.\n- The output should be a list of dictionaries, each representing a single transformation.\nWe will use Python's built-in capabilities to create a function that takes three lists as input and transforms them into a list of nested dictionaries. Each dictionary in the output list will map a key from the first list to a nested dictionary that maps a value from the second list to a corresponding value from the third list. This approach leverages Python's ability to handle lists and dictionaries efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'nested dictionary': A dictionary that contains another dictionary as a value.\n    Explanation: In this requirement, we need to create a list of dictionaries where each dictionary contains a key from the first list mapped to a nested dictionary that maps a value from the second list to a corresponding value from the third list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `convert_list_dictionary`, we will follow these steps:\n    1. Initialize an empty list to store the resulting dictionaries.\n    2. Iterate through the indices of the lists.\n    3. For each index, create a nested dictionary where the key from the first list maps to the value from the second list, and the value from the third list is the corresponding value.\n    4. Append the nested dictionary to the result list.\n    5. Return the result list.\n\n# [edge case] \n    convert_list_dictionary([\"S001\"], [\"Adina Park\"], [85]) = [{'S001': {'Adina Park': 85}}]\n    Explanation: When there is only one element in each list, the function should return a list with one nested dictionary.\n    convert_list_dictionary([], [\"Adina Park\"], [85]) = []\n    Explanation: If the first list is empty, the function should return an empty list since there are no keys to map.\n    convert_list_dictionary([\"S001\", \"S002\"], [\"Adina Park\"], [85]) = [{'S001': {'Adina Park': 85}}, {'S002': {}}]\n    Explanation: If the second and third lists are not of the same length, the function should still create nested dictionaries for the available keys and leave the remaining values as empty dictionaries.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can be extended to check the lengths of the input lists and handle cases where lists are not of the same length.\n", "requirement analysis:\nThe function needs to handle three lists of equal length and convert them into a nested dictionary structure. Each list corresponds to keys and values that need to be nested within the next level of dictionaries. The function should be robust against different lengths of lists and provide clear, readable output.\nrequirement pool:\n- The main code should handle three lists and convert them into a nested dictionary structure.\n- The function should gracefully handle lists of different lengths.\n- The output should be a list of nested dictionaries, each representing a single entry.\n- The function should be optimized for readability and maintainability.\n- The function should include error handling for incorrect input types.\nTo implement the function `convert_list_dictionary`, we will use Python's built-in capabilities along with the `itertools` module to handle the iteration and pairing of lists. The function will take three lists as input and will output a list of nested dictionaries. Each dictionary in the output list will represent a single entry, with keys and values from the input lists nested accordingly.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'nested dictionary': This refers to a structure where a dictionary contains another dictionary as a value.\n    Explanation: In the context of this requirement, we need to create a list of dictionaries where each dictionary contains a key-value pair. The key is a string from one list, and the value is another dictionary where the key is a name from another list and the value is a number from a third list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `convert_list_dictionary`, we will follow these steps:\n    1. Initialize an empty list to store the resulting nested dictionaries.\n    2. Use a loop to iterate through the indices of the lists.\n    3. For each index, create a nested dictionary with the corresponding values from the lists.\n    4. Append the nested dictionary to the result list.\n    5. Return the result list.\n\n# [edge case] \n    convert_list_dictionary([\"S001\"], [\"Adina Park\"], [85]) = [{'S001': {'Adina Park': 85}}]\n    Explanation: When there is only one item in each list, the function should still work correctly and produce a list with one nested dictionary.\n    convert_list_dictionary([], [], []) = []\n    Explanation: If all input lists are empty, the function should return an empty list as there is nothing to convert into a nested dictionary structure.\n    convert_list_dictionary([\"S001\", \"S002\"], [\"Adina Park\"], [85]) = [{'S001': {'Adina Park': 85}}, {'S002': {}}]\n    Explanation: When the second and third lists are not of the same length, the function should still work correctly but may not produce a fully populated nested dictionary for the second entry.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic should work correctly for the given edge cases.\n", "requirement analysis:\nThe function 'convert_list_dictionary' needs to take three lists as input and return a list of nested dictionaries. Each dictionary should have a key from the first list, a value from the second list, and the corresponding score from the third list. The output should be a list of these nested dictionaries.\nrequirement pool:\n- The main code should handle the conversion efficiently.\n- The function should be able to handle lists of varying lengths.\n- Ensure the output is formatted as specified in the requirements.\n- Include error handling for cases where the input lists are not of equal length.\nTo implement the 'convert_list_dictionary' function efficiently, we will use Python's built-in capabilities and the 'itertools' module to handle the combination of elements from the input lists. The function will iterate through the indices of the lists, creating a nested dictionary for each pair of elements from the first two lists and their corresponding score from the third list. This approach ensures that the function can handle lists of varying lengths by using the length of the longest list to determine the number of iterations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'nested dictionary': This refers to a dictionary within a dictionary, where one dictionary is an element of another dictionary.\n    Explanation: In the context of the requirement, we need to create a structure where each key-value pair in the outer dictionary contains another key-value pair in the form of a dictionary.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the 'convert_list_dictionary' function, we will follow these steps:\n    1. Initialize an empty list to store the resulting nested dictionaries.\n    2. Use the 'zip' function to pair elements from the three input lists.\n    3. For each pair of elements from the first two lists and their corresponding score from the third list, create a nested dictionary.\n    4. Append the nested dictionary to the result list.\n    5. Return the result list.\n\n# [edge case] \n    convert_list_dictionary([], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]) = []\n    Explanation: If the first list is empty, there are no keys to create nested dictionaries, so the expected output is an empty list.\n    convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [], [85, 98, 89, 92]) = []\n    Explanation: If the second list is empty, there are no values to pair with the keys, so the expected output is an empty list.\n    convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], []) = []\n    Explanation: If the third list is empty, there are no scores to associate with the key-value pairs, so the expected output is an empty list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where any of the input lists are empty.\n        if not list1 or not list2 or not list3:\n            return []\n        (other code)\n", "requirement analysis:\nThe function needs to handle three lists of equal length and convert them into a nested dictionary structure. Each list corresponds to keys and values that need to be nested within each other. The function should be robust enough to handle different lengths of lists, providing clear error messages in such cases.\nrequirement pool:\n- The main code should handle three lists and convert them into a nested dictionary structure.\n- Implement error handling for lists of unequal length.\n- Ensure the output is readable and maintainable.\n- The function should be optimized for performance.\n- Include comments and documentation for better understanding and maintenance.\nTo implement the function `convert_list_dictionary`, we will use Python's built-in data structures and standard libraries. The function will take three lists as input: list of IDs, list of names, and list of scores. It will then create a nested dictionary where each ID maps to a dictionary containing the corresponding name and score. The function will include error handling to ensure all three lists are of equal length.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'nested dictionary': This involves creating a dictionary where each key maps to another dictionary, and the nested dictionary contains key-value pairs.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through the lists using a loop.\n    - Create a nested dictionary for each ID, name, and score.\n    - Use the ID as the outer key and the nested dictionary as the value.\n    - The nested dictionary should have the name as the key and the score as the value.\n\n# [edge case] \n    convert_list_dictionary([], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]) = Error\n    Explanation: The function should raise an error because the lists of IDs and names are not of equal length.\n    convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [], [85, 98, 89, 92]) = Error\n    Explanation: The function should raise an error because the lists of IDs and names are not of equal length.\n    convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], []) = Error\n    Explanation: The function should raise an error because the lists of IDs and scores are not of equal length.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(ids) != len(names) or len(ids) != len(scores) or len(names) != len(scores):\n            raise ValueError(\"All lists must be of equal length\")\n        (other code)\n", "requirement analysis:\nThe function 'convert_list_dictionary' needs to take three lists as input and return a list of nested dictionaries. Each dictionary should have a key from the first list, and the value should be another dictionary with a name from the second list and the corresponding score from the third list. The output should match the given example.\nrequirement pool:\n- The main code should correctly transform the lists into the desired nested dictionary format.\n- The function should handle lists of any length.\n- Implement error handling for cases where the input lists are of different lengths.\n- Ensure the function is efficient and can handle large lists.\n- Include unit tests to verify the correctness of the function.\nTo implement the 'convert_list_dictionary' function, we will use Python's built-in capabilities and the 'itertools' module to efficiently pair elements from the three input lists. This approach ensures that the function can handle lists of any length and will transform them into the desired nested dictionary format. We will also implement error handling to manage cases where the input lists are of different lengths.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'nested dictionary': A data structure that consists of key-value pairs where the value itself is another dictionary.\n    Explanation: In this requirement, we need to create a dictionary where each key is a unique identifier (like 'S001', 'S002', etc.) and the value is another dictionary containing a name as the key and a score as the value.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the 'convert_list_dictionary' function, we will follow these steps:\n    1. Check if all three lists are of the same length. If not, raise a ValueError.\n    2. Initialize an empty list to store the resulting nested dictionaries.\n    3. Iterate through the indices of the lists.\n    4. For each index, create a nested dictionary with the identifier as the key and the name-score pair as the value.\n    5. Append the nested dictionary to the result list.\n    6. Return the result list.\n\n# [edge case] \n    convert_list_dictionary([\"S001\", \"S002\", \"S003\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\"], [85, 98]) = ValueError\n    Explanation: The lengths of the lists are not equal (3 IDs, 2 names, 2 scores). This is an edge case where the input lists are not of the same length, which should raise a ValueError.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case.\n        if len(ids) != len(names) or len(ids) != len(scores) or len(names) != len(scores):\n            raise ValueError(\"All lists must be of the same length\")\n\n    This code checks if the lengths of the three lists are equal. If not, it raises a ValueError.\n"], "test": ["def check(convert_list_dictionary):\n\tassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['4MUE81Q4', 'F24OAE', 'OYUSALHP', 'WOEG'], ['RrSXwun', 'JJBkXUwyL', 'pyFQdOpDDOYIcyM', 'SXYBcsIEgkx'], [81, 99, 84, 90]) == [{'4MUE81Q4': {'RrSXwun': 81}}, {'F24OAE': {'JJBkXUwyL': 99}}, {'OYUSALHP': {'pyFQdOpDDOYIcyM': 84}}, {'WOEG': {'SXYBcsIEgkx': 90}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['N5W9TXB8', 'Y4G8Q', '7DMFP1', 'OM6D5VA'], ['PrMptZ', 'RYNYkvywwa GeZQvo', 'MuMShtNYWMf', 'XwoFbOrSu'], [81, 95, 85, 96]) == [{'N5W9TXB8': {'PrMptZ': 81}}, {'Y4G8Q': {'RYNYkvywwa GeZQvo': 95}}, {'7DMFP1': {'MuMShtNYWMf': 85}}, {'OM6D5VA': {'XwoFbOrSu': 96}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['9YE3Z', '9CRK9UJ', '1PZGV2Z97', 'TR6NIFH'], ['Tqcpb TR', 'owlCbexzoSRKfMZuWF', 'qYmKTXFKQTyMtW', 'LJAsmJhk wACGPBCK'], [87, 101, 90, 96]) == [{'9YE3Z': {'Tqcpb TR': 87}}, {'9CRK9UJ': {'owlCbexzoSRKfMZuWF': 101}}, {'1PZGV2Z97': {'qYmKTXFKQTyMtW': 90}}, {'TR6NIFH': {'LJAsmJhk wACGPBCK': 96}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['LKP2UA', 'CKY', 'Z6DKP', 'N89N'], ['GpVXzPx', 'UggJWkgf Z', 'WTsKEDJeTaAEjhqD ', 'yKgzNQGhraL'], [89, 97, 88, 87]) == [{'LKP2UA': {'GpVXzPx': 89}}, {'CKY': {'UggJWkgf Z': 97}}, {'Z6DKP': {'WTsKEDJeTaAEjhqD ': 88}}, {'N89N': {'yKgzNQGhraL': 87}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['XG4QZQO0', 'Z9VDOD', '4JDT16M', 'GY5WYG7'], ['lBkpezpOrg', 'DfigVhWSUpRL', 'paSAZfTLDh', 'jPDgzSisbJRkO'], [86, 98, 84, 94]) == [{'XG4QZQO0': {'lBkpezpOrg': 86}}, {'Z9VDOD': {'DfigVhWSUpRL': 98}}, {'4JDT16M': {'paSAZfTLDh': 84}}, {'GY5WYG7': {'jPDgzSisbJRkO': 94}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['3DHH', '5L2Y9UYM', '06AMGWPU', 'WV3Q'], ['SHPrYBDVIfCzU', 'eGiJKDvsF', 'TQ TKWnyXhs', 'jNeBOzyY ZlEP'], [82, 94, 92, 96]) == [{'3DHH': {'SHPrYBDVIfCzU': 82}}, {'5L2Y9UYM': {'eGiJKDvsF': 94}}, {'06AMGWPU': {'TQ TKWnyXhs': 92}}, {'WV3Q': {'jNeBOzyY ZlEP': 96}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['GWPIGVD', '9W8M', 'L4H', '6W7'], ['CCHHLprxuEcdEi', 'HjLtXK PXXAbbBDf', 'nvJvySPxONrWgkAKs', 'TjOKixdxJAo MX'], [89, 96, 84, 90]) == [{'GWPIGVD': {'CCHHLprxuEcdEi': 89}}, {'9W8M': {'HjLtXK PXXAbbBDf': 96}}, {'L4H': {'nvJvySPxONrWgkAKs': 84}}, {'6W7': {'TjOKixdxJAo MX': 90}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['A6R9F', 'X2CA6W6Q6', 'OPZNPJO', '6E75QJXE2'], ['kWNMBW uyK', 'HfBIaYVHCUynhiMnYu', 'ODUAuOoWZs', 'aoscgNfoe'], [82, 99, 86, 92]) == [{'A6R9F': {'kWNMBW uyK': 82}}, {'X2CA6W6Q6': {'HfBIaYVHCUynhiMnYu': 99}}, {'OPZNPJO': {'ODUAuOoWZs': 86}}, {'6E75QJXE2': {'aoscgNfoe': 92}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['K8HB2N', 'QNJ2FXRTP', 'HGY6U2G4N', 'DAD'], ['BAAZCYjhiX', 'bnliSOHHTksmSS C', 'pikHsnnEtFmr', 'emOlIvqdnY '], [82, 93, 90, 95]) == [{'K8HB2N': {'BAAZCYjhiX': 82}}, {'QNJ2FXRTP': {'bnliSOHHTksmSS C': 93}}, {'HGY6U2G4N': {'pikHsnnEtFmr': 90}}, {'DAD': {'emOlIvqdnY ': 95}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['UCJ8DLP', '8WFFL', '1HUQSVBD', 'JEHXRP79'], ['XWsCGfhE', 'AYehFECSoOaLE', 've FWZqhIHkFQUqPF', 'tDJLcVCqdvWFHpXKJY'], [89, 100, 88, 89]) == [{'UCJ8DLP': {'XWsCGfhE': 89}}, {'8WFFL': {'AYehFECSoOaLE': 100}}, {'1HUQSVBD': {'ve FWZqhIHkFQUqPF': 88}}, {'JEHXRP79': {'tDJLcVCqdvWFHpXKJY': 89}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['L126WST', 'DP8', 'XMX', 'FGJ2'], ['dXoOSFpwHv UbW', 'qiVXttwUMPjY', 'ZwSFGJRZoUvJF', 'WjAhMhiLDCnBIYBevF'], [81, 101, 86, 91]) == [{'L126WST': {'dXoOSFpwHv UbW': 81}}, {'DP8': {'qiVXttwUMPjY': 101}}, {'XMX': {'ZwSFGJRZoUvJF': 86}}, {'FGJ2': {'WjAhMhiLDCnBIYBevF': 91}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['NJJI', 'E2FD7SSH1', '184WJ', '6EYSSJ3VC'], ['j tJ rqAjPIuhqa', 'ysCMeDeLAfegntY', 'yaNzNhVOsy', 'iYrWirUFnfZYAkutQ'], [83, 96, 89, 91]) == [{'NJJI': {'j tJ rqAjPIuhqa': 83}}, {'E2FD7SSH1': {'ysCMeDeLAfegntY': 96}}, {'184WJ': {'yaNzNhVOsy': 89}}, {'6EYSSJ3VC': {'iYrWirUFnfZYAkutQ': 91}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['CZQ', 'IF6NOTQ', 'K2AO', '2VAUR'], ['wZQdpQlR', 'SnAplLEWKyMbCUBp', 'QruusuJSDAH', 'RbExfAerK'], [81, 102, 92, 95]) == [{'CZQ': {'wZQdpQlR': 81}}, {'IF6NOTQ': {'SnAplLEWKyMbCUBp': 102}}, {'K2AO': {'QruusuJSDAH': 92}}, {'2VAUR': {'RbExfAerK': 95}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['N8W23G7XB', 'F65I', '8CXAPF6E', 'MK2O85C3'], ['OZdudcMe', 'EmhyqRiTWnpEMcbdqi', 'wfkKwI srWt', 'rRQzYfXWBYtdsMJ'], [90, 99, 92, 87]) == [{'N8W23G7XB': {'OZdudcMe': 90}}, {'F65I': {'EmhyqRiTWnpEMcbdqi': 99}}, {'8CXAPF6E': {'wfkKwI srWt': 92}}, {'MK2O85C3': {'rRQzYfXWBYtdsMJ': 87}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['1DOBT0HQZ', '3PRD', 'IFLP3QKYQ', 'CYXVSGU'], ['NqhTsVZAIBxurC', 'DfIigZESrO', 'yIJmPwlZP', 'JjKlylzcIZcOGzN'], [88, 101, 91, 92]) == [{'1DOBT0HQZ': {'NqhTsVZAIBxurC': 88}}, {'3PRD': {'DfIigZESrO': 101}}, {'IFLP3QKYQ': {'yIJmPwlZP': 91}}, {'CYXVSGU': {'JjKlylzcIZcOGzN': 92}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['57ZV4R78O', '1R9L9JA0', '8X1Z3', '9EF'], ['raeVni', 'SGErIFiivmFPGTYha', 'msiTirCPRubbpIt', ' lpSSFKuufpErKQ'], [85, 93, 86, 94]) == [{'57ZV4R78O': {'raeVni': 85}}, {'1R9L9JA0': {'SGErIFiivmFPGTYha': 93}}, {'8X1Z3': {'msiTirCPRubbpIt': 86}}, {'9EF': {' lpSSFKuufpErKQ': 94}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['IQ4K1IT4', 'VC1DH', 'RNH', '2QBRGFN'], ['sBdykp', 'rtDUdLGffqzI', 'rmAbTZioIUgDhFcsVm', 'OyBmVOeeNpirKKVFVg'], [82, 100, 85, 95]) == [{'IQ4K1IT4': {'sBdykp': 82}}, {'VC1DH': {'rtDUdLGffqzI': 100}}, {'RNH': {'rmAbTZioIUgDhFcsVm': 85}}, {'2QBRGFN': {'OyBmVOeeNpirKKVFVg': 95}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['YCLA8P2A', 'HXR263', 'KUZ79WR', '3ZEPT'], ['ZbGKUsBxx', 'gWMTvJcnOvovLG', 'jdVsPMDuxLFNsrCD', 'cnQRZcVSjbTUNtMooN'], [90, 101, 90, 88]) == [{'YCLA8P2A': {'ZbGKUsBxx': 90}}, {'HXR263': {'gWMTvJcnOvovLG': 101}}, {'KUZ79WR': {'jdVsPMDuxLFNsrCD': 90}}, {'3ZEPT': {'cnQRZcVSjbTUNtMooN': 88}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['0QWZIO6N', '5YX', '7SE7ZNI', '8K78SG'], ['oyqdLeEO', 'TPihydBiDbY', 'YlkcmUJxqyhgFrx', 'mBVOXEirXMUgmp'], [88, 95, 84, 87]) == [{'0QWZIO6N': {'oyqdLeEO': 88}}, {'5YX': {'TPihydBiDbY': 95}}, {'7SE7ZNI': {'YlkcmUJxqyhgFrx': 84}}, {'8K78SG': {'mBVOXEirXMUgmp': 87}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['U919', 'F8BSCXE', 'NYSKIDF', 'UT9SWC7Q'], ['MbMhIzPeQAWZ', 'jqZVWhjglO', 'nqmQSgqVW', 'GcwzXBejY qDDarah'], [86, 94, 84, 87]) == [{'U919': {'MbMhIzPeQAWZ': 86}}, {'F8BSCXE': {'jqZVWhjglO': 94}}, {'NYSKIDF': {'nqmQSgqVW': 84}}, {'UT9SWC7Q': {'GcwzXBejY qDDarah': 87}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['3L2P9', 'NI6CXWVHM', 'JF8U', 'F072O0'], ['sILOSz', 'FaWCVVSJHu tJDj', 'SgEINfuEw', 'zvQsBgRwsGMv'], [87, 93, 86, 90]) == [{'3L2P9': {'sILOSz': 87}}, {'NI6CXWVHM': {'FaWCVVSJHu tJDj': 93}}, {'JF8U': {'SgEINfuEw': 86}}, {'F072O0': {'zvQsBgRwsGMv': 90}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['RUL7WH', 'T6Y', '2NZA0', 'CJYQGKA'], ['xsFHXbPhaomNuj', 'BFdtLsxnBPEK', 'krExgWQUbYxOKYa', 'ZZMMXTassZIfJO'], [84, 93, 94, 94]) == [{'RUL7WH': {'xsFHXbPhaomNuj': 84}}, {'T6Y': {'BFdtLsxnBPEK': 93}}, {'2NZA0': {'krExgWQUbYxOKYa': 94}}, {'CJYQGKA': {'ZZMMXTassZIfJO': 94}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['V2V54', '4GHA90C', '36KNJLX', '98XQTU45A'], ['QfKkrGwRMoI', 'xCsYSQvZC', 'UckUqSYlit TuxQ ', 'NIqvcBghUbW'], [81, 93, 94, 89]) == [{'V2V54': {'QfKkrGwRMoI': 81}}, {'4GHA90C': {'xCsYSQvZC': 93}}, {'36KNJLX': {'UckUqSYlit TuxQ ': 94}}, {'98XQTU45A': {'NIqvcBghUbW': 89}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['DPEJ', 'KCB6GAX6', 'WTP', 'LAF4SQ'], ['o NcvrGgxR', 'GmOgTgqOHgSaP', 'QsPsTufwGuq', 'vprssZFvIKRz G'], [88, 100, 88, 93]) == [{'DPEJ': {'o NcvrGgxR': 88}}, {'KCB6GAX6': {'GmOgTgqOHgSaP': 100}}, {'WTP': {'QsPsTufwGuq': 88}}, {'LAF4SQ': {'vprssZFvIKRz G': 93}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['8DD', 'TO92BR', 'W0SPTL8', 'O3D'], ['ZrTWtq UMev', 'uuXpCBNpzHkXWSHhm', 'tSPJjCBgqlLCsWd', 'LvvOjcWbuO'], [80, 94, 87, 95]) == [{'8DD': {'ZrTWtq UMev': 80}}, {'TO92BR': {'uuXpCBNpzHkXWSHhm': 94}}, {'W0SPTL8': {'tSPJjCBgqlLCsWd': 87}}, {'O3D': {'LvvOjcWbuO': 95}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['ICP8FVV1T', 'ANJ', 'YGI89', '28W1SC5LY'], ['aCsiBSpvWrGmqd', 'Ty tjaITeSeYntCr', 'xPbZlvSlRxT', 'ikIIEUFCNqgSoFV'], [85, 95, 89, 92]) == [{'ICP8FVV1T': {'aCsiBSpvWrGmqd': 85}}, {'ANJ': {'Ty tjaITeSeYntCr': 95}}, {'YGI89': {'xPbZlvSlRxT': 89}}, {'28W1SC5LY': {'ikIIEUFCNqgSoFV': 92}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['88N363MN', 'ZPQ41', 'DHQ9GQ3', 'T8JB6VFK'], ['KegEliqp', 'mqHgNtHVklOfp vn', 'iWjUKkmWtMRDtedi', 'VqCshqHzBabMReVj'], [82, 97, 92, 92]) == [{'88N363MN': {'KegEliqp': 82}}, {'ZPQ41': {'mqHgNtHVklOfp vn': 97}}, {'DHQ9GQ3': {'iWjUKkmWtMRDtedi': 92}}, {'T8JB6VFK': {'VqCshqHzBabMReVj': 92}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['2G2ND3J91', 'IGX1F2B', 'XKAZ6T3', 'ZO3JPICFL'], ['acLkWwmcSQgFK', 'sIwrBjuIc', 'rSuSKsfwdU', 'uuEyurQHBHEesutxe'], [89, 95, 84, 95]) == [{'2G2ND3J91': {'acLkWwmcSQgFK': 89}}, {'IGX1F2B': {'sIwrBjuIc': 95}}, {'XKAZ6T3': {'rSuSKsfwdU': 84}}, {'ZO3JPICFL': {'uuEyurQHBHEesutxe': 95}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['ZMV7Q', '40SL', 'MXLA', 'KIY'], ['RFeRnsXIehzXOn', 'WZlzbY H GCQBONq', 'jDGRruXrCDgsBBFZ', 'brJEekhbgGq'], [87, 96, 90, 96]) == [{'ZMV7Q': {'RFeRnsXIehzXOn': 87}}, {'40SL': {'WZlzbY H GCQBONq': 96}}, {'MXLA': {'jDGRruXrCDgsBBFZ': 90}}, {'KIY': {'brJEekhbgGq': 96}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['9S6Q', 'KCVZG', 'J03NPK', '8KLXW'], ['dnehZNFnftS', 'THPGzqqNlf', 'xjUzrvmlHTdHegs', 'eCfjBuRaAN'], [85, 103, 90, 87]) == [{'9S6Q': {'dnehZNFnftS': 85}}, {'KCVZG': {'THPGzqqNlf': 103}}, {'J03NPK': {'xjUzrvmlHTdHegs': 90}}, {'8KLXW': {'eCfjBuRaAN': 87}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['PHK18XKPL', 'HK5DGCE05', 'TLP', '3WD'], ['ReDfXBPM', 'nrjiuoxeKG', 'UWJIPygNM', 'CIcUtWkmASxg'], [81, 97, 94, 92]) == [{'PHK18XKPL': {'ReDfXBPM': 81}}, {'HK5DGCE05': {'nrjiuoxeKG': 97}}, {'TLP': {'UWJIPygNM': 94}}, {'3WD': {'CIcUtWkmASxg': 92}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['KY559', 'X0M', 'P0GGDB5M', 'S0DAB489Z'], ['zkuAFOHfErMMTq', 'eaQhPlYRNj', 'IdEpdsP cRSQ', 'WGrFHLNEfbJOuYM'], [89, 100, 88, 88]) == [{'KY559': {'zkuAFOHfErMMTq': 89}}, {'X0M': {'eaQhPlYRNj': 100}}, {'P0GGDB5M': {'IdEpdsP cRSQ': 88}}, {'S0DAB489Z': {'WGrFHLNEfbJOuYM': 88}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['CDJ', 'SCU698P', '91V32T5J', 'OW4Z6'], ['OovjSFIwCjwAmb', 'SfjzSjoszXRz ', 'wyGcCRoHFBrCoIfY', 'd WMnPuHYKXZay'], [88, 97, 84, 94]) == [{'CDJ': {'OovjSFIwCjwAmb': 88}}, {'SCU698P': {'SfjzSjoszXRz ': 97}}, {'91V32T5J': {'wyGcCRoHFBrCoIfY': 84}}, {'OW4Z6': {'d WMnPuHYKXZay': 94}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['jvpxeeim', 'snikeese', 'bbkhwnu', 'rhmqcd'], ['nqnjo', 'cchdirrj', 'qifyc', 'ylzy'], [97, 203, 302, 404]) == [{'jvpxeeim': {'nqnjo': 97}}, {'snikeese': {'cchdirrj': 203}}, {'bbkhwnu': {'qifyc': 302}}, {'rhmqcd': {'ylzy': 404}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['oluakadn', 'piwno', 'ycasucp', 'ouxnwbhd'], ['spjnurhdma', 'rmyoan', 'kfyattsso', 'rlqxpwpez'], [100, 205, 302, 398]) == [{'oluakadn': {'spjnurhdma': 100}}, {'piwno': {'rmyoan': 205}}, {'ycasucp': {'kfyattsso': 302}}, {'ouxnwbhd': {'rlqxpwpez': 398}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['dpvowdgcr', 'opuil', 'idhdxpziq', 'khe'], ['tbotari', 'saddod', 'bypgrorgejn', 'cyfd'], [101, 200, 296, 396]) == [{'dpvowdgcr': {'tbotari': 101}}, {'opuil': {'saddod': 200}}, {'idhdxpziq': {'bypgrorgejn': 296}}, {'khe': {'cyfd': 396}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['hrctv', 'tlyvf', 'njw', 'cowjgzsl'], ['cuvbzis', 'whzwotcf', 'wsvnry', 'hah'], [97, 195, 305, 397]) == [{'hrctv': {'cuvbzis': 97}}, {'tlyvf': {'whzwotcf': 195}}, {'njw': {'wsvnry': 305}}, {'cowjgzsl': {'hah': 397}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['orjs', 'cre', 'ewzkgn', 'cwoljgmci'], ['jco', 'pox', 'zsdnjbcn', 'mtjolbekdro'], [97, 197, 304, 402]) == [{'orjs': {'jco': 97}}, {'cre': {'pox': 197}}, {'ewzkgn': {'zsdnjbcn': 304}}, {'cwoljgmci': {'mtjolbekdro': 402}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['ndizq', 'orongs', 'svegrjesf', 'erflnt'], ['dgrt', 'hgnpduqij', 'djwegisht', 'rge'], [102, 203, 305, 404]) == [{'ndizq': {'dgrt': 102}}, {'orongs': {'hgnpduqij': 203}}, {'svegrjesf': {'djwegisht': 305}}, {'erflnt': {'rge': 404}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['tgpf', 'inkmntvs', 'oudm', 'xmgemdbmh'], ['hqmritzsz', 'tgn', 'fslsokex', 'vgwzetsx'], [103, 202, 297, 403]) == [{'tgpf': {'hqmritzsz': 103}}, {'inkmntvs': {'tgn': 202}}, {'oudm': {'fslsokex': 297}}, {'xmgemdbmh': {'vgwzetsx': 403}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['iaousqu', 'ipyeygubt', 'quzd', 'depgzizv'], ['bikebkclqby', 'vwoku', 'ahhc', 'vefe'], [104, 199, 305, 403]) == [{'iaousqu': {'bikebkclqby': 104}}, {'ipyeygubt': {'vwoku': 199}}, {'quzd': {'ahhc': 305}}, {'depgzizv': {'vefe': 403}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['jeis', 'gtee', 'pamulewc', 'flnc'], ['tzmhvsclvvg', 'cbdsgtois', 'yvjh', 'ziiclkab'], [96, 197, 302, 403]) == [{'jeis': {'tzmhvsclvvg': 96}}, {'gtee': {'cbdsgtois': 197}}, {'pamulewc': {'yvjh': 302}}, {'flnc': {'ziiclkab': 403}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['gkgcxli', 'kvdljlxx', 'serfxklbr', 'pabk'], ['wxujweiy', 'utzipxstzkf', 'ypqoqpxn', 'ubcorcon'], [104, 195, 303, 395]) == [{'gkgcxli': {'wxujweiy': 104}}, {'kvdljlxx': {'utzipxstzkf': 195}}, {'serfxklbr': {'ypqoqpxn': 303}}, {'pabk': {'ubcorcon': 395}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['pbem', 'scqociq', 'gbhuax', 'gmpbrsk'], ['gdfcezmefk', 'ggibv', 'llakademkw', 'jint'], [100, 200, 301, 404]) == [{'pbem': {'gdfcezmefk': 100}}, {'scqociq': {'ggibv': 200}}, {'gbhuax': {'llakademkw': 301}}, {'gmpbrsk': {'jint': 404}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['qen', 'awqodbq', 'fts', 'klgaah'], ['rckyjoooykl', 'djhhugxxykdt', 'rieteq', 'mgfgu'], [101, 205, 298, 397]) == [{'qen': {'rckyjoooykl': 101}}, {'awqodbq': {'djhhugxxykdt': 205}}, {'fts': {'rieteq': 298}}, {'klgaah': {'mgfgu': 397}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['hdoaztva', 'evk', 'wolnretm', 'jlgvgp'], ['awqfk', 'btzpzg', 'zdikvtndcoj', 'wgidrr'], [99, 199, 300, 397]) == [{'hdoaztva': {'awqfk': 99}}, {'evk': {'btzpzg': 199}}, {'wolnretm': {'zdikvtndcoj': 300}}, {'jlgvgp': {'wgidrr': 397}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['jdu', 'xfgmb', 'iuyrlwkgg', 'xhu'], ['apmpunqivagv', 'cvprcstog', 'cgcdbiwlws', 'nzbbuyyzbp'], [101, 200, 299, 400]) == [{'jdu': {'apmpunqivagv': 101}}, {'xfgmb': {'cvprcstog': 200}}, {'iuyrlwkgg': {'cgcdbiwlws': 299}}, {'xhu': {'nzbbuyyzbp': 400}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['ylupsys', 'wbfdey', 'gigzs', 'gmsx'], ['rcavavqara', 'xzoyvdmutrut', 'zyczxgoxqw', 'ixsbybtvvoy'], [95, 205, 296, 404]) == [{'ylupsys': {'rcavavqara': 95}}, {'wbfdey': {'xzoyvdmutrut': 205}}, {'gigzs': {'zyczxgoxqw': 296}}, {'gmsx': {'ixsbybtvvoy': 404}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['wmtnynivi', 'canibbiel', 'vkacu', 'dxe'], ['nyipzjbyfmoi', 'fitfhs', 'vfizzhytol', 'gpzsdawsprrm'], [95, 195, 304, 404]) == [{'wmtnynivi': {'nyipzjbyfmoi': 95}}, {'canibbiel': {'fitfhs': 195}}, {'vkacu': {'vfizzhytol': 304}}, {'dxe': {'gpzsdawsprrm': 404}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['hixuq', 'hcjlwudw', 'vmhsf', 'xkkpfl'], ['jnhsbobbrrq', 'ibfznxxwm', 'cqm', 'rur'], [97, 197, 305, 403]) == [{'hixuq': {'jnhsbobbrrq': 97}}, {'hcjlwudw': {'ibfznxxwm': 197}}, {'vmhsf': {'cqm': 305}}, {'xkkpfl': {'rur': 403}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['ppgawdw', 'vkiutyg', 'aes', 'zljfzaql'], ['dbkp', 'sluqghdeob', 'zsyxrakxds', 'uybxflbqmbz'], [103, 203, 299, 396]) == [{'ppgawdw': {'dbkp': 103}}, {'vkiutyg': {'sluqghdeob': 203}}, {'aes': {'zsyxrakxds': 299}}, {'zljfzaql': {'uybxflbqmbz': 396}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['qpoqbjzed', 'qavbngsxa', 'esbjreot', 'knlpmgzj'], ['wqyzd', 'oiijwdkf', 'kbovz', 'sqmjutsi'], [97, 199, 301, 403]) == [{'qpoqbjzed': {'wqyzd': 97}}, {'qavbngsxa': {'oiijwdkf': 199}}, {'esbjreot': {'kbovz': 301}}, {'knlpmgzj': {'sqmjutsi': 403}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['bjikejvbz', 'wtlhoqvjz', 'zvvgq', 'hgkszoch'], ['sbilyli', 'wnduiw', 'xvqwvml', 'srwldg'], [100, 197, 303, 395]) == [{'bjikejvbz': {'sbilyli': 100}}, {'wtlhoqvjz': {'wnduiw': 197}}, {'zvvgq': {'xvqwvml': 303}}, {'hgkszoch': {'srwldg': 395}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['rpiiwrhp', 'cmhg', 'vmaqu', 'jycs'], ['uajigbwmlwe', 'ovawdx', 'btkgfgbyo', 'kpsnohbjdzkt'], [103, 195, 297, 398]) == [{'rpiiwrhp': {'uajigbwmlwe': 103}}, {'cmhg': {'ovawdx': 195}}, {'vmaqu': {'btkgfgbyo': 297}}, {'jycs': {'kpsnohbjdzkt': 398}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['hmkuvkot', 'kpkaei', 'kwu', 'rofeuntbc'], ['jeytvy', 'ctlkaitx', 'nnumx', 'ykngfsyzfxyn'], [103, 205, 305, 404]) == [{'hmkuvkot': {'jeytvy': 103}}, {'kpkaei': {'ctlkaitx': 205}}, {'kwu': {'nnumx': 305}}, {'rofeuntbc': {'ykngfsyzfxyn': 404}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['qjpk', 'ucbg', 'qmt', 'jcn'], ['ibbnmrgaer', 'nljqica', 'gcjtaw', 'xrzgqdjpcfn'], [100, 197, 295, 402]) == [{'qjpk': {'ibbnmrgaer': 100}}, {'ucbg': {'nljqica': 197}}, {'qmt': {'gcjtaw': 295}}, {'jcn': {'xrzgqdjpcfn': 402}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['gtmueyvf', 'gsj', 'vdghiyxo', 'iwil'], ['minkxowdpes', 'hnfkyqx', 'mitw', 'dlejvrplf'], [101, 197, 301, 403]) == [{'gtmueyvf': {'minkxowdpes': 101}}, {'gsj': {'hnfkyqx': 197}}, {'vdghiyxo': {'mitw': 301}}, {'iwil': {'dlejvrplf': 403}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['nmro', 'hfl', 'fydrgllk', 'hnqhdu'], ['ccos', 'ayktzhdhfgo', 'qfcokyz', 'xgj'], [96, 199, 299, 404]) == [{'nmro': {'ccos': 96}}, {'hfl': {'ayktzhdhfgo': 199}}, {'fydrgllk': {'qfcokyz': 299}}, {'hnqhdu': {'xgj': 404}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['bniptu', 'nkk', 'nwntc', 'teldo'], ['puplcjovu', 'olf', 'yiqnyrrai', 'cnphhnvwrblj'], [101, 205, 304, 401]) == [{'bniptu': {'puplcjovu': 101}}, {'nkk': {'olf': 205}}, {'nwntc': {'yiqnyrrai': 304}}, {'teldo': {'cnphhnvwrblj': 401}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['nmkvxdibb', 'mkyoeheqf', 'bxhwz', 'igab'], ['uhvgxr', 'okkwwuauq', 'joktbet', 'yepoflvhr'], [105, 197, 300, 395]) == [{'nmkvxdibb': {'uhvgxr': 105}}, {'mkyoeheqf': {'okkwwuauq': 197}}, {'bxhwz': {'joktbet': 300}}, {'igab': {'yepoflvhr': 395}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['mcw', 'dsrbsnji', 'sulez', 'kbcwpgik'], ['psy', 'bxsoovrtuhe', 'wpj', 'betpeuvsorm'], [100, 195, 303, 404]) == [{'mcw': {'psy': 100}}, {'dsrbsnji': {'bxsoovrtuhe': 195}}, {'sulez': {'wpj': 303}}, {'kbcwpgik': {'betpeuvsorm': 404}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['gezb', 'qojnatc', 'exxktx', 'tnmpmtgkk'], ['yetmtyyldrl', 'lkeuohe', 'qhuficbvkkgo', 'kxoryapllcdv'], [104, 200, 296, 399]) == [{'gezb': {'yetmtyyldrl': 104}}, {'qojnatc': {'lkeuohe': 200}}, {'exxktx': {'qhuficbvkkgo': 296}}, {'tnmpmtgkk': {'kxoryapllcdv': 399}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['tmyf', 'nke', 'wecv', 'rlmluthg'], ['mjhcvxz', 'yjfw', 'xxpywdy', 'xqfiezrti'], [103, 197, 304, 402]) == [{'tmyf': {'mjhcvxz': 103}}, {'nke': {'yjfw': 197}}, {'wecv': {'xxpywdy': 304}}, {'rlmluthg': {'xqfiezrti': 402}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['ssozlp', 'eywceq', 'yfueecu', 'otrp'], ['bniiamehel', 'pocglsljsns', 'ohjdobq', 'dpqjemec'], [104, 199, 299, 399]) == [{'ssozlp': {'bniiamehel': 104}}, {'eywceq': {'pocglsljsns': 199}}, {'yfueecu': {'ohjdobq': 299}}, {'otrp': {'dpqjemec': 399}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['mby', 'gsokscfv', 'coldyvovs', 'jnrsnpyc'], ['jjprobpafddb', 'fxzbquhs', 'nmmzauwfnxyu', 'rbefr'], [105, 197, 304, 395]) == [{'mby': {'jjprobpafddb': 105}}, {'gsokscfv': {'fxzbquhs': 197}}, {'coldyvovs': {'nmmzauwfnxyu': 304}}, {'jnrsnpyc': {'rbefr': 395}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['snui', 'zxeymk', 'zbnu', 'rhlmx'], ['lgaeruehpuai', 'jlfkguq', 'ppacjoe', 'jzgtzd'], [105, 199, 303, 395]) == [{'snui': {'lgaeruehpuai': 105}}, {'zxeymk': {'jlfkguq': 199}}, {'zbnu': {'ppacjoe': 303}}, {'rhlmx': {'jzgtzd': 395}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['ZZMDA', 'CTFNV', '88Q6', 'N7Z632'], ['vzkn', 'B', '=#WUVG?', 'ZADVC'], [10, 24, 29, 42]) == [{'ZZMDA': {'vzkn': 10}}, {'CTFNV': {'B': 24}}, {'88Q6': {'=#WUVG?': 29}}, {'N7Z632': {'ZADVC': 42}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['LIT7O', 'N2G3', '3A46FL', '4DEI'], ['neg', 'S', '_<CX-', 'LGM'], [12, 17, 27, 36]) == [{'LIT7O': {'neg': 12}}, {'N2G3': {'S': 17}}, {'3A46FL': {'_<CX-': 27}}, {'4DEI': {'LGM': 36}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['EBV', '3QTIS', '8FRGB', 'UCQ'], ['zcbggc', 'N', 'HHI/*L', 'WMB'], [15, 20, 35, 41]) == [{'EBV': {'zcbggc': 15}}, {'3QTIS': {'N': 20}}, {'8FRGB': {'HHI/*L': 35}}, {'UCQ': {'WMB': 41}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['1OL5W', '5EY7GG', 'TNHPC', 'KT0TQW'], ['zinq', 'Z', '&T-!*', 'MWXHZAJTU'], [10, 23, 30, 41]) == [{'1OL5W': {'zinq': 10}}, {'5EY7GG': {'Z': 23}}, {'TNHPC': {'&T-!*': 30}}, {'KT0TQW': {'MWXHZAJTU': 41}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['DDF6', 'ZOKBL', 'NP50B6', '98AG3'], ['qdcnoay', 'E', 'O%DXA~', 'BOCANZYIF'], [7, 22, 27, 35]) == [{'DDF6': {'qdcnoay': 7}}, {'ZOKBL': {'E': 22}}, {'NP50B6': {'O%DXA~': 27}}, {'98AG3': {'BOCANZYIF': 35}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['K4T', '5Z62', 'M8WJ', '5KKU'], ['lwezmyx', 'H', 'WITO#F', 'UKF'], [7, 21, 33, 42]) == [{'K4T': {'lwezmyx': 7}}, {'5Z62': {'H': 21}}, {'M8WJ': {'WITO#F': 33}}, {'5KKU': {'UKF': 42}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['4DU', 'TD4T', 'XBV95W', 'WU8BUA'], ['xakcuc', 'Y', ':TGR|Q', 'CWYS'], [14, 18, 29, 44]) == [{'4DU': {'xakcuc': 14}}, {'TD4T': {'Y': 18}}, {'XBV95W': {':TGR|Q': 29}}, {'WU8BUA': {'CWYS': 44}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['T408', 'TRNEX', '0P4610', 'HYZAG'], ['eymotcusz', 'J', 'GR=?', 'YPYHHO'], [15, 24, 25, 35]) == [{'T408': {'eymotcusz': 15}}, {'TRNEX': {'J': 24}}, {'0P4610': {'GR=?': 25}}, {'HYZAG': {'YPYHHO': 35}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['QBF', '8D2G', '9XR6B8', '12Q6'], ['zxl', 'G', 'PAL#<', 'NUFCQNP'], [6, 16, 25, 45]) == [{'QBF': {'zxl': 6}}, {'8D2G': {'G': 16}}, {'9XR6B8': {'PAL#<': 25}}, {'12Q6': {'NUFCQNP': 45}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['6VNE', '0DTKBB', 'TAJ8', 'RM2XTY'], ['izmcnk', 'U', '=B?UMT', 'JDVXF'], [15, 20, 28, 43]) == [{'6VNE': {'izmcnk': 15}}, {'0DTKBB': {'U': 20}}, {'TAJ8': {'=B?UMT': 28}}, {'RM2XTY': {'JDVXF': 43}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['NJD', 'JC1', 'JCCTBJ', 'KPS'], ['ebujt', 'U', 'WE@H!PI&', 'ASGQWVHKM'], [6, 25, 34, 38]) == [{'NJD': {'ebujt': 6}}, {'JC1': {'U': 25}}, {'JCCTBJ': {'WE@H!PI&': 34}}, {'KPS': {'ASGQWVHKM': 38}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['THDE', '0U7B', 'ZQFPBO', 'FBR'], ['rgxu', 'X', 'OVL', 'VOLXNWI'], [14, 22, 26, 40]) == [{'THDE': {'rgxu': 14}}, {'0U7B': {'X': 22}}, {'ZQFPBO': {'OVL': 26}}, {'FBR': {'VOLXNWI': 40}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['1VDC9', '0M4NS', '9OYE7', 'AQM8'], ['bswosct', 'I', 'YLYVSWW', 'KWMRDZHG'], [6, 17, 30, 39]) == [{'1VDC9': {'bswosct': 6}}, {'0M4NS': {'I': 17}}, {'9OYE7': {'YLYVSWW': 30}}, {'AQM8': {'KWMRDZHG': 39}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['U8VPKX', 'PZNSL', 'I5TP8F', '907'], ['hqpgma', 'K', 'GLYR', 'XSVLK'], [12, 18, 26, 41]) == [{'U8VPKX': {'hqpgma': 12}}, {'PZNSL': {'K': 18}}, {'I5TP8F': {'GLYR': 26}}, {'907': {'XSVLK': 41}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['MGMG', '49XW2', 'F30J', '9G67H'], ['ldgpzur', 'G', 'SE~', 'TOUOJ'], [6, 20, 29, 35]) == [{'MGMG': {'ldgpzur': 6}}, {'49XW2': {'G': 20}}, {'F30J': {'SE~': 29}}, {'9G67H': {'TOUOJ': 35}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['E1E', '539VY', 'VRYN', 'IGL67'], ['uapy', 'E', '$GV:', 'NGRPOE'], [13, 19, 30, 39]) == [{'E1E': {'uapy': 13}}, {'539VY': {'E': 19}}, {'VRYN': {'$GV:': 30}}, {'IGL67': {'NGRPOE': 39}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['02M8SA', 'LC7', '59WH9', 'NJDF'], ['zldq', 'R', 'I-X', 'GQE'], [7, 20, 25, 42]) == [{'02M8SA': {'zldq': 7}}, {'LC7': {'R': 20}}, {'59WH9': {'I-X': 25}}, {'NJDF': {'GQE': 42}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['2EL3E', 'KZRZU', '4W0E', 'RMU'], ['uahyn', 'M', 'WR+!', 'OCVNBBX'], [13, 19, 27, 45]) == [{'2EL3E': {'uahyn': 13}}, {'KZRZU': {'M': 19}}, {'4W0E': {'WR+!': 27}}, {'RMU': {'OCVNBBX': 45}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['CFV6', 'YX5AL', 'Z0VY', 'RFCFI'], ['qpa', 'D', 'T-S^V@X', 'QWBADZT'], [11, 23, 28, 40]) == [{'CFV6': {'qpa': 11}}, {'YX5AL': {'D': 23}}, {'Z0VY': {'T-S^V@X': 28}}, {'RFCFI': {'QWBADZT': 40}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['IZ88', 'TDM', '5Y8FB', 'UGYR'], ['key', 'Q', 'W@PP', 'BTUUY'], [11, 20, 25, 38]) == [{'IZ88': {'key': 11}}, {'TDM': {'Q': 20}}, {'5Y8FB': {'W@PP': 25}}, {'UGYR': {'BTUUY': 38}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['K0D5HV', 'XKJCF', 'GJ2', 'KZ6WWF'], ['gqtvsl', 'Q', 'S<SF', 'SOC'], [15, 16, 32, 37]) == [{'K0D5HV': {'gqtvsl': 15}}, {'XKJCF': {'Q': 16}}, {'GJ2': {'S<SF': 32}}, {'KZ6WWF': {'SOC': 37}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['2NY4Z', 'C05GH', 'PKZ', 'Y57Z1'], ['lwni', 'X', 'A^DV+P|A<', 'TIZ'], [6, 25, 29, 41]) == [{'2NY4Z': {'lwni': 6}}, {'C05GH': {'X': 25}}, {'PKZ': {'A^DV+P|A<': 29}}, {'Y57Z1': {'TIZ': 41}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['CI95OF', '3WUPPK', 'SWS', 'RQH'], ['gec', 'R', '*-IQ|/=', 'RKBEGABF'], [6, 23, 29, 37]) == [{'CI95OF': {'gec': 6}}, {'3WUPPK': {'R': 23}}, {'SWS': {'*-IQ|/=': 29}}, {'RQH': {'RKBEGABF': 37}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['KYXXK', 'GN4V8', 'ERN4LL', 'IL4DD'], ['cevixoh', 'U', '&%XAI', 'PGMDACZW'], [11, 24, 35, 45]) == [{'KYXXK': {'cevixoh': 11}}, {'GN4V8': {'U': 24}}, {'ERN4LL': {'&%XAI': 35}}, {'IL4DD': {'PGMDACZW': 45}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['N3Z', 'QMLFI2', '4M1', 'E6TY4X'], ['oakpn', 'L', 'T@RJS', 'ANJZBGX'], [7, 21, 32, 36]) == [{'N3Z': {'oakpn': 7}}, {'QMLFI2': {'L': 21}}, {'4M1': {'T@RJS': 32}}, {'E6TY4X': {'ANJZBGX': 36}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['7R5U', 'DA9', 'YCU', '1UH3'], ['tgntp', 'A', 'R~*U', 'JLFUNGROP'], [13, 15, 33, 39]) == [{'7R5U': {'tgntp': 13}}, {'DA9': {'A': 15}}, {'YCU': {'R~*U': 33}}, {'1UH3': {'JLFUNGROP': 39}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['OY8BH3', 'ONGAS', 'E1F6', 'ZI8'], ['vakyhzrg', 'Y', '#@CF:@@', 'QBV'], [7, 22, 25, 37]) == [{'OY8BH3': {'vakyhzrg': 7}}, {'ONGAS': {'Y': 22}}, {'E1F6': {'#@CF:@@': 25}}, {'ZI8': {'QBV': 37}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['TS41F', '1HC', 'Q24CRE', 'C4PXU'], ['kqyhid', 'Q', '#DZRSZW', 'DYBHIRR'], [8, 20, 31, 39]) == [{'TS41F': {'kqyhid': 8}}, {'1HC': {'Q': 20}}, {'Q24CRE': {'#DZRSZW': 31}}, {'C4PXU': {'DYBHIRR': 39}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['W2O', 'O0D412', 'VX5', 'FV0'], ['adcsj', 'Y', '~/GHQ', 'UVEWYRJK'], [14, 18, 26, 36]) == [{'W2O': {'adcsj': 14}}, {'O0D412': {'Y': 18}}, {'VX5': {'~/GHQ': 26}}, {'FV0': {'UVEWYRJK': 36}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['JVPG7', 'SRHP6K', 'FRM', 'SGJK7U'], ['xiuor', 'F', 'A:NND=W', 'PZH'], [10, 18, 31, 38]) == [{'JVPG7': {'xiuor': 10}}, {'SRHP6K': {'F': 18}}, {'FRM': {'A:NND=W': 31}}, {'SGJK7U': {'PZH': 38}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['P567WD', 'HH28', 'TD6', '2KH15'], ['spr', 'B', 'B$F?A:', 'OXUA'], [7, 18, 25, 40]) == [{'P567WD': {'spr': 7}}, {'HH28': {'B': 18}}, {'TD6': {'B$F?A:': 25}}, {'2KH15': {'OXUA': 40}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['8GJX', 'NEXZ6', 'OMZ1W', 'GZ1'], ['sqf', 'B', 'N-D', 'SBROW'], [15, 19, 35, 44]) == [{'8GJX': {'sqf': 15}}, {'NEXZ6': {'B': 19}}, {'OMZ1W': {'N-D': 35}}, {'GZ1': {'SBROW': 44}}]", "def check(convert_list_dictionary):\n\tassert convert_list_dictionary(['XON', '248', 'A11', 'W4NFH6'], ['dxamm', 'F', 'KJJ|VXD', 'VCGQ'], [8, 15, 28, 43]) == [{'XON': {'dxamm': 8}}, {'248': {'F': 15}}, {'A11': {'KJJ|VXD': 28}}, {'W4NFH6': {'VCGQ': 43}}]"], "scores": [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0], "pass_results": [true, true, false, true, true, true, true, true, false, true], "pass_test_cases_num": [102, 102, 0, 102, 102, 102, 102, 102, 0, 102], "completion": "from typing import List\nfrom typing import List, Dict\n\ndef convert_list_dictionary(ids: List[str], names: List[str], scores: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    \"\"\"\n    Converts three lists into a list of nested dictionaries.\n    \n    Args:\n        ids (List[str]): List of unique identifiers.\n        names (List[str]): List of names.\n        scores (List[int]): List of scores.\n    \n    Returns:\n        List[Dict[str, Dict[str, int]]]: List of nested dictionaries.\n    \n    Raises:\n        ValueError: If the lengths of the input lists are not equal.\n    \"\"\"\n    # Check if all three lists are of the same length\n    if len(ids) != len(names) or len(ids) != len(scores) or len(names) != len(scores):\n        raise ValueError(\"All lists must be of the same length\")\n    \n    # Initialize an empty list to store the resulting nested dictionaries\n    result = []\n    \n    # Iterate through the indices of the lists\n    for i in range(len(ids)):\n        # Create a nested dictionary for each index\n        nested_dict = {ids[i]: {names[i]: scores[i]}}\n        # Append the nested dictionary to the result list\n        result.append(nested_dict)\n    \n    # Return the result list\n    return result\n", "passed": true, "pass": true, "pass_num": 8, "round": 434, "mutate_method": "condense_two2one", "parent_index": 372}
