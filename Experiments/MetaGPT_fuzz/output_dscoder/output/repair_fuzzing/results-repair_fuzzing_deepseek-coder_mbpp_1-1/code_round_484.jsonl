{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 223, "prompt": "Write a function that accepts a sorted array, its length (n), and an element and returns whether the element is the majority element in the specified sorted array. (The majority element is the element that appears more than n/2 times.)", "code": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1", "test_imports": [], "test_list": ["assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True", "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False", "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True", "assert is_majority([6, 2, 3, 8, 1, 4, 11], 7, 8) == False", "assert is_majority([4, 6, 3, 2, 6, 3, 11], 9, 5) == False", "assert is_majority([4, 4, 4, 6, 6, 7, 12], 7, 4) == False", "assert is_majority([6, 3, 2, 1, 8, 7, 13], 12, 7) == False", "assert is_majority([1, 1, 5, 8, 6, 5, 9], 4, 6) == False", "assert is_majority([3, 4, 8, 6, 6, 8, 8], 11, 2) == False", "assert is_majority([1, 5, 4, 1, 2, 5, 12], 4, 7) == False", "assert is_majority([1, 3, 1, 4, 1, 4, 14], 7, 8) == False", "assert is_majority([2, 7, 3, 4, 1, 4, 12], 4, 7) == False", "assert is_majority([1, 1, 1, 7, 5, 1, 15], 3, 6) == False", "assert is_majority([4, 4, 7, 4, 3, 3, 7], 3, 1) == False", "assert is_majority([4, 3, 7, 1, 7, 4, 12], 8, 8) == False", "assert is_majority([3, 5, 2, 4, 8, 1, 11], 3, 4) == False", "assert is_majority([1, 2, 7, 5, 4, 6, 15], 5, 5) == False", "assert is_majority([3, 4, 4, 5, 8, 3, 7], 6, 7) == False", "assert is_majority([3, 3, 8, 6, 3, 7, 13], 9, 7) == False", "assert is_majority([3, 1, 1, 6, 6, 6, 5], 3, 1) == False", "assert is_majority([6, 2, 3, 4, 7, 2, 9], 2, 5) == False", "assert is_majority([6, 4, 6, 7, 3, 8, 10], 5, 3) == False", "assert is_majority([4, 5, 2, 7, 2, 8, 12], 4, 3) == False", "assert is_majority([3, 4, 1, 1, 6, 5, 13], 4, 2) == False", "assert is_majority([3, 4, 8, 4, 4, 1, 9], 3, 3) == False", "assert is_majority([2, 2, 1, 5, 4, 7, 8], 7, 2) == False", "assert is_majority([2, 3, 1, 4, 1, 4, 10], 4, 2) == False", "assert is_majority([2, 1, 8, 2, 2, 8, 5], 7, 7) == False", "assert is_majority([4, 4, 2, 3, 4, 1, 9], 3, 4) == True", "assert is_majority([4, 3, 7, 3, 1, 4, 5], 11, 1) == False", "assert is_majority([2, 7, 3, 6, 2, 6, 11], 9, 1) == False", "assert is_majority([5, 2, 1, 6, 3, 6, 6], 9, 6) == False", "assert is_majority([2, 2, 6, 7, 2, 3, 8], 2, 7) == False", "assert is_majority([3, 1, 6, 3, 5, 1, 9], 8, 7) == False", "assert is_majority([4, 5, 7, 5, 1, 3, 14], 9, 1) == False", "assert is_majority([4, 3, 3, 2, 6, 1, 6], 10, 2) == False", "assert is_majority([2, 3, 5, 5, 4, 2, 11, 7], 5, 6) == False", "assert is_majority([2, 1, 7, 7, 4, 1, 5, 10], 3, 8) == False", "assert is_majority([2, 6, 6, 2, 9, 3, 7, 9], 3, 7) == False", "assert is_majority([2, 1, 1, 6, 6, 5, 7, 3], 7, 4) == False", "assert is_majority([6, 4, 4, 6, 9, 4, 2, 7], 7, 3) == False", "assert is_majority([3, 1, 4, 4, 1, 9, 7, 1], 11, 3) == False", "assert is_majority([5, 6, 7, 5, 3, 9, 9, 3], 8, 2) == False", "assert is_majority([3, 6, 6, 6, 3, 3, 3, 6], 10, 3) == True", "assert is_majority([6, 4, 1, 3, 6, 5, 7, 7], 6, 9) == False", "assert is_majority([4, 6, 1, 8, 5, 8, 6, 11], 7, 1) == False", "assert is_majority([5, 6, 7, 4, 7, 4, 8, 10], 6, 8) == False", "assert is_majority([5, 3, 4, 8, 2, 7, 6, 6], 13, 6) == False", "assert is_majority([4, 5, 5, 7, 5, 3, 8, 9], 7, 2) == False", "assert is_majority([3, 5, 3, 1, 1, 9, 1, 2], 3, 9) == False", "assert is_majority([2, 5, 6, 8, 6, 9, 1, 4], 7, 7) == False", "assert is_majority([4, 3, 2, 6, 8, 8, 9, 2], 7, 8) == False", "assert is_majority([5, 1, 6, 4, 4, 5, 5, 9], 3, 3) == False", "assert is_majority([6, 2, 5, 5, 2, 2, 2, 9], 7, 4) == False", "assert is_majority([2, 3, 6, 3, 4, 3, 10, 9], 6, 3) == False", "assert is_majority([5, 2, 4, 5, 9, 4, 2, 10], 3, 4) == False", "assert is_majority([2, 3, 4, 5, 5, 9, 8, 10], 4, 1) == False", "assert is_majority([3, 1, 7, 6, 5, 2, 2, 10], 5, 8) == False", "assert is_majority([1, 2, 3, 6, 6, 8, 7, 2], 7, 6) == False", "assert is_majority([5, 2, 6, 3, 3, 2, 3, 11], 8, 2) == False", "assert is_majority([4, 3, 5, 6, 2, 8, 5, 10], 5, 8) == False", "assert is_majority([3, 5, 4, 1, 1, 1, 9, 4], 5, 5) == False", "assert is_majority([1, 1, 2, 3, 2, 8, 8, 8], 11, 2) == False", "assert is_majority([2, 5, 2, 7, 9, 3, 6, 5], 8, 1) == False", "assert is_majority([3, 2, 3, 2, 5, 8, 11, 11], 9, 7) == False", "assert is_majority([4, 4, 1, 8, 2, 6, 1, 10], 9, 2) == False", "assert is_majority([4, 2, 6, 8, 9, 4, 4, 4], 13, 1) == False", "assert is_majority([1, 3, 7, 3, 1, 7, 10, 7], 4, 8) == False", "assert is_majority([6, 1, 7, 8, 4, 1, 3, 9], 7, 3) == False", "assert is_majority([1, 6, 2, 6, 3], 7, 2) == False", "assert is_majority([2, 1, 1, 7, 2], 2, 5) == False", "assert is_majority([5, 1, 6, 5, 7], 5, 5) == False", "assert is_majority([2, 1, 1, 6, 6], 5, 4) == False", "assert is_majority([2, 2, 2, 4, 6], 3, 6) == False", "assert is_majority([2, 1, 6, 3, 1], 6, 3) == False", "assert is_majority([3, 5, 5, 6, 5], 3, 6) == False", "assert is_majority([1, 1, 3, 5, 4], 5, 6) == False", "assert is_majority([1, 6, 4, 3, 1], 6, 2) == False", "assert is_majority([6, 3, 4, 4, 2], 9, 2) == False", "assert is_majority([3, 4, 4, 7, 7], 3, 2) == False", "assert is_majority([5, 3, 4, 6, 3], 1, 2) == False", "assert is_majority([6, 5, 5, 1, 1], 4, 2) == False", "assert is_majority([1, 4, 1, 6, 4], 2, 1) == False", "assert is_majority([2, 5, 2, 2, 7], 6, 5) == False", "assert is_majority([5, 5, 1, 3, 3], 4, 5) == False", "assert is_majority([5, 6, 1, 5, 6], 2, 2) == False", "assert is_majority([4, 2, 5, 3, 5], 6, 1) == False", "assert is_majority([6, 2, 6, 6, 7], 9, 1) == False", "assert is_majority([6, 5, 1, 3, 5], 10, 4) == False", "assert is_majority([6, 5, 6, 6, 3], 3, 3) == False", "assert is_majority([6, 6, 5, 3, 7], 3, 4) == False", "assert is_majority([1, 3, 4, 7, 7], 4, 6) == False", "assert is_majority([2, 2, 6, 7, 6], 9, 1) == False", "assert is_majority([1, 3, 2, 7, 6], 3, 2) == False", "assert is_majority([3, 2, 4, 2, 4], 2, 2) == False", "assert is_majority([1, 4, 4, 1, 4], 2, 6) == False", "assert is_majority([3, 4, 3, 1, 4], 2, 6) == False", "assert is_majority([4, 1, 4, 2, 2], 2, 2) == False", "assert is_majority([1, 3, 3, 3, 7], 5, 2) == False", "assert is_majority([6, 6, 1, 3, 1], 7, 1) == False", "assert is_majority([1, 5, 2, 2, 2], 2, 6) == False", "assert is_majority([2, 2, 4, 6, 5], 2, 4) == False"], "entry_point": "is_majority", "repair_prompt": ["Write a function is_majority that accepts a sorted array, its length (n), and an element and returns whether the element is the majority element in the specified sorted array. (The majority element is the element that appears more than n/2 times.)\nis_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n", " Write a function is_majority that takes a sorted array, the length of the array (n), and an element as inputs. The function should determine if the given element appears more than n/2 times in the sorted array. If it does, the function should return true; otherwise, it should return false.\nis_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n", " Write a function is_majority that accepts a sorted array, its length (n), and an element, and returns whether the element is the majority element in the specified sorted array. (The majority element is the element that appears more than n/2 times.)\nis_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n"], "completions": ["from typing import List\n## main.py\n\ndef is_majority(arr: list[int], n: int, x: int) -> bool:\n    \"\"\"\n    Determines if the given element is the majority element in the sorted array.\n\n    Args:\n        arr (list[int]): A sorted list of integers.\n        n (int): The length of the array.\n        x (int): The element to check for majority.\n\n    Returns:\n        bool: True if x is the majority element, False otherwise.\n    \"\"\"\n    if n == 0:\n        return False\n\n    # Find the first occurrence of x\n    low = 0\n    high = n - 1\n    first_occurrence = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            first_occurrence = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    if first_occurrence == -1:\n        return False\n\n    # Calculate the potential majority position\n    majority_position = first_occurrence + (n // 2)\n\n    # Check if the element at the majority position is x\n    if majority_position < n and arr[majority_position] == x:\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(is_majority([1, 2, 2, 2, 3], 5, 2))  # Output: True\n# print(is_majority([1, 2, 2, 2, 3], 5, 4))  # Output: False\n# print(is_majority([1, 1, 2, 2, 3, 3, 3, 3], 8, 3))  # Output: True\n", "from typing import List\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Determines if an element is the majority element in a sorted array.\n    \n    Args:\n        arr (List[int]): A sorted list of integers.\n        n (int): The number of elements in the array.\n        x (int): The element to check for majority.\n    \n    Returns:\n        bool: True if x is the majority element, False otherwise.\n    \"\"\"\n    if n == 0:\n        return False\n    \n    # Find the first occurrence of x\n    low = 0\n    high = n - 1\n    first_occurrence = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            first_occurrence = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    if first_occurrence == -1:\n        return False\n    \n    # Find the last occurrence of x\n    low = 0\n    high = n - 1\n    last_occurrence = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last_occurrence = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    if last_occurrence == -1:\n        return False\n    \n    # Check if the element is the majority element\n    return (last_occurrence - first_occurrence + 1) > (n // 2)\n\n# Example usage:\n# print(is_majority([1, 2, 2, 2, 3], 5, 2))  # True\n# print(is_majority([1, 2, 2, 2, 3], 5, 3))  # False\n# print(is_majority([1, 1, 2, 2, 3, 3, 3, 3], 8, 3))  # True\n", "from typing import List\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Determines if the given element is the majority element in the sorted array.\n    \n    Args:\n        arr (List[int]): A sorted list of integers.\n        n (int): The number of elements in the array.\n        x (int): The element to check for majority.\n    \n    Returns:\n        bool: True if x is the majority element, False otherwise.\n    \"\"\"\n    # Find the first occurrence of x using binary search\n    def first_occurrence(arr, low, high, x):\n        if high >= low:\n            mid = low + (high - low) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                return first_occurrence(arr, mid + 1, high, x)\n            else:\n                return first_occurrence(arr, low, mid - 1, x)\n        return -1\n    \n    first_index = first_occurrence(arr, 0, n - 1, x)\n    \n    # If x is not found in the array, return False\n    if first_index == -1:\n        return False\n    \n    # Calculate the potential last occurrence of x\n    last_index = first_index + n // 2\n    \n    # Check if the element at the calculated last occurrence index is the same as x\n    if last_index < n and arr[last_index] == x:\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3))  # True\n# print(is_majority([1, 2, 3, 4, 5], 5, 3))        # False\n# print(is_majority([1], 1, 1))                    # True\n", "from typing import List\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Determines if the element x is a majority element in the array arr.\n    \n    Args:\n        arr (List[int]): The list of integers to search for the majority element.\n        n (int): The number of elements in the array.\n        x (int): The element to check for majority status.\n        \n    Returns:\n        bool: True if x is a majority element in arr, False otherwise.\n    \"\"\"\n    # Initialize count and candidate\n    count = 0\n    candidate = None\n    \n    # Step 1: Find the potential majority element using Boyer-Moore Voting Algorithm\n    for num in arr:\n        if count == 0:\n            candidate = num\n        if num == candidate:\n            count += 1\n        else:\n            count -= 1\n    \n    # Step 2: Verify if the candidate is the majority element\n    count = 0\n    for num in arr:\n        if num == candidate:\n            count += 1\n    \n    return count > n // 2\n", "from typing import List\n## main.py\n\ndef is_majority(arr: list[int], n: int, x: int) -> bool:\n    \"\"\"\n    Determines if the element x is the majority element in the sorted array arr.\n    \n    Args:\n        arr (list[int]): A sorted list of integers.\n        n (int): The number of elements in the array.\n        x (int): The element to check for majority.\n    \n    Returns:\n        bool: True if x is the majority element, False otherwise.\n    \"\"\"\n    if n == 0:\n        return False\n    \n    # Check if the element at the middle index is x\n    middle_index = n // 2\n    if arr[middle_index] == x:\n        return True\n    \n    return False\n", "from typing import List\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Determines if the element x is a majority element in the array arr.\n    \n    Args:\n        arr (List[int]): The list of integers to search for the majority element.\n        n (int): The length of the array.\n        x (int): The element to check for majority status.\n        \n    Returns:\n        bool: True if x is a majority element in arr, False otherwise.\n    \"\"\"\n    # Initialize count and candidate\n    count = 0\n    candidate = None\n    \n    # Step 1: Find the potential majority element using Boyer-Moore Voting Algorithm\n    for num in arr:\n        if count == 0:\n            candidate = num\n            count = 1\n        elif num == candidate:\n            count += 1\n        else:\n            count -= 1\n    \n    # Step 2: Verify if the candidate is the majority element\n    count = arr.count(candidate)\n    return count > n // 2\n", "from typing import List\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Determines if an element is the majority in a sorted array.\n\n    Args:\n        arr (List[int]): A sorted list of integers.\n        n (int): The number of elements in the array.\n        x (int): The element to check for majority.\n\n    Returns:\n        bool: True if the element is the majority, False otherwise.\n    \"\"\"\n    # Find the first occurrence of the element using binary search\n    def find_first_occurrence(arr, n, x):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return low\n\n    first_occurrence = find_first_occurrence(arr, n, x)\n    \n    # Check if the element is the majority\n    if first_occurrence + n // 2 < n and arr[first_occurrence + n // 2] == x:\n        return True\n    else:\n        return False\n\n# Example usage:\n# arr = [1, 2, 3, 3, 3, 3, 10]\n# n = 7\n# x = 3\n# print(is_majority(arr, n, x))  # Output: True\n", "from typing import List\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Determines if the given element is the majority element in a sorted array.\n    \n    Args:\n        arr (List[int]): A sorted array of integers.\n        n (int): The length of the array.\n        x (int): The element to be checked.\n    \n    Returns:\n        bool: True if x is the majority element, otherwise False.\n    \"\"\"\n    # Initialize low and high for binary search\n    low = 0\n    high = n - 1\n    \n    # Find the first occurrence of x\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x and (mid == 0 or arr[mid - 1] != x):\n            first_occurrence = mid\n            break\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    # Check if the element at the found index is the majority element\n    if first_occurrence + n // 2 < n and arr[first_occurrence + n // 2] == x:\n        return True\n    else:\n        return False\n", "from typing import List\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Determines if a given element is the majority element in a sorted array.\n    \n    Args:\n        arr (List[int]): A sorted list of integers.\n        n (int): The number of elements in the array.\n        x (int): The element to check for majority.\n    \n    Returns:\n        bool: True if x is the majority element, False otherwise.\n    \"\"\"\n    \n    def find_first_occurrence(arr, x):\n        \"\"\"\n        Finds the first occurrence of x in a sorted array.\n        \n        Args:\n            arr (List[int]): A sorted list of integers.\n            x (int): The element to find.\n        \n        Returns:\n            int: The index of the first occurrence of x, or -1 if not found.\n        \"\"\"\n        left, right = 0, len(arr) - 1\n        result = -1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == x:\n                result = mid\n                right = mid - 1\n            elif arr[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return result\n    \n    def find_last_occurrence(arr, x):\n        \"\"\"\n        Finds the last occurrence of x in a sorted array.\n        \n        Args:\n            arr (List[int]): A sorted list of integers.\n            x (int): The element to find.\n        \n        Returns:\n            int: The index of the last occurrence of x, or -1 if not found.\n        \"\"\"\n        left, right = 0, len(arr) - 1\n        result = -1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == x:\n                result = mid\n                left = mid + 1\n            elif arr[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return result\n    \n    first_index = find_first_occurrence(arr, x)\n    last_index = find_last_occurrence(arr, x)\n    \n    if first_index != -1 and last_index != -1:\n        return (last_index - first_index + 1) > (n / 2)\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport bisect\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Check if the given element x appears more than n/2 times in the sorted array arr.\n\n    Args:\n        arr (List[int]): A sorted list of integers.\n        n (int): The number of elements in the array.\n        x (int): The element to check for majority.\n\n    Returns:\n        bool: True if x is a majority element, False otherwise.\n    \"\"\"\n    # Find the first occurrence of x using binary search\n    first_occurrence = bisect.bisect_left(arr, x)\n    \n    # If the element is not found or the count is not more than n/2, return False\n    if first_occurrence == n or arr[first_occurrence] != x:\n        return False\n    \n    # Calculate the potential last occurrence of x\n    last_occurrence = first_occurrence + (n // 2)\n    \n    # Check if the element at the last occurrence is x\n    if last_occurrence < n and arr[last_occurrence] == x:\n        return True\n    \n    return False\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that determines if a given element is the majority element in a sorted array. The majority element is defined as the element that appears more than n/2 times in the array. The function should be efficient and handle sorted arrays efficiently.\nrequirement pool:\n- Implement the is_majority function to check for majority element\n- Ensure the function works efficiently for sorted arrays\n- Provide clear documentation and examples for user understanding\n- Test the function with various edge cases\n- Optimize the function for performance\nTo implement the is_majority function, we will use a binary search approach to efficiently determine if the given element is the majority element in the sorted array. This method will ensure that the function is both efficient and easy to understand. We will leverage Python's built-in libraries to handle the array operations, making the implementation straightforward and reliable.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': An element that appears more than n/2 times in a sorted array.\n    Explanation: In a sorted array, if an element appears more than n/2 times, it is considered the majority element. This is because the array is sorted, and the majority element would occupy more than half of the positions.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `is_majority` function, we can use a binary search approach to efficiently determine if the given element is the majority element in the sorted array. Here's a step-by-step breakdown:\n    1. Use binary search to find the first occurrence of the element.\n    2. Use binary search to find the last occurrence of the element.\n    3. Calculate the count of the element by subtracting the index of the last occurrence from the index of the first occurrence and adding 1.\n    4. Check if the count is greater than n/2. If yes, return True; otherwise, return False.\n\n# [edge case] \n    is_majority([1, 2, 2, 2, 3], 5, 2) = True\n    Explanation: The element 2 appears 3 times in the array, which is more than 5/2 = 2.5 times, so it is the majority element.\n    is_majority([1, 2, 2, 2, 3], 5, 4) = False\n    Explanation: The element 4 does not appear in the array, so it cannot be the majority element.\n    is_majority([1, 1, 2, 2, 3, 3, 3, 3], 8, 3) = True\n    Explanation: The element 3 appears 4 times in the array, which is more than 8/2 = 4 times, so it is the majority element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search approach ensures that we efficiently find the first and last occurrences of the element, and the count check is straightforward.\n", "requirement analysis:\nThe requirement is to create a function that determines if an element is the majority element in a sorted array. The majority element is defined as the element that appears more than n/2 times in the array. The function should be efficient and handle sorted arrays.\nrequirement pool:\n- The main code should efficiently determine if the given element is the majority element.\n- The function should handle sorted arrays efficiently.\n- Ensure the function is easy to understand and maintain.\n- Include tests to validate the function's correctness.\nTo efficiently determine if an element is the majority element in a sorted array, we can leverage the properties of the array being sorted. A majority element, by definition, appears more than n/2 times in the array. We can use a binary search approach to find the first and last occurrences of the element. If the difference between these occurrences is greater than n/2, the element is the majority element. This approach ensures that the function is both efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': An element that appears more than n/2 times in a sorted array.\n    Explanation: In a sorted array, if an element is the majority element, it will appear at least n/2 + 1 times. This is because if it appeared any less, it would not be the majority.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To determine if an element is the majority element in a sorted array, we can use a binary search approach:\n    1. Find the first occurrence of the element using binary search.\n    2. Find the last occurrence of the element using binary search.\n    3. Calculate the difference between the last and first occurrence indices.\n    4. If this difference is greater than n/2, the element is the majority element.\n\n# [edge case] \n    is_majority([1, 2, 2, 2, 3], 5, 2) = True\n    Explanation: The element 2 appears 3 times in the array of length 5, which is more than 5/2 times.\n    is_majority([1, 2, 2, 2, 3], 5, 3) = False\n    Explanation: The element 3 appears only 1 time in the array of length 5, which is not more than 5/2 times.\n    is_majority([1, 1, 2, 2, 3, 3, 3, 3], 8, 3) = True\n    Explanation: The element 3 appears 4 times in the array of length 8, which is more than 8/2 times.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to determine if an element is the majority element.\n", "requirement analysis:\nThe requirement is to determine if a given element is the majority element in a sorted array. The majority element is defined as the element that appears more than n/2 times in the array. The function should be efficient and handle sorted arrays efficiently.\nrequirement pool:\n- Implement the function is_majority to check for majority element\n- Ensure the function works efficiently for sorted arrays\n- Test the function for correctness and performance\nTo implement the function is_majority, we will use a binary search approach to efficiently determine if the given element is the majority element in the sorted array. This method leverages the fact that the array is sorted, allowing us to quickly narrow down the search space. We will also use Python's built-in libraries to ensure the function is both efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': An element that appears more than half the time in the array.\n    Explanation: In a sorted array, if an element is the majority element, it will appear at least n/2 + 1 times where n is the length of the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `is_majority`, we will use a binary search approach to efficiently determine if the given element is the majority element in the sorted array.\n\n    1. Define the function `is_majority(arr, n, x)`.\n    2. Use binary search to find the first occurrence of `x` in the array.\n    3. Calculate the potential last occurrence of `x` using the first occurrence index and the length of the array.\n    4. Check if the element at the calculated last occurrence index is the same as `x`.\n    5. If the count of `x` is more than n/2, return `True`; otherwise, return `False`.\n\n# [edge case] \n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) = True\n    Explanation: The element 3 appears 4 times in the array of length 7, which is more than 7/2 = 3.5 times.\n    is_majority([1, 2, 3, 4, 5], 5, 3) = False\n    Explanation: The element 3 appears only 1 time in the array of length 5, which is not more than 5/2 = 2.5 times.\n    is_majority([1], 1, 1) = True\n    Explanation: The element 1 appears 1 time in the array of length 1, which is more than 1/2 = 0.5 times.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search approach inherently handles cases where the array is empty or the element is not present.\n", "requirement analysis:\nThe requirement is to determine if an element appears more than n/2 times in a sorted array. This is a specific case of the majority element problem. The function should be efficient and handle large datasets. The solution should be simple and easy to understand to ensure it is maintainable and scalable.\nrequirement pool:\n- Implement the is_majority function to check for the majority element in a sorted array.\n- Optimize the function for performance, especially for large arrays.\n- Ensure the function is easy to understand and maintain.\n- Test the function with various inputs to verify its correctness.\n- Document the function and its usage.\nTo implement the `is_majority` function efficiently, we will leverage the properties of a sorted array and the Boyer-Moore Voting Algorithm. The Boyer-Moore Voting Algorithm is a popular method for finding the majority element among elements, which occurs more than half the time in the array. This algorithm has a time complexity of O(n) and a space complexity of O(1), making it suitable for large datasets. We will ensure the function is simple and easy to understand, adhering to the principles of maintainability and scalability.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': An element that appears more than half the time in the array.\n    Explanation: In the context of this requirement, a majority element is one that occurs more frequently than the number of elements in the array divided by 2.\n\n# [phrase showing quantity relationship]\n    'more than n/2 times': This phrase indicates that the element must appear more than half the number of times in the array.\n    Explanation: For an element to be considered a majority element, it must appear more times than the length of the array divided by 2.\n\n# [degree adverb] \n    'more than': This adverb emphasizes the threshold for the element to be considered a majority.\n    Explanation: The 'more than' phrase specifies the condition that the element's count must exceed half the length of the array.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the `is_majority` function efficiently, we will use the Boyer-Moore Voting Algorithm. The steps are as follows:\n    1. Initialize a count variable to 0.\n    2. Iterate through the array, and for each element:\n        - If the count is 0, set the current element as the candidate for majority element.\n        - If the current element is the same as the candidate, increment the count.\n        - If the current element is different from the candidate, decrement the count.\n    3. After the iteration, the candidate will be the majority element if it exists.\n    4. Verify if the candidate appears more than n/2 times in the array.\n\n# [edge case] \n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) = True\n    Explanation: The element 3 appears 4 times, which is more than 7/2 = 3.5 times, so it is the majority element.\n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 4) = False\n    Explanation: The element 4 appears 0 times, which is not more than 7/2 = 3.5 times, so it is not the majority element.\n    is_majority([1, 1, 2, 2, 3, 3, 3, 3, 10], 9, 3) = True\n    Explanation: The element 3 appears 4 times, which is more than 9/2 = 4.5 times, so it is the majority element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The Boyer-Moore Voting Algorithm inherently handles cases where the majority element is not present or the array is empty, returning the correct result based on the algorithm's logic.\n", "requirement analysis:\nThe requirement is to determine if a given element appears more than n/2 times in a sorted array. This is a specific case of the more general problem of finding a majority element in an array, where a majority element appears more than n/2 times. The function should be efficient and handle sorted arrays efficiently.\nrequirement pool:\n- Implement the is_majority function to check for the majority element in a sorted array.\n- Ensure the function is optimized for performance, especially for large arrays.\n- Add support for handling unsorted arrays by first sorting them.\n- Include error handling for cases where the array is not sorted.\nTo implement the `is_majority` function efficiently, we will leverage the properties of sorted arrays. The key insight is that if an element appears more than n/2 times in a sorted array, it will occupy the middle position in the sorted array. We can use this property to quickly determine if the given element is the majority element. This approach is efficient and works well with sorted arrays.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sorted array': means the elements are in a specific order, typically ascending or descending.\n    'majority element': an element that appears more than half the time in the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using the properties of sorted arrays to efficiently determine if an element is the majority element. The steps involve:\n    1. Checking if the given element is at the middle position of the array.\n    2. If it is, then it is the majority element.\n    3. If not, then it is not the majority element.\n\n# [edge case] \n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) = True\n    Explanation: The element 3 appears more than 7/2 = 3.5 times in the array, specifically 4 times.\n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 4) = False\n    Explanation: The element 4 appears less than 7/2 = 3.5 times in the array, specifically 0 times.\n    is_majority([1, 1, 2, 2, 3, 3, 3, 3, 10], 9, 3) = True\n    Explanation: The element 3 appears more than 9/2 = 4.5 times in the array, specifically 4 times.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to determine the majority element in a sorted array.\n", "requirement analysis:\nThe requirement is to determine if a given element appears more than n/2 times in a sorted array. This is a specific application of the more general problem of finding a majority element in an array, where a majority element is defined as an element that appears more than half the time in the array. The solution should be efficient and handle edge cases such as no majority element or an array with a single element.\nrequirement pool:\n- Implement the is_majority function to check for the majority element in a sorted array.\n- Ensure the function is optimized for performance, especially for large arrays.\n- Test the function with various edge cases to ensure robustness.\n- Document the function and provide clear examples of usage.\n- Include error handling for invalid inputs such as unsorted arrays or non-integer elements.\nTo implement the is_majority function efficiently, we can leverage the properties of sorted arrays and the Boyer-Moore Voting Algorithm. The Boyer-Moore Voting Algorithm is a popular method for finding the majority element in an array, which is applicable here since we are looking for an element that appears more than n/2 times. This algorithm has a time complexity of O(n) and a space complexity of O(1), making it suitable for large datasets.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': An element that appears more than n/2 times in an array.\n    Explanation: In the context of the requirement, a majority element is a number that occurs more frequently than half the length of the array.\n\n# [phrase showing quantity relationship]\n    'more than n/2 times': This phrase indicates that the element must appear more times than half the length of the array.\n    Explanation: For example, in an array of length 7, an element must appear more than 3.5 times to be considered a majority element.\n\n# [degree adverb] \n    'more than': This adverb specifies that the frequency of the element must exceed a certain threshold.\n    Explanation: In the context of the requirement, 'more than' means that the element's count must be greater than half the length of the array.\n\n# [code logic]\n    To implement the function efficiently, we can use the Boyer-Moore Voting Algorithm:\n    1. Initialize a count variable to 0 and a candidate variable to None.\n    2. Iterate through the array:\n        - If count is 0, set the candidate to the current element and set count to 1.\n        - If the current element is the same as the candidate, increment count.\n        - If the current element is different from the candidate, decrement count.\n    3. After the loop, the candidate variable will hold the potential majority element.\n    4. To confirm, count the occurrences of the candidate in the array and check if it is more than n/2.\n\n# [edge case] \n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) = True\n    Explanation: The element 3 appears 4 times, which is more than 7/2 = 3.5 times, so it is the majority element.\n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 4) = False\n    Explanation: The element 4 appears 0 times, which is not more than 7/2 = 3.5 times, so it is not the majority element.\n    is_majority([1, 1, 1, 2, 2, 2, 2], 7, 2) = True\n    Explanation: The element 2 appears 4 times, which is more than 7/2 = 3.5 times, so it is the majority element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The Boyer-Moore Voting Algorithm inherently handles cases where the majority element is present and where it is not, as it ensures that the candidate is the majority element if it exists.\n", "requirement analysis:\nThe requirement is to create a function that determines if an element is the majority in a sorted array. The majority element is defined as one that appears more than n/2 times in the array. The function should be efficient and easy to understand.\nrequirement pool:\n- The main code should efficiently determine if the element is the majority.\n- The function should be easy to understand and maintain.\n- The product should be visually appealing and user-friendly.\n- The product should be responsive and work well on different devices.\n- The product should include accessibility features.\nTo determine if an element is the majority in a sorted array, we can leverage the properties of the array being sorted. A majority element will always be the middle element if the array length is odd, or one of the two middle elements if the array length is even. We can use binary search to efficiently find the element and check its count.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': An element that appears more than n/2 times in a sorted array.\n    Explanation: In a sorted array, if an element is the majority element, it will be the middle element if the array length is odd, or one of the two middle elements if the array length is even.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To determine if an element is the majority element in a sorted array, we can use a binary search approach:\n    1. Use binary search to find the element.\n    2. Once found, check the count of the element from that position to see if it is more than n/2.\n\n# [edge case] \n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) = True\n    Explanation: The element 3 appears 4 times, which is more than 7/2, so it is the majority element.\n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 2) = False\n    Explanation: The element 2 appears 1 time, which is not more than 7/2, so it is not the majority element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The binary search will naturally handle cases where the element is not found or the array is empty.\n\n# [core concept]\n    'sorted array': An array where elements are arranged in a specific order, typically ascending or descending.\n    Explanation: In a sorted array, elements are in a specific order, which allows for efficient searching and finding of specific elements or ranges of elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function is_majority, we can use a binary search to find the element and then check its count:\n    1. Use binary search to find the first occurrence of the element.\n    2. Check the count of the element from the found position to see if it is more than n/2.\n\n# [edge case] \n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) = True\n    Explanation: The element 3 appears 4 times, which is more than 7/2, so it is the majority element.\n    is_majority([1, 2, 3, 3, 3, 3, 10], 7, 2) = False\n    Explanation: The element 2 appears 1 time, which is not more than 7/2, so it is not the majority element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The binary search will naturally handle cases where the element is not found or the array is empty.\n", "requirement analysis:\nThe requirement is to determine if a given element is the majority element in a sorted array. The majority element is defined as the element that appears more than n/2 times in the array. The function should be efficient and handle edge cases such as empty arrays or elements not appearing more than n/2 times.\nrequirement pool:\n- Implement the function is_majority to check if an element is the majority in a sorted array.\n- Ensure the function is efficient and handles edge cases.\n- Make the function easy to understand and maintain.\nTo implement the function is_majority, we will use a binary search approach to efficiently determine if the given element is the majority element in the sorted array. This method will ensure that the function is both efficient and easy to understand. The majority element condition (appearing more than n/2 times) allows us to use a simple search strategy that leverages the sorted nature of the array.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': An element in an array that appears more than n/2 times, where n is the length of the array.\n    Explanation: In a sorted array, if an element is the majority element, it will be the middle element if the array length is odd, or one of the middle elements if the array length is even. This is because the majority element will occupy more than half of the positions in the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `is_majority`, we can use a binary search approach to efficiently determine if the given element is the majority element in the sorted array. Here's a step-by-step breakdown:\n    1. Use binary search to find the first occurrence of the element.\n    2. Check if the element at the found index is the majority element by verifying if the count of the element is more than n/2.\n\n# [edge case] \n    is_majority([1, 2, 2, 2, 3], 5, 2) = True\n    Explanation: The element 2 appears 3 times in the array of length 5, which is more than 5/2 times.\n    is_majority([1, 2, 2, 2, 3], 5, 3) = False\n    Explanation: The element 3 appears 1 time in the array of length 5, which is not more than 5/2 times.\n    is_majority([1, 1, 2, 2], 4, 1) = True\n    Explanation: The element 1 appears 2 times in the array of length 4, which is more than 4/2 times.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search approach inherently handles cases where the element is at the start or end of the array, or not present at all, by returning appropriate indices or -1. The logic for checking the majority condition is straightforward and does not require additional code.\n", "requirement analysis:\nThe requirement is to create a function that determines if a given element is the majority element in a sorted array. The majority element is defined as the element that appears more than n/2 times in the array. The function should be efficient and handle sorted arrays.\nrequirement pool:\n- The main code should efficiently determine if the given element is the majority element.\n- The function should handle sorted arrays efficiently.\n- Ensure the function is easy to understand and maintain.\n- Include tests to validate the function's correctness.\nTo determine if a given element is the majority element in a sorted array, we can leverage the properties of the array being sorted. Since the majority element appears more than n/2 times, we can use a binary search approach to efficiently find the first and last occurrences of the element. If the difference between these occurrences is greater than n/2, then the element is the majority element.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': An element that appears more than n/2 times in a sorted array.\n    Explanation: In a sorted array, if an element appears more than n/2 times, it means that this element is repeated consecutively for more than half the length of the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To determine if an element is the majority element, we can use a binary search approach to find the first and last occurrences of the element. If the difference between these occurrences is greater than n/2, then the element is the majority element.\n\n# [edge case] \n    is_majority([1, 2, 2, 2, 3], 5, 2) = True\n    Explanation: The element 2 appears 3 times in the array, which is more than n/2 (5/2 = 2.5, so n/2 = 2.5). Therefore, 2 is the majority element.\n    is_majority([1, 2, 2, 2, 3], 5, 3) = False\n    Explanation: The element 3 appears 1 time in the array, which is not more than n/2 (5/2 = 2.5, so n/2 = 2.5). Therefore, 3 is not the majority element.\n    is_majority([1, 1, 2, 2, 3, 3, 3, 3, 4], 9, 3) = True\n    Explanation: The element 3 appears 4 times in the array, which is more than n/2 (9/2 = 4.5, so n/2 = 4.5). Therefore, 3 is the majority element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to determine if the element is the majority element.\n", "requirement analysis:\nThe requirement is to determine if a given element is the majority element in a sorted array. The majority element is defined as the element that appears more than n/2 times in the array. The function should be efficient and handle sorted arrays efficiently.\nrequirement pool:\n- Implement the is_majority function to check for majority element in a sorted array.\n- Ensure the function is optimized for performance, especially for large arrays.\n- Make the function easy to understand and maintain.\n- Test the function with various edge cases to ensure reliability.\n- Design the function to be scalable and adaptable for future enhancements.\nTo implement the is_majority function, we will leverage Python's built-in capabilities and the bisect module for efficient searching within a sorted array. The function will check if the given element appears more than n/2 times in the array. This approach ensures both efficiency and clarity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'majority element': An element that appears more than half the time in the array.\n    Explanation: In a sorted array, if an element is the majority element, it will appear at least n/2 + 1 times where n is the length of the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function will use binary search to find the first and last occurrence of the element. If the difference between these occurrences plus one is greater than n/2, then the element is the majority element.\n\n# [edge case] \n    is_majority([1, 2, 2, 2, 3], 5, 2) = True\n    Explanation: The element 2 appears 3 times in the array of length 5, which is more than 5/2 = 2.5 times, so it is the majority element.\n    is_majority([1, 2, 2, 2, 3], 5, 3) = False\n    Explanation: The element 3 appears only once in the array of length 5, which is not more than 5/2 = 2.5 times, so it is not the majority element.\n    is_majority([1, 1, 2, 2], 4, 1) = True\n    Explanation: The element 1 appears 2 times in the array of length 4, which is more than 4/2 = 2 times, so it is the majority element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the provided logic is sufficient to determine the majority element.\n"], "test": ["def check(is_majority):\n\tassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True", "def check(is_majority):\n\tassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False", "def check(is_majority):\n\tassert is_majority([1, 1, 1, 2, 2], 5, 1) == True", "def check(is_majority):\n\tassert is_majority([6, 2, 3, 8, 1, 4, 11], 7, 8) == False", "def check(is_majority):\n\tassert is_majority([4, 6, 3, 2, 6, 3, 11], 9, 5) == False", "def check(is_majority):\n\tassert is_majority([4, 4, 4, 6, 6, 7, 12], 7, 4) == False", "def check(is_majority):\n\tassert is_majority([6, 3, 2, 1, 8, 7, 13], 12, 7) == False", "def check(is_majority):\n\tassert is_majority([1, 1, 5, 8, 6, 5, 9], 4, 6) == False", "def check(is_majority):\n\tassert is_majority([3, 4, 8, 6, 6, 8, 8], 11, 2) == False", "def check(is_majority):\n\tassert is_majority([1, 5, 4, 1, 2, 5, 12], 4, 7) == False", "def check(is_majority):\n\tassert is_majority([1, 3, 1, 4, 1, 4, 14], 7, 8) == False", "def check(is_majority):\n\tassert is_majority([2, 7, 3, 4, 1, 4, 12], 4, 7) == False", "def check(is_majority):\n\tassert is_majority([1, 1, 1, 7, 5, 1, 15], 3, 6) == False", "def check(is_majority):\n\tassert is_majority([4, 4, 7, 4, 3, 3, 7], 3, 1) == False", "def check(is_majority):\n\tassert is_majority([4, 3, 7, 1, 7, 4, 12], 8, 8) == False", "def check(is_majority):\n\tassert is_majority([3, 5, 2, 4, 8, 1, 11], 3, 4) == False", "def check(is_majority):\n\tassert is_majority([1, 2, 7, 5, 4, 6, 15], 5, 5) == False", "def check(is_majority):\n\tassert is_majority([3, 4, 4, 5, 8, 3, 7], 6, 7) == False", "def check(is_majority):\n\tassert is_majority([3, 3, 8, 6, 3, 7, 13], 9, 7) == False", "def check(is_majority):\n\tassert is_majority([3, 1, 1, 6, 6, 6, 5], 3, 1) == False", "def check(is_majority):\n\tassert is_majority([6, 2, 3, 4, 7, 2, 9], 2, 5) == False", "def check(is_majority):\n\tassert is_majority([6, 4, 6, 7, 3, 8, 10], 5, 3) == False", "def check(is_majority):\n\tassert is_majority([4, 5, 2, 7, 2, 8, 12], 4, 3) == False", "def check(is_majority):\n\tassert is_majority([3, 4, 1, 1, 6, 5, 13], 4, 2) == False", "def check(is_majority):\n\tassert is_majority([3, 4, 8, 4, 4, 1, 9], 3, 3) == False", "def check(is_majority):\n\tassert is_majority([2, 2, 1, 5, 4, 7, 8], 7, 2) == False", "def check(is_majority):\n\tassert is_majority([2, 3, 1, 4, 1, 4, 10], 4, 2) == False", "def check(is_majority):\n\tassert is_majority([2, 1, 8, 2, 2, 8, 5], 7, 7) == False", "def check(is_majority):\n\tassert is_majority([4, 4, 2, 3, 4, 1, 9], 3, 4) == True", "def check(is_majority):\n\tassert is_majority([4, 3, 7, 3, 1, 4, 5], 11, 1) == False", "def check(is_majority):\n\tassert is_majority([2, 7, 3, 6, 2, 6, 11], 9, 1) == False", "def check(is_majority):\n\tassert is_majority([5, 2, 1, 6, 3, 6, 6], 9, 6) == False", "def check(is_majority):\n\tassert is_majority([2, 2, 6, 7, 2, 3, 8], 2, 7) == False", "def check(is_majority):\n\tassert is_majority([3, 1, 6, 3, 5, 1, 9], 8, 7) == False", "def check(is_majority):\n\tassert is_majority([4, 5, 7, 5, 1, 3, 14], 9, 1) == False", "def check(is_majority):\n\tassert is_majority([4, 3, 3, 2, 6, 1, 6], 10, 2) == False", "def check(is_majority):\n\tassert is_majority([2, 3, 5, 5, 4, 2, 11, 7], 5, 6) == False", "def check(is_majority):\n\tassert is_majority([2, 1, 7, 7, 4, 1, 5, 10], 3, 8) == False", "def check(is_majority):\n\tassert is_majority([2, 6, 6, 2, 9, 3, 7, 9], 3, 7) == False", "def check(is_majority):\n\tassert is_majority([2, 1, 1, 6, 6, 5, 7, 3], 7, 4) == False", "def check(is_majority):\n\tassert is_majority([6, 4, 4, 6, 9, 4, 2, 7], 7, 3) == False", "def check(is_majority):\n\tassert is_majority([3, 1, 4, 4, 1, 9, 7, 1], 11, 3) == False", "def check(is_majority):\n\tassert is_majority([5, 6, 7, 5, 3, 9, 9, 3], 8, 2) == False", "def check(is_majority):\n\tassert is_majority([3, 6, 6, 6, 3, 3, 3, 6], 10, 3) == True", "def check(is_majority):\n\tassert is_majority([6, 4, 1, 3, 6, 5, 7, 7], 6, 9) == False", "def check(is_majority):\n\tassert is_majority([4, 6, 1, 8, 5, 8, 6, 11], 7, 1) == False", "def check(is_majority):\n\tassert is_majority([5, 6, 7, 4, 7, 4, 8, 10], 6, 8) == False", "def check(is_majority):\n\tassert is_majority([5, 3, 4, 8, 2, 7, 6, 6], 13, 6) == False", "def check(is_majority):\n\tassert is_majority([4, 5, 5, 7, 5, 3, 8, 9], 7, 2) == False", "def check(is_majority):\n\tassert is_majority([3, 5, 3, 1, 1, 9, 1, 2], 3, 9) == False", "def check(is_majority):\n\tassert is_majority([2, 5, 6, 8, 6, 9, 1, 4], 7, 7) == False", "def check(is_majority):\n\tassert is_majority([4, 3, 2, 6, 8, 8, 9, 2], 7, 8) == False", "def check(is_majority):\n\tassert is_majority([5, 1, 6, 4, 4, 5, 5, 9], 3, 3) == False", "def check(is_majority):\n\tassert is_majority([6, 2, 5, 5, 2, 2, 2, 9], 7, 4) == False", "def check(is_majority):\n\tassert is_majority([2, 3, 6, 3, 4, 3, 10, 9], 6, 3) == False", "def check(is_majority):\n\tassert is_majority([5, 2, 4, 5, 9, 4, 2, 10], 3, 4) == False", "def check(is_majority):\n\tassert is_majority([2, 3, 4, 5, 5, 9, 8, 10], 4, 1) == False", "def check(is_majority):\n\tassert is_majority([3, 1, 7, 6, 5, 2, 2, 10], 5, 8) == False", "def check(is_majority):\n\tassert is_majority([1, 2, 3, 6, 6, 8, 7, 2], 7, 6) == False", "def check(is_majority):\n\tassert is_majority([5, 2, 6, 3, 3, 2, 3, 11], 8, 2) == False", "def check(is_majority):\n\tassert is_majority([4, 3, 5, 6, 2, 8, 5, 10], 5, 8) == False", "def check(is_majority):\n\tassert is_majority([3, 5, 4, 1, 1, 1, 9, 4], 5, 5) == False", "def check(is_majority):\n\tassert is_majority([1, 1, 2, 3, 2, 8, 8, 8], 11, 2) == False", "def check(is_majority):\n\tassert is_majority([2, 5, 2, 7, 9, 3, 6, 5], 8, 1) == False", "def check(is_majority):\n\tassert is_majority([3, 2, 3, 2, 5, 8, 11, 11], 9, 7) == False", "def check(is_majority):\n\tassert is_majority([4, 4, 1, 8, 2, 6, 1, 10], 9, 2) == False", "def check(is_majority):\n\tassert is_majority([4, 2, 6, 8, 9, 4, 4, 4], 13, 1) == False", "def check(is_majority):\n\tassert is_majority([1, 3, 7, 3, 1, 7, 10, 7], 4, 8) == False", "def check(is_majority):\n\tassert is_majority([6, 1, 7, 8, 4, 1, 3, 9], 7, 3) == False", "def check(is_majority):\n\tassert is_majority([1, 6, 2, 6, 3], 7, 2) == False", "def check(is_majority):\n\tassert is_majority([2, 1, 1, 7, 2], 2, 5) == False", "def check(is_majority):\n\tassert is_majority([5, 1, 6, 5, 7], 5, 5) == False", "def check(is_majority):\n\tassert is_majority([2, 1, 1, 6, 6], 5, 4) == False", "def check(is_majority):\n\tassert is_majority([2, 2, 2, 4, 6], 3, 6) == False", "def check(is_majority):\n\tassert is_majority([2, 1, 6, 3, 1], 6, 3) == False", "def check(is_majority):\n\tassert is_majority([3, 5, 5, 6, 5], 3, 6) == False", "def check(is_majority):\n\tassert is_majority([1, 1, 3, 5, 4], 5, 6) == False", "def check(is_majority):\n\tassert is_majority([1, 6, 4, 3, 1], 6, 2) == False", "def check(is_majority):\n\tassert is_majority([6, 3, 4, 4, 2], 9, 2) == False", "def check(is_majority):\n\tassert is_majority([3, 4, 4, 7, 7], 3, 2) == False", "def check(is_majority):\n\tassert is_majority([5, 3, 4, 6, 3], 1, 2) == False", "def check(is_majority):\n\tassert is_majority([6, 5, 5, 1, 1], 4, 2) == False", "def check(is_majority):\n\tassert is_majority([1, 4, 1, 6, 4], 2, 1) == False", "def check(is_majority):\n\tassert is_majority([2, 5, 2, 2, 7], 6, 5) == False", "def check(is_majority):\n\tassert is_majority([5, 5, 1, 3, 3], 4, 5) == False", "def check(is_majority):\n\tassert is_majority([5, 6, 1, 5, 6], 2, 2) == False", "def check(is_majority):\n\tassert is_majority([4, 2, 5, 3, 5], 6, 1) == False", "def check(is_majority):\n\tassert is_majority([6, 2, 6, 6, 7], 9, 1) == False", "def check(is_majority):\n\tassert is_majority([6, 5, 1, 3, 5], 10, 4) == False", "def check(is_majority):\n\tassert is_majority([6, 5, 6, 6, 3], 3, 3) == False", "def check(is_majority):\n\tassert is_majority([6, 6, 5, 3, 7], 3, 4) == False", "def check(is_majority):\n\tassert is_majority([1, 3, 4, 7, 7], 4, 6) == False", "def check(is_majority):\n\tassert is_majority([2, 2, 6, 7, 6], 9, 1) == False", "def check(is_majority):\n\tassert is_majority([1, 3, 2, 7, 6], 3, 2) == False", "def check(is_majority):\n\tassert is_majority([3, 2, 4, 2, 4], 2, 2) == False", "def check(is_majority):\n\tassert is_majority([1, 4, 4, 1, 4], 2, 6) == False", "def check(is_majority):\n\tassert is_majority([3, 4, 3, 1, 4], 2, 6) == False", "def check(is_majority):\n\tassert is_majority([4, 1, 4, 2, 2], 2, 2) == False", "def check(is_majority):\n\tassert is_majority([1, 3, 3, 3, 7], 5, 2) == False", "def check(is_majority):\n\tassert is_majority([6, 6, 1, 3, 1], 7, 1) == False", "def check(is_majority):\n\tassert is_majority([1, 5, 2, 2, 2], 2, 6) == False", "def check(is_majority):\n\tassert is_majority([2, 2, 4, 6, 5], 2, 4) == False"], "scores": [0.9314, 0.951, 1.0, 0.7647, 0.8824, 0.7647, 0.902, 0.2059, 0.951, 0.8922], "pass_results": [false, false, true, false, false, false, false, false, false, false], "pass_test_cases_num": [95, 97, 102, 78, 90, 78, 92, 21, 97, 91], "completion": "from typing import List\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Determines if the given element is the majority element in the sorted array.\n    \n    Args:\n        arr (List[int]): A sorted list of integers.\n        n (int): The number of elements in the array.\n        x (int): The element to check for majority.\n    \n    Returns:\n        bool: True if x is the majority element, False otherwise.\n    \"\"\"\n    # Find the first occurrence of x using binary search\n    def first_occurrence(arr, low, high, x):\n        if high >= low:\n            mid = low + (high - low) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                return first_occurrence(arr, mid + 1, high, x)\n            else:\n                return first_occurrence(arr, low, mid - 1, x)\n        return -1\n    \n    first_index = first_occurrence(arr, 0, n - 1, x)\n    \n    # If x is not found in the array, return False\n    if first_index == -1:\n        return False\n    \n    # Calculate the potential last occurrence of x\n    last_index = first_index + n // 2\n    \n    # Check if the element at the calculated last occurrence index is the same as x\n    if last_index < n and arr[last_index] == x:\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3))  # True\n# print(is_majority([1, 2, 3, 4, 5], 5, 3))        # False\n# print(is_majority([1], 1, 1))                    # True\n", "passed": true, "pass": true, "pass_num": 1, "round": 484, "mutate_method": "rephrase_one", "parent_index": 75}
