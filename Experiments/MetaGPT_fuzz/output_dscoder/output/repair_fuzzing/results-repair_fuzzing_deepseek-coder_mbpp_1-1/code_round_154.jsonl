{"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 425, "prompt": "Write a function to count the number of sublists containing a particular element. Ensure your solution efficiently handles cases where the list size and number of sublists are large.", "code": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr", "test_imports": [], "test_list": ["assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1", "assert count_element_in_list([[6, 8], [4, 2], [5, 10], [3, 17, 5]], 3) == 1", "assert count_element_in_list([[2, 1], [1, 4], [4, 11], [2, 14, 12]], 6) == 0", "assert count_element_in_list([[3, 6], [7, 4], [5, 15], [4, 18, 4]], 3) == 1", "assert count_element_in_list([[2, 6], [9, 2], [6, 11], [1, 19, 6]], 1) == 1", "assert count_element_in_list([[1, 4], [4, 3], [1, 16], [6, 15, 9]], 6) == 1", "assert count_element_in_list([[4, 2], [7, 7], [1, 7], [6, 18, 5]], 1) == 1", "assert count_element_in_list([[2, 3], [9, 10], [2, 6], [3, 12, 12]], 4) == 0", "assert count_element_in_list([[4, 4], [4, 11], [4, 14], [6, 19, 4]], 3) == 0", "assert count_element_in_list([[3, 6], [4, 2], [4, 13], [4, 13, 12]], 2) == 1", "assert count_element_in_list([[5, 1], [2, 8], [2, 10], [5, 12, 6]], 3) == 0", "assert count_element_in_list([[1, 7], [2, 10], [6, 13], [2, 16, 8]], 4) == 0", "assert count_element_in_list([[5, 4], [1, 12], [3, 16], [3, 18, 6]], 2) == 0", "assert count_element_in_list([[5, 4], [5, 8], [1, 14], [3, 20, 10]], 3) == 1", "assert count_element_in_list([[3, 4], [5, 7], [1, 14], [5, 20, 11]], 5) == 2", "assert count_element_in_list([[3, 6], [6, 2], [6, 15], [1, 11, 3]], 4) == 0", "assert count_element_in_list([[2, 7], [3, 7], [1, 16], [3, 10, 3]], 6) == 0", "assert count_element_in_list([[1, 5], [4, 11], [4, 12], [5, 16, 6]], 1) == 1", "assert count_element_in_list([[6, 5], [4, 7], [3, 12], [2, 10, 3]], 6) == 1", "assert count_element_in_list([[2, 3], [5, 11], [6, 13], [6, 13, 12]], 4) == 0", "assert count_element_in_list([[6, 6], [3, 3], [2, 13], [5, 16, 8]], 5) == 1", "assert count_element_in_list([[1, 6], [7, 12], [5, 16], [5, 14, 4]], 1) == 1", "assert count_element_in_list([[6, 8], [9, 6], [1, 9], [2, 10, 2]], 4) == 0", "assert count_element_in_list([[5, 2], [7, 2], [5, 15], [4, 10, 7]], 4) == 1", "assert count_element_in_list([[4, 1], [6, 5], [4, 15], [1, 20, 2]], 5) == 1", "assert count_element_in_list([[1, 1], [7, 7], [4, 7], [2, 15, 6]], 5) == 0", "assert count_element_in_list([[3, 8], [10, 6], [3, 15], [2, 19, 6]], 6) == 2", "assert count_element_in_list([[5, 5], [3, 11], [3, 15], [3, 10, 8]], 5) == 1", "assert count_element_in_list([[5, 3], [9, 6], [6, 9], [1, 16, 2]], 3) == 1", "assert count_element_in_list([[4, 8], [6, 12], [4, 12], [6, 16, 2]], 2) == 1", "assert count_element_in_list([[3, 1], [2, 10], [1, 11], [4, 15, 9]], 6) == 0", "assert count_element_in_list([[4, 1], [4, 7], [1, 6], [4, 20, 4]], 6) == 1", "assert count_element_in_list([[2, 2], [5, 2], [4, 13], [6, 15, 6]], 5) == 1", "assert count_element_in_list([[1, 5], [6, 3], [4, 6], [4, 17, 12]], 6) == 2", "assert count_element_in_list([['S', 'M'], ['Z', 'Y'], ['M', 'W', 'U'], ['V', 'Y', 'W']], 'R') == 0", "assert count_element_in_list([['P', 'I'], ['I', 'F'], ['E', 'O', 'X'], ['D', 'B', 'T']], 'E') == 1", "assert count_element_in_list([['Y', 'F'], ['A', 'L'], ['Y', 'T', 'V'], ['U', 'D', 'C']], 'Z') == 0", "assert count_element_in_list([['J', 'Z'], ['L', 'H'], ['D', 'Q', 'I'], ['X', 'P', 'O']], 'X') == 1", "assert count_element_in_list([['D', 'O'], ['F', 'S'], ['V', 'F', 'U'], ['S', 'H', 'U']], 'J') == 0", "assert count_element_in_list([['S', 'M'], ['X', 'X'], ['E', 'P', 'Q'], ['P', 'K', 'W']], 'G') == 0", "assert count_element_in_list([['M', 'A'], ['F', 'V'], ['Y', 'F', 'E'], ['B', 'A', 'H']], 'G') == 0", "assert count_element_in_list([['R', 'S'], ['C', 'Z'], ['X', 'J', 'V'], ['V', 'H', 'N']], 'C') == 1", "assert count_element_in_list([['S', 'J'], ['Y', 'Y'], ['D', 'D', 'M'], ['M', 'P', 'R']], 'V') == 0", "assert count_element_in_list([['C', 'T'], ['U', 'J'], ['E', 'Z', 'S'], ['D', 'E', 'K']], 'X') == 0", "assert count_element_in_list([['J', 'G'], ['L', 'G'], ['F', 'U', 'C'], ['H', 'I', 'Z']], 'E') == 0", "assert count_element_in_list([['A', 'B'], ['K', 'H'], ['Z', 'A', 'P'], ['A', 'U', 'L']], 'L') == 1", "assert count_element_in_list([['R', 'X'], ['K', 'D'], ['I', 'W', 'R'], ['Z', 'X', 'W']], 'K') == 1", "assert count_element_in_list([['N', 'N'], ['J', 'Q'], ['N', 'K', 'T'], ['H', 'G', 'L']], 'R') == 0", "assert count_element_in_list([['Z', 'L'], ['H', 'C'], ['J', 'T', 'S'], ['N', 'Z', 'N']], 'E') == 0", "assert count_element_in_list([['F', 'Z'], ['B', 'E'], ['E', 'A', 'Y'], ['H', 'L', 'K']], 'M') == 0", "assert count_element_in_list([['G', 'L'], ['C', 'O'], ['Y', 'M', 'K'], ['V', 'C', 'Y']], 'H') == 0", "assert count_element_in_list([['U', 'X'], ['D', 'W'], ['P', 'G', 'M'], ['F', 'P', 'W']], 'P') == 2", "assert count_element_in_list([['Y', 'Y'], ['A', 'S'], ['K', 'T', 'S'], ['Y', 'B', 'N']], 'H') == 0", "assert count_element_in_list([['Q', 'Q'], ['G', 'U'], ['W', 'G', 'B'], ['C', 'E', 'K']], 'W') == 1", "assert count_element_in_list([['G', 'A'], ['R', 'I'], ['C', 'I', 'F'], ['Q', 'G', 'Q']], 'S') == 0", "assert count_element_in_list([['V', 'Z'], ['F', 'G'], ['O', 'T', 'Z'], ['P', 'E', 'D']], 'S') == 0", "assert count_element_in_list([['V', 'T'], ['C', 'C'], ['N', 'Z', 'T'], ['U', 'Z', 'X']], 'R') == 0", "assert count_element_in_list([['X', 'L'], ['D', 'D'], ['L', 'G', 'X'], ['T', 'S', 'P']], 'N') == 0", "assert count_element_in_list([['L', 'G'], ['N', 'U'], ['C', 'E', 'R'], ['N', 'B', 'O']], 'U') == 1", "assert count_element_in_list([['N', 'S'], ['P', 'G'], ['X', 'Z', 'O'], ['J', 'T', 'U']], 'L') == 0", "assert count_element_in_list([['X', 'K'], ['M', 'M'], ['H', 'I', 'F'], ['A', 'Q', 'L']], 'J') == 0", "assert count_element_in_list([['T', 'Q'], ['I', 'E'], ['Z', 'X', 'W'], ['J', 'X', 'S']], 'R') == 0", "assert count_element_in_list([['M', 'O'], ['W', 'N'], ['U', 'V', 'D'], ['E', 'H', 'A']], 'Y') == 0", "assert count_element_in_list([['X', 'O'], ['N', 'K'], ['Y', 'G', 'C'], ['D', 'Z', 'N']], 'R') == 0", "assert count_element_in_list([['C', 'I'], ['J', 'C'], ['J', 'I', 'K'], ['D', 'F', 'L']], 'B') == 0", "assert count_element_in_list([['T', 'P'], ['W', 'R'], ['P', 'E', 'K'], ['G', 'G', 'S']], 'P') == 2", "assert count_element_in_list([['R', 'B'], ['E', 'J'], ['A', 'U', 'H'], ['M', 'B', 'D']], 'M') == 1", "assert count_element_in_list([['S', 'M'], ['N', 'S'], ['Z', 'D', 'E'], ['E', 'C', 'C']], 'V') == 0", "assert count_element_in_list([['I', 'Q'], ['D', 'B'], ['C', 'C', 'F'], ['D', 'W', 'G']], 'F') == 1", "assert count_element_in_list([['P', 'S'], ['J', 'T'], ['Q', 'B', 'I'], ['L', 'R', 'K']], 'T') == 1", "assert count_element_in_list([['C', 'C'], ['V', 'E'], ['C', 'V', 'A'], ['Y', 'A', 'A']], 'K') == 0", "assert count_element_in_list([['V', 'N'], ['Z', 'R'], ['S', 'Y', 'D'], ['Q', 'H', 'Y']], 'P') == 0", "assert count_element_in_list([['P', 'B'], ['G', 'I'], ['E', 'L', 'U'], ['X', 'H', 'X']], 'K') == 0", "assert count_element_in_list([['K', 'L'], ['H', 'Y'], ['U', 'T', 'R'], ['H', 'S', 'H']], 'Z') == 0", "assert count_element_in_list([['P', 'G'], ['H', 'X'], ['N', 'Z', 'J'], ['P', 'V', 'R']], 'A') == 0", "assert count_element_in_list([['E', 'Q'], ['R', 'V'], ['T', 'F', 'F'], ['M', 'P', 'L']], 'D') == 0", "assert count_element_in_list([['X', 'R'], ['P', 'Q'], ['N', 'Q', 'C'], ['L', 'J', 'O']], 'T') == 0", "assert count_element_in_list([['B', 'I'], ['O', 'N'], ['R', 'U', 'I'], ['U', 'Z', 'Z']], 'Y') == 0", "assert count_element_in_list([['C', 'Z'], ['Z', 'V'], ['Y', 'L', 'E'], ['O', 'E', 'S']], 'C') == 1", "assert count_element_in_list([['S', 'T'], ['P', 'H'], ['P', 'U', 'B'], ['L', 'E', 'Z']], 'T') == 1", "assert count_element_in_list([['Z', 'Q'], ['R', 'I'], ['T', 'L', 'X'], ['B', 'W', 'N']], 'A') == 0", "assert count_element_in_list([['P', 'R'], ['H', 'B'], ['K', 'X', 'J'], ['W', 'Z', 'U']], 'U') == 1", "assert count_element_in_list([['P', 'J'], ['G', 'Q'], ['T', 'P', 'Q'], ['N', 'E', 'Z']], 'T') == 1", "assert count_element_in_list([['Y', 'O'], ['J', 'I'], ['D', 'W', 'Z'], ['Z', 'Y', 'H']], 'L') == 0", "assert count_element_in_list([['O', 'W'], ['Q', 'V'], ['C', 'Z', 'V'], ['V', 'V', 'V']], 'J') == 0", "assert count_element_in_list([['K', 'D'], ['W', 'O'], ['V', 'R', 'M'], ['P', 'Q', 'H']], 'K') == 1", "assert count_element_in_list([['C', 'E'], ['D', 'K'], ['W', 'I', 'Y'], ['W', 'L', 'D']], 'C') == 1", "assert count_element_in_list([['T', 'P'], ['F', 'O'], ['A', 'D', 'Z'], ['H', 'W', 'X']], 'O') == 1", "assert count_element_in_list([['Q', 'A'], ['J', 'O'], ['P', 'Y', 'P'], ['H', 'Z', 'N']], 'U') == 0", "assert count_element_in_list([['F', 'Q'], ['S', 'L'], ['P', 'L', 'Z'], ['F', 'Y', 'P']], 'Z') == 1", "assert count_element_in_list([['A', 'D'], ['D', 'C'], ['H', 'D', 'H'], ['B', 'T', 'E']], 'Y') == 0", "assert count_element_in_list([['M', 'W'], ['M', 'S'], ['L', 'O', 'C'], ['X', 'X', 'M']], 'E') == 0", "assert count_element_in_list([['Q', 'A'], ['H', 'C'], ['X', 'V', 'J'], ['M', 'J', 'B']], 'P') == 0", "assert count_element_in_list([['M', 'A'], ['F', 'T'], ['C', 'E', 'G'], ['P', 'O', 'C']], 'C') == 2", "assert count_element_in_list([['F', 'F'], ['O', 'I'], ['S', 'F', 'M'], ['Y', 'R', 'F']], 'D') == 0", "assert count_element_in_list([['O', 'U'], ['K', 'R'], ['Z', 'O', 'A'], ['A', 'M', 'O']], 'H') == 0", "assert count_element_in_list([['Q', 'R'], ['U', 'N'], ['V', 'N', 'E'], ['L', 'Y', 'A']], 'S') == 0", "assert count_element_in_list([['Z', 'K'], ['M', 'T'], ['T', 'G', 'X'], ['Y', 'L', 'N']], 'Z') == 1", "assert count_element_in_list([['A', 'P'], ['J', 'P'], ['P', 'D', 'O'], ['K', 'C', 'R']], 'Q') == 0", "assert count_element_in_list([['Y', 'Y'], ['Z', 'P'], ['T', 'C', 'C'], ['Z', 'G', 'A']], 'T') == 1"], "entry_point": "count_element_in_list", "repair_prompt": ["Write a function count_element_in_list to count the number of sublists containing a particular element. Ensure your solution efficiently handles cases where the list size and number of sublists are large.\ncount_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n", " Write a function count_element_in_list to count the number of sublists that include a specific element. Make sure your solution is optimized to handle large lists and a high number of sublists efficiently.\ncount_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n", " Write a function count_element_in_list to count occurrences of a specific element across all sublists within a main list. Optimize the solution for scenarios with extensive list sizes and numerous sublists.\ncount_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n"], "completions": ["from typing import List\n## main.py\n\ndef count_element_in_list(lst: list, element: any) -> int:\n    \"\"\"\n    Counts the number of sublists containing a particular element in a list of lists.\n\n    Args:\n        lst (list): The list of lists to search through.\n        element (any): The element to search for in the sublists.\n\n    Returns:\n        int: The number of sublists containing the element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n", "from typing import List\n## main.py\n\nimport itertools\nfrom typing import List, Any\n\ndef count_element_in_list(lst: List[List[Any]], element: Any) -> int:\n    \"\"\"\n    Counts the number of sublists containing the specified element.\n\n    Args:\n        lst (List[List[Any]]): A list of lists containing any type of elements.\n        element (Any): The element to count within the sublists.\n\n    Returns:\n        int: The count of sublists containing the specified element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n", "from typing import List\n## main.py\n\ndef count_element_in_list(lst: list, element: any) -> int:\n    \"\"\"\n    Counts the number of sublists containing a particular element in a list of sublists.\n\n    Args:\n        lst (list): A list of sublists.\n        element (any): The element to count within the sublists.\n\n    Returns:\n        int: The count of the element in any sublist.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n# Example usage:\n# print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))  # Output: 3\n", "from typing import List\n## main.py\n\ndef count_element_in_list(lst: list, element: any) -> int:\n    \"\"\"\n    Counts the number of sublists in the given list that contain the specified element.\n\n    Args:\n        lst (list): A list of sublists.\n        element (any): The element to search for within the sublists.\n\n    Returns:\n        int: The count of sublists containing the specified element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n", "from typing import List\n## main.py\n\ndef count_element_in_list(sublists: list, element: int) -> int:\n    \"\"\"\n    Counts the number of sublists that contain the specified element.\n\n    Args:\n        sublists (list): A list of lists where each sublist may or may not contain the element.\n        element (int): The integer to search for within each sublist.\n\n    Returns:\n        int: The count of sublists that contain the specified element.\n    \"\"\"\n    count = 0\n    for sublist in sublists:\n        if element in sublist:\n            count += 1\n    return count\n", "from typing import List\n## main.py\n\ndef count_element_in_list(lst: list, element: any) -> int:\n    \"\"\"\n    Counts the number of sublists that contain the specified element.\n\n    Args:\n        lst (list): A list of sublists.\n        element (any): The element to search for within the sublists.\n\n    Returns:\n        int: The count of sublists containing the specified element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n", "from typing import List\n## main.py\n\ndef count_element_in_list(main_list: list, element: int) -> int:\n    \"\"\"\n    Counts the occurrences of a specified element in a list of lists.\n\n    Args:\n        main_list (list): A list of lists containing integers.\n        element (int): The integer to count occurrences of.\n\n    Returns:\n        int: The total count of the specified element in the list of lists.\n    \"\"\"\n    count = 0\n    for sublist in main_list:\n        count += sublist.count(element)\n    return count\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom collections import Counter\n\ndef count_element_in_list(main_list: List[List[int]], element: int) -> int:\n    \"\"\"\n    Counts the occurrences of a specific element in a list of lists.\n\n    Args:\n        main_list (List[List[int]]): The list of lists containing integers.\n        element (int): The element to count occurrences of.\n\n    Returns:\n        int: The total number of occurrences of the element in the list of lists.\n    \"\"\"\n    # Flatten the list of lists\n    flattened_list = [item for sublist in main_list for item in sublist]\n    \n    # Count the occurrences of the element using Counter\n    element_counter = Counter(flattened_list)\n    \n    # Return the count of the specific element\n    return element_counter[element]\n\n# Example usage:\n# print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1))  # Output: 3\n# print(count_element_in_list([[1, 3], [5, 7], [], [1, 15, 7]], 7))       # Output: 2\n# print(count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 9))  # Output: 0\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef count_element_in_list(main_list: List[List[int]], element: int) -> int:\n    \"\"\"\n    Counts the occurrences of a specified element in a list of lists.\n\n    Args:\n        main_list (List[List[int]]): A list containing sublists of integers.\n        element (int): The integer to count occurrences of.\n\n    Returns:\n        int: The total count of the element across all sublists.\n    \"\"\"\n    flattened_list = [item for sublist in main_list for item in sublist]\n    return flattened_list.count(element)\n\n# Example usage:\n# result = count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n# print(result)  # Output: 3\n", "from typing import List\n## main.py\n\ndef count_element_in_list(lst: list, element: any) -> int:\n    \"\"\"\n    Counts the number of sublists containing a particular element in a list of sublists.\n\n    Args:\n        lst (list): A list of sublists.\n        element (any): The element to count occurrences of within the sublists.\n\n    Returns:\n        int: The count of sublists containing the element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that counts the number of sublists containing a particular element. This function should be efficient enough to handle large lists and sublists. The function should be clear and easy to understand, ensuring it meets the user's needs effectively.\nrequirement pool:\n- The main code should efficiently count the number of sublists containing a particular element.\n- Ensure the function handles large lists and sublists without performance issues.\n- The function should be easy to understand and maintain.\nTo efficiently count the number of sublists containing a particular element in a list, we can use a combination of list comprehensions and the 'in' operator. This approach is simple and leverages Python's built-in functionalities, making it both efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sublist': a list within a list\n    'element': an item in a sublist\n    'count': to find how many times an element appears in a list of lists\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Define the function `count_element_in_list` with parameters `lst` and `element`.\n    (2) Initialize a counter to keep track of the number of sublists containing the element.\n    (3) Iterate through each sublist in the main list.\n    (4) Check if the element is in the current sublist.\n    (5) If the element is found, increment the counter.\n    (6) Return the counter after iterating through all sublists.\n\n# [edge case] \n    count_element_in_list([[]], 1) = 0\n    Explanation: The sublist is empty, so the element cannot be found, resulting in an expected output of 0.\n    count_element_in_list([[1, 2, 3], [4, 5, 6]], 7) = 0\n    Explanation: The element 7 is not present in any of the sublists, so the expected output is 0.\n    count_element_in_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) = 1\n    Explanation: The element 5 is present in one of the sublists, so the expected output is 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle cases where the list is empty or the element is not present.\n", "requirement analysis:\nThe requirement is to create a function that counts the number of sublists containing a specific element. The function should be efficient and capable of handling large datasets. This requirement is crucial for applications where data processing and analysis are key, such as in data science or large-scale data management.\nrequirement pool:\n- Implement a function to count occurrences of a specific element in a list of sublists.\n- Ensure the function can handle large datasets without performance degradation.\n- Develop a user-friendly interface for easy integration and use.\n- Include basic error handling to manage unexpected inputs.\n- Optimize the function for high performance and scalability.\nTo implement the function efficiently, we will use Python's built-in capabilities and the itertools library to handle the counting of sublists containing a specific element. The itertools library will help in efficiently iterating through the list of lists without explicitly using nested loops, which can be inefficient for large datasets.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sublists': means nested lists within a main list\n    'efficiently handle': means the solution should be optimized to handle large datasets without slowing down\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using Python's built-in capabilities and the itertools library to efficiently count the number of sublists containing a particular element. This involves:\n    1. Iterating through each sublist in the main list.\n    2. Checking if the specific element is in the sublist.\n    3. Counting the sublists that contain the element.\n\n# [edge case] \n    count_element_in_list([[], [2], [3, 4]], 2) = 1\n    Explanation:\n    The edge case includes an empty sublist. The function should correctly count the sublist [2] containing the element 2.\n    count_element_in_list([[1, 2], [3, 4], [5, 6]], 7) = 0\n    Explanation:\n    The edge case checks for an element not present in any sublist. The function should return 0 as no sublist contains the element 7.\n    count_element_in_list([[1, 2], [2, 3], [2, 4, 5]], 2) = 3\n    Explanation:\n    The edge case involves a list with multiple sublists containing the element 2. The function should correctly count all occurrences of the element 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic in the plan is sufficient to handle the edge cases by checking each sublist for the presence of the element.\n", "requirement analysis:\nThe requirement is to create a function that counts the number of sublists containing a particular element. This function should handle large lists efficiently. The function should be clear, concise, and easy to understand. The solution should be optimized for performance to handle large datasets without slowing down the system.\nrequirement pool:\n- The main code should be optimized for performance to handle large datasets efficiently.\n- The function should be clear and easy to understand.\n- Ensure the function can handle large lists without slowing down the system.\n- The function should be tested thoroughly to ensure it works correctly for various inputs.\nTo efficiently count the number of sublists containing a particular element in a large list, we will use Python's built-in functions and itertools to streamline the process. The function will iterate through each sublist, checking if the element is present, and count the occurrences.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sublist': a list within a list\n    'element': an item in a sublist\n    'count': to find how many times an element appears in a list of lists\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests iterating through each sublist and checking if the element is present. This can be done using a nested loop or a list comprehension.\n\n# [edge case] \n    count_element_in_list([[], [], []], 1) = 0\n    Explanation: There are no sublists containing the element 1, so the expected output is 0.\n    count_element_in_list([[1], [2], [3]], 0) = 0\n    Explanation: There are no sublists containing the element 0, so the expected output is 0.\n    count_element_in_list([[1, 2], [2, 3], [3, 4]], 4) = 1\n    Explanation: Only one sublist contains the element 4, which is [3, 4], so the expected output is 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can be used to check for the presence of the element in each sublist.\n", "requirement analysis:\nThe requirement is to create a function that counts the number of sublists containing a specific element. The function should be optimized to handle large lists efficiently. This is crucial for scenarios where large datasets need to be processed quickly and accurately.\nrequirement pool:\n- Implement a function to count elements in sublists\n- Ensure the function is optimized for large datasets\n- Develop a user-friendly interface for easy interaction\n- Include error handling for unexpected inputs\n- Enhance performance benchmarks for large datasets\nTo implement the function efficiently, we will utilize Python's built-in capabilities and leverage the 'collections' module for optimized performance. The function will iterate through each sublist in the provided list, checking if the specified element is present. This approach ensures that the function handles large datasets efficiently without unnecessary overhead.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sublists': means nested lists within a main list\n    'specific element': means a particular element that we are looking for within the sublists\n    'optimized': means the solution should be efficient and perform well with large datasets\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests iterating through each sublist and checking for the presence of the specific element. This can be done using a nested loop or a list comprehension for efficiency.\n\n# [edge case] \n    count_element_in_list([[], [5, 7], [11], [1, 15, 7]], 1) = 1\n    Explanation:\n    The first sublist is empty, so it does not contain the element 1. The remaining sublists each contain the element 1 once.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly handle the case where a sublist is empty, as it will not contribute to the count.\n\n# [core concept]\n    'sublists': means nested lists within a main list\n    'specific element': means a particular element that we are looking for within the sublists\n    'optimized': means the solution should be efficient and perform well with large datasets\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests iterating through each sublist and checking for the presence of the specific element. This can be done using a nested loop or a list comprehension for efficiency.\n\n# [edge case] \n    count_element_in_list([[], [5, 7], [11], [1, 15, 7]], 1) = 1\n    Explanation:\n    The first sublist is empty, so it does not contain the element 1. The remaining sublists each contain the element 1 once.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly handle the case where a sublist is empty, as it will not contribute to the count.\n", "requirement analysis:\nThe requirement is to create a function that counts the number of sublists containing a specific element. The function should be optimized for handling large lists and high numbers of sublists efficiently. This is crucial for performance-sensitive applications.\nrequirement pool:\n- Implement a function to count elements in sublists\n- Ensure the function is optimized for large datasets\n- Develop a user-friendly interface for easy interaction\n- Include detailed documentation and examples for user guidance\nTo implement the function efficiently, we will use Python's built-in functions and libraries. The function will iterate through each sublist in the provided list, checking if the specific element is present. This approach ensures simplicity and leverages Python's performance for list operations. We will also ensure that the function is optimized for large datasets by using list comprehensions and avoiding unnecessary operations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sublists': means that the function should count how many times a specific element appears in each sublist within a main list.\n    Explanation: The requirement is to count the number of sublists that include a specific element. This involves checking each sublist for the presence of the specified element and counting those that contain it.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function should iterate through each sublist in the provided list, check if the specific element is present, and count the occurrences.\n\n# [edge case] \n    count_element_in_list([[], [5, 7], [11], [15, 7]], 1) = 0\n    Explanation: The first sublist is empty, so it does not contain the element 1. Therefore, the expected output is 0.\n    count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 0) = 1\n    Explanation: Only the first sublist contains the element 0, so the expected output is 1.\n    count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 7) = 3\n    Explanation: The element 7 appears in the second, fourth, and fifth positions of the sublists, so the expected output is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can be used to check for the presence of the element in each sublist and count the occurrences.\n", "requirement analysis:\nThe requirement is to create a function that counts the number of sublists containing a specific element. The function should be optimized for handling large lists efficiently. This requirement is crucial for users who need to analyze large datasets quickly and accurately.\nrequirement pool:\n- Implement a function to count elements in sublists\n- Ensure the function is optimized for large datasets\n- Develop a user-friendly interface for easy interaction\n- Include error handling for unexpected inputs\n- Enhance performance with advanced algorithms\nTo implement the function efficiently, we will use Python's built-in capabilities and leverage the power of list comprehensions. This approach will ensure that the function is optimized for large datasets and handles them efficiently. We will also ensure that the function is user-friendly and includes error handling for unexpected inputs.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sublists': means nested lists within a main list\n    'specific element': means a particular element that we are looking for within the sublists\n\n    Explanation: The core concept here is to count the number of sublists that contain a specific element. This involves iterating through each sublist in the main list and checking if the specific element is present.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using list comprehensions for optimization. Here's a detailed logic:\n    1. Define the function `count_element_in_list` with parameters `main_list` and `element`.\n    2. Initialize a counter to keep track of the number of sublists containing the specific element.\n    3. Iterate through each sublist in the `main_list`.\n    4. For each sublist, check if the `element` is in the sublist.\n    5. If the element is found, increment the counter.\n    6. Return the counter after iterating through all sublists.\n\n# [edge case] \n    count_element_in_list([[]], 1) = 0\n    Explanation: The sublist is empty, so the specific element cannot be found, resulting in an expected output of 0.\n    count_element_in_list([[1, 2], [3, 4], [5, 6]], 7) = 0\n    Explanation: The specific element 7 is not present in any of the sublists, so the expected output is 0.\n    count_element_in_list([[1, 2], [1, 3], [1, 4]], 1) = 3\n    Explanation: The specific element 1 is present in all three sublists, so the expected output is 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan already covers the edge cases effectively.\n", "requirement analysis:\nThe requirement is to count occurrences of a specific element across all sublists within a main list. The solution should be optimized for scenarios with extensive list sizes and numerous sublists. This involves iterating through each sublist and counting the occurrences of the specified element. The solution should be efficient and scalable to handle large datasets.\nrequirement pool:\n- Implement a function to count occurrences of a specific element in nested lists\n- Ensure the function is optimized for performance and scalability\n- Improve the readability and maintainability of the code\n- Test the function with various datasets to ensure it handles large and complex lists effectively\nTo implement the function count_element_in_list efficiently, we will utilize Python's built-in functions and libraries. The function will iterate through each sublist in the main list, count the occurrences of the specified element, and return the total count. We will optimize the solution by leveraging Python's list comprehensions and the itertools library to enhance performance.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'count occurrences': means to find how many times a specific element appears in a list of lists.\n    'optimize': means to make the solution efficient and fast for large data sets.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function will iterate through each sublist in the main list, count the occurrences of the specified element, and return the total count. We will optimize the solution by leveraging Python's list comprehensions and the itertools library to enhance performance.\n\n# [edge case] \n    count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) = 3\n    Explanation: The element 1 appears in three sublists: the first, third, and fourth sublists.\n    count_element_in_list([[2, 4], [6, 8], [2, 12], [2, 16, 8]], 2) = 3\n    Explanation: The element 2 appears in three sublists: the first, third, and fourth sublists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will naturally return the correct count for the specified element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will naturally return the correct count for the specified element.\n", "requirement analysis:\nThe requirement is to create a function that counts the occurrences of a specific element in a list of lists. The function should be optimized for handling large datasets efficiently. Clarifications are needed to ensure the function is well-documented and user-friendly.\nrequirement pool:\n- Implement a function to count occurrences of a specific element in a list of lists\n- Ensure the function is optimized for performance with large datasets\n- Provide clear documentation and examples for user understanding\nTo implement the function efficiently, we will use Python's built-in libraries and optimize the counting process. We will flatten the list of lists and then count the occurrences of the specific element using the collections.Counter from the standard library, which is optimized for such tasks.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'count occurrences': means to find how many times a specific element appears in a list of lists.\n    'optimize': means to make the solution efficient in terms of time and space complexity.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function efficiently, we will use Python's built-in libraries and optimize the counting process. We will flatten the list of lists and then count the occurrences of the specific element using the `collections.Counter` from the standard library, which is optimized for such tasks.\n\n# [edge case] \n    count_element_in_list([[], [5, 7], [1, 11], [1, 15, 7]], 1) = 1\n    Explanation: The first sublist is empty, so it does not contribute to the count. The element 1 appears once in the remaining sublists.\n    count_element_in_list([[1, 3], [5, 7], [], [1, 15, 7]], 7) = 2\n    Explanation: The second and last sublists contain the element 7, so the total count is 2.\n    count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 9) = 0\n    Explanation: The element 9 does not appear in any sublist, so the count is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The `collections.Counter` will automatically handle cases where the element is not found by returning 0 for that element.\n", "requirement analysis:\nThe requirement is to count occurrences of a specific element across all sublists within a main list. The solution should be optimized for scenarios with extensive list sizes and numerous sublists. This involves creating an efficient algorithm that can handle large datasets without compromising performance.\nrequirement pool:\n- Implement a function to count occurrences of a specific element in nested lists\n- Ensure the function is optimized for large datasets\n- Provide clear and concise documentation\n- Ensure the function is easily understandable and maintainable\n- Integrate the function into a larger library for easy project integration\nTo implement the function count_element_in_list efficiently, we will use Python's built-in functions and the itertools library. The function will flatten the list of lists and then count the occurrences of the specified element. This approach ensures that the function is optimized for large datasets and can handle extensive list sizes without compromising performance.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'count occurrences': means to find how many times a specific element appears in a list of lists.\n    'efficient': means to optimize the solution for large datasets and numerous sublists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function efficiently, we will use Python's built-in functions and the itertools library. The function will flatten the list of lists and then count the occurrences of the specified element.\n\n# [edge case] \n    count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) = 3\n    Explanation: The element 1 appears in three different sublists: the first, third, and fourth sublists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will correctly count the occurrences of the specified element in the flattened list.\n", "requirement analysis:\nThe requirement is to create a function that counts the number of sublists containing a particular element. This function should handle large lists efficiently. The function should be clear, concise, and easy to understand. The solution should be optimized for performance to handle large datasets without slowing down the system.\nrequirement pool:\n- The main code should be optimized for performance to handle large datasets efficiently.\n- The function should be easy to understand and use.\n- The function should be clear and concise in its implementation.\n- The function should handle edge cases such as empty lists or lists with no matching elements.\nTo efficiently count the number of sublists containing a particular element in a large list, we will use Python's built-in functions and optimize for performance. We will iterate through the list, check each sublist for the presence of the element, and count the occurrences.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sublist': a list within a list\n    'element': an item in a sublist\n    'count': to find how many times an element appears in sublists\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through the main list, check each sublist for the presence of the element, and count the occurrences.\n\n# [edge case] \n    count_element_in_list([[]], 1) = 0\n    Explanation: The sublist is empty, so the element 1 cannot be found.\n    count_element_in_list([[1, 2], [3, 4], [5, 6]], 7) = 0\n    Explanation: The element 7 is not present in any of the sublists.\n    count_element_in_list([[1, 2], [1, 3, 4], [1, 5, 6]], 1) = 3\n    Explanation: The element 1 is found in all three sublists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will correctly handle cases where the list is empty or the element is not present.\n"], "test": ["def check(count_element_in_list):\n\tassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3", "def check(count_element_in_list):\n\tassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3", "def check(count_element_in_list):\n\tassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1", "def check(count_element_in_list):\n\tassert count_element_in_list([[6, 8], [4, 2], [5, 10], [3, 17, 5]], 3) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[2, 1], [1, 4], [4, 11], [2, 14, 12]], 6) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[3, 6], [7, 4], [5, 15], [4, 18, 4]], 3) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[2, 6], [9, 2], [6, 11], [1, 19, 6]], 1) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[1, 4], [4, 3], [1, 16], [6, 15, 9]], 6) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[4, 2], [7, 7], [1, 7], [6, 18, 5]], 1) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[2, 3], [9, 10], [2, 6], [3, 12, 12]], 4) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[4, 4], [4, 11], [4, 14], [6, 19, 4]], 3) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[3, 6], [4, 2], [4, 13], [4, 13, 12]], 2) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[5, 1], [2, 8], [2, 10], [5, 12, 6]], 3) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[1, 7], [2, 10], [6, 13], [2, 16, 8]], 4) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[5, 4], [1, 12], [3, 16], [3, 18, 6]], 2) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[5, 4], [5, 8], [1, 14], [3, 20, 10]], 3) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[3, 4], [5, 7], [1, 14], [5, 20, 11]], 5) == 2", "def check(count_element_in_list):\n\tassert count_element_in_list([[3, 6], [6, 2], [6, 15], [1, 11, 3]], 4) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[2, 7], [3, 7], [1, 16], [3, 10, 3]], 6) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[1, 5], [4, 11], [4, 12], [5, 16, 6]], 1) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[6, 5], [4, 7], [3, 12], [2, 10, 3]], 6) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[2, 3], [5, 11], [6, 13], [6, 13, 12]], 4) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[6, 6], [3, 3], [2, 13], [5, 16, 8]], 5) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[1, 6], [7, 12], [5, 16], [5, 14, 4]], 1) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[6, 8], [9, 6], [1, 9], [2, 10, 2]], 4) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[5, 2], [7, 2], [5, 15], [4, 10, 7]], 4) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[4, 1], [6, 5], [4, 15], [1, 20, 2]], 5) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[1, 1], [7, 7], [4, 7], [2, 15, 6]], 5) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[3, 8], [10, 6], [3, 15], [2, 19, 6]], 6) == 2", "def check(count_element_in_list):\n\tassert count_element_in_list([[5, 5], [3, 11], [3, 15], [3, 10, 8]], 5) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[5, 3], [9, 6], [6, 9], [1, 16, 2]], 3) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[4, 8], [6, 12], [4, 12], [6, 16, 2]], 2) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[3, 1], [2, 10], [1, 11], [4, 15, 9]], 6) == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([[4, 1], [4, 7], [1, 6], [4, 20, 4]], 6) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[2, 2], [5, 2], [4, 13], [6, 15, 6]], 5) == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([[1, 5], [6, 3], [4, 6], [4, 17, 12]], 6) == 2", "def check(count_element_in_list):\n\tassert count_element_in_list([['S', 'M'], ['Z', 'Y'], ['M', 'W', 'U'], ['V', 'Y', 'W']], 'R') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['P', 'I'], ['I', 'F'], ['E', 'O', 'X'], ['D', 'B', 'T']], 'E') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['Y', 'F'], ['A', 'L'], ['Y', 'T', 'V'], ['U', 'D', 'C']], 'Z') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['J', 'Z'], ['L', 'H'], ['D', 'Q', 'I'], ['X', 'P', 'O']], 'X') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['D', 'O'], ['F', 'S'], ['V', 'F', 'U'], ['S', 'H', 'U']], 'J') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['S', 'M'], ['X', 'X'], ['E', 'P', 'Q'], ['P', 'K', 'W']], 'G') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['M', 'A'], ['F', 'V'], ['Y', 'F', 'E'], ['B', 'A', 'H']], 'G') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['R', 'S'], ['C', 'Z'], ['X', 'J', 'V'], ['V', 'H', 'N']], 'C') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['S', 'J'], ['Y', 'Y'], ['D', 'D', 'M'], ['M', 'P', 'R']], 'V') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['C', 'T'], ['U', 'J'], ['E', 'Z', 'S'], ['D', 'E', 'K']], 'X') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['J', 'G'], ['L', 'G'], ['F', 'U', 'C'], ['H', 'I', 'Z']], 'E') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['A', 'B'], ['K', 'H'], ['Z', 'A', 'P'], ['A', 'U', 'L']], 'L') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['R', 'X'], ['K', 'D'], ['I', 'W', 'R'], ['Z', 'X', 'W']], 'K') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['N', 'N'], ['J', 'Q'], ['N', 'K', 'T'], ['H', 'G', 'L']], 'R') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['Z', 'L'], ['H', 'C'], ['J', 'T', 'S'], ['N', 'Z', 'N']], 'E') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['F', 'Z'], ['B', 'E'], ['E', 'A', 'Y'], ['H', 'L', 'K']], 'M') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['G', 'L'], ['C', 'O'], ['Y', 'M', 'K'], ['V', 'C', 'Y']], 'H') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['U', 'X'], ['D', 'W'], ['P', 'G', 'M'], ['F', 'P', 'W']], 'P') == 2", "def check(count_element_in_list):\n\tassert count_element_in_list([['Y', 'Y'], ['A', 'S'], ['K', 'T', 'S'], ['Y', 'B', 'N']], 'H') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['Q', 'Q'], ['G', 'U'], ['W', 'G', 'B'], ['C', 'E', 'K']], 'W') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['G', 'A'], ['R', 'I'], ['C', 'I', 'F'], ['Q', 'G', 'Q']], 'S') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['V', 'Z'], ['F', 'G'], ['O', 'T', 'Z'], ['P', 'E', 'D']], 'S') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['V', 'T'], ['C', 'C'], ['N', 'Z', 'T'], ['U', 'Z', 'X']], 'R') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['X', 'L'], ['D', 'D'], ['L', 'G', 'X'], ['T', 'S', 'P']], 'N') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['L', 'G'], ['N', 'U'], ['C', 'E', 'R'], ['N', 'B', 'O']], 'U') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['N', 'S'], ['P', 'G'], ['X', 'Z', 'O'], ['J', 'T', 'U']], 'L') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['X', 'K'], ['M', 'M'], ['H', 'I', 'F'], ['A', 'Q', 'L']], 'J') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['T', 'Q'], ['I', 'E'], ['Z', 'X', 'W'], ['J', 'X', 'S']], 'R') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['M', 'O'], ['W', 'N'], ['U', 'V', 'D'], ['E', 'H', 'A']], 'Y') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['X', 'O'], ['N', 'K'], ['Y', 'G', 'C'], ['D', 'Z', 'N']], 'R') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['C', 'I'], ['J', 'C'], ['J', 'I', 'K'], ['D', 'F', 'L']], 'B') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['T', 'P'], ['W', 'R'], ['P', 'E', 'K'], ['G', 'G', 'S']], 'P') == 2", "def check(count_element_in_list):\n\tassert count_element_in_list([['R', 'B'], ['E', 'J'], ['A', 'U', 'H'], ['M', 'B', 'D']], 'M') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['S', 'M'], ['N', 'S'], ['Z', 'D', 'E'], ['E', 'C', 'C']], 'V') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['I', 'Q'], ['D', 'B'], ['C', 'C', 'F'], ['D', 'W', 'G']], 'F') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['P', 'S'], ['J', 'T'], ['Q', 'B', 'I'], ['L', 'R', 'K']], 'T') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['C', 'C'], ['V', 'E'], ['C', 'V', 'A'], ['Y', 'A', 'A']], 'K') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['V', 'N'], ['Z', 'R'], ['S', 'Y', 'D'], ['Q', 'H', 'Y']], 'P') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['P', 'B'], ['G', 'I'], ['E', 'L', 'U'], ['X', 'H', 'X']], 'K') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['K', 'L'], ['H', 'Y'], ['U', 'T', 'R'], ['H', 'S', 'H']], 'Z') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['P', 'G'], ['H', 'X'], ['N', 'Z', 'J'], ['P', 'V', 'R']], 'A') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['E', 'Q'], ['R', 'V'], ['T', 'F', 'F'], ['M', 'P', 'L']], 'D') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['X', 'R'], ['P', 'Q'], ['N', 'Q', 'C'], ['L', 'J', 'O']], 'T') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['B', 'I'], ['O', 'N'], ['R', 'U', 'I'], ['U', 'Z', 'Z']], 'Y') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['C', 'Z'], ['Z', 'V'], ['Y', 'L', 'E'], ['O', 'E', 'S']], 'C') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['S', 'T'], ['P', 'H'], ['P', 'U', 'B'], ['L', 'E', 'Z']], 'T') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['Z', 'Q'], ['R', 'I'], ['T', 'L', 'X'], ['B', 'W', 'N']], 'A') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['P', 'R'], ['H', 'B'], ['K', 'X', 'J'], ['W', 'Z', 'U']], 'U') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['P', 'J'], ['G', 'Q'], ['T', 'P', 'Q'], ['N', 'E', 'Z']], 'T') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['Y', 'O'], ['J', 'I'], ['D', 'W', 'Z'], ['Z', 'Y', 'H']], 'L') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['O', 'W'], ['Q', 'V'], ['C', 'Z', 'V'], ['V', 'V', 'V']], 'J') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['K', 'D'], ['W', 'O'], ['V', 'R', 'M'], ['P', 'Q', 'H']], 'K') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['C', 'E'], ['D', 'K'], ['W', 'I', 'Y'], ['W', 'L', 'D']], 'C') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['T', 'P'], ['F', 'O'], ['A', 'D', 'Z'], ['H', 'W', 'X']], 'O') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['Q', 'A'], ['J', 'O'], ['P', 'Y', 'P'], ['H', 'Z', 'N']], 'U') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['F', 'Q'], ['S', 'L'], ['P', 'L', 'Z'], ['F', 'Y', 'P']], 'Z') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['A', 'D'], ['D', 'C'], ['H', 'D', 'H'], ['B', 'T', 'E']], 'Y') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['M', 'W'], ['M', 'S'], ['L', 'O', 'C'], ['X', 'X', 'M']], 'E') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['Q', 'A'], ['H', 'C'], ['X', 'V', 'J'], ['M', 'J', 'B']], 'P') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['M', 'A'], ['F', 'T'], ['C', 'E', 'G'], ['P', 'O', 'C']], 'C') == 2", "def check(count_element_in_list):\n\tassert count_element_in_list([['F', 'F'], ['O', 'I'], ['S', 'F', 'M'], ['Y', 'R', 'F']], 'D') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['O', 'U'], ['K', 'R'], ['Z', 'O', 'A'], ['A', 'M', 'O']], 'H') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['Q', 'R'], ['U', 'N'], ['V', 'N', 'E'], ['L', 'Y', 'A']], 'S') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['Z', 'K'], ['M', 'T'], ['T', 'G', 'X'], ['Y', 'L', 'N']], 'Z') == 1", "def check(count_element_in_list):\n\tassert count_element_in_list([['A', 'P'], ['J', 'P'], ['P', 'D', 'O'], ['K', 'C', 'R']], 'Q') == 0", "def check(count_element_in_list):\n\tassert count_element_in_list([['Y', 'Y'], ['Z', 'P'], ['T', 'C', 'C'], ['Z', 'G', 'A']], 'T') == 1"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9902, 0.9902, 0.9902, 1.0], "pass_results": [true, true, true, true, true, true, false, false, false, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 101, 101, 101, 102], "completion": "from typing import List\n## main.py\n\ndef count_element_in_list(lst: list, element: any) -> int:\n    \"\"\"\n    Counts the number of sublists containing a particular element in a list of sublists.\n\n    Args:\n        lst (list): A list of sublists.\n        element (any): The element to count occurrences of within the sublists.\n\n    Returns:\n        int: The count of sublists containing the element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n", "passed": true, "pass": true, "pass_num": 7, "round": 154, "mutate_method": "add_1_sentence_at_end", "parent_index": 154}
