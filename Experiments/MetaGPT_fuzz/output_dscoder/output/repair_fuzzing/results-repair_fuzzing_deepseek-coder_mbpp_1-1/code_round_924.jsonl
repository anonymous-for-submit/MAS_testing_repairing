{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 606, "prompt": "Create a function that transforms degrees into radians. Make sure to check the input to manage unusual cases. Consider returning an error message for non-numeric inputs. Ensure your solution handles edge cases gracefully to maintain accuracy in conversions.", "code": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian", "test_imports": [], "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(92) == 1.6057029118347832", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(62) == 1.0821041362364843", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(59) == 1.0297442586766545", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(125) == 2.181661564992912", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254"], "entry_point": "radian_degree", "repair_prompt": ["Create a function radian_degree that transforms degrees into radians. Make sure to check the input to manage unusual cases. Consider returning an error message for non-numeric inputs. Ensure your solution handles edge cases gracefully to maintain accuracy in conversions.\nradian_degree(90)==1.5707963267948966\n", " Create a function radian_degree that converts degrees to radians, but first, ensure the input is numeric. If the input is not a number, return an error message. Also, handle edge cases to ensure accurate conversions.\nradian_degree(90)==1.5707963267948966\n", " Create a function radian_degree to convert degrees to radians, checking inputs for non-numeric values and handling edge cases for accuracy in conversions.\nradian_degree(90)==1.5707963267948966\n"], "completions": ["from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n\n    Raises:\n        ValueError: If the input is not a number.\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise ValueError(\"Input must be a number.\")\n    \n    if degrees < -360 or degrees >= 360:\n        raise ValueError(\"Degrees must be within the range of -360 to 360 for a full circle.\")\n    \n    return math.radians(degrees)\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n\n    Raises:\n        ValueError: If the input is not a number.\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise ValueError('Error: Input must be a number')\n    \n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n    \n    Args:\n        degrees (float): The angle in degrees.\n        \n    Returns:\n        float: The angle in radians.\n        str: Error message if the input is not a number.\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        return \"Error: Input must be numeric.\"\n    \n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: (float or int)) -> (float or str):\n    \"\"\"\n    Convert degrees to radians.\n    \n    Args:\n        degrees (float or int): The angle in degrees.\n    \n    Returns:\n        float or str: The angle in radians if the input is numeric, otherwise an error message.\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        return \"Error: Input must be numeric\"\n    \n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n    \n    Args:\n        degrees (float): The angle in degrees.\n        \n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        return \"Error: Input must be numeric.\"\n    \n    try:\n        radians = math.radians(degrees)\n        return radians\n    except ValueError:\n        return \"Error: Input must be numeric.\"\n\n# Example usage:\n# print(radian_degree(90))  # Should return the radians equivalent of 90 degrees\n# print(radian_degree('90'))  # Should return \"Error: Input must be numeric.\"\n", "from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n    \n    Args:\n        degrees (float): The angle in degrees.\n        \n    Returns:\n        float: The angle in radians.\n        \n    Raises:\n        ValueError: If the input is not a number.\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise ValueError(\"Error: Input must be a number.\")\n    \n    return math.radians(degrees)\n\n# Example usage:\n# print(radian_degree(90))  # Output: 1.5707963267948966\n# print(radian_degree('90'))  # Raises ValueError: Error: Input must be a number.\n", "from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n\n    Raises:\n        ValueError: If the input is not a number.\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise ValueError(\"Input must be a number\")\n    \n    return math.radians(degrees)\n", "from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n\n    Raises:\n        ValueError: If the input is not a number.\n        ValueError: If the input degree value is extremely large or small.\n    \"\"\"\n    # Check if the input is a number\n    if not isinstance(degrees, (int, float)):\n        raise ValueError(\"Input must be a number.\")\n    \n    # Check for edge cases of extremely large or small values\n    if degrees < -1e9 or degrees > 1e9:\n        raise ValueError(\"Input degree value is extremely large or small.\")\n    \n    # Convert degrees to radians\n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n\n    Raises:\n        ValueError: If the input is not a numeric value.\n    \"\"\"\n    try:\n        # Check if the input is a number\n        if not isinstance(degrees, (int, float)):\n            raise ValueError(\"Input should be a numeric value.\")\n        \n        # Convert degrees to radians\n        radians = degrees * math.pi / 180\n        return radians\n    except ValueError as e:\n        raise ValueError(str(e))\n", "from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n\n    Raises:\n        ValueError: If the input is not a number.\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise ValueError(\"Error: Input must be a number\")\n    \n    return math.radians(degrees)\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that converts degrees to radians. The function should handle non-numeric inputs by returning an error message. The solution should be accurate and handle edge cases gracefully. The product should be user-friendly and provide clear error messages for invalid inputs.\nrequirement pool:\n- The main code should accurately convert degrees to radians.\n- The function should return an error message for non-numeric inputs.\n- Ensure the solution handles edge cases gracefully.\n- Provide a user-friendly interface for easy conversion.\n- Create clear error messages for invalid inputs.\nTo create a function that converts degrees to radians in Python, we will use the math library which provides a convenient method for this conversion. We will also include error handling to manage non-numeric inputs by raising a ValueError. The function will ensure that the input is a number and then perform the conversion. The solution will be designed to handle edge cases gracefully, ensuring that the conversion remains accurate even for extreme values.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'degree to radian conversion': This involves understanding the mathematical relationship between degrees and radians, which is a fundamental concept in trigonometry.\n\n    Explanation: Degrees and radians are both units to measure angles. One full circle is 360 degrees or 2\u03c0 radians. The conversion between them is done using the formula: radians = degrees * (\u03c0 / 180).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `radian_degree(degrees)`, we need to:\n    1. Check if the input is a number.\n    2. If the input is a number, convert it from degrees to radians using the formula mentioned above.\n    3. Return the result.\n    4. If the input is not a number, raise a `ValueError` with an appropriate message.\n\n# [edge case] \n    radian_degree('90') = ValueError\n    Explanation: The input '90' is a string, not a number, so the function should raise a ValueError indicating that the input must be numeric.\n    radian_degree(-450) = -7.853981633974483\n    Explanation: The input -450 is a valid number but is less than the minimum expected value for a full circle (-360 degrees). The function should handle this edge case gracefully by performing the conversion correctly.\n    radian_degree(0) = 0\n    Explanation: The input 0 is a valid number and represents 0 degrees, which should convert to 0 radians.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the input is less than the minimum expected value for a full circle.\n        if degrees < -360 or degrees >= 360:\n            raise ValueError(\"Degrees must be within the range of -360 to 360 for a full circle.\")\n\n    This additional check ensures that the function only accepts values within the expected range for a full circle, maintaining the accuracy and correctness of the conversion.\n", "requirement analysis:\nThe primary requirement is to create a function that accurately converts degrees to radians. Secondary requirements include error handling for non-numeric inputs and providing clear error messages. The function should also handle edge cases gracefully to ensure accuracy in conversions.\nrequirement pool:\n- The main code should accurately convert degrees to radians\n- Implement error handling for non-numeric inputs\n- Ensure graceful handling of edge cases\n- Provide clear error messages for invalid inputs\n- Optimize the conversion process for speed and efficiency\nTo create a function that accurately converts degrees to radians, we will use Python's built-in capabilities and ensure robust error handling. The function will first check if the input is a numeric value. If the input is valid, it will perform the conversion using the formula radians = degrees * (\u03c0 / 180). For non-numeric inputs, the function will return an error message.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'degree to radian conversion': This involves understanding the mathematical formula for converting degrees to radians and applying it in a programmatic manner.\n    Explanation: Degrees and radians are both units of angular measurement. One full circle is 360 degrees or 2\u03c0 radians. The conversion formula is radians = degrees * (\u03c0 / 180).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function should first check if the input is a number. If it's not, return an error message. If it is a number, use the formula radians = degrees * (\u03c0 / 180) to convert it.\n\n# [edge case] \n    radian_degree('90') = 'Error: Input must be a number'\n    Explanation: The input '90' is a string, not a number, so the function should return an error message.\n    radian_degree(-45) = -0.7853981633974483\n    Explanation: Negative degrees are valid, and the function should convert them to radians using the formula.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case of non-numeric inputs.\n        if not isinstance(degrees, (int, float)):\n            return 'Error: Input must be a number'\n        (other code)\n\nThis extra code ensures that the function only attempts to convert numeric inputs to radians, providing a safeguard against errors.\n", "requirement analysis:\nThe requirement is to create a function that converts degrees to radians. The function should handle various inputs, including edge cases, and return an error message for non-numeric inputs. The solution should maintain high accuracy in conversions. The user experience should be user-friendly, with clear error messages and precise conversions.\nrequirement pool:\n- The main code should accurately convert degrees to radians\n- The function should handle edge cases gracefully\n- The function should return an error message for non-numeric inputs\n- Ensure the user experience is user-friendly\n- Provide clear error messages for invalid inputs\nTo create a function that converts degrees to radians in Python, we will use the math library which provides a convenient method for this conversion. We will also include error handling to manage non-numeric inputs. The function will check if the input is a number and then perform the conversion. If the input is not a number, it will return an error message.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'degree to radian conversion': This involves understanding the mathematical relationship between degrees and radians, which is given by the formula: radians = degrees * (\u03c0 / 180).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if the input is a number using the `isinstance` function.\n    (2) If the input is a number, convert it from degrees to radians using the formula mentioned above.\n    (3) If the input is not a number, return an error message indicating the input must be numeric.\n\n# [edge case] \n    radian_degree('90') = \"Error: Input must be numeric.\"\n    Explanation: The input is a string, which is not a numeric type, so the function should return an error message.\n    radian_degree(None) = \"Error: Input must be numeric.\"\n    Explanation: The input is `None`, which is not a numeric type, so the function should return an error message.\n    radian_degree([]) = \"Error: Input must be numeric.\"\n    Explanation: The input is an empty list, which is not a numeric type, so the function should return an error message.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not isinstance(degrees, (int, float)):\n            return \"Error: Input must be numeric.\"\n        (other code)\n", "requirement analysis:\nThe requirement is to create a function that converts degrees to radians, ensuring the input is numeric. If the input is not a number, it should return an error message. The function should also handle edge cases to ensure accurate conversions. This requirement is clear and specific, aligning well with the product goals of accuracy and reliability.\nrequirement pool:\n- Implement the radian_degree function to accurately convert degrees to radians.\n- Ensure the function handles non-numeric inputs by returning an error message.\n- Test the function for edge cases to ensure high accuracy in conversions.\n- Design a user-friendly interface for easy interaction.\n- Include error handling for unexpected inputs to enhance reliability.\nWe will use Python's built-in capabilities to create a function that converts degrees to radians. The function will first check if the input is numeric. If the input is not a number, it will return an error message. To ensure accuracy, we will use the mathematical constant pi from the math module.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'numeric input': The function should only accept inputs that can be converted to a number.\n    'degree to radian conversion': The conversion formula involves multiplying the degree value by \u03c0/180.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if the input is numeric using the `isinstance` function.\n    (2) If the input is numeric, convert the input from degrees to radians using the formula radians = degrees * (\u03c0 / 180).\n    (3) If the input is not numeric, return an error message.\n\n# [edge case] \n    radian_degree('90') = \"Error: Input must be numeric\"\n    Explanation: The input is a string, not a number, so the function should return an error message.\n    radian_degree(None) = \"Error: Input must be numeric\"\n    Explanation: The input is None, which is not a number, so the function should return an error message.\n    radian_degree(0) = 0\n    Explanation: The input is zero, which is a valid number for conversion, and the function should return the correct radian value.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not isinstance(degrees, (int, float)):\n            return \"Error: Input must be numeric\"\n        from math import pi\n        radians = degrees * (pi / 180)\n        return radians\n", "requirement analysis:\nThe requirement is to create a function that converts degrees to radians. The function should first check if the input is numeric. If not, it should return an error message. The conversion should be accurate and handle edge cases like 90 degrees, which should convert to approximately 1.5707963267948966 radians. The product should also be user-friendly and provide clear error messages.\nrequirement pool:\n- The main code should accurately convert degrees to radians.\n- The function should handle non-numeric inputs and return an error message.\n- Ensure the conversion is accurate for common angles like 90 degrees.\n- Provide a user-friendly interface for easy use.\n- Implement error handling to manage non-numeric inputs gracefully.\nTo create a function that converts degrees to radians in Python, we will use the math library which provides a convenient method for this conversion. The function will first check if the input is numeric. If the input is not a number, it will return an error message. The function will also handle edge cases to ensure accurate conversions.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'numeric input': The function should only accept inputs that can be converted to a number.\n    'degree to radian conversion': The conversion formula is radians = degrees * (pi / 180).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if the input is numeric using the `isinstance` function.\n    (2) If the input is numeric, convert the input from degrees to radians using the formula radians = degrees * (pi / 180).\n    (3) If the input is not numeric, return an error message.\n    (4) Handle edge cases such as very large or very small degree values to ensure accurate conversions.\n\n# [edge case] \n    radian_degree('90') = \"Error: Input must be numeric.\"\n    Explanation: The input '90' is a string, not a number, so the function should return an error message.\n    radian_degree(None) = \"Error: Input must be numeric.\"\n    Explanation: The input None is not a number, so the function should return an error message.\n    radian_degree(float('inf')) = \"Error: Input must be numeric.\"\n    Explanation: The input float('inf') is not a valid number, so the function should return an error message.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not isinstance(degree, (int, float)):\n            return \"Error: Input must be numeric.\"\n", "requirement analysis:\nThe requirement is to create a function that converts degrees to radians. The function should first check if the input is numeric. If not, it should return an error message. The conversion should be accurate and handle edge cases like 90 degrees accurately.\nrequirement pool:\n- The main code should accurately convert degrees to radians.\n- The function should handle non-numeric inputs and return an error message.\n- Ensure the conversion is accurate for common values like 90 degrees.\n- Implement user-friendly error handling.\n- Design a simple and clear user interface.\nTo create a function that converts degrees to radians in Python, we will use the math library which provides a convenient method for this conversion. The function will first check if the input is numeric. If the input is not a number, it will return an error message. We will also handle edge cases to ensure accurate conversions, particularly for common values like 90 degrees.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'numeric input': The function should only accept inputs that can be converted to numbers (integers or floats).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if the input is numeric using the `isinstance` function.\n    (2) If the input is numeric, convert the degrees to radians using the `math.radians` function.\n    (3) If the input is not numeric, return an error message.\n    (4) Handle edge cases for common values like 90 degrees to ensure accurate conversions.\n\n# [edge case] \n    radian_degree('90') = \"Error: Input must be a number.\"\n    Explanation: The input '90' is a string, not a number, so the function should return an error message.\n    radian_degree(None) = \"Error: Input must be a number.\"\n    Explanation: The input None is not a number, so the function should return an error message.\n    radian_degree(0) = 0.0\n    Explanation: 0 degrees is equivalent to 0 radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The function already checks if the input is numeric and returns an error message for non-numeric inputs.\n", "requirement analysis:\nThe primary requirement is to create a function that accurately converts degrees to radians. Additionally, the function must handle non-numeric inputs gracefully by raising an error. The product should also be user-friendly, providing clear and concise feedback to the user.\nrequirement pool:\n- Implement a function to convert degrees to radians\n- Handle non-numeric inputs by raising an error\n- Ensure high accuracy in degree-to-radian conversions\n- Design a user-friendly interface for easy interaction\n- Provide clear error messages for non-numeric inputs\nTo implement the radian_degree function, we will use Python's built-in capabilities along with the math library to handle the conversion and validation. The function will check if the input is a number and then perform the conversion. If the input is not a number, it will raise a ValueError.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'degree to radian conversion': This involves understanding the mathematical relationship between degrees and radians, specifically the conversion factor from degrees to radians (1 degree = \u03c0/180 radians).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function should first check if the input is a number. If not, it should raise a ValueError. If the input is a number, it should convert the input from degrees to radians using the formula radians = degrees * (\u03c0/180).\n\n# [edge case] \n    radian_degree('90') = ValueError\n    Explanation: The input is a string, which is not a numeric value, so the function should raise a ValueError to indicate the input is not valid.\n    radian_degree(-45) = -0.7853981633974483\n    Explanation: Negative degrees should be converted to radians, and the result should reflect the correct conversion.\n    radian_degree(360) = 6.283185307179586\n    Explanation: The input is 360 degrees, which should convert to 2\u03c0 radians, reflecting a full circle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function can check if the input is a number using the isinstance function and then perform the conversion.\n", "requirement analysis:\nThe function must accurately convert degrees to radians. It must also validate inputs to ensure they are numeric. Handling edge cases such as extremely large or small values is crucial for robustness. Clear error messages are necessary for users to understand what went wrong when inputs are invalid.\nrequirement pool:\n- The main code must accurately convert degrees to radians.\n- Input validation must ensure only numeric values are accepted.\n- Edge cases must be handled to ensure accuracy and robustness.\n- Error messages must be clear and user-friendly.\n- The UI must be simple and intuitive to enhance user experience.\nTo create a function that accurately converts degrees to radians while handling edge cases and providing clear error messages for invalid inputs, we will use Python's built-in capabilities and the math library. The function will validate inputs to ensure they are numeric, and it will handle edge cases such as extremely large or small values.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'degree to radian conversion': This involves understanding the mathematical relationship between degrees and radians, which is a fundamental concept in trigonometry.\n\n    Explanation: Degrees and radians are both units to measure angles. One full circle is 360 degrees or 2\u03c0 radians. Converting between the two involves using the conversion factor (\u03c0 radians = 180 degrees).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the conversion, we will:\n    1. Check if the input is a number.\n    2. Use the conversion formula: radians = degrees * (\u03c0 / 180).\n    3. Handle edge cases such as extremely large or small degree values that might lead to inaccuracies in the conversion due to floating-point precision issues.\n\n# [edge case] \n    radian_degree(0) = 0\n    Explanation: 0 degrees is equal to 0 radians.\n    radian_degree(360) = 6.283185307179586\n    Explanation: 360 degrees is equal to 2\u03c0 radians.\n    radian_degree('90') = Error\n    Explanation: The input is a string, which is not a valid numeric input for this function.\n\n# [extra code for edge case]\n    We need extra code to handle non-numeric inputs.\n        if not isinstance(degrees, (int, float)):\n            raise ValueError(\"Input must be a number.\")\n        (other code)\n\n    Additionally, to handle edge cases for extremely large or small values:\n        import math\n        if degrees < -1e9 or degrees > 1e9:\n            warnings.warn(\"Extremely large or small values might lead to precision issues.\")\n        (other code)\n", "requirement analysis:\nThe requirement is to create a function that converts degrees to radians. The function should check for non-numeric inputs and handle edge cases to ensure accurate conversions. The output for 90 degrees should be 1.5707963267948966.\nrequirement pool:\n- The main code should accurately convert degrees to radians.\n- The function should handle non-numeric inputs gracefully.\n- Ensure the conversion is accurate to at least 15 decimal places.\n- Include a simple error message for non-numeric inputs.\n- Optimize the function for speed and efficiency.\nWe will use Python's built-in math library to handle the conversion from degrees to radians. To handle non-numeric inputs, we will use type checking with a simple try-except block. This approach ensures accuracy and efficiency in the conversion process while providing clear error messages for non-numeric inputs.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'degree to radian conversion': This involves understanding the mathematical relationship between degrees and radians, specifically the formula for conversion (radians = degrees * \u03c0/180).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using Python's math library to handle the conversion. The steps include:\n    1. Import the math library.\n    2. Define the function `radian_degree` that takes a single argument (degrees).\n    3. Use a try-except block to check if the input is numeric.\n    4. If numeric, convert the degrees to radians using the formula and return the result.\n    5. If not numeric, raise a ValueError with a message indicating the input should be numeric.\n\n# [edge case] \n    radian_degree('90') = ValueError\n    Explanation: The input '90' is a string, not a numeric value, so the function raises a ValueError indicating the input should be numeric.\n    radian_degree(0) = 0\n    Explanation: 0 degrees is equivalent to 0 radians.\n    radian_degree(360) = 6.283185307179586\n    Explanation: 360 degrees is equivalent to 2\u03c0 radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case since the conversion logic is straightforward and the edge cases are handled by the type checking in the try-except block.\n", "requirement analysis:\nThe requirement is to create a function that converts degrees to radians. The function should handle various inputs, including edge cases like non-numeric inputs, and return appropriate error messages. The accuracy of the conversion should be maintained, and the user experience should be considered for clarity and ease of use.\nrequirement pool:\n- The main code should accurately convert degrees to radians.\n- The function should handle and validate inputs to ensure they are numeric.\n- The system should return clear error messages for non-numeric inputs.\n- The conversion should be precise and free of errors.\n- The user interface should be simple and intuitive.\nTo create a function that converts degrees to radians in Python, we will use the math library which provides a convenient method for this conversion. We will also include input validation to ensure the input is numeric and handle any non-numeric inputs by returning an error message. The function will be designed to be simple and user-friendly, ensuring clear and precise conversions.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'degree to radian conversion': This involves understanding the mathematical relationship between degrees and radians, which is given by the formula: radians = degrees * (\u03c0 / 180).\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Import the math library to use the pi constant and the radians function.\n    (2) Define the function radian_degree with one parameter, degrees.\n    (3) Check if the input is a number using the isinstance function.\n    (4) If the input is not a number, return an error message.\n    (5) If the input is a number, convert it to radians using the formula and return the result.\n\n# [edge case] \n    radian_degree('90') = 'Error: Input must be a number'\n    Explanation: The input '90' is a string, not a number, so the function should return an error message.\n    radian_degree(None) = 'Error: Input must be a number'\n    Explanation: The input None is not a number, so the function should return an error message.\n    radian_degree(0) = 0\n    Explanation: Zero degrees is zero radians, so the expected output is 0.\n\n# [extra code for edge case]\n    Extra code are needed to handle the edge case.\n        if not isinstance(degrees, (int, float)):\n            return 'Error: Input must be a number'\n        (other code)\n"], "test": ["def check(radian_degree):\n\tassert radian_degree(90)==1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(60)==1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(120)==2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(92) == 1.6057029118347832", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(62) == 1.0821041362364843", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(59) == 1.0297442586766545", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(125) == 2.181661564992912", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8039, 1.0], "pass_results": [true, true, true, true, true, true, true, true, false, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 82, 102], "completion": "from typing import List\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Converts degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n\n    Raises:\n        ValueError: If the input is not a number.\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise ValueError(\"Error: Input must be a number\")\n    \n    return math.radians(degrees)\n", "passed": true, "pass": true, "pass_num": 9, "round": 924, "mutate_method": "add_1_sentence_at_end", "parent_index": 684}
