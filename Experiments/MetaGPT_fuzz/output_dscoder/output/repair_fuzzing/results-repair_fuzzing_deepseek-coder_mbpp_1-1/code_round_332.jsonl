{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 237, "prompt": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.", "code": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ", "test_imports": [], "test_list": ["assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}", "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}", "assert check_occurences([(1, 6), (5, 7), (2, 4), (2, 5), (9, 2)]) == {(1, 6): 1, (5, 7): 1, (2, 4): 1, (2, 5): 1, (2, 9): 1}", "assert check_occurences([(2, 2), (2, 4), (4, 8), (8, 4), (7, 1)]) == {(2, 2): 1, (2, 4): 1, (4, 8): 2, (1, 7): 1}", "assert check_occurences([(8, 2), (4, 3), (5, 8), (5, 1), (8, 4)]) == {(2, 8): 1, (3, 4): 1, (5, 8): 1, (1, 5): 1, (4, 8): 1}", "assert check_occurences([(1, 2), (2, 6), (6, 5), (4, 6), (6, 4)]) == {(1, 2): 1, (2, 6): 1, (5, 6): 1, (4, 6): 2}", "assert check_occurences([(2, 4), (4, 8), (1, 10), (2, 5), (3, 2)]) == {(2, 4): 1, (4, 8): 1, (1, 10): 1, (2, 5): 1, (2, 3): 1}", "assert check_occurences([(1, 6), (5, 6), (2, 7), (2, 3), (9, 7)]) == {(1, 6): 1, (5, 6): 1, (2, 7): 1, (2, 3): 1, (7, 9): 1}", "assert check_occurences([(3, 2), (3, 3), (7, 8), (5, 1), (6, 6)]) == {(2, 3): 1, (3, 3): 1, (7, 8): 1, (1, 5): 1, (6, 6): 1}", "assert check_occurences([(8, 2), (2, 1), (1, 6), (9, 4), (6, 2)]) == {(2, 8): 1, (1, 2): 1, (1, 6): 1, (4, 9): 1, (2, 6): 1}", "assert check_occurences([(3, 1), (2, 5), (3, 5), (8, 3), (11, 5)]) == {(1, 3): 1, (2, 5): 1, (3, 5): 1, (3, 8): 1, (5, 11): 1}", "assert check_occurences([(2, 6), (4, 1), (1, 4), (8, 1), (9, 1)]) == {(2, 6): 1, (1, 4): 2, (1, 8): 1, (1, 9): 1}", "assert check_occurences([(3, 2), (3, 3), (3, 7), (3, 1), (5, 8)]) == {(2, 3): 1, (3, 3): 1, (3, 7): 1, (1, 3): 1, (5, 8): 1}", "assert check_occurences([(6, 5), (2, 4), (2, 7), (9, 7), (6, 3)]) == {(5, 6): 1, (2, 4): 1, (2, 7): 1, (7, 9): 1, (3, 6): 1}", "assert check_occurences([(3, 1), (5, 4), (1, 4), (8, 4), (5, 5)]) == {(1, 3): 1, (4, 5): 1, (1, 4): 1, (4, 8): 1, (5, 5): 1}", "assert check_occurences([(5, 3), (4, 6), (4, 5), (10, 3), (11, 3)]) == {(3, 5): 1, (4, 6): 1, (4, 5): 1, (3, 10): 1, (3, 11): 1}", "assert check_occurences([(4, 4), (1, 7), (3, 8), (4, 3), (5, 7)]) == {(4, 4): 1, (1, 7): 1, (3, 8): 1, (3, 4): 1, (5, 7): 1}", "assert check_occurences([(8, 5), (6, 6), (2, 2), (9, 7), (3, 4)]) == {(5, 8): 1, (6, 6): 1, (2, 2): 1, (7, 9): 1, (3, 4): 1}", "assert check_occurences([(5, 4), (1, 7), (6, 10), (4, 5), (9, 1)]) == {(4, 5): 2, (1, 7): 1, (6, 10): 1, (1, 9): 1}", "assert check_occurences([(5, 1), (2, 1), (4, 3), (5, 3), (2, 5)]) == {(1, 5): 1, (1, 2): 1, (3, 4): 1, (3, 5): 1, (2, 5): 1}", "assert check_occurences([(3, 2), (1, 6), (1, 4), (10, 6), (9, 2)]) == {(2, 3): 1, (1, 6): 1, (1, 4): 1, (6, 10): 1, (2, 9): 1}", "assert check_occurences([(8, 4), (5, 3), (1, 5), (1, 3), (11, 7)]) == {(4, 8): 1, (3, 5): 1, (1, 5): 1, (1, 3): 1, (7, 11): 1}", "assert check_occurences([(3, 3), (3, 5), (6, 8), (1, 4), (11, 2)]) == {(3, 3): 1, (3, 5): 1, (6, 8): 1, (1, 4): 1, (2, 11): 1}", "assert check_occurences([(2, 1), (1, 2), (1, 4), (1, 7), (3, 7)]) == {(1, 2): 2, (1, 4): 1, (1, 7): 1, (3, 7): 1}", "assert check_occurences([(2, 1), (3, 8), (3, 10), (7, 3), (7, 6)]) == {(1, 2): 1, (3, 8): 1, (3, 10): 1, (3, 7): 1, (6, 7): 1}", "assert check_occurences([(7, 6), (6, 5), (6, 4), (5, 3), (10, 3)]) == {(6, 7): 1, (5, 6): 1, (4, 6): 1, (3, 5): 1, (3, 10): 1}", "assert check_occurences([(5, 5), (1, 7), (2, 1), (1, 1), (11, 1)]) == {(5, 5): 1, (1, 7): 1, (1, 2): 1, (1, 1): 1, (1, 11): 1}", "assert check_occurences([(5, 4), (2, 8), (7, 5), (9, 3), (3, 2)]) == {(4, 5): 1, (2, 8): 1, (5, 7): 1, (3, 9): 1, (2, 3): 1}", "assert check_occurences([(5, 4), (4, 7), (3, 9), (1, 6), (10, 2)]) == {(4, 5): 1, (4, 7): 1, (3, 9): 1, (1, 6): 1, (2, 10): 1}", "assert check_occurences([(5, 6), (4, 3), (5, 9), (8, 7), (2, 7)]) == {(5, 6): 1, (3, 4): 1, (5, 9): 1, (7, 8): 1, (2, 7): 1}", "assert check_occurences([(4, 5), (6, 8), (5, 9), (7, 2), (2, 3)]) == {(4, 5): 1, (6, 8): 1, (5, 9): 1, (2, 7): 1, (2, 3): 1}", "assert check_occurences([(1, 2), (3, 3), (7, 10), (1, 2), (4, 6)]) == {(1, 2): 2, (3, 3): 1, (7, 10): 1, (4, 6): 1}", "assert check_occurences([(6, 3), (1, 5), (3, 3), (9, 1), (6, 6)]) == {(3, 6): 1, (1, 5): 1, (3, 3): 1, (1, 9): 1, (6, 6): 1}", "assert check_occurences([(2, 5), (6, 5), (2, 9), (8, 1), (5, 6)]) == {(2, 5): 1, (5, 6): 2, (2, 9): 1, (1, 8): 1}", "assert check_occurences([(2, 6), (4, 5), (6, 4), (4, 1), (10, 1)]) == {(2, 6): 1, (4, 5): 1, (4, 6): 1, (1, 4): 1, (1, 10): 1}", "assert check_occurences([(6, 3), (4, 4), (7, 2), (10, 8), (10, 3)]) == {(3, 6): 1, (4, 4): 1, (2, 7): 1, (8, 10): 1, (3, 10): 1}", "assert check_occurences([(2, 4), (3, 9), (7, 6), (10, 4), (11, 8)]) == {(2, 4): 1, (3, 9): 1, (6, 7): 1, (4, 10): 1, (8, 11): 1}", "assert check_occurences([(3, 7), (2, 4), (2, 2), (9, 5), (8, 6)]) == {(3, 7): 1, (2, 4): 1, (2, 2): 1, (5, 9): 1, (6, 8): 1}", "assert check_occurences([(9, 1), (7, 5), (8, 9), (5, 1), (4, 8)]) == {(1, 9): 1, (5, 7): 1, (8, 9): 1, (1, 5): 1, (4, 8): 1}", "assert check_occurences([(4, 5), (2, 7), (7, 3), (10, 8), (10, 4)]) == {(4, 5): 1, (2, 7): 1, (3, 7): 1, (8, 10): 1, (4, 10): 1}", "assert check_occurences([(2, 4), (2, 9), (1, 9), (3, 8), (6, 7)]) == {(2, 4): 1, (2, 9): 1, (1, 9): 1, (3, 8): 1, (6, 7): 1}", "assert check_occurences([(8, 6), (2, 7), (8, 3), (10, 2), (3, 4)]) == {(6, 8): 1, (2, 7): 1, (3, 8): 1, (2, 10): 1, (3, 4): 1}", "assert check_occurences([(9, 7), (5, 5), (7, 8), (10, 2), (7, 4)]) == {(7, 9): 1, (5, 5): 1, (7, 8): 1, (2, 10): 1, (4, 7): 1}", "assert check_occurences([(8, 3), (5, 8), (6, 10), (8, 4), (8, 3)]) == {(3, 8): 2, (5, 8): 1, (6, 10): 1, (4, 8): 1}", "assert check_occurences([(6, 7), (5, 9), (1, 1), (2, 1), (9, 7)]) == {(6, 7): 1, (5, 9): 1, (1, 1): 1, (1, 2): 1, (7, 9): 1}", "assert check_occurences([(8, 7), (5, 6), (3, 10), (1, 2), (9, 8)]) == {(7, 8): 1, (5, 6): 1, (3, 10): 1, (1, 2): 1, (8, 9): 1}", "assert check_occurences([(2, 5), (3, 4), (8, 4), (4, 8), (2, 4)]) == {(2, 5): 1, (3, 4): 1, (4, 8): 2, (2, 4): 1}", "assert check_occurences([(9, 7), (4, 4), (8, 3), (1, 1), (4, 8)]) == {(7, 9): 1, (4, 4): 1, (3, 8): 1, (1, 1): 1, (4, 8): 1}", "assert check_occurences([(5, 5), (7, 9), (8, 1), (4, 1), (4, 4)]) == {(5, 5): 1, (7, 9): 1, (1, 8): 1, (1, 4): 1, (4, 4): 1}", "assert check_occurences([(2, 4), (2, 4), (1, 5), (7, 5), (2, 6)]) == {(2, 4): 2, (1, 5): 1, (5, 7): 1, (2, 6): 1}", "assert check_occurences([(6, 7), (2, 7), (8, 1), (9, 4), (2, 7)]) == {(6, 7): 1, (2, 7): 2, (1, 8): 1, (4, 9): 1}", "assert check_occurences([(8, 4), (7, 1), (3, 11), (9, 4), (6, 8)]) == {(4, 8): 1, (1, 7): 1, (3, 11): 1, (4, 9): 1, (6, 8): 1}", "assert check_occurences([(2, 4), (7, 6), (3, 1), (7, 4), (3, 6)]) == {(2, 4): 1, (6, 7): 1, (1, 3): 1, (4, 7): 1, (3, 6): 1}", "assert check_occurences([(8, 3), (1, 8), (8, 3), (9, 5), (12, 8)]) == {(3, 8): 2, (1, 8): 1, (5, 9): 1, (8, 12): 1}", "assert check_occurences([(8, 6), (3, 8), (3, 3), (7, 5), (9, 6)]) == {(6, 8): 1, (3, 8): 1, (3, 3): 1, (5, 7): 1, (6, 9): 1}", "assert check_occurences([(3, 3), (2, 6), (7, 7), (6, 7), (6, 1)]) == {(3, 3): 1, (2, 6): 1, (7, 7): 1, (6, 7): 1, (1, 6): 1}", "assert check_occurences([(2, 7), (5, 7), (2, 8), (6, 6), (6, 2)]) == {(2, 7): 1, (5, 7): 1, (2, 8): 1, (6, 6): 1, (2, 6): 1}", "assert check_occurences([(6, 1), (5, 7), (1, 1), (9, 5), (8, 7)]) == {(1, 6): 1, (5, 7): 1, (1, 1): 1, (5, 9): 1, (7, 8): 1}", "assert check_occurences([(9, 1), (1, 8), (2, 8), (8, 3), (3, 2)]) == {(1, 9): 1, (1, 8): 1, (2, 8): 1, (3, 8): 1, (2, 3): 1}", "assert check_occurences([(8, 2), (7, 5), (7, 6), (11, 4), (4, 2)]) == {(2, 8): 1, (5, 7): 1, (6, 7): 1, (4, 11): 1, (2, 4): 1}", "assert check_occurences([(2, 5), (6, 4), (7, 6), (4, 2), (6, 1)]) == {(2, 5): 1, (4, 6): 1, (6, 7): 1, (2, 4): 1, (1, 6): 1}", "assert check_occurences([(3, 4), (1, 6), (8, 8), (1, 1), (4, 8)]) == {(3, 4): 1, (1, 6): 1, (8, 8): 1, (1, 1): 1, (4, 8): 1}", "assert check_occurences([(4, 1), (3, 2), (7, 2), (2, 6), (6, 1)]) == {(1, 4): 1, (2, 3): 1, (2, 7): 1, (2, 6): 1, (1, 6): 1}", "assert check_occurences([(2, 4), (6, 8), (2, 6), (6, 5), (2, 1)]) == {(2, 4): 1, (6, 8): 1, (2, 6): 1, (5, 6): 1, (1, 2): 1}", "assert check_occurences([(9, 1), (4, 4), (7, 4), (10, 2), (7, 9)]) == {(1, 9): 1, (4, 4): 1, (4, 7): 1, (2, 10): 1, (7, 9): 1}", "assert check_occurences([(1, 4), (3, 6), (7, 9), (7, 3), (10, 8)]) == {(1, 4): 1, (3, 6): 1, (7, 9): 1, (3, 7): 1, (8, 10): 1}", "assert check_occurences([(2, 3), (2, 5), (1, 11), (6, 7), (5, 4)]) == {(2, 3): 1, (2, 5): 1, (1, 11): 1, (6, 7): 1, (4, 5): 1}", "assert check_occurences([(6, 7), (5, 3), (3, 6), (9, 7), (4, 5)]) == {(6, 7): 1, (3, 5): 1, (3, 6): 1, (7, 9): 1, (4, 5): 1}", "assert check_occurences([(11, 1), (13, 27), (13, 20), (30, 8), (11, 21)]) == {(1, 11): 1, (13, 27): 1, (13, 20): 1, (8, 30): 1, (11, 21): 1}", "assert check_occurences([(8, 1), (6, 22), (13, 27), (22, 17), (13, 24)]) == {(1, 8): 1, (6, 22): 1, (13, 27): 1, (17, 22): 1, (13, 24): 1}", "assert check_occurences([(15, 3), (12, 22), (13, 25), (30, 16), (12, 18)]) == {(3, 15): 1, (12, 22): 1, (13, 25): 1, (16, 30): 1, (12, 18): 1}", "assert check_occurences([(10, 1), (16, 19), (16, 25), (23, 14), (11, 18)]) == {(1, 10): 1, (16, 19): 1, (16, 25): 1, (14, 23): 1, (11, 18): 1}", "assert check_occurences([(13, 1), (11, 18), (12, 20), (27, 16), (11, 22)]) == {(1, 13): 1, (11, 18): 1, (12, 20): 1, (16, 27): 1, (11, 22): 1}", "assert check_occurences([(11, 2), (12, 28), (14, 29), (20, 11), (19, 28)]) == {(2, 11): 1, (12, 28): 1, (14, 29): 1, (11, 20): 1, (19, 28): 1}", "assert check_occurences([(14, 4), (7, 27), (12, 27), (26, 17), (17, 28)]) == {(4, 14): 1, (7, 27): 1, (12, 27): 1, (17, 26): 1, (17, 28): 1}", "assert check_occurences([(11, 3), (15, 18), (10, 28), (30, 16), (16, 22)]) == {(3, 11): 1, (15, 18): 1, (10, 28): 1, (16, 30): 1, (16, 22): 1}", "assert check_occurences([(11, 1), (8, 25), (8, 29), (26, 13), (14, 22)]) == {(1, 11): 1, (8, 25): 1, (8, 29): 1, (13, 26): 1, (14, 22): 1}", "assert check_occurences([(13, 2), (12, 22), (9, 25), (25, 15), (20, 24)]) == {(2, 13): 1, (12, 22): 1, (9, 25): 1, (15, 25): 1, (20, 24): 1}", "assert check_occurences([(10, 7), (10, 21), (9, 20), (29, 17), (11, 25)]) == {(7, 10): 1, (10, 21): 1, (9, 20): 1, (17, 29): 1, (11, 25): 1}", "assert check_occurences([(12, 4), (7, 21), (14, 28), (28, 17), (11, 25)]) == {(4, 12): 1, (7, 21): 1, (14, 28): 1, (17, 28): 1, (11, 25): 1}", "assert check_occurences([(9, 1), (9, 20), (8, 29), (24, 9), (16, 26)]) == {(1, 9): 1, (9, 20): 1, (8, 29): 1, (9, 24): 1, (16, 26): 1}", "assert check_occurences([(15, 7), (13, 23), (7, 23), (27, 10), (19, 26)]) == {(7, 15): 1, (13, 23): 1, (7, 23): 1, (10, 27): 1, (19, 26): 1}", "assert check_occurences([(8, 5), (11, 21), (7, 24), (29, 7), (16, 19)]) == {(5, 8): 1, (11, 21): 1, (7, 24): 1, (7, 29): 1, (16, 19): 1}", "assert check_occurences([(18, 3), (14, 27), (10, 21), (28, 7), (13, 23)]) == {(3, 18): 1, (14, 27): 1, (10, 21): 1, (7, 28): 1, (13, 23): 1}", "assert check_occurences([(11, 3), (9, 19), (15, 25), (21, 7), (19, 18)]) == {(3, 11): 1, (9, 19): 1, (15, 25): 1, (7, 21): 1, (18, 19): 1}", "assert check_occurences([(11, 3), (13, 20), (16, 22), (24, 15), (19, 19)]) == {(3, 11): 1, (13, 20): 1, (16, 22): 1, (15, 24): 1, (19, 19): 1}", "assert check_occurences([(17, 1), (11, 18), (11, 24), (21, 16), (19, 24)]) == {(1, 17): 1, (11, 18): 1, (11, 24): 1, (16, 21): 1, (19, 24): 1}", "assert check_occurences([(10, 6), (6, 28), (12, 20), (27, 11), (17, 26)]) == {(6, 10): 1, (6, 28): 1, (12, 20): 1, (11, 27): 1, (17, 26): 1}", "assert check_occurences([(8, 3), (14, 27), (13, 20), (24, 8), (16, 19)]) == {(3, 8): 1, (14, 27): 1, (13, 20): 1, (8, 24): 1, (16, 19): 1}", "assert check_occurences([(13, 4), (16, 20), (12, 24), (25, 16), (17, 27)]) == {(4, 13): 1, (16, 20): 1, (12, 24): 1, (16, 25): 1, (17, 27): 1}", "assert check_occurences([(10, 6), (13, 18), (16, 21), (26, 17), (13, 23)]) == {(6, 10): 1, (13, 18): 1, (16, 21): 1, (17, 26): 1, (13, 23): 1}", "assert check_occurences([(13, 7), (7, 28), (13, 28), (21, 16), (13, 23)]) == {(7, 13): 1, (7, 28): 1, (13, 28): 1, (16, 21): 1, (13, 23): 1}", "assert check_occurences([(8, 7), (7, 18), (15, 23), (23, 7), (18, 21)]) == {(7, 8): 1, (7, 18): 1, (15, 23): 1, (7, 23): 1, (18, 21): 1}", "assert check_occurences([(17, 7), (10, 24), (14, 23), (23, 16), (16, 27)]) == {(7, 17): 1, (10, 24): 1, (14, 23): 1, (16, 23): 1, (16, 27): 1}", "assert check_occurences([(10, 5), (14, 26), (11, 28), (29, 13), (18, 25)]) == {(5, 10): 1, (14, 26): 1, (11, 28): 1, (13, 29): 1, (18, 25): 1}", "assert check_occurences([(17, 3), (15, 22), (10, 29), (20, 17), (20, 18)]) == {(3, 17): 1, (15, 22): 1, (10, 29): 1, (17, 20): 1, (18, 20): 1}", "assert check_occurences([(11, 3), (12, 27), (13, 26), (24, 12), (20, 18)]) == {(3, 11): 1, (12, 27): 1, (13, 26): 1, (12, 24): 1, (18, 20): 1}", "assert check_occurences([(12, 7), (9, 19), (9, 25), (29, 11), (15, 22)]) == {(7, 12): 1, (9, 19): 1, (9, 25): 1, (11, 29): 1, (15, 22): 1}", "assert check_occurences([(8, 3), (9, 20), (16, 23), (22, 8), (15, 24)]) == {(3, 8): 1, (9, 20): 1, (16, 23): 1, (8, 22): 1, (15, 24): 1}", "assert check_occurences([(17, 2), (6, 20), (13, 28), (30, 14), (21, 21)]) == {(2, 17): 1, (6, 20): 1, (13, 28): 1, (14, 30): 1, (21, 21): 1}", "assert check_occurences([(8, 4), (7, 26), (10, 26), (28, 8), (21, 26)]) == {(4, 8): 1, (7, 26): 1, (10, 26): 1, (8, 28): 1, (21, 26): 1}"], "entry_point": "check_occurences", "repair_prompt": ["Write a function check_occurences that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\ncheck_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n", " Write a function check_occurences that processes a list of tuples, where each tuple is a collection of elements, and the function should create a dictionary. This dictionary should store each unique tuple as a key and the number of times that tuple appears in the list as its value.\ncheck_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n", " Write a function check_occurences that, given a list of tuples, produces a dictionary counting the occurrences of each unique tuple.\ncheck_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n"], "completions": ["from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List, Tuple, Dict\n\ndef check_occurences(tuples_list: List[Tuple]) -> Dict[Tuple, int]:\n    \"\"\"\n    Takes a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \n    Args:\n        tuples_list (List[Tuple]): A list of tuples to be counted.\n    \n    Returns:\n        Dict[Tuple, int]: A dictionary where each key is a tuple from the input list and each value is the count of occurrences of that tuple.\n    \"\"\"\n    if not tuples_list:\n        return {}\n    \n    counter = Counter(tuples_list)\n    return dict(counter)\n", "from typing import List\nfrom collections import Counter\n\ndef check_occurences(tuples_list: list[tuple]) -> dict[tuple, int]:\n    \"\"\"\n    Takes a list of tuples and returns a dictionary mapping each unique tuple to its count.\n    \n    Args:\n        tuples_list (list[tuple]): A list of tuples to count the occurrences of.\n        \n    Returns:\n        dict[tuple, int]: A dictionary where keys are tuples and values are their counts.\n    \"\"\"\n    if not tuples_list:\n        return {}\n    \n    # Use Counter to count occurrences of each tuple\n    counter = Counter(tuples_list)\n    \n    # Convert Counter object to a dictionary\n    return dict(counter)\n", "from typing import List\nfrom typing import List, Tuple, Dict\nfrom collections import Counter\n\ndef check_occurences(tuples_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    \"\"\"\n    Counts the occurrences of each tuple in the given list.\n    \n    Args:\n        tuples_list (List[Tuple[int, int]]): A list of tuples where each tuple contains two integers.\n        \n    Returns:\n        Dict[Tuple[int, int], int]: A dictionary where the keys are tuples and the values are their counts.\n    \"\"\"\n    # Convert each tuple to a tuple of integers to handle non-hashable elements\n    tuples_list_of_ints = [tuple(sorted(t)) for t in tuples_list]\n    \n    # Use Counter to count the occurrences of each tuple\n    counter = Counter(tuples_list_of_ints)\n    \n    # Return the result as a dictionary\n    return dict(counter)\n", "from typing import List\nfrom typing import List, Tuple, Dict, Any\n\ndef check_occurences(tuples_list: List[Tuple[Any, Any]]) -> Dict[Tuple[Any, Any], int]:\n    \"\"\"\n    This function takes a list of tuples and returns a dictionary where the keys are the tuples\n    from the list and the values are the counts of how many times each tuple appears in the list.\n    \n    Args:\n        tuples_list (List[Tuple[Any, Any]]): A list of tuples where each tuple contains elements of any type.\n    \n    Returns:\n        Dict[Tuple[Any, Any], int]: A dictionary with tuples as keys and their counts as values.\n    \"\"\"\n    # Initialize an empty dictionary to store the counts of each tuple\n    tuple_counts = {}\n    \n    # Iterate through the list of tuples\n    for tup in tuples_list:\n        # Check if the tuple is already a key in the dictionary\n        if tup in tuple_counts:\n            # If yes, increment its value by 1\n            tuple_counts[tup] += 1\n        else:\n            # If no, add the tuple to the dictionary with a value of 1\n            tuple_counts[tup] = 1\n    \n    # Return the dictionary after processing all tuples\n    return tuple_counts\n", "from typing import List\nfrom typing import List, Tuple, Dict, Any\n\ndef check_occurences(tuples_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    \"\"\"\n    This function takes a list of tuples and returns a dictionary that counts the occurrences of each unique tuple.\n    \n    Args:\n        tuples_list (List[Tuple[Any, ...]]): A list of tuples where each tuple can contain elements of any type.\n        \n    Returns:\n        Dict[Tuple[Any, ...], int]: A dictionary where the keys are tuples and the values are their counts.\n    \"\"\"\n    # Initialize an empty dictionary to store the counts of each tuple\n    tuple_counts = {}\n    \n    # Iterate through the list of tuples\n    for tup in tuples_list:\n        # Convert the tuple to a tuple of immutable types to handle lists within tuples as keys in the dictionary\n        immutable_tup = tuple(item if not isinstance(item, list) else tuple(item) for item in tup)\n        \n        # Update the count of the tuple in the dictionary\n        if immutable_tup in tuple_counts:\n            tuple_counts[immutable_tup] += 1\n        else:\n            tuple_counts[immutable_tup] = 1\n    \n    # Return the dictionary with counts\n    return tuple_counts\n\n# Example usage:\n# result = check_occurences([(1, 2), (2, 1), (1, 2), (3, 4), (4, 3)])\n# print(result)  # Output: {(1, 2): 2, (2, 1): 1, (3, 4): 1, (4, 3): 1}\n", "from typing import List\n## main.py\n\nfrom collections import defaultdict\nfrom typing import List, Tuple, Dict\n\ndef check_occurences(tuples_list: List[Tuple]) -> Dict[Tuple, int]:\n    \"\"\"\n    Takes a list of tuples and returns a dictionary with tuples as keys and their counts as values.\n    \n    Args:\n        tuples_list (List[Tuple]): A list of tuples to be counted.\n    \n    Returns:\n        Dict[Tuple, int]: A dictionary where keys are tuples from the input list and values are their counts.\n    \"\"\"\n    # Initialize a defaultdict to store the counts of each tuple\n    tuple_counts = defaultdict(int)\n    \n    # Iterate through the list of tuples and count each occurrence\n    for tup in tuples_list:\n        tuple_counts[tup] += 1\n    \n    # Convert the defaultdict to a regular dictionary before returning\n    return dict(tuple_counts)\n", "from typing import List\nfrom typing import List, Tuple, Dict, Any\nfrom collections import defaultdict\n\ndef check_occurences(tuples_list: List[Tuple[Any, Any]]) -> Dict[Tuple[Any, Any], int]:\n    \"\"\"\n    Counts the occurrences of each unique tuple in a list.\n\n    Args:\n        tuples_list (List[Tuple[Any, Any]]): A list of tuples where each tuple contains elements of any type.\n\n    Returns:\n        Dict[Tuple[Any, Any], int]: A dictionary where the keys are the unique tuples and the values are their counts.\n    \"\"\"\n    # Initialize a defaultdict to count occurrences of each tuple\n    tuple_counts = defaultdict(int)\n    \n    # Iterate over each tuple in the list and update the count\n    for tup in tuples_list:\n        tuple_counts[tup] += 1\n    \n    # Convert defaultdict to a regular dictionary for the final output\n    return dict(tuple_counts)\n", "from typing import List\nfrom typing import List, Tuple, Any, Dict\nfrom collections import defaultdict\n\ndef check_occurences(tuples_list: List[Tuple[Any, Any]]) -> Dict[Tuple[Any, Any], int]:\n    counts = defaultdict(int)\n    \n    for tuple_item in tuples_list:\n        key = tuple(sorted(tuple_item))\n        counts[key] += 1\n    \n    return dict(counts)\n", "from typing import List\n## main.py\n\nfrom collections import defaultdict\nfrom typing import List, Tuple, Dict\n\ndef check_occurences(tuples_list: List[Tuple]) -> Dict[Tuple, int]:\n    occurrences = defaultdict(int)\n    for tup in tuples_list:\n        occurrences[tup] += 1\n    return dict(occurrences)\n", "from typing import List\nfrom typing import List, Tuple, Dict\nfrom collections import defaultdict\n\ndef check_occurences(tuples_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    \"\"\"\n    This function takes a list of tuples and returns a dictionary where each unique tuple is a key,\n    and its count of occurrences is the value.\n    \n    Args:\n        tuples_list (List[Tuple[int, int]]): A list of tuples, where each tuple contains two integers.\n    \n    Returns:\n        Dict[Tuple[int, int], int]: A dictionary with tuples as keys and their counts as values.\n    \"\"\"\n    # Initialize a defaultdict to store the counts of each tuple\n    tuple_counts = defaultdict(int)\n    \n    # Iterate over the list of tuples and increment their counts in the dictionary\n    for tup in tuples_list:\n        tuple_counts[tup] += 1\n    \n    # Convert the defaultdict to a regular dictionary and return it\n    return dict(tuple_counts)\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that counts the occurrences of each unique tuple in a list. This is a common task in data analysis and should be implemented efficiently. The function should handle lists of tuples and return a dictionary where each unique tuple is a key and its count is the value.\nrequirement pool:\n- The main code should be clear and easy to understand.\n- The function should handle tuples of varying lengths.\n- The function should be optimized for performance.\n- The output should be sorted by the frequency of tuples.\n- The function should be tested for edge cases such as empty lists and lists with None values.\nTo implement the function `check_occurences` efficiently, we will use Python's built-in data structures and the `collections.Counter` class from the `collections` module. This approach ensures simplicity and performance. The `collections.Counter` class is optimized for counting hashable objects and is ideal for this task.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'mapping': The process of associating each unique tuple with its count of occurrences in a list.\n    Explanation: In this requirement, we need to create a dictionary where each key is a tuple from the list, and the value is the number of times that tuple appears in the list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `check_occurences`, we will follow these steps:\n    1. Import the `collections` module to use `Counter`.\n    2. Define the function `check_occurences` that takes a list of tuples as an argument.\n    3. Use `Counter` to count the occurrences of each tuple in the list.\n    4. Convert the `Counter` object to a dictionary and return it.\n\n# [edge case] \n    check_occurences([()]) = {(): 1}\n    Explanation: An empty tuple should be considered as a unique tuple and should have a count of 1.\n    check_occurences([(1, 2), (1, 2), (1, 2), (2, 3), (2, 3)]) = {(1, 2): 3, (2, 3): 2}\n    Explanation: The tuples (1, 2) and (2, 3) should be counted correctly, with (1, 2) appearing three times and (2, 3) appearing twice.\n    check_occurences([]) = {}\n    Explanation: An empty list should result in an empty dictionary, as there are no tuples to count.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The `Counter` class in Python's `collections` module automatically handles empty lists and single-element tuples by returning an empty dictionary or a dictionary with a single key-value pair, respectively.\n", "requirement analysis:\nThe requirement is to create a function that counts the occurrences of each unique tuple in a list. This is a common task in data analysis and should be implemented efficiently. The function should handle lists of tuples and return a dictionary where each unique tuple is a key and its count is the value.\nrequirement pool:\n- The main code should be clear and concise.\n- The function should handle tuples of varying lengths.\n- The output should be sorted by the frequency of tuples.\n- The function should be optimized for large lists.\n- Include error handling for non-tuple inputs.\nTo implement the function `check_occurences` efficiently, we will use Python's built-in `collections.Counter` class, which is optimized for counting hashable objects. This will help in quickly counting the occurrences of each tuple in the list. The function will handle tuples of varying lengths and will include error handling for non-tuple inputs.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'counting occurrences': The core concept is to count how many times each unique tuple appears in a list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using `collections.Counter` to efficiently count the occurrences of each tuple. Here's a detailed logic:\n    1. Import the `Counter` class from the `collections` module.\n    2. Define the function `check_occurences` that takes a list of tuples as input.\n    3. Use `Counter` to count the occurrences of each tuple in the list.\n    4. Return the resulting dictionary from the `Counter`.\n\n# [edge case] \n    check_occurences([]) = {}\n    explanation: An empty list should return an empty dictionary since there are no tuples to count.\n    check_occurences([(1,), (1,), (1,)]) = {(1,): 3}\n    explanation: A list of single-element tuples should return a dictionary where each tuple is mapped to its count of occurrences.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The `Counter` class will automatically handle cases where the list is empty or contains single-element tuples.\n\n# [code logic]\n    ```python\n    from collections import Counter\n\n    def check_occurences(lst):\n        if not lst:\n            return {}\n        return dict(Counter(lst))\n    ```\n", "requirement analysis:\nThe requirement is to create a function that counts the occurrences of each unique tuple in a list. This is a common task in data analysis and should be implemented efficiently. The function should handle lists of tuples and return a dictionary where each unique tuple is a key and its count is the value.\nrequirement pool:\n- The main code should be clear and easy to understand.\n- The function should handle tuples of varying lengths.\n- The function should be optimized for performance.\n- The output should be sorted by the frequency of tuples.\n- The function should be tested for edge cases.\nTo implement the function `check_occurences` efficiently, we will use Python's built-in `collections.Counter` class, which is optimized for counting hashable objects. This will help in quickly counting the occurrences of each tuple in the list. The function will convert each tuple to a tuple of integers (to handle tuples with non-hashable elements like lists) and then use `Counter` to count the occurrences. Finally, we will return the result as a dictionary.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'counting occurrences': The core concept is to count how many times each unique tuple appears in a list.\n    Explanation: This involves using a data structure that can efficiently count the frequency of each item in the list, which in this case are tuples.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using the `collections.Counter` class to count the occurrences of each tuple. Here's a detailed logic:\n    1. Import the `collections` module.\n    2. Define the function `check_occurences` that takes a list of tuples as an argument.\n    3. Convert each tuple in the list to a tuple of integers to handle non-hashable elements.\n    4. Use `collections.Counter` to count the occurrences of each tuple.\n    5. Return the result as a dictionary.\n\n# [edge case] \n    check_occurences([()]) = {(): 1}\n    Explanation: An empty tuple appears once in the list.\n    check_occurences([(1,), (1,)]) = {(1,): 2}\n    Explanation: A single-element tuple (1,) appears twice in the list.\n    check_occurences([(1, 2), (2, 1), (1, 2)]) = {(1, 2): 2, (2, 1): 1}\n    Explanation: The tuple (1, 2) appears twice, and (2, 1) appears once.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The `collections.Counter` class will automatically handle cases with a single element or repeated elements correctly.\n", "requirement analysis:\nThe requirement is to create a function that processes a list of tuples and returns a dictionary where each unique tuple is a key and its count in the list is the value. This function should be efficient and handle various sizes of input lists.\nrequirement pool:\n- The main code should process the list of tuples efficiently.\n- The function should correctly count the occurrences of each tuple.\n- The function should be compatible with different programming languages.\n- The function should handle edge cases such as empty lists or lists with None values.\n- The function should be documented and include examples in the comments.\nTo implement the function efficiently, we will use Python's built-in data structures and libraries. The function will process the list of tuples, count the occurrences of each tuple, and store the results in a dictionary. We will ensure that the function handles edge cases such as empty lists or lists with None values.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'tuple collection': The core concept here is the use of tuples as keys in a dictionary to count their occurrences in a list.\n    Explanation: Tuples are used to group together multiple items, and in this case, they are used to represent collections of elements. The function needs to count how many times each tuple appears in a list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function will follow these steps:\n    1. Initialize an empty dictionary to store the counts of each tuple.\n    2. Iterate through the list of tuples.\n    3. For each tuple, check if it is already a key in the dictionary.\n    4. If it is, increment its value by 1.\n    5. If it is not, add it to the dictionary with a value of 1.\n    6. Return the dictionary after processing all tuples.\n\n# [edge case] \n    check_occurences([]) = {}\n    Explanation: An empty list should result in an empty dictionary since there are no tuples to count.\n    check_occurences([None]) = {None: 1}\n    Explanation: A list containing a single None value should result in a dictionary with None as the key and 1 as its value, representing the single occurrence of None.\n    check_occurences([(1, 2), (2, 1), (1, 2), (3, 4), (4, 3)]) = {(1, 2): 2, (2, 1): 1, (3, 4): 1, (4, 3): 1}\n    Explanation: This edge case tests the function's ability to handle tuples with different but repeated element pairs.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle empty lists and lists with None values.\n", "requirement analysis:\nThe function 'check_occurences' is designed to process a list of tuples and generate a dictionary that counts the occurrences of each unique tuple. This function is essential for analyzing data frequency in a structured way, which can be applied in various programming scenarios. The requirements are clear and straightforward, focusing on the functionality and efficiency of the solution.\nrequirement pool:\n- The main code should efficiently process the list of tuples and generate a dictionary with accurate counts.\n- The function should handle tuples of varying lengths and element types.\n- The user interface should be simple and intuitive, making it easy for users to understand and use the function.\n- The function should be optimized for performance, especially when dealing with large datasets.\n- The documentation should provide clear examples and explanations to assist users in understanding and implementing the function.\nTo implement the 'check_occurences' function efficiently, we will use Python's built-in data structures and the 'collections' module for handling the tuple counts. The function will iterate through the list of tuples, convert each tuple to a tuple of immutable types (to handle lists within tuples as keys in the dictionary), and use a dictionary to count occurrences. This approach ensures simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'tuple': a collection of elements separated by commas and enclosed in parentheses.\n    Explanation: In the requirement, tuples are used as elements within a list, and we need to create a dictionary that counts the occurrences of each unique tuple.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the 'check_occurences' function, we will follow these steps:\n    1. Initialize an empty dictionary to store the counts of each tuple.\n    2. Iterate through the list of tuples.\n    3. For each tuple, convert it to a tuple of immutable types to handle lists within tuples as keys in the dictionary.\n    4. Update the count of the tuple in the dictionary.\n    5. Return the dictionary with counts.\n\n# [edge case] \n    check_occurences([(1, 2), (2, 1), (1, 2), (3, 4), (4, 3)]) = {(1, 2): 2, (2, 1): 1, (3, 4): 1, (4, 3): 1}\n    Explanation: This edge case checks the function's ability to handle tuples with different elements and their counts. The expected output shows that each unique tuple is counted correctly.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already ensures that tuples with different elements are counted correctly.\n", "requirement analysis:\nThe requirement is to create a function that counts the occurrences of each tuple in a list. This is a common task in data analysis and programming. The function should be efficient and handle various types of tuples, including those with different lengths and data types. The output should be a dictionary where each unique tuple is a key and its count is the value.\nrequirement pool:\n- The main code should efficiently count occurrences of tuples.\n- The function should handle tuples of different lengths and data types.\n- The output should be a dictionary with tuples as keys and their counts as values.\n- The function should be optimized for performance, especially with large lists.\nTo implement the function `check_occurences` efficiently, we will use Python's built-in data structures and the `collections.defaultdict` to count occurrences of tuples. This approach ensures simplicity and performance, which is crucial for handling large lists of tuples.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'tuple collection': The core concept here is the use of tuples as keys in a dictionary to count their occurrences. Tuples are used because they are immutable and can hold multiple elements, making them suitable for grouping related data.\n\n    Explanation: In the requirement, we need to process a list of tuples and create a dictionary where each unique tuple is a key, and the value is the number of times that tuple appears in the list. This involves counting and grouping data efficiently.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `check_occurences`, we will follow these steps:\n    1. Import the `defaultdict` from the `collections` module.\n    2. Initialize a `defaultdict` of type `int` to store the counts of each tuple.\n    3. Iterate through the list of tuples.\n    4. For each tuple, increment its count in the `defaultdict`.\n    5. Convert the `defaultdict` to a regular dictionary before returning it.\n\n# [edge case] \n    check_occurences([(1, 2), (1, 2), (2, 3), (2, 3), (2, 3)]) = {(1, 2): 2, (2, 3): 3}\n    Explanation: In this edge case, the tuple (1, 2) appears twice, and the tuple (2, 3) appears three times. The function correctly counts and returns these occurrences.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already handles cases where tuples have repeated elements.\n\n# [core concept]\n    'immutable': Tuples are immutable, meaning their contents cannot be changed after they are created. This makes them suitable for use as keys in dictionaries because their contents do not change.\n\n    Explanation: In the requirement, tuples are used as keys in a dictionary. Tuples are immutable, so their contents cannot be changed, which is important for maintaining the integrity of the dictionary keys.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `check_occurences`, we will follow these steps:\n    1. Import the `defaultdict` from the `collections` module.\n    2. Initialize a `defaultdict` of type `int` to store the counts of each tuple.\n    3. Iterate through the list of tuples.\n    4. For each tuple, increment its count in the `defaultdict`.\n    5. Convert the `defaultdict` to a regular dictionary before returning it.\n\n# [edge case] \n    check_occurences([(1, 2), (1, 2), (2, 3), (2, 3), (2, 3)]) = {(1, 2): 2, (2, 3): 3}\n    Explanation: In this edge case, the tuple (1, 2) appears twice, and the tuple (2, 3) appears three times. The function correctly counts and returns these occurrences.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already handles cases where tuples have repeated elements.\n", "requirement analysis:\nThe requirement is to create a function that counts the occurrences of each unique tuple in a list. This is a common task in data analysis and programming, requiring the use of data structures like dictionaries to store and count occurrences efficiently.\nrequirement pool:\n- The main code should efficiently count occurrences of tuples.\n- The function should handle lists of tuples of varying lengths.\n- The UI should be user-friendly and visually appealing.\n- The game should be responsive and work well on mobile devices.\n- The product should include multiple difficulty levels.\nTo efficiently count the occurrences of each unique tuple in a list, we will use Python's built-in collections module, specifically the defaultdict from this module. This will allow us to count elements dynamically, which is particularly useful when dealing with tuples that may not be known beforehand.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'tuple counting': means counting the occurrences of each unique tuple in a list.\n    Explanation: The core concept here is to count the frequency of each tuple in the given list. This involves creating a dictionary where the keys are the tuples and the values are their respective counts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To efficiently count the occurrences of each unique tuple in a list, we will use Python's built-in collections module, specifically the defaultdict from this module. This will allow us to count elements dynamically, which is particularly useful when dealing with tuples that may not be known beforehand.\n\n# [edge case] \n    check_occurences([()]) = {(): 1}\n    Explanation: An empty tuple is a unique tuple and should be counted as such.\n    check_occurences([(1, 2), (1, 2), (1, 2)]) = {(1, 2): 3}\n    Explanation: The tuple (1, 2) appears three times in the list, so it should be counted three times in the dictionary.\n    check_occurences([]) = {}\n    Explanation: An empty list should result in an empty dictionary since there are no tuples to count.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The defaultdict will automatically handle the case of an empty list by initializing an empty dictionary.\n", "requirement analysis:\nThe requirement is to create a function that counts the occurrences of each unique tuple in a list. This is a common task in data analysis and should be implemented efficiently. The function should be able to handle tuples of varying lengths and types.\nrequirement pool:\n- The main code should efficiently count occurrences of tuples.\n- The function should be able to handle tuples of different lengths and types.\n- The output should be a dictionary with tuples as keys and their counts as values.\nTo efficiently count the occurrences of each unique tuple in a list, we will use Python's built-in collections module, specifically the defaultdict from this module. This will allow us to avoid handling missing keys in the dictionary, which simplifies the code significantly. The function will iterate over the list of tuples, converting each tuple to a tuple of immutable types (since tuples themselves are not hashable, but their elements can be), and then increment the count in the dictionary.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'tuple counting': \n    In the requirement, we need to count the occurrences of each unique tuple in a list. This involves creating a dictionary where the keys are the tuples and the values are the counts of those tuples.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Import the necessary module: from collections import defaultdict\n    (2) Initialize a defaultdict of type int: counts = defaultdict(int)\n    (3) Iterate over the list of tuples: for tuple in list_of_tuples:\n        (4) Convert the tuple to a tuple of immutable types: key = tuple(sorted(tuple))\n        (5) Increment the count in the dictionary: counts[key] += 1\n    (6) Convert the defaultdict back to a regular dictionary: result = dict(counts)\n    (7) Return the result\n\n# [edge case] \n    check_occurences([()]) = {(): 1}\n    Explanation: An empty tuple is a unique tuple and should be counted as such.\n    check_occurences([(1, 1), (1, 1)]) = {(1, 1): 2}\n    Explanation: The tuple (1, 1) appears twice in the list, so it should be counted twice in the dictionary.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided will correctly handle an empty tuple.\n", "requirement analysis:\nThe requirement is to create a function that counts the occurrences of each unique tuple in a list. This is a common task in data analysis and programming, where understanding the frequency of elements in a dataset is crucial. The function should be efficient and handle various types of tuple inputs, including those with different lengths and data types.\nrequirement pool:\n- The main code should be efficient and handle different types of tuple inputs.\n- The function should accurately count occurrences of each unique tuple.\n- The function should be easy to understand and implement.\n- The function should be compatible with different programming languages.\nTo create a function that counts the occurrences of each unique tuple in a list, we will use Python's built-in data structures and libraries. Specifically, we will leverage the `collections.defaultdict` to efficiently count occurrences of each tuple. This approach ensures that the function is both efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'tuple': a collection of elements separated by commas and enclosed in parentheses.\n    Explanation: Tuples are used to group together multiple values, where each value can be of any type. They are immutable, meaning their contents cannot be changed once created.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    from collections import defaultdict\n\n    def check_occurences(tuples_list):\n        occurrences = defaultdict(int)\n        for tup in tuples_list:\n            occurrences[tup] += 1\n        return dict(occurrences)\n\n# [edge case] \n    check_occurences([(1, 1), (2, 2), (3, 3)]) = {(1, 1): 1, (2, 2): 1, (3, 3): 1}\n    Explanation: In this edge case, all tuples are unique, so each appears exactly once.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already correctly handles the case where all tuples are unique.\n\n# [core concept]\n    'defaultdict': a dictionary that provides a default value for a key that does not exist.\n    Explanation: This is useful for counting occurrences because it automatically initializes the count for each key to zero when the key is first encountered.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    from collections import defaultdict\n\n    def check_occurences(tuples_list):\n        occurrences = defaultdict(int)\n        for tup in tuples_list:\n            occurrences[tup] += 1\n        return dict(occurrences)\n\n# [edge case] \n    check_occurences([(1, 1), (2, 2), (3, 3)]) = {(1, 1): 1, (2, 2): 1, (3, 3): 1}\n    Explanation: In this edge case, all tuples are unique, so each appears exactly once.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic already correctly handles the case where all tuples are unique.\n", "requirement analysis:\nThe requirement is to create a function that counts the occurrences of each unique tuple in a list. This is a common task in data analysis and should be implemented efficiently. The function should handle lists of tuples and return a dictionary where each key is a tuple and its value is the count of that tuple in the list.\nrequirement pool:\n- The main code should be efficient in processing large lists of tuples.\n- The function should return a dictionary with tuples as keys and their counts as values.\n- The UI should be simple and intuitive, making it easy for users to understand the output.\n- The product should be compatible with both desktop and mobile platforms.\n- Additional features like exporting results to CSV or PDF should be considered.\nTo implement the function efficiently, we will use Python's built-in collections module, specifically the `defaultdict` from this module. This will help in automatically initializing the dictionary values to zero, which simplifies the counting process. The function will iterate over the list of tuples, and for each tuple, it will increment its count in the dictionary. This approach ensures that the function is both efficient and scalable.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'mapping': The function needs to create a dictionary where each unique tuple from the list is a key, and its count of occurrences is the value.\n    Explanation: The core concept here is to map each unique tuple to its frequency of occurrence in the list. This involves creating a dictionary and counting the occurrences of each tuple.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function will follow these steps:\n    1. Import the `defaultdict` from the `collections` module.\n    2. Initialize a `defaultdict` to store the counts of each tuple.\n    3. Iterate over the list of tuples.\n    4. For each tuple, increment its count in the dictionary.\n    5. Convert the `defaultdict` to a regular dictionary and return it.\n\n# [edge case] \n    check_occurences([]) = {}\n    Explanation: If the input list is empty, the function should return an empty dictionary since there are no tuples to count.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the case where the input list is empty.\n"], "test": ["def check(check_occurences):\n\tassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}", "def check(check_occurences):\n\tassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}", "def check(check_occurences):\n\tassert check_occurences([(1, 6), (5, 7), (2, 4), (2, 5), (9, 2)]) == {(1, 6): 1, (5, 7): 1, (2, 4): 1, (2, 5): 1, (2, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 2), (2, 4), (4, 8), (8, 4), (7, 1)]) == {(2, 2): 1, (2, 4): 1, (4, 8): 2, (1, 7): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 2), (4, 3), (5, 8), (5, 1), (8, 4)]) == {(2, 8): 1, (3, 4): 1, (5, 8): 1, (1, 5): 1, (4, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(1, 2), (2, 6), (6, 5), (4, 6), (6, 4)]) == {(1, 2): 1, (2, 6): 1, (5, 6): 1, (4, 6): 2}", "def check(check_occurences):\n\tassert check_occurences([(2, 4), (4, 8), (1, 10), (2, 5), (3, 2)]) == {(2, 4): 1, (4, 8): 1, (1, 10): 1, (2, 5): 1, (2, 3): 1}", "def check(check_occurences):\n\tassert check_occurences([(1, 6), (5, 6), (2, 7), (2, 3), (9, 7)]) == {(1, 6): 1, (5, 6): 1, (2, 7): 1, (2, 3): 1, (7, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(3, 2), (3, 3), (7, 8), (5, 1), (6, 6)]) == {(2, 3): 1, (3, 3): 1, (7, 8): 1, (1, 5): 1, (6, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 2), (2, 1), (1, 6), (9, 4), (6, 2)]) == {(2, 8): 1, (1, 2): 1, (1, 6): 1, (4, 9): 1, (2, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(3, 1), (2, 5), (3, 5), (8, 3), (11, 5)]) == {(1, 3): 1, (2, 5): 1, (3, 5): 1, (3, 8): 1, (5, 11): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 6), (4, 1), (1, 4), (8, 1), (9, 1)]) == {(2, 6): 1, (1, 4): 2, (1, 8): 1, (1, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(3, 2), (3, 3), (3, 7), (3, 1), (5, 8)]) == {(2, 3): 1, (3, 3): 1, (3, 7): 1, (1, 3): 1, (5, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(6, 5), (2, 4), (2, 7), (9, 7), (6, 3)]) == {(5, 6): 1, (2, 4): 1, (2, 7): 1, (7, 9): 1, (3, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(3, 1), (5, 4), (1, 4), (8, 4), (5, 5)]) == {(1, 3): 1, (4, 5): 1, (1, 4): 1, (4, 8): 1, (5, 5): 1}", "def check(check_occurences):\n\tassert check_occurences([(5, 3), (4, 6), (4, 5), (10, 3), (11, 3)]) == {(3, 5): 1, (4, 6): 1, (4, 5): 1, (3, 10): 1, (3, 11): 1}", "def check(check_occurences):\n\tassert check_occurences([(4, 4), (1, 7), (3, 8), (4, 3), (5, 7)]) == {(4, 4): 1, (1, 7): 1, (3, 8): 1, (3, 4): 1, (5, 7): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 5), (6, 6), (2, 2), (9, 7), (3, 4)]) == {(5, 8): 1, (6, 6): 1, (2, 2): 1, (7, 9): 1, (3, 4): 1}", "def check(check_occurences):\n\tassert check_occurences([(5, 4), (1, 7), (6, 10), (4, 5), (9, 1)]) == {(4, 5): 2, (1, 7): 1, (6, 10): 1, (1, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(5, 1), (2, 1), (4, 3), (5, 3), (2, 5)]) == {(1, 5): 1, (1, 2): 1, (3, 4): 1, (3, 5): 1, (2, 5): 1}", "def check(check_occurences):\n\tassert check_occurences([(3, 2), (1, 6), (1, 4), (10, 6), (9, 2)]) == {(2, 3): 1, (1, 6): 1, (1, 4): 1, (6, 10): 1, (2, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 4), (5, 3), (1, 5), (1, 3), (11, 7)]) == {(4, 8): 1, (3, 5): 1, (1, 5): 1, (1, 3): 1, (7, 11): 1}", "def check(check_occurences):\n\tassert check_occurences([(3, 3), (3, 5), (6, 8), (1, 4), (11, 2)]) == {(3, 3): 1, (3, 5): 1, (6, 8): 1, (1, 4): 1, (2, 11): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 1), (1, 2), (1, 4), (1, 7), (3, 7)]) == {(1, 2): 2, (1, 4): 1, (1, 7): 1, (3, 7): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 1), (3, 8), (3, 10), (7, 3), (7, 6)]) == {(1, 2): 1, (3, 8): 1, (3, 10): 1, (3, 7): 1, (6, 7): 1}", "def check(check_occurences):\n\tassert check_occurences([(7, 6), (6, 5), (6, 4), (5, 3), (10, 3)]) == {(6, 7): 1, (5, 6): 1, (4, 6): 1, (3, 5): 1, (3, 10): 1}", "def check(check_occurences):\n\tassert check_occurences([(5, 5), (1, 7), (2, 1), (1, 1), (11, 1)]) == {(5, 5): 1, (1, 7): 1, (1, 2): 1, (1, 1): 1, (1, 11): 1}", "def check(check_occurences):\n\tassert check_occurences([(5, 4), (2, 8), (7, 5), (9, 3), (3, 2)]) == {(4, 5): 1, (2, 8): 1, (5, 7): 1, (3, 9): 1, (2, 3): 1}", "def check(check_occurences):\n\tassert check_occurences([(5, 4), (4, 7), (3, 9), (1, 6), (10, 2)]) == {(4, 5): 1, (4, 7): 1, (3, 9): 1, (1, 6): 1, (2, 10): 1}", "def check(check_occurences):\n\tassert check_occurences([(5, 6), (4, 3), (5, 9), (8, 7), (2, 7)]) == {(5, 6): 1, (3, 4): 1, (5, 9): 1, (7, 8): 1, (2, 7): 1}", "def check(check_occurences):\n\tassert check_occurences([(4, 5), (6, 8), (5, 9), (7, 2), (2, 3)]) == {(4, 5): 1, (6, 8): 1, (5, 9): 1, (2, 7): 1, (2, 3): 1}", "def check(check_occurences):\n\tassert check_occurences([(1, 2), (3, 3), (7, 10), (1, 2), (4, 6)]) == {(1, 2): 2, (3, 3): 1, (7, 10): 1, (4, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(6, 3), (1, 5), (3, 3), (9, 1), (6, 6)]) == {(3, 6): 1, (1, 5): 1, (3, 3): 1, (1, 9): 1, (6, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 5), (6, 5), (2, 9), (8, 1), (5, 6)]) == {(2, 5): 1, (5, 6): 2, (2, 9): 1, (1, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 6), (4, 5), (6, 4), (4, 1), (10, 1)]) == {(2, 6): 1, (4, 5): 1, (4, 6): 1, (1, 4): 1, (1, 10): 1}", "def check(check_occurences):\n\tassert check_occurences([(6, 3), (4, 4), (7, 2), (10, 8), (10, 3)]) == {(3, 6): 1, (4, 4): 1, (2, 7): 1, (8, 10): 1, (3, 10): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 4), (3, 9), (7, 6), (10, 4), (11, 8)]) == {(2, 4): 1, (3, 9): 1, (6, 7): 1, (4, 10): 1, (8, 11): 1}", "def check(check_occurences):\n\tassert check_occurences([(3, 7), (2, 4), (2, 2), (9, 5), (8, 6)]) == {(3, 7): 1, (2, 4): 1, (2, 2): 1, (5, 9): 1, (6, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(9, 1), (7, 5), (8, 9), (5, 1), (4, 8)]) == {(1, 9): 1, (5, 7): 1, (8, 9): 1, (1, 5): 1, (4, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(4, 5), (2, 7), (7, 3), (10, 8), (10, 4)]) == {(4, 5): 1, (2, 7): 1, (3, 7): 1, (8, 10): 1, (4, 10): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 4), (2, 9), (1, 9), (3, 8), (6, 7)]) == {(2, 4): 1, (2, 9): 1, (1, 9): 1, (3, 8): 1, (6, 7): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 6), (2, 7), (8, 3), (10, 2), (3, 4)]) == {(6, 8): 1, (2, 7): 1, (3, 8): 1, (2, 10): 1, (3, 4): 1}", "def check(check_occurences):\n\tassert check_occurences([(9, 7), (5, 5), (7, 8), (10, 2), (7, 4)]) == {(7, 9): 1, (5, 5): 1, (7, 8): 1, (2, 10): 1, (4, 7): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 3), (5, 8), (6, 10), (8, 4), (8, 3)]) == {(3, 8): 2, (5, 8): 1, (6, 10): 1, (4, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(6, 7), (5, 9), (1, 1), (2, 1), (9, 7)]) == {(6, 7): 1, (5, 9): 1, (1, 1): 1, (1, 2): 1, (7, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 7), (5, 6), (3, 10), (1, 2), (9, 8)]) == {(7, 8): 1, (5, 6): 1, (3, 10): 1, (1, 2): 1, (8, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 5), (3, 4), (8, 4), (4, 8), (2, 4)]) == {(2, 5): 1, (3, 4): 1, (4, 8): 2, (2, 4): 1}", "def check(check_occurences):\n\tassert check_occurences([(9, 7), (4, 4), (8, 3), (1, 1), (4, 8)]) == {(7, 9): 1, (4, 4): 1, (3, 8): 1, (1, 1): 1, (4, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(5, 5), (7, 9), (8, 1), (4, 1), (4, 4)]) == {(5, 5): 1, (7, 9): 1, (1, 8): 1, (1, 4): 1, (4, 4): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 4), (2, 4), (1, 5), (7, 5), (2, 6)]) == {(2, 4): 2, (1, 5): 1, (5, 7): 1, (2, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(6, 7), (2, 7), (8, 1), (9, 4), (2, 7)]) == {(6, 7): 1, (2, 7): 2, (1, 8): 1, (4, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 4), (7, 1), (3, 11), (9, 4), (6, 8)]) == {(4, 8): 1, (1, 7): 1, (3, 11): 1, (4, 9): 1, (6, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 4), (7, 6), (3, 1), (7, 4), (3, 6)]) == {(2, 4): 1, (6, 7): 1, (1, 3): 1, (4, 7): 1, (3, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 3), (1, 8), (8, 3), (9, 5), (12, 8)]) == {(3, 8): 2, (1, 8): 1, (5, 9): 1, (8, 12): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 6), (3, 8), (3, 3), (7, 5), (9, 6)]) == {(6, 8): 1, (3, 8): 1, (3, 3): 1, (5, 7): 1, (6, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(3, 3), (2, 6), (7, 7), (6, 7), (6, 1)]) == {(3, 3): 1, (2, 6): 1, (7, 7): 1, (6, 7): 1, (1, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 7), (5, 7), (2, 8), (6, 6), (6, 2)]) == {(2, 7): 1, (5, 7): 1, (2, 8): 1, (6, 6): 1, (2, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(6, 1), (5, 7), (1, 1), (9, 5), (8, 7)]) == {(1, 6): 1, (5, 7): 1, (1, 1): 1, (5, 9): 1, (7, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(9, 1), (1, 8), (2, 8), (8, 3), (3, 2)]) == {(1, 9): 1, (1, 8): 1, (2, 8): 1, (3, 8): 1, (2, 3): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 2), (7, 5), (7, 6), (11, 4), (4, 2)]) == {(2, 8): 1, (5, 7): 1, (6, 7): 1, (4, 11): 1, (2, 4): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 5), (6, 4), (7, 6), (4, 2), (6, 1)]) == {(2, 5): 1, (4, 6): 1, (6, 7): 1, (2, 4): 1, (1, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(3, 4), (1, 6), (8, 8), (1, 1), (4, 8)]) == {(3, 4): 1, (1, 6): 1, (8, 8): 1, (1, 1): 1, (4, 8): 1}", "def check(check_occurences):\n\tassert check_occurences([(4, 1), (3, 2), (7, 2), (2, 6), (6, 1)]) == {(1, 4): 1, (2, 3): 1, (2, 7): 1, (2, 6): 1, (1, 6): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 4), (6, 8), (2, 6), (6, 5), (2, 1)]) == {(2, 4): 1, (6, 8): 1, (2, 6): 1, (5, 6): 1, (1, 2): 1}", "def check(check_occurences):\n\tassert check_occurences([(9, 1), (4, 4), (7, 4), (10, 2), (7, 9)]) == {(1, 9): 1, (4, 4): 1, (4, 7): 1, (2, 10): 1, (7, 9): 1}", "def check(check_occurences):\n\tassert check_occurences([(1, 4), (3, 6), (7, 9), (7, 3), (10, 8)]) == {(1, 4): 1, (3, 6): 1, (7, 9): 1, (3, 7): 1, (8, 10): 1}", "def check(check_occurences):\n\tassert check_occurences([(2, 3), (2, 5), (1, 11), (6, 7), (5, 4)]) == {(2, 3): 1, (2, 5): 1, (1, 11): 1, (6, 7): 1, (4, 5): 1}", "def check(check_occurences):\n\tassert check_occurences([(6, 7), (5, 3), (3, 6), (9, 7), (4, 5)]) == {(6, 7): 1, (3, 5): 1, (3, 6): 1, (7, 9): 1, (4, 5): 1}", "def check(check_occurences):\n\tassert check_occurences([(11, 1), (13, 27), (13, 20), (30, 8), (11, 21)]) == {(1, 11): 1, (13, 27): 1, (13, 20): 1, (8, 30): 1, (11, 21): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 1), (6, 22), (13, 27), (22, 17), (13, 24)]) == {(1, 8): 1, (6, 22): 1, (13, 27): 1, (17, 22): 1, (13, 24): 1}", "def check(check_occurences):\n\tassert check_occurences([(15, 3), (12, 22), (13, 25), (30, 16), (12, 18)]) == {(3, 15): 1, (12, 22): 1, (13, 25): 1, (16, 30): 1, (12, 18): 1}", "def check(check_occurences):\n\tassert check_occurences([(10, 1), (16, 19), (16, 25), (23, 14), (11, 18)]) == {(1, 10): 1, (16, 19): 1, (16, 25): 1, (14, 23): 1, (11, 18): 1}", "def check(check_occurences):\n\tassert check_occurences([(13, 1), (11, 18), (12, 20), (27, 16), (11, 22)]) == {(1, 13): 1, (11, 18): 1, (12, 20): 1, (16, 27): 1, (11, 22): 1}", "def check(check_occurences):\n\tassert check_occurences([(11, 2), (12, 28), (14, 29), (20, 11), (19, 28)]) == {(2, 11): 1, (12, 28): 1, (14, 29): 1, (11, 20): 1, (19, 28): 1}", "def check(check_occurences):\n\tassert check_occurences([(14, 4), (7, 27), (12, 27), (26, 17), (17, 28)]) == {(4, 14): 1, (7, 27): 1, (12, 27): 1, (17, 26): 1, (17, 28): 1}", "def check(check_occurences):\n\tassert check_occurences([(11, 3), (15, 18), (10, 28), (30, 16), (16, 22)]) == {(3, 11): 1, (15, 18): 1, (10, 28): 1, (16, 30): 1, (16, 22): 1}", "def check(check_occurences):\n\tassert check_occurences([(11, 1), (8, 25), (8, 29), (26, 13), (14, 22)]) == {(1, 11): 1, (8, 25): 1, (8, 29): 1, (13, 26): 1, (14, 22): 1}", "def check(check_occurences):\n\tassert check_occurences([(13, 2), (12, 22), (9, 25), (25, 15), (20, 24)]) == {(2, 13): 1, (12, 22): 1, (9, 25): 1, (15, 25): 1, (20, 24): 1}", "def check(check_occurences):\n\tassert check_occurences([(10, 7), (10, 21), (9, 20), (29, 17), (11, 25)]) == {(7, 10): 1, (10, 21): 1, (9, 20): 1, (17, 29): 1, (11, 25): 1}", "def check(check_occurences):\n\tassert check_occurences([(12, 4), (7, 21), (14, 28), (28, 17), (11, 25)]) == {(4, 12): 1, (7, 21): 1, (14, 28): 1, (17, 28): 1, (11, 25): 1}", "def check(check_occurences):\n\tassert check_occurences([(9, 1), (9, 20), (8, 29), (24, 9), (16, 26)]) == {(1, 9): 1, (9, 20): 1, (8, 29): 1, (9, 24): 1, (16, 26): 1}", "def check(check_occurences):\n\tassert check_occurences([(15, 7), (13, 23), (7, 23), (27, 10), (19, 26)]) == {(7, 15): 1, (13, 23): 1, (7, 23): 1, (10, 27): 1, (19, 26): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 5), (11, 21), (7, 24), (29, 7), (16, 19)]) == {(5, 8): 1, (11, 21): 1, (7, 24): 1, (7, 29): 1, (16, 19): 1}", "def check(check_occurences):\n\tassert check_occurences([(18, 3), (14, 27), (10, 21), (28, 7), (13, 23)]) == {(3, 18): 1, (14, 27): 1, (10, 21): 1, (7, 28): 1, (13, 23): 1}", "def check(check_occurences):\n\tassert check_occurences([(11, 3), (9, 19), (15, 25), (21, 7), (19, 18)]) == {(3, 11): 1, (9, 19): 1, (15, 25): 1, (7, 21): 1, (18, 19): 1}", "def check(check_occurences):\n\tassert check_occurences([(11, 3), (13, 20), (16, 22), (24, 15), (19, 19)]) == {(3, 11): 1, (13, 20): 1, (16, 22): 1, (15, 24): 1, (19, 19): 1}", "def check(check_occurences):\n\tassert check_occurences([(17, 1), (11, 18), (11, 24), (21, 16), (19, 24)]) == {(1, 17): 1, (11, 18): 1, (11, 24): 1, (16, 21): 1, (19, 24): 1}", "def check(check_occurences):\n\tassert check_occurences([(10, 6), (6, 28), (12, 20), (27, 11), (17, 26)]) == {(6, 10): 1, (6, 28): 1, (12, 20): 1, (11, 27): 1, (17, 26): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 3), (14, 27), (13, 20), (24, 8), (16, 19)]) == {(3, 8): 1, (14, 27): 1, (13, 20): 1, (8, 24): 1, (16, 19): 1}", "def check(check_occurences):\n\tassert check_occurences([(13, 4), (16, 20), (12, 24), (25, 16), (17, 27)]) == {(4, 13): 1, (16, 20): 1, (12, 24): 1, (16, 25): 1, (17, 27): 1}", "def check(check_occurences):\n\tassert check_occurences([(10, 6), (13, 18), (16, 21), (26, 17), (13, 23)]) == {(6, 10): 1, (13, 18): 1, (16, 21): 1, (17, 26): 1, (13, 23): 1}", "def check(check_occurences):\n\tassert check_occurences([(13, 7), (7, 28), (13, 28), (21, 16), (13, 23)]) == {(7, 13): 1, (7, 28): 1, (13, 28): 1, (16, 21): 1, (13, 23): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 7), (7, 18), (15, 23), (23, 7), (18, 21)]) == {(7, 8): 1, (7, 18): 1, (15, 23): 1, (7, 23): 1, (18, 21): 1}", "def check(check_occurences):\n\tassert check_occurences([(17, 7), (10, 24), (14, 23), (23, 16), (16, 27)]) == {(7, 17): 1, (10, 24): 1, (14, 23): 1, (16, 23): 1, (16, 27): 1}", "def check(check_occurences):\n\tassert check_occurences([(10, 5), (14, 26), (11, 28), (29, 13), (18, 25)]) == {(5, 10): 1, (14, 26): 1, (11, 28): 1, (13, 29): 1, (18, 25): 1}", "def check(check_occurences):\n\tassert check_occurences([(17, 3), (15, 22), (10, 29), (20, 17), (20, 18)]) == {(3, 17): 1, (15, 22): 1, (10, 29): 1, (17, 20): 1, (18, 20): 1}", "def check(check_occurences):\n\tassert check_occurences([(11, 3), (12, 27), (13, 26), (24, 12), (20, 18)]) == {(3, 11): 1, (12, 27): 1, (13, 26): 1, (12, 24): 1, (18, 20): 1}", "def check(check_occurences):\n\tassert check_occurences([(12, 7), (9, 19), (9, 25), (29, 11), (15, 22)]) == {(7, 12): 1, (9, 19): 1, (9, 25): 1, (11, 29): 1, (15, 22): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 3), (9, 20), (16, 23), (22, 8), (15, 24)]) == {(3, 8): 1, (9, 20): 1, (16, 23): 1, (8, 22): 1, (15, 24): 1}", "def check(check_occurences):\n\tassert check_occurences([(17, 2), (6, 20), (13, 28), (30, 14), (21, 21)]) == {(2, 17): 1, (6, 20): 1, (13, 28): 1, (14, 30): 1, (21, 21): 1}", "def check(check_occurences):\n\tassert check_occurences([(8, 4), (7, 26), (10, 26), (28, 8), (21, 26)]) == {(4, 8): 1, (7, 26): 1, (10, 26): 1, (8, 28): 1, (21, 26): 1}"], "scores": [0.0294, 0.0294, 1.0, 0.0294, 0.0294, 0.0294, 0.0294, 1.0, 0.0294, 0.0294], "pass_results": [false, false, true, false, false, false, false, true, false, false], "pass_test_cases_num": [3, 3, 102, 3, 3, 3, 3, 102, 3, 3], "completion": "from typing import List\nfrom typing import List, Tuple, Any, Dict\nfrom collections import defaultdict\n\ndef check_occurences(tuples_list: List[Tuple[Any, Any]]) -> Dict[Tuple[Any, Any], int]:\n    counts = defaultdict(int)\n    \n    for tuple_item in tuples_list:\n        key = tuple(sorted(tuple_item))\n        counts[key] += 1\n    \n    return dict(counts)\n", "passed": true, "pass": true, "pass_num": 2, "round": 332, "mutate_method": "condense_two2one", "parent_index": 82}
