{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 129, "prompt": "Write a function to calculate whether the matrix is a magic square. Ensure that your function considers all relevant properties of a magic square, including equal sums of its rows, columns, and diagonals.", "code": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True", "test_imports": [], "test_list": ["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "assert magic_square_test([[8, 9, 3, 14], [7, 10, 9, 11], [16, 6, 13, 6], [9, 11, 17, 2]]) == False", "assert magic_square_test([[9, 10, 6, 17], [5, 8, 4, 11], [13, 1, 5, 9], [11, 10, 17, 8]]) == False", "assert magic_square_test([[2, 8, 3, 9], [3, 16, 5, 7], [12, 7, 5, 2], [12, 11, 12, 6]]) == False", "assert magic_square_test([[12, 12, 6, 10], [7, 10, 4, 9], [20, 8, 9, 8], [14, 8, 16, 3]]) == False", "assert magic_square_test([[12, 10, 1, 13], [4, 12, 3, 6], [18, 7, 5, 1], [4, 2, 15, 7]]) == False", "assert magic_square_test([[12, 17, 3, 9], [7, 9, 11, 8], [19, 1, 11, 1], [10, 9, 15, 7]]) == False", "assert magic_square_test([[11, 7, 2, 16], [7, 18, 4, 12], [16, 7, 13, 6], [10, 1, 18, 6]]) == False", "assert magic_square_test([[8, 7, 5, 15], [7, 13, 6, 8], [20, 2, 11, 9], [13, 6, 15, 4]]) == False", "assert magic_square_test([[10, 8, 3, 10], [1, 9, 7, 13], [16, 7, 14, 4], [7, 10, 18, 1]]) == False", "assert magic_square_test([[2, 17, 1, 10], [4, 15, 5, 11], [15, 6, 5, 7], [5, 1, 14, 8]]) == False", "assert magic_square_test([[6, 13, 5, 14], [5, 15, 11, 14], [12, 4, 15, 2], [13, 9, 13, 5]]) == False", "assert magic_square_test([[12, 14, 5, 9], [1, 11, 9, 14], [13, 5, 14, 8], [11, 7, 13, 4]]) == False", "assert magic_square_test([[2, 9, 2, 16], [7, 15, 4, 11], [21, 2, 13, 4], [10, 9, 20, 9]]) == False", "assert magic_square_test([[7, 11, 2, 16], [6, 10, 9, 8], [15, 4, 12, 6], [14, 10, 18, 9]]) == False", "assert magic_square_test([[9, 8, 3, 12], [6, 14, 5, 7], [13, 3, 6, 10], [12, 11, 15, 6]]) == False", "assert magic_square_test([[4, 10, 4, 17], [1, 14, 3, 12], [17, 6, 13, 1], [4, 8, 12, 8]]) == False", "assert magic_square_test([[9, 7, 6, 9], [6, 10, 8, 10], [19, 3, 5, 1], [8, 7, 18, 5]]) == False", "assert magic_square_test([[5, 13, 1, 12], [6, 16, 7, 10], [18, 4, 8, 5], [8, 5, 16, 4]]) == False", "assert magic_square_test([[8, 12, 3, 13], [4, 13, 13, 8], [17, 7, 15, 9], [14, 5, 14, 7]]) == False", "assert magic_square_test([[10, 9, 2, 18], [7, 9, 13, 13], [18, 7, 9, 4], [5, 9, 14, 8]]) == False", "assert magic_square_test([[5, 8, 5, 16], [6, 14, 9, 15], [20, 2, 13, 5], [7, 4, 18, 1]]) == False", "assert magic_square_test([[7, 14, 6, 9], [7, 14, 13, 8], [11, 6, 9, 5], [10, 3, 10, 6]]) == False", "assert magic_square_test([[7, 15, 5, 9], [2, 17, 7, 8], [21, 8, 8, 1], [10, 11, 15, 8]]) == False", "assert magic_square_test([[9, 14, 5, 19], [4, 15, 11, 16], [19, 6, 13, 7], [9, 7, 10, 1]]) == False", "assert magic_square_test([[12, 11, 6, 15], [6, 16, 5, 13], [19, 8, 11, 1], [13, 10, 11, 2]]) == False", "assert magic_square_test([[10, 11, 5, 11], [3, 18, 10, 15], [18, 6, 5, 3], [12, 5, 18, 3]]) == False", "assert magic_square_test([[7, 11, 4, 17], [2, 15, 4, 11], [17, 5, 5, 3], [8, 2, 20, 7]]) == False", "assert magic_square_test([[6, 16, 4, 15], [2, 15, 11, 8], [20, 6, 14, 3], [14, 3, 20, 7]]) == False", "assert magic_square_test([[8, 11, 3, 11], [2, 12, 9, 7], [21, 5, 9, 10], [14, 7, 11, 1]]) == False", "assert magic_square_test([[12, 17, 4, 14], [6, 9, 4, 16], [15, 5, 14, 5], [13, 3, 10, 7]]) == False", "assert magic_square_test([[11, 14, 2, 17], [5, 17, 4, 10], [14, 1, 8, 6], [4, 7, 14, 2]]) == False", "assert magic_square_test([[7, 16, 2, 10], [2, 17, 6, 13], [12, 5, 10, 5], [7, 1, 15, 1]]) == False", "assert magic_square_test([[12, 7, 4, 14], [7, 18, 5, 9], [17, 4, 12, 1], [10, 7, 17, 4]]) == False", "assert magic_square_test([[2, 2, 4], [5, 9, 5], [8, 2, 6]]) == False", "assert magic_square_test([[7, 10, 8], [14, 9, 6], [1, 1, 13]]) == False", "assert magic_square_test([[7, 2, 3], [4, 1, 1], [7, 2, 9]]) == False", "assert magic_square_test([[4, 10, 11], [7, 5, 3], [5, 1, 4]]) == False", "assert magic_square_test([[3, 7, 1], [12, 5, 3], [1, 7, 6]]) == False", "assert magic_square_test([[6, 11, 4], [8, 1, 2], [9, 8, 11]]) == False", "assert magic_square_test([[4, 3, 8], [4, 5, 6], [4, 4, 10]]) == False", "assert magic_square_test([[5, 2, 11], [10, 4, 1], [3, 6, 4]]) == False", "assert magic_square_test([[3, 7, 9], [5, 5, 6], [6, 2, 7]]) == False", "assert magic_square_test([[2, 3, 7], [5, 1, 5], [6, 3, 8]]) == False", "assert magic_square_test([[1, 11, 3], [11, 10, 3], [5, 8, 3]]) == False", "assert magic_square_test([[4, 9, 4], [8, 8, 4], [2, 8, 10]]) == False", "assert magic_square_test([[2, 11, 3], [9, 8, 3], [9, 5, 11]]) == False", "assert magic_square_test([[5, 8, 3], [7, 10, 4], [3, 2, 11]]) == False", "assert magic_square_test([[3, 9, 11], [13, 1, 3], [6, 3, 9]]) == False", "assert magic_square_test([[6, 4, 2], [13, 2, 2], [6, 1, 12]]) == False", "assert magic_square_test([[1, 2, 7], [13, 10, 3], [3, 6, 7]]) == False", "assert magic_square_test([[7, 2, 9], [10, 8, 5], [2, 8, 13]]) == False", "assert magic_square_test([[4, 8, 4], [14, 10, 3], [2, 1, 9]]) == False", "assert magic_square_test([[4, 10, 10], [5, 6, 5], [1, 2, 11]]) == False", "assert magic_square_test([[7, 3, 2], [6, 5, 4], [6, 1, 9]]) == False", "assert magic_square_test([[6, 3, 2], [11, 2, 6], [2, 7, 11]]) == False", "assert magic_square_test([[4, 8, 2], [6, 8, 5], [6, 6, 4]]) == False", "assert magic_square_test([[1, 7, 4], [9, 2, 3], [5, 8, 9]]) == False", "assert magic_square_test([[1, 8, 7], [4, 3, 4], [3, 1, 6]]) == False", "assert magic_square_test([[2, 6, 5], [5, 3, 3], [5, 2, 4]]) == False", "assert magic_square_test([[6, 5, 4], [6, 7, 1], [7, 1, 5]]) == False", "assert magic_square_test([[1, 7, 2], [10, 4, 6], [6, 4, 6]]) == False", "assert magic_square_test([[1, 12, 5], [7, 3, 1], [7, 3, 4]]) == False", "assert magic_square_test([[1, 10, 1], [13, 4, 6], [4, 7, 12]]) == False", "assert magic_square_test([[1, 7, 9], [7, 2, 2], [7, 5, 12]]) == False", "assert magic_square_test([[1, 10, 3], [5, 2, 2], [7, 6, 4]]) == False", "assert magic_square_test([[7, 5, 7], [6, 6, 2], [2, 1, 13]]) == False", "assert magic_square_test([[5, 9, 3], [8, 8, 2], [7, 6, 3]]) == False", "assert magic_square_test([[4, 2, 10], [10, 6, 4], [3, 4, 3]]) == False", "assert magic_square_test([[4, 6, 10], [11, 4, 6], [3, 6, 2]]) == False", "assert magic_square_test([[7, 11, 5], [5, 6, 2], [8, 4, 10]]) == False", "assert magic_square_test([[7, 5, 4], [12, 10, 1], [1, 3, 6]]) == False", "assert magic_square_test([[6, 7, 11], [7, 6, 5], [3, 8, 4]]) == False", "assert magic_square_test([[6, 10, 11], [10, 5, 4], [2, 4, 4]]) == False", "assert magic_square_test([[2, 5, 3], [4, 6, 1], [7, 1, 10]]) == False", "assert magic_square_test([[4, 7, 4], [4, 8, 4], [7, 3, 2]]) == False", "assert magic_square_test([[5, 2, 11], [12, 7, 4], [7, 2, 6]]) == False", "assert magic_square_test([[7, 7, 6], [7, 2, 2], [6, 7, 11]]) == False", "assert magic_square_test([[4, 8, 8], [7, 8, 3], [8, 3, 6]]) == False", "assert magic_square_test([[6, 6, 2], [13, 9, 4], [6, 4, 4]]) == False", "assert magic_square_test([[6, 11, 6], [8, 8, 4], [8, 7, 2]]) == False", "assert magic_square_test([[5, 11, 2], [14, 5, 2], [7, 5, 5]]) == False", "assert magic_square_test([[3, 12, 11], [13, 9, 2], [2, 8, 12]]) == False", "assert magic_square_test([[5, 7, 1], [9, 7, 6], [4, 2, 2]]) == False", "assert magic_square_test([[2, 3, 9], [14, 8, 5], [6, 1, 7]]) == False", "assert magic_square_test([[3, 6, 7], [14, 5, 6], [8, 8, 5]]) == False", "assert magic_square_test([[3, 8, 2], [9, 7, 3], [4, 8, 9]]) == False", "assert magic_square_test([[7, 2, 6], [4, 3, 2], [9, 8, 7]]) == False", "assert magic_square_test([[4, 10, 9], [11, 9, 3], [1, 3, 2]]) == False", "assert magic_square_test([[4, 5, 7], [5, 6, 2], [8, 2, 5]]) == False", "assert magic_square_test([[6, 8, 5], [10, 5, 3], [7, 6, 7]]) == False", "assert magic_square_test([[4, 7, 11], [13, 8, 6], [8, 6, 3]]) == False", "assert magic_square_test([[4, 5, 3], [11, 7, 5], [9, 1, 7]]) == False", "assert magic_square_test([[1, 7, 1], [7, 9, 1], [2, 1, 11]]) == False", "assert magic_square_test([[3, 7, 9], [13, 4, 3], [1, 3, 11]]) == False", "assert magic_square_test([[5, 4, 9], [12, 4, 1], [4, 4, 9]]) == False", "assert magic_square_test([[1, 4, 7], [9, 1, 3], [1, 8, 10]]) == False", "assert magic_square_test([[2, 11, 2], [11, 4, 4], [3, 5, 2]]) == False", "assert magic_square_test([[4, 2, 1], [14, 1, 3], [3, 4, 9]]) == False", "assert magic_square_test([[7, 4, 8], [8, 2, 3], [1, 7, 11]]) == False"], "entry_point": "magic_square_test", "repair_prompt": ["Write a function magic_square_test to calculate whether the matrix is a magic square. Ensure that your function considers all relevant properties of a magic square, including equal sums of its rows, columns, and diagonals.\nmagic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n", " Write a function magic_square_test to determine if a given matrix is a magic square. The function should verify that the sums of the numbers in each row, each column, and the two main diagonals are equal.\nmagic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n", " Write a function magic_square_test to check if a matrix is a magic square, ensuring it checks the sums of rows, columns, and diagonals for equality.\nmagic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n"], "completions": ["from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    # Check if the matrix is square\n    n = len(matrix)\n    if not all(len(row) == n for row in matrix):\n        return False\n\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Calculate the sum of each column\n    col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n\n    # Calculate the sum of the main diagonal\n    main_diagonal_sum = sum(matrix[i][i] for i in range(n))\n\n    # Calculate the sum of the secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n\n    # Check if all sums are equal\n    target_sum = row_sums[0]\n    if all(sum_ == target_sum for sum_ in row_sums) and \\\n       all(sum_ == target_sum for sum_ in col_sums) and \\\n       main_diagonal_sum == target_sum and \\\n       secondary_diagonal_sum == target_sum:\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]))  # Should return True\n# print(magic_square_test([[1, 2], [3, 4]]))  # Should return False\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same.\n\n    Args:\n        matrix (List[List[int]]): The input matrix to be checked.\n\n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n\n    n = len(matrix)\n    magic_sum = sum(matrix[0])\n\n    # Check sums of rows\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check sums of columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    # Check sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same.\n\n    Args:\n        matrix (List[List[int]]): A 2D list of integers representing the matrix.\n\n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n\n    n = len(matrix)\n    magic_sum = sum(matrix[0])\n\n    # Check sums of rows\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check sums of columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    # Check sum of the secondary diagonal\n    if sum(matrix[i][n - i - 1] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n", "from typing import List\nimport numpy as np\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    # Check if the matrix is square\n    n = len(matrix)\n    if not all(len(row) == n for row in matrix):\n        return False\n\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Calculate the sum of each column\n    col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n\n    # Calculate the sum of the main diagonal\n    main_diagonal_sum = sum(matrix[i][i] for i in range(n))\n\n    # Calculate the sum of the secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n\n    # Check if all sums are equal\n    all_sums = set(row_sums + col_sums + [main_diagonal_sum, secondary_diagonal_sum])\n    return len(all_sums) == 1\n\n# Example usage:\n# print(magic_square_test([[1, 2], [3, 4]]))  # Output: False\n# print(magic_square_test([[1, 1, 1], [1, 1, 1], [1, 1, 1]]))  # Output: True\n# print(magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))  # Output: False\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determines if a given matrix is a magic square.\n    \n    A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list of integers representing the matrix.\n        \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    \n    # Calculate the sum of the first row to establish a baseline sum\n    baseline_sum = sum(matrix[0])\n    \n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != baseline_sum:\n            return False\n    \n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != baseline_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != baseline_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != baseline_sum:\n        return False\n    \n    return True\n", "from typing import List\nimport numpy as np\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    # Validate that the matrix is square\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a list of lists\")\n    \n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Calculate the sum of each column\n    col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n    \n    # Calculate the sum of the main diagonal\n    main_diagonal_sum = sum(matrix[i][i] for i in range(n))\n    \n    # Calculate the sum of the secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n    \n    # Check if all sums are equal\n    all_sums = set(row_sums + col_sums + [main_diagonal_sum, secondary_diagonal_sum])\n    \n    return len(all_sums) == 1\n\n# Example usage:\n# matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n# print(magic_square_test(matrix))  # Output: True\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    \n    # Check if the matrix is square\n    for row in matrix:\n        if len(row) != n:\n            return False\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Calculate the sum of each column\n    col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n    \n    # Calculate the sum of the main diagonal\n    main_diagonal_sum = sum(matrix[i][i] for i in range(n))\n    \n    # Calculate the sum of the secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n    \n    # Check if all sums are equal\n    target_sum = row_sums[0]\n    if all(sum_ == target_sum for sum_ in row_sums) and \\\n       all(sum_ == target_sum for sum_ in col_sums) and \\\n       main_diagonal_sum == target_sum and \\\n       secondary_diagonal_sum == target_sum:\n        return True\n    else:\n        return False\n\n# Example usage:\n# matrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n# print(magic_square_test(matrix))  # Output: True\n", "from typing import List\n## main.py\n\ndef magic_square_test(matrix: list[list[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same.\n\n    Args:\n        matrix (list[list[int]]): A list of lists representing the square matrix.\n\n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    # Validate that the matrix is square\n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            return False\n\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Calculate the sum of each column\n    col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n\n    # Calculate the sum of both main diagonals\n    diag1_sum = sum(matrix[i][i] for i in range(n))\n    diag2_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n\n    # Check if all sums are equal\n    target_sum = row_sums[0]\n    if all(sum_ == target_sum for sum_ in row_sums) and all(sum_ == target_sum for sum_ in col_sums) and diag1_sum == target_sum and diag2_sum == target_sum:\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]))  # True\n# print(magic_square_test([[1, 2], [3, 4]]))  # False\n# print(magic_square_test([[1, 1, 1], [1, 1, 1], [1, 1, 1]]))  # True\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    if n == 0:\n        return False\n\n    # Initialize sums of rows, columns, and diagonals\n    sum_rows = [0] * n\n    sum_cols = [0] * n\n    sum_diag1 = 0\n    sum_diag2 = 0\n\n    # Calculate sums of rows and columns\n    for i in range(n):\n        for j in range(n):\n            sum_rows[i] += matrix[i][j]\n            sum_cols[j] += matrix[i][j]\n        # Calculate sums of diagonals\n        sum_diag1 += matrix[i][i]\n        sum_diag2 += matrix[i][n - 1 - i]\n\n    # Check if all sums are equal\n    benchmark = sum_rows[0]\n    if sum_diag1 != benchmark or sum_diag2 != benchmark:\n        return False\n    for i in range(n):\n        if sum_rows[i] != benchmark or sum_cols[i] != benchmark:\n            return False\n\n    return True\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same.\n\n    Args:\n        matrix (List[List[int]]): A 2D list of integers representing the matrix.\n\n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n\n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Calculate the sum of each column\n    col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n\n    # Calculate the sum of the main diagonal\n    main_diagonal_sum = sum(matrix[i][i] for i in range(n))\n\n    # Calculate the sum of the secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n\n    # Check if all sums are equal\n    target_sum = row_sums[0]\n    if any(sum_ != target_sum for sum_ in row_sums) or \\\n       any(sum_ != target_sum for sum_ in col_sums) or \\\n       main_diagonal_sum != target_sum or \\\n       secondary_diagonal_sum != target_sum:\n        return False\n\n    return True\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that can determine if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should be able to handle matrices of different sizes and provide accurate results.\nrequirement pool:\n- The main code should accurately calculate the sum of rows, columns, and diagonals.\n- The function should be able to handle matrices of any size.\n- Implement a user-friendly interface for easy matrix input and result display.\n- Ensure the application is optimized for performance and efficiency.\n- Include error handling for invalid inputs such as non-square matrices.\nTo create a function that can determine if a given matrix is a magic square, we will use Python's built-in libraries and ensure the function is efficient and user-friendly. The function will calculate the sum of every row, column, and both main diagonals and compare them to ensure they are all equal. We will also implement error handling for invalid inputs such as non-square matrices.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': A square matrix in which the sum of every row, column, and both main diagonals are the same.\n    Explanation: A magic square is a square matrix where the sum of the numbers in each row, each column, and both main diagonals are equal. This property makes the matrix a special type of square matrix.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function should:\n    1. Validate the input to ensure it is a square matrix.\n    2. Calculate the sum of each row.\n    3. Calculate the sum of each column.\n    4. Calculate the sum of both main diagonals.\n    5. Compare all these sums to ensure they are equal.\n\n# [edge case] \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: This is not a square matrix, so it cannot be a magic square. The function should return False.\n    magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) = True\n    Explanation: This matrix is a magic square because the sum of each row, column, and both main diagonals are equal (15).\n\n# [extra code for edge case]\n    We need extra code to handle the edge case of a non-square matrix.\n        if len(matrix) != len(matrix[0]):\n            return False\n        (other code)\n\n    This additional code checks if the matrix is square before proceeding with the rest of the logic.\n", "requirement analysis:\nThe requirement is to create a function that can determine if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, column, and diagonal is the same. The function should be able to handle matrices of different sizes and provide clear and concise feedback on whether the matrix is a magic square or not.\nrequirement pool:\n- The main code should accurately calculate the sum of rows, columns, and diagonals.\n- The function should be able to handle matrices of any size.\n- The function should provide clear and concise feedback on whether the matrix is a magic square or not.\n- Implement error handling for non-square matrices.\n- Optimize the function for performance to handle large matrices efficiently.\nTo create a function that checks if a given matrix is a magic square, we will use Python's built-in libraries and ensure the function is efficient and clear. We will calculate the sum of rows, columns, and diagonals and compare them to determine if the matrix is a magic square.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': A square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    Explanation: In a magic square, the sum of the numbers in each row, each column, and both main diagonals are equal. This property makes the square a fascinating mathematical object.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `magic_square_test`, we will follow these steps:\n    1. Calculate the sum of each row and store them in a list.\n    2. Calculate the sum of each column and add them to the list of row sums.\n    3. Calculate the sum of the main diagonal (from top-left to bottom-right) and add it to the list.\n    4. Calculate the sum of the secondary diagonal (from top-right to bottom-left) and add it to the list.\n    5. Check if all sums in the list are equal.\n\n# [edge case] \n    magic_square_test([[1, 2], [2, 1]]) = False\n    Explanation: The sum of the first row is 3, the sum of the second row is 3, the sum of the first column is 3, the sum of the second column is 3, the sum of the main diagonal is 3, and the sum of the secondary diagonal is 2. Since not all sums are equal, the matrix is not a magic square.\n    magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]) = True\n    Explanation: The sum of each row is 15, the sum of each column is 15, the sum of the main diagonal is 15, and the sum of the secondary diagonal is 15. Since all sums are equal, the matrix is a magic square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to determine if a matrix is a magic square.\n", "requirement analysis:\nThe function must accurately determine if a given matrix is a magic square by checking if the sums of all rows, columns, and diagonals are equal. It should be efficient and capable of handling matrices of various sizes. The user interface should be intuitive, allowing users to input matrices easily and receive immediate results.\nrequirement pool:\n- The main code must accurately determine if a matrix is a magic square.\n- The function must be efficient and capable of handling matrices of any size.\n- The user interface should be intuitive and easy to use.\n- The product should provide immediate feedback on the result.\nTo create an accurate and efficient magic square checker, we will use Python, leveraging its simplicity and the extensive standard library. The function will calculate the sum of each row, column, and diagonal, and compare these sums to determine if the matrix is a magic square. We will ensure the function is scalable by handling matrices of any size efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `magic_square_test`, we will follow these steps:\n    1. Calculate the sum of the first row to set a benchmark for comparison.\n    2. Iterate through each row and compare its sum to the benchmark.\n    3. Iterate through each column and compare its sum to the benchmark.\n    4. Calculate the sum of both main diagonals and compare them to the benchmark.\n    5. If all sums match the benchmark, return `True`; otherwise, return `False`.\n\n# [edge case] \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: The sum of the first row is 3, the sum of the second row is 7, the sum of the first column is 4, the sum of the second column is 6, and the sums of the main diagonals are 5 and 5, respectively. Since not all sums are equal, this is not a magic square.\n\n# [extra code for edge case]\n    We do not need extra code to handle this edge case as the logic provided covers the basic requirement and can be extended to handle larger matrices.\n", "requirement analysis:\nThe requirement is to create a function that can determine if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should be able to handle matrices of various sizes and types of numbers.\nrequirement pool:\n- The main code should accurately determine if a given matrix is a magic square\n- The function should be able to handle matrices of different sizes\n- Include error handling for non-numeric values in the matrix\n- Provide clear documentation and examples for users\n- Optimize the performance for large matrices to ensure quick results\nTo create a function that determines if a given matrix is a magic square, we will use Python's built-in capabilities and leverage the NumPy library for efficient matrix operations. The function will calculate the sum of each row, column, and both main diagonals, then compare these sums to ensure they are equal. We will also include error handling to manage non-numeric values within the matrix.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': a square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    Explanation: A magic square is a grid filled with numbers in such a way that the sum of the numbers in each row, each column, and both main diagonals are equal. This is a specific type of numerical arrangement that has been studied for its mathematical properties.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function will follow these steps:\n    1. Calculate the sum of each row.\n    2. Calculate the sum of each column.\n    3. Calculate the sum of the main diagonal (from top-left to bottom-right).\n    4. Calculate the sum of the secondary diagonal (from top-right to bottom-left).\n    5. Compare all these sums to ensure they are equal.\n\n# [edge case] \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: In this 2x2 matrix, the sums of the rows and columns are not equal (row sums are 3 and 7, column sums are 4 and 6). The diagonals are not calculated since the matrix is not square.\n    magic_square_test([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) = True\n    Explanation: In this 3x3 matrix, all rows, columns, and both main diagonals have the same sum (3 in this case).\n    magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) = False\n    Explanation: In this 3x3 matrix, the sums of the rows and columns are equal, but the main diagonal sum (15) is different from the secondary diagonal sum (15).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The function can check for the matrix being square and proceed with the sum calculations. If the matrix is not square, it can immediately return False.\n", "requirement analysis:\nThe requirement is to create a function that can determine if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should be able to handle matrices of various sizes and types of numbers.\nrequirement pool:\n- The main code should accurately determine if a given matrix is a magic square\n- The function should be able to handle matrices of different sizes\n- The function should be optimized for performance, especially for large matrices\n- The function should include clear documentation and examples for user guidance\n- The user interface should be simple and intuitive, suitable for users of all technical backgrounds\nTo create a function that determines if a given matrix is a magic square, we will use Python's built-in capabilities and leverage a simple approach to ensure clarity and efficiency. The function will calculate the sum of each row, column, and both main diagonals, then compare these sums to verify if they are equal. This method will be efficient for matrices of various sizes.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': A square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    Explanation: A magic square is a square grid filled with numbers such that the sum of the numbers in each row, each column, and both main diagonals are equal. This is a specific type of numerical arrangement that has been studied for its mathematical properties and mystical significance in various cultures.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function will follow these steps:\n    1. Calculate the sum of the first row to establish a baseline sum.\n    2. Iterate through each row to ensure their sums match the baseline sum.\n    3. Iterate through each column to ensure their sums match the baseline sum.\n    4. Calculate the sum of the main diagonal (top-left to bottom-right) and ensure it matches the baseline sum.\n    5. Calculate the sum of the secondary diagonal (top-right to bottom-left) and ensure it matches the baseline sum.\n    6. If all sums match the baseline sum, return True; otherwise, return False.\n\n# [edge case] \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: In this 2x2 matrix, the sums of the rows and columns are not equal (row sums are 3 and 7, column sums are 4 and 6). The main diagonal sum is 5, and the secondary diagonal sum is 6, which are not equal to the row or column sums.\n    magic_square_test([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) = True\n    Explanation: In this 3x3 matrix, each row, column, and both main diagonals sum to 3, indicating it is a magic square.\n    magic_square_test([[5, 5], [5, 5]]) = True\n    Explanation: In this 2x2 matrix, each row and column sums to 10, and both main diagonals also sum to 10, confirming it is a magic square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle matrices of any size, including the edge cases mentioned.\n", "requirement analysis:\nThe function must accurately determine if a given matrix is a magic square by checking the sums of the numbers in each row, each column, and the two main diagonals. The function should be efficient and handle various sizes of matrices.\nrequirement pool:\n- The function must accurately determine if a given matrix is a magic square.\n- The function should be efficient and handle large matrices.\n- The function should be easy to use and integrate into various programming environments.\n- The function should provide clear feedback on whether the matrix is a magic square.\nTo implement the magic_square_test function, we will use Python's built-in capabilities and leverage the NumPy library for efficient matrix operations. The function will first validate the input to ensure it is a square matrix, then calculate the sums of the rows, columns, and diagonals. Finally, it will compare these sums to determine if the matrix is a magic square.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': A square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    Explanation: A magic square is a square grid filled with numbers such that the sum of the numbers in each row, each column, and both main diagonals are equal.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Validate the input to ensure it is a square matrix.\n    - Calculate the sum of each row.\n    - Calculate the sum of each column.\n    - Calculate the sum of both main diagonals.\n    - Compare all these sums to determine if they are equal.\n\n# [edge case] \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: This is not a magic square because the sums of the rows and columns are not equal. The sum of the first row is 3, the sum of the second row is 7, the sum of the first column is 4, and the sum of the second column is 6.\n    magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) = True\n    Explanation: This is a magic square because the sum of each row, each column, and both main diagonals are equal, which is 15.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to determine if the matrix is a magic square.\n", "requirement analysis:\nThe function must accurately check if the sums of all rows, columns, and diagonals in a given matrix are equal. It should handle various sizes of matrices and provide clear feedback on whether the matrix is a magic square or not.\nrequirement pool:\n- The main code must accurately check for magic square properties\n- The function should handle matrices of different sizes\n- Provide clear and concise feedback on the result\n- Ensure the function is optimized for performance\n- Include error handling for non-square matrices\nTo implement the magic square test function, we will use Python's built-in capabilities along with a simple approach to ensure clarity and efficiency. The function will validate the sums of rows, columns, and diagonals. We will not rely on complex libraries but will ensure the function is optimized for performance and clarity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': a square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    Explanation: A magic square is a grid filled with numbers in such a way that the sum of the numbers in each row, each column, and both main diagonals are equal.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function should:\n    1. Calculate the sum of each row.\n    2. Calculate the sum of each column.\n    3. Calculate the sum of the main diagonal (from top-left to bottom-right).\n    4. Calculate the sum of the secondary diagonal (from top-right to bottom-left).\n    5. Compare all these sums to ensure they are equal.\n\n# [edge case] \n    magic_square_test([[1, 2], [2, 1]]) = False\n    Explanation: The sum of the first row is 3, the sum of the second row is 3, the sum of the first column is 3, the sum of the second column is 3, the sum of the main diagonal is 3, and the sum of the secondary diagonal is 3. However, since the matrix is not a square (2x2), it cannot be a magic square.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case of a non-square matrix.\n        if len(matrix) != len(matrix[0]):\n            return False\n        (other code)\n", "requirement analysis:\nThe function must accurately check if a given matrix is a magic square by verifying the sums of rows, columns, and diagonals for equality. It should be efficient and handle large matrices without significant performance issues. The user interface should be intuitive and provide clear feedback on the result.\nrequirement pool:\n- The main code must accurately check if a given matrix is a magic square.\n- The function should be optimized for performance, especially for large matrices.\n- The user interface should be intuitive and provide clear feedback on the result.\n- The function should handle edge cases, such as non-square matrices or matrices with non-integer elements.\n- The system should include detailed error messages for cases where the input matrix is not a magic square.\nTo implement the magic_square_test function, we will use Python's built-in data structures and standard library functions. The function will first validate the input to ensure it is a square matrix. It will then calculate the sum of each row, column, and both diagonals. If all these sums are equal, the function will return True, indicating the matrix is a magic square. Otherwise, it will return False.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': A square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    Explanation: A magic square is a square grid filled with numbers such that the sum of the numbers in each row, each column, and both main diagonals are the same.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Validate the input to ensure it is a square matrix.\n    - Calculate the sum of each row.\n    - Calculate the sum of each column.\n    - Calculate the sum of both main diagonals.\n    - Compare all these sums to check if they are equal.\n    - Return True if they are equal, otherwise return False.\n\n# [edge case] \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: This is not a square matrix, so it cannot be a magic square. The expected output is False.\n    magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) = True\n    Explanation: The sum of each row, each column, and both main diagonals are all 15, so the matrix is a magic square. The expected output is True.\n    magic_square_test([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) = True\n    Explanation: The sum of each row, each column, and both main diagonals are all 3, so the matrix is a magic square. The expected output is True.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic already checks for the matrix being a square, which is a necessary condition for being a magic square.\n", "requirement analysis:\nThe requirement is to create a function that checks if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should return True if the matrix is a magic square and False otherwise.\nrequirement pool:\n- The main code should be efficient and handle matrices of various sizes.\n- The function should check the sums of rows, columns, and diagonals.\n- The function should return True if the matrix is a magic square, otherwise False.\n- The function should be easy to understand and maintain.\nTo create a function that checks if a given matrix is a magic square, we will use Python's built-in capabilities along with a simple and efficient approach. The function will calculate the sum of each row, column, and both diagonals and compare them to ensure all sums are equal. This method will be efficient and suitable for matrices of various sizes.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': A square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    Explanation: A magic square is a square grid filled with numbers such that the sum of the numbers in each row, each column, and both main diagonals are the same.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `magic_square_test`, we will follow these steps:\n    1. Calculate the sum of the first row to set a benchmark for comparison.\n    2. Iterate through each row and compare its sum to the benchmark.\n    3. Iterate through each column and compare its sum to the benchmark.\n    4. Calculate the sum of both diagonals and compare them to the benchmark.\n    5. Return `True` if all sums are equal, otherwise return `False`.\n\n# [edge case] \n    magic_square_test([[1, 2], [2, 1]]) = False\n    Explanation: The sum of the first row is 3, the sum of the second row is 3, the sum of the first column is 3, the sum of the second column is 3, but the sum of the main diagonal (1+1) is 2 and the sum of the other diagonal (2+2) is 4. Since not all sums are equal, the function returns False.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to check if the matrix is a magic square.\n", "requirement analysis:\nThe function must accurately determine if a given matrix is a magic square, considering the sum of its rows, columns, and diagonals. It should also be scalable to handle matrices of various sizes. Clear and concise error messages are crucial for user experience, especially for non-magic squares.\nrequirement pool:\n- The main code must accurately calculate the sum of rows, columns, and diagonals.\n- The function must be able to handle matrices of any size.\n- Provide clear and concise error messages for non-magic squares.\n- Ensure the function is user-friendly and provides a good user experience.\nTo create a function that accurately checks if a matrix is a magic square, we will use Python's built-in libraries and ensure the function is scalable to handle matrices of any size. The function will calculate the sum of each row, column, and both diagonals and compare them to ensure they are all equal. For user-friendly error messages, we will include clear and concise feedback for non-magic squares.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': A square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    Explanation: In a magic square, the sum of the numbers in each row, each column, and both main diagonals are equal. This property makes the square a fascinating mathematical object.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Calculate the sum of each row.\n    - Calculate the sum of each column.\n    - Calculate the sum of the main diagonal (top-left to bottom-right).\n    - Calculate the sum of the secondary diagonal (top-right to bottom-left).\n    - Compare all these sums to ensure they are equal.\n\n# [edge case] \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: In this 2x2 matrix, the sums of the rows and columns are not equal (row sums are 3 and 7, column sums are 4 and 6). The diagonals are not calculated since the matrix is not square.\n    magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]) = True\n    Explanation: This 3x3 matrix is a magic square because the sum of each row, each column, and both main diagonals are all equal (15).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function can check the matrix size and immediately return False for non-square matrices.\n\n# [core concept]\n    'matrix': A rectangular array of numbers or symbols arranged in rows and columns.\n    Explanation: A matrix is a fundamental concept in linear algebra, used for various mathematical and computational purposes.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Ensure the matrix is square (number of rows equals the number of columns).\n    - Calculate the sum of each row.\n    - Calculate the sum of each column.\n    - Calculate the sum of the main diagonal.\n    - Calculate the sum of the secondary diagonal.\n    - Compare all these sums to ensure they are equal.\n\n# [edge case] \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: In this 2x2 matrix, the sums of the rows and columns are not equal (row sums are 3 and 7, column sums are 4 and 6). The diagonals are not calculated since the matrix is not square.\n    magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]) = True\n    Explanation: This 3x3 matrix is a magic square because the sum of each row, each column, and both main diagonals are all equal (15).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function can check the matrix size and immediately return False for non-square matrices.\n"], "test": ["def check(magic_square_test):\n\tassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "def check(magic_square_test):\n\tassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "def check(magic_square_test):\n\tassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 9, 3, 14], [7, 10, 9, 11], [16, 6, 13, 6], [9, 11, 17, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 10, 6, 17], [5, 8, 4, 11], [13, 1, 5, 9], [11, 10, 17, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 8, 3, 9], [3, 16, 5, 7], [12, 7, 5, 2], [12, 11, 12, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 12, 6, 10], [7, 10, 4, 9], [20, 8, 9, 8], [14, 8, 16, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 10, 1, 13], [4, 12, 3, 6], [18, 7, 5, 1], [4, 2, 15, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 17, 3, 9], [7, 9, 11, 8], [19, 1, 11, 1], [10, 9, 15, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[11, 7, 2, 16], [7, 18, 4, 12], [16, 7, 13, 6], [10, 1, 18, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 7, 5, 15], [7, 13, 6, 8], [20, 2, 11, 9], [13, 6, 15, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 8, 3, 10], [1, 9, 7, 13], [16, 7, 14, 4], [7, 10, 18, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 17, 1, 10], [4, 15, 5, 11], [15, 6, 5, 7], [5, 1, 14, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 13, 5, 14], [5, 15, 11, 14], [12, 4, 15, 2], [13, 9, 13, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 14, 5, 9], [1, 11, 9, 14], [13, 5, 14, 8], [11, 7, 13, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 9, 2, 16], [7, 15, 4, 11], [21, 2, 13, 4], [10, 9, 20, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 2, 16], [6, 10, 9, 8], [15, 4, 12, 6], [14, 10, 18, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 8, 3, 12], [6, 14, 5, 7], [13, 3, 6, 10], [12, 11, 15, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 4, 17], [1, 14, 3, 12], [17, 6, 13, 1], [4, 8, 12, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 7, 6, 9], [6, 10, 8, 10], [19, 3, 5, 1], [8, 7, 18, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 13, 1, 12], [6, 16, 7, 10], [18, 4, 8, 5], [8, 5, 16, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 12, 3, 13], [4, 13, 13, 8], [17, 7, 15, 9], [14, 5, 14, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 9, 2, 18], [7, 9, 13, 13], [18, 7, 9, 4], [5, 9, 14, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 8, 5, 16], [6, 14, 9, 15], [20, 2, 13, 5], [7, 4, 18, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 14, 6, 9], [7, 14, 13, 8], [11, 6, 9, 5], [10, 3, 10, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 15, 5, 9], [2, 17, 7, 8], [21, 8, 8, 1], [10, 11, 15, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 14, 5, 19], [4, 15, 11, 16], [19, 6, 13, 7], [9, 7, 10, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 11, 6, 15], [6, 16, 5, 13], [19, 8, 11, 1], [13, 10, 11, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 11, 5, 11], [3, 18, 10, 15], [18, 6, 5, 3], [12, 5, 18, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 4, 17], [2, 15, 4, 11], [17, 5, 5, 3], [8, 2, 20, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 16, 4, 15], [2, 15, 11, 8], [20, 6, 14, 3], [14, 3, 20, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 11, 3, 11], [2, 12, 9, 7], [21, 5, 9, 10], [14, 7, 11, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 17, 4, 14], [6, 9, 4, 16], [15, 5, 14, 5], [13, 3, 10, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[11, 14, 2, 17], [5, 17, 4, 10], [14, 1, 8, 6], [4, 7, 14, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 16, 2, 10], [2, 17, 6, 13], [12, 5, 10, 5], [7, 1, 15, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 7, 4, 14], [7, 18, 5, 9], [17, 4, 12, 1], [10, 7, 17, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 2, 4], [5, 9, 5], [8, 2, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 10, 8], [14, 9, 6], [1, 1, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 3], [4, 1, 1], [7, 2, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 11], [7, 5, 3], [5, 1, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 1], [12, 5, 3], [1, 7, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 11, 4], [8, 1, 2], [9, 8, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 3, 8], [4, 5, 6], [4, 4, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 2, 11], [10, 4, 1], [3, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 9], [5, 5, 6], [6, 2, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 3, 7], [5, 1, 5], [6, 3, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 11, 3], [11, 10, 3], [5, 8, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 9, 4], [8, 8, 4], [2, 8, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 11, 3], [9, 8, 3], [9, 5, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 8, 3], [7, 10, 4], [3, 2, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 9, 11], [13, 1, 3], [6, 3, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 4, 2], [13, 2, 2], [6, 1, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 2, 7], [13, 10, 3], [3, 6, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 9], [10, 8, 5], [2, 8, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 4], [14, 10, 3], [2, 1, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 10], [5, 6, 5], [1, 2, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 3, 2], [6, 5, 4], [6, 1, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 3, 2], [11, 2, 6], [2, 7, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 2], [6, 8, 5], [6, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 4], [9, 2, 3], [5, 8, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 8, 7], [4, 3, 4], [3, 1, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 6, 5], [5, 3, 3], [5, 2, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 5, 4], [6, 7, 1], [7, 1, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 2], [10, 4, 6], [6, 4, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 12, 5], [7, 3, 1], [7, 3, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 10, 1], [13, 4, 6], [4, 7, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 9], [7, 2, 2], [7, 5, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 10, 3], [5, 2, 2], [7, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 5, 7], [6, 6, 2], [2, 1, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 9, 3], [8, 8, 2], [7, 6, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 2, 10], [10, 6, 4], [3, 4, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 6, 10], [11, 4, 6], [3, 6, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 5], [5, 6, 2], [8, 4, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 5, 4], [12, 10, 1], [1, 3, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 7, 11], [7, 6, 5], [3, 8, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 10, 11], [10, 5, 4], [2, 4, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 5, 3], [4, 6, 1], [7, 1, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 7, 4], [4, 8, 4], [7, 3, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 2, 11], [12, 7, 4], [7, 2, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 7, 6], [7, 2, 2], [6, 7, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 8], [7, 8, 3], [8, 3, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 6, 2], [13, 9, 4], [6, 4, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 11, 6], [8, 8, 4], [8, 7, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 11, 2], [14, 5, 2], [7, 5, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 12, 11], [13, 9, 2], [2, 8, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 7, 1], [9, 7, 6], [4, 2, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 3, 9], [14, 8, 5], [6, 1, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 6, 7], [14, 5, 6], [8, 8, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 8, 2], [9, 7, 3], [4, 8, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 6], [4, 3, 2], [9, 8, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 9], [11, 9, 3], [1, 3, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 5, 7], [5, 6, 2], [8, 2, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 8, 5], [10, 5, 3], [7, 6, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 7, 11], [13, 8, 6], [8, 6, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 5, 3], [11, 7, 5], [9, 1, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 1], [7, 9, 1], [2, 1, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 9], [13, 4, 3], [1, 3, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 4, 9], [12, 4, 1], [4, 4, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 4, 7], [9, 1, 3], [1, 8, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 11, 2], [11, 4, 4], [3, 5, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 2, 1], [14, 1, 3], [3, 4, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 4, 8], [8, 2, 3], [1, 7, 11]]) == False"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same.\n\n    Args:\n        matrix (List[List[int]]): A 2D list of integers representing the matrix.\n\n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n\n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Calculate the sum of each column\n    col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n\n    # Calculate the sum of the main diagonal\n    main_diagonal_sum = sum(matrix[i][i] for i in range(n))\n\n    # Calculate the sum of the secondary diagonal\n    secondary_diagonal_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n\n    # Check if all sums are equal\n    target_sum = row_sums[0]\n    if any(sum_ != target_sum for sum_ in row_sums) or \\\n       any(sum_ != target_sum for sum_ in col_sums) or \\\n       main_diagonal_sum != target_sum or \\\n       secondary_diagonal_sum != target_sum:\n        return False\n\n    return True\n", "passed": true, "pass": true, "pass_num": 10, "round": 57, "mutate_method": "add_1_sentence_at_end", "parent_index": 57}
