{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 805, "prompt": "Write a function that returns the list in a list of lists. You are looking for the list whose sum of elements is the highest.", "code": "def max_sum_list(lists):\n return max(lists, key=sum)", "test_imports": [], "test_list": ["assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ", "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ", "assert max_sum_list([[2,3,1]])==[2,3,1] ", "assert max_sum_list([[4, 5, 1], [2, 2, 6], [5, 16, 17], [9, 8, 14]]) == [5, 16, 17]", "assert max_sum_list([[3, 3, 4], [9, 6, 1], [6, 15, 15], [2, 4, 11]]) == [6, 15, 15]", "assert max_sum_list([[1, 1, 8], [9, 7, 8], [7, 9, 9], [3, 4, 10]]) == [7, 9, 9]", "assert max_sum_list([[5, 7, 7], [2, 6, 5], [14, 14, 14], [6, 13, 10]]) == [14, 14, 14]", "assert max_sum_list([[1, 1, 6], [4, 1, 6], [15, 12, 16], [3, 10, 14]]) == [15, 12, 16]", "assert max_sum_list([[1, 7, 7], [7, 1, 10], [13, 15, 14], [2, 12, 8]]) == [13, 15, 14]", "assert max_sum_list([[2, 3, 5], [5, 3, 11], [13, 13, 17], [4, 9, 13]]) == [13, 13, 17]", "assert max_sum_list([[3, 3, 5], [9, 4, 6], [15, 6, 15], [8, 3, 9]]) == [15, 6, 15]", "assert max_sum_list([[5, 5, 3], [9, 2, 5], [5, 13, 13], [7, 3, 6]]) == [5, 13, 13]", "assert max_sum_list([[3, 3, 6], [8, 3, 4], [7, 16, 15], [9, 11, 10]]) == [7, 16, 15]", "assert max_sum_list([[3, 6, 2], [8, 5, 10], [12, 13, 10], [6, 10, 4]]) == [12, 13, 10]", "assert max_sum_list([[4, 1, 2], [2, 1, 11], [8, 7, 9], [10, 11, 12]]) == [10, 11, 12]", "assert max_sum_list([[6, 6, 4], [3, 6, 9], [6, 7, 11], [7, 7, 4]]) == [6, 7, 11]", "assert max_sum_list([[5, 7, 6], [5, 7, 4], [10, 6, 10], [10, 4, 8]]) == [10, 6, 10]", "assert max_sum_list([[6, 4, 7], [9, 10, 5], [11, 13, 17], [10, 5, 6]]) == [11, 13, 17]", "assert max_sum_list([[5, 2, 8], [8, 7, 8], [13, 11, 11], [2, 3, 10]]) == [13, 11, 11]", "assert max_sum_list([[5, 5, 2], [8, 10, 11], [5, 9, 9], [7, 12, 11]]) == [7, 12, 11]", "assert max_sum_list([[2, 1, 3], [2, 8, 3], [13, 14, 7], [8, 11, 14]]) == [13, 14, 7]", "assert max_sum_list([[6, 3, 3], [8, 5, 6], [14, 10, 14], [8, 8, 5]]) == [14, 10, 14]", "assert max_sum_list([[3, 2, 8], [2, 4, 2], [13, 13, 16], [7, 7, 7]]) == [13, 13, 16]", "assert max_sum_list([[2, 1, 7], [3, 2, 1], [10, 11, 13], [7, 6, 13]]) == [10, 11, 13]", "assert max_sum_list([[5, 1, 8], [2, 9, 8], [13, 7, 11], [10, 11, 10]]) == [13, 7, 11]", "assert max_sum_list([[1, 7, 8], [3, 2, 8], [6, 16, 12], [5, 6, 8]]) == [6, 16, 12]", "assert max_sum_list([[5, 2, 3], [7, 8, 6], [14, 7, 8], [5, 8, 8]]) == [14, 7, 8]", "assert max_sum_list([[2, 6, 6], [6, 6, 3], [8, 11, 16], [4, 8, 5]]) == [8, 11, 16]", "assert max_sum_list([[2, 3, 4], [1, 6, 9], [9, 6, 17], [3, 6, 10]]) == [9, 6, 17]", "assert max_sum_list([[3, 5, 1], [8, 1, 6], [10, 7, 14], [10, 6, 4]]) == [10, 7, 14]", "assert max_sum_list([[6, 2, 6], [6, 1, 6], [7, 9, 16], [10, 4, 14]]) == [7, 9, 16]", "assert max_sum_list([[3, 2, 7], [2, 9, 9], [13, 8, 12], [2, 13, 4]]) == [13, 8, 12]", "assert max_sum_list([[6, 4, 2], [2, 3, 11], [11, 7, 14], [8, 10, 9]]) == [11, 7, 14]", "assert max_sum_list([[5, 3, 1], [5, 5, 2], [13, 15, 14], [10, 10, 13]]) == [13, 15, 14]", "assert max_sum_list([[5, 6, 2], [4, 9, 1], [8, 12, 9], [7, 6, 4]]) == [8, 12, 9]", "assert max_sum_list([[5, 6, 7], [2, 4, 4], [12, 10, 8], [3, 8, 6]]) == [12, 10, 8]", "assert max_sum_list([[5, 3, 6], [4, 2, 9], [13, 15, 14]]) == [13, 15, 14]", "assert max_sum_list([[5, 1, 6], [8, 9, 1], [7, 9, 11]]) == [7, 9, 11]", "assert max_sum_list([[7, 3, 3], [6, 3, 5], [16, 9, 7]]) == [16, 9, 7]", "assert max_sum_list([[4, 2, 6], [9, 4, 8], [10, 11, 6]]) == [10, 11, 6]", "assert max_sum_list([[4, 5, 4], [5, 8, 2], [9, 7, 12]]) == [9, 7, 12]", "assert max_sum_list([[5, 5, 1], [10, 10, 9], [14, 14, 12]]) == [14, 14, 12]", "assert max_sum_list([[2, 2, 1], [8, 10, 7], [16, 11, 11]]) == [16, 11, 11]", "assert max_sum_list([[7, 5, 3], [9, 8, 2], [11, 13, 13]]) == [11, 13, 13]", "assert max_sum_list([[5, 4, 1], [11, 4, 6], [13, 11, 13]]) == [13, 11, 13]", "assert max_sum_list([[5, 4, 3], [10, 2, 4], [9, 8, 10]]) == [9, 8, 10]", "assert max_sum_list([[4, 6, 5], [1, 7, 8], [7, 13, 7]]) == [7, 13, 7]", "assert max_sum_list([[6, 2, 6], [8, 2, 1], [14, 8, 15]]) == [14, 8, 15]", "assert max_sum_list([[4, 6, 5], [11, 5, 3], [13, 13, 10]]) == [13, 13, 10]", "assert max_sum_list([[1, 6, 2], [7, 10, 1], [12, 11, 6]]) == [12, 11, 6]", "assert max_sum_list([[7, 4, 6], [1, 9, 2], [7, 16, 15]]) == [7, 16, 15]", "assert max_sum_list([[8, 3, 6], [6, 2, 4], [8, 10, 15]]) == [8, 10, 15]", "assert max_sum_list([[4, 2, 4], [1, 2, 2], [17, 8, 9]]) == [17, 8, 9]", "assert max_sum_list([[6, 7, 1], [4, 4, 9], [10, 6, 15]]) == [10, 6, 15]", "assert max_sum_list([[5, 1, 6], [2, 8, 1], [16, 6, 13]]) == [16, 6, 13]", "assert max_sum_list([[4, 3, 6], [3, 3, 1], [17, 10, 10]]) == [17, 10, 10]", "assert max_sum_list([[8, 6, 3], [2, 1, 1], [9, 8, 13]]) == [9, 8, 13]", "assert max_sum_list([[2, 4, 5], [7, 4, 3], [8, 8, 13]]) == [8, 8, 13]", "assert max_sum_list([[4, 6, 4], [5, 4, 7], [8, 16, 12]]) == [8, 16, 12]", "assert max_sum_list([[7, 7, 3], [5, 1, 4], [15, 11, 8]]) == [15, 11, 8]", "assert max_sum_list([[4, 2, 2], [10, 7, 7], [7, 16, 10]]) == [7, 16, 10]", "assert max_sum_list([[1, 7, 5], [2, 10, 1], [15, 9, 10]]) == [15, 9, 10]", "assert max_sum_list([[6, 6, 1], [10, 1, 7], [11, 15, 5]]) == [11, 15, 5]", "assert max_sum_list([[4, 3, 5], [2, 8, 2], [12, 10, 12]]) == [12, 10, 12]", "assert max_sum_list([[4, 1, 2], [6, 10, 7], [11, 16, 13]]) == [11, 16, 13]", "assert max_sum_list([[4, 3, 1], [9, 10, 4], [11, 13, 14]]) == [11, 13, 14]", "assert max_sum_list([[1, 4, 3], [7, 6, 4], [16, 8, 7]]) == [16, 8, 7]", "assert max_sum_list([[2, 7, 3], [7, 6, 4], [11, 16, 15]]) == [11, 16, 15]", "assert max_sum_list([[6, 2, 5], [11, 5, 2], [8, 11, 9]]) == [8, 11, 9]", "assert max_sum_list([[2, 8, 6]]) == [2, 8, 6]", "assert max_sum_list([[7, 7, 2]]) == [7, 7, 2]", "assert max_sum_list([[6, 5, 2]]) == [6, 5, 2]", "assert max_sum_list([[3, 1, 4]]) == [3, 1, 4]", "assert max_sum_list([[6, 4, 2]]) == [6, 4, 2]", "assert max_sum_list([[1, 3, 1]]) == [1, 3, 1]", "assert max_sum_list([[2, 7, 2]]) == [2, 7, 2]", "assert max_sum_list([[7, 1, 6]]) == [7, 1, 6]", "assert max_sum_list([[2, 3, 5]]) == [2, 3, 5]", "assert max_sum_list([[1, 2, 1]]) == [1, 2, 1]", "assert max_sum_list([[3, 7, 4]]) == [3, 7, 4]", "assert max_sum_list([[2, 3, 2]]) == [2, 3, 2]", "assert max_sum_list([[5, 5, 5]]) == [5, 5, 5]", "assert max_sum_list([[1, 6, 2]]) == [1, 6, 2]", "assert max_sum_list([[4, 5, 6]]) == [4, 5, 6]", "assert max_sum_list([[3, 4, 1]]) == [3, 4, 1]", "assert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "assert max_sum_list([[1, 4, 3]]) == [1, 4, 3]", "assert max_sum_list([[6, 3, 2]]) == [6, 3, 2]", "assert max_sum_list([[4, 2, 1]]) == [4, 2, 1]", "assert max_sum_list([[4, 7, 6]]) == [4, 7, 6]", "assert max_sum_list([[4, 4, 4]]) == [4, 4, 4]", "assert max_sum_list([[3, 7, 1]]) == [3, 7, 1]", "assert max_sum_list([[4, 5, 4]]) == [4, 5, 4]", "assert max_sum_list([[2, 6, 4]]) == [2, 6, 4]", "assert max_sum_list([[2, 3, 6]]) == [2, 3, 6]", "assert max_sum_list([[1, 4, 6]]) == [1, 4, 6]", "assert max_sum_list([[6, 5, 6]]) == [6, 5, 6]", "assert max_sum_list([[4, 8, 3]]) == [4, 8, 3]", "assert max_sum_list([[6, 4, 1]]) == [6, 4, 1]", "assert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "assert max_sum_list([[5, 5, 1]]) == [5, 5, 1]", "assert max_sum_list([[1, 1, 1]]) == [1, 1, 1]"], "entry_point": "max_sum_list", "repair_prompt": ["Write a function max_sum_list that returns the list in a list of lists. You are looking for the list whose sum of elements is the highest.\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n", " Write a function max_sum_list that returns a list of lists, where each sublist contains elements from the original list. The goal is to find the sublist with the highest sum of its elements.\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n", " Write a function max_sum_list that returns the list in a list of lists, where you are looking for the list whose sum of elements is the highest.\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n"], "completions": ["from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    if not lists:\n        return None\n    \n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n", "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    This function takes a list of lists of integers and returns the list with the highest sum of elements.\n    \n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n        \n    Returns:\n        List[int]: The list with the highest sum of elements.\n    \"\"\"\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    result = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = lst\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Returns the list with the highest sum of elements from a list of lists.\n    \n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n        \n    Returns:\n        List[int]: The list with the highest sum of elements.\n    \"\"\"\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n", "from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    if not lists:\n        return None\n    \n    max_sum = float('-inf')\n    max_sum_list = None\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = sublist\n    \n    return max_sum_list\n", "from typing import List\n## main.py\n\nfrom typing import List, Optional\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    \"\"\"\n    Returns the sublist with the highest sum of its elements.\n    \n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n    \n    Returns:\n        Optional[List[int]]: The sublist with the highest sum, or None if the input list is empty.\n    \"\"\"\n    if not lists:\n        return None\n    \n    max_sum = float('-inf')\n    max_list = None\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    \n    return max_list\n", "from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(lst: List[List[int]]) -> Optional[List[int]]:\n    if not lst:\n        return None\n    \n    max_sum_sublist = []\n    max_sum = float('-inf')\n    \n    for sublist in lst:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_sublist = sublist\n    \n    return max_sum_sublist if max_sum_sublist else None\n", "from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    if not lists:\n        return None\n    \n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n", "from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    if not isinstance(lists, list) or not all(isinstance(sublist, list) for sublist in lists):\n        return None\n    \n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n", "from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    if not lists:\n        return None\n    \n    max_sum = -float('inf')\n    max_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n", "from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(list_of_lists: List[List[int]]) -> Optional[List[int]]:\n    if not isinstance(list_of_lists, list) or not all(isinstance(sublist, list) for sublist in list_of_lists):\n        return None\n    \n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in list_of_lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list if max_list else None\n"], "plans": ["requirement analysis:\nThe requirement is to find the list with the highest sum of elements from a list of lists. This is a straightforward task that involves iterating through each list, calculating the sum of elements, and comparing these sums to find the maximum. The function should be efficient and handle various sizes of input lists.\nrequirement pool:\n- The main code should efficiently calculate the sum of elements for each list and compare them to find the maximum sum.\n- The function should handle different sizes of input lists, including edge cases such as empty lists or lists with negative numbers.\n- The user interface should be simple and intuitive, making it easy for users to understand and use the function.\n- The function should be optimized for performance, ensuring it works well with large datasets.\n- The product should be visually appealing with a clean and modern UI.\nTo implement the `max_sum_list` function efficiently, we will use Python's built-in functions and libraries. The function will iterate through each list in the provided list of lists, calculate the sum of each list, and compare these sums to find the list with the highest sum. This approach ensures simplicity and efficiency, making it suitable for handling large datasets.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum': means the sum of elements in a list is the largest compared to other lists.\n    Explanation: The core concept here is to find the list with the maximum sum of its elements from a collection of lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    To implement the `max_sum_list` function, we can follow these steps:\n    1. Initialize a variable to keep track of the maximum sum found so far.\n    2. Initialize a variable to store the list associated with the maximum sum.\n    3. Iterate through each list in the provided list of lists.\n    4. For each list, calculate the sum of its elements.\n    5. Compare the calculated sum with the current maximum sum.\n    6. If the calculated sum is greater than the current maximum sum, update the maximum sum and the list associated with it.\n    7. After iterating through all lists, return the list with the maximum sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of elements in [10, 11, 12] is 33, which is the highest sum among all lists.\n\n# [extra code for edge case]\n    No extra code is needed for this specific edge case as the provided example is straightforward and fits within the described logic.\n\n# [code logic]\n    Here's the Python code to implement the `max_sum_list` function:\n\n    ```python\n    def max_sum_list(lists):\n        max_sum = float('-inf')\n        max_list = []\n        for lst in lists:\n            current_sum = sum(lst)\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lst\n        return max_list\n    ```\n", "requirement analysis:\nThe requirement is to create a function that identifies the list with the highest sum of elements from a list of lists. This function should be efficient and work well with various sizes of input data. The function should be easy to understand and use, providing a clear and engaging user experience.\nrequirement pool:\n- The main code should be efficient and handle large datasets.\n- The function should be easy to understand and use.\n- The UI should be clean and visually appealing.\n- The function should be responsive and provide instant feedback.\n- The product should include advanced features for enhancing user experience.\nTo create a function that identifies the list with the highest sum of elements from a list of lists, we will use Python's built-in functions and standard libraries. The approach will be straightforward: iterate through the list of lists, calculate the sum of each list, and compare these sums to find the list with the highest sum.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum'\n    In the requirement, it refers to finding the list within a list of lists that has the maximum sum of its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through each list in the list of lists, calculate the sum of each list, and compare these sums to find the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation:\n    The sums of the lists are 6, 15, 33, and 24 respectively. The list [10, 11, 12] has the highest sum of 33.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum.\n", "requirement analysis:\nThe requirement is to create a function that can identify the list with the highest sum of elements from a list of lists. This function should be efficient and work well with various sizes of input data. The function should be easy to understand and use, providing a clear and engaging user experience.\nrequirement pool:\n- The main code should be efficient in calculating the sum of elements in each list and comparing them to find the maximum sum.\n- The function should handle lists of varying lengths and sizes of elements.\n- The function should be easy to understand and use, with clear documentation or comments.\n- The user interface should be clean and simple, with clear visual feedback on the results.\n- The function should be tested thoroughly to ensure it works correctly with different types of input data.\nTo create the function `max_sum_list` that returns the list with the highest sum of elements from a list of lists, we will use Python's built-in functions and libraries. The approach involves iterating through each list in the provided list of lists, calculating the sum of each list, and then comparing these sums to find the list with the highest sum. This method ensures efficiency and simplicity in handling the task.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum': means the sum of elements in a list is the largest compared to other lists.\n    Explanation: The core concept here is to find the list with the maximum sum of its elements from a collection of lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    To implement the function `max_sum_list`, we will follow these steps:\n    1. Initialize a variable to keep track of the maximum sum found so far.\n    2. Initialize a variable to store the list associated with the maximum sum.\n    3. Iterate through each list in the provided list of lists.\n    4. For each list, calculate the sum of its elements.\n    5. Compare the calculated sum with the current maximum sum.\n    6. If the calculated sum is greater than the current maximum sum, update the maximum sum and the list associated with it.\n    7. After iterating through all lists, return the list associated with the maximum sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of elements in [10, 11, 12] is 33, which is the highest sum among all lists.\n\n# [extra code for edge case]\n    No extra code is needed for this edge case as the provided logic already handles the scenario where all lists have positive integers.\n", "requirement analysis:\nThe requirement is to create a function that finds the sublist with the highest sum of elements from a list of lists. This is a common problem in algorithmic tasks and requires the function to be efficient and accurate. The function should handle various sizes of input lists and provide a clear output.\nrequirement pool:\n- The main code should efficiently find the sublist with the highest sum.\n- The function should handle different sizes of input lists.\n- The output should be easy to understand and verify.\n- The function should be optimized for performance.\n- The function should be well-documented and easy to use.\nTo solve the problem of finding the sublist with the highest sum of elements from a list of lists, we will use Python's built-in functions and libraries. The approach involves iterating through each sublist, calculating their sums, and then comparing these sums to find the maximum. We will use the 'max' function to find the sublist with the highest sum efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'list of lists': means a collection of lists within a single list\n    'highest sum': means the sum of elements in a sublist is the largest compared to other sublists\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through each sublist in the list of lists, calculate the sum of each sublist, and keep track of the sublist with the highest sum.\n\n# [edge case] \n    max_sum_list([[1], [2], [3]]) = [3]\n    explanation: All sublists contain only one element, so the sublist with the highest sum is the one with the largest single element.\n    max_sum_list([[-1, -2, -3], [0, 0, 0], [1, 2, 3]]) = [1, 2, 3]\n    explanation: The sublist [1, 2, 3] has the highest sum among all sublists, including negative numbers and zeros.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the sublist with the highest sum, even if all sublists contain only positive or only negative numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the sublist with the highest sum, even if all sublists contain only positive or only negative numbers.\n", "requirement analysis:\nThe requirement is to create a function that returns a list of lists, where each sublist contains elements from the original list. The function should find the sublist with the highest sum of its elements. This requirement is clear and straightforward, focusing on functionality and efficiency.\nrequirement pool:\n- The main code should efficiently find the sublist with the highest sum.\n- The function should handle lists of varying lengths.\n- The UI should be simple and intuitive.\n- The function should be optimized for performance.\n- Include user feedback options for continuous improvement.\nTo implement the function `max_sum_list` efficiently, we will use Python's built-in libraries and focus on simplicity and readability. The function will iterate through each sublist, calculate the sum of each, and then return the sublist with the highest sum. This approach ensures that the function is both efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'list of lists': means the function will work with a collection of lists, where each sublist contains elements.\n    'highest sum': the goal is to find the sublist with the largest sum of its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through each sublist to calculate the sum of its elements.\n    - Keep track of the sublist with the highest sum.\n    - Return the sublist with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of elements in [10, 11, 12] is 33, which is the highest sum among all sublists.\n    max_sum_list([[-1,-2,-3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: Even though [-1,-2,-3] has a negative sum, [10, 11, 12] still has the highest sum of 33.\n    max_sum_list([[], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The first sublist is empty, so it doesn't contribute to the sum. The highest sum is still from [10, 11, 12].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic will correctly handle sublists that are empty or have negative sums.\n", "requirement analysis:\nThe requirement is to find the sublist with the highest sum of its elements from a list of lists. The function should be efficient and handle large lists. The user should easily understand and use the function.\nrequirement pool:\n- The main code should efficiently calculate the sum of each sublist and identify the one with the highest sum.\n- The function should be able to handle lists of varying lengths and nested lists.\n- Ensure the function is user-friendly and provides clear feedback on the result.\n- Implement error handling to manage unexpected inputs.\n- Optimize the function for performance, especially for large datasets.\nTo achieve the goal of finding the sublist with the highest sum of its elements from a list of lists, we will use Python's built-in functions and libraries. The main challenge is to efficiently calculate the sum of each sublist and identify the one with the highest sum. We will use list comprehensions for clarity and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'list of lists': means a collection of lists within a single list\n    'highest sum': means the sum of elements in a sublist is the largest compared to other sublists\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through each sublist to calculate the sum of its elements.\n    - Keep track of the sublist with the highest sum.\n    - Return the sublist with the highest sum.\n\n# [edge case] \n    max_sum_list([[1], [2], [3]]) = [3]\n    explanation: All sublists contain only one element, so the sublist with the highest sum is the one with the largest element.\n    max_sum_list([[-1, -2, -3], [0, 0, 0], [1, 2, 3]]) = [1, 2, 3]\n    explanation: The sublist [1, 2, 3] has the highest sum among all sublists, including negative numbers and zeros.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic will correctly identify the sublist with the highest sum, even if all sublists contain only one element.\n\n# [code logic]\n    Here's the detailed logic to implement the code:\n\n    ```python\n    def max_sum_list(lst):\n        if not lst:\n            return []\n        max_sum_sublist = []\n        max_sum = float('-inf')\n        for sublist in lst:\n            current_sum = sum(sublist)\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_sublist = sublist\n        return max_sum_sublist\n    ```\n", "requirement analysis:\nThe requirement is to find the list with the highest sum of elements from a list of lists. This is a straightforward task that involves iterating through each list, calculating the sum of elements, and comparing these sums to find the maximum. The function should be efficient and handle various sizes of input lists.\nrequirement pool:\n- Implement the function to find the list with the highest sum of elements.\n- Ensure the function is efficient and works well with large datasets.\n- Make the function user-friendly and easy to understand.\n- Include error handling for non-list inputs.\n- Optimize the function for performance, especially for large lists.\nTo implement the function `max_sum_list` that returns the list with the highest sum of elements from a list of lists, we will use Python's built-in functions and standard libraries. The approach involves iterating through each list, calculating the sum of elements, and comparing these sums to find the maximum. This method ensures efficiency and works well with large datasets.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum': means the sum of elements in a list is the largest compared to other lists.\n    Explanation: The core concept here is to find the list with the maximum sum of its elements from a collection of lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    To implement the function `max_sum_list`, we will follow these steps:\n    1. Initialize a variable to keep track of the maximum sum found so far.\n    2. Initialize a variable to store the list with the maximum sum.\n    3. Iterate through each list in the list of lists.\n    4. For each list, calculate the sum of its elements.\n    5. Compare the sum with the current maximum sum. If it's greater, update the maximum sum and the list associated with it.\n    6. After iterating through all lists, return the list with the maximum sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of elements in [10, 11, 12] is 33, which is the highest sum among all lists.\n    max_sum_list([[1], [2], [3]]) = [3]\n    Explanation: The sum of elements in [3] is 3, which is the highest sum among all lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum for any non-empty list of lists.\n", "requirement analysis:\nThe requirement is to find the list with the highest sum of elements from a list of lists. This is a straightforward task that involves iterating through each list, calculating the sum of elements, and comparing these sums to find the maximum. The function should be efficient and handle various sizes of input lists.\nrequirement pool:\n- Implement the function to calculate the sum of elements in each list.\n- Compare the sums to find the list with the highest sum.\n- Ensure the function works efficiently even with large datasets.\n- Include error handling for non-list inputs.\n- Provide clear documentation and examples for user guidance.\nTo implement the function `max_sum_list` efficiently, we will use Python's built-in functions and standard libraries. The function will iterate through each list in the provided list of lists, calculate the sum of each list's elements, and then compare these sums to find the list with the highest sum. This approach ensures simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of elements': means the total value obtained by adding all the numbers in a list\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through each list in the list of lists, calculate the sum of each list's elements, and then compare these sums to find the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of [1,2,3] is 6, [4,5,6] is 15, [10,11,12] is 33, and [7,8,9] is 24. The list [10,11,12] has the highest sum.\n\n# [extra code for edge case]\n    No extra code is needed for this implementation as it directly follows the plan provided.\n", "requirement analysis:\nThe requirement is to find the list with the highest sum of elements from a list of lists. This is a straightforward task that involves iterating through each list, calculating the sum of elements, and comparing these sums to find the maximum. The function should be efficient and handle various sizes of input lists.\nrequirement pool:\n- Implement the function to find the list with the highest sum of elements.\n- Ensure the function is efficient and works well with large datasets.\n- Make the function easy to understand and use.\n- Include error handling for non-list inputs.\n- Optimize the function for performance, especially for large lists.\nTo implement the function `max_sum_list` that returns the list with the highest sum of elements from a list of lists, we will use Python's built-in functions and libraries. The approach involves iterating through each list, calculating the sum of elements, and comparing these sums to find the maximum. This method ensures efficiency and works well with large datasets.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum': means the sum of elements in a list is the largest compared to other lists.\n    Explanation: The core concept here is to find the list with the maximum sum of its elements from a collection of lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    To implement the function `max_sum_list`, we will follow these steps:\n    1. Initialize a variable to keep track of the maximum sum found so far.\n    2. Initialize a variable to store the list associated with the maximum sum.\n    3. Iterate through each list in the list of lists.\n    4. For each list, calculate the sum of its elements.\n    5. Compare the calculated sum with the current maximum sum.\n    6. If the calculated sum is greater than the current maximum sum, update the maximum sum and the list associated with it.\n    7. After iterating through all lists, return the list associated with the maximum sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of elements in [10, 11, 12] is 33, which is the highest sum among all lists.\n    max_sum_list([[1], [2], [3]]) = [3]\n    Explanation: The sum of elements in [3] is 3, which is the highest sum among all lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum.\n", "requirement analysis:\nThe requirement is to create a function that identifies the list with the highest sum of elements from a list of lists. This is a straightforward task that involves iterating through the lists, calculating their sums, and returning the list with the highest sum. The function should be efficient and handle various sizes of input data.\nrequirement pool:\n- Implement the function max_sum_list to find the list with the highest sum of elements.\n- Ensure the function is efficient and can handle large datasets.\n- Make the function easy to understand and use.\n- Include error handling for non-list inputs.\n- Optimize the function for performance, especially for large inputs.\nTo implement the function `max_sum_list` efficiently, we will use Python's built-in functions and standard libraries. The function will iterate through each list in the provided list of lists, calculate the sum of each list, and return the list with the highest sum. This approach ensures simplicity and efficiency, making it suitable for handling large datasets.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of elements': means the total of all numbers in a list\n    'highest sum': means the largest total of numbers in a list\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    explanation: The sums of the lists are 6, 15, 33, and 24 respectively. The list [10, 11, 12] has the highest sum.\n    max_sum_list([[-1,-2,-3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    explanation: The sums of the lists are -6, 15, 33, and 24 respectively. The list [10, 11, 12] still has the highest sum, even though some lists contain negative numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will correctly return the list with the highest sum for any list of lists input.\n\n# [code logic]\n    Here's a detailed logic to implement the function `max_sum_list`:\n\n    ```python\n    def max_sum_list(list_of_lists):\n        max_sum = float('-inf')\n        max_list = []\n        for lst in list_of_lists:\n            current_sum = sum(lst)\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lst\n        return max_list\n    ```\n\n    This function initializes `max_sum` to negative infinity and `max_list` to an empty list. It then iterates through each list in `list_of_lists`, calculates the sum of the current list, and updates `max_sum` and `max_list` if the current sum is greater than `max_sum`. Finally, it returns `max_list`.\n"], "test": ["def check(max_sum_list):\n\tassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ", "def check(max_sum_list):\n\tassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ", "def check(max_sum_list):\n\tassert max_sum_list([[2,3,1]])==[2,3,1] ", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 1], [2, 2, 6], [5, 16, 17], [9, 8, 14]]) == [5, 16, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 4], [9, 6, 1], [6, 15, 15], [2, 4, 11]]) == [6, 15, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 8], [9, 7, 8], [7, 9, 9], [3, 4, 10]]) == [7, 9, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 7, 7], [2, 6, 5], [14, 14, 14], [6, 13, 10]]) == [14, 14, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 6], [4, 1, 6], [15, 12, 16], [3, 10, 14]]) == [15, 12, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 7], [7, 1, 10], [13, 15, 14], [2, 12, 8]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 5], [5, 3, 11], [13, 13, 17], [4, 9, 13]]) == [13, 13, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 5], [9, 4, 6], [15, 6, 15], [8, 3, 9]]) == [15, 6, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 3], [9, 2, 5], [5, 13, 13], [7, 3, 6]]) == [5, 13, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 6], [8, 3, 4], [7, 16, 15], [9, 11, 10]]) == [7, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 6, 2], [8, 5, 10], [12, 13, 10], [6, 10, 4]]) == [12, 13, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 1, 2], [2, 1, 11], [8, 7, 9], [10, 11, 12]]) == [10, 11, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 6, 4], [3, 6, 9], [6, 7, 11], [7, 7, 4]]) == [6, 7, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 7, 6], [5, 7, 4], [10, 6, 10], [10, 4, 8]]) == [10, 6, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 7], [9, 10, 5], [11, 13, 17], [10, 5, 6]]) == [11, 13, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 2, 8], [8, 7, 8], [13, 11, 11], [2, 3, 10]]) == [13, 11, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 2], [8, 10, 11], [5, 9, 9], [7, 12, 11]]) == [7, 12, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 1, 3], [2, 8, 3], [13, 14, 7], [8, 11, 14]]) == [13, 14, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 3, 3], [8, 5, 6], [14, 10, 14], [8, 8, 5]]) == [14, 10, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 2, 8], [2, 4, 2], [13, 13, 16], [7, 7, 7]]) == [13, 13, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 1, 7], [3, 2, 1], [10, 11, 13], [7, 6, 13]]) == [10, 11, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 8], [2, 9, 8], [13, 7, 11], [10, 11, 10]]) == [13, 7, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 8], [3, 2, 8], [6, 16, 12], [5, 6, 8]]) == [6, 16, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 2, 3], [7, 8, 6], [14, 7, 8], [5, 8, 8]]) == [14, 7, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 6, 6], [6, 6, 3], [8, 11, 16], [4, 8, 5]]) == [8, 11, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 4], [1, 6, 9], [9, 6, 17], [3, 6, 10]]) == [9, 6, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 5, 1], [8, 1, 6], [10, 7, 14], [10, 6, 4]]) == [10, 7, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 6], [6, 1, 6], [7, 9, 16], [10, 4, 14]]) == [7, 9, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 2, 7], [2, 9, 9], [13, 8, 12], [2, 13, 4]]) == [13, 8, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 2], [2, 3, 11], [11, 7, 14], [8, 10, 9]]) == [11, 7, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 3, 1], [5, 5, 2], [13, 15, 14], [10, 10, 13]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 6, 2], [4, 9, 1], [8, 12, 9], [7, 6, 4]]) == [8, 12, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 6, 7], [2, 4, 4], [12, 10, 8], [3, 8, 6]]) == [12, 10, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 3, 6], [4, 2, 9], [13, 15, 14]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6], [8, 9, 1], [7, 9, 11]]) == [7, 9, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 3, 3], [6, 3, 5], [16, 9, 7]]) == [16, 9, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 6], [9, 4, 8], [10, 11, 6]]) == [10, 11, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 4], [5, 8, 2], [9, 7, 12]]) == [9, 7, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 1], [10, 10, 9], [14, 14, 12]]) == [14, 14, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 2, 1], [8, 10, 7], [16, 11, 11]]) == [16, 11, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 5, 3], [9, 8, 2], [11, 13, 13]]) == [11, 13, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 4, 1], [11, 4, 6], [13, 11, 13]]) == [13, 11, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 4, 3], [10, 2, 4], [9, 8, 10]]) == [9, 8, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 5], [1, 7, 8], [7, 13, 7]]) == [7, 13, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 6], [8, 2, 1], [14, 8, 15]]) == [14, 8, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 5], [11, 5, 3], [13, 13, 10]]) == [13, 13, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 6, 2], [7, 10, 1], [12, 11, 6]]) == [12, 11, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 4, 6], [1, 9, 2], [7, 16, 15]]) == [7, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[8, 3, 6], [6, 2, 4], [8, 10, 15]]) == [8, 10, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 4], [1, 2, 2], [17, 8, 9]]) == [17, 8, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 7, 1], [4, 4, 9], [10, 6, 15]]) == [10, 6, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6], [2, 8, 1], [16, 6, 13]]) == [16, 6, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 6], [3, 3, 1], [17, 10, 10]]) == [17, 10, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[8, 6, 3], [2, 1, 1], [9, 8, 13]]) == [9, 8, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 4, 5], [7, 4, 3], [8, 8, 13]]) == [8, 8, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 4], [5, 4, 7], [8, 16, 12]]) == [8, 16, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 7, 3], [5, 1, 4], [15, 11, 8]]) == [15, 11, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 2], [10, 7, 7], [7, 16, 10]]) == [7, 16, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 5], [2, 10, 1], [15, 9, 10]]) == [15, 9, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 6, 1], [10, 1, 7], [11, 15, 5]]) == [11, 15, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 5], [2, 8, 2], [12, 10, 12]]) == [12, 10, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 1, 2], [6, 10, 7], [11, 16, 13]]) == [11, 16, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 1], [9, 10, 4], [11, 13, 14]]) == [11, 13, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 3], [7, 6, 4], [16, 8, 7]]) == [16, 8, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 7, 3], [7, 6, 4], [11, 16, 15]]) == [11, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 5], [11, 5, 2], [8, 11, 9]]) == [8, 11, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 8, 6]]) == [2, 8, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 7, 2]]) == [7, 7, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 5, 2]]) == [6, 5, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 1, 4]]) == [3, 1, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 2]]) == [6, 4, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 3, 1]]) == [1, 3, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 7, 2]]) == [2, 7, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 1, 6]]) == [7, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 5]]) == [2, 3, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 2, 1]]) == [1, 2, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 7, 4]]) == [3, 7, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 2]]) == [2, 3, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 5]]) == [5, 5, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 6, 2]]) == [1, 6, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 6]]) == [4, 5, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 4, 1]]) == [3, 4, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 3]]) == [1, 4, 3]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 3, 2]]) == [6, 3, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 1]]) == [4, 2, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 7, 6]]) == [4, 7, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 4, 4]]) == [4, 4, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 7, 1]]) == [3, 7, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 4]]) == [4, 5, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 6, 4]]) == [2, 6, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 6]]) == [2, 3, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 6]]) == [1, 4, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 5, 6]]) == [6, 5, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 8, 3]]) == [4, 8, 3]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 1]]) == [6, 4, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 1]]) == [5, 5, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 1]]) == [1, 1, 1]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(list_of_lists: List[List[int]]) -> Optional[List[int]]:\n    if not isinstance(list_of_lists, list) or not all(isinstance(sublist, list) for sublist in list_of_lists):\n        return None\n    \n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in list_of_lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list if max_list else None\n", "passed": true, "pass": true, "pass_num": 10, "round": 991, "mutate_method": "expand_one2two", "parent_index": 552}
