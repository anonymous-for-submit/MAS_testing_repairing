{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 805, "prompt": "Write a function that returns the list in a list of lists. This list should be the one whose sum of elements is the highest.", "code": "def max_sum_list(lists):\n return max(lists, key=sum)", "test_imports": [], "test_list": ["assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ", "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ", "assert max_sum_list([[2,3,1]])==[2,3,1] ", "assert max_sum_list([[4, 5, 1], [2, 2, 6], [5, 16, 17], [9, 8, 14]]) == [5, 16, 17]", "assert max_sum_list([[3, 3, 4], [9, 6, 1], [6, 15, 15], [2, 4, 11]]) == [6, 15, 15]", "assert max_sum_list([[1, 1, 8], [9, 7, 8], [7, 9, 9], [3, 4, 10]]) == [7, 9, 9]", "assert max_sum_list([[5, 7, 7], [2, 6, 5], [14, 14, 14], [6, 13, 10]]) == [14, 14, 14]", "assert max_sum_list([[1, 1, 6], [4, 1, 6], [15, 12, 16], [3, 10, 14]]) == [15, 12, 16]", "assert max_sum_list([[1, 7, 7], [7, 1, 10], [13, 15, 14], [2, 12, 8]]) == [13, 15, 14]", "assert max_sum_list([[2, 3, 5], [5, 3, 11], [13, 13, 17], [4, 9, 13]]) == [13, 13, 17]", "assert max_sum_list([[3, 3, 5], [9, 4, 6], [15, 6, 15], [8, 3, 9]]) == [15, 6, 15]", "assert max_sum_list([[5, 5, 3], [9, 2, 5], [5, 13, 13], [7, 3, 6]]) == [5, 13, 13]", "assert max_sum_list([[3, 3, 6], [8, 3, 4], [7, 16, 15], [9, 11, 10]]) == [7, 16, 15]", "assert max_sum_list([[3, 6, 2], [8, 5, 10], [12, 13, 10], [6, 10, 4]]) == [12, 13, 10]", "assert max_sum_list([[4, 1, 2], [2, 1, 11], [8, 7, 9], [10, 11, 12]]) == [10, 11, 12]", "assert max_sum_list([[6, 6, 4], [3, 6, 9], [6, 7, 11], [7, 7, 4]]) == [6, 7, 11]", "assert max_sum_list([[5, 7, 6], [5, 7, 4], [10, 6, 10], [10, 4, 8]]) == [10, 6, 10]", "assert max_sum_list([[6, 4, 7], [9, 10, 5], [11, 13, 17], [10, 5, 6]]) == [11, 13, 17]", "assert max_sum_list([[5, 2, 8], [8, 7, 8], [13, 11, 11], [2, 3, 10]]) == [13, 11, 11]", "assert max_sum_list([[5, 5, 2], [8, 10, 11], [5, 9, 9], [7, 12, 11]]) == [7, 12, 11]", "assert max_sum_list([[2, 1, 3], [2, 8, 3], [13, 14, 7], [8, 11, 14]]) == [13, 14, 7]", "assert max_sum_list([[6, 3, 3], [8, 5, 6], [14, 10, 14], [8, 8, 5]]) == [14, 10, 14]", "assert max_sum_list([[3, 2, 8], [2, 4, 2], [13, 13, 16], [7, 7, 7]]) == [13, 13, 16]", "assert max_sum_list([[2, 1, 7], [3, 2, 1], [10, 11, 13], [7, 6, 13]]) == [10, 11, 13]", "assert max_sum_list([[5, 1, 8], [2, 9, 8], [13, 7, 11], [10, 11, 10]]) == [13, 7, 11]", "assert max_sum_list([[1, 7, 8], [3, 2, 8], [6, 16, 12], [5, 6, 8]]) == [6, 16, 12]", "assert max_sum_list([[5, 2, 3], [7, 8, 6], [14, 7, 8], [5, 8, 8]]) == [14, 7, 8]", "assert max_sum_list([[2, 6, 6], [6, 6, 3], [8, 11, 16], [4, 8, 5]]) == [8, 11, 16]", "assert max_sum_list([[2, 3, 4], [1, 6, 9], [9, 6, 17], [3, 6, 10]]) == [9, 6, 17]", "assert max_sum_list([[3, 5, 1], [8, 1, 6], [10, 7, 14], [10, 6, 4]]) == [10, 7, 14]", "assert max_sum_list([[6, 2, 6], [6, 1, 6], [7, 9, 16], [10, 4, 14]]) == [7, 9, 16]", "assert max_sum_list([[3, 2, 7], [2, 9, 9], [13, 8, 12], [2, 13, 4]]) == [13, 8, 12]", "assert max_sum_list([[6, 4, 2], [2, 3, 11], [11, 7, 14], [8, 10, 9]]) == [11, 7, 14]", "assert max_sum_list([[5, 3, 1], [5, 5, 2], [13, 15, 14], [10, 10, 13]]) == [13, 15, 14]", "assert max_sum_list([[5, 6, 2], [4, 9, 1], [8, 12, 9], [7, 6, 4]]) == [8, 12, 9]", "assert max_sum_list([[5, 6, 7], [2, 4, 4], [12, 10, 8], [3, 8, 6]]) == [12, 10, 8]", "assert max_sum_list([[5, 3, 6], [4, 2, 9], [13, 15, 14]]) == [13, 15, 14]", "assert max_sum_list([[5, 1, 6], [8, 9, 1], [7, 9, 11]]) == [7, 9, 11]", "assert max_sum_list([[7, 3, 3], [6, 3, 5], [16, 9, 7]]) == [16, 9, 7]", "assert max_sum_list([[4, 2, 6], [9, 4, 8], [10, 11, 6]]) == [10, 11, 6]", "assert max_sum_list([[4, 5, 4], [5, 8, 2], [9, 7, 12]]) == [9, 7, 12]", "assert max_sum_list([[5, 5, 1], [10, 10, 9], [14, 14, 12]]) == [14, 14, 12]", "assert max_sum_list([[2, 2, 1], [8, 10, 7], [16, 11, 11]]) == [16, 11, 11]", "assert max_sum_list([[7, 5, 3], [9, 8, 2], [11, 13, 13]]) == [11, 13, 13]", "assert max_sum_list([[5, 4, 1], [11, 4, 6], [13, 11, 13]]) == [13, 11, 13]", "assert max_sum_list([[5, 4, 3], [10, 2, 4], [9, 8, 10]]) == [9, 8, 10]", "assert max_sum_list([[4, 6, 5], [1, 7, 8], [7, 13, 7]]) == [7, 13, 7]", "assert max_sum_list([[6, 2, 6], [8, 2, 1], [14, 8, 15]]) == [14, 8, 15]", "assert max_sum_list([[4, 6, 5], [11, 5, 3], [13, 13, 10]]) == [13, 13, 10]", "assert max_sum_list([[1, 6, 2], [7, 10, 1], [12, 11, 6]]) == [12, 11, 6]", "assert max_sum_list([[7, 4, 6], [1, 9, 2], [7, 16, 15]]) == [7, 16, 15]", "assert max_sum_list([[8, 3, 6], [6, 2, 4], [8, 10, 15]]) == [8, 10, 15]", "assert max_sum_list([[4, 2, 4], [1, 2, 2], [17, 8, 9]]) == [17, 8, 9]", "assert max_sum_list([[6, 7, 1], [4, 4, 9], [10, 6, 15]]) == [10, 6, 15]", "assert max_sum_list([[5, 1, 6], [2, 8, 1], [16, 6, 13]]) == [16, 6, 13]", "assert max_sum_list([[4, 3, 6], [3, 3, 1], [17, 10, 10]]) == [17, 10, 10]", "assert max_sum_list([[8, 6, 3], [2, 1, 1], [9, 8, 13]]) == [9, 8, 13]", "assert max_sum_list([[2, 4, 5], [7, 4, 3], [8, 8, 13]]) == [8, 8, 13]", "assert max_sum_list([[4, 6, 4], [5, 4, 7], [8, 16, 12]]) == [8, 16, 12]", "assert max_sum_list([[7, 7, 3], [5, 1, 4], [15, 11, 8]]) == [15, 11, 8]", "assert max_sum_list([[4, 2, 2], [10, 7, 7], [7, 16, 10]]) == [7, 16, 10]", "assert max_sum_list([[1, 7, 5], [2, 10, 1], [15, 9, 10]]) == [15, 9, 10]", "assert max_sum_list([[6, 6, 1], [10, 1, 7], [11, 15, 5]]) == [11, 15, 5]", "assert max_sum_list([[4, 3, 5], [2, 8, 2], [12, 10, 12]]) == [12, 10, 12]", "assert max_sum_list([[4, 1, 2], [6, 10, 7], [11, 16, 13]]) == [11, 16, 13]", "assert max_sum_list([[4, 3, 1], [9, 10, 4], [11, 13, 14]]) == [11, 13, 14]", "assert max_sum_list([[1, 4, 3], [7, 6, 4], [16, 8, 7]]) == [16, 8, 7]", "assert max_sum_list([[2, 7, 3], [7, 6, 4], [11, 16, 15]]) == [11, 16, 15]", "assert max_sum_list([[6, 2, 5], [11, 5, 2], [8, 11, 9]]) == [8, 11, 9]", "assert max_sum_list([[2, 8, 6]]) == [2, 8, 6]", "assert max_sum_list([[7, 7, 2]]) == [7, 7, 2]", "assert max_sum_list([[6, 5, 2]]) == [6, 5, 2]", "assert max_sum_list([[3, 1, 4]]) == [3, 1, 4]", "assert max_sum_list([[6, 4, 2]]) == [6, 4, 2]", "assert max_sum_list([[1, 3, 1]]) == [1, 3, 1]", "assert max_sum_list([[2, 7, 2]]) == [2, 7, 2]", "assert max_sum_list([[7, 1, 6]]) == [7, 1, 6]", "assert max_sum_list([[2, 3, 5]]) == [2, 3, 5]", "assert max_sum_list([[1, 2, 1]]) == [1, 2, 1]", "assert max_sum_list([[3, 7, 4]]) == [3, 7, 4]", "assert max_sum_list([[2, 3, 2]]) == [2, 3, 2]", "assert max_sum_list([[5, 5, 5]]) == [5, 5, 5]", "assert max_sum_list([[1, 6, 2]]) == [1, 6, 2]", "assert max_sum_list([[4, 5, 6]]) == [4, 5, 6]", "assert max_sum_list([[3, 4, 1]]) == [3, 4, 1]", "assert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "assert max_sum_list([[1, 4, 3]]) == [1, 4, 3]", "assert max_sum_list([[6, 3, 2]]) == [6, 3, 2]", "assert max_sum_list([[4, 2, 1]]) == [4, 2, 1]", "assert max_sum_list([[4, 7, 6]]) == [4, 7, 6]", "assert max_sum_list([[4, 4, 4]]) == [4, 4, 4]", "assert max_sum_list([[3, 7, 1]]) == [3, 7, 1]", "assert max_sum_list([[4, 5, 4]]) == [4, 5, 4]", "assert max_sum_list([[2, 6, 4]]) == [2, 6, 4]", "assert max_sum_list([[2, 3, 6]]) == [2, 3, 6]", "assert max_sum_list([[1, 4, 6]]) == [1, 4, 6]", "assert max_sum_list([[6, 5, 6]]) == [6, 5, 6]", "assert max_sum_list([[4, 8, 3]]) == [4, 8, 3]", "assert max_sum_list([[6, 4, 1]]) == [6, 4, 1]", "assert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "assert max_sum_list([[5, 5, 1]]) == [5, 5, 1]", "assert max_sum_list([[1, 1, 1]]) == [1, 1, 1]"], "entry_point": "max_sum_list", "repair_prompt": ["Write a function max_sum_list that returns the list in a list of lists. This list should be the one whose sum of elements is the highest.\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n", " Write a function max_sum_list that returns a list of lists, where each sublist contains elements from the original list. The function should identify and return the sublist whose elements sum to the greatest value among all sublists.\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n", " Write a function max_sum_list that returns the list whose sum of elements is the highest. This list should be in a list of lists.\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n"], "completions": ["from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Finds the list with the highest sum of its elements from a list of lists.\n\n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n\n    Returns:\n        List[int]: The list with the highest sum of its elements.\n    \"\"\"\n    if not lists:\n        return []\n\n    max_sum = float('-inf')\n    result = []\n\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = lst\n\n    return result\n", "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Function to find the list with the maximum sum of elements.\n    \n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n        \n    Returns:\n        List[int]: The list with the maximum sum of elements.\n    \"\"\"\n    if not lists:\n        raise ValueError(\"The input list of lists is empty.\")\n    \n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n", "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Determines which list within a list of lists has the highest sum of elements.\n\n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n\n    Returns:\n        List[int]: The list with the highest sum of elements.\n    \"\"\"\n    if not lists:\n        raise ValueError(\"The input list of lists is empty.\")\n\n    max_sum = float('-inf')\n    max_list = []\n\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n\n    return max_list\n", "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    max_list = []\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    \n    return max_list\n", "from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    if not lists:\n        return None\n\n    max_sum = float('-inf')\n    max_list = None\n\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n\n    return max_list\n", "from typing import List\nfrom typing import List, Optional\nimport itertools\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    if not lists:\n        return None\n    \n    max_sum_sublist = None\n    max_sum = float('-inf')\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_sublist = sublist\n    \n    return max_sum_sublist\n", "from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    if not lists:\n        return None\n    \n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n", "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Finds the list with the highest sum of elements within a list of lists.\n\n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n\n    Returns:\n        List[int]: The list with the highest sum of elements.\n    \"\"\"\n    if not lists:\n        return []\n\n    max_sum = float('-inf')\n    max_list = []\n\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n\n    return max_list\n", "from typing import List\nfrom typing import List, Optional\n\ndef max_sum_list(lists: List[List[int]]) -> Optional[List[int]]:\n    if not lists:\n        return None\n    \n    max_sum = float('-inf')\n    result = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = lst\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a list of lists of integers, return the list with the highest sum of its elements.\n    \n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n        \n    Returns:\n        List[int]: The list with the highest sum of its elements.\n    \"\"\"\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n"], "plans": ["requirement analysis:\nThe requirement is to find the list with the highest sum of elements from a list of lists. This is a straightforward task that involves iterating through each list, calculating the sum of elements, and comparing these sums to find the maximum. The function should be efficient and handle various sizes of input lists.\nrequirement pool:\n- Implement the function max_sum_list to find the list with the highest sum of elements.\n- Ensure the function is efficient and can handle large datasets.\n- Make the function user-friendly and easy to understand.\n- Include error handling for non-integer elements in the lists.\n- Optimize the function for performance, especially for large inputs.\nTo implement the function `max_sum_list` efficiently, we will use Python's built-in functions and libraries. The function will iterate through each list in the provided list of lists, calculate the sum of each list, and compare these sums to find the list with the highest sum. This approach ensures simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum'\n    In the requirement, it means finding the list within a list of lists that has the greatest sum of its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests iterating through each list, calculating the sum, and comparing these sums. This can be implemented efficiently using Python's built-in functions.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation:\n    The sums of the lists are 6, 15, 33, and 24 respectively. The list [10, 11, 12] has the highest sum of 33.\n    max_sum_list([[-1,-2,-3], [4,5,6], [10,11,12], [7,8,9]]) = [4, 5, 6]\n    Explanation:\n    The sums of the lists are -6, 15, 33, and 24 respectively. The list [4, 5, 6] has the highest sum of 15, even though the first list has negative numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly handle lists with negative numbers by finding the list with the highest sum regardless of the sign of the numbers.\n", "requirement analysis:\nThe requirement is to create a function that can determine which list within a list of lists has the highest sum of elements. This function should be efficient and work well with various sizes of input data. The function should be easy to understand and integrate into other projects.\nrequirement pool:\n- The main code should be efficient in calculating the sum of lists.\n- The function should handle different sizes of input data.\n- The function should be easy to understand and use.\n- The function should be tested for edge cases and large datasets.\n- The function should be integrated into a user-friendly application.\nTo create a function that can determine which list within a list of lists has the highest sum of elements, we will use Python's built-in functions and a simple approach. We will iterate through each list in the list of lists, calculate the sum of each list, and then compare these sums to find the list with the highest sum. This approach ensures efficiency and simplicity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum': means the sum of elements in a list should be the largest compared to other lists.\n    Explanation: The core concept here is to find the list with the maximum sum of its elements among a collection of lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `max_sum_list`, we will follow these steps:\n    1. Initialize a variable to keep track of the maximum sum found so far.\n    2. Initialize a variable to store the list corresponding to the maximum sum.\n    3. Iterate through each list in the list of lists.\n    4. For each list, calculate the sum of its elements.\n    5. Compare the sum with the current maximum sum and update the maximum sum and the corresponding list if the current sum is greater.\n    6. After iterating through all lists, return the list with the maximum sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of elements in [10, 11, 12] is 33, which is the highest sum among all lists.\n    max_sum_list([[1], [2], [3]]) = [3]\n    Explanation: The sum of elements in [3] is 3, which is the highest sum among all lists.\n    max_sum_list([[-1, -2, -3], [0, 0, 0], [1, 2, 3]]) = [1, 2, 3]\n    Explanation: The sum of elements in [1, 2, 3] is 6, which is the highest sum among all lists, even though some elements are negative.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already covers the case where all elements are negative or zero, as well as the case with a single-element list.\n", "requirement analysis:\nThe requirement is to create a function that can determine which list within a list of lists has the highest sum of elements. This function should be efficient and work well with various sizes of input data. The function should be easy to understand and integrate into other projects.\nrequirement pool:\n- The main code should be efficient in calculating the sum of lists.\n- The function should handle different sizes of input data.\n- The function should be easy to understand and use.\n- The function should be tested for edge cases and large datasets.\n- The function should be integrated into other projects seamlessly.\nTo create a function that can determine which list within a list of lists has the highest sum of elements, we will use Python's built-in functions and standard libraries. The function will iterate through each list, calculate the sum of each list, and compare these sums to find the list with the highest sum. This approach ensures efficiency and simplicity in handling different sizes of input data.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum': means the sum of elements in a list should be the largest compared to other lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `max_sum_list`, we will follow these steps:\n    1. Initialize a variable to keep track of the maximum sum found so far.\n    2. Initialize a variable to store the list with the maximum sum.\n    3. Iterate through each list in the list of lists.\n    4. For each list, calculate the sum of its elements.\n    5. Compare the sum with the current maximum sum. If it's greater, update the maximum sum and the list associated with this sum.\n    6. After iterating through all lists, return the list with the maximum sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of elements in [10, 11, 12] is 33, which is the highest sum among all lists.\n    max_sum_list([[1], [2], [3]]) = [3]\n    Explanation: All lists have only one element, so the one with the largest element is [3].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will work correctly for lists with only one element.\n\n# [code logic continued]\n    Here's the Python code to implement the function:\n    ```python\n    def max_sum_list(lists):\n        max_sum = float('-inf')\n        max_list = []\n        for lst in lists:\n            current_sum = sum(lst)\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lst\n        return max_list\n    ```\n", "requirement analysis:\nThe function max_sum_list requires a Python function that iterates through a list of lists, calculates the sum of each sublist, and returns the sublist with the highest sum. This function is essential for identifying the most valuable combination of elements from the input list.\nrequirement pool:\n- The main code should be efficient and handle large lists of sublists.\n- The game should be responsive and work on various devices.\n- Implement a user-friendly interface for easy navigation.\n- Ensure the game saves user progress across different sessions.\n- Include a tutorial for new players to understand the game easily.\nTo implement the function `max_sum_list`, we will use Python's built-in capabilities and the `itertools` library for efficient iteration. The function will iterate through each sublist, calculate the sum of each sublist, and keep track of the sublist with the highest sum. This approach ensures efficiency and simplicity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of sublists': the total value obtained by adding all elements within a sublist.\n    'greatest value': the highest sum among all sublists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': indicates that we need to find the sublist with the highest sum.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through each sublist to calculate the sum of elements.\n    - Keep track of the sublist with the highest sum.\n    - Return the sublist with the greatest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation:\n    - The sums of the sublists are: 6, 15, 33, 24.\n    - The sublist [10, 11, 12] has the greatest sum (33).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the sublist with the greatest sum.\n\n# [core concept]\n    'positive': means that all integers in the list are greater than 0.\n    'at least as many times': means the frequency of an integer in the list is greater than or equal to its value.\n\n# [phrase showing quantity relationship]\n    'more than': means we need to find an integer greater than 0.\n    'at least as many times': means we need to find an integer whose frequency in the list is greater than or equal to its value.\n\n# [degree adverb] \n    'largest': means we need to find the largest integer that meets the condition.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Create a dictionary to store the frequency of each integer in the list.\n    - Iterate through the list and update the frequency in the dictionary.\n    - Iterate through the dictionary to find the largest integer that meets the condition.\n    - Return the result or -1 if no such integer exists.\n\n# [edge case] \n    search([2,2,3,3,3]) = 3\n    Explanation:\n    - Both 2 and 3 appear more than or equal to their values.\n    - The largest number among them is 3.\n    search([3,3,2,4,4,4]) = -1\n    Explanation:\n    - Number 2 appears one time, number 3 appears two times, number 4 appears three times.\n    - None of them appear at least as many times as their values.\n    - Therefore, the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the largest integer that meets the condition.\n\n# [core concept]\n    'sum of sublists': the total value obtained by adding all elements within a sublist.\n    'greatest value': the highest sum among all sublists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': indicates that we need to find the sublist with the highest sum.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through each sublist to calculate the sum of elements.\n    - Keep track of the sublist with the highest sum.\n    - Return the sublist with the greatest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation:\n    - The sums of the sublists are: 6, 15, 33, 24.\n    - The sublist [10, 11, 12] has the greatest sum (33).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the sublist with the greatest sum.\n", "requirement analysis:\nThe function max_sum_list needs to identify the sublist with the maximum sum of elements from a given list of lists. This is a straightforward task that involves iterating through each sublist, calculating their sums, and comparing these sums to find the maximum. The function should return the sublist with the highest sum.\nrequirement pool:\n- The main code should correctly implement the max_sum_list function.\n- The function should handle lists of varying lengths and values.\n- Ensure the function is efficient in terms of time complexity.\n- Implement error handling for non-integer values in the sublists.\n- Include documentation and tests for the function.\nTo implement the function `max_sum_list`, we will use Python's built-in capabilities and the `itertools` library for efficient iteration. The function will iterate through each sublist, calculate the sum of its elements, and compare these sums to find the sublist with the maximum sum. We will also handle potential errors such as non-integer values in the sublists by implementing error handling.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of elements': The core concept is to find the sublist with the greatest sum of its elements.\n    Explanation: This involves calculating the total value of each sublist and identifying the one with the highest sum.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Steps to implement the function:\n    1. Iterate through each sublist in the given list.\n    2. Calculate the sum of elements in each sublist.\n    3. Keep track of the sublist with the maximum sum.\n    4. Return the sublist with the maximum sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of elements in [10, 11, 12] is 33, which is the highest sum among all sublists.\n    max_sum_list([[1], [2], [3]]) = [3]\n    Explanation: The sum of elements in [3] is 3, which is the highest sum among all sublists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the sublist with the maximum sum.\n", "requirement analysis:\nThe function max_sum_list needs to identify the sublist with the highest sum of elements from a given list of lists. This is a straightforward task that involves iterating through each sublist, calculating their sums, and comparing these sums to find the maximum. The function should return the sublist with the highest sum.\nrequirement pool:\n- The main code should correctly implement the max_sum_list function.\n- The function should handle any list of lists, including those with negative numbers.\n- The UI should be user-friendly and responsive across devices.\n- The game should provide clear feedback on scores and progress.\n- The game should be optimized for performance and load times.\nTo implement the function max_sum_list, we will use Python's built-in capabilities and the itertools library to efficiently generate all possible sublists from the given list. We will then calculate the sum of each sublist and compare these sums to find the sublist with the maximum sum. This approach ensures that we consider all possible combinations of elements from the original list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sublist': a smaller list within a larger list\n    'sum': the total of all elements in a list\n    'greatest value': the highest sum among all possible sublists\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'greatest': indicates that we need to find the sublist with the highest sum\n\n# [code logic]\n    To implement the function `max_sum_list`, we will follow these steps:\n    1. Generate all possible sublists from the given list using the itertools library.\n    2. Calculate the sum of each sublist.\n    3. Compare the sums to find the sublist with the maximum sum.\n    4. Return the sublist with the greatest sum.\n\n# [edge case] \n    max_sum_list([[1,2], [3,4], [5,6]]) = [5, 6]\n    Explanation: All sublists have the same sum, so any of them can be returned. However, based on the order of the input, the function returns [5, 6].\n    max_sum_list([[-1, -2], [1, 2], [3, 4]]) = [3, 4]\n    Explanation: The sublist [3, 4] has the highest sum among all sublists, which is 7.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will correctly return the sublist with the highest sum, regardless of the order of input or the presence of negative numbers.\n", "requirement analysis:\nThe original requirements specify a function that returns the list with the highest sum of elements from a list of lists. This is a clear and specific requirement that directly addresses the need to identify the most valuable list based on its sum. The function should be efficient and handle the input as specified, returning the correct list.\nrequirement pool:\n- The main code should efficiently calculate the sum of each list and return the one with the highest sum.\n- The function should handle various sizes of input lists.\n- Implement a user-friendly interface for easy interaction.\n- Ensure the game is responsive and works well on different devices.\n- Develop a visually appealing UI that is both beautiful and functional.\nTo implement the function `max_sum_list` that returns the list with the highest sum of elements from a list of lists, we will use Python's built-in functions and libraries. The approach involves iterating through each list in the provided list of lists, calculating the sum of each list, and then comparing these sums to find the list with the highest sum. This will be a straightforward and efficient solution using Python's standard capabilities.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum'\n    In the requirement, it means finding the list with the largest sum of its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through each list in the list of lists, calculate the sum of each list, and compare these sums to find the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of elements in [10, 11, 12] is 33, which is the highest sum among all the lists.\n    max_sum_list([[1], [2], [3]]) = [3]\n    Explanation: The sum of elements in [3] is 3, which is the highest sum among all the lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum.\n\n# [core concept]\n    'positive': means that all integers in the list are greater than 0\n\n# [phrase showing quantity relationship]\n    'more than': means that we need to find an integer greater than 0\n    'at least as many times': means that we need to find the integer whose count is greater than or equal to its value\n\n# [degree adverb] \n    'largest': means that we need the largest integer that appears greater or equal to its value\n\n# [code logic]\n    Provide detailed logic to implement the code\n\n# [edge case] \n    search([2,2,3,3,3]) = 3\n    Explanation: Both 2 and 3 appear more than or equal to their values, but 3 is the largest number\n    search([3,3,2,4,4,4]) = -1\n    Explanation: Number 2 appears one time, number 3 appears two times, number 4 appears three times, none of them appear more than or equal to their values, so the function returns -1\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can set the original return answer to -1 and then find the largest integer that meets the condition.\n\n# [core concept]\n    'highest sum'\n    In the requirement, it means finding the list with the largest sum of its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Iterate through each list in the list of lists, calculate the sum of each list, and compare these sums to find the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of elements in [10, 11, 12] is 33, which is the highest sum among all the lists.\n    max_sum_list([[1], [2], [3]]) = [3]\n    Explanation: The sum of elements in [3] is 3, which is the highest sum among all the lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum.\n", "requirement analysis:\nThe requirement is to create a function that finds the list with the highest sum of elements within a list of lists. This is a straightforward task that requires basic programming skills in Python. The function should be efficient and handle lists of varying sizes without performance issues.\nrequirement pool:\n- The main code should be efficient in calculating the sum of lists.\n- The function should return the correct list with the highest sum.\n- The function should handle edge cases such as empty lists or lists with negative numbers.\n- The function should be easy to understand and maintain.\n- The function should be optimized for performance, especially with large lists.\nTo create a function that finds the list with the highest sum of elements within a list of lists, we will use Python's built-in functions and standard library. The function will iterate through each list, calculate the sum of each, and compare these sums to find the list with the highest sum. This approach ensures efficiency and simplicity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum'\n    In the requirement, it refers to finding the list within a collection of lists that has the maximum sum of its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through each list in the list of lists.\n    - Calculate the sum of each list.\n    - Compare the sums to find the list with the highest sum.\n    - Return the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1], [2], [3]]) = [3]\n    Explanation:\n    - There is only one list in the list of lists, so the list with the highest sum is [3] since it is the only list.\n    - The expected output is [3] as it is the list with the highest sum.\n    max_sum_list([[1,2,3], [4,5], [10,11,12,13], [7,8,9]]) = [10, 11, 12, 13]\n    Explanation:\n    - The list [10, 11, 12, 13] has the highest sum (46) among all lists.\n    - The expected output is [10, 11, 12, 13] as it is the list with the highest sum.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic of iterating through the list of lists, calculating the sum of each list, and comparing these sums is sufficient to solve the problem.\n", "requirement analysis:\nThe requirement is to create a function that finds the list with the highest sum of elements within a list of lists. This is a straightforward task that involves iterating through the lists, calculating their sums, and returning the list with the highest sum. The function should be efficient and handle various sizes of input lists.\nrequirement pool:\n- The main code should be efficient in calculating the sum of lists.\n- The function should return the list with the highest sum.\n- The function should handle lists of different sizes.\n- The function should be easy to understand and use.\n- The function should be tested for edge cases such as empty lists and lists with negative numbers.\nTo implement the function `max_sum_list` efficiently, we will use Python's built-in functions and libraries. The function will iterate through each list in the provided list of lists, calculate the sum of each list, and then return the list with the highest sum. This approach ensures simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sum of elements': the total value obtained by adding all the numbers in a list.\n    'list of lists': a collection of lists within a single list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `max_sum_list`, we will follow these steps:\n    1. Initialize a variable to keep track of the maximum sum found so far.\n    2. Initialize a variable to store the list with the maximum sum.\n    3. Iterate through each list in the list of lists.\n    4. Calculate the sum of the current list.\n    5. Compare the sum with the maximum sum found so far.\n    6. If the current sum is greater, update the maximum sum and the list associated with it.\n    7. After iterating through all lists, return the list with the maximum sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation: The sum of elements in each list is 6, 15, 33, and 24 respectively. The list [10, 11, 12] has the highest sum of 33.\n    max_sum_list([[-1,-2,-3], [0,0,0], [1,1,1]]) = [1, 1, 1]\n    Explanation: The sum of elements in each list is -6, 0, and 3 respectively. The list [1, 1, 1] has the highest sum of 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum for any list of lists input.\n", "requirement analysis:\nThe requirement is to create a function that returns the list with the highest sum of elements from a list of lists. This is a straightforward task that requires basic programming skills. The function should be efficient and handle various sizes of input data.\nrequirement pool:\n- The main code should be efficient in calculating the sum of elements in each list and comparing them to find the maximum sum.\n- The function should handle different sizes of input data without performance issues.\n- The function should be easy to understand and use, with clear documentation.\n- The function should be tested for edge cases, such as empty lists or lists with negative numbers.\n- The function should be optimized for performance, especially for large datasets.\nTo implement the function `max_sum_list` efficiently, we will use Python's built-in functions and libraries. The function will iterate through each list in the provided list of lists, calculate the sum of each list, and then compare these sums to find the list with the highest sum. This approach ensures simplicity and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'highest sum'\n    In the requirement, it means finding the list within a list of lists that has the maximum sum of its elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through each list in the provided list of lists.\n    - Calculate the sum of each list.\n    - Compare these sums to find the list with the highest sum.\n    - Return the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation:\n    - The sum of [1,2,3] is 6.\n    - The sum of [4,5,6] is 15.\n    - The sum of [10,11,12] is 33.\n    - The sum of [7,8,9] is 24.\n    - The list [10,11,12] has the highest sum (33).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum.\n\n# [core concept]\n    'positive integers'\n    In the requirement, it means that all integers in the list are positive and greater than zero.\n\n# [phrase showing quantity relationship]\n    'more than zero'\n    This phrase indicates that we need to consider only positive integers.\n\n# [degree adverb] \n    'largest'\n    This adverb indicates that we need to find the largest integer that meets the condition.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Create a dictionary to store the frequency of each integer in the list.\n    - Iterate through the list and update the frequency in the dictionary.\n    - Iterate through the dictionary to find the largest integer that meets the condition.\n    - Return the result or -1 if no such integer exists.\n\n# [edge case] \n    search([2,2,3,3,3]) = 3\n    Explanation:\n    - Both 2 and 3 appear more than or equal to their values.\n    - 3 is the largest number among them.\n    search([3,3,2,4,4,4]) = -1\n    Explanation:\n    - Number 2 appears one time, number 3 appears two times, number 4 appears three times.\n    - None of them appear more than or equal to their values.\n    - Therefore, the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the largest integer that meets the condition.\n\n# [core concept]\n    'list of lists'\n    In the requirement, it means a collection of lists within a single list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Iterate through each list in the provided list of lists.\n    - Calculate the sum of each list.\n    - Compare these sums to find the list with the highest sum.\n    - Return the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) = [10, 11, 12]\n    Explanation:\n    - The sum of [1,2,3] is 6.\n    - The sum of [4,5,6] is 15.\n    - The sum of [10,11,12] is 33.\n    - The sum of [7,8,9] is 24.\n    - The list [10,11,12] has the highest sum (33).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic will correctly identify the list with the highest sum.\n"], "test": ["def check(max_sum_list):\n\tassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ", "def check(max_sum_list):\n\tassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ", "def check(max_sum_list):\n\tassert max_sum_list([[2,3,1]])==[2,3,1] ", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 1], [2, 2, 6], [5, 16, 17], [9, 8, 14]]) == [5, 16, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 4], [9, 6, 1], [6, 15, 15], [2, 4, 11]]) == [6, 15, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 8], [9, 7, 8], [7, 9, 9], [3, 4, 10]]) == [7, 9, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 7, 7], [2, 6, 5], [14, 14, 14], [6, 13, 10]]) == [14, 14, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 6], [4, 1, 6], [15, 12, 16], [3, 10, 14]]) == [15, 12, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 7], [7, 1, 10], [13, 15, 14], [2, 12, 8]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 5], [5, 3, 11], [13, 13, 17], [4, 9, 13]]) == [13, 13, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 5], [9, 4, 6], [15, 6, 15], [8, 3, 9]]) == [15, 6, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 3], [9, 2, 5], [5, 13, 13], [7, 3, 6]]) == [5, 13, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 6], [8, 3, 4], [7, 16, 15], [9, 11, 10]]) == [7, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 6, 2], [8, 5, 10], [12, 13, 10], [6, 10, 4]]) == [12, 13, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 1, 2], [2, 1, 11], [8, 7, 9], [10, 11, 12]]) == [10, 11, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 6, 4], [3, 6, 9], [6, 7, 11], [7, 7, 4]]) == [6, 7, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 7, 6], [5, 7, 4], [10, 6, 10], [10, 4, 8]]) == [10, 6, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 7], [9, 10, 5], [11, 13, 17], [10, 5, 6]]) == [11, 13, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 2, 8], [8, 7, 8], [13, 11, 11], [2, 3, 10]]) == [13, 11, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 2], [8, 10, 11], [5, 9, 9], [7, 12, 11]]) == [7, 12, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 1, 3], [2, 8, 3], [13, 14, 7], [8, 11, 14]]) == [13, 14, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 3, 3], [8, 5, 6], [14, 10, 14], [8, 8, 5]]) == [14, 10, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 2, 8], [2, 4, 2], [13, 13, 16], [7, 7, 7]]) == [13, 13, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 1, 7], [3, 2, 1], [10, 11, 13], [7, 6, 13]]) == [10, 11, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 8], [2, 9, 8], [13, 7, 11], [10, 11, 10]]) == [13, 7, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 8], [3, 2, 8], [6, 16, 12], [5, 6, 8]]) == [6, 16, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 2, 3], [7, 8, 6], [14, 7, 8], [5, 8, 8]]) == [14, 7, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 6, 6], [6, 6, 3], [8, 11, 16], [4, 8, 5]]) == [8, 11, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 4], [1, 6, 9], [9, 6, 17], [3, 6, 10]]) == [9, 6, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 5, 1], [8, 1, 6], [10, 7, 14], [10, 6, 4]]) == [10, 7, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 6], [6, 1, 6], [7, 9, 16], [10, 4, 14]]) == [7, 9, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 2, 7], [2, 9, 9], [13, 8, 12], [2, 13, 4]]) == [13, 8, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 2], [2, 3, 11], [11, 7, 14], [8, 10, 9]]) == [11, 7, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 3, 1], [5, 5, 2], [13, 15, 14], [10, 10, 13]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 6, 2], [4, 9, 1], [8, 12, 9], [7, 6, 4]]) == [8, 12, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 6, 7], [2, 4, 4], [12, 10, 8], [3, 8, 6]]) == [12, 10, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 3, 6], [4, 2, 9], [13, 15, 14]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6], [8, 9, 1], [7, 9, 11]]) == [7, 9, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 3, 3], [6, 3, 5], [16, 9, 7]]) == [16, 9, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 6], [9, 4, 8], [10, 11, 6]]) == [10, 11, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 4], [5, 8, 2], [9, 7, 12]]) == [9, 7, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 1], [10, 10, 9], [14, 14, 12]]) == [14, 14, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 2, 1], [8, 10, 7], [16, 11, 11]]) == [16, 11, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 5, 3], [9, 8, 2], [11, 13, 13]]) == [11, 13, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 4, 1], [11, 4, 6], [13, 11, 13]]) == [13, 11, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 4, 3], [10, 2, 4], [9, 8, 10]]) == [9, 8, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 5], [1, 7, 8], [7, 13, 7]]) == [7, 13, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 6], [8, 2, 1], [14, 8, 15]]) == [14, 8, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 5], [11, 5, 3], [13, 13, 10]]) == [13, 13, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 6, 2], [7, 10, 1], [12, 11, 6]]) == [12, 11, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 4, 6], [1, 9, 2], [7, 16, 15]]) == [7, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[8, 3, 6], [6, 2, 4], [8, 10, 15]]) == [8, 10, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 4], [1, 2, 2], [17, 8, 9]]) == [17, 8, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 7, 1], [4, 4, 9], [10, 6, 15]]) == [10, 6, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6], [2, 8, 1], [16, 6, 13]]) == [16, 6, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 6], [3, 3, 1], [17, 10, 10]]) == [17, 10, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[8, 6, 3], [2, 1, 1], [9, 8, 13]]) == [9, 8, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 4, 5], [7, 4, 3], [8, 8, 13]]) == [8, 8, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 4], [5, 4, 7], [8, 16, 12]]) == [8, 16, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 7, 3], [5, 1, 4], [15, 11, 8]]) == [15, 11, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 2], [10, 7, 7], [7, 16, 10]]) == [7, 16, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 5], [2, 10, 1], [15, 9, 10]]) == [15, 9, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 6, 1], [10, 1, 7], [11, 15, 5]]) == [11, 15, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 5], [2, 8, 2], [12, 10, 12]]) == [12, 10, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 1, 2], [6, 10, 7], [11, 16, 13]]) == [11, 16, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 1], [9, 10, 4], [11, 13, 14]]) == [11, 13, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 3], [7, 6, 4], [16, 8, 7]]) == [16, 8, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 7, 3], [7, 6, 4], [11, 16, 15]]) == [11, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 5], [11, 5, 2], [8, 11, 9]]) == [8, 11, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 8, 6]]) == [2, 8, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 7, 2]]) == [7, 7, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 5, 2]]) == [6, 5, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 1, 4]]) == [3, 1, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 2]]) == [6, 4, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 3, 1]]) == [1, 3, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 7, 2]]) == [2, 7, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 1, 6]]) == [7, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 5]]) == [2, 3, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 2, 1]]) == [1, 2, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 7, 4]]) == [3, 7, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 2]]) == [2, 3, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 5]]) == [5, 5, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 6, 2]]) == [1, 6, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 6]]) == [4, 5, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 4, 1]]) == [3, 4, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 3]]) == [1, 4, 3]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 3, 2]]) == [6, 3, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 1]]) == [4, 2, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 7, 6]]) == [4, 7, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 4, 4]]) == [4, 4, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 7, 1]]) == [3, 7, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 4]]) == [4, 5, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 6, 4]]) == [2, 6, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 6]]) == [2, 3, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 6]]) == [1, 4, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 5, 6]]) == [6, 5, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 8, 3]]) == [4, 8, 3]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 1]]) == [6, 4, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 1]]) == [5, 5, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 1]]) == [1, 1, 1]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given a list of lists of integers, return the list with the highest sum of its elements.\n    \n    Args:\n        lists (List[List[int]]): A list of lists containing integers.\n        \n    Returns:\n        List[int]: The list with the highest sum of its elements.\n    \"\"\"\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n", "passed": true, "pass": true, "pass_num": 10, "round": 261, "mutate_method": "expand_one2two", "parent_index": 261}
