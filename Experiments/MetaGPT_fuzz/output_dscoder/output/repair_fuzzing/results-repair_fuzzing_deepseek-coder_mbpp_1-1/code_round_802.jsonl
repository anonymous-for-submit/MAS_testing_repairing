{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 282, "prompt": "Write a function to subtract two lists element-wise.", "code": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "test_imports": [], "test_list": ["assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "assert sub_list([1,2],[3,4])==[-2,-2]", "assert sub_list([90,120],[50,70])==[40,50]", "assert sub_list([2, 2, 6], [4, 1, 3]) == [-2, 1, 3]", "assert sub_list([1, 5, 3], [5, 6, 7]) == [-4, -1, -4]", "assert sub_list([3, 5, 4], [6, 3, 3]) == [-3, 2, 1]", "assert sub_list([1, 2, 2], [7, 9, 6]) == [-6, -7, -4]", "assert sub_list([5, 1, 3], [7, 1, 5]) == [-2, 0, -2]", "assert sub_list([3, 2, 7], [6, 3, 4]) == [-3, -1, 3]", "assert sub_list([5, 7, 1], [3, 3, 2]) == [2, 4, -1]", "assert sub_list([4, 2, 8], [7, 1, 6]) == [-3, 1, 2]", "assert sub_list([1, 7, 7], [1, 7, 3]) == [0, 0, 4]", "assert sub_list([1, 2, 8], [4, 9, 3]) == [-3, -7, 5]", "assert sub_list([3, 6, 1], [8, 3, 9]) == [-5, 3, -8]", "assert sub_list([2, 1, 4], [6, 1, 9]) == [-4, 0, -5]", "assert sub_list([3, 1, 3], [3, 9, 9]) == [0, -8, -6]", "assert sub_list([2, 2, 3], [2, 7, 11]) == [0, -5, -8]", "assert sub_list([5, 1, 1], [2, 10, 4]) == [3, -9, -3]", "assert sub_list([6, 6, 2], [1, 8, 11]) == [5, -2, -9]", "assert sub_list([1, 1, 3], [5, 1, 9]) == [-4, 0, -6]", "assert sub_list([3, 3, 8], [1, 7, 8]) == [2, -4, 0]", "assert sub_list([1, 6, 7], [4, 1, 9]) == [-3, 5, -2]", "assert sub_list([1, 2, 2], [9, 8, 6]) == [-8, -6, -4]", "assert sub_list([6, 7, 4], [1, 9, 6]) == [5, -2, -2]", "assert sub_list([3, 3, 8], [9, 5, 8]) == [-6, -2, 0]", "assert sub_list([5, 6, 7], [2, 2, 9]) == [3, 4, -2]", "assert sub_list([5, 6, 7], [5, 5, 6]) == [0, 1, 1]", "assert sub_list([1, 2, 2], [3, 1, 2]) == [-2, 1, 0]", "assert sub_list([2, 7, 7], [2, 9, 2]) == [0, -2, 5]", "assert sub_list([3, 7, 8], [5, 9, 11]) == [-2, -2, -3]", "assert sub_list([2, 6, 4], [3, 1, 4]) == [-1, 5, 0]", "assert sub_list([6, 2, 6], [4, 7, 7]) == [2, -5, -1]", "assert sub_list([1, 6, 2], [9, 1, 6]) == [-8, 5, -4]", "assert sub_list([1, 5, 7], [1, 5, 2]) == [0, 0, 5]", "assert sub_list([1, 2, 7], [8, 5, 3]) == [-7, -3, 4]", "assert sub_list([2, 7, 1], [5, 5, 8]) == [-3, 2, -7]", "assert sub_list([5, 6], [4, 8]) == [1, -2]", "assert sub_list([2, 6], [3, 9]) == [-1, -3]", "assert sub_list([5, 3], [6, 2]) == [-1, 1]", "assert sub_list([3, 5], [3, 5]) == [0, 0]", "assert sub_list([4, 6], [3, 6]) == [1, 0]", "assert sub_list([6, 3], [7, 6]) == [-1, -3]", "assert sub_list([3, 2], [2, 6]) == [1, -4]", "assert sub_list([4, 6], [1, 1]) == [3, 5]", "assert sub_list([1, 2], [1, 1]) == [0, 1]", "assert sub_list([1, 3], [6, 8]) == [-5, -5]", "assert sub_list([2, 2], [7, 6]) == [-5, -4]", "assert sub_list([1, 6], [3, 6]) == [-2, 0]", "assert sub_list([3, 2], [3, 7]) == [0, -5]", "assert sub_list([2, 2], [4, 1]) == [-2, 1]", "assert sub_list([3, 2], [7, 7]) == [-4, -5]", "assert sub_list([4, 7], [8, 8]) == [-4, -1]", "assert sub_list([3, 6], [1, 6]) == [2, 0]", "assert sub_list([1, 7], [1, 6]) == [0, 1]", "assert sub_list([3, 3], [4, 7]) == [-1, -4]", "assert sub_list([3, 2], [8, 6]) == [-5, -4]", "assert sub_list([4, 1], [6, 2]) == [-2, -1]", "assert sub_list([6, 2], [6, 9]) == [0, -7]", "assert sub_list([2, 4], [2, 2]) == [0, 2]", "assert sub_list([3, 4], [5, 4]) == [-2, 0]", "assert sub_list([3, 7], [3, 8]) == [0, -1]", "assert sub_list([2, 5], [1, 3]) == [1, 2]", "assert sub_list([4, 6], [4, 2]) == [0, 4]", "assert sub_list([5, 6], [3, 4]) == [2, 2]", "assert sub_list([1, 6], [3, 9]) == [-2, -3]", "assert sub_list([6, 3], [3, 2]) == [3, 1]", "assert sub_list([2, 1], [5, 9]) == [-3, -8]", "assert sub_list([5, 1], [5, 5]) == [0, -4]", "assert sub_list([4, 6], [7, 7]) == [-3, -1]", "assert sub_list([88, 120], [55, 65]) == [33, 55]", "assert sub_list([85, 121], [45, 71]) == [40, 50]", "assert sub_list([92, 125], [46, 74]) == [46, 51]", "assert sub_list([93, 115], [50, 68]) == [43, 47]", "assert sub_list([90, 116], [45, 72]) == [45, 44]", "assert sub_list([88, 119], [51, 67]) == [37, 52]", "assert sub_list([91, 121], [47, 74]) == [44, 47]", "assert sub_list([94, 118], [53, 71]) == [41, 47]", "assert sub_list([89, 119], [51, 65]) == [38, 54]", "assert sub_list([85, 124], [48, 72]) == [37, 52]", "assert sub_list([89, 124], [53, 67]) == [36, 57]", "assert sub_list([90, 118], [50, 67]) == [40, 51]", "assert sub_list([85, 123], [54, 70]) == [31, 53]", "assert sub_list([85, 118], [48, 75]) == [37, 43]", "assert sub_list([91, 122], [45, 73]) == [46, 49]", "assert sub_list([90, 115], [47, 71]) == [43, 44]", "assert sub_list([89, 125], [55, 70]) == [34, 55]", "assert sub_list([89, 115], [50, 71]) == [39, 44]", "assert sub_list([94, 119], [45, 75]) == [49, 44]", "assert sub_list([89, 117], [46, 68]) == [43, 49]", "assert sub_list([90, 118], [54, 67]) == [36, 51]", "assert sub_list([90, 118], [53, 70]) == [37, 48]", "assert sub_list([88, 125], [54, 69]) == [34, 56]", "assert sub_list([92, 115], [49, 71]) == [43, 44]", "assert sub_list([86, 119], [50, 71]) == [36, 48]", "assert sub_list([85, 119], [48, 67]) == [37, 52]", "assert sub_list([93, 122], [54, 69]) == [39, 53]", "assert sub_list([93, 119], [49, 74]) == [44, 45]", "assert sub_list([88, 123], [46, 67]) == [42, 56]", "assert sub_list([90, 116], [50, 73]) == [40, 43]", "assert sub_list([93, 120], [46, 68]) == [47, 52]", "assert sub_list([85, 116], [53, 69]) == [32, 47]", "assert sub_list([86, 123], [46, 75]) == [40, 48]"], "entry_point": "sub_list", "repair_prompt": ["Write a function sub_list to subtract two lists element-wise.\nsub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n", " Write a function sub_list that performs element-wise subtraction between two lists.\nsub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n", " Write a function sub_list to subtract two lists element-wise, returning a new list with the results.\nsub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n"], "completions": ["from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    # Check if the lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    # Subtract elements element-wise\n    return [a - b for a, b in zip(list1, list2)]\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Takes two lists of numbers and returns a new list where each element is the result of subtracting the corresponding elements from the two input lists.\n    \n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n    \n    Returns:\n        list: A new list with the subtracted elements.\n    \n    Raises:\n        ValueError: If the two lists are not of the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    return [a - b for a, b in zip(list1, list2)]\n", "from typing import List\nfrom typing import List\n\ndef sub_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Subtracts corresponding elements from two lists of integers.\n\n    Args:\n        list1 (List[int]): The first list of integers.\n        list2 (List[int]): The second list of integers.\n\n    Returns:\n        List[int]: A new list where each element is the result of subtracting\n                   the corresponding elements from the two input lists.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length for element-wise subtraction.\")\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] - list2[i])\n    \n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Performs element-wise subtraction between two lists of integers.\n\n    Args:\n        list1 (list[int]): The first list of integers.\n        list2 (list[int]): The second list of integers.\n\n    Returns:\n        list[int]: A new list containing the element-wise subtraction results.\n\n    Raises:\n        ValueError: If the lists are not of the same length.\n    \"\"\"\n    # Check if both lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n\n    # Initialize an empty list to store the results\n    result = []\n\n    # Iterate through the elements of both lists simultaneously\n    for item1, item2 in zip(list1, list2):\n        # Subtract the corresponding elements from the two lists\n        result.append(item1 - item2)\n\n    # Return the results list\n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(lst1: list[int], lst2: list[int]) -> list[int]:\n    \"\"\"\n    Performs element-wise subtraction between two lists of integers.\n\n    Args:\n        lst1 (list[int]): The first list of integers.\n        lst2 (list[int]): The second list of integers.\n\n    Returns:\n        list[int]: A new list containing the element-wise differences.\n\n    Raises:\n        ValueError: If the lists are of different lengths.\n    \"\"\"\n    # Check if the lists are of the same length\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    # Perform element-wise subtraction\n    result = [a - b for a, b in zip(lst1, lst2)]\n    \n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    This function takes two lists of integers as input and returns a new list of integers\n    by performing element-wise subtraction. If the lists are of different lengths, it will\n    truncate the longer list to match the shorter one.\n    \n    Args:\n        list1 (list[int]): The first list of integers.\n        list2 (list[int]): The second list of integers.\n    \n    Returns:\n        list[int]: A new list of integers resulting from element-wise subtraction.\n    \"\"\"\n    # Handle edge cases\n    if not list1:\n        return []\n    if not list2:\n        return list1\n    \n    # Determine the length of the shorter list\n    min_length = min(len(list1), len(list2))\n    \n    # Perform element-wise subtraction\n    result = [list1[i] - list2[i] for i in range(min_length)]\n    \n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts the second list from the first list element-wise.\n\n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n\n    Returns:\n        list: A new list with the results of subtracting list2 from list1 element-wise.\n\n    Raises:\n        ValueError: If the lists are not of the same length.\n    \"\"\"\n    # Check if both lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length for element-wise subtraction.\")\n    \n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate through both lists simultaneously\n    for item1, item2 in zip(list1, list2):\n        # Subtract the element from the second list from the element in the first list\n        # and append the result to the results list\n        result.append(item1 - item2)\n    \n    # Return the results list\n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts the second list from the first list element-wise.\n\n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n\n    Returns:\n        list: A new list with the results of subtracting list2 from list1 element-wise.\n\n    Raises:\n        ValueError: If the two lists are not of the same length.\n    \"\"\"\n    # Check if both lists are of the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length for element-wise subtraction.\")\n    \n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate through both lists simultaneously\n    for item1, item2 in zip(list1, list2):\n        # Subtract the second element from the first and append the result\n        result.append(item1 - item2)\n    \n    # Return the results list\n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list[int | float], list2: list[int | float]) -> list[int | float]:\n    \"\"\"\n    Subtracts corresponding elements of two lists element-wise.\n\n    Args:\n        list1 (list[int | float]): The first list of numbers (integers or floats).\n        list2 (list[int | float]): The second list of numbers (integers or floats).\n\n    Returns:\n        list[int | float]: A new list with the results of subtracting list2 from list1 element-wise.\n\n    Raises:\n        ValueError: If the lists are of unequal length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length\")\n    \n    result = []\n    for num1, num2 in zip(list1, list2):\n        result.append(num1 - num2)\n    \n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Subtracts corresponding elements from two lists of integers.\n\n    Args:\n        list1 (list[int]): The first list of integers.\n        list2 (list[int]): The second list of integers.\n\n    Returns:\n        list[int]: A new list containing the differences of corresponding elements.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] - list2[i])\n\n    return result\n"], "plans": ["requirement analysis:\nThe original requirement is to create a function that subtracts two lists element-wise. This is a basic operation in data manipulation and is a prerequisite for more complex mathematical operations that can be performed on lists. The function should work for lists of any length and should handle cases where the lists are of different lengths by raising an appropriate error.\nrequirement pool:\n- The main code should be efficient and handle edge cases such as lists of different lengths.\n- The function should be easy to understand and use, with clear documentation.\n- The function should be tested thoroughly to ensure it works as expected.\nTo implement the function `sub_list` that subtracts two lists element-wise, we will use Python's built-in capabilities for list operations. This approach is efficient and leverages Python's strong support for data manipulation. We will ensure that the function handles lists of different lengths by raising a clear error, adhering to the requirement to be robust in such cases.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'element-wise subtraction': This means that each element in the first list is subtracted from the corresponding element in the second list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `sub_list`, we will follow these steps:\n    1. Check if both input lists are of the same length. If not, raise a ValueError.\n    2. Iterate through both lists simultaneously.\n    3. Subtract the corresponding elements from each list.\n    4. Store the result in a new list.\n    5. Return the resulting list.\n\n# [edge case] \n    sub_list([1, 2, 3], [4, 5]) = ValueError\n    Explanation: The lists are of different lengths, which is not allowed. The function should raise a ValueError to indicate this error.\n    sub_list([1, 2, 3], [1, 2, 3]) = [0, 0, 0]\n    Explanation: Each element in the first list is subtracted from the corresponding element in the second list, resulting in a list of zeros.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case.\n        if len(list1) != len(list2):\n            raise ValueError(\"Lists must be of the same length\")\n        (other code)\n", "requirement analysis:\nThe original requirement is to create a function that subtracts two lists element-wise. This is a basic operation in data manipulation and is a prerequisite for more complex data processing tasks. The function should work for lists of equal length and return a list of the same length with each element being the result of the subtraction of the corresponding elements from the input lists.\nrequirement pool:\n- The main code should include a function named sub_list that takes two lists as input and returns a new list with each element being the result of the subtraction of the corresponding elements from the input lists.\n- The function should handle cases where the input lists are of different lengths by raising an appropriate error or warning.\n- The function should be tested with various inputs to ensure it works correctly and handles edge cases appropriately.\nWe will implement the function `sub_list` using Python's built-in capabilities. This function will take two lists of numbers as input and return a new list where each element is the result of subtracting the corresponding elements from the two input lists. This approach leverages Python's ability to perform arithmetic operations on lists directly.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'element-wise subtraction': This means that each element in the first list is subtracted from the corresponding element in the second list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `sub_list` function, we can use a simple for loop to iterate through both lists simultaneously, performing the subtraction operation on each pair of elements. Here's a detailed implementation:\n\n    ```python\n    def sub_list(list1, list2):\n        if len(list1) != len(list2):\n            raise ValueError(\"Lists must be of the same length\")\n        return [a - b for a, b in zip(list1, list2)]\n    ```\n\n    This function first checks if the two lists are of the same length. If they are not, it raises a `ValueError`. If they are, it uses a list comprehension with `zip` to iterate over pairs of elements from both lists, performing the subtraction operation, and returns the resulting list.\n\n# [edge case] \n    sub_list([1, 2, 3], [4, 5, 6]) = [-3, -3, -3]\n    Explanation: Each element in the first list is subtracted from the corresponding element in the second list, resulting in [-3, -3, -3].\n\n    sub_list([1, 2, 3], [1, 2, 3]) = [0, 0, 0]\n    Explanation: Each element in the first list is subtracted from the corresponding element in the second list, resulting in [0, 0, 0].\n\n    sub_list([10, 20, 30], [1, 2, 3]) = [9, 18, 27]\n    Explanation: Each element in the first list is subtracted from the corresponding element in the second list, resulting in [9, 18, 27].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided implementation already checks for the length of the lists and raises an error if they are not the same, ensuring that the function works correctly for lists of the same length.\n", "requirement analysis:\nThe original requirement is to create a function that subtracts two lists element-wise. This is a basic operation in data manipulation and is a prerequisite for more complex data processing tasks. The function should work for lists of equal length and return a list of the same length with each element being the result of the subtraction of the corresponding elements from the input lists.\nrequirement pool:\n- The main code should include a function named sub_list that takes two lists as input and returns a new list with each element being the result of the subtraction of the corresponding elements from the input lists.\n- The function should handle lists of equal length. If the input lists are of different lengths, the function should raise an error indicating that the operation is not defined for lists of unequal length.\n- The function should be tested with various inputs to ensure it works correctly for different scenarios.\nWe will implement the function `sub_list` using Python's built-in capabilities. This function will take two lists of numbers as input and return a new list where each element is the result of subtracting the corresponding elements from the two input lists. We will ensure that both input lists are of the same length, otherwise, we will raise a ValueError.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'element-wise subtraction': This means that each element in the first list is subtracted from the corresponding element in the second list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if both input lists are of the same length.\n    (2) Initialize an empty list to store the results.\n    (3) Iterate through the elements of the lists using a loop.\n    (4) For each pair of elements, subtract the element from the second list from the element in the first list.\n    (5) Append the result to the results list.\n    (6) Return the results list.\n\n# [edge case] \n    sub_list([1, 2, 3], [4, 5]) = ValueError\n    Explanation: The lengths of the input lists are not the same, so element-wise subtraction is not possible. This is an edge case where the function should raise a ValueError.\n    sub_list([], [1, 2, 3]) = []\n    Explanation: The first list is empty, so the result of subtraction for each element will be the corresponding element from the second list, which is not present in the first list, resulting in a list of zeros.\n    sub_list([1, 2, 3], [1, 2, 3]) = [0, 0, 0]\n    Explanation: Each element in the first list is subtracted from the corresponding element in the second list, resulting in a list of zeros since the elements are the same.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the lists are of different lengths.\n        if len(list1) != len(list2):\n            raise ValueError(\"Lists must be of the same length for element-wise subtraction.\")\n", "requirement analysis:\nThe original requirement is to create a function that performs element-wise subtraction between two lists. This is a basic operation that can be used in various applications, including data processing and scientific computing. The function should handle lists of equal length and return a new list with the results of the subtraction. The example provided is [1, 2, 3] subtracted from [4, 5, 6], which should result in [-3, -3, -3].\nrequirement pool:\n- The main code should include a function named sub_list that takes two lists as input and returns a new list with the results of element-wise subtraction.\n- The function should handle lists of equal length.\n- The function should return a new list with the results of the subtraction.\n- The function should handle edge cases such as empty lists or lists with non-numeric elements.\nTo implement the function sub_list that performs element-wise subtraction between two lists, we will use Python's built-in capabilities. This approach is simple and leverages Python's strengths in list operations. The function will take two lists as input, ensure they are of equal length, and then perform subtraction element-wise. If the lists are not of equal length, the function will raise a ValueError.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'element-wise subtraction': This means that for each corresponding element in the two lists, the function will subtract the element from the second list from the element in the first list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Check if both lists are of the same length.\n    (2) Initialize an empty list to store the results.\n    (3) Iterate through the elements of both lists simultaneously.\n    (4) Subtract the corresponding elements from the two lists.\n    (5) Append the result to the results list.\n    (6) Return the results list.\n\n# [edge case] \n    sub_list([1, 2, 3], [4, 5]) = ValueError\n    Explanation: The function should raise a ValueError because the lists are not of the same length.\n    sub_list([], [1, 2, 3]) = []\n    Explanation: If the first list is empty, the result should be an empty list since there are no elements to subtract from.\n    sub_list([1, 2, 3], [1, 2, 3]) = [0, 0, 0]\n    Explanation: If both lists are identical, the result should be a list of zeros.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the lists are not of the same length.\n        if len(list1) != len(list2):\n            raise ValueError(\"Lists must be of the same length\")\n        (other code)\n", "requirement analysis:\nThe original requirement is to create a function that performs element-wise subtraction between two lists. This is a basic operation that can be used in various applications, including data processing and scientific computing. The function should be efficient and handle cases where the lists are of different lengths by raising an appropriate error.\nrequirement pool:\n- The main code should perform element-wise subtraction between two lists.\n- The function should handle lists of different lengths by raising an error.\n- The function should be optimized for performance.\n- The function should be tested for edge cases, such as empty lists or lists with non-numeric elements.\n- The function should be documented with clear examples and usage instructions.\nTo implement the element-wise subtraction between two lists efficiently, we will use Python's built-in capabilities. This approach will ensure that the function is both simple and performant. We will handle cases where the lists are of different lengths by raising a ValueError.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'element-wise subtraction': This refers to the operation of subtracting corresponding elements from two lists to produce a new list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using Python's built-in capabilities to perform element-wise subtraction. Here's a detailed logic:\n    1. Define the function `sub_list` that takes two parameters, `lst1` and `lst2`.\n    2. Check if the lengths of `lst1` and `lst2` are equal. If not, raise a `ValueError`.\n    3. Use a list comprehension to iterate over the indices of `lst1` and `lst2`, subtracting the corresponding elements.\n    4. Return the resulting list.\n\n# [edge case] \n    sub_list([1, 2, 3], [4, 5]) = ValueError\n    Explanation: The lists are of different lengths, which is not handled by the function. This is an edge case where the function should raise a `ValueError`.\n    sub_list([], [1, 2, 3]) = []\n    Explanation: One of the lists is empty. The function should return an empty list since there are no elements to subtract.\n    sub_list([5, 5, 5], [3, 3, 3]) = [2, 2, 2]\n    Explanation: Both lists are of the same length, and the function correctly performs element-wise subtraction.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the lists are of different lengths.\n    ```python\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Lists must be of the same length\")\n    ```\n", "requirement analysis:\nThe original requirement is to create a function that performs element-wise subtraction between two lists. This is a basic operation that can be useful in various applications. The function should take two lists as input and return a new list with the results of subtracting the second list from the first.\nrequirement pool:\n- The main code should be efficient and handle edge cases such as lists of different lengths.\n- The function should be tested thoroughly to ensure it works correctly for various inputs.\n- The UI should include options for customizing the game difficulty and displaying scores clearly.\n- The game should be responsive and work well on both desktop and mobile devices.\n- The UI should be visually appealing and include a restart button after a game ends.\nTo implement the element-wise subtraction function, we will use Python's built-in capabilities, ensuring efficiency and handling of edge cases such as lists of different lengths. The function will be tested thoroughly to ensure it works correctly for various inputs, including empty lists and lists of different lengths.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'element-wise subtraction': This means that for each corresponding element in the two lists, the function will subtract the element from the second list from the element in the first list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function should iterate through both lists simultaneously, subtract the corresponding elements, and store the result in a new list. If the lists are of different lengths, the function should handle this by either truncating the longer list to match the shorter one or by raising an error indicating incompatible list lengths.\n\n# [edge case] \n    sub_list([], [1, 2, 3]) = []\n    Explanation: When one of the lists is empty, the result should also be an empty list since there are no elements to subtract.\n    sub_list([1, 2, 3], []) = [1, 2, 3]\n    Explanation: If the second list is empty, the function should return the first list as is, since there's nothing to subtract from the first list.\n    sub_list([1, 2, 3], [4, 5]) = [1-4, 2-5, 3-None]\n    Explanation: If the lists are of different lengths, the function should handle this by truncating the longer list to match the shorter one. The last element of the second list does not have a corresponding element in the first list to subtract from, so it should be ignored in the result.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not list1:\n            return []\n        if not list2:\n            return list1\n        min_length = min(len(list1), len(list2))\n        result = [list1[i] - list2[i] for i in range(min_length)]\n        return result\n", "requirement analysis:\nThe original requirement is to create a function that subtracts two lists element-wise. This is a basic operation in data manipulation and is a prerequisite for more complex data processing tasks. The function should return a new list with the results of the subtraction.\nrequirement pool:\n- The main code should include a function named sub_list that takes two lists as input and returns a new list with the results of subtracting the second list from the first element-wise.\n- The function should handle lists of equal length. If the lists are of unequal length, the function should raise a ValueError with a clear message.\n- The function should be tested with various inputs to ensure it works correctly, including edge cases such as empty lists or lists with negative numbers.\nTo implement the function sub_list, we will use Python's built-in capabilities, specifically focusing on list operations. This approach is chosen for its simplicity and efficiency, ensuring that the function meets the requirement of subtracting two lists element-wise.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'element-wise subtraction': This means that each element in the first list is subtracted from the corresponding element in the second list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `sub_list`, we will follow these steps:\n    1. Check if both input lists are of the same length. If not, raise a ValueError.\n    2. Initialize an empty list to store the results.\n    3. Iterate through both lists simultaneously using a loop.\n    4. For each pair of elements, subtract the element from the second list from the element in the first list and append the result to the results list.\n    5. Return the results list.\n\n# [edge case] \n    sub_list([1, 2, 3], [4, 5]) = ValueError\n    Explanation: The lists are not of the same length, so element-wise subtraction is not possible. This is an edge case where the function should raise a ValueError.\n    sub_list([], [1, 2, 3]) = []\n    Explanation: The first list is empty, so the result will be an empty list where each element is subtracted from zero.\n    sub_list([1, 2, 3], [1, 2, 3]) = [0, 0, 0]\n    Explanation: Each element in the first list is subtracted from the corresponding element in the second list, resulting in a list of zeros.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the lists are of different lengths.\n    ```python\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length for element-wise subtraction.\")\n    ```\n", "requirement analysis:\nThe original requirement is to create a function that subtracts two lists element-wise. This is a basic operation in many programming tasks, including data manipulation and scientific computing. The function should return a new list with the results of the subtraction.\nrequirement pool:\n- The main code should include a function named sub_list that takes two lists as input and returns a new list with the results of subtracting the second list from the first.\n- The function should handle lists of equal length.\n- The function should handle lists of different lengths by raising an error or returning a partial result.\nTo implement the function sub_list, we will use Python's built-in capabilities, specifically focusing on list operations. This approach is chosen for its simplicity and efficiency, ensuring that the function meets the requirement of subtracting two lists element-wise.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'element-wise subtraction': This means that each element in the first list is subtracted from the corresponding element in the second list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `sub_list`, we will follow these steps:\n    1. Check if both input lists are of the same length. If not, raise a ValueError.\n    2. Initialize an empty list to store the results.\n    3. Iterate through both lists simultaneously using a loop.\n    4. For each pair of elements, subtract the second element from the first and append the result to the results list.\n    5. Return the results list.\n\n# [edge case] \n    sub_list([1, 2, 3], [4, 5]) = ValueError\n    Explanation: The two lists are not of the same length, so element-wise subtraction is not possible. This is an edge case that should raise a ValueError.\n    sub_list([], [1, 2, 3]) = []\n    Explanation: The first list is empty, so the result of subtracting an empty list from another list should be an empty list.\n    sub_list([1, 2, 3], [1, 2, 3]) = [0, 0, 0]\n    Explanation: Each element in the first list is subtracted from the corresponding element in the second list, resulting in a list of zeros.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the lists are of different lengths.\n    ```python\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length for element-wise subtraction.\")\n    ```\n", "requirement analysis:\nThe original requirement is to create a function that subtracts two lists element-wise. This is a basic operation in data manipulation and is a prerequisite for more complex data processing tasks. The function should return a new list with the results of the subtraction.\nrequirement pool:\n- The main code should include a function named sub_list that takes two lists as input and returns a new list with the results of subtracting the second list from the first element-wise.\n- The function should handle lists of equal length. If the lists are of unequal length, the function should raise an error indicating the mismatch in lengths.\n- The function should be able to handle lists containing different data types, such as integers and floats, and perform the subtraction operation correctly.\n- The function should be tested with various inputs to ensure it works as expected, including edge cases like empty lists or lists with negative numbers.\n- The function should be integrated into a larger application if necessary, ensuring it does not interfere with other functionalities.\nWe will implement the function `sub_list` using Python's built-in capabilities. This function will take two lists of numbers (integers or floats) as input and return a new list where each element is the result of subtracting the corresponding element of the second list from the first list. If the lists are of unequal length, we will raise a `ValueError` to indicate the issue.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'element-wise subtraction': This means that we will subtract each element of the first list with the corresponding element of the second list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the `sub_list` function, we will follow these steps:\n    1. Check if the lengths of the two lists are equal.\n    2. If they are not equal, raise a `ValueError`.\n    3. If they are equal, create a new list.\n    4. Iterate through both lists simultaneously, subtracting the elements.\n    5. Append the result to the new list.\n    6. Return the new list.\n\n# [edge case] \n    sub_list([1, 2, 3], [4, 5]) = ValueError\n    Explanation: The lengths of the lists are not equal, which is not allowed. The function should raise a `ValueError`.\n    sub_list([1, 2, 3], [1, 2, 3]) = [0, 0, 0]\n    Explanation: Each element in the first list is subtracted from the corresponding element in the second list, resulting in a list of zeros.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case.\n        if len(list1) != len(list2):\n            raise ValueError(\"Lists must be of the same length\")\n        (other code)\n\nThis additional code ensures that the function only proceeds if the lists are of equal length, thus handling the edge case appropriately.\n", "requirement analysis:\nThe original requirement is to create a function that subtracts two lists element-wise. This is a basic operation in data manipulation and is a prerequisite for more complex data processing tasks. The function should work for lists of equal length and return a list of the same length with each element being the result of the subtraction of the corresponding elements from the input lists.\nrequirement pool:\n- The main code should include a function named sub_list that takes two lists as input and returns a new list with each element being the result of the subtraction of the corresponding elements from the input lists.\n- The function should handle lists of equal length. If the input lists are of different lengths, the function should raise an error indicating that the operation is not defined for lists of unequal length.\n- The function should be tested with various inputs to ensure it works correctly for different scenarios.\nTo implement the function sub_list, we will use Python's built-in capabilities, ensuring simplicity and efficiency. The function will take two lists of numbers as input and return a new list where each element is the result of subtracting the corresponding elements from the two input lists. This operation is straightforward and does not require any external libraries.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'element-wise subtraction': This means that for each pair of elements in the two lists, the function will subtract the second element from the first.\n    Explanation: This concept involves performing the same arithmetic operation on corresponding elements of two lists, resulting in a new list where each element is the difference between the elements at the same position in the original lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function `sub_list` can be implemented using a simple loop to iterate through both lists simultaneously. For each pair of elements, subtract the second element from the first and append the result to a new list. Here's a basic outline of the logic:\n\n    ```python\n    def sub_list(list1, list2):\n        result = []\n        for i in range(len(list1)):\n            result.append(list1[i] - list2[i])\n        return result\n    ```\n\n# [edge case] \n    sub_list([1, 2, 3], [4, 5, 6]) = [-3, -3, -3]\n    Explanation: This is a straightforward test case where the function subtracts each element of the first list from the corresponding element in the second list, resulting in a list of differences.\n\n    sub_list([1, 2, 3], [1, 2, 3]) = [0, 0, 0]\n    Explanation: This edge case checks if the function correctly handles the scenario where both lists are identical, resulting in a list of zeros.\n\n    sub_list([10, 20, 30], [1, 2, 3]) = [9, 18, 27]\n    Explanation: This test case checks if the function can handle lists of different lengths by only performing the operation on the common length of the lists.\n\n# [extra code for edge case]\n    No extra code is needed for the edge cases provided, as the basic implementation already handles them correctly. The function will return a list of differences, and if the lists are of unequal lengths, it will only perform the operation on the indices where both lists have elements.\n"], "test": ["def check(sub_list):\n\tassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "def check(sub_list):\n\tassert sub_list([1,2],[3,4])==[-2,-2]", "def check(sub_list):\n\tassert sub_list([90,120],[50,70])==[40,50]", "def check(sub_list):\n\tassert sub_list([2, 2, 6], [4, 1, 3]) == [-2, 1, 3]", "def check(sub_list):\n\tassert sub_list([1, 5, 3], [5, 6, 7]) == [-4, -1, -4]", "def check(sub_list):\n\tassert sub_list([3, 5, 4], [6, 3, 3]) == [-3, 2, 1]", "def check(sub_list):\n\tassert sub_list([1, 2, 2], [7, 9, 6]) == [-6, -7, -4]", "def check(sub_list):\n\tassert sub_list([5, 1, 3], [7, 1, 5]) == [-2, 0, -2]", "def check(sub_list):\n\tassert sub_list([3, 2, 7], [6, 3, 4]) == [-3, -1, 3]", "def check(sub_list):\n\tassert sub_list([5, 7, 1], [3, 3, 2]) == [2, 4, -1]", "def check(sub_list):\n\tassert sub_list([4, 2, 8], [7, 1, 6]) == [-3, 1, 2]", "def check(sub_list):\n\tassert sub_list([1, 7, 7], [1, 7, 3]) == [0, 0, 4]", "def check(sub_list):\n\tassert sub_list([1, 2, 8], [4, 9, 3]) == [-3, -7, 5]", "def check(sub_list):\n\tassert sub_list([3, 6, 1], [8, 3, 9]) == [-5, 3, -8]", "def check(sub_list):\n\tassert sub_list([2, 1, 4], [6, 1, 9]) == [-4, 0, -5]", "def check(sub_list):\n\tassert sub_list([3, 1, 3], [3, 9, 9]) == [0, -8, -6]", "def check(sub_list):\n\tassert sub_list([2, 2, 3], [2, 7, 11]) == [0, -5, -8]", "def check(sub_list):\n\tassert sub_list([5, 1, 1], [2, 10, 4]) == [3, -9, -3]", "def check(sub_list):\n\tassert sub_list([6, 6, 2], [1, 8, 11]) == [5, -2, -9]", "def check(sub_list):\n\tassert sub_list([1, 1, 3], [5, 1, 9]) == [-4, 0, -6]", "def check(sub_list):\n\tassert sub_list([3, 3, 8], [1, 7, 8]) == [2, -4, 0]", "def check(sub_list):\n\tassert sub_list([1, 6, 7], [4, 1, 9]) == [-3, 5, -2]", "def check(sub_list):\n\tassert sub_list([1, 2, 2], [9, 8, 6]) == [-8, -6, -4]", "def check(sub_list):\n\tassert sub_list([6, 7, 4], [1, 9, 6]) == [5, -2, -2]", "def check(sub_list):\n\tassert sub_list([3, 3, 8], [9, 5, 8]) == [-6, -2, 0]", "def check(sub_list):\n\tassert sub_list([5, 6, 7], [2, 2, 9]) == [3, 4, -2]", "def check(sub_list):\n\tassert sub_list([5, 6, 7], [5, 5, 6]) == [0, 1, 1]", "def check(sub_list):\n\tassert sub_list([1, 2, 2], [3, 1, 2]) == [-2, 1, 0]", "def check(sub_list):\n\tassert sub_list([2, 7, 7], [2, 9, 2]) == [0, -2, 5]", "def check(sub_list):\n\tassert sub_list([3, 7, 8], [5, 9, 11]) == [-2, -2, -3]", "def check(sub_list):\n\tassert sub_list([2, 6, 4], [3, 1, 4]) == [-1, 5, 0]", "def check(sub_list):\n\tassert sub_list([6, 2, 6], [4, 7, 7]) == [2, -5, -1]", "def check(sub_list):\n\tassert sub_list([1, 6, 2], [9, 1, 6]) == [-8, 5, -4]", "def check(sub_list):\n\tassert sub_list([1, 5, 7], [1, 5, 2]) == [0, 0, 5]", "def check(sub_list):\n\tassert sub_list([1, 2, 7], [8, 5, 3]) == [-7, -3, 4]", "def check(sub_list):\n\tassert sub_list([2, 7, 1], [5, 5, 8]) == [-3, 2, -7]", "def check(sub_list):\n\tassert sub_list([5, 6], [4, 8]) == [1, -2]", "def check(sub_list):\n\tassert sub_list([2, 6], [3, 9]) == [-1, -3]", "def check(sub_list):\n\tassert sub_list([5, 3], [6, 2]) == [-1, 1]", "def check(sub_list):\n\tassert sub_list([3, 5], [3, 5]) == [0, 0]", "def check(sub_list):\n\tassert sub_list([4, 6], [3, 6]) == [1, 0]", "def check(sub_list):\n\tassert sub_list([6, 3], [7, 6]) == [-1, -3]", "def check(sub_list):\n\tassert sub_list([3, 2], [2, 6]) == [1, -4]", "def check(sub_list):\n\tassert sub_list([4, 6], [1, 1]) == [3, 5]", "def check(sub_list):\n\tassert sub_list([1, 2], [1, 1]) == [0, 1]", "def check(sub_list):\n\tassert sub_list([1, 3], [6, 8]) == [-5, -5]", "def check(sub_list):\n\tassert sub_list([2, 2], [7, 6]) == [-5, -4]", "def check(sub_list):\n\tassert sub_list([1, 6], [3, 6]) == [-2, 0]", "def check(sub_list):\n\tassert sub_list([3, 2], [3, 7]) == [0, -5]", "def check(sub_list):\n\tassert sub_list([2, 2], [4, 1]) == [-2, 1]", "def check(sub_list):\n\tassert sub_list([3, 2], [7, 7]) == [-4, -5]", "def check(sub_list):\n\tassert sub_list([4, 7], [8, 8]) == [-4, -1]", "def check(sub_list):\n\tassert sub_list([3, 6], [1, 6]) == [2, 0]", "def check(sub_list):\n\tassert sub_list([1, 7], [1, 6]) == [0, 1]", "def check(sub_list):\n\tassert sub_list([3, 3], [4, 7]) == [-1, -4]", "def check(sub_list):\n\tassert sub_list([3, 2], [8, 6]) == [-5, -4]", "def check(sub_list):\n\tassert sub_list([4, 1], [6, 2]) == [-2, -1]", "def check(sub_list):\n\tassert sub_list([6, 2], [6, 9]) == [0, -7]", "def check(sub_list):\n\tassert sub_list([2, 4], [2, 2]) == [0, 2]", "def check(sub_list):\n\tassert sub_list([3, 4], [5, 4]) == [-2, 0]", "def check(sub_list):\n\tassert sub_list([3, 7], [3, 8]) == [0, -1]", "def check(sub_list):\n\tassert sub_list([2, 5], [1, 3]) == [1, 2]", "def check(sub_list):\n\tassert sub_list([4, 6], [4, 2]) == [0, 4]", "def check(sub_list):\n\tassert sub_list([5, 6], [3, 4]) == [2, 2]", "def check(sub_list):\n\tassert sub_list([1, 6], [3, 9]) == [-2, -3]", "def check(sub_list):\n\tassert sub_list([6, 3], [3, 2]) == [3, 1]", "def check(sub_list):\n\tassert sub_list([2, 1], [5, 9]) == [-3, -8]", "def check(sub_list):\n\tassert sub_list([5, 1], [5, 5]) == [0, -4]", "def check(sub_list):\n\tassert sub_list([4, 6], [7, 7]) == [-3, -1]", "def check(sub_list):\n\tassert sub_list([88, 120], [55, 65]) == [33, 55]", "def check(sub_list):\n\tassert sub_list([85, 121], [45, 71]) == [40, 50]", "def check(sub_list):\n\tassert sub_list([92, 125], [46, 74]) == [46, 51]", "def check(sub_list):\n\tassert sub_list([93, 115], [50, 68]) == [43, 47]", "def check(sub_list):\n\tassert sub_list([90, 116], [45, 72]) == [45, 44]", "def check(sub_list):\n\tassert sub_list([88, 119], [51, 67]) == [37, 52]", "def check(sub_list):\n\tassert sub_list([91, 121], [47, 74]) == [44, 47]", "def check(sub_list):\n\tassert sub_list([94, 118], [53, 71]) == [41, 47]", "def check(sub_list):\n\tassert sub_list([89, 119], [51, 65]) == [38, 54]", "def check(sub_list):\n\tassert sub_list([85, 124], [48, 72]) == [37, 52]", "def check(sub_list):\n\tassert sub_list([89, 124], [53, 67]) == [36, 57]", "def check(sub_list):\n\tassert sub_list([90, 118], [50, 67]) == [40, 51]", "def check(sub_list):\n\tassert sub_list([85, 123], [54, 70]) == [31, 53]", "def check(sub_list):\n\tassert sub_list([85, 118], [48, 75]) == [37, 43]", "def check(sub_list):\n\tassert sub_list([91, 122], [45, 73]) == [46, 49]", "def check(sub_list):\n\tassert sub_list([90, 115], [47, 71]) == [43, 44]", "def check(sub_list):\n\tassert sub_list([89, 125], [55, 70]) == [34, 55]", "def check(sub_list):\n\tassert sub_list([89, 115], [50, 71]) == [39, 44]", "def check(sub_list):\n\tassert sub_list([94, 119], [45, 75]) == [49, 44]", "def check(sub_list):\n\tassert sub_list([89, 117], [46, 68]) == [43, 49]", "def check(sub_list):\n\tassert sub_list([90, 118], [54, 67]) == [36, 51]", "def check(sub_list):\n\tassert sub_list([90, 118], [53, 70]) == [37, 48]", "def check(sub_list):\n\tassert sub_list([88, 125], [54, 69]) == [34, 56]", "def check(sub_list):\n\tassert sub_list([92, 115], [49, 71]) == [43, 44]", "def check(sub_list):\n\tassert sub_list([86, 119], [50, 71]) == [36, 48]", "def check(sub_list):\n\tassert sub_list([85, 119], [48, 67]) == [37, 52]", "def check(sub_list):\n\tassert sub_list([93, 122], [54, 69]) == [39, 53]", "def check(sub_list):\n\tassert sub_list([93, 119], [49, 74]) == [44, 45]", "def check(sub_list):\n\tassert sub_list([88, 123], [46, 67]) == [42, 56]", "def check(sub_list):\n\tassert sub_list([90, 116], [50, 73]) == [40, 43]", "def check(sub_list):\n\tassert sub_list([93, 120], [46, 68]) == [47, 52]", "def check(sub_list):\n\tassert sub_list([85, 116], [53, 69]) == [32, 47]", "def check(sub_list):\n\tassert sub_list([86, 123], [46, 75]) == [40, 48]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sub_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Subtracts corresponding elements from two lists of integers.\n\n    Args:\n        list1 (list[int]): The first list of integers.\n        list2 (list[int]): The second list of integers.\n\n    Returns:\n        list[int]: A new list containing the differences of corresponding elements.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] - list2[i])\n\n    return result\n", "passed": true, "pass": true, "pass_num": 10, "round": 802, "mutate_method": "condense_two2one", "parent_index": 113}
