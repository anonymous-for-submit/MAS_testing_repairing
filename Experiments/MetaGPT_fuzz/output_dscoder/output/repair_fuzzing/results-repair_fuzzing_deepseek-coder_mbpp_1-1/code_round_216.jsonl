{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 733, "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "code": "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "test_imports": [], "test_list": ["assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2", "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4", "assert find_first_occurrence([4, 3, 2, 7, 8, 3, 13, 4, 11, 9], 4) == -1", "assert find_first_occurrence([4, 6, 1, 6, 7, 10, 9, 5, 12, 10], 4) == 0", "assert find_first_occurrence([5, 1, 8, 10, 7, 11, 6, 12, 6, 13], 3) == -1", "assert find_first_occurrence([2, 8, 9, 3, 4, 9, 13, 5, 7, 12], 8) == -1", "assert find_first_occurrence([3, 9, 6, 3, 7, 2, 11, 5, 13, 6], 3) == 0", "assert find_first_occurrence([1, 4, 8, 4, 7, 10, 12, 10, 14, 13], 5) == -1", "assert find_first_occurrence([4, 10, 9, 8, 2, 10, 4, 13, 14, 12], 1) == -1", "assert find_first_occurrence([2, 8, 3, 7, 3, 2, 7, 8, 7, 13], 4) == -1", "assert find_first_occurrence([4, 10, 9, 8, 1, 4, 13, 10, 4, 9], 6) == -1", "assert find_first_occurrence([7, 5, 2, 5, 3, 5, 13, 12, 4, 6], 10) == -1", "assert find_first_occurrence([7, 5, 3, 3, 10, 9, 10, 9, 4, 13], 9) == -1", "assert find_first_occurrence([3, 5, 1, 5, 9, 6, 6, 13, 12, 10], 4) == -1", "assert find_first_occurrence([5, 10, 3, 4, 6, 8, 3, 9, 10, 14], 4) == -1", "assert find_first_occurrence([5, 1, 7, 9, 9, 5, 12, 7, 11, 10], 8) == -1", "assert find_first_occurrence([1, 5, 5, 10, 5, 9, 11, 4, 5, 7], 10) == -1", "assert find_first_occurrence([6, 7, 2, 5, 11, 2, 9, 13, 11, 9], 3) == -1", "assert find_first_occurrence([1, 7, 1, 5, 1, 5, 6, 7, 6, 12], 7) == 7", "assert find_first_occurrence([2, 8, 9, 6, 10, 7, 10, 6, 5, 5], 10) == 4", "assert find_first_occurrence([2, 5, 3, 10, 8, 7, 12, 10, 11, 12], 2) == 0", "assert find_first_occurrence([4, 7, 3, 3, 7, 7, 5, 7, 13, 6], 5) == -1", "assert find_first_occurrence([3, 7, 4, 1, 4, 9, 6, 14, 13, 8], 4) == 4", "assert find_first_occurrence([5, 5, 1, 6, 10, 4, 11, 5, 10, 12], 5) == 0", "assert find_first_occurrence([1, 2, 7, 7, 1, 7, 9, 13, 9, 14], 7) == 5", "assert find_first_occurrence([5, 8, 1, 2, 3, 5, 7, 10, 4, 10], 6) == -1", "assert find_first_occurrence([4, 2, 9, 9, 11, 9, 3, 13, 7, 9], 7) == -1", "assert find_first_occurrence([7, 9, 6, 5, 9, 5, 3, 12, 6, 12], 10) == -1", "assert find_first_occurrence([1, 4, 5, 6, 11, 8, 11, 10, 14, 10], 9) == -1", "assert find_first_occurrence([1, 5, 9, 8, 4, 11, 10, 13, 11, 5], 4) == 4", "assert find_first_occurrence([6, 1, 3, 8, 3, 7, 6, 11, 4, 10], 3) == 2", "assert find_first_occurrence([4, 1, 8, 3, 10, 6, 5, 10, 11, 9], 10) == 4", "assert find_first_occurrence([6, 9, 4, 1, 2, 1, 11, 10, 13, 6], 3) == -1", "assert find_first_occurrence([2, 5, 8, 1, 10, 9, 13, 6, 7, 7], 1) == -1", "assert find_first_occurrence([2, 5, 1, 5, 10, 5, 10, 6, 11, 12], 4) == -1", "assert find_first_occurrence([3, 7, 7, 5, 6, 1, 6, 6, 14, 12], 2) == -1", "assert find_first_occurrence([5, 5, 10, 2, 2, 3, 7, 8, 12, 5], 10) == -1", "assert find_first_occurrence([6, 1, 5, 8, 3, 1, 12, 8, 5, 5], 8) == 7", "assert find_first_occurrence([1, 7, 5, 2, 1, 3, 11, 7, 6, 12], 7) == 7", "assert find_first_occurrence([6, 6, 8, 3, 4, 1, 6, 11, 4, 10], 1) == -1", "assert find_first_occurrence([4, 5, 10, 8, 1, 9, 13, 8, 14, 10], 8) == 7", "assert find_first_occurrence([1, 8, 7, 2, 11, 5, 7, 9, 9, 9], 7) == -1", "assert find_first_occurrence([5, 5, 9, 4, 3, 10, 4, 4, 7, 9], 8) == -1", "assert find_first_occurrence([6, 4, 3, 9, 10, 9, 11, 14, 14, 9], 6) == -1", "assert find_first_occurrence([2, 1, 4, 3, 7, 4, 6, 10, 4, 10], 1) == 1", "assert find_first_occurrence([6, 5, 6, 5, 8, 3, 9, 14, 14, 11], 1) == -1", "assert find_first_occurrence([7, 1, 1, 9, 9, 10, 13, 10, 11, 5], 5) == -1", "assert find_first_occurrence([5, 5, 1, 2, 3, 4, 5, 8, 12, 11], 10) == -1", "assert find_first_occurrence([5, 2, 1, 9, 8, 11, 3, 6, 8, 4], 7) == -1", "assert find_first_occurrence([3, 8, 8, 7, 8, 3, 5, 11, 14, 12], 8) == 1", "assert find_first_occurrence([2, 3, 3, 10, 1, 3, 10, 14, 13, 8], 4) == -1", "assert find_first_occurrence([2, 4, 1, 10, 11, 5, 7, 13, 4, 8], 6) == -1", "assert find_first_occurrence([6, 4, 9, 8, 2, 10, 10, 11, 8, 5], 10) == 5", "assert find_first_occurrence([1, 7, 10, 5, 8, 11, 11, 13, 12, 6], 3) == -1", "assert find_first_occurrence([7, 7, 7, 6, 8, 4, 5, 4, 4, 7], 8) == 4", "assert find_first_occurrence([5, 2, 4, 10, 11, 8, 3, 6, 10, 12], 2) == 1", "assert find_first_occurrence([3, 6, 7, 2, 10, 1, 7, 12, 14, 7], 8) == -1", "assert find_first_occurrence([5, 1, 4, 2, 3, 8, 8, 12, 12, 4], 1) == 1", "assert find_first_occurrence([7, 1, 10, 9, 3, 11, 7, 8, 11, 5], 3) == 4", "assert find_first_occurrence([7, 2, 9, 1, 7, 3, 3, 4, 5, 5], 8) == -1", "assert find_first_occurrence([3, 3, 9, 1, 11, 7, 11, 11, 6, 13], 8) == -1", "assert find_first_occurrence([5, 7, 5, 1, 2, 1, 11, 5, 11, 11], 9) == -1", "assert find_first_occurrence([4, 5, 9, 6, 11, 1, 6, 5, 12, 12], 3) == -1", "assert find_first_occurrence([7, 5, 4, 9, 2, 8, 9, 11, 11, 13], 4) == -1", "assert find_first_occurrence([7, 5, 9, 9, 6, 11, 3, 9, 8, 5], 7) == -1", "assert find_first_occurrence([7, 1, 6, 8, 4, 8, 10, 10, 10, 10], 5) == -1", "assert find_first_occurrence([4, 5, 8, 4, 6, 9, 11, 10, 8, 14], 9) == 5", "assert find_first_occurrence([2, 2, 1, 5, 4, 3, 9, 4, 12, 11], 4) == 4", "assert find_first_occurrence([1, 1, 5, 2, 1, 6, 3, 13, 9, 9], 4) == -1", "assert find_first_occurrence([6, 5, 1, 4, 10, 2, 5, 11, 11, 5], 7) == -1", "assert find_first_occurrence([6, 5, 3, 8, 1, 5, 11, 9, 8, 4], 3) == -1", "assert find_first_occurrence([3, 6, 6, 2, 3, 1, 10, 14, 4, 11], 11) == -1", "assert find_first_occurrence([3, 8, 3, 2, 8, 1, 6, 10, 9, 4], 10) == 7", "assert find_first_occurrence([2, 8, 1, 4, 3, 3, 4, 14, 7, 13], 8) == -1", "assert find_first_occurrence([2, 5, 5, 3, 8, 8, 10, 8, 11, 13], 5) == 1", "assert find_first_occurrence([4, 7, 4, 2, 8, 10, 5, 8, 4, 9], 4) == 0", "assert find_first_occurrence([3, 9, 2, 5, 10, 1, 3, 5, 13, 6], 8) == -1", "assert find_first_occurrence([2, 3, 4, 9, 3, 10, 13, 6, 14, 5], 11) == -1", "assert find_first_occurrence([5, 4, 5, 9, 11, 4, 6, 8, 12, 4], 4) == 1", "assert find_first_occurrence([1, 3, 2, 1, 7, 8, 12, 10, 9, 5], 8) == 5", "assert find_first_occurrence([5, 8, 5, 3, 6, 8, 5, 10, 13, 10], 11) == -1", "assert find_first_occurrence([2, 9, 3, 7, 4, 11, 9, 11, 7, 6], 2) == 0", "assert find_first_occurrence([7, 3, 5, 4, 7, 10, 5, 5, 14, 13], 2) == -1", "assert find_first_occurrence([7, 7, 6, 3, 8, 6, 9, 9, 7, 5], 10) == -1", "assert find_first_occurrence([4, 1, 1, 10, 8, 10, 4, 9, 7, 10], 8) == 4", "assert find_first_occurrence([6, 1, 4, 4, 3, 10, 9, 9, 11, 13], 6) == -1", "assert find_first_occurrence([2, 4, 5, 5, 10, 5, 9, 8, 6, 8], 6) == -1", "assert find_first_occurrence([1, 1, 4, 7, 5, 4, 11, 10, 4, 10], 1) == 0", "assert find_first_occurrence([7, 2, 4, 2, 11, 4, 11, 12, 7, 10], 7) == -1", "assert find_first_occurrence([2, 8, 2, 4, 8, 4, 13, 4, 4, 14], 9) == -1", "assert find_first_occurrence([2, 7, 4, 8, 5, 1, 9, 5, 4, 10], 6) == -1", "assert find_first_occurrence([7, 7, 4, 3, 8, 8, 7, 13, 11, 14], 3) == -1", "assert find_first_occurrence([2, 8, 2, 4, 5, 11, 12, 13, 4, 4], 6) == -1", "assert find_first_occurrence([6, 9, 5, 8, 7, 9, 8, 11, 9, 9], 4) == -1", "assert find_first_occurrence([5, 8, 4, 1, 3, 8, 10, 14, 7, 13], 2) == -1", "assert find_first_occurrence([7, 7, 3, 2, 5, 5, 6, 13, 7, 7], 7) == -1", "assert find_first_occurrence([2, 5, 3, 5, 11, 4, 4, 13, 13, 7], 2) == 0", "assert find_first_occurrence([7, 3, 5, 8, 11, 7, 7, 4, 7, 5], 3) == 1", "assert find_first_occurrence([1, 6, 3, 10, 9, 6, 10, 9, 5, 4], 1) == 0", "assert find_first_occurrence([4, 2, 4, 1, 9, 3, 12, 13, 5, 7], 8) == -1", "assert find_first_occurrence([7, 6, 1, 5, 9, 5, 9, 12, 13, 11], 5) == -1"], "entry_point": "find_first_occurrence", "repair_prompt": ["Write a function find_first_occurrence to find the index of the first occurrence of a given number in a sorted array.\nfind_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n", " Write a function find_first_occurrence to locate the starting position of a specific number in a sorted array.\nfind_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n", " Write a function find_first_occurrence to find the index of the first occurrence of a given number in a sorted array.\nfind_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n"], "completions": ["from typing import List\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    if not arr:\n        return -1\n    \n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target and (mid == 0 or arr[mid - 1] != target):\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n", "from typing import List\n## main.py\n\ndef find_first_occurrence(arr: list[int], target: int) -> int:\n    \"\"\"\n    Finds the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        arr (list[int]): A sorted list of integers.\n        target (int): The number to find in the array.\n\n    Returns:\n        int: The index of the first occurrence of the target number in the array.\n            Returns -1 if the target number is not in the array.\n\n    Raises:\n        ValueError: If the array is not sorted in ascending order.\n    \"\"\"\n    # Ensure the array is sorted\n    if not arr or (len(arr) > 0 and arr[0] > arr[-1]):\n        raise ValueError('Array must be sorted in ascending order.')\n\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Move left to find the first occurrence\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Finds the index of the first occurrence of the target number in a sorted array.\n    \n    Args:\n        arr (List[int]): A sorted list of integers.\n        target (int): The number to find in the array.\n    \n    Returns:\n        int: The index of the first occurrence of the target number. If the target is not found, returns -1.\n    \"\"\"\n    if not arr:\n        return -1\n    \n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            right = mid - 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return -1\n", "from typing import List\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    if not arr:\n        return -1\n    \n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n", "from typing import List\n## main.py\n\ndef find_first_occurrence(arr: list[int], target: int) -> int:\n    \"\"\"\n    Finds the first occurrence of the target number in a sorted array.\n\n    Args:\n        arr (list[int]): A sorted list of integers.\n        target (int): The number to find in the array.\n\n    Returns:\n        int: The index of the first occurrence of the target number. If the target is not found, returns -1.\n    \"\"\"\n    if not arr:\n        return -1\n\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target and (mid == 0 or arr[mid - 1] != target):\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n", "from typing import List\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Function to find the first occurrence of target in sorted array arr.\n    Returns the index of the first occurrence of target or -1 if not found.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < target:\n            low = mid + 1\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                high = mid - 1\n    return -1\n", "from typing import List\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    if not arr:\n        return -1\n    \n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n", "from typing import List\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    if not arr:\n        return -1\n    \n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target and (mid == 0 or arr[mid - 1] != target):\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n", "from typing import List\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Finds the index of the first occurrence of the target number in a sorted array.\n    \n    Args:\n        arr (List[int]): A sorted array of integers.\n        target (int): The number to find the first occurrence of.\n        \n    Returns:\n        int: The index of the first occurrence of the target number, or -1 if not found.\n    \"\"\"\n    if not arr:\n        return -1\n    \n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target and (mid == 0 or arr[mid - 1] != target):\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n", "from typing import List\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    This function implements a linear search algorithm to find the first occurrence of a target number in a sorted array.\n    \n    Args:\n        arr (List[int]): A sorted list of integers.\n        target (int): The number to find in the array.\n    \n    Returns:\n        int: The index of the first occurrence of the target number in the array. If the target is not found, returns -1.\n    \"\"\"\n    if not arr:\n        return None\n    \n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    \n    return -1\n"], "plans": ["requirement analysis:\nThe requirement is to find the index of the first occurrence of a given number in a sorted array. This is a common problem in computer science and requires an efficient solution. The function should handle edge cases such as empty arrays or numbers not present in the array. The solution should be optimized for performance, especially for large datasets.\nrequirement pool:\n- Implement a function to find the first occurrence of a number in a sorted array.\n- Ensure the function handles edge cases effectively.\n- Optimize the function for performance, especially for large datasets.\n- Include clear documentation and examples for user guidance.\n- Test the function with various scenarios to ensure accuracy and robustness.\nTo implement the function efficiently, we will use a binary search algorithm, which is well-suited for finding an element in a sorted array. Binary search has a time complexity of O(log n), making it suitable for large datasets. We will ensure the function handles edge cases such as empty arrays or numbers not present in the array by implementing appropriate checks.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sorted array': means the elements in the array are in a specific order, typically ascending or descending.\n    'first occurrence': refers to the index of the first instance of a given number in the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using a binary search algorithm to efficiently find the first occurrence of a given number in a sorted array. The steps include:\n    1. Initialize two pointers, left and right, to the start and end of the array, respectively.\n    2. While left is less than or equal to right:\n        a. Calculate the middle index.\n        b. If the element at the middle index is equal to the target number and either it's the first element or the previous element is different, return the middle index.\n        c. If the target number is less than the element at the middle index, move the right pointer to the left of the middle.\n        d. Otherwise, move the left pointer to the right of the middle.\n    3. If the loop ends without finding the target, return -1 to indicate the number is not in the array.\n\n# [edge case] \n    find_first_occurrence([], 5) = -1\n    explanation: The array is empty, so the target number cannot be found.\n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    explanation: The target number 6 is not present in the array.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case of an empty array.\n        if not arr:\n            return -1\n        (other code)\n", "requirement analysis:\nThe requirement is to find the index of the first occurrence of a given number in a sorted array. This is a common problem in computer science and software development. The solution should be efficient and handle large datasets effectively. The function should be simple to use and understand, with clear documentation and examples.\nrequirement pool:\n- The main code should be optimized for performance and readability.\n- The function should handle edge cases such as empty arrays or numbers not present in the array.\n- Include detailed documentation and examples to help users understand how to use the function.\n- Ensure the function works correctly with both small and large datasets.\n- Consider implementing the function in a way that it can be easily integrated into existing projects.\nTo efficiently find the index of the first occurrence of a given number in a sorted array, we can utilize Python's built-in binary search algorithm. This approach is optimal for sorted arrays and ensures that the function performs well even with large datasets. The binary search algorithm has a logarithmic time complexity, making it much faster than linear search for large arrays.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sorted array': means the elements in the array are in ascending order\n    'first occurrence': means the index of the leftmost appearance of the number in the array\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `find_first_occurrence`, we can use a binary search algorithm. This algorithm works by repeatedly dividing the search interval in half. If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. Otherwise, narrow it to the upper half. This process continues until the value is found or the interval is empty.\n\n# [edge case] \n    find_first_occurrence([1, 2, 3, 4, 5], 3) = 2\n    Explanation: The number 3 is the third element in the array, so its first occurrence is at index 2.\n    find_first_occurrence([1, 2, 2, 2, 3], 2) = 1\n    Explanation: The number 2 appears multiple times, but its first occurrence is at index 1 (the second position).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The binary search algorithm inherently handles cases where the target number is not in the array by reducing the search interval to zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The binary search algorithm inherently handles cases where the target number is not in the array by reducing the search interval to zero.\n", "requirement analysis:\nThe requirement is to find the index of the first occurrence of a given number in a sorted array. This is a common problem in computer science and has various practical applications. The function should be efficient and handle edge cases such as when the number is not present in the array.\nrequirement pool:\n- Implement the function find_first_occurrence to find the index of the first occurrence of a given number in a sorted array.\n- Ensure the function handles edge cases such as when the number is not present in the array.\n- Optimize the function for performance, especially for large datasets.\n- Include comprehensive testing to verify the correctness and robustness of the function.\n- Provide clear documentation and examples of how to use the function.\nTo implement the function find_first_occurrence efficiently, we will use a binary search algorithm. Binary search is ideal for this scenario because it operates on sorted arrays and has a time complexity of O(log n), making it suitable for large datasets. We will ensure the function handles edge cases by checking if the number is not present in the array.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sorted array': means the elements in the array are in ascending order.\n    'first occurrence': means the index of the leftmost appearance of the number in the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The binary search algorithm involves:\n    1. Setting two pointers, left and right, to the start and end of the array, respectively.\n    2. Calculating the middle index.\n    3. If the middle element is the target, check if it's the first occurrence by ensuring it's either the first element or the previous element is different.\n    4. If the target is less than the middle element, move the right pointer to the middle - 1.\n    5. If the target is greater than the middle element, move the left pointer to the middle + 1.\n    6. Repeat until the target is found or the search space is exhausted.\n\n# [edge case] \n    find_first_occurrence([2, 2, 2, 2, 6, 6, 8, 9, 9, 9], 2) = 0\n    Explanation: The number 2 appears multiple times, but the first occurrence is at index 0.\n    find_first_occurrence([], 5) = -1\n    Explanation: The array is empty, so the number 5 cannot be found.\n    find_first_occurrence([1, 3, 5, 7, 9], 4) = -1\n    Explanation: The number 4 is not in the array, so the function should return -1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not arr:\n            return -1\n        if arr[0] == target:\n            return 0\n        (other code)\n", "requirement analysis:\nThe function needs to locate the first occurrence of a specific number in a sorted array. This requirement is specific and directly addresses a common problem in array manipulation. The function should be efficient and handle edge cases such as empty arrays or numbers not present in the array.\nrequirement pool:\n- Implement find_first_occurrence function to locate the first occurrence of a number in a sorted array.\n- Ensure the function handles edge cases such as empty arrays or numbers not present in the array.\n- Optimize the function for performance, especially for large sorted arrays.\n- Document the function with clear examples and edge case scenarios.\n- Test the function with various inputs to ensure accuracy and reliability.\nTo implement the function efficiently, we will utilize binary search, which is a well-known algorithm for finding an element in a sorted array. Binary search has a time complexity of O(log n), making it suitable for large datasets. The function will recursively or iteratively search for the first occurrence of the target number by narrowing down the search range based on comparisons with the middle element of the current range.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sorted array': means the elements are in ascending order\n    'first occurrence': means the position of the leftmost appearance of the target number\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using binary search to efficiently find the first occurrence of the target number. The steps include:\n    1. Initialize two pointers, left and right, to the start and end of the array, respectively.\n    2. While left is less than or equal to right:\n        a. Calculate the middle index.\n        b. If the middle element is less than the target, move the left pointer to middle + 1.\n        c. If the middle element is greater than or equal to the target, move the right pointer to middle - 1.\n        d. If the middle element is the target, check if it's the first occurrence by comparing it with the element at middle - 1. If it is, return the middle index. Otherwise, move the right pointer to middle - 1 to continue searching in the left half.\n\n# [edge case] \n    find_first_occurrence([2, 2, 2, 2, 6, 6, 8, 9, 9, 9], 2) = 0\n    Explanation: The target number 2 appears multiple times, but the first occurrence is at index 0.\n    find_first_occurrence([], 5) = -1\n    Explanation: The array is empty, so the target number cannot be found.\n    find_first_occurrence([1, 3, 5, 7, 9], 4) = -1\n    Explanation: The target number 4 is not in the array, so it cannot be found.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search logic inherently handles cases where the target is not in the array or the array is empty.\n", "requirement analysis:\nThe requirement is to find the first occurrence of a specific number in a sorted array. This is a common problem in computer science and has various applications. The function should be efficient and handle sorted arrays correctly. The solution should be robust and handle edge cases such as empty arrays or numbers not present in the array.\nrequirement pool:\n- The main code should accurately find the first occurrence of a specific number in a sorted array.\n- The function should handle edge cases such as empty arrays or numbers not present in the array.\n- The solution should be optimized for performance, especially for large datasets.\n- The function should be easy to understand and implement.\n- The function should be compatible with different programming languages.\nTo implement the function efficiently, we will utilize Python's built-in capabilities and leverage the binary search algorithm, which is well-suited for finding the first occurrence of a number in a sorted array. This approach ensures optimal performance for large datasets.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sorted array': means the elements in the array are in ascending order.\n    'first occurrence': means the position of the first appearance of a specific number in the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function efficiently, we will utilize Python's built-in capabilities and leverage the binary search algorithm, which is well-suited for finding the first occurrence of a number in a sorted array. This approach ensures optimal performance for large datasets.\n\n# [edge case] \n    find_first_occurrence([1, 2, 3, 4, 5], 3) = 2\n    Explanation: The number 3 appears at index 2, which is the first occurrence in the array.\n    find_first_occurrence([], 1) = -1\n    Explanation: The array is empty, so the number 1 cannot appear, and the expected output is -1.\n    find_first_occurrence([2, 2, 2, 3, 3, 3], 2) = 0\n    Explanation: The number 2 appears at index 0, which is the first occurrence in the array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The binary search algorithm inherently handles the case where the number is not in the array by returning -1.\n", "requirement analysis:\nThe requirement is to find the first occurrence of a specific number in a sorted array. This is a common problem in computer science and has various practical applications. The function should be efficient and handle edge cases such as empty arrays or numbers not present in the array.\nrequirement pool:\n- Implement find_first_occurrence function to locate the first occurrence of a specific number in a sorted array.\n- Ensure the function returns -1 if the number is not found in the array.\n- Optimize the function for performance, especially for large arrays.\n- Include error handling for non-sorted arrays.\n- Implement unit tests to verify the correctness of the function.\nTo implement the function find_first_occurrence efficiently, we will utilize binary search, which is a popular algorithm for searching in sorted arrays. Binary search has a time complexity of O(log n), making it suitable for large datasets. The function will recursively or iteratively search for the first occurrence of the target number, ensuring that we only return the position once we find the first instance of the number.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sorted array': means the elements in the array are in ascending order.\n    'first occurrence': refers to the first position of a specific number in the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using binary search to efficiently find the first occurrence of the target number. The binary search algorithm will help reduce the time complexity to O(log n), which is efficient for large datasets. The function will recursively or iteratively search for the first occurrence of the target number, ensuring that we only return the position once we find the first instance of the number.\n\n# [edge case] \n    find_first_occurrence([1, 2, 3, 4, 5], 3) = 2\n    Explanation: The number 3 is at the second position in the array.\n    find_first_occurrence([1, 1, 1, 2, 2, 3], 2) = 3\n    Explanation: The number 2 first appears at the third position in the array.\n    find_first_occurrence([5, 5, 5, 5, 5], 5) = 0\n    Explanation: The number 5 appears at the first position and is the only number in the array, so it is its own first occurrence.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The binary search algorithm inherently handles cases where the target number is at the start or end of the array, as well as when the array contains only one element.\n", "requirement analysis:\nThe requirement is to find the index of the first occurrence of a given number in a sorted array. This is a common problem in computer science and has various applications. The function should be efficient and handle edge cases well. The solution should be clear and concise, making it easy to understand and maintain.\nrequirement pool:\n- Implement a function to find the first occurrence of a number in a sorted array.\n- Ensure the function is optimized for performance, especially for large arrays.\n- Handle edge cases such as empty arrays or numbers not present in the array.\n- Include detailed documentation and comments to aid user understanding.\n- Test the function with various scenarios to ensure accuracy and reliability.\nTo implement the function efficiently, we will use a binary search algorithm, which is well-suited for finding an element in a sorted array. Binary search has a time complexity of O(log n), making it suitable for large datasets. The function will handle edge cases such as empty arrays or numbers not present in the array.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sorted array': means the elements in the array are in ascending order\n    'first occurrence': means the index of the leftmost appearance of the number in the array\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The binary search algorithm involves:\n    1. Setting two pointers, left and right, to the start and end of the array, respectively.\n    2. Calculating the middle index.\n    3. If the middle element is the target, check if it's the first occurrence by ensuring it's either the first element or the previous element is different.\n    4. If the target is less than the middle element, move the right pointer to the middle - 1.\n    5. If the target is greater than the middle element, move the left pointer to the middle + 1.\n    6. Repeat until the target is found or the search space is exhausted.\n\n# [edge case] \n    find_first_occurrence([], 5) = -1\n    explanation: The array is empty, so the number cannot be present.\n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    explanation: The number 6 is not present in the array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The binary search will naturally return -1 for an empty array or a number not present in the array.\n", "requirement analysis:\nThe requirement is to find the index of the first occurrence of a given number in a sorted array. This is a classic problem that can be efficiently solved using binary search, which is a staple in computer science for its O(log n) time complexity. The function should handle edge cases such as empty arrays or numbers not present in the array.\nrequirement pool:\n- Implement the function using binary search for optimal performance.\n- Ensure the function handles edge cases such as empty arrays or numbers not present in the array.\n- Optimize the function for large datasets to ensure it performs well even with extensive arrays.\n- Include detailed documentation and tests to ensure reliability and usability.\n- Develop a user-friendly interface for easy interaction with the function.\nTo implement the function efficiently, we will use binary search, a well-known algorithm for finding an item in a sorted array. This approach ensures that the function has a time complexity of O(log n), making it suitable for large datasets. We will handle edge cases such as empty arrays or numbers not present in the array by adding appropriate checks.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sorted array': means the elements in the array are in ascending order.\n    'first occurrence': means the index of the leftmost appearance of the number in the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using binary search to efficiently find the first occurrence of the given number. The steps include:\n    1. Initialize two pointers, left and right, to the start and end of the array, respectively.\n    2. While left is less than or equal to right:\n        a. Calculate the middle index.\n        b. If the middle element is the target number and it's either the first element or the previous element is different, return the middle index.\n        c. If the middle element is less than the target, move the left pointer to middle + 1.\n        d. Otherwise, move the right pointer to middle - 1.\n    3. If the number is not found, return -1.\n\n# [edge case] \n    find_first_occurrence([], 5) = -1\n    explanation: The array is empty, so the number cannot be found.\n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    explanation: The number 6 is not present in the array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case since the binary search logic inherently handles the case of an empty array or a number not present in the array by returning -1.\n", "requirement analysis:\nThe requirement is to find the index of the first occurrence of a given number in a sorted array. This is a common problem in computer science and has various applications. The function should be efficient and handle edge cases such as when the number is not present in the array.\nrequirement pool:\n- Implement the function find_first_occurrence to find the index of the first occurrence of a given number in a sorted array.\n- Ensure the function is optimized for performance, especially for large arrays.\n- Include error handling to manage cases where the number is not found in the array.\n- Document the function with clear examples and usage instructions.\n- Test the function with various edge cases to ensure robustness.\nTo implement the function find_first_occurrence efficiently, we will use a binary search algorithm. Binary search is ideal for this scenario because it operates on sorted arrays, providing a time complexity of O(log n), which is optimal for large datasets. The function will handle edge cases by returning -1 if the number is not found in the array.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sorted array': means the elements in the array are in ascending order.\n    'first occurrence': refers to the index of the leftmost appearance of a given number in the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The binary search algorithm involves the following steps:\n    1. Initialize two pointers, left and right, to the start and end of the array, respectively.\n    2. While left is less than or equal to right:\n        a. Calculate the middle index.\n        b. If the element at the middle index is equal to the target number and either it's the first element or the previous element is not the target, return the middle index.\n        c. If the element at the middle index is less than the target, move the left pointer to middle + 1.\n        d. Otherwise, move the right pointer to middle - 1.\n    3. If the number is not found, return -1.\n\n# [edge case] \n    find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 10) = -1\n    Explanation: The number 10 is not present in the array, so the function should return -1.\n    find_first_occurrence([], 5) = -1\n    Explanation: The array is empty, so the function should return -1 as the number 5 cannot be found.\n    find_first_occurrence([1, 2, 3, 4, 5], 5) = 4\n    Explanation: The number 5 is the last element in the array, and its first occurrence is at index 4.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search algorithm inherently handles cases where the number is not found or the array is empty by returning -1.\n", "requirement analysis:\nThe requirement is to create a function that finds the index of the first occurrence of a given number in a sorted array. This is a common problem in computer science and has several efficient solutions, including linear search and binary search. Given the sorted nature of the array, binary search would be an efficient approach, but for simplicity and clarity, a linear search is chosen.\nrequirement pool:\n- Implement a function find_first_occurrence that takes a sorted array and a target number as input and returns the index of the first occurrence of the target number.\n- Ensure the function handles edge cases such as an empty array or a target number not in the array.\n- Optimize the function for performance, especially for large arrays.\nTo implement the function find_first_occurrence efficiently, we will use a linear search algorithm. This approach is straightforward and suitable for sorted arrays. We will iterate through the array and compare each element with the target number. The moment we find a match, we return the current index. This method ensures simplicity and clarity, making it easy to understand and debug. Additionally, we will handle edge cases such as an empty array or a target number not present in the array.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'sorted array': means the elements in the array are in a specific order, typically ascending or descending.\n    'first occurrence': refers to the first time a specific element appears in the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests using a linear search algorithm, which involves iterating through the array and comparing each element with the target number. The moment a match is found, the index of that match is returned.\n\n# [edge case] \n    find_first_occurrence([], 5) = None\n    Explanation: Since the array is empty, there are no elements to compare, so the function should return None to indicate the absence of the target number.\n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    Explanation: The target number 6 is not present in the array, so the function should return -1 to indicate that the target number is not found.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not arr:\n            return None\n        for i in range(len(arr)):\n            if arr[i] == target:\n                return i\n        return -1\n\nThis additional code checks if the array is empty and returns `None` if it is. If the array is not empty, it iterates through the array to find the first occurrence of the target number, returning its index if found, or -1 if the target number is not present.\n"], "test": ["def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 3, 2, 7, 8, 3, 13, 4, 11, 9], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 6, 1, 6, 7, 10, 9, 5, 12, 10], 4) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 1, 8, 10, 7, 11, 6, 12, 6, 13], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 9, 3, 4, 9, 13, 5, 7, 12], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 9, 6, 3, 7, 2, 11, 5, 13, 6], 3) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 4, 8, 4, 7, 10, 12, 10, 14, 13], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 10, 9, 8, 2, 10, 4, 13, 14, 12], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 3, 7, 3, 2, 7, 8, 7, 13], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 10, 9, 8, 1, 4, 13, 10, 4, 9], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 2, 5, 3, 5, 13, 12, 4, 6], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 3, 3, 10, 9, 10, 9, 4, 13], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 5, 1, 5, 9, 6, 6, 13, 12, 10], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 10, 3, 4, 6, 8, 3, 9, 10, 14], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 1, 7, 9, 9, 5, 12, 7, 11, 10], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 5, 5, 10, 5, 9, 11, 4, 5, 7], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 7, 2, 5, 11, 2, 9, 13, 11, 9], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 7, 1, 5, 1, 5, 6, 7, 6, 12], 7) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 9, 6, 10, 7, 10, 6, 5, 5], 10) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 3, 10, 8, 7, 12, 10, 11, 12], 2) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 7, 3, 3, 7, 7, 5, 7, 13, 6], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 7, 4, 1, 4, 9, 6, 14, 13, 8], 4) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 1, 6, 10, 4, 11, 5, 10, 12], 5) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 2, 7, 7, 1, 7, 9, 13, 9, 14], 7) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 8, 1, 2, 3, 5, 7, 10, 4, 10], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 2, 9, 9, 11, 9, 3, 13, 7, 9], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 9, 6, 5, 9, 5, 3, 12, 6, 12], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 4, 5, 6, 11, 8, 11, 10, 14, 10], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 5, 9, 8, 4, 11, 10, 13, 11, 5], 4) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 1, 3, 8, 3, 7, 6, 11, 4, 10], 3) == 2", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 1, 8, 3, 10, 6, 5, 10, 11, 9], 10) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 9, 4, 1, 2, 1, 11, 10, 13, 6], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 8, 1, 10, 9, 13, 6, 7, 7], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 1, 5, 10, 5, 10, 6, 11, 12], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 7, 7, 5, 6, 1, 6, 6, 14, 12], 2) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 10, 2, 2, 3, 7, 8, 12, 5], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 1, 5, 8, 3, 1, 12, 8, 5, 5], 8) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 7, 5, 2, 1, 3, 11, 7, 6, 12], 7) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 6, 8, 3, 4, 1, 6, 11, 4, 10], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 5, 10, 8, 1, 9, 13, 8, 14, 10], 8) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 8, 7, 2, 11, 5, 7, 9, 9, 9], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 9, 4, 3, 10, 4, 4, 7, 9], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 4, 3, 9, 10, 9, 11, 14, 14, 9], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 1, 4, 3, 7, 4, 6, 10, 4, 10], 1) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 5, 6, 5, 8, 3, 9, 14, 14, 11], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 1, 1, 9, 9, 10, 13, 10, 11, 5], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 1, 2, 3, 4, 5, 8, 12, 11], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 2, 1, 9, 8, 11, 3, 6, 8, 4], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 8, 8, 7, 8, 3, 5, 11, 14, 12], 8) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 3, 3, 10, 1, 3, 10, 14, 13, 8], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 4, 1, 10, 11, 5, 7, 13, 4, 8], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 4, 9, 8, 2, 10, 10, 11, 8, 5], 10) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 7, 10, 5, 8, 11, 11, 13, 12, 6], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 7, 6, 8, 4, 5, 4, 4, 7], 8) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 2, 4, 10, 11, 8, 3, 6, 10, 12], 2) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 6, 7, 2, 10, 1, 7, 12, 14, 7], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 1, 4, 2, 3, 8, 8, 12, 12, 4], 1) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 1, 10, 9, 3, 11, 7, 8, 11, 5], 3) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 2, 9, 1, 7, 3, 3, 4, 5, 5], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 3, 9, 1, 11, 7, 11, 11, 6, 13], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 7, 5, 1, 2, 1, 11, 5, 11, 11], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 5, 9, 6, 11, 1, 6, 5, 12, 12], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 4, 9, 2, 8, 9, 11, 11, 13], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 9, 9, 6, 11, 3, 9, 8, 5], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 1, 6, 8, 4, 8, 10, 10, 10, 10], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 5, 8, 4, 6, 9, 11, 10, 8, 14], 9) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 2, 1, 5, 4, 3, 9, 4, 12, 11], 4) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 1, 5, 2, 1, 6, 3, 13, 9, 9], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 5, 1, 4, 10, 2, 5, 11, 11, 5], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 5, 3, 8, 1, 5, 11, 9, 8, 4], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 6, 6, 2, 3, 1, 10, 14, 4, 11], 11) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 8, 3, 2, 8, 1, 6, 10, 9, 4], 10) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 1, 4, 3, 3, 4, 14, 7, 13], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 5, 3, 8, 8, 10, 8, 11, 13], 5) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 7, 4, 2, 8, 10, 5, 8, 4, 9], 4) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 9, 2, 5, 10, 1, 3, 5, 13, 6], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 3, 4, 9, 3, 10, 13, 6, 14, 5], 11) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 4, 5, 9, 11, 4, 6, 8, 12, 4], 4) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 3, 2, 1, 7, 8, 12, 10, 9, 5], 8) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 8, 5, 3, 6, 8, 5, 10, 13, 10], 11) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 9, 3, 7, 4, 11, 9, 11, 7, 6], 2) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 3, 5, 4, 7, 10, 5, 5, 14, 13], 2) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 6, 3, 8, 6, 9, 9, 7, 5], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 1, 1, 10, 8, 10, 4, 9, 7, 10], 8) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 1, 4, 4, 3, 10, 9, 9, 11, 13], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 4, 5, 5, 10, 5, 9, 8, 6, 8], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 1, 4, 7, 5, 4, 11, 10, 4, 10], 1) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 2, 4, 2, 11, 4, 11, 12, 7, 10], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 2, 4, 8, 4, 13, 4, 4, 14], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 7, 4, 8, 5, 1, 9, 5, 4, 10], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 4, 3, 8, 8, 7, 13, 11, 14], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 2, 4, 5, 11, 12, 13, 4, 4], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 9, 5, 8, 7, 9, 8, 11, 9, 9], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 8, 4, 1, 3, 8, 10, 14, 7, 13], 2) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 3, 2, 5, 5, 6, 13, 7, 7], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 3, 5, 11, 4, 4, 13, 13, 7], 2) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 3, 5, 8, 11, 7, 7, 4, 7, 5], 3) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 6, 3, 10, 9, 6, 10, 9, 5, 4], 1) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 2, 4, 1, 9, 3, 12, 13, 5, 7], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 6, 1, 5, 9, 5, 9, 12, 13, 11], 5) == -1"], "scores": [0.9804, 0.8627, 0.9804, 0.9804, 0.9804, 0.9804, 0.9804, 0.9804, 0.9804, 0.7059], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [100, 88, 100, 100, 100, 100, 100, 100, 100, 72], "completion": "from typing import List\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Finds the index of the first occurrence of the target number in a sorted array.\n    \n    Args:\n        arr (List[int]): A sorted array of integers.\n        target (int): The number to find the first occurrence of.\n        \n    Returns:\n        int: The index of the first occurrence of the target number, or -1 if not found.\n    \"\"\"\n    if not arr:\n        return -1\n    \n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target and (mid == 0 or arr[mid - 1] != target):\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n", "passed": false, "pass": false, "pass_num": 0, "round": 216, "mutate_method": "condense_two2one", "parent_index": 216}
