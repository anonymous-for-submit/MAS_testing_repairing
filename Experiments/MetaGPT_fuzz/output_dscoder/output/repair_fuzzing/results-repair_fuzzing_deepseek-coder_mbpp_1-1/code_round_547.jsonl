{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 754, "prompt": "An element is considered common to lists l1, l2, l3 if it is present at the same index in all three lists. Write a function to find common elements from three lists. The function should return a list.", "code": "def extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result", "test_imports": [], "test_list": ["assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]", "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]", "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]", "assert extract_index_list([4, 6, 5, 3, 6, 8, 2], [1, 6, 1, 8, 6, 7, 2], [3, 2, 5, 3, 5, 7, 7]) == []", "assert extract_index_list([1, 6, 5, 9, 1, 2, 3], [3, 1, 1, 7, 8, 1, 5], [5, 1, 5, 1, 7, 9, 10]) == []", "assert extract_index_list([6, 3, 8, 7, 6, 5, 5], [3, 2, 5, 5, 1, 5, 10], [5, 6, 5, 7, 7, 3, 12]) == []", "assert extract_index_list([5, 2, 2, 8, 2, 7, 12], [5, 3, 4, 4, 2, 10, 4], [5, 6, 7, 2, 3, 8, 11]) == [5]", "assert extract_index_list([3, 5, 8, 9, 2, 6, 9], [4, 1, 4, 1, 1, 8, 11], [3, 6, 7, 6, 1, 6, 2]) == []", "assert extract_index_list([6, 2, 5, 7, 6, 11, 7], [5, 6, 7, 7, 9, 3, 3], [1, 3, 2, 3, 4, 10, 8]) == []", "assert extract_index_list([4, 6, 5, 6, 5, 4, 8], [3, 2, 4, 5, 5, 6, 12], [1, 3, 6, 4, 7, 7, 4]) == []", "assert extract_index_list([3, 3, 3, 4, 9, 10, 6], [5, 4, 3, 7, 6, 8, 10], [4, 3, 4, 3, 1, 4, 2]) == []", "assert extract_index_list([4, 1, 6, 2, 8, 8, 4], [5, 6, 7, 8, 1, 2, 2], [5, 2, 5, 6, 1, 9, 3]) == []", "assert extract_index_list([5, 1, 4, 8, 2, 9, 2], [4, 2, 4, 4, 3, 9, 11], [4, 6, 7, 8, 4, 6, 5]) == []", "assert extract_index_list([2, 2, 1, 1, 8, 6, 9], [1, 4, 5, 1, 9, 3, 7], [4, 5, 4, 7, 3, 5, 8]) == []", "assert extract_index_list([2, 1, 3, 8, 4, 7, 2], [2, 1, 7, 5, 2, 10, 4], [1, 4, 3, 4, 9, 3, 11]) == []", "assert extract_index_list([3, 4, 8, 7, 3, 4, 8], [4, 3, 5, 8, 2, 2, 9], [4, 3, 7, 3, 6, 5, 3]) == []", "assert extract_index_list([1, 2, 5, 9, 2, 5, 11], [4, 6, 7, 6, 2, 4, 12], [2, 4, 6, 6, 5, 1, 7]) == []", "assert extract_index_list([4, 5, 5, 9, 6, 2, 4], [5, 2, 3, 8, 4, 6, 11], [1, 2, 2, 1, 3, 8, 10]) == []", "assert extract_index_list([5, 1, 8, 3, 9, 10, 4], [5, 4, 2, 2, 4, 1, 5], [1, 5, 7, 6, 6, 7, 6]) == []", "assert extract_index_list([2, 2, 6, 9, 8, 11, 11], [5, 4, 2, 1, 8, 4, 7], [3, 4, 2, 6, 6, 6, 6]) == []", "assert extract_index_list([5, 1, 6, 9, 10, 1, 8], [2, 2, 7, 8, 9, 7, 11], [5, 2, 2, 1, 6, 1, 9]) == []", "assert extract_index_list([5, 3, 7, 4, 1, 5, 8], [4, 6, 2, 7, 6, 7, 7], [4, 3, 5, 1, 1, 7, 5]) == []", "assert extract_index_list([1, 5, 7, 7, 5, 11, 9], [2, 4, 6, 1, 5, 1, 3], [1, 2, 2, 2, 3, 6, 9]) == []", "assert extract_index_list([4, 3, 1, 2, 9, 10, 5], [5, 3, 7, 6, 9, 2, 8], [1, 6, 3, 2, 8, 8, 12]) == []", "assert extract_index_list([1, 5, 1, 2, 6, 6, 4], [2, 3, 3, 5, 4, 5, 8], [4, 5, 3, 4, 5, 5, 8]) == []", "assert extract_index_list([2, 6, 5, 8, 9, 3, 5], [5, 5, 5, 2, 9, 1, 4], [3, 5, 4, 8, 3, 6, 3]) == []", "assert extract_index_list([5, 5, 4, 9, 9, 4, 5], [2, 4, 1, 1, 7, 7, 9], [4, 4, 3, 2, 3, 1, 7]) == []", "assert extract_index_list([1, 5, 2, 3, 5, 1, 12], [2, 1, 2, 5, 7, 6, 11], [1, 6, 4, 2, 4, 8, 7]) == []", "assert extract_index_list([4, 1, 4, 4, 6, 4, 9], [4, 2, 5, 2, 5, 1, 2], [2, 5, 7, 4, 5, 2, 10]) == []", "assert extract_index_list([5, 3, 1, 8, 8, 7, 12], [3, 3, 3, 7, 8, 2, 2], [1, 6, 1, 2, 1, 8, 12]) == []", "assert extract_index_list([4, 5, 2, 3, 1, 10, 6], [2, 2, 5, 5, 8, 5, 9], [4, 1, 3, 1, 9, 2, 2]) == []", "assert extract_index_list([4, 4, 2, 7, 10, 6, 3], [4, 3, 6, 3, 4, 10, 9], [5, 6, 2, 3, 9, 3, 10]) == []", "assert extract_index_list([6, 1, 6, 4, 4, 10, 6], [4, 6, 1, 4, 6, 9, 9], [2, 6, 2, 7, 9, 5, 3]) == []", "assert extract_index_list([4, 5, 7, 2, 9, 1, 7], [3, 6, 1, 2, 8, 8, 2], [3, 1, 5, 5, 9, 3, 3]) == []", "assert extract_index_list([6, 6, 5, 4, 10, 6, 5], [4, 6, 2, 2, 2, 7, 6], [5, 1, 1, 3, 2, 9, 6]) == []", "assert extract_index_list([6, 4, 3, 3, 1, 6, 4], [3, 2, 6, 3, 9, 1, 3], [4, 3, 1, 8, 4, 7, 6]) == []", "assert extract_index_list([1, 5, 3, 7, 8, 9, 6], [4, 5, 1, 7, 2, 7, 4], [5, 5, 1, 6, 1, 8, 11]) == [5]", "assert extract_index_list([4, 3, 2, 2, 5, 7, 2], [2, 4, 7, 6, 9, 4, 3], [2, 1, 6, 2, 5, 1, 8]) == []", "assert extract_index_list([1, 1, 2, 8, 5, 2, 7], [5, 4, 4, 5, 6, 3, 9], [2, 2, 6, 1, 8, 10, 8]) == []", "assert extract_index_list([4, 1, 6, 2, 2, 11, 12], [1, 6, 4, 4, 6, 5, 2], [4, 1, 6, 6, 7, 5, 11]) == []", "assert extract_index_list([4, 6, 2, 9, 1, 9, 11], [4, 1, 1, 5, 6, 7, 8], [2, 6, 4, 3, 6, 8, 5]) == []", "assert extract_index_list([2, 3, 3, 2, 7, 11, 10], [3, 5, 2, 5, 4, 11, 5], [1, 2, 5, 7, 7, 1, 12]) == []", "assert extract_index_list([5, 1, 5, 7, 4, 9, 4], [2, 3, 3, 8, 4, 11, 5], [3, 4, 4, 8, 8, 8, 12]) == []", "assert extract_index_list([2, 1, 7, 1, 7, 1, 8], [3, 2, 4, 5, 5, 10, 5], [4, 4, 2, 8, 4, 10, 12]) == []", "assert extract_index_list([1, 6, 4, 6, 8, 11, 10], [3, 4, 3, 1, 8, 2, 9], [3, 6, 7, 3, 6, 6, 11]) == []", "assert extract_index_list([2, 4, 8, 8, 2, 3, 3], [2, 2, 2, 5, 1, 9, 2], [4, 1, 4, 4, 6, 1, 8]) == []", "assert extract_index_list([4, 1, 8, 3, 6, 7, 9], [4, 3, 6, 3, 4, 8, 10], [3, 6, 1, 1, 5, 1, 4]) == []", "assert extract_index_list([3, 3, 4, 8, 10, 6, 3], [3, 6, 1, 4, 4, 10, 2], [2, 4, 7, 4, 8, 3, 12]) == []", "assert extract_index_list([2, 1, 3, 7, 7, 1, 3], [2, 1, 6, 3, 4, 2, 8], [1, 2, 6, 1, 5, 3, 7]) == []", "assert extract_index_list([3, 4, 2, 5, 4, 3, 10], [3, 5, 7, 3, 1, 3, 8], [5, 1, 4, 4, 3, 4, 4]) == []", "assert extract_index_list([3, 2, 6, 2, 10, 3, 7], [4, 3, 2, 1, 1, 5, 9], [3, 5, 4, 8, 5, 11, 2]) == []", "assert extract_index_list([1, 6, 2, 6, 8, 4, 8], [4, 1, 1, 1, 7, 5, 4], [5, 3, 6, 3, 4, 7, 9]) == []", "assert extract_index_list([2, 1, 1, 7, 2, 7, 2], [5, 6, 2, 7, 2, 6, 10], [5, 1, 7, 4, 2, 8, 5]) == [2]", "assert extract_index_list([6, 2, 3, 7, 6, 8, 12], [2, 4, 5, 6, 9, 2, 8], [4, 4, 2, 6, 8, 6, 9]) == []", "assert extract_index_list([6, 4, 5, 3, 8, 3, 3], [4, 2, 2, 4, 7, 1, 1], [3, 4, 5, 6, 5, 7, 5]) == []", "assert extract_index_list([5, 2, 3, 6, 4, 4, 3], [2, 5, 1, 2, 8, 9, 8], [2, 3, 5, 1, 9, 10, 10]) == []", "assert extract_index_list([2, 2, 5, 1, 10, 3, 8], [4, 4, 7, 6, 5, 3, 7], [2, 5, 5, 8, 2, 9, 5]) == []", "assert extract_index_list([1, 3, 7, 4, 4, 8, 10], [2, 5, 6, 5, 6, 7, 9], [5, 6, 3, 2, 8, 10, 5]) == []", "assert extract_index_list([1, 3, 8, 6, 8, 6, 12], [5, 1, 6, 3, 1, 10, 2], [5, 6, 1, 8, 7, 2, 10]) == []", "assert extract_index_list([1, 6, 8, 2, 5, 3, 9], [4, 3, 3, 2, 9, 11, 2], [5, 1, 5, 4, 1, 4, 6]) == []", "assert extract_index_list([5, 6, 8, 8, 2, 9, 2], [5, 4, 7, 1, 8, 11, 7], [2, 5, 7, 1, 1, 8, 6]) == []", "assert extract_index_list([3, 6, 8, 3, 4, 11, 6], [1, 5, 6, 3, 1, 2, 3], [4, 3, 5, 3, 7, 5, 8]) == [3]", "assert extract_index_list([5, 5, 1, 7, 8, 3, 3], [4, 5, 3, 4, 8, 9, 8], [3, 2, 6, 5, 4, 9, 3]) == []", "assert extract_index_list([2, 3, 1, 8, 8, 8, 2], [4, 5, 2, 3, 7, 6, 1], [5, 2, 5, 6, 2, 7, 5]) == []", "assert extract_index_list([4, 6, 4, 8, 1, 6, 5], [5, 2, 2, 8, 8, 3, 6], [2, 5, 5, 2, 9, 10, 12]) == []", "assert extract_index_list([5, 3, 4, 8, 3, 9, 4], [2, 4, 3, 4, 3, 1, 1], [3, 2, 6, 1, 2, 4, 9]) == []", "assert extract_index_list([2, 4, 4, 8, 2, 2, 10], [4, 2, 5, 5, 6, 6, 6], [4, 6, 1, 7, 6, 8, 6]) == []", "assert extract_index_list([6, 3, 6, 6, 1, 3, 10], [2, 5, 2, 8, 1, 7, 10], [3, 1, 7, 5, 5, 8, 7]) == []", "assert extract_index_list([2, 1, 2, 6, 2, 1, 4], [5, 3, 2, 4, 2, 3, 5], [4, 5, 2, 3, 6, 2, 9]) == [2]", "assert extract_index_list([4, 3, 2, 5, 11, 1, 7], [5, 6, 6, 2, 7, 9, 11], [4, 2, 3, 6, 3, 6, 6]) == []", "assert extract_index_list([5, 2, 3, 2, 4, 9, 4], [1, 2, 1, 1, 5, 6, 7], [4, 4, 2, 2, 1, 7, 7]) == []", "assert extract_index_list([2, 3, 7, 9, 7, 7, 3], [4, 4, 3, 8, 8, 9, 11], [3, 5, 6, 4, 4, 9, 12]) == []", "assert extract_index_list([3, 2, 4, 8, 7, 4, 7], [2, 3, 1, 1, 1, 2, 9], [1, 3, 4, 3, 3, 3, 11]) == []", "assert extract_index_list([3, 1, 4, 6, 2, 9, 10], [3, 4, 3, 6, 7, 10, 12], [1, 2, 2, 8, 3, 3, 3]) == []", "assert extract_index_list([6, 4, 2, 9, 7, 1, 5], [2, 5, 1, 1, 5, 10, 6], [2, 4, 1, 6, 2, 8, 9]) == []", "assert extract_index_list([4, 5, 2, 6, 8, 9, 6], [1, 6, 3, 4, 7, 3, 6], [1, 4, 7, 2, 4, 5, 10]) == []", "assert extract_index_list([3, 5, 1, 5, 5, 7, 11], [4, 2, 5, 4, 6, 8, 8], [5, 4, 1, 1, 6, 4, 3]) == []", "assert extract_index_list([6, 6, 3, 4, 8, 8, 10], [2, 2, 4, 1, 8, 8, 11], [1, 5, 1, 6, 4, 4, 12]) == []", "assert extract_index_list([3, 2, 5, 5, 8, 5, 7], [1, 2, 5, 2, 4, 4, 10], [3, 5, 6, 3, 5, 9, 6]) == []", "assert extract_index_list([4, 3, 7, 3, 10, 1, 3], [5, 3, 2, 5, 2, 9, 3], [1, 6, 5, 6, 4, 9, 7]) == []", "assert extract_index_list([1, 3, 1, 6, 3, 5, 10], [1, 1, 6, 7, 7, 6, 11], [5, 3, 7, 4, 2, 9, 12]) == []", "assert extract_index_list([5, 6, 8, 4, 2, 1, 2], [4, 4, 2, 4, 5, 2, 5], [4, 3, 6, 7, 7, 9, 6]) == []", "assert extract_index_list([2, 4, 1, 4, 4, 9, 5], [2, 4, 7, 3, 5, 2, 6], [4, 6, 1, 2, 7, 6, 4]) == []", "assert extract_index_list([3, 1, 6, 8, 3, 10, 2], [4, 2, 2, 8, 9, 8, 10], [2, 6, 3, 2, 7, 1, 5]) == []", "assert extract_index_list([6, 2, 7, 4, 7, 2, 1], [5, 6, 5, 2, 6, 3, 2], [1, 5, 5, 3, 2, 4, 4]) == []", "assert extract_index_list([3, 6, 7, 6, 4, 4, 1], [5, 1, 5, 6, 9, 7, 11], [1, 3, 6, 5, 6, 9, 6]) == []", "assert extract_index_list([1, 6, 1, 1, 3, 5, 4], [3, 6, 5, 2, 7, 5, 7], [1, 6, 1, 7, 4, 5, 8]) == [6, 5]", "assert extract_index_list([4, 4, 1, 3, 5, 8, 9], [3, 5, 2, 8, 5, 1, 3], [4, 5, 5, 1, 8, 10, 7]) == []", "assert extract_index_list([1, 5, 3, 4, 11, 6, 8], [3, 1, 6, 3, 8, 8, 5], [5, 5, 4, 8, 6, 10, 9]) == []", "assert extract_index_list([1, 3, 6, 1, 5, 2, 10], [5, 3, 2, 4, 2, 2, 4], [2, 5, 4, 7, 2, 2, 2]) == [2]", "assert extract_index_list([1, 2, 6, 2, 2, 8, 1], [3, 3, 4, 1, 2, 6, 6], [5, 1, 6, 5, 4, 8, 9]) == []", "assert extract_index_list([4, 5, 4, 7, 3, 2, 4], [1, 3, 7, 5, 3, 2, 9], [5, 1, 5, 3, 6, 8, 8]) == []", "assert extract_index_list([6, 3, 5, 7, 3, 2, 8], [3, 5, 3, 8, 8, 5, 5], [5, 3, 3, 5, 8, 3, 11]) == []", "assert extract_index_list([3, 6, 8, 3, 5, 10, 3], [1, 3, 6, 8, 6, 6, 11], [3, 1, 6, 7, 6, 5, 4]) == []", "assert extract_index_list([4, 4, 8, 8, 5, 1, 4], [1, 6, 3, 7, 7, 1, 9], [4, 1, 5, 8, 1, 9, 10]) == []", "assert extract_index_list([2, 2, 2, 5, 10, 7, 11], [3, 6, 2, 5, 4, 6, 6], [3, 5, 1, 2, 6, 6, 2]) == []", "assert extract_index_list([4, 2, 5, 2, 6, 5, 6], [5, 2, 2, 2, 3, 9, 8], [2, 2, 7, 1, 5, 1, 4]) == [2]", "assert extract_index_list([2, 3, 8, 9, 11, 3, 10], [4, 5, 7, 3, 3, 9, 3], [5, 1, 4, 7, 9, 10, 7]) == []", "assert extract_index_list([2, 2, 8, 1, 7, 2, 10], [5, 5, 4, 7, 2, 9, 10], [5, 2, 3, 4, 2, 8, 2]) == []", "assert extract_index_list([4, 1, 2, 7, 3, 9, 7], [2, 6, 4, 2, 4, 8, 2], [4, 1, 1, 5, 6, 2, 9]) == []", "assert extract_index_list([6, 5, 3, 8, 9, 10, 11], [4, 1, 2, 4, 3, 7, 9], [3, 6, 4, 1, 5, 4, 12]) == []", "assert extract_index_list([2, 6, 6, 4, 11, 1, 8], [3, 4, 7, 5, 8, 8, 9], [5, 4, 6, 7, 5, 4, 11]) == []"], "entry_point": "extract_index_list", "repair_prompt": ["An element is considered common to lists l1, l2, l3 if it is present at the same index in all three lists. Write a function extract_index_list to find common elements from three lists. The function should return a list.\nextract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n", " An element is considered to be common to lists l1, l2, l3 if it appears at the same position in all three lists. To find such common elements, we need to write a function extract_index_list that will check each element across the lists and identify those that are present at the same index in all three lists. The function should return a list of these common elements.\nextract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n", " An element is considered common to lists l1, l2, l3 if it is present at the same index in all three lists. Write a function extract_index_list to find common elements from three lists. The function should return a list.\nextract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts common elements across three lists based on their indices.\n\n    Args:\n        l1 (List[int]): The first list of integers.\n        l2 (List[int]): The second list of integers.\n        l3 (List[int]): The third list of integers.\n\n    Returns:\n        List[int]: A list of integers representing common elements.\n    \"\"\"\n    return [l1[i] for i in range(len(l1)) if l1[i] == l2[i] == l3[i]]\n", "from typing import List\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts elements that are common at the same indices across three lists.\n\n    Args:\n        l1 (List[int]): The first list of integers.\n        l2 (List[int]): The second list of integers.\n        l3 (List[int]): The third list of integers.\n\n    Returns:\n        List[int]: A list of integers that are common at the same indices across all three lists.\n    \"\"\"\n    result = []\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts elements that are common at the same index in all three lists.\n\n    Args:\n        l1 (List[int]): The first list of integers.\n        l2 (List[int]): The second list of integers.\n        l3 (List[int]): The third list of integers.\n\n    Returns:\n        List[int]: A list of integers that are common at the same index in all three lists.\n    \"\"\"\n    common_elements = []\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements\n", "from typing import List\nfrom typing import List, Any\n\ndef extract_index_list(l1: List[Any], l2: List[Any], l3: List[Any]) -> List[Any]:\n    \"\"\"\n    Extracts common elements across three lists based on their positions.\n    \n    Args:\n        l1 (List[Any]): The first list.\n        l2 (List[Any]): The second list.\n        l3 (List[Any]): The third list.\n    \n    Returns:\n        List[Any]: A list of common elements.\n    \"\"\"\n    # Check if all inputs are lists and of the same length\n    if not all(isinstance(lst, list) for lst in [l1, l2, l3]):\n        raise ValueError(\"All inputs must be lists\")\n    if not all(len(l1) == len(l2) == len(l3)):\n        return []\n    \n    # Initialize result list\n    result = []\n    \n    # Iterate through the elements of the lists simultaneously\n    for i in range(len(l1)):\n        # Compare elements at each index across all lists\n        if l1[i] == l2[i] == l3[i]:\n            # If an element is present at the same index in all lists, add it to the result list\n            result.append(l1[i])\n    \n    return result\n", "from typing import List\n## main.py\n\ndef extract_index_list(l1: list, l2: list, l3: list) -> list:\n    \"\"\"\n    Extracts common elements based on their positions across three lists.\n\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n        l3 (list): The third list of elements.\n\n    Returns:\n        list: A list of common elements.\n    \"\"\"\n    common_elements = []\n    \n    # Iterate through the indices of the lists\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements\n", "from typing import List\n## main.py\n\ndef extract_index_list(l1: list, l2: list, l3: list) -> list:\n    \"\"\"\n    Extracts elements that are present at the same index in all three input lists.\n\n    Args:\n        l1 (list): The first input list.\n        l2 (list): The second input list.\n        l3 (list): The third input list.\n\n    Returns:\n        list: A list of elements that are common to all three lists at the same indices.\n    \"\"\"\n    common_elements = []\n    # Determine the length of the shortest list to avoid index out of range errors\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    # Iterate through the elements of the lists using their indices\n    for i in range(min_length):\n        # Check if the element at the current index is the same in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            # If it is, add it to the result list\n            common_elements.append(l1[i])\n    \n    return common_elements\n", "from typing import List\n## main.py\n\ndef extract_index_list(l1: list, l2: list, l3: list) -> list:\n    \"\"\"\n    Extracts elements that are present and have the same index in all three input lists.\n\n    Args:\n        l1 (list): The first input list.\n        l2 (list): The second input list.\n        l3 (list): The third input list.\n\n    Returns:\n        list: A list of elements that are common to all three lists at the same index.\n    \"\"\"\n    result = []\n    # Iterate through the indices of the lists\n    for i in range(min(len(l1), len(l2), len(l3))):\n        # Check if the elements at the current index are equal in all three lists\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result\n", "from typing import List\n## main.py\n\ndef extract_index_list(l1: list, l2: list, l3: list) -> list:\n    \"\"\"\n    Extracts elements that are common across three lists based on their indices.\n\n    Args:\n        l1 (list): The first input list.\n        l2 (list): The second input list.\n        l3 (list): The third input list.\n\n    Returns:\n        list: A list of elements that are common across the three input lists based on their indices.\n    \"\"\"\n    result = []\n    # Determine the length of the shortest list to avoid index out of range\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts common elements across three lists based on their indices.\n\n    Args:\n        l1 (List[int]): The first list of integers.\n        l2 (List[int]): The second list of integers.\n        l3 (List[int]): The third list of integers.\n\n    Returns:\n        List[int]: A list of integers that are common across all three lists based on their indices.\n    \"\"\"\n    result = []\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts elements that are common at the same indices across three lists.\n\n    Args:\n        l1 (List[int]): The first list of integers.\n        l2 (List[int]): The second list of integers.\n        l3 (List[int]): The third list of integers.\n\n    Returns:\n        List[int]: A list of integers that are common at the same indices across all three lists.\n    \"\"\"\n    result = []\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    \n    return result\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their indices. This is a fundamental operation in data processing and should be efficient and easy to use. The function should handle basic list structures and be extendable for more complex data types.\nrequirement pool:\n- The main code should be concise and readable, using Pythonic practices.\n- The function should handle lists of varying lengths gracefully.\n- Implement error handling for non-list inputs.\n- Ensure the function is optimized for performance, especially with large datasets.\n- Include documentation and examples to guide users on how to use the function.\nTo create a function that identifies common elements across three lists based on their indices, we will use Python's built-in capabilities and leverage the simplicity and efficiency of list comprehensions. The function will iterate through the lists, comparing elements at each index and collecting those that match across all lists. This approach ensures both readability and efficiency, making it suitable for handling large datasets.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we need to find elements that are present and have the same value at the same index in all three lists. This is crucial for identifying the common elements across the lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `extract_index_list`, we will follow these steps:\n    1. Define the function `extract_index_list` with three lists as arguments.\n    2. Use a list comprehension to iterate through the indices of the lists.\n    3. Check if the element at the current index in all three lists are the same.\n    4. Collect the common elements into a result list.\n    5. Return the result list.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all lists since they appear at the same index.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that are common to all three lists as they have no elements in common.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to return an empty list when there are no common elements.\n\n# [code logic continued]\n    Here is the Python code to implement the function:\n    ```python\n    def extract_index_list(l1, l2, l3):\n        return [l1[i] for i in range(len(l1)) if l1[i] == l2[i] == l3[i]]\n    ```\n", "requirement analysis:\nThe requirement is to find common elements across three lists based on their indices. This is a straightforward operation that can be efficiently implemented. The function should handle lists of varying lengths and return a list of common elements.\nrequirement pool:\n- Implement the function to find common elements at the same index in three lists.\n- Ensure the function is optimized for performance with large lists.\n- Develop a user-friendly interface for easy interaction.\n- Include error handling for unexpected input scenarios.\n- Integrate the function with other list operations for a comprehensive application.\nTo implement the function `extract_index_list` that finds common elements across three lists based on their indices, we will use Python's built-in capabilities and leverage the `itertools` module for efficient iteration. The function will iterate through the lists, comparing elements at each index across all lists. If an element matches across all lists at the same index, it will be added to the result list. The function will handle lists of varying lengths and return a list of common elements.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we need to find elements that are present and occur at the same index in all three lists. This is crucial for identifying the elements that are shared across all lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function `extract_index_list` will follow these steps:\n    1. Iterate through the elements of the lists using their indices.\n    2. Compare the elements at each index across the three lists.\n    3. If an element matches in all three lists at the same index, add it to the result list.\n    4. Return the result list containing common elements.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all lists as they appear at the same index.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that are common to all three lists as none of the elements appear at the same index in all lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where there are no common elements.\n\n# [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function `extract_index_list` will follow these steps:\n    1. Iterate through the elements of the lists using their indices.\n    2. Compare the elements at each index across the three lists.\n    3. If an element matches in all three lists at the same index, add it to the result list.\n    4. Return the result list containing common elements.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all lists as they appear at the same index.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that are common to all three lists as none of the elements appear at the same index in all lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where there are no common elements.\n", "requirement analysis:\nThe requirement is to find common elements across three lists based on their indices. This is a straightforward task that can be efficiently implemented in Python. The function should iterate through the lists and compare elements at each index, collecting those that match across all lists.\nrequirement pool:\n- The main code should efficiently find common elements across three lists.\n- The function should handle lists of varying lengths.\n- The UI should be simple and intuitive, with clear instructions.\n- The function should handle edge cases, such as lists with different lengths.\n- The product should be optimized for performance, even with large lists.\nTo efficiently find common elements across three lists based on their indices, we will use Python's built-in capabilities. The function will iterate through the lists, comparing elements at each index, and collecting those that match across all lists. This approach ensures simplicity and efficiency, making it suitable for handling large lists.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we need to find elements that are present and have the same index in all three lists. This is crucial for identifying the common elements across the lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function will iterate through the lists, comparing elements at each index, and collecting those that match across all lists.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all lists as they appear at the same index in each list.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that appear at the same index in all three lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will naturally return an empty list if there are no common elements.\n\n# [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we need to find elements that are present and have the same index in all three lists. This is crucial for identifying the common elements across the lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function will iterate through the lists, comparing elements at each index, and collecting those that match across all lists.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all lists as they appear at the same index in each list.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that appear at the same index in all three lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will naturally return an empty list if there are no common elements.\n", "requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their positions. This is a straightforward task that requires basic list manipulation and comparison skills. The function should be efficient and able to handle lists of varying lengths.\nrequirement pool:\n- The main code should efficiently compare elements across the lists.\n- The function should return a list of common elements.\n- Ensure the function can handle lists with different lengths.\n- Implement error handling for non-list inputs.\n- Optimize the function for performance, especially with large lists.\nTo create the function `extract_index_list` that identifies common elements across three lists based on their positions, we will use Python's built-in capabilities for list manipulation and comparison. The function will iterate through the lists, comparing elements at each index across all lists. If an element is present at the same index in all three lists, it will be added to the result list. We will also handle potential issues such as lists of different lengths and non-list inputs by implementing error handling.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same position in all three lists\n\n    Explanation: In the requirement, we need to find elements that are present at the same index in all three lists. This means that the element must be present in all lists and must align in position across all lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function `extract_index_list` should follow these steps:\n    1. Check if all inputs are lists and of the same length.\n    2. Iterate through the elements of the lists simultaneously.\n    3. Compare elements at each index across all lists.\n    4. If an element is present at the same index in all lists, add it to the result list.\n    5. Return the result list.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2], [1, 2, 3, 4]) = []\n    Explanation: The lists are of different lengths, so there cannot be common elements at the same index. The expected output is an empty list.\n    extract_index_list([], [], []) = []\n    Explanation: All lists are empty, so there are no common elements. The expected output is an empty list.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no common elements across the lists, as each list has unique elements. The expected output is an empty list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the lists are of different lengths.\n        if not all(isinstance(lst, list) for lst in [l1, l2, l3]):\n            raise ValueError(\"All inputs must be lists\")\n        if not all(len(l1) == len(l2) == len(l3)):\n            return []\n        (other code)\n", "requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their positions. This is a specific use case that can be optimized for efficiency and clarity. The function should be able to handle lists of varying lengths and return the common elements efficiently.\nrequirement pool:\n- The main code should efficiently check each element across the lists and identify those that are present at the same index in all three lists.\n- The function should return a list of these common elements.\n- Ensure the function is optimized for performance, especially for large lists.\n- Develop a user-friendly interface for easy interaction with the function.\n- Include options for customization and user preferences.\nTo create the function `extract_index_list` that identifies common elements across three lists based on their positions, we will use Python's built-in capabilities and leverage the power of list comprehensions for simplicity and efficiency. The function will iterate through the lists, comparing elements at each index across the lists to find those that are common.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same position in all three lists.\n    Explanation: This means that for an element to be considered common, it must be present at the same index in all three lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function `extract_index_list` will iterate through the lists, comparing elements at each index across the lists to find those that are common. Here's a detailed logic:\n    1. Initialize an empty list to store common elements.\n    2. Iterate through the elements of the lists using their indices.\n    3. For each index, check if the element in the first list is the same as the element in the second and third lists.\n    4. If the elements are the same, add them to the list of common elements.\n    5. Return the list of common elements.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common as they appear at the same position in all three lists.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that appear at the same position in all three lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the scenario where all elements are the same across all lists.\n", "requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their positions. This is a specific use case that can be optimized for efficiency and clarity. The function should be able to handle lists of varying lengths and return the common elements at their respective positions.\nrequirement pool:\n- The main code should efficiently check each element across the lists and identify those that are present at the same index in all three lists.\n- The function should be able to handle lists of varying lengths and return the common elements at their respective positions.\n- The user interface should be simple and intuitive to use, allowing users to input lists and view the results easily.\nTo create the function `extract_index_list` that identifies common elements across three lists based on their positions, we will use Python's built-in capabilities and leverage the simplicity and efficiency of list comprehensions. This approach will ensure that the function is both easy to understand and maintain, and it will handle lists of varying lengths effectively.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same position in all three lists\n\n    Explanation: In the requirement, we need to find elements that are present at the same index in all three lists. This means that the element should match in all three lists at the same index position.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `extract_index_list`, we will follow these steps:\n    1. Iterate through the elements of the lists using their indices.\n    2. Check if the element at the current index is the same in all three lists.\n    3. If it is, add it to the result list.\n    4. Return the result list containing all common elements.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all lists as they appear at the same positions.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that appear at the same positions in all three lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where lists have different lengths or elements that do not match at any index.\n", "requirement analysis:\nThe requirement is to find common elements across three lists based on their indices. This is a specific and clear requirement that aligns well with the goal of identifying shared elements efficiently.\nrequirement pool:\n- Implement function to find common elements at the same index in three lists.\n- Ensure the function is efficient and handles large lists.\n- Develop a user-friendly interface for easy interaction.\n- Include support for multiple lists for comprehensive analysis.\n- Optimize the algorithm for performance and scalability.\nTo implement the function `extract_index_list` that finds common elements across three lists based on their indices, we will use Python's built-in capabilities and the `itertools` library for efficient iteration. The function will iterate through the lists, comparing elements at each index across all three lists. If an element matches across all lists at the same index, it will be added to the result list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we need to find elements that are present and have the same index in all three lists. This is crucial for identifying the common elements across the lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests iterating through the lists and comparing elements at each index. Here's a detailed logic:\n    1. Define the function `extract_index_list` with three lists as arguments.\n    2. Use a loop to iterate through the indices of the lists.\n    3. Compare the elements at each index across all three lists.\n    4. If an element matches across all lists at the same index, add it to the result list.\n    5. Return the result list containing common elements.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all lists as they appear at the same index in each list.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that are common to all three lists as no element appears at the same index in all lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already covers the scenario where no common elements exist.\n", "requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their indices. This is a fundamental operation in data processing and should be efficient and easy to use. The function should handle lists of varying lengths and ensure that only elements present at the same index in all three lists are considered common.\nrequirement pool:\n- The main code should be concise and readable, making it easy for users to understand and implement.\n- The function should handle lists of different lengths gracefully, without errors.\n- The application should provide clear feedback on the results, including any common elements found.\n- The function should be optimized for performance, especially for large lists.\n- The user interface should be intuitive, with clear instructions and feedback mechanisms.\nTo create a function that identifies common elements across three lists based on their indices, we will use Python's built-in capabilities and leverage the power of list comprehensions for simplicity and efficiency. The function will iterate through the lists, comparing elements at each index across all three lists. If an element matches at the same index in all three lists, it will be added to the result list.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we need to find elements that are present and have the same index in all three lists. This is crucial for identifying the common elements across the lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function will iterate through the lists, comparing elements at each index across all three lists. If an element matches at the same index in all three lists, it will be added to the result list.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all lists as they appear at the same index in each list.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that appear at the same index in all three lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will naturally return an empty list if there are no common elements.\n\n# [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we need to find elements that are present and have the same index in all three lists. This is crucial for identifying the common elements across the lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function will iterate through the lists, comparing elements at each index across all three lists. If an element matches at the same index in all three lists, it will be added to the result list.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all lists as they appear at the same index in each list.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that appear at the same index in all three lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function will naturally return an empty list if there are no common elements.\n", "requirement analysis:\nThe requirement is to create a function that identifies common elements across three lists based on their indices. This is a fundamental operation in data processing and should be efficient and easy to use. The function should handle lists of varying lengths and return a list of common elements.\nrequirement pool:\n- The main code should be concise and readable, using Pythonic practices.\n- The function should handle lists of different lengths gracefully.\n- The function should be optimized for performance, especially with large lists.\n- The function should return results in a timely manner.\n- The function should be integrated into a larger application if possible.\nTo create a function that identifies common elements across three lists based on their indices, we will use Python's built-in capabilities and leverage the power of list comprehensions for simplicity and efficiency. The function will iterate through the lists, comparing elements at each index across all three lists. If an element matches at the same index in all three lists, it will be added to the result list. The function will handle lists of different lengths gracefully, ensuring it does not raise errors when lists are of unequal lengths.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we need to find elements that are present and occur at the same index in all three lists. This is crucial for identifying the common elements across the lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function will iterate through the lists, comparing elements at each index across all three lists. If an element matches at the same index in all three lists, it will be added to the result list. The function will handle lists of different lengths gracefully, ensuring it does not raise errors when lists are of unequal lengths.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2], [1, 2, 3, 4]) = [1, 2]\n    Explanation: The element 1 appears at index 0 in the first list and at index 0 in the second list, and the element 2 appears at index 1 in all three lists. The function should return [1, 2] as these are the common elements across the lists.\n\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that appear at the same index in all three lists. Therefore, the function should return an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function already handles lists of different lengths gracefully by only comparing elements at valid indices.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function already handles lists of different lengths gracefully by only comparing elements at valid indices.\n", "requirement analysis:\nThe requirement is to find common elements across three lists based on their indices. This is a straightforward operation that can be efficiently implemented. The function should handle lists of varying lengths and return a list of common elements.\nrequirement pool:\n- Implement the function to find common elements at the same index in three lists.\n- Ensure the function is optimized for performance with large lists.\n- Develop a user-friendly interface for easy interaction.\n- Include error handling for unexpected input scenarios.\n- Integrate the function with other list operations for a comprehensive application.\nTo implement the function `extract_index_list` that finds common elements across three lists based on their indices, we will use Python's built-in capabilities and leverage the `itertools` module for efficient iteration. The function will iterate through the lists, comparing elements at each index across all lists. If an element matches across all lists at the same index, it will be added to the result list. The function will handle lists of varying lengths and return a list of common elements.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n    Explanation: In the requirement, we need to find elements that are present and occur at the same index in all three lists. This is crucial for identifying the elements that are shared across all lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function `extract_index_list` will follow these steps:\n    1. Iterate through the elements of the lists using their indices.\n    2. Compare the elements at each index across the three lists.\n    3. If an element matches in all three lists at the same index, add it to the result list.\n    4. Return the result list containing common elements.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all lists as they appear at the same index.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that are common to all three lists as none of the elements appear at the same index in all lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where there are no common elements.\n\n# [core concept]\n    'common element': an element that appears at the same index in all three lists\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function `extract_index_list` will follow these steps:\n    1. Iterate through the elements of the lists using their indices.\n    2. Compare the elements at each index across the three lists.\n    3. If an element matches in all three lists at the same index, add it to the result list.\n    4. Return the result list containing common elements.\n\n# [edge case] \n    extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) = [1, 2, 3]\n    Explanation: All elements are common to all lists as they appear at the same index.\n    extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) = []\n    Explanation: There are no elements that are common to all three lists as none of the elements appear at the same index in all lists.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to handle cases where there are no common elements.\n"], "test": ["def check(extract_index_list):\n\tassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]", "def check(extract_index_list):\n\tassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]", "def check(extract_index_list):\n\tassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]", "def check(extract_index_list):\n\tassert extract_index_list([4, 6, 5, 3, 6, 8, 2], [1, 6, 1, 8, 6, 7, 2], [3, 2, 5, 3, 5, 7, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 5, 9, 1, 2, 3], [3, 1, 1, 7, 8, 1, 5], [5, 1, 5, 1, 7, 9, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 3, 8, 7, 6, 5, 5], [3, 2, 5, 5, 1, 5, 10], [5, 6, 5, 7, 7, 3, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 2, 2, 8, 2, 7, 12], [5, 3, 4, 4, 2, 10, 4], [5, 6, 7, 2, 3, 8, 11]) == [5]", "def check(extract_index_list):\n\tassert extract_index_list([3, 5, 8, 9, 2, 6, 9], [4, 1, 4, 1, 1, 8, 11], [3, 6, 7, 6, 1, 6, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 2, 5, 7, 6, 11, 7], [5, 6, 7, 7, 9, 3, 3], [1, 3, 2, 3, 4, 10, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 6, 5, 6, 5, 4, 8], [3, 2, 4, 5, 5, 6, 12], [1, 3, 6, 4, 7, 7, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 3, 3, 4, 9, 10, 6], [5, 4, 3, 7, 6, 8, 10], [4, 3, 4, 3, 1, 4, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 6, 2, 8, 8, 4], [5, 6, 7, 8, 1, 2, 2], [5, 2, 5, 6, 1, 9, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 1, 4, 8, 2, 9, 2], [4, 2, 4, 4, 3, 9, 11], [4, 6, 7, 8, 4, 6, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 1, 1, 8, 6, 9], [1, 4, 5, 1, 9, 3, 7], [4, 5, 4, 7, 3, 5, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 3, 8, 4, 7, 2], [2, 1, 7, 5, 2, 10, 4], [1, 4, 3, 4, 9, 3, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 4, 8, 7, 3, 4, 8], [4, 3, 5, 8, 2, 2, 9], [4, 3, 7, 3, 6, 5, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 2, 5, 9, 2, 5, 11], [4, 6, 7, 6, 2, 4, 12], [2, 4, 6, 6, 5, 1, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 5, 9, 6, 2, 4], [5, 2, 3, 8, 4, 6, 11], [1, 2, 2, 1, 3, 8, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 1, 8, 3, 9, 10, 4], [5, 4, 2, 2, 4, 1, 5], [1, 5, 7, 6, 6, 7, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 6, 9, 8, 11, 11], [5, 4, 2, 1, 8, 4, 7], [3, 4, 2, 6, 6, 6, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 1, 6, 9, 10, 1, 8], [2, 2, 7, 8, 9, 7, 11], [5, 2, 2, 1, 6, 1, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 3, 7, 4, 1, 5, 8], [4, 6, 2, 7, 6, 7, 7], [4, 3, 5, 1, 1, 7, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 7, 7, 5, 11, 9], [2, 4, 6, 1, 5, 1, 3], [1, 2, 2, 2, 3, 6, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 3, 1, 2, 9, 10, 5], [5, 3, 7, 6, 9, 2, 8], [1, 6, 3, 2, 8, 8, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 1, 2, 6, 6, 4], [2, 3, 3, 5, 4, 5, 8], [4, 5, 3, 4, 5, 5, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 6, 5, 8, 9, 3, 5], [5, 5, 5, 2, 9, 1, 4], [3, 5, 4, 8, 3, 6, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 5, 4, 9, 9, 4, 5], [2, 4, 1, 1, 7, 7, 9], [4, 4, 3, 2, 3, 1, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 2, 3, 5, 1, 12], [2, 1, 2, 5, 7, 6, 11], [1, 6, 4, 2, 4, 8, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 4, 4, 6, 4, 9], [4, 2, 5, 2, 5, 1, 2], [2, 5, 7, 4, 5, 2, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 3, 1, 8, 8, 7, 12], [3, 3, 3, 7, 8, 2, 2], [1, 6, 1, 2, 1, 8, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 2, 3, 1, 10, 6], [2, 2, 5, 5, 8, 5, 9], [4, 1, 3, 1, 9, 2, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 4, 2, 7, 10, 6, 3], [4, 3, 6, 3, 4, 10, 9], [5, 6, 2, 3, 9, 3, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 1, 6, 4, 4, 10, 6], [4, 6, 1, 4, 6, 9, 9], [2, 6, 2, 7, 9, 5, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 7, 2, 9, 1, 7], [3, 6, 1, 2, 8, 8, 2], [3, 1, 5, 5, 9, 3, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 6, 5, 4, 10, 6, 5], [4, 6, 2, 2, 2, 7, 6], [5, 1, 1, 3, 2, 9, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 4, 3, 3, 1, 6, 4], [3, 2, 6, 3, 9, 1, 3], [4, 3, 1, 8, 4, 7, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 3, 7, 8, 9, 6], [4, 5, 1, 7, 2, 7, 4], [5, 5, 1, 6, 1, 8, 11]) == [5]", "def check(extract_index_list):\n\tassert extract_index_list([4, 3, 2, 2, 5, 7, 2], [2, 4, 7, 6, 9, 4, 3], [2, 1, 6, 2, 5, 1, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 1, 2, 8, 5, 2, 7], [5, 4, 4, 5, 6, 3, 9], [2, 2, 6, 1, 8, 10, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 6, 2, 2, 11, 12], [1, 6, 4, 4, 6, 5, 2], [4, 1, 6, 6, 7, 5, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 6, 2, 9, 1, 9, 11], [4, 1, 1, 5, 6, 7, 8], [2, 6, 4, 3, 6, 8, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 3, 3, 2, 7, 11, 10], [3, 5, 2, 5, 4, 11, 5], [1, 2, 5, 7, 7, 1, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 1, 5, 7, 4, 9, 4], [2, 3, 3, 8, 4, 11, 5], [3, 4, 4, 8, 8, 8, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 7, 1, 7, 1, 8], [3, 2, 4, 5, 5, 10, 5], [4, 4, 2, 8, 4, 10, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 4, 6, 8, 11, 10], [3, 4, 3, 1, 8, 2, 9], [3, 6, 7, 3, 6, 6, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 4, 8, 8, 2, 3, 3], [2, 2, 2, 5, 1, 9, 2], [4, 1, 4, 4, 6, 1, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 8, 3, 6, 7, 9], [4, 3, 6, 3, 4, 8, 10], [3, 6, 1, 1, 5, 1, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 3, 4, 8, 10, 6, 3], [3, 6, 1, 4, 4, 10, 2], [2, 4, 7, 4, 8, 3, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 3, 7, 7, 1, 3], [2, 1, 6, 3, 4, 2, 8], [1, 2, 6, 1, 5, 3, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 4, 2, 5, 4, 3, 10], [3, 5, 7, 3, 1, 3, 8], [5, 1, 4, 4, 3, 4, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 2, 6, 2, 10, 3, 7], [4, 3, 2, 1, 1, 5, 9], [3, 5, 4, 8, 5, 11, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 2, 6, 8, 4, 8], [4, 1, 1, 1, 7, 5, 4], [5, 3, 6, 3, 4, 7, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 1, 7, 2, 7, 2], [5, 6, 2, 7, 2, 6, 10], [5, 1, 7, 4, 2, 8, 5]) == [2]", "def check(extract_index_list):\n\tassert extract_index_list([6, 2, 3, 7, 6, 8, 12], [2, 4, 5, 6, 9, 2, 8], [4, 4, 2, 6, 8, 6, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 4, 5, 3, 8, 3, 3], [4, 2, 2, 4, 7, 1, 1], [3, 4, 5, 6, 5, 7, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 2, 3, 6, 4, 4, 3], [2, 5, 1, 2, 8, 9, 8], [2, 3, 5, 1, 9, 10, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 5, 1, 10, 3, 8], [4, 4, 7, 6, 5, 3, 7], [2, 5, 5, 8, 2, 9, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 3, 7, 4, 4, 8, 10], [2, 5, 6, 5, 6, 7, 9], [5, 6, 3, 2, 8, 10, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 3, 8, 6, 8, 6, 12], [5, 1, 6, 3, 1, 10, 2], [5, 6, 1, 8, 7, 2, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 8, 2, 5, 3, 9], [4, 3, 3, 2, 9, 11, 2], [5, 1, 5, 4, 1, 4, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 6, 8, 8, 2, 9, 2], [5, 4, 7, 1, 8, 11, 7], [2, 5, 7, 1, 1, 8, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 6, 8, 3, 4, 11, 6], [1, 5, 6, 3, 1, 2, 3], [4, 3, 5, 3, 7, 5, 8]) == [3]", "def check(extract_index_list):\n\tassert extract_index_list([5, 5, 1, 7, 8, 3, 3], [4, 5, 3, 4, 8, 9, 8], [3, 2, 6, 5, 4, 9, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 3, 1, 8, 8, 8, 2], [4, 5, 2, 3, 7, 6, 1], [5, 2, 5, 6, 2, 7, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 6, 4, 8, 1, 6, 5], [5, 2, 2, 8, 8, 3, 6], [2, 5, 5, 2, 9, 10, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 3, 4, 8, 3, 9, 4], [2, 4, 3, 4, 3, 1, 1], [3, 2, 6, 1, 2, 4, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 4, 4, 8, 2, 2, 10], [4, 2, 5, 5, 6, 6, 6], [4, 6, 1, 7, 6, 8, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 3, 6, 6, 1, 3, 10], [2, 5, 2, 8, 1, 7, 10], [3, 1, 7, 5, 5, 8, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 2, 6, 2, 1, 4], [5, 3, 2, 4, 2, 3, 5], [4, 5, 2, 3, 6, 2, 9]) == [2]", "def check(extract_index_list):\n\tassert extract_index_list([4, 3, 2, 5, 11, 1, 7], [5, 6, 6, 2, 7, 9, 11], [4, 2, 3, 6, 3, 6, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 2, 3, 2, 4, 9, 4], [1, 2, 1, 1, 5, 6, 7], [4, 4, 2, 2, 1, 7, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 3, 7, 9, 7, 7, 3], [4, 4, 3, 8, 8, 9, 11], [3, 5, 6, 4, 4, 9, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 2, 4, 8, 7, 4, 7], [2, 3, 1, 1, 1, 2, 9], [1, 3, 4, 3, 3, 3, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 1, 4, 6, 2, 9, 10], [3, 4, 3, 6, 7, 10, 12], [1, 2, 2, 8, 3, 3, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 4, 2, 9, 7, 1, 5], [2, 5, 1, 1, 5, 10, 6], [2, 4, 1, 6, 2, 8, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 2, 6, 8, 9, 6], [1, 6, 3, 4, 7, 3, 6], [1, 4, 7, 2, 4, 5, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 5, 1, 5, 5, 7, 11], [4, 2, 5, 4, 6, 8, 8], [5, 4, 1, 1, 6, 4, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 6, 3, 4, 8, 8, 10], [2, 2, 4, 1, 8, 8, 11], [1, 5, 1, 6, 4, 4, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 2, 5, 5, 8, 5, 7], [1, 2, 5, 2, 4, 4, 10], [3, 5, 6, 3, 5, 9, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 3, 7, 3, 10, 1, 3], [5, 3, 2, 5, 2, 9, 3], [1, 6, 5, 6, 4, 9, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 3, 1, 6, 3, 5, 10], [1, 1, 6, 7, 7, 6, 11], [5, 3, 7, 4, 2, 9, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 6, 8, 4, 2, 1, 2], [4, 4, 2, 4, 5, 2, 5], [4, 3, 6, 7, 7, 9, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 4, 1, 4, 4, 9, 5], [2, 4, 7, 3, 5, 2, 6], [4, 6, 1, 2, 7, 6, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 1, 6, 8, 3, 10, 2], [4, 2, 2, 8, 9, 8, 10], [2, 6, 3, 2, 7, 1, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 2, 7, 4, 7, 2, 1], [5, 6, 5, 2, 6, 3, 2], [1, 5, 5, 3, 2, 4, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 6, 7, 6, 4, 4, 1], [5, 1, 5, 6, 9, 7, 11], [1, 3, 6, 5, 6, 9, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 1, 1, 3, 5, 4], [3, 6, 5, 2, 7, 5, 7], [1, 6, 1, 7, 4, 5, 8]) == [6, 5]", "def check(extract_index_list):\n\tassert extract_index_list([4, 4, 1, 3, 5, 8, 9], [3, 5, 2, 8, 5, 1, 3], [4, 5, 5, 1, 8, 10, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 3, 4, 11, 6, 8], [3, 1, 6, 3, 8, 8, 5], [5, 5, 4, 8, 6, 10, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 3, 6, 1, 5, 2, 10], [5, 3, 2, 4, 2, 2, 4], [2, 5, 4, 7, 2, 2, 2]) == [2]", "def check(extract_index_list):\n\tassert extract_index_list([1, 2, 6, 2, 2, 8, 1], [3, 3, 4, 1, 2, 6, 6], [5, 1, 6, 5, 4, 8, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 4, 7, 3, 2, 4], [1, 3, 7, 5, 3, 2, 9], [5, 1, 5, 3, 6, 8, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 3, 5, 7, 3, 2, 8], [3, 5, 3, 8, 8, 5, 5], [5, 3, 3, 5, 8, 3, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 6, 8, 3, 5, 10, 3], [1, 3, 6, 8, 6, 6, 11], [3, 1, 6, 7, 6, 5, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 4, 8, 8, 5, 1, 4], [1, 6, 3, 7, 7, 1, 9], [4, 1, 5, 8, 1, 9, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 2, 5, 10, 7, 11], [3, 6, 2, 5, 4, 6, 6], [3, 5, 1, 2, 6, 6, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 2, 5, 2, 6, 5, 6], [5, 2, 2, 2, 3, 9, 8], [2, 2, 7, 1, 5, 1, 4]) == [2]", "def check(extract_index_list):\n\tassert extract_index_list([2, 3, 8, 9, 11, 3, 10], [4, 5, 7, 3, 3, 9, 3], [5, 1, 4, 7, 9, 10, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 8, 1, 7, 2, 10], [5, 5, 4, 7, 2, 9, 10], [5, 2, 3, 4, 2, 8, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 2, 7, 3, 9, 7], [2, 6, 4, 2, 4, 8, 2], [4, 1, 1, 5, 6, 2, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 5, 3, 8, 9, 10, 11], [4, 1, 2, 4, 3, 7, 9], [3, 6, 4, 1, 5, 4, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 6, 6, 4, 11, 1, 8], [3, 4, 7, 5, 8, 8, 9], [5, 4, 6, 7, 5, 4, 11]) == []"], "scores": [1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, false, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 0, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts elements that are common at the same indices across three lists.\n\n    Args:\n        l1 (List[int]): The first list of integers.\n        l2 (List[int]): The second list of integers.\n        l3 (List[int]): The third list of integers.\n\n    Returns:\n        List[int]: A list of integers that are common at the same indices across all three lists.\n    \"\"\"\n    result = []\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    \n    return result\n", "passed": true, "pass": true, "pass_num": 9, "round": 547, "mutate_method": "rephrase_one", "parent_index": 231}
