{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 129, "prompt": "Write a function to determine if the matrix is a magic square. Ensure that your function considers all relevant properties of a magic square, including equal sums of its rows, columns, and diagonals.", "code": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True", "test_imports": [], "test_list": ["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "assert magic_square_test([[8, 9, 3, 14], [7, 10, 9, 11], [16, 6, 13, 6], [9, 11, 17, 2]]) == False", "assert magic_square_test([[9, 10, 6, 17], [5, 8, 4, 11], [13, 1, 5, 9], [11, 10, 17, 8]]) == False", "assert magic_square_test([[2, 8, 3, 9], [3, 16, 5, 7], [12, 7, 5, 2], [12, 11, 12, 6]]) == False", "assert magic_square_test([[12, 12, 6, 10], [7, 10, 4, 9], [20, 8, 9, 8], [14, 8, 16, 3]]) == False", "assert magic_square_test([[12, 10, 1, 13], [4, 12, 3, 6], [18, 7, 5, 1], [4, 2, 15, 7]]) == False", "assert magic_square_test([[12, 17, 3, 9], [7, 9, 11, 8], [19, 1, 11, 1], [10, 9, 15, 7]]) == False", "assert magic_square_test([[11, 7, 2, 16], [7, 18, 4, 12], [16, 7, 13, 6], [10, 1, 18, 6]]) == False", "assert magic_square_test([[8, 7, 5, 15], [7, 13, 6, 8], [20, 2, 11, 9], [13, 6, 15, 4]]) == False", "assert magic_square_test([[10, 8, 3, 10], [1, 9, 7, 13], [16, 7, 14, 4], [7, 10, 18, 1]]) == False", "assert magic_square_test([[2, 17, 1, 10], [4, 15, 5, 11], [15, 6, 5, 7], [5, 1, 14, 8]]) == False", "assert magic_square_test([[6, 13, 5, 14], [5, 15, 11, 14], [12, 4, 15, 2], [13, 9, 13, 5]]) == False", "assert magic_square_test([[12, 14, 5, 9], [1, 11, 9, 14], [13, 5, 14, 8], [11, 7, 13, 4]]) == False", "assert magic_square_test([[2, 9, 2, 16], [7, 15, 4, 11], [21, 2, 13, 4], [10, 9, 20, 9]]) == False", "assert magic_square_test([[7, 11, 2, 16], [6, 10, 9, 8], [15, 4, 12, 6], [14, 10, 18, 9]]) == False", "assert magic_square_test([[9, 8, 3, 12], [6, 14, 5, 7], [13, 3, 6, 10], [12, 11, 15, 6]]) == False", "assert magic_square_test([[4, 10, 4, 17], [1, 14, 3, 12], [17, 6, 13, 1], [4, 8, 12, 8]]) == False", "assert magic_square_test([[9, 7, 6, 9], [6, 10, 8, 10], [19, 3, 5, 1], [8, 7, 18, 5]]) == False", "assert magic_square_test([[5, 13, 1, 12], [6, 16, 7, 10], [18, 4, 8, 5], [8, 5, 16, 4]]) == False", "assert magic_square_test([[8, 12, 3, 13], [4, 13, 13, 8], [17, 7, 15, 9], [14, 5, 14, 7]]) == False", "assert magic_square_test([[10, 9, 2, 18], [7, 9, 13, 13], [18, 7, 9, 4], [5, 9, 14, 8]]) == False", "assert magic_square_test([[5, 8, 5, 16], [6, 14, 9, 15], [20, 2, 13, 5], [7, 4, 18, 1]]) == False", "assert magic_square_test([[7, 14, 6, 9], [7, 14, 13, 8], [11, 6, 9, 5], [10, 3, 10, 6]]) == False", "assert magic_square_test([[7, 15, 5, 9], [2, 17, 7, 8], [21, 8, 8, 1], [10, 11, 15, 8]]) == False", "assert magic_square_test([[9, 14, 5, 19], [4, 15, 11, 16], [19, 6, 13, 7], [9, 7, 10, 1]]) == False", "assert magic_square_test([[12, 11, 6, 15], [6, 16, 5, 13], [19, 8, 11, 1], [13, 10, 11, 2]]) == False", "assert magic_square_test([[10, 11, 5, 11], [3, 18, 10, 15], [18, 6, 5, 3], [12, 5, 18, 3]]) == False", "assert magic_square_test([[7, 11, 4, 17], [2, 15, 4, 11], [17, 5, 5, 3], [8, 2, 20, 7]]) == False", "assert magic_square_test([[6, 16, 4, 15], [2, 15, 11, 8], [20, 6, 14, 3], [14, 3, 20, 7]]) == False", "assert magic_square_test([[8, 11, 3, 11], [2, 12, 9, 7], [21, 5, 9, 10], [14, 7, 11, 1]]) == False", "assert magic_square_test([[12, 17, 4, 14], [6, 9, 4, 16], [15, 5, 14, 5], [13, 3, 10, 7]]) == False", "assert magic_square_test([[11, 14, 2, 17], [5, 17, 4, 10], [14, 1, 8, 6], [4, 7, 14, 2]]) == False", "assert magic_square_test([[7, 16, 2, 10], [2, 17, 6, 13], [12, 5, 10, 5], [7, 1, 15, 1]]) == False", "assert magic_square_test([[12, 7, 4, 14], [7, 18, 5, 9], [17, 4, 12, 1], [10, 7, 17, 4]]) == False", "assert magic_square_test([[2, 2, 4], [5, 9, 5], [8, 2, 6]]) == False", "assert magic_square_test([[7, 10, 8], [14, 9, 6], [1, 1, 13]]) == False", "assert magic_square_test([[7, 2, 3], [4, 1, 1], [7, 2, 9]]) == False", "assert magic_square_test([[4, 10, 11], [7, 5, 3], [5, 1, 4]]) == False", "assert magic_square_test([[3, 7, 1], [12, 5, 3], [1, 7, 6]]) == False", "assert magic_square_test([[6, 11, 4], [8, 1, 2], [9, 8, 11]]) == False", "assert magic_square_test([[4, 3, 8], [4, 5, 6], [4, 4, 10]]) == False", "assert magic_square_test([[5, 2, 11], [10, 4, 1], [3, 6, 4]]) == False", "assert magic_square_test([[3, 7, 9], [5, 5, 6], [6, 2, 7]]) == False", "assert magic_square_test([[2, 3, 7], [5, 1, 5], [6, 3, 8]]) == False", "assert magic_square_test([[1, 11, 3], [11, 10, 3], [5, 8, 3]]) == False", "assert magic_square_test([[4, 9, 4], [8, 8, 4], [2, 8, 10]]) == False", "assert magic_square_test([[2, 11, 3], [9, 8, 3], [9, 5, 11]]) == False", "assert magic_square_test([[5, 8, 3], [7, 10, 4], [3, 2, 11]]) == False", "assert magic_square_test([[3, 9, 11], [13, 1, 3], [6, 3, 9]]) == False", "assert magic_square_test([[6, 4, 2], [13, 2, 2], [6, 1, 12]]) == False", "assert magic_square_test([[1, 2, 7], [13, 10, 3], [3, 6, 7]]) == False", "assert magic_square_test([[7, 2, 9], [10, 8, 5], [2, 8, 13]]) == False", "assert magic_square_test([[4, 8, 4], [14, 10, 3], [2, 1, 9]]) == False", "assert magic_square_test([[4, 10, 10], [5, 6, 5], [1, 2, 11]]) == False", "assert magic_square_test([[7, 3, 2], [6, 5, 4], [6, 1, 9]]) == False", "assert magic_square_test([[6, 3, 2], [11, 2, 6], [2, 7, 11]]) == False", "assert magic_square_test([[4, 8, 2], [6, 8, 5], [6, 6, 4]]) == False", "assert magic_square_test([[1, 7, 4], [9, 2, 3], [5, 8, 9]]) == False", "assert magic_square_test([[1, 8, 7], [4, 3, 4], [3, 1, 6]]) == False", "assert magic_square_test([[2, 6, 5], [5, 3, 3], [5, 2, 4]]) == False", "assert magic_square_test([[6, 5, 4], [6, 7, 1], [7, 1, 5]]) == False", "assert magic_square_test([[1, 7, 2], [10, 4, 6], [6, 4, 6]]) == False", "assert magic_square_test([[1, 12, 5], [7, 3, 1], [7, 3, 4]]) == False", "assert magic_square_test([[1, 10, 1], [13, 4, 6], [4, 7, 12]]) == False", "assert magic_square_test([[1, 7, 9], [7, 2, 2], [7, 5, 12]]) == False", "assert magic_square_test([[1, 10, 3], [5, 2, 2], [7, 6, 4]]) == False", "assert magic_square_test([[7, 5, 7], [6, 6, 2], [2, 1, 13]]) == False", "assert magic_square_test([[5, 9, 3], [8, 8, 2], [7, 6, 3]]) == False", "assert magic_square_test([[4, 2, 10], [10, 6, 4], [3, 4, 3]]) == False", "assert magic_square_test([[4, 6, 10], [11, 4, 6], [3, 6, 2]]) == False", "assert magic_square_test([[7, 11, 5], [5, 6, 2], [8, 4, 10]]) == False", "assert magic_square_test([[7, 5, 4], [12, 10, 1], [1, 3, 6]]) == False", "assert magic_square_test([[6, 7, 11], [7, 6, 5], [3, 8, 4]]) == False", "assert magic_square_test([[6, 10, 11], [10, 5, 4], [2, 4, 4]]) == False", "assert magic_square_test([[2, 5, 3], [4, 6, 1], [7, 1, 10]]) == False", "assert magic_square_test([[4, 7, 4], [4, 8, 4], [7, 3, 2]]) == False", "assert magic_square_test([[5, 2, 11], [12, 7, 4], [7, 2, 6]]) == False", "assert magic_square_test([[7, 7, 6], [7, 2, 2], [6, 7, 11]]) == False", "assert magic_square_test([[4, 8, 8], [7, 8, 3], [8, 3, 6]]) == False", "assert magic_square_test([[6, 6, 2], [13, 9, 4], [6, 4, 4]]) == False", "assert magic_square_test([[6, 11, 6], [8, 8, 4], [8, 7, 2]]) == False", "assert magic_square_test([[5, 11, 2], [14, 5, 2], [7, 5, 5]]) == False", "assert magic_square_test([[3, 12, 11], [13, 9, 2], [2, 8, 12]]) == False", "assert magic_square_test([[5, 7, 1], [9, 7, 6], [4, 2, 2]]) == False", "assert magic_square_test([[2, 3, 9], [14, 8, 5], [6, 1, 7]]) == False", "assert magic_square_test([[3, 6, 7], [14, 5, 6], [8, 8, 5]]) == False", "assert magic_square_test([[3, 8, 2], [9, 7, 3], [4, 8, 9]]) == False", "assert magic_square_test([[7, 2, 6], [4, 3, 2], [9, 8, 7]]) == False", "assert magic_square_test([[4, 10, 9], [11, 9, 3], [1, 3, 2]]) == False", "assert magic_square_test([[4, 5, 7], [5, 6, 2], [8, 2, 5]]) == False", "assert magic_square_test([[6, 8, 5], [10, 5, 3], [7, 6, 7]]) == False", "assert magic_square_test([[4, 7, 11], [13, 8, 6], [8, 6, 3]]) == False", "assert magic_square_test([[4, 5, 3], [11, 7, 5], [9, 1, 7]]) == False", "assert magic_square_test([[1, 7, 1], [7, 9, 1], [2, 1, 11]]) == False", "assert magic_square_test([[3, 7, 9], [13, 4, 3], [1, 3, 11]]) == False", "assert magic_square_test([[5, 4, 9], [12, 4, 1], [4, 4, 9]]) == False", "assert magic_square_test([[1, 4, 7], [9, 1, 3], [1, 8, 10]]) == False", "assert magic_square_test([[2, 11, 2], [11, 4, 4], [3, 5, 2]]) == False", "assert magic_square_test([[4, 2, 1], [14, 1, 3], [3, 4, 9]]) == False", "assert magic_square_test([[7, 4, 8], [8, 2, 3], [1, 7, 11]]) == False"], "entry_point": "magic_square_test", "repair_prompt": ["Write a function magic_square_test to determine if the matrix is a magic square. Ensure that your function considers all relevant properties of a magic square, including equal sums of its rows, columns, and diagonals.\nmagic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n", " Write a function magic_square_test to determine if a given matrix is a magic square. The function should check if the sums of the numbers in each row, each column, and the two main diagonals are all equal.\nmagic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n", " Write a function magic_square_test to check if a matrix is a magic square, ensuring it checks the sums of rows, columns, and diagonals.\nmagic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n"], "completions": ["from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    if len(matrix) == 0 or len(matrix[0]) == 0:\n        return False\n    \n    size = len(matrix)\n    magic_sum = sum(matrix[0])\n    \n    # Check sums of rows\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check sums of columns\n    for col in range(size):\n        if sum(matrix[row][col] for row in range(size)) != magic_sum:\n            return False\n    \n    # Check sum of primary diagonal\n    if sum(matrix[i][i] for i in range(size)) != magic_sum:\n        return False\n    \n    # Check sum of secondary diagonal\n    if sum(matrix[i][size - 1 - i] for i in range(size)) != magic_sum:\n        return False\n    \n    return True\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Determines if a given matrix is a magic square.\n    \n    A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    \n    Args:\n        matrix (List[List[int]]): A list of lists where each inner list represents a row in the matrix.\n    \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    \n    # Calculate the sum of the first row to set a reference sum\n    sum_reference = sum(matrix[0])\n    \n    # Check if the sum of each row matches the reference sum\n    for row in matrix:\n        if sum(row) != sum_reference:\n            return False\n    \n    # Check if the sum of each column matches the reference sum\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != sum_reference:\n            return False\n    \n    # Check if the sum of the main diagonal matches the reference sum\n    if sum(matrix[i][i] for i in range(n)) != sum_reference:\n        return False\n    \n    # Check if the sum of the secondary diagonal matches the reference sum\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != sum_reference:\n        return False\n    \n    return True\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same.\n\n    Args:\n        matrix (List[List[int]]): A 2D list of integers representing the matrix.\n\n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n\n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n\n    # Initialize sums of rows, columns, and diagonals\n    sum_rows = [0] * n\n    sum_cols = [0] * n\n    sum_diag1 = 0\n    sum_diag2 = 0\n\n    # Calculate sums of rows, columns, and diagonals\n    for i in range(n):\n        for j in range(n):\n            sum_rows[i] += matrix[i][j]\n            sum_cols[j] += matrix[i][j]\n        sum_diag1 += matrix[i][i]\n        sum_diag2 += matrix[i][n - 1 - i]\n\n    # Check if all sums are equal\n    target_sum = sum_rows[0]\n    if any(sum_rows[i] != target_sum for i in range(n)) or \\\n       any(sum_cols[i] != target_sum for i in range(n)) or \\\n       sum_diag1 != target_sum or \\\n       sum_diag2 != target_sum:\n        return False\n\n    return True\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    n = len(matrix)\n    \n    # Check if the matrix is square\n    for row in matrix:\n        if len(row) != n:\n            return False\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Calculate the sum of each column\n    col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n    \n    # Calculate the sum of both main diagonals\n    main_diagonal_sum = sum(matrix[i][i] for i in range(n))\n    secondary_diagonal_sum = sum(matrix[i][n - 1 - i] for i in range(n))\n    \n    # Check if all sums are equal\n    target_sum = row_sums[0]\n    if all(sum_ == target_sum for sum_ in row_sums) and \\\n       all(sum_ == target_sum for sum_ in col_sums) and \\\n       main_diagonal_sum == target_sum and \\\n       secondary_diagonal_sum == target_sum:\n        return True\n    else:\n        return False\n", "from typing import List\n## main.py\n\ndef magic_square_test(matrix: list[list[int]]) -> bool:\n    \"\"\"\n    Determines if a given matrix is a magic square.\n    \n    A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    \n    Args:\n        matrix (list[list[int]]): A 2D list of integers representing the matrix.\n        \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if len(matrix) == 0 or len(matrix[0]) == 0:\n        return False  # The matrix is not square\n    if len(matrix) != len(matrix[0]):\n        return False  # The matrix is not square\n\n    n = len(matrix)\n    magic_sum = sum(matrix[0])  # Initialize the magic sum with the sum of the first row\n\n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True  # All sums are equal, so it is a magic square\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    This function checks if a given matrix is a magic square.\n    \n    A magic square is a square matrix where the sum of every row, every column, and both main diagonals are the same.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list (matrix) representing the square to be checked.\n        \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    \n    n = len(matrix)\n    \n    # Check if the matrix is square\n    for row in matrix:\n        if len(row) != n:\n            return False\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n    \n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same.\n\n    Args:\n        matrix (List[List[int]]): A 2D list of integers representing the matrix.\n\n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n\n    n = len(matrix)\n    magic_sum = sum(matrix[0])\n\n    # Check sums of rows\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check sums of columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check sum of the primary diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    # Check sum of the secondary diagonal\n    if sum(matrix[i][n - i - 1] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef magic_square_test(matrix: list[list[int]]) -> bool:\n    \"\"\"\n    This function checks if a given matrix is a magic square.\n    \n    A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    \n    Args:\n        matrix (list[list[int]]): A 2D list (matrix) representing the square.\n    \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    \n    n = len(matrix)\n    \n    # Calculate the sum of the first row to use as a reference\n    magic_sum = sum(matrix[0])\n    \n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True\n", "from typing import List\n## main.py\n\ndef magic_square_test(matrix: list[list[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same.\n\n    Args:\n        matrix (list[list[int]]): A 2D list of integers representing the matrix.\n\n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n\n    n = len(matrix)\n    magic_sum = sum(matrix[0])\n\n    # Check sums of rows\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check sums of columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    # Check sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    # Check sum of the secondary diagonal\n    if sum(matrix[i][n - i - 1] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n    \n    A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list of integers representing the matrix.\n    \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    \n    n = len(matrix)\n    magic_sum = sum(matrix[0])\n    \n    # Check sums of rows\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check sums of columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True\n"], "plans": ["requirement analysis:\nThe function must be able to handle matrices of any size, not just predefined sizes. It should check for equal sums in rows, columns, and diagonals. The function should be efficient and clear, making it easy for users to understand and use.\nrequirement pool:\n- The main code should be able to determine if a given matrix is a magic square.\n- The function should check for equal sums in all rows, columns, and diagonals.\n- The function should be adaptable to matrices of any size.\n- The function should provide clear and efficient performance.\n- The user interface should be simple and intuitive.\nTo create a function that determines if a matrix is a magic square, we will use Python's built-in libraries and ensure the function is adaptable to matrices of any size. The function will check for equal sums in all rows, columns, and diagonals. We will use a simple and efficient approach to achieve this.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': A square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    Explanation: In a magic square, the sum of the numbers in each row, each column, and both main diagonals are equal. This is a specific property that needs to be checked in the matrix.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Calculate the sum of the first row to set a reference sum.\n    - Iterate through each row and compare its sum to the reference sum.\n    - Iterate through each column and compare its sum to the reference sum.\n    - Calculate the sum of both main diagonals and compare them to the reference sum.\n    - If all sums match the reference sum, return True; otherwise, return False.\n\n# [edge case] \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: The matrix is a 2x2 matrix, and the sums of the rows and columns are not equal. The sum of the first row is 3, the sum of the second row is 7, the sum of the first column is 4, and the sum of the second column is 6. There is no common sum for all rows, columns, and diagonals.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case.\n        if len(matrix) == 0 or len(matrix[0]) == 0:\n            return False\n        (other code)\n\nThis additional code checks if the matrix is empty, which would not be a valid magic square by definition.\n", "requirement analysis:\nThe requirement is to create a function that can determine if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should be able to handle matrices of different sizes and provide clear and immediate feedback on whether the matrix is a magic square or not.\nrequirement pool:\n- The main code should accurately determine if a matrix is a magic square\n- The function should be able to handle matrices of any size\n- The user interface should be intuitive and easy to use\n- The output should be clear and concise\n- The function should be optimized for performance\nTo create a function that determines if a matrix is a magic square, we will use Python's built-in capabilities along with a simple and efficient approach. The function will calculate the sum of each row, column, and both diagonals, and then compare these sums to ensure they are all equal. This will be achieved by iterating through the matrix and performing basic arithmetic operations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': A square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    Explanation: In a magic square, the sum of the numbers in each row, each column, and both main diagonals are equal. This is a specific property that we need to check in our function.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function will follow these steps:\n    1. Calculate the sum of the first row to set a reference sum.\n    2. Check if the sum of each row matches the reference sum.\n    3. Check if the sum of each column matches the reference sum.\n    4. Check if the sum of the main diagonal (top-left to bottom-right) matches the reference sum.\n    5. Check if the sum of the secondary diagonal (top-right to bottom-left) matches the reference sum.\n    6. Return True if all sums match, otherwise return False.\n\n# [edge case] \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: In this 2x2 matrix, the sums of the rows and columns are not equal (row sums are 3 and 7, column sums are 4 and 6), so it is not a magic square.\n    magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) = True\n    Explanation: In this 3x3 matrix, the sums of each row, column, and both diagonals are all equal (row sums are 15, column sums are 15, and diagonal sums are 15).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to determine if a matrix is a magic square.\n", "requirement analysis:\nThe function needs to check if the sum of each row, column, and diagonal in a given matrix are equal. This involves calculating sums and comparing them across all relevant elements of the matrix. The function should be robust enough to handle matrices of different sizes and types, including non-square matrices.\nrequirement pool:\n- The main code should accurately determine if a matrix is a magic square.\n- The function should be able to handle matrices of various sizes.\n- Implement a user-friendly interface for easy matrix input and result display.\n- Ensure the function is optimized for performance, especially for larger matrices.\n- Include support for non-square matrices to broaden the application's usability.\nTo create a function that checks if a matrix is a magic square, we will use Python's built-in capabilities and leverage a simple and efficient approach. The function will calculate the sum of each row, column, and both diagonals, and then compare these sums to ensure they are all equal. This will be achieved by iterating through the matrix and performing basic arithmetic operations. The function will be designed to handle matrices of various sizes, including non-square matrices, by dynamically calculating the required sums based on the matrix's dimensions.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': A square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    Explanation: In a magic square, the sum of the numbers in each row, each column, and both main diagonals must be equal. This is a fundamental property that distinguishes a magic square from other square matrices.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To determine if a matrix is a magic square, we need to:\n    1. Calculate the sum of each row.\n    2. Calculate the sum of each column.\n    3. Calculate the sum of the main diagonal (from top-left to bottom-right).\n    4. Calculate the sum of the secondary diagonal (from top-right to bottom-left).\n    5. Compare all these sums to ensure they are equal.\n\n# [edge case] \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: This matrix is not a magic square because the sums of the rows and columns are not equal. The sum of the first row is 3, the sum of the second row is 7, the sum of the first column is 4, and the sum of the second column is 6.\n    magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) = True\n    Explanation: This matrix is a magic square because the sum of each row, each column, and both main diagonals are equal, which is 15.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The provided logic is sufficient to determine if a matrix is a magic square by comparing the sums of rows, columns, and diagonals.\n", "requirement analysis:\nThe requirement is to create a function that checks if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should be able to handle matrices of various sizes, but the initial focus is on 4x4 matrices to meet the provided example.\nrequirement pool:\n- The main code should be able to check if a given 4x4 matrix is a magic square.\n- Ensure the function is efficient and can handle large matrices.\n- Implement error handling for invalid inputs such as non-square matrices.\n- Allow the function to be easily extended to check for magic squares of different sizes.\n- Provide documentation and examples to help users understand how to use the function.\nTo create a function that checks if a given matrix is a magic square, we will use Python's built-in data structures and standard library functions. The function will calculate the sum of each row, each column, and both main diagonals, and then compare these sums to ensure they are all equal. We will also implement error handling to manage non-square matrices.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': A square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    Explanation: A magic square is a square grid filled with numbers such that the sum of the numbers in each row, each column, and both main diagonals are equal. This is a specific type of numerical pattern where the sum of numbers in each direction is consistent.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function should:\n    1. Calculate the sum of each row.\n    2. Calculate the sum of each column.\n    3. Calculate the sum of both main diagonals.\n    4. Compare all these sums to ensure they are equal.\n\n# [edge case] \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: This is not a square matrix, so it cannot be a magic square. The function should return False.\n    magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) = True\n    Explanation: This matrix is a magic square because the sum of each row, each column, and both main diagonals are all equal (15).\n\n# [extra code for edge case]\n    We need extra code to handle the edge case of a non-square matrix.\n        if len(matrix) != len(matrix[0]):\n            return False\n        (other code)\n\nThis additional code checks if the matrix is square before proceeding with the magic square test. If the matrix is not square, it immediately returns False.\n", "requirement analysis:\nThe function needs to check if the sums of the numbers in each row, each column, and the two main diagonals are all equal. This requires summing each row, each column, and both diagonals and comparing them. The function should be able to handle matrices of various sizes efficiently.\nrequirement pool:\n- The main code should accurately determine if a given matrix is a magic square.\n- The function should be optimized for performance and scalability.\n- The user interface should be intuitive and easy to use.\n- The function should handle matrices of different sizes.\n- The documentation should provide clear explanations and examples.\nTo create a function that determines if a given matrix is a magic square, we will use Python's built-in capabilities for list manipulation and arithmetic operations. The function will calculate the sum of each row, each column, and both main diagonals, then compare these sums to ensure they are all equal. This approach leverages Python's simplicity and efficiency for such mathematical operations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': A square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    Explanation: A magic square is a square grid filled with numbers such that the sum of the numbers in each row, each column, and both main diagonals are equal.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Calculate the sum of each row.\n    - Calculate the sum of each column.\n    - Calculate the sum of both main diagonals.\n    - Compare all these sums to ensure they are equal.\n\n# [edge case] \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: In this 2x2 matrix, the sums of the rows are 3 and 7, the sums of the columns are 4 and 6, and the sums of the diagonals are 5 and 5. Since not all sums are equal, it is not a magic square.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case.\n        if len(matrix) == 0 or len(matrix[0]) == 0:\n            return False  # The matrix is not square\n        if len(matrix) != len(matrix[0]):\n            return False  # The matrix is not square\n\n    (other code)\n", "requirement analysis:\nThe primary requirement is to create a function that can determine if a given matrix is a magic square. This involves checking if the sums of the numbers in each row, each column, and the two main diagonals are all equal. The function should be efficient and handle various sizes of matrices.\nrequirement pool:\n- The main code should accurately determine if a given matrix is a magic square.\n- The function should be optimized for performance to handle large matrices efficiently.\n- Include user-friendly error handling for invalid inputs.\n- Develop a simple and clear output format to display the results.\n- Implement a feature to handle matrices of different dimensions.\nTo create a function that determines if a given matrix is a magic square, we will use Python's built-in data structures and standard library functions. The function will first validate the input to ensure it is a valid matrix, then calculate the sums of the rows, columns, and diagonals. We will ensure the function is optimized for performance by using efficient algorithms and avoiding unnecessary computations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': A square matrix where the sum of every row, every column, and both main diagonals are the same.\n    Explanation: In a magic square, the sum of the numbers in each row, each column, and both main diagonals must be equal. This is a mathematical property that can be checked programmatically.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function should:\n    1. Validate the input to ensure it is a square matrix.\n    2. Calculate the sum of each row.\n    3. Calculate the sum of each column.\n    4. Calculate the sum of both main diagonals.\n    5. Compare all these sums to ensure they are equal.\n\n# [edge case] \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: This is not a magic square because the sums of the rows and columns are not equal. The sum of the first row is 3, the sum of the second row is 7, the sum of the first column is 4, and the sum of the second column is 6.\n    magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]) = True\n    Explanation: This is a magic square because the sum of each row, each column, and both main diagonals are all equal, which is 15.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The function can validate the input matrix size and then proceed with the sum calculations. If the matrix is not square, the function can immediately return False.\n", "requirement analysis:\nThe requirement is to create a function that checks if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should be able to handle matrices of various sizes and provide clear results.\nrequirement pool:\n- The main code should accurately check if the matrix is a magic square\n- The function should be able to handle matrices of different sizes\n- The function should provide clear and concise results\n- The function should be optimized for performance\n- The function should include detailed documentation for easy understanding and integration\nTo create a function that checks if a given matrix is a magic square, we will use Python's built-in capabilities and leverage a simple and efficient approach. The function will calculate the sum of each row, each column, and both main diagonals. If all these sums are equal, the matrix is a magic square. We will ensure the function is optimized for performance and includes detailed documentation for easy understanding and integration.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': A square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    Explanation: In a magic square, the sum of the numbers in each row, each column, and both main diagonals are equal. This is a specific property that needs to be checked in a given matrix.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `magic_square_test`, we will follow these steps:\n    1. Calculate the sum of the first row to set a benchmark for comparison.\n    2. Iterate through each row and compare its sum to the benchmark.\n    3. Iterate through each column and compare its sum to the benchmark.\n    4. Calculate the sum of both main diagonals and compare them to the benchmark.\n    5. If all sums are equal, return `True`; otherwise, return `False`.\n\n# [edge case] \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: In this 2x2 matrix, the sums of the rows and columns are not equal (row sums are 3 and 7, column sums are 4 and 6). The diagonals are also not considered since the matrix is not square.\n    magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]) = True\n    Explanation: This 3x3 matrix is a magic square because the sum of each row, each column, and both main diagonals are all equal (15).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to check if a matrix is a magic square.\n", "requirement analysis:\nThe requirement is to create a function that checks if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should be able to handle matrices of various sizes and provide clear results.\nrequirement pool:\n- The main code should accurately check if a matrix is a magic square\n- The function should handle matrices of different sizes\n- The output should clearly indicate whether the matrix is a magic square or not\n- The function should provide detailed error messages for non-magic squares\n- The code should be optimized for performance, especially for large matrices\nTo create a function that checks if a given matrix is a magic square, we will use Python's built-in capabilities and leverage the simplicity of list operations. The function will calculate the sum of each row, each column, and both main diagonals, then compare these sums to ensure they are all equal. This approach ensures efficiency and clarity in the code.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': A square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    Explanation: A magic square is a square grid filled with numbers such that the sum of the numbers in each row, each column, and both main diagonals are equal.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `magic_square_test`, we will follow these steps:\n    1. Calculate the sum of each row.\n    2. Calculate the sum of each column.\n    3. Calculate the sum of the main diagonal (from top-left to bottom-right).\n    4. Calculate the sum of the secondary diagonal (from top-right to bottom-left).\n    5. Compare all these sums to ensure they are equal.\n\n# [edge case] \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: In this 2x2 matrix, the sums of the rows and columns are not equal (2+3=5 and 4+1=5 for columns), so it is not a magic square.\n    magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]) = True\n    Explanation: In this 3x3 matrix, the sums of each row, column, and both diagonals are equal (15 for all).\n    magic_square_test([[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]) = True\n    Explanation: In this 4x4 matrix, the sums of each row, column, and both diagonals are equal (34 for all).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to check if a matrix is a magic square.\n", "requirement analysis:\nThe requirement is to create a function that checks if a given matrix is a magic square. A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same. The function should be efficient and handle various sizes of matrices.\nrequirement pool:\n- The main code should accurately check if the matrix is a magic square\n- The function should handle edge cases such as non-square matrices\n- The function should be optimized for performance\n- The function should provide clear and concise error messages\n- The function should be easy to integrate into other projects\nTo create a function that checks if a given matrix is a magic square, we will use Python's built-in capabilities and leverage the simplicity of list operations. The function will calculate the sum of each row, each column, and both main diagonals, and then compare these sums to ensure they are all equal. This approach will ensure both accuracy and efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': A square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    Explanation: A magic square is a square grid filled with numbers such that the sum of the numbers in each row, each column, and both main diagonals are equal.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the function `magic_square_test`, we will follow these steps:\n    1. Calculate the sum of the first row to set a benchmark for comparison.\n    2. Iterate through each row and compare its sum to the benchmark.\n    3. Iterate through each column and compare its sum to the benchmark.\n    4. Calculate the sum of both main diagonals and compare them to the benchmark.\n    5. If all sums match the benchmark, return `True`; otherwise, return `False`.\n\n# [edge case] \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: In this 2x2 matrix, the sum of the first row is 3, the sum of the second row is 7, the sum of the first column is 4, the sum of the second column is 6, and the sum of the main diagonals are 5 and 5, respectively. Since not all sums are equal, the function should return `False`.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to check if the matrix is a magic square.\n", "requirement analysis:\nThe function must be able to handle matrices of any size, not just 4x4 as in the example. It should check for equal sums in rows, columns, and diagonals. The function should be efficient and handle edge cases such as non-square matrices or matrices with non-integer elements.\nrequirement pool:\n- The main code should be able to determine if a given matrix is a magic square.\n- The function should be able to handle matrices of any size.\n- The UI should allow users to input matrices easily.\n- The output should clearly indicate whether the matrix is a magic square and provide explanations if it is not.\n- The software should be optimized for performance and efficiency.\nWe will use Python's built-in capabilities along with the NumPy library to ensure efficient handling of matrix operations. The main function, `magic_square_test`, will take a matrix as input and check if it satisfies the properties of a magic square by comparing the sum of elements in each row, column, and both diagonals.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'magic square': A square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    Explanation: In a magic square, the sum of the numbers in each row, each column, and both main diagonals are equal. This property makes the square a fascinating mathematical object.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To determine if a matrix is a magic square, we need to:\n    1. Calculate the sum of each row.\n    2. Calculate the sum of each column.\n    3. Calculate the sum of the main diagonal (from top-left to bottom-right).\n    4. Calculate the sum of the secondary diagonal (from top-right to bottom-left).\n    5. Compare all these sums to ensure they are equal.\n\n# [edge case] \n    magic_square_test([[1, 2], [3, 4]]) = False\n    Explanation: In this 2x2 matrix, the sums of the rows and columns are not equal (row sums are 3 and 7, column sums are 4 and 6). The main diagonal sum is 5, and the secondary diagonal sum is 5, but since the row and column sums are not equal, it is not a magic square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan should be sufficient to determine if the matrix is a magic square by comparing the sums of rows, columns, and diagonals.\n"], "test": ["def check(magic_square_test):\n\tassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "def check(magic_square_test):\n\tassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "def check(magic_square_test):\n\tassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 9, 3, 14], [7, 10, 9, 11], [16, 6, 13, 6], [9, 11, 17, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 10, 6, 17], [5, 8, 4, 11], [13, 1, 5, 9], [11, 10, 17, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 8, 3, 9], [3, 16, 5, 7], [12, 7, 5, 2], [12, 11, 12, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 12, 6, 10], [7, 10, 4, 9], [20, 8, 9, 8], [14, 8, 16, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 10, 1, 13], [4, 12, 3, 6], [18, 7, 5, 1], [4, 2, 15, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 17, 3, 9], [7, 9, 11, 8], [19, 1, 11, 1], [10, 9, 15, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[11, 7, 2, 16], [7, 18, 4, 12], [16, 7, 13, 6], [10, 1, 18, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 7, 5, 15], [7, 13, 6, 8], [20, 2, 11, 9], [13, 6, 15, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 8, 3, 10], [1, 9, 7, 13], [16, 7, 14, 4], [7, 10, 18, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 17, 1, 10], [4, 15, 5, 11], [15, 6, 5, 7], [5, 1, 14, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 13, 5, 14], [5, 15, 11, 14], [12, 4, 15, 2], [13, 9, 13, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 14, 5, 9], [1, 11, 9, 14], [13, 5, 14, 8], [11, 7, 13, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 9, 2, 16], [7, 15, 4, 11], [21, 2, 13, 4], [10, 9, 20, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 2, 16], [6, 10, 9, 8], [15, 4, 12, 6], [14, 10, 18, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 8, 3, 12], [6, 14, 5, 7], [13, 3, 6, 10], [12, 11, 15, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 4, 17], [1, 14, 3, 12], [17, 6, 13, 1], [4, 8, 12, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 7, 6, 9], [6, 10, 8, 10], [19, 3, 5, 1], [8, 7, 18, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 13, 1, 12], [6, 16, 7, 10], [18, 4, 8, 5], [8, 5, 16, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 12, 3, 13], [4, 13, 13, 8], [17, 7, 15, 9], [14, 5, 14, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 9, 2, 18], [7, 9, 13, 13], [18, 7, 9, 4], [5, 9, 14, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 8, 5, 16], [6, 14, 9, 15], [20, 2, 13, 5], [7, 4, 18, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 14, 6, 9], [7, 14, 13, 8], [11, 6, 9, 5], [10, 3, 10, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 15, 5, 9], [2, 17, 7, 8], [21, 8, 8, 1], [10, 11, 15, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 14, 5, 19], [4, 15, 11, 16], [19, 6, 13, 7], [9, 7, 10, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 11, 6, 15], [6, 16, 5, 13], [19, 8, 11, 1], [13, 10, 11, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 11, 5, 11], [3, 18, 10, 15], [18, 6, 5, 3], [12, 5, 18, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 4, 17], [2, 15, 4, 11], [17, 5, 5, 3], [8, 2, 20, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 16, 4, 15], [2, 15, 11, 8], [20, 6, 14, 3], [14, 3, 20, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 11, 3, 11], [2, 12, 9, 7], [21, 5, 9, 10], [14, 7, 11, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 17, 4, 14], [6, 9, 4, 16], [15, 5, 14, 5], [13, 3, 10, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[11, 14, 2, 17], [5, 17, 4, 10], [14, 1, 8, 6], [4, 7, 14, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 16, 2, 10], [2, 17, 6, 13], [12, 5, 10, 5], [7, 1, 15, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 7, 4, 14], [7, 18, 5, 9], [17, 4, 12, 1], [10, 7, 17, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 2, 4], [5, 9, 5], [8, 2, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 10, 8], [14, 9, 6], [1, 1, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 3], [4, 1, 1], [7, 2, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 11], [7, 5, 3], [5, 1, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 1], [12, 5, 3], [1, 7, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 11, 4], [8, 1, 2], [9, 8, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 3, 8], [4, 5, 6], [4, 4, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 2, 11], [10, 4, 1], [3, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 9], [5, 5, 6], [6, 2, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 3, 7], [5, 1, 5], [6, 3, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 11, 3], [11, 10, 3], [5, 8, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 9, 4], [8, 8, 4], [2, 8, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 11, 3], [9, 8, 3], [9, 5, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 8, 3], [7, 10, 4], [3, 2, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 9, 11], [13, 1, 3], [6, 3, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 4, 2], [13, 2, 2], [6, 1, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 2, 7], [13, 10, 3], [3, 6, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 9], [10, 8, 5], [2, 8, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 4], [14, 10, 3], [2, 1, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 10], [5, 6, 5], [1, 2, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 3, 2], [6, 5, 4], [6, 1, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 3, 2], [11, 2, 6], [2, 7, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 2], [6, 8, 5], [6, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 4], [9, 2, 3], [5, 8, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 8, 7], [4, 3, 4], [3, 1, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 6, 5], [5, 3, 3], [5, 2, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 5, 4], [6, 7, 1], [7, 1, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 2], [10, 4, 6], [6, 4, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 12, 5], [7, 3, 1], [7, 3, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 10, 1], [13, 4, 6], [4, 7, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 9], [7, 2, 2], [7, 5, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 10, 3], [5, 2, 2], [7, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 5, 7], [6, 6, 2], [2, 1, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 9, 3], [8, 8, 2], [7, 6, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 2, 10], [10, 6, 4], [3, 4, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 6, 10], [11, 4, 6], [3, 6, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 5], [5, 6, 2], [8, 4, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 5, 4], [12, 10, 1], [1, 3, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 7, 11], [7, 6, 5], [3, 8, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 10, 11], [10, 5, 4], [2, 4, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 5, 3], [4, 6, 1], [7, 1, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 7, 4], [4, 8, 4], [7, 3, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 2, 11], [12, 7, 4], [7, 2, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 7, 6], [7, 2, 2], [6, 7, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 8], [7, 8, 3], [8, 3, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 6, 2], [13, 9, 4], [6, 4, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 11, 6], [8, 8, 4], [8, 7, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 11, 2], [14, 5, 2], [7, 5, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 12, 11], [13, 9, 2], [2, 8, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 7, 1], [9, 7, 6], [4, 2, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 3, 9], [14, 8, 5], [6, 1, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 6, 7], [14, 5, 6], [8, 8, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 8, 2], [9, 7, 3], [4, 8, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 6], [4, 3, 2], [9, 8, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 9], [11, 9, 3], [1, 3, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 5, 7], [5, 6, 2], [8, 2, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 8, 5], [10, 5, 3], [7, 6, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 7, 11], [13, 8, 6], [8, 6, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 5, 3], [11, 7, 5], [9, 1, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 1], [7, 9, 1], [2, 1, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 9], [13, 4, 3], [1, 3, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 4, 9], [12, 4, 1], [4, 4, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 4, 7], [9, 1, 3], [1, 8, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 11, 2], [11, 4, 4], [3, 5, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 2, 1], [14, 1, 3], [3, 4, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 4, 8], [8, 2, 3], [1, 7, 11]]) == False"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n    \n    A magic square is a square matrix in which the sum of every row, every column, and both main diagonals are the same.\n    \n    Args:\n        matrix (List[List[int]]): A 2D list of integers representing the matrix.\n    \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n    \n    n = len(matrix)\n    magic_sum = sum(matrix[0])\n    \n    # Check sums of rows\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check sums of columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n    \n    # Check sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    \n    # Check sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n    \n    return True\n", "passed": true, "pass": true, "pass_num": 10, "round": 429, "mutate_method": "rephrase_one", "parent_index": 329}
