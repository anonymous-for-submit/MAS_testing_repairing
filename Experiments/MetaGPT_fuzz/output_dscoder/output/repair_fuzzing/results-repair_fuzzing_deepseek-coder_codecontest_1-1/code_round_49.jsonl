{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. You are required to implement an efficient solution considering the constraints on a, b, and c. Consider edge cases where some or all song types might be zero.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. You are required to implement an efficient solution considering the constraints on a, b, and c. Consider edge cases where some or all song types might be zero.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has decided to try singing. He has a one-minute songs, b two-minute songs, and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included in exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. You are required to implement an efficient solution considering the constraints on a, b, and c. Consider edge cases where some or\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin", " Luntik has songs of durations a, b, and c minutes. He wants to distribute them into two concerts with the smallest possible absolute difference in total duration. Find the minimal difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration if all songs are in one concert\n    total_duration = a * 1 + b * 2 + c * 3\n    min_diff = float('inf')\n\n    # Try all combinations of distributing songs between two concerts\n    for i in range(4):  # There are 4 possible ways to distribute the songs (0, 1, 2, or 3 songs in one concert)\n        for j in range(4):\n            if i + j == 0 or i + j > a + b + c:\n                continue\n            duration1 = i * 1 + (a - i) * 1 + min(b, j) * 2 + (b - min(b, j)) * 2 + min(c, a - i + b - min(b, j) + j) * 3 + (c - min(c, a - i + b - min(b, j) + j)) * 3\n            duration2 = total_duration - duration1\n            min_diff = min(min_diff, abs(duration1 - duration2))\n\n    return min_diff\n\n# Read input and output results\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # If there are no songs, the difference is zero\n    if total_duration == 0:\n        return 0\n    \n    # Initialize the maximum possible sum to half of the total duration\n    max_possible_sum = total_duration // 2\n    \n    # Initialize a set to store all possible sums\n    possible_sums = set([0])\n    \n    # Add all possible sums of durations for all songs\n    for _ in range(a):\n        new_sums = set()\n        for s in possible_sums:\n            new_sum = s + 1\n            if new_sum <= max_possible_sum:\n                new_sums.add(new_sum)\n        possible_sums.update(new_sums)\n    \n    for _ in range(b):\n        new_sums = set()\n        for s in possible_sums:\n            new_sum = s + 2\n            if new_sum <= max_possible_sum:\n                new_sums.add(new_sum)\n        possible_sums.update(new_sums)\n    \n    for _ in range(c):\n        new_sums = set()\n        for s in possible_sums:\n            new_sum = s + 3\n            if new_sum <= max_possible_sum:\n                new_sums.add(new_sum)\n        possible_sums.update(new_sums)\n    \n    # Find the closest sum to half of the total duration\n    closest_sum = None\n    min_diff = float('inf')\n    for s in possible_sums:\n        diff = abs(total_duration - 2 * s)\n        if diff < min_diff:\n            min_diff = diff\n            closest_sum = s\n    \n    return min_diff\n\n# Provide the Interface\nt = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    # The target duration for each concert\n    target_duration = total_duration // 2\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate over all possible combinations of songs\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                # Calculate the total duration of the current combination\n                current_duration = i * 1 + j * 2 + k * 3\n                # Calculate the difference between the current duration and the target duration\n                diff = abs(total_duration - 2 * current_duration)\n                # Update the minimum difference\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_min_difference(a: int, b: int, c: int) -> int:\n    # Initialize a set to store possible sums of durations for the first concert\n    possible_sums = {0}\n    \n    # Add songs of 1-minute duration\n    for _ in range(a):\n        new_sums = set()\n        for s in possible_sums:\n            new_sums.add(s + 1)\n        possible_sums.update(new_sums)\n    \n    # Add songs of 2-minute duration\n    for _ in range(b):\n        new_sums = set()\n        for s in possible_sums:\n            new_sums.add(s + 2)\n        possible_sums.update(new_sums)\n    \n    # Add songs of 3-minute duration\n    for _ in range(c):\n        new_sums = set()\n        for s in possible_sums:\n            new_sums.add(s + 3)\n        possible_sums.update(new_sums)\n    \n    # Convert the set to a sorted list to find the minimal difference\n    sums_list = sorted(possible_sums)\n    \n    # Find the minimal difference between any two sums\n    min_diff = float('inf')\n    for i in range(len(sums_list)):\n        for j in range(i + 1, len(sums_list)):\n            diff = abs(sums_list[i] - sums_list[j])\n            if diff < min_diff:\n                min_diff = diff\n    \n    return min_diff\n\n# Read input from stdin\na, b, c = map(int, sys.stdin.readline().split())\n\n# Calculate and print the result\nresult = find_min_difference(a, b, c)\nprint(result)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    # Sort the songs by their duration in descending order\n    songs = [a, b, c]\n    songs.sort(reverse=True)\n    \n    # Initialize two variables to keep track of the sum of durations in each concert\n    sum1 = 0\n    sum2 = 0\n    \n    # Iterate through the sorted list of songs and distribute them between the two concerts\n    for i in range(3):\n        if sum1 < sum2:\n            sum1 += songs[i]\n        else:\n            sum2 += songs[i]\n    \n    # Calculate the absolute difference between the two concert durations\n    return abs(sum1 - sum2)\n\n# Provide the Interface\nn = int(input())\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Distribute songs into two concerts with minimal difference in durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of songs in the two concerts\n    for i in range(a + 1):\n        for j in range(b + 1):\n            for k in range(c + 1):\n                # Calculate the duration of the first concert\n                duration_first = i * 1 + j * 2 + k * 3\n                # Calculate the duration of the second concert\n                duration_second = total_duration - duration_first\n                # Calculate the absolute difference between the two durations\n                diff = abs(duration_first - duration_second)\n                # Update the minimum difference if the current one is smaller\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Example usage\nif __name__ == \"__main__\":\n    # Read input from the user\n    a, b, c = map(int, input().split())\n    # Calculate and print the result\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal difference between the total durations of two concerts given the number of songs of different durations.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a * 1 + b * 2 + c * 3\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible distributions of songs into two concerts\n    for i in range(4):  # There are 4 possible ways to distribute the songs (0, 1, 2, or 3 songs in one concert)\n        for j in range(4):\n            if i + j == 4:  # Ensure both concerts have at least one song\n                continue\n            duration_one = total_duration - i * 3 - j * 2  # Duration of the first concert\n            duration_two = total_duration - (4 - i) * 1 - (4 - j) * 2  # Duration of the second concert\n            diff = abs(duration_one - duration_two)  # Absolute difference in durations\n            min_diff = min(min_diff, diff)  # Update the minimal difference\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(sys.stdin.readline().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Finds the minimal possible difference in minutes between the concerts durations.\n    \n    Args:\n        a (int): Duration of the first song in minutes.\n        b (int): Duration of the second song in minutes.\n        c (int): Duration of the third song in minutes.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a + b + c\n    \n    # Initialize the minimal difference to a large number\n    min_difference = float('inf')\n    \n    # Try all possible combinations of distributing the songs into two concerts\n    for i in range(1 << 3):  # There are 2^3 = 8 possible combinations\n        concert1_duration = 0\n        concert2_duration = 0\n        \n        for j in range(3):\n            if i & (1 << j):\n                concert1_duration += [a, b, c][j]\n            else:\n                concert2_duration += [a, b, c][j]\n        \n        # Calculate the absolute difference between the two concert durations\n        difference = abs(concert1_duration - concert2_duration)\n        \n        # Update the minimal difference if the current difference is smaller\n        if difference < min_difference:\n            min_difference = difference\n    \n    return min_difference\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\ndef find_minimal_difference(a, b, c):\n    \"\"\"\n    Calculate the minimal difference in song distribution for concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    # Calculate the total duration of all songs\n    total_duration = a + b + c\n    \n    # Sort the song durations\n    durations = [a, b, c]\n    durations.sort()\n    \n    # Initialize the minimal difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through possible combinations to find the pair of durations that minimizes the absolute difference\n    for i in range(1 << 3):\n        sum1 = sum2 = 0\n        for j in range(3):\n            if i & (1 << j):\n                sum1 += durations[j]\n            else:\n                sum2 += durations[j]\n        min_diff = min(min_diff, abs(sum1 - sum2))\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\nimport sys\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Finds the minimal possible difference in minutes between the durations of two concerts.\n    \n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n    \n    Returns:\n        int: The minimal possible difference in minutes between the durations of two concerts.\n    \"\"\"\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Iterate through all possible combinations of one-minute, two-minute, and three-minute songs\n    for one_min in range(a + 1):\n        for two_min in range(b + 1):\n            for three_min in range(c + 1):\n                # Calculate the total duration of the first concert\n                total_duration_first = one_min + 2 * two_min + 3 * three_min\n                # Calculate the total duration of the second concert\n                total_duration_second = (a - one_min) + 2 * (b - two_min) + 3 * (c - three_min)\n                # Calculate the absolute difference between the two concert durations\n                diff = abs(total_duration_first - total_duration_second)\n                # Update the minimum difference if the current difference is smaller\n                min_diff = min(min_diff, diff)\n    \n    return min_diff\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    a, b, c = map(int, input().strip().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts after distributing songs of different durations. The solution should be efficient and handle edge cases where some or all song types might be zero. The input consists of multiple test cases, and each case provides the number of one-minute, two-minute, and three-minute songs. The output should print the minimal possible difference for each test case.\nrequirement pool:\n- Implement an efficient algorithm to find the minimal difference in concert durations\n- Handle edge cases where some or all song types might be zero\n- Ensure the solution works for multiple test cases efficiently\n- Provide clear and concise output for each test case\nTo solve this problem efficiently, we will use a combination of greedy and binary search techniques. The approach involves calculating the total possible durations of the concerts and then finding the closest possible pair of durations to minimize the absolute difference. We will use Python's built-in functions and libraries to ensure the solution is both efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing items or amounts into two or more groups.\n    Explanation: In this problem, Luntik needs to distribute his songs into two concerts such that each song is included in exactly one concert. The goal is to minimize the absolute difference in the durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    'as small as possible': means to find the smallest possible difference between the two concert durations.\n\n# [degree adverb] \n    'as possible': emphasizes the goal of minimizing the difference.\n\n# [code logic]\n    To solve this efficiently, we can use a greedy approach to distribute the songs. The optimal way to minimize the difference is to try to balance the total duration of the concerts as evenly as possible. This can be achieved by sorting the song durations and then trying to pair the shortest and longest durations together, moving towards the middle.\n\n# [edge case] \n    Edge case 1: All songs are of the same duration.\n    search([3, 3, 3]) = 0\n    Explanation: If all songs are of the same duration, there is no difference in their distribution, so the minimal possible difference is 0.\n\n    Edge case 2: No songs of a certain duration.\n    search([0, 0, 3]) = 3\n    Explanation: If there are no songs of a certain duration, the minimal possible difference will be the sum of the durations of the available songs.\n\n    Edge case 3: One type of song dominates.\n    search([10, 0, 0]) = 10\n    Explanation: If one type of song dominates, the minimal possible difference will be the sum of the durations of that type of song.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already considers the scenarios where some or all song types might be zero.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts where songs of different durations are distributed. The solution should be efficient and handle large input sizes. The algorithm should consider all possible distributions and choose the one that minimizes the difference. Edge cases such as zero songs of certain durations should also be handled.\nrequirement pool:\n- Implement an efficient algorithm to find the minimal difference\n- Handle edge cases where some or all song types might be zero\n- Ensure the solution is robust and works for large inputs\n- Optimize the algorithm for performance\nTo solve this problem efficiently, we will use a dynamic programming approach. The idea is to calculate the total possible sums of durations for all songs and then find the closest sum to half of the total duration. This will give us the minimal possible difference between the two concerts. We will use a set to store all possible sums to ensure efficiency.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing items or amounts into two or more groups.\n    Explanation: In this problem, Luntik needs to distribute his songs into two concerts such that each song is included in exactly one concert. The goal is to minimize the absolute difference in the durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    'as small as possible': means to find the smallest difference between the two concert durations.\n    Explanation: This phrase indicates that we need to find the minimal possible difference in minutes between the durations of the two concerts.\n\n# [degree adverb] \n    'as small as possible': means to find the smallest difference between the two concert durations.\n    Explanation: This degree adverb emphasizes the need to find the minimal possible difference, which is crucial for the problem's objective.\n\n# [code logic]\n    To solve this problem efficiently, we will use a dynamic programming approach. The idea is to calculate the total possible sums of durations for all songs and then find the closest sum to half of the total duration. This will give us the minimal possible difference.\n\n# [edge case] \n    Edge case 1: All songs are zero.\n    search([0, 0, 0]) = 0\n    Explanation: If there are no songs, the difference is zero since both concerts would have a duration of zero.\n\n    Edge case 2: All songs are of the same type.\n    search([3, 3, 3]) = 0\n    Explanation: If all songs are of the same type, the difference is zero since we can distribute them evenly between the two concerts.\n\n    Edge case 3: One type of song is zero.\n    search([3, 0, 0]) = 3\n    Explanation: If one type of song is zero, the difference is equal to the duration of the non-zero type songs, as they will be in one concert.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The dynamic programming approach inherently handles cases where one or more song types are zero.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts given a set of songs with different durations. The solution should be efficient and handle large input sizes. Edge cases such as zero values for songs should also be considered.\nrequirement pool:\n- Implement an efficient algorithm to find the minimal difference in concert durations.\n- Handle edge cases where some or all song types might be zero.\n- Ensure the solution is robust and can handle large input sizes efficiently.\n- Optimize the algorithm for performance and accuracy.\n- Provide clear and accurate output for each test case.\nTo solve this problem efficiently, we will use a dynamic programming approach. The idea is to calculate the total possible sums of durations for all songs and then find the closest sum to half of the total duration. This will give us the minimal possible difference in concert durations.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing items or amounts into two groups or parts.\n    Explanation: In this problem, Luntik needs to distribute his songs into two concerts such that each song is included in exactly one concert. The goal is to minimize the absolute difference in the total duration of the two concerts.\n\n# [phrase showing quantity relationship]\n    'as small as possible': means to find the smallest possible difference between the two concert durations.\n\n# [degree adverb] \n    'as small as possible': indicates the goal is to achieve the smallest difference.\n\n# [code logic]\n    To solve this efficiently, we can use a dynamic programming approach to calculate all possible sums of durations for the given songs and then find the closest sum to half of the total duration. This will give us the minimal possible difference.\n\n# [edge case] \n    Edge case 1: t = 1, a = 1, b = 1, c = 1\n    Expected output: 0\n    Explanation: If there is only one test case with one of each song type, the optimal distribution would be to put one song of each type in each concert, resulting in a difference of 0.\n\n    Edge case 2: t = 1, a = 0, b = 0, c = 0\n    Expected output: 0\n    Explanation: If there are no songs of any type, the difference is naturally 0 since both concerts would be empty.\n\n    Edge case 3: t = 1, a = 10^9, b = 10^9, c = 10^9\n    Expected output: 4999999999\n    Explanation: With a large number of songs of each type, the optimal distribution would aim to balance the durations as much as possible, leading to a difference close to half of the total duration.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic is efficient and can handle large values of a, b, and c without additional complexity.\n", "requirement analysis:\nThe problem requires an efficient way to distribute songs into two concerts to minimize the absolute difference in their durations. This involves a combinatorial approach to try and balance the total duration of the songs in each concert. The solution should be able to handle large inputs efficiently and provide an accurate result.\nrequirement pool:\n- Implement an efficient algorithm to distribute songs into two concerts\n- Ensure the solution can handle large input constraints\n- Provide an accurate and minimal difference in concert durations\n- Develop a user-friendly interface for easy input and output\n- Optimize the algorithm for fast computation time\nTo solve the problem of distributing songs into two concerts with minimal difference in durations, we will use a dynamic programming approach. This method will efficiently calculate the possible sums of durations for each concert and then find the minimal difference between these sums. We will leverage Python's standard library for its efficiency and simplicity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups (concerts) such that each song is included in exactly one group.\n    'minimal difference': means to find the smallest possible difference between the total durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference between the two groups' total durations.\n\n# [code logic]\n    To implement the solution, we can use dynamic programming to explore all possible sums of durations for the two concerts. We will use a set to keep track of the unique sums we can achieve. Here's a step-by-step approach:\n    1. Initialize a set to store possible sums of durations for the first concert.\n    2. Iterate through the possible sums and update the set with new sums that can be formed by adding a song of a certain duration.\n    3. After populating the set with all possible sums, find the minimal difference between any two sums.\n\n# [edge case] \n    Edge case 1: [1, 1, 2]\n    Expected output: 0\n    Explanation: The optimal distribution would be [1, 1] and [2], resulting in a difference of 0.\n\n    Edge case 2: [1, 2, 3, 4]\n    Expected output: 0\n    Explanation: The optimal distribution would be [1, 3] and [2, 4], resulting in a difference of 0.\n\n    Edge case 3: [1, 1, 1, 1]\n    Expected output: 2\n    Explanation: The optimal distribution would be [1, 1] and [1, 1], resulting in a difference of 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The dynamic programming approach inherently handles all possible distributions and finds the optimal one.\n", "requirement analysis:\nThe problem requires finding the minimal difference in the sum of durations between two concerts given a set of songs with different durations. The solution should be efficient and handle large inputs within the given constraints. The optimal approach should balance between minimizing the difference and ensuring all songs are included in exactly one concert.\nrequirement pool:\n- Implement an efficient algorithm to find the minimal difference in concert durations.\n- Ensure the solution can handle edge cases where some or all songs might be zero.\n- Optimize the algorithm for large inputs within the given constraints.\n- Provide a clear and efficient implementation of the solution.\n- Test the solution with multiple test cases to ensure accuracy and reliability.\nWe will use a greedy approach to solve this problem. The idea is to first sort the songs by their duration in descending order. Then, we will try to distribute the songs into two concerts such that the absolute difference in their durations is minimized. This can be achieved by trying to balance the total duration of the songs in each concert as much as possible. We will iterate through the sorted list and keep track of the sum of durations in each concert, adjusting the distribution as we go.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'greedy approach': This approach involves making the locally optimal choice at each step with the hope of finding a global optimum. In this problem, we sort the songs by their duration and then use a greedy strategy to distribute them into two concerts to minimize the absolute difference in their durations.\n\n# [phrase showing quantity relationship]\n    'as small as possible': This phrase indicates that we need to find the minimal possible difference between the durations of the two concerts.\n\n# [degree adverb] \n    'as much as possible': This adverb suggests that we should aim to balance the total duration of the songs in each concert as evenly as possible.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we will follow these steps:\n    1. Sort the songs by their duration in descending order.\n    2. Initialize two variables to keep track of the sum of durations in each concert.\n    3. Iterate through the sorted list of songs and distribute them between the two concerts, adjusting the distribution to minimize the absolute difference in their durations.\n    4. Calculate the absolute difference between the two concert durations and return it as the result.\n\n# [edge case] \n    Edge case 1: a = 1, b = 1, c = 1\n    Expected output: 0\n    Explanation: Since all songs are of the same duration, we can distribute them evenly between the two concerts, resulting in a difference of 0 minutes.\n\n    Edge case 2: a = 0, b = 0, c = 3\n    Expected output: 3\n    Explanation: If there are only three-minute songs, the only way to distribute them is to put one song in each concert, resulting in a difference of 3 minutes.\n\n    Edge case 3: a = 10^9, b = 10^9, c = 10^9\n    Expected output: 0\n    Explanation: With a large number of songs of the same duration, we can distribute them evenly between the two concerts, resulting in a difference of 0 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach we described will work efficiently for these cases as well.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts to minimize the difference in their durations. This involves a combinatorial approach to find the optimal distribution. The solution should be efficient and handle large input sizes effectively. The algorithm should consider the distribution of songs across the two concerts to balance their durations as closely as possible.\nrequirement pool:\n- Implement an efficient algorithm to distribute songs into two concerts\n- Ensure the solution can handle large input sizes\n- Minimize the absolute difference in durations between the two concerts\n- Provide a simple and user-friendly interface\n- Optimize the algorithm for minimal computational overhead\nTo solve the problem of distributing songs into two concerts with minimal difference in durations, we will use a dynamic programming approach. This method will efficiently handle large input sizes and ensure minimal computational overhead. The algorithm will calculate all possible sums of durations for the two concerts and find the pair with the smallest absolute difference. We will use Python's built-in libraries and ensure the solution is robust and handles large input constraints.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': means to divide the songs into two groups such that each song is included in exactly one group.\n    'minimal difference': means to find the smallest possible difference between the total durations of the two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'as small as possible': means to minimize the difference between the two groups.\n\n# [code logic]\n    provide detailed logic to implement the code\n\n# [edge case] \n    Edge cases where some or all of a, b, or c are zero:\n    - a = 0, b = 3, c = 3: One concert will have all three-minute songs, and the other will be empty. The difference is 0.\n    - a = 1, b = 0, c = 2: One concert will have the one-minute song, and the other will have two three-minute songs. The difference is 1.\n    - a = 0, b = 0, c = 5: Both concerts will have only three-minute songs. The difference is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The dynamic programming approach inherently handles cases where some or all of a, b, or c are zero by considering them as part of the possible sums.\n\n# [code logic]\n    To implement the solution, we can use a dynamic programming approach to calculate all possible sums of durations for the two concerts and find the pair with the smallest absolute difference. Here's a high-level outline of the approach:\n\n    1. Calculate the total duration of all songs.\n    2. Use a set to store all possible sums of durations for the two concerts.\n    3. Iterate through the set to find the smallest absolute difference between any two sums.\n\n    Here's a Python function to illustrate this approach:\n\n    ```python\n    def min_difference(a, b, c):\n        total_duration = a * 1 + b * 2 + c * 3\n        possible_durations = set()\n        \n        # Calculate all possible sums of durations for the two concerts\n        for i in range(a + 1):\n            for j in range(b + 1):\n                for k in range(c + 1):\n                    duration = i * 1 + j * 2 + k * 3\n                    possible_durations.add(duration)\n        \n        # Find the smallest absolute difference between any two sums\n        min_diff = float('inf')\n        for duration in possible_durations:\n            complement = total_duration - duration\n            min_diff = min(min_diff, abs(duration - complement))\n        \n        return min_diff\n    ```\n\n    This function will return the minimal possible difference in minutes between the concerts durations.\n", "requirement analysis:\nThe problem requires finding the minimal absolute difference between the total durations of two concerts given the number of songs of different durations. The solution should be efficient and handle multiple test cases. The output should be the minimal difference for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal difference between the total durations of two concerts.\n- Handle multiple test cases efficiently.\n- Ensure the output is accurate and easy to understand.\n- Allow the user to input the number of test cases and the durations of the songs.\n- Provide clear and concise output for each test case.\nTo solve this problem, we will use a simple Python function that calculates the minimal difference between the total durations of two concerts given the number of songs of different durations. The function will iterate through all possible combinations of distributing the songs into two concerts and find the one with the smallest absolute difference in total duration.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing items or quantities into two or more groups or parts.\n    'smallest possible absolute difference': the goal is to minimize the difference between the total durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    No specific phrase showing quantity relationship.\n\n# [degree adverb] \n    No degree adverb.\n\n# [code logic]\n    To implement the solution, we need to consider all possible ways to distribute the songs into two concerts and calculate the absolute difference for each distribution. The minimal difference will be the smallest absolute difference found.\n\n# [edge case] \n    Edge case 1:\n    Input: [1, 1, 1]\n    Explanation: The optimal distribution is to put one song of each duration in each concert, resulting in a difference of 0.\n    Edge case 2:\n    Input: [2, 1, 3]\n    Explanation: The optimal distribution is to put two songs of 2 minutes and one song of 3 minutes in one concert, and the remaining songs in the other concert, resulting in a difference of 1.\n    Edge case 3:\n    Input: [5, 5, 5]\n    Explanation: The optimal distribution is to put five songs of each duration in each concert, resulting in a difference of 0.\n    Edge case 4:\n    Input: [1, 1, 2]\n    Explanation: The optimal distribution is to put one song of 1 minute and one song of 2 minutes in one concert, and the remaining songs in the other concert, resulting in a difference of 1.\n\n# [extra code for edge case]\n    No extra code is needed for handling the edge cases as the logic for finding the minimal difference is already included in the main code logic.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts with the smallest possible absolute difference in total duration. The solution should be efficient and handle multiple test cases. The input consists of a number of test cases followed by the number of songs of each duration. The output should be the minimal difference for each test case.\nrequirement pool:\n- Implement a function to calculate the minimal difference in concert durations.\n- Ensure the solution is optimized for large inputs.\n- Provide clear and accurate output for each test case.\n- Handle multiple test cases efficiently.\n- Optimize the algorithm for performance.\nWe will use a simple and efficient approach to solve the problem. The main idea is to distribute the songs into two concerts by trying different combinations and calculating the absolute difference in total duration for each combination. We will use a brute-force method to try all possible combinations of distributing the songs to achieve the minimal difference.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': The process of dividing items or quantities into two or more groups or parts.\n    Explanation: In this problem, we need to distribute the songs of different durations into two concerts such that the total duration of each concert is as close as possible. This involves finding the optimal way to allocate the songs to minimize the absolute difference in their total durations.\n\n# [phrase showing quantity relationship]\n    'smallest possible absolute difference': This phrase indicates that we need to find the minimum difference between the total durations of the two concerts.\n    Explanation: We need to distribute the songs in a way that minimizes the absolute difference in the total duration of the two concerts.\n\n# [degree adverb] \n    'minimal': This adverb indicates that we need to find the smallest or lowest possible value.\n    Explanation: We need to find the smallest possible difference in the total duration of the two concerts.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case, we need to consider the following steps:\n    1. Calculate the total duration of all songs.\n    2. Use a brute-force approach to try all possible combinations of distributing the songs into two concerts.\n    3. For each combination, calculate the total duration of each concert and then find the absolute difference between the two durations.\n    4. Keep track of the smallest absolute difference found.\n    5. Return the smallest absolute difference for each test case.\n\n# [edge case] \n    search([1, 1, 1]) = 0\n    Explanation: With three songs each of 1 minute, we can distribute them as [1, 1] and [1], resulting in a difference of 0.\n    search([2, 1, 3]) = 1\n    Explanation: The optimal distribution is [2, 3] and [1], resulting in a difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The brute-force approach inherently handles all possible distributions and finds the minimal difference.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The brute-force approach inherently handles all possible distributions and finds the minimal difference.\n", "requirement analysis:\nThe problem requires finding the minimal absolute difference between the total durations of two concerts given a set of songs with different durations. The solution should be efficient and handle multiple test cases.\nrequirement pool:\n- Implement a function to calculate the minimal difference in song distribution for concerts.\n- Ensure the solution can handle up to 1000 test cases.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm to handle large inputs within reasonable time limits.\n- Enhance user interface for better usability.\nTo solve this problem, we will use a simple Python function that calculates the minimal difference in song distribution for concerts. The approach involves sorting the song durations and then finding the closest sum to half of the total duration. This method ensures that we efficiently find the optimal distribution.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'distribution': the process of dividing items or quantities into parts or groups.\n    'smallest possible absolute difference': the closest possible difference between two groups.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To find the minimal difference, we need to:\n    1. Calculate the total duration of all songs.\n    2. Sort the song durations.\n    3. Iterate through possible combinations to find the pair of durations that minimizes the absolute difference.\n\n# [edge case] \n    search([1, 2, 3]) = 1\n    explanation: The total duration is 6, so each concert should ideally have a duration of 3. The closest we can get is 2 and 4, giving a difference of 1.\n    search([1, 2, 4]) = 1\n    explanation: Similar to the previous case, the total duration is 7, so each concert should ideally have a duration of 3.5. The closest we can get is 3 and 4, giving a difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to find the minimal difference.\n", "requirement analysis:\nThe problem requires finding the minimal possible difference in durations between two concerts, given a set of songs with different durations. The solution should be efficient and handle edge cases where some or all song types might be zero. The input consists of multiple test cases, and each case provides the number of one-minute, two-minute, and three-minute songs. The output should be the minimal possible difference in minutes between the durations of the two concerts.\nrequirement pool:\n- Implement an efficient algorithm to find the minimal difference in concert durations\n- Handle edge cases where some or all song types might be zero\n- Ensure the solution works for multiple test cases\n- Optimize the solution for large inputs\nTo solve this problem efficiently, we will use a dynamic programming approach to find the minimal possible difference in durations between two concerts. The key idea is to use a subset sum approach to find combinations of songs that can result in the smallest possible difference in concert durations. We will iterate through all possible combinations of one-minute, two-minute, and three-minute songs and calculate the differences. The smallest difference found will be our answer.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'subset sum': This is a common algorithmic problem where we need to find a subset of elements that add up to a given sum. Here, we need to find subsets of songs that add up to the closest possible total duration for two concerts.\n    Explanation: In this problem, we are given three types of songs with different durations and need to distribute them into two concerts such that the difference in their durations is minimized. This can be approached using a subset sum technique to explore all possible combinations of songs and find the optimal distribution.\n\n# [phrase showing quantity relationship]\n    'as many times as': This phrase indicates that the number of times a song appears in a concert should be at least equal to its duration.\n    Explanation: For example, if we have a one-minute song, it should appear at least once in one of the concerts. Similarly, for a two-minute song, it should appear at least twice, and for a three-minute song, it should appear at least three times.\n\n# [degree adverb] \n    'as small as possible': This phrase means that we need to find the smallest possible difference between the two concert durations.\n    Explanation: We need to minimize the absolute difference between the total durations of the two concerts.\n\n# [code logic]\n    To implement this efficiently, we can use a dynamic programming approach to explore all possible combinations of songs. We will iterate through all possible numbers of one-minute, two-minute, and three-minute songs that can be included in each concert and calculate the difference. The smallest difference found will be our answer.\n\n# [edge case] \n    Edge case 1: All songs are zero.\n    Input: a = 0, b = 0, c = 0\n    Expected output: 0\n    Explanation: If there are no songs, the difference is zero since both concerts will have a duration of zero.\n\n    Edge case 2: One type of song is zero.\n    Input: a = 3, b = 0, c = 0\n    Expected output: 3\n    Explanation: If there are only three one-minute songs, they will all go into one concert, and the other concert will have a duration of zero. The difference is 3.\n\n    Edge case 3: All songs are of the same type.\n    Input: a = 2, b = 0, c = 0\n    Expected output: 0\n    Explanation: If all songs are two-minute songs, they can be evenly distributed between the two concerts, resulting in no difference in duration.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic can handle these cases by considering the number of songs and their durations.\n"], "scores": [], "pass_results": [false, false, true, false, false, false, false, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 49, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "add_1_sentence_at_end", "parent_index": 54}
