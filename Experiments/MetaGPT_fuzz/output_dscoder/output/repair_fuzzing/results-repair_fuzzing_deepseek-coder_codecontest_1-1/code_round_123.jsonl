{"name": "1613_A. Long Comparison", "description": "Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.", "tags": ["implementation", "math"], "difficulty": 7, "id": 1613, "sample_io": [{"input": "5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n=\n<\n=\n<\n"]}], "test_list": [{"input": "1\n2000 0\n2 3\n", "output": ["=\n"]}, {"input": "1\n1 6\n1000000 0\n", "output": ["=\n"]}, {"input": "3\n1 3\n100 1\n2 3\n200 1\n6 3\n600 1\n", "output": ["=\n=\n=\n"]}, {"input": "1\n1201 0\n12 2\n", "output": [">\n"]}, {"input": "1\n50 2\n500 1\n", "output": ["=\n"]}, {"input": "1\n21 4\n210010 0\n", "output": ["<\n"]}, {"input": "1\n12 2\n1205 0\n", "output": ["<\n"]}, {"input": "1\n12 2\n1204 0\n", "output": ["<\n"]}, {"input": "1\n100000 1\n1000000 0\n", "output": ["=\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "1\n1000000 10\n1000000 10\n", "output": ["=\n"]}, {"input": "1\n1 5\n101 3\n", "output": ["<\n"]}, {"input": "1\n105 0\n1 2\n", "output": [">\n"]}, {"input": "1\n402 2\n4 4\n", "output": [">\n"]}, {"input": "1\n1011 2\n1023 2\n", "output": ["<\n"]}, {"input": "2\n4 0\n7 0\n5 0\n6 0\n", "output": ["<\n<\n"]}, {"input": "1\n12 2\n1201 0\n", "output": ["<\n"]}, {"input": "1\n12001 59\n12 62\n", "output": [">\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n=\n=\n=\n"]}, {"input": "1\n1 6\n10101 2\n", "output": ["<\n"]}, {"input": "1\n999999 0\n999999 0\n", "output": ["=\n"]}, {"input": "1\n999999 0\n1000000 0\n", "output": ["<\n"]}, {"input": "5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n=\n<\n=\n<\n"]}, {"input": "1\n4 4\n402 2\n", "output": ["<\n"]}, {"input": "1\n12 5\n1204 3\n", "output": ["<\n"]}, {"input": "1\n100000 1\n100 4\n", "output": ["=\n"]}, {"input": "1\n1562 0\n2 3\n", "output": ["<\n"]}, {"input": "3\n1 3\n100 1\n4 3\n200 1\n6 3\n600 1\n", "output": ["=\n>\n=\n"]}, {"input": "1\n21 4\n72620 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n7 0\n5 0\n1 0\n", "output": ["<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n362 1\n6 3\n600 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n=\n=\n"]}, {"input": "5\n2 1\n19 1\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": ["<\n=\n<\n=\n<\n"]}, {"input": "3\n1 3\n100 1\n4 3\n200 1\n5 3\n600 1\n", "output": ["=\n>\n<\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n7 0\n5 -1\n1 0\n", "output": ["<\n<\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n362 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n=\n"]}, {"input": "5\n2 1\n33 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": ["<\n=\n<\n=\n>\n"]}, {"input": "3\n1 3\n100 1\n4 3\n200 1\n5 3\n465 1\n", "output": ["=\n>\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": [">\n=\n<\n=\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 7\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n<\n=\n=\n=\n=\n<\n>\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n99 0\n1 0\n", "output": [">\n=\n>\n=\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n6 3\n300 1\n4 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n>\n=\n>\n>\n=\n"]}, {"input": "3\n1 3\n100 1\n8 0\n200 1\n5 0\n465 1\n", "output": ["=\n<\n<\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n6 3\n300 1\n5 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n>\n>\n>\n>\n=\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1100 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1010000 4\n10000 7\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n>\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "3\n1 3\n100 1\n2 3\n200 1\n11 3\n600 1\n", "output": ["=\n=\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1010000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n>\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n59 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n2 0\n5 0\n6 0\n", "output": [">\n<\n"]}, {"input": "5\n3 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n=\n<\n=\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 7\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 0\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 2\n362 1\n6 3\n600 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n<\n=\n=\n"]}, {"input": "5\n2 1\n19 1\n3 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": ["<\n<\n<\n=\n<\n"]}, {"input": "5\n2 1\n33 0\n10 2\n100 0\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": ["<\n>\n<\n=\n>\n"]}, {"input": "3\n1 3\n110 1\n4 3\n200 1\n5 3\n600 1\n", "output": ["<\n>\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000010 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 10\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n<\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n362 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n>\n>\n>\n=\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10001 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000010 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 6\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n<\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n362 1\n6 3\n316 1\n1 2\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n<\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 0\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": [">\n>\n<\n=\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n3 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1001000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 7\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n<\n<\n=\n<\n=\n=\n=\n<\n=\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 5\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n>\n=\n=\n>\n>\n=\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 1\n99 0\n1 0\n", "output": [">\n=\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 2\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n<\n<\n>\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 1\n1 0\n29 0\n1 0\n", "output": [">\n=\n>\n>\n>\n"]}, {"input": "3\n2 3\n100 1\n8 0\n200 1\n5 0\n465 1\n", "output": [">\n<\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000001 1\n1000011 1\n999999 1\n999998 1\n839388 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n>\n>\n"]}, {"input": "5\n2 1\n33 -1\n4 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n29 0\n2 0\n", "output": [">\n<\n>\n=\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 5\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1100 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n>\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1010000 4\n10000 2\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1010000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 0\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n>\n=\n=\n=\n<\n>\n>\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n59 1\n3 3\n300 1\n4 3\n400 1\n5 3\n200 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n2 0\n5 0\n6 -1\n", "output": [">\n>\n"]}, {"input": "5\n3 1\n19 0\n10 2\n101 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n<\n<\n=\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 7\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 8\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n>\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 0\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1010 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n>\n=\n=\n=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 14\n1000010 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 0\n1000000 4\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 10\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n<\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n362 1\n6 3\n316 1\n1 10\n1000000 8\n", "output": ["=\n=\n=\n>\n>\n>\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10001 6\n1000000 4\n1000 7\n1000000 3\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000010 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n<\n=\n<\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 6\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 2\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n<\n<\n=\n<\n=\n=\n=\n=\n=\n<\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n462 1\n4 3\n362 1\n6 3\n316 1\n1 2\n1000000 4\n", "output": ["=\n=\n=\n<\n>\n>\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n3 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n110 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n<\n=\n<\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 5\n200 1\n3 3\n300 1\n4 2\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n>\n=\n<\n>\n>\n=\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 2\n1999 0\n2 0\n1 0\n1 1\n99 0\n1 0\n", "output": [">\n<\n>\n<\n>\n"]}, {"input": "3\n2 3\n100 1\n8 3\n200 1\n5 -1\n465 1\n", "output": [">\n>\n<\n"]}, {"input": "23\n1 3\n100 0\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 2\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": [">\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n<\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n121 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000001 1\n1000011 1\n999999 1\n999998 1\n839388 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n>\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n>\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 1\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1100 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n<\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1010011 1\n999999 1\n999998 1\n1793536 1\n45690 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 2\n1101 7\n1010000 4\n10000 2\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n>\n>\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n1201 -1\n12 2\n", "output": ["<\n"]}, {"input": "1\n50 1\n500 1\n", "output": ["<\n"]}, {"input": "1\n12 2\n1205 1\n", "output": ["<\n"]}, {"input": "1\n5 2\n1204 0\n", "output": ["<\n"]}, {"input": "1\n100000 1\n1000000 -1\n", "output": [">\n"]}, {"input": "1\n1100000 10\n1000000 10\n", "output": [">\n"]}, {"input": "1\n2 5\n101 3\n", "output": [">\n"]}, {"input": "1\n105 -1\n1 2\n", "output": ["<\n"]}, {"input": "1\n402 0\n4 4\n", "output": ["<\n"]}, {"input": "1\n1011 2\n1023 3\n", "output": ["<\n"]}, {"input": "1\n12 2\n802 0\n", "output": [">\n"]}, {"input": "1\n12001 59\n12 2\n", "output": [">\n"]}, {"input": "1\n1 6\n11101 2\n", "output": ["<\n"]}, {"input": "1\n1603908 0\n999999 0\n", "output": [">\n"]}, {"input": "1\n999999 0\n1001000 0\n", "output": ["<\n"]}, {"input": "1\n4 3\n402 2\n", "output": ["<\n"]}, {"input": "1\n21 5\n1204 3\n", "output": [">\n"]}, {"input": "1\n100100 1\n100 4\n", "output": [">\n"]}, {"input": "5\n2 1\n33 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": ["<\n=\n<\n=\n<\n"]}, {"input": "1\n1562 -1\n2 3\n", "output": ["<\n"]}, {"input": "1\n1201 -1\n20 2\n", "output": ["<\n"]}, {"input": "1\n83 2\n500 1\n", "output": [">\n"]}, {"input": "1\n21 4\n114481 0\n", "output": [">\n"]}, {"input": "1\n2 2\n1205 1\n", "output": ["<\n"]}, {"input": "1\n5 4\n1204 0\n", "output": [">\n"]}, {"input": "1\n100100 1\n1000000 -1\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n1100000 19\n1000000 10\n", "output": [">\n"]}, {"input": "1\n2 5\n111 3\n", "output": [">\n"]}, {"input": "1\n105 -1\n2 2\n", "output": ["<\n"]}, {"input": "1\n402 0\n1 4\n", "output": ["<\n"]}, {"input": "1\n1111 2\n1023 3\n", "output": ["<\n"]}, {"input": "1\n12 2\n802 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n12 3\n", "output": [">\n"]}, {"input": "1\n1 6\n11100 2\n", "output": ["<\n"]}, {"input": "1\n1603908 0\n1801851 0\n", "output": ["<\n"]}, {"input": "1\n999999 0\n1001010 0\n", "output": ["<\n"]}, {"input": "1\n5 4\n402 2\n", "output": [">\n"]}, {"input": "1\n25 5\n1204 3\n", "output": [">\n"]}, {"input": "1\n100100 1\n110 4\n", "output": ["<\n"]}, {"input": "1\n1927 -1\n20 2\n", "output": ["<\n"]}, {"input": "1\n83 2\n952 1\n", "output": ["<\n"]}, {"input": "1\n21 4\n114481 -1\n", "output": [">\n"]}, {"input": "1\n2 2\n743 1\n", "output": ["<\n"]}, {"input": "1\n5 5\n1204 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000010 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 5\n111 5\n", "output": ["<\n"]}, {"input": "1\n402 0\n1 1\n", "output": [">\n"]}, {"input": "1\n1111 2\n1023 0\n", "output": [">\n"]}, {"input": "1\n12 2\n831 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n12 0\n", "output": [">\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n362 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n=\n"]}, {"input": "1\n1 1\n11100 2\n", "output": ["<\n"]}, {"input": "1\n1603908 -1\n1801851 0\n", "output": ["<\n"]}, {"input": "1\n362052 0\n1001010 0\n", "output": ["<\n"]}, {"input": "1\n25 4\n1204 3\n", "output": ["<\n"]}, {"input": "1\n100100 1\n010 4\n", "output": [">\n"]}, {"input": "3\n1 3\n100 1\n8 3\n200 1\n5 3\n465 1\n", "output": ["=\n>\n>\n"]}, {"input": "1\n1927 -1\n16 2\n", "output": ["<\n"]}, {"input": "1\n132 2\n952 1\n", "output": [">\n"]}, {"input": "1\n21 4\n177954 -1\n", "output": [">\n"]}, {"input": "1\n2 4\n743 1\n", "output": [">\n"]}, {"input": "1\n5 5\n1216 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 5\n011 5\n", "output": ["<\n"]}, {"input": "1\n468 0\n1 1\n", "output": [">\n"]}, {"input": "1\n1111 3\n1023 0\n", "output": [">\n"]}, {"input": "1\n7 2\n831 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n18 0\n", "output": [">\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n=\n"]}, {"input": "1\n1 1\n11100 0\n", "output": ["<\n"]}, {"input": "1\n2992743 -1\n1801851 0\n", "output": ["<\n"]}, {"input": "1\n362052 0\n1001011 0\n", "output": ["<\n"]}, {"input": "1\n25 4\n1990 3\n", "output": ["<\n"]}, {"input": "3\n1 3\n100 1\n8 3\n200 1\n5 0\n465 1\n", "output": ["=\n>\n<\n"]}, {"input": "1\n1927 -2\n16 2\n", "output": ["<\n"]}, {"input": "1\n132 2\n1561 1\n", "output": ["<\n"]}, {"input": "1\n2 4\n768 1\n", "output": [">\n"]}, {"input": "1\n5 9\n1216 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 5\n010 5\n", "output": ["<\n"]}, {"input": "1\n15 0\n1 1\n", "output": [">\n"]}, {"input": "1\n1111 3\n533 0\n", "output": [">\n"]}, {"input": "1\n7 2\n1076 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n11 0\n", "output": [">\n"]}, {"input": "1\n1 1\n11100 1\n", "output": ["<\n"]}, {"input": "1\n2992743 0\n1801851 0\n", "output": [">\n"]}, {"input": "1\n122308 0\n1001011 0\n", "output": ["<\n"]}, {"input": "1\n25 5\n1990 3\n", "output": [">\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n29 0\n1 0\n", "output": [">\n=\n>\n=\n>\n"]}, {"input": "1\n1927 -3\n16 2\n", "output": ["<\n"]}, {"input": "1\n132 2\n2693 1\n", "output": ["<\n"]}, {"input": "1\n2 4\n768 0\n", "output": [">\n"]}, {"input": "1\n5 14\n1216 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000001 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 2\n011 5\n", "output": ["<\n"]}, {"input": "1\n7 0\n1 1\n", "output": ["<\n"]}, {"input": "1\n1111 3\n950 0\n", "output": [">\n"]}, {"input": "1\n7 2\n1076 2\n", "output": ["<\n"]}, {"input": "1\n12001 59\n11 1\n", "output": [">\n"]}, {"input": "1\n1 0\n11100 1\n", "output": ["<\n"]}, {"input": "1\n2992743 1\n1801851 0\n", "output": [">\n"]}, {"input": "1\n25 4\n1990 0\n", "output": [">\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n29 0\n2 0\n", "output": [">\n=\n>\n=\n>\n"]}, {"input": "3\n1 3\n100 1\n8 0\n200 0\n5 0\n465 1\n", "output": ["=\n<\n<\n"]}, {"input": "1\n132 2\n73 1\n", "output": [">\n"]}, {"input": "1\n5 19\n1216 0\n", "output": [">\n"]}, {"input": "1\n2 1\n011 5\n", "output": ["<\n"]}, {"input": "1\n7 0\n1 2\n", "output": ["<\n"]}, {"input": "1\n1111 3\n1246 0\n", "output": [">\n"]}, {"input": "1\n12001 59\n11 2\n", "output": [">\n"]}, {"input": "1\n1 0\n11100 0\n", "output": ["<\n"]}, {"input": "1\n2992743 1\n28222 0\n", "output": [">\n"]}, {"input": "1\n34 4\n1990 0\n", "output": [">\n"]}, {"input": "3\n1 3\n100 1\n8 0\n200 0\n5 0\n465 2\n", "output": ["=\n<\n<\n"]}, {"input": "1\n132 1\n73 1\n", "output": [">\n"]}, {"input": "1\n5 19\n1216 1\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n7 0\n2 2\n", "output": ["<\n"]}, {"input": "1\n1111 3\n2222 0\n", "output": [">\n"]}, {"input": "1\n12001 59\n21 2\n", "output": [">\n"]}, {"input": "1\n1 0\n11000 1\n", "output": ["<\n"]}, {"input": "1\n2992743 1\n28222 1\n", "output": [">\n"]}, {"input": "1\n7 4\n1990 0\n", "output": [">\n"]}, {"input": "1\n229 1\n73 1\n", "output": [">\n"]}, {"input": "1\n2 19\n1216 1\n", "output": [">\n"]}], "task_id": "codecontest/113", "prompt": "Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him? Consider edge cases where both x and p could be extremely large, and ensure your solution is optimized for such scenarios.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.", "repair_prompt": ["Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him? Consider edge cases where both x and p could be extremely large, and ensure your solution is optimized for such scenarios.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.\nWrite a main() function and use input() function to read input from stdin", " Monocarp wrote down two numbers on a whiteboard, both of which are in a particular format: a positive integer x with p zeros appended to its end. Monocarp then asks you to compare these two numbers. Can you assist him in this task? Keep in mind that x and p could be extremely large, so ensure your solution is efficient for such large numbers.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.\nWrite a main() function and use input() function to read input from stdin", " Monocarp wrote two numbers on a whiteboard, each being a positive integer x with p zeros appended to its end. He then asked to compare these numbers, taking into account that x and p could be very large, and to ensure the solution is efficient for such cases.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\ndef compare_numbers(x1: int, p1: int, x2: int, p2: int) -> str:\n    # Strip the zeros from the end of both numbers\n    while x1 % 10 == 0 and p1 > 0:\n        x1 //= 10\n        p1 -= 1\n    while x2 % 10 == 0 and p2 > 0:\n        x2 //= 10\n        p2 -= 1\n    \n    # Compare the lengths of the stripped numbers\n    if p1 > p2:\n        return '>'\n    elif p1 < p2:\n        return '<'\n    else:\n        # If lengths are equal, compare the original numbers\n        if x1 > x2:\n            return '>'\n        elif x1 < x2:\n            return '<'\n        else:\n            return '='\n\n# Provide the Interface\nn = int(input())\nfor _ in range(n):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "from typing import List\n## main.py\n\ndef compare_numbers(x1: int, p1: int, x2: int, p2: int) -> str:\n    # Determine the number of digits in x1 and x2\n    digits_x1 = len(str(x1)) + p1\n    digits_x2 = len(str(x2)) + p2\n    \n    # Compare the number of digits\n    if digits_x1 < digits_x2:\n        return '<'\n    elif digits_x1 > digits_x2:\n        return '>'\n    else:\n        # If the number of digits is the same, compare the numbers directly\n        # Normalize the numbers by removing the trailing zeros\n        while x1 % 10 == 0 and p1 > 0:\n            x1 //= 10\n            p1 -= 1\n        while x2 % 10 == 0 and p2 > 0:\n            x2 //= 10\n            p2 -= 1\n        \n        if x1 < x2:\n            return '<'\n        elif x1 > x2:\n            return '>'\n        else:\n            return '='\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "from typing import List\n## main.py\n\ndef compare_numbers(x1: int, p1: int, x2: int, p2: int) -> str:\n    # Determine the number of digits in x1 and x2\n    digits_x1 = len(str(x1)) + p1\n    digits_x2 = len(str(x2)) + p2\n    \n    # Compare the number of digits\n    if digits_x1 < digits_x2:\n        return '<'\n    elif digits_x1 > digits_x2:\n        return '>'\n    else:\n        # If the number of digits is the same, strip the zeros and compare the numbers\n        zeros_x1 = len(str(x1)) + p1 - len(str(x1))\n        zeros_x2 = len(str(x2)) + p2 - len(str(x2))\n        \n        # Strip the zeros from the end of the numbers\n        stripped_x1 = str(x1) + '0' * p1\n        stripped_x2 = str(x2) + '0' * p2\n        \n        # Compare the stripped numbers\n        if stripped_x1 < stripped_x2:\n            return '<'\n        elif stripped_x1 > stripped_x2:\n            return '>'\n        else:\n            return '='\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef compare_numbers(x1: int, p1: int, x2: int, p2: int) -> str:\n    # Normalize the numbers by removing trailing zeros\n    while x1 % 10 == 0 and p1 > 0:\n        x1 //= 10\n        p1 -= 1\n    while x2 % 10 == 0 and p2 > 0:\n        x2 //= 10\n        p2 -= 1\n    \n    # Compare the number of digits after normalization\n    if p1 < p2:\n        return '<'\n    elif p1 > p2:\n        return '>'\n    else:\n        if x1 < x2:\n            return '<'\n        elif x1 > x2:\n            return '>'\n        else:\n            return '='\n\n# Read the number of test cases\nn = int(input().strip())\n\n# Process each test case\nfor _ in range(n):\n    x1, p1 = map(int, input().strip().split())\n    x2, p2 = map(int, input().strip().split())\n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "from typing import List\n## main.py\n\ndef compare_numbers(x1: int, p1: int, x2: int, p2: int) -> str:\n    # Determine the number of digits in x1 and x2\n    digits_x1 = len(str(x1))\n    digits_x2 = len(str(x2))\n    \n    # Adjust the number of zeros to be appended to the smaller number of digits\n    min_digits = min(digits_x1 + p1, digits_x2 + p2)\n    \n    # Strip the zeros from the end of both numbers\n    while x1 % 10 == 0 and p1 > 0:\n        x1 //= 10\n        p1 -= 1\n    while x2 % 10 == 0 and p2 > 0:\n        x2 //= 10\n        p2 -= 1\n    \n    # Compare the remaining integers\n    if x1 < x2:\n        return '<'\n    elif x1 > x2:\n        return '>'\n    else:\n        return '='\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "from typing import List\n## main.py\n\ndef compare_numbers(x1: int, p1: int, x2: int, p2: int) -> str:\n    # Determine the number of digits in each number before appending zeros\n    len_x1 = len(str(x1))\n    len_x2 = len(str(x2))\n    \n    # Determine the total number of digits after appending zeros\n    total_digits_x1 = len_x1 + p1\n    total_digits_x2 = len_x2 + p2\n    \n    # Compare the total number of digits\n    if total_digits_x1 > total_digits_x2:\n        return '>'\n    elif total_digits_x1 < total_digits_x2:\n        return '<'\n    else:\n        # If the total number of digits is the same, compare the original numbers\n        if x1 > x2:\n            return '>'\n        elif x1 < x2:\n            return '<'\n        else:\n            return '='\n\n# Read the number of test cases\nn = int(input())\n\n# Loop through each test case\nfor _ in range(n):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "from typing import List\n## main.py\n\ndef compare_large_numbers(x1: int, p1: int, x2: int, p2: int) -> str:\n    # Determine the number of trailing zeros in each number\n    while x1 % 10 == 0 and x1 != 0:\n        x1 //= 10\n        p1 += 1\n    while x2 % 10 == 0 and x2 != 0:\n        x2 //= 10\n        p2 += 1\n    \n    # Compare the numbers after stripping trailing zeros\n    if x1 < x2:\n        return '<'\n    elif x1 > x2:\n        return '>'\n    else:\n        # If the numbers are equal after stripping trailing zeros, compare the number of trailing zeros\n        if p1 < p2:\n            return '<'\n        elif p1 > p2:\n            return '>'\n        else:\n            return '='\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    result = compare_large_numbers(x1, p1, x2, p2)\n    print(result)\n", "from typing import List\n## main.py\n\ndef compare_numbers(x1: int, p1: int, x2: int, p2: int) -> str:\n    # Remove trailing zeros from x1 and x2\n    str_x1 = str(x1)\n    str_x2 = str(x2)\n    \n    # Count the number of trailing zeros in x1 and x2\n    trailing_zeros_x1 = 0\n    trailing_zeros_x2 = 0\n    \n    while str_x1[-1] == '0':\n        str_x1 = str_x1[:-1]\n        trailing_zeros_x1 += 1\n    \n    while str_x2[-1] == '0':\n        str_x2 = str_x2[:-1]\n        trailing_zeros_x2 += 1\n    \n    # Compare the number of trailing zeros\n    if trailing_zeros_x1 > trailing_zeros_x2:\n        return '>'\n    elif trailing_zeros_x1 < trailing_zeros_x2:\n        return '<'\n    else:\n        # If the number of trailing zeros is the same, compare the numbers without trailing zeros\n        len_x1 = len(str_x1)\n        len_x2 = len(str_x2)\n        \n        if len_x1 > len_x2:\n            return '>'\n        elif len_x1 < len_x2:\n            return '<'\n        else:\n            return '='\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "from typing import List\n## main.py\n\ndef compare_numbers(x1: int, p1: int, x2: int, p2: int) -> str:\n    # Strip the zeros from the end of x1 and x2\n    while x1 % 10 == 0 and p1 > 0:\n        x1 //= 10\n        p1 -= 1\n    while x2 % 10 == 0 and p2 > 0:\n        x2 //= 10\n        p2 -= 1\n    \n    # Compare the lengths of the remaining numbers\n    if p1 > p2:\n        return '>'\n    elif p1 < p2:\n        return '<'\n    else:\n        if x1 > x2:\n            return '>'\n        elif x1 < x2:\n            return '<'\n        else:\n            return '='\n\n# Read the number of test cases\nt = int(input())\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n", "from typing import List\n## main.py\n\ndef compare_numbers(x1: int, p1: int, x2: int, p2: int) -> str:\n    # Determine the number of digits in x1 and x2\n    digits_x1 = len(str(x1)) + p1\n    digits_x2 = len(str(x2)) + p2\n    \n    # Compare the number of digits\n    if digits_x1 < digits_x2:\n        return '<'\n    elif digits_x1 > digits_x2:\n        return '>'\n    else:\n        # Remove the appended zeros from x1 and x2\n        str_x1 = str(x1)\n        str_x2 = str(x2)\n        \n        # Find the number of zeros appended to x1 and x2\n        zeros_x1 = p1 - (len(str_x1) - len(str(x1)))\n        zeros_x2 = p2 - (len(str_x2) - len(str(x2)))\n        \n        # Compare the numbers without the appended zeros\n        if zeros_x1 < zeros_x2:\n            return '<'\n        elif zeros_x1 > zeros_x2:\n            return '>'\n        else:\n            # If both numbers have the same number of zeros appended, compare the original numbers\n            if x1 < x2:\n                return '<'\n            elif x1 > x2:\n                return '>'\n            else:\n                return '='\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    x1, p1 = map(int, input().split())\n    x2, p2 = map(int, input().split())\n    result = compare_numbers(x1, p1, x2, p2)\n    print(result)\n"], "plans": ["requirement analysis:\nThe requirements specify the need to compare two numbers, where each number is a positive integer with a specific number of zeros appended. The challenge lies in handling large numbers efficiently, especially when the number of zeros appended is also large. The solution must be able to handle up to 10^4 test cases, each with numbers up to 10^6 in value and with up to 10^6 zeros appended.\nrequirement pool:\n- Implement a function to compare two numbers with appended zeros.\n- Optimize the solution for large inputs to ensure performance.\n- Ensure the solution can handle up to 10^4 test cases.\n- Provide clear and accurate output for each test case.\n- Design a user-friendly interface for input and output.\nTo compare two large numbers with appended zeros efficiently, we can leverage Python's built-in capabilities to handle large integers and string manipulation. The approach involves stripping the zeros from the end of both numbers, comparing their lengths to determine their relative sizes, and handling edge cases where the lengths are equal but the numbers themselves are not.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'large integers': means that the numbers can be very large, up to 10^6 in value.\n    'appended zeros': means that the numbers are modified by adding zeros at the end.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Strip the zeros from the end of both numbers.\n    - Compare the lengths of the stripped numbers.\n    - If lengths are equal, compare the original numbers.\n\n# [edge case] \n    Edge case 1:\n    x_1 = 100, p_1 = 2\n    x_2 = 10, p_2 = 3\n    Expected output: '>'\n    Explanation: After stripping the zeros, the first number becomes 1 and the second number becomes 1. Since 1 is greater than 1, the first number is greater.\n\n    Edge case 2:\n    x_1 = 1000, p_1 = 0\n    x_2 = 1000, p_2 = 1\n    Expected output: '<'\n    Explanation: After stripping the zeros, both numbers are 1000. However, the first number has no zeros appended, while the second number has one zero appended. Therefore, the second number is greater.\n\n    Edge case 3:\n    x_1 = 1, p_1 = 1000000\n    x_2 = 1, p_2 = 1000000\n    Expected output: '='\n    Explanation: After stripping the zeros, both numbers are 1. Since both numbers are identical after stripping the zeros, the comparison result is equal.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle the edge cases.\n", "requirement analysis:\nThe requirement involves comparing two numbers, where each number is a positive integer with a specific number of zeros appended to it. The challenge lies in handling large numbers efficiently, especially when the number of zeros appended can be large. The solution must be optimized to handle edge cases and ensure accurate comparisons.\nrequirement pool:\n- Implement a function to compare two numbers with zeros appended to them\n- Ensure the solution is optimized for large numbers and large counts of appended zeros\n- Provide clear and accurate output for each test case\n- Handle edge cases where numbers and zeros are extremely large\nTo efficiently compare two large numbers with zeros appended to them, we will use Python's built-in capabilities to handle large integers and string manipulation. The approach involves stripping the zeros from the end of the numbers and comparing the remaining parts directly. This method ensures that we can handle large numbers and zeros efficiently without running into performance issues.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'large integers': means that the numbers can be very large, up to 10^6, and need to be handled efficiently.\n    'zeros appended': means that the numbers have zeros added to the end of the integer part.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests stripping the zeros from the end of the numbers and comparing the remaining parts directly. This approach ensures that we can handle large numbers and zeros efficiently without running into performance issues.\n\n# [edge case] \n    Edge case 1:\n    x_1 = 1000, p_1 = 3\n    x_2 = 2000, p_2 = 2\n    Explanation:\n    After stripping the zeros, the numbers are 1 and 2, respectively. Since 1 is less than 2, the output is '<'.\n\n    Edge case 2:\n    x_1 = 1000000, p_1 = 0\n    x_2 = 2000000, p_2 = 0\n    Explanation:\n    Both numbers are 1000000 and 2000000, respectively, after stripping the zeros. Since they are equal, the output is '='.\n\n    Edge case 3:\n    x_1 = 1, p_1 = 6\n    x_2 = 2, p_2 = 5\n    Explanation:\n    After stripping the zeros, the numbers are 1 and 2, respectively. Since 1 is less than 2, the output is '<'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The given logic is sufficient to compare the numbers after stripping the zeros.\n", "requirement analysis:\nThe requirement involves comparing two numbers, where each number is represented by an integer x with a certain number of zeros appended to it. The comparison should be done efficiently, especially considering the large possible values for x and p. The solution should handle multiple test cases and provide the correct comparison result for each.\nrequirement pool:\n- Implement a function to compare two numbers based on the given format\n- Optimize the solution for large values of x and p\n- Ensure the solution can handle multiple test cases efficiently\n- Provide clear and accurate output for each test case\n- Test the solution with various edge cases to ensure robustness\nTo efficiently compare two large numbers with zeros appended to them, we will use Python's built-in capabilities to handle large integers and string manipulation. The approach involves stripping the zeros from the end of the numbers and comparing the remaining parts directly. This method ensures that we can handle large values of x and p without performance issues.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'large integers': means that the numbers x can be very large, up to 10^6, and we need to handle them efficiently.\n    'string manipulation': means we will use Python's string capabilities to strip zeros from the end of the numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan involves stripping the zeros from the end of the numbers and comparing the remaining parts directly. This method ensures that we can handle large values of x and p without performance issues.\n\n# [edge case] \n    Edge case 1:\n    x_1 = 1000, p_1 = 2\n    x_2 = 10, p_2 = 3\n    Explanation:\n    After stripping the zeros, the numbers become 1 and 1000000 respectively. Clearly, 1 < 1000000, so the output is '<'.\n\n    Edge case 2:\n    x_1 = 1000000, p_1 = 0\n    x_2 = 1000000, p_2 = 0\n    Explanation:\n    Both numbers are equal after stripping the zeros, so the output is '='.\n\n    Edge case 3:\n    x_1 = 1, p_1 = 1000000\n    x_2 = 1, p_2 = 1000000\n    Explanation:\n    Both numbers are equal after stripping the zeros, so the output is '='.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle all cases efficiently.\n", "requirement analysis:\nThe requirements specify the need to compare two numbers, where each number is represented by an integer x with a certain number of zeros appended to it. The comparison should be efficient, especially considering the potential size of x and p. The solution should handle multiple test cases, which implies a loop to process each case individually.\nrequirement pool:\n- Implement a function to compare two numbers based on the given format\n- Ensure the function can handle large numbers efficiently\n- Provide clear output for each test case\n- Optimize the solution for a large number of test cases\n- Include user-friendly error handling and feedback\nTo efficiently compare two large numbers with zeros appended to them, we will use Python's built-in capabilities to handle large integers and string manipulation. The approach involves stripping the zeros from the end of the numbers and comparing the remaining parts directly. This method ensures that we handle large numbers without losing precision.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'large integers': means the numbers can be very large, up to 10^6, and need to be handled efficiently.\n    'zeros appended': means the numbers are modified by appending zeros to a base number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan involves stripping the zeros from the end of the numbers and comparing the remaining parts directly. This method ensures that we handle large numbers without losing precision.\n\n# [edge case] \n    Edge case 1:\n    x_1 = 100, p_1 = 2\n    x_2 = 10, p_2 = 3\n    expected output: '>'\n    Explanation: After stripping the zeros, the first number becomes 1 and the second number becomes 1. Since 1 is greater than 1, the first number is greater.\n\n    Edge case 2:\n    x_1 = 1, p_1 = 0\n    x_2 = 1, p_2 = 0\n    expected output: '='\n    Explanation: Both numbers are the same after stripping the zeros.\n\n    Edge case 3:\n    x_1 = 1, p_1 = 1\n    x_2 = 10, p_2 = 0\n    expected output: '<'\n    Explanation: After stripping the zeros, the first number becomes 0.1 and the second number becomes 10. Since 0.1 is less than 10, the first number is smaller.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle the comparison efficiently.\n", "requirement analysis:\nThe primary requirement is to compare two large numbers, where each number has a certain number of zeros appended to it. The solution must be efficient and handle large inputs without crashing. The output should be clear and easy to understand, providing the result of the comparison in a straightforward manner.\nrequirement pool:\n- Implement a function to compare two numbers with zeros appended to them efficiently.\n- Ensure the solution can handle large inputs within reasonable time limits.\n- Provide clear and concise output for each test case.\n- Implement error handling for unexpected inputs.\n- Optimize the solution for performance and scalability.\nTo efficiently compare two large numbers with zeros appended to them, we will use Python's built-in capabilities to handle large integers. The approach involves stripping the zeros from the end of both numbers and then comparing the remaining integers directly. This method ensures that we can handle large inputs without running into performance issues.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'large integers': means that the numbers can be very large, up to 10^6, and we need to handle them efficiently.\n    'zeros appended': means that the numbers are in the form of x with p zeros appended to its end.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan suggests stripping the zeros from the end of both numbers and then comparing the remaining integers directly. This is efficient for large numbers.\n\n# [edge case] \n    Edge case 1:\n    x_1 = 100, p_1 = 2\n    x_2 = 10, p_2 = 3\n    expected output: '>'\n    Explanation: After stripping the zeros, we have 1 < 10, so the first number is greater.\n\n    Edge case 2:\n    x_1 = 1, p_1 = 0\n    x_2 = 10, p_2 = 1\n    expected output: '<'\n    Explanation: After stripping the zeros, we have 1 < 10, so the first number is smaller.\n\n    Edge case 3:\n    x_1 = 10, p_1 = 2\n    x_2 = 10, p_2 = 2\n    expected output: '='\n    Explanation: After stripping the zeros, we have 1 < 1, so the numbers are equal.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic in the plan is sufficient to compare the numbers efficiently.\n", "requirement analysis:\nThe requirements specify the need to compare two large numbers, where each number has a base integer x and a number of zeros p appended to it. The solution must handle a large number of test cases efficiently, ensuring that the comparison logic is robust and can handle edge cases. The output should clearly indicate whether the first number is smaller, greater, or equal to the second number.\nrequirement pool:\n- Implement a function to compare two numbers with zeros appended to them\n- Ensure the solution can handle a large number of test cases efficiently\n- Provide clear and concise output for the comparison results\n- Optimize the algorithm for performance, especially for large inputs\n- Ensure the solution is user-friendly and easy to understand\nTo efficiently compare two large numbers with zeros appended to them, we will use Python due to its robust standard library and ability to handle large integers. The approach involves parsing the input, appending zeros to the numbers, and then comparing them. We will optimize the algorithm to handle large inputs by leveraging Python's built-in support for large integers.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'large integers': means that the numbers can be very large, up to 10^6, and need to be handled efficiently.\n    'zero appending': means adding zeros to the end of a number.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n\n# [edge case] \n    Edge case 1: Comparing two numbers with the same number of zeros appended.\n    x_1 = 123, p_1 = 2\n    x_2 = 45, p_2 = 3\n    Explanation: Both numbers have the same number of zeros appended (2 and 3), so we compare the original numbers. 123 < 45, so the output is '<'.\n    Edge case 2: Comparing two numbers where the first number has more zeros appended.\n    x_1 = 123, p_1 = 3\n    x_2 = 45, p_2 = 2\n    Explanation: The first number has more zeros appended (3 vs 2), so it is greater. The output is '>'.\n    Edge case 3: Comparing two numbers where the first number has fewer zeros appended.\n    x_1 = 123, p_1 = 2\n    x_2 = 45, p_2 = 3\n    Explanation: The first number has fewer zeros appended (2 vs 3), so it is smaller. The output is '<'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The comparison logic can be implemented directly within the loop for each testcase.\n", "requirement analysis:\nThe requirement involves comparing two large numbers where each number has a certain number of trailing zeros. The solution must be efficient and handle large inputs within reasonable time and space constraints. The output should clearly indicate which number is larger or if they are equal.\nrequirement pool:\n- Implement a function to compare two large numbers with trailing zeros.\n- Ensure the function can handle up to 10^4 test cases.\n- Optimize the function to handle large numbers efficiently.\n- Provide clear and concise output for each test case.\n- Test the function with various edge cases and large inputs.\nTo efficiently compare two large numbers with trailing zeros, we will leverage Python's built-in capabilities to handle large integers and string manipulation. The approach involves stripping the trailing zeros from both numbers, comparing the remaining numbers, and handling edge cases where the number of trailing zeros is significant.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'large integers': means that the numbers can be very large, up to 10^6 digits.\n    'trailing zeros': means that zeros appended to the end of the numbers.\n\n# [phrase showing quantity relationship]\n    'p zeros appended': means that we need to consider the number of trailing zeros in the comparison.\n\n# [degree adverb] \n    'very large': means that the numbers can be extremely large, requiring efficient handling.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - Strip trailing zeros from both numbers.\n    - Compare the remaining numbers.\n    - If the remaining numbers are equal, compare the number of trailing zeros.\n\n# [edge case] \n    Edge case 1:\n    x_1 = 10, p_1 = 1\n    x_2 = 1, p_2 = 2\n    Expected output: '>'\n    Explanation: After stripping trailing zeros, we have 1 and 1. Since 1 is equal to 1, we compare the number of trailing zeros, and since p_1 (1) is greater than p_2 (2), the first number is greater.\n\n    Edge case 2:\n    x_1 = 1, p_1 = 0\n    x_2 = 10, p_2 = 1\n    Expected output: '<'\n    Explanation: After stripping trailing zeros, we have 1 and 10. Since 1 is less than 10, the first number is smaller.\n\n    Edge case 3:\n    x_1 = 100, p_1 = 0\n    x_2 = 100, p_2 = 0\n    Expected output: '='\n    Explanation: After stripping trailing zeros, both numbers are 100, and the number of trailing zeros is also equal.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle the comparison efficiently.\n", "requirement analysis:\nThe requirements specify the need to compare two large numbers, each with a certain number of zeros appended. The solution must be efficient and handle large inputs within reasonable time limits. The output should clearly indicate which number is larger, smaller, or if they are equal.\nrequirement pool:\n- Implement a function to compare two numbers with zeros appended efficiently.\n- Ensure the solution can handle large inputs within the given constraints.\n- Provide clear and easy-to-understand output for the comparison results.\n- Optimize the code for performance to handle large numbers and zeros.\n- Include user-friendly input and output formats for ease of use.\nTo efficiently compare two large numbers with zeros appended, we will use Python's built-in capabilities to handle large integers and string manipulation. The approach involves stripping the zeros from the end of both numbers and then comparing the remaining numbers directly. This method ensures that we handle large inputs effectively without running into performance issues.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'large integers': means that the numbers can be very large, up to 10^6 in value.\n    'zeros appended': means that the numbers have a certain number of zeros appended to their end.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (1) Read the number of test cases.\n    (2) For each test case:\n        (a) Read the two integers x_1, p_1 and x_2, p_2.\n        (b) Remove trailing zeros from x_1 and x_2 by converting them to strings and using string manipulation.\n        (c) Compare the lengths of the strings after removing trailing zeros to determine the relationship between the numbers.\n        (d) If the lengths are equal, compare the numbers directly.\n        (e) Output the result based on the comparison.\n\n# [edge case] \n    Edge case 1:\n    Input: 1 0\n           1 0\n    Output: =\n    Explanation: Both numbers are 1, even after removing trailing zeros.\n\n    Edge case 2:\n    Input: 10 2\n           1 0\n    Output: >\n    Explanation: After removing trailing zeros, 10 > 1.\n\n    Edge case 3:\n    Input: 1999 0\n           2 3\n    Output: <\n    Explanation: After removing trailing zeros, 1999 < 2000 (2 with 3 trailing zeros).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle all cases, including those with trailing zeros.\n", "requirement analysis:\nThe requirements specify the need to handle multiple test cases efficiently, with each test case involving two large numbers where one number has zeros appended to it. The solution must be able to compare these numbers accurately and output the result in a timely manner. The input size can be large, up to 10^4 test cases, each with numbers up to 10^6 in value, and each number can have up to 10^6 zeros appended.\nrequirement pool:\n- Implement a function to compare two numbers with zeros appended efficiently.\n- Ensure the solution can handle up to 10^4 test cases.\n- Optimize the algorithm to handle large numbers and zeros efficiently.\n- Provide clear and concise output for each test case.\n- Test the solution with various large inputs to ensure reliability.\nTo efficiently compare two large numbers with zeros appended, we will use Python's built-in capabilities to handle large integers and string manipulation. The approach involves stripping the zeros from the end of the numbers and then comparing the remaining numbers directly. This method ensures that we handle large inputs effectively without running into performance issues.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'large integers': means that the numbers can be very large, up to 10^6 digits.\n    'zeros appended': means that zeros are added to the end of the numbers.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    - For each testcase:\n        1. Strip the zeros from the end of x_1 and x_2.\n        2. Compare the lengths of the remaining numbers.\n        3. If lengths are equal, compare the numbers directly.\n        4. Output the result based on the comparison.\n\n# [edge case] \n    Edge case 1:\n    x_1 = 10, p_1 = 1\n    x_2 = 1, p_2 = 2\n    Explanation:\n    After stripping the zeros, x_1 becomes 1 and x_2 becomes 1. They are equal.\n    Edge case 2:\n    x_1 = 1, p_1 = 1000000\n    x_2 = 1, p_2 = 999999\n    Explanation:\n    After stripping the zeros, x_1 becomes 1 and x_2 becomes 1 with 999999 zeros appended. x_1 is smaller because the number of zeros does not change the value of the number.\n    Edge case 3:\n    x_1 = 100, p_1 = 0\n    x_2 = 10, p_2 = 1\n    Explanation:\n    After stripping the zeros, x_1 becomes 100 and x_2 becomes 10. x_1 is greater because 100 is larger than 10.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to handle all cases, including those with large numbers and zeros.\n", "requirement analysis:\nThe requirements specify the need to compare two numbers, where each number is a positive integer with a specific number of zeros appended to it. The comparison should be accurate and efficient, especially for large numbers. The solution should handle up to 10^4 test cases, with each number being up to 10^6 in value and the number of zeros appended (p) also up to 10^6.\nrequirement pool:\n- Implement a function to compare two numbers with appended zeros.\n- Optimize the solution for large numbers to ensure performance.\n- Handle up to 10^4 test cases efficiently.\n- Ensure the solution is user-friendly and provides clear output.\n- Test the solution with large numbers up to 10^6.\nTo implement the solution for comparing two numbers with appended zeros efficiently, we will use Python due to its strong support for handling large integers and its extensive standard library. The approach involves parsing the input, manipulating the numbers to remove the appended zeros, and then comparing the resulting numbers. We will optimize the solution to handle large values of x and p by leveraging Python's built-in capabilities for large integers.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'large integers': means that the numbers involved can be very large, potentially exceeding the standard integer size in many programming languages.\n    Explanation: In this problem, both x and p can be as large as 10^6, requiring a solution that can handle very large numbers efficiently.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each testcase:\n    1. Read the input values for x_1, p_1, x_2, and p_2.\n    2. Determine the number of digits in x_1 and x_2.\n    3. Remove the appended zeros from x_1 and x_2 by converting them to strings, removing the zeros, and converting back to integers.\n    4. Compare the lengths of the resulting numbers to determine their relative sizes.\n    5. If the lengths are equal, compare the original numbers directly.\n    6. Output the result based on the comparison.\n\n# [edge case] \n    Edge case 1: Comparing two numbers with the same value of x but different p.\n    search([10, 2], [10, 3]) = '<'\n    Explanation: Both numbers are 10 followed by 2 and 3 zeros respectively. The number with more zeros (3) is smaller.\n\n    Edge case 2: Comparing two numbers with the same p but different x.\n    search([1, 3], [10, 3]) = '<'\n    Explanation: Both numbers are 1 followed by 3 zeros. The number 10 is greater than 1.\n\n    Edge case 3: Comparing two numbers with both x and p being extremely large.\n    search([10^6, 10^6], [10^6, 10^6]) = '='\n    Explanation: Both numbers are 10^6 followed by 10^6 zeros. They are equal in value despite the large appended zeros.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic already considers the possibility of large values for x and p.\n"], "scores": [], "pass_results": [false, true, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 123, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.", "mutate_method": "add_1_sentence_at_end", "parent_index": 14}
