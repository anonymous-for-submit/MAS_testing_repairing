{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days? Assume n is a positive integer.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days? Assume n is a positive integer.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\nWrite a main() function and use input() function to read input from stdin", " Petya has received a fascinating flower. Due to his busy schedule, Petya often neglects to water it. You are provided with a series of n days based on Petya's daily activities. Your task is to assess the final state of the flower after these days.\n\nThe growth pattern of the flower is as follows: \n\n  * If the flower goes un-watered for two consecutive days, it will wither away. \n  * If the flower is watered on the i-th day, it will increase in height by 1 centimeter. \n  * If the flower\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\nWrite a main() function and use input() function to read input from stdin", " Petya has got an interesting flower, and you need to determine its growth over n days given the watering conditions. The flower grows by 1 cm if watered on the i-th day, by 5 cm if watered on both the i-th and (i-1)-th days, and does not grow if not watered. It dies if not watered for two consecutive days. Initially, the flower is 1 cm tall.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(days: int, watering_days: List[int]) -> int:\n    \"\"\"\n    Calculate the final height of the flower based on the given watering days.\n    \n    Args:\n        days (int): The number of days.\n        watering_days (List[int]): A list of integers where 1 indicates the flower was watered on that day, and 0 indicates it was not.\n        \n    Returns:\n        int: The final height of the flower after the given days. If the flower dies, returns -1.\n    \"\"\"\n    # Initialize the flower's height to 1 centimeter\n    height = 1\n    \n    # Iterate through each day from 1 to n\n    for i in range(1, days):\n        # Check if the flower was watered on the current day and the previous day\n        if watering_days[i] == 1 and watering_days[i - 1] == 1:\n            height += 5\n        elif watering_days[i] == 1:\n            height += 1\n        # Check if the flower was not watered on the current day and the previous day\n        elif watering_days[i - 1] == 0:\n            return -1\n    \n    return height\n\n# Provide the Interface\nn = int(input())\nfor _ in range(n):\n    days = int(input())\n    watering_days = list(map(int, input().split()))\n    result = calculate_flower_height(days, watering_days)\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_days: List[int]) -> int:\n    if n == 1 and watering_days[0] == 0:\n        return -1\n    \n    height = 1\n    previous_watered = -1\n    \n    for i in range(n):\n        if watering_days[i] == 0:\n            if i - previous_watered == 2:\n                return -1\n        else:\n            if i - previous_watered == 1:\n                height += 5\n            else:\n                height += 1\n            previous_watered = i\n    \n    return height\n\n# Interface\nn = int(input())\nwatering_days = list(map(int, input().split()))\nresult = calculate_flower_height(n, watering_days)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(days: int, watering_schedule: list[int]) -> int:\n    if days == 1 and watering_schedule[0] == 0:\n        return -1\n    \n    height = 1\n    for i in range(1, days):\n        if watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n            height += 5\n        elif watering_schedule[i] == 1:\n            height += 1\n        else:\n            height = max(height - 1, 0)\n        \n        if height <= 0:\n            return -1\n    \n    return height\n\n# Interface\nn = int(input())\nfor _ in range(n):\n    days = int(input())\n    watering_schedule = list(map(int, input().split()))\n    result = calculate_flower_height(days, watering_schedule)\n    print(result)\n", "from typing import List\nfrom typing import List\n\ndef calculate_flower_height(days: List[int]) -> int:\n    height = 0\n    withering = False\n    \n    for i in range(len(days)):\n        if days[i] == 1:\n            height += 1\n            withering = False  # Reset withering flag if watered\n        else:\n            if withering:\n                return -1  # If flower is withering, return -1\n            if i > 0 and days[i-1] == 0:\n                withering = True  # Set withering flag if not watered for two consecutive days\n    \n    return height\n\n# Read input\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    result = calculate_flower_height(days)\n    print(result)\n", "from typing import List\n## main.py\n\ndef simulate_flower_growth(n: int, watering_days: list[int]) -> int:\n    \"\"\"\n    Simulates the growth of a flower based on user input.\n\n    Args:\n        n (int): The number of days.\n        watering_days (list[int]): A list of integers where 1 indicates the flower was watered on that day, and 0 indicates it was not.\n\n    Returns:\n        int: The final height of the flower, or -1 if it has wilted.\n    \"\"\"\n    height = 0\n    previous_watered = False\n\n    for i in range(n):\n        if watering_days[i] == 1:\n            height += 1\n            previous_watered = True\n        else:\n            if previous_watered:\n                previous_watered = False\n            else:\n                previous_watered = True\n                height = -1\n                break\n\n    return height\n\n# Interface\nn = int(input())\nfor _ in range(n):\n    days = int(input())\n    watering_days = list(map(int, input().split()))\n    result = simulate_flower_growth(days, watering_days)\n    print(result)\n", "from typing import List\nfrom typing import List\n\ndef calculate_flower_height(watering_schedule: List[int]) -> int:\n    height = 0\n    wither = False\n    \n    for i in range(len(watering_schedule)):\n        if watering_schedule[i] == 1:\n            height += 1\n            wither = False\n        else:\n            if wither:\n                return -1\n            wither = True\n    \n    return height\n\n# Interface\nn = int(input())\nfor _ in range(n):\n    days = int(input())\n    schedule = list(map(int, input().split()))\n    result = calculate_flower_height(schedule)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_schedule: list) -> int:\n    # Initialize the flower's height to 1 cm\n    height = 1\n    # Initialize the previous day's watering status\n    previous_watered = False\n    \n    for i in range(n):\n        # Check if the flower is watered today\n        is_watered_today = watering_schedule[i] == 1\n        \n        if is_watered_today:\n            # If watered today, update the previous day's watering status\n            previous_watered = True\n            # Update the flower's height based on the watering conditions\n            if i > 0 and watering_schedule[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n        else:\n            # If not watered today, check if it was watered yesterday\n            if not previous_watered:\n                # If not watered for two consecutive days, the flower dies\n                return -1\n            # Reset the previous day's watering status\n            previous_watered = False\n    \n    return height\n\n# Provide the Interface\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\nresult = calculate_flower_height(n, watering_schedule)\nprint(result)\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(n: int, watering_days: list[int]) -> int:\n    \"\"\"\n    Calculate the height of the flower based on the watering conditions.\n\n    Args:\n        n (int): The number of days.\n        watering_days (list[int]): A list of integers where 1 indicates the flower was watered on that day, and 0 indicates it was not.\n\n    Returns:\n        int: The final height of the flower, or -1 if it dies.\n    \"\"\"\n    if n == 0:\n        return -1\n\n    height = 1  # Initial height of the flower\n    consecutive_dry_days = 0  # Counter for consecutive dry days\n\n    for day in watering_days:\n        if day == 1:\n            consecutive_dry_days = 0  # Reset the counter if watered\n            height += 1  # Grow by 1 cm if watered on the current day\n            if len(watering_days) > 1 and watering_days[watering_days.index(day) - 1] == 1:\n                height += 4  # Grow by an additional 4 cm if watered on the previous day\n        else:\n            consecutive_dry_days += 1  # Increment the counter if not watered\n            if consecutive_dry_days == 2:\n                return -1  # The flower dies if not watered for two consecutive days\n\n    return height\n\n# Interface for the function\nn = int(input())\nwatering_days = list(map(int, input().split()))\nresult = calculate_flower_height(n, watering_days)\nprint(result)\n", "from typing import List\ndef calculate_flower_growth(n: int, watering_schedule: list[int]) -> int:\n    height = 1  # The initial height of the flower is 1 cm\n    dead = False  # Flag to check if the flower is dead\n\n    for i in range(1, n):\n        if watering_schedule[i] == 1 and watering_schedule[i - 1] == 1:\n            height += 5  # Increase by 5 cm if watered on both the i-th and (i-1)-th days\n        elif watering_schedule[i] == 1:\n            height += 1  # Increase by 1 cm if watered on the i-th day\n        else:\n            dead = True  # The flower is not watered, so it dies\n            break\n\n    if not dead and watering_schedule[-1] == 0 and watering_schedule[-2] == 0:\n        dead = True  # The flower is not watered for two consecutive days\n\n    return -1 if dead else height\n\n# Interface\nn = int(input())\nfor _ in range(n):\n    watering_schedule = list(map(int, input().split()))\n    result = calculate_flower_growth(len(watering_schedule), watering_schedule)\n    print(result)\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_schedule: List[int]) -> int:\n    if n == 1 and watering_schedule[0] == 0:\n        return -1\n    \n    flower_height = 1\n    dead = False\n    \n    for day in range(1, n):\n        if dead:\n            break\n        \n        if watering_schedule[day] == 1:\n            if watering_schedule[day - 1] == 1:\n                flower_height += 5\n            else:\n                flower_height += 1\n        else:\n            if watering_schedule[day - 1] == 0:\n                dead = True\n    \n    if not dead and watering_schedule[-1] == 0:\n        dead = True\n    \n    return flower_height if not dead else -1\n\n# Interface\nn = int(input())\nwatering_schedule = list(map(int, input().split()))\nresult = calculate_flower_height(n, watering_schedule)\nprint(result)\n"], "plans": ["requirement analysis:\nThe requirements specify a simple program to calculate the growth of a flower based on watering days. The program needs to handle multiple test cases and output the final height of the flower or -1 if it dies. The flower's growth depends on whether it was watered on consecutive days or not.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should correctly calculate the flower's height based on the given rules.\n- The output should indicate -1 if the flower dies due to lack of watering for two consecutive days.\n- The program should be able to handle up to 100 test cases.\nWe will use a straightforward approach to solve this problem. The program will read multiple test cases, each containing a number of days and a sequence of watering days. For each test case, the program will simulate the growth of the flower based on the given rules. If the flower is not watered for two consecutive days, it will die, and the program will output -1 for that test case. Otherwise, it will output the final height of the flower.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'watering': means the flower grows by 1 centimeter if watered on that day, and by 5 centimeters if watered on consecutive days.\n    'non-watering': means the flower does not grow on that day.\n    'consecutive days': means the flower dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case:\n    1. Initialize the flower's height to 1 centimeter.\n    2. Iterate through each day from 1 to n.\n    3. Check if the flower was watered on the current day and the previous day.\n    4. Update the flower's height based on the watering condition.\n    5. Check if the flower was not watered on the current day and the previous day.\n    6. If the flower was not watered for two consecutive days, set the height to -1 and break the loop.\n    7. Return the final height of the flower.\n\n# [edge case] \n    n = 3, watering days = [1, 0, 1]\n    expected output = 3\n    Explanation:\n    - Day 1: Watered, height = 2 cm (1 cm for watering + 1 cm for being watered on the previous day).\n    - Day 2: Not watered, height remains 2 cm.\n    - Day 3: Watered, height = 3 cm (2 cm + 1 cm).\n    The flower did not die, so the output is 3.\n\n    n = 3, watering days = [0, 1, 1]\n    expected output = 7\n    Explanation:\n    - Day 1: Not watered, height remains 1 cm.\n    - Day 2: Watered, height = 6 cm (1 cm + 5 cm for being watered on consecutive days).\n    - Day 3: Watered, height = 7 cm (6 cm + 1 cm).\n    The flower did not die, so the output is 7.\n\n    n = 4, watering days = [1, 0, 0, 1]\n    expected output = -1\n    Explanation:\n    - Day 1: Watered, height = 2 cm.\n    - Day 2: Not watered, height remains 2 cm.\n    - Day 3: Not watered, height remains 2 cm.\n    - Day 4: Watered, but the flower did not grow for two consecutive days, so it dies. The output is -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan is sufficient to determine if the flower dies or not and calculate the height accordingly.\n", "requirement analysis:\nThe requirements specify a simple simulation of a plant's growth based on watering days. The plant can grow 1 cm per day if watered, 5 cm if watered on consecutive days, and does not grow if not watered. The plant starts at 1 cm and dies if not watered for two consecutive days. The output is the height of the plant after n days or -1 if it has died.\nrequirement pool:\n- Implement the plant growth logic based on watering days.\n- Handle the case where the plant dies due to lack of watering.\n- Ensure the program can handle multiple test cases efficiently.\n- Design a user-friendly interface for input and output.\nWe will use a simple Python script to simulate the growth of a plant based on the days it is watered. The script will iterate through each day, checking the watering history to determine the plant's growth. If the plant is not watered for two consecutive days, it will die, and the script will output -1. Otherwise, it will output the final height of the plant.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'watering': the act of watering the flower to promote growth\n    'growth': the increase in height of the flower due to watering\n    'consecutive days': days in a row without watering leading to the flower dying\n\n# [phrase showing quantity relationship]\n    'more than': used to compare the number of times the flower is watered to the number of days\n    'at least as many times': used to compare the number of times the flower is watered to the number of days\n\n# [degree adverb] \n    'largest': used to describe the final height of the flower\n\n# [code logic]\n    Iterate through each day, checking the watering history to determine the plant's growth. If the plant is not watered for two consecutive days, it will die, and the script will output -1. Otherwise, it will output the final height of the plant.\n\n# [edge case] \n    n = 1, watering days = [0]\n    Explanation: The flower is not watered on the only day, so it dies. The expected output is -1.\n    n = 2, watering days = [1, 0]\n    Explanation: The flower is watered on the first day and not watered on the second day, so it does not die. The expected output is 1 (initial height) + 1 (growth on the first day) = 2.\n    n = 3, watering days = [1, 1, 0]\n    Explanation: The flower is watered on the first and second days, so it grows by 5 centimeters. The flower is not watered on the third day, so it dies. The expected output is 1 (initial height) + 5 (growth on the first and second days) = 6.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the flower dies.\n        if not watered_days:\n            return -1\n        height = 1\n        for i in range(len(watering_days)):\n            if i > 0 and watering_days[i-1] == 1 and watering_days[i] == 1:\n                height += 5\n            elif watering_days[i] == 1:\n                height += 1\n        if i > 1 and watering_days[i-1] == 0 and watering_days[i-2] == 0:\n            return -1\n        return height\n", "requirement analysis:\nThe requirements specify a simple program to calculate the growth of a flower based on watering days. The program needs to handle multiple test cases and output the final height of the flower or -1 if it dies. The input is structured with the number of test cases followed by each case's details, and the output should match the expected format for each test case.\nrequirement pool:\n- The main code should handle input and output correctly.\n- The program should calculate the flower's height based on the given rules.\n- The code should handle multiple test cases efficiently.\n- Implement a user-friendly interface for easy input of test cases.\n- Ensure the UI is responsive and works well on both desktop and mobile devices.\nWe will use a simple and efficient approach to handle the flower growth calculation based on the given rules. The program will read multiple test cases, each containing the number of days and the watering status for each day. It will then calculate the final height of the flower or determine if it dies based on the watering schedule.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'watering schedule': The sequence of days when the flower is watered or not.\n    Explanation: The flower's growth depends on whether it is watered on consecutive days or not. If watered on two consecutive days, it grows 5 cm; if watered on one day, it grows 1 cm; if not watered, it does not grow.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the flower grows more than 1 cm if watered on consecutive days.\n    'at least as many times': Indicates that the flower's growth is determined by how many times it is watered compared to the number of days it is not watered.\n\n# [degree adverb] \n    'largest': Indicates that the final height is determined by the maximum growth possible under the watering schedule.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The program should iterate through each day, checking the watering status of the previous day to determine the growth for the current day. If the flower is not watered for two days in a row, it dies.\n\n# [edge case] \n    n = 1, watering schedule = [0] = -1\n    Explanation: With only one day and no watering, the flower does not grow and dies immediately.\n    n = 2, watering schedule = [1, 0] = 1\n    Explanation: On the first day, the flower is watered and grows 1 cm. On the second day, it is not watered, so it does not grow. The final height is 1 cm.\n    n = 2, watering schedule = [0, 1] = 1\n    Explanation: On the first day, the flower is not watered, so it does not grow. On the second day, it is watered and grows 1 cm. The final height is 1 cm.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the flower does not grow for two days in a row.\n        if n == 1 and watering_schedule[0] == 0:\n            return -1\n        (other code)\n\nThis code checks if the flower is not watered on the first day of a test case and returns -1 if it dies.\n", "requirement analysis:\nThe requirements specify a simple program to calculate the final height of a flower based on its watering schedule. The program needs to handle multiple test cases and output the correct height or indicate withering away with -1. The constraints are within a reasonable range, ensuring the program can handle up to 100 days and 100 test cases efficiently.\nrequirement pool:\n- The main code should read input correctly and handle multiple test cases.\n- The program should calculate the flower's height based on the watering schedule.\n- The output should indicate withering away with -1 if the flower goes un-watered for two consecutive days.\nWe will use a straightforward approach to solve this problem. The program will read multiple test cases, each containing a number of days and a sequence of watering actions. For each test case, the program will calculate the final height of the flower based on the watering schedule. If the flower goes un-watered for two consecutive days, it will wither away, and the program will output -1 for that test case. Otherwise, it will output the final height of the flower.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'watering schedule': the sequence of actions indicating whether the flower was watered on each day\n    'wither away': the flower stops growing if it goes un-watered for two consecutive days\n\n# [phrase showing quantity relationship]\n    'two consecutive days': means two days in a row without watering\n\n# [degree adverb] \n    'wither away': means the flower stops growing and eventually dies\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case:\n    1. Initialize a counter for the flower's height.\n    2. Initialize a flag to check if the flower is withering away.\n    3. Iterate through the days:\n        - If the flower is watered, increase the height.\n        - If the flower is not watered, check if it has gone two days without watering. If so, set the withering flag to True.\n        - If the withering flag is True, break the loop as the flower has died.\n    4. Return the final height or -1 if the flower has withered away.\n\n# [edge case] \n    Test case: 4 1 0 0 1 1 0\n    Output: 1\n    Explanation:\n    - The flower is watered on the 1st, 4th, and 5th days, so it grows to a height of 3.\n    - The flower goes un-watered on the 2nd and 3rd days, but it is watered again on the 4th and 5th days, so it does not wither away.\n\n# [extra code for edge case]\n    We do not need extra code to handle this edge case as the logic already accounts for the possibility of the flower not being watered for two consecutive days.\n", "requirement analysis:\nThe requirements specify the need for a program that can simulate the growth of a plant based on user input regarding watering days. The program should be able to handle multiple test cases and provide clear output for each case. The user interface should be simple and intuitive, allowing users to input data and receive results efficiently.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should provide clear output for each test case.\n- The user interface should be simple and intuitive.\n- The program should simulate the growth of the plant based on user input.\n- The program should handle the case where the flower withers away.\nWe will use Python for this task as it is versatile and has powerful libraries for handling such scenarios. The main challenge is to simulate the growth of the flower based on user input and check for withering conditions. We will use a simple function to handle each test case, ensuring efficiency and clarity.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'watering': The act of watering the flower increases its height by 1 centimeter.\n    'withering': The flower wilts if it goes un-watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    For each test case, we will:\n    1. Initialize the flower's height to 0.\n    2. Initialize a variable to keep track of the previous day's watering status.\n    3. Iterate through each day, updating the flower's height based on whether it was watered or not.\n    4. Check if the flower was not watered for two consecutive days, and if so, set the final height to -1 (indicating the flower has wilted).\n    5. Return the final height of the flower.\n\n# [edge case] \n    Test case: 4 1 0 0 1 1 0\n    Expected output: 1\n    Explanation:\n    - On day 1, the flower is watered, so its height becomes 1.\n    - On day 2, the flower is not watered, and it was not watered the previous day, so it wilts. The final height is -1.\n    - On day 3, the flower is watered, but since it wilted, the final height remains -1.\n    - On day 4, the flower is watered, but the previous day it wilted, so the final height remains -1.\n    - On day 5, the flower is watered, and the previous day it was not watered, so its height becomes 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan already accounts for the withering condition.\n", "requirement analysis:\nThe requirements specify that the program should handle multiple test cases, each with a different number of days and watering activities. The program needs to calculate the final height of the flower or determine if it withers away. The input is provided through standard input, and the output should be printed to standard output.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should correctly calculate the final height of the flower based on the watering schedule.\n- The program should handle edge cases, such as no watering for two consecutive days.\n- The program should be user-friendly and provide clear output for each test case.\nWe will use a simple and efficient approach to handle the problem. The main code will define a function that takes a list of integers representing the watering schedule and returns the final height of the flower or -1 if it withers away. We will use a loop to iterate through the days and keep track of the watering status. If the flower goes un-watered for two consecutive days, it will wither away.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'watering schedule': a series of days indicating whether the flower was watered or not.\n    Explanation: The flower's growth depends on whether it was watered on each day. If it goes un-watered for two consecutive days, it will wither away.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Iterate through the days and check the watering schedule:\n    1. Initialize a counter for the flower's height.\n    2. Use a loop to go through each day's watering status.\n    3. If the flower is watered, increase the height by 1.\n    4. If the flower is not watered, check if it was watered the previous day.\n    5. If the flower was not watered the previous day, set a flag to indicate withering.\n    6. If the flower goes un-watered for two consecutive days, return -1.\n    7. After the loop, return the final height of the flower.\n\n# [edge case] \n    Case 1: n = 3, watering schedule = [1, 0, 1]\n    Expected output: 3\n    Explanation: The flower is watered on the 1st and 3rd days, so it grows 2 cm on the 1st day and 1 cm on the 3rd day, totaling 3 cm.\n\n    Case 2: n = 3, watering schedule = [0, 1, 1]\n    Expected output: 7\n    Explanation: The flower is not watered on the 1st day, watered on the 2nd and 3rd days. It grows 1 cm on the 2nd day, 1 cm on the 3rd day, and 5 cm before withering (since it was watered on the 2nd day, it doesn't wither on the 3rd day).\n\n    Case 3: n = 4, watering schedule = [1, 0, 0, 1]\n    Expected output: -1\n    Explanation: The flower is watered on the 1st and 4th days, but it goes un-watered on the 2nd and 3rd days, resulting in two consecutive days of un-watering, causing the flower to wither away.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle all cases correctly.\n", "requirement analysis:\nThe requirements specify that the flower's growth depends on the watering conditions over n days. The flower grows by 1 cm if watered on the i-th day, by 5 cm if watered on both the i-th and (i-1)-th days, and dies if not watered for two consecutive days. The solution must handle multiple test cases and output the correct height of the flower or indicate if it has died.\nrequirement pool:\n- Implement the logic to calculate the flower's growth based on the watering conditions.\n- Handle multiple test cases efficiently.\n- Output the correct height of the flower or indicate if it has died.\nWe will use a simple and efficient approach to solve this problem. The main challenge is to keep track of the flower's growth based on the watering conditions over n days. We will use a list to store the watering status for each day and calculate the flower's height accordingly.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'watering conditions': The act of watering the flower on a particular day affects its growth. The growth is determined by the number of days it was watered in the past.\n    Explanation: The flower grows by 1 cm if watered on the i-th day, by 5 cm if watered on both the i-th and (i-1)-th days, and dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the flower grows by a certain amount if watered on multiple days.\n    'at least as many times': Refers to the condition where the flower grows by 5 cm if watered on both the i-th and (i-1)-th days.\n\n# [degree adverb] \n    'largest': Not applicable in this context as there is no degree adverb directly related to quantity relationships.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case, we need to:\n    1. Initialize the flower's height to 1 cm.\n    2. Iterate through the days and update the flower's height based on the watering conditions.\n    3. Check if the flower has been watered for two consecutive days. If not, the flower dies.\n    4. Return the final height of the flower or -1 if it dies.\n\n# [edge case] \n    Edge case 1:\n    Input: 3\n           0 1 0\n    Expected output: 1\n    Explanation: The flower is not watered on the first day, watered on the second day, and not watered on the third day. Since it was not watered for two consecutive days, the flower dies.\n\n    Edge case 2:\n    Input: 2\n           1 1\n    Expected output: 7\n    Explanation: The flower is watered on both the first and second days, so it grows by 5 cm each day, resulting in a height of 7 cm.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the flower does not get watered for two consecutive days.\n        if not watered for two consecutive days:\n            return -1\n\n    (other code)\n", "requirement analysis:\nThe requirements specify that the flower grows based on watering conditions. It grows by 1 cm if watered on the i-th day, by 5 cm if watered on both the i-th and (i-1)-th days, and dies if not watered for two consecutive days. The input consists of multiple test cases, each with a number of days and a sequence of watering days. The output should provide the height of the flower after n days or indicate if it has died.\nrequirement pool:\n- Implement the logic for flower growth based on watering conditions.\n- Handle multiple test cases efficiently.\n- Ensure the flower does not grow if not watered for two consecutive days.\n- Provide clear output for each test case.\nWe will use a simple Python function to handle the flower growth logic based on the given watering conditions. The function will iterate through each day, checking the watering conditions and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will die, and the function will return -1.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'watering conditions': The flower grows based on specific watering patterns, and it can die if not watered for two consecutive days.\n    Explanation: The flower's growth is dependent on whether it is watered on consecutive days or not. If it is not watered for two consecutive days, it will die.\n\n# [phrase showing quantity relationship]\n    'more than': This phrase is not explicitly mentioned in the requirement.\n\n# [degree adverb] \n    'largest': This phrase is not explicitly mentioned in the requirement.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The function will iterate through each day, checking the watering conditions and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will die, and the function will return -1.\n\n# [edge case] \n    search([1, 1, 1, 1, 1]) = 6\n    Explanation: If the flower is watered every day, it will grow by 1 cm each day. Since it is watered for 5 days, the final height will be 5 cm.\n    search([0, 0, 0, 0, 0]) = -1\n    Explanation: If the flower is not watered at all, it will not grow and will die after two consecutive days without watering.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan will handle the case where the flower is not watered for two consecutive days and will return -1.\n", "requirement analysis:\nThe requirements specify the need to calculate the growth of a flower over a given number of days based on its watering schedule. The application must handle multiple test cases and provide clear output indicating the flower's height or if it has died. The solution should be efficient and user-friendly.\nrequirement pool:\n- The main code must accurately calculate the flower's growth based on the watering schedule.\n- The application must handle multiple test cases efficiently.\n- The output must clearly indicate the flower's height or if it has died.\n- The application should be user-friendly and provide clear instructions.\n- The solution should be efficient and handle up to 100 test cases.\nWe will use Python for this task as it provides a simple and efficient way to handle the requirements. The main challenge is to accurately calculate the flower's growth based on the watering schedule and handle multiple test cases efficiently. We will use a list to store the watering days and calculate the flower's growth accordingly.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'watering schedule': The sequence of days on which the flower is watered, which affects its growth.\n    Explanation: The flower grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the flower's growth is dependent on the number of days it is watered.\n    'at least as many times': Refers to the condition where the flower grows by 5 cm if watered on both the i-th and (i-1)-th days.\n\n# [degree adverb] \n    'largest': Indicates that the final height of the flower is determined by the maximum number of consecutive watering days.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    For each test case:\n    1. Initialize the flower's height to 1 cm.\n    2. Iterate through the days and update the height based on the watering schedule.\n    3. Check if the flower is watered on consecutive days and update the height accordingly.\n    4. Check if the flower is not watered for two consecutive days and mark it as dead.\n    5. Return the final height or -1 if the flower is dead.\n\n# [edge case] \n    search([1, 0, 1, 0, 1]) = 5\n    Explanation: The flower is watered on days 1, 3, and 5, resulting in a growth of 1 cm each day, totaling 3 cm.\n    search([0, 0, 0, 0, 0]) = -1\n    Explanation: The flower is never watered, so it dies after the first day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to determine if the flower is dead or alive.\n\n# [code logic continued]\n    For each test case:\n    1. Initialize the flower's height to 1 cm.\n    2. Use a loop to iterate through the days and update the height based on the watering schedule.\n    3. Check for consecutive watering days and update the height by 5 cm.\n    4. Check for non-watering days and ensure the flower does not die.\n    5. Return the final height or -1 if the flower is dead.\n\n# [edge case] \n    search([1, 1, 1, 0, 0]) = 7\n    Explanation: The flower is watered on days 1, 2, and 3, resulting in a growth of 15 cm (5 cm for each pair of consecutive days).\n    search([1, 1, 0, 1, 1]) = 7\n    Explanation: The flower is watered on days 1, 2, 4, and 5, resulting in a growth of 15 cm (5 cm for each pair of consecutive days).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided in the plan is sufficient to determine the flower's height.\n", "requirement analysis:\nThe requirements specify a simple program to calculate the growth of a flower based on watering days. The program needs to handle multiple test cases, each with a different number of days and watering schedule. The output should indicate the final height of the flower or -1 if it dies due to lack of watering.\nrequirement pool:\n- The main code should handle multiple test cases efficiently.\n- The program should correctly calculate the flower's height based on the given rules.\n- The output should indicate -1 if the flower dies due to lack of watering.\n- The program should be able to handle up to 100 test cases.\nWe will use a simple and efficient approach to handle the flower growth calculation based on the given rules. The program will iterate through each day, checking the watering schedule and updating the flower's height accordingly. We will use a list to store the watering schedule and a variable to keep track of the flower's height.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'watering schedule': The sequence of days when Petya waters the flower, represented by a list of 0s and 1s.\n    Explanation: 0 represents a day when the flower is not watered, while 1 represents a day when the flower is watered.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the flower grows by 5 centimeters if watered on consecutive days.\n    'at least as many times': Indicates that the flower grows by 1 centimeter if not watered for two days in a row, it dies.\n\n# [degree adverb] \n    'largest': Not applicable in this context.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    Iterate through each day, check the watering schedule, and update the flower's height accordingly.\n\n# [edge case] \n    n = 1, watering schedule = [0]\n    expected output = -1\n    Explanation: The flower does not get any water on the first day and is not watered for two days in a row, so it dies.\n\n    n = 2, watering schedule = [1, 0]\n    expected output = 1\n    Explanation: The flower is watered on the first day, so it grows to 2 centimeters. It is not watered on the second day, so it does not grow.\n\n    n = 3, watering schedule = [1, 1, 1]\n    expected output = 3\n    Explanation: The flower is watered on all three days, so it grows by 1 centimeter each day, totaling 3 centimeters.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where the flower does not get any water on the first day and is not watered for two days in a row, resulting in the flower dying.\n    if n == 1 and watering_schedule[0] == 0:\n        return -1\n    (other code)\n"], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": false, "pass": false, "pass_num": 0, "round": 7, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "add_1_sentence_at_end", "parent_index": 7}
