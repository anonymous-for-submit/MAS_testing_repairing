{"name": "1607_A. Linear Keyboard", "description": "You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "tags": ["implementation", "strings"], "difficulty": 7, "id": 1607, "sample_io": [{"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}], "test_list": [{"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjmnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanc\n", "output": ["166\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjkcanj\n", "output": ["157\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n70\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nbbdes\n", "output": ["17\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n6\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeeb\n", "output": ["25\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjlcanj\n", "output": ["159\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["13\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n68\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "1\naycdefbhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n52\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadfb\n", "output": ["27\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n50\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzywwsutvrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["171\n"]}, {"input": "1\nzgxovudsrqpcnljklihyfetwba\nsedba\n", "output": ["48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n50\n0\n35\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdea\n", "output": ["38\n"]}, {"input": "1\nzywwsutvrqponmlcjihgfedkba\njnacljnajcsnackncasca\n", "output": ["173\n"]}, {"input": "1\nzgxwdutsrqponmjklihbfeucya\nsfdba\n", "output": ["50\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n6\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["153\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n50\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naasccnkianscjanjlcanb\n", "output": ["163\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdfa\n", "output": ["39\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n49\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naatccnkianscjanjlcanb\n", "output": ["165\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccanb\n", "output": ["147\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n54\n6\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n80\n0\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n36\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofecod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n69\n18\n74\n"]}, {"input": "1\nabcdefyhilkjmponsrwtuvqxhz\nbedsa\n", "output": ["33\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngdlln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n36\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwfrtyuhopasdfghjklzxcvbnm\nabcabab\n", "output": ["14\n0\n54\n6\n65\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n18\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\nteaae\n", "output": ["23\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n65\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\naacddfghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzxcvbnj\nabacaba\n", "output": ["15\n0\n80\n0\n74\n"]}, {"input": "1\naccdehgsilkilnopqqftuvwxxz\nseaae\n", "output": ["11\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponmlkjihgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n6\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n24\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n15\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nrqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n27\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nzqxwvutsryponmlkiihgfedcba\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n80\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n82\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdllo\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n82\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n80\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacaa\n", "output": ["15\n0\n80\n15\n24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhlelo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["21\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacjkjanscnanjlcanb\n", "output": ["169\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n3\n74\n"]}, {"input": "1\nabcdefghijklmonpqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["170\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncoacljnajcsnajkncasca\n", "output": ["168\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n18\n61\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeea\n", "output": ["26\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanscjanjlcanj\n", "output": ["200\n"]}, {"input": "1\nnbcdefyhilkjmaopqrstuvwxgz\nsfdba\n", "output": ["29\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforbes\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n70\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwerbyuiopasdfghjklzxcvtnm\nabacaba\n", "output": ["12\n0\n68\n18\n46\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n18\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncatca\n", "output": ["161\n"]}, {"input": "5\nzyxwvutsrqponmakjihgfedcbl\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["19\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["12\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\ncsdea\n", "output": ["36\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nkelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["18\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuuterqponmjklihbfsdcya\nsfdba\n", "output": ["12\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjldanb\n", "output": ["195\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdae\n", "output": ["40\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabbcaba\n", "output": ["11\n0\n68\n18\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnzpqrstuvwxyo\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n106\n18\n74\n"]}, {"input": "1\nzyxwjvtsrqponmlkvihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["211\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbscfa\n", "output": ["41\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n18\n74\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlnlhe\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\neholl\nabcdefghijklmnopqrstuvwyyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n49\n0\n35\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljihgfedcba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n68\n24\n52\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnlleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofedod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n67\n18\n74\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccana\n", "output": ["148\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nbbacaba\n", "output": ["11\n0\n68\n18\n61\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseeqofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n63\n18\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeefoqcse\nqwertyujnpasdfghjklzxcvbnn\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n78\n0\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\naeate\n", "output": ["42\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmlfh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["10\n0\n65\n18\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmelh\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["20\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhem\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["17\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdsfghzjmlmnopqretuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n53\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcsf\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n79\n6\n74\n"]}, {"input": "1\nzxxwvutfqqponlekljshhiccca\nteaae\n", "output": ["30\n"]}, {"input": "1\nztxwvuxfqqponlikcjshieccma\neaaet\n", "output": ["28\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdlln\naacddfghmjklinopqrstuvvxyz\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["14\n0\n82\n15\n26\n"]}, {"input": "1\narcdeffhilkjmnopqbstuvwxyz\nabdes\n", "output": ["46\n"]}, {"input": "1\nzyxwvutsrqponclkjihgeedmba\nacsacnkjanscjanjlcanc\n", "output": ["144\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n9\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nccacljnajcsnajknoasca\n", "output": ["146\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnnjcacaska\n", "output": ["145\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n24\n61\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabababa\n", "output": ["14\n0\n68\n0\n78\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanrcjanjlcanj\n", "output": ["198\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhdllo\nabcdezghijklmnopqrstuvwxyf\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["15\n0\n68\n0\n48\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nabdes\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxzz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdfs\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabcdefyhilkjlnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nabcdefyhilkhmnopqrstuvwxjz\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabodefyhilkjlncpqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedaa\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbedsa\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadeb\n", "output": ["25\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrqpnomhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabwdefyhilkjlncpqrstuvoxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcnnajkscasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\naedsb\n", "output": ["37\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nzgxwvutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\nzgxovutsrqpcnljklihyfedwba\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvvxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabeet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsroponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzyxwvutsrqponljklihgfedcba\nabeet\n", "output": ["19\n"]}], "task_id": "codecontest/98", "prompt": "You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou need to input the word s using this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, each letter needs to be entered consecutively one after another. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s. Clarify how the initial hand position affects the calculation if it is not aligned with the start of the word. Consider the keyboard layout and initial hand positioning to ensure accurate time calculation.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "repair_prompt": ["You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou need to input the word s using this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, each letter needs to be entered consecutively one after another. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s. Clarify how the initial hand position affects the calculation if it is not aligned with the start of the word. Consider the keyboard layout and initial hand positioning to ensure accurate time calculation.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nWrite a main() function and use input() function to read input from stdin", " You are given a keyboard with 26 keys, each representing a unique lowercase Latin letter in a specific order. You need to type a word s using this keyboard, which consists of lowercase Latin letters. Each letter in the word must be entered consecutively, and the time taken to type each letter is determined by the absolute value of the difference in positions between the current and previous keys pressed. The initial hand position does not affect the calculation if it is aligned with the start of the word, but if it is not, the time taken to align the hand with the first letter will be considered. Calculate the total time required to type the\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nWrite a main() function and use input() function to read input from stdin", " You are given a keyboard with 26 keys, each corresponding to a unique lowercase Latin letter. You need to input the word s using this keyboard. The time to type each letter is determined by the absolute value of the difference between the positions of the current and previous keys, with no time spent on pressing the keys or placing the hand over the first letter. Determine the total time to print the word s, considering the initial hand position and keyboard layout.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format. Input must be taken from standard input and output must be given to standard output. The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74\nWrite a main() function and use input() function to read input from stdin"], "completions": ["from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str, initial_position: int = 0) -> int:\n    \"\"\"\n    Calculate the time required to type a given word on a custom keyboard layout.\n\n    Args:\n        keyboard (str): A string of length 26 representing the keyboard layout.\n        word (str): The word to be typed.\n        initial_position (int): The initial position of the hand (default is 0).\n\n    Returns:\n        int: The total time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each key to its position on the keyboard\n    key_positions = {char: idx for idx, char in enumerate(keyboard)}\n\n    # Initialize the total time and the current position of the hand\n    total_time = 0\n    current_position = initial_position\n\n    # Calculate the time to type each letter in the word\n    for char in word:\n        next_position = key_positions[char]\n        total_time += abs(next_position - current_position)\n        current_position = next_position\n\n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout and the word\n    keyboard = input()\n    word = input()\n\n    # Calculate and print the typing time for the word on the given keyboard\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each key to its position on the keyboard\n    key_positions = {}\n    for index, key in enumerate(keyboard):\n        key_positions[key] = index\n    \n    # Initialize the time to type the word\n    total_time = 0\n    \n    # Initialize the position of the hand (start at the first key)\n    current_position = 0\n    \n    # Calculate the time to type each letter in the word\n    for letter in word:\n        target_position = key_positions[letter]\n        total_time += abs(target_position - current_position)\n        current_position = target_position\n    \n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str, initial_position: int) -> int:\n    \"\"\"\n    Calculate the time required to type a given word on a custom keyboard layout.\n\n    Args:\n        keyboard (str): A string of length 26 representing the keyboard layout.\n        word (str): The word to be typed.\n        initial_position (int): The initial position of the hand on the keyboard.\n\n    Returns:\n        int: The total time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {}\n    for index, letter in enumerate(keyboard):\n        keyboard_positions[letter] = index + 1\n\n    # Initialize the total time and the current position of the hand\n    total_time = 0\n    current_position = initial_position\n\n    # Iterate through each letter in the word\n    for letter in word:\n        # Calculate the time to type the current letter\n        time_to_type_letter = abs(current_position - keyboard_positions[letter])\n        # Update the total time\n        total_time += time_to_type_letter\n        # Update the current position to the position of the current letter\n        current_position = keyboard_positions[letter]\n\n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout\n    keyboard = input()\n    # Read the word to type\n    word = input()\n    # Read the initial hand position\n    initial_position = int(input())\n    # Calculate the typing time\n    result = calculate_typing_time(keyboard, word, initial_position)\n    # Print the result\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the total typing time required to type a given word on a specific keyboard.\n\n    Args:\n        keyboard (str): A string of 26 characters representing the layout of the keyboard.\n        word (str): The word to be typed, consisting of lowercase Latin letters.\n\n    Returns:\n        int: The total typing time required to type the word.\n    \"\"\"\n    if not keyboard or not word:\n        return 0\n\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard)}\n\n    # Initialize the total typing time and the position of the hand\n    total_time = 0\n    current_position = 0\n\n    # Iterate through each letter in the word\n    for letter in word:\n        # Get the position of the current letter on the keyboard\n        letter_position = keyboard_positions[letter]\n        # Calculate the time taken to type the current letter\n        time_to_type_letter = abs(letter_position - current_position)\n        # Update the total typing time\n        total_time += time_to_type_letter\n        # Update the current position of the hand\n        current_position = letter_position\n\n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout and the word\n    keyboard = input().strip()\n    word = input().strip()\n    # Calculate and print the total typing time for the word\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the time required to type a word based on a given keyboard layout.\n\n    Args:\n        keyboard (str): A string of 26 characters representing the keyboard layout.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The total typing time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {}\n    for index, letter in enumerate(keyboard):\n        keyboard_positions[letter] = index\n\n    # Initialize the total typing time\n    total_time = 0\n\n    # Iterate through the word to calculate the total typing time\n    for i in range(1, len(word)):\n        current_position = keyboard_positions[word[i]]\n        previous_position = keyboard_positions[word[i - 1]]\n        total_time += abs(current_position - previous_position)\n\n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {}\n    for index, letter in enumerate(keyboard):\n        keyboard_positions[letter] = index\n    \n    # Initialize the total typing time and the position of the hand\n    total_time = 0\n    current_position = 0  # Start at the position of 'a'\n    \n    # Calculate the typing time for each letter in the word\n    for letter in word:\n        target_position = keyboard_positions[letter]\n        # Calculate the time for the transition from the current position to the target position\n        time_for_transition = abs(target_position - current_position)\n        total_time += time_for_transition\n        # Update the current position to the target position\n        current_position = target_position\n    \n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    # Read the keyboard layout and the word\n    keyboard = input()\n    word = input()\n    \n    # Calculate and print the typing time for the word on the given keyboard\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the time to type a word based on the positions of the keys on a given keyboard layout.\n\n    Args:\n        keyboard (str): A string of length 26 representing the keyboard layout, where each character is a unique lowercase Latin letter.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The total time to type the word.\n    \"\"\"\n    # Create a dictionary to store the positions of each key\n    key_positions = {char: idx for idx, char in enumerate(keyboard)}\n\n    # Initialize the total time to 0\n    total_time = 0\n\n    # Calculate the time to type the word\n    for i in range(1, len(word)):\n        current_pos = key_positions[word[i]]\n        previous_pos = key_positions[word[i - 1]]\n        total_time += abs(current_pos - previous_pos)\n\n    return total_time\n\n# Read the number of test cases\nn = int(input())\n\n# Process each test case\nfor _ in range(n):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the total time to type a word based on the positions of the letters on a custom keyboard.\n\n    Args:\n        keyboard (str): A string of 26 unique lowercase Latin letters representing the keyboard layout.\n        word (str): The word to be typed, consisting of lowercase Latin letters.\n\n    Returns:\n        int: The total time to type the word.\n    \"\"\"\n    # Create a dictionary to store the positions of each letter on the keyboard\n    keyboard_positions = {}\n    for index, letter in enumerate(keyboard):\n        keyboard_positions[letter] = index\n\n    # Initialize the total time and the position of the first letter\n    total_time = 0\n    current_position = 0\n\n    # Iterate through the word and calculate the time to type each letter\n    for letter in word:\n        next_position = keyboard_positions[letter]\n        total_time += abs(next_position - current_position)\n        current_position = next_position\n\n    return total_time\n\n# Read the number of test cases\nt = int(input().strip())\n\n# Process each test case\nfor _ in range(t):\n    keyboard = input().strip()\n    word = input().strip()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"\n    Calculate the total time to type a word based on the positions of the letters on the keyboard.\n\n    Args:\n        keyboard (str): A string of length 26 representing the keyboard layout.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The total time to type the word.\n    \"\"\"\n    # Create a dictionary to store the positions of each letter on the keyboard\n    keyboard_positions = {}\n    for index, letter in enumerate(keyboard):\n        keyboard_positions[letter] = index\n\n    # Initialize the total time and the position of the first letter\n    total_time = 0\n    current_position = 0\n\n    # Iterate through the word to calculate the time taken to type each letter\n    for letter in word:\n        target_position = keyboard_positions[letter]\n        # Calculate the time for the transition between the current and target positions\n        total_time += abs(target_position - current_position)\n        # Update the current position to the target position\n        current_position = target_position\n\n    return total_time\n\n# Provide the Interface\nt = int(input())\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    result = calculate_typing_time(keyboard, word)\n    print(result)\n", "from typing import List\n## main.py\n\ndef calculate_typing_time(keyboard: str, initial_position: int, word: str) -> int:\n    \"\"\"\n    Calculate the time required to type a word based on the position of each letter on a given keyboard.\n\n    Args:\n        keyboard (str): A string of length 26 representing the keyboard layout.\n        initial_position (int): The initial position of the hand on the keyboard.\n        word (str): The word to be typed.\n\n    Returns:\n        int: The total time required to type the word.\n    \"\"\"\n    # Create a dictionary to map each letter to its position on the keyboard\n    keyboard_positions = {char: idx for idx, char in enumerate(keyboard, start=1)}\n\n    # Initialize the total time to 0\n    total_time = 0\n\n    # Calculate the time to type the word\n    current_position = initial_position\n    for letter in word:\n        next_position = keyboard_positions[letter]\n        total_time += abs(next_position - current_position)\n        current_position = next_position\n\n    return total_time\n\n# Read the number of test cases\nt = int(input())\n\n# Process each test case\nfor _ in range(t):\n    keyboard = input()\n    word = input()\n    initial_position = ord(word[0]) - ord('a')\n    result = calculate_typing_time(keyboard, initial_position, word)\n    print(result)\n"], "plans": ["requirement analysis:\nThe requirements involve calculating the time taken to type a given word on a custom keyboard layout. The keyboard layout is provided, and the task is to determine the minimum time required to type the word based on the positions of the keys. The initial hand position is not aligned with the start of the word, which adds complexity to the calculation.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on keyboard layout and key positions.\n- Allow for customization of the initial hand position.\n- Ensure the application is user-friendly and efficient.\n- Provide a clear and concise output for the time required to type the word.\nTo solve this problem, we will create a Python function that calculates the time required to type a given word on a custom keyboard layout. The function will take into account the positions of the keys on the keyboard and the initial hand position. We will use a dictionary to map each key to its position for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, we need to calculate the time required to type a word based on the positions of the keys on the keyboard. The time to type a letter is determined by the absolute difference in positions between the current and previous keys.\n\n# [phrase showing quantity relationship]\n    'as many times as': Indicates the frequency with which a letter appears in the word.\n    Explanation: For example, if a letter appears twice in the word, it means the letter needs to be typed twice, each time considering the time taken to move the hand between the keys.\n\n# [degree adverb] \n    'minimal': Indicates the smallest possible time required to type the word.\n    Explanation: We need to find the minimal time by considering the best possible initial hand position and the optimal sequence of key presses.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Map each key to its position on the keyboard.\n    2. Calculate the time to type each letter in the word, considering the initial hand position.\n    3. Sum the times for all letters to get the total time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list is [1, 2, 2, 3, 3, 3, 4, 4, 4]. The number 3 appears three times, which is more than its value (3), making it the largest integer that meets the condition.\n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: The list is [2, 2, 3, 3, 3]. The number 3 appears three times, which is more than its value (3), making it the largest integer that meets the condition.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: The list is [3, 3, 2, 4, 4, 4]. The numbers 2 and 3 appear less than their values, and 4 appears more than its value, so no integer meets the condition.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where no integer meets the condition.\n        result = -1\n        for num, freq in frequency.items():\n            if freq >= num:\n                result = max(result, num)\n        return result\n\n## Prompt 3:\n[requirement]\nYou are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter. You need to input the word s using this keyboard. It also consists only of lowercase Latin letters. To type a word, each letter needs to be entered consecutively one after another. To type each letter you must position your hand exactly over the corresponding key and press it. Moving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word. For example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". Determine how long it will take to print the word s. Clarify how the initial hand position affects the calculation if it is not aligned with the start of the word. Consider the keyboard layout and initial hand positioning to ensure accurate time calculation. Input The first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. The next 2t lines contain descriptions of the test cases. The first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard. The second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters. Output Print t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n[plan]\nTo solve this problem, we will create a Python function that calculates the time required to type a given word on a custom keyboard layout. The function will take into account the positions of the keys on the keyboard and the initial hand position. We will use a dictionary to map each key to its position for quick lookup.\n\n## Answer 3:\n\n# [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, we need to calculate the time required to type a word based on the positions of the keys on the keyboard. The time to type a letter is determined by the absolute difference in positions between the current and previous keys.\n\n# [phrase showing quantity relationship]\n    'as many times as': Indicates the frequency with which a letter appears in the word.\n    Explanation: For example, if a letter appears twice in the word, it means the letter needs to be typed twice, each time considering the time taken to move the hand between the keys.\n\n# [degree adverb] \n    'minimal': Indicates the smallest possible time required to type the word.\n    Explanation: We need to find the minimal time by considering the best possible initial hand position and the optimal sequence of key presses.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Map each key to its position on the keyboard.\n    2. Calculate the time to type each letter in the word, considering the initial hand position.\n    3. Sum the times for all letters to get the total time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list is [1, 2, 2, 3, 3, 3, 4, 4, 4]. The number 3 appears three times, which is more than its value (3), making it the largest integer that meets the condition.\n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: The list is [2, 2, 3, 3, 3]. The number 3 appears three times, which is more than its value (3), making it the largest integer that meets the condition.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: The list is [3, 3, 2, 4, 4, 4]. The numbers 2 and 3 appear less than their values, and 4 appears more than its value, so no integer meets the condition.\n\n# [extra code for edge case]\n    We need extra code to handle the edge case where no integer meets the condition.\n        result = -1\n        for num, freq in frequency.items():\n            if freq >= num:\n                result = max(result, num)\n        return result\n", "requirement analysis:\nThe requirements involve calculating the time to type a word based on the positions of the keys on the keyboard. The initial hand position affects the calculation, and the keyboard layout must be considered for accurate time calculation. The input includes multiple test cases, and each case requires a separate output.\nrequirement pool:\n- Implement a function to calculate typing time based on key positions.\n- Allow for customization of the initial hand position.\n- Ensure the program can handle multiple test cases efficiently.\n- Provide a user-friendly interface for selecting and customizing keyboard layouts.\n- Optimize the keyboard layout for different user types and preferences.\nTo solve this problem, we will create a Python function that calculates the time required to type a word based on the positions of the keys on a given keyboard. The function will first map each key to its position, then calculate the time based on the positions of the letters in the word. We will use a simple and efficient approach to handle the input and output, ensuring that the program can handle multiple test cases efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: The problem involves calculating the time to type a word based on the positions of the keys on a given keyboard. The keys are arranged sequentially in one row, and the time to move the hand between keys is determined by the absolute value of the difference in their positions.\n\n# [phrase showing quantity relationship]\n    'exactly once': Indicates that each letter from 'a' to 'z' appears exactly once on the keyboard.\n    Explanation: This phrase ensures that each letter has a unique position on the keyboard, which is necessary for accurate position mapping.\n\n# [degree adverb] \n    'minimal': Indicates that the goal is to find the shortest possible time to type the word.\n    Explanation: This phrase suggests that we need to consider the most efficient way to type the word, which involves minimizing the time spent moving the hand between keys.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Map each key to its position on the keyboard.\n    2. Calculate the time to type each letter in the word based on its position.\n    3. Sum the times for all letters to get the total time.\n\n# [edge case] \n    Edge case 1:\n    Input: keyboard = \"abcdefghijklmnopqrstuvwxyz\", word = \"abc\"\n    Expected output: 0\n    Explanation: The initial hand position is aligned with the start of the word, so no time is spent moving the hand.\n\n    Edge case 2:\n    Input: keyboard = \"abcdefghijklmnopqrstuvwxyz\", word = \"zyx\"\n    Expected output: 25\n    Explanation: The word is in reverse alphabetical order, so the hand must move across the entire keyboard, which takes 25 units of time.\n\n    Edge case 3:\n    Input: keyboard = \"qwertyuiopasdfghjklzxcvbnm\", word = \"hello\"\n    Expected output: 30\n    Explanation: The word \"hello\" requires moving the hand between keys with positions 10, 19, 12, and 15, summing to a total time of 30 units.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic can handle the edge cases by considering the initial hand position and the positions of the keys in the word.\n", "requirement analysis:\nThe requirements involve calculating the time required to type a given word on a custom keyboard layout. The keyboard layout is provided, and the task is to determine the time taken to type a word based on the positions of the letters on the keyboard. The initial hand position is not aligned with the start of the word, which introduces a complexity in calculating the time. The solution should consider the absolute difference in positions between consecutive letters and the initial hand position.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on keyboard layout and initial hand position.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the algorithm to minimize the time calculation for typing a word.\n- Allow user customization of keyboard layout for personal optimization.\n- Include a feature to analyze and compare different keyboard layouts for typing efficiency.\nTo solve this problem, we will create a Python function that calculates the time required to type a given word on a custom keyboard layout. The function will take into account the positions of the letters on the keyboard and the initial hand position. We will use a simple and efficient approach to ensure the program can handle multiple test cases efficiently.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: The problem involves calculating the time to type a word based on the positions of the letters on the keyboard. The time to type a letter is determined by the absolute difference in positions between the current and previous letters.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency with which a letter appears in the word.\n    Explanation: For example, if a letter appears twice in the word, it means the letter needs to be typed twice.\n\n# [degree adverb] \n    'minimal': Indicates the goal is to find the shortest possible time to type the word.\n    Explanation: The goal is to minimize the total time taken to type the word by considering the positions of the letters on the keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Determine the positions of each letter on the keyboard.\n    2. Calculate the time to type each letter based on its position relative to the previous letter.\n    3. Sum the times for all letters to get the total time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list is [1, 2, 2, 3, 3, 3, 4, 4, 4]. The number 3 appears three times and is the largest integer that meets the condition.\n    search([1, 1, 2, 2, 3]) = -1\n    Explanation: No integer appears as many times as itself, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can directly check if any number appears as many times as itself and return that number if it exists, otherwise return -1.\n\n## Prompt 3:\n\n# [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: The problem involves calculating the time to type a word based on the positions of the letters on the keyboard. The time to type a letter is determined by the absolute value of the difference between positions of the keys.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency with which a letter appears in the word.\n    Explanation: For example, if a letter appears twice in the word, it means the letter needs to be typed twice.\n\n# [degree adverb] \n    'minimal': Indicates the goal is to find the shortest possible time to type the word.\n    Explanation: The goal is to minimize the total time taken to type the word by considering the positions of the letters on the keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Determine the positions of each letter on the keyboard.\n    2. Calculate the time to type each letter based on its position relative to the previous letter.\n    3. Sum the times for all letters to get the total time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list is [1, 2, 2, 3, 3, 3, 4, 4, 4]. The number 3 appears three times and is the largest integer that meets the condition.\n    search([1, 1, 2, 2, 3]) = -1\n    Explanation: No integer appears as many times as itself, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can directly check if any number appears as many times as itself and return that number if it exists, otherwise return -1.\n", "requirement analysis:\nThe requirements involve calculating the time taken to type a word based on a custom keyboard layout. Each letter's position in the keyboard determines the time taken to type it. The initial position of the hand does not affect the calculation if it's aligned with the start of the word, but any misalignment incurs a time penalty. The output should reflect the total time required to type the word, considering these factors.\nrequirement pool:\n- Implement a function to calculate typing time based on keyboard layout.\n- Develop a system to handle multiple test cases efficiently.\n- Ensure the program can handle words up to 50 characters in length.\n- Allow for custom keyboard layouts to be inputted by the user.\n- Display the total typing time for each word typed.\nTo implement the typing time calculation, we will use Python due to its simplicity and efficiency. The main challenge is to map each letter to its position on the keyboard and calculate the time based on the position difference. We will create a function that takes the keyboard layout and the word as input and returns the total typing time.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key represents a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard layout is given as a string of 26 characters, each representing a different letter from 'a' to 'z'. This layout is used to determine the position of each letter on the keyboard.\n\n# [phrase showing quantity relationship]\n    'as many times': Indicates the frequency or number of times a letter appears in the word.\n    Explanation: For example, if a letter appears twice in the word, it means that the letter must be typed twice.\n\n# [degree adverb] \n    'minimal': Refers to the smallest or lowest possible time required to type the word.\n    Explanation: The goal is to find the minimal time required to type the word, considering the positions of the letters on the keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To implement the solution, we need to:\n    1. Map each letter to its position on the keyboard.\n    2. Calculate the time taken to type each letter based on the position difference from the previous letter.\n    3. Sum the times for all letters in the word to get the total typing time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list is [1, 2, 2, 3, 3, 3, 4, 4, 4]. The largest integer that appears at least as many times as itself is 3, as it appears 3 times, which is equal to its value.\n    search([5, 5, 4, 4, 4]) = -1\n    Explanation: The list is [5, 5, 4, 4, 4]. No integer appears at least as many times as itself. Therefore, the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle cases where no integer meets the condition by returning -1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the list is empty or contains only one element.\n        if not lst:\n            return -1\n        if len(lst) == 1:\n            return lst[0]\n", "requirement analysis:\nThe requirements involve calculating the time taken to type a word based on a given keyboard layout. Each letter's position in the keyboard determines the time taken to type it. The initial position of the hand does not affect the calculation if it's aligned with the start of the word, but any misalignment incurs a penalty time. The challenge is to efficiently compute this for multiple test cases.\nrequirement pool:\n- Implement a function to calculate the time to type a single letter based on the keyboard layout.\n- Develop a mechanism to handle multiple test cases efficiently.\n- Ensure the program can handle different keyboard layouts and words of varying lengths.\n- Optimize the algorithm to minimize unnecessary computations for better performance.\nTo solve this problem, we will create a Python function that calculates the time required to type a word based on a given keyboard layout. The function will first map each letter to its position on the keyboard, then iterate through the word to compute the total typing time based on the positions of consecutive letters. We will use a simple dictionary to store the positions of the letters for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key represents a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard layout is given as a string of 26 characters, each representing a different letter from 'a' to 'z'. This layout is used to determine the position of each letter on the keyboard.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the time calculation should consider the difference in positions between consecutive letters.\n    Explanation: For example, if the position of 'a' is 1 and the position of 'b' is 2, the time to type 'b' after 'a' is |2 - 1| = 1.\n\n# [degree adverb] \n    'smallest': Indicates that the goal is to find the minimal time required to type the word.\n    Explanation: The smallest time is achieved by considering the closest positions of consecutive letters on the keyboard.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The plan involves mapping each letter to its position on the keyboard and then iterating through the word to calculate the total typing time. This can be done simultaneously for each test case.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the largest integer that appears at least as many times as itself is 3, as it appears 3 times.\n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: The largest integer that appears at least as many times as itself is 3, as it appears 3 times.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: No integer appears at least as many times as itself, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We could set the original return answer to -1 and then find the largest integer that meets the need.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not lst:\n            return -1\n        frequency = {}\n        for num in lst:\n            if num in frequency:\n                frequency[num] += 1\n            else:\n                frequency[num] = 1\n        max_num = -1\n        for num, freq in frequency.items():\n            if num == freq and num > max_num:\n                max_num = num\n        return max_num if max_num != -1 else -1\n", "requirement analysis:\nThe requirements involve calculating the time taken to type a word based on a custom keyboard layout. The challenge lies in accurately mapping each letter's position and calculating the time for each transition. The system should be able to handle multiple test cases efficiently.\nrequirement pool:\n- Implement a function to calculate the time for each letter transition based on the keyboard layout.\n- Develop a system to handle multiple test cases efficiently.\n- Ensure the UI provides clear feedback on the typing time for each word.\n- Allow users to customize their keyboard layout for a personalized experience.\nTo solve this problem, we will create a Python function that calculates the total time required to type a word based on a custom keyboard layout. The function will map each letter's position on the keyboard, calculate the time for each transition, and sum these times to provide the total typing time. We will use a dictionary to store the positions of the letters for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key represents a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard layout is given as a string of 26 characters, each representing a different letter from 'a' to 'z'. This layout determines the positions of the keys on the keyboard.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the time calculation should consider the positions of the keys to find the difference in their positions.\n    Explanation: For example, if the key for 'a' is at position 1 and the key for 'b' is at position 2, the time to type 'b' after 'a' is the absolute value of the difference in positions, which is |2 - 1| = 1.\n\n# [degree adverb] \n    'smallest': Indicates that the time calculation should find the minimum possible time for each transition between letters.\n    Explanation: The smallest time is determined by the closest position on the keyboard to the current position of the hand.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The logic involves mapping each letter to its position on the keyboard, calculating the time for each transition between letters, and summing these times to get the total typing time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list is [1, 2, 2, 3, 3, 3, 4, 4, 4]. The number 3 appears at least 3 times, which is more than its value, and it is the largest number that meets this condition.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: The number 2 appears once, 3 appears twice, and 4 appears three times. None of these numbers appear more than themselves, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can directly check each number in the list to see if it appears more than or equal to itself and find the largest among those that do.\n\n# [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key represents a unique lowercase Latin letter.\n    Explanation: In this problem, the keyboard layout is given as a string of 26 characters, each representing a different letter from 'a' to 'z'. This layout determines the positions of the keys on the keyboard.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the time calculation should consider the positions of the keys to find the difference in their positions.\n    Explanation: For example, if the key for 'a' is at position 1 and the key for 'b' is at position 2, the time to type 'b' after 'a' is the absolute value of the difference in positions, which is |2 - 1| = 1.\n\n# [degree adverb] \n    'smallest': Indicates that the time calculation should find the minimum possible time for each transition between letters.\n    Explanation: The smallest time is determined by the closest position on the keyboard to the current position of the hand.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    The logic involves mapping each letter to its position on the keyboard, calculating the time for each transition between letters, and summing these times to get the total typing time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list is [1, 2, 2, 3, 3, 3, 4, 4, 4]. The number 3 appears at least 3 times, which is more than its value, and it is the largest number that meets this condition.\n    search([3, 3, 2, 4, 4, 4]) = -1\n    Explanation: The number 2 appears once, 3 appears twice, and 4 appears three times. None of these numbers appear more than themselves, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can directly check each number in the list to see if it appears more than or equal to itself and find the largest among those that do.\n", "requirement analysis:\nThe requirements involve calculating the time to type a word based on the positions of the keys on a custom keyboard. Each letter has a specific position, and the time to type a letter is determined by the difference in positions between the current and previous letters. The challenge is to efficiently compute this for multiple test cases, each with a different keyboard layout and word to type.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on the keyboard layout.\n- Handle multiple test cases efficiently.\n- Ensure the program can handle different keyboard layouts.\n- Optimize the time calculation for large inputs.\nTo solve this problem, we will use Python due to its simplicity and efficiency. The main challenge is to calculate the time to type a word based on the positions of the keys on a custom keyboard. We will create a function that takes the keyboard layout and the word as input and returns the total time to type the word. We will use a dictionary to store the positions of the keys for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, we need to calculate the time to type a word based on the positions of the keys on a given keyboard layout. The positions are determined by the order in which the letters appear in the keyboard string.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To solve this problem, we will follow these steps:\n    1. Read the keyboard layout and the word for each test case.\n    2. Create a dictionary to store the positions of each key.\n    3. For each word, calculate the time to type it by summing the absolute differences between the positions of consecutive letters.\n    4. Output the total time for each word.\n\n# [edge case] \n    Edge case 1:\n    Input:\n    keyboard = \"abcdefghijklmnopqrstuvwxyz\"\n    word = \"abc\"\n    Explanation: The positions of 'a', 'b', and 'c' are 0, 1, and 2 respectively. The time to type 'abc' is |0-0| + |1-0| + |2-1| = 0 + 1 + 1 = 2.\n    Edge case 2:\n    Input:\n    keyboard = \"pqrstuvwxyzabcdefghijklmno\"\n    word = \"hello\"\n    Explanation: The positions of 'h', 'e', 'l', 'l', and 'o' are 7, 4, 11, 11, and 14 respectively. The time to type 'hello' is |7-0| + |4-7| + |11-4| + |11-11| + |14-11| = 7 + 3 + 7 + 0 + 3 = 20.\n    Edge case 3:\n    Input:\n    keyboard = \"qwertyuiopasdfghjklzxcvbnm\"\n    word = \"codeforces\"\n    Explanation: The positions of each letter in 'codeforces' are 10, 11, 2, 3, 14, 5, 6, 7, 8, 9, 0, and 1 respectively. The total time to type 'codeforces' is the sum of the absolute differences between consecutive positions, which is 1 + 9 + 1 + 11 + 9 + 1 + 1 + 1 + 1 + 10 + 1 = 55.\n\n# [extra code for edge case]\n    No extra code is needed for handling the edge cases, as the logic provided in the plan can handle all the given test cases.\n", "requirement analysis:\nThe requirements involve calculating the time to type a word based on the positions of the letters on a custom keyboard. Each letter has a specific position, and the time to type a letter is determined by the difference in positions between the current and previous letters. The challenge is to efficiently calculate this time for each letter in a word across multiple test cases.\nrequirement pool:\n- Implement a function to calculate the time to type a word based on the keyboard layout.\n- Handle multiple test cases efficiently.\n- Ensure the code is optimized for both time and space complexity.\n- Provide clear and user-friendly output for the calculated times.\nTo solve this problem, we will use Python due to its simplicity and efficiency. The main challenge is to calculate the time to type a word based on the positions of the letters on a custom keyboard. We will create a function that takes the keyboard layout and the word as input and returns the total time to type the word. We will use a dictionary to store the positions of each letter on the keyboard for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique character.\n    Explanation: In this problem, we need to calculate the time to type a word based on the positions of the letters on a given keyboard. The keyboard is represented by a string of 26 unique lowercase Latin letters.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the value of an integer is greater than another integer.\n    Explanation: In the requirement, \"more than\" is used to specify that the integer must appear more times than its value in the list.\n\n# [degree adverb] \n    'largest': Indicates the maximum value among a set of values.\n    Explanation: In the requirement, \"largest\" is used to specify that we need to find the largest integer that appears at least as many times as itself.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Create a dictionary to store the positions of each letter on the keyboard.\n    2. Iterate through the word and calculate the time to type each letter based on the positions of the current and previous letters.\n    3. Sum the times for all letters to get the total time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list is [1, 2, 2, 3, 3, 3, 4, 4, 4]. The number 3 appears three times, which is more than its value (3). Therefore, the function should return 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle the case where no such integer exists by returning -1.\n\n## Prompt 3:\n[requirement]\nYou are given a keyboard with 26 keys, each corresponding to a unique lowercase Latin letter. You need to input the word s using this keyboard. The time to type each letter is determined by the absolute value of the difference between the positions of the current and previous keys, with no time spent on pressing the keys or placing the hand over the first letter. Determine the total time to print the word s, considering the initial hand position and keyboard layout.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n[plan]\nTo solve this problem, we will use Python due to its simplicity and efficiency. The main challenge is to calculate the time to type each letter based on the positions of the letters on a custom keyboard. We will create a function that takes the keyboard layout and the word as input and returns the total time to type the word. We will use a dictionary to store the positions of each letter on the keyboard for quick lookup.\n\n## Answer 3:\n\n# [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique character.\n    Explanation: In this problem, we need to calculate the time to type a word based on the positions of the letters on a given keyboard. The keyboard is represented by a string of 26 unique lowercase Latin letters.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the value of an integer is greater than another integer.\n    Explanation: In the requirement, \"more than\" is used to specify that the integer must appear more times than its value in the list.\n\n# [degree adverb] \n    'largest': Indicates the maximum value among a set of values.\n    Explanation: In the requirement, \"largest\" is used to specify that we need to find the largest integer that appears at least as many times as itself.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Create a dictionary to store the positions of each letter on the keyboard.\n    2. Iterate through the word and calculate the time to type each letter based on the positions of the current and previous letters.\n    3. Sum the times for all letters to get the total time.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the list is [1, 2, 2, 3, 3, 3, 4, 4, 4]. The number 3 appears three times, which is more than its value (3). Therefore, the function should return 3.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The original logic can handle the case where no such integer exists by returning -1.\n", "requirement analysis:\nThe requirements involve calculating the time to type a word based on the positions of the letters on a custom keyboard. Each letter has a specific position, and the time to type a letter is determined by the difference in positions between the current and previous letters. The challenge is to efficiently calculate this time for each letter in a word across multiple test cases.\nrequirement pool:\n- Implement a function to calculate the time to type each letter based on its position on the keyboard.\n- Handle multiple test cases efficiently.\n- Ensure the program can handle different keyboard layouts.\n- Optimize the algorithm for maximum performance.\nTo solve this problem, we will use Python due to its simplicity and efficiency. The main challenge is to calculate the time to type each letter based on the positions of the letters on the keyboard. We will create a function that takes the keyboard layout and the word as input and returns the total time to type the word. We will use a dictionary to store the positions of the letters on the keyboard for quick lookup.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, we need to determine the time taken to type a word based on the positions of the letters on the keyboard. The positions are crucial as they determine the time to move from one key to another.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the value of the integer must be greater than the integer itself.\n    Explanation: For example, if an integer appears 3 times, it must be greater than 3 to meet the condition.\n\n# [degree adverb] \n    'largest': Indicates that we need to find the largest integer that meets the condition.\n    Explanation: We need to find the largest integer in the list that appears more than or equal to itself.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Create a dictionary to store the positions of each letter on the keyboard.\n    2. Iterate through the word to calculate the time taken to type each letter.\n    3. Use the positions to compute the time for each transition between letters.\n    4. Sum the times to get the total time for the word.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the largest integer that appears at least as many times as itself is 3, as it appears 3 times.\n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: The largest integer that appears at least as many times as itself is 3, as it appears 3 times.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can directly find the largest integer that meets the condition.\n\n## Prompt 3:\n\n# [core concept]\n    'keyboard layout': The arrangement of keys on a keyboard, where each key corresponds to a unique lowercase Latin letter.\n    Explanation: In this problem, we need to determine the time taken to type a word based on the positions of the letters on the keyboard. The positions are crucial as they determine the time to move from one key to another.\n\n# [phrase showing quantity relationship]\n    'more than': Indicates that the value of the integer must be greater than the integer itself.\n    Explanation: For example, if an integer appears 3 times, it must be greater than 3 to meet the condition.\n\n# [degree adverb] \n    'largest': Indicates that we need to find the largest integer that meets the condition.\n    Explanation: We need to find the largest integer in the list that appears more than or equal to itself.\n\n# [code logic]\n    (check if there are steps should be considered simultaneously)\n    To solve this problem, we need to:\n    1. Create a dictionary to store the positions of each letter on the keyboard.\n    2. Iterate through the word to calculate the time taken to type each letter.\n    3. Use the positions to compute the time for each transition between letters.\n    4. Sum the times to get the total time for the word.\n\n# [edge case] \n    search([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 3\n    Explanation: In this case, the largest integer that appears at least as many times as itself is 3, as it appears 3 times.\n    search([2, 2, 3, 3, 3]) = 3\n    Explanation: The largest integer that appears at least as many times as itself is 3, as it appears 3 times.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. We can directly find the largest integer that meets the condition.\n", "requirement analysis:\nThe requirements involve calculating the time to type a word based on the position of each letter on a given keyboard. The initial hand position is not fixed and can affect the calculation if it is not aligned with the start of the word. The keyboard layout and initial hand positioning must be considered for accurate time calculation.\nrequirement pool:\n- Implement a function to calculate typing time based on keyboard layout and word length.\n- Allow customization of the initial hand position.\n- Optimize the keyboard layout for different user preferences.\n- Include a feature to analyze and suggest optimal keyboard layouts.\n- Integrate with popular text editors and games to provide real-time typing speed analysis.\nWe will implement a Python function that calculates the time required to type a word based on the position of each letter on a given keyboard. The function will take into account the initial hand position and the layout of the keyboard. To achieve this, we will map each letter to its position on the keyboard and calculate the time based on the difference in positions for consecutive letters.\nPlease read and understand the following inteperation before coding\n # [core concept]\n    'keyboard layout': Each key corresponds to a unique lowercase Latin letter, and the keys are arranged sequentially in one row.\n    'letter positions': The position of each letter on the keyboard can be determined by its index in the string.\n    'time calculation': The time to type a word is the sum of the absolute differences in positions between consecutive letters.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The function will follow these steps:\n    1. Read the keyboard layout and the word to be typed.\n    2. Map each letter to its position on the keyboard.\n    3. Calculate the time to type the word by summing the absolute differences in positions between consecutive letters.\n    4. Consider the initial hand position if it is not aligned with the start of the word.\n\n# [edge case] \n    Edge case 1:\n    Input:\n    keyboard = \"abcdefghijklmnopqrstuvwxyz\"\n    word = \"hello\"\n    initial hand position = 1\n    Explanation: The positions of the letters in the word \"hello\" are 8, 5, 12, 12, and 15. The time to type the word is |8-1| + |5-8| + |12-5| + |12-12| + |15-12| = 7 + 3 + 7 + 0 + 3 = 20 units.\n\n    Edge case 2:\n    Input:\n    keyboard = \"qwertyuiopasdfghjklzxcvbnm\"\n    word = \"code\"\n    initial hand position = 10\n    Explanation: The positions of the letters in the word \"code\" are 12, 3, 5, and 4. The time to type the word is |12-10| + |3-12| + |5-3| + |4-5| = 2 + 9 + 2 + 1 = 14 units.\n\n    Edge case 3:\n    Input:\n    keyboard = \"zyxwvutsrqponmlkjihgfedcba\"\n    word = \"algorithm\"\n    initial hand position = 1\n    Explanation: The positions of the letters in the word \"algorithm\" are 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, and 16. The time to type the word is |26-1| + |25-26| + |24-25| + |23-24| + |22-23| + |21-22| + |20-21| + |19-20| + |18-19| + |17-18| + |16-17| = 25 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 35 units.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan can handle any initial hand position and keyboard layout.\n"], "scores": [], "pass_results": [false, false, false, false, false, true, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 2, "round": 837, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "mutate_method": "rephrase_one", "parent_index": 404}
